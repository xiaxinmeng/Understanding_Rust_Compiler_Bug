{"url": "https://api.github.com/repos/rust-lang/rust/issues/110623", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110623/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110623/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110623/events", "html_url": "https://github.com/rust-lang/rust/issues/110623", "id": 1677306643, "node_id": "I_kwDOAAsO6M5j-asT", "number": 110623, "title": "ICE: \"no errors encountered even though `delay_span_bug` issued\" in recursive impl", "user": {"login": "WardBrian", "id": 31640292, "node_id": "MDQ6VXNlcjMxNjQwMjky", "avatar_url": "https://avatars.githubusercontent.com/u/31640292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WardBrian", "html_url": "https://github.com/WardBrian", "followers_url": "https://api.github.com/users/WardBrian/followers", "following_url": "https://api.github.com/users/WardBrian/following{/other_user}", "gists_url": "https://api.github.com/users/WardBrian/gists{/gist_id}", "starred_url": "https://api.github.com/users/WardBrian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WardBrian/subscriptions", "organizations_url": "https://api.github.com/users/WardBrian/orgs", "repos_url": "https://api.github.com/users/WardBrian/repos", "events_url": "https://api.github.com/users/WardBrian/events{/privacy}", "received_events_url": "https://api.github.com/users/WardBrian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": {"login": "zirconium-n", "id": 20034023, "node_id": "MDQ6VXNlcjIwMDM0MDIz", "avatar_url": "https://avatars.githubusercontent.com/u/20034023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zirconium-n", "html_url": "https://github.com/zirconium-n", "followers_url": "https://api.github.com/users/zirconium-n/followers", "following_url": "https://api.github.com/users/zirconium-n/following{/other_user}", "gists_url": "https://api.github.com/users/zirconium-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/zirconium-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zirconium-n/subscriptions", "organizations_url": "https://api.github.com/users/zirconium-n/orgs", "repos_url": "https://api.github.com/users/zirconium-n/repos", "events_url": "https://api.github.com/users/zirconium-n/events{/privacy}", "received_events_url": "https://api.github.com/users/zirconium-n/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "zirconium-n", "id": 20034023, "node_id": "MDQ6VXNlcjIwMDM0MDIz", "avatar_url": "https://avatars.githubusercontent.com/u/20034023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zirconium-n", "html_url": "https://github.com/zirconium-n", "followers_url": "https://api.github.com/users/zirconium-n/followers", "following_url": "https://api.github.com/users/zirconium-n/following{/other_user}", "gists_url": "https://api.github.com/users/zirconium-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/zirconium-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zirconium-n/subscriptions", "organizations_url": "https://api.github.com/users/zirconium-n/orgs", "repos_url": "https://api.github.com/users/zirconium-n/repos", "events_url": "https://api.github.com/users/zirconium-n/events{/privacy}", "received_events_url": "https://api.github.com/users/zirconium-n/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2023-04-20T19:38:38Z", "updated_at": "2023-04-21T06:44:35Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\nhow to create smaller examples.\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\n-->\n\nSome code I wrote for the 2022 advent of code fails to compile under the newly released 1.69. It compiled previously under 1.67 and 1.68. \n\n### Code\n\n```Rust\nuse std::{collections::BTreeMap, num::ParseIntError, str::FromStr};\n\nenum FileSystem {\n    File(usize),\n    Directory(BTreeMap<String, FileSystem>),\n}\n\nimpl FromStr for FileSystem {\n    type Err = ParseIntError;\n\n    fn from_str(s: &str) -> Result<Self, Self::Err> {\n        if s.starts_with(\"dir\") {\n            Ok(Self::new_dir())\n        } else {\n            Ok(Self::File(s.split_whitespace().next().unwrap().parse()?))\n        }\n    }\n}\n\nimpl FileSystem {\n    fn new_dir() -> FileSystem {\n        FileSystem::Directory(BTreeMap::new())\n    }\n\n    fn insert(&mut self, name: String, other: FileSystem) -> Option<FileSystem> {\n        match self {\n            FileSystem::File(_) => panic!(\"can only insert into directory!\"),\n            FileSystem::Directory(tree) => tree.insert(name, other),\n        }\n    }\n\n    // Recursively build a tree from commands. This uses (abuses?)\n    // the fact that `cd /` only appears at the start and that\n    // subsequent `cd`s can only move ONE level to use the recursion\n    // stack as the filesystem stack\n    fn build<'a>(\n        &mut self,\n        mut commands: impl Iterator<Item = &'a str> + 'a,\n    ) -> Option<impl Iterator<Item = &'a str> + 'a> {\n        let cmd = commands.next()?;\n        let mut elements = cmd.lines();\n        match elements.next().map(str::trim) {\n            Some(\"cd /\") | None => self.build(commands),\n            Some(\"cd ..\") => {\n                // return to higher scope\n                Some(commands)\n            }\n            Some(\"ls\") => {\n                for item in elements {\n                    let name = item.split_whitespace().last().unwrap();\n                    let prior = self.insert(name.to_string(), item.parse().unwrap());\n                    debug_assert!(prior.is_none());\n                }\n                // continue on\n                self.build(commands)\n            }\n            Some(other_cd) => {\n                let name = other_cd\n                    .trim()\n                    .strip_prefix(\"cd \")\n                    .expect(\"expected a cd command\");\n                let mut directory = FileSystem::new_dir();\n                let further_commands = directory.build(commands);\n                self.insert(name.to_string(), directory);\n                self.build(further_commands?) // THIS LINE FAILS TO COMPILE\n            }\n        }\n    }\n}\n\nfn main() {}\n\n```\n\n\n### Meta\n<!--\nIf you're using the stable version of the compiler, you should also check if the\nbug also exists in the beta or nightly versions.\n-->\n\n`rustc --version --verbose`:\n```\nrustc 1.69.0 (84c898d65 2023-04-16)\nbinary: rustc\ncommit-hash: 84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc\ncommit-date: 2023-04-16\nhost: x86_64-unknown-linux-gnu\nrelease: 1.69.0\nLLVM version: 15.0.7\n```\n\nI also tried with nightly:\n\n```\nrustc 1.71.0-nightly (39c6804b9 2023-04-19)\nbinary: rustc\ncommit-hash: 39c6804b92aa202369e402525cee329556bc1db0\ncommit-date: 2023-04-19\nhost: x86_64-unknown-linux-gnu\nrelease: 1.71.0-nightly\nLLVM version: 16.0.2\n```\n\n### Error output\n\n```\nerror: internal compiler error: no errors encountered even though `delay_span_bug` issued\n\nerror: internal compiler error: opaque type with non-universal region substs\n  --> 7/src/main.rs:65:17\n   |\n65 |                 self.build(further_commands?)\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: delayed at    0: <rustc_errors::HandlerInner>::emit_diagnostic\n              1: <rustc_errors::Handler>::delay_span_bug::<rustc_span::span_encoding::Span, &str>\n              2: <rustc_borrowck::region_infer::RegionInferenceContext>::infer_opaque_types::{closure#0}::{closure#2}\n              3: rustc_middle::ty::util::fold_list::<rustc_middle::ty::fold::RegionFolder, rustc_middle::ty::subst::GenericArg, <&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_type_ir::fold::TypeFoldable<rustc_middle::ty::context::TyCtxt>>::try_fold_with<rustc_middle::ty::fold::RegionFolder>::{closure#0}>\n              4: <rustc_borrowck::region_infer::RegionInferenceContext>::infer_opaque_types\n              5: rustc_borrowck::nll::compute_regions\n              6: rustc_borrowck::do_mir_borrowck\n              7: rustc_borrowck::mir_borrowck\n              8: <rustc_borrowck::provide::{closure#0} as core::ops::function::FnOnce<(rustc_middle::ty::context::TyCtxt, rustc_span::def_id::LocalDefId)>>::call_once\n              9: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::queries::mir_borrowck, rustc_query_impl::plumbing::QueryCtxt>\n             10: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::mir_borrowck\n             11: rustc_hir_analysis::collect::type_of::type_of\n             12: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::queries::type_of, rustc_query_impl::plumbing::QueryCtxt>\n             13: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::type_of\n             14: rustc_hir_analysis::check::check::check_mod_item_types\n             15: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::queries::check_mod_item_types, rustc_query_impl::plumbing::QueryCtxt>\n             16: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::check_mod_item_types\n             17: <rustc_middle::hir::map::Map>::for_each_module::<rustc_hir_analysis::check_crate::{closure#6}::{closure#0}>\n             18: rustc_hir_analysis::check_crate\n             19: rustc_interface::passes::analysis\n             20: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::queries::analysis, rustc_query_impl::plumbing::QueryCtxt>\n             21: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\n             22: <rustc_middle::ty::context::GlobalCtxt>::enter::<rustc_driver_impl::run_compiler::{closure#1}::{closure#2}::{closure#4}, core::result::Result<(), rustc_span::ErrorGuaranteed>>\n             23: rustc_span::with_source_map::<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}::{closure#0}>\n             24: std::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>\n             25: <<std::thread::Builder>::spawn_unchecked_<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#1} as core::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\n             26: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\n                        at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/alloc/src/boxed.rs:1987:9\n             27: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\n                        at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/alloc/src/boxed.rs:1987:9\n             28: std::sys::unix::thread::Thread::new::thread_start\n                        at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/sys/unix/thread.rs:108:17\n             29: start_thread\n                        at ./nptl/./nptl/pthread_create.c:442:8\n             30: clone3\n                        at ./misc/../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\n           \n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.69.0 (84c898d65 2023-04-16) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: --crate-type bin -C embed-bitcode=no -C debuginfo=2 -C incremental=[REDACTED]\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\nend of query stack\nwarning: `seven` (bin \"seven\") generated 2 warnings\nerror: could not compile `seven`; 2 warnings emitted\n```\n\n<!--\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\n-->\n<details><summary><strong>Backtrace</strong></summary>\n<p>\n\n```\nerror: internal compiler error: no errors encountered even though `delay_span_bug` issued\n\nerror: internal compiler error: opaque type with non-universal region substs\n  --> 7/src/main.rs:65:17\n   |\n65 |                 self.build(further_commands?)\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: delayed at    0: <rustc_errors::HandlerInner>::emit_diagnostic\n              1: <rustc_errors::Handler>::delay_span_bug::<rustc_span::span_encoding::Span, &str>\n              2: <rustc_borrowck::region_infer::RegionInferenceContext>::infer_opaque_types::{closure#0}::{closure#2}\n              3: rustc_middle::ty::util::fold_list::<rustc_middle::ty::fold::RegionFolder, rustc_middle::ty::subst::GenericArg, <&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_type_ir::fold::TypeFoldable<rustc_middle::ty::context::TyCtxt>>::try_fold_with<rustc_middle::ty::fold::RegionFolder>::{closure#0}>\n              4: <rustc_borrowck::region_infer::RegionInferenceContext>::infer_opaque_types\n              5: rustc_borrowck::nll::compute_regions\n              6: rustc_borrowck::do_mir_borrowck\n              7: rustc_borrowck::mir_borrowck\n              8: <rustc_borrowck::provide::{closure#0} as core::ops::function::FnOnce<(rustc_middle::ty::context::TyCtxt, rustc_span::def_id::LocalDefId)>>::call_once\n              9: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::queries::mir_borrowck, rustc_query_impl::plumbing::QueryCtxt>\n             10: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::mir_borrowck\n             11: rustc_hir_analysis::collect::type_of::type_of\n             12: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::queries::type_of, rustc_query_impl::plumbing::QueryCtxt>\n             13: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::type_of\n             14: rustc_hir_analysis::check::check::check_mod_item_types\n             15: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::queries::check_mod_item_types, rustc_query_impl::plumbing::QueryCtxt>\n             16: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::check_mod_item_types\n             17: <rustc_middle::hir::map::Map>::for_each_module::<rustc_hir_analysis::check_crate::{closure#6}::{closure#0}>\n             18: rustc_hir_analysis::check_crate\n             19: rustc_interface::passes::analysis\n             20: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::queries::analysis, rustc_query_impl::plumbing::QueryCtxt>\n             21: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\n             22: <rustc_middle::ty::context::GlobalCtxt>::enter::<rustc_driver_impl::run_compiler::{closure#1}::{closure#2}::{closure#4}, core::result::Result<(), rustc_span::ErrorGuaranteed>>\n             23: rustc_span::with_source_map::<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}::{closure#0}>\n             24: std::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>\n             25: <<std::thread::Builder>::spawn_unchecked_<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#1} as core::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\n             26: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\n                        at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/alloc/src/boxed.rs:1987:9\n             27: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\n                        at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/alloc/src/boxed.rs:1987:9\n             28: std::sys::unix::thread::Thread::new::thread_start\n                        at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/sys/unix/thread.rs:108:17\n             29: start_thread\n                        at ./nptl/./nptl/pthread_create.c:442:8\n             30: clone3\n                        at ./misc/../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\n           \n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.69.0 (84c898d65 2023-04-16) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: --crate-type bin -C embed-bitcode=no -C debuginfo=2 -C incremental=[REDACTED]\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\nend of query stack\nwarning: `seven` (bin \"seven\") generated 2 warnings\nerror: could not compile `seven`; 2 warnings emitted\n```\n\n</p>\n</details>\n\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"zirconium-n\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110623/timeline", "performed_via_github_app": null, "state_reason": null}