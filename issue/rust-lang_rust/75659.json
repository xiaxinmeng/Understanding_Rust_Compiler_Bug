{"url": "https://api.github.com/repos/rust-lang/rust/issues/75659", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75659/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75659/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75659/events", "html_url": "https://github.com/rust-lang/rust/issues/75659", "id": 680834027, "node_id": "MDU6SXNzdWU2ODA4MzQwMjc=", "number": 75659, "title": "Badly optimized small bytes array search", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-18T09:13:39Z", "updated_at": "2020-10-01T20:32:40Z", "closed_at": "2020-10-01T20:32:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "```rust\r\ntype T = u8;\r\n\r\npub fn foo1(x: T, data: &[T; 1]) -> bool {\r\n    data.contains(&x)\r\n}\r\n\r\npub fn foo2(x: T, data: &[T; 2]) -> bool {\r\n    data.contains(&x)\r\n}\r\n\r\npub fn foo3(x: T, data: &[T; 3]) -> bool {\r\n    data.contains(&x)\r\n}\r\n\r\npub fn foo4(x: T, data: &[T; 4]) -> bool {\r\n    data.contains(&x)\r\n}\r\n\r\npub fn foo16(x: T, data: &[T; 16]) -> bool {\r\n    data.contains(&x)\r\n}\r\n```\r\nWhen T is u16, u32, u64 or u128 the generated code is reasonable, like for u32 (rustc 1.47.0-nightly 7e6d6e5f5 2020-08-16, using -C opt-level=3 and more):\r\n\r\n```asm\r\nexample::foo1:\r\n        cmp     dword ptr [rsi], edi\r\n        sete    al\r\n        ret\r\n\r\nexample::foo2:\r\n        cmp     dword ptr [rsi], edi\r\n        sete    cl\r\n        cmp     dword ptr [rsi + 4], edi\r\n        sete    al\r\n        or      al, cl\r\n        ret\r\n\r\nexample::foo3:\r\n        cmp     dword ptr [rsi], edi\r\n        jne     .LBB2_2\r\n        mov     al, 1\r\n        ret\r\n.LBB2_2:\r\n        cmp     dword ptr [rsi + 4], edi\r\n        sete    cl\r\n        cmp     dword ptr [rsi + 8], edi\r\n        sete    al\r\n        or      al, cl\r\n        ret\r\n\r\nexample::foo4:\r\n        cmp     dword ptr [rsi], edi\r\n        je      .LBB3_3\r\n        cmp     dword ptr [rsi + 4], edi\r\n        jne     .LBB3_2\r\n.LBB3_3:\r\n        mov     al, 1\r\n        ret\r\n.LBB3_2:\r\n        cmp     dword ptr [rsi + 8], edi\r\n        sete    cl\r\n        cmp     dword ptr [rsi + 12], edi\r\n        sete    al\r\n        or      al, cl\r\n        ret\r\n\r\nexample::foo16:\r\n        xor     eax, eax\r\n.LBB4_1:\r\n        cmp     rax, 64\r\n        je      .LBB4_2\r\n        cmp     dword ptr [rsi + rax], edi\r\n        lea     rax, [rax + 4]\r\n        jne     .LBB4_1\r\n        mov     al, 1\r\n        ret\r\n.LBB4_2:\r\n        xor     eax, eax\r\n        ret\r\n```\r\nBut when T is u8 or i8 it looks sub-optional for small arrays, because for such tiny arrays the overhead of calling another functions is bad:\r\n\r\n```asm\r\nexample::foo1:\r\n        push    rax\r\n        mov     byte ptr [rsp + 7], dil\r\n        lea     rdi, [rsp + 7]\r\n        mov     edx, 1\r\n        call    qword ptr [rip + <u8 as core::slice::SliceContains>::slice_contains@GOTPCREL]\r\n        pop     rcx\r\n        ret\r\n\r\nexample::foo2:\r\n        push    rax\r\n        mov     byte ptr [rsp + 7], dil\r\n        lea     rdi, [rsp + 7]\r\n        mov     edx, 2\r\n        call    qword ptr [rip + <u8 as core::slice::SliceContains>::slice_contains@GOTPCREL]\r\n        pop     rcx\r\n        ret\r\n\r\nexample::foo3:\r\n        push    rax\r\n        mov     byte ptr [rsp + 7], dil\r\n        lea     rdi, [rsp + 7]\r\n        mov     edx, 3\r\n        call    qword ptr [rip + <u8 as core::slice::SliceContains>::slice_contains@GOTPCREL]\r\n        pop     rcx\r\n        ret\r\n\r\nexample::foo4:\r\n        push    rax\r\n        mov     byte ptr [rsp + 7], dil\r\n        lea     rdi, [rsp + 7]\r\n        mov     edx, 4\r\n        call    qword ptr [rip + <u8 as core::slice::SliceContains>::slice_contains@GOTPCREL]\r\n        pop     rcx\r\n        ret\r\n\r\nexample::foo16:\r\n        push    rax\r\n        mov     byte ptr [rsp + 7], dil\r\n        lea     rdi, [rsp + 7]\r\n        mov     edx, 16\r\n        call    qword ptr [rip + <u8 as core::slice::SliceContains>::slice_contains@GOTPCREL]\r\n        pop     rcx\r\n        ret\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75659/timeline", "performed_via_github_app": null, "state_reason": "completed"}