{"url": "https://api.github.com/repos/rust-lang/rust/issues/43291", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43291/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43291/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43291/events", "html_url": "https://github.com/rust-lang/rust/issues/43291", "id": 243466799, "node_id": "MDU6SXNzdWUyNDM0NjY3OTk=", "number": 43291, "title": "(0-1) as *const T triggers horribly stupid behavior", "user": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2017-07-17T17:21:03Z", "updated_at": "2018-01-04T12:46:41Z", "closed_at": "2018-01-04T12:46:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "During this issue all examples will be done using x86_64.\r\n\r\nWhen you do `0 as *const T` the type of the integer literal is inferred to be `usize`. This is fine.\r\nWhen you do `!0 as *const T` you can observe that the resulting address is `0xffffffffffffffff` which is fine.\r\n\r\nWhen doing FFI sometimes a handle type will be represented as a raw pointer type and sometimes there will be constants of that handle type initialized to negative values, which is entirely normal.\r\nThe user's first choice is to try `-1 as *const T` which will of course fail because the type of the integer literal is inferred to be `usize` which cannot be negated because Rust hates me.\r\nIdeally Rust would be able to infer the type as `isize` instead of `usize` in this case, but I know better than to expect Rust to be actually helpful.\r\n\r\nThe issue is if the user tries to be clever and do `(0-1) as *const T` which somehow *seems* to work but in reality they are triggering a combination of two horrible design decisions (or maybe bugs, it can be hard to tell sometimes) resulting in a giant footgun.\r\n\r\n1. The type of those integer literals is being inferred as `i32` instead of `usize`. Rust earlier refused to infer the type as `isize` instead of `usize`, so why is it now inferring the type as `i32`?\r\n2. The conversion from `i32` to `*const T` does **zero** extension instead of sign extension which is *different* than what C++ does. https://github.com/rust-lang/rust/issues/42915\r\n\r\nAs a result, if you check the resulting address of `(0-1) as *const T` you'll see that it gives `0xffffffff` which is *wrong*.\r\nThe correct answer is achieved by doing `-1isize as *const T` which results in the correct address of `0xffffffffffffffff`.\r\n\r\nIdeally both of those two points above would be fixed, but at the very least there should be a very loud warning that you are doing something very horribly wrong.\r\n\r\nAnd yes, I found examples of this in winapi so some care will be needed when fixing this in order to not break the ecosystem.\r\n\r\n### Possible solutions\r\n\r\n1. Add a lint to forbid casts between pointer types and integer types other than usize/isize.\r\n2. Change casts from signed integer types to pointer types to perform signed conversion.\r\n3. Fix the inference issue causing the literals to be inferred as `i32` instead of `usize`.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43291/reactions", "total_count": 13, "+1": 0, "-1": 0, "laugh": 12, "hooray": 0, "confused": 1, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43291/timeline", "performed_via_github_app": null, "state_reason": "completed"}