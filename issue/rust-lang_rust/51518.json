{"url": "https://api.github.com/repos/rust-lang/rust/issues/51518", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51518/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51518/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51518/events", "html_url": "https://github.com/rust-lang/rust/issues/51518", "id": 331564453, "node_id": "MDU6SXNzdWUzMzE1NjQ0NTM=", "number": 51518, "title": "Compiler doesn't suggest missing method that is implemented for different type parameter", "user": {"login": "hannobraun", "id": 85732, "node_id": "MDQ6VXNlcjg1NzMy", "avatar_url": "https://avatars.githubusercontent.com/u/85732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hannobraun", "html_url": "https://github.com/hannobraun", "followers_url": "https://api.github.com/users/hannobraun/followers", "following_url": "https://api.github.com/users/hannobraun/following{/other_user}", "gists_url": "https://api.github.com/users/hannobraun/gists{/gist_id}", "starred_url": "https://api.github.com/users/hannobraun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hannobraun/subscriptions", "organizations_url": "https://api.github.com/users/hannobraun/orgs", "repos_url": "https://api.github.com/users/hannobraun/repos", "events_url": "https://api.github.com/users/hannobraun/events{/privacy}", "received_events_url": "https://api.github.com/users/hannobraun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-12T12:23:58Z", "updated_at": "2019-11-10T07:26:47Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following API that allows us to control some piece of hardware, while providing some compile-time guarantees by tracking the hardware state as a type parameter:\r\n``` rust\r\npub struct Hardware<State>(State);\r\n\r\nimpl Hardware<Disabled> {\r\n    pub fn new() -> Self {\r\n        Hardware(Disabled)\r\n    }\r\n\r\n    pub fn enable(self) -> Hardware<Enabled> {\r\n        Hardware(Enabled)\r\n    }\r\n}\r\n\r\nimpl Hardware<Enabled> {\r\n    pub fn do_stuff(&mut self) {}\r\n}\r\n\r\n\r\npub struct Enabled;\r\npub struct Disabled;\r\n```\r\n\r\n`Hardware` is created in the `Disabled` state and needs to be `enable`d before anything can be done with it.\r\n\r\nThe following piece of code tries to `do_stuff` without `enable`ing first:\r\n``` rust\r\nlet hw = Hardware::new();\r\nhw.do_stuff();\r\n```\r\n\r\nIt fails with the following error message:\r\n```\r\nerror[E0599]: no method named `do_stuff` found for type `Hardware<Disabled>` in the current scope\r\n  --> src/main.rs:24:8\r\n   |\r\n1  | pub struct Hardware<State>(State);\r\n   | ---------------------------------- method `do_stuff` not found for this\r\n...\r\n24 |     hw.do_stuff();\r\n   |        ^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0599`.\r\n```\r\n\r\nI think this error message is misleading, as the method does exist. It's just not available with this specific type parameter. This could be highly confusing to someone who isn't used to this kind of API.\r\n\r\nI believe that the compiler should suggest the method, and note that it would be available, if the type parameter were different. Similarly to how it would suggest a trait method for a trait that isn't imported into the current scope. Ideally, I would like the compiler to suggest calling the `enable` method, as that would put the API into a state that would allow `do_stuff` to be called.\r\n\r\nI'm aware that method suggestions like this were removed some time ago ([issue](https://github.com/rust-lang/rust/issues/42929), [PR](https://github.com/rust-lang/rust/pull/46461)). Adding an attribute to mark function that should be suggested for state transitions like this [has been suggested before](https://github.com/rust-lang/rust/issues/42929#issuecomment-345792124) (@zackmdavis [seemed interested in working on this](https://github.com/rust-lang/rust/issues/42929#issuecomment-345914556)). From my perspective as an API author, such an attribute would be an excellent way to improve the user experience when using APIs like this.\r\n\r\ncc @oli-obk (We talked about this at RustFest. Sorry for taking so long to open this issue.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51518/timeline", "performed_via_github_app": null, "state_reason": null}