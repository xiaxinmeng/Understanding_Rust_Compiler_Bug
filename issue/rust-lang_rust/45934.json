{"url": "https://api.github.com/repos/rust-lang/rust/issues/45934", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45934/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45934/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45934/events", "html_url": "https://github.com/rust-lang/rust/issues/45934", "id": 273153895, "node_id": "MDU6SXNzdWUyNzMxNTM4OTU=", "number": 45934, "title": "Macros 2.0: Span::def_site() vs Span::call_site()", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 632573348, "node_id": "MDU6TGFiZWw2MzI1NzMzNDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros-2.0", "name": "A-macros-2.0", "color": "f7e101", "default": false, "description": "Area: declarative macros 2.0, https://github.com/rust-lang/rust/issues/39412"}], "state": "open", "locked": false, "assignee": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2017-11-11T15:42:31Z", "updated_at": "2018-01-25T13:01:52Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Up until recently I've considered these two function calls in `proc_macro`, `Span::default()` and `Span::call_site()` relatively different. I'm not realizing, however, that they're actually quite significantly different depending on what you're doing in a procedural macro!\r\n\r\nIn working with the [gnome-class macro](https://github.com/federicomenaquintero/gnome-class) we've ended up getting a good deal more experience with the procedural macro system. This macro is using dependencies like [`quote`](https://github.com/dtolnay/quote), [`syn`](https://github.com/dtolnay/syn), and [`proc-macro2`](https://github.com/alexcrichton/proc-macro2) to parse and generate code. The code itself contains a mixture of modules and macro_rules-like macro expansions. \r\n\r\nWhen we tried to enable the `unstable` feature in `proc-macro2`, which switches it to use the \"real\" `proc_macro` APIs and preserve span information, it turned out everything broke! When digging into this I found that everything we were experiencing was related to the distinction between the `default` and `call_site` functions.\r\n\r\nSo as a bit of background, the `gnome_class!` macro uses a few methods to manufacture a `TokenStream`. Primarily it uses the `quote!` macro from the [`quote` crate](https://github.com/dtolnay/quote), which primarily at this time  uses [`parse`](https://github.com/dtolnay/quote/blob/67a9d9ff867ce002cd7d488ce5fe0076781f4bb1/src/lib.rs#L73-L76) for most tokens to generate a `TokenTree`. Namely part of the `quote!` macro will call `stringify!` on each token to get reparsed at runtime and turned into a list of tokens. For delimiters and such the `quote` crate currently creates a [`default` span](https://github.com/dtolnay/quote/blob/67a9d9ff867ce002cd7d488ce5fe0076781f4bb1/src/lib.rs#L78-L83). \r\n\r\nAdditionally both @federicomenaquintero and I were novices at the procedural macro/hygiene/span systems, so we didn't have a lot of info coming in! Now though we think we're a bit more up to speed :). The rest of this issue will be focused on \"weird errors\" that we had to work backwards to figure out how to solve. This all, to me at least, seems like a blocker for stabilization in the sense that I wouldn't wish this experience on others.\r\n\r\nI'm not really sure what the conclusions from this would be though. The behavior below may be bugs in the compiler or bugs in the libraries we're using, I'm not sure! I'll write up some thoughts at the end though. In general though I wanted to just detail all that we went through in discovering this and showing how the current behavior that we have ends up being quite confusing.\r\n\r\n# Examples of odd errors\r\n\r\nIn any case, I've created an [example project](https://github.com/alexcrichton/weird-proc-macro-spans) showcasing a number of the \"surprises\" (some bugs?) that we ran into. I'll try to recatalog them here:\r\n\r\n## Using `parse` breaks `super`\r\n\r\nThe first bug that was found was related to generating a program that looked like:\r\n\r\n```rust\r\nmod foo {\r\n    use super::*;\r\n}\r\n```\r\n\r\nIt turns out that if you use `parse` to generate the token `super` [it doesn't work](https://github.com/alexcrichton/weird-proc-macro-spans/blob/af3b0ac5a5376679f8a2017bed758884e6df4e8e/src/lib.rs#L55-L72)! If you set the span of `super` to `default`, however, [it does indeed work](https://github.com/alexcrichton/weird-proc-macro-spans/blob/af3b0ac5a5376679f8a2017bed758884e6df4e8e/src/lib.rs#L74-L88).\r\n\r\nI was pretty surprised by this (and the odd error messages). I'm not really sure why the `parse` span was not allowing it to resolve, but I imagine it was related to hygiene? I submitted https://github.com/dtolnay/quote/pull/51 which I think might fix this but I wasn't sure if that was the right fix...\r\n\r\nIs that the right fix for `quote`? Should it be using `default` wherever it can? I originally though that but then ran into...\r\n\r\n## Using `Span::default` means you can't import from yourself\r\n\r\nThis second bug was found relating to the program that looks like:\r\n\r\n```rust\r\nstruct A;\r\nmod foo {\r\n    use super::A;\r\n}\r\n```\r\n\r\nHere we have a [failing procedural macro](https://github.com/alexcrichton/weird-proc-macro-spans/blob/af3b0ac5a5376679f8a2017bed758884e6df4e8e/src/lib.rs#L94-L113) despite the usage of `Span::default` on all tokens. This means that *by default* all modules generated via `quote!`, if we were to switch spans to `Span::default`, would not be able to import from one another it looks like? But maybe this is only related to `super`? I'm not quite sure..\r\n\r\nIt also turns out that [this does indeed work](https://github.com/alexcrichton/weird-proc-macro-spans/blob/af3b0ac5a5376679f8a2017bed758884e6df4e8e/src/lib.rs#L115-L118) if we use `Span::call_site` by default everywhere. I'm not really sure why, but it apparently works!\r\n\r\n## Using `Span::default` means you can't import generated structs\r\n\r\nNext up we had a bug related to:\r\n\r\n```rust\r\npub struct A;\r\n```\r\n\r\nIt turns out that if these tokens are using `Span::default` this can't actually be used! In [this test case](https://github.com/alexcrichton/weird-proc-macro-spans/blob/af3b0ac5a5376679f8a2017bed758884e6df4e8e/tests/failure3.rs) you get an error about an unresolved import.\r\n\r\nLike with before though if we [use `call_site` as a span everywhere](https://github.com/alexcrichton/weird-proc-macro-spans/blob/af3b0ac5a5376679f8a2017bed758884e6df4e8e/src/lib.rs#L132-L135) this case does indeed work.\r\n\r\nIs this expected? This means, I think, that all tokens with a `Default` span can't be improted outside of the procedural macro. \r\n\r\n## Using `Span::default` means you can't use external crates\r\n\r\nNext we took a look at a program like:\r\n\r\n```rust\r\nuse std::mem;\r\n```\r\n\r\nWhen [generating these tokens with `Span::default`](https://github.com/alexcrichton/weird-proc-macro-spans/blob/af3b0ac5a5376679f8a2017bed758884e6df4e8e/src/lib.rs#L140-L151) it turns out that this becomes an unresolved import! That is, the usage of `Span::default` seems like it's putting it in an entirely new namespace without access to even `std` at the root. Coming from the perspective of not knowing a lot about spans/hygiene I found this a little confusing :)\r\n\r\nAs with the previous and remaining cases [using `call_site` as a span](https://github.com/alexcrichton/weird-proc-macro-spans/blob/af3b0ac5a5376679f8a2017bed758884e6df4e8e/src/lib.rs#L153-L156) does indeed get this working.\r\n\r\nNaturally the error message was pretty confusing here, but I guess this is expected? Hygiene I think necessitates this? Unsure...\r\n\r\n## Using `Span::default` means you can't import from yourself\r\n\r\nNext up we have a program like\r\n\r\n```rust\r\nuse foo::*;\r\nmod foo {\r\n}\r\n```\r\n\r\nHere [if we use `Span::default` everywhere](https://github.com/alexcrichton/weird-proc-macro-spans/blob/af3b0ac5a5376679f8a2017bed758884e6df4e8e/src/lib.rs#L158-L178) this program will not compile with the import becoming unresolved. For us this seemed to imply that if we generated new modules in a macro we basically can't use imports! \r\n\r\nAs per usual [respanning with `call_site` everywhere](https://github.com/alexcrichton/weird-proc-macro-spans/blob/af3b0ac5a5376679f8a2017bed758884e6df4e8e/src/lib.rs#L180-L183) fixes this but I'd imagine has different hygiene implications. I'm not sure if this behavior was intended, although it seemed like it may be a bug in rustc?\r\n\r\n## Using `Span::default` precludes working with \"non hygienic macros\"\r\n\r\nThis is a particularly interesting use case. The `gnome_class!` *procedural* macro internally delegates to the `glib_wrapper!` macro_rules macro in the expanded tokens. The `glib_wrapper!` macro, however, in its current state does not work in an empty module but rather requires imports like `std::ptr` in the environment. With `Span::default`, however, the generated tokens in `glib_wrapper!` couldn't see the tokens we generated with `gnome_class!`.\r\n\r\nFor example if in one crate we have a macro like\r\n\r\n```rust\r\n#[macro_export]\r\nmacro_rules! a {\r\n    ($a:ident) => (\r\n        fn _bar() {\r\n            mem::drop(3);\r\n        }\r\n    )\r\n}\r\n``` \r\n\r\n(note that this requires `std::mem` to be imported to work)\r\n\r\nand then we're generating a token stream that looks like:\r\n\r\n```rust\r\nmod foo {\r\n    extern crate std;\r\n    use self::std::mem;\r\n    a! {}\r\n```\r\n\r\n\r\nNote that the `extern crate` is necessary due to one of the above situations (we can't import from the top-level `extern crate`). Here though if we generated tokens [with `Span::default`](https://github.com/alexcrichton/weird-proc-macro-spans/blob/af3b0ac5a5376679f8a2017bed758884e6df4e8e/src/lib.rs#L190-L217) as with many other cases this doesn't work! As usual if we [respan with `call_site` spans](https://github.com/alexcrichton/weird-proc-macro-spans/blob/af3b0ac5a5376679f8a2017bed758884e6df4e8e/src/lib.rs#L219-L222) then this does indeed work.\r\n\r\nIs this a bug? Or maybe more hygiene?\r\n\r\n# Conclusions\r\n\r\nOverall for our use case we found that 100% of the time we should be using `Span::call_site` instead of `Span::default` to get things working. Whether or not that's what we wanted hygienically we're not sure! I couldn't really understand the hygiene implications here because tokens using `Span::default` couldn't import from other modules defined next to it with the default span as well.\r\n\r\nShould `quote` and `syn` move to using `Span::call_site` by default instead of `Span::default`? Or maybe `Span::default` should be renamed to sound \"less default\" if it appears to not work most of the time? Or maybe `Span::default` has bugs that need fixing?\r\n\r\nI'm quite curious to hear what others think! Especially those that are particularly familiar with hygiene/macros, I'd love to hear ideas about whether this is expected behavior (and if so if we could maybe improve the error messages) or if we should perhaps be structuring the macro expansion differently. Similarly what would recommendations be for spanning tokens returned by `quote!` in an external crate? Or `syn`? (for example if I maufacture an `Ident`, is there a \"good default\" for that?)\r\n\r\nIn any case, curious to hear others' thoughts!\r\n\r\n---\r\n\r\ncc @jseyfried \r\ncc @nrc \r\ncc @nikomatsakis \r\ncc @federicomenaquintero \r\ncc @dtolnay \r\ncc @mystor \r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45934/timeline", "performed_via_github_app": null, "state_reason": null}