{"url": "https://api.github.com/repos/rust-lang/rust/issues/110650", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110650/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110650/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110650/events", "html_url": "https://github.com/rust-lang/rust/issues/110650", "id": 1678832503, "node_id": "I_kwDOAAsO6M5kEPN3", "number": 110650, "title": "`File::read_to_end`'s unexpected performance on Windows", "user": {"login": "ducktherapy", "id": 131477690, "node_id": "U_kgDOB9Ywug", "avatar_url": "https://avatars.githubusercontent.com/u/131477690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ducktherapy", "html_url": "https://github.com/ducktherapy", "followers_url": "https://api.github.com/users/ducktherapy/followers", "following_url": "https://api.github.com/users/ducktherapy/following{/other_user}", "gists_url": "https://api.github.com/users/ducktherapy/gists{/gist_id}", "starred_url": "https://api.github.com/users/ducktherapy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ducktherapy/subscriptions", "organizations_url": "https://api.github.com/users/ducktherapy/orgs", "repos_url": "https://api.github.com/users/ducktherapy/repos", "events_url": "https://api.github.com/users/ducktherapy/events{/privacy}", "received_events_url": "https://api.github.com/users/ducktherapy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-04-21T17:03:10Z", "updated_at": "2023-04-23T09:13:29Z", "closed_at": "2023-04-23T09:13:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I came across an unexpected performance degradation on Windows when using [`File::read_to_end(&mut self, buf: &mut Vec<u8>)`](https://doc.rust-lang.org/std/fs/struct.File.html#method.read_to_end): the larger the passed in `buf` `Vec`'s capacity, the longer the call takes\u2014regardless of actually read bytes.\r\n\r\n```rust\r\nlet mut buffer = Vec::with_capacity(BUFFER_SIZE);\r\nlet mut file = File::open(\"some_1kb_file.txt\").expect(\"opening file\");\r\n\r\nlet metadata = file.metadata().expect(\"reading metadata\");\r\nlet len = metadata.len();\r\nassert!(len == 1024);\r\n\r\nfile.read_to_end(&mut buffer).expect(\"reading file\");\r\n```\r\n\r\nWith the above code, increasing `BUFFER_SIZE` will linearly increase the runtime of `read_to_end`, even if we're always reading `1024` bytes.\r\n\r\nThis doesn't seem to happen on other OSes. At first I assumed I was doing something wrong, but [with help from folks at StackOverflow](https://stackoverflow.com/questions/76055481/why-does-fileread-to-end-get-slower-the-larger-the-buffer-capacity) we realized most of the time is spent in `NtReadFile`. One can get around this by using `file.read_exact(&mut buffer[0..len])` or `file.take(len).read_to_end()` instead.\r\n\r\nI don't know what the implication of querying for the file size and using it in `read_to_end` would have, or if it'd be possible to get around this another way, but I assume at the very worst we could have a warning in the documentation about this.\r\n\r\n### Meta\r\n\r\n```\r\nrustc 1.68.2 (9eb3afe9e 2023-03-27)\r\nbinary: rustc\r\ncommit-hash: 9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0\r\ncommit-date: 2023-03-27\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.68.2\r\nLLVM version: 15.0.6\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110650/timeline", "performed_via_github_app": null, "state_reason": "completed"}