{"url": "https://api.github.com/repos/rust-lang/rust/issues/46796", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46796/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46796/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46796/events", "html_url": "https://github.com/rust-lang/rust/issues/46796", "id": 282736322, "node_id": "MDU6SXNzdWUyODI3MzYzMjI=", "number": 46796, "title": "Issues with crash handling for iOS for Rust 1.22.1", "user": {"login": "michaeleiselsc", "id": 7732829, "node_id": "MDQ6VXNlcjc3MzI4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/7732829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaeleiselsc", "html_url": "https://github.com/michaeleiselsc", "followers_url": "https://api.github.com/users/michaeleiselsc/followers", "following_url": "https://api.github.com/users/michaeleiselsc/following{/other_user}", "gists_url": "https://api.github.com/users/michaeleiselsc/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaeleiselsc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaeleiselsc/subscriptions", "organizations_url": "https://api.github.com/users/michaeleiselsc/orgs", "repos_url": "https://api.github.com/users/michaeleiselsc/repos", "events_url": "https://api.github.com/users/michaeleiselsc/events{/privacy}", "received_events_url": "https://api.github.com/users/michaeleiselsc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 38105576, "node_id": "MDU6TGFiZWwzODEwNTU3Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-ios", "name": "O-ios", "color": "6e6ec0", "default": false, "description": "Operating system: iOS"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-12-18T00:14:59Z", "updated_at": "2022-04-13T02:43:24Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I'm using `rustc 1.22.1 (05e2e1c41 2017-11-22)` and I'm calling a simple rust function from my iOS app that just panics. The rust function is in a static library and is compiled `cargo build` (debug with -O0). The architecture is aarch64-apple-ios. Here's the rust code:\r\n```\r\nextern crate rand;\r\n\r\npub struct MyStruct {\r\n    i: i32,\r\n}\r\n\r\nimpl MyStruct {\r\n    pub fn do_stuff(&mut self) -> String {\r\n        panic!(\"that was a fail\");\r\n        return String::from(\"asdf\");\r\n    }\r\n}\r\n\r\n#[no_mangle]\r\npub extern fn panicky_fn() {\r\n    let mut m = MyStruct {\r\n        i: 0\r\n    };\r\n    m.do_stuff();\r\n}\r\n```\r\n\r\nWhen I call it like this, from my root view controller:\r\n```\r\n- (void)viewDidLoad\r\n{\r\n    [super viewDidLoad];\r\n    [Fabric with:@[ [Crashlytics class]]]; // start the crash reporter\r\n    CFTimeInterval start = CACurrentMediaTime();\r\n    srand(time(NULL));\r\n    if (rand() % 2 == 0) {\r\n        panicky_fn();\r\n    }\r\n    // more code...\r\n}\r\n```\r\nThen when the panic occurs, in the left-hand pane of Xcode, it just shows me this generic trace:\r\n```\r\n#0\t0x00000001838e9348 in __pthread_kill ()\r\n#1\t0x00000001839fd354 in pthread_kill$VARIANT$mp ()\r\n#2\t0x0000000183858fd8 in abort ()\r\n#3\t0x00000001832bc068 in abort_message ()\r\n#4\t0x00000001832bc16c in default_terminate_handler() ()\r\n#5\t0x00000001832d454c in std::__terminate(void (*)()) ()\r\n#6\t0x00000001832d45c0 in std::terminate() ()\r\n#7\t0x00000001832e476c in objc_terminate ()\r\n#8\t0x0000000104651470 in _dispatch_client_callout ()\r\n#9\t0x000000010465db74 in _dispatch_block_invoke_direct ()\r\n#10\t0x00000001864a5a04 in __FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ ()\r\n#11\t0x00000001864a56a8 in -[FBSSerialQueue _performNext] ()\r\n#12\t0x00000001864a5c44 in -[FBSSerialQueue _performNextFromRunLoopSource] ()\r\n#13\t0x0000000183d78358 in __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ ()\r\n#14\t0x0000000183d782d8 in __CFRunLoopDoSource0 ()\r\n#15\t0x0000000183d77b60 in __CFRunLoopDoSources0 ()\r\n#16\t0x0000000183d75738 in __CFRunLoopRun ()\r\n#17\t0x0000000183c962d8 in CFRunLoopRunSpecific ()\r\n#18\t0x0000000185b27f84 in GSEventRunModal ()\r\n#19\t0x000000018d243880 in UIApplicationMain ()\r\n#20\t0x0000000104219b68 in main at /Users/michael/Snapchat/Dev/Rotationization/Rotationization/main.m:15\r\n#21\t0x00000001837ba56c in start ()\r\n```\r\nAnd in the crash reporting service, Crashlytics, I just see a stack trace just like it. *However*, when I wrap the call to the rust function like so:\r\n```\r\ndispatch_async(dispatch_get_main_queue(), ^{\r\n    panicky_fn();\r\n}\r\n```\r\nThen both the left-hand pane of Xcode as well as the crash reporting service show the correct stack trace. Can anyone help with this? I want to start using Rust in my app, but I don't feel comfortable doing so until I can monitor crashes with it.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46796/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46796/timeline", "performed_via_github_app": null, "state_reason": null}