{"url": "https://api.github.com/repos/rust-lang/rust/issues/42432", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42432/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42432/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42432/events", "html_url": "https://github.com/rust-lang/rust/issues/42432", "id": 233455544, "node_id": "MDU6SXNzdWUyMzM0NTU1NDQ=", "number": 42432, "title": "Suggestion for a low-effort way to take advantage of SIMD and other architecture specific tricks LLVM knows about", "user": {"login": "pedrocr", "id": 246322, "node_id": "MDQ6VXNlcjI0NjMyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/246322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pedrocr", "html_url": "https://github.com/pedrocr", "followers_url": "https://api.github.com/users/pedrocr/followers", "following_url": "https://api.github.com/users/pedrocr/following{/other_user}", "gists_url": "https://api.github.com/users/pedrocr/gists{/gist_id}", "starred_url": "https://api.github.com/users/pedrocr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pedrocr/subscriptions", "organizations_url": "https://api.github.com/users/pedrocr/orgs", "repos_url": "https://api.github.com/users/pedrocr/repos", "events_url": "https://api.github.com/users/pedrocr/events{/privacy}", "received_events_url": "https://api.github.com/users/pedrocr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-06-04T19:52:31Z", "updated_at": "2017-06-05T14:46:00Z", "closed_at": "2017-06-05T14:39:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Issue #27731 already tracks the fine work being done to expose SIMD in ways that are explicit to the programmer. If you're able to code in those specific ways big gains can be obtained. However there is something simple can be done before to performance sensitive code that sometimes greatly improves its speed, just tell LLVM to take advantage of those instructions. The speedup from that is free in developer time and can be quite large. I extracted a simple benchmark from one of the computationally expensive functions in rawloader, matrix multiplying camera RGB values to get XYZ:\r\n\r\nhttps://github.com/pedrocr/rustc-math-bench\r\n\r\nI programmed the same multiplication over a 100MP image in both C and rust. Here are the results. All values are in ms/megapixel run on a i5-6200U. The `runbench` script in the repository will compile and run the tests for you with no other interaction.\r\n\r\nCompiler | -O3 | -O3 -march=native\r\n--- | --- | ---\r\nrustc 1.19.0-nightly (e0cc22b4b 2017-05-31) | 11.76 | 6.92 (-41%)\r\nclang 3.8.0-2ubuntu4 | 13.31 | 5.69 (-57%)\r\ngcc 5.4.0 20160609 | 7.77 | 4.70 (-40%)\r\n\r\nSo rust nightly is faster than clang (but that's probably llvm 3.8 vs 4.0) and the reduction in runtime is quite worthwile. The problem with doing this of course is that now the binary is not portable to architectures lower than mine and it's not optimized for archictures above it either.\r\n\r\nMy suggestion is to allow the developer to do something like `#[makefast] fn(...)`. Anything that gets annotated like that gets compiled multiple times for each of the architecture levels and then at runtime, depending on the machine being used, the highest level gets used. Ideally also patch the call sites on program startup (or use ELF trickery) so the dispatch penalty disappears.", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42432/timeline", "performed_via_github_app": null, "state_reason": "completed"}