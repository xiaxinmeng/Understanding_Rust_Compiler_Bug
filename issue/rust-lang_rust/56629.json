{"url": "https://api.github.com/repos/rust-lang/rust/issues/56629", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56629/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56629/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56629/events", "html_url": "https://github.com/rust-lang/rust/issues/56629", "id": 388919236, "node_id": "MDU6SXNzdWUzODg5MTkyMzY=", "number": 56629, "title": "error[E0275]: overflow evaluating the requirement only with incremental build involved", "user": {"login": "upsuper", "id": 333750, "node_id": "MDQ6VXNlcjMzMzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/333750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/upsuper", "html_url": "https://github.com/upsuper", "followers_url": "https://api.github.com/users/upsuper/followers", "following_url": "https://api.github.com/users/upsuper/following{/other_user}", "gists_url": "https://api.github.com/users/upsuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/upsuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/upsuper/subscriptions", "organizations_url": "https://api.github.com/users/upsuper/orgs", "repos_url": "https://api.github.com/users/upsuper/repos", "events_url": "https://api.github.com/users/upsuper/events{/privacy}", "received_events_url": "https://api.github.com/users/upsuper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-08T12:47:56Z", "updated_at": "2019-03-29T20:52:40Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Steps to reproduce:\r\n1. clone https://github.com/upsuper/telegram-rustevalbot (and checkout 2502973017d39a867dc2cde089b535127bc86e3b which is what I'm currently seeing)\r\n2. run `cargo build`\r\n3. then run `cargo build` again\r\n\r\nIt builds correctly in step 2, but fails in step 3 and shows the following error:\r\n<details>\r\n\r\n```\r\nerror[E0275]: overflow evaluating the requirement `http::response::Parts: std::marker::Send`                   \r\n  |                                                                                                            \r\n  = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate                                \r\n  = note: required because it appears within the type `http::response::Response<()>`                           \r\n  = note: required because it appears within the type `h2::proto::peer::PollMessage`                           \r\n  = note: required because it appears within the type `h2::proto::streams::recv::Event`                        \r\n  = note: required because it appears within the type `h2::proto::streams::buffer::Slot<h2::proto::streams::recv::Event>`\r\n  = note: required because it appears within the type `slab::Entry<h2::proto::streams::buffer::Slot<h2::proto::streams::recv::Event>>`\r\n  = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<slab::Entry<h2::proto::streams::buffer::Slot<h2::proto::streams::recv::Event>>>`\r\n  = note: required because it appears within the type `alloc::raw_vec::RawVec<slab::Entry<h2::proto::streams::buffer::Slot<h2::proto::streams::recv::Event>>>`\r\n  = note: required because it appears within the type `std::vec::Vec<slab::Entry<h2::proto::streams::buffer::Slot<h2::proto::streams::recv::Event>>>`\r\n  = note: required because it appears within the type `slab::Slab<h2::proto::streams::buffer::Slot<h2::proto::streams::recv::Event>>`\r\n  = note: required because it appears within the type `h2::proto::streams::buffer::Buffer<h2::proto::streams::recv::Event>`\r\n  = note: required because it appears within the type `h2::proto::streams::recv::Recv`                         \r\n  = note: required because it appears within the type `h2::proto::streams::streams::Actions`                   \r\n  = note: required because it appears within the type `h2::proto::streams::streams::Inner`                     \r\n  = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Mutex<h2::proto::streams::streams::Inner>`\r\n  = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<std::sync::Mutex<h2::proto::streams::streams::Inner>>`\r\n  = note: required because it appears within the type `h2::proto::streams::streams::OpaqueStreamRef`           \r\n  = note: required because it appears within the type `h2::share::ReleaseCapacity`                             \r\n  = note: required because it appears within the type `h2::share::RecvStream`                                  \r\n  = note: required because it appears within the type `hyper::body::body::Kind`                                \r\n  = note: required because it appears within the type `hyper::body::body::Body`                                \r\n  = note: required because it appears within the type `http::request::Request<hyper::body::body::Body>`        \r\n  = note: required because it appears within the type `(http::request::Request<hyper::body::body::Body>, hyper::client::dispatch::Callback<http::request::Request<hyper::body::body::Body>, http::response::Response<hyper::body::body::Body>>)`\r\n  = note: required because it appears within the type `std::option::Option<(http::request::Request<hyper::body::body::Body>, hyper::client::dispatch::Callback<http::request::Request<hyper::body::body::Body>, http::response::Response<hyper::body::body::Body>>)>`\r\n  = note: required because it appears within the type `hyper::client::dispatch::Envelope<http::request::Request<hyper::body::body::Body>, http::response::Response<hyper::body::body::Body>>`\r\n  = note: required because of the requirements on the impl of `std::marker::Send` for `futures::sync::mpsc::Inner<hyper::client::dispatch::Envelope<http::request::Request<hyper::body::body::Body>, http::response::Response<hyper::body::body::Body>>>`\r\n  = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<futures::sync::mpsc::Inner<hyper::client::dispatch::Envelope<http::request::Request<hyper::body::body::Body>, http::response::Response<hyper::body::body::Body>>>>`\r\n  = note: required because it appears within the type `futures::sync::mpsc::Sender<hyper::client::dispatch::Envelope<http::request::Request<hyper::body::body::Body>, http::response::Response<hyper::body::body::Body>>>`\r\n  = note: required because it appears within the type `futures::sync::mpsc::UnboundedSender<hyper::client::dispatch::Envelope<http::request::Request<hyper::body::body::Body>, http::response::Response<hyper::body::body::Body>>>`\r\n  = note: required because it appears within the type `hyper::client::dispatch::Sender<http::request::Request<hyper::body::body::Body>, http::response::Response<hyper::body::body::Body>>`\r\n  = note: required because it appears within the type `hyper::client::conn::SendRequest<hyper::body::body::Body>`\r\n  = note: required because it appears within the type `hyper::client::PoolTx<hyper::body::body::Body>`         \r\n  = note: required because it appears within the type `hyper::client::PoolClient<hyper::body::body::Body>`     \r\n  = note: required because it appears within the type `hyper::client::pool::Idle<hyper::client::PoolClient<hyper::body::body::Body>>`\r\n  = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<hyper::client::pool::Idle<hyper::client::PoolClient<hyper::body::body::Body>>>`\r\n  = note: required because it appears within the type `alloc::raw_vec::RawVec<hyper::client::pool::Idle<hyper::client::PoolClient<hyper::body::body::Body>>>`\r\n  = note: required because it appears within the type `std::vec::Vec<hyper::client::pool::Idle<hyper::client::PoolClient<hyper::body::body::Body>>>`\r\n  = note: required because it appears within the type `(std::sync::Arc<std::string::String>, std::vec::Vec<hyper::client::pool::Idle<hyper::client::PoolClient<hyper::body::body::Body>>>)`\r\n  = note: required because it appears within the type `std::marker::PhantomData<(std::sync::Arc<std::string::String>, std::vec::Vec<hyper::client::pool::Idle<hyper::client::PoolClient<hyper::body::body::Body>>>)>`\r\n  = note: required because it appears within the type `std::collections::hash::table::RawTable<std::sync::Arc<std::string::String>, std::vec::Vec<hyper::client::pool::Idle<hyper::client::PoolClient<hyper::body::body::Body>>>>`\r\n  = note: required because it appears within the type `std::collections::HashMap<std::sync::Arc<std::string::String>, std::vec::Vec<hyper::client::pool::Idle<hyper::client::PoolClient<hyper::body::body::Body>>>>`\r\n  = note: required because it appears within the type `hyper::client::pool::PoolInner<hyper::client::PoolClient<hyper::body::body::Body>>`\r\n  = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Mutex<hyper::client::pool::PoolInner<hyper::client::PoolClient<hyper::body::body::Body>>>`\r\n  = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<std::sync::Mutex<hyper::client::pool::PoolInner<hyper::client::PoolClient<hyper::body::body::Body>>>>`\r\n  = note: required because it appears within the type `std::option::Option<std::sync::Arc<std::sync::Mutex<hyper::client::pool::PoolInner<hyper::client::PoolClient<hyper::body::body::Body>>>>>`\r\n  = note: required because it appears within the type `hyper::client::pool::Pool<hyper::client::PoolClient<hyper::body::body::Body>>`\r\n  = note: required because it appears within the type `hyper::client::Client<reqwest::connect::Connector>`     \r\n  = note: required because it appears within the type `reqwest::async_impl::client::ClientRef`                 \r\n  = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<reqwest::async_impl::client::ClientRef>`\r\n  = note: required because it appears within the type `reqwest::async_impl::client::PendingRequest`            \r\n  = note: required because it appears within the type `reqwest::async_impl::client::PendingInner`              \r\n  = note: required because it appears within the type `reqwest::async_impl::client::Pending`                   \r\n  = note: required because it appears within the type `futures::future::chain::Chain<reqwest::async_impl::client::Pending, futures::future::result_::FutureResult<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>`\r\n  = note: required because it appears within the type `futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>`\r\n  = note: required because it appears within the type `futures::future::chain::Chain<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>, reqwest::async_impl::response::Json<cratesio::Summary>, [closure@src/cratesio/mod.rs:77:23: 77:45]>`\r\n  = note: required because it appears within the type `futures::future::and_then::AndThen<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>, reqwest::async_impl::response::Json<cratesio::Summary>, [closure@src/cratesio/mod.rs:77:23: 77:45]>`\r\n  = note: required because it appears within the type `futures::future::map::Map<futures::future::and_then::AndThen<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>, reqwest::async_impl::response::Json<cratesio::Summary>, [closure@src/cratesio/mod.rs:77:23: 77:45]>, [closure@src/cratesio/mod.rs:78:18: 83:14 get_crates:[closure@src/cratesio/mod.rs:40:75: 42:18]]>`\r\n  = note: required because it appears within the type `futures::future::either::Either<futures::future::map::Map<futures::future::and_then::AndThen<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>, reqwest::async_impl::response::Json<cratesio::Summary>, [closure@src/cratesio/mod.rs:77:23: 77:45]>, [closure@src/cratesio/mod.rs:78:18: 83:14 get_crates:[closure@src/cratesio/mod.rs:40:75: 42:18]]>, futures::future::map::Map<futures::future::and_then::AndThen<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>, reqwest::async_impl::response::Json<cratesio::Crates>, [closure@src/cratesio/mod.rs:77:23: 77:45]>, [closure@src/cratesio/mod.rs:78:18: 83:14 get_crates:[closure@src/cratesio/mod.rs:50:50: 50:76]]>>`\r\n  = note: required because it appears within the type `futures::future::map_err::MapErr<futures::future::either::Either<futures::future::map::Map<futures::future::and_then::AndThen<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>, reqwest::async_impl::response::Json<cratesio::Summary>, [closure@src/cratesio/mod.rs:77:23: 77:45]>, [closure@src/cratesio/mod.rs:78:18: 83:14 get_crates:[closure@src/cratesio/mod.rs:40:75: 42:18]]>, futures::future::map::Map<futures::future::and_then::AndThen<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>, reqwest::async_impl::response::Json<cratesio::Crates>, [closure@src/cratesio/mod.rs:77:23: 77:45]>, [closure@src/cratesio/mod.rs:78:18: 83:14 get_crates:[closure@src/cratesio/mod.rs:50:50: 50:76]]>>, [closure@src/cratesio/mod.rs:54:22: 54:65]>`\r\n  = note: required because it appears within the type `futures::future::chain::Chain<futures::future::map_err::MapErr<futures::future::either::Either<futures::future::map::Map<futures::future::and_then::AndThen<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>, reqwest::async_impl::response::Json<cratesio::Summary>, [closure@src/cratesio/mod.rs:77:23: 77:45]>, [closure@src/cratesio/mod.rs:78:18: 83:14 get_crates:[closure@src/cratesio/mod.rs:40:75: 42:18]]>, futures::future::map::Map<futures::future::and_then::AndThen<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>, reqwest::async_impl::response::Json<cratesio::Crates>, [closure@src/cratesio/mod.rs:77:23: 77:45]>, [closure@src/cratesio/mod.rs:78:18: 83:14 get_crates:[closure@src/cratesio/mod.rs:50:50: 50:76]]>>, [closure@src/cratesio/mod.rs:54:22: 54:65]>, futures::future::map_err::MapErr<futures::future::map::Map<futures::future::either::Either<futures::future::and_then::AndThen<futures::future::map_err::MapErr<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, reqwest::async_impl::response::Json<telegram_types::bot::methods::TelegramResult<bool>>, [closure@src/bot.rs:143:23: 143:45]>, fn(reqwest::error::Error) -> bot::Error {<bot::Error as std::convert::From<reqwest::error::Error>>::from}>, std::result::Result<bool, bot::Error>, [closure@src/bot.rs:145:23: 145:90]>, futures::future::result_::FutureResult<bool, bot::Error>>, [closure@src/cratesio/mod.rs:59:26: 59:32]>, [closure@src/cratesio/mod.rs:60:30: 60:74]>, [closure@src/cratesio/mod.rs:55:23: 61:14 bot:bot::Bot, query:telegram_types::bot::inline_mode::InlineQuery]>`\r\n  = note: required because it appears within the type `futures::future::and_then::AndThen<futures::future::map_err::MapErr<futures::future::either::Either<futures::future::map::Map<futures::future::and_then::AndThen<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>, reqwest::async_impl::response::Json<cratesio::Summary>, [closure@src/cratesio/mod.rs:77:23: 77:45]>, [closure@src/cratesio/mod.rs:78:18: 83:14 get_crates:[closure@src/cratesio/mod.rs:40:75: 42:18]]>, futures::future::map::Map<futures::future::and_then::AndThen<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>, reqwest::async_impl::response::Json<cratesio::Crates>, [closure@src/cratesio/mod.rs:77:23: 77:45]>, [closure@src/cratesio/mod.rs:78:18: 83:14 get_crates:[closure@src/cratesio/mod.rs:50:50: 50:76]]>>, [closure@src/cratesio/mod.rs:54:22: 54:65]>, futures::future::map_err::MapErr<futures::future::map::Map<futures::future::either::Either<futures::future::and_then::AndThen<futures::future::map_err::MapErr<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, reqwest::async_impl::response::Json<telegram_types::bot::methods::TelegramResult<bool>>, [closure@src/bot.rs:143:23: 143:45]>, fn(reqwest::error::Error) -> bot::Error {<bot::Error as std::convert::From<reqwest::error::Error>>::from}>, std::result::Result<bool, bot::Error>, [closure@src/bot.rs:145:23: 145:90]>, futures::future::result_::FutureResult<bool, bot::Error>>, [closure@src/cratesio/mod.rs:59:26: 59:32]>, [closure@src/cratesio/mod.rs:60:30: 60:74]>, [closure@src/cratesio/mod.rs:55:23: 61:14 bot:bot::Bot, query:telegram_types::bot::inline_mode::InlineQuery]>`\r\n  = note: required because it appears within the type `futures::future::either::Either<futures::future::result_::FutureResult<(), ()>, futures::future::and_then::AndThen<futures::future::map_err::MapErr<futures::future::either::Either<futures::future::map::Map<futures::future::and_then::AndThen<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>, reqwest::async_impl::response::Json<cratesio::Summary>, [closure@src/cratesio/mod.rs:77:23: 77:45]>, [closure@src/cratesio/mod.rs:78:18: 83:14 get_crates:[closure@src/cratesio/mod.rs:40:75: 42:18]]>, futures::future::map::Map<futures::future::and_then::AndThen<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, std::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>, [closure@src/cratesio/mod.rs:76:23: 76:53]>, reqwest::async_impl::response::Json<cratesio::Crates>, [closure@src/cratesio/mod.rs:77:23: 77:45]>, [closure@src/cratesio/mod.rs:78:18: 83:14 get_crates:[closure@src/cratesio/mod.rs:50:50: 50:76]]>>, [closure@src/cratesio/mod.rs:54:22: 54:65]>, futures::future::map_err::MapErr<futures::future::map::Map<futures::future::either::Either<futures::future::and_then::AndThen<futures::future::map_err::MapErr<futures::future::and_then::AndThen<reqwest::async_impl::client::Pending, reqwest::async_impl::response::Json<telegram_types::bot::methods::TelegramResult<bool>>, [closure@src/bot.rs:143:23: 143:45]>, fn(reqwest::error::Error) -> bot::Error {<bot::Error as std::convert::From<reqwest::error::Error>>::from}>, std::result::Result<bool, bot::Error>, [closure@src/bot.rs:145:23: 145:90]>, futures::future::result_::FutureResult<bool, bot::Error>>, [closure@src/cratesio/mod.rs:59:26: 59:32]>, [closure@src/cratesio/mod.rs:60:30: 60:74]>, [closure@src/cratesio/mod.rs:55:23: 61:14 bot:bot::Bot, query:telegram_types::bot::inline_mode::InlineQuery]>>`\r\n  = note: required because of the requirements on the impl of `bot_runner::UpdateHandler` for `bot_runner::BotRun<cratesio::CratesioBot, for<'r> fn(&'r cratesio::CratesioBot, telegram_types::bot::types::Update) -> impl futures::future::Future {cratesio::CratesioBot::handle_update}>`\r\n  = note: required because of the requirements on the impl of `futures::future::Future` for `bot_runner::BotRun<cratesio::CratesioBot, for<'r> fn(&'r cratesio::CratesioBot, telegram_types::bot::types::Update) -> impl futures::future::Future {cratesio::CratesioBot::handle_update}>`\r\n  = note: required because of the requirements on the impl of `futures::future::IntoFuture` for `bot_runner::BotRun<cratesio::CratesioBot, for<'r> fn(&'r cratesio::CratesioBot, telegram_types::bot::types::Update) -> impl futures::future::Future {cratesio::CratesioBot::handle_update}>`\r\n```\r\n\r\n</details>\r\n\r\n(Note: this projects always rebuild because its build script uses [git-version](https://crates.io/crates/git-version) which tricks cargo to rebuild even when nothing changes.)\r\n\r\nFurther note: if I remove the `incremental` directory in target, then it builds again. But after that, it fails again.\r\n\r\nI have verified that it reproduces in both my macOS and a Linux VPS.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56629/timeline", "performed_via_github_app": null, "state_reason": null}