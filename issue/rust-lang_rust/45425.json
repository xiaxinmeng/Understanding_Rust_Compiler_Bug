{"url": "https://api.github.com/repos/rust-lang/rust/issues/45425", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45425/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45425/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45425/events", "html_url": "https://github.com/rust-lang/rust/issues/45425", "id": 267342511, "node_id": "MDU6SXNzdWUyNjczNDI1MTE=", "number": 45425, "title": "Binary operator LHS type is fixed instead of being subtyped", "user": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-10-21T01:56:54Z", "updated_at": "2017-11-01T12:16:24Z", "closed_at": "2017-11-01T12:16:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This started with a [Stack Overflow question](https://stackoverflow.com/q/46857955/155423) which boiled down to:\r\n\r\n```rust\r\nuse std::ops::Rem;\r\n\r\nfn powm<T>(fbase: &T, modulus: &T)\r\nwhere\r\n    for<'x> &'x T: Rem<&'x T, Output = T>,\r\n{\r\n    fbase % modulus;\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\n<details>\r\n<summary>Complete error</summary>\r\n\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\r\n --> src/main.rs:7:11\r\n  |\r\n7 |     fbase % modulus;\r\n  |           ^\r\n  |\r\nnote: first, the lifetime cannot outlive the lifetime 'b as defined on the function body at 3:1...\r\n --> src/main.rs:3:1\r\n  |\r\n3 | / fn powm<'a, 'b, T>(fbase: &'a T, modulus: &'b T)\r\n4 | | where\r\n5 | |     for<'x> &'x T: Rem<&'x T, Output = T>,\r\n6 | | {\r\n7 | |     fbase % modulus;\r\n8 | | }\r\n  | |_^\r\nnote: ...so that reference does not outlive borrowed content\r\n --> src/main.rs:7:13\r\n  |\r\n7 |     fbase % modulus;\r\n  |             ^^^^^^^\r\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the function body at 3:1...\r\n --> src/main.rs:3:1\r\n  |\r\n3 | / fn powm<'a, 'b, T>(fbase: &'a T, modulus: &'b T)\r\n4 | | where\r\n5 | |     for<'x> &'x T: Rem<&'x T, Output = T>,\r\n6 | | {\r\n7 | |     fbase % modulus;\r\n8 | | }\r\n  | |_^\r\nnote: ...so that types are compatible (expected std::ops::Rem, found std::ops::Rem<&T>)\r\n --> src/main.rs:7:11\r\n  |\r\n7 |     fbase % modulus;\r\n  |           ^\r\n```\r\n\r\n</details>\r\n\r\n----\r\n\r\nSome poking around found some workarounds:\r\n\r\n - If we say that the input references can be unified to the same\r\n   lifetime, it works:\r\n   \r\n    ```rust\r\n    fn powm<'a, T>(fbase: &'a T, modulus: &'a T)\r\n    ```\r\n\r\n - If we say that `'b` outlives `'a`, it works:\r\n\r\n    ```rust\r\n    fn powm<'a, 'b: 'a, T>(fbase: &'a T, modulus: &'b T)\r\n    ```\r\n   \r\n - If we say that we can have two different lifetimes in the operator, it works:\r\n   \r\n    ```rust\r\n    for<'x, 'y> &'x T: Rem<&'y T, Output = T>,\r\n    ```\r\n\r\n - If we directly call the `Rem::rem` method, it works:\r\n   \r\n    ```rust\r\n    Rem::rem(fbase, modulus);\r\n   ```\r\n\r\n - If we dereference and re-reference, it works:\r\n   \r\n    ```rust\r\n    &*fbase % &*modulus;\r\n    ```\r\n\r\nI poked @eddyb for further explanation why the original case didn't work. Our tidied IRC conversation:\r\n\r\n> @eddyb \r\n> The answer is `Rem::rem(fbase, modulus);` *doesn't* do unification, it does a reborrow coercion.\r\n> That is, it's equivalent to `&*fbase % &*modulus`\r\n> You can figure this out by having an operator implemented with `&str` on the RHS and passing `&String` or other stuff like that.\r\n> If it works with `&String`, then this is generally approved\r\n\r\n> @shepmaster\r\n> But what's the difference of `a % b` and `Rem::rem(a, b)` \u2014 I thought that was straight desugaring?\r\n\r\n> @eddyb \r\n> There is no such thing as a straight desugaring; the first is `Rem::rem(a, b)` the second is `(Rem::rem)(coerce a, coerce b)`\r\n> IDK, I think we should coerce, but we can't coerce the LHS, because......... what type to coerce to?\r\n> It has to be asymmetrical. \"has to\"\r\n> Wait, no, why is this a... I might be wrong; yeah no I am wrong.\r\n\r\n> @eddyb \r\n> This is about traits... so `Rem::rem(a, b)` is `<_ as Rem<_>>::rem(a, b)` and `a % b` is `<typeof a as Rem<typeof b>>::rem(a, b)`\r\n> So we do coercions on the RHS, but *I think* we need to also subtype the LHS, which we're not doing right now.\r\n\r\n> @shepmaster\r\n> There's some piece of \"this doesn't work because the lifetimes are disjoint, even though they could be unified at least as much as the lifetime of the function call\"\r\n\r\n> @eddyb \r\n> It's not really disjointness; hint: an asymmetrical `'b: 'a` or whatever you added only helps because the RHS is getting coerced. The RHS can be a subtype but the LHS is fixed.\r\n> Lemme rephrase :D\r\n> `<typeof a as Rem<_>>::rem(a, b)` whereas you want `_ extends (typeof a)` or something as the `Self` for `Rem`\r\n\r\n> @eddyb \r\n> We already use forced subtyping to have more flexibility around unsizing coercions because the trait matching of `T: Unsize<U>` is invariant.\r\n> It wasn't invariant for a while, which was a soundness bug..... introduced by yours truly in the original implementation.\r\n\r\n> @eddyb \r\n> [This shows `lhs_ty` being used for `Self` and `rhs_ty_var` for the trait parameters](https://github.com/rust-lang/rust/blob/b633341c49498488b6e3fce501e23e9f9f8fadec/src/librustc_typeck/check/op.rs#L178-L189) so the LHS type is fixed instead of being subtyped.\r\n\r\n> @eddyb \r\n> [This is where we do the right thing](https://github.com/rust-lang/rust/blob/b633341c49498488b6e3fce501e23e9f9f8fadec/src/librustc_typeck/check/coercion.rs#L495-L501), going through an inference variable & extra subtyping (or LUB but that doesn't apply here) to make something more flexible than what the trait system allows.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45425/timeline", "performed_via_github_app": null, "state_reason": "completed"}