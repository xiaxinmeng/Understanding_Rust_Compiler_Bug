{"url": "https://api.github.com/repos/rust-lang/rust/issues/72762", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72762/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72762/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72762/events", "html_url": "https://github.com/rust-lang/rust/issues/72762", "id": 627569146, "node_id": "MDU6SXNzdWU2Mjc1NjkxNDY=", "number": 72762, "title": "narrowing_rem, narrowing_and", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2020-05-29T22:02:55Z", "updated_at": "2021-11-03T21:39:31Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "To remove some unsafe \"as\" casts and keep the code safe (lossless) and nice, sometimes I'd like to use a rem+cast. So what do you think about adding this to the stdlib?\r\n\r\n```rust\r\ntrait NarrowRem<Out> {\r\n    fn narrowing_rem(&self, den: Out) -> Out;\r\n}\r\n\r\nimpl NarrowRem<u8> for u16 {\r\n    fn narrowing_rem(&self, den: u8) -> u8 { (*self % u16::from(den)) as u8 }\r\n}\r\nimpl NarrowRem<u8> for u32 {\r\n    fn narrowing_rem(&self, den: u8) -> u8 { (*self % u32::from(den)) as u8 }\r\n}\r\nimpl NarrowRem<u16> for u32 {\r\n    fn narrowing_rem(&self, den: u16) -> u16 { (*self % u32::from(den)) as u16 }\r\n}\r\nimpl NarrowRem<u8> for u64 {\r\n    fn narrowing_rem(&self, den: u8) -> u8 { (*self % u64::from(den)) as u8 }\r\n}\r\nimpl NarrowRem<u16> for u64 {\r\n    fn narrowing_rem(&self, den: u16) -> u16 { (*self % u64::from(den)) as u16 }\r\n}\r\nimpl NarrowRem<u32> for u64 {\r\n    fn narrowing_rem(&self, den: u32) -> u32 { (*self % u64::from(den)) as u32 }\r\n}\r\nimpl NarrowRem<u8> for u128 {\r\n    fn narrowing_rem(&self, den: u8) -> u8 { (*self % u128::from(den)) as u8 }\r\n}\r\nimpl NarrowRem<u16> for u128 {\r\n    fn narrowing_rem(&self, den: u16) -> u16 { (*self % u128::from(den)) as u16 }\r\n}\r\nimpl NarrowRem<u32> for u128 {\r\n    fn narrowing_rem(&self, den: u32) -> u32 { (*self % u128::from(den)) as u32 }\r\n}\r\nimpl NarrowRem<u64> for u128 {\r\n    fn narrowing_rem(&self, den: u64) -> u64 { (*self % u128::from(den)) as u64 }\r\n}\r\n\r\nimpl NarrowRem<i8> for i16 {\r\n    fn narrowing_rem(&self, den: i8) -> i8 { (*self % i16::from(den)) as i8 }\r\n}\r\nimpl NarrowRem<i8> for i32 {\r\n    fn narrowing_rem(&self, den: i8) -> i8 { (*self % i32::from(den)) as i8 }\r\n}\r\nimpl NarrowRem<i16> for i32 {\r\n    fn narrowing_rem(&self, den: i16) -> i16 { (*self % i32::from(den)) as i16 }\r\n}\r\nimpl NarrowRem<i8> for i64 {\r\n    fn narrowing_rem(&self, den: i8) -> i8 { (*self % i64::from(den)) as i8 }\r\n}\r\nimpl NarrowRem<i16> for i64 {\r\n    fn narrowing_rem(&self, den: i16) -> i16 { (*self % i64::from(den)) as i16 }\r\n}\r\nimpl NarrowRem<i32> for i64 {\r\n    fn narrowing_rem(&self, den: i32) -> i32 { (*self % i64::from(den)) as i32 }\r\n}\r\nimpl NarrowRem<i8> for i128 {\r\n    fn narrowing_rem(&self, den: i8) -> i8 { (*self % i128::from(den)) as i8 }\r\n}\r\nimpl NarrowRem<i16> for i128 {\r\n    fn narrowing_rem(&self, den: i16) -> i16 { (*self % i128::from(den)) as i16 }\r\n}\r\nimpl NarrowRem<i32> for i128 {\r\n    fn narrowing_rem(&self, den: i32) -> i32 { (*self % i128::from(den)) as i32 }\r\n}\r\nimpl NarrowRem<i64> for i128 {\r\n    fn narrowing_rem(&self, den: i64) -> i64 { (*self % i128::from(den)) as i64 }\r\n}\r\n\r\nimpl NarrowRem<u8> for usize {\r\n    fn narrowing_rem(&self, den: u8) -> u8 { (*self % usize::from(den)) as u8 }\r\n}\r\nimpl NarrowRem<u16> for usize {\r\n    fn narrowing_rem(&self, den: u16) -> u16 { (*self % usize::from(den)) as u16 }\r\n}\r\n\r\nimpl NarrowRem<i8> for isize {\r\n    fn narrowing_rem(&self, den: i8) -> i8 { (*self % isize::from(den)) as i8 }\r\n}\r\nimpl NarrowRem<i16> for isize {\r\n    fn narrowing_rem(&self, den: i16) -> i16 { (*self % isize::from(den)) as i16 }\r\n}\r\n```\r\nAn example usage:\r\n\r\n```rust\r\nfn main() {\r\n    let _x: u8 = 152_u64.narrowing_rem(51_u8);\r\n}\r\n```\r\n\r\nD language performs this lossless cast operation automatically and transparently (while it doesn't perform lossy casts silently):\r\n\r\n```\r\nuint foo(in ulong x) { // Error: cannot implicitly convert\r\n    return x;\r\n}\r\nuint bar(in ulong x) { // OK\r\n    return x % 1000;\r\n}\r\nvoid main() {}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72762/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72762/timeline", "performed_via_github_app": null, "state_reason": null}