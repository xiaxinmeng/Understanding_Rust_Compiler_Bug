{"url": "https://api.github.com/repos/rust-lang/rust/issues/73434", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73434/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73434/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73434/events", "html_url": "https://github.com/rust-lang/rust/issues/73434", "id": 640325090, "node_id": "MDU6SXNzdWU2NDAzMjUwOTA=", "number": 73434, "title": "thread 'rustc' panicked at 'failed to lookup `SourceFile` in new context', src/librustc_middle/ty/query/on_disk_cache.rs:456:17", "user": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-17T10:22:36Z", "updated_at": "2020-06-17T14:19:59Z", "closed_at": "2020-06-17T14:19:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Code\r\n\r\n<details>\r\n\r\n```Rust\r\n//- card.rs\r\n/// A simple wrapper for a device node.\r\n#[derive(Debug)]\r\npub struct Card(std::fs::File);\r\n\r\n/// Implementing `AsRawFd` is a prerequisite to implementing the traits found\r\n/// in this crate. Here, we are just calling `as_raw_fd()` on the inner File.\r\nimpl std::os::unix::io::AsRawFd for Card {\r\n    fn as_raw_fd(&self) -> std::os::unix::io::RawFd {\r\n        self.0.as_raw_fd()\r\n    }\r\n}\r\n\r\n/// Simple helper methods for opening a `Card`.\r\nimpl Card {\r\n    pub fn open(path: &str) -> Self {\r\n        let mut options = std::fs::OpenOptions::new();\r\n        options.read(true);\r\n        options.write(true);\r\n        Card(options.open(path).unwrap())\r\n    }\r\n}\r\n\r\nimpl drm::Device for Card {}\r\nimpl drm::control::Device for Card {}\r\n\r\n//- main.rs\r\npub use drm::Device;\r\n\r\npub use drm::control::Device as ControlDevice;\r\npub use drm::control::ResourceHandle;\r\npub use drm::control::property::*;\r\npub use drm::buffer::Buffer;\r\n\r\n//mod buffer;\r\nmod card;\r\n\r\nfn main() {\r\n    let gpu = card::Card::open(\"/dev/dri/card0\");\r\n    println!(\"{:#?}\", gpu.get_driver().unwrap());\r\n    println!(\"{:#?}\", gpu.get_bus_id());\r\n    println!(\"{:#?}\", gpu.authenticated());\r\n    println!(\"{:#?}\", gpu.create_dumb_buffer((100, 100), drm::buffer::format::PixelFormat::RGB332).unwrap());\r\n    println!(\"{:#?}\", gpu.get_bus_id());\r\n    println!(\"{:#?}\", gpu.plane_handles());\r\n    println!(\"{:#?}\", gpu.resource_handles());\r\n}\r\n\r\n//- Cargo.toml\r\n[package]\r\nname = \"simple_login_screen\"\r\nversion = \"0.1.0\"\r\nauthors = [\"bjorn3 <bjorn3@users.noreply.github.com>\"]\r\nedition = \"2018\"\r\n\r\n[dependencies]\r\ndrm = { git = \"https://github.com/Smithay/drm-rs.git\", branch = \"develop\" }\r\n\r\n[patch.\"https://github.com/Smithay/drm-rs.git\"]\r\ndrm = { path = \"./drm-rs\" }\r\n```\r\n\r\n</details>\r\n\r\n`./drm-rs` is a checkout of https://github.com/Smithay/drm-rs/pull/67/commits/8a3c6cfcf629c4351987cc72b5658ef8880c5ddf.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`cargo clean` fixed the issue.\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.45.0-nightly (647016923 2020-04-28)\r\nbinary: rustc\r\ncommit-hash: 6470169237833d02c399568a375d9b47cbfaeccc\r\ncommit-date: 2020-04-28\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.45.0-nightly\r\nLLVM version: 9.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'failed to lookup `SourceFile` in new context', src/librustc_middle/ty/query/on_disk_cache.rs:456:17\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:78\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1069\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1531\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:198\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:218\r\n  10: rustc_driver::report_ice\r\n  11: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:481\r\n  12: rust_begin_unwind\r\n             at src/libstd/panicking.rs:385\r\n  13: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:89\r\n  14: core::option::expect_failed\r\n             at src/libcore/option.rs:1264\r\n  15: <rustc_middle::ty::query::on_disk_cache::CacheDecoder as serialize::serialize::SpecializedDecoder<rustc_span::span_encoding::Span>>::specialized_decode\r\n  16: <(T10,T11) as serialize::serialize::Decodable>::decode\r\n  17: <rustc_middle::ty::query::on_disk_cache::CacheDecoder as serialize::serialize::SpecializedDecoder<rustc_span::span_encoding::Span>>::specialized_decode\r\n  18: serialize::serialize::Decoder::read_option\r\n  19: <rustc_middle::ty::Generics as serialize::serialize::Decodable>::decode\r\n  20: rustc_middle::ty::query::on_disk_cache::OnDiskCache::try_load_query_result\r\n  21: rustc_query_system::query::plumbing::get_query\r\n  22: rustc_typeck::variance::terms::TermsContext::add_inferreds_for_item\r\n  23: rustc_typeck::variance::terms::determine_parameters_to_be_inferred\r\n  24: rustc_typeck::variance::crate_variances\r\n  25: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  26: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  27: rustc_query_system::query::plumbing::force_query\r\n  28: rustc_middle::ty::query::force_from_dep_node\r\n  29: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n  30: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n  31: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_green_and_read\r\n  32: rustc_query_system::query::plumbing::ensure_query\r\n  33: rustc_data_structures::sync::par_for_each_in\r\n  34: rustc_hir::hir::Crate::par_visit_all_item_likes\r\n  35: rustc_typeck::check_crate\r\n  36: rustc_interface::passes::analysis\r\n  37: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::analysis>::compute\r\n  38: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  39: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  40: rustc_query_system::query::plumbing::get_query\r\n  41: rustc_middle::ty::context::tls::enter_global\r\n  42: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  43: scoped_tls::ScopedKey<T>::set\r\n  44: rustc_ast::attr::with_globals\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.45.0-nightly (647016923 2020-04-28) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C bitcode-in-rlib=no -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [generics_of] processing `<card::Card as std::fmt::Debug>::fmt`\r\n#1 [crate_variances] computing the variances for items in this crate\r\n#2 [analysis] running analysis passes on this crate\r\nend of query stack\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73434/timeline", "performed_via_github_app": null, "state_reason": "completed"}