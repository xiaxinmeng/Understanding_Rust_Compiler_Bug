{"url": "https://api.github.com/repos/rust-lang/rust/issues/58677", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58677/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58677/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58677/events", "html_url": "https://github.com/rust-lang/rust/issues/58677", "id": 413721433, "node_id": "MDU6SXNzdWU0MTM3MjE0MzM=", "number": 58677, "title": "Closure/Pin: &mut captured as value", "user": {"login": "kpp", "id": 467709, "node_id": "MDQ6VXNlcjQ2NzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpp", "html_url": "https://github.com/kpp", "followers_url": "https://api.github.com/users/kpp/followers", "following_url": "https://api.github.com/users/kpp/following{/other_user}", "gists_url": "https://api.github.com/users/kpp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpp/subscriptions", "organizations_url": "https://api.github.com/users/kpp/orgs", "repos_url": "https://api.github.com/users/kpp/repos", "events_url": "https://api.github.com/users/kpp/events{/privacy}", "received_events_url": "https://api.github.com/users/kpp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-23T18:13:12Z", "updated_at": "2019-08-05T21:38:25Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "rustc -vV = `1.34.0-nightly (146aa60f3 2019-02-18)`\r\n\r\nMRE:\r\n\r\n```\r\nfn test() {\r\n    use core::pin::Pin;\r\n\r\n    fn take_fn_mut<F>(f: F)\r\n        where F: FnMut() -> ()\r\n    {}\r\n\r\n    let mut x = 0i32;\r\n    let reference = &mut x;\r\n    let fn_mut = || { Pin::new(reference); };\r\n    take_fn_mut(fn_mut);\r\n}\r\n\r\nerror[E0525]: expected a closure that implements the `FnMut` trait, but this closure only implements `FnOnce`\r\n  --> src/lib.rs:10:18\r\n   |\r\n10 |     let fn_mut = || { Pin::new(reference); };\r\n   |                  ^^            --------- closure is `FnOnce` because it moves the variable `reference` out of its environment\r\n   |                  |\r\n   |                  this closure implements `FnOnce`, not `FnMut`\r\n11 |     take_fn_mut(fn_mut);\r\n   |     ----------- the requirement to implement `FnMut` derives from here\r\n```\r\nPlayground: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=b21dc69d7b5e018992620d82995ccd43\r\n\r\n3 local fixes:\r\n\r\n```diff\r\n- let fn_mut = || { Pin::new(reference); };\r\n+ let fn_mut = || { Pin::new(&mut *reference); };\r\n```\r\n\r\n```diff\r\n- let fn_mut = || { Pin::new(reference); };\r\n+ let fn_mut = || { Pin::new(reference as &_); };\r\n```\r\n\r\n```diff\r\n- let fn_mut = || { Pin::new(reference); };\r\n+ let fn_mut = || { Pin::<&mut i32>::new(reference); };\r\n```\r\n\r\nThese \"fixes\" are strange because [Pin::new](https://doc.rust-lang.org/nightly/std/pin/struct.Pin.html#method.new) accepts `pointer: P` whereas in our case `P` should be `&mut i32`, but specializing `P` manually to `Pin::<&mut i32>::new` solves the issue. Why?\r\n\r\nReferenced article: https://bluss.github.io/rust/fun/2015/10/11/stuff-the-identity-function-does/", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58677/timeline", "performed_via_github_app": null, "state_reason": null}