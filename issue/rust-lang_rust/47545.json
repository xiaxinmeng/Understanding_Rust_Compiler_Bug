{"url": "https://api.github.com/repos/rust-lang/rust/issues/47545", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47545/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47545/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47545/events", "html_url": "https://github.com/rust-lang/rust/issues/47545", "id": 289660948, "node_id": "MDU6SXNzdWUyODk2NjA5NDg=", "number": 47545, "title": "Type inference do not take bounds from `impl` into account", "user": {"login": "Marwes", "id": 957312, "node_id": "MDQ6VXNlcjk1NzMxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/957312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marwes", "html_url": "https://github.com/Marwes", "followers_url": "https://api.github.com/users/Marwes/followers", "following_url": "https://api.github.com/users/Marwes/following{/other_user}", "gists_url": "https://api.github.com/users/Marwes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marwes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marwes/subscriptions", "organizations_url": "https://api.github.com/users/Marwes/orgs", "repos_url": "https://api.github.com/users/Marwes/repos", "events_url": "https://api.github.com/users/Marwes/events{/privacy}", "received_events_url": "https://api.github.com/users/Marwes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-18T15:05:08Z", "updated_at": "2020-04-20T22:49:47Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the example below I get the following error.\r\n\r\n```\r\nerror[E0284]: type annotations required: cannot resolve `<_ as Stream>::Item == char`\r\n  --> src/main.rs:60:49\r\n   |\r\n60 |     let _: (char, &str) = satisfy(|c| c != 'a').map(|c| c).parse(\"\").unwrap();\r\n   |                                                 ^^^\r\n   |\r\n   = note: required because of the requirements on the impl of `Parser<_>` for `Satisfy<[closure@src/main.rs:60:35: 60:47]>`\r\n```\r\n\r\nPerhaps this is intended but I couldn't find anything stating that, feel free to close if that is the case.\r\n\r\n```rust\r\n\r\n#[derive(Clone)]\r\npub struct Satisfy<P> {\r\n    predicate: P,\r\n}\r\n\r\ntrait Stream {\r\n    type Item;\r\n}\r\n\r\nimpl<I, P> Parser<I> for Satisfy<P>\r\nwhere\r\n    I: Stream,\r\n    P: FnMut(I::Item) -> bool,\r\n{\r\n    type Output = I::Item;\r\n}\r\n\r\npub fn satisfy<P, C>(predicate: P) -> Satisfy<P>\r\nwhere\r\n    P: FnMut(C) -> bool,\r\n{\r\n    Satisfy { predicate }\r\n}\r\n\r\npub struct Map<P, F>(P, F);\r\nimpl<I, B, P, F> Parser<I> for Map<P, F>\r\nwhere\r\n    I: Stream,\r\n    P: Parser<I>,\r\n    F: FnMut(P::Output) -> B,\r\n{\r\n    type Output = B;\r\n}\r\n\r\nimpl<'a> Stream for &'a str {\r\n    type Item = char;\r\n}\r\n\r\npub trait Parser<Input>\r\nwhere\r\n    Input: Stream,\r\n{\r\n    type Output;\r\n\r\n    fn parse(&mut self, input: Input) -> Result<(Self::Output, Input), ()> {\r\n        unimplemented!()\r\n    }\r\n\r\n    fn map<F, B>(self, f: F) -> Map<Self, F>\r\n    where\r\n        F: FnMut(Self::Output) -> B,\r\n        Self: Sized,\r\n    {\r\n        Map(self, f)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let _: (char, &str) = satisfy(|c| c != 'a').map(|c| c).parse(\"\").unwrap();\r\n}\r\n\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47545/timeline", "performed_via_github_app": null, "state_reason": null}