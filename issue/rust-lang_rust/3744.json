{"url": "https://api.github.com/repos/rust-lang/rust/issues/3744", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3744/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3744/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3744/events", "html_url": "https://github.com/rust-lang/rust/issues/3744", "id": 7549037, "node_id": "MDU6SXNzdWU3NTQ5MDM3", "number": 3744, "title": "Bug in generic trait implementation?", "user": {"login": "tav", "id": 30302, "node_id": "MDQ6VXNlcjMwMzAy", "avatar_url": "https://avatars.githubusercontent.com/u/30302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tav", "html_url": "https://github.com/tav", "followers_url": "https://api.github.com/users/tav/followers", "following_url": "https://api.github.com/users/tav/following{/other_user}", "gists_url": "https://api.github.com/users/tav/gists{/gist_id}", "starred_url": "https://api.github.com/users/tav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tav/subscriptions", "organizations_url": "https://api.github.com/users/tav/orgs", "repos_url": "https://api.github.com/users/tav/repos", "events_url": "https://api.github.com/users/tav/events{/privacy}", "received_events_url": "https://api.github.com/users/tav/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/8", "html_url": "https://github.com/rust-lang/rust/milestone/8", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/8/labels", "id": 144598, "node_id": "MDk6TWlsZXN0b25lMTQ0NTk4", "number": 8, "title": "0.5", "description": "", "creator": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 206, "state": "closed", "created_at": "2012-07-12T19:45:03Z", "updated_at": "2013-06-13T02:57:55Z", "due_on": "2012-12-22T08:00:00Z", "closed_at": "2013-06-13T02:57:55Z"}, "comments": 9, "created_at": "2012-10-12T17:34:17Z", "updated_at": "2014-06-16T21:56:23Z", "closed_at": "2012-12-04T17:47:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a possible bug when you define a generic trait implementation within a different module but within the same file, e.g. given:\n\n``` rust\ntype byte = u8;\n\nmod crypto {\n\n// Hash is the trait implemented by all cryptographic hash functions.\npub trait Hash {\n    fn block_size() -> int;\n    fn digest() -> ~[byte];\n    fn digest_size() -> int;\n    fn reset();\n    fn update(msg: &[byte]);\n}\n\n// HashUtil is a utility trait that is auto-implemented for all Hash\n// implementations.\npub trait HashUtil {\n    fn hexdigest() -> ~str;\n    fn update(msg: &str);\n}\n\nimpl <A: Hash> A: HashUtil {\n\n    fn hexdigest() -> ~str {\n        let mut d = ~\"\";\n        for vec::each(self.digest()) |b| {\n            d += fmt!(\"%02x\", *b as uint)\n        }\n        return d;\n    }\n\n    fn update(msg: &str) {\n        self.update(str::to_bytes(msg));\n    }\n\n}\n\n}\n\nmod sha256 {\n\nuse crypto::Hash;\n\nconst block_size: int = 64;\nconst digest_size: int = 32;\n\nconst i0: u32 = 0x6a09e667;\nconst i1: u32 = 0xbb67ae85;\nconst i2: u32 = 0x3c6ef372;\nconst i3: u32 = 0xa54ff53a;\nconst i4: u32 = 0x510e527f;\nconst i5: u32 = 0x9b05688c;\nconst i6: u32 = 0x1f83d9ab;\nconst i7: u32 = 0x5be0cd19;\n\nconst k: [u32 * 64] =\n    [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,\n     0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n     0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,\n     0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n     0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n     0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n     0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,\n     0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n     0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,\n     0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n     0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\nstruct sha256 {\n    b: [mut byte * 64],\n    h: [mut u32 * 8],\n    mut l: u64,\n    mut n: uint,\n}\n\nimpl sha256 {\n\n    #[inline(always)]\n    fn compute_block() {\n        let mut h0 = self.h[0];\n        let mut h1 = self.h[1];\n        let mut h2 = self.h[2];\n        let mut h3 = self.h[3];\n        let mut h4 = self.h[4];\n        let mut h5 = self.h[5];\n        let mut h6 = self.h[6];\n        let mut h7 = self.h[7];\n        self.h[0] = h0;\n        self.h[1] = h1;\n        self.h[2] = h2;\n        self.h[3] = h3;\n        self.h[4] = h4;\n        self.h[5] = h5;\n        self.h[6] = h6;\n        self.h[7] = h7;\n    }\n\n}\n\nimpl sha256: Hash {\n\n    fn block_size() -> int { block_size }\n\n    fn digest() -> ~[byte] {\n        ~[1, 2, 37]\n    }\n\n    fn digest_size() -> int { digest_size }\n\n    fn reset() {\n        self.h[0] = i0;\n        self.h[1] = i1;\n        self.h[2] = i2;\n        self.h[3] = i3;\n        self.h[4] = i4;\n        self.h[5] = i5;\n        self.h[6] = i6;\n        self.h[7] = i7;\n        self.l = 0;\n        self.n = 0;\n    }\n\n    fn update(msg: &[byte]) {\n        let mut l = msg.len();\n        self.l += l as u64;\n        if self.n > 0 {\n            if l > 64 - self.n {\n                l = 64 - self.n;\n            }\n        }\n    }\n\n}\n\npub fn new() -> sha256 {\n    sha256{\n        b: [mut 0, ..64],\n        h: [mut i0, i1, i2, i3, i4, i5, i6, i7],\n        l: 0,\n        n: 0\n    }\n}\n\n}\n\nfn main() {\n    io::println(fmt!(\"val: %?\", sha256::new().block_size()));\n    io::println(fmt!(\"val: %?\", sha256::new().hexdigest()));\n}\n```\n\nThe compiler errors with:\n\n```\nerror: attempted access of field `hexdigest` on type `sha256::sha256`, but no field or method with that name was found\n```\n\nIf, however, you put a `use crypto::*;` statement before the `main()`, then everything seems to work. This behaviour feels like a bug since `block_size()` works and `hexdigest()` is defined within the same module...\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3744/timeline", "performed_via_github_app": null, "state_reason": "completed"}