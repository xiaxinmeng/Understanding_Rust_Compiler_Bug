{"url": "https://api.github.com/repos/rust-lang/rust/issues/102734", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102734/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102734/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102734/events", "html_url": "https://github.com/rust-lang/rust/issues/102734", "id": 1399352520, "node_id": "I_kwDOAAsO6M5TaGzI", "number": 102734, "title": "failing orphan check with associated types should suggest using the associated type directly.", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": {"login": "in42", "id": 12832671, "node_id": "MDQ6VXNlcjEyODMyNjcx", "avatar_url": "https://avatars.githubusercontent.com/u/12832671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/in42", "html_url": "https://github.com/in42", "followers_url": "https://api.github.com/users/in42/followers", "following_url": "https://api.github.com/users/in42/following{/other_user}", "gists_url": "https://api.github.com/users/in42/gists{/gist_id}", "starred_url": "https://api.github.com/users/in42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/in42/subscriptions", "organizations_url": "https://api.github.com/users/in42/orgs", "repos_url": "https://api.github.com/users/in42/repos", "events_url": "https://api.github.com/users/in42/events{/privacy}", "received_events_url": "https://api.github.com/users/in42/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "in42", "id": 12832671, "node_id": "MDQ6VXNlcjEyODMyNjcx", "avatar_url": "https://avatars.githubusercontent.com/u/12832671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/in42", "html_url": "https://github.com/in42", "followers_url": "https://api.github.com/users/in42/followers", "following_url": "https://api.github.com/users/in42/following{/other_user}", "gists_url": "https://api.github.com/users/in42/gists{/gist_id}", "starred_url": "https://api.github.com/users/in42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/in42/subscriptions", "organizations_url": "https://api.github.com/users/in42/orgs", "repos_url": "https://api.github.com/users/in42/repos", "events_url": "https://api.github.com/users/in42/events{/privacy}", "received_events_url": "https://api.github.com/users/in42/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2022-10-06T10:54:50Z", "updated_at": "2022-10-07T13:46:16Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\ntrait Trait {\n    type Assoc;\n}\n\nstruct LocalTy;\nimpl Trait for () {\n    type Assoc = LocalTy;\n}\n\nimpl PartialEq for <() as Trait>::Assoc {\n    fn eq(&self, other: &Self) -> bool {\n        true\n    }\n}\n```\nresults in \n```rust\nerror[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n  --> src/lib.rs:10:1\n   |\n10 | impl PartialEq for <() as Trait>::Assoc {\n   | ^^^^^---------^^^^^--------------------\n   | |    |             |\n   | |    |             `<() as Trait>::Assoc` is not defined in the current crate\n   | |    `<() as Trait>::Assoc` is not defined in the current crate\n   | impl doesn't use only types from inside the current crate\n   |\n   = note: define and implement a trait or new type instead\n```\nideally it should mention that `<() as Trait>::Assoc` may actually be local to the current crate and that the user could replace that projection with the associated type itself.\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"in42\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102734/timeline", "performed_via_github_app": null, "state_reason": null}