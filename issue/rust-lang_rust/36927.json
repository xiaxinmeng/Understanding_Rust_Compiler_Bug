{"url": "https://api.github.com/repos/rust-lang/rust/issues/36927", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/36927/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/36927/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/36927/events", "html_url": "https://github.com/rust-lang/rust/issues/36927", "id": 180627172, "node_id": "MDU6SXNzdWUxODA2MjcxNzI=", "number": 36927, "title": "Match on repr(C) enum returned from C library with unknown value leads to UB", "user": {"login": "tcosprojects", "id": 518742, "node_id": "MDQ6VXNlcjUxODc0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/518742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tcosprojects", "html_url": "https://github.com/tcosprojects", "followers_url": "https://api.github.com/users/tcosprojects/followers", "following_url": "https://api.github.com/users/tcosprojects/following{/other_user}", "gists_url": "https://api.github.com/users/tcosprojects/gists{/gist_id}", "starred_url": "https://api.github.com/users/tcosprojects/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tcosprojects/subscriptions", "organizations_url": "https://api.github.com/users/tcosprojects/orgs", "repos_url": "https://api.github.com/users/tcosprojects/repos", "events_url": "https://api.github.com/users/tcosprojects/events{/privacy}", "received_events_url": "https://api.github.com/users/tcosprojects/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2016-10-03T12:22:57Z", "updated_at": "2019-03-07T17:24:31Z", "closed_at": "2019-03-07T17:24:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Summary\n\nIt is not uncommon for C libraries to add more values to an enum in their API while considering it a non-breaking change. However, with a rust library linked to the C library it causes undefined behavior when the change is made if the rust enum definition is not updated.\n### Examples\n\nI've reduced the issue down to this sample code where get_bad_kind() represents a call into a C library that returns a new enum value unknown to rust which leads to a crash at runtime (signal: 11, SIGSEGV: invalid memory reference or stack overflow): https://play.rust-lang.org/?gist=f066d8e489a6e220866958065891a812&version=stable&backtrace=0\n\nThe C version of this code does not result in this issue, instead it hits the default case and returns -1: https://gist.github.com/tcosprojects/49d0c809d40b8f008e25dacf49c508bf\n### Tested on\n\nrustc 1.12.0 (3191fbae9 2016-09-23)\nbinary: rustc\ncommit-hash: 3191fbae9da539442351f883bdabcad0d72efcb6\ncommit-date: 2016-09-23\nhost: x86_64-unknown-linux-gnu\nrelease: 1.12.0\n\nand\n\nrustc 1.12.0 (3191fbae9 2016-09-23)\nbinary: rustc\ncommit-hash: 3191fbae9da539442351f883bdabcad0d72efcb6\ncommit-date: 2016-09-23\nhost: i686-pc-windows-msvc\nrelease: 1.12.0\n### Discussion\n\nDiscussing the issue on the #rust channel led to the following:\n\nA binding library would need to match the rust definition of the enum with the C definition exactly at all times when linked to a C library to prevent either this undefined behavior or passing unsupported flags to older versions of the C library.  This could be done in the cargo build script that checks the C library version and enables feature flags for these enum values. It would still not not guarantee safety though when using dynamically linked libraries. Or it could be resolved by not using repr(C) enums and instead translating them at runtime with a function that handles invalid values. If the latter should be done, it would be helpful to have it mentioned in the docs somewhere. It also makes me uncertain what the purpose of repr(C) enum is, if not to be compatible with and used with C FFI calls.\n\nIn any case, as a C programmer this bug was surprising and took some significant debugging. It required going into the assembly output of the match statement to see it jump based on the constant of the highest value from the rust enum definition and then corrupt the stack to pin down the cause of the crash.\n\nA warning about this compatibility issue regarding repr(C) enum in the FFI docs would be helpful. I suspect it is not uncommon for rust bindings libraries to use repr(C) enum this way while expecting it to work.\n\nIf the match expression could jump to unreachable!() in debug builds when encountering an unknown value on a repr(C) enum type it would help catch this issue without so much debugging.\n### Questions\n1. In the discussion on #rust there was some disagreement over whether this is undefined behavior for C. Is it?\n2. In the discussion there was also disagreement over whether this should be considered a breaking ABI change by the C library. In practice it does not seem uncommon for C libraries to do this while considering it non-breaking. Is it?\n3. Should this be a concern for rustc? Or handled elsewhere?\n4. Is it possible for rust to match the behavior of the C program's switch when an enum is repr(C)?\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/36927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/36927/timeline", "performed_via_github_app": null, "state_reason": "completed"}