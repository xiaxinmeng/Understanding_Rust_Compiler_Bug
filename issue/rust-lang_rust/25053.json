{"url": "https://api.github.com/repos/rust-lang/rust/issues/25053", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/25053/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/25053/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/25053/events", "html_url": "https://github.com/rust-lang/rust/issues/25053", "id": 72630213, "node_id": "MDU6SXNzdWU3MjYzMDIxMw==", "number": 25053, "title": "UnsafeCell should implement the Copy trait", "user": {"login": "diwic", "id": 9721510, "node_id": "MDQ6VXNlcjk3MjE1MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/9721510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diwic", "html_url": "https://github.com/diwic", "followers_url": "https://api.github.com/users/diwic/followers", "following_url": "https://api.github.com/users/diwic/following{/other_user}", "gists_url": "https://api.github.com/users/diwic/gists{/gist_id}", "starred_url": "https://api.github.com/users/diwic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diwic/subscriptions", "organizations_url": "https://api.github.com/users/diwic/orgs", "repos_url": "https://api.github.com/users/diwic/repos", "events_url": "https://api.github.com/users/diwic/events{/privacy}", "received_events_url": "https://api.github.com/users/diwic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 59, "created_at": "2015-05-02T10:59:09Z", "updated_at": "2022-06-16T14:26:24Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently `UnsafeCell` does not implement `Copy`. It would be beneficial if it could, for at least two reasons:\n- Easier initialization of fixed arrays, e g: `[UnsafeCell::new(0i32); 75]`\n- It enables people to make cell-like types which are `Copy`.\n\nAFAIK, there are no disadvantages for `UnsafeCell` to implement `Copy`.\n\nNote: the reason people can't just copy-and-paste the code for `UnsafeCell` to make their own variant with copy semantics, is that `UnsafeCell` is a `#[lang=\"unsafe_cell\"]`: \"The `UnsafeCell<T>` type is the only legal way to obtain aliasable data that is considered mutable. In general, transmuting an `&T` type into an `&mut T` is considered undefined behavior.\"\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/25053/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/25053/timeline", "performed_via_github_app": null, "state_reason": null}