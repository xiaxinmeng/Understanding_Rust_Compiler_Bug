{"url": "https://api.github.com/repos/rust-lang/rust/issues/82371", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82371/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82371/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82371/events", "html_url": "https://github.com/rust-lang/rust/issues/82371", "id": 812866337, "node_id": "MDU6SXNzdWU4MTI4NjYzMzc=", "number": 82371, "title": "LLVM global constructor support when targeting WebAssembly", "user": {"login": "chinedufn", "id": 2099811, "node_id": "MDQ6VXNlcjIwOTk4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2099811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chinedufn", "html_url": "https://github.com/chinedufn", "followers_url": "https://api.github.com/users/chinedufn/followers", "following_url": "https://api.github.com/users/chinedufn/following{/other_user}", "gists_url": "https://api.github.com/users/chinedufn/gists{/gist_id}", "starred_url": "https://api.github.com/users/chinedufn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chinedufn/subscriptions", "organizations_url": "https://api.github.com/users/chinedufn/orgs", "repos_url": "https://api.github.com/users/chinedufn/repos", "events_url": "https://api.github.com/users/chinedufn/events{/privacy}", "received_events_url": "https://api.github.com/users/chinedufn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2021-02-21T14:20:51Z", "updated_at": "2023-01-15T23:19:04Z", "closed_at": "2021-02-21T19:04:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Opening this PR as a followup to @alexcrichton 's comment on supporting static constructors in wasm-bindgen https://github.com/rustwasm/wasm-bindgen/issues/1216#issuecomment-459137498 .\r\n\r\nI'd like to implement support for static constructors in wasm on the rustc side.\r\n\r\nI'm a first time contributor that could use some guidance.\r\n\r\nI've outlined what I think needs to get done below. In areas where it seemed much easier to ask for help than to try to figure it out myself, I left notes about the sort of guidance that I thought I needed.\r\n\r\nI don't know what I don't know though, so please keep your eyes peeled for incorrect assumptions or things that I've completely overlooked.\r\n\r\nOr just generally any other advice. All tips are welcomed.\r\n\r\nThank you.\r\n\r\n## Simple Illustration\r\n\r\nGiven the code\r\n\r\n```rust\r\n#![feature(wasm_global_ctors)]\r\n\r\n#[wasm_global_ctor]\r\npub fn some_function() {\r\n    log(\"Hello, ctor!\");\r\n}\r\n\r\n#[wasm_global_ctor]\r\npub fn another_function() {\r\n    log(\"Hello, ctor!\");\r\n}\r\n```\r\n\r\nWe need to emit the following the LLVM IR. ([Thanks to @Frizi for investigating this.](https://github.com/rustwasm/wasm-bindgen/issues/1216#issuecomment-533072447))\r\n\r\n```\r\ntarget triple = \"wasm32-unknown-unknown\"\r\n\r\ndeclare hidden void @call_ctor()\r\ndeclare hidden void @call_ctor2()\r\n\r\n@llvm.global_ctors = appending global [2 x { i32, void ()*, i8* }] [\r\n  { i32, void ()*, i8* } { i32 4000, void ()* @some_function, i8* null },\r\n  { i32, void ()*, i8* } { i32 4000, void ()* @another_function, i8* null }\r\n]\r\n```\r\n\r\nNote that we should also support the `#[wasm_global_ctor]` attribute for `static FOO: extern \"C\" fn() = { /* ... */ }` function pointers, but I'd like to focus on landing function support first unless someone says otherwise.\r\n\r\n(Note that I have no real experience working with LLVM directly so let me know if I am missing something.)\r\n\r\n## Test Cases\r\n\r\nHere are the test cases that I think will be needed.\r\n\r\nI noted the ones where I could use some guidance on how/where to best implement them.\r\n\r\n### Feature Gate\r\n\r\nIntroduce these files:\r\n\r\n`src/test/ui/feature-gates/issue-XXXX-gating-of-wasm-global-ctor-error.rs`\r\n`src/test/ui/feature-gates/issue-XXXX-gating-of-wasm-global-ctor-error.stderr`\r\n\r\n### Verifying the `#[wasm_global_ctor]` is ignored on non wasm32 target\r\n\r\nGuidance on where to add this and links to similar existing tests would be helpful please.\r\n\r\n### Verifying the `#[wasm_global_ctor]` leads to correct `@llvm.global_ctors`\r\n\r\nGuidance on where to add these and links to similar existing tests would be helpful please.\r\n\r\n- A test case with one `#[wasm_global_ctor]` function\r\n\r\n- A test case with one `#[wasm_global_ctor]` STATIC variable that is a function pointer\r\n\r\n- A test case with two `#[wasm_global_ctor]` attributes so that we can verify that we properly handle multiple attribute instances.\r\n\r\n\r\n## Parsing `#[wasm_global_ctor]` attribute\r\n\r\nHere's what I think is needed to parse the `#[wasm_global_ctor]` attribute.\r\n\r\n---\r\n\r\nCreate a symbol for `wasm_global_ctor`\r\n\r\nhttps://github.com/rust-lang/rust/blob/ef1468822146032d53bc3970ef8382b72923e51f/compiler/rustc_span/src/symbol.rs#L1262\r\n\r\n---\r\n\r\nAdd a method to check whether `wasm_global_ctor` is applied to a function\r\n\r\nhttps://github.com/rust-lang/rust/blob/master/compiler/rustc_passes/src/check_attr.rs#L69\r\n\r\n---\r\n\r\nAdd `CodegenFnAttrFlags::WASM_GLOBAL_CTOR`\r\n\r\nhttps://github.com/rust-lang/rust/blob/7afb32557da945ec70fc926dbd91006089005fa4/compiler/rustc_middle/src/middle/codegen_fn_attrs.rs#L45\r\n\r\nAnd set it in the `codegen_fn_attrs`\r\n\r\nhttps://github.com/rust-lang/rust/blob/8fe989dd768f5dfdb0fc90933f3f74fa4579fefd/compiler/rustc_typeck/src/collect.rs#L2654\r\n\r\n---\r\n\r\nAdd a `gated!(wasm_global_ctor, AssumeUsed, template!(Word)`\r\n\r\nhttps://github.com/rust-lang/rust/blob/dbdbd30bf2cb0d48c8bbce83c2458592664dbb18/compiler/rustc_feature/src/builtin_attrs.rs#L236-L235\r\n\r\n## Generating the LLVM IR\r\n\r\nGuidance on where/how to do these along with some links to similar code would be helpful please.\r\n\r\n- We need to store a set of all global constructor function names that we come across.\r\n\r\n- At some point we need to iterate that set and generate the appropriate LLVM IR (example of how this looks can be found above)\r\n\r\n## Summary\r\n\r\nPlease let me know if there are key pieces that are not outlined above and I will add them in.\r\n\r\nI'd like to implement this if that's alright, so all guidance and tips are very much appreciated.", "closed_by": {"login": "chinedufn", "id": 2099811, "node_id": "MDQ6VXNlcjIwOTk4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2099811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chinedufn", "html_url": "https://github.com/chinedufn", "followers_url": "https://api.github.com/users/chinedufn/followers", "following_url": "https://api.github.com/users/chinedufn/following{/other_user}", "gists_url": "https://api.github.com/users/chinedufn/gists{/gist_id}", "starred_url": "https://api.github.com/users/chinedufn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chinedufn/subscriptions", "organizations_url": "https://api.github.com/users/chinedufn/orgs", "repos_url": "https://api.github.com/users/chinedufn/repos", "events_url": "https://api.github.com/users/chinedufn/events{/privacy}", "received_events_url": "https://api.github.com/users/chinedufn/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82371/timeline", "performed_via_github_app": null, "state_reason": "completed"}