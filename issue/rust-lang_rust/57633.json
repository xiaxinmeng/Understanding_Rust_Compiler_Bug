{"url": "https://api.github.com/repos/rust-lang/rust/issues/57633", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57633/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57633/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57633/events", "html_url": "https://github.com/rust-lang/rust/issues/57633", "id": 399392055, "node_id": "MDU6SXNzdWUzOTkzOTIwNTU=", "number": 57633, "title": "Stack overflow on cloning static boxed value with a generic impl", "user": {"login": "feymartynov", "id": 1500700, "node_id": "MDQ6VXNlcjE1MDA3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1500700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feymartynov", "html_url": "https://github.com/feymartynov", "followers_url": "https://api.github.com/users/feymartynov/followers", "following_url": "https://api.github.com/users/feymartynov/following{/other_user}", "gists_url": "https://api.github.com/users/feymartynov/gists{/gist_id}", "starred_url": "https://api.github.com/users/feymartynov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feymartynov/subscriptions", "organizations_url": "https://api.github.com/users/feymartynov/orgs", "repos_url": "https://api.github.com/users/feymartynov/repos", "events_url": "https://api.github.com/users/feymartynov/events{/privacy}", "received_events_url": "https://api.github.com/users/feymartynov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-01-15T15:17:48Z", "updated_at": "2020-11-04T19:17:48Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Here's a sample program that uses a static HashMap of structs containing boxed values:\r\n\r\n```rust\r\n#[macro_use]\r\nextern crate lazy_static;\r\n\r\nuse std::collections::HashMap;\r\nuse std::sync::Mutex;\r\nuse std::fmt::Display;\r\n\r\ntrait Value: Send + Display {\r\n    fn box_clone(&self) -> Box<dyn Value>;\r\n}\r\n\r\nimpl Value for isize {\r\n    fn box_clone(&self) -> Box<dyn Value> {\r\n        Box::new((*self).clone())\r\n    }\r\n}\r\n\r\nimpl Value for String {\r\n    fn box_clone(&self) -> Box<dyn Value> {\r\n        Box::new((*self).clone())\r\n    }\r\n}\r\n\r\n#[derive(Clone)]\r\nstruct S {\r\n    value: Box<dyn Value>\r\n}\r\n\r\nimpl Clone for Box<dyn Value> {\r\n    fn clone(&self) -> Box<dyn Value> {\r\n        self.box_clone()\r\n    }\r\n}\r\n\r\nlazy_static! {\r\n    static ref Registry: Mutex<HashMap<String, S>> = {\r\n        Mutex::new(HashMap::new())\r\n    };\r\n}\r\n\r\nimpl Registry {\r\n    fn get(&self, key: &str) -> Option<S> {\r\n        self.lock().unwrap().get(&String::from(key)).map(|s| s.clone())\r\n    }\r\n\r\n    fn set(&self, key: &str, value: S) -> Option<S> {\r\n        self.lock().unwrap().insert(String::from(key), value)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    Registry.set(\"foo\", S { value: Box::new(String::from(\"hello world\")) });\r\n    Registry.set(\"bar\", S { value: Box::new(123) });\r\n\r\n    println!(\"{}\", Registry.get(\"foo\").unwrap().value);\r\n    println!(\"{}\", Registry.get(\"bar\").unwrap().value);\r\n}\r\n```\r\n\r\nIt works as expected but when I replace redundant impl blocks with a generic one like this:\r\n\r\n```rust\r\nimpl<T: 'static + Send + Clone + Display> Value for T {\r\n    fn box_clone(&self) -> Box<dyn Value> {\r\n        Box::new((*self).clone())\r\n    }\r\n}\r\n```\r\n\r\nit fails with stack overflow in runtime:\r\n\r\n```\r\nthread 'main' has overflowed its stack\r\nfatal runtime error: stack overflow\r\n[1]    48231 abort      cargo run\r\n```\r\n\r\nI'm new to Rust and not sure whether it's a bug. Maybe I just do something wrong. However I found the error strange because I don't explicitly do recursion or something else that potentially can lead to stack overflow here. Also it's weird that the compiler didn't find any problem because generics are compile-time concern.\r\n\r\nBy the way when I replace static variable with a local one it works fine even with the generic impl.\r\n\r\nrustc 1.31.1 (b6c32da9b 2018-12-18), macOS 10.14.2", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57633/timeline", "performed_via_github_app": null, "state_reason": null}