{"url": "https://api.github.com/repos/rust-lang/rust/issues/104446", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104446/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104446/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104446/events", "html_url": "https://github.com/rust-lang/rust/issues/104446", "id": 1449843631, "node_id": "I_kwDOAAsO6M5Watuv", "number": 104446, "title": "Incremental compilation breaks(?) `Rc::ptr_eq` with trait objects across function call boundary", "user": {"login": "isaacthefallenapple", "id": 46586828, "node_id": "MDQ6VXNlcjQ2NTg2ODI4", "avatar_url": "https://avatars.githubusercontent.com/u/46586828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isaacthefallenapple", "html_url": "https://github.com/isaacthefallenapple", "followers_url": "https://api.github.com/users/isaacthefallenapple/followers", "following_url": "https://api.github.com/users/isaacthefallenapple/following{/other_user}", "gists_url": "https://api.github.com/users/isaacthefallenapple/gists{/gist_id}", "starred_url": "https://api.github.com/users/isaacthefallenapple/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isaacthefallenapple/subscriptions", "organizations_url": "https://api.github.com/users/isaacthefallenapple/orgs", "repos_url": "https://api.github.com/users/isaacthefallenapple/repos", "events_url": "https://api.github.com/users/isaacthefallenapple/events{/privacy}", "received_events_url": "https://api.github.com/users/isaacthefallenapple/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-11-15T14:06:54Z", "updated_at": "2022-11-15T16:03:02Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI found [this question](https://stackoverflow.com/questions/74443679/comparison-between-two-rcrefcelldyn-obj-unconsistent-behavior) on SO where two more or less identical calls to `Rc::ptr_eq` return different results, depending on where the `Rc<RefCell<_>>` is cast to a trait object but also how the program is compiled. It behaves inconsistently when the function in question is not inlined or when incremental compilation is turned on. I've whittled it down to a smaller example (though it can probably be reduced further):\r\n\r\n```rust\r\nuse std::{cell::RefCell, rc::Rc};\r\n\r\nstruct S;\r\ntrait T {}\r\nimpl T for S {}\r\n\r\nstruct C {\r\n    r: Rc<RefCell<dyn T>>,\r\n}\r\n\r\nimpl C {\r\n    fn has_dyn_other(&self, other: &Rc<RefCell<dyn T>>) -> bool {\r\n        Rc::ptr_eq(&self.r, other)\r\n    }\r\n    fn has_other<A: T + 'static>(&self, other: &Rc<RefCell<A>>) -> bool {\r\n        Rc::ptr_eq(&self.r, &(Rc::clone(other) as Rc<RefCell<dyn T>>))\r\n    }\r\n}\r\n\r\n#[test]\r\nfn weird_trait_obj() {\r\n    let s = Rc::new(RefCell::new(S));\r\n    let c = C {\r\n        r: Rc::clone(&s) as Rc<RefCell<dyn T>>,\r\n    };\r\n\r\n    // passes\r\n    assert!(Rc::ptr_eq(&(Rc::clone(&s) as Rc<RefCell<dyn T>>), &c.r));\r\n    // passes\r\n    assert!(Rc::ptr_eq(\r\n        &(Rc::clone(&s) as Rc<RefCell<dyn T>>),\r\n        &(Rc::clone(&s) as Rc<RefCell<dyn T>>)\r\n    ));\r\n    // passes\r\n    assert!(c.has_dyn_other(&(Rc::clone(&s) as Rc<RefCell<dyn T>>)));\r\n    // passes with `incremental = false` or `#[inline(always)]`, fails otherwise\r\n    assert!(c.has_other(&s));\r\n}\r\n```\r\n\r\nI expected to see this happen: I would have thought either all or none of the asserts would pass regardless of how it's compiled. I don't know how `Rc<RefCell<T>> as Rc<RefCell<dyn Trait>>` actually works, so I'm not sure which one. I'm guessing it looks more like `Rc<dyn RefCell<Trait>>` where the `Rc` points at a trait object that in turn points at the `RefCell` as its instance? I don't know how else it might work.\r\n\r\nInstead, this happened: That last test is sensitive to at least two distinct factors: is incremental compilation on and is `C::has_other` inlined or not. Adding `#[inline(always)]` makes the assert pass regardless of incremental compilation.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.65.0 (897e37553 2022-11-02)\r\nbinary: rustc\r\ncommit-hash: 897e37553bba8b42751c67658967889d11ecd120\r\ncommit-date: 2022-11-02\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.65.0\r\nLLVM version: 15.0.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nthread 'weird_trait_obj' panicked at 'assertion failed: c.has_other(&s)', src/lib.rs:37:5\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:584:5     \r\n   1: core::panicking::panic_fmt\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/panicking.rs:142:14   \r\n   2: core::panicking::panic\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/panicking.rs:48:5     \r\n   3: rcrefcelltest::weird_trait_obj\r\n             at ./src/lib.rs:37:5\r\n   4: rcrefcelltest::weird_trait_obj::{{closure}}\r\n             at ./src/lib.rs:21:1\r\n   5: core::ops::function::FnOnce::call_once\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/ops/function.rs:248:5 \r\n   6: core::ops::function::FnOnce::call_once\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/ops/function.rs:248:5 \r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104446/timeline", "performed_via_github_app": null, "state_reason": null}