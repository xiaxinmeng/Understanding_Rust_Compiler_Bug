{"url": "https://api.github.com/repos/rust-lang/rust/issues/38738", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38738/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38738/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38738/events", "html_url": "https://github.com/rust-lang/rust/issues/38738", "id": 198222371, "node_id": "MDU6SXNzdWUxOTgyMjIzNzE=", "number": 38738, "title": "Unable to constrain associated types in trait inheritance", "user": {"login": "MaikKlein", "id": 1994306, "node_id": "MDQ6VXNlcjE5OTQzMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1994306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaikKlein", "html_url": "https://github.com/MaikKlein", "followers_url": "https://api.github.com/users/MaikKlein/followers", "following_url": "https://api.github.com/users/MaikKlein/following{/other_user}", "gists_url": "https://api.github.com/users/MaikKlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaikKlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaikKlein/subscriptions", "organizations_url": "https://api.github.com/users/MaikKlein/orgs", "repos_url": "https://api.github.com/users/MaikKlein/repos", "events_url": "https://api.github.com/users/MaikKlein/events{/privacy}", "received_events_url": "https://api.github.com/users/MaikKlein/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-31T07:21:18Z", "updated_at": "2017-07-26T18:07:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nstruct Foo;\r\nstruct Bar;\r\n\r\npub trait Base{\r\n    type F;\r\n    type B;\r\n}\r\n//***************************\r\n// Doesn't work\r\n//pub trait BaseHello: Base\r\n//    where Self::F: Hello,\r\n//          Self::B: Hello{}\r\n\r\npub trait BaseHello: Base{}\r\nimpl<B: Base> BaseHello for B\r\n    where B::F: Hello,\r\n          B::B: Hello{}\r\n\r\n//***************************\r\npub trait Hello{\r\n    fn hello(&self);\r\n}\r\n\r\nimpl Hello for Foo{\r\n    fn hello(&self){\r\n        println!(\"Foo\");\r\n    }\r\n}\r\n\r\nstruct FooBarBase;\r\nimpl Base for FooBarBase{\r\n    type F = Foo;\r\n    type B = Bar;\r\n}\r\n\r\nimpl Hello for Bar{\r\n    fn hello(&self){\r\n        println!(\"Bar\");\r\n    }\r\n}\r\n\r\nstruct Test<B: BaseHello>{\r\n    f: B::F,\r\n    b: B::B\r\n}\r\n\r\n// doesn't work\r\nimpl<B: BaseHello> Test<B>{\r\n    fn hello(&self){\r\n        self.f.hello(); \r\n        self.b.hello(); \r\n    }\r\n}\r\n\r\nfn main() {\r\n    let test = Test::<FooBarBase>{f: Foo, b: Bar};\r\n    // works\r\n    test.f.hello();\r\n    test.b.hello();\r\n}\r\n```\r\n[Playground](https://play.rust-lang.org/?gist=d3e005df995e2192c582bc135679c2eb&version=stable&backtrace=0)\r\n\r\nThe main problem is that we can not write\r\n\r\n```\r\n// Doesn't work\r\npub trait BaseHello: Base\r\n    where Self::F: Hello,\r\n          Self::B: Hello{}\r\n```\r\n\r\nThe workaround is to impl the trait explicitly like this\r\n\r\n```\r\npub trait BaseHello: Base{}\r\nimpl<B: Base> BaseHello for B\r\n    where B::F: Hello,\r\n          B::B: Hello{}\r\n```\r\nBut this means that Rust doesn't know the constrains of `BaseHello`, if `BaseHello` is used as a constrain.\r\n```\r\n// doesn't work\r\nimpl<B: BaseHello> Test<B>{\r\n    fn hello(&self){\r\n        self.f.hello(); \r\n        self.b.hello(); \r\n    }\r\n}\r\n```\r\n\r\nI couldn't find any related issues. Is this a bug? Are there any workarounds?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38738/timeline", "performed_via_github_app": null, "state_reason": null}