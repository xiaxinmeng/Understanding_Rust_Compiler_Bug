{"url": "https://api.github.com/repos/rust-lang/rust/issues/104203", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104203/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104203/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104203/events", "html_url": "https://github.com/rust-lang/rust/issues/104203", "id": 1442458818, "node_id": "I_kwDOAAsO6M5V-izC", "number": 104203, "title": "Tracking Issue for `const_pointer_is_aligned`", "user": {"login": "lukas-code", "id": 26522220, "node_id": "MDQ6VXNlcjI2NTIyMjIw", "avatar_url": "https://avatars.githubusercontent.com/u/26522220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukas-code", "html_url": "https://github.com/lukas-code", "followers_url": "https://api.github.com/users/lukas-code/followers", "following_url": "https://api.github.com/users/lukas-code/following{/other_user}", "gists_url": "https://api.github.com/users/lukas-code/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukas-code/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukas-code/subscriptions", "organizations_url": "https://api.github.com/users/lukas-code/orgs", "repos_url": "https://api.github.com/users/lukas-code/repos", "events_url": "https://api.github.com/users/lukas-code/events{/privacy}", "received_events_url": "https://api.github.com/users/lukas-code/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-11-09T17:12:55Z", "updated_at": "2022-12-03T12:57:20Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(const_pointer_is_aligned)]`\r\n\r\nThis is a tracking issue for using `ptr.is_aligned()` and `ptr.is_aligned_to(alignment)` in `const` contexts.\r\n\r\n<!--\r\nInclude a short description of the feature.\r\n-->\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\nimpl<T: Sized> *(const|mut) T {\r\n    pub const fn is_aligned(self) -> bool;\r\n}\r\n\r\nimpl<T: ?Sized> *(const|mut) T {\r\n    pub const fn is_aligned_to(self, align: usize) -> bool;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] Implementation: https://github.com/rust-lang/rust/pull/102795\r\n- [ ] Allow `const` functions to behave differently during constant-evaluation and runtime: https://github.com/rust-lang/rfcs/pull/3352\r\n- [ ] Final comment period (FCP)[^1]\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- [ ] Do we want this at all or should alignment be runtime only / should users be using a stable const_eval_select instead?\r\n- [ ] Should these be separate functions `guaranteed_aligned{,to}` instead?\r\n- [ ] What behavior should these functions have during const eval? Some options include:\r\n  1. Return `true` if the pointer is guaranteed to be aligned at runtime and `false` if we don't know whether the pointer is aligned at runtime. This is the current implementation.\r\n  2. Same as above, but only document that the function may spuriously fail (during const eval), similar to `align_offset`. This allows changes to const alignment in the future.\r\n  3. Assign a dummy address to all variables during const eval. Each allocation, including stack variables, would get its own \"address space\", which overlaps with other const eval address spaces and the runtime address space. This would make const eval alignment behavior similar to runtime, but a runtime pointer derived from a const eval pointer is still differently aligned. Pointer-to-integer casts are still not supported. The implementation for this would just remove this check: https://github.com/rust-lang/rust/blob/005f92d24acde37a02e0d084ce2ca8f40d2ee95a/compiler/rustc_const_eval/src/const_eval/machine.rs#L237\r\n  4. Same as above, but we also allow pointer-to-integer casts, but not integer-to-pointer casts. Any program that assumes that different variables have different addresses bursts up in flame.\r\n\r\n### Related Links\r\n- Tracking Issue for (runtime) `is_aligned`: https://github.com/rust-lang/rust/issues/96284\r\n- Tracking Issue for const `align_offset`: https://github.com/rust-lang/rust/issues/90962\r\n\r\n[^1]: https://std-dev-guide.rust-lang.org/feature-lifecycle/stabilization.html\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104203/timeline", "performed_via_github_app": null, "state_reason": null}