{"url": "https://api.github.com/repos/rust-lang/rust/issues/54776", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54776/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54776/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54776/events", "html_url": "https://github.com/rust-lang/rust/issues/54776", "id": 366171969, "node_id": "MDU6SXNzdWUzNjYxNzE5Njk=", "number": 54776, "title": "Mapping `Ref` to a value containing a reference", "user": {"login": "d-e-s-o", "id": 6610056, "node_id": "MDQ6VXNlcjY2MTAwNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/6610056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-e-s-o", "html_url": "https://github.com/d-e-s-o", "followers_url": "https://api.github.com/users/d-e-s-o/followers", "following_url": "https://api.github.com/users/d-e-s-o/following{/other_user}", "gists_url": "https://api.github.com/users/d-e-s-o/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-e-s-o/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-e-s-o/subscriptions", "organizations_url": "https://api.github.com/users/d-e-s-o/orgs", "repos_url": "https://api.github.com/users/d-e-s-o/repos", "events_url": "https://api.github.com/users/d-e-s-o/events{/privacy}", "received_events_url": "https://api.github.com/users/d-e-s-o/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-10-03T04:36:06Z", "updated_at": "2019-08-13T20:40:04Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following specific use case explaining a more general\r\nissue: We have a struct, `RefStrings`, that keeps a `RefCell` containing\r\nsome form of collection, `Vec<String>`. Part of `RefStrings`'s API\r\nsurface is a function that aims to expose an iterator over the\r\nunderlying collection. The only possibility I see for exposing the\r\niterator (conceptually) is via a `Ref` and using `RefCell`'s `map`\r\nfunction:\r\n\r\n```rust\r\nstruct RefStrings(RefCell<Vec<String>>);\r\n\r\nimpl RefStrings {\r\n    fn iter<'t, 's: 't>(&'s self) -> Ref<'t, Iter<String>> {\r\n        Ref::map(self.0.borrow(), |x| x.iter())\r\n    }\r\n}\r\n```\r\n([playground](https://play.rust-lang.org/?gist=1e9b2b97db032b40e93e8bcbd7e2c70b&version=stable&mode=debug&edition=2015))\r\n\r\nUnfortunately, that does not work. The reason being that `Ref` is\r\ndefined to hold a reference to a member of the borrowed object, but an\r\niterator is effectively an actual object in itself that just happens to\r\nhave such a reference.\r\n\r\nI have not found a way to get this working using the existing\r\nfunctionality. Am I just missing something?\r\n\r\nA possible solution that I worked with now is the introduction of a new\r\nassociated function `Ref::map_val` that returns an object that\r\neffectively contains another object (i.e., something that is `Sized`)\r\nthat may hold a reference to the borrowed data (e.g., a concrete\r\niterator type). That solves the problem reasonably nicely, in my\r\nopinion.\r\n\r\n```rust\r\nstruct RefStrings(RefCell<Vec<String>>);\r\n\r\nimpl RefStrings {\r\n    fn iter<'t, 's: 't>(&'s self) -> RefVal<'t, Iter<String>> {\r\n        Ref::map_val(self.0.borrow(), |x| x.iter())\r\n    }\r\n}\r\n\r\n// ...\r\n// RefVal is defined as:\r\npub struct RefVal<'b, T> {\r\n    value: T,\r\n    borrow: BorrowRef<'b>,\r\n}\r\n```\r\n(see the [`cell` crate](https://crates.io/crates/cell) for the full functionality; note that the API provided is still limited, i.e., I mostly implemented what I needed right away)\r\n\r\nUnfortunately I have not found a way to provide said functionality as\r\nanything else than a replacement of `RefCell` itself, with all the code\r\nduplication that accompanies.\r\n\r\nSo, I am filing this issue to discuss\r\n1) whether I am just missing something and there is a trivial way to\r\n   accomplish what I hopefully explained well enough\r\n2) ~if that is not the case, whether this functionality is desired to be~\r\n   ~included in the Rust standard library (I believe this is a general~\r\n   ~problem with a general solution; despite probably not being a very~\r\n   ~common one)~\r\n3) ~if such a desire exists, the steps to be taken to include this~\r\n   ~functionality (RFC process?)~\r\n\r\nEDIT: [Proposed solution](https://crates.io/crates/cell) turned out to be unsafe with no known workaround. So really this issue is only to discuss other solutions.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54776/reactions", "total_count": 8, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54776/timeline", "performed_via_github_app": null, "state_reason": null}