{"url": "https://api.github.com/repos/rust-lang/rust/issues/73801", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73801/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73801/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73801/events", "html_url": "https://github.com/rust-lang/rust/issues/73801", "id": 646700488, "node_id": "MDU6SXNzdWU2NDY3MDA0ODg=", "number": 73801, "title": "Generic function instantiation uses VTable instead of actual function", "user": {"login": "DaemonSnake", "id": 11693483, "node_id": "MDQ6VXNlcjExNjkzNDgz", "avatar_url": "https://avatars.githubusercontent.com/u/11693483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DaemonSnake", "html_url": "https://github.com/DaemonSnake", "followers_url": "https://api.github.com/users/DaemonSnake/followers", "following_url": "https://api.github.com/users/DaemonSnake/following{/other_user}", "gists_url": "https://api.github.com/users/DaemonSnake/gists{/gist_id}", "starred_url": "https://api.github.com/users/DaemonSnake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DaemonSnake/subscriptions", "organizations_url": "https://api.github.com/users/DaemonSnake/orgs", "repos_url": "https://api.github.com/users/DaemonSnake/repos", "events_url": "https://api.github.com/users/DaemonSnake/events{/privacy}", "received_events_url": "https://api.github.com/users/DaemonSnake/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-27T15:17:07Z", "updated_at": "2020-06-28T00:14:15Z", "closed_at": "2020-06-28T00:14:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\n### I tried this code:\r\n\r\n```rust\r\ntrait MyTrait {\r\n    fn action(self);\r\n}\r\n\r\nstruct ImplementsMyTrait {}\r\nimpl MyTrait for ImplementsMyTrait { fn action(self) { }}\r\n\r\nfn call_action<T:MyTrait>(item: T) {\r\n     item.action();\r\n}\r\n\r\npub fn main() {\r\n    let a = ImplementsMyTrait{};\r\n    call_action(a)\r\n}\r\n```\r\n\r\n### I expected to see this happen:\r\n\r\nAs the real type of `a` is know at compile time we expect that the instantiation of `call_action` will call `<ImplementsMyTrait::action for MyTrait>` directly with the object.\r\n\r\n### Instead, this happened:\r\n\r\nInstead in `call_action<ImplementsMyTrait>`'s the compiler reads inside the VTable of the object.\r\nWe could expect such a decision if Rust had inheritance but as it's not the case I consider this to be a bug.\r\n\r\nThis means that projects that don't want to pay such a price (dynamism) will have to drop the usage of traits and won't have a good system to write interfaces. I am currently in such a position.\r\n\r\nYou can see minimal example in godbolt [here](https://rust.godbolt.org/z/5y2XvJ) and the contrast with what we would expect.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.44.0 (49cae5576 2020-06-01)\r\n\r\nbinary: rustc\r\n\r\ncommit-hash: 49cae55760da0a43428eba73abcb659bb70cf2e4\r\n\r\ncommit-date: 2020-06-01\r\n\r\nhost: x86_64-unknown-linux-gnu\r\n\r\nrelease: 1.44.0\r\n\r\nLLVM version: 9.0\r\n\r\nCompiler returned: 0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "DaemonSnake", "id": 11693483, "node_id": "MDQ6VXNlcjExNjkzNDgz", "avatar_url": "https://avatars.githubusercontent.com/u/11693483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DaemonSnake", "html_url": "https://github.com/DaemonSnake", "followers_url": "https://api.github.com/users/DaemonSnake/followers", "following_url": "https://api.github.com/users/DaemonSnake/following{/other_user}", "gists_url": "https://api.github.com/users/DaemonSnake/gists{/gist_id}", "starred_url": "https://api.github.com/users/DaemonSnake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DaemonSnake/subscriptions", "organizations_url": "https://api.github.com/users/DaemonSnake/orgs", "repos_url": "https://api.github.com/users/DaemonSnake/repos", "events_url": "https://api.github.com/users/DaemonSnake/events{/privacy}", "received_events_url": "https://api.github.com/users/DaemonSnake/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73801/timeline", "performed_via_github_app": null, "state_reason": "completed"}