{"url": "https://api.github.com/repos/rust-lang/rust/issues/65420", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65420/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65420/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65420/events", "html_url": "https://github.com/rust-lang/rust/issues/65420", "id": 506895341, "node_id": "MDU6SXNzdWU1MDY4OTUzNDE=", "number": 65420, "title": "Unable to resolve a recursive trait bound when resolution appears possible", "user": {"login": "josyoun", "id": 7526220, "node_id": "MDQ6VXNlcjc1MjYyMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/7526220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josyoun", "html_url": "https://github.com/josyoun", "followers_url": "https://api.github.com/users/josyoun/followers", "following_url": "https://api.github.com/users/josyoun/following{/other_user}", "gists_url": "https://api.github.com/users/josyoun/gists{/gist_id}", "starred_url": "https://api.github.com/users/josyoun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josyoun/subscriptions", "organizations_url": "https://api.github.com/users/josyoun/orgs", "repos_url": "https://api.github.com/users/josyoun/repos", "events_url": "https://api.github.com/users/josyoun/events{/privacy}", "received_events_url": "https://api.github.com/users/josyoun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-14T21:59:54Z", "updated_at": "2019-10-16T18:24:54Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I've a code that's unable to resolve a recursive trait bound when resolution appears possible.  The code:\r\n\r\n```rust\r\n#![recursion_limit = \"10\"]\r\n\r\n// Create a trait with some methods\r\npub trait Methods2<Other> {\r\n    type Output;\r\n    fn min(self, other: Other) -> Self::Output;\r\n}\r\n\r\n// Create a composite trait that contain multiple traits\r\ntrait AllCombos<NonRef>:\r\n    Methods2<NonRef, Output = NonRef>\r\n    + for<'a> Methods2<&'a NonRef, Output = NonRef>\r\n{\r\n}\r\nimpl<T, NonRef> AllCombos<NonRef> for T where\r\n    T: Methods2<NonRef, Output = NonRef>\r\n        + for<'a> Methods2<&'a NonRef, Output = NonRef>\r\n{\r\n}\r\n\r\n// Implement this trait for f32\r\nimpl Methods2<f32> for f32 {\r\n    type Output = f32;\r\n    fn min(self, other: f32) -> Self::Output {\r\n        self.min(other)\r\n    }\r\n}\r\nimpl Methods2<f32> for &f32 {\r\n    type Output = f32;\r\n    fn min(self, other: f32) -> Self::Output {\r\n        (*self).min(other)\r\n    }\r\n}\r\nimpl Methods2<&f32> for f32 {\r\n    type Output = f32;\r\n    fn min(self, other: &f32) -> Self::Output {\r\n        self.min(*other)\r\n    }\r\n}\r\nimpl Methods2<&f32> for &f32 {\r\n    type Output = f32;\r\n    fn min(self, other: &f32) -> Self::Output {\r\n        (*self).min(*other)\r\n    }\r\n}\r\n\r\n// Create a struct with a generic float inside\r\n#[derive(Debug)]\r\nstruct MyStruct<Float> {\r\n    x: Float,\r\n}\r\n\r\n// Implement to Methods2 trait for MyStruct\r\nimpl<Float> Methods2<MyStruct<Float>> for MyStruct<Float>\r\nwhere\r\n    Float: AllCombos<Float>,\r\n    for<'a> &'a Float: AllCombos<Float>,\r\n{\r\n    type Output = MyStruct<Float>;\r\n    fn min(self, other: MyStruct<Float>) -> Self::Output {\r\n        MyStruct::<Float> {\r\n            x: self.x.min(other.x),\r\n        }\r\n    }\r\n}\r\nimpl<Float> Methods2<MyStruct<Float>> for &MyStruct<Float>\r\nwhere\r\n    Float: AllCombos<Float>,\r\n    for<'a> &'a Float: AllCombos<Float>,\r\n{\r\n    type Output = MyStruct<Float>;\r\n    fn min(self, other: MyStruct<Float>) -> Self::Output {\r\n        MyStruct::<Float> {\r\n            x: (&self.x).min(other.x),\r\n        }\r\n    }\r\n}\r\nimpl<Float> Methods2<&MyStruct<Float>> for MyStruct<Float>\r\nwhere\r\n    Float: AllCombos<Float>,\r\n    for<'a> &'a Float: AllCombos<Float>,\r\n{\r\n    type Output = MyStruct<Float>;\r\n    fn min(self, other: &MyStruct<Float>) -> Self::Output {\r\n        MyStruct::<Float> {\r\n            x: self.x.min(&other.x),\r\n        }\r\n    }\r\n}\r\nimpl<Float> Methods2<&MyStruct<Float>> for &MyStruct<Float>\r\nwhere\r\n    Float: AllCombos<Float>,\r\n    for<'a> &'a Float: AllCombos<Float>,\r\n{\r\n    type Output = MyStruct<Float>;\r\n    fn min(self, other: &MyStruct<Float>) -> Self::Output {\r\n        MyStruct::<Float> {\r\n            x: (&self.x).min(&other.x),\r\n        }\r\n    }\r\n}\r\n\r\n// Lifts a variable into MyStruct\r\nfn lift<Float>(x: Float) -> MyStruct<Float>\r\nwhere\r\n    Float: AllCombos<Float>,\r\n    for<'a> &'a Float: AllCombos<Float>,\r\n{\r\n    MyStruct { x }\r\n}\r\n\r\n// Create an element\r\nfn main() {\r\n    let bar = lift(4.0_f32).min(lift(2.0_f32));\r\n    //let bar = lift::<f32>(4.0_f32).min(lift::<f32>(2.0_f32));\r\n    println!(\"{:?}\", bar.x);\r\n}\r\n```\r\n\r\nproduces the compiler error:\r\n\r\n```\r\nerror[E0275]: overflow evaluating the requirement `&'a MyStruct<_>: Methods2<MyStruct<_>>`\r\n   --> src/test06.rs:116:15\r\n    |\r\n106 | fn lift<Float>(x: Float) -> MyStruct<Float>\r\n    |    ----\r\n...\r\n109 |     for<'a> &'a Float: AllCombos<Float>,\r\n    |                        ---------------- required by this bound in `lift`\r\n...\r\n116 |     let bar = lift(4.0_f32).min(lift(2.0_f32));\r\n    |               ^^^^\r\n    |\r\n    = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\r\n    = note: required because of the requirements on the impl of `for<'a> AllCombos<MyStruct<_>>` for `&'a MyStruct<_>`\r\n    = note: required because of the requirements on the impl of `Methods2<MyStruct<MyStruct<_>>>` for `&'a MyStruct<MyStruct<_>>`\r\n    = note: required because of the requirements on the impl of `for<'a> AllCombos<MyStruct<MyStruct<_>>>` for `&'a MyStruct<MyStruct<_>>`\r\n    = note: required because of the requirements on the impl of `Methods2<MyStruct<MyStruct<MyStruct<_>>>>` for `&'a MyStruct<MyStruct<MyStruct<_>>>`\r\n    = note: required because of the requirements on the impl of `for<'a> AllCombos<MyStruct<MyStruct<MyStruct<_>>>>` for `&'a MyStruct<MyStruct<MyStruct<_>>>`\r\n    = note: required because of the requirements on the impl of `Methods2<MyStruct<MyStruct<MyStruct<MyStruct<_>>>>>` for `&'a MyStruct<MyStruct<MyStruct<MyStruct<_>>>>`\r\n    = note: required because of the requirements on the impl of `for<'a> AllCombos<MyStruct<MyStruct<MyStruct<MyStruct<_>>>>>` for `&'a MyStruct<MyStruct<MyStruct<MyStruct<_>>>>`\r\n    = note: required because of the requirements on the impl of `Methods2<MyStruct<MyStruct<MyStruct<MyStruct<MyStruct<_>>>>>>` for `&'a MyStruct<MyStruct<MyStruct<MyStruct<MyStruct<_>>>>>`\r\n    = note: required because of the requirements on the impl of `for<'a> AllCombos<MyStruct<MyStruct<MyStruct<MyStruct<MyStruct<_>>>>>>` for `&'a MyStruct<MyStruct<MyStruct<MyStruct<MyStruct<_>>>>>`\r\n```\r\n\r\nEssentially, the `AllCombos` trait is designed to contain all ref/val combinations for a series of methods that contain two arguments.  The idea is that a user implements `Methods2` four different times for these combinations and then `AllCombos` can be used as the constraint.  Anyway, it's possible to resolve the error by using the fully qualified syntax:\r\n\r\n```rust\r\nlet bar = lift::<f32>(4.0_f32).min(lift::<f32>(2.0_f32));\r\n```\r\n\r\nHowever, it seems like type checker should be able to resolve the trait bounds using the original call:\r\n\r\n```rust\r\nlet bar = lift(4.0_f32).min(lift(2.0_f32));\r\n```\r\n\r\nsince the arguments straightforwardly require the trait for `f32`.  I'm curious whether or not whether this is the intended behavior or whether there's a bug with the type checker.  For reference:\r\n\r\n```\r\n$ rustc --version\r\nrustc 1.40.0-nightly (c27f7568b 2019-10-13)\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65420/timeline", "performed_via_github_app": null, "state_reason": null}