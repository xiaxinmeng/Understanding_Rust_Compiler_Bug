{"url": "https://api.github.com/repos/rust-lang/rust/issues/80127", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80127/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80127/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80127/events", "html_url": "https://github.com/rust-lang/rust/issues/80127", "id": 770277496, "node_id": "MDU6SXNzdWU3NzAyNzc0OTY=", "number": 80127, "title": "rustc has wrong signature for C function with 16-byte aligned stack argument in x86_64 Linux", "user": {"login": "bobbobbio", "id": 531660, "node_id": "MDQ6VXNlcjUzMTY2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/531660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobbobbio", "html_url": "https://github.com/bobbobbio", "followers_url": "https://api.github.com/users/bobbobbio/followers", "following_url": "https://api.github.com/users/bobbobbio/following{/other_user}", "gists_url": "https://api.github.com/users/bobbobbio/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobbobbio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobbobbio/subscriptions", "organizations_url": "https://api.github.com/users/bobbobbio/orgs", "repos_url": "https://api.github.com/users/bobbobbio/repos", "events_url": "https://api.github.com/users/bobbobbio/events{/privacy}", "received_events_url": "https://api.github.com/users/bobbobbio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": {"login": "rustbot", "id": 47979223, "node_id": "MDQ6VXNlcjQ3OTc5MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47979223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustbot", "html_url": "https://github.com/rustbot", "followers_url": "https://api.github.com/users/rustbot/followers", "following_url": "https://api.github.com/users/rustbot/following{/other_user}", "gists_url": "https://api.github.com/users/rustbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustbot/subscriptions", "organizations_url": "https://api.github.com/users/rustbot/orgs", "repos_url": "https://api.github.com/users/rustbot/repos", "events_url": "https://api.github.com/users/rustbot/events{/privacy}", "received_events_url": "https://api.github.com/users/rustbot/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rustbot", "id": 47979223, "node_id": "MDQ6VXNlcjQ3OTc5MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47979223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustbot", "html_url": "https://github.com/rustbot", "followers_url": "https://api.github.com/users/rustbot/followers", "following_url": "https://api.github.com/users/rustbot/following{/other_user}", "gists_url": "https://api.github.com/users/rustbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustbot/subscriptions", "organizations_url": "https://api.github.com/users/rustbot/orgs", "repos_url": "https://api.github.com/users/rustbot/repos", "events_url": "https://api.github.com/users/rustbot/events{/privacy}", "received_events_url": "https://api.github.com/users/rustbot/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 18, "created_at": "2020-12-17T18:37:33Z", "updated_at": "2023-03-03T16:10:37Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "We were writing some code which interacts with a C shared library, but when we were calling a function in the library from Rust, we found our program was crashing. Upon inspection in the debugger, it seems that some of the arguments were getting corrupted. The Rust function signature looked correct so it was surprising. I have managed to reduce the issue down to a minimal repro.\n\n```rust\n#[repr(C)]\n#[repr(align(16))]\n#[derive(Debug, Copy, Clone)]\npub struct bar {\n    pub a: ::std::os::raw::c_ulong,\n    pub b: ::std::os::raw::c_ulong,\n}\n\n#[repr(C)]\n#[derive(Debug, Copy, Clone)]\npub struct baz {\n    pub a: bool,\n    pub b: ::std::os::raw::c_uint,\n}\n\nextern \"C\" {\n    pub fn foo_func(\n        a: *mut ::std::os::raw::c_void,\n        b: *mut ::std::os::raw::c_void,\n        c: *const ::std::os::raw::c_char,\n        d: ::std::os::raw::c_ulong,\n        e: bool,\n        f: baz,\n        g: *mut ::std::os::raw::c_void,\n        h: bar,\n        i: *mut ::std::os::raw::c_void,\n        j: *mut ::std::os::raw::c_void,\n        k: *mut ::std::os::raw::c_void,\n        l: *mut ::std::os::raw::c_void,\n        m: *const ::std::os::raw::c_char,\n    ) -> ::std::os::raw::c_int;\n}\n\nfn main() {\n    let f = baz { a: true, b: 67 };\n    let h = bar { a: 0, b: 99 };\n    let m = std::ffi::CString::new(\"Hello, world\").unwrap();\n    unsafe {\n        foo_func(\n            std::ptr::null_mut(),\n            std::ptr::null_mut(),\n            std::ptr::null_mut(),\n            12,\n            true,\n            f,\n            std::ptr::null_mut(),\n            h,\n            std::ptr::null_mut(),\n            std::ptr::null_mut(),\n            std::ptr::null_mut(),\n            std::ptr::null_mut(),\n            m.as_ptr(),\n        )\n    };\n}\n```\nfoo.h\n```c\n#include <stdbool.h>\n\nstruct bar {\n    unsigned long a;\n    unsigned long b;\n}  __attribute__((aligned(16)));\n\nstruct baz {\n    bool a;\n    unsigned b;\n};\n\nint\nfoo_func(\n    void *a,\n    void *b,\n    const char *c,\n    unsigned long d,\n    bool e,\n    struct baz f,\n    void *g,\n    struct bar h,\n    void *i,\n    void *j,\n    void *k,\n    void *l,\n    const char *m);\n```\nfoo.c\n```c\n#include <foo.h>\n#include <stdio.h>\n\nint\nfoo_func(\n    void *a,\n    void *b,\n    const char *c,\n    unsigned long d,\n    bool e,\n    struct baz f,\n    void *g,\n    struct bar h,\n    void *i,\n    void *j,\n    void *k,\n    void *l,\n    const char *m)\n{\n    printf(\"m = %s\", m);\n    return 0;\n}\n```\n\nI compiled the C code into a shared library using clang\n`clang -shared foo.c -o libfoo.so -I. -g`\n\nhere is the version of clang\n```\nclang version 11.0.0\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\n```\n\nI compiled the Rust code using cargo and `rustc 1.46.0 (04488afe3 2020-08-24)`, but told it to link against `libfoo.so`\n`cargo:rustc-link-lib=dylib=foo`\n\nI set an `rpath` on the binary so it can find the library and when I run it, it crashes with a stack overflow\n```\nthread 'main' has overflowed its stack\nfatal runtime error: stack overflow\nfish: \u201ctarget/debug/bug_repro\u201d terminated by signal SIGABRT (Abort)\n```\n\nOpening it up in the debugger we can see the argument corruption\n\nIn this case the stack overflow happens in `printf`\n```\n#0  __strlen_avx2 () at ../sysdeps/x86_64/multiarch/strlen-avx2.S:65\n#1  0x00007ffff7bf0d8e in __vfprintf_internal (s=0x7ffff7d5d760 <_IO_2_1_stdout_>, format=0x7ffff7dca5f5 \"m = %s\", ap=ap@entry=0x7fffffffe590, mode_flags=mode_flags@entry=0) at vfprintf-internal.c:1645\n#2  0x00007ffff7bda8d8 in __printf (format=<optimized out>) at printf.c:33\n#3  0x00007ffff7dca5d0 in foo_func (a=0x0, b=0x0, c=0x0, d=12, e=true, f=..., g=0x0, h=..., i=0x0, j=0x0, k=0x0, l=0x555555815b40, m=0x7fffff7fe000 <error: Cannot access memory at address 0x7fffff7fe000>) at foo.c:20\n#4  0x00005555555597b9 in bug_repro::main () at src/main.rs:39\n```\n\nComparing the local variables and arguments of the two frames\n```\n(gdb) info locals\nm = std::ffi::c_str::CString {inner: alloc::boxed::Box<[u8]> {data_ptr: 0x555555815b40 \"Hello, world\\000\", length: 13}}\nh = bug_repro::bar {a: 0, b: 99}\nf = bug_repro::baz {a: true, b: 67}\n(gdb) frame 3\n#3  0x00007ffff7dca5d0 in foo_func (a=0x0, b=0x0, c=0x0, d=12, e=true, f=..., g=0x0, h=..., i=0x0, j=0x0, k=0x0, l=0x555555815b40, m=0x7fffff7fe000 <error: Cannot access memory at address 0x7fffff7fe000>) at foo.c:20\n20          printf(\"m = %s\", m);\n(gdb) info args\na = 0x0\nb = 0x0\nc = 0x0\nd = 12\ne = true\nf = {a = true, b = 67}\ng = 0x0\nh = {a = 99, b = 0}\ni = 0x0\nj = 0x0\nk = 0x0\nl = 0x555555815b40\nm = 0x7fffff7fe000 <error: Cannot access memory at address 0x7fffff7fe000>\n(gdb)\n```\nYou can see things start going off the rails starting with argument `h` which doesn't have the right value, and every argument after that is wrong. Including `m` which has some garbage stack data, so its no surprise the stack overflowed when `printf` was reading at `m`\n\nIf we take a look at the llvm-ir we can see the problem\n\nThe Rust declaration of the function looks like this\n```\n; Function Attrs: nounwind nonlazybind uwtable\ndeclare i32 @foo_func(i8*, i8*, i8*, i64, i1 zeroext, i64, i8*, %bar* noalias nocapture byval(%bar) dereferenceable(16), i8*, i8*, i8*, i8*, i8*) unnamed_addr #3\n```\nand the C definition of the function looks like this\n```\n; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local i32 @foo_func(i8* %0, i8* %1, i8* %2, i64 %3, i1 zeroext %4, i64 %5, i8* %6, %struct.bar* byval(%struct.bar) align 16 %7, i8* %8, i8* %9, i8* %10, i8* %11, i8* %12) #0 {\n```\n\nIn my limited understanding of this, the only difference is the `align 16` for the `byval` argument which Rust is missing. I can find this mentioned in the LLVM reference\n```\nThe byval attribute also supports specifying an alignment with the align attribute. It indicates the alignment of the stack slot to form and the known alignment of the pointer specified to the call site. If the alignment is not specified, then the code generator makes a target-specific assumption.\n```\nSo, since the argument is being passed via the stack, it seems that the alignment of the stack storage can be specified. I wasn't sure at first if this mattered but going back and looking at the assembly produced I was able to determine that it does.\n\nOn the C side of the function call we can see that `h` has this address\n```\n(gdb) print &h\n$2 = (struct bar *) 0x7fffffffe720\n```\nif we subtract 8 from this address, we can see we then get the right value\n```\n(gdb) print *(struct bar *)(((void *)&h) - 8)\n$5 = {a = 0, b = 99}\n```\nThe function we are calling is expecting the argument to be at `$rbp + 0x20`, but the Rust call-site is putting it at `$rbp + 0x18` (which is not a 16-byte aligned address) So I assume this missing alignment is causing issues because the caller and callee don't agree where to look on the stack for the argument\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\nThis issue has been assigned to @pcwalton via [this comment](https://github.com/rust-lang/rust/issues/80127#issuecomment-1453761835).\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"pcwalton\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80127/reactions", "total_count": 6, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80127/timeline", "performed_via_github_app": null, "state_reason": null}