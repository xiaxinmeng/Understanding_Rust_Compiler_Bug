{"url": "https://api.github.com/repos/rust-lang/rust/issues/51234", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51234/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51234/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51234/events", "html_url": "https://github.com/rust-lang/rust/issues/51234", "id": 327923306, "node_id": "MDU6SXNzdWUzMjc5MjMzMDY=", "number": 51234, "title": "Proc macro dependencies bleed into another crate's", "user": {"login": "TooManyBees", "id": 5176286, "node_id": "MDQ6VXNlcjUxNzYyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/5176286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TooManyBees", "html_url": "https://github.com/TooManyBees", "followers_url": "https://api.github.com/users/TooManyBees/followers", "following_url": "https://api.github.com/users/TooManyBees/following{/other_user}", "gists_url": "https://api.github.com/users/TooManyBees/gists{/gist_id}", "starred_url": "https://api.github.com/users/TooManyBees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TooManyBees/subscriptions", "organizations_url": "https://api.github.com/users/TooManyBees/orgs", "repos_url": "https://api.github.com/users/TooManyBees/repos", "events_url": "https://api.github.com/users/TooManyBees/events{/privacy}", "received_events_url": "https://api.github.com/users/TooManyBees/received_events", "type": "User", "site_admin": true}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-30T22:33:55Z", "updated_at": "2018-05-31T04:28:25Z", "closed_at": "2018-05-31T04:28:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not 100% sure if this is an issue with Cargo or Rust. I'm also not sure if it's a bug, or just my expectations butting up against reality.\r\n\r\nWhen a project depends on some proc macro `Crate P`, and both `Crate P` and the project separately depend on `Crate L`, some library, `Crate L` will be compiled into both with the same feature sets, even when the parent project and the proc macro request different features.\r\n\r\nIt's my understanding that when a crate is required multiple times as a dependency, its feature sets are unified together. **What I see as a bug is the fact that this is happening with the dependencies of proc macro crates and the project that uses the proc macro crate to generate its code.** (More detailed example below.) My expectation is that, since the proc macro is a build dependency rather than a runtime dep, its own dependencies should be \"insulated\" from those of the project that's using it.\r\n\r\n## example\r\n\r\nA Rust project needs some structs written into the code with a proc macro. These structs come from `Library L`. `Library L`'s structs implement Quote's `ToTokens` trait. Since we do not want `Quote` to be compiled into the final binary, `Library L` has a feature `codegen` that includes Quote and enables the trait impls. `Proc Macro P` requires `Library L` with the codegen feature. The parent project requires `Library L` without it.\r\n\r\nUltimately, both the parent project and the proc macro end up using `Library L` with the `codegen` feature turned on. You wouldn't notice that Quote snuck into the projects dependencies until you compiled it as a `cdylib` crate type (say, in order to build it for the wasm32-unknown-unknown target) which Quote can't be compiled for (or maybe it was Syn that couldn't be compiled for cdylibs? I can't remember), and compilation fails.\r\n\r\nMy solution for this was to abandon crate features and just write `Library L`'s structs' constructor literals right into the `quote!` macros in `Proc Macro P`, which is a shame because now the proc macro crate and the library are coupled tightly and must be updated together if the internals of a struct changes.\r\n\r\n## p.s.\r\n\r\nI suspect(???) but have not yet confirmed that the same issue causes the `std` crate to get pulled into `#![no_std]` projects if it uses a proc macro that uses `std`. Rustc fails when `panic_fmt` is not defined due to no_std, but also fails when it is defined because `std` was mysteriously pulled in (by the proc macro crate?) which already defined it.", "closed_by": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51234/timeline", "performed_via_github_app": null, "state_reason": "completed"}