{"url": "https://api.github.com/repos/rust-lang/rust/issues/5088", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/5088/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/5088/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/5088/events", "html_url": "https://github.com/rust-lang/rust/issues/5088", "id": 11285164, "node_id": "MDU6SXNzdWUxMTI4NTE2NA==", "number": 5088, "title": "\bIf traits-as-types no longer implicitly passed-by-reference, then rustc should reject passing them by value", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-02-22T13:14:37Z", "updated_at": "2013-05-02T17:06:11Z", "closed_at": "2013-05-02T17:06:11Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "\bIf traits no longer implicitly passed-by-reference, then rustc should reject passing traits by value.\n\nMy understanding from #3635 is that traits were once implicitly boxed with `@`, but now you must explicitly include an pointer-type annotation when you use a trait as an object type.\n\nI illustrate some of the cases that arise in the code sample below; the comments indicate how I think each case should be handled.\n\nThe heart of this ticket is that I am suggesting that `rustc` be changed so that `fromV` below would be rejected, as it does not make sense to pass `ByVal` by-value, since e.g. it is a trait and therefore we do not know what the underlying object-size is.  (Alternatively, rustc could treat it as an implicitly polymorphic function, analogous to `fromT` in the example.  But I think that would be a mistake -- if the user wants polymorphism, they should the syntax for it.)\n\n```\ntrait ByRef         { fn ref_to_int(&self) -> int; }\n\ntrait ByVal         { fn val_to_int(self) -> int; }\n\n// Ideally this would carry a default implementation that DELegates,\n// but default methods are experimental and signal error from rustc.\ntrait ByDel : ByRef { fn del_to_int(self) -> int; }\n\nimpl ByRef for int  { fn ref_to_int(&self) -> int { 2 } }\n\nimpl ByVal for int  { fn val_to_int( self) -> int { 3 } }\n\nimpl ByDel for int {  fn del_to_int(self) -> int { self.ref_to_int() } }\n\n// One can do this (passing trait-by-reference == object type).  Good.\nfn fromH(_a:@ByRef) -> int {\n    if false { _a.ref_to_int() } else { 5 };\n    5\n}\n\n// Probably should *not* be able even to declare this function\n// (passing trait by value is senseless).  It does compile currently;\n// presumably this is compiling into implicit reference.):\nfn fromV(_a:ByVal) -> int {\n    // if false { _a.val_to_int() } else { 6 }; // (leave in comment, senseless)\n    6\n}\n\n// But one *should* be able to do this (passing concrete T by value is sane):\nfn fromT<T:ByVal>(_a: T) -> int {\n    // Unfortunately, if you uncomment this, you hit ICE #4406.\n    // if false { _a.val_to_int() } else { 7 };\n    7\n}\n\n// This is similar to fromT above; it is just meant to add a check of\n// pass-self-by-value traits that extend object-compatible traits.\n// Unfortunately, like fromT above, it hits same ICE, so cannot test.\nfn fromD<T:ByDel>(_a: T) -> int {\n    // Unfortunately, if you uncomment this, you hit ICE #4406.\n    // if false { _a.del_to_int() } else { 8 };\n    8\n}\n\nfn main() {\n    io::println(fmt!(\"%?\", fromH(@10 as @ByRef)));\n    io::println(fmt!(\"%?\", fromV(10 as ByVal)));\n    io::println(fmt!(\"%?\", fromT(10)));\n    io::println(fmt!(\"%?\", fromD(10)));\n}\n```\n\nThe `ByDel` example is my attempt to implement a suggestion that Niko gave me, where he was suggesting dividing a trait carrying both object-compatible and object-incompatible methods (see #5086) into two traits, where the object-incompatible trait would inherit from the object-compatible one.  I see now that #5086 is closed; I do not yet know what that implies for the state of Niko's suggestion.\n", "closed_by": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/5088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/5088/timeline", "performed_via_github_app": null, "state_reason": "completed"}