{"url": "https://api.github.com/repos/rust-lang/rust/issues/39160", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/39160/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/39160/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/39160/events", "html_url": "https://github.com/rust-lang/rust/issues/39160", "id": 201675502, "node_id": "MDU6SXNzdWUyMDE2NzU1MDI=", "number": 39160, "title": "codegen-units ruins debug symbols", "user": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123111, "node_id": "MDU6TGFiZWwxMjMxMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-macos", "name": "O-macos", "color": "6e6ec0", "default": false, "description": "Operating system: macOS"}, {"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-01-18T19:53:25Z", "updated_at": "2017-05-29T18:49:57Z", "closed_at": "2017-05-29T18:49:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\nmod a {\r\n    pub struct S;\r\n    impl S {\r\n        pub fn foo(&self) {\r\n            println!(\"hi\");\r\n        }\r\n    }\r\n}\r\n\r\nmod b {\r\n    use a::S;\r\n    pub struct T;\r\n    impl T {\r\n        pub fn bar(&self) {\r\n            let s = S;\r\n            s.foo();\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let t = b::T;\r\n    t.bar();\r\n}\r\n```\r\nWith codegen-units=2, we get breakpoints in one module that work fine, and another that do not:\r\n```\r\ngodot2:tmp jdm$ rustc -C codegen-units=2 foo.rs -g\r\ngodot2:tmp jdm$ lldb foo\r\n(lldb) target create \"foo\"\r\nCurrent executable set to 'foo' (x86_64).\r\n(lldb) b foo.rs:5\r\nBreakpoint 1: where = foo`foo::a::{{impl}}::foo + 36 at foo.rs:5, address = 0x00000001000009a4\r\n(lldb) b foo.rs:15\r\nBreakpoint 2: no locations (pending).\r\nWARNING:  Unable to resolve breakpoint to any actual locations.\r\n(lldb) r\r\nProcess 32398 launched: '/private/tmp/foo' (x86_64)\r\nProcess 32398 stopped\r\n* thread #1: tid = 0x7bc9ea, 0x00000001000009a4 foo`foo::a::{{impl}}::foo(self=0x00007fff5fbff918) + 36 at foo.rs:5, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\r\n    frame #0: 0x00000001000009a4 foo`foo::a::{{impl}}::foo(self=0x00007fff5fbff918) + 36 at foo.rs:5\r\n   2   \t    pub struct S;\r\n   3   \t    impl S {\r\n   4   \t        pub fn foo(&self) {\r\n-> 5   \t            println!(\"hi\");\r\n   6   \t        }\r\n   7   \t    }\r\n   8   \t}\r\n(lldb) up\r\nframe #1: 0x00000001000009ed foo`foo::b::T::bar::h8d6dcee6b0c8bb66 + 29\r\nfoo`foo::b::T::bar::h8d6dcee6b0c8bb66 + 29:\r\n-> 0x1000009ed:  addq   $0x20, %rsp\r\n   0x1000009f1:  popq   %rbp\r\n   0x1000009f2:  retq\r\n   0x1000009f3:  nopw   %cs:(%rax,%rax)\r\n(lldb) q\r\nQuitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y\r\n```\r\nWith codegen-units=1, all breakpoints work as expected:\r\n```\r\ngodot2:tmp jdm$ rustc -C codegen-units=1 foo.rs -g\r\ngodot2:tmp jdm$ lldb foo\r\n(lldb) target create \"foo\"\r\nb Current executable set to 'foo' (x86_64).\r\n(lldb) b foo.rs:15\r\nBreakpoint 1: where = foo`foo::b::{{impl}}::bar + 24 at foo.rs:16, address = 0x00000001000009e8\r\n(lldb) b foo.rs:5\r\nBreakpoint 2: where = foo`foo::a::{{impl}}::foo + 36 at foo.rs:5, address = 0x00000001000009a4\r\n(lldb) r\r\nProcess 32422 launched: '/private/tmp/foo' (x86_64)\r\nProcess 32422 stopped\r\n* thread #1: tid = 0x7bce5a, 0x00000001000009e8 foo`foo::b::{{impl}}::bar(self=0x00007fff5fbff938) + 24 at foo.rs:16, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\r\n    frame #0: 0x00000001000009e8 foo`foo::b::{{impl}}::bar(self=0x00007fff5fbff938) + 24 at foo.rs:16\r\n   13  \t    impl T {\r\n   14  \t        pub fn bar(&self) {\r\n   15  \t            let s = S;\r\n-> 16  \t            s.foo();\r\n   17  \t        }\r\n   18  \t    }\r\n   19  \t}\r\n(lldb) c\r\nProcess 32422 resuming\r\nProcess 32422 stopped\r\n* thread #1: tid = 0x7bce5a, 0x00000001000009a4 foo`foo::a::{{impl}}::foo(self=0x00007fff5fbff918) + 36 at foo.rs:5, queue = 'com.apple.main-thread', stop reason = breakpoint 2.1\r\n    frame #0: 0x00000001000009a4 foo`foo::a::{{impl}}::foo(self=0x00007fff5fbff918) + 36 at foo.rs:5\r\n   2   \t    pub struct S;\r\n   3   \t    impl S {\r\n   4   \t        pub fn foo(&self) {\r\n-> 5   \t            println!(\"hi\");\r\n   6   \t        }\r\n   7   \t    }\r\n   8   \t}\r\n(lldb) bt\r\n* thread #1: tid = 0x7bce5a, 0x00000001000009a4 foo`foo::a::{{impl}}::foo(self=0x00007fff5fbff918) + 36 at foo.rs:5, queue = 'com.apple.main-thread', stop reason = breakpoint 2.1\r\n  * frame #0: 0x00000001000009a4 foo`foo::a::{{impl}}::foo(self=0x00007fff5fbff918) + 36 at foo.rs:5\r\n    frame #1: 0x00000001000009ed foo`foo::b::{{impl}}::bar(self=0x00007fff5fbff938) + 29 at foo.rs:16\r\n    frame #2: 0x0000000100000a11 foo`foo::main + 17 at foo.rs:23\r\n    frame #3: 0x000000010000a0fb foo`panic_unwind::__rust_maybe_catch_panic + 27 at lib.rs:98\r\n    frame #4: 0x0000000100008967 foo`std::rt::lang_start [inlined] std::panicking::try<(),fn()> + 44 at panicking.rs:436\r\n    frame #5: 0x000000010000893b foo`std::rt::lang_start [inlined] std::panic::catch_unwind<fn(),()> at panic.rs:361\r\n    frame #6: 0x000000010000893b foo`std::rt::lang_start + 347 at rt.rs:57\r\n    frame #7: 0x0000000100000a4a foo`main + 42\r\n    frame #8: 0x00007fff929365fd libdyld.dylib`start + 1\r\n(lldb) up\r\nframe #1: 0x00000001000009ed foo`foo::b::{{impl}}::bar(self=0x00007fff5fbff938) + 29 at foo.rs:16\r\n   13  \t    impl T {\r\n   14  \t        pub fn bar(&self) {\r\n   15  \t            let s = S;\r\n-> 16  \t            s.foo();\r\n   17  \t        }\r\n   18  \t    }\r\n   19  \t}\r\n(lldb)\r\n```", "closed_by": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/39160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/39160/timeline", "performed_via_github_app": null, "state_reason": "completed"}