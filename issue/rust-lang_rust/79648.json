{"url": "https://api.github.com/repos/rust-lang/rust/issues/79648", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79648/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79648/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79648/events", "html_url": "https://github.com/rust-lang/rust/issues/79648", "id": 755612593, "node_id": "MDU6SXNzdWU3NTU2MTI1OTM=", "number": 79648, "title": "Bad Error Message: error[E0277]: the trait bound `T: Generator<ResumeTy>` is not satisfied", "user": {"login": "keithmss", "id": 15651788, "node_id": "MDQ6VXNlcjE1NjUxNzg4", "avatar_url": "https://avatars.githubusercontent.com/u/15651788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keithmss", "html_url": "https://github.com/keithmss", "followers_url": "https://api.github.com/users/keithmss/followers", "following_url": "https://api.github.com/users/keithmss/following{/other_user}", "gists_url": "https://api.github.com/users/keithmss/gists{/gist_id}", "starred_url": "https://api.github.com/users/keithmss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keithmss/subscriptions", "organizations_url": "https://api.github.com/users/keithmss/orgs", "repos_url": "https://api.github.com/users/keithmss/repos", "events_url": "https://api.github.com/users/keithmss/events{/privacy}", "received_events_url": "https://api.github.com/users/keithmss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-12-02T21:11:29Z", "updated_at": "2023-04-05T17:30:20Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### error message\r\nHello! This is a bug report for a confusing/bad error message:\r\n\r\n```rust\r\n   Compiling bug v0.1.0 (E:\\Users\\keith\\Documents\\Projects\\bug)\r\nerror[E0277]: the trait bound `T: Generator<ResumeTy>` is not satisfied\r\n\r\nerror[E0308]: mismatched types\r\n  --> src\\main.rs:76:25\r\n   |\r\n14 |             .filter_map(|r| async { r.ok() })\r\n   |                                   ----------\r\n   |                                   |\r\n   |                                   the expected generator\r\n   |                                   the found generator\r\n...\r\n76 |     let foobar_runner = tokio::spawn(async move {\r\n   |                         ^^^^^^^^^^^^ one type is more general than the other\r\n   |\r\n   = note: expected opaque type `impl futures::Future`\r\n              found opaque type `impl futures::Future`\r\n\r\nerror[E0308]: mismatched types\r\n  --> src\\main.rs:76:25\r\n   |\r\n15 |             .filter_map(|m| async move { Some(Foo::new(m)) })\r\n   |                                        ---------------------\r\n   |                                        |\r\n   |                                        the expected generator\r\n   |                                        the found generator\r\n...\r\n76 |     let foobar_runner = tokio::spawn(async move {\r\n   |                         ^^^^^^^^^^^^ one type is more general than the other\r\n   |\r\n   = note: expected opaque type `impl futures::Future`\r\n              found opaque type `impl futures::Future`\r\n\r\nerror: aborting due to 3 previous errors\r\n\r\nSome errors have detailed explanations: E0277, E0308.\r\nFor more information about an error, try `rustc --explain E0277`.\r\nerror: could not compile `bug`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n##  code\r\nI apologize that the following probably isn't the easiest way to trigger it. I am relatively new to Rust and am just now working with Generics and Lifetimes now which is how I got here. The following is a very stripped down version of my code (it compiles without the commented line).\r\n\r\n`main.rs`:\r\n```rust\r\nuse core::future;\r\nuse futures::stream::{self, StreamExt};\r\nuse parking_lot::RwLock;\r\nuse std::borrow::Cow;\r\nuse std::sync::Arc;\r\n\r\nstruct Bar {}\r\n\r\nimpl Bar {\r\n    async fn get_foo<'a>(&self) -> Vec<Foo<'a>> {\r\n        let results: Vec<Result<String, ()>> =\r\n            vec![Ok(\"shoutout to `impl Fox for Salix` for this vector\".to_string()); 10];\r\n        let foo: Vec<Foo<'a>> = stream::iter(results)\r\n            .filter_map(|r| async { r.ok() })\r\n            .filter_map(|m| async move { Some(Foo::new(m)) })\r\n            .filter(|m| future::ready(test_foo(m.as_str()))) // Code compiles without this line\r\n            .collect()\r\n            .await;\r\n        foo\r\n    }\r\n\r\n    async fn new() -> Arc<Self> {\r\n        Arc::new(Self {})\r\n    }\r\n}\r\n\r\nstruct Foo<'a> {\r\n    raw: Cow<'a, str>,\r\n}\r\n\r\nimpl<'a> Foo<'a> {\r\n    fn as_str(&self) -> &str {\r\n        &self.raw\r\n    }\r\n\r\n    fn new<T>(raw: T) -> Foo<'a>\r\n    where\r\n        T: Into<Cow<'a, str>>,\r\n    {\r\n        Foo { raw: raw.into() }\r\n    }\r\n}\r\n\r\nstruct FooBar<'a> {\r\n    bar: Arc<Bar>,\r\n    foo: RwLock<Vec<Foo<'a>>>,\r\n}\r\n\r\nimpl<'a> FooBar<'a> {\r\n    async fn get_foo(&self) -> Vec<Foo<'a>> {\r\n        let foo: Vec<Foo<'a>> = self.bar.get_foo().await;\r\n        foo\r\n    }\r\n\r\n    async fn new(bar: Arc<Bar>) -> Arc<FooBar<'a>> {\r\n        let foobar = FooBar {\r\n            bar: bar.clone(),\r\n            foo: RwLock::new(Vec::new()),\r\n        };\r\n        Arc::new(foobar)\r\n    }\r\n\r\n    async fn run(&self) {\r\n        let new_foo: Vec<Foo<'a>> = self.get_foo().await;\r\n        {\r\n            let mut foo = self.foo.write();\r\n            *foo = new_foo;\r\n        }\r\n    }\r\n}\r\n\r\n#[tokio::main]\r\nasync fn main() {\r\n    let bar = Bar::new().await;\r\n    let foobar = FooBar::new(bar).await;\r\n    let foobar_runner = tokio::spawn(async move {\r\n        foobar.run().await;\r\n    })\r\n    .await;\r\n}\r\n\r\nfn test_foo(foo: &str) -> bool {\r\n    println!(\"{}\", foo);\r\n    true\r\n}\r\n```\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nPS E:\\Users\\keith\\Documents\\Projects\\bug> rustc --version --verbose\r\nrustc 1.48.0 (7eac88abb 2020-11-16)\r\nbinary: rustc\r\ncommit-hash: 7eac88abb2e57e752f3302f02be5f3ce3d7adfb4\r\ncommit-date: 2020-11-16\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.48.0\r\nLLVM version: 11.0\r\n```\r\n\r\n`Cargo.toml`:\r\n```toml\r\n[package]\r\nname = \"bug\"\r\nversion = \"0.1.0\"\r\nauthors = [\"keith miller\"]\r\nedition = \"2018\"\r\n\r\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\r\n\r\n[dependencies]\r\nfutures           = \"0.3.8\"\r\nparking_lot       = \"0.11.1\"\r\ntokio = { version = \"0.2.22\", features = [\"macros\", \"rt-threaded\", \"time\"] }\r\n```\r\n\r\nThis is my first bug report for a project of this size. Please let me know if you need me to modify anything. Thank you!", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79648/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79648/timeline", "performed_via_github_app": null, "state_reason": null}