{"url": "https://api.github.com/repos/rust-lang/rust/issues/33916", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/33916/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/33916/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/33916/events", "html_url": "https://github.com/rust-lang/rust/issues/33916", "id": 157284857, "node_id": "MDU6SXNzdWUxNTcyODQ4NTc=", "number": 33916, "title": "Inline read/write functions for Cursors", "user": {"login": "jameysharp", "id": 865272, "node_id": "MDQ6VXNlcjg2NTI3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/865272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jameysharp", "html_url": "https://github.com/jameysharp", "followers_url": "https://api.github.com/users/jameysharp/followers", "following_url": "https://api.github.com/users/jameysharp/following{/other_user}", "gists_url": "https://api.github.com/users/jameysharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/jameysharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jameysharp/subscriptions", "organizations_url": "https://api.github.com/users/jameysharp/orgs", "repos_url": "https://api.github.com/users/jameysharp/repos", "events_url": "https://api.github.com/users/jameysharp/events{/privacy}", "received_events_url": "https://api.github.com/users/jameysharp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-05-27T20:28:23Z", "updated_at": "2016-09-22T16:14:28Z", "closed_at": "2016-09-22T16:14:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be nice if the `Read` and `Write` implementations for `std::io::Cursor` were inlined. Consider this program:\n\n``` rust\nuse std::io::{Cursor,Write};\n\nfn main() {\n        let mut arr = [0u8; 4];\n        let mut c = Cursor::new(&mut arr as &mut [u8]);\n        let _ = c.write(&[42, 7]);\n        let _ = c.write(&[127, 255]);\n        println!(\"{:?}\", c.into_inner());\n}\n```\n\nIf the `write` calls are inlined, then all the position computations are constant-folded and the writes compile to exactly what I'd hope for:\n\n``` asm\nmovl   $0xff7f072a,0x5c(%rsp)\n```\n\nI tested using `rustc -C opt-level=2 -C lto`, using rustc 1.10.0-nightly (e0fd34bba 2016-05-09). I think that LTO is a pretty close approximation here to the effect that `#[inline]` would have, but I guess that assumption needs testing. (By the way: oddly, at opt-level=3 I got _worse_ code.)\n\nWithout LTO, I get about 84 instructions for this sequence, counting the ones in `main` as well as the implementation of `write` itself.\n\nThat said, the `Write` implementation for `Cursor<Vec<u8>>` is more complicated and maybe shouldn't be inlined. But I think this request at least applies to the implementations for `Cursor<&'a mut [u8]>` and `Cursor<Box<[u8]>>`, and probably to the `Read` implementation for `Cursor<T> where T: AsRef<[u8]>`.\n\nDoes this sound sensible?\n", "closed_by": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/33916/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/33916/timeline", "performed_via_github_app": null, "state_reason": "completed"}