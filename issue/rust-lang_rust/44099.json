{"url": "https://api.github.com/repos/rust-lang/rust/issues/44099", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44099/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44099/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44099/events", "html_url": "https://github.com/rust-lang/rust/issues/44099", "id": 253098231, "node_id": "MDU6SXNzdWUyNTMwOTgyMzE=", "number": 44099, "title": "Write on &mut [u8] and Cursor<&mut [u8]> doesn't optimize very well.", "user": {"login": "oyvindln", "id": 8319210, "node_id": "MDQ6VXNlcjgzMTkyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8319210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oyvindln", "html_url": "https://github.com/oyvindln", "followers_url": "https://api.github.com/users/oyvindln/followers", "following_url": "https://api.github.com/users/oyvindln/following{/other_user}", "gists_url": "https://api.github.com/users/oyvindln/gists{/gist_id}", "starred_url": "https://api.github.com/users/oyvindln/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oyvindln/subscriptions", "organizations_url": "https://api.github.com/users/oyvindln/orgs", "repos_url": "https://api.github.com/users/oyvindln/repos", "events_url": "https://api.github.com/users/oyvindln/events{/privacy}", "received_events_url": "https://api.github.com/users/oyvindln/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-08-26T14:48:05Z", "updated_at": "2023-05-03T17:19:52Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Calling write on a mutable slice (or one wrapped in a Cursor) with one, or a small amount of bytes results in function call to memcpy call after optimization (opt-level=3), rather than simply using a store as one would expect:\r\n\r\n```rust\r\n\r\npub fn one_byte(mut buf: &mut [u8], byte: u8) {\r\n    buf.write(&[byte]);\r\n}\r\n\r\n```\r\n\r\nResults in: \r\n\r\n```llvm\r\n\r\ndefine void @_ZN6cursor8one_byte17h68c172d435558ab9E(i8* nonnull, i64, i8) unnamed_addr #0 personality i32 (i32, i32, i64, %\"unwind::libunwind::_Unwind_Exception\"*, %\"unwind::libunwind::_Unwind_Context\"*)* @rust_eh_personality {\r\n_ZN4core3ptr13drop_in_place17hc17de44f7e6456c9E.exit:\r\n  %_10.sroa.0 = alloca i8, align 1\r\n  call void @llvm.lifetime.start(i64 1, i8* nonnull %_10.sroa.0)\r\n  store i8 %2, i8* %_10.sroa.0, align 1\r\n  %3 = icmp ne i64 %1, 0\r\n  %_0.0.sroa.speculated.i.i.i = zext i1 %3 to i64\r\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %0, i8* nonnull %_10.sroa.0, i64 %_0.0.sroa.speculated.i.i.i, i32 1, i1 false), !noalias !0\r\n  call void @llvm.lifetime.end(i64 1, i8* nonnull %_10.sroa.0)\r\n  ret void\r\n}\r\n\r\n```\r\n\r\n`copy_from_slice` seems to be part of the issue here, if I change the [write implementation on mutable slices](https://github.com/rust-lang/rust/blob/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src/libstd/io/impls.rs#L228) to use this instead of `copy_from_slice`:\r\n```rust\r\n\r\nfor (&input, output) in data[..amt].iter().zip(a.iter_mut()) {\r\n    *output = input;\r\n}\r\n\r\n```\r\n\r\nthe llvm ir looks much nicer: \r\n```llvm\r\n\r\ndefine void @_ZN6cursor8one_byte17h68c172d435558ab9E(i8* nonnull, i64, i8) unnamed_addr #0 personality i32 (i32, i32, i64, %\"unwind::libunwind::_Unwind_Exception\"*, %\"unwind::libunwind::_Unwind_Context\"*)* @rust_eh_personality {\r\nstart:\r\n  %3 = icmp eq i64 %1, 0\r\n  br i1 %3, label %_ZN4core3ptr13drop_in_place17hc17de44f7e6456c9E.exit, label %\"_ZN84_$LT$core..iter..Zip$LT$A$C$$u20$B$GT$$u20$as$u20$core..iter..iterator..Iterator$GT$4next17he84ad69753d1c347E.exit.preheader.i\"\r\n\r\n\"_ZN84_$LT$core..iter..Zip$LT$A$C$$u20$B$GT$$u20$as$u20$core..iter..iterator..Iterator$GT$4next17he84ad69753d1c347E.exit.preheader.i\": ; preds = %start\r\n  store i8 %2, i8* %0, align 1, !noalias !0\r\n  br label %_ZN4core3ptr13drop_in_place17hc17de44f7e6456c9E.exit\r\n\r\n_ZN4core3ptr13drop_in_place17hc17de44f7e6456c9E.exit: ; preds = %start, %\"_ZN84_$LT$core..iter..Zip$LT$A$C$$u20$B$GT$$u20$as$u20$core..iter..iterator..Iterator$GT$4next17he84ad69753d1c347E.exit.preheader.i\"\r\n  ret void\r\n}\r\n\r\n```\r\nThe for loop will result in vector operations on longer slices, but I'm still unsure about whether doing this change could cause some slowdown on very long slices as the memcpy implementation may be more optimized for the specific system, and it doesn't really solve the underlying issue. There seems to be some problem with optimizing `copy_from_slice` calls that follow `split_at_mut` and probably some other calls that involve slice operations (I tried to alter the write function to use unsafe and creating a temporary slice using pointers instead, but that didn't help.)\r\n\r\nHappens on both nightly `rustc 1.21.0-nightly (2aeb5930f 2017-08-25)` and stable (1.19) x86_64-unknown-linux-gnu` (Not sure if memcpy behaviour could be different on other platforms).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44099/timeline", "performed_via_github_app": null, "state_reason": null}