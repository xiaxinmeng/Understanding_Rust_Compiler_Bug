{"url": "https://api.github.com/repos/rust-lang/rust/issues/26764", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/26764/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/26764/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/26764/events", "html_url": "https://github.com/rust-lang/rust/issues/26764", "id": 92935189, "node_id": "MDU6SXNzdWU5MjkzNTE4OQ==", "number": 26764, "title": ".note.rustc dylib section flagged SHF_ALLOC on Linux (can cause crashes)", "user": {"login": "tylerwhall", "id": 147565, "node_id": "MDQ6VXNlcjE0NzU2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/147565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerwhall", "html_url": "https://github.com/tylerwhall", "followers_url": "https://api.github.com/users/tylerwhall/followers", "following_url": "https://api.github.com/users/tylerwhall/following{/other_user}", "gists_url": "https://api.github.com/users/tylerwhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerwhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerwhall/subscriptions", "organizations_url": "https://api.github.com/users/tylerwhall/orgs", "repos_url": "https://api.github.com/users/tylerwhall/repos", "events_url": "https://api.github.com/users/tylerwhall/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerwhall/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123110, "node_id": "MDU6TGFiZWwxMjMxMTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-linux", "name": "O-linux", "color": "6e6ec0", "default": false, "description": "Operating system: Linux"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-07-03T20:54:35Z", "updated_at": "2016-08-14T22:27:19Z", "closed_at": "2016-08-14T22:27:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having the metadata note section flagged \"alloc\" can cause two types of crashes in certain environments.\n## 1. Dynamic loader crash\n\nGlibc's dynamic loader will try to allocate and copy the entire section onto the stack which will crash if the stack size is limited. This section is particularly large (~2MB for libstd) - not something that can generally be expected to fit on the stack.\n\nThe loader is searching for .note.ABI-tag, but does so by reading in any PT_NOTE headers. Because the metadata section is flagged alloc, it gets an entry in the program header, causing it to get loaded by this code.\nhttp://osxr.org/glibc/source/elf/dl-load.c?!v=glibc-2.19#1869 (Note the alloca() at 1879)\n\nI think this may be the cause of #22528, or other crashes with open_verify() in the call stack.\n\nA workaround of using objcopy -R to remove the section fixes this problem, but leaves the object in a brittle state, described below.\n## 2. Crashes in stripped and prelinked shared objects\n\nWorking around 1. by stripping out .note.rustc causes a problem with section numbering. Pulling the section out from before another ALLOC section (.bss in the example below) causes that section to be renumbered. Neither GNU strip nor objcopy fix the rest of the references in the executable that point to the section by its index. In particular, entries in the .dynamic section now point to the next section (.comment, here) which breaks when prelinking.\n\nPrelink decides not to fix up the symbols in the dynamic section because it thinks they point to .comment, a section that didn't get relocated during prelinking. So BSS gets relocated, but the dynamic symbols point to the non-prelinked address, causing the program to segfault when it tries to access exported symbols in BSS.\n\nreadelf -S libstd-4e7c5e5c.so (current behavior)\n\n```\n  [25] .data             PROGBITS        001938a0 18b8a0 0001a0 00  WA  0   0 16\n  [26] .note.rustc       NOTE            00193a40 18ba40 2088d2 00  WA  0   0 16\n  [27] .bss              NOBITS          0039c320 394312 000dc8 00  WA  0   0 16\n  [28] .comment          PROGBITS        00000000 394312 000011 01  MS  0   0  1\n  [29] .ARM.attributes   ARM_ATTRIBUTES  00000000 394323 00003d 00      0   0  1\n  [30] .debug_aranges    PROGBITS        00000000 394360 0011a0 00      0   0  8\n```\n\nTo fix this, I'm currently using this patch as a workaround.\nhttps://github.com/tylerwhall/rust/commit/fc910593a98d5b8641a6974ce65959116285e00f\nIt runs objcopy on the intermediate metadata object to remove the alloc and write flags. This causes the final link to place the metadata section at the end of the executable and not generate a program header entry.\n\nThe fixed version has the metadata with no flags set, no load address, and located near the end of the file along with the debug sections where it can be safely stripped.\n\nreadelf -S libstd-4e7c5e5c.so (desired behavior)\n\n```\n  [25] .data             PROGBITS        001938a0 18b8a0 0001a0 00  WA  0   0 16\n  [26] .bss              NOBITS          00193a40 18ba40 000dc8 00  WA  0   0 16\n  [27] .comment          PROGBITS        00000000 18ba40 000011 01  MS  0   0  1\n  [28] .ARM.attributes   ARM_ATTRIBUTES  00000000 18ba51 00003d 00      0   0  1\n  [29] .note.rustc       PROGBITS        00000000 18ba90 2088a7 00      0   0 16\n  [30] .debug_aranges    PROGBITS        00000000 394338 0011a0 00      0   0  8\n```\n\nObviously running objcopy like this is not portable. Calling llvm::LLVMSetGlobalConstant() on the metadata variable is enough to remove the SHF_WRITE flag, but I couldn't find a way with LLVM's API to output a section that didn't request to be loaded at run time. Hopefully someone who knows more about LLVM can come up with a more elegant solution to remove SHF_ALLOC from the intermediate metadata object.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/26764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/26764/timeline", "performed_via_github_app": null, "state_reason": "completed"}