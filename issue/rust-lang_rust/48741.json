{"url": "https://api.github.com/repos/rust-lang/rust/issues/48741", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48741/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48741/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48741/events", "html_url": "https://github.com/rust-lang/rust/issues/48741", "id": 302132214, "node_id": "MDU6SXNzdWUzMDIxMzIyMTQ=", "number": 48741, "title": "Layout optimization for Result<&T, E>-like types", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-04T23:05:02Z", "updated_at": "2018-03-20T09:09:12Z", "closed_at": "2018-03-20T09:09:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "One realization is that the hot case for `Result<T, E>` is usually the `Ok()` case. And in many cases, `T` is actually some sort of NonNull pointer: a ref, a Box, etc.\r\n\r\nThe current layout for `Result<NonNull<T>, E>` is (tag, union { NonNull<T>, E }). Which means either way, the code needs to read the tag, and then read the union.\r\n\r\nIf instead, the layout was (union { tag, NonNull<T> }, E), then the common case becomes one read.\r\n\r\nThe generalization could be formulated like this: When the tag is a boolean, and the first variant is a NonNull/NonZero type, the first variant is stored in place of the tag, and the invalid zero value acts as tag for the second variant.\r\n\r\nSo `Ok(value)` would be (value, undefined), and `Err(e)` would be (0, e).\r\n\r\nSome code to show the benefits of this optimization:\r\n```rust\r\n#![feature(nonzero)]\r\nextern crate core;\r\nuse core::nonzero::NonZero;\r\n\r\npub struct Foo(usize, usize);\r\n\r\nimpl Foo {\r\n    fn as_result(&self) -> Result<NonZero<usize>, usize> {\r\n        if self.0 > 0 {\r\n            Ok(unsafe { NonZero::new_unchecked(self.0) })\r\n        } else {\r\n            Err(self.1)\r\n        }\r\n    }\r\n}\r\n\r\npub fn foo(f: &Foo) -> Option<NonZero<usize>> {\r\n    f.as_result().ok()\r\n}\r\n\r\npub fn foo_unwrap(f: &Foo) -> usize {\r\n    f.as_result().unwrap().get()\r\n}\r\n\r\npub fn bar(f: &Result<NonZero<usize>, usize>) -> Option<NonZero<usize>> {\r\n    f.ok()\r\n}\r\n\r\npub fn bar_unwrap(f: &Result<NonZero<usize>, usize>) -> usize {\r\n    f.unwrap().get()\r\n}\r\n```\r\n\r\nCompiled as the following with godbolt:\r\n```asm\r\nexample::foo:\r\n  push rbp\r\n  mov rbp, rsp\r\n  mov rax, qword ptr [rdi]\r\n  pop rbp\r\n  ret\r\n\r\nexample::foo_unwrap:\r\n  mov rax, qword ptr [rdi]\r\n  test rax, rax\r\n  jne .LBB4_2\r\n  mov rax, qword ptr [rdi + 8]\r\n.LBB4_2:\r\n  je .LBB4_3\r\n  ret\r\n.LBB4_3:\r\n  push rbp\r\n  mov rbp, rsp\r\n  mov rdi, rax\r\n  call core::result::unwrap_failed\r\n  ud2\r\n\r\nexample::bar:\r\n  push rbp\r\n  mov rbp, rsp\r\n  cmp qword ptr [rdi], 1\r\n  je .LBB5_1\r\n  mov rax, qword ptr [rdi + 8]\r\n  pop rbp\r\n  ret\r\n.LBB5_1:\r\n  xor eax, eax\r\n  pop rbp\r\n  ret\r\n\r\nexample::bar_unwrap:\r\n  mov rax, qword ptr [rdi + 8]\r\n  cmp qword ptr [rdi], 1\r\n  je .LBB6_1\r\n  ret\r\n.LBB6_1:\r\n  push rbp\r\n  mov rbp, rsp\r\n  mov rdi, rax\r\n  call core::result::unwrap_failed\r\n  ud2\r\n```\r\n\r\nThis doesn't really remove branches in the example above, but removes the need to read memory in the common case (although, the data is probably in the same cache-line, or in the next pre-fetched one, but that's still less instructions to execute). In some cases, I've seen the compiler use cmov instead of a branch, though.\r\n\r\nNote the compiler does a poor job with `foo_unwrap`, for some reason...  manually inlining as_result() makes it generate better code.\r\n\r\nThis could be applied to slices too, where Result<&[T], E> could become (union { tag, slice-ptr }, union { slice-size, E}), in which case this would even make the type smaller than (tag, union { (slice-ptr, slice-size), E }).", "closed_by": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48741/reactions", "total_count": 4, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48741/timeline", "performed_via_github_app": null, "state_reason": "completed"}