{"url": "https://api.github.com/repos/rust-lang/rust/issues/40900", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/40900/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/40900/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/40900/events", "html_url": "https://github.com/rust-lang/rust/issues/40900", "id": 217871959, "node_id": "MDU6SXNzdWUyMTc4NzE5NTk=", "number": 40900, "title": "Error message for inferred lifetime failure isn't great", "user": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-29T13:15:32Z", "updated_at": "2019-10-30T05:32:42Z", "closed_at": "2019-10-30T05:32:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This code does not work:\r\n```rust\r\nuse std::borrow::Borrow;\r\n\r\nstruct S;\r\ntrait T {}\r\nimpl T for S {}\r\n\r\nimpl Borrow<T> for S {\r\n    fn borrow(&self) -> &T {\r\n        self as &T\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let s = S;\r\n    let _t: &T = s.borrow();\r\n}\r\n```\r\nThe error message I get is:\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime for lifetime parameter in generic type due to conflicting requirements\r\n  --> <anon>:8:5\r\n   |\r\n8  |       fn borrow(&self) -> &T {\r\n   |  _____^ starting here...\r\n9  | |         self as &T\r\n10 | |     }\r\n   | |_____^ ...ending here\r\n   |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 8:27...\r\n  --> <anon>:8:28\r\n   |\r\n8  |       fn borrow(&self) -> &T {\r\n   |  ____________________________^ starting here...\r\n9  | |         self as &T\r\n10 | |     }\r\n   | |_____^ ...ending here\r\nnote: ...so that method type is compatible with trait (expected fn(&S) -> &T + 'static, found fn(&S) -> &T)\r\n  --> <anon>:8:5\r\n   |\r\n8  |       fn borrow(&self) -> &T {\r\n   |  _____^ starting here...\r\n9  | |         self as &T\r\n10 | |     }\r\n   | |_____^ ...ending here\r\n   = note: but, the lifetime must be valid for the static lifetime...\r\nnote: ...so that method type is compatible with trait (expected fn(&S) -> &T + 'static, found fn(&S) -> &T)\r\n  --> <anon>:8:5\r\n   |\r\n8  |       fn borrow(&self) -> &T {\r\n   |  _____^ starting here...\r\n9  | |         self as &T\r\n10 | |     }\r\n   | |_____^ ...ending here\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nThis code does work:\r\n```rust\r\nuse std::borrow::Borrow;\r\n\r\nstruct S;\r\ntrait T {}\r\nimpl T for S {}\r\n\r\nimpl<'a> Borrow<T + 'a> for S {\r\n    fn borrow(&self) -> &(T + 'a) {\r\n        self as &T\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let s = S;\r\n    let _t: &T = s.borrow();\r\n}\r\n```\r\nThe only clue I got was this note:\r\n```\r\nnote: ...so that method type is compatible with trait (expected fn(&S) -> &T + 'static, found fn(&S) -> &T)\r\n```\r\nwhich even then I wasn't clear if my change would make a difference or not. Is there some change we could make to the output that would make the solution clearer?", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/40900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/40900/timeline", "performed_via_github_app": null, "state_reason": "completed"}