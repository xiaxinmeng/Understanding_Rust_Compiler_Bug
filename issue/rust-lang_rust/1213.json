{"url": "https://api.github.com/repos/rust-lang/rust/issues/1213", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/1213/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/1213/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/1213/events", "html_url": "https://github.com/rust-lang/rust/issues/1213", "id": 2323897, "node_id": "MDU6SXNzdWUyMzIzODk3", "number": 1213, "title": "rustc crash: \"option none\" at src/lib/option.rs", "user": {"login": "elly", "id": 218734, "node_id": "MDQ6VXNlcjIxODczNA==", "avatar_url": "https://avatars.githubusercontent.com/u/218734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elly", "html_url": "https://github.com/elly", "followers_url": "https://api.github.com/users/elly/followers", "following_url": "https://api.github.com/users/elly/following{/other_user}", "gists_url": "https://api.github.com/users/elly/gists{/gist_id}", "starred_url": "https://api.github.com/users/elly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elly/subscriptions", "organizations_url": "https://api.github.com/users/elly/orgs", "repos_url": "https://api.github.com/users/elly/repos", "events_url": "https://api.github.com/users/elly/events{/privacy}", "received_events_url": "https://api.github.com/users/elly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2011-11-22T22:30:20Z", "updated_at": "2011-11-23T06:59:22Z", "closed_at": "2011-11-23T06:59:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When compiling this file:\n// cargo.rs - Rust package manager\n\nuse rustc;\nuse std;\n\nimport rustc::syntax::{ast, codemap, visit};\nimport rustc::syntax::parse::parser;\n\nimport std::io;\nimport std::option;\nimport std::option::{none, some};\nimport std::run;\nimport std::str;\nimport std::tempfile;\nimport std::vec;\n\ntype pkg = {\n    name: str,\n    vers: str,\n    uuid: str,\n    desc: option::t<str>,\n    sigs: option::t<str>\n};\n\nfn load_link(mis: [@ast::meta_item]) -> (option::t<str>,\n                                         option::t<str>,\n                                         option::t<str>) {\n    let name = none;\n    let vers = none;\n    let uuid = none;\n    for a: @ast::meta_item in mis {\n        alt a.node {\n            ast::meta_name_value(v, {node: ast::lit_str(s), span: _}) {\n                alt v {\n                    \"name\" { name = some(s); }\n                    \"vers\" { vers = some(s); }\n                    \"uuid\" { uuid = some(s); }\n                    _ { }\n                }\n            }\n        }\n    }\n    (name, vers, uuid)\n}\nfn load_pkg(filename: str) -> option::t<pkg> {\n    let sess = @{cm: codemap::new_codemap(), mutable next_id: 0};\n    let c = parser::parse_crate_from_crate_file(filename, [], sess);\n\n```\nlet name = none;\nlet vers = none;\nlet uuid = none;\nlet desc = none;\nlet sigs = none;\n\nfor a in c.node.attrs {\n    alt a.node.value.node {\n        ast::meta_name_value(v, {node: ast::lit_str(s), span: _}) {\n            alt v {\n                \"desc\" { desc = some(v); }\n                \"sigs\" { sigs = some(v); }\n                _ { }\n            }\n        }\n        ast::meta_list(v, mis) {\n            if v == \"link\" {\n                let (n, v, u) = load_link(mis);\n                name = n;\n                vers = v;\n                uuid = u;\n            }\n        }\n    }\n}\n\nalt (name, vers, uuid) {\n    (some(name0), some(vers0), some(uuid0)) {\n        some({\n            name: name0,\n            vers: vers0,\n            uuid: uuid0,\n            desc: desc,\n            sigs: sigs})\n    }\n    _ { ret none; }\n}\n```\n\n}\n\nfn print(s: str) {\n    io::stdout().write_line(s);\n}\n\nfn rest(s: str, start: uint) -> str {\n    if (start >= str::char_len(s)) {\n        \"\"\n    } else {\n        str::char_slice(s, start, str::char_len(s))\n    }\n}\nfn install_file(path: str) -> option::t<str> {\n    let wd = tempfile::mkdtemp(\"/tmp/cargo-work-\", \"\");\n    ret wd;\n}\n\nfn cmd_install(argv: [str]) {\n    // cargo install <pkg>\n    if vec::len(argv) < 3u {\n        cmd_usage();\n        ret;\n    }\n\n```\nlet wd = if str::starts_with(argv[2], \"file:\") {\n    let path = rest(argv[2], 5u);\n    install_file(path)\n} else {\n    none\n};\n```\n\n}\n\nfn cmd_usage() {\n    print(\"Usage: cargo <verb> [args...]\");\n}\n\nfn main(argv: [str]) {\n    if vec::len(argv) < 2u {\n        cmd_usage();\n        ret;\n    }\n    alt argv[1] {\n        \"usage\" { cmd_usage(); }\n        _ { cmd_usage(); }\n    }\n}\n\nrustc crashes with the following error:\nrust: upcall fail 'option none', src/lib/option.rs:34\nrust: domain main @0x8f923a8 root task failed\nStack:\n(gdb) bt\n#0  upcall_fail (expr=0x837c570 \"option none\", file=0xf7f973e0 \"src/lib/option.rs\", line=34) at ./src/rt/rust_upcall.cpp:53\n#1  0xf7f61bc4 in option::get::_2ea22c2ffe2384d0 () from /home/elly/a/rust/bin/../lib/libruststd.so\n#2  0x0822574b in metadata::decoder::find_item::_df242c5c5051a8b3 ()\n#3  0x08226deb in metadata::decoder::get_tag_variants::_a147d42fcea1fece ()\n#4  0x082311c1 in metadata::csearch::get_tag_variants::_18f59da87adf6916 ()\n#5  0x080f7a5b in middle::ty::tag_variants::_18f59da87adf6916 ()\n#6  0x080e8a10 in middle::ty::type_structurally_contains::_5a6771941682f311 ()\n#7  0x080e8bfb in middle::ty::type_structurally_contains::_5a6771941682f311 ()\n#8  0x0806c667 in middle::trans::type_of_tag::_d41e55581ccd235a ()\n#9  0x0806b4e9 in middle::trans::type_of_inner::_678082fcd324de96 ()\n#10 0x0806bf39 in middle::trans::type_of_inner::_678082fcd324de96 ()\n#11 0x0806b5a2 in middle::trans::type_of_inner::_678082fcd324de96 ()\n#12 0x0806bdd7 in middle::trans::type_of_inner::_678082fcd324de96 ()\n#13 0x0806bf39 in middle::trans::type_of_inner::_678082fcd324de96 ()\n#14 0x0806bf39 in middle::trans::type_of_inner::_678082fcd324de96 ()\n#15 0x0806b5a2 in middle::trans::type_of_inner::_678082fcd324de96 ()\n#16 0x0806aeb0 in middle::trans::type_of_fn::_d546d6649fd77fad ()\n#17 0x0806b344 in middle::trans::type_of_fn_from_ty::_c0eca63f47c43ab2 ()\n#18 0x0806cab8 in middle::trans::type_of_ty_param_kinds_and_ty::_d6a7c6299c526e8f ()\n#19 0x080906f6 in middle::trans::trans_external_path::_d1bfcf047562eb25 ()\n#20 0x0809089b in middle::trans::lval_static_fn::_34da57b3cef2e8a6 ()\n#21 0x08091722 in middle::trans::trans_var::_38a25ca0d46df44c ()\n#22 0x08091537 in middle::trans::trans_path::_98b23f9ac5482cf2 ()\n#23 0x08094548 in middle::trans::trans_callee::_acc25ceeb7639915 ()\n#24 0x0809bb9d in middle::trans::trans_call::_8aa26f246483f45f ()\n#25 0x080a0f81 in middle::trans::trans_expr::_bbcb02f4ad1ad745 ()\n#26 0x0809fa86 in middle::trans::trans_temp_lval::_9abb497e3b8a2055 ()\n#27 0x080a65b0 in middle::trans::init_local::_256ad881e86d4c2b ()\n#28 0x080a7434 in middle::trans::trans_stmt::_457fb41f6733c9bd ()\n#29 0x080a9078 in middle::trans::trans_block_dps::_5ed1d37c9b98c619 ()\n#30 0x080abfeb in middle::trans::trans_closure::_3958e2a05ee91aa3 ()\n#31 0x080ac1ca in middle::trans::trans_fn::_96b3ab2d545d6b67 ()\n#32 0x080b1bf6 in middle::trans::trans_item::_5a8088de146f21ea ()\n#33 0x080bcf28 in middle::trans::trans_crate::_4a38809211c9d6da ()\n#34 0x0829537b in driver::rustc::compile_input::thunk9032 ()\n#35 0x082330f9 in driver::rustc::time::_3e691b2a4ba58aee ()\n#36 0x0823553e in driver::rustc::compile_input::_9ae791233473dfb5 ()\n#37 0x0823e323 in driver::rustc::main::_cd8b8c8185af3dee ()\n#38 0x0823e9ef in _rust_main ()\n#39 0xf6ed47b4 in task_start_wrapper (a=0xf6bc9088) at ./src/rt/rust_task.cpp:180\n#40 0xdeadbeef in ?? ()\n#41 0xf6bc9088 in ?? ()\n\nBacktrace stopped: previous frame inner to this frame (corrupt stack?)\n", "closed_by": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/1213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/1213/timeline", "performed_via_github_app": null, "state_reason": "completed"}