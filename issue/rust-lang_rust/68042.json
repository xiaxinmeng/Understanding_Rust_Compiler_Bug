{"url": "https://api.github.com/repos/rust-lang/rust/issues/68042", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68042/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68042/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68042/events", "html_url": "https://github.com/rust-lang/rust/issues/68042", "id": 547239042, "node_id": "MDU6SXNzdWU1NDcyMzkwNDI=", "number": 68042, "title": "std::io::Write::write_vectored() does not properly limit the number of iovecs.", "user": {"login": "rustyconover", "id": 731941, "node_id": "MDQ6VXNlcjczMTk0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/731941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustyconover", "html_url": "https://github.com/rustyconover", "followers_url": "https://api.github.com/users/rustyconover/followers", "following_url": "https://api.github.com/users/rustyconover/following{/other_user}", "gists_url": "https://api.github.com/users/rustyconover/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustyconover/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustyconover/subscriptions", "organizations_url": "https://api.github.com/users/rustyconover/orgs", "repos_url": "https://api.github.com/users/rustyconover/repos", "events_url": "https://api.github.com/users/rustyconover/events{/privacy}", "received_events_url": "https://api.github.com/users/rustyconover/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-09T04:21:42Z", "updated_at": "2020-08-05T19:56:30Z", "closed_at": "2020-08-05T19:56:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "The callers of `std::io::Write::write_vectored()` should not have to go through the effort of determining what the maximum number of iovec structures can be passed to the underlying system call.  As demonstrated by this example:\r\n\r\n```rust\r\nuse std::fs::File;\r\nuse std::io::prelude::*;\r\nuse std::io::{BufWriter, IoSlice};\r\n\r\nfn main() {\r\n    let mut file = BufWriter::new(File::create(\"./example-output.txt\").unwrap());\r\n    let mut write_array: Vec<IoSlice> = Vec::new();\r\n    for _ in 1..1024 * 5 {\r\n        write_array.push(IoSlice::new(b\"1\"));\r\n        write_array.push(IoSlice::new(b\"\\n\"));\r\n    }\r\n    file.write_vectored(&write_array).unwrap();\r\n    file.flush().unwrap();\r\n}\r\n```\r\n\r\nThe output is:\r\n\r\n```\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 22, kind: InvalidInput, message: \"Invalid argument\" }', src/libcore/result.rs:1165:5\r\nstack backtrace:\r\n   0:        0x10621f175 - backtrace::backtrace::libunwind::trace::hb16ec6045891ce5a\r\n                               at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88\r\n   1:        0x10621f175 - backtrace::backtrace::trace_unsynchronized::hcacbd0efdffd74c6\r\n                               at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66\r\n   2:        0x10621f175 - std::sys_common::backtrace::_print_fmt::h39e22de9d6757d12\r\n                               at src/libstd/sys_common/backtrace.rs:77\r\n   3:        0x10621f175 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h415ddd0ba88caaaf\r\n                               at src/libstd/sys_common/backtrace.rs:61\r\n   4:        0x106236cb0 - core::fmt::write::h3335552e2df81c1d\r\n                               at src/libcore/fmt/mod.rs:1028\r\n   5:        0x10621db6b - std::io::Write::write_fmt::he6837371b9a45188\r\n                               at src/libstd/io/mod.rs:1412\r\n   6:        0x106220d43 - std::sys_common::backtrace::_print::h89459d14ba97f5fa\r\n                               at src/libstd/sys_common/backtrace.rs:65\r\n   7:        0x106220d43 - std::sys_common::backtrace::print::ha4c6688e811b8829\r\n                               at src/libstd/sys_common/backtrace.rs:50\r\n   8:        0x106220d43 - std::panicking::default_hook::{{closure}}::h708e66cfeb0483ba\r\n                               at src/libstd/panicking.rs:188\r\n   9:        0x106220a4a - std::panicking::default_hook::h39ea8ddf674c04ec\r\n                               at src/libstd/panicking.rs:205\r\n  10:        0x10622134b - std::panicking::rust_panic_with_hook::h9db77b22c2255a16\r\n                               at src/libstd/panicking.rs:464\r\n  11:        0x106220ed9 - std::panicking::continue_panic_fmt::h2dfa3a5b90265361\r\n                               at src/libstd/panicking.rs:373\r\n  12:        0x106220e29 - rust_begin_unwind\r\n                               at src/libstd/panicking.rs:302\r\n  13:        0x1062397cc - std::panicking::begin_panic::h8518f1142ed7061c\r\n  14:        0x1062398a9 - std::panicking::begin_panic::h8518f1142ed7061c\r\n  15:        0x1062181c1 - core::result::Result<T,E>::unwrap::h79b719002edcbf6d\r\n                               at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libcore/result.rs:933\r\n  16:        0x106214a2a - vector_bug::main::h3df611f13f1e9a88\r\n                               at src/main.rs:12\r\n  17:        0x106211c92 - std::rt::lang_start::{{closure}}::h4e4da6e08497b9a6\r\n                               at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libstd/rt.rs:61\r\n  18:        0x106220e08 - std::rt::lang_start_internal::{{closure}}::hccd7db6d8a0ebab5\r\n                               at src/libstd/rt.rs:48\r\n  19:        0x106220e08 - std::panicking::try::do_call::hd5a3af8d00c06681\r\n                               at src/libstd/panicking.rs:287\r\n  20:        0x10622281f - __rust_maybe_catch_panic\r\n                               at src/libpanic_unwind/lib.rs:78\r\n  21:        0x1062216de - std::panicking::try::h7a0bd4c078131d2f\r\n                               at src/libstd/panicking.rs:265\r\n  22:        0x1062216de - std::panic::catch_unwind::h75c3fbe62776ab10\r\n                               at src/libstd/panic.rs:396\r\n  23:        0x1062216de - std::rt::lang_start_internal::haa52aabac43378ff\r\n                               at src/libstd/rt.rs:47\r\n  24:        0x106211c72 - std::rt::lang_start::h34001aec5ec8c720\r\n                               at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libstd/rt.rs:61\r\n  25:        0x106214ac2 - vector_bug::main::h3df611f13f1e9a88\r\n```\r\n\r\nThe underlying system call of writev() has limit on the number of iovec items that can be passed specifically the [man page for writev()](https://linux.die.net/man/2/writev) has\r\n\r\n> POSIX.1-2001 allows an implementation to place a limit on the number of items that can be passed in iov. An implementation can advertise its limit by defining IOV_MAX in <limits.h> or at run time via the return value from sysconf(_SC_IOV_MAX). On Linux, the limit advertised by these mechanisms is 1024, which is the true kernel limit. However, the glibc wrapper functions do some extra work if they detect that the underlying kernel system call failed because this limit was exceeded. In the case of readv() the wrapper function allocates a temporary buffer large enough for all of the items specified by iov, passes that buffer in a call to read(2), copies data from the buffer to the locations specified by the iov_base fields of the elements of iov, and then frees the buffer. The wrapper function for writev() performs the analogous task using a temporary buffer and a call to write(2).\r\n\r\nWhen running on Mac OS X it appears the libc implementation is not doing the extra work of determining the limit of the number of items that can be used in one call of writev().  On Mac OS X this limit is defined by `UIO_MAXIOV`.\r\n\r\nLooking at the unix implementation of write_vectored it seems that line 113 is the problem.\r\n\r\nhttps://github.com/rust-lang/rust/blob/3982d3514efbb65b3efac6bb006b3fa496d16663/src/libstd/sys/unix/fd.rs#L108-L117\r\n\r\nThe code that assumes the upper limit of the number of iovecs being passed can equal  `c_int::max_value()` is too large.  It should either be limited to `UID_MAXIOV` on Max OS X or the result of `sysconf(_SC_IOV_MAX)` on Linux.\r\n\r\nChanging this logic will help the logic work such that any number of IoSlices can be passed to `io::std::Write::write_vectored()`.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68042/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68042/timeline", "performed_via_github_app": null, "state_reason": "completed"}