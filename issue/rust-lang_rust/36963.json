{"url": "https://api.github.com/repos/rust-lang/rust/issues/36963", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/36963/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/36963/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/36963/events", "html_url": "https://github.com/rust-lang/rust/issues/36963", "id": 180942935, "node_id": "MDU6SXNzdWUxODA5NDI5MzU=", "number": 36963, "title": "Switch the default global allocator to System, remove alloc_jemalloc, use jemallocator in rustc", "user": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 223796632, "node_id": "MDU6TGFiZWwyMjM3OTY2MzI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/relnotes", "name": "relnotes", "color": "fad8c7", "default": false, "description": "Marks issues that should be documented in the release notes of the next release."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 35, "created_at": "2016-10-04T16:33:24Z", "updated_at": "2019-01-18T14:15:19Z", "closed_at": "2018-11-03T12:11:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Updated description\r\n\r\nA long time coming, this issue is that we should implement these changes simultaneously:\r\n\r\n* Remove the `alloc_jemalloc` crate\r\n* Default allocations for all crate types to `std::alloc::System`. While currently the default for cdylib/staticlib, it's not the default for staticlib/executable\r\n* Add the `jemallocator` crate to rustc, but only rustc\r\n* Long-term, deprecate and remove the `alloc_system` crate\r\n\r\nWe for the longest time have defaulted to jemalloc as the default allocator for Rust programs. This has been in place since pre-1.0 and the vision was that we'd give programs a by-default faster allocator than what's on the system. Over time, this has not fared well:\r\n\r\n* Jemalloc has been disabled on a wide variety of architectures for various reasons, the system allocator seems more reliable.\r\n* Jemalloc, for whatever reason as we ship it, is incompatible with valgrind\r\n* Jemalloc bloats the size of executables by deafult\r\n* Not all Rust programs are bottlenecked on allocations, and those which are can use `#[global_allocator]` to opt-in to a jemalloc-based global allocator (through the `jemallocator` or any other allocator crate).\r\n\r\nThe compiler, however [still receives a good deal of benefit from using jemalloc](https://perf.rust-lang.org/compare.html?start=74ff7dcb1388e60a613cd6050bcd372a3cc4998b&end=7e7928dc0340d79b404e93f0c79eb4b946c1d669&stat=wall-time) (measured in https://github.com/rust-lang/rust/pull/55202#issuecomment-431514148). If that link is broken, it's basically a blanket across-the-board 8-10% regression in compile time for many benchmarks. (apparently the [max rss also regressed on many benchmarks!](https://perf.rust-lang.org/compare.html?start=74ff7dcb1388e60a613cd6050bcd372a3cc4998b&end=7e7928dc0340d79b404e93f0c79eb4b946c1d669&stat=max-rss)). For this reason, we don't want to remove jemalloc from rustc itself.\r\n\r\nThe rest of this issue is now going to be technical details about how we can probably get rid of `alloc_jemalloc` while preserving jemalloc in rustc itself. The tier 1 platforms that use `alloc_jemalloc` which this issue will be focused on are:\r\n\r\n* x86_64-unknown-linux-gnu\r\n* i686-unknown-linux-gnu\r\n* x86_64-apple-darwin\r\n* i686-apple-darwin\r\n\r\nJemalloc is notably disabled on all Windows platforms (I believe due to our inability to ever get it building over there). Furthermore Jemalloc is enabled on some linux platforms but I think ended up basically being disabled on all but the above. This I believe narrows the targets we need to design for, as we basically need to keep the above working.\r\n\r\nNote that we also have two modes of using jemalloc. In one mode we could actually use jemalloc-specific API functions, like `alloc_jemalloc` does today. We could also use the standard API it has and the support to hook into the standard allocator on these two platforms. It's not been measured (AFAIK) at this time the tradeoff between these two strategies. Note that in any case we want to route LLVM's allocations to jemalloc, so we want to be sure to hook into the default allocator *somehow*.\r\n\r\nI believe that this default allocator hooking on Linux works by basically relying on its own symbol `malloc` overriding that in `libc`, routing all memory allocation to jemalloc. I'm personally quite fuzzy on the details for OSX, but I think it has something to do with \"zone allocators\" and not much to do with symbol names. I think this means we can build jemalloc without symbol prefixes on Linux, and with symbol prefixes on OSX, and we should be able to, using that build, override the default allocator in both situations.\r\n\r\nI would propose, first, a \"hopefully easy\" route to solve this:\r\n\r\n* Let's link the compiler to the \"system allocator\". Let's then, on the four platforms above, link to `jemalloc_sys`, pulling in all of jemalloc itself. This should, with the right build configuration, mean that we're not using jemalloc everywhere in the compiler (just as we're rerouting LLVM we're rerouting the compiler).\r\n\r\nI'm testing out the performance of this in https://github.com/rust-lang/rust/pull/55217 and will report back with results. Results are that this is [universally positive almost](https://perf.rust-lang.org/compare.html?start=22cc2ae8057d14e980b7c784e1eb2eee26b59e7d&end=10c95ccfa7a7adc12f4e608621ca29f9b98eed29)! @alexcrichton will make a PR.\r\n\r\nFailing this @alexcrichton has ideas for a more invasive solution to use jemalloc-specific API calls in rustc itself, but hopefull that won't be necessary...\r\n\r\n## Original Description\r\n\r\n@alexcrichton and I have increasingly come to think that Rust should not maintain jemalloc bindings in tree and link it by default. The primary reasons being:\r\n- Being opinionated about the default allocator is against Rust's general philosophy of getting as close to the underlying system as possible. We've removed almost all runtime baggage from Rust except jemalloc.\r\n- Due to breakage we've had to disable jemalloc support on some windows configurations, changing our default allocation characteristics there, and offering different implicit \"service levels\" on different tier 1 platforms.\r\n- Keeping jemalloc working imposes increased maintenance burden. We support a lot of platforms and jemalloc upgrades sometimes do not work across all of them.\r\n- The build system is complicated by supporting jemalloc on some platforms but not all.\r\n\r\nFor the sake of consistency and maintenance we'd prefer to just always use the system allocator, and make jemalloc an easy option to enable via the [global allocator](https://github.com/rust-lang/rust/issues/27389) and a jemalloc crate on crates.io.\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/36963/reactions", "total_count": 49, "+1": 48, "-1": 1, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/36963/timeline", "performed_via_github_app": null, "state_reason": "completed"}