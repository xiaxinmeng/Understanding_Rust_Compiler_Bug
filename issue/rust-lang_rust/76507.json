{"url": "https://api.github.com/repos/rust-lang/rust/issues/76507", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76507/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76507/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76507/events", "html_url": "https://github.com/rust-lang/rust/issues/76507", "id": 696552104, "node_id": "MDU6SXNzdWU2OTY1NTIxMDQ=", "number": 76507, "title": "#[link_section] is unsound on Harvard architectures", "user": {"login": "H2CO3", "id": 742370, "node_id": "MDQ6VXNlcjc0MjM3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/742370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/H2CO3", "html_url": "https://github.com/H2CO3", "followers_url": "https://api.github.com/users/H2CO3/followers", "following_url": "https://api.github.com/users/H2CO3/following{/other_user}", "gists_url": "https://api.github.com/users/H2CO3/gists{/gist_id}", "starred_url": "https://api.github.com/users/H2CO3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/H2CO3/subscriptions", "organizations_url": "https://api.github.com/users/H2CO3/orgs", "repos_url": "https://api.github.com/users/H2CO3/repos", "events_url": "https://api.github.com/users/H2CO3/events{/privacy}", "received_events_url": "https://api.github.com/users/H2CO3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-09-09T07:52:33Z", "updated_at": "2022-04-14T07:58:16Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nAs pointed out in [this thread on URLO](https://users.rust-lang.org/t/is-the-link-section-attribute-unsound-on-avr/), it is possible to read arbitrary memory without `unsafe` using the `link_section` attribute on architectures with separate address spaces for code and data.\r\n\r\nTo cite OP's code: \r\n```rust\r\n// Store PROG_BLOB in program space, \".text\" would also work\r\n#[link_section = \".progmem\"]\r\nstatic PROG_BLOB: [u8; 128] = [42; 128];\r\n\r\nfn main() -> ! {\r\n    let mut serial = /* initialize a serial output */;\r\n\r\n    let mut idx = 0;\r\n    loop {\r\n        // This access is illegal, because Rust will emit a normal load\r\n        // instruction, whereas the data is in the program space,\r\n        // requiring a special load instruction.\r\n        let b = PROG_BLOB[idx];\r\n\r\n        // Dumping arbitrary RAM data!\r\n        ufmt::uwrite!(&mut serial, \"{:?} \", b).void_unwrap();\r\n\r\n        idx += 1;\r\n        if idx == BIG_BLOB.len() {\r\n            break\r\n        }\r\n    }\r\n    loop {\r\n        // Just loop forever\r\n    }\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen: the code should not compile, as it reads OOB memory.\r\n\r\nInstead, this happened: The code compiles and outputs incorrect values, indicating UB.\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76507/timeline", "performed_via_github_app": null, "state_reason": null}