{"url": "https://api.github.com/repos/rust-lang/rust/issues/98030", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98030/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98030/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98030/events", "html_url": "https://github.com/rust-lang/rust/issues/98030", "id": 1268665843, "node_id": "I_kwDOAAsO6M5Lnk3z", "number": 98030, "title": "wasm32-emscripten stability issues (exception handling)", "user": {"login": "hoodmane", "id": 8739626, "node_id": "MDQ6VXNlcjg3Mzk2MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/8739626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hoodmane", "html_url": "https://github.com/hoodmane", "followers_url": "https://api.github.com/users/hoodmane/followers", "following_url": "https://api.github.com/users/hoodmane/following{/other_user}", "gists_url": "https://api.github.com/users/hoodmane/gists{/gist_id}", "starred_url": "https://api.github.com/users/hoodmane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hoodmane/subscriptions", "organizations_url": "https://api.github.com/users/hoodmane/orgs", "repos_url": "https://api.github.com/users/hoodmane/repos", "events_url": "https://api.github.com/users/hoodmane/events{/privacy}", "received_events_url": "https://api.github.com/users/hoodmane/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2022-06-12T18:35:08Z", "updated_at": "2023-04-15T11:20:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There have been repeated issues with Rust support for the wasm32-emscripten target, particularly involving exception handling (e.g., #97888 #85821), but also involving dynamic linking (e.g., #80775, #92738). Building a rust program as a wasm32-emscripten dynamic library is currently a very delicate business which I would like to see get better.\r\n\r\nIn my opinion, the main issue here is one of coordination between the Emscripten and rust teams. Ideally I think the following changes would be made:\r\n1. one of the Emscripten developers should review changes to the Rust Emscripten support to ensure that they know what is going on and consider the implementation to be correct\r\n2. Emscripten CI should build a Rust program so they can tell whether they are breaking Rust compilation. I would be happy to contribute this.\r\n\r\nEmscripten supports two different error handling ABIs: Emscripten exception handling, and wasm exception handling. Wasm exception handling is more efficient, but [it is only supported on Safari >= 15.2](https://developer.apple.com/documentation/safari-release-notes/safari-15_2-release-notes) which is of concern because ~3% of web users are on older Safari versions, particularly people with old iphones. Ideally, Rust would be able to support both ABIs. In particular, in the case where we are building a dynamically linked library for emscripten (e.g., for Python packages) the ABI used by the module has to match the ABI that the main module was built with. \r\n\r\nWe would need some configuration that allows the user to choose between abort, emscripten exceptions, and wasm exceptions. I think picking abort as the default is the most reasonable thing to do because this matches Emscripten's behavior: by default C++ exceptions are not supported, but one can opt in to Emscipten eh with `-fexceptions` or wasm eh with `-fwasm-exceptions`.\r\n\r\n[It was suggested that we need a major change proposal](https://github.com/rust-lang/rust/issues/95950#issuecomment-1105381516), which I think may be a good idea. I am willing to write one after we have a discussion and figure out what should be done. I don't understand much about the Rust consensus process nor really much about error handling so I would have to learn a bit first.\r\n\r\n@Jules-Bertholet @Amanieu @brson @nagisa @apiraino @pnkfelix @sbc100 @kripken @aheejin ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98030/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98030/timeline", "performed_via_github_app": null, "state_reason": null}