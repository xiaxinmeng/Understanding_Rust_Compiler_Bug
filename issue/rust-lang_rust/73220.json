{"url": "https://api.github.com/repos/rust-lang/rust/issues/73220", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73220/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73220/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73220/events", "html_url": "https://github.com/rust-lang/rust/issues/73220", "id": 636418225, "node_id": "MDU6SXNzdWU2MzY0MTgyMjU=", "number": 73220, "title": "Inline assembly Unable to dynamically access RISC-V CSRs", "user": {"login": "alistair23", "id": 171674, "node_id": "MDQ6VXNlcjE3MTY3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/171674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alistair23", "html_url": "https://github.com/alistair23", "followers_url": "https://api.github.com/users/alistair23/followers", "following_url": "https://api.github.com/users/alistair23/following{/other_user}", "gists_url": "https://api.github.com/users/alistair23/gists{/gist_id}", "starred_url": "https://api.github.com/users/alistair23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alistair23/subscriptions", "organizations_url": "https://api.github.com/users/alistair23/orgs", "repos_url": "https://api.github.com/users/alistair23/repos", "events_url": "https://api.github.com/users/alistair23/events{/privacy}", "received_events_url": "https://api.github.com/users/alistair23/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-10T17:17:53Z", "updated_at": "2020-06-17T13:59:28Z", "closed_at": "2020-06-10T17:48:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nWith the new [inline assembly](https://github.com/Amanieu/rfcs/blob/inline-asm/text/0000-inline-asm.md) it would be nice to be able to read/write from a [RISC-V CSR](https://github.com/riscv/riscv-elf-psabi-doc/blob/master/riscv-elf.md#dwarf-register-numbers-), where the CSR value is passed in via a function argument (or some other means).\r\n\r\nCurrently there is no way to access the CSR without hard coding the address in the assembly.\r\n\r\n#### const\r\nI tried this code:\r\n\r\n```rust\r\nlet value: usize = 0x3A0;\r\nlet r: u32;\r\nunsafe { asm!(\"csrr {rd}, {csr}\", rd = out(reg) r, csr = const value) }\r\nr\r\n```\r\nWhich results in this error:\r\n\r\n```\r\nerror: argument 2 is required to be a constant\r\n  --> libraries/riscv-csr/src/csr.rs:39:18\r\n   |\r\n39 |         unsafe { asm!(\"csrr {rd}, {csr}\", rd = out(reg) r, csr = const value) }\r\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\n#### in(reg)\r\nI have tried this code:\r\n\r\n```rust\r\nlet value: usize = 0x3A0;\r\nlet r: u32;\r\nunsafe { asm!(\"csrr {rd}, {csr}\", rd = out(reg) r, csr = in(reg) value) }\r\nr\r\n```\r\nWhich results in this error:\r\n```\r\nerror: operand must be a valid system register name or an integer in the range [0, 4095]\r\n  |\r\nnote: instantiated into assembly here\r\n --> <inline asm>:1:11\r\n  |\r\n1 |     csrr a4, s6\r\n```\r\n#### in(csr)\r\nand I have tried this code:\r\n```rust\r\nlet value: usize = 0x3A0;\r\nlet r: u32;\r\nunsafe { asm!(\"csrr {rd}, {csr}\", rd = out(reg) r, csr = in(csr) value) }\r\nr\r\n```\r\nWhich results in this error:\r\n```\r\nerror: invalid register class `csr`: unknown register class\r\n  --> libraries/riscv-csr/src/csr.rs:39:60\r\n   |\r\n39 |         unsafe { asm!(\"csrr {rd}, {csr}\", rd = out(reg) r, csr = in(csr) value) }\r\n   |                      \r\n```\r\n\r\nObviously all of the above are incorrect as defined in the RFC, so that is fine.\r\n\r\nIt would be great if there is either a `in(csr)` option or the `const` option is expanded to allow non-consts (maybe a `num` option or something).\r\n\r\nThis seems like a common usecase to have a `read_csr(csr_num: usize) -> u32` function that can read a CSR value from a number passed in.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.45.0-nightly (fe10f1a49 2020-06-02)\r\nbinary: rustc\r\ncommit-hash: fe10f1a49f5ca46e57261b95f46f519523f418fe\r\ncommit-date: 2020-06-02\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.45.0-nightly\r\nLLVM version: 10.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73220/timeline", "performed_via_github_app": null, "state_reason": "completed"}