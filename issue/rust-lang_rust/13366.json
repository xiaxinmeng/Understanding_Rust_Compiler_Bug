{"url": "https://api.github.com/repos/rust-lang/rust/issues/13366", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/13366/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/13366/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/13366/events", "html_url": "https://github.com/rust-lang/rust/issues/13366", "id": 30955258, "node_id": "MDU6SXNzdWUzMDk1NTI1OA==", "number": 13366, "title": "Array as asm input generates wrong code", "user": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-04-07T02:43:15Z", "updated_at": "2020-05-22T19:05:34Z", "closed_at": "2020-05-22T19:05:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "``` .rs\n#[feature(asm)];\n\n#[inline(never)]\nunsafe fn print_first_half(arr: [u8, ..16]) {\n    let mut out: u64;\n    asm!(\"movups $1, %xmm0\n          pextrq $$0, %xmm0, $0\"\n          : \"=r\"(out) : \"m\"(arr) : \"xmm0\");\n    println!(\"{:?}\", out);\n}\n\nfn main() {\n    let arr: [u8, ..16] = [0, ..16];\n    unsafe { print_first_half(arr); }\n}\n```\n\n```\n$ rustc -v\nrustc 0.10-pre (68a4f7d 2014-02-24 12:42:02 -0800)\nhost: x86_64-unknown-linux-gnu\n\n$ rustc -O foo.rs && ./foo\n140489369304528u64\n```\n\nThis should be `0u64`; try replacing the `movups` with `xorps %xmm0, %xmm0`.  Here's the generated code:\n\n```\n$ objdump -d foo\n\u2026\n  4069f9:       48 8b 07                mov    (%rdi),%rax\n  4069fc:       48 8b 4f 08             mov    0x8(%rdi),%rcx\n  406a00:       48 89 4c 24 48          mov    %rcx,0x48(%rsp)\n  406a05:       48 89 44 24 40          mov    %rax,0x40(%rsp)\n  406a0a:       48 8d 44 24 40          lea    0x40(%rsp),%rax\n  406a0f:       48 89 44 24 08          mov    %rax,0x8(%rsp)\n  406a14:       0f 10 44 24 08          movups 0x8(%rsp),%xmm0\n  406a19:       66 48 0f 3a 16 c0 00    pextrq $0x0,%xmm0,%rax\n\u2026\n```\n\nSo it copies the array to `0x40(%rsp)` (in two 64-bit pieces), then puts that address at `0x8(%rsp)`, and `movups` loads 16 bytes from there rather than from the array itself.\n\nIn GCC, I would do\n\n``` .c\nvoid f(char *arr) {\n    asm(\"movups %0, %%xmm0\" :: \"m\"(*arr));\n}\n```\n\nwhich `gcc -O3` turns into the optimal\n\n```\n   0:   0f 10 07                movups (%rdi),%xmm0\n```\n\nAttempting to do the same in Rust\n\n``` .rs\nasm!(\"movups $0, %xmm0\" :: \"m\"(*(arr.as_ptr())) : \"xmm0\");\n```\n\nproduces even wronger code\n\n```\n  4069f9:       8a 07                   mov    (%rdi),%al\n  4069fb:       88 04 24                mov    %al,(%rsp)\n  4069fe:       0f 10 04 24             movups (%rsp),%xmm0\n```\n\nWorkarounds:\n\n1) When the array is a static with a name, just name it within the `asm!`.  See #13365.\n\n2)\n\n``` .rs\nasm!(\"movups ($0), %xmm0\" : : \"r\"(arr.as_ptr()) : \"xmm0\");\n```\n\nwhich generates optimal code in this case, because the array is already pointed to by `%rdi`, but in general may clobber a register and emit a load when neither is necessary.\n", "closed_by": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/13366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/13366/timeline", "performed_via_github_app": null, "state_reason": "completed"}