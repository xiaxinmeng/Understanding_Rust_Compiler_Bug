{"url": "https://api.github.com/repos/rust-lang/rust/issues/63804", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63804/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63804/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63804/events", "html_url": "https://github.com/rust-lang/rust/issues/63804", "id": 483881762, "node_id": "MDU6SXNzdWU0ODM4ODE3NjI=", "number": 63804, "title": "use of proc_macro[2]::TokenStream in a vector in TLS causes rustc panic", "user": {"login": "hawkinsw", "id": 8715530, "node_id": "MDQ6VXNlcjg3MTU1MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/8715530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsw", "html_url": "https://github.com/hawkinsw", "followers_url": "https://api.github.com/users/hawkinsw/followers", "following_url": "https://api.github.com/users/hawkinsw/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsw/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsw/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsw/orgs", "repos_url": "https://api.github.com/users/hawkinsw/repos", "events_url": "https://api.github.com/users/hawkinsw/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 2079070889, "node_id": "MDU6TGFiZWwyMDc5MDcwODg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-proc-macros", "name": "A-proc-macros", "color": "f7e101", "default": false, "description": "Area: Procedural macros"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2019-08-22T09:40:04Z", "updated_at": "2020-05-21T21:38:35Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I am relatively new to rust, but I am a huge, huge fan. I hate to report an issue and hope that it's something worthwhile. \r\n\r\nI am attempting to use `proc_macro[2]::TokenStream` in the implementation of a proc macro. I share a vector of `TokenStream`s across multiple invocations of those proc macros using storage allocated with `thread_local!`. That sounds complicated, but I promise it's not:\r\n\r\n```\r\nextern crate proc_macro;\r\nextern crate proc_macro2;\r\n\r\nuse proc_macro::TokenStream;\r\nuse quote::quote;\r\nuse std::cell::RefCell;\r\n\r\nthread_local!(static ARMS: RefCell<Vec<proc_macro2::TokenStream>> = RefCell::new(Vec::<proc_macro2::TokenStream>::new()));\r\n\r\n#[proc_macro_attribute]\r\npub fn arm(\r\n    _ : TokenStream,\r\n    item: TokenStream,\r\n) -> TokenStream {\r\n    let ts = proc_macro2::TokenStream::new();\r\n    ARMS.with(|arms| {\r\n        arms.borrow_mut().push(ts);\r\n    });\r\n    item\r\n}\r\n\r\n#[proc_macro]\r\npub fn make_arms(_: proc_macro::TokenStream) -> proc_macro::TokenStream {\r\n  proc_macro::TokenStream::from(quote!{ pub fn arms(&self) { self.arm1(); } })\r\n}\r\n```\r\n\r\nHere's how I could use these proc macros:\r\n\r\n```\r\nextern crate rust_macro_error;\r\n\r\nuse rust_macro_error::arm;\r\nuse rust_macro_error::make_arms;\r\n\r\nstruct T {\r\n    _i: usize,\r\n}\r\n\r\nimpl T {\r\n    pub fn new() -> Self {\r\n        T { _i: 2 }\r\n    }\r\n    #[arm]\r\n    pub fn arm1(&self) {\r\n    }\r\n    make_arms!();\r\n}\r\n\r\nfn main() {\r\n    T::new().arms();\r\n}\r\n```\r\n\r\nHere is my Cargo.toml\r\n\r\n```\r\n[package]\r\nname = \"rust_macro_error\"\r\nversion = \"0.1.0\"\r\nauthors = [\"Will Hawkins <whh8b@obs.cr>\"]\r\nedition = \"2018\"\r\n\r\n[lib]\r\nproc-macro = true\r\n\r\n[[bin]]\r\nname = \"rust_macro_error\"\r\npath = \"src/main.rs\"\r\n\r\n[dependencies]\r\nquote=\"1.0.0\"\r\nproc-macro2=\"1.0.1\"\r\n\r\n[dependencies.syn]\r\nversion=\"1.0\"\r\nfeatures = [\"full\"]\r\n```\r\n\r\nIf it's easier, you can grab these files from this git repository: http://git.obs.cr/hawkinsw/rust_macro_error\r\n\r\nWhen I run `cargo build`, I get a `rustc` failure. I have attempted to compile this with stable, nightly and \"head\" (stage2 compiler of HEAD). I get the same error no matter which compiler: \r\n\r\n`fatal runtime error: failed to initiate panic, error 5`\r\n\r\nI can run the compiler under `gdb` but see nothing worthwhile:\r\n\r\n```\r\n#0  0x00007ffff32999f3 in futex_wait_cancelable (private=<optimized out>, \r\n    expected=0, futex_word=0x7fffec4f54a8)\r\n    at ../sysdeps/unix/sysv/linux/futex-internal.h:88\r\n#1  __pthread_cond_wait_common (abstime=0x0, mutex=0x7fffec4f5450, \r\n    cond=0x7fffec4f5480) at pthread_cond_wait.c:502\r\n#2  __pthread_cond_wait (cond=0x7fffec4f5480, mutex=0x7fffec4f5450)\r\n    at pthread_cond_wait.c:655\r\n#3  0x00007ffff3db4e62 in std::sys::unix::condvar::Condvar::wait (\r\n    mutex=<optimized out>, self=<optimized out>)\r\n    at src/libstd/sys/unix/condvar.rs:71\r\n#4  std::sys_common::condvar::Condvar::wait (mutex=<optimized out>, \r\n    self=<optimized out>) at src/libstd/sys_common/condvar.rs:41\r\n#5  std::sync::condvar::Condvar::wait (self=<optimized out>, guard=...)\r\n    at src/libstd/sync/condvar.rs:204\r\n#6  0x00007ffff3d917db in std::thread::park () at src/libstd/thread/mod.rs:911\r\n#7  0x00007ffff3d746e2 in std::sync::mpsc::blocking::WaitToken::wait (self=...)\r\n    at src/libstd/sync/mpsc/blocking.rs:71\r\n#8  0x00007ffff702275d in std::sync::mpsc::stream::Packet<T>::recv (\r\n    self=0x7fffd8001080, deadline=...)\r\n    at /home/hawkinsw/code/rust/rust/src/libstd/sync/mpsc/stream.rs:194\r\n#9  0x00007ffff70267ac in std::sync::mpsc::Receiver<T>::recv (\r\n    self=0x7ffff04f88f0)\r\n    at /home/hawkinsw/code/rust/rust/src/libstd/sync/mpsc/mod.rs:1197\r\n#10 0x00007ffff7027055 in <std::sync::mpsc::IntoIter<T> as core::iter::traits::iterator::Iterator>::next (self=0x7ffff04f88f0)\r\n    at /home/hawkinsw/code/rust/rust/src/libstd/sync/mpsc/mod.rs:1533\r\n#11 jobserver::imp::spawn_helper::{{closure}} ()\r\n    at /home/hawkinsw/.cargo/registry/src/github.com-1ecc6299db9ec823/jobserver-0.1.16/src/lib.rs:635\r\n#12 std::sys_common::backtrace::__rust_begin_short_backtrace (f=...)\r\n    at /home/hawkinsw/code/rust/rust/src/libstd/sys_common/backtrace.rs:77\r\n#13 0x00007ffff702a983 in std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} () at /home/hawkinsw/code/rust/rust/src/libstd/thread/mod.rs:470\r\n#14 <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once (self=..., _args=<optimized out>)\r\n    at /home/hawkinsw/code/rust/rust/src/libstd/panic.rs:315\r\n#15 std::panicking::try::do_call (data=<optimized out>)\r\n    at /home/hawkinsw/code/rust/rust/src/libstd/panicking.rs:296\r\n#16 0x00007ffff3db6a14 in __rust_maybe_catch_panic (f=0x0, \r\n    data=0x7fffec4f54a8 \"\\002\", data_ptr=0x7ffff04f8a00, \r\n    vtable_ptr=0x7ffff04f8a08) at src/libpanic_unwind/lib.rs:80\r\n#17 0x00007ffff702ab84 in std::panicking::try (f=...)\r\n    at /home/hawkinsw/code/rust/rust/src/libstd/panicking.rs:275\r\n#18 std::panic::catch_unwind (f=...)\r\n    at /home/hawkinsw/code/rust/rust/src/libstd/panic.rs:394\r\n#19 std::thread::Builder::spawn_unchecked::{{closure}} ()\r\n    at /home/hawkinsw/code/rust/rust/src/libstd/thread/mod.rs:469\r\n#20 core::ops::function::FnOnce::call_once{{vtable-shim}} ()\r\n    at /home/hawkinsw/code/rust/rust/src/libcore/ops/function.rs:235\r\n#21 0x00007ffff3d75a6f in <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once (self=..., args=<optimized out>)\r\n    at /home/hawkinsw/code/rust/rust/src/liballoc/boxed.rs:922\r\n#22 0x00007ffff3d7e7d0 in <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once (self=0x7fffec4f55b0, args=<optimized out>)\r\n    at /home/hawkinsw/code/rust/rust/src/liballoc/boxed.rs:922\r\n#23 std::sys_common::thread::start_thread (main=<optimized out>)\r\n    at src/libstd/sys_common/thread.rs:13\r\n#24 std::sys::unix::thread::Thread::new::thread_start (main=0x7fffec4f55b0)\r\n    at src/libstd/sys/unix/thread.rs:79\r\n#25 0x00007ffff32936db in start_thread (arg=0x7ffff04fa700)\r\n    at pthread_create.c:463\r\n#26 0x00007ffff3a4b88f in clone ()\r\n    at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\r\n\r\nThere are a few interesting things that I have noticed while attempting to debug this:\r\n1. If I use another type, say `String`, in the TLS vector, everything works fine.\r\n2. If I don't push any values to the vector, everything works a-ok.\r\n3. I can *sometimes* get the error message:\r\n`use-after-free in 'proc_macro' handle`\r\nand can narrow that down to line 315 in libproc_macro/bridge/client.rs. I understand that to mean that the \"server\" for the proc_macro implementation is not alive, for some reason. I have seen https://github.com/rust-lang/rust/issues/60593 and *think* that they are related but cannot seem to find the common thread. \r\n\r\nI have debugged as much as I can and I am reaching out for your help! I would love to help solve the problem if you can point me in the right direction. \r\n\r\nAgain, thank you for all the work that you are doing for rust and the community around the language. ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63804/timeline", "performed_via_github_app": null, "state_reason": null}