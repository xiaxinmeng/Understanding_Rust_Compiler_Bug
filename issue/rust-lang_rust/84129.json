{"url": "https://api.github.com/repos/rust-lang/rust/issues/84129", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84129/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84129/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84129/events", "html_url": "https://github.com/rust-lang/rust/issues/84129", "id": 856094193, "node_id": "MDU6SXNzdWU4NTYwOTQxOTM=", "number": 84129, "title": "Implementation of traits are sometimes frogotten if it is not explicitly stated in bounds.", "user": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-04-12T15:28:37Z", "updated_at": "2021-05-02T12:20:59Z", "closed_at": "2021-05-02T12:20:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse nalgebra::{base::allocator::Allocator, DefaultAllocator, DimName, Matrix3, VectorN, U1, U3};\r\n\r\npub fn this_work() {\r\n    let _m = Matrix3::<f64>::zeros();\r\n}\r\n\r\npub fn this_does_not_work<D: DimName>()\r\nwhere\r\n    DefaultAllocator: Allocator<usize, D>,\r\n{\r\n    let _v = VectorN::<usize, D>::zeros(); // ok\r\n    let _m = Matrix3::<f64>::zeros(); // Error\r\n}\r\n\r\npub fn but_this_work<D: DimName>()\r\nwhere\r\n    DefaultAllocator: Allocator<usize, D> + Allocator<f64, U3, U3>,\r\n{\r\n    let _v = VectorN::<usize, D>::zeros(); // ok\r\n    let _m = Matrix3::<f64>::zeros(); // ok\r\n}\r\n\r\n```\r\n[playground](https://play.rust-lang.org/?version=beta&mode=debug&edition=2018&gist=3129184e46067f8d94a18d7f45a43de7)\r\n\r\nI expected to see this happen: compile without issue as it should be possible to create a 3 x 3 nalgebra matrix \r\n\r\nInstead, this happened: \r\n```\r\nerror[E0599]: no function or associated item named `zeros` found for struct `Matrix<f64, U3, U3, ArrayStorage<f64, U3, U3>>` in the current scope\r\n  --> src/main.rs:13:30\r\n   |\r\n13 |     let _m = Matrix3::<f64>::zeros(); // Error\r\n   |                              ^^^^^ function or associated item not found in `Matrix<f64, U3, U3, ArrayStorage<f64, U3, U3>>`\r\n```\r\n\r\nI have yet to find a minimum example that is not using nalgebra. I tried doing the same structure as nalgebra but I can't repoduce the issue \r\n<details><summary>Code</summary>\r\n<p>\r\n\r\n```rust\r\n#![allow(dead_code)]\r\n\r\nuse std::marker::PhantomData;\r\n\r\npub struct DefaultAllocator;\r\n\r\ntrait Dim: Clone {}\r\ntrait DimName: Dim {}\r\n\r\n#[derive(Clone)]\r\nstruct U3;\r\n\r\n#[derive(Clone)]\r\nstruct U1;\r\n\r\n#[derive(Clone)]\r\nstruct Dynamic;\r\n\r\nimpl Dim for Dynamic {}\r\n\r\nimpl Dim for U1 {}\r\nimpl Dim for U3 {}\r\n\r\nimpl DimName for U1 {}\r\nimpl DimName for U3 {}\r\n\r\nuse std::any::Any;\r\n\r\ntrait ContiguousStorageMut<T: Scalar, D: Dim, D2: Dim> {}\r\n\r\n#[derive(Clone)]\r\nstruct ArrayStorage<T: Scalar, D: Dim, D2: Dim> {\r\n    _phantom_data: PhantomData<(T, D, D2)>,\r\n}\r\n\r\nimpl<T: Scalar, D: Dim, D2: Dim> ArrayStorage<T, D, D2> {\r\n    fn new() -> Self {\r\n        Self {\r\n            _phantom_data: PhantomData,\r\n        }\r\n    }\r\n}\r\n\r\nimpl<T: Scalar, D: DimName, D2: DimName> ContiguousStorageMut<T, D, D2> for ArrayStorage<T, D, D2> {}\r\n\r\nimpl<T: Scalar, D: DimName> ContiguousStorageMut<T, D, Dynamic> for ArrayStorage<T, D, Dynamic> {}\r\n\r\nimpl<T: Scalar, D: DimName> ContiguousStorageMut<T, Dynamic, D> for ArrayStorage<T, Dynamic, D> {}\r\n\r\ntrait Scalar: Clone {}\r\n\r\ntrait Zero: Sized {\r\n    fn zero() -> Self;\r\n}\r\n\r\nimpl Zero for f64 {\r\n    fn zero() -> f64 {\r\n        0_f64\r\n    }\r\n}\r\n\r\nimpl Zero for i32 {\r\n    fn zero() -> i32 {\r\n        0_i32\r\n    }\r\n}\r\n\r\nimpl Scalar for f64 {}\r\n\r\nimpl Scalar for i32 {}\r\n\r\ntrait Allocator<T1: Scalar, T2: Dim, T3: Dim = U1>: Any + Sized {\r\n    type Buffer: ContiguousStorageMut<T1, T2, T3> + Clone;\r\n\r\n    unsafe fn allocate_uninitialized(nrows: T2, ncols: T3) -> Self::Buffer;\r\n\r\n    fn allocate_from_iterator<I: IntoIterator<Item = T1>>(\r\n        nrows: T2,\r\n        ncols: T3,\r\n        iter: I,\r\n    ) -> Self::Buffer;\r\n}\r\n\r\ntrait Reallocator<T: Scalar, RFrom: Dim, CFrom: Dim, RTo: Dim, CTo: Dim>:\r\n    Allocator<T, RFrom, CFrom> + Allocator<T, RTo, CTo>\r\n{\r\n    unsafe fn reallocate_copy(\r\n        nrows: RTo,\r\n        ncols: CTo,\r\n        buf: <Self as Allocator<T, RFrom, CFrom>>::Buffer,\r\n    ) -> <Self as Allocator<T, RTo, CTo>>::Buffer;\r\n}\r\n\r\nimpl<N: Scalar, RFrom: DimName, CFrom: DimName, RTo: DimName, CTo: DimName>\r\n    Reallocator<N, RFrom, CFrom, RTo, CTo> for DefaultAllocator\r\n{\r\n    unsafe fn reallocate_copy(\r\n        _nrows: RTo,\r\n        _ncols: CTo,\r\n        _buf: <Self as Allocator<N, RFrom, CFrom>>::Buffer,\r\n    ) -> <Self as Allocator<N, RTo, CTo>>::Buffer {\r\n        <Self as Allocator<N, RTo, CTo>>::Buffer::new()\r\n    }\r\n}\r\n\r\nimpl<D1: DimName, D2: DimName, T: Scalar> Allocator<T, D1, D2> for DefaultAllocator {\r\n    type Buffer = ArrayStorage<T, D1, D2>;\r\n\r\n    unsafe fn allocate_uninitialized(_nrows: D1, _ncols: D2) -> Self::Buffer {\r\n        Self::Buffer::new()\r\n    }\r\n\r\n    fn allocate_from_iterator<I: IntoIterator<Item = T>>(\r\n        _nrows: D1,\r\n        _ncols: D2,\r\n        _iter: I,\r\n    ) -> Self::Buffer {\r\n        Self::Buffer::new()\r\n    }\r\n}\r\n\r\nimpl<D1: DimName, T: Scalar> Allocator<T, Dynamic, D1> for DefaultAllocator {\r\n    type Buffer = ArrayStorage<T, Dynamic, D1>;\r\n\r\n    unsafe fn allocate_uninitialized(_nrows: Dynamic, _ncols: D1) -> Self::Buffer {\r\n        Self::Buffer::new()\r\n    }\r\n\r\n    fn allocate_from_iterator<I: IntoIterator<Item = T>>(\r\n        _nrows: Dynamic,\r\n        _ncols: D1,\r\n        _iter: I,\r\n    ) -> Self::Buffer {\r\n        Self::Buffer::new()\r\n    }\r\n}\r\n\r\nimpl<D1: DimName, T: Scalar> Allocator<T, D1, Dynamic> for DefaultAllocator {\r\n    type Buffer = ArrayStorage<T, D1, Dynamic>;\r\n\r\n    unsafe fn allocate_uninitialized(_nrows: D1, _ncols: Dynamic) -> Self::Buffer {\r\n        Self::Buffer::new()\r\n    }\r\n\r\n    fn allocate_from_iterator<I: IntoIterator<Item = T>>(\r\n        _nrows: D1,\r\n        _ncols: Dynamic,\r\n        _iter: I,\r\n    ) -> Self::Buffer {\r\n        Self::Buffer::new()\r\n    }\r\n}\r\n\r\nstruct Matrix<T: Scalar, D1: Dim, D2: Dim, S: ContiguousStorageMut<T, D1, D2>> {\r\n    a: T,\r\n    _phantom_data: PhantomData<(D1, D2, S)>,\r\n}\r\n\r\nimpl<T: Scalar, D1: DimName, S: ContiguousStorageMut<T, D1, D1>> Matrix<T, D1, D1, S>\r\nwhere\r\n    DefaultAllocator: Allocator<T, D1, D1>,\r\n    T: Zero,\r\n{\r\n    fn zeros() -> Self {\r\n        Self {\r\n            a: T::zero(),\r\n            _phantom_data: PhantomData,\r\n        }\r\n    }\r\n}\r\n\r\nfn zeros<T, D1: DimName, D2: DimName>()\r\nwhere\r\n    DefaultAllocator: Allocator<T, D1, D2>,\r\n    T: Zero + Scalar,\r\n{\r\n}\r\n\r\ntype VectorN<T, D> = Matrix<T, D, U1, ()>;\r\ntype Matrix3<T> = Matrix<T, U3, U3, ArrayStorage<f64, U3, U3>>;\r\n\r\nfn this_does_not_work<T: DimName>()\r\nwhere\r\n    DefaultAllocator: Allocator<i32, T>,\r\n{\r\n    Matrix3::<f64>::zeros();\r\n    zeros::<f64, U3, U3>();\r\n}\r\n\r\nfn main(){\r\n    \r\n}\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=212e1eb6eab411a84ea6b7b26a907eec)\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.53.0-nightly (07e0e2ec2 2021-03-24)\r\nbinary: rustc\r\ncommit-hash: 07e0e2ec268c140e607e1ac7f49f145612d0f597\r\ncommit-date: 2021-03-24\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.53.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\nIt is also present on stable.\r\n\r\n\r\n\r\n<!-- TRIAGEBOT_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"ABouttefeux\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_END -->\r\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84129/timeline", "performed_via_github_app": null, "state_reason": "completed"}