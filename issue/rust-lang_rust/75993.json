{"url": "https://api.github.com/repos/rust-lang/rust/issues/75993", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75993/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75993/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75993/events", "html_url": "https://github.com/rust-lang/rust/issues/75993", "id": 687445978, "node_id": "MDU6SXNzdWU2ODc0NDU5Nzg=", "number": 75993, "title": "MIR building: Place should be moved if not used later", "user": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-08-27T18:19:40Z", "updated_at": "2021-03-14T00:47:00Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following MIR can be improved by converting a copy to a move: https://godbolt.org/z/jnKK4f .\r\n**Observed**\r\n```rust\r\nfn opt_char(_1: char) -> u32 {\r\n    debug x => _1;                       // in scope 0 at ./example.rs:1:17: 1:18\r\n    let mut _0: u32;                     // return place in scope 0 at ./example.rs:1:29: 1:32\r\n    let mut _2: bool;                    // in scope 0 at ./example.rs:2:8: 2:28\r\n    let mut _3: char;                    // in scope 0 at ./example.rs:2:8: 2:9\r\n    let mut _4: bool;                    // in scope 0 at ./example.rs:2:20: 2:28\r\n    let mut _5: char;                    // in scope 0 at ./example.rs:2:20: 2:21\r\n\r\n    bb0: {\r\n        StorageLive(_2);                 // scope 0 at ./example.rs:2:8: 2:28\r\n        StorageLive(_3);                 // scope 0 at ./example.rs:2:8: 2:9\r\n        _3 = _1;                         // scope 0 at ./example.rs:2:8: 2:9\r\n        switchInt(move _3) -> ['b': bb1, otherwise: bb2]; // scope 0 at ./example.rs:2:8: 2:28\r\n    }\r\n\r\n    bb1: {\r\n        StorageDead(_3);                 // scope 0 at ./example.rs:2:8: 2:28\r\n        _2 = const true;                 // scope 0 at ./example.rs:2:8: 2:28\r\n        goto -> bb3;                     // scope 0 at ./example.rs:2:8: 2:28\r\n    }\r\n\r\n    bb2: {\r\n        StorageDead(_3);                 // scope 0 at ./example.rs:2:8: 2:28\r\n        StorageLive(_4);                 // scope 0 at ./example.rs:2:20: 2:28\r\n        StorageLive(_5);                 // scope 0 at ./example.rs:2:20: 2:21\r\n        _5 = _1;                         // scope 0 at ./example.rs:2:20: 2:21\r\n        _4 = Eq(move _5, const 'a');     // scope 0 at ./example.rs:2:20: 2:28\r\n        StorageDead(_5);                 // scope 0 at ./example.rs:2:27: 2:28\r\n        _2 = Ne(_4, const false);        // scope 0 at ./example.rs:2:8: 2:28\r\n        goto -> bb3;                     // scope 0 at ./example.rs:2:8: 2:28\r\n    }\r\n\r\n    bb3: {\r\n        StorageDead(_4);                 // scope 0 at ./example.rs:2:27: 2:28\r\n        switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 0 at ./example.rs:2:5: 2:45\r\n    }\r\n\r\n    bb4: {\r\n        _0 = const 1_u32;                // scope 0 at ./example.rs:2:42: 2:43\r\n        goto -> bb6;                     // scope 0 at ./example.rs:2:5: 2:45\r\n    }\r\n\r\n    bb5: {\r\n        _0 = const 0_u32;                // scope 0 at ./example.rs:2:31: 2:32\r\n        goto -> bb6;                     // scope 0 at ./example.rs:2:5: 2:45\r\n    }\r\n\r\n    bb6: {\r\n        StorageDead(_2);                 // scope 0 at ./example.rs:3:1: 3:2\r\n        return;                          // scope 0 at ./example.rs:3:2: 3:2\r\n    }\r\n}\r\n```\r\n**Expected:** _2 is moved into the switchInt as it has no uses later. _4 could similarly be moved into the Ne comparison\r\n```rust\r\nfn opt_char(_1: char) -> u32 {\r\n    debug x => _1;                       // in scope 0 at ./example.rs:1:17: 1:18\r\n    let mut _0: u32;                     // return place in scope 0 at ./example.rs:1:29: 1:32\r\n    let mut _2: bool;                    // in scope 0 at ./example.rs:2:8: 2:28\r\n    let mut _3: char;                    // in scope 0 at ./example.rs:2:8: 2:9\r\n    let mut _4: bool;                    // in scope 0 at ./example.rs:2:20: 2:28\r\n    let mut _5: char;                    // in scope 0 at ./example.rs:2:20: 2:21\r\n\r\n    bb0: {\r\n        StorageLive(_2);                 // scope 0 at ./example.rs:2:8: 2:28\r\n        StorageLive(_3);                 // scope 0 at ./example.rs:2:8: 2:9\r\n        _3 = _1;                         // scope 0 at ./example.rs:2:8: 2:9\r\n        switchInt(move _3) -> ['b': bb1, otherwise: bb2]; // scope 0 at ./example.rs:2:8: 2:28\r\n    }\r\n\r\n    bb1: {\r\n        StorageDead(_3);                 // scope 0 at ./example.rs:2:8: 2:28\r\n        _2 = const true;                 // scope 0 at ./example.rs:2:8: 2:28\r\n        goto -> bb3;                     // scope 0 at ./example.rs:2:8: 2:28\r\n    }\r\n\r\n    bb2: {\r\n        StorageDead(_3);                 // scope 0 at ./example.rs:2:8: 2:28\r\n        StorageLive(_4);                 // scope 0 at ./example.rs:2:20: 2:28\r\n        StorageLive(_5);                 // scope 0 at ./example.rs:2:20: 2:21\r\n        _5 = _1;                         // scope 0 at ./example.rs:2:20: 2:21\r\n        _4 = Eq(move _5, const 'a');     // scope 0 at ./example.rs:2:20: 2:28\r\n        StorageDead(_5);                 // scope 0 at ./example.rs:2:27: 2:28\r\n        _2 = Ne(move _4, const false);        // scope 0 at ./example.rs:2:8: 2:28\r\n        goto -> bb3;                     // scope 0 at ./example.rs:2:8: 2:28\r\n    }\r\n\r\n    bb3: {\r\n        StorageDead(_4);                 // scope 0 at ./example.rs:2:27: 2:28\r\n        switchInt(move _2) -> [false: bb4, otherwise: bb5]; // scope 0 at ./example.rs:2:5: 2:45\r\n    }\r\n\r\n    bb4: {\r\n        _0 = const 1_u32;                // scope 0 at ./example.rs:2:42: 2:43\r\n        goto -> bb6;                     // scope 0 at ./example.rs:2:5: 2:45\r\n    }\r\n\r\n    bb5: {\r\n        _0 = const 0_u32;                // scope 0 at ./example.rs:2:31: 2:32\r\n        goto -> bb6;                     // scope 0 at ./example.rs:2:5: 2:45\r\n    }\r\n\r\n    bb6: {\r\n        StorageDead(_2);                 // scope 0 at ./example.rs:3:1: 3:2\r\n        return;                          // scope 0 at ./example.rs:3:2: 3:2\r\n    }\r\n}\r\n```\r\n<details>\r\n  <summary>Original issue - no longer relevant</summary>\r\n  \r\n\r\n\r\nIn the following snippet https://godbolt.org/z/6f3xs3 , I would have expected `_2` to be `move`d into the switchInt since it is not used afterwards.\r\n\r\nThis was noticed in https://github.com/rust-lang/rust/pull/75370#discussion_r477231470 where the proposed MIR-optimization currently fails to remove a comparison..\r\n\r\n**Observed:**\r\n```rust\r\nfn f(_1: i8) -> i8 {\r\n    debug x => _1;                       // in scope 0 at ./example.rs:1:6: 1:7\r\n    let mut _0: i8;                      // return place in scope 0 at ./example.rs:1:16: 1:18\r\n    let mut _2: bool;                    // in scope 0 at ./example.rs:2:8: 2:15\r\n\r\n    bb0: {\r\n        StorageLive(_2);                 // scope 0 at ./example.rs:2:8: 2:15\r\n        _2 = Eq(move _1, const 42_i8);   // scope 0 at ./example.rs:2:8: 2:15\r\n        switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at ./example.rs:2:5: 2:32\r\n    }\r\n\r\n    bb1: {\r\n        _0 = const 1_i8;                 // scope 0 at ./example.rs:2:29: 2:30\r\n        goto -> bb3;                     // scope 0 at ./example.rs:2:5: 2:32\r\n    }\r\n\r\n    bb2: {\r\n        _0 = const 0_i8;                 // scope 0 at ./example.rs:2:18: 2:19\r\n        goto -> bb3;                     // scope 0 at ./example.rs:2:5: 2:32\r\n    }\r\n\r\n    bb3: {\r\n        StorageDead(_2);                 // scope 0 at ./example.rs:3:1: 3:2\r\n        return;                          // scope 0 at ./example.rs:3:2: 3:2\r\n    }\r\n}\r\n```\r\n**Expected:**\r\n```rust\r\nfn f(_1: i8) -> i8 {\r\n    debug x => _1;                       // in scope 0 at ./example.rs:1:6: 1:7\r\n    let mut _0: i8;                      // return place in scope 0 at ./example.rs:1:16: 1:18\r\n    let mut _2: bool;                    // in scope 0 at ./example.rs:2:8: 2:15\r\n\r\n    bb0: {\r\n        StorageLive(_2);                 // scope 0 at ./example.rs:2:8: 2:15\r\n        _2 = Eq(move _1, const 42_i8);   // scope 0 at ./example.rs:2:8: 2:15\r\n        switchInt(move _2) -> [false: bb1, otherwise: bb2]; // scope 0 at ./example.rs:2:5: 2:32\r\n    }\r\n\r\n    bb1: {\r\n        _0 = const 1_i8;                 // scope 0 at ./example.rs:2:29: 2:30\r\n        goto -> bb3;                     // scope 0 at ./example.rs:2:5: 2:32\r\n    }\r\n\r\n    bb2: {\r\n        _0 = const 0_i8;                 // scope 0 at ./example.rs:2:18: 2:19\r\n        goto -> bb3;                     // scope 0 at ./example.rs:2:5: 2:32\r\n    }\r\n\r\n    bb3: {\r\n        StorageDead(_2);                 // scope 0 at ./example.rs:3:1: 3:2\r\n        return;                          // scope 0 at ./example.rs:3:2: 3:2\r\n    }\r\n}\r\n```\r\n</details>\r\n\r\n\r\n<!-- TRIAGEBOT_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"jumbatm\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_END -->\r\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75993/timeline", "performed_via_github_app": null, "state_reason": null}