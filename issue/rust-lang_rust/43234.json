{"url": "https://api.github.com/repos/rust-lang/rust/issues/43234", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43234/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43234/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43234/events", "html_url": "https://github.com/rust-lang/rust/issues/43234", "id": 242969466, "node_id": "MDU6SXNzdWUyNDI5Njk0NjY=", "number": 43234, "title": "non-lexical lifetimes (NLL) tracking issue", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 37977651, "node_id": "MDU6TGFiZWwzNzk3NzY1MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/metabug", "name": "metabug", "color": "5319e7", "default": false, "description": "Issues about issues themselves (\"bugs about bugs\")"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}, {"id": 3537211959, "node_id": "LA_kwDOAAsO6M7S1ZI3", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-impl-incomplete", "name": "S-tracking-impl-incomplete", "color": "4682b4", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 74, "created_at": "2017-07-14T11:19:52Z", "updated_at": "2022-06-07T07:45:04Z", "closed_at": "2022-06-07T07:45:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This issue tracks the status of the transition to non-lexical lifetimes and a MIR-based borrow-checker. Both of these are jargon-y terms for compiler authors: the effect of these features on end-users is, simply put, that the compiler accepts a wider range of code with fewer bugs (and, hopefully, better error messages). We will refer to the combination of the above as NLL.\r\n\r\n# Current status\r\n\r\nMost of NLL is already enabled in current versions of Rust. However, 'migration mode' is still enabled (https://github.com/rust-lang/rust/issues/58781). This causes us to reject some code that we would eventually like to accept, and to use different code paths for emitting some diagnostics. The progress towards disabling 'migration mode' is tracked in https://github.com/rust-lang/rust/issues/58781\r\n\r\n## Key facts for getting involved\r\n\r\n- Weekly triage meeting **Wednesdays at 3:30pm Boston time** ([see in your timezone](http://www.thetimezoneconverter.com/?t=15:30&tz=Boston&))\r\n  - Join the chat on [Zulip](https://rust-lang.zulipchat.com/)\r\n  - Notes in [this dropbox paper document](https://paper.dropbox.com/doc/Non-lexical-lifetimes-NLL-Triage-Em2cJrvxQMMFWLE7lE5Be)\r\n  - If you are unable to attend, minutes and further discussion takes place on [this internals thread](https://internals.rust-lang.org/t/lets-push-non-lexical-lifetimes-nll-over-the-finish-line/7115). \r\n  - Ask @nikomatsakis (on Zulip, ideally) to be added to the calendar invite.\r\n- You can also find a [YouTube playlist of pair programming videos][yt]; these are sessions where we are working through how to solve a particular problem, often explaining big parts of the system on the way.\r\n\r\n[yt]: https://www.youtube.com/playlist?list=PLCQVvhKUrTN9VfaQx2AyOSAstwENaGkYA\r\n\r\n## Implementation plan\r\n\r\n- [x] **Initial prototype:** features available on nightly builds with `#![feature(nll)]` for experimentation.\r\n- [ ] **Valid code works:** (issues labeled with [NLL-complete])\r\n  - [x] all run-pass tests pass\r\n  - [x] bootstrap builds with nll enabled: see #51823.\r\n     - summary: We have bootstrapped at least once. We need to integrate such bootstrapping into the CI to ensure it stops breaking. \r\n  - [x] crater run with nll enabled passes without regressions\r\n    -  see #52217 for the set of ICEs from recent crater run.\r\n- [ ] **Invalid code gets errors:** (issues labeled with [NLL-sound])\r\n    - [ ] compile-fail/ui tests generate errors in the right places (possibly with bad diagnostics)\r\n      - see #52663 as evidence that we generate errors in all cases where expected for the `ui` test suite. (Current plan for `compile-fail` suite is to port majority of those tests to `ui`)\r\n- [ ] **Performance is good** (issues labeled with [NLL-performant])\r\n    - see [this dropbox paper](https://paper.dropbox.com/doc/NLL-Performance-Tracking-Doc-dRlUMiWT8eexf80FTrYj8) which tracks profiling information\r\n    - see also the [NLL perf dashboard](https://perf.rust-lang.org/nll-dashboard.html) which compares running `cargo check` without and with NLL turned on, so that we can see a summary of the current performance impact on the compiler's static analyses in isolation.\r\n- [x] **Future compatibility warnings on stable:** Once crater runs are clean, we can enable the future-compatibility warnings on stable: see #46908 and #52681\r\n  - [x] currently, due to #52681, we are issuing compatibility warnings on the 2018 edition.\r\n  - [x] next step is to migrate the 2015 edition in the same manner (#57804)\r\n- [ ] **Diagnostic parity:** (issues labeled with [NLL-diagnostics]) Ensure that all diagnostics are \"as good or better\" than before.\r\n  - We will primarily validate this from our test base, but also consider errors that are reported \"from the wild\".\r\n  - [x] round one: #49862\r\n  - [x] round two: #52663\r\n  - [ ] round three: #54528; remaining work items are cards on https://github.com/rust-lang/rust/projects/10\r\n- [ ] transition from migration mode to full NLL\r\n  - [x] NLL warnings (downgraded from errors) become errors again\r\n  - [x] as an intermediate step, potentially use a deny-by-default lint before making these hard errors\r\n- [ ] **Feature stabilized:** NLL and MIR-based borrow checker enabled by default,\r\n- [x] AST-based borrow checker removed: https://github.com/rust-lang/rust/pull/64790.\r\n\r\nMany of the work items for unchecked bullets above are gathered into one place on #57895\r\n\r\n## How to join the working group\r\n\r\nIf you'd like to help, please **join the NLL working group** -- just leave a comment below or ping @nikomatsakis [on gitter](https://gitter.im/rust-impl-period/WG-compiler-nll) and you will be added to the @rust-lang/wg-compiler-nll team. You will then get occasional pings (e.g., when new mentoring instructions are available or when looking for help), as well as being eligible to be assigned to issues and so forth. We discuss things [on the WG-compiler-nll channel on Gitter](https://gitter.im/rust-impl-period/WG-compiler-nll). \r\n\r\n## How to find an issue to work on\r\n\r\nTo find important issues, use one of the following queries:\r\n\r\n- Top priority right now are [issues tagged with `NLL-Complete`][NLL-complete], corresponding to code that should be accepted but isn't right now.\r\n- Next priority are [issues tagged with `NLL-sound`][NLL-sound], corresponding to code that should get errors, but isn't right now.\r\n- Next priority are [issues tagged with `NLL-diagnostics`][NLL-diagnostics], corresponding to low quality error messages.\r\n- [Issues tagged with `NLL-performant`][NLL-performant], corresponding to cases where NLL analysis takes too long.\r\n\r\nYou may also wish to look for E-mentor issues, which means that they have mentoring instructions. Also, if an issue is assigned, then someone is supposed to be working on it, but it's worth checking if they have made progress and pinging them -- people often get busy with other things.\r\n\r\nIssues tagged with [NLL-deferred] are low priority right now, but if one strikes your fancy, feel free to tackle it!\r\n\r\n## How are issues are organized\r\n\r\nAll issues related to NLL are tagged with [`WG-compiler-nll`](). They are further tagged with a `NLL-foo` label to indicate a subcategory. Issues that have [no NLL-label] are considered \"untriaged\" and need to be sorted. Issues tagged with [NLL-deferred] are low priority right now.\r\n\r\n[NLL-sound]: https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3ANLL-sound+\r\n[NLL-complete]: https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3ANLL-complete+\r\n[NLL-performant]: https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3ANLL-performant+\r\n[NLL-diagnostics]: https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3ANLL-diagnostics+\r\n[NLL-deferred]: https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3ANLL-deferred+\r\n[NLL-fixed-by-NLL]: https://github.com/rust-lang/rust/labels/NLL-fixed-by-NLL\r\n[`WG-compiler-nll`]: https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AWG-compiler-nll\r\n[no NLL-label]: https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3AWG-compiler-nll+-label%3ANLL-deferred+-label%3ANLL-performant+-label%3ANLL-diagnostics+-label%3ANLL-complete+-label%3ANLL-sound++-label%3ANLL-fixed-by-NLL\r\n\r\nFinally, you can always take a look at the [full list of NLL-related issues](https://github.com/rust-lang/rust/labels/A-NLL).\r\n\r\nIn particular, issues tagged with `E-mentor` are those that contain mentoring instructions that can help you get started.\r\n\r\nIssues (and pull requests) tagged with `I-nominated` are meant to be reviewed by the WG-compiler-nll at each weekly meeting. Here's the current [nominated list](https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&q=+label%3AI-nominated+label%3AA-NLL+).\r\n\r\nIf you can't find anything, [reach out to @nikomatsakis on gitter](https://gitter.im/rust-impl-period/WG-compiler-nll).\r\n\r\n## Other issues\r\n\r\nThis section tracks related issues and notes. \r\n\r\n<details>\r\n<summary>Bugs in AST borrow check fixed in MIR borrowck</summary>\r\n  \r\nhttps://github.com/rust-lang/rust/issues/47366 tracks known bugs from the AST borrow checker that were fixed in the MIR borrow checker. For each such bug, we have added a test to the repo with `#![feature(nll)]` and then closed the relevant issue (obviously, though, the bug will still be reproducable until the MIR-based borrow checker is stabilized, presuming one uses the AST-based borrow checker). You can also search for things tagged with [NLL-fixed-by-NLL].\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>Questions to be resolved before stabilization</summary>\r\n  \r\n- [x] #46036: infinite loop false edges\r\n- [x] NLL should identify and respect the lifetime annotations that the user wrote #47184\r\n</details>\r\n\r\n<details>\r\n  <summary>Possible extensions</summary>\r\n  \r\n- [ ]  refine liveness with maybe-initialized at greater resolution than a single variable\r\n</details>", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43234/reactions", "total_count": 124, "+1": 31, "-1": 0, "laugh": 0, "hooray": 61, "confused": 0, "heart": 32, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43234/timeline", "performed_via_github_app": null, "state_reason": "completed"}