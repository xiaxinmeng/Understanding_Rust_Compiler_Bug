{"url": "https://api.github.com/repos/rust-lang/rust/issues/1973", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/1973/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/1973/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/1973/events", "html_url": "https://github.com/rust-lang/rust/issues/1973", "id": 3637203, "node_id": "MDU6SXNzdWUzNjM3MjAz", "number": 1973, "title": "variance for type params and nominal types is broken", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-03-13T20:00:17Z", "updated_at": "2012-04-06T17:36:12Z", "closed_at": "2012-04-06T17:36:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Our treatment of variance is broken for nominal types.  We try to be covariant except when in a mutable context: but nominal types hide the way that the type parameter is used, so we end up being covariant all the time.  Clearly unsound.\n\nHere is an example test that should not compile but does.  It demonstrates the problem for iface and enum types, but the same will apply to class types.\n\n```\niface box_iface<T> {\n    fn get() -> T;\n    fn set(t: T);\n}\n\nenum box_impl<T> = {\n    mut f: T\n};\n\nimpl<T:copy> of box_iface<T> for box_impl<T> {\n    fn get() -> T { ret self.f; }\n    fn set(t: T) { self.f = t; }\n}\n\nfn set_box_iface<T>(b: box_iface<@const T>, v: @const T) {\n    b.set(v);\n}\n\nfn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n    b.set(v);\n}\n\nfn main() {\n    let b = box_impl({mut f: @3});\n    set_box_iface(b as box_iface::<@int>, @mut 5);\n    set_box_impl(b, @mut 5);\n}\n```\n\nThis is not exactly an unknown problem.  There are basically three possible answers:\n- **declaration site variance:** you declare the variance when you declare the type parameter.  You then check that a type declared as covariant is only used in covariant locations (immutable fields, return types, etc), and similarly for contravariant parameters.  Invariant parameters may be used anywhere.\n- **use site variance:** this is what Java does.  In practice, few seem to understand it and we should probably not go this route.  The way it works is that we you use an _instance_ of the type, you specify the variance on the type parameters, which affects which methods and so forth you can safely use.  It's effectively a kind of existential type.  The advantage of this is that it is very flexible, particularly when you have container types that include both `get()` and `set()` methods but which are commonly used in a read-only fashion.  To accommodate this situation with declaration site variance only, you need multiple interfaces: one for reading (which is covariant) and one for reading/writing (which is invariant).\n- **a combination:** some recent papers (such as [this one](http://people.cs.umass.edu/~yannis/variance-pldi11.pdf)) have shown ways to combine the two techniques, leading hopefully to a system that is at once usable and comprehensible.  This is to some extent still a matter of active research.\n\nProbably we want to with the first option.\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/1973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/1973/timeline", "performed_via_github_app": null, "state_reason": "completed"}