{"url": "https://api.github.com/repos/rust-lang/rust/issues/24535", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/24535/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/24535/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/24535/events", "html_url": "https://github.com/rust-lang/rust/issues/24535", "id": 69192599, "node_id": "MDU6SXNzdWU2OTE5MjU5OQ==", "number": 24535, "title": "Cannot mutably borrow inside a match guard", "user": {"login": "Binero", "id": 6867251, "node_id": "MDQ6VXNlcjY4NjcyNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/6867251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Binero", "html_url": "https://github.com/Binero", "followers_url": "https://api.github.com/users/Binero/followers", "following_url": "https://api.github.com/users/Binero/following{/other_user}", "gists_url": "https://api.github.com/users/Binero/gists{/gist_id}", "starred_url": "https://api.github.com/users/Binero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Binero/subscriptions", "organizations_url": "https://api.github.com/users/Binero/orgs", "repos_url": "https://api.github.com/users/Binero/repos", "events_url": "https://api.github.com/users/Binero/events{/privacy}", "received_events_url": "https://api.github.com/users/Binero/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-04-17T18:32:01Z", "updated_at": "2015-04-18T22:54:52Z", "closed_at": "2015-04-18T22:54:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I understand this shouldn't be possible in some occasions, because you might be able to modify what you're matching, which can cause the match to break. Why would it be disallowed to mutably borrow something that only exists within the match though? \n\n``` rust\nfn main() {\n    let a = 3u8;\n\n    match a {\n        0 => (),\n        3 if compare(&a, &mut 3) => (),\n        _ => (),\n    }\n}\n\nfn compare(a: &u8, b: &mut u8) -> bool {\n    a == b\n}\n```\n\nhttp://is.gd/yuIFGc\n\nI have constructed this minimal case. In my actual code I am running `.iter().any()` on a variable form outside the match, which isn't allowed because `.any()` requires a mutable borrow. As the thing I am mutably borrowing only exists within the match, this makes even less sense to me.\n\nCompiler bug? \n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/24535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/24535/timeline", "performed_via_github_app": null, "state_reason": "completed"}