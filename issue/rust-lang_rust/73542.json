{"url": "https://api.github.com/repos/rust-lang/rust/issues/73542", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73542/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73542/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73542/events", "html_url": "https://github.com/rust-lang/rust/issues/73542", "id": 642359549, "node_id": "MDU6SXNzdWU2NDIzNTk1NDk=", "number": 73542, "title": "Reject OOB shufflevector intrinsics", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-06-20T11:28:09Z", "updated_at": "2020-10-04T06:48:15Z", "closed_at": "2020-10-04T06:48:15Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Looks like there are some [open](https://blog.regehr.org/archives/1737) questions regarding the semantics of shufflevector intrinsics in LLVM:\r\n\r\n> When the mask is out of bounds, the current semantics are that the resulting element is undef. If shufflevector is used to remove an element from the input vector, then the instruction cannot be removed, as the input might have been poison. The solution is to switch to give poison instead. \r\n\r\nSo my question is, what are the semantics of those intrinsics in MIR? We had some [discussion on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/LLVM.20IR.20semantics) and it seems like it should be one of the two:\r\n* OOB shufflevector should be statically ruled out. We could even have the new MIR validation pass check that.\r\n* OOB shufflevector returns \"uninitialized memory\" for the affected elements. (Following [this paper](http://www.cs.utah.edu/~regehr/papers/undef-pldi17.pdf), MIR does not have a poison vs undef distinction; our \"uninit\" is closest to LLVM's poison.)\r\n\r\nThe former seems definitely the safest ;) but currently this is [not enforced](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=3e5c8da20683871a552d0b4067a3f8cc). @hanna-kruppe was concerned that stdarch might rely on OOB shufflevector somewhere. If we have consensus that for now, we should statically rule out OOB indices to avoid UB/uninit here, I guess the main open issue is (a) implementing that check and (b) fixing the fallout, if any.\r\n\r\nCc @rust-lang/lang @rust-lang/libs @gnzlbg @Lokathor  (not sure who else to ping for stdarch)", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73542/timeline", "performed_via_github_app": null, "state_reason": "completed"}