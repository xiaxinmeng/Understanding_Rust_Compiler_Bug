{"url": "https://api.github.com/repos/rust-lang/rust/issues/84441", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84441/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84441/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84441/events", "html_url": "https://github.com/rust-lang/rust/issues/84441", "id": 865209794, "node_id": "MDU6SXNzdWU4NjUyMDk3OTQ=", "number": 84441, "title": "[ER] Useless array bound test after a while loop", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-04-22T17:07:17Z", "updated_at": "2023-04-05T17:35:27Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The usual disclaimer is that I might be missing something...\r\n\r\n```rust\r\npub fn zero1(data: &mut [u32], mut i: usize) -> &[u32] {\r\n    data[i] = 0;\r\n    i += 1;\r\n    &data[.. i]\r\n}\r\n\r\npub fn zero2(data: &mut [u32], len: usize) -> &[u32] {\r\n    let mut i = 0;\r\n    while i < len {\r\n        data[i] = 0;\r\n        i += 1;\r\n    }\r\n    &data[.. i]\r\n}\r\n```\r\n\r\nIn both `zero1` and `zero2` I expect only one array bound test for each function. But `zero2` has two of them. In `zero2` if `len` is zero, all the while loop gets skipped, but `&data[0..0]` is still in-bounds.\r\n\r\nrustc 1.53.0-nightly 361bfce30 2021-04-07 gives:\r\n\r\n```asm\r\nzero1:\r\n    sub     rsp, 8\r\n    cmp     rdx, rsi\r\n    jae     .LBB0_2\r\n    mov     dword ptr [rdi + 4*rdx], 0\r\n    inc     rdx\r\n    mov     rax, rdi\r\n    pop     rcx\r\n    ret\r\n.LBB0_2:\r\n    lea     rax, [rip + .L__unnamed_1]\r\n    mov     rdi, rdx\r\n    mov     rdx, rax\r\n    call    qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\r\n    ud2\r\n\r\n\r\nzero2:\r\n    sub     rsp, 8\r\n    test    rdx, rdx\r\n    je      .LBB1_1\r\n    xor     eax, eax\r\n.LBB1_5:\r\n    cmp     rsi, rax\r\n    je      .LBB1_7\r\n    mov     dword ptr [rdi + 4*rax], 0\r\n    inc     rax\r\n    cmp     rdx, rax\r\n    jne     .LBB1_5\r\n    cmp     rdx, rsi\r\n    ja      .LBB1_8\r\n    mov     rax, rdi\r\n    pop     rcx\r\n    ret\r\n.LBB1_1:\r\n    xor     edx, edx\r\n    mov     rax, rdi\r\n    pop     rcx\r\n    ret\r\n.LBB1_7:\r\n    lea     rdx, [rip + .L__unnamed_2]\r\n    mov     rdi, rsi\r\n    call    qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\r\n    ud2\r\n.LBB1_8:\r\n    lea     rax, [rip + .L__unnamed_3]\r\n    mov     rdi, rdx\r\n    mov     rdx, rax\r\n    call    qword ptr [rip + core::slice::index::slice_end_index_len_fail@GOTPCREL]\r\n    ud2\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84441/timeline", "performed_via_github_app": null, "state_reason": null}