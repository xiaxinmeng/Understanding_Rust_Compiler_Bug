{"url": "https://api.github.com/repos/rust-lang/rust/issues/59163", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59163/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59163/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59163/events", "html_url": "https://github.com/rust-lang/rust/issues/59163", "id": 420671142, "node_id": "MDU6SXNzdWU0MjA2NzExNDI=", "number": 59163, "title": "Make the documentation of From and Into traits coherent.", "user": {"login": "DevQps", "id": 46896178, "node_id": "MDQ6VXNlcjQ2ODk2MTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46896178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevQps", "html_url": "https://github.com/DevQps", "followers_url": "https://api.github.com/users/DevQps/followers", "following_url": "https://api.github.com/users/DevQps/following{/other_user}", "gists_url": "https://api.github.com/users/DevQps/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevQps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevQps/subscriptions", "organizations_url": "https://api.github.com/users/DevQps/orgs", "repos_url": "https://api.github.com/users/DevQps/repos", "events_url": "https://api.github.com/users/DevQps/events{/privacy}", "received_events_url": "https://api.github.com/users/DevQps/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-03-13T19:07:50Z", "updated_at": "2019-03-27T08:58:48Z", "closed_at": "2019-03-27T08:58:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Description\r\nI was reading on the From<T> and Into<T> traits and I got a little confused:\r\n\r\n```From``` states: \r\n> **Simple and safe** type conversions in to Self.\r\n\r\nwhereas ```Into``` states:\r\n> A conversion that consumes self, **which may or may not be expensive**.\r\n\r\n### The Problem\r\nThis makes it seem like implementing ```From``` should be used for implementing relatively cheap operations (interpreting the word 'simple' as 'cheap') automatically gaining ```Into``` for free. Whereas implementing ```Into``` (and therefore not getting the ```From``` trait for free) should be used for expensive conversions.\r\n\r\nHowever later in the documentation of ```Into``` states:\r\n> Library authors should not directly implement this trait, but should prefer implementing the From trait, which offers greater flexibility and provides an equivalent Into implementation for free, thanks to a blanket implementation in the standard library.\r\n\r\nwhich in turns suggests that one should not implement ```Into``` at all (unless you want to convert into a type outside your crate).\r\n\r\nNow I have 3 questions:\r\n\r\n1. Is it true, that ```From``` should only be used for inexpensive conversions? (If not, we should probably change the documentation of both ```From``` and ```Into``` to refrain from saying things about expensiveness).\r\n\r\n2. The documentation of ```Into``` states that one should only implement ```Into``` if you want to convert into a type outside your crate. ```From``` cannot do this as the example shows. However the significant limitation is that you do not get the ```From``` trait for free, meaning that library authors using ```From``` as trait bounds cannot automatically use the ```Into``` implementation. Is there a reason why implementing ```Into``` does not automatically implement ```From``` as well?\r\n\r\n3. ```Into``` nicely states that it should only be used when implementing traits for types in external crates. Maybe the documentation of ```From``` should also note this?\r\n\r\nI am curious on what you all think!\r\n\r\n**Disclaimer:** I have been using Rust for the last 4 months, so I would not consider myself an expert. So if I am wrong on some points or misunderstand anything, please correct me!", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59163/timeline", "performed_via_github_app": null, "state_reason": "completed"}