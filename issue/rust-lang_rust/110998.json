{"url": "https://api.github.com/repos/rust-lang/rust/issues/110998", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110998/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110998/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110998/events", "html_url": "https://github.com/rust-lang/rust/issues/110998", "id": 1689671483, "node_id": "I_kwDOAAsO6M5ktlc7", "number": 110998, "title": "Tracking Issue for `ascii::Char` (ACP 179)", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2023-04-29T19:59:34Z", "updated_at": "2023-06-10T04:06:51Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Feature gate: `#![feature(ascii_char)]` `#![feature(ascii_char_variants)]`\r\n\r\nThis is a tracking issue for the `ascii::Char` type from https://github.com/rust-lang/libs-team/issues/179\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\n// core::ascii\r\n\r\n#[repr(u8)]\r\nenum Char {\r\n    Null = 0,\r\n    \u2026\r\n    Tilde = 127,\r\n}\r\n\r\nimpl Debug for Char { \u2026 }\r\nimpl Display for Char { \u2026 }\r\n\r\nimpl Char {\r\n    const fn from_u8(x: u8) -> Option<Self>;\r\n    const unsafe fn from_u8_unchecked(x: u8) -> Self;\r\n    const fn digit(d: u8) -> Option<Self>;\r\n    const unsafe fn digit_unchecked(d: u8) -> Self;\r\n    const fn as_u8(self) -> u8;\r\n    const fn as_char(self) -> char;\r\n    const fn as_str(&self) -> &str;\r\n}\r\n\r\nimpl [Char] {\r\n    const fn as_str(&self) -> &str;\r\n    const fn as_bytes(&self) -> &[u8];\r\n}\r\n\r\nimpl From<Char> for u8 { \u2026 }\r\nimpl From<Char> for char { \u2026 }\r\nimpl From<&[Char]> for &str { \u2026 }\r\n\r\n// core::array\r\n\r\nimpl<const N: usize> [u8; N] {\r\n    const fn as_ascii(&self) -> Option<&[ascii::Char; N]>;\r\n    const unsafe fn as_ascii_unchecked(&self) -> &[ascii::Char; N];\r\n}\r\n\r\n// core::char\r\n\r\nimpl char {\r\n    const fn as_ascii(&self) -> Option<ascii::Char>;\r\n}\r\n\r\n// core::num\r\n\r\nimpl u8 {\r\n    const fn as_ascii(&self) -> Option<ascii::Char>;\r\n}\r\n\r\n// core::slice\r\n\r\nimpl [u8] {\r\n    const fn as_ascii(&self) -> Option<&[ascii::Char]>;\r\n    const unsafe fn as_ascii_unchecked(&self) -> &[ascii::Char];\r\n}\r\n\r\n// core::str\r\n\r\nimpl str {\r\n    const fn as_ascii(&self) -> Option<&[ascii::Char]>;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [ ] Implementation: \r\n  - #111009\r\n  - #111222\r\n- [ ] Final comment period (FCP)[^1]\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilization PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- [ ] What should it be named?  Code mixing `char` and `Char` might be too confusing.\r\n- [ ] How should its `Debug` impl work?\r\n- [ ] Is allowing `as`-casting from it a good or bad feature?\r\n- [ ] Some of the `as_ascii` methods take `&self` for consistency with `is_ascii`.  Should they take `self` instead where possible, as the usually-better option, or stick with `&self` for the consistency?\r\n\r\n[^1]: https://std-dev-guide.rust-lang.org/feature-lifecycle/stabilization.html\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110998/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110998/timeline", "performed_via_github_app": null, "state_reason": null}