{"url": "https://api.github.com/repos/rust-lang/rust/issues/34834", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/34834/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/34834/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/34834/events", "html_url": "https://github.com/rust-lang/rust/issues/34834", "id": 165734073, "node_id": "MDU6SXNzdWUxNjU3MzQwNzM=", "number": 34834, "title": "Spurious (?) \"trait bound not satisfied\" with associated type constructors", "user": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-15T08:15:15Z", "updated_at": "2019-12-25T17:38:39Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I\u2019m using the technique mentioned at https://github.com/rust-lang/rfcs/pull/1598/files/8e922c0cede49b0b07ac6fcf29ea736aab29acb9#r68995241 and used at https://github.com/nikomatsakis/nll/blob/master/graph-algorithms/src/lib.rs to have in a trait an associated type constructor that takes a lifetime parameter.\n\nrustc 1.12.0-nightly (7ad125c4e 2016-07-11)\n\n``` rust\npub trait TypeConstructor<'a> {\n    type BorrowedNamespace;\n}\n\npub trait SelectorImpl\nwhere Self: for<'a> TypeConstructor<'a> {\n    // These two definitions should be equivalent (for `ExampleImpl`), but only the latter compiles.\n    type Namespace: PartialEq + for<'a> PartialEq<<Self as TypeConstructor<'a>>::BorrowedNamespace>;\n//  type Namespace: PartialEq + for<'a> PartialEq<&'a str>;\n\n    // For illustration:\n    fn get_namespace<'a>(&'a self) -> <Self as TypeConstructor<'a>>::BorrowedNamespace;\n}\n\n\npub struct ExampleImpl;\n\nimpl<'a> TypeConstructor<'a> for ExampleImpl {\n    type BorrowedNamespace = &'a str;\n}\n\nimpl SelectorImpl for ExampleImpl {\n    type Namespace = String;\n\n    fn get_namespace<'a>(&'a self) -> &'a str { unimplemented!() }\n}\n```\n\n``` rust\nerror: the trait bound `for<'a> std::string::String: std::cmp::PartialEq<<ExampleImpl as TypeConstructor<'a>>::BorrowedNamespace>` is not satisfied [--explain E0277]\n  --> a.rs:22:6\n   |>\n22 |> impl SelectorImpl for ExampleImpl {\n   |>      ^^^^^^^^^^^^\nhelp: the following implementations were found:\nhelp:   <std::string::String as std::cmp::PartialEq>\nhelp:   <std::string::String as std::cmp::PartialEq<str>>\nhelp:   <std::string::String as std::cmp::PartialEq<&'a str>>\nhelp:   <std::string::String as std::cmp::PartialEq<std::borrow::Cow<'a, str>>>\nnote: required by `SelectorImpl`\n\nerror: aborting due to previous error\n```\n\nSince`<ExampleImpl as TypeConstructor<'a>>::BorrowedNamespace` is `&'a str` for any `'a`, I believe the bound `for<'a> std::string::String: std::cmp::PartialEq<<ExampleImpl as TypeConstructor<'a>>::BorrowedNamespace>` is equivalent to `for<'a> std::string::String: std::cmp::PartialEq<&'a str>`, which is the third bound that was found.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/34834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/34834/timeline", "performed_via_github_app": null, "state_reason": null}