{"url": "https://api.github.com/repos/rust-lang/rust/issues/56347", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56347/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56347/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56347/events", "html_url": "https://github.com/rust-lang/rust/issues/56347", "id": 385870698, "node_id": "MDU6SXNzdWUzODU4NzA2OTg=", "number": 56347, "title": "Unexpected discriminant value collision", "user": {"login": "rustonaut", "id": 7632017, "node_id": "MDQ6VXNlcjc2MzIwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7632017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustonaut", "html_url": "https://github.com/rustonaut", "followers_url": "https://api.github.com/users/rustonaut/followers", "following_url": "https://api.github.com/users/rustonaut/following{/other_user}", "gists_url": "https://api.github.com/users/rustonaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustonaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustonaut/subscriptions", "organizations_url": "https://api.github.com/users/rustonaut/orgs", "repos_url": "https://api.github.com/users/rustonaut/repos", "events_url": "https://api.github.com/users/rustonaut/events{/privacy}", "received_events_url": "https://api.github.com/users/rustonaut/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-29T18:36:20Z", "updated_at": "2019-11-12T13:03:54Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Rustc chooses (reused from previous build?) a already in use discriminant.\r\n\r\nI have a large enum with a numer of `#[cfg(..)]` variants each having a explicity\r\ndiscriminant expect the last (`__Nonexhausitve`). E.g.:\r\n\r\n```\r\n#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\r\n#[repr(u16)]\r\nenum TheEnum {\r\n      #[cfg(feature=\"common-types\")]\r\n      Variant1 = 2,\r\n      #[cfg(feature=\"common-types\")]\r\n      Variant1 = 3,\r\n      #[cfg(feature=\"some-other-feature\")]\r\n      Variant1 = 10,\r\n      #[cfg(feature=\"vnd-nintendo\")]\r\n      VndNintendoNitroRom,\r\n      //roughly ~1300 variants!\r\n     __Nonexhaustive\r\n}\r\n```\r\n\r\nThen I build with a 2 features (\"vnd-nintendo\" and \"common-types\") and then I build again\r\n_just_ with \"vnd-nintendo\" and got:\r\n\r\n```\r\nerror[E0081]: discriminant value `881` already exists\r\n    --> media-type-enum/src/generated_enum_code.rs:9531:5\r\n     |\r\n6447 |     VndNintendoNitroRom = 881,\r\n     |                           --- first use of `881`\r\n...\r\n9531 |     __Nonexhaustive,\r\n     |     ^^^^^^^^^^^^^^^ enum already has `881`\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nGiven that the compiler chooses the discriminant for `__Nonexhaustive` this shouldn't really happen.\r\n\r\n## Meta\r\n\r\n```\r\nrustc 1.30.1 (1433507eb 2018-11-07)\r\nbinary: rustc\r\ncommit-hash: 1433507eba7d1a114e4c6f27ae0e1a74f60f20de\r\ncommit-date: 2018-11-07\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.30.1\r\nLLVM version: 8.0\r\n```\r\n\r\n```\r\nrustc 1.32.0-nightly (b68fc18c4 2018-11-27)\r\nbinary: rustc\r\ncommit-hash: b68fc18c45350e1cdcd83cecf0f12e294e55af56\r\ncommit-date: 2018-11-27\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.32.0-nightly\r\nLLVM version: 8.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56347/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56347/timeline", "performed_via_github_app": null, "state_reason": null}