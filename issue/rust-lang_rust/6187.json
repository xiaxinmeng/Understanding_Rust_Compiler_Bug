{"url": "https://api.github.com/repos/rust-lang/rust/issues/6187", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/6187/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/6187/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/6187/events", "html_url": "https://github.com/rust-lang/rust/issues/6187", "id": 13889944, "node_id": "MDU6SXNzdWUxMzg4OTk0NA==", "number": 6187, "title": "future: provide infrastructure to print shared-ownership types in a way that reflects the shared graph structure", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108435, "node_id": "MDU6TGFiZWwxMDg0MzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-pretty", "name": "A-pretty", "color": "f7e101", "default": false, "description": "Area: Pretty printing."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2013-05-02T12:58:40Z", "updated_at": "2015-02-02T10:43:22Z", "closed_at": "2015-02-02T10:43:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Old title: _future: extend %? printing to reflect shared graph structure of @-referenced objects_\n\nPreviously this bug was just covering `@mut T` (now `Gc<RefCell<T>>`) and described overriding the reflection-based `{:?}` printer. Old text below.\n\nSome types like `Rc` and `Gc` provide the ability to share state, it would be neat if we could print values that reflected this (see below for some examples). Providing a general interface that types can use to get equivalent printing would be optimal, but, if necessary, we can restrict it to just being implemented for `Rc` and `Gc` (although of course others would be welcome to borrow/adjust the implementation for their use case).\n\nThis may end up requiring some special formatting traits (or something like `~[Rc<T>]` will not be printed properly), and so may be better suited to an external library.\n## Old text.\n\nDiscussions on Issue #3768 made me wonder about how we might extend Rust to precisely (and succinctly) print out structure with shared state.\n\nConsider for example this code:\n\n``` rust\nfn main() {\n    struct two<L,R> { l:L, r:R };\n    let a = two{ l:0, r:0 };\n    let b = @mut a;\n    let c = two{ l:&b, r: b};\n    let g = two{ l:&c, r: @mut a };\n    io::println(fmt!(\" pre g: %?\", g));\n    io::println(\"now set g.l.l.l = 1;\");\n    g.l.l.l = 1;\n    io::println(fmt!(\"post g: %?\", g));\n}\n```\n\nthe print out you get is:\n\n```\n pre g: {l: &{l: &@mut {l: 0, r: 0}, r: @mut {l: 0, r: 0}}, r: @mut {l: 0, r: 0}}\nnow set g.l.l.l = 1;\npost g: {l: &{l: &@mut {l: 1, r: 0}, r: @mut {l: 1, r: 0}}, r: @mut {l: 0, r: 0}}\n```\n\nIt might be nice if we extended the notation for @-references so that if there is shared substructure, it is annotated to reflect the shared objects' identities.  As inspired by say Lisp/Scheme, many dialects of which use `#n=<foo>` as a binder and `#n#` as a reference, we might print:\n\n```\n pre g: {l: &{l: &@mut #1={l: 0, r: 0}, r: @mut #1#}, r: @mut {l: 0, r: 0}}\nnow set g.l.l.l = 1;\npost g: {l: &{l: &@mut #1={l: 1, r: 0}, r: @mut #1#}, r: @mut {l: 0, r: 0}}\n```\n\nCaveat: I'm not wedded to any particular notation, and perhaps this job is better left to an end-user library to handle, rather than coupling it to `%?`.\n\nBut since some people do want `%?` to be robust in the face of cycles, we might consider also keeping it honest?  Just a thought.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/6187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/6187/timeline", "performed_via_github_app": null, "state_reason": "completed"}