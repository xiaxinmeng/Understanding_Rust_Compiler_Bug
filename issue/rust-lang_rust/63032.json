{"url": "https://api.github.com/repos/rust-lang/rust/issues/63032", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63032/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63032/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63032/events", "html_url": "https://github.com/rust-lang/rust/issues/63032", "id": 473591750, "node_id": "MDU6SXNzdWU0NzM1OTE3NTA=", "number": 63032, "title": "Lifetime is unnecessarily captured in nested functions returning impl trait via async", "user": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-27T03:05:37Z", "updated_at": "2021-08-29T13:45:10Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "When trying to create some futures that do a bit of work up-front to avoid borrowing some inputs, I ran into this strange issue where it seems like an input lifetime is being unnecessarily captured by the returned impl trait even though the value isn't:\r\n\r\n```rust\r\n#![feature(async_await)]\r\nuse std::future::Future;\r\n\r\nfn query<'a, I>(params: I) -> impl Future<Output = Vec<i32>> + 'static\r\nwhere\r\n    I: IntoIterator<Item = &'a i32>,\r\n{\r\n    let start = start(params);\r\n    \r\n    async {\r\n        start.await\r\n    }\r\n}\r\n\r\nfn start<'a, I>(params: I) -> impl Future<Output = Vec<i32>> + 'static\r\nwhere\r\n    I: IntoIterator<Item = &'a i32>,\r\n{\r\n    let buf = encode(params);\r\n    \r\n    async {\r\n        buf\r\n    }\r\n}\r\n\r\nfn encode<'a, I>(params: I) -> Vec<i32>\r\nwhere\r\n    I: IntoIterator<Item = &'a i32>,\r\n{\r\n    params.into_iter().cloned().collect()\r\n}\r\n```\r\n\r\n```\r\nerror[E0310]: the parameter type `I` may not live long enough\r\n --> src/lib.rs:4:31\r\n  |\r\n4 | fn query<'a, I>(params: I) -> impl Future<Output = Vec<i32>> + 'static\r\n  |              -                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |              |\r\n  |              help: consider adding an explicit lifetime bound `I: 'static`...\r\n  |\r\nnote: ...so that the type `impl std::future::Future` will meet its required lifetime bounds\r\n --> src/lib.rs:4:31\r\n  |\r\n4 | fn query<'a, I>(params: I) -> impl Future<Output = Vec<i32>> + 'static\r\n  |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0310`.\r\n```\r\n\r\nIt also seems really weird that this only happens with 2 layers of \"nesting\" - `start` compiles just fine, but `query` doesn't even though it's pretty much just a pass-through.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63032/timeline", "performed_via_github_app": null, "state_reason": null}