{"url": "https://api.github.com/repos/rust-lang/rust/issues/66773", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66773/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66773/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66773/events", "html_url": "https://github.com/rust-lang/rust/issues/66773", "id": 528700767, "node_id": "MDU6SXNzdWU1Mjg3MDA3Njc=", "number": 66773, "title": "Add a `starts_with(s: &str) -> bool` method for `fmt::Arguments`?", "user": {"login": "phil-opp", "id": 1131315, "node_id": "MDQ6VXNlcjExMzEzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1131315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phil-opp", "html_url": "https://github.com/phil-opp", "followers_url": "https://api.github.com/users/phil-opp/followers", "following_url": "https://api.github.com/users/phil-opp/following{/other_user}", "gists_url": "https://api.github.com/users/phil-opp/gists{/gist_id}", "starred_url": "https://api.github.com/users/phil-opp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phil-opp/subscriptions", "organizations_url": "https://api.github.com/users/phil-opp/orgs", "repos_url": "https://api.github.com/users/phil-opp/repos", "events_url": "https://api.github.com/users/phil-opp/events{/privacy}", "received_events_url": "https://api.github.com/users/phil-opp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-26T12:43:43Z", "updated_at": "2021-05-02T16:22:54Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It's currently very cumbersome to check whether a panic message starts with an expected `&str` in `no_std` mode:\r\n\r\n```rust\r\n#[panic_handler]\r\nfn panic(info: &PanicInfo) -> ! {\r\n    use core::fmt::Write;\r\n\r\n    let mut check_message = CheckPanicMessage::new(\"some panic message:\");\r\n    let error = write!(&mut check_message, \"{}\", info.message().unwrap_or(&format_args!(\"\"))).is_err();\r\n    if !error && check_message.starts_as_expected() {\r\n       // do something (e.g. mark test as successful)\r\n    } else {\r\n        // do something else (e.g. mark test as failed)\r\n    }\r\n}\r\n\r\nstruct CheckPanicMessage<'a> {\r\n    expected_prefix: &'a str,\r\n    mismatch: bool,\r\n}\r\n\r\nimpl<'a> CheckPanicMessage<'a> {\r\n    fn new(expected_prefix: &'a str) -> Self {\r\n        Self {\r\n            expected_prefix,\r\n            mismatch: false,\r\n        }\r\n    }\r\n\r\n    fn starts_as_expected(&self) -> bool {\r\n        !self.mismatch && self.expected_prefix == \"\"\r\n    }\r\n}\r\n\r\nuse core::fmt;\r\n\r\nimpl fmt::Write for CheckPanicMessage<'_> {\r\n    fn write_str(&mut self, s: &str) -> fmt::Result {\r\n        let len = s.len().min(self.expected_prefix.len());\r\n        if !self.mismatch {\r\n            if s.starts_with(&self.expected_prefix[..len]) {\r\n                serial_println!(\"[ok] expected: <{}>, got: <{}>\", &self.expected_prefix[..len], s);\r\n                self.expected_prefix = &self.expected_prefix[len..];\r\n            } else {\r\n                serial_println!(\"expected: <{}>, got: <{}>\", &self.expected_prefix[..len], s);\r\n                self.mismatch = true;\r\n            }\r\n        }\r\n        Ok(())\r\n    }\r\n}\r\n```\r\n\r\n(If there is an easier way to achieve this, please let me know.)\r\n\r\nHow about adding a `starts_with(&self, &str) -> bool` method to `fmt::Arguments`? With such a method, the above could be shortened to:\r\n\r\n```rust\r\n#[panic_handler]\r\nfn panic(info: &PanicInfo) -> ! {\r\n    if info.message().unwrap_or(&format_args!(\"\")).starts_with(\"some panic message:\") {\r\n        // do something (e.g. mark test as successful)\r\n    } else {\r\n        // do something else (e.g. mark test as failed)\r\n    }\r\n}\r\n```\r\n\r\nI would be happy to write a PR that adds this as an unstable method if it is desired.\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66773/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66773/timeline", "performed_via_github_app": null, "state_reason": null}