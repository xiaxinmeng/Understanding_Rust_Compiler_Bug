{"url": "https://api.github.com/repos/rust-lang/rust/issues/97682", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97682/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97682/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97682/events", "html_url": "https://github.com/rust-lang/rust/issues/97682", "id": 1259760682, "node_id": "I_kwDOAAsO6M5LFmwq", "number": 97682, "title": "`-Z simulate-remapped-rust-src-base` is not fully simulating `remap-debuginfo = true`", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-06-03T10:51:25Z", "updated_at": "2022-06-29T08:28:29Z", "closed_at": "2022-06-29T08:28:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "alternative title: `-Z simulate-remapped-rust-src-base` is not working as expected with `remap-debuginfo = true`\r\n\r\nHello! We are running the compiler test with a compiler configured with `remap-debuginfo = true` and after a recent PR merge we observed that the `src/test/ui` test suite is no longer passing. After looking into the issue I think a (test only?) `-Z` compiler flag may not be working as intended. Details below and apologies for not using one of the issue templates!\r\n\r\n## Observations\r\n\r\n`./x.py test src/test/ui` worked fine before PR #97504 with `remap-debuginfo = true` set in `config.toml`\r\n\r\n``` console\r\n$ git clone https://github.com/rust-lang/rust\r\n$ cd rust\r\n$ git checkout 946a88a # before PR 97504\r\n$ git submodule update\r\n\r\n$ cp config.toml.example config.toml\r\n$ # enable remap-debuginfo\r\n$ sed -i '/remap-debuginfo/c\\remap-debuginfo = true' config.toml\r\n\r\n$ ./x.py test src/test/ui && echo OK\r\n(..)\r\nOK\r\n```\r\n\r\n`./x.py test src/test/ui` stopped working after #97504 was merged.\r\n\r\n``` console\r\n$ git checkout e810f75 # after PR 97504\r\n$ git submodule update\r\n\r\n$ cp config.toml.example config.toml\r\n$ # enable remap-debuginfo\r\n$ sed -i '/remap-debuginfo/c\\remap-debuginfo = true' config.toml\r\n\r\n$ ./x.py test src/test/ui\r\n(..)\r\n---- [ui] src/test/ui/span/issue-71363.rs stdout ----\r\ndiff of stderr:\r\n\r\n1\terror[E0277]: `MyError` doesn't implement `std::fmt::Display`\r\n-\t --> $DIR/issue-71363.rs:6:6\r\n-\t  |\r\n-\t6 | impl std::error::Error for MyError {}\r\n-\t  |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted with the default formatter\r\n-\t  |\r\n-\t  = help: the trait `std::fmt::Display` is not implemented for `MyError`\r\n-\t  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\r\n+\t   --> $DIR/issue-71363.rs:6:6\r\n+\t    |\r\n+\t6   | impl std::error::Error for MyError {}\r\n+\t    |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted with the default formatter\r\n+\t    |\r\n+\t    = help: the trait `std::fmt::Display` is not implemented for `MyError`\r\n+\t    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\r\n9\tnote: required by a bound in `std::error::Error`\r\n+\t   --> $SRC_DIR/std/src/error.rs:LL:COL\r\n+\t    |\r\n+\t193 | pub trait Error: Debug + Display {\r\n+\t    |                          ^^^^^^^ required by this bound in `std::error::Error`\r\n10\r\n11\terror[E0277]: `MyError` doesn't implement `Debug`\r\n-\t --> $DIR/issue-71363.rs:6:6\r\n-\t  |\r\n-\t6 | impl std::error::Error for MyError {}\r\n-\t  |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted using `{:?}`\r\n-\t  |\r\n-\t  = help: the trait `Debug` is not implemented for `MyError`\r\n-\t  = note: add `#[derive(Debug)]` to `MyError` or manually `impl Debug for MyError`\r\n+\t   --> $DIR/issue-71363.rs:6:6\r\n+\t    |\r\n+\t6   | impl std::error::Error for MyError {}\r\n+\t    |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted using `{:?}`\r\n+\t    |\r\n+\t    = help: the trait `Debug` is not implemented for `MyError`\r\n+\t    = note: add `#[derive(Debug)]` to `MyError` or manually `impl Debug for MyError`\r\n19\tnote: required by a bound in `std::error::Error`\r\n+\t   --> $SRC_DIR/std/src/error.rs:LL:COL\r\n+\t    |\r\n+\t193 | pub trait Error: Debug + Display {\r\n+\t    |                  ^^^^^ required by this bound in `std::error::Error`\r\n20\thelp: consider annotating `MyError` with `#[derive(Debug)]`\r\n-\t  |\r\n-\t5 | #[derive(Debug)]\r\n-\t  |\r\n+\t    |\r\n+\t5   | #[derive(Debug)]\r\n+\t    |\r\n24\r\n25\terror: aborting due to 2 previous errors\r\n26\r\n(..)\r\n```\r\n\r\nmore concretely, the UI test `issue-71363` added in PR #97504 fails. the error message looks like the one that was reported by CI in the original PR #89268. see [rust-log-analyzer](https://github.com/rust-lang/rust/pull/89268#issuecomment-928870096)\r\n\r\ndisabling `remap-debuginfo` makes test `issue-71363` and the test suite pass:\r\n\r\n``` console\r\n$ # disable remap-debuginfo\r\n$ sed -i '/remap-debuginfo/c\\remap-debuginfo = false' config.toml\r\n\r\n$ ./x.py test src/test/ui && echo OK\r\n(..)\r\nOK\r\n```\r\n\r\n## Hypotheses\r\n\r\n1. `-Z simulate-remapped-rust-src-base` is not working as intended with `remap-debuginfo = true`.\r\n\r\nAIUI, the goal of `-Z simulate-remapped-rust-src-base=/rustc/xyz` is to make it as if there was no `rust-src` component installed but it's not working when the compiler is built with `remap-debuginfo = true`. This can be observed in the above test failure: the location of `trait Error` is reported. It can also be observed on nightly (shown below):\r\n\r\n``` rust\r\n$ rustup default nightly-2022-06-02\r\n$ rustup component add rust-src\r\n\r\n$ cd src/test/ui/span # within rust-lang/rust repo\r\n$ rustc -Z ui-testing=no -Z simulate-remapped-rust-src-base=/rustc/xyz issue-71363.rs\r\n(..)\r\nnote: required by a bound in `std::error::Error`\r\n   --> $RUST_SRC/library/std/src/error.rs:193:18\r\n    |\r\n193 | pub trait Error: Debug + Display {\r\n```\r\n\r\nonly removing the `rust-src` component makes that `pub trait` note disappear.\r\n\r\n``` rust\r\n$ rustup component remove rust-src\r\n\r\n$ rustc -Z ui-testing=no -Z simulate-remapped-rust-src-base=/rustc/xyz issue-71363.rs 2>&1 | rg 'pub trait' || echo not found\r\nnot found\r\n\r\n$ rustc issue-71363.rs 2>&1 | rg 'pub trait' || echo not found\r\nnot found\r\n```\r\n\r\n2. `issue-71363` is not being exercised with `remap-debuginfo = true` in CI\r\n\r\nPR #97504 rebased PR #89268 but added `// only-x86_64-unknown-linux-gnu`. with that change the `issue-71363` test is run in the `auto (x86_64-gnu, ubuntu-20.04-xl)` builder which is configured with the default of `remap-debuginfo = false`. (see [temporary logs](https://github.com/rust-lang-ci/rust/runs/6657212239?check_suite_focus=true#step:26:95))\r\n\r\nI couldn't figure where in the source code `remap-debuginfo` is set for CI builders but for example `auto (dist-x86_64-linux, ubuntu-20.04-xl)` is configured with `remap-debuginfo = true` (see [temporary logs](https://github.com/rust-lang-ci/rust/runs/6657211240?check_suite_focus=true#step:26:525)) but that builder does *not* run the `src/test/ui` tests.\r\n\r\nOTOH, `auto (dist-i586-gnu-i586-i686-musl, ubuntu-20.04-xl)` is configured with `remap-debuginfo = true` (see [temporary logs](https://github.com/rust-lang-ci/rust/runs/6657209806?check_suite_focus=true#step:26:112)) *and* does run the `src/test/ui` tests. However, it will *not* run `issue-71363` (see [temp logs](https://github.com/rust-lang-ci/rust/runs/6657209806?check_suite_focus=true#step:26:18509)) because the test has a `// only-x86_64-unknown-linux-gnu` directive. This `dist-i586` builder is the one that failed in the original PR #89268 (again, see [rust-log-analyzer](https://github.com/rust-lang/rust/pull/89268#issuecomment-928870096)); that original PR did not have the `// only-` directive.\r\n\r\n## Conclusions\r\n\r\n1. `-Z simulate-remapped-rust-src-base` is not working as intended with `remap-debuginfo = true`.\r\n2. because of (1), `issue-71363` is a hazard because it will fail if the `remap-debuginfo` configuration of the CI builders is tweaked in the future\r\n\r\n## Suggestions\r\n\r\nI would suggest:\r\n\r\n1. remove / disable the UI test `issue-71363`\r\n2. re-open issue #71363 and label it with `needs-test`. note that the actual issue *is* already fixed\r\n3. open an issue about fixing `-Z simulate-remapped-rust-src-base` (or re-purporse this issue for that)\r\n4. re-add / re-enable test `issue-71363` once (3) is sorted out\r\n\r\ncc @JohnTitor (author of PR #97504)", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97682/timeline", "performed_via_github_app": null, "state_reason": "completed"}