{"url": "https://api.github.com/repos/rust-lang/rust/issues/106207", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106207/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106207/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106207/events", "html_url": "https://github.com/rust-lang/rust/issues/106207", "id": 1512445797, "node_id": "I_kwDOAAsO6M5aJhdl", "number": 106207, "title": "Box::leak will not call allocator destruction function", "user": {"login": "yuhao-su", "id": 31772373, "node_id": "MDQ6VXNlcjMxNzcyMzcz", "avatar_url": "https://avatars.githubusercontent.com/u/31772373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuhao-su", "html_url": "https://github.com/yuhao-su", "followers_url": "https://api.github.com/users/yuhao-su/followers", "following_url": "https://api.github.com/users/yuhao-su/following{/other_user}", "gists_url": "https://api.github.com/users/yuhao-su/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuhao-su/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuhao-su/subscriptions", "organizations_url": "https://api.github.com/users/yuhao-su/orgs", "repos_url": "https://api.github.com/users/yuhao-su/repos", "events_url": "https://api.github.com/users/yuhao-su/events{/privacy}", "received_events_url": "https://api.github.com/users/yuhao-su/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2022-12-28T06:14:26Z", "updated_at": "2023-03-22T02:02:59Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#![feature(btreemap_alloc)]\r\n#![feature(allocator_api)]\r\n\r\nuse std::collections::BTreeMap;\r\nuse std::sync::Arc;\r\nuse std::alloc::Allocator;\r\nuse std::ptr::{self, NonNull};\r\n\r\n#[derive(Clone)]\r\npub struct AllocWrapper<T>(pub Arc<T>);\r\n\r\nunsafe impl<T: Allocator> Allocator for AllocWrapper<T> {\r\n    fn allocate(\r\n        &self,\r\n        layout: std::alloc::Layout,\r\n    ) -> Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError> {\r\n        self.0.allocate(layout)\r\n    }\r\n\r\n    unsafe fn deallocate(&self, ptr: std::ptr::NonNull<u8>, layout: std::alloc::Layout) {\r\n        self.0.deallocate(ptr, layout)\r\n    }\r\n\r\n    fn allocate_zeroed(\r\n        &self,\r\n        layout: std::alloc::Layout,\r\n    ) -> Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError> {\r\n        self.0.allocate_zeroed(layout)\r\n    }\r\n\r\n    unsafe fn grow(\r\n        &self,\r\n        ptr: std::ptr::NonNull<u8>,\r\n        old_layout: std::alloc::Layout,\r\n        new_layout: std::alloc::Layout,\r\n    ) -> Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError> {\r\n        self.0.grow(ptr, old_layout, new_layout)\r\n    }\r\n\r\n    unsafe fn grow_zeroed(\r\n        &self,\r\n        ptr: std::ptr::NonNull<u8>,\r\n        old_layout: std::alloc::Layout,\r\n        new_layout: std::alloc::Layout,\r\n    ) -> Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError> {\r\n        self.0.grow_zeroed(ptr, old_layout, new_layout)\r\n    }\r\n\r\n    unsafe fn shrink(\r\n        &self,\r\n        ptr: std::ptr::NonNull<u8>,\r\n        old_layout: std::alloc::Layout,\r\n        new_layout: std::alloc::Layout,\r\n    ) -> Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError> {\r\n        self.0.shrink(ptr, old_layout, new_layout)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let allocator = AllocWrapper(Arc::new(std::alloc::System));\r\n    println!(\"count = {}\", Arc::strong_count(&allocator.0));\r\n    let x = Box::new_in(5, allocator.clone());\r\n    println!(\"count = {}\", Arc::strong_count(&allocator.0));\r\n    let _ = NonNull::from(Box::leak(x));\r\n    println!(\"count = {}\", Arc::strong_count(&allocator.0));\r\n}\r\n```\r\n\r\nI expected to see this happen: \r\n\r\n- When the `x` get dropped, the ref count decreased to 1\r\n\r\nInstead, this happened: \r\n\r\n- When the `x` get dropped, the ref count dose not change\r\n\r\nThe current implementation of `Box::leak` will `ManuallyDrop`  the whole `Box` but only leak the data pointer. The destruction function of the allocator will not be called. I'm not sure if it the expected behavior.\r\n```rust\r\n    pub const fn leak<'a>(b: Self) -> &'a mut T\r\n    where\r\n        A: 'a,\r\n    {\r\n        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }\r\n    }\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.68.0-nightly (bdb07a8ec 2022-12-11)\r\nbinary: rustc\r\ncommit-hash: bdb07a8ec8e77aa10fb84fae1d4ff71c21180bb4\r\ncommit-date: 2022-12-11\r\nhost: aarch64-apple-darwin\r\nrelease: 1.68.0-nightly\r\nLLVM version: 15.0.6\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nrelated to : #106203 \r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106207/timeline", "performed_via_github_app": null, "state_reason": null}