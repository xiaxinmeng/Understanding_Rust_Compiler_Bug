{"url": "https://api.github.com/repos/rust-lang/rust/issues/107681", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107681/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107681/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107681/events", "html_url": "https://github.com/rust-lang/rust/issues/107681", "id": 1571242053, "node_id": "I_kwDOAAsO6M5dp0BF", "number": 107681, "title": "`.next().unwrap_unchecked()` on Iterator doesn't optimize as expected", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2023-02-05T05:36:28Z", "updated_at": "2023-06-11T17:23:20Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "(Context: this is a minimized example of the behaviour I hit while working on https://github.com/rust-lang/rust/pull/107634/files#r1096624164)\r\n\r\nI tried this code: <https://rust.godbolt.org/z/EjWscs1e9>\r\n\r\n```rust\r\npub unsafe fn demo_std(x: &mut Copied<Iter<'_, u32>>) -> u32 {\r\n    x.next().unwrap_unchecked()\r\n}\r\n```\r\n\r\nI expected to see this happen: the code would read and bump the pointer in the iterator without checking the end, something like\r\n```nasm\r\nexample::demo_std:\r\n        mov     rax, qword ptr [rdi + 8]\r\n        lea     rcx, [rax + 4]\r\n        mov     qword ptr [rdi + 8], rcx\r\n        mov     eax, dword ptr [rax]\r\n        ret\r\n```\r\n\r\nInstead, this happened: it still checks the iterator ending condition\r\n```nasm\r\nexample::demo_std:\r\n        mov     rax, qword ptr [rdi + 8]\r\n        cmp     rax, qword ptr [rdi]\r\n        je      .LBB0_1\r\n        lea     rcx, [rax + 4]\r\n        mov     qword ptr [rdi + 8], rcx\r\n        mov     eax, dword ptr [rax]\r\n        ret\r\n.LBB0_1:\r\n        ret\r\n```\r\n\r\nDunno where the problem is here -- could be LLVM, could be how the functions are written, could be how MIR handles things...\r\n\r\n---\r\n\r\nLLVM after optimizing:\r\n```llvm\r\ndefine noundef i32 @_ZN7example8demo_std17hd41113e4f46707e0E(ptr noalias nocapture noundef align 8 dereferenceable(16) %x) unnamed_addr #0 personality ptr @rust_eh_personality {\r\nstart:\r\n  tail call void @llvm.experimental.noalias.scope.decl(metadata !2)\r\n  %0 = getelementptr inbounds { ptr, ptr }, ptr %x, i64 0, i32 1\r\n  %self1.i.i = load ptr, ptr %0, align 8, !alias.scope !5, !nonnull !8, !noundef !8\r\n  %self2.i.i = load ptr, ptr %x, align 8, !alias.scope !5, !nonnull !8, !noundef !8\r\n  %_10.i.i = icmp eq ptr %self1.i.i, %self2.i.i\r\n  br i1 %_10.i.i, label %\"_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1de76f250ae29b09E.exit\", label %bb3.i.i\r\n\r\nbb3.i.i:                                          ; preds = %start\r\n  %1 = getelementptr inbounds i32, ptr %self1.i.i, i64 1\r\n  store ptr %1, ptr %0, align 8, !alias.scope !5\r\n  %v.i.i = load i32, ptr %self1.i.i, align 4, !alias.scope !9, !noalias !2, !noundef !8\r\n  br label %\"_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1de76f250ae29b09E.exit\"\r\n\r\n\"_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1de76f250ae29b09E.exit\": ; preds = %start, %bb3.i.i\r\n  %.sroa.3.0.i.i = phi i32 [ %v.i.i, %bb3.i.i ], [ undef, %start ]\r\n  %2 = xor i1 %_10.i.i, true\r\n  tail call void @llvm.assume(i1 %2)\r\n  ret i32 %.sroa.3.0.i.i\r\n}\r\n```\r\nLooks like CSE figured out that it's assuming the same thing as the `br` condition in `start`, but nothing moved it up to `start` even though that block dominates the assume?  If it had, then I think the the branch and compare might have properly disappeared?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107681/timeline", "performed_via_github_app": null, "state_reason": null}