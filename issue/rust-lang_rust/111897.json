{"url": "https://api.github.com/repos/rust-lang/rust/issues/111897", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111897/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111897/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111897/events", "html_url": "https://github.com/rust-lang/rust/issues/111897", "id": 1723159585, "node_id": "I_kwDOAAsO6M5mtVQh", "number": 111897, "title": "Allow specifying stack size of threads spawned by the test runner", "user": {"login": "Fuuzetsu", "id": 893115, "node_id": "MDQ6VXNlcjg5MzExNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/893115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fuuzetsu", "html_url": "https://github.com/Fuuzetsu", "followers_url": "https://api.github.com/users/Fuuzetsu/followers", "following_url": "https://api.github.com/users/Fuuzetsu/following{/other_user}", "gists_url": "https://api.github.com/users/Fuuzetsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fuuzetsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fuuzetsu/subscriptions", "organizations_url": "https://api.github.com/users/Fuuzetsu/orgs", "repos_url": "https://api.github.com/users/Fuuzetsu/repos", "events_url": "https://api.github.com/users/Fuuzetsu/events{/privacy}", "received_events_url": "https://api.github.com/users/Fuuzetsu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 630810559, "node_id": "MDU6TGFiZWw2MzA4MTA1NTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-libtest", "name": "A-libtest", "color": "f7e101", "default": false, "description": "Area: #[test] related"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-05-24T04:36:40Z", "updated_at": "2023-05-24T04:47:16Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "On platforms where concurrency is available, the test runner will always spawn threads with their default stack size: https://github.com/rust-lang/rust/blob/edbd5c5a78853d11f66b7581b6b90109b4853b7b/library/test/src/lib.rs#L596\r\n\r\nThere appears to be no way to control this stack size without altering the default stack size of the code running _within_ the test, via `RUST_MIN_STACK`.\r\n\r\nThe default rustc stack size for main thread is currently 8MiB: https://github.com/rust-lang/rust/blob/edbd5c5a78853d11f66b7581b6b90109b4853b7b/compiler/rustc_interface/src/util.rs#L124\r\n\r\nI think for spawned threads it's whatever the platform default is: I think on my Linux box this is 2MiB.\r\n\r\nConsider that I have two pieces of code: one using 1MiB of stack size, usually running on a thread. Another piece of code using 6MiB usually running on main thread, possibly spawning the 1MiB one.\r\n\r\nI now have a `#[test]`. When I run it, I get a stack overflow because we've spawned a thread with 2MiB to run the 6MiB stack code.\r\n\r\nWhat are my options? It seems `RUST_MIN_STACK` is my only option, so I set it to, say, 8MiB to match the main thread stack.\r\n\r\nThis makes the test pass.\r\n\r\nHowever now  originally-1MiB stack code changes and stack usage to 3MiB! The test is still passing but the code is going to crash outside of tests: we've changed the behaviour of the code we are trying to verify is working because we're trying to work-around the test runner.\r\n\r\n`RUST_MIN_STACK` is too big of a hammer: we should _either_ have a way to specify the stack size for the _test_ threads or pick a better default. It seems that the sanest default is the value of `fn get_stack_size()`. Changing the behaviour of code under testing just to control test runner seems very undesirable.\r\n\r\nFor people using `RUST_MIN_STACK` today, the behaviour remains the same. For people not using it, the memory usage of each test thread goes from their system default to the main-thread default. I think this is probably not a big deal for _test runner_. Indeed, if the program spawns any real number of threads, it might actually bring overall memory usage _down_.\r\n\r\nPS: setting `--test-threads 1` doesn't help: it still spawns a single thread with the same problem. It seems that platforms that don't support concurrency are the only way to run tests truly \"sequentially\".", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111897/timeline", "performed_via_github_app": null, "state_reason": null}