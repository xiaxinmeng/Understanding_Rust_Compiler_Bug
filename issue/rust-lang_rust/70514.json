{"url": "https://api.github.com/repos/rust-lang/rust/issues/70514", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70514/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70514/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70514/events", "html_url": "https://github.com/rust-lang/rust/issues/70514", "id": 589669892, "node_id": "MDU6SXNzdWU1ODk2Njk4OTI=", "number": 70514, "title": "Incorrect/confusing error message with multiple bounds of a single associated-type parametrized trait", "user": {"login": "syntacticsugarglider", "id": 25019299, "node_id": "MDQ6VXNlcjI1MDE5Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/25019299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syntacticsugarglider", "html_url": "https://github.com/syntacticsugarglider", "followers_url": "https://api.github.com/users/syntacticsugarglider/followers", "following_url": "https://api.github.com/users/syntacticsugarglider/following{/other_user}", "gists_url": "https://api.github.com/users/syntacticsugarglider/gists{/gist_id}", "starred_url": "https://api.github.com/users/syntacticsugarglider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syntacticsugarglider/subscriptions", "organizations_url": "https://api.github.com/users/syntacticsugarglider/orgs", "repos_url": "https://api.github.com/users/syntacticsugarglider/repos", "events_url": "https://api.github.com/users/syntacticsugarglider/events{/privacy}", "received_events_url": "https://api.github.com/users/syntacticsugarglider/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-28T22:12:50Z", "updated_at": "2020-04-28T15:52:06Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\n#![allow(unreachable_code)]\r\n\r\npub trait Super<P> {\r\n    type Assoc;\r\n}\r\n\r\npub trait A<P>: Super<P> {}\r\n\r\npub trait B<P>: Super<P> {\r\n    fn join(&mut self, handle: Self::Assoc) -> ();\r\n}\r\n\r\npub trait Trait<T> {\r\n    type Assoc;\r\n}\r\n\r\n// Removing B<<C as Trait<T>>::Assoc> bound allows this to infer and resolve\r\nfn bug<T, U, C: Trait<T> + Trait<U> + B<<C as Trait<T>>::Assoc> + A<<C as Trait<T>>::Assoc> + B<<C as Trait<U>>::Assoc> + A<<C as Trait<U>>::Assoc>>() {\r\n    let ctx: &mut C = panic!();\r\n    let a: <C as Super<<C as Trait<U>>::Assoc>>::Assoc = panic!();\r\n    \r\n    // Removing this line allows it to resolve\r\n    ctx.join(a);\r\n}\r\n```\r\n\r\nI expect that this would compile given that the type of `a` is fully specified and only one implementation of `B` can satisfy the requirement imposed. Aside from that, the error message produced here is on `let ctx`, specifically \"consider giving `ctx` the explicit type `&mut C`, where the type parameter `C` is specified\". An error is in fact reported on `join`, \r\n```\r\ncannot infer type for type parameter `C`\r\n\r\nnote: cannot resolve <C as Super<_>>::Assoc == <C as Super<<C as Trait<U>>::Assoc>>::Assoc\r\n```\r\nbut in the real-world codebase from which this originated the error was reported in an earlier use of `ctx` in the function, not the one which caused the issue, and it would be reported on the first occurrence of a use of `C` by receiver in the function regardless of the nature of that use.\r\n\r\nFully qualifying the call i.e.\r\n```rust\r\nB::<<C as Trait<U>>::Assoc>::join(ctx, a);\r\n```\r\nalso resolves and the program compiles successfully, my concern here is around the exceedingly confusing misplaced error message which sometimes has a span in unrelated source.\r\n\r\n[playground reproduction](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=a0fb72d5443c71262f275bc54b199f9e)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70514/timeline", "performed_via_github_app": null, "state_reason": null}