{"url": "https://api.github.com/repos/rust-lang/rust/issues/49354", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49354/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49354/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49354/events", "html_url": "https://github.com/rust-lang/rust/issues/49354", "id": 308326958, "node_id": "MDU6SXNzdWUzMDgzMjY5NTg=", "number": 49354, "title": "NLL breaks functions with intermingled lifetimes in return type when returned value is a (non-borrowed) associated type", "user": {"login": "daboross", "id": 1152146, "node_id": "MDQ6VXNlcjExNTIxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1152146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daboross", "html_url": "https://github.com/daboross", "followers_url": "https://api.github.com/users/daboross/followers", "following_url": "https://api.github.com/users/daboross/following{/other_user}", "gists_url": "https://api.github.com/users/daboross/gists{/gist_id}", "starred_url": "https://api.github.com/users/daboross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daboross/subscriptions", "organizations_url": "https://api.github.com/users/daboross/orgs", "repos_url": "https://api.github.com/users/daboross/repos", "events_url": "https://api.github.com/users/daboross/events{/privacy}", "received_events_url": "https://api.github.com/users/daboross/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}, {"id": 867465703, "node_id": "MDU6TGFiZWw4Njc0NjU3MDM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-complete", "name": "NLL-complete", "color": "f799ea", "default": false, "description": "Working towards the \"valid code works\" goal"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-03-25T06:45:13Z", "updated_at": "2018-06-01T01:09:34Z", "closed_at": "2018-06-01T01:09:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Code which returns this kind of complicated expression involving two different lifetimes compiles under normal compilation conditions, but fails with `#![feature(nll)]`.\r\n\r\nMinified example (courtesy of @matthewjasper).\r\n\r\n```rust\r\n#![feature(nll)]\r\ntrait Visitor<'de> {\r\n    type Value;\r\n}\r\n\r\nimpl<'a, 'de: 'a> Visitor<'de> for &'a () {\r\n    type Value = ();\r\n}\r\n\r\n//error: free region `'a` does not outlive free region `'de`\r\nfn visit_seq<'de: 'a, 'a>() -> <&'a () as Visitor<'de>>::Value {}\r\n//                                                             ^^\r\n\r\nfn main() {}\r\n```\r\n\r\nworking playground: https://play.rust-lang.org/?gist=5f08095fda551daa89fadf0b8566989e&version=nightly\r\nbroken playground: https://play.rust-lang.org/?gist=a5d0d7619f610d94fe316c80b0f1dfbb&version=nightly\r\n\r\n<details>\r\n <summary>Original post / serde_derive generated code example</summary>\r\n\r\nThe source code is anything like the following:\r\n\r\n```rust\r\n#![feature(nll)]\r\nextern crate sede;\r\n#[macro_use]\r\nextern crate serde_derive;\r\n\r\n#[derive(Deserialize)]\r\nstruct X<'a> {\r\n    #[serde(borrow)]\r\n    field: &'a [u8]\r\n}\r\n```\r\n\r\nPared down generated code:\r\n\r\n```rust\r\n#![feature(nll)]\r\nextern crate serde;\r\npub struct X<'a> {\r\n    pub field: &'a [u8],\r\n}\r\nimpl<'de: 'a, 'a> serde::Deserialize<'de> for X<'a> {\r\n    fn deserialize<__D>(__deserializer: __D) -> serde::export::Result<Self, __D::Error>\r\n    where\r\n        __D: serde::Deserializer<'de>,\r\n    {\r\n        struct __Visitor<'de: 'a, 'a> {\r\n            marker: serde::export::PhantomData<X<'a>>,\r\n            lifetime: serde::export::PhantomData<&'de ()>,\r\n        }\r\n        impl<'de: 'a, 'a> serde::de::Visitor<'de> for __Visitor<'de, 'a> {\r\n            type Value = X<'a>;\r\n            fn expecting(\r\n                &self,\r\n                formatter: &mut serde::export::Formatter,\r\n            ) -> serde::export::fmt::Result {\r\n                serde::export::Formatter::write_str(formatter, \"struct X\")\r\n            }\r\n            #[inline]\r\n            fn visit_seq<__A>(\r\n                self,\r\n                mut __seq: __A,\r\n            ) -> serde::export::Result<Self::Value, __A::Error>\r\n            where\r\n                __A: serde::de::SeqAccess<'de>,\r\n            {\r\n                let __field0 = match serde::de::SeqAccess::next_element::<&'a [u8]>(&mut __seq)? {\r\n                    Some(__value) => __value,\r\n                    None => {\r\n                        return Err(serde::de::Error::invalid_length(\r\n                            0usize,\r\n                            &\"tuple of 1 elements\",\r\n                        ));\r\n                    }\r\n                };\r\n                Ok(X { field: __field0 })\r\n            }\r\n        }\r\n        unimplemented!()\r\n    }\r\n}\r\nfn main() {}\r\n```\r\n\r\nThis code compiles without NLL enabled, but with NLL, fails with:\r\n\r\n```\r\nerror: free region `'a` does not outlive free region `'de`\r\n  --> src/main.rs:31:21\r\n   |\r\n31 |                 let __field0 = match serde::de::SeqAccess::next_element::<&'a [u8]>(&mut __seq)? {\r\n   |                     ^^^^^^^^\r\n```\r\n\r\nPlayground working: https://play.rust-lang.org/?gist=cb213e15287e06e85fb7a55412967b23&version=nightly\r\n\r\nPlayground failing: https://play.rust-lang.org/?gist=c4745b7f9e40f16bd7fe62f27d9c534b&version=nightly\r\n\r\n</details>", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49354/timeline", "performed_via_github_app": null, "state_reason": "completed"}