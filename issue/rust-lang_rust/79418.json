{"url": "https://api.github.com/repos/rust-lang/rust/issues/79418", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79418/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79418/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79418/events", "html_url": "https://github.com/rust-lang/rust/issues/79418", "id": 751035549, "node_id": "MDU6SXNzdWU3NTEwMzU1NDk=", "number": 79418, "title": "Atomic compare_exchange(_weak) functions produce overly complicated asm code on thumbv7(e)m-none-eabi(hf) targets", "user": {"login": "qwerty19106", "id": 1618383, "node_id": "MDQ6VXNlcjE2MTgzODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1618383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qwerty19106", "html_url": "https://github.com/qwerty19106", "followers_url": "https://api.github.com/users/qwerty19106/followers", "following_url": "https://api.github.com/users/qwerty19106/following{/other_user}", "gists_url": "https://api.github.com/users/qwerty19106/gists{/gist_id}", "starred_url": "https://api.github.com/users/qwerty19106/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qwerty19106/subscriptions", "organizations_url": "https://api.github.com/users/qwerty19106/orgs", "repos_url": "https://api.github.com/users/qwerty19106/repos", "events_url": "https://api.github.com/users/qwerty19106/events{/privacy}", "received_events_url": "https://api.github.com/users/qwerty19106/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 55301954, "node_id": "MDU6TGFiZWw1NTMwMTk1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-Arm", "name": "O-Arm", "color": "6e6ec0", "default": false, "description": "Target: 32-bit Arm processors (armv6, armv7, thumb...), including 64-bit Arm in AArch32 state"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 880020421, "node_id": "MDU6TGFiZWw4ODAwMjA0MjE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-embedded", "name": "WG-embedded", "color": "c2e0c6", "default": false, "description": "Of interest to the embedded Working Group"}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-11-25T18:27:40Z", "updated_at": "2020-11-27T19:02:36Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This code perform atomic increment:\r\n```rust\r\n#![no_std]\r\n\r\nuse core::sync::atomic::*;\r\n\r\npub extern \"C\" fn atomic_usize_inc(ptr: &AtomicUsize) -> usize {\r\n    let mut old = ptr.load(Ordering::Relaxed);\r\n\r\n    loop {\r\n        let new = old + 1;\r\n\r\n        match ptr.compare_exchange_weak(old, new, Ordering::Relaxed, Ordering::Relaxed) {\r\n            Ok(_old) => break _old,\r\n            Err(_old) => old = _old,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nExpected asm:\r\n```asm\r\nexample::atomic_usize_inc:\r\n1:\r\n        ldr     r1, [r0]\r\n        add    r3, r1, #1\r\n\r\n        ldrex   r2, [r0]\r\n        cmp     r2, r1\r\n        itt       ne\r\n        clrexne\r\n        bne     1b\r\n        strex   r1, r3, [r0]\r\n        cbz    r1, 2f\r\n        b       1b\r\n2:\r\n        movs    r0, r2\r\n```\r\n\r\nProduced asm [godbolt](https://godbolt.org/z/n3M4az):\r\n> ```asm\r\n> example::atomic_usize_inc:\r\n>         ldr     r2, [r0]\r\n> .LBB0_1:\r\n>         ldrex   r1, [r0]\r\n>         cmp     r1, r2\r\n>         bne     .LBB0_4\r\n>         adds    r2, #1\r\n>         strex   r3, r2, [r0]\r\n>         cbnz    r3, .LBB0_5\r\n>         movs    r2, #1\r\n>         b       .LBB0_6\r\n> .LBB0_4:\r\n>         clrex\r\n> .LBB0_5:\r\n>         movs    r2, #0\r\n> .LBB0_6:\r\n>         cbnz    r2, .LBB0_25\r\n>         ldrex   r2, [r0]\r\n>         cmp     r2, r1\r\n>         bne     .LBB0_10\r\n>         adds    r1, #1\r\n>         strex   r3, r1, [r0]\r\n>         cbnz    r3, .LBB0_11\r\n>         movs    r1, #1\r\n>         b       .LBB0_12\r\n> .LBB0_10:\r\n>         clrex\r\n> .LBB0_11:\r\n>         movs    r1, #0\r\n> .LBB0_12:\r\n>         cbnz    r1, .LBB0_24\r\n>         ldrex   r1, [r0]\r\n>         cmp     r1, r2\r\n>         bne     .LBB0_16\r\n>         adds    r2, #1\r\n>         strex   r3, r2, [r0]\r\n>         cbnz    r3, .LBB0_17\r\n>         movs    r2, #1\r\n>         b       .LBB0_18\r\n> .LBB0_16:\r\n>         clrex\r\n> .LBB0_17:\r\n>         movs    r2, #0\r\n> .LBB0_18:\r\n>         cbnz    r2, .LBB0_25\r\n>         ldrex   r2, [r0]\r\n>         cmp     r2, r1\r\n>         bne     .LBB0_22\r\n>         adds    r1, #1\r\n>         strex   r3, r1, [r0]\r\n>         cbnz    r3, .LBB0_23\r\n>         movs    r1, #1\r\n>         cmp     r1, #0\r\n>         beq     .LBB0_1\r\n>         b       .LBB0_24\r\n> .LBB0_22:\r\n>         clrex\r\n> .LBB0_23:\r\n>         movs    r1, #0\r\n>         cmp     r1, #0\r\n>         beq     .LBB0_1\r\n> .LBB0_24:\r\n>         mov     r1, r2\r\n> .LBB0_25:\r\n>         mov     r0, r1\r\n>         bx      lr\r\n> ```\r\n\r\nCode size is very important on Cortex-M targets (thumbv*) because some controllers have only 20KB flash!\r\n\r\nBesides the increment instruction (`adds    r2, #1`) was moved into ldrex/strex section. This code lost `compare_exchange` advantage: evaluation before ldrex to reduce tick count when Exclusive Monitor is set.\r\n\r\nThis code is useless because we can call `fetch_add`. But other tasks can requires `compare_exchange_weak`, for example atomic increment with max condition (pseudocode):\r\n```rust\r\npub extern \"C\" fn atomic_usize_inc_with_max(ptr: &AtomicUsize) -> (bool, usize) {\r\n    atomic {\r\n        let old = ptr.load(Ordering::Relaxed);\r\n        if old == max {\r\n            return (false, old);\r\n        }\r\n\r\n        ptr.store(old + 1, Ordering::Relaxed);\r\n        return (true, old);\r\n    }\r\n}\r\n```\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.50.0-nightly (1c389ffef 2020-11-24)\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79418/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79418/timeline", "performed_via_github_app": null, "state_reason": null}