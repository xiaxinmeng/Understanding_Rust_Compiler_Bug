{"url": "https://api.github.com/repos/rust-lang/rust/issues/33368", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/33368/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/33368/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/33368/events", "html_url": "https://github.com/rust-lang/rust/issues/33368", "id": 152741259, "node_id": "MDU6SXNzdWUxNTI3NDEyNTk=", "number": 33368, "title": "Incompatibility of Rust's stdlib with Coroutines", "user": {"login": "lhecker", "id": 2256941, "node_id": "MDQ6VXNlcjIyNTY5NDE=", "avatar_url": "https://avatars.githubusercontent.com/u/2256941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lhecker", "html_url": "https://github.com/lhecker", "followers_url": "https://api.github.com/users/lhecker/followers", "following_url": "https://api.github.com/users/lhecker/following{/other_user}", "gists_url": "https://api.github.com/users/lhecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/lhecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lhecker/subscriptions", "organizations_url": "https://api.github.com/users/lhecker/orgs", "repos_url": "https://api.github.com/users/lhecker/repos", "events_url": "https://api.github.com/users/lhecker/events{/privacy}", "received_events_url": "https://api.github.com/users/lhecker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 60, "created_at": "2016-05-03T10:15:36Z", "updated_at": "2020-05-27T14:18:43Z", "closed_at": "2020-05-27T14:18:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### The issue\r\n\r\n`thread_local!` is used in the stdlib, which does not work well with Coroutines. Repeated access to a TLS variable inside a method might be cached and optimized by LLVM. If a coroutine is transferred from one thread to another this can lead to problems, due to a coroutine still using the cached reference to the TLS storage from the previous thread.\r\n\r\n#### What is not the issue\r\n\r\nTLS being incompatible with coroutines for the most part (e.g. [here](https://github.com/rust-lang/rust/commit/12c5fc5877f708e8e4df05bf834261f5237ac437)) is well known and not an issue per se. You want to use `rand::thread_rng()` with coroutines? Just use `rand::StdRng::new()` instead! Most of the time it's just quite easy to circumvent the TLS by simply using something different. This is not true for the stdlib though. One way or the other you're using it somewhere probably.\r\n\r\n#### Possible solutions\r\n\r\n- Add a option akin to RFC 1513 to replace the stdlib with one with a builtin \"libgreen\". This might actually be much more practicable than it sounds at first, since the overhead of implementating this is not much larger than of the other options.\r\n- Add a option akin to RFC 1513 to control inlining of TLS access at compile time.\r\n- Make it possible to hook into `thread_local!`. I think that this could be hard to achieve in a performant way though.\r\n- Reduce the usage of TLS inside the stdlib and instead let crates use it as they please. Panic and unwind semantics could for instance be changed to match C++. This would obviate `PANIC_COUNT` and it's wonky implementation and _still_ make entirely sure that a stack is unwound twice. Other uses of TLS inside the stdlib could be wrapped inside `inline(never)` without causing large overheads.\r\n- Possibly some other way? I read that TLS variables are rendered as globals inside LLVM. If we mark the suspension function as \"can write to any memory location\", we could make LLVM stop caching the TLS access...\r\n\r\nI hope we can find a solution for this as this is really a huge problem for using stackful coroutines with Rust and who doesn't want \"Go\" but with Rust's syntax, eh? :wink: ", "closed_by": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/33368/reactions", "total_count": 14, "+1": 14, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/33368/timeline", "performed_via_github_app": null, "state_reason": "completed"}