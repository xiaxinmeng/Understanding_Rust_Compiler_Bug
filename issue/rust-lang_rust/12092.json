{"url": "https://api.github.com/repos/rust-lang/rust/issues/12092", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12092/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12092/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12092/events", "html_url": "https://github.com/rust-lang/rust/issues/12092", "id": 27160683, "node_id": "MDU6SXNzdWUyNzE2MDY4Mw==", "number": 12092, "title": "Tune merge_sort insertion threshold", "user": {"login": "zkamsler", "id": 944662, "node_id": "MDQ6VXNlcjk0NDY2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/944662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkamsler", "html_url": "https://github.com/zkamsler", "followers_url": "https://api.github.com/users/zkamsler/followers", "following_url": "https://api.github.com/users/zkamsler/following{/other_user}", "gists_url": "https://api.github.com/users/zkamsler/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkamsler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkamsler/subscriptions", "organizations_url": "https://api.github.com/users/zkamsler/orgs", "repos_url": "https://api.github.com/users/zkamsler/repos", "events_url": "https://api.github.com/users/zkamsler/events{/privacy}", "received_events_url": "https://api.github.com/users/zkamsler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-02-07T18:41:11Z", "updated_at": "2014-04-20T16:25:38Z", "closed_at": "2014-04-20T16:25:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the course of optimizing sorting short vectors in #12029, I noticed that the maximum run length that merge sort uses has an impact on performance. Increasing the length to 32 improved performance when sorting u64s, but sorting larger types incurred the cost of the additional writes that insertion sort does.\n\nThere is definitely room for tuning this parameter, possibly varying it with the size of the type being sorted. It should probably be based on more than what happens to run fast on my specific computer.\n\nBelow are benchmarks:\nin-place insertion (32 elem max run):\n\n```\ntest vec::bench::sort_big_random_large    ... bench:   1512893 ns/iter (+/- 154790) = 211 MB/s\ntest vec::bench::sort_big_random_medium   ... bench:      8542 ns/iter (+/- 1369) = 374 MB/s\ntest vec::bench::sort_big_random_small    ... bench:       246 ns/iter (+/- 147) = 650 MB/s\ntest vec::bench::sort_big_sorted          ... bench:    536906 ns/iter (+/- 61414) = 595 MB/s\ntest vec::bench::sort_random_large        ... bench:    685387 ns/iter (+/- 86290) = 116 MB/s\ntest vec::bench::sort_random_medium       ... bench:      4277 ns/iter (+/- 915) = 187 MB/s\ntest vec::bench::sort_random_small        ... bench:       183 ns/iter (+/- 50) = 218 MB/s\ntest vec::bench::sort_sorted              ... bench:    364977 ns/iter (+/- 63217) = 219 MB/s\n```\n\nin-place insertion (16 elem max run)\n\n```\ntest vec::bench::sort_big_random_large    ... bench:   1447282 ns/iter (+/- 247736) = 220 MB/s\ntest vec::bench::sort_big_random_medium   ... bench:      8063 ns/iter (+/- 1136) = 396 MB/s\ntest vec::bench::sort_big_random_small    ... bench:       242 ns/iter (+/- 56) = 661 MB/s\ntest vec::bench::sort_big_sorted          ... bench:    580873 ns/iter (+/- 347205) = 550 MB/s\ntest vec::bench::sort_random_large        ... bench:    693611 ns/iter (+/- 130341) = 115 MB/s\ntest vec::bench::sort_random_medium       ... bench:      4461 ns/iter (+/- 1039) = 179 MB/s\ntest vec::bench::sort_random_small        ... bench:       180 ns/iter (+/- 36) = 222 MB/s\ntest vec::bench::sort_sorted              ... bench:    382591 ns/iter (+/- 80074) = 209 MB/s\n```\n\nin-place insertion (8 elem max run):\n\n```\ntest vec::bench::sort_big_random_large    ... bench:   1453949 ns/iter (+/- 225381) = 219 MB/s\ntest vec::bench::sort_big_random_medium   ... bench:      7975 ns/iter (+/- 1034) = 401 MB/s\ntest vec::bench::sort_big_random_small    ... bench:       241 ns/iter (+/- 42) = 663 MB/s\ntest vec::bench::sort_big_sorted          ... bench:    607379 ns/iter (+/- 78551) = 526 MB/s\ntest vec::bench::sort_random_large        ... bench:    791019 ns/iter (+/- 178413) = 101 MB/s\ntest vec::bench::sort_random_medium       ... bench:      4426 ns/iter (+/- 519) = 180 MB/s\ntest vec::bench::sort_random_small        ... bench:       180 ns/iter (+/- 26) = 222 MB/s\ntest vec::bench::sort_sorted              ... bench:    419979 ns/iter (+/- 50808) = 190 MB/s\n```\n\nout-of-place (32 run insertion sort)\n\n```\ntest vec::bench::sort_big_random_large    ... bench:   1454360 ns/iter (+/- 276385) = 219 MB/s\ntest vec::bench::sort_big_random_medium   ... bench:      8259 ns/iter (+/- 1190) = 387 MB/s\ntest vec::bench::sort_big_random_small    ... bench:       242 ns/iter (+/- 72) = 661 MB/s\ntest vec::bench::sort_big_sorted          ... bench:    526373 ns/iter (+/- 168484) = 607 MB/s\ntest vec::bench::sort_random_large        ... bench:    692873 ns/iter (+/- 140006) = 115 MB/s\ntest vec::bench::sort_random_medium       ... bench:      4342 ns/iter (+/- 677) = 184 MB/s\ntest vec::bench::sort_random_small        ... bench:       177 ns/iter (+/- 35) = 225 MB/s\ntest vec::bench::sort_sorted              ... bench:    380630 ns/iter (+/- 66918) = 210 MB/s\n```\n\nout-of-place (16 run insertion sort)\n\n```\ntest vec::bench::sort_big_random_large    ... bench:   1393579 ns/iter (+/- 224143) = 229 MB/s\ntest vec::bench::sort_big_random_medium   ... bench:      7802 ns/iter (+/- 1219) = 410 MB/s\ntest vec::bench::sort_big_random_small    ... bench:       245 ns/iter (+/- 39) = 653 MB/s\ntest vec::bench::sort_big_sorted          ... bench:    584058 ns/iter (+/- 143346) = 547 MB/s\ntest vec::bench::sort_random_large        ... bench:    702402 ns/iter (+/- 178147) = 113 MB/s\ntest vec::bench::sort_random_medium       ... bench:      4500 ns/iter (+/- 900) = 177 MB/s\ntest vec::bench::sort_random_small        ... bench:       183 ns/iter (+/- 36) = 218 MB/s\ntest vec::bench::sort_sorted              ... bench:    413594 ns/iter (+/- 65994) = 193 MB/s\n```\n\nout-of-place (8 run insertion sort)\n\n```\ntest vec::bench::sort_big_random_large    ... bench:   1405837 ns/iter (+/- 285931) = 227 MB/s\ntest vec::bench::sort_big_random_medium   ... bench:      8434 ns/iter (+/- 2950) = 379 MB/s\ntest vec::bench::sort_big_random_small    ... bench:       251 ns/iter (+/- 60) = 637 MB/s\ntest vec::bench::sort_big_sorted          ... bench:    663738 ns/iter (+/- 109683) = 481 MB/s\ntest vec::bench::sort_random_large        ... bench:    752714 ns/iter (+/- 135182) = 106 MB/s\ntest vec::bench::sort_random_medium       ... bench:      5793 ns/iter (+/- 3496) = 138 MB/s\ntest vec::bench::sort_random_small        ... bench:       187 ns/iter (+/- 60) = 213 MB/s\ntest vec::bench::sort_sorted              ... bench:    430830 ns/iter (+/- 113507) = 185 MB/s\n```\n", "closed_by": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12092/timeline", "performed_via_github_app": null, "state_reason": "completed"}