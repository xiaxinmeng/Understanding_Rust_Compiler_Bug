{"url": "https://api.github.com/repos/rust-lang/rust/issues/59356", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59356/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59356/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59356/events", "html_url": "https://github.com/rust-lang/rust/issues/59356", "id": 424029426, "node_id": "MDU6SXNzdWU0MjQwMjk0MjY=", "number": 59356, "title": "Failure in run-pass/simd/simd-intrinsic-generic-select on Big-Endian Targets", "user": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 515028847, "node_id": "MDU6TGFiZWw1MTUwMjg4NDc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-PowerPC", "name": "O-PowerPC", "color": "6e6ec0", "default": false, "description": "Target: PowerPC processors"}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-22T03:18:00Z", "updated_at": "2019-07-18T20:42:33Z", "closed_at": "2019-07-18T20:42:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This was found while building rustc 1.33.0 on `powerpc64-unknown-linux-musl`. Test `run-pass/simd/simd-intrinsic-generic-select` fails at the third `simd_select_bitmask` test:\r\n\r\n```\r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `u32x8(8, 1, 10, 3, 12, 5, 14, 7)`,\r\n right: `u32x8(0, 9, 2, 11, 4, 13, 6, 15)`', src/test/run-pass/simd/simd-intrinsic-generic-select.rs:159:9\r\n```\r\n\r\nThe LLVM IR generated for this test case on `x86_64-unknown-linux-musl` and `powerpc64-unknown-linux-musl` (respectively) is identical:\r\n\r\n```llvm\r\n  %1036 = load <8 x i32>, <8 x i32>* %a83, align 32\r\n  %1037 = load <8 x i32>, <8 x i32>* %b84, align 32\r\n  %1038 = select <8 x i1> bitcast (<1 x i8> <i8 -16> to <8 x i1>), <8 x i32> %1036, <8 x i32> %1037\r\n  store <8 x i32> %1038, <8 x i32>* %r101, align 32\r\n```\r\n```llvm\r\n  %1036 = load <8 x i32>, <8 x i32>* %a83, align 32\r\n  %1037 = load <8 x i32>, <8 x i32>* %b84, align 32\r\n  %1038 = select <8 x i1> bitcast (<1 x i8> <i8 -16> to <8 x i1>), <8 x i32> %1036, <8 x i32> %1037\r\n  store <8 x i32> %1038, <8 x i32>* %r101, align 32\r\n```\r\n\r\nThe test appears to expect that the bitmask is interpreted as bitwise little-endian (in other words, the LSB selects the first element from the vectors). However, the implementation uses a bitcast to a vector of `i1`. On big-endian architectures such as powerpc64, the LSB becomes the last element of this `i1` vector, not the first.\r\n\r\nUnfortunately, all of the upstream test cases are symmetrical, so \"choosing the wrong vector\" and \"reading the bitmask backwards\" are indistinguishable. I added an additional test case:\r\n\r\n```rust\r\n        let r: u32x8 = simd_select_bitmask(0b11110101u8, a, b);\r\n        let e = u32x8(0, 9, 2, 11, 4, 5, 6, 7);\r\n        assert_eq!(r, e);\r\n```\r\n\r\nThis passes on `x86_64-unknown-linux-musl`, but fails on `powerpc64-unknown-linux-musl` with:\r\n\r\n```\r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `u32x8(0, 1, 2, 3, 12, 5, 14, 7)`,\r\n right: `u32x8(0, 9, 2, 11, 4, 5, 6, 7)`', src/test/run-pass/simd/simd-intrinsic-generic-select.rs:50:9\r\n```\r\n\r\nThe two \"unlike\" elements were chosen from the wrong place in the vector.\r\n\r\nSince the vectors are 256 bits, and the POWER VSX registers are only 128 bits wide, LLVM must split each vector across two registers. The following powerpc64 assembly is from the last test case (`0b11110000u8`), and clearly shows that LLVM (not the hardware) picks the first half of `a` and the second half of `b`:\r\n\r\n```\r\n   0x000000000000416c <+36>:    li      r3,0                                                                                                                                                   \r\n\r\n36          unsafe {\r\n37              let a = u32x8(0, 1, 2, 3, 4, 5, 6, 7);\r\n   0x0000000000004170 <+40>:    stw     r3,288(r1)                                                                                                                                             \r\n   0x0000000000004174 <+44>:    li      r3,1                                                                                                                                                   \r\n   0x0000000000004178 <+48>:    stw     r3,292(r1)\r\n   0x000000000000417c <+52>:    li      r3,2\r\n   0x0000000000004180 <+56>:    stw     r3,296(r1)\r\n   0x0000000000004184 <+60>:    li      r3,3\r\n   0x0000000000004188 <+64>:    stw     r3,300(r1)\r\n   0x000000000000418c <+68>:    li      r3,4\r\n   0x0000000000004190 <+72>:    stw     r3,304(r1)                                                                                                                                             \r\n   0x0000000000004194 <+76>:    li      r3,5\r\n   0x0000000000004198 <+80>:    stw     r3,308(r1)\r\n   0x000000000000419c <+84>:    li      r3,6\r\n   0x00000000000041a0 <+88>:    stw     r3,312(r1)\r\n   0x00000000000041a4 <+92>:    li      r3,7                                                                                                                                                   \r\n   0x00000000000041a8 <+96>:    stw     r3,316(r1)                                                                                                                                             \r\n   0x00000000000041ac <+100>:   li      r3,8\r\n\r\n38              let b = u32x8(8, 9, 10, 11, 12, 13, 14, 15);\r\n   0x00000000000041b0 <+104>:   stw     r3,320(r1)\r\n   0x00000000000041b4 <+108>:   li      r3,9\r\n   0x00000000000041b8 <+112>:   stw     r3,324(r1)                                                                                                                                             \r\n   0x00000000000041bc <+116>:   li      r3,10\r\n   0x00000000000041c0 <+120>:   stw     r3,328(r1)                                                                                                                                             \r\n   0x00000000000041c4 <+124>:   li      r3,11\r\n   0x00000000000041c8 <+128>:   stw     r3,332(r1)\r\n   0x00000000000041cc <+132>:   addi    r3,r1,336\r\n   0x00000000000041d0 <+136>:   li      r4,12\r\n   0x00000000000041d4 <+140>:   stw     r4,336(r1)\r\n   0x00000000000041d8 <+144>:   li      r4,13                                                                                                                                                  \r\n   0x00000000000041dc <+148>:   stw     r4,340(r1)\r\n   0x00000000000041e0 <+152>:   li      r4,14\r\n   0x00000000000041e4 <+156>:   stw     r4,344(r1)\r\n   0x00000000000041e8 <+160>:   li      r4,15\r\n   0x00000000000041ec <+164>:   stw     r4,348(r1)\r\n...\r\n60              let r: u32x8 = simd_select_bitmask(0b11110000u8, a, b);\r\n   0x00000000000048cc <+1924>:  addi    r3,r1,288\r\n   0x00000000000048d0 <+1928>:  lvx     v2,0,r3\r\n   0x00000000000048d4 <+1932>:  addi    r3,r1,336\r\n   0x00000000000048d8 <+1936>:  lvx     v3,0,r3\r\n   0x00000000000048dc <+1940>:  addi    r3,r1,1488\r\n   0x00000000000048e0 <+1944>:  stvx    v3,0,r3\r\n   0x00000000000048e4 <+1948>:  addi    r3,r1,1472\r\n   0x00000000000048e8 <+1952>:  stvx    v2,0,r3\r\n```\r\n\r\nSo is this a bug in the test, because it should be ensuring that the bitmask is in native vector/endian order? Or in the implementation of `simd_select_bitmask`, because it should always take a little-endian bitmask and reverse the bits as necessary?", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59356/timeline", "performed_via_github_app": null, "state_reason": "completed"}