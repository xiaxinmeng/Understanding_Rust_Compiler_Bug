{"url": "https://api.github.com/repos/rust-lang/rust/issues/103555", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103555/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103555/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103555/events", "html_url": "https://github.com/rust-lang/rust/issues/103555", "id": 1423269332, "node_id": "I_kwDOAAsO6M5U1V3U", "number": 103555, "title": "`array::zip` in combination with `array::map` optimises very poorly", "user": {"login": "AuroransSolis", "id": 25749440, "node_id": "MDQ6VXNlcjI1NzQ5NDQw", "avatar_url": "https://avatars.githubusercontent.com/u/25749440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AuroransSolis", "html_url": "https://github.com/AuroransSolis", "followers_url": "https://api.github.com/users/AuroransSolis/followers", "following_url": "https://api.github.com/users/AuroransSolis/following{/other_user}", "gists_url": "https://api.github.com/users/AuroransSolis/gists{/gist_id}", "starred_url": "https://api.github.com/users/AuroransSolis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AuroransSolis/subscriptions", "organizations_url": "https://api.github.com/users/AuroransSolis/orgs", "repos_url": "https://api.github.com/users/AuroransSolis/repos", "events_url": "https://api.github.com/users/AuroransSolis/events{/privacy}", "received_events_url": "https://api.github.com/users/AuroransSolis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 3425147156, "node_id": "LA_kwDOAAsO6M7MJ5kU", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-array", "name": "A-array", "color": "f7e101", "default": false, "description": "Area: [T; N]"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-10-26T00:39:03Z", "updated_at": "2023-05-31T08:25:24Z", "closed_at": "2023-05-31T08:25:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Today for no reason in particular I was curious about the behaviour of arrays when zipped together and then mapped into a single array, roughly:\r\n```rs\r\nfn zip_with<T, U, V, F: FnMut(T, U) -> V, const N: usize>(a: [T; N], b: [U; N], mut f: F) -> [V; N] {\r\n    a.zip(b).map(|(a, b)| f(a, b))\r\n}\r\n```\r\nI wrote some tests for this and disassembled them in Godbolt to see what was going on behind the scenes and wow was a whole lot going on that seemed like it didn't need to be. So I wrote something kinda like what's in the stdlib for mapping and zipping arrays, just without the iterators, to see if I could do any better. Turns out I absolutely can:\r\n```rs\r\nstruct ZipWithGuard<T, U, const N: usize> {\r\n    a: *mut [T; N],\r\n    b: *mut [U; N],\r\n    moved: usize,\r\n}\r\n\r\nimpl<T, U, const N: usize> Drop for ZipWithGuard<T, U, N> {\r\n    fn drop(&mut self) {\r\n        for i in self.moved + 1..N {\r\n            unsafe {\r\n                drop(self.a.cast::<T>().add(i).read());\r\n                drop(self.b.cast::<U>().add(i).read());\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npub fn zip_with_guarded<T, U, V, F: FnMut(T, U) -> V, const N: usize>(\r\n    a: [T; N],\r\n    b: [U; N],\r\n    mut f: F,\r\n) -> [V; N] {\r\n    let aref = &a as *const _ as *mut [ManuallyDrop<T>; N];\r\n    forget(a);\r\n    let bref = &b as *const _ as *mut [ManuallyDrop<U>; N];\r\n    forget(b);\r\n    let mut guard = ZipWithGuard {\r\n        a: aref,\r\n        b: bref,\r\n        moved: 0,\r\n    };\r\n    let mut out: MaybeUninit<[V; N]> = unsafe { MaybeUninit::uninit().assume_init() };\r\n    let out_ptr = out.as_mut_ptr().cast::<MaybeUninit<V>>();\r\n    while guard.moved < N {\r\n        let i = guard.moved;\r\n        unsafe {\r\n            *out_ptr.add(i) = MaybeUninit::new(f(\r\n                ptr::read(guard.a.cast::<T>().add(i)),\r\n                ptr::read(guard.b.cast::<U>().add(i)),\r\n            ));\r\n        }\r\n        guard.moved += 1;\r\n    }\r\n    unsafe { out.assume_init() }\r\n}\r\n```\r\nMaybe the design isn't as optimal (or as safe) as it could be, but it performs perfectly well in benchmarks (read: as fast as an unguarded version and anywhere between 3-25\\* times faster than the `zip_with` definition shown at the top of this issue. Here's a rough table of execution times averaged over the primitive ops (`+`, `-`, `*`, `&`, `|`, `^`):\r\n![image](https://user-images.githubusercontent.com/25749440/197906770-85c15830-98a0-4390-8e7d-f79c47d5c5a0.png)\r\n\r\nNot really liking how things are looking for `.zip().map()`. So, question then is: is there something in Rust that needs to change to let these optimisations happen, or do I need to look at putting this in a library somewhere (or maybe stdlib wink wink nudge nudge?)?\r\n\r\n\\*The 25x comes from the `[u8; 8]` benchmarks. `zip_with` benches at 11.230ns, and `zip_with_guarded` benches at 452.593ps, which seems suspicious but I can't seem to find anything wrong with the result.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103555/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103555/timeline", "performed_via_github_app": null, "state_reason": "completed"}