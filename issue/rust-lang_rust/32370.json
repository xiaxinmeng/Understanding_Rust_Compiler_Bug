{"url": "https://api.github.com/repos/rust-lang/rust/issues/32370", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32370/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32370/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32370/events", "html_url": "https://github.com/rust-lang/rust/issues/32370", "id": 142137332, "node_id": "MDU6SXNzdWUxNDIxMzczMzI=", "number": 32370, "title": "Unreachable branch not eliminated as expected", "user": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-20T07:39:01Z", "updated_at": "2017-05-02T12:06:20Z", "closed_at": "2017-05-02T12:06:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have some code that isn't being optimized the way I'd expect. I've cut this down to be as minimal as possible:\nhttp://is.gd/7iVd3j\n\n```\n    fn read(data: &[u8; 4]) -> Result<u16, ()> {\n        if data[3] == 42 {\n            return Err(());\n        }\n        let a: Result<u16, ()> = Ok(data[0] as u16);\n        match a {\n            Ok(v) => Ok(v),\n            Err(_) => return Err(()),\n        }\n    }\n\n    #[inline(never)]\n    pub fn foobar(data: &[u8; 4]) -> u16 {\n        read(&data).unwrap_or(0)\n    }\n```\n\nThe compiler should be able to determine that the Err branch of the match is unreachable and remove it.\n\nfoobar ends up being compiled to the following:\n\n```\n        movzbl  3(%rdi), %eax\n        cmpl    $42, %eax\n        jne     .LBB0_2\n        leaq    -16(%rsp), %rax\n        movl    $1, -16(%rsp)\n        jmp     .LBB0_3\n    .LBB0_2:\n        movzbl  (%rdi), %eax\n        movw    %ax, -6(%rsp)\n        movw    $0, -8(%rsp)\n        leaq    -8(%rsp), %rax\n    .LBB0_3:\n        movl    (%rax), %ecx\n        movl    %ecx, %edx\n        shrl    $16, %edx\n        xorl    %eax, %eax\n        testw   %cx, %cx\n        cmovew  %dx, %ax\n        retq\n```\n\nIf I assign the result of the match statement to a temporary then just return the temporary:\n\n```\n        let x = match a {\n            Ok(v) => Ok(v),\n            Err(_) => return Err(()),\n        };\n        x\n```\n\nThen the compiler optimizes the code to what I'd expect:\n\n```\n        movzbl  3(%rdi), %eax\n        cmpl    $42, %eax\n        jne     .LBB0_2\n        xorl    %eax, %eax\n        retq\n    .LBB0_2:\n        movzbl  (%rdi), %eax\n        retq\n```\n\nSimilarly, if I change the return to a panic, it optimizes away the panic and produces nicely optimized assembly. Likewise, if I remove the return statement and let the Err(()) value fall out as the result of the match statement, it also optimizes it OK.\n\nIt feels to me like it's unifying the first return with the second before dead code elimination has a chance to eliminate the second return. But once it's been unified, it fails to eliminate it.\n\nNote that my actual code is quite different to this, but shows a similar effect. My actual code has some monomorphizations that don't have the dead branch.\n\nFeel free to close if you'd rather not have reports of this nature at this stage.\n## Meta\n\nrustc --version\nrustc 1.7.0 (a5d1e7a59 2016-02-29)\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32370/timeline", "performed_via_github_app": null, "state_reason": "completed"}