{"url": "https://api.github.com/repos/rust-lang/rust/issues/92403", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92403/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92403/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92403/events", "html_url": "https://github.com/rust-lang/rust/issues/92403", "id": 1090517074, "node_id": "I_kwDOAAsO6M5A__hS", "number": 92403, "title": "Found unstable fingerprints for exported_symbols with custom target", "user": {"login": "iliakonnov", "id": 9402179, "node_id": "MDQ6VXNlcjk0MDIxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/9402179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iliakonnov", "html_url": "https://github.com/iliakonnov", "followers_url": "https://api.github.com/users/iliakonnov/followers", "following_url": "https://api.github.com/users/iliakonnov/following{/other_user}", "gists_url": "https://api.github.com/users/iliakonnov/gists{/gist_id}", "starred_url": "https://api.github.com/users/iliakonnov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iliakonnov/subscriptions", "organizations_url": "https://api.github.com/users/iliakonnov/orgs", "repos_url": "https://api.github.com/users/iliakonnov/repos", "events_url": "https://api.github.com/users/iliakonnov/events{/privacy}", "received_events_url": "https://api.github.com/users/iliakonnov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-12-29T13:20:58Z", "updated_at": "2023-04-06T14:48:37Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "First of all, this is known issue (unstable fingerprints, https://github.com/rust-lang/rust/issues/84970), I'm just adding another case.\r\n\r\n### Code\r\n\r\n1. Create minimal no_std application. See [smallest no_std](https://docs.rust-embedded.org/embedonomicon/smallest-no-std.html) for example. \r\n    <details>\r\n    <summary>Code</summary>\r\n\r\n    ```\r\n    #![no_main]\r\n    #![no_std]\r\n    #![feature(lang_items)]\r\n\r\n    use core::panic::PanicInfo;\r\n\r\n    #[panic_handler]\r\n    fn panic(_panic: &PanicInfo<'_>) -> ! {\r\n        loop {}\r\n    }\r\n\r\n    #[lang = \"eh_personality\"]\r\n    extern \"C\" fn eh_personality() {}\r\n    ```\r\n\r\n    <details>\r\n2.  Create custom target specification based on built-in x86_64-unknown-none:\r\n    ```\r\n    rustc -Z unstable-options --print target-spec-json --target x86_64-unknown-none > x86_64-custom.json\r\n    sed -i 's/\"is-builtin\": true/\"is-builtin\": false/' x86_64-custom.json\r\n    ```\r\n3. `cargo build --target x86_64-custom.json  -Zbuild-std=core`\r\n4. Change `\"panic-behaviour\": \"abort\"` to `\"panic-behaviour\": \"unwind\"` in `x86_64-custom.json`\r\n5. `cargo build --target x86_64-custom.json  -Zbuild-std=core` will fail\r\n\r\nNote: I have a minimal [repository](https://github.com/iliakonnov/rust-crash/tree/unstable-fingerprints) with all these steps done\r\n\r\n### Meta\r\n```\r\nrustc 1.59.0-nightly (83b15bfe1 2021-12-28)\r\nbinary: rustc\r\ncommit-hash: 83b15bfe1c15f325bc186ebfe3691b729ed59f2b\r\ncommit-date: 2021-12-28\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.59.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n### Error output\r\nI've omitted part of error since it is enormous. Full log available [here](https://github.com/iliakonnov/rust-crash/blob/f1310de97542a3494a4f85565931edb661e0a87d/error.log).\r\n\r\n```\r\nerror: internal compiler error: encountered incremental compilation error with exported_symbols(core[32cd])\r\n  |\r\n  = help: This is a known issue with the compiler. Run `cargo clean -p minimal` or `cargo clean` to allow your project to compile\r\n  = note: Please follow the instructions below to create a bug report with the provided information\r\n  = note: See <https://github.com/rust-lang/rust/issues/84970> for more information\r\n\r\nthread 'rustc' panicked at 'Found unstable fingerprints for exported_symbols(core[32cd]): [ \u2026omitted\u2026 ]', compiler/rustc_query_system/src/query/plumbing.rs:675:9\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\nnote: rustc 1.59.0-nightly (83b15bfe1 2021-12-28) running on x86_64-unknown-linux-gnu\r\nnote: compiler flags: -Z unstable-options -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type bin\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [exported_symbols] exported_symbols\r\nend of query stack\r\nerror: could not compile `minimal` due to previous error\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustc --crate-name minimal --edition=2018 src/main.rs --error-format=json --json=diagnostic-rendered-ansi,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C metadata=17370ef95f3ae4d6 -C extra-filename=-17370ef95f3ae4d6 --out-dir /home/ilia/Documents/asos/minimal/target/x86_64-custom/debug/deps --target /home/ilia/Documents/asos/minimal/x86_64-custom.json -C incremental=/home/ilia/Documents/asos/minimal/target/x86_64-custom/debug/incremental -L dependency=/home/ilia/Documents/asos/minimal/target/x86_64-custom/debug/deps -L dependency=/home/ilia/Documents/asos/minimal/target/debug/deps --extern 'noprelude:compiler_builtins=/home/ilia/Documents/asos/minimal/target/x86_64-custom/debug/deps/libcompiler_builtins-253f3d368d5adfbe.rlib' --extern 'noprelude:core=/home/ilia/Documents/asos/minimal/target/x86_64-custom/debug/deps/libcore-3e5d30ea51ef9363.rlib' -Z unstable-options` (exit status: 101)\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/83b15bfe1c15f325bc186ebfe3691b729ed59f2b/library/std/src/panicking.rs:498:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/83b15bfe1c15f325bc186ebfe3691b729ed59f2b/library/core/src/panicking.rs:107:14\r\n   2: rustc_query_system::query::plumbing::incremental_verify_ich_cold\r\n   3: rustc_query_system::query::plumbing::incremental_verify_ich::<rustc_query_impl::plumbing::QueryCtxt, rustc_span::def_id::CrateNum, &[(rustc_middle::middle::exported_symbols::ExportedSymbol, rustc_middle::middle::exported_symbols::SymbolExportLevel)]>\r\n   4: rustc_query_system::query::plumbing::try_load_from_disk_and_cache_in_memory::<rustc_query_impl::plumbing::QueryCtxt, rustc_span::def_id::CrateNum, &[(rustc_middle::middle::exported_symbols::ExportedSymbol, rustc_middle::middle::exported_symbols::SymbolExportLevel)]>\r\n   5: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::plumbing::QueryCtxt, rustc_query_system::query::caches::DefaultCache<rustc_span::def_id::CrateNum, &[(rustc_middle::middle::exported_symbols::ExportedSymbol, rustc_middle::middle::exported_symbols::SymbolExportLevel)]>>\r\n   6: rustc_query_system::query::plumbing::get_query::<rustc_query_impl::queries::exported_symbols, rustc_query_impl::plumbing::QueryCtxt>\r\n   7: rustc_codegen_ssa::back::linker::exported_symbols\r\n   8: <core::iter::adapters::map::Map<core::slice::iter::Iter<rustc_session::config::CrateType>, <rustc_codegen_ssa::CrateInfo>::new::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<(rustc_session::config::CrateType, alloc::vec::Vec<alloc::string::String>), <hashbrown::map::HashMap<rustc_session::config::CrateType, alloc::vec::Vec<alloc::string::String>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>> as core::iter::traits::collect::Extend<(rustc_session::config::CrateType, alloc::vec::Vec<alloc::string::String>)>>::extend<core::iter::adapters::map::Map<core::slice::iter::Iter<rustc_session::config::CrateType>, <rustc_codegen_ssa::CrateInfo>::new::{closure#0}>>::{closure#0}>::{closure#0}>\r\n   9: <rustc_codegen_ssa::CrateInfo>::new\r\n  10: rustc_codegen_ssa::back::write::start_async_codegen::<rustc_codegen_llvm::LlvmCodegenBackend>\r\n  11: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate\r\n  12: <rustc_session::session::Session>::time::<alloc::boxed::Box<dyn core::any::Any>, rustc_interface::passes::start_codegen::{closure#0}>\r\n  13: <rustc_interface::queries::Queries>::ongoing_codegen\r\n  14: <rustc_interface::interface::Compiler>::enter::<rustc_driver::run_compiler::{closure#1}::{closure#2}, core::result::Result<core::option::Option<rustc_interface::queries::Linker>, rustc_errors::ErrorReported>>\r\n  15: rustc_span::with_source_map::<core::result::Result<(), rustc_errors::ErrorReported>, rustc_interface::interface::create_compiler_and_run<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>::{closure#1}>\r\n  16: rustc_interface::interface::create_compiler_and_run::<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>\r\n  17: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorReported>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorReported>>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nThis requires nightly since it uses `-Zbuild-std=core` which is not stable\r\n@rustbot requires-nightly A-incr-comp", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92403/timeline", "performed_via_github_app": null, "state_reason": null}