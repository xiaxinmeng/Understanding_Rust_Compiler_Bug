{"url": "https://api.github.com/repos/rust-lang/rust/issues/67438", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67438/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67438/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67438/events", "html_url": "https://github.com/rust-lang/rust/issues/67438", "id": 540562414, "node_id": "MDU6SXNzdWU1NDA1NjI0MTQ=", "number": 67438, "title": "BTreeMap::iter_mut asserts on coarsely aligned keys", "user": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-19T20:59:24Z", "updated_at": "2019-12-29T18:49:45Z", "closed_at": "2019-12-29T18:49:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`thread 'main' panicked at 'assertion failed: mem::size_of::<NodeHeader<K, V>>() == mem::size_of::<NodeHeader<K, V, K>>()', src\\liballoc\\collections\\btree\\node.rs:612:13` is the result of this code [on playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=cc7b5145603a4c44fad9fd7f0374b34f) and elsewhere: \r\n\r\n```rust\r\nuse std::collections::BTreeMap;\r\n\r\n#[derive(Eq, PartialEq, PartialOrd, Ord)]\r\n#[repr(align(32))]\r\nstruct Aligned(bool);\r\n\r\nfn main() {\r\n    let mut map = BTreeMap::new();\r\n    map.insert(Aligned(true), true);\r\n    for (k, _v) in map.iter_mut() {\r\n        assert!(k.0);\r\n    }\r\n}\r\n```\r\n\r\nThere is no problem with ordinary u64 or u128 keys (both have 8 byte alignment on x86), neither on 32-bit nor 64-bit builds.\r\n\r\nRemoving the assert (or relaxing the `==` to `<=` , which then states the obvious) makes everything pass, including testing with miri and including some more tests I wrote.\r\n\r\nWhether that's the right solution, I can't tell, because I've been trying in vain to understand the changes to the `into_key_slice` function in #56648. All that is clear to me is that the comment \"because we did the alignment check above\" is misguided and I think this issue proves that. For your entertainment, here are some particular asserts that also succeed on x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc and i686-pc-windows-msvc:\r\n```rust\r\nassert_eq!(mem::align_of::<u8>(), 1);\r\nassert_eq!(mem::align_of::<u16>(), 2);\r\nassert_eq!(mem::align_of::<u32>(), 4);\r\nassert_eq!(mem::align_of::<u64>(), 8);\r\nassert_eq!(mem::align_of::<u128>(), 8);\r\nassert_eq!(mem::align_of::<Aligned>(), 32);\r\nassert_eq!(mem::align_of::<InternalNode<Aligned, ()>>(), 32);\r\nassert_eq!(mem::align_of::<LeafNode<Aligned, ()>>(), 32);\r\nassert_eq!(mem::align_of::<NodeHeader<K, V, Aligned>>(), 32);\r\n#[cfg(target_arch = \"x86\")]\r\n{\r\nassert_eq!(mem::align_of::<InternalNode<u32, u32>>(), 4);\r\nassert_eq!(mem::align_of::<InternalNode<u64, u64>>(), 8);\r\nassert_eq!(mem::align_of::<LeafNode<(), ()>>(), 4);\r\nassert_eq!(mem::align_of::<LeafNode<u32, ()>>(), 4);\r\nassert_eq!(mem::align_of::<LeafNode<u64, ()>>(), 8);\r\nassert_eq!(mem::align_of::<NodeHeader<K, V>>(), 4);\r\nassert_eq!(mem::align_of::<NodeHeader<K, V, u32>>(), 4);\r\nassert_eq!(mem::align_of::<NodeHeader<K, V, u64>>(), 8);\r\nassert_eq!(mem::size_of::<LeafNode<(), ()>>(), 8);\r\nassert_eq!(mem::size_of::<LeafNode<u32, u32>>(), 96);\r\nassert_eq!(mem::size_of::<LeafNode<u64, u64>>(), 184);\r\nassert_eq!(mem::size_of::<NodeHeader<K, V>>(), 8);\r\nassert_eq!(mem::size_of::<NodeHeader<K, V, u32>>(), 8);\r\nassert_eq!(mem::size_of::<NodeHeader<K, V, u64>>(), 8);\r\nassert_eq!(mem::size_of::<NodeHeader<K, V, Aligned>>(), 32);\r\n}\r\n#[cfg(target_arch = \"x86_64\")]\r\n{\r\nassert_eq!(mem::align_of::<InternalNode<u32, u32>>(), 8);\r\nassert_eq!(mem::align_of::<InternalNode<u64, u64>>(), 8);\r\nassert_eq!(mem::align_of::<LeafNode<(), ()>>(), 8);\r\nassert_eq!(mem::align_of::<LeafNode<u32, ()>>(), 8);\r\nassert_eq!(mem::align_of::<LeafNode<u64, ()>>(), 8);\r\nassert_eq!(mem::align_of::<NodeHeader<K, V>>(), 8);\r\nassert_eq!(mem::align_of::<NodeHeader<K, V, u32>>(), 8);\r\nassert_eq!(mem::align_of::<NodeHeader<K, V, u64>>(), 8);\r\nassert_eq!(mem::size_of::<LeafNode<(), ()>>(), 16);\r\nassert_eq!(mem::size_of::<LeafNode<u32, u32>>(), 104);\r\nassert_eq!(mem::size_of::<LeafNode<u64, u64>>(), 192);\r\nassert_eq!(mem::size_of::<NodeHeader<K, V>>(), 16);\r\nassert_eq!(mem::size_of::<NodeHeader<K, V, u32>>(), 16);\r\nassert_eq!(mem::size_of::<NodeHeader<K, V, u64>>(), 16);\r\nassert_eq!(mem::size_of::<NodeHeader<K, V, Aligned>>(), 32);\r\n}\r\n```", "closed_by": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67438/timeline", "performed_via_github_app": null, "state_reason": "completed"}