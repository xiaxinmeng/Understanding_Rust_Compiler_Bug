{"url": "https://api.github.com/repos/rust-lang/rust/issues/102048", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102048/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102048/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102048/events", "html_url": "https://github.com/rust-lang/rust/issues/102048", "id": 1379291651, "node_id": "I_kwDOAAsO6M5SNlID", "number": 102048, "title": "relating projection substs is unsound during coherence", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}, {"id": 5260993605, "node_id": "LA_kwDOAAsO6M8AAAABOZRkRQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/fixed-by-next-solver", "name": "fixed-by-next-solver", "color": "93CE7D", "default": false, "description": "Fixed by the next-generation trait solver, `-Ztrait-solver=next`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-09-20T11:50:52Z", "updated_at": "2023-03-21T15:25:40Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\n// This must fail coherence.\r\n//\r\n// Getting this to pass was fairly difficult, so here's an explanation\r\n// of what's happening:\r\n//\r\n// Normalizing projections currently tries to replace them with inference variables\r\n// while emitting a nested `Projection` obligation. This cannot be done if the projection\r\n// has bound variables which is the case here.\r\n//\r\n// So the projections stay until after normalization. When unifying two projections we\r\n// currently treat them as if they are injective, so we **incorrectly** unify their\r\n// substs. This means that coherence for the two impls ends up unifying `?T` and `?U`\r\n// as it tries to unify `<?T as WithAssoc1<'a>>::Assoc` with `<?U as WithAssoc1<'a>>::Assoc`.\r\n//\r\n// `impl1` therefore has the projection `<?T as WithAssoc2<'a>>::Assoc` and we have the\r\n// assumption `?T: for<'a> WithAssoc2<'a, Assoc = i32>` in the `param_env`, so we normalize\r\n// that to `i32`. We then try to unify `i32` from `impl1` with `u32` from `impl2` which fails,\r\n// causing coherence to consider these two impls distinct.\r\npub trait Trait<T> {}\r\n\r\npub trait WithAssoc1<'a> {\r\n    type Assoc;\r\n}\r\npub trait WithAssoc2<'a> {\r\n    type Assoc;\r\n}\r\n\r\n// impl 1\r\nimpl<T, U> Trait<for<'a> fn(<T as WithAssoc1<'a>>::Assoc, <U as WithAssoc2<'a>>::Assoc)> for (T, U)\r\nwhere\r\n    T: for<'a> WithAssoc1<'a> + for<'a> WithAssoc2<'a, Assoc = i32>,\r\n    U: for<'a> WithAssoc2<'a>,\r\n{\r\n}\r\n\r\n// impl 2\r\nimpl<T, U> Trait<for<'a> fn(<U as WithAssoc1<'a>>::Assoc, u32)> for (T, U) where\r\n    U: for<'a> WithAssoc1<'a>\r\n{\r\n}\r\n```\r\nthis currently compiles even though the following crate would mean that both impls overlap:\r\n```rust\r\nextern crate test1;\r\nuse test1::*;\r\n\r\nstruct Ty1;\r\nstruct Ty2;\r\n\r\nimpl WithAssoc1<'_> for Ty1 {\r\n    type Assoc = ();\r\n}\r\nimpl WithAssoc2<'_> for Ty1 {\r\n    type Assoc = i32;\r\n}\r\nimpl WithAssoc1<'_> for Ty2 {\r\n    type Assoc = ();\r\n}\r\nimpl WithAssoc2<'_> for Ty2 {\r\n    type Assoc = u32;\r\n}\r\n\r\nfn foo<T, U>()\r\nwhere\r\n    (T, U): Trait<for<'a> fn((), u32)>,\r\n{\r\n}\r\n\r\nfn main() {\r\n    foo::<Ty1, Ty2>();\r\n}\r\n```\r\nhowever, it seems like rustc generally has issues with both of these impls, so it actually believes that none of these impls apply :grin: see also #102047 where the first impl results in an ICE.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102048/timeline", "performed_via_github_app": null, "state_reason": null}