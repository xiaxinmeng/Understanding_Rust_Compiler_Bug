{"url": "https://api.github.com/repos/rust-lang/rust/issues/3915", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3915/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3915/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3915/events", "html_url": "https://github.com/rust-lang/rust/issues/3915", "id": 8086437, "node_id": "MDU6SXNzdWU4MDg2NDM3", "number": 3915, "title": "Add global data API, rewrite chan_from_global_ptr", "user": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2012-11-04T06:01:41Z", "updated_at": "2013-05-29T21:03:38Z", "closed_at": "2013-05-29T21:03:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be similar to the local data API, except that values are probably RWARCs for mutable data and ARCs for immutablel data.\n\nThen `chan_from_global_ptr` could be expressed in terms of the global data API, storing a pipe-based channel, which would get it away from using `core::comm`.\n\nlinenoise also needs a global mutex, which this would provide.\n\nThere's some question about where the constructor runs, but the API could just hand you a `RWARC<Option<T>>` and let you figure it out - presumably anybody using this API would encapsulate it in something else. The hard part is deciding when to do the cleanup and whether to allow destructors. The obvious thing I can think of is to have a weak task do it, and weak tasks have to know not to rely on global data during shutdown.\n\nLike the local data API it would be unsafe until we have a good way to name the key.\n\nRelated to #553\n", "closed_by": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3915/timeline", "performed_via_github_app": null, "state_reason": "completed"}