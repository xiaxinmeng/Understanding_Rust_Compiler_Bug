{"url": "https://api.github.com/repos/rust-lang/rust/issues/112641", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112641/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112641/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112641/events", "html_url": "https://github.com/rust-lang/rust/issues/112641", "id": 1757853042, "node_id": "I_kwDOAAsO6M5oxrVy", "number": 112641, "title": "Matching on Pythonic boolean symbols (`True`, `False`) should result in better diags", "user": {"login": "edward-shen", "id": 6173958, "node_id": "MDQ6VXNlcjYxNzM5NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6173958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edward-shen", "html_url": "https://github.com/edward-shen", "followers_url": "https://api.github.com/users/edward-shen/followers", "following_url": "https://api.github.com/users/edward-shen/following{/other_user}", "gists_url": "https://api.github.com/users/edward-shen/gists{/gist_id}", "starred_url": "https://api.github.com/users/edward-shen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edward-shen/subscriptions", "organizations_url": "https://api.github.com/users/edward-shen/orgs", "repos_url": "https://api.github.com/users/edward-shen/repos", "events_url": "https://api.github.com/users/edward-shen/events{/privacy}", "received_events_url": "https://api.github.com/users/edward-shen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2023-06-15T00:51:19Z", "updated_at": "2023-06-15T17:06:13Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Code\r\n\r\n```Rust\r\nfn main() {\r\n    match false {\r\n        True => println!(\"I am true!\"),\r\n        False => println!(\"I am false!\"),\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Current output\r\n\r\n```Shell\r\nCompiling playground v0.0.1 (/playground)\r\nwarning: unreachable pattern\r\n --> src/main.rs:4:9\r\n  |\r\n3 |         True => println!(\"I am true!\"),\r\n  |         ---- matches any value\r\n4 |         False => println!(\"I am false!\"),\r\n  |         ^^^^^ unreachable pattern\r\n  |\r\n  = note: `#[warn(unreachable_patterns)]` on by default\r\n\r\nwarning: unused variable: `True`\r\n --> src/main.rs:3:9\r\n  |\r\n3 |         True => println!(\"I am true!\"),\r\n  |         ^^^^ help: if this is intentional, prefix it with an underscore: `_True`\r\n  |\r\n  = note: `#[warn(unused_variables)]` on by default\r\n\r\nwarning: unused variable: `False`\r\n --> src/main.rs:4:9\r\n  |\r\n4 |         False => println!(\"I am false!\"),\r\n  |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_False`\r\n\r\nwarning: variable `True` should have a snake case name\r\n --> src/main.rs:3:9\r\n  |\r\n3 |         True => println!(\"I am true!\"),\r\n  |         ^^^^\r\n  |\r\n  = note: `#[warn(non_snake_case)]` on by default\r\nhelp: rename the identifier or convert it to a snake case raw identifier\r\n  |\r\n3 |         r#true => println!(\"I am true!\"),\r\n  |         ~~~~~~\r\n\r\nwarning: variable `False` should have a snake case name\r\n --> src/main.rs:4:9\r\n  |\r\n4 |         False => println!(\"I am false!\"),\r\n  |         ^^^^^\r\n  |\r\nhelp: rename the identifier or convert it to a snake case raw identifier\r\n  |\r\n4 |         r#false => println!(\"I am false!\"),\r\n  |         ~~~~~~~\r\n\r\nwarning: `playground` (bin \"playground\") generated 5 warnings (run `cargo fix --bin \"playground\"` to apply 2 suggestions)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.40s\r\n     Running `target/debug/playground`\r\n```\r\n\r\n\r\n### Desired output\r\n\r\n```Shell\r\nerror: `True` will unconditionally match both `true` and `false` values.\r\n --> src/main.rs:3:9\r\n  |\r\n3 |         True => println!(\"I am true!\"),\r\n  |         ^^^^\r\n  |\r\nnote: to pattern match on booleans in Rust, use `true` or `false` instead (note the capitalization)\r\n --> src/main.rs:3:9\r\n  |\r\n3 |         true => println!(\"I am true!\"),\r\n  |         ^^^^\r\n  |\r\n```\r\n\r\n\r\n### Rationale and extra context\r\n\r\nFor new Rustaceans coming from Python, none of the warnings actually explain the logical error here and do not indicate that there is almost certainly a logical bug going on here.\r\n\r\nI'm not sure if this is worthwhile to add a correctness lint (deny-by-default), but this is almost certainly will be confusing for folks who are expecting `True` to be a value, not a pattern.\r\n\r\n### Other cases\r\n\r\nThis should probably error if a boolean is matched on `False` as well.\r\n\r\n### Anything else?\r\n\r\nTested on Nightly version: 1.72.0-nightly (2023-06-12 df77afbcaf3365a32066)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112641/timeline", "performed_via_github_app": null, "state_reason": null}