{"url": "https://api.github.com/repos/rust-lang/rust/issues/86730", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86730/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86730/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86730/events", "html_url": "https://github.com/rust-lang/rust/issues/86730", "id": 933092414, "node_id": "MDU6SXNzdWU5MzMwOTI0MTQ=", "number": 86730, "title": "Non-terminals, e.g. expr, have diverged between parser and macro matcher", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 27424086, "node_id": "MDU6TGFiZWwyNzQyNDA4Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-parser", "name": "A-parser", "color": "f7e101", "default": false, "description": "Area: The parsing of Rust source code to an AST."}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 1606685737, "node_id": "MDU6TGFiZWwxNjA2Njg1NzM3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-let_chains", "name": "F-let_chains", "color": "f9c0cc", "default": false, "description": "`#![feature(let_chains)]`"}, {"id": 1622913351, "node_id": "MDU6TGFiZWwxNjIyOTEzMzUx", "url": "https://api.github.com/repos/rust-lang/rust/labels/lang-team-202x-edition", "name": "lang-team-202x-edition", "color": "fcbff6", "default": false, "description": "Something we may consider if we do another edition"}, {"id": 2306075829, "node_id": "MDU6TGFiZWwyMzA2MDc1ODI5", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-inline_const", "name": "F-inline_const", "color": "f9c0cc", "default": false, "description": "Inline constants (aka: const blocks, const expressions, anonymous constants)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2021-06-29T20:50:39Z", "updated_at": "2023-02-20T22:02:17Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Spawned off of PR #84364, based on discussion from lang team meeting ([minutes](https://github.com/rust-lang/lang-team/blob/master/minutes/2021-05-11.md#add-expr202x-macro-pattern-rust84364), [youtube](https://youtu.be/5hmVDeNc1t0?t=776)).\r\n\r\nThe meaning of the non-terminal \"expr\" according to the rustc parser has changed (or would like to change) from its meaning according to the current rustc macro matcher.\r\n\r\nConcretely:\r\n * The `inline_const` feature has already added a production roughly of the form `EXPR ::= const { EXPR }`\r\n * The `let_chains` feature may want (in the future) to add a production roughly of the form `COND_EXPR ::= let PAT = EXPR`, where `COND_EXPR` can occur as a sub-expression in the condition that drives an `if` expression or `while` statement.\r\n\r\nIn both cases, for backwards compatibility, the `expr` fragment specifier does not accept these new productions. Examples of the kinds of problems this causes follow:\r\n * [example for inline_const](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=3e7986fb779d5e8242d3844f3dc8ee5e),\r\n * [example for let_chains](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=b8be79e96d07ca2cd89772b52ee93687).\r\n\r\nIn other words, today you simply cannot write a macro fragment specifier denoting expressions that will match `const { EXPR }` or `let PAT = EXPR`, other than something like `$e:tt`, which would also match arbitrary token-trees, which won't catch errors as effectively as a more precise fragment specifier.\r\n\r\nSo, the main question this raises is: How should we resolve this divergence between the parser and macro-rules matcher?\r\n\r\n * E.g. we could add a new fragment specifier (e.g. `expr2024`) that covers the new forms and call it a day.\r\n * Or we could, at an edition boundary, change the meaning of the `expr` fragment specifier to cover the new forms. (This would probably need to be coupled with an addition of a new fragment specifier that would capture the *old* semantics.)\r\n * In any case, we need a clear summary of the grammar changes, so that we can understand what `expr` matches now that it did not before.\r\n * I think any change we make here would be well-served to be documented by writing down the actual grammar being implemented, or rather, the changes to the grammar.\r\n * We also may need a crater run.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86730/timeline", "performed_via_github_app": null, "state_reason": null}