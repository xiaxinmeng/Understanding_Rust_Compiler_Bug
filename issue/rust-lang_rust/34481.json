{"url": "https://api.github.com/repos/rust-lang/rust/issues/34481", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/34481/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/34481/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/34481/events", "html_url": "https://github.com/rust-lang/rust/issues/34481", "id": 162321400, "node_id": "MDU6SXNzdWUxNjIzMjE0MDA=", "number": 34481, "title": "Testing strategy for rustc_save_analysis", "user": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 120005, "node_id": "MDU6TGFiZWwxMjAwMDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-testsuite", "name": "A-testsuite", "color": "f7e101", "default": false, "description": "Area: The testsuite used to check the correctness of rustc"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 602425123, "node_id": "MDU6TGFiZWw2MDI0MjUxMjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-dev-tools", "name": "T-dev-tools", "color": "bfd4f2", "default": false, "description": "Relevant to the dev-tools subteam, which will review and decide on the PR/issue."}, {"id": 632580625, "node_id": "MDU6TGFiZWw2MzI1ODA2MjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-save-analysis", "name": "A-save-analysis", "color": "f7e101", "default": false, "description": "Area: saving results of analyses such as inference and borrowck results to a file."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-06-26T10:14:01Z", "updated_at": "2023-02-19T14:48:48Z", "closed_at": "2023-02-19T14:31:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Context\n\nThere is currently only one test for `save_analysis`. This test ensures that the compiler doesn't crash when dumping crate information as a text file. The lack of further tests allows bugs to be (re)introduced (e.g. https://github.com/rust-lang/rust/issues/33213) and makes it difficult to make modifications to the API with confidence. It is important to increase the reliability of `save_analysis`, since the future RLS will be implemented on top of it.\n## Requirements\n\nIdeally, we should come up with a clear testing architecture to deal with this problem. It would need to:\n- Run the compiler on a given program and extract the analysis information: a possible way to do this would be to write a struct that implements the `Dump` trait and collects all available information about a program in `Vec`s (see below).\n\n``` rust\nstruct Analysis {\n    pub struct_defs: Vec<StructData>,\n    pub trait_defs: Vec<TraitData>,\n    pub globs: Vec<GlobData>, \n    ...\n}\n```\n- Compare the obtained analysis information to previously defined criteria. We could start by testing names, spans and correct cross-referencing.\n## Integrating with rustc's testing system\n\nCurrently, the only test is in `src/test/run-make/save-analysis`. This makes sense for checking whether ICEs are triggered, but is probably unsuitable for the fine-grained testing approach described above.\n\nWe could follow the approach of rustdoc and the pretty printer. For instance, we could add a new directory (`src/test/save-analysis`) and put the tests there. We should probably begin with single-file tests.\n\nA possible way to encode the constraints of the tests is through comments, as shown below:\n\n``` rust\nfn foo() {\n// ^^^, function definition, name: foo\n}\n\nfn main() {\n// ^^^^, function definition, name: main\n    foo();\n // ^^^, function call, name: foo, references: 1.3-1.5\n}\n```\n\nNotation:\n- `^^^`: the span of the item.\n- `1.3-1.5`: a span beginning on the third column of the first line and ending on the fifth column of the first line.\n", "closed_by": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/34481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/34481/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}