{"url": "https://api.github.com/repos/rust-lang/rust/issues/63993", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63993/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63993/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63993/events", "html_url": "https://github.com/rust-lang/rust/issues/63993", "id": 486758330, "node_id": "MDU6SXNzdWU0ODY3NTgzMzA=", "number": 63993, "title": "NLL issue when using DerefMut to access fields through a Pin, causing multiple mutable borrow error", "user": {"login": "dialtone", "id": 23195, "node_id": "MDQ6VXNlcjIzMTk1", "avatar_url": "https://avatars.githubusercontent.com/u/23195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dialtone", "html_url": "https://github.com/dialtone", "followers_url": "https://api.github.com/users/dialtone/followers", "following_url": "https://api.github.com/users/dialtone/following{/other_user}", "gists_url": "https://api.github.com/users/dialtone/gists{/gist_id}", "starred_url": "https://api.github.com/users/dialtone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dialtone/subscriptions", "organizations_url": "https://api.github.com/users/dialtone/orgs", "repos_url": "https://api.github.com/users/dialtone/repos", "events_url": "https://api.github.com/users/dialtone/events{/privacy}", "received_events_url": "https://api.github.com/users/dialtone/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 867465703, "node_id": "MDU6TGFiZWw4Njc0NjU3MDM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-complete", "name": "NLL-complete", "color": "f799ea", "default": false, "description": "Working towards the \"valid code works\" goal"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-29T06:14:15Z", "updated_at": "2019-08-30T16:13:16Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The code below doesn't compile due to multiple mutable borrows, however the exact same code without the `std::pin::Pin` compiles fine actually. My expectation is however that the code would obviously compile fine in both cases.\r\n\r\n```rust \r\nuse std::pin::Pin;\r\nuse slab;\r\n\r\nstruct Entry {\r\n    complete: u64\r\n}\r\n\r\nstruct Ctx {}\r\nimpl Ctx {\r\n    fn new() -> Self {\r\n        Ctx{}\r\n    }\r\n    fn pread<T>(&mut self, _key: T) -> std::io::Result<()> {\r\n        Ok(())\r\n    }\r\n}\r\n\r\nstruct Foo {\r\n    ctx: Ctx,\r\n    handles: slab::Slab<Entry>\r\n}\r\nimpl Foo {\r\n    fn new() -> Self {\r\n        Foo {ctx: Ctx::new(),\r\n             handles: slab::Slab::with_capacity(20)}\r\n    }\r\n    \r\n    fn blah(mut self: Pin<&mut Self>) {\r\n        let v = self.handles.vacant_entry();\r\n        let key = v.key();\r\n        match self.ctx.pread(key) {\r\n            Ok(()) => {\r\n                v.insert(Entry{complete:123});\r\n            },\r\n            Err(_) => {\r\n                \r\n            }\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nfn main() {\r\n    Pin::new(&mut Foo::new()).blah();\r\n}\r\n```\r\n\r\nThe exception raised is:\r\n\r\n```rust\r\nerror[E0499]: cannot borrow `self` as mutable more than once at a time\r\n  --> src/main.rs:31:15\r\n   |\r\n29 |         let v = self.handles.vacant_entry();\r\n   |                 ---- first mutable borrow occurs here\r\n30 |         let key = v.key();\r\n31 |         match self.ctx.pread(key) {\r\n   |               ^^^^ second mutable borrow occurs here\r\n32 |             Ok(()) => {\r\n33 |                 v.insert(Entry{complete:123});\r\n   |                 - first borrow later used here\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nI'm able to get the code to compile also by creating additional scopes around the areas where I'm supposedly borrowing `self` like this:\r\n\r\n```rust\r\nlet key = {\r\n    let entry = self.handles.vacant_entry();\r\n    entry.key()\r\n};\r\nmatch self.ctx.pread(key) {\r\n    Ok(()) => {\r\n        *self.handles.get_mut(key).unwrap() =\r\n            Entry { complete: 123 };\r\n    }\r\n```\r\n\r\nAlthough obviously that's pretty awkward. I'm told that this could possibly be a bug in the NLL, but I'm pretty new to the language so I'm just reporting this with a short reproducible example.\r\n\r\nHope it helps.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63993/timeline", "performed_via_github_app": null, "state_reason": null}