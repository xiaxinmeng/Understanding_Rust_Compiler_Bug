{"url": "https://api.github.com/repos/rust-lang/rust/issues/82748", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82748/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82748/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82748/events", "html_url": "https://github.com/rust-lang/rust/issues/82748", "id": 821798938, "node_id": "MDU6SXNzdWU4MjE3OTg5Mzg=", "number": 82748, "title": "Arm thumbv6m binary size increase with dead code change (or from 1.50 to 1.51)", "user": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 55301954, "node_id": "MDU6TGFiZWw1NTMwMTk1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-Arm", "name": "O-Arm", "color": "6e6ec0", "default": false, "description": "Target: 32-bit Arm processors (armv6, armv7, thumb...), including 64-bit Arm in AArch32 state"}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-03-04T06:21:32Z", "updated_at": "2021-03-04T14:37:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've observed an unexpected increase in binary size in response to a [change](https://github.com/stm32-rs/stm32g0xx-hal/commit/77dace37908f281feb9432fc13874475d9dc0765) in a crate that we use. The change only adds new public methods, which we don't call, so all the changed code is effectively dead code, but still it results in a significant increase in our binary size. My guess is that the presence of this new code causes LLVM to make different inlining decisions, even though the new code isn't actually called anywhere.\r\n\r\nThis happens on 1.50.0. The increase (for a minimal binary included below) is from 932 bytes to 2164 bytes.\r\n\r\nSwitching from 1.50 to 1.51 (currently in beta) without the above change causes the same increase from 932 bytes to 2164 bytes.\r\n\r\nI was going to mark this as a stable to beta regression, but TBH, I think it's probably a pre-existing issue that just triggers in response to legitimate changes in library code. I expect that whatever changed between 1.50 and 1.51 is similar in nature to the code change above.\r\n\r\nI've tarred up a moderately minimal bit of code that reproduces this:\r\n\r\n[binary-size-increase.tar.gz](https://github.com/rust-lang/rust/files/6081091/binary-size-increase.tar.gz)\r\n\r\nTo reproduce, run the `./check-size` script contained within the tarball. You might need to `rustup target install thumbv6m-none-eabi` first.\r\n\r\nFor me, with current stable 1.50, this shows a change in binary size from 932 bytes to 2164 bytes:\r\n\r\n```\r\nSize prior to commit 77dace37908f281feb9432fc13874475d9dc0765\r\n-rwxr-xr-x 1 dml eng 932 Mar  4 16:39 a.bin\r\nSize after commit 77dace37908f281feb9432fc13874475d9dc0765\r\n-rwxr-xr-x 1 dml eng 2164 Mar  4 16:39 b.bin\r\n```\r\n\r\nIf I adjust the script to use 1.51, then I get 2164 bytes for both.\r\n\r\nLooking at the disassembly of each binary, it seems that the larger binary includes `compiler_builtins::int::specialized_div_rem::u64_div_rem`, where the smaller binary doesn't. `u64_div_rem` is called from `__udivmoddi4`, which is called from `__aeabi_uldivmod`. These are also absent from the smaller binary, but present and called from `MicroSecond::cycles` / `Delay::delay` in the larger binary.\r\n\r\nCargo.toml sets opt-level = \"s\". Similar results are observed with opt-level = \"z\".\r\n\r\nGiven that LTO is enabled, I'd have expected that dead code would be removed before inlining decisions were made, so I'm surprised that a change to code that isn't called would have this effect.\r\n\r\nIf there's anything we can do to help LLVM make more optimal decisions when optimizing for binary size, that'd be awesome, although I'm sure it's a pretty difficult problem.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82748/timeline", "performed_via_github_app": null, "state_reason": null}