{"url": "https://api.github.com/repos/rust-lang/rust/issues/46515", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46515/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46515/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46515/events", "html_url": "https://github.com/rust-lang/rust/issues/46515", "id": 279326126, "node_id": "MDU6SXNzdWUyNzkzMjYxMjY=", "number": 46515, "title": "Missing optimization around __rust_alloc and unknown functions if panic=unwind", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-12-05T10:40:37Z", "updated_at": "2022-03-28T02:58:19Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The following code gets optimized as expected:\r\n```rust\r\npub fn test() -> bool {\r\n    let x = &*Box::new(0);\r\n    let y = &*Box::new(0);\r\n    \r\n    if x as *const _ == y as *const _ {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n```\r\n[becomes](https://godbolt.org/g/fkwdR5)\r\n```\r\n; example::test\r\n; Function Attrs: nounwind uwtable\r\ndefine zeroext i1 @example::test() unnamed_addr #0 personality i32 (i32, i32, i64, %\"unwind::libunwind::_Unwind_Exception\"*, %\"unwind::libunwind::_Unwind_Context\"*)* @rust_eh_personality !dbg !18 {\r\n  ret i1 false, !dbg !22\r\n}\r\n```\r\n\r\nHowever, if I let the code call an unknown function instead of return, the optimization disappears:\r\n```rust\r\npub fn test(f: fn()) {\r\n    let x = &*Box::new(0);\r\n    let y = &*Box::new(0);\r\n    \r\n    if x as *const _ == y as *const _ {\r\n        f();\r\n    }\r\n}\r\n\r\n```\r\n[becomes](https://godbolt.org/g/y5acAz)\r\n```\r\n; example::test\r\n; Function Attrs: uwtable\r\ndefine void @example::test(void ()* nocapture nonnull %f) unnamed_addr #1 personality i32 (i32, i32, i64, %\"unwind::libunwind::_Unwind_Exception\"*, %\"unwind::libunwind::_Unwind_Context\"*)* @rust_eh_personality !dbg !36 {\r\n  %err.i.i.i10 = alloca %\"core::mem::ManuallyDrop<alloc::allocator::AllocErr>\", align 8\r\n  %_5.i.i.i.i11 = alloca %\"alloc::allocator::AllocErr\", align 8\r\n  %err.i.i.i = alloca %\"core::mem::ManuallyDrop<alloc::allocator::AllocErr>\", align 8\r\n  %_5.i.i.i.i = alloca %\"alloc::allocator::AllocErr\", align 8\r\n  %_9.sroa.9.i.i = alloca [16 x i8], align 8\r\n  %_9.sroa.9.0.sroa_idx9.i.i = getelementptr inbounds [16 x i8], [16 x i8]* %_9.sroa.9.i.i, i64 0, i64 0, !dbg !38\r\n  call void @llvm.lifetime.start(i64 16, i8* nonnull %_9.sroa.9.0.sroa_idx9.i.i), !dbg !38\r\n  %0 = getelementptr inbounds %\"core::mem::ManuallyDrop<alloc::allocator::AllocErr>\", %\"core::mem::ManuallyDrop<alloc::allocator::AllocErr>\"* %err.i.i.i, i64 0, i32 0, i64 0, !dbg !48\r\n  call void @llvm.lifetime.start(i64 24, i8* nonnull %0) #6, !dbg !48, !noalias !52\r\n  %1 = call i8* @__rust_alloc(i64 4, i64 4, i8* nonnull %0) #6, !dbg !55, !noalias !52\r\n  %2 = icmp eq i8* %1, null, !dbg !57\r\n  br i1 %2, label %bb3.i.i.i, label %\"_ZN35_$LT$alloc..boxed..Box$LT$T$GT$$GT$3new17he6f20be442f24a38E.exit\", !dbg !61\r\n\r\n[snip]\r\n```\r\n\r\nThat seems wrong, why should the optimization stop kicking in? The corresponding C++ code does not have any problem:\r\n```C++\r\n#include <memory>\r\n\r\nvoid test(void (*f)()) {\r\n    auto x = std::make_unique<int>(0);\r\n    auto y = std::make_unique<int>(0);\r\n\r\n    if (&*x == &*y) {\r\n        f();\r\n    }\r\n}\r\n```\r\n[becomes](https://godbolt.org/g/NqnDcd)\r\n```\r\n; Function Attrs: uwtable\r\ndefine void @test(void (*)())(void ()* nocapture) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) !dbg !1204 {\r\n  tail call void @llvm.dbg.value(metadata void ()* %0, i64 0, metadata !1208, metadata !1211), !dbg !1212\r\n  tail call void @llvm.dbg.value(metadata %\"class.std::unique_ptr\"* undef, i64 0, metadata !1209, metadata !1213), !dbg !1214\r\n  tail call void @llvm.dbg.value(metadata %\"class.std::unique_ptr\"* undef, i64 0, metadata !1209, metadata !1213), !dbg !1214\r\n  tail call void @llvm.dbg.value(metadata %\"class.std::unique_ptr\"* undef, i64 0, metadata !1210, metadata !1213), !dbg !1215\r\n  tail call void @llvm.dbg.value(metadata %\"class.std::unique_ptr\"* undef, i64 0, metadata !1210, metadata !1213), !dbg !1215\r\n  tail call void @llvm.dbg.value(metadata %\"class.std::unique_ptr\"* undef, i64 0, metadata !1209, metadata !1213), !dbg !1214\r\n  ret void, !dbg !1216\r\n}\r\n```\r\n(I briefly thought maybe unwinding is the problem, but C++ should have the same kind of unwinding here.)", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46515/timeline", "performed_via_github_app": null, "state_reason": null}