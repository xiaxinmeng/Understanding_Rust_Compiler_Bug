{"url": "https://api.github.com/repos/rust-lang/rust/issues/84621", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84621/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84621/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84621/events", "html_url": "https://github.com/rust-lang/rust/issues/84621", "id": 869145272, "node_id": "MDU6SXNzdWU4NjkxNDUyNzI=", "number": 84621, "title": "Use of step_by causes some optimizations to fail to engage", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-04-27T18:31:54Z", "updated_at": "2021-05-02T19:05:20Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nHere is some code I put on [godbolt](https://godbolt.org/z/8Wx483PET) \r\n\r\n```rust\r\npub fn foo(buf: &[u8]) -> u32 {\r\n    let mut result: u32 = 0;    \r\n    let mut iter = (0..buf.len()).step_by(2);\r\n    for index in iter {\r\n        let word: u16 = u16::from_ne_bytes([buf[index], buf[index + 1]]);\r\n        result += word as u32;\r\n    }\r\n    if buf.len() % 2 != 0 {\r\n        let word: u16 = u16::from_ne_bytes([buf[buf.len() - 1], 0]);\r\n        result += word as u32;\r\n    }\r\n    result\r\n}\r\n\r\n#[cfg(v2)]\r\npub fn foo(buf: &[u8]) -> u32 {\r\n    let mut result: u32 = 0;    \r\n    let mut iter = (0..buf.len()).step_by(2);\r\n    while let Some(index) = iter.next() {\r\n        let word: u16 = u16::from_ne_bytes([buf[index], buf[index + 1]]);\r\n        result += word as u32;\r\n    }\r\n    if buf.len() % 2 != 0 {\r\n        let word: u16 = u16::from_ne_bytes([buf[buf.len() - 1], 0]);\r\n        result += word as u32;\r\n    }\r\n    result\r\n}\r\n\r\n#[cfg(v3)]\r\npub fn foo(buf: &[u8]) -> u32 {\r\n    let mut result: u32 = 0;    \r\n    let mut iter = (0..buf.len());\r\n    while let Some(index) = iter.next() {\r\n        let word: u16 = u16::from_ne_bytes([buf[index], buf[index + 1]]);\r\n        result += word as u32;\r\n        iter.next();\r\n    }\r\n    if buf.len() % 2 != 0 {\r\n        let word: u16 = u16::from_ne_bytes([buf[buf.len() - 1], 0]);\r\n        result += word as u32;\r\n    }\r\n    result\r\n}\r\n```\r\n\r\n(I think all three of these have equivalent behavior.)\r\n\r\nI expected to see this happen: The assembly code for all three should be optimized about the same. (In an ideal world, they would get some auto-vectorization optimizations applied, but we can talk about that separately.)\r\n\r\nInstead, this happened: v1 yields  78 lines of assembly. v2 yields 72 lines of assembly. v3 yields 35 lines of assembly. So, the code generation is tighter for v3, which avoids using `step_by`.\r\n\r\nThis is with Rust v1.51, with options:\r\n```\r\n--crate-type lib -C opt-level=3  -C target-cpu=skylake\r\n```\r\n\r\n(The beta version of the compiler accessible on godbolt does a little better, with 66 lines of assembly on both v1 and v2. But still not matching up to v3.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84621/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84621/timeline", "performed_via_github_app": null, "state_reason": null}