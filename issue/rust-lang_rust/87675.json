{"url": "https://api.github.com/repos/rust-lang/rust/issues/87675", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87675/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87675/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87675/events", "html_url": "https://github.com/rust-lang/rust/issues/87675", "id": 957330329, "node_id": "MDU6SXNzdWU5NTczMzAzMjk=", "number": 87675, "title": "Disarm mem::uninitialized by having it initialize to an arbitrary valid value for each type", "user": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2021-07-31T22:20:54Z", "updated_at": "2022-07-28T03:56:19Z", "closed_at": "2022-07-28T03:56:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For a while it has been understood that the `mem::uninitialized` API is broken. Originally the intuitive understanding of this API was that it produced a fixed, arbitrary value. However (as extensively discussed elsewhere) uninitialized memory is not a \u201cfixed, arbitrary value\u201d, and that for nearly all types in Rust it is instantaneous undefined behavior for them to be uninitialized.\r\n\r\nWhat\u2019s worse, even initialized values can be insta-UB. Rust uses its understanding of valid bit patterns to perform layout optimizations whereby invalid values can be repurposed as enum tags, which is how `Option<&T>` can be only a single word. Thus even `mem::uninitialized`\u2019s sibling `mem::zeroed` is insta-UB when used with types like `&T`.\r\n\r\nAs a result, `mem::uninitialized` was deprecated and replaced with `mem::MaybeUninit`, which avoids the problems of the former. In addition, both `mem::zeroed` and `mem::uninitialized` were altered such that they will attempt to detect (and panic) when used on certain types: the former on types that must not be zero, and the latter on any types with invalid (defined) values.\r\n\r\nHowever, implementing these panic checks caused a great deal of breakage (which arguably is desirable for safety, although still extremely disruptive), and to reduce disruption the check is conservative instead of exhaustive (https://github.com/rust-lang/rust/issues/66151). Unfortunately, while improving the coverage of these checks will still leave `mem::zeroed` as perfectly usable, `mem::uninitialized` will be rendered all but unusable, as essentially all types cannot ever be in an uninitialized state.\r\n\r\nThis is a problem for legacy crates that were never migrated away from `mem::uninitialized`. However, there is a solution that both allows these legacy crates to compile while also avoiding the problem of invalid uninitialized values: **`mem::uninitialized` can initialize with a valid value**. This may seem contrary to the original intent of the API, but consider that the only reason to avoid initialization is performance, and that the choice is now between \u201cmy code doesn\u2019t compile\u201d, \u201cmy code contains undefined behavior\u201d, and \u201cmy code is slower\u201d; the latter is the most desirable outcome of the three.\u2028\u2028 This raises the question: what value to initialize with? PR https://github.com/rust-lang/rust/pull/87032 proposed the simplest option, which was to replace the innards of `mem::uninitialized` with `mem::zeroed`, however zero is the value that is most often used for niche optimizations, so this would still reject a lot of code.\r\n\r\nBut there is a more desirable alternative. Because Rust understands what values are *invalid* for a type\u2014it must, in order to perform niche optimizations\u2014it therefore should also understand which values are valid for a type. An intrinsic could be added to the compiler which, given a type, produces an arbitrary valid value of that type. This intrinsic could be used within `mem::uninitialized`, and the existing panic check could be removed. This would allow all code in the wild still using `mem::uninitialized` to compile, and would also avoid all insta-UB related to validity invariants.\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":null}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87675/timeline", "performed_via_github_app": null, "state_reason": "completed"}