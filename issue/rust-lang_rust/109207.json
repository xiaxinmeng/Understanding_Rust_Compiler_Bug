{"url": "https://api.github.com/repos/rust-lang/rust/issues/109207", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109207/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109207/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109207/events", "html_url": "https://github.com/rust-lang/rust/issues/109207", "id": 1626911296, "node_id": "I_kwDOAAsO6M5g-LJA", "number": 109207, "title": "Suggestion for variable lifetime when passed as argument for borrow fn with lifetime", "user": {"login": "chenasraf", "id": 167217, "node_id": "MDQ6VXNlcjE2NzIxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/167217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenasraf", "html_url": "https://github.com/chenasraf", "followers_url": "https://api.github.com/users/chenasraf/followers", "following_url": "https://api.github.com/users/chenasraf/following{/other_user}", "gists_url": "https://api.github.com/users/chenasraf/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenasraf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenasraf/subscriptions", "organizations_url": "https://api.github.com/users/chenasraf/orgs", "repos_url": "https://api.github.com/users/chenasraf/repos", "events_url": "https://api.github.com/users/chenasraf/events{/privacy}", "received_events_url": "https://api.github.com/users/chenasraf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-03-16T07:57:33Z", "updated_at": "2023-03-16T08:02:04Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "- [Playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=9b31809a1c50c68f4cb7c9a52000875c)\r\n\r\n### Code\r\n\r\n```Rust\r\nuse serde::{Deserialize, Serialize};\r\n\r\n#[derive(Serialize, Deserialize, Debug)]\r\npub struct DatabaseOperation<T: Serialize> {\r\n    pub time: String,\r\n    pub status: String,\r\n    pub result: Option<Vec<T>>,\r\n    pub detail: Option<String>,\r\n}\r\n\r\nstruct DbAccess2 {}\r\nimpl DbAccess2 {\r\n    async fn create<'l, T>(&self, data: Vec<String>, id: Option<String>) -> Result<T, String>\r\n    where\r\n        T: Serialize + Deserialize<'l> + Clone,\r\n    {\r\n        let query_res = get_query_res(\"SELECT * FROM users\").await?;\r\n        let s = query_res.as_str();\r\n        //      ^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\r\n        let res: Vec<DatabaseOperation<T>> = serde_json::from_str(s).unwrap();\r\n        //  ----------------------- argument requires that `query_res` is borrowed for `'l`\r\n        match &res[0].detail {\r\n            Some(ref error) => return Err(error.into()),\r\n            None => (),\r\n        };\r\n\r\n        match &res[0].result {\r\n            Some(ref result) => return Ok(result[0].clone()),\r\n            None => return Err(\"No result found.\".to_string()),\r\n        }\r\n    }\r\n}\r\n\r\nasync fn get_query_res(sql: &str) -> Result<String, String> {\r\n    Ok(\"[]\".to_string())\r\n}\r\n```\r\n\r\n\r\n### Current output\r\n\r\n```Shell\r\nCompiling playground v0.0.1 (/playground)\r\nerror[E0597]: `query_res` does not live long enough\r\n  --> src/lib.rs:18:17\r\n   |\r\n13 |     async fn create<'l, T>(&self, data: Vec<String>, id: Option<String>) -> Result<T, String>\r\n   |                     -- lifetime `'l` defined here\r\n...\r\n18 |         let s = query_res.as_str();\r\n19 |         //      ^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\r\n20 |         let res: Vec<DatabaseOperation<T>> = serde_json::from_str(s).unwrap();\r\n   |                                              ----------------------- argument requires that `query_res` is borrowed for `'l``\r\n```\r\n\r\n\r\n### Desired output\r\n\r\nFor most traits an alternative would probably not be statically known. A good suggestion might be to consider alternative traits with different lifetime arguments.\r\n\r\nIf it were known, I'd ideally be happy with:\r\n\r\n```Shell\r\n> Consider using `DeserializeOwned` instead\r\n```\r\n\r\n\r\n### Rationale and extra context\r\n\r\n_No response_\r\n\r\n### Other cases\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\nI'm aware this is more a user problem than a compiler problem. This looks like it's related to a specific library, but I think compiler errors might be more clear - the problem here was indeed the lifetime of the variable, but the message was not completely clear about the fact the lifetime problem could be addressed on the borrower side rather than fiddling with the actual variable (which is what I did for several hours before approaching this actual solution - change the type from `Deserialize<'l>` to `DeserializeOwned`", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109207/timeline", "performed_via_github_app": null, "state_reason": null}