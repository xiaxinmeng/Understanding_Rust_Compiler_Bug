{"url": "https://api.github.com/repos/rust-lang/rust/issues/101122", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101122/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101122/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101122/events", "html_url": "https://github.com/rust-lang/rust/issues/101122", "id": 1353333517, "node_id": "I_kwDOAAsO6M5QqjsN", "number": 101122, "title": "Tracking Issue for `vec::Drain{,Filter}::keep_rest`", "user": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-08-28T12:05:21Z", "updated_at": "2023-06-15T03:04:44Z", "closed_at": "2023-06-15T03:04:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(drain_keep_rest)]`\r\n\r\nThis is a tracking issue for `vec::Drain{,Filter}::keep_rest`, methods allowing to keep elements in a `Vec` after draining some of them.\r\n\r\n<!--\r\nInclude a short description of the feature.\r\n-->\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\n// mod alloc::vec\r\n\r\nimpl<T, A: Allocator> Drain<'_, T, A> {\r\n    pub fn keep_rest(self);\r\n}\r\n\r\nimpl<T, F, A: Allocator> DrainFilter<'_, T, F, A>\r\nwhere\r\n    F: FnMut(&mut T) -> bool,\r\n{\r\n    pub fn keep_rest(self);\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] Implementation: #95376\r\n- [ ] Final comment period (FCP)[^1]\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n- Just change the not-yet-stable Drop for DrainFilter to keep rest?\r\n  - Advantage: usually what you want (??)\r\n    - e.g. `.drain_filter(f).take(N)` works as expected\r\n  - Disadvantage: inconsistent with stable `Drop` for `Drain`\r\n  - If you want to remove rest (matching the current unstable behavior of `drain_filter`) then you'd need to write `.foreach(drop)` to explicitly drop all the rest of the range that matches the filter.\r\n- `&mut self` instead of `self`?\r\n  - If you're holding a `Drain` inside a struct and are operating on it from a `&mut self` method of the struct, `keep_rest(self)` is impossible to use. :(\r\n    - You'd want something like `mem::replace(&mut self.drain_filter, Vec::new().drain(..)).keep_rest()` but the borrow checker won't like that.\r\n    - Failing that, you'd need to change your `Drain` field to `Option<Drain>` and use `self.drain_filter.take().unwrap().keep_rest()` along with `unwrap()` everywhere else that the drain is used. Not good.\r\n  - We'd need to define behavior of calling .next() after .keep_rest(). Presumably one of:\r\n    - `.next()` returns `None`\r\n    - this is considered incorrect usage and so `.next()` `panic!`s\r\n    - `.keep_rest()` sets a flag inside the `Drain` which `Drop` will use to decide its behavior, and you're free to continue accessing iterator elements in between.\r\n  - Another alternative: add a `const EXHAUST_ON_DROP: bool = true` const generic parameter\r\n    - It's still impossible to set the flag without ownership\r\n    - You can store `&mut Drain<'a, T, A, false>` from the beginning\r\n    - Works better with iterator APIs, i.e.\r\n       ```rust\r\n       vec.drain_filter(f).keeping_rest().take(N).for_each(g);\r\n       ```\r\n       Instead of\r\n       ```rust\r\n       let mut iter = vec.drain_filter(f);\r\n       iter.by_ref().take(N).for_each(g);\r\n       iter.keep_rest()\r\n       ```\r\n\r\n[^1]: https://std-dev-guide.rust-lang.org/feature-lifecycle/stabilization.html\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101122/timeline", "performed_via_github_app": null, "state_reason": "completed"}