{"url": "https://api.github.com/repos/rust-lang/rfcs/issues/2844", "repository_url": "https://api.github.com/repos/rust-lang/rfcs", "labels_url": "https://api.github.com/repos/rust-lang/rfcs/issues/2844/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rfcs/issues/2844/comments", "events_url": "https://api.github.com/repos/rust-lang/rfcs/issues/2844/events", "html_url": "https://github.com/rust-lang/rfcs/issues/2844", "id": 545782471, "node_id": "MDU6SXNzdWU1NDU3ODI0NzE=", "number": 2844, "title": "Integer division method or operator that rounds up", "user": {"login": "kaan-atakan", "id": 56063979, "node_id": "MDQ6VXNlcjU2MDYzOTc5", "avatar_url": "https://avatars.githubusercontent.com/u/56063979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaan-atakan", "html_url": "https://github.com/kaan-atakan", "followers_url": "https://api.github.com/users/kaan-atakan/followers", "following_url": "https://api.github.com/users/kaan-atakan/following{/other_user}", "gists_url": "https://api.github.com/users/kaan-atakan/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaan-atakan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaan-atakan/subscriptions", "organizations_url": "https://api.github.com/users/kaan-atakan/orgs", "repos_url": "https://api.github.com/users/kaan-atakan/repos", "events_url": "https://api.github.com/users/kaan-atakan/events{/privacy}", "received_events_url": "https://api.github.com/users/kaan-atakan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211667901, "node_id": "MDU6TGFiZWwyMTE2Njc5MDE=", "url": "https://api.github.com/repos/rust-lang/rfcs/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the RFC."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2020-01-06T14:55:26Z", "updated_at": "2022-07-26T14:40:01Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Sometimes we want do divide an integer by another integer and round up the result to next integer. For example we might want to know how many write operations of a specific size are required to fully write a file of a specific size. \r\n\r\nRegular integer division in such scenarios will result in a value that is 1 below the desired result for all operations that involve a remainder and correct for those that don't. There are typically three methods used to calculate such a value: \r\n\r\n- cast to a floating point and subsequently round up\r\n- do the integer division, then check if the modulo produces a remainder and add one in that case\r\n- and finally (dividend + divisor - 1) / divisor\r\n\r\nThe final method while being efficient is not the most readable. Not only can it get very long if we use long and descriptive variable names like: \r\n\r\n`(data_file_size + max_write_length - 1) / max_write_length` \r\n\r\nbut it's not quite so obvious what we are doing. For this reason I suggest adding the operator `+/` so the same operation can be written as such:\r\n\r\n`data_file_size +/ max_write_length` or `dividend +/ divisor`\r\n\r\nAlthough such operations almost always only make sense for positive integers. One might consider also adding additional operators `-/`, `/-` and `-/-` to deal with situations where it is known before hand that, respectively, the dividend, divisor or both are negative to avoid unnecessary calls to the absolute value function. \r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rfcs/issues/2844/reactions", "total_count": 51, "+1": 49, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rfcs/issues/2844/timeline", "performed_via_github_app": null, "state_reason": null}