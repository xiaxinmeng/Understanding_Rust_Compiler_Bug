{"url": "https://api.github.com/repos/rust-lang/rust/issues/85214", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85214/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85214/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85214/events", "html_url": "https://github.com/rust-lang/rust/issues/85214", "id": 889688979, "node_id": "MDU6SXNzdWU4ODk2ODg5Nzk=", "number": 85214, "title": "Infer, Rather than Store, Binary Exponents when Float Parsing", "user": {"login": "Alexhuszagh", "id": 9440903, "node_id": "MDQ6VXNlcjk0NDA5MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/9440903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexhuszagh", "html_url": "https://github.com/Alexhuszagh", "followers_url": "https://api.github.com/users/Alexhuszagh/followers", "following_url": "https://api.github.com/users/Alexhuszagh/following{/other_user}", "gists_url": "https://api.github.com/users/Alexhuszagh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexhuszagh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexhuszagh/subscriptions", "organizations_url": "https://api.github.com/users/Alexhuszagh/orgs", "repos_url": "https://api.github.com/users/Alexhuszagh/repos", "events_url": "https://api.github.com/users/Alexhuszagh/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexhuszagh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 2139259423, "node_id": "MDU6TGFiZWwyMTM5MjU5NDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-floating-point", "name": "A-floating-point", "color": "f7e101", "default": false, "description": "Area: Floating point numbers and arithmetic"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-05-12T06:04:59Z", "updated_at": "2021-07-17T15:26:24Z", "closed_at": "2021-07-17T15:26:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Issue\r\n\r\nWhen float-parsing, [precomputed](https://github.com/rust-lang/rust/blob/ea3068efe44f11d379a28a812d4a78ab73a80137/library/core/src/num/dec2flt/table.rs#L8) powers-of-10, along with a binary exponent, are stored to scale the significant digits of an extended-precision (80-bit) floating-point type to the decimal exponent. The general appoach is as follows:\r\n\r\n```rust\r\n// Get our extended-precision float type from the significant digits and the decimal exponent.\r\nlet mantissa = \"...\";\r\nlet exp10 = \"...\";\r\nlet fp = Fp { f: mantissa, e: 0 };\r\n\r\n// Get the scaling factor, so we can multiply the two.\r\nlet i = exp10 - table::MIN_E;\r\nlet sig = table::POWERS.0[i as usize];\r\nlet e = table::POWERS.1[i as usize];\r\nlet pow10 = Fp { sig, e };\r\n\r\n// Multiply the two, then do float rounding.\r\nlet scaled = fp.mul(pow10);\r\n...\r\n```\r\n\r\nHowever, the binary exponents (stored in `table::POWERS.1`) do not need to be explicitly stored, and there is no significant performance penalty for doing so. We can replace the above code with the following:\r\n\r\n```rust\r\n// Get our extended-precision float type from the significant digits and the decimal exponent.\r\nlet mantissa = \"...\";\r\nlet exp10 = \"...\";\r\nlet fp = Fp { f: mantissa, e: 0 };\r\n\r\n// Get the scaling factor, so we can multiply the two.\r\nlet i = exp10 - table::MIN_E;\r\nlet sig = table::POWERS[i as usize];\r\nlet e = ((217706 * exp10 as i64) >> 16) - 63;\r\nlet pow10 = Fp { sig, e };\r\n\r\n// Multiply the two, then do float rounding.\r\nlet scaled = fp.mul(pow10);\r\n...\r\n```\r\n\r\n# Related Work\r\n\r\nThis is an [initial attempt](https://internals.rust-lang.org/t/implementing-a-fast-correct-float-parser/14670) as part of an ongoing effort to speed up float parsing in Rust, and aims to integrate algorithms I've implemented (currently used in nom and serde-json) back in the core library.\r\n\r\n# Binary Sizes\r\n\r\nOverall, when compiling with opt-levels of `s` or `z`, binary sizes were ~4KB smaller than before.\r\n\r\nThese were compiled on a target of `x86_64-unknown-linux-gnu`, running kernel version `5.11.16-100`, on a Rust version of `rustc 1.53.0-nightly (132b4e5d1 2021-04-13)`. The sizes reflect the binary sizes reported by `ls -sh`, both before and after running the `strip` command. The debug profile was used for opt-levels `0` and `1`, and was as follows:\r\n\r\n```toml\r\n[profile.dev]\r\nopt-level = \"...\"\r\ndebug = true\r\nlto = false\r\n```\r\n\r\nThe release profile was used for opt-levels `2`, `3`, `s` and `z` and was as follows:\r\n\r\n```toml\r\n[profile.release]\r\nopt-level = \"...\"\r\ndebug = false\r\ndebug-assertions = false\r\nlto = true\r\n```\r\n\r\n**core**\r\n\r\nThese are the binary sizes prior to making changes.\r\n\r\nopt-level|size|size(stripped)\r\n|:-:|:-:|:-:|\r\n0|3.6M|360K\r\n1|3.5M|316K\r\n2|1.3M|236K\r\n3|1.3M|248K\r\ns|1.3M|244K\r\nz|1.3M|248K\r\n\r\n**infer**\r\n\r\nThese are the binary sizes after making changes to infer the binary exponents.\r\n\r\nopt-level|size|size(stripped)\r\n|:-:|:-:|:-:|\r\n0|3.6M|360K\r\n1|3.5M|316K\r\n2|1.3M|236K\r\n3|1.3M|248K\r\ns|1.3M|244K\r\nz|1.3M|244K\r\n\r\n# Performance\r\n\r\nOverall, no significant change in performance was detected for any of the example floats.\r\n\r\nThese benchmarks were run on an `i7-6560U CPU @ 2.20GHz`, on a target of `x86_64-unknown-linux-gnu`, running kernel version `5.11.16-100`, on a Rust version of `rustc 1.53.0-nightly (132b4e5d1 2021-04-13)`. The performance CPU governor was used for all benchmarks, and were run on A/C power with only tmux and Sublime Text open for all benchmarks. The floats that were parsed are as follows:\r\n\r\n```rust\r\n// Example fast-path value.\r\nconst FAST: &str = \"1.2345e22\";\r\n// Example disguised fast-path value.\r\nconst DISGUISED: &str = \"1.2345e30\";\r\n// Example moderate path value: clearly not halfway `1 << 53`.\r\nconst MODERATE: &str = \"9007199254740992.0\";\r\n// Example exactly-halfway value `(1<<53) + 1`.\r\nconst HALFWAY: &str = \"9007199254740993.0\";\r\n// Example large, near-halfway value.\r\nconst LARGE: &str = \"8.988465674311580536566680e307\";\r\n// Example denormal, near-halfway value.\r\nconst DENORMAL: &str = \"8.442911973260991817129021e-309\";\r\n```\r\n\r\n**core**\r\n\r\nThese are the benchmarks prior to making changes.\r\n\r\n|float|speed|\r\n|:-:|:-:|\r\n|fast|32.952ns|\r\n|disguised|129.86ns|\r\n|moderate|237.08ns|\r\n|halfway|371.21ns|\r\n|large|287.81us|\r\n|denormal|122.36us|\r\n\r\n**infer**\r\n\r\nThese are the benchmarks after making changes to infer the binary exponent.\r\n\r\n|float|speed|\r\n|:-:|:-:|\r\n|fast|31.753ns|\r\n|disguised|124.73ns|\r\n|moderate|229.22ns|\r\n|halfway|319.39ns|\r\n|large|266.29us|\r\n|denormal|116.24us|\r\n\r\n# Correctness Concerns\r\n\r\nNone, since the inferred exponents can be trivially shown using the Python code below to be identical to those stored in the dec2flt table. This only uses integer multiplication that cannot overflow, and a fixed shr of 16 bits.\r\n\r\n# Magic Number Generation\r\n\r\nThe code to generate the magic number to convert the decimal exponent to the binary exponent is as follows, which verifies the magic number is valid over the entire range.\r\n\r\n```python\r\nimport math\r\n\r\ndef get_range(max_exp, bitshift):\r\n    den = 1 << bitshift\r\n    num = int(math.ceil(math.log2(10) * den))\r\n    for exp10 in range(0, max_exp):\r\n        exp2_exact = int(math.log2(10**exp10))\r\n        exp2_guess = num * exp10 // den\r\n        if exp2_exact != exp2_guess:\r\n            raise ValueError(f'{exp10}')\r\n    return num, den\r\n\r\nget_range(350, 16)    # (217706, 16)\r\n```\r\n\r\n# Sample Repository\r\n\r\nI've created a simple, minimal repository tracking these changes on [rust-dec2flt](https://github.com/Alexhuszagh/rust-dec2flt), which has a [core branch](https://github.com/Alexhuszagh/rust-dec2flt/tree/core) that is identical to Rust's current implementation in the core library. The [infer branch](https://github.com/Alexhuszagh/rust-dec2flt/tree/infer) contains the changes to infer the binary exponents rather than explicitly store them. I will also, if there is interest, gradually be making changes for the moderate and slow-path algorithms.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85214/timeline", "performed_via_github_app": null, "state_reason": "completed"}