{"url": "https://api.github.com/repos/rust-lang/rust/issues/29746", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29746/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29746/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29746/events", "html_url": "https://github.com/rust-lang/rust/issues/29746", "id": 116120129, "node_id": "MDU6SXNzdWUxMTYxMjAxMjk=", "number": 29746, "title": "Regression in macro hygiene for recursive macros", "user": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 262252628, "node_id": "MDU6TGFiZWwyNjIyNTI2Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta", "name": "regression-from-stable-to-beta", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to beta."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-11-10T14:43:54Z", "updated_at": "2015-11-12T01:14:47Z", "closed_at": "2015-11-12T01:14:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Possible regression in nightly from stable 1.4 with respect to the use of macro hygiene to recursively construct patterns and expressions.\n\nCode:\n\n```\n// zip!(a1,a2,a3,a4) is equivalent to:\n//  a1.zip(a2).zip(a3).zip(a4).map(|(((x1,x2),x3),x4)| (x1,x2,x3,x4))\nmacro_rules! zip {\n    // Entry point\n    ([$a:expr, $b:expr, $($rest:expr),*]) => {\n        zip!([$($rest),*], $a.zip($b), (x,y), [x,y])\n    };\n\n    // Intermediate steps to build the zipped expression, the match pattern, and\n    //  and the output tuple of the closure, using macro hygene to repeatedly\n    //  introduce new variables named 'x'.\n    ([$a:expr, $($rest:expr),*], $zip:expr, $pat:pat, [$($flat:expr),*]) => {\n        zip!([$($rest),*], $zip.zip($a), ($pat,x), [$($flat),*, x])\n    };\n\n    // Final step\n    ([], $zip:expr, $pat:pat, [$($flat:expr),+]) => {\n        $zip.map(|$pat| ($($flat),+))\n    };\n\n    // Comma\n    ([$a:expr], $zip:expr, $pat:pat, [$($flat:expr),*]) => {\n        zip!([$a,], $zip, $pat, [$($flat),*])\n    };\n}\n\nfn main() {\n    let p1 = vec![1i32,    2].into_iter();\n    let p2 = vec![\"10\",    \"20\"].into_iter();\n    let p3 = vec![100u16,  200].into_iter();\n    let p4 = vec![1000i64, 2000].into_iter();\n\n    let e = zip!([p1,p2,p3,p4]).collect::<Vec<_>>();\n    assert_eq!(e[0], (1i32,\"10\",100u16,1000i64));\n}\n```\n\n**On stable**:\n\nSuccessful build and run\n\n**On nightly**:\n\n```\n<anon>:14:42: 14:43 error: mismatched types:\n expected `i32`,\n    found `u16`\n(expected i32,\n    found u16) [E0308]\n<anon>:14       zip!([$($rest),*], $zip.zip($a), ($pat,x), [$($flat),*, x])\n                                                       ^\n<anon>:14:3: 14:62 note: in this expansion of zip! (defined in <anon>)\n<anon>:24:3: 24:40 note: in this expansion of zip! (defined in <anon>)\n<anon>:14:3: 14:62 note: in this expansion of zip! (defined in <anon>)\n<anon>:7:3: 7:47 note: in this expansion of zip! (defined in <anon>)\n<anon>:34:10: 34:29 note: in this expansion of zip! (defined in <anon>)\n<anon>:14:42: 14:43 help: see the detailed explanation for E0308\n<anon>:14:42: 14:43 error: mismatched types:\n expected `i64`,\n    found `i32`\n(expected i64,\n    found i32) [E0308]\n<anon>:14       zip!([$($rest),*], $zip.zip($a), ($pat,x), [$($flat),*, x])\n                                                   ^\n<anon>:14:3: 14:62 note: in this expansion of zip! (defined in <anon>)\n<anon>:24:3: 24:40 note: in this expansion of zip! (defined in <anon>)\n<anon>:14:3: 14:62 note: in this expansion of zip! (defined in <anon>)\n<anon>:7:3: 7:47 note: in this expansion of zip! (defined in <anon>)\n<anon>:34:10: 34:29 note: in this expansion of zip! (defined in <anon>)\n<anon>:14:42: 14:43 help: see the detailed explanation for E0308\n<std macros>:5:22: 5:33 error: mismatched types:\n expected `(i32, &str, u16, i32)`,\n    found `(i32, &str, u16, i64)`\n(expected i32,\n    found i64) [E0308]\n<std macros>:5 if ! ( * left_val == * right_val ) {\n                                    ^~~~~~~~~~~\n<anon>:35:2: 35:47 note: in this expansion of assert_eq! (defined in <std macros>)\n<std macros>:5:22: 5:33 help: see the detailed explanation for E0308\nerror: aborting due to 3 previous errors\nplaypen: application terminated with error code 101\n```\n\nNote: When all vecs in the example are the same type, the error does not occur.\n\nA simpler (but far more contrived) example can be found here: http://is.gd/EHUV1z\n\nA git bisect identified [this commit](https://github.com/rust-lang/rust/commit/40ce80484c636e525ac796a81f38a96c0ca8bf09) in [PR#28642](https://github.com/rust-lang/rust/pull/28642).\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29746/timeline", "performed_via_github_app": null, "state_reason": "completed"}