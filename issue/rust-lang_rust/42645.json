{"url": "https://api.github.com/repos/rust-lang/rust/issues/42645", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42645/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42645/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42645/events", "html_url": "https://github.com/rust-lang/rust/issues/42645", "id": 235706847, "node_id": "MDU6SXNzdWUyMzU3MDY4NDc=", "number": 42645, "title": "Avoid shipping duplicate artifacts in the host and target sysroot", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 289259951, "node_id": "MDU6TGFiZWwyODkyNTk5NTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-help-wanted", "name": "E-help-wanted", "color": "02E10C", "default": false, "description": "Call for participation: Help is requested to fix this issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2017-06-13T22:05:22Z", "updated_at": "2022-06-27T04:42:49Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "All released compilers have identical dynamic libraries in two locations. The locations on Linux are:\r\n\r\n* `$sysroot/lib/*.dylib`\r\n* `$sysroot/lib/rustlib/$target/lib/*.dylib`\r\n\r\nAll of these artifacts are byte-for-byte equivalent (they're just copies of one another). These duplicate artifacts inflate our installed size, inflate downloads, and cause weird bugs like https://github.com/rust-lang/rust/issues/39870. Although https://github.com/rust-lang/rust/issues/39870 is itself fixed it's [just a hack fix for now](https://github.com/rust-lang/rust/issues/39870#issuecomment-308141470) that would be ideally solved by fixing this issue!\r\n\r\nSome possible thoughts I personally have on this are:\r\n\r\n* Symlinks won't work because they don't work on Windows\r\n* Hard links may work here, but I'm not sure. This'd require a lot of updates to lots of tools (rust-installer, rustup, etc)\r\n* Simply not shipping one of these is going to be very difficult. `$sysroot/lib` is required for `rustc` itself to run correctly (that dir is typically in `LD_LIBRARY_PATH` or the equivalent) and `$sysroot/lib/rustlib/$target/lib` is where the compiler looks for target libraries. The compiler can't look in `$sysroot/lib` for libs as that's typically got a ton of libs on Unix systems.\r\n* The most plausible solution in my mind is to create our own pseudo-symlink file format. When assembling a sysroot this is what rustbuild itself would emit (instead of copying files) but it'd basically be a file with the literal contents `rustc-look-in-your-libdir`. That way something like `$sysroot/lib/rustlib/$target/lib/libstd.dylib` would exist but essentially be an empty file (not a valid dynamic library). Instead rustc would look at `$sysroot/lib/libstd.dylib` for that file instead.\r\n\r\nUnsure if I'm on the right track there, but hopefully can get discussion around this moving!", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42645/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42645/timeline", "performed_via_github_app": null, "state_reason": null}