{"url": "https://api.github.com/repos/rust-lang/rust/issues/65458", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65458/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65458/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65458/events", "html_url": "https://github.com/rust-lang/rust/issues/65458", "id": 507606197, "node_id": "MDU6SXNzdWU1MDc2MDYxOTc=", "number": 65458, "title": "abstracting over borrowed/owned IntoIterator in generic function isn't representatble", "user": {"login": "m4b", "id": 1920204, "node_id": "MDQ6VXNlcjE5MjAyMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1920204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m4b", "html_url": "https://github.com/m4b", "followers_url": "https://api.github.com/users/m4b/followers", "following_url": "https://api.github.com/users/m4b/following{/other_user}", "gists_url": "https://api.github.com/users/m4b/gists{/gist_id}", "starred_url": "https://api.github.com/users/m4b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m4b/subscriptions", "organizations_url": "https://api.github.com/users/m4b/orgs", "repos_url": "https://api.github.com/users/m4b/repos", "events_url": "https://api.github.com/users/m4b/events{/privacy}", "received_events_url": "https://api.github.com/users/m4b/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-16T04:28:31Z", "updated_at": "2019-11-17T16:21:48Z", "closed_at": "2019-11-17T16:21:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I don't know what to call this issue; I'm sure someone knows what this could be related to, if it's known, whether there's a solution, etc. Anyway, just posting here though:\r\n\r\nWhlie attempting to abstract over a borrow/owned iterator to make a refactor easier, and to benchmark the separate implementations, I effectively stumbled onto this issue where I cannot seem to find a possible way to write the `shape` function that abstracts over whether the iterator returns borrowed elements or not _and_ which both mutates, and iterates immutably, _then_ mutates again. Here is the playground which currently compiles: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f3d3ae669f256a8c4b73d60a67129132\r\n\r\nbut uncommenting the final pop makes it uncompilable, and I cannot find any sequence of lifetimes (with or without `for<'a>`) that make it work.\r\n\r\n```rust\r\nuse std::borrow::Borrow;\r\n\r\npub trait Shape {\r\n    fn pop(&mut self) -> Option<u32>;\r\n}\r\n\r\npub struct Foo {\r\n    data: Vec<u32>\r\n}\r\n\r\nimpl Shape for Foo {\r\n    fn pop(&mut self) -> Option<u32> {\r\n        self.data.pop()\r\n    }\r\n}\r\n\r\nimpl<'a> IntoIterator for &'a Foo {\r\n    type IntoIter = std::slice::Iter<'a, u32>;\r\n    type Item = &'a u32;\r\n    fn into_iter(self) -> Self::IntoIter {\r\n        self.data.iter()\r\n    }\r\n}\r\n\r\npub struct Bar {\r\n    data: Vec<u32>\r\n}\r\n\r\nimpl Shape for Bar {\r\n    fn pop(&mut self) -> Option<u32> {\r\n        self.data.pop()\r\n    }\r\n}\r\n\r\nimpl<'a> IntoIterator for &'a Bar {\r\n    type IntoIter = std::iter::Cloned<std::slice::Iter<'a, u32>>;\r\n    type Item = u32;\r\n    fn into_iter(self) -> Self::IntoIter {\r\n        self.data.iter().cloned()\r\n    }\r\n}\r\n\r\nfn shape<'b, S: 'b, L>( shape: &'b mut S ) -> bool \r\nwhere\r\n    S: Shape,\r\n    L: std::fmt::Debug + Borrow<u32>,\r\n\t&'b S: IntoIterator<Item = L>,\r\n{\r\n  let x = shape.pop();\r\n  {\r\n    for l in shape.into_iter()\r\n    {\r\n      let l = l.borrow();\r\n      println!(\"{:?}\", l);\r\n    }\r\n  }\r\n  // if this is uncommented, cannot find any combination of lifetimes that work\r\n  //let y = shape.pop();\r\n  true\r\n}\r\n\r\nfn main(){\r\n    let mut foo = Foo { data: vec![12, 13] };\r\n    let mut bar = Bar { data: vec![0, 1, 12, 13] };\r\n    shape(&mut foo);\r\n    shape(&mut bar);\r\n}\r\n```\r\n\r\nFrustratingly, removing the Borrow bound, and tying a `for<'a>` lifetime to the IntoIterator's items (thus forcing the iterator to be a borrow it's elements) allows it to compile: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0aca666c579c94cdb07dc3c4a27d8f3a\r\n\r\n```rust\r\nuse std::borrow::Borrow;\r\n\r\npub trait Shape {\r\n    fn size(&mut self) -> f64;\r\n}\r\n\r\npub struct Foo {\r\n    data: Vec<u32>\r\n}\r\n\r\nimpl Shape for Foo {\r\n    fn size(&mut self) -> f64 {\r\n        23.0\r\n    }\r\n}\r\n\r\nimpl<'a> IntoIterator for &'a Foo {\r\n    type IntoIter = std::slice::Iter<'a, u32>;\r\n    type Item = &'a u32;\r\n    fn into_iter(self) -> Self::IntoIter {\r\n        self.data.iter()\r\n    }\r\n}\r\n\r\nfn shape<S: Shape, >(\r\n        shape: &mut S,\r\n    ) -> bool \r\n\twhere for<'a> &'a S: IntoIterator<Item = &'a u32>,\r\n{\r\n  let size = shape.size(); // shape method\r\n  for l in shape.into_iter() {\r\n    let l = l.borrow();\r\n    println!(\"{:?}\", l);\r\n  }\r\n  let size = shape.size();\r\n  true\r\n}\r\n\r\nfn main(){\r\n    let mut foo = Foo { data: vec![12, 13] };\r\n    shape(&mut foo);\r\n}\r\n```", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65458/timeline", "performed_via_github_app": null, "state_reason": "completed"}