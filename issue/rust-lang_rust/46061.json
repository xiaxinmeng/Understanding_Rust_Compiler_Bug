{"url": "https://api.github.com/repos/rust-lang/rust/issues/46061", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46061/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46061/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46061/events", "html_url": "https://github.com/rust-lang/rust/issues/46061", "id": 274897162, "node_id": "MDU6SXNzdWUyNzQ4OTcxNjI=", "number": 46061, "title": "Type analysis on branches is inconsistent depending on whether an explicit return is used", "user": {"login": "illicitonion", "id": 1131704, "node_id": "MDQ6VXNlcjExMzE3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1131704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/illicitonion", "html_url": "https://github.com/illicitonion", "followers_url": "https://api.github.com/users/illicitonion/followers", "following_url": "https://api.github.com/users/illicitonion/following{/other_user}", "gists_url": "https://api.github.com/users/illicitonion/gists{/gist_id}", "starred_url": "https://api.github.com/users/illicitonion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/illicitonion/subscriptions", "organizations_url": "https://api.github.com/users/illicitonion/orgs", "repos_url": "https://api.github.com/users/illicitonion/repos", "events_url": "https://api.github.com/users/illicitonion/events{/privacy}", "received_events_url": "https://api.github.com/users/illicitonion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-17T15:18:18Z", "updated_at": "2017-11-21T16:36:39Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I would expect the following two snippets of code to behave the same:\r\n\r\n```rust\r\nextern crate futures;\r\nuse futures::future::{self, Future};\r\n\r\nfn main() {\r\n    println!(\"{}\", foo().wait().unwrap());\r\n}\r\n\r\nfn foo() -> Box<Future<Item=String, Error=String>> {\r\n    (|| {\r\n        if true {\r\n            Box::new(future::ok(\"foo\".to_owned()))\r\n        } else {\r\n            bar()\r\n        }   \r\n    })()\r\n}\r\n\r\nfn bar() -> Box<Future<Item=String, Error=String>> {\r\n    Box::new(future::ok(\"bar\".to_owned()))\r\n}\r\n```\r\n\r\n```rust\r\nextern crate futures;\r\nuse futures::future::{self, Future};\r\n\r\nfn main() {\r\n    println!(\"{}\", foo().wait().unwrap());\r\n}\r\n\r\nfn foo() -> Box<Future<Item=String, Error=String>> {\r\n    (|| {\r\n        if true {\r\n            return Box::new(future::ok(\"foo\".to_owned()));\r\n        } else {\r\n            bar()\r\n        }   \r\n    })()\r\n}\r\n\r\nfn bar() -> Box<Future<Item=String, Error=String>> {\r\n    Box::new(future::ok(\"bar\".to_owned()))\r\n}\r\n```\r\n\r\nBut in reality, the first snippet works fine, and the second fails because the typechecker cannot unify `std::boxed::Box<futures::FutureResult<std::string::String, _>>` with `std::boxed::Box<futures::Future<Item=std::string::String, Error=std::string::String>>`. Given that the typechecker *can* and *does* unify them in the first case, it seems it should be able to do the same in the second case. Whether I use an implicit or explicit return shouldn't change the type analysis being done.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46061/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46061/timeline", "performed_via_github_app": null, "state_reason": null}