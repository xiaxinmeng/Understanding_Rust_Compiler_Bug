{"url": "https://api.github.com/repos/rust-lang/rust/issues/67590", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67590/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67590/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67590/events", "html_url": "https://github.com/rust-lang/rust/issues/67590", "id": 542162987, "node_id": "MDU6SXNzdWU1NDIxNjI5ODc=", "number": 67590, "title": "[MIR-opt] Broken MIR for vec indexing with MIR inlining", "user": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-24T15:47:14Z", "updated_at": "2020-01-03T20:33:14Z", "closed_at": "2020-01-03T20:33:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\npub fn inxbuild(this: Vec<()>) {\r\n    for j in 0..1 {\r\n        this[j];\r\n    }\r\n}\r\n```\r\n\r\n```bash\r\n$ rustc -V\r\nrustc 1.42.0-nightly (9ae6cedb8 2019-12-23)\r\n$ rustc src/lib.rs -Zmir-opt-level=3 --crate-type lib --emit mir,llvm-ir --sysroot rustc_codegen_cranelift/build_sysroot/sysroot\r\nerror: internal compiler error: src/librustc_codegen_ssa/mir/operand.rs:122: not immediate: OperandRef(Pair((i64:  %33 = load i64, i64* %32, align 8), (i64:  %35 = load i64, i64* %34, align 8)) @ TyLayout { ty: std::ops::Range<usize>, details: LayoutDetails { variants: Single { index: 0 }, fields: Arbitrary { offsets: [Size { raw: 0 }, Size { raw: 8 }], memory_index: [0, 1] }, abi: ScalarPair(Scalar { value: Int(I64, false), valid_range: 0..=18446744073709551615 }, Scalar { value: Int(I64, false), valid_range: 0..=18446744073709551615 }), largest_niche: None, align: AbiAndPrefAlign { abi: Align { pow2: 3 }, pref: Align { pow2: 3 } }, size: Size { raw: 16 } } })\r\n```\r\n\r\nThe mir inliner doesn't seem to inline `<Vec<()> as Index<usize>>::index` when not using the patched sysroot of [rustc_codegen_cranelift](https://github.com/bjorn3/rustc_codegen_cranelift/), so this problem doesn't trigger with the normal sysroot.\r\n\r\n<details>\r\n\r\n<summary>Optimized MIR</summary>\r\n\r\n```rust\r\n// WARNING: This output format is intended for human consumers only\r\n// and is subject to change without notice. Knock yourself out.\r\nfn  inxbuild(_1: std::vec::Vec<()>) -> () {\r\n    debug this => _1;                    // in scope 0 at src/lib.rs:1:17: 1:21\r\n    let mut _0: ();                      // return place in scope 0 at src/lib.rs:1:32: 1:32\r\n    let mut _2: std::ops::Range<usize>;  // in scope 0 at src/lib.rs:2:14: 2:18\r\n    let mut _3: std::ops::Range<usize>;  // in scope 0 at src/lib.rs:2:14: 2:18\r\n    let mut _4: std::ops::Range<usize>;  // in scope 0 at src/lib.rs:2:14: 2:18\r\n    let mut _5: std::option::Option<usize>; // in scope 0 at src/lib.rs:2:14: 2:18\r\n    let mut _6: &mut std::ops::Range<usize>; // in scope 0 at src/lib.rs:2:14: 2:18\r\n    let mut _7: isize;                   // in scope 0 at src/lib.rs:2:9: 2:10\r\n    let _9: ();                          // in scope 0 at src/lib.rs:3:9: 3:16\r\n    let mut _10: &std::vec::Vec<()>;     // in scope 0 at src/lib.rs:3:9: 3:13\r\n    scope 1 {\r\n        debug iter => _4;                // in scope 1 at src/lib.rs:2:14: 2:18\r\n        scope 2 {\r\n            debug __next => _8;          // in scope 2 at src/lib.rs:2:14: 2:18\r\n            let _8: usize;               // in scope 2 at src/lib.rs:2:9: 2:10\r\n            scope 3 {\r\n                debug val => _8;         // in scope 3 at src/lib.rs:2:9: 2:10\r\n            }\r\n            scope 4 {\r\n                debug j => _8;           // in scope 4 at src/lib.rs:2:9: 2:10\r\n                scope 6 {\r\n                    debug self => _10;   // in scope 6 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/liballoc/vec.rs:1877:14: 1877:19\r\n                    debug index => _8;   // in scope 6 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/liballoc/vec.rs:1877:21: 1877:26\r\n                    let _11: &[()];      // in scope 6 at src/lib.rs:3:9: 3:16\r\n                    scope 7 {\r\n                        debug self => _11; // in scope 7 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/libcore/slice/mod.rs:2655:14: 2655:19\r\n                        debug index => _8; // in scope 7 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/libcore/slice/mod.rs:2655:21: 2655:26\r\n                        scope 8 {\r\n                            debug self => _8; // in scope 8 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/libcore/slice/mod.rs:2789:14: 2789:18\r\n                            debug slice => _11; // in scope 8 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/libcore/slice/mod.rs:2789:20: 2789:25\r\n                            let _12: &(); // in scope 8 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/libcore/slice/mod.rs:2656:9: 2656:26\r\n                            let mut _13: usize; // in scope 8 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/libcore/slice/mod.rs:2656:9: 2656:26\r\n                            let mut _14: bool; // in scope 8 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/libcore/slice/mod.rs:2656:9: 2656:26\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    scope 5 {\r\n        debug self => _3;                // in scope 5 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/libcore/iter/traits/collect.rs:247:18: 247:22\r\n    }\r\n\r\n    bb0: {\r\n        StorageLive(_2);                 // bb0[0]: scope 0 at src/lib.rs:2:14: 2:18\r\n        StorageLive(_3);                 // bb0[1]: scope 0 at src/lib.rs:2:14: 2:18\r\n        (_3.0: usize) = const 0usize;    // bb0[2]: scope 0 at src/lib.rs:2:14: 2:18\r\n                                         // ty::Const\r\n                                         // + ty: usize\r\n                                         // + val: Value(Scalar(0x0000000000000000))\r\n                                         // mir::Constant\r\n                                         // + span: src/lib.rs:2:14: 2:15\r\n                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\r\n        (_3.1: usize) = const 1usize;    // bb0[3]: scope 0 at src/lib.rs:2:14: 2:18\r\n                                         // ty::Const\r\n                                         // + ty: usize\r\n                                         // + val: Value(Scalar(0x0000000000000001))\r\n                                         // mir::Constant\r\n                                         // + span: src/lib.rs:2:17: 2:18\r\n                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\r\n        _2 = move _3;                    // bb0[4]: scope 5 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/libcore/iter/traits/collect.rs:248:9: 248:13\r\n        StorageDead(_3);                 // bb0[5]: scope 0 at src/lib.rs:2:17: 2:18\r\n        StorageLive(_4);                 // bb0[6]: scope 0 at src/lib.rs:2:14: 2:18\r\n        _4 = move _2;                    // bb0[7]: scope 0 at src/lib.rs:2:14: 2:18\r\n        goto -> bb1;                     // bb0[8]: scope 1 at src/lib.rs:2:5: 4:6\r\n    }\r\n\r\n    bb1: {\r\n        StorageLive(_5);                 // bb1[0]: scope 2 at src/lib.rs:2:14: 2:18\r\n        _6 = &mut _4;                    // bb1[1]: scope 2 at src/lib.rs:2:14: 2:18\r\n        _5 = const <std::ops::Range<usize> as std::iter::Iterator>::next(move _6) -> bb2; // bb1[2]: scope 2 at src/lib.rs:2:14: 2:18\r\n                                         // ty::Const\r\n                                         // + ty: for<'r> fn(&'r mut std::ops::Range<usize>) -> std::option::Option<<std::ops::Range<usize> as std::iter::Iterator>::Item> {<std::ops::Range<usize> as std::iter::Iterator>::next}\r\n                                         // + val: Value(Scalar(<ZST>))\r\n                                         // mir::Constant\r\n                                         // + span: src/lib.rs:2:14: 2:18\r\n                                         // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<usize>) -> std::option::Option<<std::ops::Range<usize> as std::iter::Iterator>::Item> {<std::ops::Range<usize> as std::iter::Iterator>::next}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb2: {\r\n        _7 = discriminant(_5);           // bb2[0]: scope 2 at src/lib.rs:2:9: 2:10\r\n        switchInt(move _7) -> [0isize: bb3, 1isize: bb5, otherwise: bb4]; // bb2[1]: scope 2 at src/lib.rs:2:9: 2:10\r\n    }\r\n\r\n    bb3: {\r\n        StorageDead(_5);                 // bb3[0]: scope 2 at src/lib.rs:2:17: 2:18\r\n        StorageDead(_4);                 // bb3[1]: scope 0 at src/lib.rs:4:5: 4:6\r\n        StorageDead(_2);                 // bb3[2]: scope 0 at src/lib.rs:2:17: 2:18\r\n        drop(_1) -> bb6;                 // bb3[3]: scope 0 at src/lib.rs:5:1: 5:2\r\n    }\r\n\r\n    bb4: {\r\n        unreachable;                     // bb4[0]: scope 2 at src/lib.rs:2:14: 2:18\r\n    }\r\n\r\n    bb5: {\r\n        _8 = ((_5 as Some).0: usize);    // bb5[0]: scope 2 at src/lib.rs:2:9: 2:10\r\n        StorageDead(_5);                 // bb5[1]: scope 2 at src/lib.rs:2:17: 2:18\r\n        StorageLive(_9);                 // bb5[2]: scope 4 at src/lib.rs:3:9: 3:16\r\n        _10 = &_1;                       // bb5[3]: scope 4 at src/lib.rs:3:9: 3:13\r\n        _11 = const <std::vec::Vec<()> as std::ops::Deref>::deref(move _10) -> bb7; // bb5[4]: scope 6 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/liballoc/vec.rs:1878:23: 1878:29\r\n                                         // ty::Const\r\n                                         // + ty: for<'r> fn(&'r std::vec::Vec<()>) -> &'r <std::vec::Vec<()> as std::ops::Deref>::Target {<std::vec::Vec<()> as std::ops::Deref>::deref}\r\n                                         // + val: Value(Scalar(<ZST>))\r\n                                         // mir::Constant\r\n                                         // + span: /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/liballoc/vec.rs:1878:23: 1878:29\r\n                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<()>) -> &'r <std::vec::Vec<()> as std::ops::Deref>::Target {<std::vec::Vec<()> as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb6: {\r\n        return;                          // bb6[0]: scope 0 at src/lib.rs:5:2: 5:2\r\n    }\r\n\r\n    bb7: {\r\n        _13 = Len((*_11));               // bb7[0]: scope 8 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/libcore/slice/mod.rs:2791:10: 2791:24\r\n        _14 = Lt(_8, _13);               // bb7[1]: scope 8 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/libcore/slice/mod.rs:2791:10: 2791:24\r\n        assert(move _14, \"index out of bounds: the len is move _13 but the index is _8\") -> bb8; // bb7[2]: scope 8 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/libcore/slice/mod.rs:2791:10: 2791:24\r\n    }\r\n\r\n    bb8: {\r\n        _12 = &(*_11)[_4];               // bb8[0]: scope 8 at /home/bjorn/Documenten/cg_clif/build_sysroot/sysroot_src/src/libcore/slice/mod.rs:2791:9: 2791:24\r\n        _9 = (*_12);                     // bb8[1]: scope 4 at src/lib.rs:3:9: 3:16\r\n        StorageDead(_9);                 // bb8[2]: scope 4 at src/lib.rs:3:16: 3:17\r\n        goto -> bb1;                     // bb8[3]: scope 1 at src/lib.rs:2:5: 4:6\r\n    }\r\n}\r\n```\r\n\r\n</details>\r\n\r\nThe `_12 = &(*_11)[_4];` is invalid because `_4` is of type `Range<usize>`.\r\n\r\n@rustbot modify label: +A-mir +C-bug +requires-nightly", "closed_by": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67590/timeline", "performed_via_github_app": null, "state_reason": "completed"}