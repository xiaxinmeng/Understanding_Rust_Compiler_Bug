{"url": "https://api.github.com/repos/rust-lang/rust/issues/58279", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58279/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58279/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58279/events", "html_url": "https://github.com/rust-lang/rust/issues/58279", "id": 407953472, "node_id": "MDU6SXNzdWU0MDc5NTM0NzI=", "number": 58279, "title": "target_feature doesn't trickle down to closures and internal fns", "user": {"login": "KyleSiefring", "id": 13542809, "node_id": "MDQ6VXNlcjEzNTQyODA5", "avatar_url": "https://avatars.githubusercontent.com/u/13542809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KyleSiefring", "html_url": "https://github.com/KyleSiefring", "followers_url": "https://api.github.com/users/KyleSiefring/followers", "following_url": "https://api.github.com/users/KyleSiefring/following{/other_user}", "gists_url": "https://api.github.com/users/KyleSiefring/gists{/gist_id}", "starred_url": "https://api.github.com/users/KyleSiefring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KyleSiefring/subscriptions", "organizations_url": "https://api.github.com/users/KyleSiefring/orgs", "repos_url": "https://api.github.com/users/KyleSiefring/repos", "events_url": "https://api.github.com/users/KyleSiefring/events{/privacy}", "received_events_url": "https://api.github.com/users/KyleSiefring/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}, {"id": 2046153791, "node_id": "MDU6TGFiZWwyMDQ2MTUzNzkx", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-target_feature_11", "name": "F-target_feature_11", "color": "f9c0cc", "default": false, "description": "target feature 1.1 RFC"}, {"id": 5223550385, "node_id": "LA_kwDOAAsO6M8AAAABN1kNsQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-target-feature", "name": "A-target-feature", "color": "f7e101", "default": false, "description": "Area: Enabling/disabling target features like AVX, Neon, etc."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-02-08T00:08:44Z", "updated_at": "2023-03-15T00:10:15Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Leaves poorly optimized assembly in its wake.\r\n\r\n```#[cfg(target_arch = \"x86\")]\r\nuse std::arch::x86::*;\r\n#[cfg(target_arch = \"x86_64\")]\r\nuse std::arch::x86_64::*;\r\n\r\n// Creates non inlined calls to intrinsics\r\n#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\r\n#[target_feature(enable = \"avx2\")]\r\npub unsafe fn foo(input: &[__m256]) -> f32 {\r\n    let accum = |val: __m256| {\r\n        let roll = _mm256_setr_epi32(1, 2, 3, 4, 5, 6, 7, 0);\r\n        let mut sum = val;\r\n        let mut tmp = _mm256_permutevar8x32_ps(val, roll);\r\n        for i in 0..7 {\r\n            sum = _mm256_add_ps(tmp, sum);\r\n            tmp = _mm256_permutevar8x32_ps(tmp, roll);\r\n        }\r\n        sum\r\n    };\r\n    // Once we call a complex internal closure or fn multiple\r\n    //  times, we find that the compiler hasn't told them that\r\n    //  they can inline or use avx2 intrinsics. Not the sharpest.\r\n    let sum1 = accum(input[0]);\r\n    let sum2 = accum(input[1]);\r\n    _mm256_cvtss_f32(sum1) + _mm256_cvtss_f32(sum2)\r\n}\r\n\r\n// Works as expected\r\n#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\r\n#[target_feature(enable = \"avx2\")]\r\npub unsafe fn bar(input: &[__m256]) -> f32 {\r\n    // When we pull this tool out of the shed every thing works\r\n    #[target_feature(enable = \"avx2\")]\r\n    unsafe fn accum(val: __m256) -> __m256 {\r\n        let roll = _mm256_setr_epi32(1, 2, 3, 4, 5, 6, 7, 0);\r\n        let mut sum = val;\r\n        let mut tmp = _mm256_permutevar8x32_ps(val, roll);\r\n        for i in 0..7 {\r\n            sum = _mm256_add_ps(tmp, sum);\r\n            tmp = _mm256_permutevar8x32_ps(tmp, roll);\r\n        }\r\n        sum\r\n    }\r\n    let sum1 = accum(input[0]);\r\n    let sum2 = accum(input[1]);\r\n    _mm256_cvtss_f32(sum1) + _mm256_cvtss_f32(sum2)\r\n}\r\n```\r\n\r\nhttps://rust.godbolt.org/z/cIr7qS\r\n\r\nI found this bug by triggering this one with closures. I wasn't able to trigger it from godbolt. I'm using the latest stable, so if I copied the code in it would work (as in not work).\r\nhttps://github.com/rust-lang/rust/issues/50154\r\n\r\nMaking a separate issue since this one is a performance bug.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58279/timeline", "performed_via_github_app": null, "state_reason": null}