{"url": "https://api.github.com/repos/rust-lang/rust/issues/84276", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84276/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84276/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84276/events", "html_url": "https://github.com/rust-lang/rust/issues/84276", "id": 860485004, "node_id": "MDU6SXNzdWU4NjA0ODUwMDQ=", "number": 84276, "title": "Aggressive loop unrolling causes codegen to stall", "user": {"login": "mrene", "id": 254443, "node_id": "MDQ6VXNlcjI1NDQ0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrene", "html_url": "https://github.com/mrene", "followers_url": "https://api.github.com/users/mrene/followers", "following_url": "https://api.github.com/users/mrene/following{/other_user}", "gists_url": "https://api.github.com/users/mrene/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrene/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrene/subscriptions", "organizations_url": "https://api.github.com/users/mrene/orgs", "repos_url": "https://api.github.com/users/mrene/repos", "events_url": "https://api.github.com/users/mrene/events{/privacy}", "received_events_url": "https://api.github.com/users/mrene/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1168029555, "node_id": "MDU6TGFiZWwxMTY4MDI5NTU1", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-hang", "name": "I-hang", "color": "e10c02", "default": false, "description": "Issue: The compiler never terminates, due to infinite loops, deadlock, livelock, etc."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-04-17T18:24:11Z", "updated_at": "2021-10-09T18:06:25Z", "closed_at": "2021-10-09T18:06:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I stumbled upon this while benchmarking some code with criterion, by increasing the size of the array, rustc will take exponentially more time to complete.\r\n\r\nThis seems triggered by their `black_box` function which prevents constants from being propagated into the benchmark code.\r\n\r\nIn this example, the generated llvm-ir shows the loop as being completely unrolled, so that the number of instructions grows linearly with the number of elements in the array (on my machine, a size of 5120 takes 1 second to compile, with 51200 takes 74 seconds).\r\n\r\nHere is the number of lines in the generated llvm ir:\r\nwith 512: \r\n2212 target/release/deps/willitstall-735ef376f151c6b8.ll\r\nwith 5120: \r\n15724 target/release/deps/willitstall-735ef376f151c6b8.ll\r\nwith 51200: \r\n153964 target/release/deps/willitstall-735ef376f151c6b8.ll\r\n\r\n### Code\r\n\r\n```Rust\r\n/// This is the black_box function from criterion\r\n/// https://docs.rs/criterion/0.3.4/src/criterion/lib.rs.html#174-180\r\npub fn black_box<T>(dummy: T) -> T {\r\n    unsafe {\r\n        let ret = std::ptr::read_volatile(&dummy);\r\n        std::mem::forget(dummy);\r\n        ret\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let x = black_box([1f32; 51200]);\r\n    let dist: f32 = x.iter().zip(x.iter()).map(|(&xe, &ye)| xe * ye).sum();\r\n    dbg!(dist);\r\n}\r\n```\r\n\r\n### Investigation\r\nRecording the execution with `perf` shows the time is mostly spent inside `llvm::X86TargetLowering::PerformDAGCombine` and `(anonymous namespace)::DAGCombiner::visitSTORE` \r\n\r\nRunning (this example) with `-Z time-passes` yields:\r\n```\r\ntime:   0.004; rss:  130MB ->  130MB (   +1MB)  serialize_dep_graph\r\ntime:   0.002; rss:  130MB ->   93MB (  -38MB)  free_global_ctxt\r\ntime:  74.582; rss:  117MB ->  192MB (  +74MB)  LLVM_passes(crate)\r\ntime:   0.000; rss:  191MB ->  191MB (   +0MB)  join_worker_thread\r\ntime:   0.002; rss:  191MB ->  162MB (  -30MB)  copy_all_cgu_workproducts_to_incr_comp_cache_dir\r\ntime:  74.561; rss:   93MB ->  160MB (  +67MB)  finish_ongoing_codegen\r\ntime:   0.000; rss:  155MB ->  155MB (   -1MB)  llvm_dump_timing_file\r\ntime:   0.000; rss:  155MB ->  153MB (   -1MB)  serialize_work_products\r\ntime:   0.000; rss:  153MB ->  147MB (   -6MB)  incr_comp_finalize_session_directory\r\ntime:   0.000; rss:  146MB ->  143MB (   -3MB)  link_binary_check_files_are_writeable\r\ntime:   0.155; rss:  133MB ->   85MB (  -48MB)  run_linker\r\ntime:   0.001; rss:   85MB ->   85MB (   +0MB)  link_binary_remove_temps\r\ntime:   0.157; rss:  146MB ->   85MB (  -61MB)  link_binary\r\ntime:   0.157; rss:  146MB ->   85MB (  -61MB)  link_crate\r\ntime:  74.719; rss:   93MB ->   85MB (   -8MB)  link\r\ntime:  74.822; rss:   35MB ->   70MB (  +35MB)  total\r\n    Finished dev [unoptimized + debuginfo] target(s) in 1m 15s\r\n```\r\n\r\n\r\n### Meta\r\nrustc 1.51.0 (2fd73fabe 2021-03-23)\r\nrustc 1.52.0-beta.3 (215738137 2021-04-06)\r\nrustc 1.53.0-nightly (b0c818c5e 2021-04-16)\r\n\r\n```\r\n$ rustc --print cfg\r\ntarget_arch=\"x86_64\"\r\ntarget_endian=\"little\"\r\ntarget_env=\"gnu\"\r\ntarget_family=\"unix\"\r\ntarget_feature=\"fxsr\"\r\ntarget_feature=\"sse\"\r\ntarget_feature=\"sse2\"\r\ntarget_os=\"linux\"\r\ntarget_pointer_width=\"64\"\r\ntarget_vendor=\"unknown\"\r\nunix\r\n```", "closed_by": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84276/timeline", "performed_via_github_app": null, "state_reason": "completed"}