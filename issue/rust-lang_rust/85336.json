{"url": "https://api.github.com/repos/rust-lang/rust/issues/85336", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85336/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85336/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85336/events", "html_url": "https://github.com/rust-lang/rust/issues/85336", "id": 892496333, "node_id": "MDU6SXNzdWU4OTI0OTYzMzM=", "number": 85336, "title": "Undefined behavior allowed in associated constants", "user": {"login": "ATiltedTree", "id": 47182955, "node_id": "MDQ6VXNlcjQ3MTgyOTU1", "avatar_url": "https://avatars.githubusercontent.com/u/47182955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ATiltedTree", "html_url": "https://github.com/ATiltedTree", "followers_url": "https://api.github.com/users/ATiltedTree/followers", "following_url": "https://api.github.com/users/ATiltedTree/following{/other_user}", "gists_url": "https://api.github.com/users/ATiltedTree/gists{/gist_id}", "starred_url": "https://api.github.com/users/ATiltedTree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ATiltedTree/subscriptions", "organizations_url": "https://api.github.com/users/ATiltedTree/orgs", "repos_url": "https://api.github.com/users/ATiltedTree/repos", "events_url": "https://api.github.com/users/ATiltedTree/events{/privacy}", "received_events_url": "https://api.github.com/users/ATiltedTree/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-05-15T17:12:22Z", "updated_at": "2021-07-30T13:01:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nconst F: &'static u8 = unsafe { std::mem::transmute::<_,_>(0xbeefbeef as *const u8) };\r\n\r\nfn main() {}\r\n```\r\n\r\nI expected to see this happen:\r\n\r\nIt should compile and `F` should be a reference to the `u8` at `0xbeefbeef`.\r\n\r\nInstead, this happened:\r\n\r\nIt doesn't compile throwing this error:\r\n```\r\nerror[E0080]: it is undefined behavior to use this value\r\n --> con.rs:1:1\r\n  |\r\n1 | const F: &'static u8 = unsafe { std::mem::transmute::<_,_>(0xbeefbeef as *const u8) };\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (created from integer)\r\n  |\r\n  = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\r\n  = note: the raw bytes of the constant (size: 8, align: 8) {\r\n              ef be ef be 00 00 00 00                         \u2502 ........\r\n          }\r\n```\r\n\r\nNow the more interesting part:\r\n\r\nWhen turning the constant into a associated constant like so:\r\n```rust\r\nstruct Ex;\r\n\r\nimpl Ex {\r\n    const F: &'static u8 = unsafe { std::mem::transmute::<_,_>(0xbeefbeef as *const u8) };\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nThe code now compiles and no error is thrown.\r\n\r\n---\r\n\r\nIn addition to this weird behavior, I think\r\n```rust\r\nconst F: &'static u8 = unsafe { std::mem::transmute::<_,_>(0xbeefbeef as *const u8) };\r\n```\r\n\r\nshouldn't be considered undefined behavior as it's just creating a static reference from a pointer. And on my embedded platform this pointer (`0xbeefbeef` is just an example) is always considered valid. Thus i want to create a safe reference from it to make accessing the memory easier (e.g. not requiring `unsafe` and derefs everywhere).\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrrustc 1.54.0-nightly (1025db84a 2021-05-14)\r\nbinary: rustc\r\ncommit-hash: 1025db84a68b948139b5adcd55da31bce32da8f3\r\ncommit-date: 2021-05-14\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.54.0-nightly\r\nLLVM version: 12.0.1\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85336/timeline", "performed_via_github_app": null, "state_reason": null}