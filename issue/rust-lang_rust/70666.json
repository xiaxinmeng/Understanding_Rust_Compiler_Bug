{"url": "https://api.github.com/repos/rust-lang/rust/issues/70666", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70666/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70666/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70666/events", "html_url": "https://github.com/rust-lang/rust/issues/70666", "id": 592124682, "node_id": "MDU6SXNzdWU1OTIxMjQ2ODI=", "number": 70666, "title": "Docker layer cache seems to not recognize changes in Rust binaries", "user": {"login": "Svedrin", "id": 946488, "node_id": "MDQ6VXNlcjk0NjQ4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/946488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Svedrin", "html_url": "https://github.com/Svedrin", "followers_url": "https://api.github.com/users/Svedrin/followers", "following_url": "https://api.github.com/users/Svedrin/following{/other_user}", "gists_url": "https://api.github.com/users/Svedrin/gists{/gist_id}", "starred_url": "https://api.github.com/users/Svedrin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Svedrin/subscriptions", "organizations_url": "https://api.github.com/users/Svedrin/orgs", "repos_url": "https://api.github.com/users/Svedrin/repos", "events_url": "https://api.github.com/users/Svedrin/events{/privacy}", "received_events_url": "https://api.github.com/users/Svedrin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-01T18:40:39Z", "updated_at": "2020-04-01T20:02:12Z", "closed_at": "2020-04-01T19:27:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a somewhat weird issue that I can't put my finger on. Since I have to start _somewhere_, I might as well start by posting an issue, so here goes.\r\n\r\nI'm running into issues where, when I build a Docker image by `COPY`ing a Rust binary into a container, Docker's layer cache does not seem to recognize when that binary changes, and just re-uses last time's image. While this could easily be an error in my setup or a bug in Docker, I have only ever experienced this issue with Rust binaries so far, thus I'm posting here first.\r\n\r\n# Steps to reproduce\r\n\r\nStart by creating a Rust project:\r\n\r\n```\r\n~/tmp# cargo init --bin hello\r\n     Created binary (application) project\r\n~/tmp# cd hello/\r\n~/tmp/hello# cargo build --release\r\n   Compiling hello v0.1.0 (/home/mz1030/tmp/hello)\r\n    Finished release [optimized] target(s) in 1.00s\r\n```\r\n\r\nThis gives you a binary. Note its `sha1sum`:\r\n\r\n```\r\n~/tmp/hello# sha1sum target/release/hello\r\n0b9e0dc2dc113b052232b4f5a04c57ef76ec1ce6  target/release/hello\r\n```\r\n\r\nNow we create a Dockerfile, build an image from it and validate the checksum:\r\n\r\n```\r\n~/tmp/hello# cat Dockerfile\r\nFROM alpine:latest\r\nRUN apk add --no-cache dumb-init\r\n\r\nCOPY target/release/hello /bin/hello\r\n\r\nENTRYPOINT [\"dumb-init\", \"--\"]\r\nCMD [ \"/bin/hello\" ]\r\n\r\n~/tmp/hello# docker build -t hello:latest .\r\nSending build context to Docker daemon  4.071MB\r\nStep 1/5 : FROM alpine:latest\r\nlatest: Pulling from library/alpine\r\naad63a933944: Pull complete \r\nDigest: sha256:b276d875eeed9c7d3f1cfa7edb06b22ed22b14219a7d67c52c56612330348239\r\nStatus: Downloaded newer image for alpine:latest\r\n ---> a187dde48cd2\r\nStep 2/5 : RUN apk add --no-cache dumb-init\r\n ---> Running in 9abea7ac6fac\r\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main/x86_64/APKINDEX.tar.gz\r\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.11/community/x86_64/APKINDEX.tar.gz\r\n(1/1) Installing dumb-init (1.2.2-r1)\r\nExecuting busybox-1.31.1-r9.trigger\r\nOK: 6 MiB in 15 packages\r\nRemoving intermediate container 9abea7ac6fac\r\n ---> f171a2518ecd\r\nStep 3/5 : COPY target/release/hello /bin/hello\r\n ---> fc04d81ee463\r\nStep 4/5 : ENTRYPOINT [\"dumb-init\", \"--\"]\r\n ---> Running in 5037de0bd3a7\r\nRemoving intermediate container 5037de0bd3a7\r\n ---> 6d077c0dfb27\r\nStep 5/5 : CMD [ \"/bin/hello\" ]\r\n ---> Running in c7e877c847c2\r\nRemoving intermediate container c7e877c847c2\r\n ---> d6f396bd4b13\r\nSuccessfully built d6f396bd4b13\r\nSuccessfully tagged hello:latest\r\n```\r\n\r\n```\r\n~/tmp/hello# docker run --rm -it hello:latest sha1sum /bin/hello\r\n0b9e0dc2dc113b052232b4f5a04c57ef76ec1ce6  /bin/hello\r\n```\r\n\r\nThat's a match, so far so good.\r\n\r\nNow we change something in the binary (just edit it to say something other than `Hello World`), rebuild the binary and see that its hash changed:\r\n\r\n```\r\n~/tmp/hello# vi src/main.rs\r\n~/tmp/hello# cargo build --release\r\n   Compiling hello v0.1.0 (/home/mz1030/tmp/hello)\r\n    Finished release [optimized] target(s) in 0.36s\r\n~/tmp/hello# sha1sum target/release/hello\r\n56181859ee1d7ad861aa5f18e4daf84a5e3c056c  target/release/hello\r\n```\r\n\r\nWe see the sha1sum has changed. Now we rebuild the Docker image. The layer cache re-uses the old images for any steps that haven't changed: Thus\r\nwhen installing `dumb-init`, it'll notice that it has an image available where it did that already and just use that. However the `COPY` instruction\r\nshould notice that the checksum of the file that it's copying has changed, and build a new image rather than re-using the old one. So, here goes:\r\n\r\n```\r\n~/tmp/hello# docker build -t hello:latest .\r\nSending build context to Docker daemon  4.071MB\r\nStep 1/5 : FROM alpine:latest\r\n ---> a187dde48cd2\r\nStep 2/5 : RUN apk add --no-cache dumb-init\r\n ---> Using cache\r\n ---> f171a2518ecd\r\nStep 3/5 : COPY target/release/hello /bin/hello\r\n ---> Using cache\r\n ---> fc04d81ee463\r\nStep 4/5 : ENTRYPOINT [\"dumb-init\", \"--\"]\r\n ---> Using cache\r\n ---> 6d077c0dfb27\r\nStep 5/5 : CMD [ \"/bin/hello\" ]\r\n ---> Using cache\r\n ---> d6f396bd4b13\r\nSuccessfully built d6f396bd4b13\r\nSuccessfully tagged hello:latest\r\n```\r\n\r\nOhh boy, in step `3/5` it should _not_ have said `Using cache`. So now of course, when we look at the checksum again, we see that it has not changed:\r\n\r\n```\r\n~/tmp/hello# docker run --rm -it hello:latest sha1sum /bin/hello\r\n0b9e0dc2dc113b052232b4f5a04c57ef76ec1ce6  /bin/hello\r\n```\r\n\r\nOnly when we remove the old images and rebuild everything from scratch do we get the new binary:\r\n\r\n```\r\n~/tmp/hello# docker rmi hello:latest\r\nUntagged: hello:latest\r\nDeleted: sha256:d6f396bd4b13e49ae6dd612b5f93db7196ac141299303deebcdacf67b85b248a\r\nDeleted: sha256:6d077c0dfb2736b87be4ee5b1796355373f7576050a42c8f30ddfec0efccde8f\r\nDeleted: sha256:fc04d81ee463db042a5d6e7f4ae856dc7b7ee3c15aef65069017335839e1592d\r\nDeleted: sha256:c6ba0a29cd4aa0eb04154e8299d7e0e667bcc33e2f8217d832d0c6847e24b8d9\r\nDeleted: sha256:f171a2518ecd342d8eb9dd3477d4285d12819d644db28c11537575c7ecf4da77\r\nDeleted: sha256:c17e01892104b8737d71d2889fac3f36d5e7edd4656c9a7c57d02cb9fadf235d\r\n\r\n~/tmp/hello# docker build -t hello:latest .\r\nSending build context to Docker daemon  4.071MB\r\nStep 1/5 : FROM alpine:latest\r\n ---> a187dde48cd2\r\nStep 2/5 : RUN apk add --no-cache dumb-init\r\n ---> Running in 4b475f52c987\r\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main/x86_64/APKINDEX.tar.gz\r\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.11/community/x86_64/APKINDEX.tar.gz\r\n(1/1) Installing dumb-init (1.2.2-r1)\r\nExecuting busybox-1.31.1-r9.trigger\r\nOK: 6 MiB in 15 packages\r\nRemoving intermediate container 4b475f52c987\r\n ---> 8eb5f09aeb19\r\nStep 3/5 : COPY target/release/hello /bin/hello\r\n ---> 58d05bba80c0\r\nStep 4/5 : ENTRYPOINT [\"dumb-init\", \"--\"]\r\n ---> Running in 672310f544ac\r\nRemoving intermediate container 672310f544ac\r\n ---> 3afc7f8e05e4\r\nStep 5/5 : CMD [ \"/bin/hello\" ]\r\n ---> Running in f4c497de6866\r\nRemoving intermediate container f4c497de6866\r\n ---> 77e01b385995\r\nSuccessfully built 77e01b385995\r\nSuccessfully tagged hello:latest\r\n```\r\n\r\n```\r\n~/tmp/hello# docker run --rm -it hello:latest sha1sum /bin/hello\r\n56181859ee1d7ad861aa5f18e4daf84a5e3c056c  /bin/hello\r\n```\r\n\r\n# Other considerations\r\n\r\nI managed to reproduce this behavior on two of my work machines plus in my CI setup. While those are all _my_ systems, I think they're sufficiently independent from one another so that I hope it's not just me.\r\n\r\nAlso I've run into this across several projects, some making pretty substantial changes in their binaries between builds.\r\n\r\nI'm using Docker quite extensively across different projects, and I've only ever run into this when using Rust -- but as seen here, with Rust I run into it pretty reliably.\r\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70666/timeline", "performed_via_github_app": null, "state_reason": "completed"}