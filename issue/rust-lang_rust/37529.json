{"url": "https://api.github.com/repos/rust-lang/rust/issues/37529", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37529/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37529/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37529/events", "html_url": "https://github.com/rust-lang/rust/issues/37529", "id": 186714020, "node_id": "MDU6SXNzdWUxODY3MTQwMjA=", "number": 37529, "title": "ELF soname is missing", "user": {"login": "m4b", "id": 1920204, "node_id": "MDQ6VXNlcjE5MjAyMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1920204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m4b", "html_url": "https://github.com/m4b", "followers_url": "https://api.github.com/users/m4b/followers", "following_url": "https://api.github.com/users/m4b/following{/other_user}", "gists_url": "https://api.github.com/users/m4b/gists{/gist_id}", "starred_url": "https://api.github.com/users/m4b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m4b/subscriptions", "organizations_url": "https://api.github.com/users/m4b/orgs", "repos_url": "https://api.github.com/users/m4b/repos", "events_url": "https://api.github.com/users/m4b/events{/privacy}", "received_events_url": "https://api.github.com/users/m4b/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-02T05:12:52Z", "updated_at": "2017-05-15T21:01:01Z", "closed_at": "2017-05-15T21:01:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "So I'm seeing [several][1] [issues][2] obliquely referencing unstable ABIs, soname's, and dynamically linked libraries, but it's not really clear at all to me:\r\n\r\n1. why rust doesn't set the soname for an ELF binary\r\n2. why this isn't documented why rust doesn't set the soname for an ELF binary\r\n\r\nIn several of these threads the point is made that rust doesn't need to set the soname because rust's ABI is unstable.  Unless I'm misunderstanding something, this argument isn't valid.\r\n\r\nUnless I'm deeply mistaken, rust has (or had better) have a stable C ABI.  I can expose unmangled symbols which have a C calling convention.\r\n\r\nHence I can distribute a dynamically linked library (DSO) with, for example, the following C API:\r\n\r\n```c\r\nvoid * abi_create();\r\nvoid abi_mutate(void*);\r\n```\r\n\r\nIf Rust's C ABI/FFI _implementation_ is stable (i.e., doesn't have major bugs, etc.) (and I should hope so), then this will never change from an external consumer viewpoint (unless I change the unmangled function definitions).\r\n\r\nNow, if Rust's internal ABI for regular rust functions changes from compiler to compiler is irrelevant, assuming the semantics of the rust code is the same, as the C ABI acts as a stable portal into the binary.\r\n\r\nHence from an external consumer, the binary's ABI _is_ stable, unless of course I change the C function names/api/semantics, then this is the same old problem from 1903 about what to do when C binaries change their function's semantics problem (in which case, whatever guidelines your distro has in place, or what have you, for DSO versioning should be adhered to, which is typically many guidelines, none of which are ever obeyed ;)\r\n\r\nConsequently, not setting the soname on the grounds that rust's internal ABI is unstable is not valid.\r\n\r\nA tertiary concern here is that Rust will seem much _much_ more mature in my opinion if we start dotting our I's and crossing our T's w.r.t. this kind of stuff, as it will make, for example, a Rust-based system DSO much more appealing from a distro standpoint if the binaries artifacts we produce are in tip top condition, imho.\r\n\r\n[1]: https://github.com/rust-lang/rfcs/issues/600\r\n[2]: https://github.com/rust-lang/rust/issues/22399", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37529/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37529/timeline", "performed_via_github_app": null, "state_reason": "completed"}