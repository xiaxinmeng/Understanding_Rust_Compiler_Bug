{"url": "https://api.github.com/repos/rust-lang/rust/issues/62028", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62028/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62028/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62028/events", "html_url": "https://github.com/rust-lang/rust/issues/62028", "id": 459187966, "node_id": "MDU6SXNzdWU0NTkxODc5NjY=", "number": 62028, "title": "thread 'rustc' panicked at 'assertion failed: target_offset >= offset'", "user": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-21T13:05:11Z", "updated_at": "2019-06-21T21:35:55Z", "closed_at": "2019-06-21T21:35:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Happens with rustc nightly from 21.6.19 in rust playground.\r\n\r\n```rust\r\n#![feature(async_await)]\r\n\r\nuse std::cell::RefCell;\r\nuse std::future::Future;\r\n\r\n//use futures::future::FutureExt;\r\n\r\n\r\nstruct Connection {\r\n    a: RefCell<()>\r\n}\r\n\r\n\r\nimpl Connection {\r\n    async fn execute<'a>(&'a mut self, _sql: &'a str) -> Result<(), ()> {\r\n        Ok(())\r\n    }\r\n    \r\n    async fn transaction<'a, 'b, T, R, FT>(&'a mut self, f: T) -> Result<R, ()> \r\n    where T: FnOnce(&mut Connection) -> FT + 'static, \r\n          FT: Future<Output = Result<R, ()>> + 'b,\r\n          'b: 'a,\r\n    {\r\n        self.execute(\"BEGIN\").await?;\r\n        match f(self).await {\r\n            Ok(res) => {\r\n                self.execute(\"COMMIT\").await?;\r\n                Ok(res)\r\n            }\r\n            Err(err) => {\r\n                self.execute(\"ROLLBACK \").await?;\r\n                Err(err)\r\n            }\r\n        }\r\n    }   \r\n}\r\n\r\n\r\nasync fn foo(_conn: &mut Connection) -> Result<(), ()> {\r\n    Ok(())\r\n}\r\n\r\nasync fn bar(_conn: &mut Connection) -> Result<(),()> {\r\n    Ok(())\r\n} \r\n\r\nasync fn do_something(conn: &mut Connection) -> Result<(), ()> {\r\n    foo(conn).await?;\r\n    bar(conn).await?;\r\n    Ok(())\r\n}\r\n\r\n\r\nfn assert_send<F>(_f: F) where F: Future + Send {}\r\n\r\nfn main() {\r\n    let res = async {\r\n        let mut conn = Connection {\r\n            a: RefCell::new(())\r\n        };\r\n        conn.transaction(async move |conn| {\r\n            //do_something(conn).await?;\r\n            //foo(conn).await?;\r\n            Ok(())\r\n        }).await\r\n    };\r\n    \r\n    assert_send(res);\r\n\r\n    println!(\"Hello, world!\");\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=0a959de759d2862f01fc915597ef33fe))\r\n\r\nBacktrace:\r\n```\r\nthread 'rustc' panicked at 'assertion failed: target_offset >= offset', src/librustc_codegen_llvm/type_of.rs:130:9\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:47\r\n   3: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:36\r\n   4: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:198\r\n   5: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:212\r\n   6: rustc::util::common::panic_hook\r\n   7: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:479\r\n   8: std::panicking::begin_panic\r\n   9: rustc_codegen_llvm::type_of::struct_llfields\r\n  10: <rustc_target::abi::TyLayout<&rustc::ty::TyS> as rustc_codegen_llvm::type_of::LayoutLlvmExt>::llvm_type\r\n  11: <rustc_target::abi::TyLayout<&rustc::ty::TyS> as rustc_codegen_llvm::type_of::LayoutLlvmExt>::llvm_type\r\n  12: <rustc_target::abi::call::FnType<&rustc::ty::TyS> as rustc_codegen_llvm::abi::FnTypeLlvmExt>::llvm_type\r\n  13: rustc_codegen_llvm::declare::<impl rustc_codegen_ssa::traits::declare::DeclareMethods for rustc_codegen_llvm::context::CodegenCx>::declare_fn\r\n  14: rustc_codegen_llvm::mono_item::<impl rustc_codegen_ssa::traits::declare::PreDefineMethods for rustc_codegen_llvm::context::CodegenCx>::predefine_fn\r\n  15: <rustc::mir::mono::MonoItem as rustc_codegen_ssa::mono_item::MonoItemExt>::predefine\r\n  16: rustc_codegen_llvm::base::compile_codegen_unit::module_codegen\r\n  17: rustc::dep_graph::graph::DepGraph::with_task\r\n  18: rustc_codegen_llvm::base::compile_codegen_unit\r\n  19: rustc_codegen_ssa::base::codegen_crate\r\n  20: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_utils::codegen_backend::CodegenBackend>::codegen_crate\r\n  21: rustc::util::common::time\r\n  22: rustc_interface::passes::start_codegen\r\n  23: rustc::ty::context::tls::enter_global\r\n  24: rustc_interface::passes::BoxedGlobalCtxt::access::{{closure}}\r\n  25: rustc_interface::passes::create_global_ctxt::{{closure}}\r\n  26: rustc_interface::passes::BoxedGlobalCtxt::enter\r\n  27: rustc_interface::queries::Query<T>::compute\r\n  28: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::ongoing_codegen\r\n  29: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  30: std::thread::local::LocalKey<T>::with\r\n  31: scoped_tls::ScopedKey<T>::set\r\n  32: syntax::with_globals\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nquery stack during panic:\r\nend of query stack\r\n```\r\n\r\n", "closed_by": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62028/timeline", "performed_via_github_app": null, "state_reason": "completed"}