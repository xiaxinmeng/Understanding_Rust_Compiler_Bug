{"url": "https://api.github.com/repos/rust-lang/rust/issues/67938", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67938/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67938/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67938/events", "html_url": "https://github.com/rust-lang/rust/issues/67938", "id": 545769097, "node_id": "MDU6SXNzdWU1NDU3NjkwOTc=", "number": 67938, "title": "Documentation should clarify what it means for PartialEq and Ord/PartialOrd to \"agree\"", "user": {"login": "dfoxfranke", "id": 4708206, "node_id": "MDQ6VXNlcjQ3MDgyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/4708206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfoxfranke", "html_url": "https://github.com/dfoxfranke", "followers_url": "https://api.github.com/users/dfoxfranke/followers", "following_url": "https://api.github.com/users/dfoxfranke/following{/other_user}", "gists_url": "https://api.github.com/users/dfoxfranke/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfoxfranke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfoxfranke/subscriptions", "organizations_url": "https://api.github.com/users/dfoxfranke/orgs", "repos_url": "https://api.github.com/users/dfoxfranke/repos", "events_url": "https://api.github.com/users/dfoxfranke/events{/privacy}", "received_events_url": "https://api.github.com/users/dfoxfranke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-06T14:56:39Z", "updated_at": "2020-01-12T04:19:04Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "It's obvious that if `a == b`, then `a.partialCmp(b) == Some(Ordering::Equal)`. But what about the converse? Can `==` implement a stricter sense of equality than `partialCmp` does? For example, suppose I have a type that wraps `Arc<String>`. Could I legally give it `Ord/PartialOrd` instances that compare the `String`s, while giving it `Eq/PartialEq` instances that call `ptr_eq` on the `Arc`?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67938/timeline", "performed_via_github_app": null, "state_reason": null}