{"url": "https://api.github.com/repos/rust-lang/rust/issues/85532", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85532/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85532/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85532/events", "html_url": "https://github.com/rust-lang/rust/issues/85532", "id": 897573200, "node_id": "MDU6SXNzdWU4OTc1NzMyMDA=", "number": 85532, "title": "Tracking Issue for bigint helper methods", "user": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 39, "created_at": "2021-05-21T00:30:46Z", "updated_at": "2023-05-22T22:35:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(bigint_helper_methods)]` and `#![feature(const_bigint_helper_methods)]`\r\n\r\nThis is a tracking issue for the following methods on integers:\r\n\r\n* `carrying_add`\r\n* `borrowing_sub`\r\n* `carrying_mul`\r\n* `widening_mul`\r\n\r\nThese methods are intended to help centralise the effort required for creating efficient big integer implementations, by offering a few methods which would otherwise require special compiler intrinsics or custom assembly code in order to do efficiently. They do not alone constitute big integer implementations themselves, but are necessary building blocks for a larger implementation.\r\n\r\n### Public API\r\n\r\n\r\n```rust\r\n// On unsigned integers:\r\n\r\n/// `self + rhs + carry` (full adder)\r\nfn carrying_add(self, rhs: Self, carry: bool) -> (Self, bool);\r\n\r\n/// `self - rhs - carry` (full \"subtractor\")\r\nfn borrowing_sub(self, rhs: Self, carry: bool) -> (Self, bool);\r\n\r\n/// `self * rhs + carry` (multiply-accumulate)\r\nfn carrying_mul(self, rhs: Self, carry: Self) -> (Self, Self);\r\n\r\n/// `self * rhs` (wide multiplication, same as `self.carrying_mul(rhs, 0)`)\r\nfn widening_mul(self, rhs: Self) -> (Self, Self);\r\n\r\n\r\n// On signed integers:\r\n\r\n/// `self + rhs + carry` (full adder)\r\nfn carrying_add(self, rhs: Self, carry: bool) -> (Self, bool);\r\n\r\n/// `self - rhs - carry` (full \"subtractor\")\r\nfn borrowing_sub(self, rhs: Self, carry: bool) -> (Self, bool);\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] `widening_mul` RFC: rust-lang/rfcs#2417\r\n- [x] Initial implementation of `carrying_add`, `borrowing_sub`, `carrying_mul`, and `widening_mul` #85017\r\n- [x] Remove implementations on signed types #90848 per discussion in #90541 \r\n- [x] Add new `carrying_add` and `borrowing_sub` on signed types: https://github.com/rust-lang/rust/pull/93873\r\n- [ ] Add assembly tests to ensure this keeps doing the right thing\r\n- [ ] Clarify documentation\r\n       (\"without the ability to overflow\" can be confusing.)\r\n- [ ] Final commenting period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final commenting period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncommenting period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n- Should these be implemented using compiler intrinsics? LLVM currently has no equivalents, so, we'd have to custom-build some.\r\n- Should an alternative API be provided for `widening_mul` that simply returns the next-larger type? What would we do for `u128`/`i128`?\r\n- What should the behaviour be for signed integers? Should there be implementations for signed integers at all?\r\n- Is the \"borrowing\" terminology worth it for subtraction, or should we simply call that \"carrying\" as well for consistency?\r\n- Are there other methods that should be added in addition to the existing ones?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85532/reactions", "total_count": 18, "+1": 18, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85532/timeline", "performed_via_github_app": null, "state_reason": null}