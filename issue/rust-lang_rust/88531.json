{"url": "https://api.github.com/repos/rust-lang/rust/issues/88531", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88531/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88531/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88531/events", "html_url": "https://github.com/rust-lang/rust/issues/88531", "id": 983834548, "node_id": "MDU6SXNzdWU5ODM4MzQ1NDg=", "number": 88531, "title": "No way to get compile-time info from the type of local.", "user": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-08-31T13:00:39Z", "updated_at": "2021-09-02T17:36:05Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "```rust\r\nconst fn bla<T>(_: &T) -> usize { type_name::<T>().len() }\r\n\r\nfn z(_: &'static [usize]) {}\r\n\r\nfn f() {\r\n    let x = read_integer_or_whatever();\r\n    z(&[bla(&x)]); // This line is expanded from a macro, e.g. something like `format_args!()`\r\n}\r\n```\r\n\r\nThis doesn't work. There's no way to express here that the *value* of `x` is entirely irrelevant, and that `bla` only cares about the type of the argument.\r\n\r\nIf we had a magic `PhantomData::of(x)` that would work in const contexts regardless of whether `x` itself is const, we could do things like this:\r\n\r\n```rust\r\nimpl<T> PhantomData<T> {\r\n    #[lang = \"magic\"]\r\n    const fn of(_: &T) -> Self { Self }\r\n}\r\n\r\nconst fn bla<T>(_: PhantomData<T>) -> usize { type_name::<T>().len() }\r\n\r\nfn z(_: &'static [usize]) {}\r\n\r\nfn f() {\r\n    let x = read_integer_or_whatever();\r\n    z(&[bla(PhantomData::of(&x))]);\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88531/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88531/timeline", "performed_via_github_app": null, "state_reason": null}