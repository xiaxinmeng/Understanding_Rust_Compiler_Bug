{"url": "https://api.github.com/repos/rust-lang/rust/issues/112526", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112526/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112526/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112526/events", "html_url": "https://github.com/rust-lang/rust/issues/112526", "id": 1751427974, "node_id": "I_kwDOAAsO6M5oZKuG", "number": 112526, "title": "Miscompilation from `.wrapping_offset(isize::MIN).wrapping_offset(isize::MIN)`", "user": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 2242906716, "node_id": "MDU6TGFiZWwyMjQyOTA2NzE2", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-raw-pointers", "name": "A-raw-pointers", "color": "f7e101", "default": false, "description": "Area: raw pointers, MaybeUninit, NonNull"}], "state": "open", "locked": false, "assignee": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2023-06-11T13:25:14Z", "updated_at": "2023-06-12T15:40:21Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Again, fuzzer generated code and minimised to surface Rust. Miri reports no UB under either aliasing model.\r\n\r\n```rust\r\nextern crate core;\r\nuse core::ptr;\r\n\r\npub fn dump_var(val0: u16) {\r\n    println!(\"{val0}\");\r\n}\r\n\r\n// extern \"C\" {\r\n//     fn dump_var(x: u16);\r\n// }\r\n// #[no_mangle]\r\npub unsafe fn fn10_rs() -> *const *mut i64 {\r\n    let mut _16: usize = 0;\r\n    let mut _23: i128 = 0;\r\n    let mut isize_min: isize = 0;\r\n    let mut _46: i64 = 0;\r\n    let mut _107: i16 = 0;\r\n    let mut _47: u16 = 0;\r\n    let mut _88: usize = 0;\r\n\r\n    let mut _31: *mut u8 = ptr::null_mut();\r\n    let mut _33: *mut *mut i64 = ptr::null_mut();\r\n    let mut _81: *const i128 = ptr::null();\r\n    let mut _90: *mut u8 = ptr::null_mut();\r\n    let mut _177: *mut i64 = ptr::null_mut();\r\n\r\n    let mut _44: ((u64, u64, u8), u32, f32) = Default::default();\r\n    let mut _61: ((u64, u64, u8), u32, f32) = Default::default();\r\n    let mut tup: (((u64, u64, u8), u32, f32), bool) = Default::default();\r\n    let mut _95: (((u64, u64, u8), u32, f32), bool) = Default::default();\r\n\r\n    'bb2: loop {\r\n        let two: u16 = 2;\r\n        _44.0 .2 = 1;\r\n        _31 = core::ptr::addr_of_mut!(_44.0 .2);\r\n        _23 = 11;\r\n        'bb45: loop {\r\n            (*_31) = 1;\r\n            isize_min = isize::MIN;\r\n            'bb65: loop {\r\n                let tup_ptr = core::ptr::addr_of_mut!(tup);\r\n                _31 = core::ptr::addr_of_mut!((*tup_ptr).0 .0 .2);\r\n                _16 = 18215089233857363959_usize;\r\n                match isize_min {\r\n                    isize::MIN => {\r\n                        _90 = _31.wrapping_offset(isize::MIN);\r\n                        _95.0 = _44;\r\n                        _46 = 42;\r\n                        _81 = core::ptr::addr_of!(_23);\r\n                        _44 = tup.0;\r\n                        _88 = _16;\r\n                        'bb80: loop {\r\n                            _31 = _90.wrapping_offset(isize_min);\r\n                            match *_81 {\r\n                                11 => 'bb88: loop {\r\n                                    let tup_ptr2 = core::ptr::addr_of_mut!(tup);\r\n                                    (*tup_ptr2) = _95;\r\n                                    isize_min = _107 as isize;\r\n                                    _47 = two >> *_31;\r\n                                    (*tup_ptr) = _95;\r\n                                    match _88 {\r\n                                        18215089233857363959 => {\r\n                                            *_31 = _61.0 .2.swap_bytes();\r\n                                            _88 = (*tup_ptr2).0 .2 as usize;\r\n                                            _33 = core::ptr::addr_of_mut!(_177);\r\n                                            match _46 {\r\n                                                42 => {\r\n                                                    (*_33) = core::ptr::addr_of_mut!(_46);\r\n                                                    match *_177 {\r\n                                                        42 => {\r\n                                                            dump_var(_47);\r\n                                                            return core::ptr::addr_of!(_177);\r\n                                                        }\r\n                                                        _ => continue 'bb2,\r\n                                                    }\r\n                                                }\r\n                                                _ => match *_81 {\r\n                                                    11 => continue 'bb88,\r\n                                                    _ => continue 'bb65,\r\n                                                },\r\n                                            }\r\n                                        }\r\n                                        0 => continue 'bb80,\r\n                                        _ => continue 'bb65,\r\n                                    }\r\n                                },\r\n                                _ => continue 'bb65,\r\n                            }\r\n                        }\r\n                    }\r\n                    _ => continue 'bb45,\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npub fn main() {\r\n    unsafe {\r\n        fn10_rs();\r\n    }\r\n}\r\n```\r\n\r\nThe correct output is 1, evaluated from `two >> *_31` where `_31` points to 1 after having been roundtripped with two `.wrapping_offset(isize::MIN)`.\r\n\r\nIt outputs 2 with `-Copt-level >= 1`.\r\n```rustc\r\n% rustc -Copt-level=0 repro.rs && ./repro\r\n1\r\n% rustc -Copt-level=1 repro.rs && ./repro\r\n2\r\n```\r\n\r\nNot sure if rustc is emitting LLVM IR with UB or it's a bug in LLVM. `llvm-reduce` gave me this which calls `dump_var(2)` with `opt -O1`: https://godbolt.org/z/q6GWPq9qs, but the GEP indices don't look right.\r\n\r\n```llvm\r\ntarget datalayout = \"e-m:o-i64:64-i128:128-n32:64-S128\"\r\ntarget triple = \"arm64-apple-macosx11.0.0\"\r\n\r\ndefine ptr @fn10_rs() {\r\nstart:\r\n  %_17 = alloca { { { i64, i64, i8, [7 x i8] }, i32, float }, i8, [7 x i8] }, align 8\r\n  %tup = alloca { { { i64, i64, i8, [7 x i8] }, i32, float }, i8, [7 x i8] }, align 8\r\n  %0 = getelementptr { i64, i64, i8, [7 x i8] }, ptr %tup, i64 -384307168202282325, i32 1\r\n  %1 = getelementptr i8, ptr %0, i64 -9223372036854775808\r\n  call void @llvm.memcpy.p0.p0.i64(ptr %tup, ptr %_17, i64 40, i1 false)\r\n  %_18 = load i8, ptr %1, align 8\r\n  %2 = zext i8 %_18 to i16\r\n  %_47 = lshr i16 2, %2\r\n  call void @dump_var(i16 %_47)\r\n  ret ptr null\r\n}\r\n\r\n; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)\r\ndeclare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0\r\n\r\ndeclare void @dump_var(i16)\r\n\r\nattributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }\r\n```\r\n\r\ncc @RalfJung @nikic ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112526/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 3}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112526/timeline", "performed_via_github_app": null, "state_reason": null}