{"url": "https://api.github.com/repos/rust-lang/rust/issues/24267", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/24267/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/24267/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/24267/events", "html_url": "https://github.com/rust-lang/rust/issues/24267", "id": 67595973, "node_id": "MDU6SXNzdWU2NzU5NTk3Mw==", "number": 24267, "title": "break stmt confuses intialization-knowledge of borrow checker", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}], "state": "closed", "locked": false, "assignee": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/20", "html_url": "https://github.com/rust-lang/rust/milestone/20", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/20/labels", "id": 452034, "node_id": "MDk6TWlsZXN0b25lNDUyMDM0", "number": 20, "title": "1.0", "description": "This will be the first major release of Rust, where we offer some guaranteed level of support and backwards compatibility.\r\n\r\nThe significant criteria for this release are:\r\n\r\n* Language backwards compatibility - All major features are in, and in their final form. Generally, the only new language features added after this milestone must be backwards compatible, or to fix soundness holes, though we do expect to have some leeway to make small incompatible fixes that have low impact on existing code bases.\r\n\r\n* Library stability - We have a system of measuring and ensuring the stability of API's, and a significant portion of the standard library is declared stable. Stable API's will not change. Large portions of the standard library need to be stable for 1.0, including primitive types, vectors, strings, option, numerics, collections, some I/O and concurrency.\r\n\r\n* User experience - The system is polished and the presentation is complete and professional. New users have a clear path to using and learning the system. This encompasses the web site, documentation, installation, and tooling.\r\n", "creator": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 376, "state": "closed", "created_at": "2013-10-10T18:48:33Z", "updated_at": "2016-08-28T23:13:24Z", "due_on": "2015-05-15T07:00:00Z", "closed_at": "2015-05-21T20:59:13Z"}, "comments": 6, "created_at": "2015-04-10T13:30:36Z", "updated_at": "2015-04-15T23:09:06Z", "closed_at": "2015-04-15T23:09:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This code should not compile:\n\ndemo code courtesy of niko's comment below.\n\n``` rust\nstruct Foo { n0: i32, n1: i32 }\n\nfn leak_1_brk() -> Foo {\n    let ret;\n    loop {\n        ret = Foo { n0: { break }, n1: 22 };\n    }\n    // (`ret` is still uninitialized here!)\n    ret\n}\n\nfn main() { }\n```\n\nOriginal report:\n\nI was making regression tests for #21486 and ran into this, though @nikomatsakis has pointed out that it is not specific to FRU.\n\nTest case 1:\n\n``` rust\nuse std::sync::atomic::{Ordering, AtomicUsize, ATOMIC_USIZE_INIT};\n\n#[derive(Debug)]\nstruct Noisy(u8);\nimpl Drop for Noisy {\n    fn drop(&mut self) {\n        // println!(\"splat #{}\", self.0);\n        event(self.0);\n    }\n}\n\n#[allow(dead_code)]\n#[derive(Debug)]\nstruct Foo { n0: Noisy, n1: Noisy }\nimpl Foo {\n    fn vals(&self) -> (u8, u8) { (self.n0.0, self.n1.0) }\n}\n\nfn leak_1_brk() -> Foo {\n    let _old_foo = Foo { n0: Noisy(1), n1: Noisy(2) };\n    let ret;\n    loop {\n        ret = Foo { n0: { break }, .._old_foo };\n    }\n    // ret has not been initialized!!!!!\n    ret\n}\n\npub fn main() {\n    reset_log();\n    // Note: there's not much that's reasonable to expect here...\n    let value = leak_1_brk().vals();\n    assert_eq!(0x01_02, event_log());\n    assert_eq!(value, (1,2));\n}\n\nstatic LOG: AtomicUsize = ATOMIC_USIZE_INIT;\n\nfn reset_log() {\n    LOG.store(0, Ordering::SeqCst);\n}\n\nfn event_log() -> usize {\n    LOG.load(Ordering::SeqCst)\n}\n\nfn event(tag: u8) {\n    let old_log = LOG.load(Ordering::SeqCst);\n    let new_log = (old_log << 8) + tag as usize;\n    LOG.store(new_log, Ordering::SeqCst);\n}\n```\n\nTest case 2:\n\n``` rust\nuse std::sync::atomic::{Ordering, AtomicUsize, ATOMIC_USIZE_INIT};\n\n#[derive(Debug)]\nstruct Noisy(u8);\nimpl Drop for Noisy {\n    fn drop(&mut self) {\n        // println!(\"splat #{}\", self.0);\n        event(self.0);\n    }\n}\n\n#[allow(dead_code)]\n#[derive(Debug)]\nstruct Foo { n0: Noisy, n1: Noisy }\nimpl Foo {\n    fn vals(&self) -> (u8, u8) { (self.n0.0, self.n1.0) }\n}\n\nfn leak_1_brk() -> Foo {\n    let _old_foo = Foo { n0: Noisy(1), n1: Noisy(2) };\n    let ret;\n    loop {\n        ret = Foo { n0: { break }, n1: { break } };\n    }\n    // !!!!!\n    ret\n}\n\n\npub fn main() {\n    reset_log();\n    // Note: there's not much that's reasonable to expect here...\n    assert_eq!(leak_1_brk().vals(), (1,2));\n    assert_eq!(0x01_02, event_log());\n}\n\nstatic LOG: AtomicUsize = ATOMIC_USIZE_INIT;\n\nfn reset_log() {\n    LOG.store(0, Ordering::SeqCst);\n}\n\nfn event_log() -> usize {\n    LOG.load(Ordering::SeqCst)\n}\n\nfn event(tag: u8) {\n    let old_log = LOG.load(Ordering::SeqCst);\n    let new_log = (old_log << 8) + tag as usize;\n    LOG.store(new_log, Ordering::SeqCst);\n}\n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/24267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/24267/timeline", "performed_via_github_app": null, "state_reason": "completed"}