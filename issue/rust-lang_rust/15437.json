{"url": "https://api.github.com/repos/rust-lang/rust/issues/15437", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/15437/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/15437/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/15437/events", "html_url": "https://github.com/rust-lang/rust/issues/15437", "id": 37188251, "node_id": "MDU6SXNzdWUzNzE4ODI1MQ==", "number": 15437, "title": "Vec `partition` could be generalized to a `scatter` operation", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-07-04T22:45:37Z", "updated_at": "2014-07-04T22:53:50Z", "closed_at": "2014-07-04T22:48:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Current `Vec` offers this method:\n\n``` rust\npub fn partition(self, f: |&T| -> bool) -> (Vec<T>, Vec<T>);\n```\n\nThat can be useful.\n\nBut sometimes you want to break up your data into more than just two groups.  Maybe three; or maybe the count depends on some runtime criteria.\n\nAnd also, sometimes the element itself is not the relevant predicate; sometimes the _index_ of the element is the predicate that matters.  (see e.g. #15418.)\n\nHere's a quick sketch of a more general API:\n\n``` rust\npub fn scatter(self, num_targets: uint, g: |elem: &T, index: uint| -> uint) -> Vec<Vec<T>>;\n```\n\nThis would work by creating N vectors, where N == `num_targets`, and then the function `g` would map each (element, index) to the vector that it should be moved to.  (If `g` ever returns a `uint >= num_targets`, then the method fails.)\n\n(Another variant of this API would not provide `num_targets` up front; it would instead dynamically grow the set of output vectors as necessary to accommodate the values returned by `g`.  But I think the above API would cover a lot of cases efficiently; at worst, `num_targets` could be made an `Option<uint>` to cover both use cases.)\n", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/15437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/15437/timeline", "performed_via_github_app": null, "state_reason": "completed"}