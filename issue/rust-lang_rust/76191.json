{"url": "https://api.github.com/repos/rust-lang/rust/issues/76191", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76191/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76191/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76191/events", "html_url": "https://github.com/rust-lang/rust/issues/76191", "id": 689902081, "node_id": "MDU6SXNzdWU2ODk5MDIwODE=", "number": 76191, "title": "Matching a const Range", "user": {"login": "Typas", "id": 44962044, "node_id": "MDQ6VXNlcjQ0OTYyMDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/44962044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Typas", "html_url": "https://github.com/Typas", "followers_url": "https://api.github.com/users/Typas/followers", "following_url": "https://api.github.com/users/Typas/following{/other_user}", "gists_url": "https://api.github.com/users/Typas/gists{/gist_id}", "starred_url": "https://api.github.com/users/Typas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Typas/subscriptions", "organizations_url": "https://api.github.com/users/Typas/orgs", "repos_url": "https://api.github.com/users/Typas/repos", "events_url": "https://api.github.com/users/Typas/events{/privacy}", "received_events_url": "https://api.github.com/users/Typas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1976249039, "node_id": "MDU6TGFiZWwxOTc2MjQ5MDM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-patterns", "name": "A-patterns", "color": "f7e101", "default": false, "description": "Relating to patterns and pattern matching"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-09-01T07:36:56Z", "updated_at": "2020-09-12T09:34:35Z", "closed_at": "2020-09-12T09:34:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I was doing rustlings, I found out it is possible to match with a range which is coded like this:\r\n``` rust\r\nfn color(n: i32) -> Option<u8> {\r\n    match n {\r\n        0..=255 => Some(n as u8),\r\n        _ => None,\r\n    }\r\n}\r\n```\r\n\r\nbut when I trying to replace the range with a const, \r\n``` rust\r\nuse std::ops::RangeInclusive;\r\n\r\nconst RGB_RANGE: RangeInclusive<i32> = 0..=255;\r\n\r\nfn color(n: i32) -> Option<u8> {\r\n    match n {\r\n        RGB_RANGE => Some(n as u8),\r\n        _ => None,\r\n    }\r\n}\r\n```\r\n\r\nthe compiler gives error:\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:7:9\r\n  |\r\n3 | const RGB: RangeInclusive<i32> = 0..=255;\r\n  | ----------------------------------------- constant defined here\r\n...\r\n6 |     match n {\r\n  |           - this expression has type `i32`\r\n7 |         RGB => Some(n as u8),\r\n  |         ^^^\r\n  |         |\r\n  |         expected `i32`, found struct `std::ops::RangeInclusive`\r\n  |         `RGB` is interpreted as a constant, not a new binding\r\n  |         help: introduce a new binding instead: `other_rgb`\r\n  |\r\n  = note: expected type `i32`\r\n           found struct `std::ops::RangeInclusive<i32>`\r\n```\r\n\r\nI have no idea why matching a literal range is possible but not matching a constant which type is RangeInclusive.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76191/timeline", "performed_via_github_app": null, "state_reason": "completed"}