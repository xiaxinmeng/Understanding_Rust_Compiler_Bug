{"url": "https://api.github.com/repos/rust-lang/rust/issues/46646", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46646/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46646/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46646/events", "html_url": "https://github.com/rust-lang/rust/issues/46646", "id": 280850253, "node_id": "MDU6SXNzdWUyODA4NTAyNTM=", "number": 46646, "title": "Unsatisfied bounds in case of earlier _inner_ type mismatch error", "user": {"login": "mqudsi", "id": 606923, "node_id": "MDQ6VXNlcjYwNjkyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/606923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mqudsi", "html_url": "https://github.com/mqudsi", "followers_url": "https://api.github.com/users/mqudsi/followers", "following_url": "https://api.github.com/users/mqudsi/following{/other_user}", "gists_url": "https://api.github.com/users/mqudsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mqudsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mqudsi/subscriptions", "organizations_url": "https://api.github.com/users/mqudsi/orgs", "repos_url": "https://api.github.com/users/mqudsi/repos", "events_url": "https://api.github.com/users/mqudsi/events{/privacy}", "received_events_url": "https://api.github.com/users/mqudsi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-10T22:11:17Z", "updated_at": "2020-06-11T18:01:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In case of a type mismatch when chaining/mapping between a `FutureResult<x,y>` and `FutureResult<x,z>`, the compiler also emits (invalid) errors about unsatisfied bounds for any subsequent future operations, even though the type mismatch is only the inner type within the `FutureResult<_,_>` (i.e. in all cases the result of the operation is a future).\r\n\r\nHere's an example ([git link](https://git.neosmart.net/mqudsi/futuretest/src/futures-rs-676)):\r\n\r\n```rust\r\n    let f = future::result::<(),()>(Ok(()))\r\n        .map_err(|_| \"&'static str error\")\r\n        .and_then(|_|\r\n             future::result(Ok(())\r\n                .map_err(|()| \"String error\".to_owned())\r\n            )\r\n        )\r\n        .and_then(|_| future::result::<(), String>(Err(\"another &'static str error\".to_owned())))\r\n```\r\n\r\ngenerating the following errors, the second of which is the point of this issue:\r\n\r\n```rust\r\n   Compiling futuretest v0.1.0 (file:///mnt/c/Users/Mahmoud/git/futuretest)\r\nerror[E0271]: type mismatch resolving `<futures::FutureResult<(), std::string::String> as futures::IntoFuture>::Error == &str`\r\n  --> src/main.rs:12:10\r\n   |\r\n12 |         .and_then(|_|\r\n   |          ^^^^^^^^ expected struct `std::string::String`, found &str\r\n   |\r\n   = note: expected type `std::string::String`\r\n              found type `&str`\r\n\r\nerror[E0599]: no method named `and_then` found for type `futures::AndThen<futures::MapErr<futures::FutureResult<(), ()>, [closure@src/main.rs:11:18: 11:42]>, futures::FutureResult<(), std::string::String>, [closure@src/main.rs:12:19: 15:14]>` in the current scope\r\n  --> src/main.rs:17:10\r\n   |\r\n17 |         .and_then(|_| future::result::<(), String>(Err(\"another &'static str error\".to_owned())))\r\n   |          ^^^^^^^^\r\n   |\r\n   = note: the method `and_then` exists but the following trait bounds were not satisfied:\r\n           `futures::AndThen<futures::MapErr<futures::FutureResult<(), ()>, [closure@src/main.rs:11:18: 11:42]>, futures::FutureResult<(), std::string::String>, [closure@src/main.rs:12:19: 15:14]> : futures::Future`\r\n           `&mut futures::AndThen<futures::MapErr<futures::FutureResult<(), ()>, [closure@src/main.rs:11:18: 11:42]>, futures::FutureResult<(), std::string::String>, [closure@src/main.rs:12:19: 15:14]> : futures::Future`\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nerror: Could not compile `futuretest`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\nResolving the type mismatch fixes the first error and makes the second error go away entirely.\r\n\r\nAs the trait is implemented regardless of the inner type, it should be possible for the compiler to detect that the second error is not real.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46646/timeline", "performed_via_github_app": null, "state_reason": null}