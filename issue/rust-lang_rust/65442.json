{"url": "https://api.github.com/repos/rust-lang/rust/issues/65442", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65442/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65442/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65442/events", "html_url": "https://github.com/rust-lang/rust/issues/65442", "id": 507369430, "node_id": "MDU6SXNzdWU1MDczNjk0MzA=", "number": 65442, "title": "impl Trait that does not capture generic argument", "user": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2019-10-15T17:00:25Z", "updated_at": "2023-03-31T18:53:24Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd like to write the following code:\r\n```rust\r\nuse std::future::Future;\r\nstruct Foo<A>(A);\r\nimpl<A> Foo<A> {\r\n    fn bar<Q, R: Default>(&mut self, q: Q) -> impl Future<Output = R> {\r\n        let _ = q;\r\n        async move {\r\n            R::default()\r\n        }\r\n    }\r\n    \r\n    fn baz(&mut self, x: &str) -> impl Future<Output = usize> {\r\n        self.bar(x)\r\n    }\r\n}\r\n```\r\nIn particular, I would like to have the `impl Trait` returned by `baz` _not_ be tied to the lifetime of its `&str` argument. Since `impl Trait` captures the lifetimes of all generic arguments (as per [RFC 1951](https://github.com/rust-lang/rfcs/blob/master/text/1951-expand-impl-trait.md)), I can't write the code this way though. So instead, I tried\r\n```rust\r\n#![feature(type_alias_impl_trait)]\r\nuse std::future::Future;\r\nstruct Foo<A>(A);\r\n\r\ntype BarFut<A, R> = impl Future<Output = R>;\r\nimpl<A> Foo<A> {\r\n    fn bar<Q, R: Default>(&mut self, q: Q) -> BarFut<A, R> {\r\n        let _ = q;\r\n        async move {\r\n            R::default()\r\n        }\r\n    }\r\n    \r\n    fn baz(&mut self, x: &str) -> impl Future<Output = usize> {\r\n        self.bar(x)\r\n    }\r\n}\r\n```\r\nHowever, with this, I get the error:\r\n```\r\nerror: type parameter `Q` is part of concrete type but not used in parameter list for the `impl Trait` type alias\r\n```\r\nThis seems odd, since `Q` is (intentionally) not used in the `async` block. I can work around this by adding an `async fn` and calling that instead of using `async move`, but that seems like an odd hack:\r\n```rust\r\nasync fn make_r_fut<R: Default>() -> R {\r\n    R::default()\r\n}\r\n// ...\r\n    fn bar<Q, R: Default>(&mut self, q: Q) -> BarFut<A, R> {\r\n        let _ = q;\r\n        make_r_fut()\r\n    }\r\n// ...\r\n```\r\n\r\nIs it intentional that the `async` block \"captures\" `Q` here, even though it never contains a `Q`?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65442/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65442/timeline", "performed_via_github_app": null, "state_reason": null}