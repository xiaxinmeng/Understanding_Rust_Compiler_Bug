{"url": "https://api.github.com/repos/rust-lang/rust/issues/10815", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/10815/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/10815/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/10815/events", "html_url": "https://github.com/rust-lang/rust/issues/10815", "id": 23764853, "node_id": "MDU6SXNzdWUyMzc2NDg1Mw==", "number": 10815, "title": "RFC: remove `do`", "user": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2013-12-05T03:40:35Z", "updated_at": "2014-01-29T17:41:38Z", "closed_at": "2014-01-29T17:41:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I started a mailing list thread on this topic about a week ago; in [the first post](https://mail.mozilla.org/pipermail/rust-dev/2013-November/006999.html) I summarised the situation. I'll quote it here verbatim:\n\n> (Do I win the prize for the shortest thread name yet?)\n> \n> > error: last argument in `do` call has non-procedure type: ||\n> \n> In the past three or four days I've seen at least as many enquiries in #rust about this error, and I'm sure there have been at least several others while I haven't been monitoring it. This is evidently causing quite a bit of confusion.\n> \n> Here's a summary of the change. The syntax is the same as it was before:\n> \n> ```\n> do expr { block }\n> do expr |args| { block }\n> do expr(args) { block }\n> do expr(args) |args| { block }\n> ```\n> \n> These used to desugar to the following, respectively:\n> \n> ```\n> expr(|| { block })\n> expr(|args| { block })\n> expr(args, || { block })\n> expr(args, |args| { block })\n> ```\n> \n> These now desugar to the following, respectively:\n> \n> ```\n> expr(proc() { block })\n> expr(proc(args) { block })\n> expr(args, proc() { block })\n> expr(args, proc(args) { block })\n> ```\n> \n> The change is that it now accepts a procedure rather than a closure. No syntax change, just a semantics change which breaks a lot of code.\n> \n> Closure: a stack function; used to be `&fn(..) -> _`, is now `|..| -> _`. Can be called multiple times, requires no allocations and is not Send.\n> \n> Procedure: a heap function; used to be `~once fn(..) -> _`, is now `proc(..) -> _`. Can be called once, requires heap allocation and is Send.\n> \n> Procedures are good for sending cross-task; things like the task body are a good match. Still, I think there are a few problems with how things are at present (i.e. after the do semantics change):\n> 1. `do` is still using the syntax of a closure (`|..| { .. }`), despite it now being a procedure.\n> 2. All of a sudden, things using closures need to shift away from using `do` or use procedures; this is causing confusion and may cause bad design decisions where nice sugar triumphs over what is actually needed; often the best solution may not be clear. (I, for example, had not thought about the fact that `proc` was going to allocate; the `~once fn` name was clearer about that. I'll speak about `&once fn` another time. Don't mention it now, this thread is just about `do`.)\n> \n> I have two solutions that I think could answer these concerns. Leaving it as it is seems a bad idea to me.\n> ## (a) Kill `do`\n> \n> I've had mixed feelings about `do`. Overall, it's pretty trivial syntax sugar, but it's sugar of a dubious sort, because it changes something that looks like a function call with N arguments to be a function call with N+1 arguments. That's just a matter of learning it.\n> \n> Still, `do` _is_ nice sugar in the way it gets rid of parentheses at the end. Overall, is it worth it? I don't know.\n> \n> Once `do` is gone, there's no problem left: just remove the sugar _everywhere_ it was used and everything works and will do for the foreseeable future.\n> ## (b) Make `do` support both closures and procedures\n> \n> The syntax of `do` can be clearly seen to include the closure syntax. We could easily extend it to support both closures and procedures.\n> \n> Here is a proposed `do` using closures once more, keeping the syntax it had last week:\n> \n> ```\n> do expr || { block }\n> do expr(args) || { block }\n> do expr |args| { block }\n> do expr(args) |args| { block }\n> ```\n> \n> Here is a proposed `do` using procedures as the current behaviour is, but with new syntax which is clearly a procedure:\n> \n> ```\n> do expr proc() { block }\n> do expr(args) proc() { block }\n> do expr proc(args) { block }\n> do expr(args) proc(args) { block }\n> ```\n> \n> This does leave these cases which are currently valid unclear:\n> \n> ```\n> do expr { block }\n> do expr(args) { block }\n> ```\n> \n> The options for this are (a) disallowing it; (b) making it always of the function types; and (c) inferring the type. I generally prefer the last solution but it is the most difficult. I'm not sure how it all fits into the function traits stuff at all.\n> \n> Incidentally, all this leaves the possibility open of making `do` work for _any_ argument type, where `do expr1 expr2` simply desugars to `expr1(expr2)` and `do expr1(args) expr2` to `do expr1(args, expr2)`. I don't know if that would be a good thing or not; it's probably best to avoid discussion of that at present.\n> # Summary\n> \n> Leaving `do` in its present form seems to me a distinctly bad idea, with the syntax of one form of function while it uses another form of function. I think we need to redo `do` very soon. (I'd save this joke for later in the thread, but I'm afraid someone else might steal it. I expect all responses to indicate they're in favour of this by using the title \"Re: do\" :P.)\n> \n> For myself, I have no preference to indicate; I am torn between the two options.\n\nAfter some discussion, I think that for the moment, removing `do` is probably the better option. We can then see about adding it or something similar back later if we want to.\n\nSo then, concrete proposal: remove `do` from the language.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/10815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/10815/timeline", "performed_via_github_app": null, "state_reason": "completed"}