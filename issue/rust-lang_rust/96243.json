{"url": "https://api.github.com/repos/rust-lang/rust/issues/96243", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96243/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96243/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96243/events", "html_url": "https://github.com/rust-lang/rust/issues/96243", "id": 1209263829, "node_id": "I_kwDOAAsO6M5IE-bV", "number": 96243, "title": "Inferred lifetime bound for generic trait parameter is incorrect", "user": {"login": "eds-collabora", "id": 88155680, "node_id": "MDQ6VXNlcjg4MTU1Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/88155680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eds-collabora", "html_url": "https://github.com/eds-collabora", "followers_url": "https://api.github.com/users/eds-collabora/followers", "following_url": "https://api.github.com/users/eds-collabora/following{/other_user}", "gists_url": "https://api.github.com/users/eds-collabora/gists{/gist_id}", "starred_url": "https://api.github.com/users/eds-collabora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eds-collabora/subscriptions", "organizations_url": "https://api.github.com/users/eds-collabora/orgs", "repos_url": "https://api.github.com/users/eds-collabora/repos", "events_url": "https://api.github.com/users/eds-collabora/events{/privacy}", "received_events_url": "https://api.github.com/users/eds-collabora/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-04-20T07:18:05Z", "updated_at": "2022-04-24T15:14:12Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\npub trait Womble<R>\r\n{\r\n    fn is_womble(&self, a: &R) -> bool;\r\n}\r\n\r\nstruct WrapWomble<'s, R> \r\nwhere\r\n    Self: 's\r\n{\r\n    womble: Box<dyn Womble<R> + 's>\r\n}\r\n\r\nimpl<'s, R> Womble<R> for WrapWomble<'s, R>\r\n{\r\n    fn is_womble(&self, a: &R) -> bool {\r\n        self.womble.is_womble(a)\r\n    }\r\n}\r\n\r\nfn stack_wombles<'s, R>(a: Box<dyn Womble<R> + 's>) -> Box<dyn Womble<R> + 's> {\r\n    Box::new(WrapWomble { womble: a })\r\n}\r\n```\r\n\r\nI expected to see this happen:\r\n\r\nHere, `Womble` is a trait whose dependence on `R`  is only that `R` is an input type to the trait method. The lifetime of R is not related to the lifetime of a Womble object, so for example, I should be able to implement this for references or objects which do not outlive `'s` (imagine for example, I have buiit my `dyn Womble<R>` instances out of outer shared state, and now want to process some Rs from some inner state, like a query response).\r\n\r\nIn particular, I have already given a valid bound, as I understand it. I have promised that regardless of R, my boxed implementors of Womble will live for lifetime `'s`.  It's not valid to assume for a trait that there is a direct dependence in terms of lifetime on its generic parameters.\r\n\r\nInstead, this happened: \r\n\r\nThe compiler reports R doesn't live long enough; that `R: 's` is inferred but not stipulated. It's quite straightforward to extend the example code with an instantiatable implementor of Womble, wrap it, and never have stored any Rs at all (or even in principle need to).\r\n\r\nAt the very least, this seems underspecified. I have read, and re-read the relevant RFCs I could find (2093, 599, 1214, 34, 1156), but I can't find a discussion of how an object with generic parameters has its lifetime inferred.\r\n\r\nRemoving `Self: 's` does not change the outcome, only the error message, which still wants `R: 's`.\r\n\r\n### Meta\r\n\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\nTested with: \r\nnightly\r\n```\r\nrustc 1.62.0-nightly (4ca19e09d 2022-04-19)\r\nbinary: rustc\r\ncommit-hash: 4ca19e09d302a4cbde14f9cb1bc109179dc824cd\r\ncommit-date: 2022-04-19\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.62.0-nightly\r\nLLVM version: 14.0.1\r\n```\r\n\r\nstable\r\n```\r\nrustc 1.60.0 (7737e0b5c 2022-04-04)\r\nbinary: rustc\r\ncommit-hash: 7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c\r\ncommit-date: 2022-04-04\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.60.0\r\nLLVM version: 14.0.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96243/timeline", "performed_via_github_app": null, "state_reason": null}