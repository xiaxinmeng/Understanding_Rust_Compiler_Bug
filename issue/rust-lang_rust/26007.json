{"url": "https://api.github.com/repos/rust-lang/rust/issues/26007", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/26007/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/26007/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/26007/events", "html_url": "https://github.com/rust-lang/rust/issues/26007", "id": 84994139, "node_id": "MDU6SXNzdWU4NDk5NDEzOQ==", "number": 26007, "title": "Inherent/trait method priority rules exist, but are unclear and seem to be undocumented", "user": {"login": "niconii", "id": 10183419, "node_id": "MDQ6VXNlcjEwMTgzNDE5", "avatar_url": "https://avatars.githubusercontent.com/u/10183419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niconii", "html_url": "https://github.com/niconii", "followers_url": "https://api.github.com/users/niconii/followers", "following_url": "https://api.github.com/users/niconii/following{/other_user}", "gists_url": "https://api.github.com/users/niconii/gists{/gist_id}", "starred_url": "https://api.github.com/users/niconii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niconii/subscriptions", "organizations_url": "https://api.github.com/users/niconii/orgs", "repos_url": "https://api.github.com/users/niconii/repos", "events_url": "https://api.github.com/users/niconii/events{/privacy}", "received_events_url": "https://api.github.com/users/niconii/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2015-06-04T09:03:43Z", "updated_at": "2018-03-07T18:25:13Z", "closed_at": "2017-05-24T20:39:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider [this code](http://is.gd/Aj2xi2):\n\n``` rust\nstruct Foo;\n\nimpl Foo {\n    fn foo(&self) {\n        println!(\"Foo\");\n    }\n}\n\ntrait Bar {\n    fn foo(&self);\n}\n\nimpl Bar for Foo {\n    fn foo(&self) { \n        println!(\"Bar\"); \n    }\n}\n\nfn main() {\n    let mut f = Foo;\n    f.foo();\n}\n```\n\nUnlike a method name conflict between two traits, Rust will compile this code, which will produce:\n\n```\nFoo\n```\n\nOne might conclude that the inherent method (i.e. belonging to the type itself) `Foo::foo()` has priority over the trait method `Bar::foo()`. Yet, if we change the signature of `Foo::foo()` to `fn foo(&mut self)` in this code, suddenly the program outputs:\n\n```\nBar\n```\n\nSo it would seem the type of arguments also plays some role in which method is chosen. To try and understand the rules behind it, I created the following table which shows the output for each combination of `self`'s type in `Foo::foo()` and `Bar::foo()`:\n\n| Bar\u2193 Foo\u2192 | &Self | &mut Self | Self |\n| --- | --- | --- | --- |\n| &Self | Foo | Bar | Foo |\n| &mut Self | Foo | Foo | Foo |\n| Self | Bar | Bar | Foo |\n\nLooking at this, I think I can deduce that:\n1. Inherent methods indeed have priority over trait methods when types are equal.\n2. The priority of types is `&mut Self` < `&Self` < `Self`.\n\nThat said, these rules are not terribly intuitive, and I'm unsure how they stack up against more complex method signatures. It would be good to have documentation about this.\n\nAnother concern of mine, however, is the inconsistency between this and a situation involving multiple trait methods conflicting. In that situation, rustc gives an error and asks the programmer to specify which trait's method should be used via UFCS. I'd prefer something like that over the current situation, though I'm not sure it's possible to do backwards-compatibly.\n", "closed_by": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/26007/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/26007/timeline", "performed_via_github_app": null, "state_reason": "completed"}