{"url": "https://api.github.com/repos/rust-lang/rust/issues/37737", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37737/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37737/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37737/events", "html_url": "https://github.com/rust-lang/rust/issues/37737", "id": 188937550, "node_id": "MDU6SXNzdWUxODg5Mzc1NTA=", "number": 37737, "title": "borrow checker does not work correctly with explicit return statements inside for-in loops", "user": {"login": "jchlapinski", "id": 3879182, "node_id": "MDQ6VXNlcjM4NzkxODI=", "avatar_url": "https://avatars.githubusercontent.com/u/3879182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jchlapinski", "html_url": "https://github.com/jchlapinski", "followers_url": "https://api.github.com/users/jchlapinski/followers", "following_url": "https://api.github.com/users/jchlapinski/following{/other_user}", "gists_url": "https://api.github.com/users/jchlapinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jchlapinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jchlapinski/subscriptions", "organizations_url": "https://api.github.com/users/jchlapinski/orgs", "repos_url": "https://api.github.com/users/jchlapinski/repos", "events_url": "https://api.github.com/users/jchlapinski/events{/privacy}", "received_events_url": "https://api.github.com/users/jchlapinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-12T22:06:03Z", "updated_at": "2016-11-13T23:17:03Z", "closed_at": "2016-11-13T23:17:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try this:\r\n```\r\n#[derive(Debug)]\r\nstruct User {\r\n    id: u64,\r\n    email: String,\r\n}\r\n\r\nfn add_user<'a>(id: u64, users: &'a mut Vec<User>) -> &'a mut User {\r\n    let mut index = ::std::usize::MAX;\r\n    for (i, u) in users.iter_mut().enumerate() {\r\n        if u.id == id {\r\n            index = i;\r\n            //break; // this would work\r\n            return &mut users[index]; // this gives compilation error\r\n        }\r\n    };\r\n    if index == ::std::usize::MAX {\r\n        index = users.len();\r\n        users.push(User { id: id, email: String::new() });\r\n    }\r\n    &mut users[index]\r\n}\r\n\r\nfn main() {\r\n    let mut users = Vec::new();\r\n    add_user(1, &mut users).email = \"one@example.com\".to_string();\r\n    add_user(2, &mut users).email = \"two@example.com\".to_string();\r\n    add_user(1, &mut users).email = \"one1@example.com\".to_string();\r\n    println!(\"{:#?}\", users);\r\n}\r\n```\r\nit gives me a compilation error:\r\n```\r\nerror[E0499]: cannot borrow `*users` as mutable more than once at a time\r\n  --> <anon>:12:25\r\n   |\r\n9  |     for (i, u) in users.iter_mut().enumerate() {\r\n   |                   ----- first mutable borrow occurs here\r\n...\r\n12 |             return &mut users[index];\r\n   |                         ^^^^^ second mutable borrow occurs here\r\n13 |         }\r\n14 |     };\r\n   |     - first borrow ends here\r\n\r\nerror: aborting due to previous error\r\n```\r\nlink to Rust Playground: https://play.rust-lang.org/?gist=4d192eaabfc22904c9fb20e14ea39acc&version=nightly&backtrace=0\r\n\r\nNow, when I simply change it to this:\r\n```\r\n#[derive(Debug)]\r\nstruct User {\r\n    id: u64,\r\n    email: String,\r\n}\r\n\r\nfn add_user<'a>(id: u64, users: &'a mut Vec<User>) -> &'a mut User {\r\n    let mut index = ::std::usize::MAX;\r\n    for (i, u) in users.iter_mut().enumerate() {\r\n        if u.id == id {\r\n            index = i;\r\n            break; // this would work\r\n            //return &mut users[index]; // this gives compilation error\r\n        }\r\n    };\r\n    if index == ::std::usize::MAX {\r\n        index = users.len();\r\n        users.push(User { id: id, email: String::new() });\r\n    }\r\n    &mut users[index]\r\n}\r\n\r\nfn main() {\r\n    let mut users = Vec::new();\r\n    add_user(1, &mut users).email = \"one@example.com\".to_string();\r\n    add_user(2, &mut users).email = \"two@example.com\".to_string();\r\n    add_user(1, &mut users).email = \"one1@example.com\".to_string();\r\n    println!(\"{:#?}\", users);\r\n}\r\n```\r\n(break instead of explicit return) everything works OK.\r\nLink to Rust Playground:   https://play.rust-lang.org/?gist=196c27cc90694c7b6daefe7ceeb517d3&version=nightly&backtrace=0\r\n\r\nClearly the borrow checker is working incorrectly when there is an explicit return inside a loop, as those programs are equivalent.\r\n", "closed_by": {"login": "jchlapinski", "id": 3879182, "node_id": "MDQ6VXNlcjM4NzkxODI=", "avatar_url": "https://avatars.githubusercontent.com/u/3879182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jchlapinski", "html_url": "https://github.com/jchlapinski", "followers_url": "https://api.github.com/users/jchlapinski/followers", "following_url": "https://api.github.com/users/jchlapinski/following{/other_user}", "gists_url": "https://api.github.com/users/jchlapinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jchlapinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jchlapinski/subscriptions", "organizations_url": "https://api.github.com/users/jchlapinski/orgs", "repos_url": "https://api.github.com/users/jchlapinski/repos", "events_url": "https://api.github.com/users/jchlapinski/events{/privacy}", "received_events_url": "https://api.github.com/users/jchlapinski/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37737/timeline", "performed_via_github_app": null, "state_reason": "completed"}