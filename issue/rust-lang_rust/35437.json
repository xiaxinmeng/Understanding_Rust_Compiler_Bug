{"url": "https://api.github.com/repos/rust-lang/rust/issues/35437", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/35437/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/35437/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/35437/events", "html_url": "https://github.com/rust-lang/rust/issues/35437", "id": 169770661, "node_id": "MDU6SXNzdWUxNjk3NzA2NjE=", "number": 35437, "title": "Port `compiler-rt` intrinsics to Rust", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 32, "created_at": "2016-08-06T22:59:55Z", "updated_at": "2017-06-25T18:07:17Z", "closed_at": "2017-06-25T18:07:17Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "## Rationale\n\n> Porting `compiler-rt` to Rust is one of the remaining obstacles towards the intersection of our \"on the fly compilation of std\" and \"rust everywhere\" dreams.\n\nFor our goal of \"on the fly compilation of std\" (or any other set of \"standard\" crates), we want to minimize the number of C dependencies required to build `std` as these complicate the compilation process: users need a C (cross) compiler and we (rust-lang/rust) have to support (cross) compiling each of these C dependencies, which are wrapped in crates, to every target (even custom ones!) that downstream users may use -- this last part leads to [complicated `build.rs` scripts](https://github.com/japaric/rust/blob/rustc-builtins/src/librustc_builtins/build.rs) that need to handle [conditional compilation logic](https://github.com/japaric/rust/blob/rustc-builtins/src/librustc_builtins/build.rs#L184-L395) and deal with [obscure `gcc` flags](https://github.com/japaric/rust/blob/rustc-builtins/src/librustc_builtins/build.rs#L76-L89) . On Linux, there are three C dependencies that we have to deal with: `backtrace`, `jemalloc` and `compiler-rt`. `backtrace` and `jemalloc` are optional on Linux and not available on some other platforms but `compiler-rt` is mandatory on most (all?) the targets we support.\n\nThis issue is about porting `compiler-rt` to Rust. Once ported, we can say goodbye to its complicated `build.rs` and make `std` easier to (cross) compile! An extra advantage is that, with this change, the compiler-rt intrinsics will receive the same optimizations as the `std` crate. This is not done today because it would make the `build.rs` even more complicated: flags like `-march` and `-mcpu` would have to be conditionally passed to `gcc` according to `$TARGET`.\n## The process\n\nThe goal is simple: We have to port [each and every compiler-rt intrinsic](https://github.com/rust-lang/compiler-rt/tree/8598065bd965d9713bfafb6c1e766d63a7b17b89/lib/builtins) along with [their tests](https://github.com/rust-lang/compiler-rt/tree/8598065bd965d9713bfafb6c1e766d63a7b17b89/test/builtins/Unit) to the `rustc-builtins` crate.\n\nThe process could go two ways:\n1. Using a \"wholesale\" approach: We can develop the new `rustc-builtins` crate out of tree: porting intrinsics and unit tests over time. Once all the intrinsics and unit tests are ported we can replace the in-tree `rustc-builtins` crate with the out-of-tree one and have the buildbots (and probably crater) serve as an integration test.\n2. Using an incremental approach: We can rely on the fact that `gcc_s` provides the same intrinsics as `compiler-rt` and simply remove `rustc-builtins`'s `build.rs`. This effectively means that `rustc-builtins` will no longer provide any intrinsic and that `std` programs will instead use `gcc_s`' intrinsics. Then we can start porting intrinsics + unit tests and adding them to `rustc-builtins` one by one. Each time a intrinsic is added, Rust programs will start using that intrinsic instead of the `gcc_s`' one.\n\nThe advantage of (2) is that we get an `std` that's easy to cross compile early on (because `rustc-builtins` is essentially empty!). Its disadvantage is that `no_std` programs which don't link to `gcc_s` and that depend on `compiler-rt` intrinsics will abruptly stop to compile because of linker errors (undefined reference to `$intrinsic`).\n## Prioritization\n\nSome Rust targets use more or different intrinsics than others. If we take the incremental approach mentioned in the previous section, it makes sense to prioritize porting the intrinsics required by tier-1 platforms. [This gist](https://gist.github.com/japaric/9b5d41921b775e270bc02aa04aeb858d) contains a \"hack\" to yields the list of intrinsics required to link `rustc` for a certain target plus lists of intrinsics generated with this \"hack\" for a few (right now, two) targets. The lists contained therein can be used to decide which intrinsics to prioritize.\n## Drawbacks\n\nOn each LLVM upgrade, we would have to carefully check if any compiler-rt intrinsics have been added (we already have to do this today) and the upgrade would be blocked on porting those new intrinsics to Rust first (this is the extra work that this change would create). \n## Unresolved questions\n- Pick an approach to implement this change.\n### `compilerrt_abort`\n\nSome intrinsics can fail (e.g. `absvdi2`). `compiler-rt` handles the failures by \"aborting\" -- it calls a [`compilerrt_abort()`](https://github.com/rust-lang/compiler-rt/blob/8598065bd965d9713bfafb6c1e766d63a7b17b89/lib/builtins/int_util.c#L26-L59) function. Should this function be ported to Rust? Or should the intrinsics, instead, `panic!` on failure?\n\n---\n\ncc @alexcrichton @brson\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/35437/reactions", "total_count": 14, "+1": 13, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/35437/timeline", "performed_via_github_app": null, "state_reason": "completed"}