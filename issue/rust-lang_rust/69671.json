{"url": "https://api.github.com/repos/rust-lang/rust/issues/69671", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69671/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69671/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69671/events", "html_url": "https://github.com/rust-lang/rust/issues/69671", "id": 574755740, "node_id": "MDU6SXNzdWU1NzQ3NTU3NDA=", "number": 69671, "title": "Resolving recursive traits with type parameters requires exponential memory in certain cases", "user": {"login": "JackStade", "id": 24828972, "node_id": "MDQ6VXNlcjI0ODI4OTcy", "avatar_url": "https://avatars.githubusercontent.com/u/24828972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JackStade", "html_url": "https://github.com/JackStade", "followers_url": "https://api.github.com/users/JackStade/followers", "following_url": "https://api.github.com/users/JackStade/following{/other_user}", "gists_url": "https://api.github.com/users/JackStade/gists{/gist_id}", "starred_url": "https://api.github.com/users/JackStade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JackStade/subscriptions", "organizations_url": "https://api.github.com/users/JackStade/orgs", "repos_url": "https://api.github.com/users/JackStade/repos", "events_url": "https://api.github.com/users/JackStade/events{/privacy}", "received_events_url": "https://api.github.com/users/JackStade/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630799571, "node_id": "MDU6TGFiZWw2MzA3OTk1NzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compilemem", "name": "I-compilemem", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to memory usage during compilation."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-03T15:39:28Z", "updated_at": "2020-03-03T15:48:16Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This is an extremely niche case, but after asking about it on the rust community Discord I was told I should open an issue. \r\n\r\nWhen trying to compile this code, the memory use (and compile time) increases exponentially with the nesting depth of `I`:\r\n\r\n```rust\r\ntrait Op<S, T> {\r\n    type Result;\r\n}\r\n\r\nimpl<\r\n    I: Op<(), A>,\r\n    J: Op<(), (F, (F, R)), Result = A>,\r\n    S: Op<(), I::Result>,\r\n    A, F, R\r\n> Op<S, (F, R)> for (I, J) {\r\n    type Result = S::Result;\r\n}\r\n\r\nimpl<S, T> Op<S, T> for () {\r\n    type Result = T;\r\n}\r\n\r\ntype I<T> = (T, ());\r\n\r\ntype Ty = I<I<I<I<I<I<I<I<I<I<()>>>>>>>>>>;\r\n\r\n// nesting `I` more times causes exponential increase in compile time and memory usage\r\n// about 13 is where it becomes noticeable\r\ntype Test = <I<I<I<Ty>>> as Op<(), (u8, i8)>>::Result;\r\n\r\nfn main() {\r\n    // force the compiler to actually evaluate Test and show an error message\r\n    // with the type of Test\r\n    println!(\"{}\", Test::default().push(1));\r\n}\r\n```\r\nThe actual amount of work the compiler is doing should not be growing exponentially. We can see this by doing the work in 2 parts:\r\n```rust\r\n// we break the 13 level deep nesting into 7 and 6\r\n// <I<I<I<I<I<I<I<()>>>>>>> as Op<(), (u8, i8)>>::Result\r\n// finding this took almost no time or memory\r\ntype O = (u8, (u8, (u8, (u8, (u8, (u8, (u8, (u8, i8))))))));\r\n\r\n// resolving this takes almost no time or memory\r\ntype Test = <I<I<I<I<I<I<()>>>>>> as Op<(), O>>::Result;\r\n```\r\nRecursive trait implementations that do generate exponentially large types generally cause the compiler to hang with memory increasing very slowly, however with this I was able to use all 16GB of RAM and 8GM of swap on my computer in about 5 minutes.\r\n\r\nThe reason I think this is a bug and not just a general limitation of Rust is that re writing the code to not use traits with type parameters causes the memory use to grow linearly instead. This code does exactly the same as the original example, except replacing `T as Op<U, S>` with `(T, U, S) as Op`:\r\n\r\n```rust\r\ntrait Op {\r\n    type Result;\r\n}\r\n\r\nimpl<I, J, S, F, R, A, C, D> Op for ((I, J), S, (F, R)) where\r\n    (J, (), (F, (F, R))): Op<Result = A>,\r\n    (I, (), A): Op<Result = C>,\r\n    (S, (), C): Op<Result = D>,\r\n{\r\n    type Result = D;\r\n}\r\n\r\nimpl<S, T> Op for ((), S, T) {\r\n    type Result = T;\r\n}\r\n\r\ntype I<T> = (T, ());\r\n\r\ntype Ty = I<I<I<I<I<I<I<I<I<I<()>>>>>>>>>>;\r\n\r\ntype Test = <(I<I<I<Ty>>>, (), (u8, i8)) as Op>::Result;\r\n\r\nfn main() {\r\n    println!(\"{}\", Test::default().push(1));\r\n}\r\n```\r\nThis is surprising, since I thought that this was basically how traits with type parameters were handled by the compiler.\r\n\r\nI have done some testing, and even small changes cause this behavior to not happen. Note that while these are identical to the original example for this type, they don't behave exactly the same for some other types:\r\n```rust\r\ntrait Op<T> {\r\n    type Result;\r\n}\r\n\r\nimpl<\r\n    I: Op<A>,\r\n    J: Op<(F, (F, R)), Result = A>,\r\n    A,\r\n    F, R,\r\n> Op<(F, R)> for (I, J) {\r\n    type Result = I::Result;\r\n}\r\n\r\nimpl<T> Op<T> for () {\r\n    type Result = T;\r\n}\r\n\r\ntype I<T> = (T, ());\r\n\r\ntype Ty = I<I<I<I<I<I<I<I<I<I<()>>>>>>>>>>;\r\n\r\ntype Test = <I<I<I<Ty>>> as Op<(u8, i8)>>::Result;\r\n\r\nfn main() {\r\n    println!(\"{}\", Test::default().push(1));\r\n}\r\n```\r\n\r\n```rust\r\ntrait Op<S, T> {\r\n    type Result;\r\n}\r\n\r\nimpl<\r\n    I: Op<(), (F, (F, R))>,\r\n    S: Op<(), I::Result>,\r\n    J, F, R\r\n> Op<S, (F, R)> for (I, J) {\r\n    type Result = S::Result;\r\n}\r\n\r\nimpl<S, T> Op<S, T> for () {\r\n    type Result = T;\r\n}\r\n\r\ntype I<T> = (T, ());\r\n\r\ntype Ty = I<I<I<I<I<I<I<I<I<I<()>>>>>>>>>>;\r\n\r\ntype Test = <I<I<I<Ty>>> as Op<(), (u8, i8)>>::Result;\r\n\r\nfn main() {\r\n    println!(\"{}\", Test::default().push(1));\r\n}\r\n```\r\n\r\n```rust\r\ntrait Op<S, T> {\r\n    type Result;\r\n}\r\n\r\nimpl<\r\n    I: Op<(), J::Result>,\r\n    J: Op<(), (F, (F, R))>,\r\n    S: Op<(), I::Result>,\r\n    F, R\r\n> Op<S, (F, R)> for (I, J) {\r\n    type Result = S::Result;\r\n}\r\n\r\nimpl<S, T> Op<S, T> for () {\r\n    type Result = T;\r\n}\r\n\r\ntype I<T> = (T, ());\r\n\r\ntype Ty = I<I<I<I<I<I<I<I<I<I<()>>>>>>>>>>;\r\n\r\ntype Test = <I<I<I<Ty>>> as Op<(), (u8, i8)>>::Result;\r\n\r\nfn main() {\r\n    println!(\"{}\", Test::default().push(1));\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69671/timeline", "performed_via_github_app": null, "state_reason": null}