{"url": "https://api.github.com/repos/rust-lang/rust/issues/72025", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72025/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72025/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72025/events", "html_url": "https://github.com/rust-lang/rust/issues/72025", "id": 614925627, "node_id": "MDU6SXNzdWU2MTQ5MjU2Mjc=", "number": 72025, "title": "const validation hides sibling validation errors", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-08T19:03:28Z", "updated_at": "2020-05-08T20:04:29Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If a const validation finds an invalid part of a constant, it reports that one error and bails out, this means that\r\n\r\n```rust\r\n#![feature(const_transmute)]\r\nstatic FOO: (&bool, &bool) = unsafe { std::mem::transmute((&42u8, &43u8)) };\r\n```\r\n\r\ngives us just\r\n\r\n```\r\ntype validation failed: encountered 0x2b at .1.<deref>, but expected a boolean\r\n```\r\n\r\nWhile it would be trivial to change https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src/librustc_mir/const_eval/eval_queries.rs#L192 to continue after errors, that would just give us more of these verbose diagnostics.\r\n\r\nFurthermore\r\n\r\n```rust\r\n#![feature(const_transmute)]\r\nstatic FOO: (&i32, &i32) = unsafe { std::mem::transmute((42usize, 43usize)) };\r\n```\r\n\r\ngives us just\r\n\r\n```\r\ntype validation failed: encountered a dangling reference (created from integer) at .0\r\n```\r\n\r\nsince we bail out early in https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src/librustc_mir/interpret/visitor.rs#L188 we never see errors in the other fields.\r\n\r\nThinking about different ways to report better diagnostics, maybe we could report something as an inline-expansion similar to what we print when we print constants. I don't want to repeat the const printing infrastructure, we could just replace all valid fields with <VALID>, but still report errors inline:\r\n\r\n```\r\ntype validation failed: (\r\n    &<expected boolean, got 0x2a>,\r\n    &<expected boolean, got 0x2b>,\r\n)\r\n```\r\n\r\nSo here's a complex example of how this could look like:\r\n\r\n```\r\ntype validation failed: MyStruct {\r\n    field_a: <VALID>,\r\n    field_b: [\r\n        TupleStruct(<expected boolean, got 0x3>),\r\n        <VALID>,\r\n        <VALID>,\r\n    ],\r\n    field_c: Enum::Variant {\r\n         meh: <dangling reference (created from integer)>,\r\n    },\r\n}\r\n```\r\n\r\nI haven't deeply thought about implemenation details of such a scheme, but the `mir::interpret::visitor` can definitely be extended to stop returning `Result` in all functions, and instead have a custom `enum`:\r\n\r\n```rust\r\nenum ValidationResult {\r\n    Valid,\r\n    Invalid(Error),\r\n    InvalidStruct {\r\n         name: Symbol,\r\n         fields: HashMap<FieldName, ValidationResult>,\r\n    }\r\n    InvalidTuple(Vec<ValidationResult>),\r\n    // ... or something similar\r\n}\r\n```\r\n\r\ncc @rust-lang/wg-const-eval @rust-lang/wg-diagnostics ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72025/timeline", "performed_via_github_app": null, "state_reason": null}