{"url": "https://api.github.com/repos/rust-lang/rust/issues/7140", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/7140/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/7140/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/7140/events", "html_url": "https://github.com/rust-lang/rust/issues/7140", "id": 15584695, "node_id": "MDU6SXNzdWUxNTU4NDY5NQ==", "number": 7140, "title": "RFC: remove syntactic sugar for @mut borrows", "user": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-06-15T01:26:10Z", "updated_at": "2014-01-09T20:36:17Z", "closed_at": "2014-01-09T20:36:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using `@mut` won't lead to dynamic failures until it ends up borrowed as `&` or `&mut`. I think this has proven to be a very confusing feature, and explaining it is a regular activity in #rust. It's very hard to reason about the failure cases until you actually run into one, especially if there are a lot of shallow copies which is the use case for managed pointers. It's usually a better idea to pass it by-value for the sake of robustness.\n\nResorting to `@mut` should already be a last resort and dynamic freezes should be a very obvious opt-in feature, with appropriately named methods + docstrings.\n\n``` rust\nlet x = @mut 5;\ndo x.borrow |r| {\n    ...\n}\n```\n\nThe current behaviour would also be incredibly hard to reproduce in a library type meant to be used in the same way like `RcMut`. We would need a **very** special trait able to run code at the end of the scope without an object + destructor involved.\n\nIn the future, this will allow us to add back the sugared borrows to `@mut` for the subset of cases that we can prove are safe without dynamic freezes. By putting the dynamic failure strategy in a library, we leave open the possibility of better solutions as the language evolves.\n\nI know doing this would be a painful change, but it can be done gradually with a lint check set to deny the old implicit dynamic borrows by default.\n", "closed_by": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/7140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/7140/timeline", "performed_via_github_app": null, "state_reason": "completed"}