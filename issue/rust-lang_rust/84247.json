{"url": "https://api.github.com/repos/rust-lang/rust/issues/84247", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84247/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84247/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84247/events", "html_url": "https://github.com/rust-lang/rust/issues/84247", "id": 860013402, "node_id": "MDU6SXNzdWU4NjAwMTM0MDI=", "number": 84247, "title": "pointer calculation error", "user": {"login": "dvmason", "id": 2913975, "node_id": "MDQ6VXNlcjI5MTM5NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2913975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvmason", "html_url": "https://github.com/dvmason", "followers_url": "https://api.github.com/users/dvmason/followers", "following_url": "https://api.github.com/users/dvmason/following{/other_user}", "gists_url": "https://api.github.com/users/dvmason/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvmason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvmason/subscriptions", "organizations_url": "https://api.github.com/users/dvmason/orgs", "repos_url": "https://api.github.com/users/dvmason/repos", "events_url": "https://api.github.com/users/dvmason/events{/privacy}", "received_events_url": "https://api.github.com/users/dvmason/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-04-16T17:19:30Z", "updated_at": "2021-04-16T19:57:44Z", "closed_at": "2021-04-16T19:57:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\nI am building an interpreter and I have objects in a heap that I'll be managing, separate from the Rust heap.\r\n\r\nEach object has a header followed by 0 or more fields. I think the `raw_at_put` code is the correct calculation. But there is an off-by-one error, and in fact the `alt_at_put` code produces the correct result. This code is simplified from my actual code, but exhibits the same error. In my actual code I have allocated several objects, and if I use the `alt_at_put` code, it works perfectly.\r\n\r\nThere may be a better way to do what I'm looking for (and I'd be happy to hear about it), but regardless, I think this is a bug.\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#![allow(warnings)] \r\ntype Header = usize;\r\ntype Object = i64;\r\npub struct HeapObject {\r\n    header : Header,\r\n    fields : [Object;0], // typically many more than 1, but will be accessed as unsafe\r\n}\r\nimpl HeapObject {\r\n    pub fn raw_at_put(&mut self,index:usize,value:Object) {\r\n        let fields : * mut Object = &mut self.fields as * mut Object;\r\n        unsafe{fields.offset(index as isize).write(value)}\r\n    }\r\n    pub fn alt_at_put(&mut self,index:usize,value:Object) {\r\n        let fields : * mut Object = &mut self.fields as * mut Object;\r\n        unsafe{fields.offset(index as isize+1).write(value)} // why is this off by 1?\r\n    }\r\n    pub fn initialize(&mut self,n_instVars:usize) -> * mut HeapObject {\r\n        self.header=n_instVars as Header;\r\n        let words = n_instVars as isize+1; // this +1 is for the header (assumes sizeof<Object> == sizeof<Header>)\r\n        unsafe{(self as *mut HeapObject).offset(words)}\r\n    }\r\n}\r\n#[cfg(test)]\r\nmod testHeapObject {\r\n    use super::*;\r\n    #[test]\r\n    fn correct() {\r\n        let mut mem = [0_usize;100];\r\n        let next : * mut HeapObject = &mut mem as * const usize as * mut HeapObject;\r\n        let obj = unsafe { next.as_mut().unwrap() };\r\n        let mut next = obj.initialize(3);\r\n        obj.raw_at_put(0,42);\r\n        obj.raw_at_put(1,1);\r\n        obj.raw_at_put(2,2);\r\n        let obj = unsafe { next.as_mut().unwrap() };\r\n        let _ = obj.initialize(4);\r\n        assert_eq!(mem[4],4);\r\n        assert_eq!(mem[0],3);\r\n        assert_eq!(mem[1],42);\r\n        assert_eq!(mem[2],1);\r\n        assert_eq!(mem[3],2);\r\n    }\r\n    #[test]\r\n    fn wrong() {\r\n        let mut mem = [0_usize;100];\r\n        let next : * mut HeapObject = &mut mem as * const usize as * mut HeapObject;\r\n        let obj = unsafe { next.as_mut().unwrap() };\r\n        let mut next = obj.initialize(3);\r\n        obj.alt_at_put(0,42);\r\n        obj.alt_at_put(1,1);\r\n        obj.alt_at_put(2,2);\r\n        let obj = unsafe { next.as_mut().unwrap() };\r\n        let _ = obj.initialize(4);\r\n        assert_eq!(mem[4],4);\r\n        assert_eq!(mem[0],3);\r\n        assert_eq!(mem[1],42);\r\n        assert_eq!(mem[2],1);\r\n        assert_eq!(mem[3],2);\r\n    }\r\n}\r\n```\r\n\r\nI expected to see the correct test pass and the wrong test fail\r\n\r\nInstead, this it was the reverse!!\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.52.0-nightly (8f349be27 2021-03-08)\r\nbinary: rustc\r\ncommit-hash: 8f349be27815d43d462a32faeb270a22a68486b6\r\ncommit-date: 2021-03-08\r\nhost: x86_64-apple-darwin\r\nrelease: 1.52.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.18s\r\n     Running unittests (target/debug/deps/bug-48cbeea253982f41)\r\n\r\nrunning 2 tests\r\ntest testHeapObject::wrong ... ok\r\ntest testHeapObject::correct ... FAILED\r\n\r\nfailures:\r\n\r\n- testHeapObject::correct stdout ----\r\nthread 'testHeapObject::correct' panicked at 'assertion failed: `(left == right)`\r\n  left: `42`,\r\n right: `3`', src/main.rs:38:9\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/8f349be27815d43d462a32faeb270a22a68486b6/library/std/src/panicking.rs:493:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/8f349be27815d43d462a32faeb270a22a68486b6/library/core/src/panicking.rs:92:14\r\n   2: core::panicking::assert_failed_inner\r\n             at /rustc/8f349be27815d43d462a32faeb270a22a68486b6/library/core/src/panicking.rs:160:17\r\n   3: core::panicking::assert_failed\r\n             at /rustc/8f349be27815d43d462a32faeb270a22a68486b6/library/core/src/panicking.rs:117:5\r\n   4: bug::testHeapObject::correct\r\n             at ./src/main.rs:38:9\r\n   5: bug::testHeapObject::correct::{{closure}}\r\n             at ./src/main.rs:27:5\r\n   6: core::ops::function::FnOnce::call_once\r\n             at /rustc/8f349be27815d43d462a32faeb270a22a68486b6/library/core/src/ops/function.rs:227:5\r\n   7: core::ops::function::FnOnce::call_once\r\n             at /rustc/8f349be27815d43d462a32faeb270a22a68486b6/library/core/src/ops/function.rs:227:5\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\n\r\nfailures:\r\n    testHeapObject::correct\r\n\r\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.03s\r\n\r\nerror: test failed, to rerun pass '--bin bug'\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "dvmason", "id": 2913975, "node_id": "MDQ6VXNlcjI5MTM5NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2913975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvmason", "html_url": "https://github.com/dvmason", "followers_url": "https://api.github.com/users/dvmason/followers", "following_url": "https://api.github.com/users/dvmason/following{/other_user}", "gists_url": "https://api.github.com/users/dvmason/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvmason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvmason/subscriptions", "organizations_url": "https://api.github.com/users/dvmason/orgs", "repos_url": "https://api.github.com/users/dvmason/repos", "events_url": "https://api.github.com/users/dvmason/events{/privacy}", "received_events_url": "https://api.github.com/users/dvmason/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84247/timeline", "performed_via_github_app": null, "state_reason": "completed"}