{"url": "https://api.github.com/repos/rust-lang/rust/issues/62328", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62328/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62328/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62328/events", "html_url": "https://github.com/rust-lang/rust/issues/62328", "id": 463647366, "node_id": "MDU6SXNzdWU0NjM2NDczNjY=", "number": 62328, "title": "Increasing Rc::strong_count above u8::MAX causes alignment issues and segfault in FFI code", "user": {"login": "lopopolo", "id": 860434, "node_id": "MDQ6VXNlcjg2MDQzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/860434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lopopolo", "html_url": "https://github.com/lopopolo", "followers_url": "https://api.github.com/users/lopopolo/followers", "following_url": "https://api.github.com/users/lopopolo/following{/other_user}", "gists_url": "https://api.github.com/users/lopopolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/lopopolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lopopolo/subscriptions", "organizations_url": "https://api.github.com/users/lopopolo/orgs", "repos_url": "https://api.github.com/users/lopopolo/repos", "events_url": "https://api.github.com/users/lopopolo/events{/privacy}", "received_events_url": "https://api.github.com/users/lopopolo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-03T09:34:00Z", "updated_at": "2019-07-03T11:14:16Z", "closed_at": "2019-07-03T11:14:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```console\r\n$ rustc --version --verbose\r\nrustc 1.37.0-nightly (d132f544f 2019-06-07)\r\nbinary: rustc\r\ncommit-hash: d132f544f9d74e3cc047ef211e57eae60b78e5c5\r\ncommit-date: 2019-06-07\r\nhost: x86_64-apple-darwin\r\nrelease: 1.37.0-nightly\r\nLLVM version: 8.0\r\n```\r\n\r\nThe following program segfaults in [mruby](https://github.com/mruby/mruby) because the value of an `obj` pointer when attempting a garbage collection is `0x1`.\r\n\r\n```rust\r\nuse mruby::gc::MrbGarbageCollection;\r\nuse mruby::interpreter::{Interpreter, Mrb};\r\nuse mruby::state::State;\r\nuse mruby::sys;\r\nuse std::cell::RefCell;\r\nuse std::rc::Rc;\r\n\r\n#[test]\r\nfn segfault_failing() {\r\n    println!(\"size of Rc<RefCell<State>>: {}\", std::mem::size_of::<Mrb>());\r\n    println!(\"size of RefCell<State>: {}\", std::mem::size_of::<RefCell<State>>());\r\n    println!(\"size of State: {}\", std::mem::size_of::<State>());\r\n    println!(\"size of mrb_value: {}\", std::mem::size_of::<sys::mrb_value>());\r\n\r\n    let interp = Interpreter::create().expect(\"mrb init\");\r\n    // Increase the strong count on the Rc to 255.\r\n    let mut interps = vec![];\r\n    for _ in 0..254 {\r\n        interps.push(Rc::clone(&interp));\r\n    }\r\n    println!(\"strong count = {}\", Rc::strong_count(&interp));\r\n\r\n    // create an object to collect on the mruby heap.\r\n    let bytes = std::iter::repeat(255_u8)\r\n        .take(1024 * 1024)\r\n        .collect::<Vec<_>>();\r\n    let _val = unsafe { sys::mrb_str_new(interp.borrow().mrb, bytes.as_ptr() as *const i8, bytes.len()) };\r\n\r\n    println!(\"attempting full gc\");\r\n    interp.full_gc();\r\n    println!(\"full gc succeeded\");\r\n\r\n    // Increase the strong count to 256, which is beyond u8::MAX\r\n    interps.push(Rc::clone(&interp));\r\n    println!(\"strong count = {}\", Rc::strong_count(&interp));\r\n\r\n    println!(\"attempting full gc\");\r\n    interp.full_gc();\r\n    // if we don't get here, we've segfaulted\r\n    println!(\"full gc succeeded\");\r\n}\r\n```\r\n\r\nThe program has the following output\r\n\r\n```txt\r\nsize of Rc<RefCell<State>>: 8\r\nsize of RefCell<State>: 232\r\nsize of State: 224\r\nsize of mrb_value: 16\r\nstrong count = 255\r\nattempting full gc\r\nfull gc succeeded\r\nstrong count = 256\r\nattempting full gc\r\nerror: process didn't exit successfully: `/Users/lopopolo/dev/repos/ferrocarril/target/debug/deps/segfault_gc-b169f4f6461740d8 segfault_failing --nocapture` (signal: 11, SIGSEGV: invalid memory reference)\r\n```\r\n\r\nDebugger\r\n\r\n```txt\r\nProcess 84054 stopped\r\n* thread #2, name = 'segfault_failing', stop reason = EXC_BAD_ACCESS (code=1, address=0x1)\r\n    frame #0: 0x000000010017fb74 segfault_gc-b169f4f6461740d8`mrb_gc_mark(mrb=&0x101801200, obj=&0x1) at gc.c:770:8\r\n   767 \tmrb_gc_mark(mrb_state *mrb, struct RBasic *obj)\r\n   768 \t{\r\n   769 \t  if (obj == 0) return;\r\n-> 770 \t  if (!is_white(obj)) return;\r\n   771 \t  mrb_assert((obj)->tt != MRB_TT_FREE);\r\n   772 \t  add_gray_list(mrb, &mrb->gc, obj);\r\n   773 \t}\r\nTarget 0: (segfault_gc-b169f4f6461740d8) stopped.\r\n(lldb) p obj\r\n(RBasic *) $0 = &0x1\r\n```", "closed_by": {"login": "hanna-kruppe", "id": 2311707, "node_id": "MDQ6VXNlcjIzMTE3MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2311707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hanna-kruppe", "html_url": "https://github.com/hanna-kruppe", "followers_url": "https://api.github.com/users/hanna-kruppe/followers", "following_url": "https://api.github.com/users/hanna-kruppe/following{/other_user}", "gists_url": "https://api.github.com/users/hanna-kruppe/gists{/gist_id}", "starred_url": "https://api.github.com/users/hanna-kruppe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hanna-kruppe/subscriptions", "organizations_url": "https://api.github.com/users/hanna-kruppe/orgs", "repos_url": "https://api.github.com/users/hanna-kruppe/repos", "events_url": "https://api.github.com/users/hanna-kruppe/events{/privacy}", "received_events_url": "https://api.github.com/users/hanna-kruppe/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62328/timeline", "performed_via_github_app": null, "state_reason": "completed"}