{"url": "https://api.github.com/repos/rust-lang/rust/issues/85671", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85671/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85671/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85671/events", "html_url": "https://github.com/rust-lang/rust/issues/85671", "id": 900861803, "node_id": "MDU6SXNzdWU5MDA4NjE4MDM=", "number": 85671, "title": "  Generic trait implementation not consistently recognized by the compiler", "user": {"login": "aPere3", "id": 13695792, "node_id": "MDQ6VXNlcjEzNjk1Nzky", "avatar_url": "https://avatars.githubusercontent.com/u/13695792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aPere3", "html_url": "https://github.com/aPere3", "followers_url": "https://api.github.com/users/aPere3/followers", "following_url": "https://api.github.com/users/aPere3/following{/other_user}", "gists_url": "https://api.github.com/users/aPere3/gists{/gist_id}", "starred_url": "https://api.github.com/users/aPere3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aPere3/subscriptions", "organizations_url": "https://api.github.com/users/aPere3/orgs", "repos_url": "https://api.github.com/users/aPere3/repos", "events_url": "https://api.github.com/users/aPere3/events{/privacy}", "received_events_url": "https://api.github.com/users/aPere3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-05-25T14:05:43Z", "updated_at": "2021-10-09T00:08:24Z", "closed_at": "2021-10-09T00:08:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to get the following to work:\r\n\r\n```rust\r\n// Some trait with a function that returns a slice:\r\npub trait AsSlice {\r\n    type Element;\r\n    fn as_slice(&self) -> &[Self::Element];\r\n}\r\n\r\n// Some type\r\npub struct A<Cont>(Cont);\r\n\r\n// Here we say that if A wraps a slice, then it implements AsSlice\r\nimpl<'a, Element> AsSlice for A<&'a [Element]> {\r\n    type Element = Element;\r\n    fn as_slice(&self) -> &[Self::Element] {\r\n        self.0\r\n    }\r\n}\r\n\r\nimpl<Cont> A<Cont> {\r\n    // We want this function to work\r\n    pub fn failing<Coef>(&self)\r\n    where\r\n        Self: AsSlice<Element = Coef>,\r\n    {\r\n        // This works, meaning that A<&[<Self as AsSlice>::Element]> is recognized to be AsSlice.\r\n        self.as_ref_a().some_func();\r\n        // This does not, meaning that A<&[<Self as AsSlice>::Element]> is not recognized to be\r\n        // AsSlice.\r\n        self.as_ref_a().as_ref_a();\r\n    }\r\n\r\n    pub fn as_ref_a<Coef>(&self) -> A<&[<Self as AsSlice>::Element]>\r\n    where\r\n        Self: AsSlice<Element = Coef>,\r\n    {\r\n        A(self.as_slice())\r\n    }\r\n\r\n    pub fn some_func<Coef>(&self)\r\n    where\r\n        Self: AsSlice<Element = Coef>,\r\n    {\r\n        println!(\"{}\", self.as_slice().len());\r\n    }\r\n\r\n    pub fn workaround<Coef>(&self)\r\n        where\r\n            Self: AsSlice<Element = Coef>,\r\n            for<'a> A<&'a [Coef]>: AsSlice<Element = Coef>, // I would like to avoid this ugly HKTB\r\n    {\r\n        self.as_ref_a().some_func();\r\n        self.as_ref_a().as_ref_a();\r\n    }\r\n}\r\n\r\nfn main() {\r\n    println!(\"Hello, world!\");\r\n}\r\n```\r\n\r\nI expected to see this happen:\r\n\r\nThe line 28 of the method `failing` should compile, as it it calls `as_ref_a` to build a `A(&[T])` type, which implement `AsSlice` for all `T`. When calling `as_ref_a` on that value, the compiler should recognize that `A(&[T])` is indeed `AsSlice`.\r\n\r\nInstead this happened:\r\n\r\nThe second call to `as_ref_a` does not recognize that `A&[T]` implements `AsSlice`, and fails to compile.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.52.1 (9bc8c42bb 2021-05-09)\r\nbinary: rustc\r\ncommit-hash: 9bc8c42bb2f19e745a63f3445f1ac248fb015e53\r\ncommit-date: 2021-05-09\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.52.1\r\nLLVM version: 12.0.0\r\n```\r\n\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nerror[E0599]: no method named `as_ref_a` found for struct `A<&[Coef]>` in the current scope\r\n  --> src/main.rs:28:25\r\n   |\r\n8  | pub struct A<Cont>(Cont);\r\n   | ------------------------- method `as_ref_a` not found for this\r\n...\r\n28 |         self.as_ref_a().as_ref_a();\r\n   |                         ^^^^^^^^ method not found in `A<&[Coef]>`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0599`.\r\nerror: could not compile `playground`\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85671/timeline", "performed_via_github_app": null, "state_reason": "completed"}