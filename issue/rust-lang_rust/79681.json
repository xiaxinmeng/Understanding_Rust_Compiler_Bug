{"url": "https://api.github.com/repos/rust-lang/rust/issues/79681", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79681/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79681/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79681/events", "html_url": "https://github.com/rust-lang/rust/issues/79681", "id": 756675081, "node_id": "MDU6SXNzdWU3NTY2NzUwODE=", "number": 79681, "title": "Nighly compiler causes STATUS_ACCESS_VIOLATION on Win10 after 2020-08-23", "user": {"login": "cfsamson", "id": 8337848, "node_id": "MDQ6VXNlcjgzMzc4NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/8337848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cfsamson", "html_url": "https://github.com/cfsamson", "followers_url": "https://api.github.com/users/cfsamson/followers", "following_url": "https://api.github.com/users/cfsamson/following{/other_user}", "gists_url": "https://api.github.com/users/cfsamson/gists{/gist_id}", "starred_url": "https://api.github.com/users/cfsamson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cfsamson/subscriptions", "organizations_url": "https://api.github.com/users/cfsamson/orgs", "repos_url": "https://api.github.com/users/cfsamson/repos", "events_url": "https://api.github.com/users/cfsamson/events{/privacy}", "received_events_url": "https://api.github.com/users/cfsamson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 266005765, "node_id": "MDU6TGFiZWwyNjYwMDU3NjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows-msvc", "name": "O-windows-msvc", "color": "6e6ec0", "default": false, "description": "Toolchain: MSVC, Operating system: Windows"}, {"id": 386798469, "node_id": "MDU6TGFiZWwzODY3OTg0Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-naked", "name": "A-naked", "color": "f7e101", "default": false, "description": "Area: #[naked], prologue and epilogue-free, functions, https://git.io/vAzzS"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-12-03T23:36:17Z", "updated_at": "2020-12-06T17:40:16Z", "closed_at": "2020-12-06T00:37:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Compiling the following code on nighly version `rustc 1.47.0-nightly (663d2f5cd 2020-08-22)` works but causes a segmenation fault on Windows 10 after version `rustc 1.47.0-nightly (5180f3da5 2020-08-23)`. The problem persists in the current nightly. Possibly related to  #77907.\r\n\r\nThis works:\r\n```\r\nrustup override set nightly-2020-08-23\r\ncargo run\r\n```\r\n\r\nThis doesn't work:\r\n```\r\nrustup override set nightly-2020-08-24\r\ncargo run\r\n```\r\n\r\nI assume there is a change merged between the nightly builds of 2020-08-22 and 2020-08-23 that causes this. I'm sorry the minimal example is not so \"minimal\":\r\n\r\n### Code\r\n\r\n```Rust\r\n#![feature(llvm_asm, naked_functions)]\r\nuse std::ptr;\r\n\r\nconst DEFAULT_STACK_SIZE: usize = 1024 * 1024 * 2;\r\nconst MAX_THREADS: usize = 4;\r\nstatic mut RUNTIME: usize = 0;\r\n\r\npub struct Runtime {\r\n    threads: Vec<Thread>,\r\n    current: usize,\r\n}\r\n\r\n#[derive(PartialEq, Eq, Debug)]\r\nenum State {\r\n    Available,\r\n    Running,\r\n    Ready,\r\n}\r\n\r\nstruct Thread {\r\n    id: usize,\r\n    stack: Vec<u8>,\r\n    ctx: ThreadContext,\r\n    state: State,\r\n}\r\n\r\n#[cfg(not(target_os = \"windows\"))]\r\n#[derive(Debug, Default)]\r\n#[repr(C)]\r\nstruct ThreadContext {\r\n    rsp: u64,\r\n    r15: u64,\r\n    r14: u64,\r\n    r13: u64,\r\n    r12: u64,\r\n    rbx: u64,\r\n    rbp: u64,\r\n}\r\n\r\nimpl Thread {\r\n    fn new(id: usize) -> Self {\r\n        Thread {\r\n            id,\r\n            stack: vec![0_u8; DEFAULT_STACK_SIZE],\r\n            ctx: ThreadContext::default(),\r\n            state: State::Available,\r\n        }\r\n    }\r\n}\r\n\r\nimpl Runtime {\r\n    pub fn new() -> Self {\r\n        let base_thread = Thread {\r\n            id: 0,\r\n            stack: vec![0_u8; DEFAULT_STACK_SIZE],\r\n            ctx: ThreadContext::default(),\r\n            state: State::Running,\r\n        };\r\n\r\n        let mut threads = vec![base_thread];\r\n        let mut available_threads: Vec<Thread> = (1..MAX_THREADS).map(|i| Thread::new(i)).collect();\r\n        threads.append(&mut available_threads);\r\n\r\n        Runtime {\r\n            threads,\r\n            current: 0,\r\n        }\r\n    }\r\n\r\n    pub fn init(&self) {\r\n        unsafe {\r\n            let r_ptr: *const Runtime = self;\r\n            RUNTIME = r_ptr as usize;\r\n        }\r\n    }\r\n\r\n    pub fn run(&mut self) -> ! {\r\n        while self.t_yield() {}\r\n        std::process::exit(0);\r\n    }\r\n\r\n    fn t_return(&mut self) {\r\n        if self.current != 0 {\r\n            self.threads[self.current].state = State::Available;\r\n            self.t_yield();\r\n        }\r\n    }\r\n\r\n    fn t_yield(&mut self) -> bool {\r\n        let mut pos = self.current;\r\n        while self.threads[pos].state != State::Ready {\r\n            pos += 1;\r\n            if pos == self.threads.len() {\r\n                pos = 0;\r\n            }\r\n            if pos == self.current {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if self.threads[self.current].state != State::Available {\r\n            self.threads[self.current].state = State::Ready;\r\n        }\r\n\r\n        self.threads[pos].state = State::Running;\r\n        let old_pos = self.current;\r\n        self.current = pos;\r\n\r\n        unsafe {\r\n            switch(&mut self.threads[old_pos].ctx, &self.threads[pos].ctx);\r\n        }\r\n\r\n        // preventing compiler optimizing our code away on windows. Will never be reached anyway.\r\n        self.threads.len() > 0\r\n    }\r\n\r\n    pub fn spawn(&mut self, f: fn()) {\r\n        let available = self\r\n            .threads\r\n            .iter_mut()\r\n            .find(|t| t.state == State::Available)\r\n            .expect(\"no available thread.\");\r\n\r\n        let size = available.stack.len();\r\n        let s_ptr = available.stack.as_mut_ptr();\r\n\r\n        // see: https://docs.microsoft.com/en-us/cpp/build/stack-usage?view=vs-2019#stack-allocation\r\n        unsafe {\r\n            ptr::write(s_ptr.offset((size - 24) as isize) as *mut u64, guard as u64);\r\n            ptr::write(s_ptr.offset((size - 32) as isize) as *mut u64, f as u64);\r\n            available.ctx.rsp = s_ptr.offset((size - 32) as isize) as u64;\r\n            available.ctx.stack_start = s_ptr.offset(size as isize) as u64;\r\n        }\r\n        available.ctx.stack_end = s_ptr as *const u64 as u64;\r\n\r\n        available.state = State::Ready;\r\n    }\r\n \r\n}\r\n\r\n\r\nfn guard() {\r\n    unsafe {\r\n        let rt_ptr = RUNTIME as *mut Runtime;\r\n        (*rt_ptr).t_return();\r\n    };\r\n}\r\n\r\npub fn yield_thread() {\r\n    unsafe {\r\n        let rt_ptr = RUNTIME as *mut Runtime;\r\n        (*rt_ptr).t_yield();\r\n    };\r\n}\r\n\r\n// ===== WINDOWS SUPPORT =====\r\n#[cfg(target_os = \"windows\")]\r\n#[derive(Debug, Default)]\r\n#[repr(C)]\r\nstruct ThreadContext {\r\n    xmm6: [u64; 2],\r\n    xmm7: [u64; 2],\r\n    xmm8: [u64; 2],\r\n    xmm9: [u64; 2],\r\n    xmm10: [u64; 2],\r\n    xmm11: [u64; 2],\r\n    xmm12: [u64; 2],\r\n    xmm13: [u64; 2],\r\n    xmm14: [u64; 2],\r\n    xmm15: [u64; 2],\r\n    rsp: u64,\r\n    r15: u64,\r\n    r14: u64,\r\n    r13: u64,\r\n    r12: u64,\r\n    rbx: u64,\r\n    rbp: u64,\r\n    rdi: u64,\r\n    rsi: u64,\r\n    stack_start: u64,\r\n    stack_end: u64,\r\n}\r\n\r\n\r\n// reference: https://probablydance.com/2013/02/20/handmade-coroutines-for-windows/\r\n// Contents of TIB on Windows: https://en.wikipedia.org/wiki/Win32_Thread_Information_Block\r\n#[cfg(target_os = \"windows\")]\r\n#[naked]\r\n#[inline(never)]\r\nunsafe fn switch(old: *mut ThreadContext, new: *const ThreadContext) {\r\n    llvm_asm!(\"\r\n        movaps      %xmm6, 0x00($0)\r\n        movaps      %xmm7, 0x10($0)\r\n        movaps      %xmm8, 0x20($0)\r\n        movaps      %xmm9, 0x30($0)\r\n        movaps      %xmm10, 0x40($0)\r\n        movaps      %xmm11, 0x50($0)\r\n        movaps      %xmm12, 0x60($0)\r\n        movaps      %xmm13, 0x70($0)\r\n        movaps      %xmm14, 0x80($0)\r\n        movaps      %xmm15, 0x90($0)\r\n        mov         %rsp, 0xa0($0)\r\n        mov         %r15, 0xa8($0)\r\n        mov         %r14, 0xb0($0)\r\n        mov         %r13, 0xb8($0)\r\n        mov         %r12, 0xc0($0)\r\n        mov         %rbx, 0xc8($0)\r\n        mov         %rbp, 0xd0($0)\r\n        mov         %rdi, 0xd8($0)\r\n        mov         %rsi, 0xe0($0)\r\n        mov         %gs:0x08, %rax    \r\n        mov         %rax, 0xe8($0)  \r\n        mov         %gs:0x10, %rax    \r\n        mov         %rax, 0xf0($0)  \r\n\r\n        movaps      0x00($1), %xmm6\r\n        movaps      0x10($1), %xmm7\r\n        movaps      0x20($1), %xmm8\r\n        movaps      0x30($1), %xmm9\r\n        movaps      0x40($1), %xmm10\r\n        movaps      0x50($1), %xmm11\r\n        movaps      0x60($1), %xmm12\r\n        movaps      0x70($1), %xmm13\r\n        movaps      0x80($1), %xmm14\r\n        movaps      0x90($1), %xmm15\r\n        mov         0xa0($1), %rsp\r\n        mov         0xa8($1), %r15\r\n        mov         0xb0($1), %r14\r\n        mov         0xb8($1), %r13\r\n        mov         0xc0($1), %r12\r\n        mov         0xc8($1), %rbx\r\n        mov         0xd0($1), %rbp\r\n        mov         0xd8($1), %rdi\r\n        mov         0xe0($1), %rsi\r\n        mov         0xe8($1), %rax\r\n        mov         %rax, %gs:0x08  \r\n        mov         0xf0($1), %rax \r\n        mov         %rax, %gs:0x10  \r\n\r\n        ret\r\n        \"\r\n    :\r\n    :\"r\"(old), \"r\"(new)\r\n    :\r\n    : \"volatile\", \"alignstack\"\r\n    );\r\n}\r\n\r\nfn main() {\r\n    let mut runtime = Runtime::new();\r\n    runtime.init();\r\n    runtime.spawn(|| {\r\n        println!(\"THREAD 1 STARTING\");\r\n        let id = 1;\r\n        for i in 0..10 {\r\n            println!(\"thread: {}\u00a0counter: {}\", id, i);\r\n            yield_thread();\r\n        }\r\n        println!(\"THREAD 1 FINISHED\");\r\n    });\r\n    runtime.spawn(|| {\r\n        println!(\"THREAD 2 STARTING\");\r\n        let id = 2;\r\n        for i in 0..15 {\r\n            println!(\"thread: {}\u00a0counter: {}\", id, i);\r\n            yield_thread();\r\n        }\r\n        println!(\"THREAD 2 FINISHED\");\r\n    });\r\n    runtime.run();\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.50.0-nightly (593fe977a 2020-11-20)\r\nbinary: rustc\r\ncommit-hash: 593fe977a77ad5a7aec23c6cb0f86a3470221670\r\ncommit-date: 2020-11-20\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.50.0-nightly\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: could not compile `green_threads`\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustc --crate-name green_threads --edition=2018 src\\main.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C metadata=ebe2d963b6e41045 --out-dir C:\\users\\cf\\dev\\rust\\articles\\example-greenthreads\\target\\debug\\deps -C incremental=C:\\users\\cf\\dev\\rust\\articles\\example-greenthreads\\target\\debug\\incremental -L dependency=C:\\users\\cf\\dev\\rust\\articles\\example-greenthreads\\target\\debug\\deps` (exit code: 0xc0000005, STATUS_ACCESS_VIOLATION)\r\n```\r\n\r\n", "closed_by": {"login": "cfsamson", "id": 8337848, "node_id": "MDQ6VXNlcjgzMzc4NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/8337848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cfsamson", "html_url": "https://github.com/cfsamson", "followers_url": "https://api.github.com/users/cfsamson/followers", "following_url": "https://api.github.com/users/cfsamson/following{/other_user}", "gists_url": "https://api.github.com/users/cfsamson/gists{/gist_id}", "starred_url": "https://api.github.com/users/cfsamson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cfsamson/subscriptions", "organizations_url": "https://api.github.com/users/cfsamson/orgs", "repos_url": "https://api.github.com/users/cfsamson/repos", "events_url": "https://api.github.com/users/cfsamson/events{/privacy}", "received_events_url": "https://api.github.com/users/cfsamson/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79681/timeline", "performed_via_github_app": null, "state_reason": "completed"}