{"url": "https://api.github.com/repos/rust-lang/rust/issues/82126", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82126/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82126/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82126/events", "html_url": "https://github.com/rust-lang/rust/issues/82126", "id": 808108554, "node_id": "MDU6SXNzdWU4MDgxMDg1NTQ=", "number": 82126, "title": "ICE: unmatched subst and hir arg", "user": {"login": "edward-shen", "id": 6173958, "node_id": "MDQ6VXNlcjYxNzM5NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6173958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edward-shen", "html_url": "https://github.com/edward-shen", "followers_url": "https://api.github.com/users/edward-shen/followers", "following_url": "https://api.github.com/users/edward-shen/following{/other_user}", "gists_url": "https://api.github.com/users/edward-shen/gists{/gist_id}", "starred_url": "https://api.github.com/users/edward-shen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edward-shen/subscriptions", "organizations_url": "https://api.github.com/users/edward-shen/orgs", "repos_url": "https://api.github.com/users/edward-shen/repos", "events_url": "https://api.github.com/users/edward-shen/events{/privacy}", "received_events_url": "https://api.github.com/users/edward-shen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 289259951, "node_id": "MDU6TGFiZWwyODkyNTk5NTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-help-wanted", "name": "E-help-wanted", "color": "02E10C", "default": false, "description": "Call for participation: Help is requested to fix this issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-02-15T01:55:27Z", "updated_at": "2021-02-17T22:37:46Z", "closed_at": "2021-02-17T22:37:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Code\r\n\r\nThe following is an attempted minimum reproducible sample that causes ICE. From a few minutes of experimentation, I wasn't able to further minimize the example, but I feel as if it should be possible (perhaps an example can be formed with just an async boundary and a mutex?).\r\n\r\n```Rust\r\nuse tokio::sync::Mutex;\r\n\r\ntrait Buffered {\r\n    fn buffer(&mut self) -> &mut Vec<usize>;\r\n}\r\n\r\ntrait MarketMultiplierIterator: Buffered {\r\n    fn peek_n(&mut self, n: usize) -> &[usize];\r\n}\r\n\r\nimpl<T: Buffered> MarketMultiplierIterator for T {\r\n    fn peek_n(&mut self, n: usize) -> &[usize] {\r\n        &self.buffer()[..n]\r\n    }\r\n}\r\n\r\nstruct MarketMultiplier {\r\n    buy: BuyMarketMultiplier,\r\n}\r\n\r\nimpl MarketMultiplier {\r\n    fn buy(&mut self) -> &mut BuyMarketMultiplier {\r\n        &mut self.buy\r\n    }\r\n}\r\n\r\nstruct BuyMarketMultiplier {\r\n    buffer: Vec<usize>,\r\n}\r\n\r\nimpl Buffered for &mut BuyMarketMultiplier {\r\n    fn buffer(&mut self) -> &mut Vec<usize> {\r\n        &mut self.buffer\r\n    }\r\n}\r\n\r\npub(crate) struct Market {\r\n    generator: Mutex<MarketMultiplier>,\r\n}\r\n\r\nimpl Market {\r\n    pub(crate) async fn buy_lock(&self) -> LockedMarket<'_> {\r\n        LockedMarket(self.generator.lock().await.buy())\r\n    }\r\n}\r\n\r\npub(crate) struct LockedMarket<T: MarketMultiplierIterator>(T);\r\n\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.50.0 (cb75ad5db 2021-02-10)\r\nbinary: rustc\r\ncommit-hash: cb75ad5db02783e8b0222fee363c5f63f7e2cf5b\r\ncommit-date: 2021-02-10\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.50.0\r\n```\r\n\r\nAlso saw the ICE on nightly, but I can't seem to get my instance of cargo to recognize the 1.52 toolchain. Testing on [playgound](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=f2bff3a4344c2d4b15f62ca641c7e7ac) shows this still is present:\r\n```\r\nrustc 1.52.0-nightly (8e54a2113 2021-02-13) running on x86_64-unknown-linux-gnu\r\n```\r\n\r\n### Error output\r\n\r\nThe following outputs are the result of building on nightly playgound:\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\r\n  --> src/lib.rs:42:44\r\n   |\r\n42 |     pub(crate) async fn buy_lock(&self) -> LockedMarket<'_> {\r\n   |                                            ^^^^^^^^^^^^---- help: remove these generics\r\n   |                                            |\r\n   |                                            expected 0 lifetime arguments\r\n   |\r\nnote: struct defined here, with 0 lifetime parameters\r\n  --> src/lib.rs:47:19\r\n   |\r\n47 | pub(crate) struct LockedMarket<T: MarketMultiplierIterator>(T);\r\n   |                   ^^^^^^^^^^^^\r\n\r\nerror[E0107]: this struct takes 1 type argument but 0 type arguments were supplied\r\n  --> src/lib.rs:42:44\r\n   |\r\n42 |     pub(crate) async fn buy_lock(&self) -> LockedMarket<'_> {\r\n   |                                            ^^^^^^^^^^^^ expected 1 type argument\r\n   |\r\nnote: struct defined here, with 1 type parameter: `T`\r\n  --> src/lib.rs:47:19\r\n   |\r\n47 | pub(crate) struct LockedMarket<T: MarketMultiplierIterator>(T);\r\n   |                   ^^^^^^^^^^^^ -\r\nhelp: add missing type argument\r\n   |\r\n42 |     pub(crate) async fn buy_lock(&self) -> LockedMarket<'_, T> {\r\n   |                                                           ^^^\r\n\r\nerror: internal compiler error: compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs:640:21: unmatched subst and hir arg: found &mut BuyMarketMultiplier vs Lifetime(lifetime(HirId { owner: DefId(0:23 ~ playground[2f39]::{impl#3}::buy_lock::{opaque#0}), local_id: 2 }: '_))\r\n  --> src/lib.rs:42:57\r\n   |\r\n42 |     pub(crate) async fn buy_lock(&self) -> LockedMarket<'_> {\r\n   |                                                         ^^\r\n```\r\n\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```   \r\nthread 'rustc' panicked at 'Box<Any>', /rustc/8e54a21139ae96a2aca3129100b057662e2799b9/library/std/src/panic.rs:59:5\r\nstack backtrace:\r\n   0: std::panicking::begin_panic\r\n   1: std::panic::panic_any\r\n   2: rustc_errors::HandlerInner::span_bug\r\n   3: rustc_errors::Handler::span_bug\r\n   4: rustc_middle::ty::context::tls::with_opt\r\n   5: rustc_middle::util::bug::opt_span_bug_fmt\r\n   6: rustc_middle::util::bug::span_bug_fmt\r\n   7: rustc_mir::borrow_check::diagnostics::region_name::<impl rustc_mir::borrow_check::MirBorrowckCtxt>::highlight_if_we_can_match_hir_ty\r\n   8: rustc_mir::borrow_check::diagnostics::region_name::<impl rustc_mir::borrow_check::MirBorrowckCtxt>::give_region_a_name\r\n   9: rustc_mir::borrow_check::diagnostics::explain_borrow::<impl rustc_mir::borrow_check::MirBorrowckCtxt>::explain_why_borrow_contains_point\r\n  10: rustc_mir::borrow_check::diagnostics::conflict_errors::<impl rustc_mir::borrow_check::MirBorrowckCtxt>::report_borrowed_value_does_not_live_long_enough\r\n  11: rustc_mir::borrow_check::path_utils::each_borrow_involving_path\r\n  12: rustc_mir::borrow_check::MirBorrowckCtxt::access_place\r\n  13: <rustc_mir::borrow_check::MirBorrowckCtxt as rustc_mir::dataflow::framework::visitor::ResultsVisitor>::visit_terminator_before_primary_effect\r\n  14: <rustc_mir::dataflow::framework::direction::Forward as rustc_mir::dataflow::framework::direction::Direction>::visit_results_in_block\r\n  15: rustc_mir::dataflow::framework::visitor::visit_results\r\n  16: rustc_mir::borrow_check::do_mir_borrowck\r\n  17: rustc_infer::infer::InferCtxtBuilder::enter\r\n  18: rustc_mir::borrow_check::mir_borrowck\r\n  19: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::mir_borrowck>::compute\r\n  20: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  21: rustc_data_structures::stack::ensure_sufficient_stack\r\n  22: rustc_query_system::query::plumbing::force_query_with_job\r\n  23: rustc_query_system::query::plumbing::get_query_impl\r\n  24: rustc_mir::borrow_check::type_check::TypeChecker::check_rvalue\r\n  25: rustc_mir::borrow_check::type_check::TypeChecker::typeck_mir\r\n  26: rustc_mir::borrow_check::type_check::type_check\r\n  27: rustc_mir::borrow_check::nll::compute_regions\r\n  28: rustc_mir::borrow_check::do_mir_borrowck\r\n  29: rustc_infer::infer::InferCtxtBuilder::enter\r\n  30: rustc_mir::borrow_check::mir_borrowck\r\n  31: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::mir_borrowck>::compute\r\n  32: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  33: rustc_data_structures::stack::ensure_sufficient_stack\r\n  34: rustc_query_system::query::plumbing::force_query_with_job\r\n  35: rustc_query_system::query::plumbing::get_query_impl\r\n  36: rustc_typeck::collect::type_of::type_of\r\n  37: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::type_of>::compute\r\n  38: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  39: rustc_data_structures::stack::ensure_sufficient_stack\r\n  40: rustc_query_system::query::plumbing::force_query_with_job\r\n  41: rustc_query_system::query::plumbing::get_query_impl\r\n  42: rustc_typeck::check::check::check_item_type\r\n  43: rustc_middle::hir::map::Map::visit_item_likes_in_module\r\n  44: rustc_typeck::check::check::check_mod_item_types\r\n  45: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::check_mod_item_types>::compute\r\n  46: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  47: rustc_data_structures::stack::ensure_sufficient_stack\r\n  48: rustc_query_system::query::plumbing::force_query_with_job\r\n  49: rustc_query_system::query::plumbing::get_query_impl\r\n  50: rustc_query_system::query::plumbing::ensure_query_impl\r\n  51: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  52: rustc_typeck::check_crate\r\n  53: rustc_interface::passes::analysis\r\n  54: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::analysis>::compute\r\n  55: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  56: rustc_data_structures::stack::ensure_sufficient_stack\r\n  57: rustc_query_system::query::plumbing::force_query_with_job\r\n  58: rustc_query_system::query::plumbing::get_query_impl\r\n  59: rustc_interface::passes::QueryContext::enter\r\n  60: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  61: rustc_span::with_source_map\r\n  62: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.52.0-nightly (8e54a2113 2021-02-13) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C codegen-units=1 -C debuginfo=2 --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [mir_borrowck] borrow-checking `Market::buy_lock::{closure#0}`\r\n#1 [mir_borrowck] borrow-checking `Market::buy_lock`\r\n#2 [type_of] computing type of `Market::buy_lock::{opaque#0}`\r\n#3 [check_mod_item_types] checking item types in top-level module\r\n#4 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror: aborting due to 3 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0107`.\r\nerror: could not compile `playground`\r\n```\r\n</p>\r\n</details>", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82126/timeline", "performed_via_github_app": null, "state_reason": "completed"}