{"url": "https://api.github.com/repos/rust-lang/rust/issues/104966", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104966/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104966/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104966/events", "html_url": "https://github.com/rust-lang/rust/issues/104966", "id": 1465313988, "node_id": "I_kwDOAAsO6M5XVurE", "number": 104966, "title": "pattern binding `****` is named the same as one of the variants of the type SHOULD BE ERROR", "user": {"login": "zhang-ray", "id": 41682958, "node_id": "MDQ6VXNlcjQxNjgyOTU4", "avatar_url": "https://avatars.githubusercontent.com/u/41682958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhang-ray", "html_url": "https://github.com/zhang-ray", "followers_url": "https://api.github.com/users/zhang-ray/followers", "following_url": "https://api.github.com/users/zhang-ray/following{/other_user}", "gists_url": "https://api.github.com/users/zhang-ray/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhang-ray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhang-ray/subscriptions", "organizations_url": "https://api.github.com/users/zhang-ray/orgs", "repos_url": "https://api.github.com/users/zhang-ray/repos", "events_url": "https://api.github.com/users/zhang-ray/events{/privacy}", "received_events_url": "https://api.github.com/users/zhang-ray/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2022-11-27T02:55:42Z", "updated_at": "2023-01-21T07:18:03Z", "closed_at": "2023-01-21T07:18:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=df522ed9839ada9d5c66830e8de12f7c\r\n\r\n\r\n```rust\r\n#[derive(Debug)]\r\npub enum BusinessType {\r\n    First,\r\n    Second,\r\n    Third,\r\n}\r\n\r\nfn my_tricky_func(business_type: &BusinessType) {\r\n    match &business_type {\r\n        First => {\r\n            println!(\"First\");\r\n        }\r\n        Second => {\r\n            println!(\"Second\");\r\n        }\r\n        Third => {\r\n            println!(\"Third\");\r\n        }\r\n    }\r\n}\r\n\r\nfn my_ok_func(business_type: &BusinessType) {\r\n    match &business_type {\r\n        BusinessType::First => {\r\n            println!(\"First\");\r\n        }\r\n        BusinessType::Second => {\r\n            println!(\"Second\");\r\n        }\r\n        BusinessType::Third => {\r\n            println!(\"Third\");\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    println!(\"\\n\\n\u2193\u2193\u2193 trying my_tricky_func\");\r\n    my_tricky_func(&BusinessType::Third);\r\n    my_tricky_func(&BusinessType::Second);\r\n    my_tricky_func(&BusinessType::First);\r\n\r\n    println!(\"\\n\\n\u2193\u2193\u2193 trying my_ok_func\");\r\n    my_ok_func(&BusinessType::Third);\r\n    my_ok_func(&BusinessType::Second);\r\n    my_ok_func(&BusinessType::First);\r\n}\r\n\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nwarning[[E0170]](https://doc.rust-lang.org/stable/error-index.html#E0170): pattern binding `First` is named the same as one of the variants of the type `BusinessType`\r\n  --> src/main.rs:10:9\r\n   |\r\n10 |         First => {\r\n   |         ^^^^^ help: to match on the variant, qualify the path: `BusinessType::First`\r\n   |\r\n   = note: `#[warn(bindings_with_variant_name)]` on by default\r\n\r\nwarning[[E0170]](https://doc.rust-lang.org/stable/error-index.html#E0170): pattern binding `Second` is named the same as one of the variants of the type `BusinessType`\r\n  --> src/main.rs:13:9\r\n   |\r\n13 |         Second => {\r\n   |         ^^^^^^ help: to match on the variant, qualify the path: `BusinessType::Second`\r\n\r\nwarning[[E0170]](https://doc.rust-lang.org/stable/error-index.html#E0170): pattern binding `Third` is named the same as one of the variants of the type `BusinessType`\r\n  --> src/main.rs:16:9\r\n   |\r\n16 |         Third => {\r\n   |         ^^^^^ help: to match on the variant, qualify the path: `BusinessType::Third`\r\n\r\nwarning: unreachable pattern\r\n  --> src/main.rs:13:9\r\n   |\r\n10 |         First => {\r\n   |         ----- matches any value\r\n...\r\n13 |         Second => {\r\n   |         ^^^^^^ unreachable pattern\r\n   |\r\n   = note: `#[warn(unreachable_patterns)]` on by default\r\n\r\nwarning: unreachable pattern\r\n  --> src/main.rs:16:9\r\n   |\r\n10 |         First => {\r\n   |         ----- matches any value\r\n...\r\n16 |         Third => {\r\n   |         ^^^^^ unreachable pattern\r\n\r\nwarning: unused variable: `First`\r\n  --> src/main.rs:10:9\r\n   |\r\n10 |         First => {\r\n   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_First`\r\n   |\r\n   = note: `#[warn(unused_variables)]` on by default\r\n\r\nwarning: unused variable: `Second`\r\n  --> src/main.rs:13:9\r\n   |\r\n13 |         Second => {\r\n   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_Second`\r\n\r\nwarning: unused variable: `Third`\r\n  --> src/main.rs:16:9\r\n   |\r\n16 |         Third => {\r\n   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_Third`\r\n\r\nwarning: variable `First` should have a snake case name\r\n  --> src/main.rs:10:9\r\n   |\r\n10 |         First => {\r\n   |         ^^^^^ help: convert the identifier to snake case (notice the capitalization): `first`\r\n   |\r\n   = note: `#[warn(non_snake_case)]` on by default\r\n\r\nwarning: variable `Second` should have a snake case name\r\n  --> src/main.rs:13:9\r\n   |\r\n13 |         Second => {\r\n   |         ^^^^^^ help: convert the identifier to snake case (notice the capitalization): `second`\r\n\r\nwarning: variable `Third` should have a snake case name\r\n  --> src/main.rs:16:9\r\n   |\r\n16 |         Third => {\r\n   |         ^^^^^ help: convert the identifier to snake case: `third`\r\n\r\nFor more information about this error, try `rustc --explain E0170`.\r\nwarning: `playground` (bin \"playground\") generated 11 warnings\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.60s\r\n     Running `target/debug/playground`\r\n\r\nStandard Output\r\n\r\n\r\n\r\n\u2193\u2193\u2193 trying my_tricky_func\r\nFirst\r\nFirst\r\nFirst\r\n\r\n\r\n\u2193\u2193\u2193 trying my_ok_func\r\nThird\r\nSecond\r\nFirst\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\n\r\nCompiling playground v0.0.1 (/playground)\r\nerror: should be like this:`BusinessType::First`\r\n  --> src/main.rs:10:9\r\n   |\r\n10 |         First => {\r\n   |         ^^^^^ help: to match on the variant, qualify the path: `BusinessType::First`\r\n   |\r\n   = note: `#[warn(bindings_with_variant_name)]` on by default\r\n\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104966/timeline", "performed_via_github_app": null, "state_reason": "completed"}