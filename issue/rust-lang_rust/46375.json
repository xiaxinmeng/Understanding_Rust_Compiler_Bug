{"url": "https://api.github.com/repos/rust-lang/rust/issues/46375", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46375/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46375/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46375/events", "html_url": "https://github.com/rust-lang/rust/issues/46375", "id": 277864373, "node_id": "MDU6SXNzdWUyNzc4NjQzNzM=", "number": 46375, "title": "Poor error message for attempt to make doubly-fat pointers", "user": {"login": "jimblandy", "id": 751272, "node_id": "MDQ6VXNlcjc1MTI3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/751272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimblandy", "html_url": "https://github.com/jimblandy", "followers_url": "https://api.github.com/users/jimblandy/followers", "following_url": "https://api.github.com/users/jimblandy/following{/other_user}", "gists_url": "https://api.github.com/users/jimblandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimblandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimblandy/subscriptions", "organizations_url": "https://api.github.com/users/jimblandy/orgs", "repos_url": "https://api.github.com/users/jimblandy/repos", "events_url": "https://api.github.com/users/jimblandy/events{/privacy}", "received_events_url": "https://api.github.com/users/jimblandy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-29T18:45:39Z", "updated_at": "2020-02-01T20:53:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Compiling the following code yields the given error:\r\n```rust\r\n#![allow(unused_variables)]\r\n\r\ntrait T1 { fn f(&self); }\r\ntrait T2 { fn g(&self); }\r\n\r\nstruct S;\r\n\r\nimpl T1 for S {\r\n    fn f(&self) {\r\n        println!(\"<S as T1>::f\");\r\n    }\r\n}\r\n\r\nimpl T2 for T1 {\r\n    fn g(&self) {\r\n        println!(\"<T1 as T2>::g\");\r\n        self.f();\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let s: S = S;\r\n    let bs: Box<S> = Box::new(s);\r\n\r\n    let t1_object: Box<T1> = bs;\r\n    let t2_object: Box<T2> = t1_object;\r\n}\r\n```\r\n\r\n```plain\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:26:30\r\n   |\r\n26 |     let t2_object: Box<T2> = t1_object;\r\n   |                              ^^^^^^^^^ expected trait `T2`, found trait `T1`\r\n   |\r\n   = note: expected type `std::boxed::Box<T2>`\r\n              found type `std::boxed::Box<T1>`\r\n```\r\n\r\nThis is confusing when the intent is to create a trait object. I think it's common to internalize the rule that one can coerce `Box<T>` to `Box<Trait>` if `T: Trait`, without noticing the side requirement that `Box<T>` must not be a fat pointer, lest we create a doubly-fat pointer.\r\n\r\nI would speculate that what's going on in the compiler is that the coercion code declines to perform any coercion, leaving Rust to report the mismatch. It would be helpful to issue a note to the effect that trait object creation was considered, but rejected because the incoming pointer was already fat.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46375/timeline", "performed_via_github_app": null, "state_reason": null}