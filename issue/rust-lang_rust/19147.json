{"url": "https://api.github.com/repos/rust-lang/rust/issues/19147", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19147/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19147/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19147/events", "html_url": "https://github.com/rust-lang/rust/issues/19147", "id": 49586050, "node_id": "MDU6SXNzdWU0OTU4NjA1MA==", "number": 19147, "title": "`fn foo(&mut self)` with a `&mut [T]` called with `x.foo()` copies the `x` slice instead of passing by reference", "user": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/20", "html_url": "https://github.com/rust-lang/rust/milestone/20", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/20/labels", "id": 452034, "node_id": "MDk6TWlsZXN0b25lNDUyMDM0", "number": 20, "title": "1.0", "description": "This will be the first major release of Rust, where we offer some guaranteed level of support and backwards compatibility.\r\n\r\nThe significant criteria for this release are:\r\n\r\n* Language backwards compatibility - All major features are in, and in their final form. Generally, the only new language features added after this milestone must be backwards compatible, or to fix soundness holes, though we do expect to have some leeway to make small incompatible fixes that have low impact on existing code bases.\r\n\r\n* Library stability - We have a system of measuring and ensuring the stability of API's, and a significant portion of the standard library is declared stable. Stable API's will not change. Large portions of the standard library need to be stable for 1.0, including primitive types, vectors, strings, option, numerics, collections, some I/O and concurrency.\r\n\r\n* User experience - The system is polished and the presentation is complete and professional. New users have a clear path to using and learning the system. This encompasses the web site, documentation, installation, and tooling.\r\n", "creator": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 376, "state": "closed", "created_at": "2013-10-10T18:48:33Z", "updated_at": "2016-08-28T23:13:24Z", "due_on": "2015-05-15T07:00:00Z", "closed_at": "2015-05-21T20:59:13Z"}, "comments": 5, "created_at": "2014-11-20T17:07:47Z", "updated_at": "2014-12-12T15:17:08Z", "closed_at": "2014-12-12T15:17:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here's an example:\n\n``` rust\nuse std::raw;\nuse std::mem;\nuse std::slice;\nuse std::io;\nuse std::io::{IoResult, IoError};\n\ntrait MyWriter {\n    fn my_write(&mut self, buf: &[u8]) -> IoResult<()>;\n}\n\nimpl<'a> MyWriter for &'a mut [u8] {\n    fn my_write(&mut self, buf: &[u8]) -> IoResult<()> {\n        let x: *mut &mut [u8] = self;\n        println!(\"MyWriter ptr: {}\", x);\n\n        // return an error if the entire write does not fit in the buffer\n        let write_len = buf.len();\n        if write_len > self.len() {\n            return Err(IoError {\n                kind: io::OtherIoError,\n                desc: \"Trying to write past end of buffer\",\n                detail: None\n            })\n        }\n\n        slice::bytes::copy_memory(*self, buf);\n\n        println!(\"before: {}\", self);\n\n        unsafe {\n            *self = mem::transmute(raw::Slice {\n                data: self.as_ptr().offset(write_len as int),\n                len: self.len() - write_len,\n            });\n        }\n\n        println!(\"after:  {}\", self);\n\n        Ok(())\n    }\n}\n\nfn main() {\n    let mut buf = [0_u8, .. 6];\n    println!(\"ptr: {}\", buf);\n\n    {\n        let mut writer = buf.as_mut_slice();\n        println!(\"writer: {}\", writer);\n        writer.my_write(&[0, 1, 2]).unwrap();\n        println!(\"writer: {}\", writer);\n        writer.my_write(&[3, 4, 5]).unwrap();\n        println!(\"writer: {}\", writer);\n    }\n    println!(\"buf:    {}\", buf);\n    println!(\"\");\n\n    let mut buf = [0_u8, .. 6];\n    println!(\"buf:    {}\", buf);\n\n    {\n        let mut writer = buf.as_mut_slice();\n        println!(\"writer: {}\", writer);\n        (&mut writer).my_write(&[0, 1, 2]).unwrap();\n        println!(\"writer: {}\", writer);\n        (&mut writer).my_write(&[3, 4, 5]).unwrap();\n        println!(\"writer: {}\", writer);\n    }\n    println!(\"buf:    {}\", buf);\n    println!(\"\");\n\n    let mut buf = [0_u8, .. 6];\n    println!(\"buf:    {}\", buf);\n\n    {\n        let mut writer = buf.as_mut_slice();\n        println!(\"writer: {}\", writer);\n        MyWriter::my_write(&mut writer, &[0, 1, 2]).unwrap();\n        println!(\"writer: {}\", writer);\n        MyWriter::my_write(&mut writer, &[3, 4, 5]).unwrap();\n        println!(\"writer: {}\", writer);\n    }\n    println!(\"buf:    {}\", buf);\n    println!(\"\");\n}\n```\n\nThis prints out the following output. You can see that using the `writer.my_write(...)` form passes in a different `self` address for each call, whereas explicitly using a `&mut writer` passes in the same address.\n\ncc @nikomatsakis and @aturon. Niko on irc was suspecting this might be related to auto-ref-ref.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19147/timeline", "performed_via_github_app": null, "state_reason": "completed"}