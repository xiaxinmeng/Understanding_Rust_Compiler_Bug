{"url": "https://api.github.com/repos/rust-lang/rust/issues/94558", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94558/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94558/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94558/events", "html_url": "https://github.com/rust-lang/rust/issues/94558", "id": 1158402438, "node_id": "I_kwDOAAsO6M5FC9GG", "number": 94558, "title": "Silenced `unconditional_recursion` when a modified parameter is passed", "user": {"login": "meme", "id": 18178821, "node_id": "MDQ6VXNlcjE4MTc4ODIx", "avatar_url": "https://avatars.githubusercontent.com/u/18178821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meme", "html_url": "https://github.com/meme", "followers_url": "https://api.github.com/users/meme/followers", "following_url": "https://api.github.com/users/meme/following{/other_user}", "gists_url": "https://api.github.com/users/meme/gists{/gist_id}", "starred_url": "https://api.github.com/users/meme/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meme/subscriptions", "organizations_url": "https://api.github.com/users/meme/orgs", "repos_url": "https://api.github.com/users/meme/repos", "events_url": "https://api.github.com/users/meme/events{/privacy}", "received_events_url": "https://api.github.com/users/meme/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-03-03T13:21:07Z", "updated_at": "2022-03-04T15:44:03Z", "closed_at": "2022-03-04T15:44:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n\r\n```rust\r\n#![allow(dead_code)]\r\n\r\nstruct A;\r\n\r\nimpl A {\r\n  fn b(&mut self, c: &str) -> Option<usize> {\r\n    self.b(c.trim())\r\n  }\r\n}\r\n\r\nfn main() {\r\n  let mut _a = A {};\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\nNo diagnostics.\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\nwarning: function cannot return without recursing\r\n --> thing.rs:6:3\r\n  |\r\n6 |   fn b(&mut self, c: &str) -> Option<usize> {\r\n  |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\r\n7 |     self.b(c.trim())\r\n  |     --------- recursive call site\r\n  |\r\n  = note: `#[warn(unconditional_recursion)]` on by default\r\n  = help: a `loop` may express intention better if this is on purpose\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n\r\nThe `unconditional_recursion` fails to detect recursion when a parameter passed to itself has a member call, for example:\r\n if the call to `.trim()` is removed, the `unconditional_recursion` is presented. Instead, the compiler should also handle cases where the parameter has a member call with a return as this doesn't change the reality of the recursive function.", "closed_by": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94558/timeline", "performed_via_github_app": null, "state_reason": "completed"}