{"url": "https://api.github.com/repos/rust-lang/rust/issues/62446", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62446/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62446/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62446/events", "html_url": "https://github.com/rust-lang/rust/issues/62446", "id": 464859986, "node_id": "MDU6SXNzdWU0NjQ4NTk5ODY=", "number": 62446, "title": "Unnecessary copy when constructing arrays from returned arrays?", "user": {"login": "bwesterb", "id": 9975, "node_id": "MDQ6VXNlcjk5NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/9975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bwesterb", "html_url": "https://github.com/bwesterb", "followers_url": "https://api.github.com/users/bwesterb/followers", "following_url": "https://api.github.com/users/bwesterb/following{/other_user}", "gists_url": "https://api.github.com/users/bwesterb/gists{/gist_id}", "starred_url": "https://api.github.com/users/bwesterb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bwesterb/subscriptions", "organizations_url": "https://api.github.com/users/bwesterb/orgs", "repos_url": "https://api.github.com/users/bwesterb/repos", "events_url": "https://api.github.com/users/bwesterb/events{/privacy}", "received_events_url": "https://api.github.com/users/bwesterb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}, {"id": 2061474479, "node_id": "MDU6TGFiZWwyMDYxNDc0NDc5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt-nrvo", "name": "A-mir-opt-nrvo", "color": "f7e101", "default": false, "description": "Fixed by NRVO"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-07-06T14:35:11Z", "updated_at": "2022-02-19T15:10:02Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I want to construct a big array by concatenating smaller arrays returned by other functions. As a simple example:\r\n\r\n```rust\r\npub fn g(f: &Fn() -> [u64;40]) -> [u64;80] {\r\n    let a = f();\r\n    let b = f();\r\n    let mut ret = [0u64;80];\r\n    ret[0..40].copy_from_slice(&a[..]);\r\n    ret[40..80].copy_from_slice(&b[..]);\r\n    ret\r\n}\r\n```\r\n\r\nRust nightly [generates a call to memcpy](https://godbolt.org/z/XeVwFj).\r\n\r\nIs there a way to prevent this memcpy?  Am I missing obvious other way to write this function?\r\n\r\nOf course one could rewrite the called function `f` to take a `&mut [u64]` instead of returning the array, but that removes compile-time checks on the length and introduces bounds checks.  Using `&mut [u64;40]` as an \"out\" argument solves that problem, but then I don't see a safe way to get two `&mut [u64;40]` into `[u64;80]` without using `transmute`.\r\n\r\n(Background: I'm implementing the XMSSMT hash-based signature in Rust, which involves concatenating lots of hashes.  The [usual Rust hash library](https://github.com/RustCrypto/hashes) returns an array (actually a `GenericArray`) instead of using a `&mut [u64;...]` parameter which led me to believe that the copy could be optimised away.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62446/reactions", "total_count": 4, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 3}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62446/timeline", "performed_via_github_app": null, "state_reason": null}