{"url": "https://api.github.com/repos/rust-lang/rust/issues/32930", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32930/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32930/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32930/events", "html_url": "https://github.com/rust-lang/rust/issues/32930", "id": 148014950, "node_id": "MDU6SXNzdWUxNDgwMTQ5NTA=", "number": 32930, "title": "Bad / misleading error message with auto deref and mutable borrows of multiple fields", "user": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 867483626, "node_id": "MDU6TGFiZWw4Njc0ODM2MjY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-fixed-by-NLL", "name": "NLL-fixed-by-NLL", "color": "f799ea", "default": false, "description": "Bugs fixed, but only when NLL is enabled."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-04-13T10:20:41Z", "updated_at": "2019-04-29T11:16:41Z", "closed_at": "2019-04-29T11:16:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider ([playpen](https://play.rust-lang.org/?gist=c948d8a0c4e8e0bc697231d743c4f4bd&version=stable&backtrace=0)):\n\n``` rust\nstruct Foo {\n    a: u32,\n    b: u32,\n}\n\nstruct Container {\n    foo: Foo,\n}\n\nimpl ::std::ops::Deref for Container {\n    type Target = Foo;\n\n    fn deref(&self) -> &Foo { &self.foo }\n}\n\nimpl ::std::ops::DerefMut for Container {\n    fn deref_mut(&mut self) -> &mut Foo { &mut self.foo }\n}\n\nfn main() {\n    let mut c = Container { foo: Foo { a: 0, b: 0 } };\n\n    {\n        // let mut c = &mut *c; // uncomment to make it work\n        let _a = &mut c.a;\n        let _b = &mut c.b; // ERROR!\n    }\n\n    let mut d = Box::new(Foo { a: 0, b: 0 });\n\n    {\n        // let mut d = &mut *d; // uncomment to make it work\n        let _a = &mut d.a;\n        let _b = &mut d.b; // ERROR!\n    }\n}\n```\n\nIntuitively this should work since rust allows mutable borrows of disjoint fields however it does not because auto deref is involved.\n\nThe error message here is particularly bad / misleading for the `Box` case, in my opinion:\n\n``` plain\n<anon>:34:23: 34:26 error: cannot borrow `d` (here through borrowing `d.b`) as mutable more than once at a time [E0499]\n<anon>:34         let _b = &mut d.b;\n                                ^~~\n<anon>:34:23: 34:26 help: see the detailed explanation for E0499\n<anon>:33:23: 33:26 note: previous borrow of `d` occurs here (through borrowing `d.a`); the mutable borrow prevents subsequent moves, borrows, or modification of `d` until the borrow ends\n<anon>:33         let _a = &mut d.a;\n                                ^~~\n<anon>:35:6: 35:6 note: previous borrow ends here\n<anon>:31     {\n<anon>:32         // let mut d = &mut *d; // uncomment to make it work\n<anon>:33         let _a = &mut d.a;\n<anon>:34         let _b = &mut d.b;\n<anon>:35     }\n```\n\nFirst found on [reddit](https://www.reddit.com/r/rust/comments/4eknip/cannot_implement_basic_data_structures_in_rust/).\n", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32930/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32930/timeline", "performed_via_github_app": null, "state_reason": "completed"}