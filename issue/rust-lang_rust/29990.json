{"url": "https://api.github.com/repos/rust-lang/rust/issues/29990", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29990/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29990/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29990/events", "html_url": "https://github.com/rust-lang/rust/issues/29990", "id": 118287516, "node_id": "MDU6SXNzdWUxMTgyODc1MTY=", "number": 29990, "title": "Book: Concurrency example is bad", "user": {"login": "karyon", "id": 1891915, "node_id": "MDQ6VXNlcjE4OTE5MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1891915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karyon", "html_url": "https://github.com/karyon", "followers_url": "https://api.github.com/users/karyon/followers", "following_url": "https://api.github.com/users/karyon/following{/other_user}", "gists_url": "https://api.github.com/users/karyon/gists{/gist_id}", "starred_url": "https://api.github.com/users/karyon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karyon/subscriptions", "organizations_url": "https://api.github.com/users/karyon/orgs", "repos_url": "https://api.github.com/users/karyon/repos", "events_url": "https://api.github.com/users/karyon/events{/privacy}", "received_events_url": "https://api.github.com/users/karyon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-11-22T20:46:40Z", "updated_at": "2016-01-06T16:29:53Z", "closed_at": "2016-01-06T16:29:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Link: https://doc.rust-lang.org/stable/book/concurrency.html\n\nTo me, having an array with items to work on, then giving each thread an ID and let each work on the corresponding item is maybe error-prone but data race free when done correctly. In C/C++, a solution to prevent programmer errors would be to give each thread a reference to the one item it's supposed to work on, and i expected to see something like that as solution (not knowing rust enough, i don't know whether that's even possible). The proposed solution in the chapter looks really bad: It introduces synchronization on the whole array which is not necessary and just overhead.\n\nThen there is no explanation given why any waiting is needed.\n\nLastly, as far as i understand the send/receive is used for simply joining the threads, which should be done by actually using join, not send/receive.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29990/timeline", "performed_via_github_app": null, "state_reason": "completed"}