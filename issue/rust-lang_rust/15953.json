{"url": "https://api.github.com/repos/rust-lang/rust/issues/15953", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/15953/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/15953/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/15953/events", "html_url": "https://github.com/rust-lang/rust/issues/15953", "id": 38656733, "node_id": "MDU6SXNzdWUzODY1NjczMw==", "number": 15953, "title": "llvm is generating different move code for interior moves, and moving an argument", "user": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-07-24T17:51:27Z", "updated_at": "2017-03-11T03:51:36Z", "closed_at": "2017-03-11T03:51:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm not quite sure if this has a performance impact, but I noticed that rust seems to be generating different code for moves inside a function and a function argument. Here's an example:\n\n```\nstruct Foo {\n    x: Vec<int>,\n}\n\n#[inline(never)]\n#[no_mangle]\nfn interior(x: Vec<int>) -> Vec<int> {\n    let Foo { x } = Foo { x: x };\n    x\n}\n\n#[inline(never)]\n#[no_mangle]\nfn exterior(x: Vec<int>) -> Vec<int> {\n    x\n}\n\nfn main() {\n    let x = interior(Vec::new());\n    println!(\"{}\", x);\n\n    let x = exterior(Vec::new());\n    println!(\"{}\", x);\n}\n```\n\nAt opt-level=3, llvm generates:\n\n```\n; Function Attrs: noinline uwtable\ndefine internal fastcc void @interior(%\"struct.collections::vec::Vec<[int]>[#6]\"* noalias nocapture nonnull sret, %\"struct.collections::vec::Vec<[int]>[#6]\"* noalias nocapture nonnull) unnamed_addr #0 {\n\"_ZN32collections..vec..Vec$LT$int$GT$39glue_drop.$x22glue_drop$x22$LP$1381$RP$17h0c4580be04eb3673E.exit4\":\n  %2 = bitcast %\"struct.collections::vec::Vec<[int]>[#6]\"* %1 to i8*\n  %3 = bitcast %\"struct.collections::vec::Vec<[int]>[#6]\"* %1 to <2 x i64>*\n  %4 = load <2 x i64>* %3, align 8\n  %.sroa.7.0..sroa_idx20 = getelementptr inbounds %\"struct.collections::vec::Vec<[int]>[#6]\"* %1, i64 0, i32 2\n  %.sroa.7.0.copyload = load i64** %.sroa.7.0..sroa_idx20, align 8\n  %5 = bitcast %\"struct.collections::vec::Vec<[int]>[#6]\"* %0 to <2 x i64>*\n  store <2 x i64> %4, <2 x i64>* %5, align 8\n  %x.sroa.6.0..sroa_idx13 = getelementptr inbounds %\"struct.collections::vec::Vec<[int]>[#6]\"* %0, i64 0, i32 2\n  store i64* %.sroa.7.0.copyload, i64** %x.sroa.6.0..sroa_idx13, align 8\n  tail call void @llvm.lifetime.end(i64 24, i8* %2)\n  ret void\n}\n\n...\n\n; Function Attrs: noinline uwtable\ndefine internal fastcc void @exterior(%\"struct.collections::vec::Vec<[int]>[#6]\"* noalias nocapture nonnull sret, %\"struct.collections::vec::Vec<[int]>[#6]\"* noalias nocapture nonnull) unnamed_addr #0 {\n\"_ZN32collections..vec..Vec$LT$int$GT$39glue_drop.$x22glue_drop$x22$LP$1381$RP$17h0c4580be04eb3673E.exit\":\n  %2 = bitcast %\"struct.collections::vec::Vec<[int]>[#6]\"* %1 to i8*\n  %3 = bitcast %\"struct.collections::vec::Vec<[int]>[#6]\"* %0 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %2, i64 24, i32 8, i1 false)\n  tail call void @llvm.lifetime.end(i64 24, i8* %2)\n  ret void\n}\n```\n\ncc: @pcwalton.\n", "closed_by": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/15953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/15953/timeline", "performed_via_github_app": null, "state_reason": "completed"}