{"url": "https://api.github.com/repos/rust-lang/rust/issues/53735", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53735/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53735/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53735/events", "html_url": "https://github.com/rust-lang/rust/issues/53735", "id": 354295514, "node_id": "MDU6SXNzdWUzNTQyOTU1MTQ=", "number": 53735, "title": "Experiment with a \"(type) pattern pre-compiler\" in rustc::ty::_match.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-27T12:18:00Z", "updated_at": "2019-01-27T18:07:46Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Instead of zipping two trees and using the same unification procedure as the rest of inference, the \"pattern\" type could be turned into linear \"instruction stream\" for a matcher (\"interpreter\"), to walk the type \"tree\", first to check that the type actually matches and *then* to unify variables (if any).\r\n\r\nE.g for. `Result<Vec<$0>, io::Error>`, it would check the `Result`, `Vec` and `io::Error` heads, and for `($0, $0)` it could equate the pair elements, *before* unifying a type with `$0`, in both cases.\r\n\r\nThis could also apply to Chalk, but I'm less familiar with its internal representation.\r\ncc @nikomatsakis @sunjay ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53735/timeline", "performed_via_github_app": null, "state_reason": null}