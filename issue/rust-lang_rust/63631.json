{"url": "https://api.github.com/repos/rust-lang/rust/issues/63631", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63631/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63631/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63631/events", "html_url": "https://github.com/rust-lang/rust/issues/63631", "id": 481512895, "node_id": "MDU6SXNzdWU0ODE1MTI4OTU=", "number": 63631, "title": "rustc (>= 1.20.0) fails to optimize moves in trivial cases", "user": {"login": "resilar", "id": 18658078, "node_id": "MDQ6VXNlcjE4NjU4MDc4", "avatar_url": "https://avatars.githubusercontent.com/u/18658078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/resilar", "html_url": "https://github.com/resilar", "followers_url": "https://api.github.com/users/resilar/followers", "following_url": "https://api.github.com/users/resilar/following{/other_user}", "gists_url": "https://api.github.com/users/resilar/gists{/gist_id}", "starred_url": "https://api.github.com/users/resilar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/resilar/subscriptions", "organizations_url": "https://api.github.com/users/resilar/orgs", "repos_url": "https://api.github.com/users/resilar/repos", "events_url": "https://api.github.com/users/resilar/events{/privacy}", "received_events_url": "https://api.github.com/users/resilar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-16T08:58:52Z", "updated_at": "2022-01-23T15:39:43Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The example code below generates extra stack copies of String (meta)data in function `got()` which is expected to produce identical *optimized* code with `expect()`. For quickly verifying the issue, compare `sub rsp, $FRAME_SIZE` instructions which initialize stack frames in the beginning of `got()` & `expect()` functions compiled with `-C opt-level=3` (or measure & compare the generated code sizes). [Rust Playground link](https://play.rust-lang.org/?version=nightly&mode=release&edition=2018&gist=0438199d12435fdcdcc8e65605b762af).\r\n\r\nrustc versions before 1.20.0 produce expected optimized assembly.\r\n\r\n```rust\r\npub fn got() -> String {\r\n    let mut res = String::new();\r\n    let s0 = String::from(\"foobar\");\r\n    res.push_str(&s0); let s0 = s0;\r\n    res.push_str(&s0); let s0 = s0;\r\n    res.push_str(&s0); let s0 = s0;\r\n    res.push_str(&s0);\r\n    res\r\n}\r\n\r\npub fn expect() -> String {\r\n    let mut res = String::new();\r\n    let s0 = String::from(\"foobar\");\r\n    res.push_str(&s0);\r\n    res.push_str(&s0);\r\n    res.push_str(&s0);\r\n    res.push_str(&s0);\r\n    res\r\n}\r\n\r\n/*\r\n * s0: String required, s0: &str generates correctly optimized assembly\r\n * res.push_str(...) line repetitions can be increased for a greater effect\r\n * let s0 = s0 used for illustration purposes (variable names do not matter)\r\n */\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63631/timeline", "performed_via_github_app": null, "state_reason": null}