{"url": "https://api.github.com/repos/rust-lang/rust/issues/77553", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77553/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77553/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77553/events", "html_url": "https://github.com/rust-lang/rust/issues/77553", "id": 714421222, "node_id": "MDU6SXNzdWU3MTQ0MjEyMjI=", "number": 77553, "title": "std::process::exit() on MSVC bypasses writing LLVM InstrProf counters to profraw file", "user": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 266005765, "node_id": "MDU6TGFiZWwyNjYwMDU3NjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows-msvc", "name": "O-windows-msvc", "color": "6e6ec0", "default": false, "description": "Toolchain: MSVC, Operating system: Windows"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2483744621, "node_id": "MDU6TGFiZWwyNDgzNzQ0NjIx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-code-coverage", "name": "A-code-coverage", "color": "f7e101", "default": false, "description": "Area: Source-based code coverage (-Cinstrument-coverage)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-10-04T23:03:35Z", "updated_at": "2023-01-07T12:37:17Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This bug does not occur on Linux or MacOS.\r\n\r\nNote that I observed this unexpected behavior when compiling on Windows, targeting MSVC.\r\n\r\nI have not confirmed the behavior on Windows targeting GNU.\r\n\r\nThe minimal reproducible example (MRE) here shows the problem even when returning a success status code (`0`), and while a Rust program will generate a `0` status for programs that return a `Result::OK` or a `()`, and a `1` status for programs that return `Result::Err`, as far as I know, we need to call `std::process::exit(...)` to return any other status code.\r\n\r\nTherefore, any program that requires the ability to return a status other than `0` or `1` may get empty, or worse, incomplete, coverage results when testing coverage under MSVC.\r\n\r\nI tried this code:\r\n\r\n```rust\r\nfn main() {\r\n    std::process::exit(0);\r\n}\r\n```\r\n\r\n```shell\r\n$ build/x86_64-pc-windows-msvc/stage1/bin/rustc.exe -Zinstrument-coverage basic.rs\r\n$ LLVM_PROFILE_FILE=basic.profraw ./basic.exe\r\n$ ls -l basic.profraw\r\n-rw-r--r-- 1 richkadel Domain Users 0 Oct  4 15:32 basic.profraw\r\n```\r\n\r\nI expected to see this happen: *The same result as on Linux and MacOS, and the same result that I get if the call to `std::process::exit(0)` is removed. In both cases, the `basic.profraw` file size is greater than `0`. In the working cases, the non-empty `basic.profraw` file can be used with `llvm-profdata` and `llvm-cov` tools to generate and view coverage reports.*\r\n\r\nHere is the expected result on Linux, for example:\r\n\r\n```shell\r\n$ build/x86_64-unknown-linux-gnu/llvm/bin/llvm-profdata merge -sparse basic.profraw -o basic.profdata\r\n$ build/x86_64-unknown-linux-gnu/llvm/bin/llvm-cov show --instr-profile=basic.profdata basic\r\n    1|      1|fn main() {\r\n    2|      1|    std::process::exit(0);\r\n    3|      1|}\r\n```\r\n\r\nInstead, this happened: *The `basic.profraw` file size is `0` (as shown in the example above). LLVM coverage reports show no results.*\r\n\r\n### Meta\r\n\r\n```shell\r\n./build/x86_64-unknown-linux-gnu/stage1/bin/rustc --version --verbose\r\nrustc 1.49.0-dev\r\nbinary: rustc\r\ncommit-hash: unknown\r\ncommit-date: unknown\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.49.0-dev\r\nLLVM version: 11.0\r\n```\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77553/timeline", "performed_via_github_app": null, "state_reason": null}