{"url": "https://api.github.com/repos/rust-lang/rust/issues/97227", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97227/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97227/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97227/events", "html_url": "https://github.com/rust-lang/rust/issues/97227", "id": 1243528558, "node_id": "I_kwDOAAsO6M5KHr1u", "number": 97227, "title": "Tracking Issue for seekable io::Take", "user": {"login": "wangbj", "id": 1295055, "node_id": "MDQ6VXNlcjEyOTUwNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1295055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wangbj", "html_url": "https://github.com/wangbj", "followers_url": "https://api.github.com/users/wangbj/followers", "following_url": "https://api.github.com/users/wangbj/following{/other_user}", "gists_url": "https://api.github.com/users/wangbj/gists{/gist_id}", "starred_url": "https://api.github.com/users/wangbj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wangbj/subscriptions", "organizations_url": "https://api.github.com/users/wangbj/orgs", "repos_url": "https://api.github.com/users/wangbj/repos", "events_url": "https://api.github.com/users/wangbj/events{/privacy}", "received_events_url": "https://api.github.com/users/wangbj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-05-20T19:21:58Z", "updated_at": "2022-05-20T19:37:55Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Feature gate: `#![feature(seek_io_take)]`\r\n\r\n(feature gate open to change)\r\n\r\nThis is a tracking issue for adding seek instance for `io::Take`, see issue [#37214](https://github.com/rust-lang/rust/issues/37214).\r\n\r\n### Why\r\nImagine there's a smaller components within a larger file, the component have predefined ranges, reading beyond the range should be a hard error. But some fields are variable size encoded, so it's hard to know how many bytes to read until we already decoded/read a large part of it. It is super cumbersome to check every read is within the limit (of the component); however, with `io::Take`, this is much easier: We only need to create a new `io::Take` by limiting the upper bound to the component's spec. and just let the user to read what ever needed -- any attempt to read beyond the limit would cause a hard io error.\r\n\r\nThis is all good, but sometimes we need more powerful io rather than read. For instance, we may need `peek` and restore `stream_position()` depends on what data was `peek`-ed, skip a large chunk of unwanted bytes, or maybe we simply wanted to keep track of the `stream_position()` for better error handling. This is not possible because `io::Take` is *not* `Seek`.\r\n\r\n### Public API\r\n\r\nAdded `Seek` instance for `io::Take<T>`, so that we can call `io::Seek` APIs on `io::Take<T>`.\r\n\r\n```rust\r\n\r\npub struct Take<T> {\r\n    inner: T,\r\n    limit: u64,\r\n    cursor: u64,          // <---- new member, current position within `Take`.\r\n}\r\n\r\nimpl<T: Seek> Seek for Take<T> {\r\n    fn seek(&mut self, pos: SeekFrom) -> Result<u64> {\r\n        // snip\r\n    }\r\n}\r\n```\r\n\r\nThis is possible by adding a `cursor` member to `io::Take`, together with `limit`, we have:\r\n\r\n  - cursor + limit === original_limit (when Take is constructed)\r\n  - Seek beyond original_limit => stays at original_limit\r\n  - Seek beyond 0 (< 0) => `ErrorKind::InvalidInput` (EINVAL).\r\n  - Read beyond original_limit => io error.\r\n  - seek without position changes is honored (This is expected, see `BufReader` [doc](https://doc.rust-lang.org/std/io/struct.BufReader.html#impl-Seek)).\r\n\r\nThe proposed method has an advantage over approach in #37214, by *not* using an extra `stream_position()` when `io::Take` is constructed.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97227/timeline", "performed_via_github_app": null, "state_reason": null}