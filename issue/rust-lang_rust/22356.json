{"url": "https://api.github.com/repos/rust-lang/rust/issues/22356", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/22356/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/22356/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/22356/events", "html_url": "https://github.com/rust-lang/rust/issues/22356", "id": 57718051, "node_id": "MDU6SXNzdWU1NzcxODA1MQ==", "number": 22356, "title": "Lifetime error with associated types, methods, and type aliases.", "user": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-15T04:56:03Z", "updated_at": "2015-02-22T10:25:34Z", "closed_at": "2015-02-22T10:25:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Sorry, I couldn't think up a better name for this issue. It popped up in gfx-rs/gfx-rs#564.\n\n``` rust\npub struct Handle<T, I>(T, I);\n\nimpl<T, I> Handle<T, I> {\n    pub fn get_info(&self) -> &I {\n        let Handle(_, ref info) = *self;\n        info\n    }\n}\n\npub struct BufferHandle<D: Device, T> {\n    raw: RawBufferHandle<D>,\n}\n\nimpl<D: Device, T> BufferHandle<D, T> {\n    pub fn get_info(&self) -> &String {\n        self.raw.get_info()\n    }\n}\n\npub type RawBufferHandle<D: Device> = Handle<<D as Device>::Buffer, String>;\n\npub trait Device {\n    type Buffer;\n}\n```\n\n```\n\n<anon>:16:9: 16:17 error: the associated type `<D as Device>::Buffer` may not live long enough [E0311]\n<anon>:16         self.raw.get_info()\n                  ^~~~~~~~\n<anon>:16:9: 16:17 help: consider adding an explicit lifetime bound for `<D as Device>::Buffer`\n<anon>:16         self.raw.get_info()\n                  ^~~~~~~~\n<anon>:15:39: 17:6 note: the associated type `<D as Device>::Buffer` must be valid for the anonymous lifetime #1 defined on the block at 15:38...\n<anon>:15     pub fn get_info(&self) -> &String {\n<anon>:16         self.raw.get_info()\n<anon>:17     }\n<anon>:16:9: 16:17 note: ...so that the reference type `&Handle<<D as Device>::Buffer, collections::string::String>` does not outlive the data it points at\n<anon>:16         self.raw.get_info()\n                  ^~~~~~~~\n<anon>:16:9: 16:17 error: the associated type `<D as Device>::Buffer` may not live long enough [E0311]\n<anon>:16         self.raw.get_info()\n                  ^~~~~~~~\n<anon>:16:9: 16:17 help: consider adding an explicit lifetime bound for `<D as Device>::Buffer`\n<anon>:16         self.raw.get_info()\n                  ^~~~~~~~\n<anon>:15:39: 17:6 note: the associated type `<D as Device>::Buffer` must be valid for the anonymous lifetime #1 defined on the block at 15:38...\n<anon>:15     pub fn get_info(&self) -> &String {\n<anon>:16         self.raw.get_info()\n<anon>:17     }\n<anon>:16:9: 16:17 note: ...so that the reference type `&Handle<<D as Device>::Buffer, collections::string::String>` does not outlive the data it points at\n<anon>:16         self.raw.get_info()\n                  ^~~~~~~~\nerror: aborting due to 2 previous errors\n```\n\nMoving the implementation of `Handle::get_info` into `BufferHandle::get_info` seems to fix the problem:\n\n``` rust\nimpl<D: Device, T> BufferHandle<D, T> {\n    pub fn get_info(&self) -> &String {\n        let Handle(_, ref info) = self.raw;\n        info\n    }\n}\n```\n", "closed_by": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/22356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/22356/timeline", "performed_via_github_app": null, "state_reason": "completed"}