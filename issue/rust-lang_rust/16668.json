{"url": "https://api.github.com/repos/rust-lang/rust/issues/16668", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/16668/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/16668/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/16668/events", "html_url": "https://github.com/rust-lang/rust/issues/16668", "id": 40882400, "node_id": "MDU6SXNzdWU0MDg4MjQwMA==", "number": 16668, "title": "Unboxed closures: cannot borrow data mutably in aliasable location", "user": {"login": "netvl", "id": 280456, "node_id": "MDQ6VXNlcjI4MDQ1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/280456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netvl", "html_url": "https://github.com/netvl", "followers_url": "https://api.github.com/users/netvl/followers", "following_url": "https://api.github.com/users/netvl/following{/other_user}", "gists_url": "https://api.github.com/users/netvl/gists{/gist_id}", "starred_url": "https://api.github.com/users/netvl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netvl/subscriptions", "organizations_url": "https://api.github.com/users/netvl/orgs", "repos_url": "https://api.github.com/users/netvl/repos", "events_url": "https://api.github.com/users/netvl/events{/privacy}", "received_events_url": "https://api.github.com/users/netvl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-08-22T06:29:10Z", "updated_at": "2014-10-28T01:16:06Z", "closed_at": "2014-10-28T01:16:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This code does not work very unexpectedly:\n\n``` rust\n#![feature(unboxed_closures)]\n\nstruct Parser<I, O> {\n    parse: Box<FnMut<(I,), Result<O, String>>>\n}\n\nimpl<I, O:'static> Parser<I, O> {\n    fn compose<K>(mut self, mut rhs: Parser<O, K>) -> Parser<I, K> {\n        Parser {\n            parse: box |&mut: x: I| {\n                match self.parse.call_mut((x,)) {\n                    Ok(r) => rhs.parse.call_mut((r,)),\n                    Err(e) => Err(e)\n                }\n            }\n        }\n    }\n}\n```\n\nThe error:\n\n```\n<anon>:11:23: 11:33 error: cannot borrow data mutably in an aliasable location\n<anon>:11                 match self.parse.call_mut((x,)) {\n                                ^~~~~~~~~~\n<anon>:12:30: 12:39 error: cannot borrow data mutably in an aliasable location\n<anon>:12                     Ok(r) => rhs.parse.call_mut((r,)),\n                                       ^~~~~~~~~\nerror: aborting due to 2 previous errors\n```\n\nWhen I expand this manually, I can get it to work:\n\n``` rust\n#![feature(unboxed_closures)]\n\nstruct Parser<I, O> {\n    parse: Box<FnMut<(I,), Result<O, String>>>\n}\n\nimpl<I, O:'static> Parser<I, O> {\n    fn compose<K>(self, rhs: Parser<O, K>) -> Parser<I, K> {\n        struct ManualClosure<I, O, K> {\n            this: Parser<I, O>,\n            rhs: Parser<O, K>\n        }\n\n        impl<I, O, K> FnMut<(I,), Result<K, String>> for ManualClosure<I, O, K> {\n            extern \"rust-call\" fn call_mut(&mut self, arg: (I,)) -> Result<K, String> {\n                match self.this.parse.call_mut(arg) {\n                    Ok(r) => self.rhs.parse.call_mut((r,)),\n                    Err(e) => Err(e)\n                }\n            }\n        }\n\n        Parser { parse: box ManualClosure { this: self, rhs: rhs } }\n    }\n}\n```\n\nThough for some reason completely opaque to me I need to put `'static` bound on `O` parameter, otherwise there is a compilation error:\n\n```\n<anon>:23:25: 23:67 error: value may contain references; add `'static` bound to `O` [E0149]\n<anon>:23         Parser { parse: box ManualClosure { this: self, rhs: rhs } }\n                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\n```\n\nThe original problem came [from here](http://stackoverflow.com/questions/25439240/type-error-calling-closures-stored-in-struct).\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/16668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/16668/timeline", "performed_via_github_app": null, "state_reason": "completed"}