{"url": "https://api.github.com/repos/rust-lang/rust/issues/49668", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49668/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49668/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49668/events", "html_url": "https://github.com/rust-lang/rust/issues/49668", "id": 311400578, "node_id": "MDU6SXNzdWUzMTE0MDA1Nzg=", "number": 49668, "title": "Tracking issue for the GlobalAlloc trait and related APIs", "user": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 219670472, "node_id": "MDU6TGFiZWwyMTk2NzA0NzI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/final-comment-period", "name": "final-comment-period", "color": "1e76d9", "default": false, "description": "In the final comment period and will be merged soon unless new substantive objections are raised."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 148, "created_at": "2018-04-04T21:39:17Z", "updated_at": "2018-07-24T19:11:55Z", "closed_at": "2018-06-12T02:48:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "PR https://github.com/rust-lang/rust/pull/49669 adds a `GlobalAlloc` trait, separate from `Alloc`. This issue track the stabilization of this trait and some related APIs, to provide the ability to [change the global allocator](https://github.com/rust-lang/rust/issues/27389), as well as allocating memory without abusing `Vec::with_capacity` + `mem::forget`.\r\n\r\nDefined in or reexported from the `std::alloc` module:\r\n\r\n**Update:** below is the API\u00a0proposed when this issue was first opened. The one being stabilized is at https://github.com/rust-lang/rust/issues/49668#issuecomment-393263510.\r\n\r\n<details>\r\n\r\n```rust\r\n/// #[global_allocator] can only be applied to a `static` item that implements this trait\r\npub unsafe trait GlobalAlloc {\r\n    unsafe fn alloc(&self, layout: Layout) -> *mut Opaque;\r\n    unsafe fn dealloc(&self, ptr: *mut Opaque, layout: Layout);\r\n\r\n    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut Opaque { \r\n        // Default impl: self.alloc() and ptr::write_bytes()\r\n    }\r\n    unsafe fn realloc(&self, ptr: *mut Opaque, layout: Layout, new_size: usize) -> *mut Opaque {\r\n        // Default impl: self.alloc() and ptr::copy_nonoverlapping() and self.dealloc()\r\n    }\r\n    \r\n    // More methods with default impls may be added in the future\r\n}\r\n\r\nextern {\r\n    pub type Opaque;\r\n}\r\n\r\n#[derive(Debug, Copy, Clone, PartialEq, Eq)]\r\npub struct Layout { /* private */ }\r\n\r\nimpl Layout {\r\n    pub fn from_size_align(size: usize: align: usize) -> Result<Self, LayoutError> {\u2026}\r\n    pub unsafe fn from_size_align_unchecked(size: usize: align: usize) -> Self {\u2026}\r\n    pub fn size(&self) -> usize {\u2026}\r\n    pub fn align(&self) -> usize {\u2026}\r\n    pub fn new<T>() -> Self {\u2026}\r\n    pub fn for_value<T: ?Sized>(t: &T) -> Self {\u2026}\r\n}\r\n\r\n#[derive(Copy, Clone, Debug)]\r\npub struct LayoutError { /* private */ }\r\n\r\n/// Forwards method calls to the `static` item registered\r\n/// with `#[global_allocator]` if any, or the operating system\u2019s default.\r\npub struct Global;\r\n\r\n/// The operating system\u2019s default allocator.\r\npub struct System;\r\n\r\nimpl GlobalAlloc for Global {\u2026}\r\nimpl GlobalAlloc for System {\u2026}\r\n```\r\n\r\n</details>\r\n\r\nCC @rust-lang/libs, @glandium\r\n\r\n## Unresolved questions or otherwise blocking\r\n\r\n* [x] Wait for extern types https://github.com/rust-lang/rust/issues/43467 to be stable in the language before stabilazing one in the standard library.\r\n* [x] Name of the `Global` type. `GlobalAllocator`?\r\n* [x] ~~Name of the `Void` type. Lower-case `void` would match C (our `*mut void` is very close to C\u2019s `void*` type), but violates the convension of camel-case for non-primitive types. But `Void` in camel-case is already the name of [an empty enum](https://docs.rs/void/1.0.2/void/enum.Void.html) (not an extern type like here) in a [popular](https://crates.io/crates/void#crate-downloads) crate. (An extern type is desirable so that `<*mut _>::offset` cannot be called without first casting to another pointer type.) Maybe call it `Opaque`? `Unknown`?~~ Renamed to `Opaque`.\r\n  * [x] Rename again to something else?\r\n* [x] ~Taking `Layout` by reference, or making it `Copy` https://github.com/rust-lang/rust/issues/48458.~ `Copy`: https://github.com/rust-lang/rust/pull/50109\r\n* [x] ~`GlobalAlloc::owns`: https://github.com/rust-lang/rust/issues/44302 proposes making it required for allocators to be able to tell if it \u201cowns\u201d a given pointer.~ Not to be required by this trait since glibc and Windows do not support this.\r\n* [x] ~Settle semantics of layout \"fit\" and other safety conditions.~ Without an `usable_size` method (for now), the layout passed to dealloc must be the same as was passed to alloc. (Same as with `Alloc::usable_size`\u2019s default impl returning `(layout.size(), layout.size())`.)\r\n* [x] ~An `oom` method is part of `GlobalAlloc` so that implementation-specific printing to stderr does not need to be part of liballoc and instead goes through `#[global_allocator]`, but this does not really belong in the `GlobalAlloc` trait. Should another mechanism like `#[global_allocator]` be added to have pluggable OOM handling?~ https://github.com/rust-lang/rust/pull/50144\r\n\r\n## Not proposed (yet) for stabilization\r\n\r\n* The `Alloc` trait\r\n* The rest of `Layout` methods\r\n* The `AllocErr` type\r\n\r\nWe\u2019re not ready to settle on a design for collections generic over the allocation type. Discussion of this use case should continue on the tracking issue for the `Alloc` trait: https://github.com/rust-lang/rust/issues/32838.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49668/reactions", "total_count": 8, "+1": 4, "-1": 0, "laugh": 0, "hooray": 4, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49668/timeline", "performed_via_github_app": null, "state_reason": "completed"}