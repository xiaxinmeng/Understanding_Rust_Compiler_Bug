{"url": "https://api.github.com/repos/rust-lang/rust/issues/45774", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45774/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45774/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45774/events", "html_url": "https://github.com/rust-lang/rust/issues/45774", "id": 271240099, "node_id": "MDU6SXNzdWUyNzEyNDAwOTk=", "number": 45774, "title": "Trait object calls not devirtualized", "user": {"login": "jrmuizel", "id": 332653, "node_id": "MDQ6VXNlcjMzMjY1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/332653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrmuizel", "html_url": "https://github.com/jrmuizel", "followers_url": "https://api.github.com/users/jrmuizel/followers", "following_url": "https://api.github.com/users/jrmuizel/following{/other_user}", "gists_url": "https://api.github.com/users/jrmuizel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrmuizel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrmuizel/subscriptions", "organizations_url": "https://api.github.com/users/jrmuizel/orgs", "repos_url": "https://api.github.com/users/jrmuizel/repos", "events_url": "https://api.github.com/users/jrmuizel/events{/privacy}", "received_events_url": "https://api.github.com/users/jrmuizel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-11-05T01:22:26Z", "updated_at": "2021-02-20T00:26:03Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\ntrait A {\r\n    fn k(&self, x: i32) -> i32;\r\n}\r\n\r\npub struct O {\r\n}\r\n\r\npub struct P {\r\n}\r\n\r\nimpl A for O {\r\n    fn k(&self, x: i32) -> i32 {\r\n        x\r\n    }\r\n}\r\n\r\nimpl A for P {\r\n    fn k(&self, x: i32) -> i32 {\r\n        x\r\n    }\r\n}\r\n\r\npub enum R {\r\n    P(P),\r\n    O(O),\r\n}\r\nimpl R {\r\n    fn inner(&self) -> &A {\r\n        match self {\r\n            &R::P(ref p) => p,\r\n            &R::O(ref o) => o,\r\n        }\r\n    }\r\n    pub fn k(&self, x: i32) -> i32 {\r\n        match self {\r\n            &R::P(ref p) => p.k(x),\r\n            &R::O(ref o) => o.k(x),\r\n        }\r\n    }\r\n\r\n    pub fn j(&self, x: i32) -> i32 {\r\n        self.inner().k(x)\r\n    }\r\n}\r\n```\r\n\r\ncompiles to\r\n```assembly\r\ncore::ptr::drop_in_place:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        pop     rbp\r\n        ret\r\n\r\ncore::ptr::drop_in_place:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        pop     rbp\r\n        ret\r\n\r\n<example::O as example::A>::k:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        mov     eax, esi\r\n        pop     rbp\r\n        ret\r\n\r\n<example::P as example::A>::k:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        mov     eax, esi\r\n        pop     rbp\r\n        ret\r\n\r\nexample::R::k:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        mov     eax, esi\r\n        pop     rbp\r\n        ret\r\n\r\nexample::R::j:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        cmp     byte ptr [rdi], 0\r\n        lea     rdi, [rdi + 1]\r\n        lea     rax, [rip + vtable.1]\r\n        lea     rcx, [rip + vtable.0]\r\n        cmove   rcx, rax\r\n        pop     rbp\r\n        jmp     qword ptr [rcx + 24]\r\n\r\nvtable.0:\r\n        .quad   core::ptr::drop_in_place\r\n        .quad   0\r\n        .quad   1\r\n        .quad   <example::O as example::A>::k\r\n\r\nvtable.1:\r\n        .quad   core::ptr::drop_in_place\r\n        .quad   0\r\n        .quad   1\r\n        .quad   <example::P as example::A>::k\r\n```\r\n\r\nNotice how much worse R::j() is then R::k()", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45774/timeline", "performed_via_github_app": null, "state_reason": null}