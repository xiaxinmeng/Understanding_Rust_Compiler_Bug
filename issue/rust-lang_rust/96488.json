{"url": "https://api.github.com/repos/rust-lang/rust/issues/96488", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96488/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96488/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96488/events", "html_url": "https://github.com/rust-lang/rust/issues/96488", "id": 1217777243, "node_id": "I_kwDOAAsO6M5Ilc5b", "number": 96488, "title": "ICE on iterator closure with bevy advanced type alias", "user": {"login": "nicopap", "id": 26321040, "node_id": "MDQ6VXNlcjI2MzIxMDQw", "avatar_url": "https://avatars.githubusercontent.com/u/26321040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicopap", "html_url": "https://github.com/nicopap", "followers_url": "https://api.github.com/users/nicopap/followers", "following_url": "https://api.github.com/users/nicopap/following{/other_user}", "gists_url": "https://api.github.com/users/nicopap/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicopap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicopap/subscriptions", "organizations_url": "https://api.github.com/users/nicopap/orgs", "repos_url": "https://api.github.com/users/nicopap/repos", "events_url": "https://api.github.com/users/nicopap/events{/privacy}", "received_events_url": "https://api.github.com/users/nicopap/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-04-27T19:14:28Z", "updated_at": "2022-04-27T19:14:28Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Code\r\n\r\nSorry, I simply cannot create a minimal example, given it seems to result from an interaction with [bevy's](https://github.com/bevyengine/bevy) `Query` type and associated types (which is far from trivial to reproduce).\r\n\r\nYou'll get a link instead:\r\n* The reproduction repo: https://github.com/nicopap/bevy/tree/ice-reproduction (branch: ice-reproduction)\r\n* The diff between the working code and the ICE triggering code is shown in the rest of this bug report.\r\n\r\nPlease clone locally and run `cargo check --package bevy_pbr`.\r\n\r\nThe code in question is in `crates/bevy_pbr/src/render/mesh.rs` line 112 to 136. \r\n\r\nThe diff is reproduced here for your enjoyment:\r\n\r\n```diff\r\ndiff --git a/crates/bevy_pbr/src/render/mesh.rs b/crates/bevy_pbr/src/render/mesh.rs\r\nindex 2d227b85..34251ac3 100644\r\n--- a/crates/bevy_pbr/src/render/mesh.rs\r\n+++ b/crates/bevy_pbr/src/render/mesh.rs\r\n@@ -128,7 +128,8 @@ pub fn extract_meshes(\r\n     let is_visible = |(_, vis, ..): &ExtractMeshItem| vis.is_visible;\r\n     let mut caster_cmds = Vec::with_capacity(*prev_len_caster);\r\n     let mut not_caster_cmds = Vec::with_capacity(*prev_len_not);\r\n-    caster_cmds.extend(caster_query.iter().filter(is_visible).map(mesh_bundle));\r\n+    let bundle_visible = |item| is_visible(&item).then(|| mesh_bundle(item));\r\n+    caster_cmds.extend(caster_query.iter().filter_map(bundle_visible));\r\n     not_caster_cmds.extend(\r\n         not_caster_query\r\n             .iter()\r\n```\r\n\r\nI think the ICE comes from the typing of the `is_visible` and `mesh_bundle` closures, which has the input typed as `ExtractMeshItem`, which is defined as so:\r\n```rust\r\npub type ExtractMeshQuery = (\r\n    Entity,\r\n    &'static ComputedVisibility,\r\n    &'static GlobalTransform,\r\n    &'static Handle<Mesh>,\r\n    Option<&'static NotShadowReceiver>,\r\n);\r\ntype ExtractMeshItem<'w, 's> = QueryItem<'w, 's, ExtractMeshQuery>;\r\n```\r\n\r\n`QueryItem` being itself a \"simple\" type alias:\r\n```rust\r\npub type QueryItem<'w, 's, Q> = <<Q as WorldQuery>::Fetch as Fetch<'w, 's>>::Item;\r\n```\r\nWhich everyone in the bevy community will tell you is a godsend.\r\n\r\nNow, if I replace the definition of `ExtractMeshItem` as follow:\r\n```diff\r\ndiff --git a/crates/bevy_pbr/src/render/mesh.rs b/crates/bevy_pbr/src/render/mesh.rs\r\nindex 2d227b85..171b7a2d 100644\r\n--- a/crates/bevy_pbr/src/render/mesh.rs\r\n+++ b/crates/bevy_pbr/src/render/mesh.rs\r\n@@ -101,7 +101,14 @@ pub type ExtractMeshQuery = (\r\n     &'static Handle<Mesh>,\r\n     Option<&'static NotShadowReceiver>,\r\n );\r\n-type ExtractMeshItem<'w, 's> = QueryItem<'w, 's, ExtractMeshQuery>;\r\n+type ExtractMeshItem<'w, 's> = (\r\n+    Entity,\r\n+    &'w ComputedVisibility,\r\n+    &'w GlobalTransform,\r\n+    &'w Handle<Mesh>,\r\n+    Option<&'w NotShadowReceiver>,\r\n+);\r\n ```\r\n\r\nThe code compiles as if nothing and the ICE is not triggered. Which is as close to a smoking gun you'll get here. \r\n\r\n### Meta\r\n\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.60.0 (7737e0b5c 2022-04-04)\r\nbinary: rustc\r\ncommit-hash: 7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c\r\ncommit-date: 2022-04-04\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.60.0\r\nLLVM version: 14.0.0\r\n```\r\n\r\nAlso tested with:\r\n* `rustc 1.62.0-nightly (082e4ca49 2022-04-26)`\r\n* `rustc 1.59.0 (9d1b2106e 2022-02-23)`\r\n* Both with `CARGO_INCREMENTAL=0` and default.\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: broken MIR in DefId(0:1273 ~ bevy_pbr[909a]::render::mesh::extract_meshes::{closure#3}) ([closure@crates/bevy_pbr/src/render/me\r\nsh.rs:128:57: 128:77] { mesh_bundle: move _9, item: move _10 }): &[closure@crates/bevy_pbr/src/render/mesh.rs:112:23: 125:6] is not a subtype of &[closure@crat\r\nes/bevy_pbr/src/render/mesh.rs:112:23: 125:6]: NoSolution\r\n   --> crates/bevy_pbr/src/render/mesh.rs:128:57\r\n    |\r\n128 |     let bundle_visibles = |item| is_visible(&item).then(|| mesh_bundle(item));\r\n    |                                                         ^^^^^^^^^^^^^^^^^^^^\r\n    |\r\n    = note: delayed at compiler/rustc_borrowck/src/type_check/mod.rs:2467:17\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:1269 ~ bevy_pbr[909a]::render::mesh::extract_meshes) ([closure@crates/bevy_pbr/src/render/mesh.rs:128:27:\r\n 128:78] { is_visible: move _10, mesh_bundle: move _11 }): &[closure@crates/bevy_pbr/src/render/mesh.rs:127:22: 127:69] is not a subtype of &[closure@crates/be\r\nvy_pbr/src/render/mesh.rs:127:22: 127:69]: NoSolution\r\n   --> crates/bevy_pbr/src/render/mesh.rs:128:27\r\n    |\r\n128 |     let bundle_visibles = |item| is_visible(&item).then(|| mesh_bundle(item));\r\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    |\r\n    = note: delayed at compiler/rustc_borrowck/src/type_check/mod.rs:2467:17\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:1269 ~ bevy_pbr[909a]::render::mesh::extract_meshes) ([closure@crates/bevy_pbr/src/render/mesh.rs:128:27:\r\n 128:78] { is_visible: move _10, mesh_bundle: move _11 }): &[closure@crates/bevy_pbr/src/render/mesh.rs:112:23: 125:6] is not a subtype of &[closure@crates/bev\r\ny_pbr/src/render/mesh.rs:112:23: 125:6]: NoSolution\r\n   --> crates/bevy_pbr/src/render/mesh.rs:128:27\r\n    |\r\n128 |     let bundle_visibles = |item| is_visible(&item).then(|| mesh_bundle(item));\r\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    |\r\n    = note: delayed at compiler/rustc_borrowck/src/type_check/mod.rs:2467:17\r\n\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.60.0 (7737e0b5c 2022-04-04) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: --crate-type lib -C embed-bitcode=no -C debuginfo=2\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nerror: could not compile `bevy_pbr`\r\n```\r\n\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', compiler/rustc_errors/src/lib.rs:1176:13\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:584:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/panicking.rs:143:14\r\n   2: core::panicking::panic_display::<&str>\r\n   3: <rustc_errors::HandlerInner>::flush_delayed\r\n   4: <rustc_errors::HandlerInner as core::ops::drop::Drop>::drop\r\n   5: core::ptr::drop_in_place::<rustc_session::parse::ParseSess>\r\n   6: <alloc::rc::Rc<rustc_session::session::Session> as core::ops::drop::Drop>::drop\r\n   7: core::ptr::drop_in_place::<rustc_interface::interface::Compiler>\r\n   8: rustc_interface::interface::create_compiler_and_run::<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>\r\n```\r\n\r\nbonus nightly backtrace:\r\n```\r\nthread 'rustc' panicked at 'Box<dyn Any>', compiler/rustc_errors/src/lib.rs:1347:13\r\nstack backtrace:\r\n   0: std::panicking::begin_panic::<rustc_errors::ExplicitBug>\r\n   1: std::panic::panic_any::<rustc_errors::ExplicitBug>\r\n   2: <rustc_errors::HandlerInner as core::ops::drop::Drop>::drop\r\n   3: core::ptr::drop_in_place::<rustc_session::parse::ParseSess>\r\n   4: <alloc::rc::Rc<rustc_session::session::Session> as core::ops::drop::Drop>::drop\r\n   5: core::ptr::drop_in_place::<rustc_interface::interface::Compiler>\r\n   6: rustc_span::with_source_map::<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_interface::interface::create_compiler_and_run<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#1}>\r\n   7: rustc_interface::interface::create_compiler_and_run::<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>\r\n   8: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96488/timeline", "performed_via_github_app": null, "state_reason": null}