{"url": "https://api.github.com/repos/rust-lang/rust/issues/64224", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/64224/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/64224/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/64224/events", "html_url": "https://github.com/rust-lang/rust/issues/64224", "id": 490371737, "node_id": "MDU6SXNzdWU0OTAzNzE3Mzc=", "number": 64224, "title": "Why is the code size of catch_unwind so large ?", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2019-09-06T14:54:10Z", "updated_at": "2020-03-14T02:02:26Z", "closed_at": "2020-03-14T02:02:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While filling #64222 I noticed that we generate more code than C++ for `catch_unwind`. That did not feel right, since C++'s `catch` can do much more than Rust's catch unwind, e.g., filtering different types of exceptions, etc. \r\n\r\nMWE: C++ (https://gcc.godbolt.org/z/z_dgPg):\r\n\r\n```c++\r\nextern \"C\" void foo();\r\n\r\nint bar() {\r\n    try {\r\n        foo();\r\n        return 42;\r\n    } catch(...) {\r\n        return 13;\r\n    }\r\n}\r\n```\r\n\r\ngenerates\r\n\r\n```asm\r\nbar(): # @bar()\r\n  push rbx\r\n  mov ebx, 42\r\n  call foo\r\n  mov eax, ebx\r\n  pop rbx\r\n  ret\r\n  mov rdi, rax\r\n  call __cxa_begin_catch\r\n  call __cxa_end_catch\r\n  mov ebx, 13\r\n  mov eax, ebx\r\n  pop rbx\r\n  ret\r\n```\r\n\r\nwhile Rust (https://gcc.godbolt.org/z/4sbc6k):\r\n\r\n```rust\r\n#![feature(unwind_attributes)]\r\n\r\nextern \"C\" {\r\n    // can unwind:\r\n    #[unwind(allow)] fn foo(); \r\n}\r\n\r\npub unsafe fn bar() -> i32 {\r\n    std::panic::catch_unwind(|| { foo(); 42 }).unwrap_or(13)\r\n}\r\n```\r\n\r\ngenerates\r\n\r\n```asm\r\nexample::bar:\r\n  push rbp\r\n  push r14\r\n  push rbx\r\n  sub rsp, 32\r\n  mov qword ptr [rsp + 16], 0\r\n  mov qword ptr [rsp + 24], 0\r\n  lea rdi, [rip + std::panicking::try::do_call]\r\n  lea rsi, [rsp + 12]\r\n  lea rdx, [rsp + 16]\r\n  lea rcx, [rsp + 24]\r\n  call qword ptr [rip + __rust_maybe_catch_panic@GOTPCREL]\r\n  test eax, eax\r\n  je .LBB2_1\r\n  mov rdi, -1\r\n  call qword ptr [rip + std::panicking::update_panic_count@GOTPCREL]\r\n  mov r14, qword ptr [rsp + 16]\r\n  mov rbx, qword ptr [rsp + 24]\r\n  mov rdi, r14\r\n  call qword ptr [rbx]\r\n  mov rsi, qword ptr [rbx + 8]\r\n  mov ebp, 13\r\n  test rsi, rsi\r\n  je .LBB2_5\r\n  mov rdx, qword ptr [rbx + 16]\r\n  mov rdi, r14\r\n  call qword ptr [rip + __rust_dealloc@GOTPCREL]\r\n  jmp .LBB2_5\r\n.LBB2_1:\r\n  mov ebp, dword ptr [rsp + 12]\r\n.LBB2_5:\r\n  mov eax, ebp\r\n  add rsp, 32\r\n  pop rbx\r\n  pop r14\r\n  pop rbp\r\n  ret\r\n  mov rbp, rax\r\n  mov rdi, r14\r\n  mov rsi, rbx\r\n  call alloc::alloc::box_free\r\n  mov rdi, rbp\r\n  call _Unwind_Resume@PLT\r\n  ud2\r\n```\r\n\r\nThis appears to be a constant overhead every time `catch_unwind` is used (e.g. see https://gcc.godbolt.org/z/bAvN24). Maybe we are inlining too much ?", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/64224/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/64224/timeline", "performed_via_github_app": null, "state_reason": "completed"}