{"url": "https://api.github.com/repos/rust-lang/rust/issues/103302", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103302/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103302/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103302/events", "html_url": "https://github.com/rust-lang/rust/issues/103302", "id": 1416642635, "node_id": "I_kwDOAAsO6M5UcEBL", "number": 103302, "title": "Tracking Issue for (into_)inner() methods on iterator adapters", "user": {"login": "krtab", "id": 53921575, "node_id": "MDQ6VXNlcjUzOTIxNTc1", "avatar_url": "https://avatars.githubusercontent.com/u/53921575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krtab", "html_url": "https://github.com/krtab", "followers_url": "https://api.github.com/users/krtab/followers", "following_url": "https://api.github.com/users/krtab/following{/other_user}", "gists_url": "https://api.github.com/users/krtab/gists{/gist_id}", "starred_url": "https://api.github.com/users/krtab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krtab/subscriptions", "organizations_url": "https://api.github.com/users/krtab/orgs", "repos_url": "https://api.github.com/users/krtab/repos", "events_url": "https://api.github.com/users/krtab/events{/privacy}", "received_events_url": "https://api.github.com/users/krtab/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-20T13:37:14Z", "updated_at": "2022-10-28T16:00:36Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(inner_adaptor)]`\r\n\r\nThis is a tracking issue for adding two methods to each iterator adapter containing \"only one\" adaptor. This two methods allow accessing the inner iterator of the adapter either through non-mutable reference or by consuming the adaptor. A mutable accessor is purposefully not included to prevent logic error and avoid \"confusing\" the adaptor.\r\n\r\nThe use case I had was that I wanted to wrap a [xmlparser::Tokenizer](https://docs.rs/xmlparser/latest/xmlparser/struct.Tokenizer.html) in a `Peekable` and a `Filter` but still have access to some of its method (that are only available in my fork of it and currently being merged). This method are not specifically iterator related but allow access to the inner UTF-8 stream of the tokenizer for example.\r\n\r\nIn more details, the current choice on whether to implement this method is:\r\n\r\n**Implemented**\r\n- `Cloned`\r\n- `Copied`\r\n- `Enumerate`\r\n- `Filter`\r\n- `FilterMap`\r\n- `Inspect`\r\n- `Intersperce`\r\n- `MapWhile`\r\n- `Map`\r\n- `Peekable`: Can be confusing because the inner iterator is \"one step further\" if it has been peeked. Would documentation be enough?\r\n- `Rev`\r\n- `Scan`\r\n- `Skip_While`\r\n- `Skip`\r\n- `StepBy`\r\n- `TakeWhile`\r\n- `Take`\r\n- `Zip`: has two iterators so one by-ref accessor for each and one conssuming accessor returning a tuple.\r\n\r\n**Not implemented**\r\n- `chain`: Has two iterators\r\n- `cycle`: Unclear which iterator this should refer to\r\n- `Fuse`: Would not make sense when fused, except if returning `Option` but then the API becomes a bit confusing compared to others\r\n\r\n\r\n**Unclear**\r\n- `array_chunks`: Could lead to confusion depending on how the underlying iterator is consummed\r\n- `by_ref_sized`: Unclear if meant to be used publicly at some point\r\n- `Flatten`: Unclear if it would make sense to return the underlying \"top-level\" iterator\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\nThe basic API is akin to:\r\n\r\n```rust\r\n//\r\nuse std::iter::map\r\n\r\npub struct Map<I,F>;\r\n\r\n\r\nimpl<I, F> Map<I, F> {\r\n    pub fn inner(&self) -> &I;\r\n    pub fn into_inner(self) -> I {}\r\n}\r\n```\r\n\r\nbut has some adaptations depending on the case.\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\nMost of the work that remains centers around whether to implement it for cases that can be confusing, and under what documentation constraints.\r\n\r\n- [ ] Implementation: #103294\r\n  - [ ] Decide what to do with `Peekable`\r\n  - [ ] Decide what to do with `Flatten`\r\n  - [ ] Decide what to do with `ByRefSized`\r\n  - [ ] Decide what to do with `ArrayChunks`\r\n- [ ] Final comment period (FCP)[^1]\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- [ ] Decide what to do with `Peekable`\r\n- [ ] Decide what to do with `Flatten`\r\n- [ ] Decide what to do with `ByRefSized`\r\n- [ ] Decide what to do with `ArrayChunks`\r\n\r\nZulip thread: https://rust-lang.zulipchat.com/#narrow/stream/122652-new-members/topic/.5BPre.20RFC.5D.20.28into_.29inner.28.29.20for.20Iterator.20Adapters\r\n\r\n[^1]: https://std-dev-guide.rust-lang.org/feature-lifecycle/stabilization.html\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103302/timeline", "performed_via_github_app": null, "state_reason": null}