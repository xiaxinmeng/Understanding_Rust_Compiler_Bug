{"url": "https://api.github.com/repos/rust-lang/rust/issues/80421", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80421/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80421/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80421/events", "html_url": "https://github.com/rust-lang/rust/issues/80421", "id": 775128119, "node_id": "MDU6SXNzdWU3NzUxMjgxMTk=", "number": 80421, "title": "Fn[Mut] trait missing lifetime parameter", "user": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-12-27T23:34:52Z", "updated_at": "2020-12-28T13:49:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nAs far as I can tell, there is no way to write a trait bound for this closure:\r\n```\r\n    let mut k : usize = 0;\r\n    let mut closure = || &mut k;\r\n```\r\nThe closure's call function takes `&'something mut self`, but there is no way to talk about the lifetime `something`.  But it is necessary to talk about 'something because the return value borrows from it.\r\n\r\nThe following program compiles and works, using `transmute` to promise that the lifetimes are fine.  Without the transmute, and removing the spurious `'static`, there does not seem to be a way to write the bound on `F`.\r\n```\r\nuse std::ops::FnMut;\r\nuse std::mem;\r\n\r\nfn x<F>(f: &mut F)\r\n    where F: FnMut() -> &'static mut usize\r\n{\r\n    *(f())= 42;\r\n}\r\n\r\nfn main() {\r\n    let mut k : usize = 0;\r\n    let mut closure = || unsafe { mem::transmute(&mut k) };\r\n    x(&mut closure);\r\n\r\n    println!(\"Hello, world! {}\", k);\r\n}\r\n```\r\nhttps://gist.github.com/rust-play/dd4471240c781ec26d07139045097b26\r\n\r\nI hope I am right in describing this as a bug, although it seems like it's an API/language bug :-/.  I tried various approaches, including `for<>`, and various lifetime annotation approaches, without anything resembling success.  ISTM that what's really needed is for the `FnMut` and `FnOnce` traits to have a lifetime parameter for the self reference that the call function gets.  I looked in the Reference and the Nomicon and various other places but the documentation in this area was rather thin and informal and didn't seem to come close to addressing this matter.\r\n\r\nTo demonstrate that what I am doing here is not unreasonable, here is a program which achieves the same thing with a \"closure\" which is actually a struct so has to be called with a method.\r\n```\r\ntrait NullaryCallableMut<'f> {\r\n    type Output;\r\n    fn call(&'f mut self) -> Self::Output;\r\n}\r\n\r\nfn x<'f, F>(f: &'f mut F)\r\n    where F: NullaryCallableMut<'f, Output=&'f mut usize>\r\n{\r\n    *(f.call())= 42;\r\n}\r\n\r\nstruct Closure<'r>(&'r mut usize);\r\n\r\nimpl<'f> NullaryCallableMut<'f> for Closure<'f> {\r\n    type Output = &'f mut usize;\r\n    fn call(&'f mut self) -> &'f mut usize { self.0 }\r\n}\r\n\r\nfn main() {\r\n    let mut k : usize = 0;\r\n\r\n    let mut closure = Closure(&mut k);\r\n    x(&mut closure);\r\n\r\n    println!(\"Hello, world! {}\", k);\r\n}\r\n```\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f5add6be7376191011c0367159b8a617\r\n\r\nAll of these experiments were in the Rust playground, stable channel.  1.48 currently.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80421/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80421/timeline", "performed_via_github_app": null, "state_reason": null}