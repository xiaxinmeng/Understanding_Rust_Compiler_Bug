{"url": "https://api.github.com/repos/rust-lang/rust/issues/7773", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/7773/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/7773/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/7773/events", "html_url": "https://github.com/rust-lang/rust/issues/7773", "id": 16713272, "node_id": "MDU6SXNzdWUxNjcxMzI3Mg==", "number": 7773, "title": "RFC: allow delegating some methods from an trait impl to a field of a struct", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234948, "node_id": "MDU6TGFiZWwyMzQ5NDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-attributes", "name": "A-attributes", "color": "f7e101", "default": false, "description": "Area: #[attributes(..)]"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-07-13T10:05:08Z", "updated_at": "2014-09-24T04:59:35Z", "closed_at": "2014-09-24T04:59:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This would allow one to emulate conventional OO inheritance (to some degree) automatically, instead of requiring a lot of boilerplate, e.g.\n\n``` rust\ntrait A {\n  fn foo(&self);\n  fn bar(&self);\n  fn baz(&self);\n}\n\nstruct Basic {\n   some_field: int\n}\n\nimpl A for Basic {\n  fn foo(&self) {}\n  fn bar(&self) {}\n  fn baz(&self) {}\n}\n\nstruct Extended {\n   inner: Basic,\n   extra: int\n}\n\n#[delegate_to(inner)]\nimpl A for Extended {\n  fn foo(&self) {} // new version of `foo`\n}\n/* automatically created:\n  fn bar(&self) { self.inner.bar() }\n  fn baz(&self) { self.inner.baz() }\n*/\n```\n\nThis isn't possible as a syntax extension, since the methods in a trait are not known at expansion time. And methods returning `Self` would have to be implemented by hand.\n\nI guess this is similar to default methods. I think it would allow traits to replace the closures-in-structs pattern entirely (e.g. the ast visitor), since currently it's not easily possible to write `Visitor { visit_expr: |e, (a,v)| { ... }, .. some_non_default_visitor }` (i.e. replacing only the `visit_expr` method of a visitor defined elsewhere, which is not the `default_visitor()`) in terms of default methods only (this came up in my attempt to replace the struct visitors in `rustc::middle::lint` with @Aatch's trait+default-methods based one).\n\nRelated: \n- [similar discussion about subtyping & structs](http://www.reddit.com/r/rust/comments/19a70o/meeting_weekly_20130226/)\n- [discussion about this proposal](http://www.reddit.com/r/rust/comments/1i5oha/an_alternative_way_to_achieve_inheritance/cb1rh9m)\n- [\"Delegation\" in Kotlin is very similar, but this proposal is possibly more flexible](http://confluence.jetbrains.com/display/Kotlin/Classes+and+Inheritance#ClassesandInheritance-Delegation)\n\nA super-wishlist behaviour would be turning any recursive method calls (i.e. calling a method from the same trait) on the base type into calls on the extended type, so:\n\n``` rust\nimpl A for Base {\n   fn foo(&self) {\n       if some_condition { self.bar() }\n   }\n   fn bar(&self) {}\n}\n\nstruct Extended { base: Base }\n\n#[delegate_to(base)]\nimpl A for Extended {}\n\n// is equivalent to\n\nimpl A for Extended {\n   fn foo(&self) {\n       if some_condition { self.bar() }  \n       // different to plain self.inner.bar(), which is `if some_condition { self.base.bar() }`\n   }\n   fn bar(&self) { self.base.bar() }\n}\n```\n\n(This is possibly possible by recording \"a trait-self\" against which to call methods from the same trait, I don't know.)\n", "closed_by": {"login": "rust-highfive", "id": 7378925, "node_id": "MDQ6VXNlcjczNzg5MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7378925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-highfive", "html_url": "https://github.com/rust-highfive", "followers_url": "https://api.github.com/users/rust-highfive/followers", "following_url": "https://api.github.com/users/rust-highfive/following{/other_user}", "gists_url": "https://api.github.com/users/rust-highfive/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-highfive/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-highfive/subscriptions", "organizations_url": "https://api.github.com/users/rust-highfive/orgs", "repos_url": "https://api.github.com/users/rust-highfive/repos", "events_url": "https://api.github.com/users/rust-highfive/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-highfive/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/7773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/7773/timeline", "performed_via_github_app": null, "state_reason": "completed"}