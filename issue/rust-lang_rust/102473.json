{"url": "https://api.github.com/repos/rust-lang/rust/issues/102473", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102473/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102473/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102473/events", "html_url": "https://github.com/rust-lang/rust/issues/102473", "id": 1390843304, "node_id": "I_kwDOAAsO6M5S5pWo", "number": 102473, "title": "`rustc` should suggest borrowing values, when a borrow satisfies the same trait bound as an owned value", "user": {"login": "pluiedev", "id": 22406910, "node_id": "MDQ6VXNlcjIyNDA2OTEw", "avatar_url": "https://avatars.githubusercontent.com/u/22406910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pluiedev", "html_url": "https://github.com/pluiedev", "followers_url": "https://api.github.com/users/pluiedev/followers", "following_url": "https://api.github.com/users/pluiedev/following{/other_user}", "gists_url": "https://api.github.com/users/pluiedev/gists{/gist_id}", "starred_url": "https://api.github.com/users/pluiedev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pluiedev/subscriptions", "organizations_url": "https://api.github.com/users/pluiedev/orgs", "repos_url": "https://api.github.com/users/pluiedev/repos", "events_url": "https://api.github.com/users/pluiedev/events{/privacy}", "received_events_url": "https://api.github.com/users/pluiedev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-09-29T13:07:03Z", "updated_at": "2022-11-12T00:19:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n[On the Rust community Discord server,](https://discord.com/channels/273534239310479360/273541522815713281/1025021617174216854) a user reported that functions like `std::fs::create_dir_all`, that take either `PathBuf`s or `&PathBuf`s thanks to their `T: AsRef<Path>` bound, do not make clear to the user that the function does not require an owned value.\r\n\r\nIt is obviously too late to change the signatures on the freestanding functions in `std::fs` to prevent users from encountering this issue, so we really need to improve the error generated by this issue, which does not mention borrowing the value as a solution.\r\n\r\n---\r\n\r\nGiven the following code: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=83da9a037a3b29b8f28c341fbb725787\r\n\r\n```rust\r\npub fn create_dir_and_return_path() -> std::path::PathBuf {\r\n    let path = std::path::PathBuf::from(\"haha\");\r\n    std::fs::create_dir_all(path).unwrap();\r\n    path\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0382]](https://doc.rust-lang.org/nightly/error-index.html#E0382): use of moved value: `path`\r\n --> src/lib.rs:4:5\r\n  |\r\n2 |     let path = std::path::PathBuf::from(\"haha\");\r\n  |         ---- move occurs because `path` has type `PathBuf`, which does not implement the `Copy` trait\r\n3 |     std::fs::create_dir_all(path).unwrap();\r\n  |                             ---- value moved here\r\n4 |     path\r\n  |     ^^^^ value used here after move\r\n\r\nFor more information about this error, try `rustc --explain E0382`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0382]](https://doc.rust-lang.org/nightly/error-index.html#E0382): use of moved value: `path`\r\n --> src/lib.rs:4:5\r\n  |\r\n2 |     let path = std::path::PathBuf::from(\"haha\");\r\n  |         ---- move occurs because `path` has type `PathBuf`, which does not implement the `Copy` trait\r\n3 |     std::fs::create_dir_all(path).unwrap();\r\n  |                             ---- value moved here\r\n4 |     path\r\n  |     ^^^^ value used here after move\r\n  |\r\n  = help: consider borrowing `path` here:\r\n  |\r\n3 -    std::fs::create_dir_all(path).unwrap();\r\n3 +    std::fs::create_dir_all(&path).unwrap();\r\n  |\r\n  = note: ...so that `path` can remain valid after function call\r\n\r\n\r\nFor more information about this error, try `rustc --explain E0382`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102473/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102473/timeline", "performed_via_github_app": null, "state_reason": null}