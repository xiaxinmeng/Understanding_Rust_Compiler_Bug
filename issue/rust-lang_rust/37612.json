{"url": "https://api.github.com/repos/rust-lang/rust/issues/37612", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37612/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37612/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37612/events", "html_url": "https://github.com/rust-lang/rust/issues/37612", "id": 187548410, "node_id": "MDU6SXNzdWUxODc1NDg0MTA=", "number": 37612, "title": "Using pattern match directly on LockResult causes deadlock", "user": {"login": "lloydmeta", "id": 914805, "node_id": "MDQ6VXNlcjkxNDgwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/914805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lloydmeta", "html_url": "https://github.com/lloydmeta", "followers_url": "https://api.github.com/users/lloydmeta/followers", "following_url": "https://api.github.com/users/lloydmeta/following{/other_user}", "gists_url": "https://api.github.com/users/lloydmeta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lloydmeta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lloydmeta/subscriptions", "organizations_url": "https://api.github.com/users/lloydmeta/orgs", "repos_url": "https://api.github.com/users/lloydmeta/repos", "events_url": "https://api.github.com/users/lloydmeta/events{/privacy}", "received_events_url": "https://api.github.com/users/lloydmeta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 43009118, "node_id": "MDU6TGFiZWw0MzAwOTExOA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-destructors", "name": "A-destructors", "color": "f7e101", "default": false, "description": "Area: destructors (Drop, ..)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2016-11-06T09:20:10Z", "updated_at": "2018-11-09T14:35:47Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Came across this as I was playing around with implementing memoisation via double-checked-locking with `sync::RWLock`:\r\n\r\nThe following, which puts the `.read()` result into a temporary binding works fine:\r\n```rust\r\n// ...\r\n{\r\n    let lock_result = self.cache.read(); // <-- temporary binding\r\n    match lock_result {\r\n        Ok(ref data) if data.len() > to => Some(data[to].clone()),\r\n        _ => None,\r\n    }\r\n}\r\n.unwrap_or_else(|| {\r\n    // We need to write now, so get a write lock\r\n    let mut data = self.cache.write().unwrap();\r\n// ...\r\n```\r\n\r\nThe following, which directly matches on the result of `.read()`, dies in a deadlock:\r\n```rust\r\n// ...\r\n{\r\n    match self.cache.read() { // <-- direct pattern matching\r\n        Ok(ref data) if data.len() > to => Some(data[to].clone()),\r\n        _ => None,\r\n    }\r\n}\r\n.unwrap_or_else(|| {\r\n    // We need to write now, so get a write lock\r\n    let mut data = self.cache.write().unwrap();\r\n// ...\r\n```\r\n\r\nI'm guessing the direct pattern match is compiled/desugared in a way that the `RwLockReadGuard` never goes out of scope and thus the read lock is never released, but I'm not sure if this is the expected behaviour. It certainly surprised me, especially since the entire \"read\" block is scoped by its own set of braces.\r\n\r\nFor extra context, here is the relevant part in [my scratchpad project](https://github.com/lloydmeta/fib-rust/blob/master/src/maths/fib.rs#L80-L107). I have a [concurrency test](https://github.com/lloydmeta/fib-rust/blob/master/tests/maths_tests/fib_tests.rs#L41-L62) for it that fails to finish if the pattern matching section is changed to match the latter case.\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37612/timeline", "performed_via_github_app": null, "state_reason": null}