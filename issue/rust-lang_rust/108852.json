{"url": "https://api.github.com/repos/rust-lang/rust/issues/108852", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108852/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108852/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108852/events", "html_url": "https://github.com/rust-lang/rust/issues/108852", "id": 1613020982, "node_id": "I_kwDOAAsO6M5gJL82", "number": 108852, "title": "Unable to express a Fn generic with a lifetime involved without falling into 'static", "user": {"login": "nappa85", "id": 7566389, "node_id": "MDQ6VXNlcjc1NjYzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/7566389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nappa85", "html_url": "https://github.com/nappa85", "followers_url": "https://api.github.com/users/nappa85/followers", "following_url": "https://api.github.com/users/nappa85/following{/other_user}", "gists_url": "https://api.github.com/users/nappa85/gists{/gist_id}", "starred_url": "https://api.github.com/users/nappa85/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nappa85/subscriptions", "organizations_url": "https://api.github.com/users/nappa85/orgs", "repos_url": "https://api.github.com/users/nappa85/repos", "events_url": "https://api.github.com/users/nappa85/events{/privacy}", "received_events_url": "https://api.github.com/users/nappa85/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-03-07T09:10:30Z", "updated_at": "2023-05-24T07:28:26Z", "closed_at": "2023-05-24T01:38:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Long story short, I was trying to make a functional programming compatible version of `Iterator::peekable` (code can be found also in my [repo](https://github.com/nappa85/peekable/))\r\n\r\n```rust\r\npub trait LendingIterator {\r\n    type Item<'a>\r\n    where\r\n        Self: 'a;\r\n    fn next(&'_ mut self) -> Option<Self::Item<'_>>;\r\n}\r\n\r\npub trait PeekableIterator: Iterator + Sized {\r\n    fn peekable_iter(self) -> Peekable<Self> {\r\n        Peekable::new(self)\r\n    }\r\n}\r\n\r\nimpl<T: Iterator> PeekableIterator for T {}\r\n\r\npub struct Peekable<T: Iterator> {\r\n    inner: T,\r\n    next: Option<T::Item>,\r\n}\r\n\r\nimpl<T: Iterator> Peekable<T> {\r\n    fn new(mut inner: T) -> Self {\r\n        let next = inner.next();\r\n        Peekable { inner, next }\r\n    }\r\n    fn next(&mut self) -> Option<T::Item> {\r\n        std::mem::replace(&mut self.next, self.inner.next())\r\n    }\r\n}\r\n\r\nimpl<T: Iterator> LendingIterator for Peekable<T> {\r\n    type Item<'a> = (T::Item, Option<&'a T::Item>) where T: 'a;\r\n    fn next(&'_ mut self) -> Option<Self::Item<'_>> {\r\n        self.next().map(|t| (t, self.next.as_ref()))\r\n    }\r\n}\r\n\r\npub trait LendingIteratorExt: LendingIterator {\r\n    fn for_each<F>(self, mut f: F)\r\n    where\r\n        Self: Sized,\r\n        F: FnMut(Self::Item<'_>),\r\n    {\r\n        #[inline]\r\n        fn call<T>(mut f: impl FnMut(T)) -> impl FnMut((), T) {\r\n            move |(), item| f(item)\r\n        }\r\n\r\n        self.fold((), call(f));\r\n    }\r\n    fn fold<B, F>(mut self, init: B, mut f: F) -> B\r\n    where\r\n        Self: Sized,\r\n        F: FnMut(B, Self::Item<'_>) -> B,\r\n    {\r\n        let mut accum = init;\r\n        while let Some(x) = self.next() {\r\n            accum = f(accum, x);\r\n        }\r\n        accum\r\n    }\r\n}\r\n\r\nimpl<T: LendingIterator> LendingIteratorExt for T {}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n\r\n    #[test]\r\n    fn it_works() {\r\n        let a = [0, 1, 2, 3, 4];\r\n        a.iter().peekable_iter().for_each(|(a, b)| {\r\n            if let Some(b) = b {\r\n                assert_eq!(*a, *b - 1)\r\n            }\r\n        });\r\n    }\r\n}\r\n```\r\n\r\nFirst problem you can see is on the for_each implementation, copied from std. Here the problem seems to be the two different impl Trait using two different lifetimes for Self::Item<'_>.\r\nHere I've tried several approaches, for example using an HRTB\r\n```rust\r\nF: for<'a> FnMut(Self::Item<'a>), // in for_each\r\nF: for<'a> FnMut(B, Self::Item<'a>) -> B, // in fold\r\n```\r\n\r\nOr adding a lifetime at method level, like\r\n```rust\r\n fn for_each<'a, F>(self, mut f: F)\r\n  where\r\n      Self: Sized,\r\n      F: FnMut(Self::Item<'a>) {}\r\n\r\n  fn fold<'a, B, F>(mut self, init: B, mut f: F) -> B\r\n  where\r\n      Self: Sized,\r\n      F: FnMut(B, Self::Item<'a>) -> B {}\r\n```\r\n\r\nBoth approaches end up asking for a 'static lifetime, as can be seen trying to run the test\r\n\r\nI've searched for similar issues, like [that](https://github.com/rust-lang/rust/issues/92985) but haven't found a solution so far", "closed_by": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108852/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}