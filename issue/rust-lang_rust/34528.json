{"url": "https://api.github.com/repos/rust-lang/rust/issues/34528", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/34528/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/34528/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/34528/events", "html_url": "https://github.com/rust-lang/rust/issues/34528", "id": 162714062, "node_id": "MDU6SXNzdWUxNjI3MTQwNjI=", "number": 34528, "title": "Add intrinsic to force-monomorphize; or some other solution for Index", "user": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 602425123, "node_id": "MDU6TGFiZWw2MDI0MjUxMjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-dev-tools", "name": "T-dev-tools", "color": "bfd4f2", "default": false, "description": "Relevant to the dev-tools subteam, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-06-28T15:24:38Z", "updated_at": "2017-07-25T16:20:30Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "For gdb to be able to index things like hashmaps, we need to ensure that the index implementation is monomorphized correctly.\n\nI would like to have an intrinsic, which when found in a monomorphized function, will force monomorphization of the provided argument. For example, in `Vec::new()`, we can include `force_monomorphization(<Vec<T> as Index>::index)`.\n\nAlternatively, we could specially mark methods (index and deref? all of `std::ops`? has to be parametric over `self` but not parametric over other non-`Self` args.) that are always monomorphized if the corresponding concrete self type already exists. Perhaps only in debug mode. This may bloat binary size, but eh, debug mode.\n\ncc @rust-lang/compiler @tromey \n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/34528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/34528/timeline", "performed_via_github_app": null, "state_reason": null}