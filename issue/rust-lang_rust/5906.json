{"url": "https://api.github.com/repos/rust-lang/rust/issues/5906", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/5906/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/5906/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/5906/events", "html_url": "https://github.com/rust-lang/rust/issues/5906", "id": 13248727, "node_id": "MDU6SXNzdWUxMzI0ODcyNw==", "number": 5906, "title": "TCP server terminates on socket.read call on x86.", "user": {"login": "alexbers", "id": 742987, "node_id": "MDQ6VXNlcjc0Mjk4Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/742987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexbers", "html_url": "https://github.com/alexbers", "followers_url": "https://api.github.com/users/alexbers/followers", "following_url": "https://api.github.com/users/alexbers/following{/other_user}", "gists_url": "https://api.github.com/users/alexbers/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexbers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexbers/subscriptions", "organizations_url": "https://api.github.com/users/alexbers/orgs", "repos_url": "https://api.github.com/users/alexbers/repos", "events_url": "https://api.github.com/users/alexbers/events{/privacy}", "received_events_url": "https://api.github.com/users/alexbers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-04-16T14:20:57Z", "updated_at": "2013-06-18T09:37:34Z", "closed_at": "2013-06-18T09:37:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Updated source code:\n\n``` rust\nextern mod extra;\n\nuse std::comm::stream;\n\n// use extra::net_tcp::{listen, accept, TcpErrData, TcpSocketBuf, socket_buf};\nuse extra::net_tcp::{listen, accept};\nuse extra::net_ip;\nuse std::task;\nuse extra::uv;\n\nfn main() {\n    do listen(net_ip::v4::parse_addr(\"0.0.0.0\"), 3255, 2, &uv::global_loop::get(),\n           |_| { })\n           |conn, kill_ch| {\n                println(\"Client connected\");\n                let (cont_po, cont_ch) = stream();\n\n                do task::spawn_sched(task::ManualThreads(1)) {\n                    let accept_result = accept(conn);\n                    match accept_result {\n                        Ok(sock) => {\n                            cont_ch.send(None);\n\n                            println(\"LOOP1\");\n                            sock.read(0);\n                            println(\"LOOP2\");\n                        },\n                        Err(accept_error) => {\n                            cont_ch.send(Some(accept_error));\n                        },\n                    }\n                };\n                match cont_po.recv() {\n                    Some(err_data) => kill_ch.send(Some(err_data)),  // shut down listen()\n                    None => ()  // wait for next connection\n                }\n            };\n}\n\n```\n### Original bug report follows\n\nThe simple TCP server:\n\n<pre>\nextern mod std;\n\nuse core::comm::stream;\n\nuse std::net::tcp::{listen, accept, TcpErrData, TcpSocketBuf, socket_buf};\nuse std::net::ip;\nuse std::task;\nuse std::uv;\n\nfn main() {\n    do listen(ip::v4::parse_addr(\"0.0.0.0\"), 3255, 2, &uv::global_loop::get(),\n           |_| { })\n           |conn, kill_ch| {\n                println(\"Client connected\");\n                let (cont_po, cont_ch) = stream::<Option<TcpErrData>>();\n\n                do task::spawn_sched(task::ManualThreads(1)) {\n                    let accept_result = accept(conn);\n                    match accept_result {\n                        Ok(sock) => {\n                            cont_ch.send(None);\n                            \n                            println(\"LOOP1\");\n                            sock.read(0);\n                            println(\"LOOP2\");\n                        },\n                        Err(accept_error) => {\n                            cont_ch.send(Some(accept_error));\n                        },\n                    }\n                };\n                match cont_po.recv() {\n                    Some(err_data) => kill_ch.send(Some(err_data)),  // shut down listen()\n                    None => ()  // wait for next connection\n                }\n            };\n}\n</pre>\n\n\nFails on x86 after first incomming connection.\n\nAn output:\n\n<pre>\n# ./s\nlistener is ready\ns: /build/buildd/rust-0.6/src/rt/rust_exchange_alloc.cpp:23: void* rust_exchange_alloc::malloc(size_t): Assertion `value' failed.\nAborted (core dumped)\n</pre>\n\n\nIt was tested on rust 0.6 on Gentoo and Ubuntu.\n", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/5906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/5906/timeline", "performed_via_github_app": null, "state_reason": "completed"}