{"url": "https://api.github.com/repos/rust-lang/rust/issues/96024", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96024/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96024/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96024/events", "html_url": "https://github.com/rust-lang/rust/issues/96024", "id": 1203770273, "node_id": "I_kwDOAAsO6M5HwBOh", "number": 96024, "title": "Tracking Issue for Provider API", "user": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89436934, "node_id": "MDU6TGFiZWw4OTQzNjkzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-approved", "name": "B-RFC-approved", "color": "d304cb", "default": false, "description": "Approved by a merged RFC but not yet implemented."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 433146169, "node_id": "MDU6TGFiZWw0MzMxNDYxNjk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-implemented", "name": "B-RFC-implemented", "color": "d304cb", "default": false, "description": "Approved by a merged RFC and implemented."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 36, "created_at": "2022-04-13T20:42:28Z", "updated_at": "2023-06-13T17:52:59Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(provide_any)]`\r\n\r\nThis is a tracking issue for [RFC 3192](https://github.com/rust-lang/rfcs/pull/3192) \r\n\r\n> This RFC proposes extending the [`any` module](https://doc.rust-lang.org/nightly/std/any/index.html) of the core library with a generic API for objects to provide type-based access to data. (In contrast to the existing APIs which provides type-driven downcasting, the proposed extension integrates downcasting into data access to provide a safer and more ergonomic API).\r\n\r\nThe initial motivating use case for this API is to provide the necessary functionality to add [generic member access](https://github.com/rust-lang/rfcs/pull/2895) to the `Error` trait to generalize extracting context like `Backtrace` and to make it possible to move the `Error` trait into `core` while leaving `Backtrace` in `std`.\r\n\r\n### Public API\r\n\r\n```rust\r\n// core::any\r\npub trait Provider {\r\n    fn provide<'a>(&'a self, demand: &mut Demand<'a>);\r\n}\r\n\r\npub fn request_value<'a, T>(provider: &'a (impl Provider + ?Sized)) -> Option<T>\r\nwhere\r\n    T: 'static;\r\n\r\npub fn request_ref<'a, T>(provider: &'a (impl Provider + ?Sized)) -> Option<&'a T>\r\nwhere\r\n    T: 'static + ?Sized;\r\n\r\n#[repr(transparent)]\r\npub struct Demand<'a>(_);\r\n\r\nimpl<'a> Demand<'a> {\r\n    pub fn provide_value<T>(&mut self, value: T) -> &mut Self\r\n    where\r\n        T: 'static;\r\n\r\n    pub fn provide_value_with<T>(&mut self, fulfil: impl FnOnce() -> T) -> &mut Self\r\n    where\r\n        T: 'static;\r\n\r\n    pub fn provide_ref<T: ?Sized + 'static>(&mut self, value: &'a T) -> &mut Self;\r\n\r\n    pub fn provide_ref_with<T: ?Sized + 'static>(\r\n        &mut self,\r\n        fulfil: impl FnOnce() -> &'a T,\r\n    ) -> &mut Self;\r\n\r\n    pub fn would_be_satisfied_by_value_of<T>(&self) -> bool\r\n    where\r\n        T: 'static;\r\n\r\n    pub fn would_be_satisfied_by_ref_of<T>(&self) -> bool\r\n    where\r\n        T: ?Sized + 'static,\r\n}\r\n\r\nimpl<'a> fmt::Debug for Demand<'a> {}\r\n\r\n// core::error\r\nimpl<E> Provider for E\r\nwhere\r\n    E: Error + ?Sized;\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] Implementation: https://github.com/rust-lang/rust/pull/91970\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- None yet.\r\n", "closed_by": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96024/reactions", "total_count": 27, "+1": 0, "-1": 0, "laugh": 0, "hooray": 15, "confused": 0, "heart": 7, "rocket": 5, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96024/timeline", "performed_via_github_app": null, "state_reason": "reopened"}