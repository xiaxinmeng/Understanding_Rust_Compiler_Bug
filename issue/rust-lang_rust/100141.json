{"url": "https://api.github.com/repos/rust-lang/rust/issues/100141", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100141/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100141/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100141/events", "html_url": "https://github.com/rust-lang/rust/issues/100141", "id": 1328677057, "node_id": "I_kwDOAAsO6M5PMgDB", "number": 100141, "title": "Subtracting Duration from Instant on Mac is panic-prone", "user": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-08-04T13:54:04Z", "updated_at": "2022-08-04T16:53:47Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The following program: \r\n\r\n```rust\r\nfn main() {\r\n    let t = std::time::Instant::now();\r\n    let d = std::time::Duration::from_secs(60);\r\n    eprintln!(\"{:?}\", (t - d).elapsed());\r\n}\r\n```\r\n\r\nworks on Linux, but could panic on Mac. The reason for that is that, as implemented, `Instant` on mac starts at zero at reboot, so it can't represent times before the machine started. \r\n\r\nThis is pretty unfortunate -- it means that `impl Sub<Duration> for Instant` isn't really usable on mac, as subtracting even a small duration can panic. And subtracing duration is pretty useful and natural too implement tasks like \"periodically, cleanup data crated earlier than `Instant::now() - Duration::from_secs(60)`\".\r\n\r\nWhile technically we don't give any guarantees on `Instant` range and document this as system-dependent, it is *really* unfortunate that subtracting API exists, works fine on Linux, and fails occasionally on macs. I think we should just go and patch the time on our side, to get some sort of a reasonable range bothways. \r\n\r\nI *think* just \r\n\r\n```diff\r\ndiff --git a/library/std/src/sys/unix/time.rs b/library/std/src/sys/unix/time.rs\r\nindex f99c453a3a8..994320564c4 100644\r\n--- a/library/std/src/sys/unix/time.rs\r\n+++ b/library/std/src/sys/unix/time.rs\r\n@@ -168,7 +168,7 @@ pub fn now() -> Instant {\r\n             extern \"C\" {\r\n                 fn mach_absolute_time() -> u64;\r\n             }\r\n-            Instant { t: unsafe { mach_absolute_time() } }\r\n+            Instant { t: unsafe { mach_absolute_time() } + u64::MAX / 2 }\r\n         }\r\n \r\n         pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\r\n```\r\n\r\nwould do the trick, but I am wondering if there's a better way to do this. \r\n\r\nManual for `mach_absolute_time` (https://developer.apple.com/documentation/kernel/1462446-mach_absolute_time) also suggests using `clock_gettime_nsec_np(CLOCK_UPTIME_RAW)`instead, so we can perhaps switch to that while we are at it. ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100141/timeline", "performed_via_github_app": null, "state_reason": null}