{"url": "https://api.github.com/repos/rust-lang/rust/issues/12619", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12619/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12619/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12619/events", "html_url": "https://github.com/rust-lang/rust/issues/12619", "id": 28493503, "node_id": "MDU6SXNzdWUyODQ5MzUwMw==", "number": 12619, "title": "Feature Request: OpenMP/TBB like Parallel For Loops", "user": {"login": "siavashserver", "id": 1075690, "node_id": "MDQ6VXNlcjEwNzU2OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1075690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siavashserver", "html_url": "https://github.com/siavashserver", "followers_url": "https://api.github.com/users/siavashserver/followers", "following_url": "https://api.github.com/users/siavashserver/following{/other_user}", "gists_url": "https://api.github.com/users/siavashserver/gists{/gist_id}", "starred_url": "https://api.github.com/users/siavashserver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siavashserver/subscriptions", "organizations_url": "https://api.github.com/users/siavashserver/orgs", "repos_url": "https://api.github.com/users/siavashserver/repos", "events_url": "https://api.github.com/users/siavashserver/events{/privacy}", "received_events_url": "https://api.github.com/users/siavashserver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-02-28T11:14:45Z", "updated_at": "2018-04-30T21:12:20Z", "closed_at": "2015-02-15T18:47:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to have some easy to use _parallel for_ loops like OpenMP or Intel TBB in Rust? As far as I know their _parallel for_ loops divide the range by CPU cores (or specified worker threads), then every worker thread will access a sequential stream of data in memory (better CPU cache utilization) and idle worker threads are also able to steal tasks from busy ones to balance the load (which is optional in OMP, and the default for the TBB).\n\nSerial code:\n\n``` C++\nvoid SerialApplyFoo( float b[], const float a[], size_t n ){\n    for( size_t i=0; i<n; ++i )\n        b[i] = Foo(a[i]);\n}\n```\n\nIntel TBB example:\n\n``` C++\nvoid ParallelApplyFoo (float b[], const float a[], size_t n){\n    tbb::parallel_for (size_t(0), n, [=](size_t i) {\n        b[i] = Foo(a[i]);\n    });\n}\n```\n\nOpenMP example:\n\n``` C++\nvoid ParallelApplyFoo( float b[], const float a[], size_t n ){\n    #pragma omp parallel for\n    for( size_t i=0; i<n; ++i )\n        b[i] = Foo(a[i]);\n}\n```\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12619/timeline", "performed_via_github_app": null, "state_reason": "completed"}