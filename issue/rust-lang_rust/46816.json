{"url": "https://api.github.com/repos/rust-lang/rust/issues/46816", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46816/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46816/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46816/events", "html_url": "https://github.com/rust-lang/rust/issues/46816", "id": 282933844, "node_id": "MDU6SXNzdWUyODI5MzM4NDQ=", "number": 46816, "title": "Reduce amount of filesystem probing rustc has to do when looking for rlibs", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-12-18T16:12:23Z", "updated_at": "2018-04-05T15:43:38Z", "closed_at": "2018-04-05T15:43:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently rustc has a requirement that whenever it compiles a crate that it understands the entire crate graph of all dependencies. In other words, when you compile a crate like `cargo` the compiler will have to load *all* dependencies (including dependencies of dependencies). This means that rustc has to actually find and locate the rlib artifacts on the filesystem.\r\n\r\nFor immediate dependencies (those specified via `extern crate`) the compiler has `--extern` arguments (passed by Cargo) to guard it. For dependencies of dependencies Cargo knows where the files are but doesn't tell rustc. Instead rustc is left to its own devices to actually find these rlibs.\r\n\r\nThis probing logic is [currently implemented](https://github.com/rust-lang/rust/blob/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src/librustc_metadata/locator.rs#L444-L495) like so:\r\n\r\n* Look at all files in the search paths of the comipler (passed via `-L` and also the sysroot).\r\n* When looking for crate `foo`, filter files which [start with `libfoo` and end with `.rlib`](https://github.com/rust-lang/rust/blob/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src/librustc_metadata/locator.rs#L436-L439)\r\n* Given this set of candidates, [look at the metadata](https://github.com/rust-lang/rust/blob/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src/librustc_metadata/locator.rs#L823-L887) inside of all of them. [Filter these candidates](https://github.com/rust-lang/rust/blob/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94/src/librustc_metadata/locator.rs#L673-L724) by the \"hash\" we're loading\r\n* If only one candidate remains, link to it. If more than one is here, bail out and generate an error.\r\n\r\nThe \"hash\" is listed for all dependencies of dependencies because the compiler will record this information in the metadata of a compiled crate. For example of we have a dependency chain that looks like `cargo` depends on `tar` which depends on `libc`, then we'll get loading behavior like so:\r\n\r\n* The `tar` crate is found via `--extern` on the command line.\r\n* When processing `tar` rustc needs to load the `libc` crate. The metadata for `tar`, however, lists the hash of the `libc` crate it was originally compiled against.\r\n* The compiler will go through the process above to find all `libc` candidates and then use the hash listed in `tar`'s metadata to find the one exact crate we're looking for.\r\n\r\n---\r\n\r\nOk so with all that information, let's talk about downsides! One of the drawbacks of this logic is pretty obvious when we take a look at the `serde` crate. Let's say that rustc is looking for the `serde` dependency. This means it'll *also* look at crates like `serde_derive`, `serde_json`, `serde_yaml`, etc (see the trend?). While not a huge perf problem today, this definitely has the chance to become a larger problem.\r\n\r\nMore worrisome, however, is that the Gecko folks are trying to use [the Tup build system](http://gittup.org/tup/) and when adding rustc support this causes lots of problems. Tup as a build system tracks what files are accessed as part of a build process (aka it's tracking what files rustc itself is accessing). To Tup it looks like rustc is depending on all these files! Rustc in reality is rejecting many of these files and not actually using them, but to Tup they look like false dependencies.\r\n\r\nIn order to solve this problem, let's get rustc to probe for less files at build time! The logic here of prefix/suffix matching is *very* old I believe and in this day and age I'm not actually sure if it's buying us much. Instead I think it may be best to switch to a precise match solution where we look for an exact filename on the filesystem instead of a set of filetimes.\r\n\r\nAll Rust crates compiled through Cargo (and almost all Rust crates in general) are compiled with `-C extra-filename` which is where those funny hashes get inserted into rlib filenames. These extra hashes are not currently encoded into a crate's metadata, but they'd be able to point rustc to the exact file that it needs!\r\n\r\nI think that we'll want to start encoding the `-C extra-filename` argument into a crate's metadata so that way transitive dependencies can copy this information and then when rustc loads it it knows exactly what to look for.\r\n\r\nGiven our `cargo` example above, the `libc` loading step would now look like:\r\n\r\n* The `tar` crate's metadata says it depends on `libc` which was found with the extra filename as `$extra_filename`. The compiler then looks for *exactly* `libc${extra_filename}.rlib` and doesn't look at extraneous files.\r\n\r\nThis I believe should solve the Tup problems and also head off any possible inefficiences in crate loading. I'm also more than willing to help out mentor the implementation of this if anyone's interested, just let me know!\r\n\r\ncc @luser \r\ncc @mshal ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46816/timeline", "performed_via_github_app": null, "state_reason": "completed"}