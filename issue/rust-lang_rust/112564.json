{"url": "https://api.github.com/repos/rust-lang/rust/issues/112564", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112564/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112564/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112564/events", "html_url": "https://github.com/rust-lang/rust/issues/112564", "id": 1753089828, "node_id": "I_kwDOAAsO6M5ofgck", "number": 112564, "title": "MIR: Do we allow accesing a moved place?", "user": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 5226679137, "node_id": "LA_kwDOAAsO6M8AAAABN4jLYQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-opsem", "name": "T-opsem", "color": "bfd4f2", "default": false, "description": "Relevant to the opsem team"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-06-12T16:09:01Z", "updated_at": "2023-06-14T06:27:23Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`fn14()` dereferences a pointer to a place that has been moved to another function. Currently, Miri thinks this is fine, but this causes the compiled code to produce different results under different optimisation levels.\r\n\r\n```rust\r\n#![feature(custom_mir, core_intrinsics)]\r\nextern crate core;\r\nuse core::intrinsics::mir::*;\r\n\r\npub fn dump_var(val0: u32) {\r\n    println!(\"{val0}\");\r\n}\r\n\r\npub struct Adt52 {\r\n    fld1: (u32, usize, u16),\r\n}\r\n\r\n#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\r\nfn fn14() {\r\n    mir! {\r\n    let fld1: (u32, usize, u16);\r\n    let non_copy: Adt52;\r\n    let p: *const u32;\r\n    let i: u32;\r\n    let unit: ();\r\n    {\r\n        fld1 = (0, 0_usize, 0);\r\n        non_copy = Adt52 {fld1};\r\n        p = core::ptr::addr_of!(non_copy.fld1.0);\r\n        Call(unit, bb13, fn15(Move(non_copy)))\r\n    }\r\n    bb13 = {\r\n        i = *p;\r\n        Call(unit, bb18, dump_var(i))\r\n    }\r\n    bb18 = {\r\n        Return()\r\n    }\r\n\r\n    }\r\n}\r\npub fn fn15(mut x: Adt52) {\r\n    x.fld1 = (1, 0, 0);\r\n}\r\npub fn main() {\r\n    fn14();\r\n}\r\n```\r\n\r\n```console\r\n% rustc -Zmir-opt-level=2 -Copt-level=3 repro.rs && ./repro\r\n0\r\n% rustc -Zmir-opt-level=1 -Copt-level=3 repro.rs && ./repro\r\n1\r\n% ../miri/miri run ./repro.rs\r\n0\r\n```\r\n\r\nAt the moment, this is only reproducible with custom MIR, because when we build MIR from surface Rust we always create a temporary, so you cannot create a pointer to anything that will be directly moved into another function.\r\n```rust\r\nfn fn14() {\r\n    let fld1 = (0, 0, 0);\r\n\r\n    let mut non_copy = Adt52 {fld1};              // _2 = Adt52 { fld1: _1 };\r\n    let p = core::ptr::addr_of!(non_copy.fld1.0); // _3 = &raw const ((_2.0: (u32, usize, u16)).0: u32);\r\n    fn15(non_copy);                               // _5 = move _2;\r\n                                                  // _4 = fn15(move _5) -> bb1;\r\n\r\n    let i = unsafe { *p };\r\n    dump_var(i);\r\n}\r\n```\r\n\r\nSo either we should call this UB or codegen shouldn't rely on the assumption that a moved MIR place will never be used later.\r\n\r\ncc @RalfJung ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112564/timeline", "performed_via_github_app": null, "state_reason": null}