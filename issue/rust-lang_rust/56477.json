{"url": "https://api.github.com/repos/rust-lang/rust/issues/56477", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56477/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56477/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56477/events", "html_url": "https://github.com/rust-lang/rust/issues/56477", "id": 386971389, "node_id": "MDU6SXNzdWUzODY5NzEzODk=", "number": 56477, "title": "Possible soundness bug in borrow-ck", "user": {"login": "rmanoka", "id": 5672629, "node_id": "MDQ6VXNlcjU2NzI2Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/5672629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmanoka", "html_url": "https://github.com/rmanoka", "followers_url": "https://api.github.com/users/rmanoka/followers", "following_url": "https://api.github.com/users/rmanoka/following{/other_user}", "gists_url": "https://api.github.com/users/rmanoka/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmanoka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmanoka/subscriptions", "organizations_url": "https://api.github.com/users/rmanoka/orgs", "repos_url": "https://api.github.com/users/rmanoka/repos", "events_url": "https://api.github.com/users/rmanoka/events{/privacy}", "received_events_url": "https://api.github.com/users/rmanoka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}, {"id": 867466592, "node_id": "MDU6TGFiZWw4Njc0NjY1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-sound", "name": "NLL-sound", "color": "f799ea", "default": false, "description": "Working towards the \"invalid code does not compile\" goal"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-03T19:34:36Z", "updated_at": "2018-12-04T23:29:54Z", "closed_at": "2018-12-04T23:26:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\nHere's a snippet of code which I believe should not compile.  The program compiles and exhibits undefined behaviour (sometimes garbled output, sometimes seg-fault, and sometimes the correct output!) on recent nightlies, and beta.\r\n\r\n``` rust\r\nfn run() -> Result<u64, Error> {\r\n    use serde_json::Value;\r\n    use std::collections::BTreeMap;\r\n\r\n    let mut stdin = std::io::stdin();\r\n    let mut out: BTreeMap<&str, BTreeMap<&str, f64>> = BTreeMap::new();\r\n    out.insert(\"hello\", BTreeMap::new());\r\n    out.insert(\"world\", BTreeMap::new());\r\n\r\n    let iter = serde_json::Deserializer::from_reader(&mut stdin)\r\n            .into_iter::<BTreeMap<String, Value>>();\r\n\r\n    for map in iter {\r\n        let map = map?;\r\n\r\n        let mut cb = |key: &str, map: BTreeMap<String, Value>| {\r\n            out.get_mut(key).map(|out| {\r\n\r\n                map.keys().for_each(|k| {\r\n                    if let Some(val) = out.get_mut(k.as_str()) {\r\n                        *val += 1.0;\r\n                    } else {\r\n                        out.insert(k.as_str(), 1.0);\r\n                    }\r\n                })\r\n\r\n            });\r\n        };\r\n\r\n        if map.len() % 2 == 0 {\r\n            cb(\"hello\", map);\r\n        } else {\r\n            cb(\"world\", map);\r\n        }\r\n    }\r\n\r\n    for (key, map) in out {\r\n        println!(\"Map {}\", key);\r\n        for (key, val) in map {\r\n            println!(\"key={} val={}\", key, val);\r\n        }\r\n    }\r\n    Ok(0)\r\n}\r\n\r\n\r\nfn main() {\r\n    run();\r\n}\r\n\r\nstruct Error;\r\nuse std::error::Error as StdError;\r\nimpl<E: StdError> From<E> for Error {\r\n    fn from(err: E) -> Self {\r\n        println!(\"{}\", err);\r\n        Error\r\n    }\r\n}\r\n```\r\nThe crux is in `run()` function, where I tried to construct a `BTreeMap<&str, BTreeMap<&str, f64>>`.  However, it is being constructed from inside a for loop via references which clearly do not last beyond one iteration.\r\n\r\nHere are a few different outputs obtained on the same input:\r\n\r\n```\r\nMap hello\r\nkey=num1 val=1\r\nkey=PB val=2\r\nkey=num1 val=2\r\nkey=PB val=1\r\nkey=PBval=1\r\nkey=num1 val=2\r\nkey=PB val=1\r\nMap world\r\n```\r\n\r\nOutput 2 (on same input)\r\n\r\n```\r\nMap hello\r\nkey=num1 val=1\r\nkey=PBval=2\r\nkey=num1 val=2\r\nkey=PBval=1\r\nkey=PBval=1\r\nkey=num1 val=2\r\nkey=PBval=1\r\nMap world\r\n```\r\n\r\nNote that in both cases, we have evidence of memory-UB because the `println!` statement clearly has a space between the `key` and the `val`, so output like: `key=PBval=1` shouldn't be happening.\r\n\r\nThe input and the source code as a Cargo is available [here](https://github.com/rmanoka/possible-borrowck-bug).  To test: `cargo run < test.json` from the root of repository.\r\n\r\nA couple of observations that may be relevant:\r\n\r\n1.  Bug is present on `1.32.0-nightly (21f268495 2018-12-02), (9fefb6766 2018-11-13)`,  and current `beta` with 2018 edition.  However, 2015 editions, and the current stable compilers report error as we would expect.  See [playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2015&gist=0fd53bbff5b81c03439e3f8e01a0e5a8).\r\n\r\n1.  The callback closure is necessary to create the bug.  If I throw the code inside the closure outside, and do necessary cleanups, the borrowck indeed complains.\r\n\r\n1.  two-level map is also necessary:  if I had used `BTreeMap<&str, f64>`  (but similar code), then again, the checker complains about the incorrect lifetimes.\r\n\r\nThis is a contrived example, but is derived out of a reasonably common use-case (of processing a db and keeping some cumulative stats).   I would be happy to help in figuring/fixing the bug here.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56477/timeline", "performed_via_github_app": null, "state_reason": "completed"}