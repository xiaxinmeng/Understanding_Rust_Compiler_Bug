{"url": "https://api.github.com/repos/rust-lang/rust/issues/63291", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63291/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63291/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63291/events", "html_url": "https://github.com/rust-lang/rust/issues/63291", "id": 476927194, "node_id": "MDU6SXNzdWU0NzY5MjcxOTQ=", "number": 63291, "title": "Tracking issue for uninitialized constructors for Box, Rc, Arc", "user": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}, {"id": 2242906716, "node_id": "MDU6TGFiZWwyMjQyOTA2NzE2", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-raw-pointers", "name": "A-raw-pointers", "color": "f7e101", "default": false, "description": "Area: raw pointers, MaybeUninit, NonNull"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 51, "created_at": "2019-08-05T15:34:56Z", "updated_at": "2023-05-29T11:41:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Assigning `MaybeUninit::<Foo>::uninit()` to a local variable is usually free, even when `size_of::<Foo>()` is large. However, passing it for example to `Arc::new` [causes at least one copy](https://youtu.be/F1AquroPfcI?t=4116) (from the stack to the newly allocated heap memory) even though there is no meaningful data. It is theoretically possible that a Sufficiently Advanced Compiler could optimize this copy away, but this is [reportedly unlikely to happen soon in LLVM](https://youtu.be/F1AquroPfcI?t=5431).\r\n\r\nThis issue tracks constructors for containers (`Box`, `Rc`, `Arc`) of `MaybeUninit<T>` or `[MaybeUninit<T>]` that do not initialized the data, and unsafe conversions to the known-initialized types (without `MaybeUninit`). The constructors are guaranteed not to make unnecessary copies.\r\n\r\nPR https://github.com/rust-lang/rust/pull/62451 adds:\r\n\r\n```rust\r\nimpl<T> Box<T> { pub fn new_uninit() -> Box<MaybeUninit<T>> {\u2026} }\r\nimpl<T> Box<MaybeUninit<T>> { pub unsafe fn assume_init(self) -> Box<T> {\u2026} }\r\nimpl<T> Box<[T]> { pub fn new_uninit_slice(len: usize) -> Box<[MaybeUninit<T>]> {\u2026} }\r\nimpl<T> Box<[MaybeUninit<T>]> { pub unsafe fn assume_init(self) -> Box<[T]> {\u2026} }\r\n\r\nimpl<T> Rc<T> { pub fn new_uninit() -> Rc<MaybeUninit<T>> {\u2026} }\r\nimpl<T> Rc<MaybeUninit<T>> { pub unsafe fn assume_init(self) -> Rc<T> {\u2026} }\r\nimpl<T> Rc<[T]> { pub fn new_uninit_slice(len: usize) -> Rc<[MaybeUninit<T>]> {\u2026} }\r\nimpl<T> Rc<[MaybeUninit<T>]> { pub unsafe fn assume_init(self) -> Rc<[T]> {\u2026} }\r\n\r\nimpl<T> Arc<T> { pub fn new_uninit() -> Arc<MaybeUninit<T>> {\u2026} }\r\nimpl<T> Arc<MaybeUninit<T>> { pub unsafe fn assume_init(self) -> Arc<T> {\u2026} }\r\nimpl<T> Arc<[T]> { pub fn new_uninit_slice(len: usize) -> Arc<[MaybeUninit<T>]> {\u2026} }\r\nimpl<T> Arc<[MaybeUninit<T>]> { pub unsafe fn assume_init(self) -> Arc<[T]> {\u2026} }\r\n```\r\n\r\nPR https://github.com/rust-lang/rust/pull/66128 adds:\r\n\r\n```rust\r\nimpl<T> Box<T> { pub fn new_zeroed() -> Box<MaybeUninit<T>> {\u2026} }\r\nimpl<T> Arc<T> { pub fn new_zeroed() -> Arc<MaybeUninit<T>> {\u2026} }\r\nimpl<T> Rc<T> { pub fn new_zeroed() -> Rc<MaybeUninit<T>> {\u2026} }\r\n```\r\n\r\nUnresolved question:\r\n\r\n* The constructor that returns for example `Box<MaybeUninit<T>>` might \u201cbelong\u201d more as an associated function of that same type, rather than `Box<T>`. (And similarly for other constructors.) However this would make a call like `Box::<u32>::new_uninit()` becomes `Box::<MaybeUnint<u32>>::new_uninit()` which feels unnecessarily verbose. I suspect that this turbofish will be needed in a lot of cases to appease type inference.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63291/reactions", "total_count": 33, "+1": 33, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63291/timeline", "performed_via_github_app": null, "state_reason": null}