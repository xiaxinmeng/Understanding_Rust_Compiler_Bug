{"url": "https://api.github.com/repos/rust-lang/rust/issues/83487", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83487/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83487/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83487/events", "html_url": "https://github.com/rust-lang/rust/issues/83487", "id": 841281695, "node_id": "MDU6SXNzdWU4NDEyODE2OTU=", "number": 83487, "title": "Detect accidental Err(Err(_)) when Err(_) would work", "user": {"login": "teor2345", "id": 8951843, "node_id": "MDQ6VXNlcjg5NTE4NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/8951843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teor2345", "html_url": "https://github.com/teor2345", "followers_url": "https://api.github.com/users/teor2345/followers", "following_url": "https://api.github.com/users/teor2345/following{/other_user}", "gists_url": "https://api.github.com/users/teor2345/gists{/gist_id}", "starred_url": "https://api.github.com/users/teor2345/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teor2345/subscriptions", "organizations_url": "https://api.github.com/users/teor2345/orgs", "repos_url": "https://api.github.com/users/teor2345/repos", "events_url": "https://api.github.com/users/teor2345/events{/privacy}", "received_events_url": "https://api.github.com/users/teor2345/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-03-25T20:25:52Z", "updated_at": "2021-03-26T10:14:03Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur. \r\n-->\r\n\r\nGiven the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n\r\n```rust\r\nfn expect_single_err(single_err: Result<(), ()>) { }\r\n\r\nfn main() {\r\n    let extra_err = Err(Err(()));\r\n    expect_single_err(extra_err);\r\n}\r\n```\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0eefb3a9b0d1401fd08897e8d2f85092\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:5:23\r\n  |\r\n5 |     expect_single_err(extra_err);\r\n  |                       ^^^^^^^^^ expected `()`, found enum `std::result::Result`\r\n  |\r\n  = note: expected enum `std::result::Result<(), ()>`\r\n             found enum `std::result::Result<_, std::result::Result<_, ()>>`\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\n(existing output)\r\nHint: use Err(()) instead.\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\nWhen manipulating error types, it's easy to accidentally add an extra Result layer. For example, if Rust could consistently catch accidentally reversing the arguments to map_or_else it would anecdotally help a lot of people because from what I hear even people who know get it wrong sometimes.\r\n\r\nI've also encountered a similar error when wrapping existing futures in tokio::time::timeout. The timeout wrapper transforms T into Result<T, Elapsed>. This can cause confusing errors when T is also a Result.\r\n\r\nThe timeout case is particularly tricky, because you also need to get the await in the right place (outside the timeout, once), rather than having an inner and an outer await, or just having an inner await.\r\n\r\nI've also seen people get caught up on `Future<Future<_>>` when `Future<_>` would be accepted. In that case, the hint could be \"add an await\". But maybe that deserves a separate ticket.\r\n\r\nThis ticket is based on the last few tweets in this Twitter thread:\r\nhttps://twitter.com/mcclure111/status/1374990999345315842?s=21\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83487/timeline", "performed_via_github_app": null, "state_reason": null}