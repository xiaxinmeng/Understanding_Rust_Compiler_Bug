{"url": "https://api.github.com/repos/rust-lang/rust/issues/49564", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49564/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49564/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49564/events", "html_url": "https://github.com/rust-lang/rust/issues/49564", "id": 310344392, "node_id": "MDU6SXNzdWUzMTAzNDQzOTI=", "number": 49564, "title": "Document additional use case for Iterator::inspect", "user": {"login": "nickbabcock", "id": 2106129, "node_id": "MDQ6VXNlcjIxMDYxMjk=", "avatar_url": "https://avatars.githubusercontent.com/u/2106129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickbabcock", "html_url": "https://github.com/nickbabcock", "followers_url": "https://api.github.com/users/nickbabcock/followers", "following_url": "https://api.github.com/users/nickbabcock/following{/other_user}", "gists_url": "https://api.github.com/users/nickbabcock/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickbabcock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickbabcock/subscriptions", "organizations_url": "https://api.github.com/users/nickbabcock/orgs", "repos_url": "https://api.github.com/users/nickbabcock/repos", "events_url": "https://api.github.com/users/nickbabcock/events{/privacy}", "received_events_url": "https://api.github.com/users/nickbabcock/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-01T18:40:09Z", "updated_at": "2018-05-29T08:52:43Z", "closed_at": "2018-05-29T08:52:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If you'd like to fix this bug, [here's how](https://github.com/rust-lang/rust/issues/49564#issuecomment-392548153).\r\n\r\n---------------------\r\n\r\nCurrently iterator::inspect contains the following documentation:\r\n\r\n> It's much more common for inspect() to be used as a debugging tool than to exist in your final code, but never say never.\r\n\r\nThough I like the never say never wording, I think it might be helpful to document a use case where it's not used for debugging. I use `inspect` in daemon applications for that slurp in stdin lines and discard and log the lines that can't be parsed. Like so:\r\n\r\n```rust\r\nlines\r\n.iter()\r\n.map(|line| parse_line(line))\r\n.inspect(|line| {\r\n    // If we can't parse a line, yeah that sucks but it's bound to happen so discard\r\n    // the line after it's logged for the attentive sysadmin\r\n    if let Err(ref e) = *line {\r\n        error!(\"Parsing error: {}\", e);\r\n    }\r\n})\r\n.flat_map(|x| x)\r\n// etc\r\n```\r\n\r\nMaybe the documentation of inspect can be updated to something like:\r\n\r\n> It's more common for inspect() to be used as a debugging tool than to exist in your final code, but applications may find it useful in certain situations as well. Say an application is reading stdin lines, it may be it helpful to log lines with errors before discarding them.\r\n\r\nWhat do you think? Suggestions certainly wanted \ud83d\ude04 ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49564/timeline", "performed_via_github_app": null, "state_reason": "completed"}