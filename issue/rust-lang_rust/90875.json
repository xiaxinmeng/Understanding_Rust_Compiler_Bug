{"url": "https://api.github.com/repos/rust-lang/rust/issues/90875", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90875/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90875/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90875/events", "html_url": "https://github.com/rust-lang/rust/issues/90875", "id": 1052729218, "node_id": "I_kwDOAAsO6M4-v1-C", "number": 90875, "title": "`for<'a> Fn(<A as B<'a>>::C)` fails incosistently and requires unnecessary type annotations", "user": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-11-13T17:23:01Z", "updated_at": "2022-05-17T14:25:05Z", "closed_at": "2022-05-17T14:25:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\ntrait Variable<'a> {\r\n    type Type;\r\n}\r\n\r\nimpl Variable<'_> for () {\r\n    type Type = ();\r\n}\r\n\r\nfn check<F, T>(_: F)\r\nwhere\r\n    F: Fn(T), // <- if removed, all fn_* then require type annotations\r\n    F: for<'a> Fn(<T as Variable<'a>>::Type),\r\n    T: for<'a> Variable<'a>,\r\n{\r\n}\r\n\r\nfn test(arg: impl Fn(())) {\r\n    fn fn_1(_: ()) {}\r\n    let fn_2 = |_: ()| ();\r\n    let fn_3 = |a| fn_1(a);\r\n    let fn_4 = arg;\r\n\r\n    check(fn_1); // Error\r\n    check(fn_2); // Ok\r\n    check(fn_3); // Ok\r\n    check(fn_4); // Error\r\n    check::<_, ()>(fn_1); // Ok\r\n    check::<_, ()>(fn_4); // Ok\r\n}\r\n```\r\n([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=311765eb65fa36205839f2930d6f29d8))\r\n\r\nI expected to see this happen: the code compiles fine.\r\n\r\nInstead, this happened: `check(fn_1)` and `check(fn_4)` fails to type check, and although the error message is not related to type inference, annotating the type parameter `T` fixes the problem. the same thing happens when removing the bound `F: Fn(T)`, but then for all `check(fn_*)`.\r\n\r\nSeems to be related to #79207. cc @jackh726 \r\n\r\n<details><summary>Error message</summary>\r\n<p>\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0631]: type mismatch in function arguments\r\n  --> src/lib.rs:23:11\r\n   |\r\n18 |     fn fn_1(_: ()) {}\r\n   |     -------------- found signature of `fn(()) -> _`\r\n...\r\n23 |     check(fn_1); // Error\r\n   |     ----- ^^^^ expected signature of `for<'a> fn(<() as Variable<'a>>::Type) -> _`\r\n   |     |\r\n   |     required by a bound introduced by this call\r\n   |\r\nnote: required by a bound in `check`\r\n  --> src/lib.rs:12:8\r\n   |\r\n9  | fn check<F, T>(_: F)\r\n   |    ----- required by a bound in this\r\n...\r\n12 |     F: for<'a> Fn(<T as Variable<'a>>::Type),\r\n   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\r\n\r\nerror[E0277]: expected a `Fn<(<() as Variable<'a>>::Type,)>` closure, found `impl Fn(())`\r\n  --> src/lib.rs:26:11\r\n   |\r\n26 |     check(fn_4); // Error\r\n   |     ----- ^^^^ expected an `Fn<(<() as Variable<'a>>::Type,)>` closure, found `impl Fn(())`\r\n   |     |\r\n   |     required by a bound introduced by this call\r\n   |\r\nnote: required by a bound in `check`\r\n  --> src/lib.rs:12:8\r\n   |\r\n9  | fn check<F, T>(_: F)\r\n   |    ----- required by a bound in this\r\n...\r\n12 |     F: for<'a> Fn(<T as Variable<'a>>::Type),\r\n   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\r\nhelp: consider further restricting this bound\r\n   |\r\n17 | fn test(arg: impl Fn(()) + for<'a> std::ops::Fn<(<() as Variable<'a>>::Type,)>) {\r\n   |                          +++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n\r\nSome errors have detailed explanations: E0277, E0631.\r\nFor more information about an error, try `rustc --explain E0277`.\r\nerror: could not compile `playground` due to 2 previous errors\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n### Context\r\n[Original thread in users forum](https://users.rust-lang.org/t/hrtb-bug-when-for-a-fn-x-as-trait-a-assoc/67300)\r\n\r\n\r\n### Meta\r\nTested on ~~stable and~~ nightly branches of playground:\r\n* ~~Stable version: 1.56.1~~\r\n* Nightly version: 1.58.0-nightly (2021-11-09 8b09ba6a5d5c644fe0f1)\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90875/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90875/timeline", "performed_via_github_app": null, "state_reason": "completed"}