{"url": "https://api.github.com/repos/rust-lang/rust/issues/37508", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37508/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37508/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37508/events", "html_url": "https://github.com/rust-lang/rust/issues/37508", "id": 186453504, "node_id": "MDU6SXNzdWUxODY0NTM1MDQ=", "number": 37508, "title": "Error with -C code-model=large and thread locals", "user": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-11-01T03:55:13Z", "updated_at": "2021-06-22T06:44:07Z", "closed_at": "2021-06-22T06:44:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "(allowing specifying code models was added to rustc in https://github.com/rust-lang/rust/pull/15698)\r\n\r\nI want to build a large code model binary. But (correct me if I'm wrong) I believe this requires all code to be generated with a large code model (otherwise we could end up with rip relative addressing in the stdlib, which defeats the point).\r\n\r\nSo I tried the obvious (controlling it with `RUSTFLAGS`) and got the following build log:\r\n```\r\n/rust# ./configure && RUSTFLAGS=\"-C code-model=large\" VERBOSE=1 make\r\n[...]\r\nCFG_LLVM_LINKAGE_FILE=/rust/x86_64-unknown-linux-gnu/rt/llvmdeps.rs LD_LIBRARY_PATH=/rust/x86_64-unknown-linux-gnu/stage0/lib:/rust/x86_64-unknown-linux-gnu/llvm/lib:$LD$\r\nLIBRARY_PATH   x86_64-unknown-linux-gnu/stage0/bin/rustc --cfg stage0 -C code-model=large -O --cfg rtopt -C rpath -C prefer-dynamic -C no-stack-check --target=x86_64-unk$\r\nown-linux-gnu   -L \"x86_64-unknown-linux-gnu/rt\" -L native=\"/rust/x86_64-unknown-linux-gnu/llvm/lib\"     --out-dir x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unk$\r\nown-linux-gnu/lib -C extra-filename=-3d98e1dd -C metadata=3d98e1dd src/librustc_save_analysis/lib.rs\r\ninfo: now are following matches for librustc_save_analysis-*.so libraries:\r\nx86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc_save_analysis-3d98e1dd.so\r\ninfo: now are following matches for librustc_save_analysis-*.rlib libraries:\r\nx86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc_save_analysis-3d98e1dd.rlib\r\nMATCHES=\"\"; if [ -n \"$MATCHES\" ] ; then echo \"warning: removing previous\" \\'librustc_driver-*.so\\' \"libraries:\" $MATCHES; rm $MATCHES ; fi\r\nMATCHES=\"\"; if [ -n \"$MATCHES\" ] ; then echo \"warning: removing previous\" \\'librustc_driver-*.rlib\\' \"libraries:\" $MATCHES; rm $MATCHES ; fi\r\nCFG_LLVM_LINKAGE_FILE=/rust/x86_64-unknown-linux-gnu/rt/llvmdeps.rs LD_LIBRARY_PATH=/rust/x86_64-unknown-linux-gnu/stage0/lib:/rust/x86_64-unknown-linux-gnu/llvm/lib:$LD$\r\nLIBRARY_PATH   x86_64-unknown-linux-gnu/stage0/bin/rustc --cfg stage0 -C code-model=large -O --cfg rtopt -C rpath -C prefer-dynamic -C no-stack-check --target=x86_64-unk$\r\nown-linux-gnu   -L \"x86_64-unknown-linux-gnu/rt\" -L native=\"/rust/x86_64-unknown-linux-gnu/llvm/lib\"     --out-dir x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unk$\r\nown-linux-gnu/lib -C extra-filename=-3d98e1dd -C metadata=3d98e1dd src/librustc_driver/lib.rs\r\ninfo: now are following matches for librustc_driver-*.so libraries:\r\nx86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc_driver-3d98e1dd.so\r\ninfo: now are following matches for librustc_driver-*.rlib libraries:\r\nx86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc_driver-3d98e1dd.rlib\r\nmkdir -p x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/bin/\r\nLD_LIBRARY_PATH=/rust/x86_64-unknown-linux-gnu/stage0/lib:/rust/x86_64-unknown-linux-gnu/llvm/lib:$LD_LIBRARY_PATH   x86_64-unknown-linux-gnu/stage0/bin/rustc --cfg stag$\r\n0 -C code-model=large -O --cfg rtopt -C rpath -C prefer-dynamic -C no-stack-check --target=x86_64-unknown-linux-gnu  -L native=\"/rust/x86_64-unknown-linux-gnu/llvm/lib\" $\r\no x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/bin/rustc /rust/src/driver/driver.rs --cfg rustc\r\ntouch x86_64-unknown-linux-gnu/stage1/lib/stamp.core\r\ntouch x86_64-unknown-linux-gnu/stage1/lib/stamp.libc\r\ntouch x86_64-unknown-linux-gnu/stage1/lib/stamp.rand\r\ntouch x86_64-unknown-linux-gnu/stage1/lib/stamp.alloc\r\ntouch x86_64-unknown-linux-gnu/stage1/lib/stamp.collections\r\ntouch x86_64-unknown-linux-gnu/stage1/lib/stamp.compiler_builtins\r\ntouch x86_64-unknown-linux-gnu/stage1/lib/stamp.rustc_unicode\r\ntouch x86_64-unknown-linux-gnu/stage1/lib/stamp.alloc_system\r\ntouch x86_64-unknown-linux-gnu/stage1/lib/stamp.panic_abort\r\ntouch x86_64-unknown-linux-gnu/stage1/lib/stamp.panic_unwind\r\ntouch x86_64-unknown-linux-gnu/stage1/lib/stamp.unwind\r\ntouch x86_64-unknown-linux-gnu/stage1/lib/stamp.alloc_jemalloc\r\n[...]\r\ncp x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib/stamp.rustc_save_analysis x86_64-unknown-linux-gnu/stage1/lib/stamp.rustc_save_analysis\r\ncp -R x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc_save_analysis-*.so x86_64-unknown-linux-gnu/stage1/lib\r\ninfo: now are following matches for librustc_save_analysis-*.so libraries:\r\nx86_64-unknown-linux-gnu/stage1/lib/librustc_save_analysis-3d98e1dd.so\r\nMATCHES=\"\"; if [ -n \"$MATCHES\" ] ; then echo \"warning: removing previous\" \\'librustc_driver-*.so\\' \"libraries:\" $MATCHES; rm $MATCHES ; fi\r\ncp x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib/stamp.rustc_driver x86_64-unknown-linux-gnu/stage1/lib/stamp.rustc_driver\r\ncp -R x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc_driver-*.so x86_64-unknown-linux-gnu/stage1/lib\r\ninfo: now are following matches for librustc_driver-*.so libraries:\r\nx86_64-unknown-linux-gnu/stage1/lib/librustc_driver-3d98e1dd.so\r\ncp x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/bin/rustc x86_64-unknown-linux-gnu/stage1/bin/rustc\r\ntouch tmp/install-debugger-scripts1_H_x86_64-unknown-linux-gnu-all.done.start_time\r\nmkdir -p x86_64-unknown-linux-gnu/stage1/bin\r\nmkdir -p x86_64-unknown-linux-gnu/stage1/lib/rustlib/etc\r\ninstall  /rust/src/etc/rust-gdb  /rust/src/etc/rust-lldb x86_64-unknown-linux-gnu/stage1/bin\r\ninstall  /rust/src/etc/gdb_load_rust_pretty_printers.py  /rust/src/etc/gdb_rust_pretty_printing.py  /rust/src/etc/lldb_rust_formatters.py  /rust/src/etc/debugger_pretty_p\r\nrinters_common.py x86_64-unknown-linux-gnu/stage1/lib/rustlib/etc\r\ntouch -r tmp/install-debugger-scripts1_H_x86_64-unknown-linux-gnu-all.done.start_time tmp/install-debugger-scripts1_H_x86_64-unknown-linux-gnu-all.done && rm tmp/install-\r\ndebugger-scripts1_H_x86_64-unknown-linux-gnu-all.done.start_time\r\nmkdir -p x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/\r\nMATCHES=\"\"; if [ -n \"$MATCHES\" ] ; then echo \"warning: removing previous\" \\'libcore-*.so\\' \"libraries:\" $MATCHES; rm $MATCHES ; fi\r\nMATCHES=\"\"; if [ -n \"$MATCHES\" ] ; then echo \"warning: removing previous\" \\'libcore-*.rlib\\' \"libraries:\" $MATCHES; rm $MATCHES ; fi\r\nCFG_LLVM_LINKAGE_FILE=/rust/x86_64-unknown-linux-gnu/rt/llvmdeps.rs LD_LIBRARY_PATH=/rust/x86_64-unknown-linux-gnu/stage1/lib:/rust/x86_64-unknown-linux-gnu/llvm/lib:$LD_\r\nLIBRARY_PATH   x86_64-unknown-linux-gnu/stage1/bin/rustc --cfg stage1 -C code-model=large -O --cfg rtopt -C rpath -C prefer-dynamic --target=x86_64-unknown-linux-gnu   -L\r\n \"x86_64-unknown-linux-gnu/rt\" -L native=\"/rust/x86_64-unknown-linux-gnu/llvm/lib\"     --out-dir x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib \r\n-C extra-filename=-3d98e1dd -C metadata=3d98e1dd src/libcore/lib.rs\r\nSegmentation fault (core dumped)\r\n/rust/mk/target.mk:191: recipe for target 'x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/stamp.core' failed\r\nmake: *** [x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/stamp.core] Error 139\r\n```\r\nBrief explanation of the three parts:\r\n1. the command is run\r\n2. the tail end of the stage1 stdlib and rustc itself being built by stage0\r\n3. the tail end of the stage1 stdlib and rustc itself being copied out of the stage0 build directory and into the stage1 directory, then the new stage1 rustc attempting to build the first part of the stage2 stdlib (libcore)...and segfaulting\r\n\r\nIn fact, this stage1 rustc segfaults when not doing much:\r\n```\r\n/rust# x86_64-unknown-linux-gnu/stage1/bin/rustc --version\r\nrustc 1.14.0-dev (f26eedb57 2016-10-31)\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nReducing the command line used to build rustc:\r\n```\r\n/rust# echo 'fn main() {}' > mini.rs\r\n/rust# x86_64-unknown-linux-gnu/stage0/bin/rustc -C code-model=large --target=x86_64-unknown-linux-gnu mini.rs\r\n/rust# ./mini\r\nSegmentation fault (core dumped)\r\n/rust# x86_64-unknown-linux-gnu/stage0/bin/rustc --target=x86_64-unknown-linux-gnu mini.rs\r\n/rust# ./mini\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nGDB gives the backtrace as\r\n```\r\n#0  0x000055555555f1e0 in std::thread::local::elf::destroy_value::h1727d3182d3ee514 ()\r\n#1  0x00007ffff74115ff in __GI___call_tls_dtors () at cxa_thread_atexit_impl.c:155\r\n#2  0x00007ffff7410f27 in __run_exit_handlers (status=0, listp=0x7ffff779a5f8 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true) at exit.c:40\r\n#3  0x00007ffff7411045 in __GI_exit (status=<optimized out>) at exit.c:104\r\n#4  0x00007ffff73f7837 in __libc_start_main (main=0x55555555dac0 <main>, argc=1, argv=0x7fffffffe7a8, init=<optimized out>, fini=<optimized out>, \r\n    rtld_fini=<optimized out>, stack_end=0x7fffffffe798) at ../csu/libc-start.c:325\r\n#5  0x000055555555d9a9 in _start ()\r\n```\r\n\r\nI've dumped a bunch of info in the hope that someone might be able to lend a hand, but I can find little discussion of this feature (code models) so they may not be well-tested? I plan to investigate myself, but wanted a) to see if anyone has any pointers and b) make this a searchable issue.\r\n\r\nAs a datapoint, note that redox uses a .json target specification and [builds its own stdlib manually](https://github.com/redox-os/redox/blob/fdfa25858bae41516ab495a042d8cc8cf0d8c565/Makefile#L511) with [kernel model](https://github.com/redox-os/redox/blob/fdfa25858bae41516ab495a042d8cc8cf0d8c565/x86_64-unknown-redox.json#L16), which obviously works fine. Altering the configure+make command I used to use the kernel model rather than large also worked fine. So it looks like the issue is with memory model large.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37508/timeline", "performed_via_github_app": null, "state_reason": "completed"}