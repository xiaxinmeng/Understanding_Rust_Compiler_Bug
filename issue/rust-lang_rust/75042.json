{"url": "https://api.github.com/repos/rust-lang/rust/issues/75042", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75042/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75042/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75042/events", "html_url": "https://github.com/rust-lang/rust/issues/75042", "id": 671585883, "node_id": "MDU6SXNzdWU2NzE1ODU4ODM=", "number": 75042, "title": "[ER] Possible basic panic_bounds_check left after Vec::resize_with", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-02T09:44:59Z", "updated_at": "2020-08-06T21:28:05Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I don't understand this situation much. This code:\r\n```rust\r\npub fn foo() -> Vec<usize> {\r\n    let mut arr: Vec<usize> = vec![];\r\n    arr.resize_with(100, || Default::default());\r\n    for i in 0 .. 100 {\r\n        arr[i] = i;\r\n    }\r\n    arr\r\n}\r\n\r\npub fn foo2() -> Vec<usize> {\r\n    let mut arr: Vec<usize> = vec![];\r\n    arr.resize_with(100, || Default::default());\r\n    arr[0] = 1;\r\n    arr\r\n}\r\n```\r\nWith `rustc 1.47.0-nightly cfc572cae 2020-07-30` gives the asm:\r\n```asm\r\nfoo:\r\n        push    r15\r\n        push    r14\r\n        push    r12\r\n        push    rbx\r\n        push    rax\r\n        mov     r14, rdi\r\n        mov     qword ptr [rdi], 8\r\n        vxorps  xmm0, xmm0, xmm0\r\n        vmovups xmmword ptr [rdi + 8], xmm0\r\n        mov     esi, 100\r\n        call    alloc::vec::Vec<T>::reserve\r\n        mov     r12, qword ptr [r14]\r\n        mov     r15, qword ptr [r14 + 16]\r\n        lea     rdi, [r12 + 8*r15]\r\n        xor     ebx, ebx\r\n        mov     edx, 792\r\n        xor     esi, esi\r\n        call    qword ptr [rip + memset@GOTPCREL]\r\n        mov     qword ptr [r12 + 8*r15 + 792], 0\r\n        add     r15, 100\r\n        mov     qword ptr [r14 + 16], r15\r\n.LBB1_1:\r\n        cmp     r15, rbx\r\n        je      .LBB1_8\r\n        mov     qword ptr [r12 + 8*rbx], rbx\r\n        lea     rax, [rbx + 1]\r\n        cmp     rax, r15\r\n        je      .LBB1_8\r\n        mov     qword ptr [r12 + 8*rbx + 8], rax\r\n        inc     rax\r\n        cmp     rax, r15\r\n        je      .LBB1_8\r\n        mov     qword ptr [r12 + 8*rbx + 16], rax\r\n        inc     rax\r\n        cmp     rax, r15\r\n        je      .LBB1_8\r\n        mov     qword ptr [r12 + 8*rbx + 24], rax\r\n        inc     rax\r\n        cmp     rax, r15\r\n        je      .LBB1_8\r\n        mov     qword ptr [r12 + 8*rbx + 32], rax\r\n        inc     rax\r\n        mov     rbx, rax\r\n        cmp     rax, 100\r\n        jne     .LBB1_1\r\n        mov     rax, r14\r\n        add     rsp, 8\r\n        pop     rbx\r\n        pop     r12\r\n        pop     r14\r\n        pop     r15\r\n        ret\r\n.LBB1_8:\r\n        lea     rdx, [rip + .L__unnamed_1]\r\n        mov     rdi, r15\r\n        mov     rsi, r15\r\n        call    qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\r\n        ud2\r\n\r\n\r\nfoo2:\r\n        push    r15\r\n        push    r14\r\n        push    rbx\r\n        mov     r15, rdi\r\n        mov     qword ptr [rdi], 8\r\n        vxorps  xmm0, xmm0, xmm0\r\n        vmovups xmmword ptr [rdi + 8], xmm0\r\n        mov     esi, 100\r\n        call    alloc::vec::Vec<T>::reserve\r\n        mov     r14, qword ptr [r15]\r\n        mov     rbx, qword ptr [r15 + 16]\r\n        lea     rdi, [r14 + 8*rbx]\r\n        mov     edx, 792\r\n        xor     esi, esi\r\n        call    qword ptr [rip + memset@GOTPCREL]\r\n        mov     qword ptr [r14 + 8*rbx + 792], 0\r\n        add     rbx, 100\r\n        mov     qword ptr [r15 + 16], rbx\r\n        je      .LBB2_1\r\n        mov     qword ptr [r14], 1\r\n        mov     rax, r15\r\n        pop     rbx\r\n        pop     r14\r\n        pop     r15\r\n        ret\r\n.LBB2_1:\r\n        lea     rdx, [rip + .L__unnamed_2]\r\n        xor     edi, edi\r\n        xor     esi, esi\r\n        call    qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\r\n        ud2\r\n```\r\nThat contains panic_bounds_check. If I compile only of those functions the panic_bounds_check go away.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75042/timeline", "performed_via_github_app": null, "state_reason": null}