{"url": "https://api.github.com/repos/rust-lang/rust/issues/93145", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93145/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93145/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93145/events", "html_url": "https://github.com/rust-lang/rust/issues/93145", "id": 1110003770, "node_id": "I_kwDOAAsO6M5CKVA6", "number": 93145, "title": "Wishlist: allow adding intrinsics in a way that doesn't break every backend", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 1353616418, "node_id": "MDU6TGFiZWwxMzUzNjE2NDE4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-intrinsics", "name": "A-intrinsics", "color": "f7e101", "default": false, "description": "Area: intrinsics"}], "state": "open", "locked": false, "assignee": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2022-01-21T03:13:27Z", "updated_at": "2022-08-22T11:56:15Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "See previous conversation in https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Musing.20on.20intrinsics.20with.20MIR.20available/near/243719813 which was split off from https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Considering.20a.20future.20integration.20of.20the.20gcc.20backend/near/243686539\r\n\r\nAs we get more backends, and as people write more out-of-tree backends, it gets harder and harder to add intrinsics.  Right now, you already have to implement every new intrinsic  \r\n\r\n1) in a way that works for `bootstrap`\r\n2) in MIRI, for CTFE\r\n3) in cg_llvm\r\n4) in cg_clif\r\n\r\nAnd that list will just get longer with cg_gcc and whatever.\r\n\r\nIt would be really nice if there was an easy way to add an intrinsic that only required updating the type/safety checking parts of the compilers, not the backends at all.  Then the changes the specific backends to implement the intrinsic in a more efficient way are separable from adding the intrinsic in the first place.\r\n\r\nThat would probably mean having MIR available for the intrinsic somehow, so the fallback path for intrinsics in backends could be to just use that MIR, rather than failing.\r\n\r\nThe intrinsics would then only need to be implemented in backends that care.  For example, `cg_clif` might not bother overriding some of the unchecked math ones.\r\n\r\nAnd it would be really nice for simd, as the fallback implementations would define their semantics in terms of normal scalar rust, which MIRI will always want anyway, and will be very convenient for other platforms or backends that don't have it implemented (yet or ever).\r\n\r\n## A sketch\r\n\r\nThis might not be the best way, but for the sake of a starting point, here's a sketch of how maybe it could work.\r\n\r\nBack in #61885, which added an `unchecked_sub` intrinsic, I solved step (1) above by adding\r\n```rust\r\n/// For bootstrapping, implement unchecked_sub as just wrapping_sub.\r\n#[cfg(bootstrap)]\r\npub unsafe fn unchecked_sub<T>(x: T, y: T) -> T {\r\n    sub_with_overflow(x, y).0\r\n}\r\n```\r\n\r\nIt would be nice if, rather than the intrinsic being only declared\r\n```rust\r\nextern \"rust-intrinsic\" {\r\n    #[cfg(not(bootstrap))]\r\n    pub fn unchecked_sub<T>(x: T, y: T) -> T;\r\n}\r\n```\r\nit could instead be *defined* in `core` with the fallback body\r\n```rust\r\npub unsafe extern \"rust-intrinsic\" fn unchecked_sub<T>(x: T, y: T) -> T {\r\n    sub_with_overflow(x, y).0\r\n}\r\n```\r\nThen the backend could use that MIR, available like the MIR of any generic function (or inline, for non-generics).\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93145/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93145/timeline", "performed_via_github_app": null, "state_reason": null}