{"url": "https://api.github.com/repos/rust-lang/rust/issues/78411", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78411/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78411/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78411/events", "html_url": "https://github.com/rust-lang/rust/issues/78411", "id": 729866795, "node_id": "MDU6SXNzdWU3Mjk4NjY3OTU=", "number": 78411, "title": "Compiler unable to recognize `From` based on `Into` when using `?`-operator and where clause on generic param's associated type", "user": {"login": "JarvisCraft", "id": 7693005, "node_id": "MDQ6VXNlcjc2OTMwMDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7693005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarvisCraft", "html_url": "https://github.com/JarvisCraft", "followers_url": "https://api.github.com/users/JarvisCraft/followers", "following_url": "https://api.github.com/users/JarvisCraft/following{/other_user}", "gists_url": "https://api.github.com/users/JarvisCraft/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarvisCraft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarvisCraft/subscriptions", "organizations_url": "https://api.github.com/users/JarvisCraft/orgs", "repos_url": "https://api.github.com/users/JarvisCraft/repos", "events_url": "https://api.github.com/users/JarvisCraft/events{/privacy}", "received_events_url": "https://api.github.com/users/JarvisCraft/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-10-26T20:05:05Z", "updated_at": "2020-10-26T20:31:22Z", "closed_at": "2020-10-26T20:31:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given error structure:\r\n```rust\r\n#[derive(Debug)]\r\npub struct TargetErr {}\r\n\r\nimpl std::error::Error for TargetErr {}\r\n\r\nimpl std::fmt::Display for TargetErr {\r\n    fn fmt(&self, formatter: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\r\n        write!(formatter, \"TargetErr\")\r\n    }\r\n}\r\n```\r\n\r\nand a trait with an associated type:\r\n```rust\r\npub trait Foo {\r\n    type SomeErr;\r\n\r\n    fn foo() -> Result<(), Self::SomeErr>;\r\n}\r\n```\r\n\r\nThe following function will not compile:\r\n```rust\r\nfn incorrect_into<T: Foo>() -> Result<(), TargetErr>\r\n    where T::SomeErr: Into<TargetErr> {\r\n    T::foo()?;\r\n\r\n    Ok(())\r\n}\r\n```\r\n\r\nCausing error:\r\n```rust\r\nerror[E0277]: `?` couldn't convert the error to `TargetErr`\r\n  --> src/main.rs:27:13\r\n   |\r\n25 | fn incorrect_into<T: Foo>() -> Result<(), TargetErr>\r\n   |                                --------------------- expected `TargetErr` because of this\r\n26 |     where T::SomeErr: Into<TargetErr> {\r\n27 |     T::foo()?;\r\n   |             ^ the trait `std::convert::From<<T as Foo>::SomeErr>` is not implemented for `TargetErr`\r\n   |\r\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\r\n   = note: required by `std::convert::From::from`\r\n```\r\n\r\nAlthough its analog:\r\n```rust\r\nfn correct_from<T: Foo>() -> Result<(), TargetErr>\r\n    where TargetErr: From<T::SomeErr> {\r\n    T::foo()?;\r\n\r\n    Ok(())\r\n}\r\n```\r\nwill compile normally.\r\n\r\n**Expected** behavior:\r\nImplicit conversion from `T::SomeErr` into `TargetErr` via `From<T::SomeErr>` implemented on `TargetErr` (blanket implementation caused by `Into<TargetErr>` being implemented for `T::SomeErr`) should be inserted by the compiler.\r\n\r\n**Actual** behavior:\r\nCompiler is unable to add implicit conversion although, from point of type-system, it would be correct as the following compiles as expected:\r\n```rust\r\nfn correct_into<T: Foo>() -> Result<(), TargetErr>\r\n    where T::SomeErr: Into<TargetErr> {\r\n    T::foo().map_err(|e| <T::SomeErr as Into<TargetErr>>::into(e))?;\r\n\r\n    Ok(())\r\n}\r\n```\r\n\r\n---\r\n\r\nFull example: [Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=94a00b62f6545d1df732888bb7d1a9b9)\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.47.0 (18bf6b4f0 2020-10-07)\r\nbinary: rustc\r\ncommit-hash: 18bf6b4f01a6feaf7259ba7cdae58031af1b7b39\r\ncommit-date: 2020-10-07\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.47.0\r\nLLVM version: 11.0\r\n```\r\n\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n   Compiling rust-experimenting v0.1.0 (/home/progrm_jarvis/CLionProjects/rust-experimenting)\r\n     Running `rustc --crate-name rust_experimenting --edition=2018 src/main.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C metadata=93e969cfb056f445 -C extra-filename=-93e969cfb056f445 --out-dir /home/progrm_jarvis/CLionProjects/rust-experimenting/target/debug/deps -C incremental=/home/progrm_jarvis/CLionProjects/rust-experimenting/target/debug/incremental -L dependency=/home/progrm_jarvis/CLionProjects/rust-experimenting/target/debug/deps`\r\nerror[E0277]: `?` couldn't convert the error to `TargetErr`\r\n  --> src/main.rs:27:13\r\n   |\r\n25 | fn incorrect_into<T: Foo>() -> Result<(), TargetErr>\r\n   |                                --------------------- expected `TargetErr` because of this\r\n26 |     where T::SomeErr: Into<TargetErr> {\r\n27 |     T::foo()?;\r\n   |             ^ the trait `std::convert::From<<T as Foo>::SomeErr>` is not implemented for `TargetErr`\r\n   |\r\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\r\n   = note: required by `std::convert::From::from`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `rust-experimenting`.\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustc --crate-name rust_experimenting --edition=2018 src/main.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C metadata=93e969cfb056f445 -C extra-filename=-93e969cfb056f445 --out-dir /home/progrm_jarvis/CLionProjects/rust-experimenting/target/debug/deps -C incremental=/home/progrm_jarvis/CLionProjects/rust-experimenting/target/debug/incremental -L dependency=/home/progrm_jarvis/CLionProjects/rust-experimenting/target/debug/deps` (exit code: 1)\r\n\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "JarvisCraft", "id": 7693005, "node_id": "MDQ6VXNlcjc2OTMwMDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7693005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarvisCraft", "html_url": "https://github.com/JarvisCraft", "followers_url": "https://api.github.com/users/JarvisCraft/followers", "following_url": "https://api.github.com/users/JarvisCraft/following{/other_user}", "gists_url": "https://api.github.com/users/JarvisCraft/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarvisCraft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarvisCraft/subscriptions", "organizations_url": "https://api.github.com/users/JarvisCraft/orgs", "repos_url": "https://api.github.com/users/JarvisCraft/repos", "events_url": "https://api.github.com/users/JarvisCraft/events{/privacy}", "received_events_url": "https://api.github.com/users/JarvisCraft/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78411/timeline", "performed_via_github_app": null, "state_reason": "completed"}