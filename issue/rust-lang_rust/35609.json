{"url": "https://api.github.com/repos/rust-lang/rust/issues/35609", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/35609/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/35609/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/35609/events", "html_url": "https://github.com/rust-lang/rust/issues/35609", "id": 170763883, "node_id": "MDU6SXNzdWUxNzA3NjM4ODM=", "number": 35609, "title": "Error message for non-exhaustive patterns on tuples with an enum fills in all tuple components with successive enum values", "user": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-11T22:40:25Z", "updated_at": "2016-10-27T04:47:35Z", "closed_at": "2016-10-27T04:47:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I can reproduce this in both stable and nightly.  Minimal test case:\n\n``` rust\nenum Enum {\n    A, B, C, D, E, F\n}\nuse Enum::*;\n\nfn main() {\n    match (A, ()) {\n        (A, _) => {}\n    }\n}\n```\n\nError message from nightly:\n\n```\nerror[E0004]: non-exhaustive patterns: `(B, C)`, `D`, `E` and 1 more not covered\n --> <anon>:7:5\n  |\n7 |     match (A, ()) {\n  |     ^^^^^^^^^^^^^ patterns `(B, C)`, `D`, `E` and 1 more not covered\n```\n\nThe error from stable looks similar, just with a different template:\n\n```\nerror: non-exhaustive patterns: `(B, C)`, `D`, `E` and 1 more not covered [--explain E0004]\n --> <anon>:7:5\n7 |>     match (A, ()) {\n  |>     ^\n```\n\nIf the matched item uses a different tuple nesting structure, the error message will fill in all the components of that structure with the enum values:\n\n``` rust\nenum Enum {\n    A, B, C, D, E, F\n}\nuse Enum::*;\n\nfn main() {\n    match ((A, ()), ()) {\n        ((A, ()), _) => {}\n    }\n}\n```\n\n```\nerror[E0004]: non-exhaustive patterns: `((B, C), D)`, `E` and `F` not covered\n --> <anon>:7:5\n  |\n7 |     match ((A, ()), ()) {\n  |     ^^^^^^^^^^^^^^^^^^^ patterns `((B, C), D)`, `E` and `F` not covered\n```\n\nIf the number of slots to fill in in the tuple structure exceeds the number of un-handled enum variants, the error message will use _ for the remaining slots:\n\n``` rust\nenum Enum {\n    A, B, C\n}\nuse Enum::*;\n\nfn main() {\n    match ((A, ()), ()) {\n        ((A, _), _) => {}\n    }\n}\n```\n\n```\nerror[E0004]: non-exhaustive patterns: `((B, C), _)` not covered\n --> <anon>:7:5\n  |\n7 |     match ((A, ()), ()) {\n  |     ^^^^^^^^^^^^^^^^^^^ pattern `((B, C), _)` not covered\n```\n\nEdit: this also occurs with tuple structs:\n\n``` rust\nenum Enum {\n    A, B, C, D, E, F\n}\nuse Enum::*;\nstruct S(Enum, ());\n\nfn main() {\n    match S(A, ()) {\n        S(A, _) => {}\n    }\n}\n```\n\n```\nerror[E0004]: non-exhaustive patterns: `S(B, C)`, `D`, `E` and 1 more not covered\n --> <anon>:8:5\n  |\n8 |     match S(A, ()) {\n  |     ^^^^^^^^^^^^^^ patterns `S(B, C)`, `D`, `E` and 1 more not covered\n```\n\nAnd with structs:\n\n``` rust\nenum Enum {\n    A, B, C, D, E, F\n}\nuse Enum::*;\nstruct S { x: Enum, y: () }\n\nfn main() {\n    match (S { x: A, y: () }) {\n        S { x: A, y: _ } => {}\n    }\n}\n```\n\n```\nerror[E0004]: non-exhaustive patterns: `S { x: B, y: C }`, `D`, `E` and 1 more not covered\n --> <anon>:8:5\n  |\n8 |     match (S { x: A, y: () }) {\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^ patterns `S { x: B, y: C }`, `D`, `E` and 1 more not covered\n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/35609/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 3, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/35609/timeline", "performed_via_github_app": null, "state_reason": "completed"}