{"url": "https://api.github.com/repos/rust-lang/rust/issues/84151", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84151/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84151/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84151/events", "html_url": "https://github.com/rust-lang/rust/issues/84151", "id": 856620983, "node_id": "MDU6SXNzdWU4NTY2MjA5ODM=", "number": 84151, "title": "Dividing by NonZeroU64 does not optimize out check that the denominator != 0", "user": {"login": "redzic", "id": 48274562, "node_id": "MDQ6VXNlcjQ4Mjc0NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/48274562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/redzic", "html_url": "https://github.com/redzic", "followers_url": "https://api.github.com/users/redzic/followers", "following_url": "https://api.github.com/users/redzic/following{/other_user}", "gists_url": "https://api.github.com/users/redzic/gists{/gist_id}", "starred_url": "https://api.github.com/users/redzic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/redzic/subscriptions", "organizations_url": "https://api.github.com/users/redzic/orgs", "repos_url": "https://api.github.com/users/redzic/repos", "events_url": "https://api.github.com/users/redzic/events{/privacy}", "received_events_url": "https://api.github.com/users/redzic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-04-13T06:26:41Z", "updated_at": "2021-04-15T01:21:33Z", "closed_at": "2021-04-15T01:21:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`rustc 1.51` (and nightly) compiles this code:\r\n\r\n```rust\r\nuse std::num::NonZeroU64;\r\n\r\npub fn foo(x: u64, y: NonZeroU64) -> u64 {\r\n    x / y.get()\r\n}\r\n```\r\n\r\nwith this assembly output (compiler flags: `-C opt-level=3`):\r\n\r\n```assembly\r\nexample::foo:\r\n        test    rsi, rsi\r\n        je      .LBB0_5\r\n        mov     rax, rdi\r\n        or      rax, rsi\r\n        shr     rax, 32\r\n        je      .LBB0_2\r\n        mov     rax, rdi\r\n        xor     edx, edx\r\n        div     rsi\r\n        ret\r\n.LBB0_2:\r\n        mov     eax, edi\r\n        xor     edx, edx\r\n        div     esi\r\n        ret\r\n.LBB0_5:\r\n        sub     rsp, 8\r\n        lea     rdi, [rip + str.0]\r\n        lea     rdx, [rip + .L__unnamed_1]\r\n        mov     esi, 25\r\n        call    qword ptr [rip + core::panicking::panic@GOTPCREL]\r\n        ud2\r\n\r\n.L__unnamed_2:\r\n        .ascii  \"/app/example.rs\"\r\n\r\n.L__unnamed_1:\r\n        .quad   .L__unnamed_2\r\n        .asciz  \"\\017\\000\\000\\000\\000\\000\\000\\000\\004\\000\\000\\000\\005\\000\\000\"\r\n\r\nstr.0:\r\n        .ascii  \"attempt to divide by zero\"\r\n```\r\n\r\nThis assembly is definitely sub optimal, as it checks for an invariant that is guaranteed to never exist, and theoretically it should remove the branch completely.\r\n\r\nIf you manually call `unreachable_unchecked()`, then the branch gets eliminated. Here's what that would look like:\r\n\r\n```rust\r\nuse std::num::NonZeroU64;\r\n\r\npub fn bar(x: u64, y: NonZeroU64) -> u64 {\r\n    if y.get() == 0 {\r\n        unsafe { std::hint::unreachable_unchecked() }\r\n    }\r\n\r\n    x / y.get()\r\n}\r\n```\r\n\r\nAnd here's the codegen (on rust 1.51 and nightly):\r\n```assembly\r\nexample::bar:\r\n        mov     rax, rdi\r\n        mov     rcx, rdi\r\n        or      rcx, rsi\r\n        shr     rcx, 32\r\n        je      .LBB0_1\r\n        xor     edx, edx\r\n        div     rsi\r\n        ret\r\n.LBB0_1:\r\n        xor     edx, edx\r\n        div     esi\r\n        ret\r\n```\r\n\r\nThis is really strange, because if you compile the exact same code, but pass in `-C target-cpu=znver2`, then the code gets optimized further into just this:\r\n\r\n```assembly\r\nexample::bar:\r\n        mov     rax, rdi\r\n        xor     edx, edx\r\n        div     rsi\r\n        ret\r\n```\r\n\r\nThis seems like a bug in LLVM itself. It doesn't make sense why it would compile the code into the most optimized version only if you pass in `-C target-cpu=znver2` (znver1 also seems to work), but not if you pass in for example `-C target-cpu=haswell` or just use the default x86 target. It's not like it's generating AVX2 code or something that isn't supported on Rust's default x86 target, it's just using very simple instructions that are basically universal.\r\n\r\nNot only that, but it really seems like it's a regression in LLVM itself. If you compile `bar` on Rust 1.46, then even on the default x86 target it generates the 3 instruction version. However, any version after this seems to generate the other version with more instructions and conditional jumps.\r\n\r\nAnd there's one more thing that seems to suggest it's an LLVM regression. `clang` also has this issue in the latest version (11.0.1), but not in version 10.0.1.\r\n\r\nConsider the following C++ code:\r\n```cpp\r\n#include <cstdint>\r\n\r\nstd::uint64_t div(std::uint64_t x, std::uint64_t y) {\r\n    return x / y;\r\n}\r\n```\r\n\r\nOn clang 11.0.1, you get the exact same codegen as `bar`, even down to the same odd behaviors of it sometimes optimizing further depending on the target CPU specified through `-march`. This issue doesn't exist on clang 10.0.1 though, as it optimizes correctly even on the default x86 target. `gcc` doesn't seem to have this issue, as it optimizes the same as the clang 3 instruction version for any target CPU.", "closed_by": {"login": "redzic", "id": 48274562, "node_id": "MDQ6VXNlcjQ4Mjc0NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/48274562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/redzic", "html_url": "https://github.com/redzic", "followers_url": "https://api.github.com/users/redzic/followers", "following_url": "https://api.github.com/users/redzic/following{/other_user}", "gists_url": "https://api.github.com/users/redzic/gists{/gist_id}", "starred_url": "https://api.github.com/users/redzic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/redzic/subscriptions", "organizations_url": "https://api.github.com/users/redzic/orgs", "repos_url": "https://api.github.com/users/redzic/repos", "events_url": "https://api.github.com/users/redzic/events{/privacy}", "received_events_url": "https://api.github.com/users/redzic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84151/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84151/timeline", "performed_via_github_app": null, "state_reason": "completed"}