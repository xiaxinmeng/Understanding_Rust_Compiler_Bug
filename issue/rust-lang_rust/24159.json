{"url": "https://api.github.com/repos/rust-lang/rust/issues/24159", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/24159/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/24159/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/24159/events", "html_url": "https://github.com/rust-lang/rust/issues/24159", "id": 66934667, "node_id": "MDU6SXNzdWU2NjkzNDY2Nw==", "number": 24159, "title": "Unrecognized associated type bound on another associated type", "user": {"login": "kvark", "id": 107301, "node_id": "MDQ6VXNlcjEwNzMwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/107301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvark", "html_url": "https://github.com/kvark", "followers_url": "https://api.github.com/users/kvark/followers", "following_url": "https://api.github.com/users/kvark/following{/other_user}", "gists_url": "https://api.github.com/users/kvark/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvark/subscriptions", "organizations_url": "https://api.github.com/users/kvark/orgs", "repos_url": "https://api.github.com/users/kvark/repos", "events_url": "https://api.github.com/users/kvark/events{/privacy}", "received_events_url": "https://api.github.com/users/kvark/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2015-04-07T16:43:28Z", "updated_at": "2021-02-03T03:03:09Z", "closed_at": "2021-02-03T03:03:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "``` rust\r\ntrait Bar<T> { fn dummy(&self); }\r\ntrait Car<T> { fn dummy(&self); }\r\n\r\ntrait Foo {\r\n    type A;\r\n    type B: Bar<Self::A>;\r\n    type C: Car<Self::A>;\r\n\r\n    fn get_b(&self) -> &Self::B;\r\n}\r\n\r\nfn test_bar<A, B: Bar<A>>(_: &B) {}\r\n\r\nfn test<A, F: Foo<A=A>>(f: &F) {\r\n    test_bar(f.get_b());\r\n}\r\n```\r\n\r\nGives me:\r\n\r\n```\r\n<anon>:15:16: 15:23 error: the trait `Bar<A>` is not implemented for the type `<F as Foo>::B` [E0277]\r\n<anon>:15     test_bar(f.get_b());\r\n                         ^~~~~~~\r\n<anon>:15:16: 15:23 error: the trait `Car<A>` is not implemented for the type `<F as Foo>::C` [E0277]\r\n<anon>:15     test_bar(f.get_b());\r\n                         ^~~~~~~\r\nerror: aborting due to 2 previous errors\r\nplaypen: application terminated with error code 101\r\n```\r\n\r\nThere is a workaround:\r\n\r\n``` rust\r\nfn test<A, B: Bar<A>, C: Car<A>, F: Foo<A=A, B=B, C=C>>(f: &F) {\r\n    test_bar(f.get_b());\r\n}\r\n```\r\n\r\nBut it's ugly and should not be necessary.\r\n\r\nWe hit this problem a lot with [gfx::Device](https://github.com/gfx-rs/gfx-rs/blob/68298c260b8d420c9c1cfc8657c87462a84476a6/src/device/mod.rs#L233), and I'd like to see cleaner use of it without explicit `CommandBuffer` bounds that we use as a [workaround](https://github.com/PistonDevelopers/gfx-debug-draw/blob/58e6d6206a0632492723566ce018ce5a85536c35/src/text_renderer.rs#L246).\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/24159/reactions", "total_count": 8, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/24159/timeline", "performed_via_github_app": null, "state_reason": "completed"}