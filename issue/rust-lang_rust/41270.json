{"url": "https://api.github.com/repos/rust-lang/rust/issues/41270", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41270/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41270/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41270/events", "html_url": "https://github.com/rust-lang/rust/issues/41270", "id": 221547840, "node_id": "MDU6SXNzdWUyMjE1NDc4NDA=", "number": 41270, "title": "Should PartialOrd and Ord impls be equivalent?", "user": {"login": "frankmcsherry", "id": 5741500, "node_id": "MDQ6VXNlcjU3NDE1MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/5741500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frankmcsherry", "html_url": "https://github.com/frankmcsherry", "followers_url": "https://api.github.com/users/frankmcsherry/followers", "following_url": "https://api.github.com/users/frankmcsherry/following{/other_user}", "gists_url": "https://api.github.com/users/frankmcsherry/gists{/gist_id}", "starred_url": "https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frankmcsherry/subscriptions", "organizations_url": "https://api.github.com/users/frankmcsherry/orgs", "repos_url": "https://api.github.com/users/frankmcsherry/repos", "events_url": "https://api.github.com/users/frankmcsherry/events{/privacy}", "received_events_url": "https://api.github.com/users/frankmcsherry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 262252628, "node_id": "MDU6TGFiZWwyNjIyNTI2Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta", "name": "regression-from-stable-to-beta", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to beta."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2017-04-13T12:24:40Z", "updated_at": "2017-05-28T12:01:19Z", "closed_at": "2017-05-28T12:01:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Nightly introduces a change that alters the behavior of sorting, by using the `PartialOrd` methods `lt`, `le` and such, rather than `Ord`s `cmp` method. \r\n\r\nThis has implications for me, on account of I am a weirdo with types that implement both `PartialOrd` and `Ord`, with the property that `Ord` is a **strict** refinement of `PartialOrd`. That is, whenever `partial_cmp` returns a non-`None` value then `cmp` returns the same value, but there are incomparable elements of the partial order that are ordered by `Ord`. This sounds like a mess, but is important for doing things like efficient deduplication (via `sort(), dedup()`). For example, I have pairs of integers that are partially ordered (via product order), and I need to be able to deduplicate them. \r\n\r\nI think this is a \"breaking change\" in that code that previously did one thing now does another thing. It may be that it is intended, and that all implementations of `PartialOrd` not equivalent to their `Ord` implementation were in error and get no love, but (i) it would be great to have someone actually state that, and (ii) the `PartialOrd` docs could use some sprucing up (they currently say that `PartialOrd` is for defining sort orders, which is ...).\r\n\r\nI can fix all of my code, by moving all the `PartialOrd` functionality into the `Lattice` trait I already have, but I don't see why an `Ord` implementation should imply a total `PartialOrd` implementation (you should add a default implementation of `cmp` that unwraps `partial_cmp` in that case).\r\n\r\n**Edit** bluss pointed me at https://github.com/rust-lang/rust/issues/12517 which discusses the naming and stuff, but I couldn't see that the discussion came to a conclusion on whether `PartialOrd` must be equivalent to `Ord` when it exists.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41270/timeline", "performed_via_github_app": null, "state_reason": "completed"}