{"url": "https://api.github.com/repos/rust-lang/rust/issues/90969", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90969/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90969/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90969/events", "html_url": "https://github.com/rust-lang/rust/issues/90969", "id": 1055588477, "node_id": "I_kwDOAAsO6M4-6wB9", "number": 90969, "title": "Weird codegen (missed optimization) with str::strip_suffix", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-11-17T00:51:34Z", "updated_at": "2023-04-05T17:34:39Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following rust code:\r\n\r\n```rust\r\npub fn strip_lf(s: &str) -> &str {\r\n    s.strip_suffix('\\n').unwrap_or(s)\r\n}\r\n```\r\n\r\ncompiles to the following (courtesy of godbolt):\r\n```asm\r\nexample::strip_lf:\r\n        mov     rax, rdi\r\n        test    rsi, rsi\r\n        je      .LBB0_1\r\n        lea     rdx, [rsi - 1]\r\n        xor     ecx, ecx\r\n        cmp     byte ptr [rax + rsi - 1], 10\r\n        cmove   rcx, rax\r\n        jmp     .LBB0_3\r\n.LBB0_1:\r\n        xor     ecx, ecx\r\n.LBB0_3:\r\n        test    rcx, rcx\r\n        cmovne  rax, rcx\r\n        cmove   rdx, rsi\r\n        ret\r\n```\r\n\r\nThe code path \"string is empty\" is ridiculous:\r\n```asm\r\n        mov     rax, rdi    // set rax (returned pointer) to the value of rdi (pointer to the string)\r\n        // skip the test + jump\r\n        xor     ecx, ecx    // sets rcx to 0 (ops on e* regs zero-extends into r* regs)\r\n        test    rcx, rcx    // if rcx == 0\r\n        cmovne  rax, rcx    // don't do this\r\n        cmove   rdx, rsi    // set rdx (returned length) to the value of rsi (original length, which was 0).\r\n        ret\r\n```\r\n\r\nTechnically, all that code path needs to do is:\r\n```asm\r\n        mov     rax, rdi    // set rax (returned pointer) to the value of rdi (pointer to the string)\r\n        xor     edx, edx    // set rdx (returned length) to 0\r\n        ret\r\n```\r\n\r\nNow, let's look at the \"string is not empty\" code path, it's better, but not great either:\r\n```asm\r\n        mov     rax, rdi       // set rax (returned pointer) to the value of rdi (pointer to the string)\r\n        // skip the test + jump\r\n        lea     rdx, [rsi - 1] // set rdx to the length of the string - 1\r\n        xor     ecx, ecx       // set rcx to 0\r\n        cmp     byte ptr [rax + rsi - 1], 10  // compare the last byte with '\\n'\r\n        cmove   rcx, rax       // set rcx to the value of rax (pointer to the string) if it matched\r\n        // skip the jump\r\n        test    rcx, rcx       // if rcx != 0\r\n        cmovne  rax, rcx       // then set rax (returned pointer) to rcx, which was set to rax, which was already the same value\r\n        cmove   rdx, rsi       // else set rdx (returned length) to the value of rsi (original length)\r\n        ret\r\n```\r\nIt's pointlessly setting rax to the value it already had.\r\n\r\nCompare with the manual equivalent:\r\n```rust\r\npub fn strip_lf2(s: &str) -> &str {\r\n    let l = s.len();\r\n    if l > 0 && s.as_bytes()[l - 1] == b'\\n' {\r\n        &s[..l-1]\r\n    } else {\r\n        s\r\n    }\r\n}\r\n```\r\n\r\n... which compiles to:\r\n```asm\r\nexample::strip_lf2:\r\n        mov     rax, rdi\r\n        test    rsi, rsi\r\n        je      .LBB1_1\r\n        lea     rdx, [rsi - 1]\r\n        cmp     byte ptr [rax + rsi - 1], 10\r\n        cmovne  rdx, rsi\r\n        ret\r\n.LBB1_1:\r\n        xor     edx, edx\r\n        ret\r\n```\r\n\r\nWhich is simpler and more straightforward: the code path for \"string is empty\" is the ideal minimum, and the code path for \"string is not empty\" looks like:\r\n```asm\r\n        mov     rax, rdi       // set rax (returned pointer) to the value of rdi (pointer to the string)\r\n        // skip the test + jump\r\n        lea     rdx, [rsi - 1] // set rdx (returned length) to the length of the string - 1\r\n        cmp     byte ptr [rax + rsi - 1], 10  // compare the last byte with '\\n'\r\n        cmovne  rdx, rsi       // if that doesn't match, set rdx (returned length) to the value of rsi (original length)\r\n        ret\r\n```\r\n\r\nIdeally, the strip_suffix version should be able to compile to that.\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.56.0 (09c42c458 2021-10-18)\r\nbinary: rustc\r\ncommit-hash: 09c42c45858d5f3aedfa670698275303a3d19afa\r\ncommit-date: 2021-10-18\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.56.0\r\nLLVM version: 13.0.0\r\n```\r\n\r\ngodbolt says this also happens on nightly.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90969/timeline", "performed_via_github_app": null, "state_reason": null}