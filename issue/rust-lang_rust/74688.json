{"url": "https://api.github.com/repos/rust-lang/rust/issues/74688", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74688/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74688/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74688/events", "html_url": "https://github.com/rust-lang/rust/issues/74688", "id": 664620235, "node_id": "MDU6SXNzdWU2NjQ2MjAyMzU=", "number": 74688, "title": "Missed optimization: loop with increasing index doesn't elide bounds check", "user": {"login": "paolobarbolini", "id": 6215781, "node_id": "MDQ6VXNlcjYyMTU3ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6215781?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paolobarbolini", "html_url": "https://github.com/paolobarbolini", "followers_url": "https://api.github.com/users/paolobarbolini/followers", "following_url": "https://api.github.com/users/paolobarbolini/following{/other_user}", "gists_url": "https://api.github.com/users/paolobarbolini/gists{/gist_id}", "starred_url": "https://api.github.com/users/paolobarbolini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paolobarbolini/subscriptions", "organizations_url": "https://api.github.com/users/paolobarbolini/orgs", "repos_url": "https://api.github.com/users/paolobarbolini/repos", "events_url": "https://api.github.com/users/paolobarbolini/events{/privacy}", "received_events_url": "https://api.github.com/users/paolobarbolini/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-23T16:41:30Z", "updated_at": "2020-08-14T21:50:36Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code and many variations of it and I found out this doesn't elide the bounds check on `&buf[i..]`.\r\n\r\n```rust\r\npub fn problematic(buf: &[u8]) -> &[u8] {\r\n    let mut i = 0;\r\n    for b in buf {\r\n        if *b == 0x00 {\r\n            return &buf[i..];\r\n        }\r\n\r\n        i += 1;\r\n    }\r\n\r\n    &[]\r\n}\r\n```\r\n\r\n<details>\r\n<summary>Assembly Output</summary>\r\n\r\n```assembly\r\nexample::problematic:\r\n        pushq   %rax\r\n        leaq    .L__unnamed_1(%rip), %rax\r\n        xorl    %edx, %edx\r\n        testq   %rsi, %rsi\r\n        je      .LBB0_6\r\n        xorl    %ecx, %ecx\r\n.LBB0_2:\r\n        cmpb    $0, (%rdi,%rcx)\r\n        je      .LBB0_4\r\n        addq    $1, %rcx\r\n        cmpq    %rcx, %rsi\r\n        jne     .LBB0_2\r\n.LBB0_6:\r\n        popq    %rcx\r\n        retq\r\n.LBB0_4:\r\n        cmpq    %rsi, %rcx\r\n        ja      .LBB0_7\r\n        subq    %rcx, %rsi\r\n        addq    %rcx, %rdi\r\n        movq    %rsi, %rdx\r\n        movq    %rdi, %rax\r\n        popq    %rcx\r\n        retq\r\n.LBB0_7:\r\n        leaq    .L__unnamed_2(%rip), %rdx\r\n        movq    %rcx, %rdi\r\n        callq   *core::slice::slice_index_order_fail@GOTPCREL(%rip)\r\n        ud2\r\n\r\n.L__unnamed_3:\r\n        .ascii  \"./example.rs\"\r\n\r\n.L__unnamed_2:\r\n        .quad   .L__unnamed_3\r\n        .asciz  \"\\f\\000\\000\\000\\000\\000\\000\\000\\005\\000\\000\\000\\025\\000\\000\"\r\n\r\n.L__unnamed_1:\r\n```\r\n</details>\r\n\r\n---\r\n\r\nManually checking that `i` is ok elides the bounds check and ends up being optimized away!?\r\n\r\n```rust\r\npub fn optimized(buf: &[u8]) -> &[u8] {\r\n    let mut i = 0;\r\n    for b in buf {\r\n        // this gets optimized away?\r\n        if i >= buf.len() { break; }\r\n\r\n        if *b == 0x00 {\r\n            return &buf[i..];\r\n        }\r\n\r\n        i += 1;\r\n    }\r\n\r\n    &[]\r\n}\r\n```\r\n\r\n<details>\r\n<summary>Assembly Output</summary>\r\n\r\n```assembly\r\nexample::optimized:\r\n        leaq    .L__unnamed_1(%rip), %rax\r\n        testq   %rsi, %rsi\r\n        je      .LBB0_5\r\n        movq    %rsi, %rdx\r\n.LBB0_2:\r\n        cmpb    $0, (%rdi)\r\n        je      .LBB0_3\r\n        addq    $1, %rdi\r\n        addq    $-1, %rdx\r\n        jne     .LBB0_2\r\n.LBB0_5:\r\n        xorl    %edx, %edx\r\n        retq\r\n.LBB0_3:\r\n        movq    %rdi, %rax\r\n        retq\r\n\r\n.L__unnamed_1:\r\n```\r\n</details>\r\n\r\n---\r\n\r\nThis third example generates the same assembly as the second one, so I think it's really optimizing away the manual check on the second example?\r\n\r\n```rust\r\npub fn optimized_unsafe(buf: &[u8]) -> &[u8] {\r\n    let mut i = 0;\r\n    for b in buf {\r\n        if *b == 0x00 {\r\n            return unsafe { buf.get_unchecked(i..) };\r\n        }\r\n\r\n        i += 1;\r\n    }\r\n\r\n    &[]\r\n}\r\n```\r\n\r\n<details>\r\n<summary>Assembly Output</summary>\r\n\r\n```assembly\r\nexample::optimized_unsafe:\r\n        leaq    .L__unnamed_1(%rip), %rax\r\n        testq   %rsi, %rsi\r\n        je      .LBB0_5\r\n        movq    %rsi, %rdx\r\n.LBB0_2:\r\n        cmpb    $0, (%rdi)\r\n        je      .LBB0_3\r\n        addq    $1, %rdi\r\n        addq    $-1, %rdx\r\n        jne     .LBB0_2\r\n.LBB0_5:\r\n        xorl    %edx, %edx\r\n        retq\r\n.LBB0_3:\r\n        movq    %rdi, %rax\r\n        retq\r\n\r\n.L__unnamed_1:\r\n```\r\n</details>\r\n\r\n---\r\n\r\nPossibly related: #74186", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74688/timeline", "performed_via_github_app": null, "state_reason": null}