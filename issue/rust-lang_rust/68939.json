{"url": "https://api.github.com/repos/rust-lang/rust/issues/68939", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68939/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68939/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68939/events", "html_url": "https://github.com/rust-lang/rust/issues/68939", "id": 561936401, "node_id": "MDU6SXNzdWU1NjE5MzY0MDE=", "number": 68939, "title": "Possible race condition occuring with interaction between std and glibc pthreads", "user": {"login": "xacrimon", "id": 21025159, "node_id": "MDQ6VXNlcjIxMDI1MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/21025159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xacrimon", "html_url": "https://github.com/xacrimon", "followers_url": "https://api.github.com/users/xacrimon/followers", "following_url": "https://api.github.com/users/xacrimon/following{/other_user}", "gists_url": "https://api.github.com/users/xacrimon/gists{/gist_id}", "starred_url": "https://api.github.com/users/xacrimon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xacrimon/subscriptions", "organizations_url": "https://api.github.com/users/xacrimon/orgs", "repos_url": "https://api.github.com/users/xacrimon/repos", "events_url": "https://api.github.com/users/xacrimon/events{/privacy}", "received_events_url": "https://api.github.com/users/xacrimon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630870359, "node_id": "MDU6TGFiZWw2MzA4NzAzNTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-sanitizers", "name": "A-sanitizers", "color": "f7e101", "default": false, "description": "Area: Sanitizers for correctness and code quality."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-08T00:20:45Z", "updated_at": "2020-02-08T10:09:47Z", "closed_at": "2020-02-08T10:09:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\nhttps://github.com/xacrimon/dashmap/tree/617a87496f3b66dc4ede971d6198623c7a80ad16\r\n\r\nWith the command: `RUSTFLAGS=\"-Z sanitizer=thread\" cargo +nightly test -- --nocapture`\r\n\r\nI expected to see this happen: TSAN would detect bugs in my code and not scream at std.\r\n\r\nInstead, this happened: TSAN started screaming hard at std and pthreads.\r\n\r\n### Meta\r\nI am using latest nighly as of reporting.\r\n\r\nFull TSAN output:\r\n```==================\r\nWARNING: ThreadSanitizer: data race (pid=105905)\r\n  Write of size 8 at 0x7b0c00000030 by main thread:\r\n    #0 pthread_cond_destroy /checkout/src/llvm-project/compiler-rt/lib/tsan/rtl/tsan_interceptors.cc:1213 (simple-2871e197478f2fbd+0x1d175)\r\n    #1 std::sys::unix::condvar::Condvar::destroy /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e//src/libstd/sys/unix/condvar.rs:164 (simple-2871e197478f2fbd+0x10933a)\r\n    #2 std::sys_common::condvar::Condvar::destroy /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e//src/libstd/sys_common/condvar.rs:70 (simple-2871e197478f2fbd+0x10933a)\r\n    #3 <std::sync::condvar::Condvar as core::ops::drop::Drop>::drop /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e//src/libstd/sync/condvar.rs:601 (simple-2871e197478f2fbd+0x10933a)\r\n    #4 core::ptr::drop_in_place /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e/src/libcore/ptr/mod.rs:174 (simple-2871e197478f2fbd+0x10933a)\r\n    #5 core::ptr::drop_in_place /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e/src/libcore/ptr/mod.rs:174 (simple-2871e197478f2fbd+0x10933a)\r\n    #6 alloc::sync::Arc<T>::drop_slow /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e/src/liballoc/sync.rs:739 (simple-2871e197478f2fbd+0x10933a)\r\n\r\n  Previous read of size 8 at 0x7b0c00000030 by thread T1:\r\n    #0 pthread_cond_signal /checkout/src/llvm-project/compiler-rt/lib/tsan/rtl/tsan_interceptors.cc:1199 (simple-2871e197478f2fbd+0x1ce52)\r\n    #1 std::sync::mpsc::blocking::SignalToken::signal /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e//src/libstd/sync/mpsc/blocking.rs:41 (simple-2871e197478f2fbd+0x111824)\r\n\r\n  Location is heap block of size 48 at 0x7b0c00000030 allocated by main thread:\r\n    #0 malloc /checkout/src/llvm-project/compiler-rt/lib/tsan/rtl/tsan_interceptors.cc:650 (simple-2871e197478f2fbd+0x1a6f4)\r\n    #1 alloc::alloc::alloc /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e/src/liballoc/alloc.rs:81 (simple-2871e197478f2fbd+0x10aaf1)\r\n    #2 alloc::alloc::exchange_malloc /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e/src/liballoc/alloc.rs:203 (simple-2871e197478f2fbd+0x10aaf1)\r\n    #3 std::sync::condvar::Condvar::new /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e//src/libstd/sync/condvar.rs:130 (simple-2871e197478f2fbd+0x10aaf1)\r\n    #4 std::thread::Thread::new /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e//src/libstd/thread/mod.rs:1146 (simple-2871e197478f2fbd+0x10aaf1)\r\n    #5 main ??:? (simple-2871e197478f2fbd+0x94f6a)\r\n\r\n  Thread T1 'insert_once' (tid=105907, finished) created by main thread at:\r\n    #0 pthread_create /checkout/src/llvm-project/compiler-rt/lib/tsan/rtl/tsan_interceptors.cc:967 (simple-2871e197478f2fbd+0x1bc9b)\r\n    #1 std::sys::unix::thread::Thread::new /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e//src/libstd/sys/unix/thread.rs:68 (simple-2871e197478f2fbd+0x11baad)\r\n    #2 std::rt::lang_start::{{closure}} /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e/src/libstd/rt.rs:67 (simple-2871e197478f2fbd+0xa119b)\r\n    #3 std::rt::lang_start_internal::{{closure}} /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e//src/libstd/rt.rs:52 (simple-2871e197478f2fbd+0x115162)\r\n    #4 std::panicking::try::do_call /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e//src/libstd/panicking.rs:303 (simple-2871e197478f2fbd+0x115162)\r\n    #5 main ??:? (simple-2871e197478f2fbd+0x94f6a)\r\n\r\nSUMMARY: ThreadSanitizer: data race /rustc/58b834344fc7b9185e7a50db1ff24e5eb07dae5e//src/libstd/sys/unix/condvar.rs:164 in std::sys::unix::condvar::Condvar::destroy\r\n==================```\r\n", "closed_by": {"login": "xacrimon", "id": 21025159, "node_id": "MDQ6VXNlcjIxMDI1MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/21025159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xacrimon", "html_url": "https://github.com/xacrimon", "followers_url": "https://api.github.com/users/xacrimon/followers", "following_url": "https://api.github.com/users/xacrimon/following{/other_user}", "gists_url": "https://api.github.com/users/xacrimon/gists{/gist_id}", "starred_url": "https://api.github.com/users/xacrimon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xacrimon/subscriptions", "organizations_url": "https://api.github.com/users/xacrimon/orgs", "repos_url": "https://api.github.com/users/xacrimon/repos", "events_url": "https://api.github.com/users/xacrimon/events{/privacy}", "received_events_url": "https://api.github.com/users/xacrimon/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68939/timeline", "performed_via_github_app": null, "state_reason": "completed"}