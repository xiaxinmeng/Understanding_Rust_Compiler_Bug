{"url": "https://api.github.com/repos/rust-lang/rust/issues/29257", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29257/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29257/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29257/events", "html_url": "https://github.com/rust-lang/rust/issues/29257", "id": 113081665, "node_id": "MDU6SXNzdWUxMTMwODE2NjU=", "number": 29257, "title": "Should warn when safe functions dereference raw pointer arguments", "user": {"login": "rillian", "id": 225102, "node_id": "MDQ6VXNlcjIyNTEwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/225102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rillian", "html_url": "https://github.com/rillian", "followers_url": "https://api.github.com/users/rillian/followers", "following_url": "https://api.github.com/users/rillian/following{/other_user}", "gists_url": "https://api.github.com/users/rillian/gists{/gist_id}", "starred_url": "https://api.github.com/users/rillian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rillian/subscriptions", "organizations_url": "https://api.github.com/users/rillian/orgs", "repos_url": "https://api.github.com/users/rillian/repos", "events_url": "https://api.github.com/users/rillian/events{/privacy}", "received_events_url": "https://api.github.com/users/rillian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2015-10-23T19:07:15Z", "updated_at": "2016-02-11T20:06:01Z", "closed_at": "2016-02-11T20:06:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Not sure if this should be an RFC, but I think a warning would work if the present behaviour is as desired.\n\nI'm working on C interface code. People have told me, 'Everything `extern \"C\"` should be unsafe.' I presume this is because C apis inevitably involve raw pointers. But that's not quite true. Otherwise the compiler would require it.\n\nConsider these two cases:\n\n``` rust\nfn foo(p: *const u8) {\n  println!(\"ptr {:?}\", p);\n}\n\nfn bar(p: *const u8) {\n  match p.is_null() {\n    true => println!(\"null ptr {:?}\", p),\n    false => unsafe { println!(\"non-null ptr {:?}: {:?}\", p, *p) },\n  }\n}\n```\n\nhttps://play.rust-lang.org/?gist=90a9dc04959cb831751b&version=stable\n\n`foo` is safe, because it never dereferences the pointer, and this can be a useful part of the interface, so we have a counterexample of a function taking a raw pointer which doesn't need to be declared unsafe.\n\n`bar` might _look_ safe, but it's not. It will behave as indended for valid pointers, like you'd get from `slice::as_ptr`. It will also safely handle null pointers like you might get from a C api. But it's perfectly possible to pass an _invalid_ pointer, crashing or (worse) yielding garbage. For example, `bar(1 as *const u8)` in the play example above.\n\nSo `bar` **should** be declared unsafe, but the compiler lets me declare it safe instead. Which means people will get this wrong (as I did) and random library code will have rare crashes. This is not the promise of rust.\n\nA warning would address the possibility of programmer error here, assuming I'm correct in what the unsafe keyword means in this context. Functions which are declared safe, but take raw pointer arguments, should warn if they dereference that pointer. There needs to be something to tie the interior unsafe block to the function signature.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29257/timeline", "performed_via_github_app": null, "state_reason": "completed"}