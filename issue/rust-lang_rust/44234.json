{"url": "https://api.github.com/repos/rust-lang/rust/issues/44234", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44234/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44234/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44234/events", "html_url": "https://github.com/rust-lang/rust/issues/44234", "id": 254507690, "node_id": "MDU6SXNzdWUyNTQ1MDc2OTA=", "number": 44234, "title": "incremental: Initial \"always dirty\" queries", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-09-01T00:53:44Z", "updated_at": "2017-12-06T13:33:19Z", "closed_at": "2017-12-06T13:33:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In working on https://github.com/rust-lang/rust/pull/44142 I've come across the need/desire a few times to have \"always dirty\" nodes that are always recomputed at the base of the dependency graph. One example of this is handling today's `extern_mod_stmt_cnum` method.\r\n\r\nToday there's a method `CrateStore::extern_mod_stmt_cnum`, but as part of https://github.com/rust-lang/rust/issues/41417 we want to move this to a query. That's relatively simple but what's actually happening here I think is a bit more subtle in terms of dependencies. This query will take the ID of an `extern crate` statement and return the `CrateNum` that it loaded. This happens very early in the compiler when we're loading crates and it's basically \"however `CrateStore` is implemented picks these numbers\". \r\n\r\nRight now, on my currently unmerged branch, the implementation looks like this:\r\n\r\n```rust\r\n        extern_mod_stmt_cnum: |tcx, id| {\r\n            let id = tcx.hir.definitions().find_node_for_hir_id(id);\r\n            tcx.sess.cstore.extern_mod_stmt_cnum_untracked(id)\r\n        },\r\n```\r\n\r\nSo in other words this is just defining a query that doesn't actually have any dependencies! The `extern_mod_stmt_cnum_untracked` method just reaches into the internals of `CStore` and plucks a `CrateNum` seemingly out of thin air, returning it.\r\n\r\nIdeally I think what we'll want here is a way of saying that queries like this need to be computed 100% of the time to determine if they're red or green. Typically they'll instantly turn green again which'll allow us to have lots of cache hits, but I'm worried about assumign they're always green because they have no inputs.\r\n\r\nI believe this is a similar-ish issue to many of the maps in https://github.com/rust-lang/rust/issues/44137 as well. For all the maps calculated in resolve then then hidden behind a query in `TyCtxt` those nodes don't actually have any dependencies, they're just reading internal tables. We should always rerun the query though to ensure that it is properly tracked!\r\n\r\ncc @nikomatsakis, @michaelwoerister ", "closed_by": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44234/timeline", "performed_via_github_app": null, "state_reason": "completed"}