{"url": "https://api.github.com/repos/rust-lang/rust/issues/68064", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68064/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68064/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68064/events", "html_url": "https://github.com/rust-lang/rust/issues/68064", "id": 547634123, "node_id": "MDU6SXNzdWU1NDc2MzQxMjM=", "number": 68064, "title": "Type inference can't resolve type of output of `dyn Future` inside of `impl Fn` inside of Vec", "user": {"login": "olegnn", "id": 6822848, "node_id": "MDQ6VXNlcjY4MjI4NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/6822848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olegnn", "html_url": "https://github.com/olegnn", "followers_url": "https://api.github.com/users/olegnn/followers", "following_url": "https://api.github.com/users/olegnn/following{/other_user}", "gists_url": "https://api.github.com/users/olegnn/gists{/gist_id}", "starred_url": "https://api.github.com/users/olegnn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olegnn/subscriptions", "organizations_url": "https://api.github.com/users/olegnn/orgs", "repos_url": "https://api.github.com/users/olegnn/repos", "events_url": "https://api.github.com/users/olegnn/events{/privacy}", "received_events_url": "https://api.github.com/users/olegnn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-09T18:02:16Z", "updated_at": "2023-03-26T08:46:24Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This code ([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=2fb9d4046178e9fd1d5f61c2ec80b034))\r\n```rust\r\nfn get_closure_vec(length: usize) -> Vec<impl Fn() -> Box<dyn std::future::Future<Output = usize>>> {\r\n    vec![|| Box::new(async { 5 }) as Box<_>; length]\r\n}\r\n```\r\ngives error\r\n```\r\nerror[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == usize`\r\n --> src/lib.rs:2:13\r\n  |\r\n2 |     vec![|| Box::new(async { 5 }) as Box<_>; width]\r\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected usize, found i32\r\n  |\r\n  = note: required for the cast to the object type `dyn std::future::Future<Output = usize>`\r\n```\r\nand this code ([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=990b46471a01fa442ea6106ca6853be8))\r\n```rust\r\nfn get_closure_vec(length: usize) -> Vec<impl Fn() -> Box<dyn std::future::Future<Output = usize>>> {\r\n    vec![|| Box::new(async { 5 }); length]\r\n}\r\n```\r\nalso gives error\r\n```\r\nerror[E0271]: type mismatch resolving `<[closure@src/lib.rs:2:10: 2:39] as std::ops::FnOnce<()>>::Output == std::boxed::Box<(dyn std::future::Future<Output = usize> + 'static)>`\r\n --> src/lib.rs:1:41\r\n  |\r\n1 | fn get_closure_vec(width: usize) -> Vec<impl Fn() -> Box<dyn std::future::Future<Output = usize>>> {\r\n  |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found trait std::future::Future\r\n  |\r\n  = note: expected type `std::boxed::Box<impl std::future::Future>`\r\n             found type `std::boxed::Box<(dyn std::future::Future<Output = usize> + 'static)>`\r\n  = note: the return type of a function must have a statically known size\r\n```\r\n\r\nwhile this one works fine ([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=6815a4f55394544fd78a18b446099d89))\r\n```rust\r\nfn get_closure() -> impl Fn() -> Box<dyn std::future::Future<Output = usize>> {\r\n    || Box::new(async { 5 })\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68064/timeline", "performed_via_github_app": null, "state_reason": null}