{"url": "https://api.github.com/repos/rust-lang/rust/issues/72939", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72939/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72939/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72939/events", "html_url": "https://github.com/rust-lang/rust/issues/72939", "id": 629854466, "node_id": "MDU6SXNzdWU2Mjk4NTQ0NjY=", "number": 72939, "title": "ffi-safe lint should be more aggressive in checking ffi stability of sub-types", "user": {"login": "fschutt", "id": 12084016, "node_id": "MDQ6VXNlcjEyMDg0MDE2", "avatar_url": "https://avatars.githubusercontent.com/u/12084016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fschutt", "html_url": "https://github.com/fschutt", "followers_url": "https://api.github.com/users/fschutt/followers", "following_url": "https://api.github.com/users/fschutt/following{/other_user}", "gists_url": "https://api.github.com/users/fschutt/gists{/gist_id}", "starred_url": "https://api.github.com/users/fschutt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fschutt/subscriptions", "organizations_url": "https://api.github.com/users/fschutt/orgs", "repos_url": "https://api.github.com/users/fschutt/repos", "events_url": "https://api.github.com/users/fschutt/events{/privacy}", "received_events_url": "https://api.github.com/users/fschutt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-03T09:47:24Z", "updated_at": "2020-06-03T09:50:13Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "According to [this answer](https://internals.rust-lang.org/t/question-about-c-abi-stability/12449/4?u=sharazam), this code:\r\n\r\n```rust\r\npub struct A { a: usize, b: usize }\r\n\r\n#[repr(C)] \r\npub struct B { \r\n    a: A \r\n}\r\n```\r\n\r\n... should emit a warning that `struct A` is still `#[repr(Rust)]`, so the layout of `B` isn't completely defined, specifically the order of the fields `a` and `b` are not specified in `#[repr(Rust)]`. I'm not sure if the `ffi-safe` lint is active or not, but it would be very useful, so I know that if a type is marked `#[repr(C)]`, all sub-types are also marked `#[repr(C)]`.\r\n\r\nAnother question: When compiling to a `cdylib`, why does cargo use `#[repr(Rust)]` for publicly visible structs of a crate. It would be nice if, when compiling to a `cdylib` with this code:\r\n\r\n```rust\r\npub fn foo(b: B) -> A { b.a }\r\n```\r\n\r\n... there could be automatic warnings:\r\n\r\n- `foo` is a public function, should be marked as `#[no_mangle]`\r\n- `B` and `A` should be marked as `#[repr(C)]`\r\n\r\n... because the only representation that you usually want when compiling to a `cdylib` is `#[repr(C)]` (or `#[repr(C, u8)]` for enums).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72939/timeline", "performed_via_github_app": null, "state_reason": null}