{"url": "https://api.github.com/repos/rust-lang/rust/issues/80406", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80406/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80406/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80406/events", "html_url": "https://github.com/rust-lang/rust/issues/80406", "id": 774990807, "node_id": "MDU6SXNzdWU3NzQ5OTA4MDc=", "number": 80406, "title": "Unfreed (but still reachable) allocations in std::io::stdin are reported by Valgrind if non-default `--show-leak-kinds=all` option is specified", "user": {"login": "boydjohnson", "id": 4340785, "node_id": "MDQ6VXNlcjQzNDA3ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/4340785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boydjohnson", "html_url": "https://github.com/boydjohnson", "followers_url": "https://api.github.com/users/boydjohnson/followers", "following_url": "https://api.github.com/users/boydjohnson/following{/other_user}", "gists_url": "https://api.github.com/users/boydjohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/boydjohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boydjohnson/subscriptions", "organizations_url": "https://api.github.com/users/boydjohnson/orgs", "repos_url": "https://api.github.com/users/boydjohnson/repos", "events_url": "https://api.github.com/users/boydjohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/boydjohnson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 289259951, "node_id": "MDU6TGFiZWwyODkyNTk5NTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-help-wanted", "name": "E-help-wanted", "color": "02E10C", "default": false, "description": "Call for participation: Help is requested to fix this issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}], "state": "open", "locked": false, "assignee": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2020-12-27T07:17:07Z", "updated_at": "2022-03-30T01:22:26Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "There was a memory leak introduced in between `nightly-2020-09-27` and `nightly-2020-09-28`.\r\n\r\nIf you build this code with two different toolchains one will have a memory leak and the other not.\r\n\r\n```\r\nuse std::io::stdin;\r\nuse std::io::Read;\r\n\r\nfn main() {\r\n    let mut buf = vec![];\r\n\r\n    if let Err(e) = stdin().read(&mut buf) {\r\n        println!(\"{}\", e)\r\n    }\r\n}\r\n```\r\nthis code built with nightly-2020-09-28\r\n\r\nvalgrind output\r\n\r\n```\r\n==11076== HEAP SUMMARY:\r\n==11076==     in use at exit: 8,232 bytes in 2 blocks\r\n==11076==   total heap usage: 13 allocs, 11 frees, 10,409 bytes allocated\r\n```\r\nwhile this code built with nightly-2020-09-27:\r\n\r\nvalgrind output\r\n```\r\n==11601== HEAP SUMMARY:\r\n==11601==     in use at exit: 0 bytes in 0 blocks\r\n==11601==   total heap usage: 18 allocs, 18 frees, 10,577 bytes allocated\r\n\r\n```\r\nvalgrind --leak-check=full --show-leak-kinds=all\r\n```\r\n==11920== HEAP SUMMARY:\r\n==11920==     in use at exit: 8,232 bytes in 2 blocks\r\n==11920==   total heap usage: 13 allocs, 11 frees, 10,409 bytes allocated\r\n==11920== \r\n==11920== 40 bytes in 1 blocks are still reachable in loss record 1 of 2\r\n==11920==    at 0x4C31B0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==11920==    by 0x120934: alloc (alloc.rs:74)\r\n==11920==    by 0x120934: alloc_impl (alloc.rs:153)\r\n==11920==    by 0x120934: alloc (alloc.rs:212)\r\n==11920==    by 0x120934: exchange_malloc (alloc.rs:302)\r\n==11920==    by 0x120934: new<std::io::buffered::BufReader<std::io::stdio::StdinRaw>> (mutex.rs:222)\r\n==11920==    by 0x120934: {{closure}} (stdio.rs:299)\r\n==11920==    by 0x120934: {{closure}}<std::sync::mutex::Mutex<std::io::buffered::BufReader<std::io::stdio::StdinRaw>>,closure-0> (lazy.rs:245)\r\n==11920==    by 0x120934: {{closure}}<std::sync::mutex::Mutex<std::io::buffered::BufReader<std::io::stdio::StdinRaw>>,closure-0,!> (lazy.rs:372)\r\n==11920==    by 0x120934: std::sync::once::Once::call_once_force::{{closure}} (once.rs:321)\r\n==11920==    by 0x120F84: std::sync::once::Once::call_inner (once.rs:419)\r\n==11920==    by 0x1211BB: call_once_force<closure-0> (once.rs:321)\r\n==11920==    by 0x1211BB: std::lazy::SyncOnceCell<T>::initialize (lazy.rs:371)\r\n==11920==    by 0x11E2CB: get_or_try_init<std::sync::mutex::Mutex<std::io::buffered::BufReader<std::io::stdio::StdinRaw>>,closure-0,!> (lazy.rs:292)\r\n==11920==    by 0x11E2CB: get_or_init<std::sync::mutex::Mutex<std::io::buffered::BufReader<std::io::stdio::StdinRaw>>,closure-0> (lazy.rs:245)\r\n==11920==    by 0x11E2CB: std::io::stdio::stdin (stdio.rs:298)\r\n==11920==    by 0x10D902: mem_leak::main (main.rs:7)\r\n==11920==    by 0x10DCAA: core::ops::function::FnOnce::call_once (function.rs:227)\r\n==11920==    by 0x10D11D: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:137)\r\n==11920==    by 0x10DBB0: std::rt::lang_start::{{closure}} (rt.rs:66)\r\n==11920==    by 0x123F7F: call_once<(),Fn<()>> (function.rs:259)\r\n==11920==    by 0x123F7F: do_call<&Fn<()>,i32> (panicking.rs:381)\r\n==11920==    by 0x123F7F: try<i32,&Fn<()>> (panicking.rs:345)\r\n==11920==    by 0x123F7F: catch_unwind<&Fn<()>,i32> (panic.rs:382)\r\n==11920==    by 0x123F7F: std::rt::lang_start_internal (rt.rs:51)\r\n==11920==    by 0x10DB86: std::rt::lang_start (rt.rs:65)\r\n==11920==    by 0x10DB39: main (in /home/boydjohnson/mem-leak/target/debug/mem-leak)\r\n==11920== \r\n==11920== 8,192 bytes in 1 blocks are still reachable in loss record 2 of 2\r\n==11920==    at 0x4C31B0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==11920==    by 0x120910: alloc (alloc.rs:74)\r\n==11920==    by 0x120910: alloc_impl (alloc.rs:153)\r\n==11920==    by 0x120910: alloc (alloc.rs:212)\r\n==11920==    by 0x120910: allocate_in<u8,alloc::alloc::Global> (raw_vec.rs:188)\r\n==11920==    by 0x120910: with_capacity_in<u8,alloc::alloc::Global> (raw_vec.rs:163)\r\n==11920==    by 0x120910: with_capacity<u8> (raw_vec.rs:93)\r\n==11920==    by 0x120910: with_capacity<u8> (vec.rs:363)\r\n==11920==    by 0x120910: with_capacity<std::io::stdio::StdinRaw> (buffered.rs:103)\r\n==11920==    by 0x120910: {{closure}} (stdio.rs:299)\r\n==11920==    by 0x120910: {{closure}}<std::sync::mutex::Mutex<std::io::buffered::BufReader<std::io::stdio::StdinRaw>>,closure-0> (lazy.rs:245)\r\n==11920==    by 0x120910: {{closure}}<std::sync::mutex::Mutex<std::io::buffered::BufReader<std::io::stdio::StdinRaw>>,closure-0,!> (lazy.rs:372)\r\n==11920==    by 0x120910: std::sync::once::Once::call_once_force::{{closure}} (once.rs:321)\r\n==11920==    by 0x120F84: std::sync::once::Once::call_inner (once.rs:419)\r\n==11920==    by 0x1211BB: call_once_force<closure-0> (once.rs:321)\r\n==11920==    by 0x1211BB: std::lazy::SyncOnceCell<T>::initialize (lazy.rs:371)\r\n==11920==    by 0x11E2CB: get_or_try_init<std::sync::mutex::Mutex<std::io::buffered::BufReader<std::io::stdio::StdinRaw>>,closure-0,!> (lazy.rs:292)\r\n==11920==    by 0x11E2CB: get_or_init<std::sync::mutex::Mutex<std::io::buffered::BufReader<std::io::stdio::StdinRaw>>,closure-0> (lazy.rs:245)\r\n==11920==    by 0x11E2CB: std::io::stdio::stdin (stdio.rs:298)\r\n==11920==    by 0x10D902: mem_leak::main (main.rs:7)\r\n==11920==    by 0x10DCAA: core::ops::function::FnOnce::call_once (function.rs:227)\r\n==11920==    by 0x10D11D: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:137)\r\n==11920==    by 0x10DBB0: std::rt::lang_start::{{closure}} (rt.rs:66)\r\n==11920==    by 0x123F7F: call_once<(),Fn<()>> (function.rs:259)\r\n==11920==    by 0x123F7F: do_call<&Fn<()>,i32> (panicking.rs:381)\r\n==11920==    by 0x123F7F: try<i32,&Fn<()>> (panicking.rs:345)\r\n==11920==    by 0x123F7F: catch_unwind<&Fn<()>,i32> (panic.rs:382)\r\n==11920==    by 0x123F7F: std::rt::lang_start_internal (rt.rs:51)\r\n==11920==    by 0x10DB86: std::rt::lang_start (rt.rs:65)\r\n==11920==    by 0x10DB39: main (in /home/boydjohnson/mem-leak/target/debug/mem-leak)\r\n==11920== \r\n==11920== LEAK SUMMARY:\r\n==11920==    definitely lost: 0 bytes in 0 blocks\r\n==11920==    indirectly lost: 0 bytes in 0 blocks\r\n==11920==      possibly lost: 0 bytes in 0 blocks\r\n==11920==    still reachable: 8,232 bytes in 2 blocks\r\n==11920==         suppressed: 0 bytes in 0 blocks\r\n```\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80406/timeline", "performed_via_github_app": null, "state_reason": null}