{"url": "https://api.github.com/repos/rust-lang/rust/issues/46205", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46205/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46205/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46205/events", "html_url": "https://github.com/rust-lang/rust/issues/46205", "id": 276387853, "node_id": "MDU6SXNzdWUyNzYzODc4NTM=", "number": 46205, "title": "Tracking issue for `incoherent_fundamental_impls` compatibility lint", "user": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 630636017, "node_id": "MDU6TGFiZWw2MzA2MzYwMTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-future-compatibility", "name": "C-future-compatibility", "color": "f5f1fd", "default": false, "description": "Category: future compatibility lints"}, {"id": 693557542, "node_id": "MDU6TGFiZWw2OTM1NTc1NDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-traits", "name": "WG-traits", "color": "c2e0c6", "default": false, "description": "Working group: Traits, https://internals.rust-lang.org/t/announcing-traits-working-group/6804"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-11-23T14:07:27Z", "updated_at": "2020-02-06T23:54:24Z", "closed_at": "2019-05-18T02:03:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is the **summary issue** for the `incoherent_fundamental_impls`\r\nfuture-compatibility warning and other related errors. The goal of\r\nthis page is describe why this change was made and how you can fix\r\ncode that is affected by it. It also provides a place to ask questions\r\nor register a complaint if you feel the change should not be made. For\r\nmore information on the policy around future-compatibility warnings,\r\nsee our [breaking change policy guidelines][guidelines].\r\n\r\n[guidelines]: https://github.com/rust-lang/rfcs/blob/master/text/1122-language-semver.md\r\n\r\n### What is the warning for?\r\n\r\n#### What is coherence\r\n\r\nRust relies coherence to ensure that for every use of a trait item, there is a single impl that is used to provide it. This is important for general understandability, and also for ensuring soundness in the presence of associated types.\r\n\r\nWhile coherence is a relation between 2 impls of a *single trait*, in more complicated cases, coherence can rely on the non-existence of impls for a *different* trait.\r\n\r\nFor example, in one long-present case in `libstd`, [`std::str::pattern::Pattern`] is implemented for both `char` and all types implementing `FnMut(char) -> bool`, allowing searching strings using [`str::contains`] with both characters (`my_str.contains('a')`) and predicates on characters (`my_str.contains(|c| c.is_uppercase())`).\r\n\r\nHowever, in order to be coherent, that relies on `char` not implementing `FnMut(char) -> bool`! If `char` behaved like a function, it would be not obvious which impl would be used in the case of `my_string.contains('a')`.\r\n\r\nTherefore, when making sure the impls for `Pattern` are coherent, the compiler has to check for impls in `FnMut`.\r\n\r\n#### Dependent Crate Coherence\r\n\r\nCoherence checking is sometimes more subtle. For example, in this *wrong* case, found in the crate `rusqlite`:\r\n\r\n```Rust\r\n// This code is WRONG\r\n\r\npub enum ValueRef<'a> {\r\n    // ...\r\n}\r\npub enum Value {\r\n    // ...\r\n}\r\npub trait ToSqlOutput<'a> {\r\n    // ...\r\n}\r\n\r\nimpl<'a> From<&'a str> for ValueRef<'a> {\r\n    // ...\r\n}\r\n\r\nimpl<'a> From<String> for Value {\r\n    // ...\r\n}\r\n\r\nimpl<'a, T: ?Sized> From<&'a T> for dyn ToSqlOutput<'a>\r\nwhere\r\n    &'a T: Into<ValueRef<'a>>\r\n{\r\n    // ...\r\n}\r\nimpl<'a, T: Into<Value>> From<T> for dyn ToSqlOutput<'a> {\r\n//~^ ERROR conflicting implementations\r\n    // ...\r\n}\r\n```\r\n\r\nThis code would violate coherence if there exists a type `&'a T` where both impls can be used. That would happen if both `&'a T: Into<Value>` and `&'a T: Into<ValueRef<'a>>`.\r\n\r\nWe can see in the code that the only types that are `Into<Value>` are `Value` (using the identity impl for `From`) and `String` (using the explicit impl for `From`), so no reference can be `Into<Value>`, and it would seem that coherence holds.\r\n\r\nIn that case, why is that code wrong? As compiling that crate will tell you, \"downstream crates may implement trait `std::convert::From<&_>` for type `Value`\". Even through there is no impl for `Value` in *this* crate, a *dependent crate* could implement both `From<&MyReference> for Value` and `From<&'a MyReference> for ValueRef<'a>` without breaking the orphan rules, causing a coherence conflict for `From<&'a MyReference> for ToSqlOutput<'a>`.\r\n\r\nWhile all versions of rustc try to catch this sort of trick, older versions had a subtle bug that would miss it in more complicated cases (such as the above) which means that the code that appeared to work in the wild (as long as nobody actually *did* the tricky impls) is now not compiling.\r\n\r\n### How to fix this?\r\n\r\n**Are you seeing the warning in another crate or in your dependencies?** We've made a big effort to ensure that there are newer versions available for crates that avoid this error. Upgrading will likely fix your problem:\r\n\r\n- gtk-rs: upgrade to at least 0.4\r\n- rusqlite: upgrade to at least 0.14\r\n- nalgebra: upgrade to at least 0.15\r\n- spade: upgrade or refresh the Cargo.lock file to use version 1.7\r\n- imageproc: upgrade to at least 0.16\r\n\r\n**If however you are getting the warning for your own code, then read on:** As this warning indicates a deep problem in the way the impls in the crate appear, there is no fix that works in all cases. However, it is often possible to change the impls a bit to get rid of the problem.\r\n\r\nFor example, `rusqlite` changed the second generic impl (the one where `T: Into<Value>`) to instead match all concrete cases:\r\n\r\n```Rust\r\nimpl<'a> From<String> for ToSqlOutput<'a> {\r\n    fn from(t: String) -> Self { /* ... */ }\r\n}\r\n// <other cases>\r\n```\r\n\r\nNow, we already know that `String` isn't `Into<ValueRef<'a>>`, and no dependent crate can add such an impl, as the orphan rule would stop them in their tracks, which means coherence is restored!\r\n\r\n[`std::str::pattern::Pattern`]: https://doc.rust-lang.org/std/str/pattern/trait.Pattern.html\r\n[`str::contains`]: https://doc.rust-lang.org/std/primitive.str.html#method.contains\r\n\r\n### When will this warning become a hard error?\r\n                    \r\nAt the beginning of each 6-week release cycle, the Rust compiler team\r\nwill review the set of outstanding future compatibility warnings and\r\nnominate some of them for **Final Comment Period**. Toward the end of\r\nthe cycle, we will review any comments and make a final determination\r\nwhether to convert the warning into a hard error or remove it\r\nentirely.\r\n", "closed_by": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46205/timeline", "performed_via_github_app": null, "state_reason": "completed"}