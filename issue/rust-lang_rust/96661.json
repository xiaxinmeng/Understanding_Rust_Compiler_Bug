{"url": "https://api.github.com/repos/rust-lang/rust/issues/96661", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96661/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96661/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96661/events", "html_url": "https://github.com/rust-lang/rust/issues/96661", "id": 1223706785, "node_id": "I_kwDOAAsO6M5I8Eih", "number": 96661, "title": "Output type of indexing op. wrongly inferred in custom libcore", "user": {"login": "gheoan", "id": 9906612, "node_id": "MDQ6VXNlcjk5MDY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/9906612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gheoan", "html_url": "https://github.com/gheoan", "followers_url": "https://api.github.com/users/gheoan/followers", "following_url": "https://api.github.com/users/gheoan/following{/other_user}", "gists_url": "https://api.github.com/users/gheoan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gheoan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gheoan/subscriptions", "organizations_url": "https://api.github.com/users/gheoan/orgs", "repos_url": "https://api.github.com/users/gheoan/repos", "events_url": "https://api.github.com/users/gheoan/events{/privacy}", "received_events_url": "https://api.github.com/users/gheoan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 1353613039, "node_id": "MDU6TGFiZWwxMzUzNjEzMDM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lang-item", "name": "A-lang-item", "color": "f7e101", "default": false, "description": "Area: lang items"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 5352452905, "node_id": "LA_kwDOAAsO6M8AAAABPwfzKQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-internal-features", "name": "requires-internal-features", "color": "76dcde", "default": false, "description": "This issue requires the use of internal features"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-05-03T05:28:30Z", "updated_at": "2023-04-05T05:37:58Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\nhttps://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=42c97cceb10fc5cb71915f95d28a2956\r\n\r\n<details>\r\n  <summary>Click to show 100 lines of code</summary>\r\n\r\n```rust\r\n#![crate_type = \"lib\"] #![allow(dead_code)]\r\n\r\n#![feature(no_core, lang_items, auto_traits)]\r\n#![no_core]\r\n\r\nimpl<T> Index<i32> for [T] {\r\n    type Output = T;\r\n\r\n    fn index(&self, index: i32) -> &Self::Output {\r\n        &self[index as usize]\r\n    }\r\n}\r\n\r\nfn f() {\r\n    struct Decimal { digits: [u8; 9] }\r\n    let d = Decimal { digits: [0; 9] };\r\n\r\n            /* use 0_i32 to fix */\r\n    match d.digits[0] {\r\n  /* or 5_u8 here */\r\n        5 => {}\r\n        _ => {}\r\n    };\r\n}\r\n\r\n// The code below is a slimmed down version of\r\n// https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/compiler/rustc_codegen_cranelift/example/mini_core.rs\r\n// It can be replaced with the whole mini_core or with the full standard library\r\n///////////////////////////////////////////\r\n\r\n#[lang = \"index\"]\r\npub trait Index<Idx: ?Sized> {\r\n    type Output: ?Sized;\r\n    fn index(&self, index: Idx) -> &Self::Output;\r\n}\r\n\r\nimpl<T> Index<usize> for [T] {\r\n    type Output = T;\r\n\r\n    fn index(&self, index: usize) -> &Self::Output {\r\n        &self[index]\r\n    }\r\n}\r\n\r\n#[lang = \"sized\"]\r\npub trait Sized {}\r\n\r\n#[lang = \"unsize\"]\r\npub trait Unsize<T: ?Sized> {}\r\n\r\n#[lang = \"coerce_unsized\"]\r\npub trait CoerceUnsized<T> {}\r\nimpl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\r\nimpl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a mut U> for &'a mut T {}\r\nimpl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\r\nimpl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\r\n\r\n#[lang = \"receiver\"]\r\npub trait Receiver {}\r\nimpl<T: ?Sized> Receiver for &T {}\r\nimpl<T: ?Sized> Receiver for &mut T {}\r\n\r\n#[lang = \"copy\"]\r\npub unsafe trait Copy {}\r\nunsafe impl Copy for bool {}\r\nunsafe impl Copy for u8 {}\r\nunsafe impl Copy for u16 {}\r\nunsafe impl Copy for u32 {}\r\nunsafe impl Copy for u64 {}\r\nunsafe impl Copy for u128 {}\r\nunsafe impl Copy for usize {}\r\nunsafe impl Copy for i8 {}\r\nunsafe impl Copy for i16 {}\r\nunsafe impl Copy for i32 {}\r\nunsafe impl Copy for isize {}\r\nunsafe impl Copy for f32 {}\r\nunsafe impl Copy for f64 {}\r\nunsafe impl Copy for char {}\r\nunsafe impl<'a, T: ?Sized> Copy for &'a T {}\r\nunsafe impl<T: ?Sized> Copy for *const T {}\r\nunsafe impl<T: ?Sized> Copy for *mut T {}\r\n\r\n#[lang = \"freeze\"]\r\nunsafe auto trait Freeze {}\r\n\r\n#[lang = \"panic_location\"]\r\nstruct PanicLocation {\r\n    file: &'static str,\r\n    line: u32,\r\n    column: u32,\r\n}\r\n```\r\n</details>\r\n\r\n\r\nI expected to see this happen: code compiles without errors.\r\n\r\nInstead, this happened: the output type of the Index operation is incorrectly inferred as i32.\r\n\r\n```\r\nerror[E0271]: type mismatch resolving `<[u8] as Index<i32>>::Output == i32`\r\n  --> ./type-inference-bug.rs:19:11\r\n   |\r\n19 |     match d.digits[0] {\r\n   |           ^^^^^^^^^^^ type mismatch resolving `<[u8] as Index<i32>>::Output == i32`\r\n   |\r\nnote: expected this to be `u8`\r\n  --> ./type-inference-bug.rs:7:19\r\n   |\r\n7  |     type Output = T;\r\n   |                   ^\r\n```\r\n\r\nAffects both v1.56 and nightly.\r\n```\r\nrustc 1.62.0-nightly (082e4ca49 2022-04-26)\r\nbinary: rustc\r\ncommit-hash: 082e4ca49770ebc9cb0ee616f3726a67471be8cb\r\ncommit-date: 2022-04-26\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.62.0-nightly\r\nLLVM version: 14.0.1\r\n\r\n```\r\n\r\n@rustbot label A-inference T-compiler C-enhancement requires-nightly A-lang-item", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96661/timeline", "performed_via_github_app": null, "state_reason": null}