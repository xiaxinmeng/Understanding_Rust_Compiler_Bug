{"url": "https://api.github.com/repos/rust-lang/rust/issues/108965", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108965/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108965/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108965/events", "html_url": "https://github.com/rust-lang/rust/issues/108965", "id": 1618277558, "node_id": "I_kwDOAAsO6M5gdPS2", "number": 108965, "title": "rustc sometimes constant-folds math method calls but still emits a call anyway", "user": {"login": "jorendorff", "id": 283361, "node_id": "MDQ6VXNlcjI4MzM2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/283361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jorendorff", "html_url": "https://github.com/jorendorff", "followers_url": "https://api.github.com/users/jorendorff/followers", "following_url": "https://api.github.com/users/jorendorff/following{/other_user}", "gists_url": "https://api.github.com/users/jorendorff/gists{/gist_id}", "starred_url": "https://api.github.com/users/jorendorff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jorendorff/subscriptions", "organizations_url": "https://api.github.com/users/jorendorff/orgs", "repos_url": "https://api.github.com/users/jorendorff/repos", "events_url": "https://api.github.com/users/jorendorff/events{/privacy}", "received_events_url": "https://api.github.com/users/jorendorff/received_events", "type": "User", "site_admin": true}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2023-03-10T02:54:29Z", "updated_at": "2023-04-05T17:25:34Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In <https://users.rust-lang.org/t/math-result-varies-in-debug-vs-release-builds/90612>, jonh discovered that this code \r\n([Godbolt](https://godbolt.org/z/ddnrPGsrz), [playground](https://play.rust-lang.org/?version=nightly&mode=release&edition=2021&gist=f0dabcb9596b56a48463648c722480cd))\r\n\r\n```rust\r\npub fn t() -> f32 {\r\n    0.7f32.tanh()\r\n}\r\n```\r\n\r\nproduces this, when compiled on Linux with `opt-level` 1 or greater:\r\n\r\n```\r\n.LCPI0_0:\r\n        .long   0x3f333333\r\n.LCPI0_1:\r\n        .long   0x3f1ab7d9\r\nexample::t:\r\n        push    rax\r\n        movss   xmm0, dword ptr [rip + .LCPI0_0]\r\n        call    qword ptr [rip + tanhf@GOTPCREL]\r\n        movss   xmm0, dword ptr [rip + .LCPI0_1]\r\n        pop     rax\r\n        ret\r\n```\r\n\r\nI was surprised to see that **the asm output contains a precomputed answer, but it calls `tanhf` anyway,** ignoring the return value.\r\n\r\nThe corresponding code for `0.7f32.exp()` simply loads the precomputed answer and returns. No call to `expf` is emitted. That makes more sense.\r\n\r\nNightly emits the same code.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108965/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108965/timeline", "performed_via_github_app": null, "state_reason": null}