{"url": "https://api.github.com/repos/rust-lang/rust/issues/44924", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44924/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44924/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44924/events", "html_url": "https://github.com/rust-lang/rust/issues/44924", "id": 261678412, "node_id": "MDU6SXNzdWUyNjE2Nzg0MTI=", "number": 44924, "title": "incr.comp.: Update fingerprint-based auto tests for red/green tracking.", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 120005, "node_id": "MDU6TGFiZWwxMjAwMDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-testsuite", "name": "A-testsuite", "color": "f7e101", "default": false, "description": "Area: The testsuite used to check the correctness of rustc"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 693665681, "node_id": "MDU6TGFiZWw2OTM2NjU2ODE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-incr-comp", "name": "WG-incr-comp", "color": "c2e0c6", "default": false, "description": "Working group: incremental compilation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2017-09-29T15:25:40Z", "updated_at": "2017-12-07T17:36:42Z", "closed_at": "2017-12-07T09:55:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The incr. comp. system computes fingerprints (hashes) of various things and then uses these fingerprints to check if something has changed in comparison to the previous compilation session. The test cases in src/test/incremental/hashes test, at a fine-grained level, that various changes in the source code lead to changed fingerprints of various intermediate results.\r\nBefore red/green change tracking (implemented in https://github.com/rust-lang/rust/pull/44901) the compiler only computed fingerprints for the inputs of a program (i.e. the HIR) and the things exported to crate metadata. With the new tracking system we also compute hashes for almost all intermediate results, but the test cases in `src/test/incremental/hashes` do not reflect that yet.\r\n\r\nA given item is tested by attaching a `#[rustc_clean]` attribute to them for expressing the expectation that the item's fingerprint has not changed, or by attaching a `#[rustc_dirty]` attribute if the fingerprint should have changed. These attributes have two arguments:\r\n* the `label` determines which kind of hash we are interested in (i.e. the `DepNode`), and\r\n* the `cfg` argument says in which compilation session this assumption should be tested.\r\n\r\nSo, for example, if we want to assert that the fingerprint of the optimized MIR of a given function foo has changed between the first and the second compilation session and has not changed between sessions 2 and 3, we can do so as follows:\r\n\r\n```rust\r\n#[cfg(cfail1)]\r\nfn foo() {\r\n    // ...\r\n}\r\n\r\n#[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\r\n#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail3\")]\r\n#[cfg(not(cfail1))]\r\nfn foo() {\r\n    // ...\r\n}\r\n```\r\n\r\nSince #45104 we also have a more concise way of expressing these assertions. The following snippet of code tests that all relevant results are clean, except for \"MirOptimized\". This obviates the need to exhaustively list all `DepKind`s that should be checked. The testing framework knows which are relevant for the item the `#[rustc_clean]` or `#[rustc_dirty]` attribute is attached to.\r\n\r\n```rust\r\n#[cfg(cfail1)]\r\nfn foo() {\r\n    // ...\r\n}\r\n\r\n#[rustc_clean(except=\"MirOptimized\", cfg=\"cfail2\")]\r\n#[rustc_clean(cfg=\"cfail3\")]\r\n#[cfg(not(cfail1))]\r\nfn foo() {\r\n    // ...\r\n}\r\n```\r\n\r\nThe `#[cfg]` attributes attached to the function specify which version gets compiled in which compilation session (see also #36674 for another description of how these tests work). The possible values for the `label` argument are those [DepNode](https://github.com/rust-lang/rust/blob/d514263ce3b136775f6e8ec4b94cc1073d16c892/src/librustc/dep_graph/dep_node.rs#L12) [variants](https://github.com/rust-lang/rust/blob/d514263ce3b136775f6e8ec4b94cc1073d16c892/src/librustc/dep_graph/dep_node.rs#L401) that have a single `DefId` argument.\r\n\r\nAt the time of writing, there are 134 kinds of dependency nodes and it would be overkill to test fingerprints for all of these. But, depending on the kind of item under test, there are a few key ones that we should verify:\r\n\r\n\r\n\r\n### Free-standing Functions and Methods\r\n\r\nThese represent executable code, so we want to test their MIR:\r\n\r\n* `MirValidated`\r\n* `MirOptimized`\r\n\r\nCallers will depend on the signature of these items, so we better test\r\n\r\n* `TypeOfItem`,\r\n* `GenericsOfItem`,\r\n* `PredicatesOfItem`, and\r\n* `FnSignature`.\r\n\r\nAnd a big part of compilation (that we eventually want to cache) is type inference information:\r\n\r\n* `TypeckTables`\r\n\r\nFor methods, we can also check\r\n\r\n* `AssociatedItems`\r\n\r\nwhich is a bit misnamed and actually describes the `ty::AssociatedItem` descriptor of the method.\r\n\r\n\r\n\r\n### Struct, Enum, and Union Definitions\r\n\r\nFor these we should at least test\r\n\r\n* `TypeOfItem`,\r\n* `GenericsOfItem`, and\r\n* `PredicatesOfItem`.\r\n\r\nin addition to `Hir` and `HirBody`. Note that changing the type of a\r\nfield does *not* change the type of the struct or enum, but adding/removing\r\nfields or changing a fields name or visibility does.\r\n\r\n\r\n\r\n### Struct/Enum/Unions Fields\r\nFields are kind of separate from their containers, as they can change independently from them. We should at least check\r\n\r\n* `TypeOfItem` for these.\r\n\r\n\r\n\r\n### Trait Definitions\r\n\r\nFor these we'll want to check\r\n\r\n* `TraitDefOfItem`,\r\n* `TraitImpls`,\r\n* `SpecializationGraph`,\r\n* `ObjectSafety`,\r\n* `AssociatedItemDefIds`,\r\n* `GenericsOfItem`, and\r\n* `PredicatesOfItem`\r\n\r\n\r\n\r\n### (Trait) Impls\r\n\r\nFor impls we'll want to check\r\n\r\n* `ImplTraitRef`,\r\n* `AssociatedItemDefIds`, and\r\n* `GenericsOfItem`.\r\n\r\n\r\n\r\n### Associated Items\r\n\r\nFor associated items (types, constants, and methods) we should check\r\n\r\n* `TraitOfItem`,\r\n* `AssociatedItems`.\r\n\r\n## Test Files to Update\r\n\r\nThe existing tests can be found in the `src/test/incremental/hashes` directory. A description of how the tests were setup initially can be found in issue #36674. The basic testing strategy should stay the same -- the goal here is to add the `#[rustc_dirty]`/`#[rustc_clean]` attributes for the labels listed above. The test suite can be executed by running `./x.py test --stage 1 src/test/incremental`.\r\n\r\nIf you come a across an instance where you are not sure if it should be dirty or clean, or the compiler produces a result that's different from your expectation, feel free to leave a comment below or ask on gitter or IRC.\r\n\r\nIf you want to take on updating a specific test file, leave a comment below and I'll mark it has taken.\r\n\r\n - [x] [call_expressions.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/call_expressions.rs)\r\n - [x] [closure_expressions.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/closure_expressions.rs)\r\n - [x] [consts.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/consts.rs)\r\n - [x] [enum_constructors.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/enum_constructors.rs)\r\n - [x] [enum_defs.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/enum_defs.rs)\r\n - [x] [exported_vs_not.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/exported_vs_not.rs)\r\n - [x] [extern_mods.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/extern_mods.rs)\r\n - [x] [for_loops.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/for_loops.rs)\r\n - [x] [function_interfaces.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/function_interfaces.rs)\r\n - [x] [if_expressions.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/if_expressions.rs)\r\n - [x] [indexing_expressions.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/indexing_expressions.rs)\r\n - [x] [inherent_impls.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/inherent_impls.rs)\r\n - [x] [inline_asm.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/inline_asm.rs)\r\n - [x] [let_expressions.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/let_expressions.rs)\r\n - [x] [loop_expressions.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/loop_expressions.rs)\r\n - [x] [match_expressions.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/match_expressions.rs)\r\n - [x] [panic_exprs.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/panic_exprs.rs)\r\n - [x] [panic_exprs_no_overflow_checks.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/panic_exprs_no_overflow_checks.rs)\r\n - [x] [statics.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/statics.rs)\r\n - [x] [struct_constructors.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/struct_constructors.rs)\r\n - [x] [struct_defs.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/struct_defs.rs)\r\n - [x] [trait_defs.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/trait_defs.rs)\r\n - [x] [trait_impls.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/trait_impls.rs)\r\n - [x] [type_defs.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/type_defs.rs)\r\n - [x] [unary_and_binary_exprs.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/unary_and_binary_exprs.rs)\r\n - [x] [while_let_loops.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/while_let_loops.rs)\r\n - [x] [while_loops.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/while_loops.rs)\r\n\r\nGood luck! `:)`\r\n", "closed_by": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44924/timeline", "performed_via_github_app": null, "state_reason": "completed"}