{"url": "https://api.github.com/repos/rust-lang/rust/issues/47741", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47741/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47741/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47741/events", "html_url": "https://github.com/rust-lang/rust/issues/47741", "id": 291614391, "node_id": "MDU6SXNzdWUyOTE2MTQzOTE=", "number": 47741, "title": "Struct initializer `..x` syntax should work for other structs with structurally equal subset of fields", "user": {"login": "Boscop", "id": 535593, "node_id": "MDQ6VXNlcjUzNTU5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/535593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Boscop", "html_url": "https://github.com/Boscop", "followers_url": "https://api.github.com/users/Boscop/followers", "following_url": "https://api.github.com/users/Boscop/following{/other_user}", "gists_url": "https://api.github.com/users/Boscop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Boscop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Boscop/subscriptions", "organizations_url": "https://api.github.com/users/Boscop/orgs", "repos_url": "https://api.github.com/users/Boscop/repos", "events_url": "https://api.github.com/users/Boscop/events{/privacy}", "received_events_url": "https://api.github.com/users/Boscop/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-25T15:41:53Z", "updated_at": "2023-02-26T22:56:44Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This should be allowed:\r\n```rust\r\nstruct X { a: u8, b: u16, c: u32, d: i8 } \r\nstruct Y { a: u8, b: u16, c: u32, d: i8 } \r\nlet x = X { a: 1, b: 2, c: 3, d: 4 }; \r\nlet y = Y { a: 5, ..x };\r\n```\r\nif the fields that are missing from `Y`'s struct initializer have the **same** names and types in `X` as in `Y`.\r\nThis occurs very often and I often have to write code that pulls over many fields manually (e.g. to convert between structs with different (serde) attributes and to derive view structs from model structs etc.)..\r\nIt would make sense to allow the above as syntactic sugar for this:\r\n```rust\r\nlet y = Y { a: 4, b: x.b, c: x.c, d: x.d };\r\n```\r\n\r\nSo the compiler would:\r\n1. determine the set of fields missing from the initializer syntax (`{ b: u16, c: u32, d: i8 }` above)\r\n2. check if those fields are present in the type of `x` with the same types\r\n\r\nYou may say \"just `impl From<X> for Y`\" but that's exactly where many of these patterns occur!\r\n\r\nAnd usually I have to do conversion functions on the few fields that are not pulled over from `x`, so a proc-macro to derive `From` wouldn't work, because `y.a` would have a different type than `x.a`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47741/reactions", "total_count": 30, "+1": 27, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 3, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47741/timeline", "performed_via_github_app": null, "state_reason": null}