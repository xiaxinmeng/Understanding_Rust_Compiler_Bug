{"url": "https://api.github.com/repos/rust-lang/rust/issues/37538", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37538/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37538/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37538/events", "html_url": "https://github.com/rust-lang/rust/issues/37538", "id": 186883762, "node_id": "MDU6SXNzdWUxODY4ODM3NjI=", "number": 37538, "title": "Rustc fails to inline trivial functions", "user": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-11-02T18:29:47Z", "updated_at": "2019-12-25T16:43:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I read in multiple places that rustc generating worse code than a C++ compiler would do for an equivalent C++ program is a bug. So here we go:\r\n\r\n## Summary\r\n\r\nRustc fails to inline trivial functions that compile down to just a few instructions, to the point where calling convention overhead is much worse than the actual function itself.\r\n\r\n## Steps to reproduce\r\n\r\nI tried to write a minimal example at play.rust-lang.org, but everything short that I can come up with does not suffer from this issue. So instead I am going to link the project that caused me to discover this issue:\r\n\r\n```\r\ngit clone https://github.com/ruuda/claxon\r\ngit checkout 2b18a49\r\ncargo build --release --example decode\r\nobjdump -Cd target/release/examples/decode | less\r\n# Now search for rice_to_signed or shift_left.\r\n```\r\n\r\n## Actual and expected behavior\r\n\r\nI\u2019ll outline some of the disassembly below:\r\n\r\n```\r\n# Code for `if shift >= 8 { 0 } else { x << shift }`.\r\n000000000000d3a0 <claxon::input::shift_left::h07bb472717a335da>:\r\n    d3a0:       89 f1                   mov    %esi,%ecx\r\n    d3a2:       80 e1 07                and    $0x7,%cl\r\n    d3a5:       40 d2 e7                shl    %cl,%dil\r\n    d3a8:       48 83 fe 07             cmp    $0x7,%rsi\r\n    d3ac:       76 02                   jbe    d3b0 <claxon::input::shift_left::h07bb472717a335da+0x10>\r\n    d3ae:       31 ff                   xor    %edi,%edi\r\n    d3b0:       89 f8                   mov    %edi,%eax\r\n    d3b2:       c3                      retq   \r\n    d3b3:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\r\n    d3ba:       00 00 00 \r\n    d3bd:       0f 1f 00                nopl   (%rax)\r\n\r\n# Code for `if x & 1 == 1 { - 1 - x / 2 } else { x / 2 }`.\r\n# It did optimize the branch into two shifts and an xor though!\r\n000000000000d7b0 <claxon::subframe::rice_to_signed::haed2067302c41014>:\r\n    d7b0:       48 89 f8                mov    %rdi,%rax\r\n    d7b3:       48 c1 e8 3f             shr    $0x3f,%rax\r\n    d7b7:       48 01 f8                add    %rdi,%rax\r\n    d7ba:       48 d1 f8                sar    %rax\r\n    d7bd:       48 c1 e7 3f             shl    $0x3f,%rdi\r\n    d7c1:       48 c1 ff 3f             sar    $0x3f,%rdi\r\n    d7c5:       48 31 c7                xor    %rax,%rdi\r\n    d7c8:       48 89 f8                mov    %rdi,%rax\r\n    d7cb:       c3                      retq   \r\n    d7cc:       0f 1f 40 00             nopl   0x0(%rax)\r\n```\r\n\r\nNote that this is not dead code, there are calls to these functions in very hot loops:\r\n```\r\n79e8:  e8 c3 5d 00 00     callq  d7b0 <claxon::subframe::rice_to_signed::haed2067302c41014>\r\n\r\n66a8:  e8 f3 6c 00 00     callq  d3a0 <claxon::input::shift_left::h07bb472717a335da>\r\n```\r\n\r\nI would expect that functions like these would be inlined automatically, but they were not. Note that all of this code is in the same crate.\r\n\r\nI encountered about a dozen of these during profiling, where very small functions like the ones above were showing up as hotspots. I\u2019ve been able to speed up my program by as much as 30% just by placing a few `#[inline(always)]` attributes.\r\n\r\nThere are also simple getters like `Block::len` which are not inlined, but these are called from the example program which is a different crate, so that is working as intended I think.\r\n\r\n## Meta\r\n\r\n```\r\nrustc 1.14.0-nightly (3210fd5c2 2016-10-05)\r\nbinary: rustc\r\ncommit-hash: 3210fd5c20ffc6da420eb00e60bdc8704577fd3b\r\ncommit-date: 2016-10-05\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.14.0-nightly\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37538/timeline", "performed_via_github_app": null, "state_reason": null}