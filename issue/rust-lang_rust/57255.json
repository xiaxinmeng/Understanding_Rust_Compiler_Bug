{"url": "https://api.github.com/repos/rust-lang/rust/issues/57255", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57255/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57255/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57255/events", "html_url": "https://github.com/rust-lang/rust/issues/57255", "id": 395138250, "node_id": "MDU6SXNzdWUzOTUxMzgyNTA=", "number": 57255, "title": "Clarify docs around what libcore users must declare", "user": {"login": "JustAPerson", "id": 789308, "node_id": "MDQ6VXNlcjc4OTMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/789308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JustAPerson", "html_url": "https://github.com/JustAPerson", "followers_url": "https://api.github.com/users/JustAPerson/followers", "following_url": "https://api.github.com/users/JustAPerson/following{/other_user}", "gists_url": "https://api.github.com/users/JustAPerson/gists{/gist_id}", "starred_url": "https://api.github.com/users/JustAPerson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JustAPerson/subscriptions", "organizations_url": "https://api.github.com/users/JustAPerson/orgs", "repos_url": "https://api.github.com/users/JustAPerson/repos", "events_url": "https://api.github.com/users/JustAPerson/events{/privacy}", "received_events_url": "https://api.github.com/users/JustAPerson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-02T02:55:05Z", "updated_at": "2020-03-06T22:42:00Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I find [the documentation about what libcore depends on](https://github.com/rust-lang/rust/blob/7a0911528058e87d22ea305695f4047572c5e067/src/libcore/lib.rs#L21-L39) a bit confusing right now. I'm trying to make my `#[no_std]` crate compile after a year on inactivity for context.\r\n\r\nNow firstly, this section describes several symbols, but is the actual symbol name relevant (ignoring `memcpy`/`memset`/etc)?  Or do we only care about the existence of some function labeled with the appropriate attribute? The distinction between symbol name and the associated lang attribute is confusing here. \r\n\r\n>rust_begin_panic - This function takes four arguments, a fmt::Arguments, a &'static str, and two u32's. These four arguments dictate the panic message, the file at which panic was invoked, and the line and column inside the file. It is up to consumers of this core library to define this panic function; it is only required to never return. This requires a lang attribute named panic_impl.\r\n\r\nIt appears that the `#[lang=\"panic_impl\"]` mentioned is already declared in [`libcore/panicking.rs`](https://github.com/rust-lang/rust/blob/7a0911528058e87d22ea305695f4047572c5e067/src/libcore/panicking.rs#L76). It appears that this should refer to `#[lang = \"panic_fmt\"]` instead, which is what `libcore` users formerly had to declare but is now [implicitly declared by by the new `#[panic_handler]`](https://github.com/rust-lang/rfcs/blob/master/text/2070-panic-implementation.md#panic_implementation). Rustc will complain about missing a `#[panic_handler]` currently. So this section should probably be updated to refer to `#[panic_handler]` instead.\r\n\r\n>rust_eh_personality - is used by the failure mechanisms of the compiler. This is often mapped to GCC's personality function, but crates which do not trigger a panic can be assured that this function is never called. The lang attribute is called eh_personality.\r\n\r\nIt should probably be mentioned that `#[lang=\"eh_personality\"]` seems only necessary if `panic=unwind`. Additionally should perhaps mention `_Unwind_Resume` as well (which theoretically is only necessary for `panic=unwind` builds but can erroneously be required for `panic=abort opt-level=0` builds see #53301). There's actually more of these `eh` functions that should be perhaps mentioned depending on your target. The subtleties are explained in `libpanic_unwind` and `libpanic_abort`.\r\n\r\nAlong the same lines, the docs of `liballoc` should probably also mention `#[alloc_error_handler]` (see #51540).\r\n\r\nI can try writing up a draft or PR but wanted to get feedback first.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57255/timeline", "performed_via_github_app": null, "state_reason": null}