{"url": "https://api.github.com/repos/rust-lang/rust/issues/16363", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/16363/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/16363/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/16363/events", "html_url": "https://github.com/rust-lang/rust/issues/16363", "id": 39857767, "node_id": "MDU6SXNzdWUzOTg1Nzc2Nw==", "number": 16363, "title": "`std::rand`: inconsistent seeding", "user": {"login": "vks", "id": 33460, "node_id": "MDQ6VXNlcjMzNDYw", "avatar_url": "https://avatars.githubusercontent.com/u/33460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vks", "html_url": "https://github.com/vks", "followers_url": "https://api.github.com/users/vks/followers", "following_url": "https://api.github.com/users/vks/following{/other_user}", "gists_url": "https://api.github.com/users/vks/gists{/gist_id}", "starred_url": "https://api.github.com/users/vks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vks/subscriptions", "organizations_url": "https://api.github.com/users/vks/orgs", "repos_url": "https://api.github.com/users/vks/repos", "events_url": "https://api.github.com/users/vks/events{/privacy}", "received_events_url": "https://api.github.com/users/vks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-08-08T20:01:25Z", "updated_at": "2014-08-09T00:03:52Z", "closed_at": "2014-08-09T00:03:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following example:\n\n``` rust\nfn main() {\n    use std::rand::{Rng, SeedableRng, IsaacRng, XorShiftRng};\n\n    let mut rng1: XorShiftRng = SeedableRng::from_seed([1, 2, 3, 4]);\n    let mut rng2: IsaacRng = SeedableRng::from_seed(&[1, 2, 3, 4]);\n    println!(\"{}\", rng1.gen::<f64>());\n    println!(\"{}\", rng2.gen::<f64>());\n}\n```\n\n`XorShiftRng` takes the seed by value, `IsaacRng` by reference. (Note that `IsaacRng` takes an arbitrary amount of integers while `XorShiftRng` takes exactly 4.)\n\nWhile this is very minor, it might be useful to be able to seed the RNGs in a consistent way.\nI.e. `XorShiftRng` could accept any number of integers as a seed and use that to generate the 4 integers needed internally.\n\nFor example, a more consistent higher-level interface could be provided:\n\n``` rust\nuse std::rand::{Rng, StdRng, SeedableRng, IsaacRng, XorShiftRng};\n\ntrait UniversalSeedableRng<Seed>: SeedableRng<Seed> {\n    fn from_universal_seed(seed: &[uint]) -> Self;\n}\n\nimpl UniversalSeedableRng<[u32, .. 4]> for XorShiftRng {\n    fn from_universal_seed(seed: &[uint]) -> XorShiftRng {\n        let mut rng: StdRng = SeedableRng::from_seed(seed);\n        let (x, y, z, w) = rng.gen::<(u32, u32, u32, u32)>();\n        SeedableRng::from_seed([x, y, z, w])\n    }\n}\n\nimpl<'a> UniversalSeedableRng<&'a [u32]> for IsaacRng {\n    fn from_universal_seed(seed: &[uint]) -> IsaacRng {\n        let cast_seed: Vec<u32> = seed.iter().map(|&e| e as u32).collect();\n        SeedableRng::from_seed(cast_seed.as_slice())\n    }\n}\n\nfn main() {\n    let mut rng1: XorShiftRng = UniversalSeedableRng::from_universal_seed(&[1, 2, 3, 4]);\n    let mut rng2: IsaacRng = UniversalSeedableRng::from_universal_seed(&[1, 2, 3, 4]);\n    println!(\"{}\", rng1.gen::<f64>());\n    println!(\"{}\", rng2.gen::<f64>());\n}\n```\n\n(It might be better to `transmute` the slices in order to avoid throwing entropy away, but that would make the implementation trickier. Also, it would make sense to accept more types than `uint`.)\n", "closed_by": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/16363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/16363/timeline", "performed_via_github_app": null, "state_reason": "completed"}