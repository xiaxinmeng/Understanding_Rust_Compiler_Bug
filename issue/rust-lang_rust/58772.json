{"url": "https://api.github.com/repos/rust-lang/rust/issues/58772", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58772/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58772/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58772/events", "html_url": "https://github.com/rust-lang/rust/issues/58772", "id": 414997067, "node_id": "MDU6SXNzdWU0MTQ5OTcwNjc=", "number": 58772, "title": "`TokenStream::from_str` returns spurious `Ok`s", "user": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-27T08:17:43Z", "updated_at": "2019-02-27T09:35:52Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#### Cargo.toml\r\n\r\n```toml\r\n[package]\r\nname = \"repro\"\r\nversion = \"0.0.0\"\r\nedition = \"2018\"\r\n\r\n[lib]\r\nproc-macro = true\r\n```\r\n\r\n#### src/lib.rs\r\n\r\n```rust\r\nextern crate proc_macro;\r\n\r\nuse proc_macro::TokenStream;\r\nuse std::str::FromStr;\r\n\r\n#[proc_macro_derive(ParseTokenStream)]\r\npub fn derive(_input: TokenStream) -> TokenStream {\r\n    println!(\"{:#?}\", TokenStream::from_str(\"Foo::Bar { elem\"));\r\n    TokenStream::new()\r\n}\r\n```\r\n\r\n#### src/main.rs\r\n\r\n```rust\r\n#[derive(repro::ParseTokenStream)]\r\nstruct S;\r\n\r\nfn main() {}\r\n```\r\n\r\nOutput of `cargo check`:\r\n\r\n```\r\n$ cargo check\r\n   Compiling repro v0.0.0 (/media/david/coding/github/repro/repro)\r\nerror: this file contains an un-closed delimiter\r\n --> src/main.rs:1:10\r\n  |\r\n1 | #[derive(repro::ParseTokenStream)]\r\n  |          ^^^^^^^^^^^^^^^^^^^^^^^ un-closed delimiter\r\n\r\nOk(\r\n    TokenStream [\r\n        Ident {\r\n            ident: \"Foo\",\r\n            span: #4 bytes(9..32)\r\n        },\r\n        Punct {\r\n            ch: ':',\r\n            spacing: Joint,\r\n            span: #4 bytes(9..32)\r\n        },\r\n        Punct {\r\n            ch: ':',\r\n            spacing: Alone,\r\n            span: #4 bytes(9..32)\r\n        },\r\n        Ident {\r\n            ident: \"Bar\",\r\n            span: #4 bytes(9..32)\r\n        },\r\n        Group {\r\n            delimiter: Brace,\r\n            stream: TokenStream [\r\n                Ident {\r\n                    ident: \"elem\",\r\n                    span: #4 bytes(9..32)\r\n                }\r\n            ],\r\n            span: #4 bytes(9..32)\r\n        }\r\n    ]\r\n)\r\nerror: aborting due to previous error\r\n\r\nerror: Could not compile `repro`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n---\r\n\r\nI originally raised this issue [https://github.com/dtolnay/syn/issues/584](https://github.com/dtolnay/syn/issues/584). I'm writing a procedural macro and I'm unable to check for lexer errors because `TokenStream::from_str` can sometimes lie and say that lexing succeeded. The compiler secretly records that their was an error though and will fail my macro further down the line.\r\n\r\nThis seems related to https://github.com/rust-lang/rust/issues/58736, where the compiler will also not return an `Err(LexError)` and instead panics.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58772/timeline", "performed_via_github_app": null, "state_reason": null}