{"url": "https://api.github.com/repos/rust-lang/rust/issues/46243", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46243/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46243/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46243/events", "html_url": "https://github.com/rust-lang/rust/issues/46243", "id": 276692097, "node_id": "MDU6SXNzdWUyNzY2OTIwOTc=", "number": 46243, "title": "Running libstd tests with backtraces and multiple threads results in memory corruption", "user": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 120005, "node_id": "MDU6TGFiZWwxMjAwMDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-testsuite", "name": "A-testsuite", "color": "f7e101", "default": false, "description": "Area: The testsuite used to check the correctness of rustc"}, {"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-24T20:06:16Z", "updated_at": "2022-03-09T17:43:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Steps to reproduce (on msys2):\r\n```\r\nexport RUST_BACKTRACE=full\r\npython x.py test src/libstd\r\n```\r\nThe libstd testing executable raises an exception with code 0xc0000374.\r\nBacktrace:\r\n```\r\nntdll!NtWaitForMultipleObjects + 0x14\r\nntdll!WerpWaitForCrashReporting + 0xa8\r\nntdll!RtlReportExceptionHelper + 0x33e\r\nntdll!RtlReportException + 0x9d\r\nntdll!RtlReportCriticalFailure$filt$0 + 0x33\r\nntdll!_C_specific_handler + 0x96\r\nntdll!_GSHandlerCheck_SEH + 0x6a\r\nntdll!RtlpExecuteHandlerForException + 0xd\r\nntdll!RtlDispatchException + 0x358\r\nntdll!RtlRaiseException + 0x303\r\nntdll!RtlReportCriticalFailure + 0x97\r\nntdll!RtlpHeapHandleError + 0x12\r\nntdll!RtlpLogHeapFailure + 0x96\r\nntdll!RtlpAllocateHeap + 0x19c0\r\nntdll!RtlpAllocateHeapInternal + 0x5cb\r\ndbghelp!SymInitializeW + 0x130\r\ndbghelp!SymInitialize + 0x33\r\ndbghelp!StackWalkEx + 0x84\r\ndbghelp!StackWalk64 + 0xfa\r\nstd_b0d966d629cbd139!std::sys::imp::backtrace::unwind_backtrace + 0x337\r\nstd_b0d966d629cbd139!std::sys_common::backtrace::_print + 0x390\r\nstd_b0d966d629cbd139!std::sys_common::backtrace::print + 0x22\r\nstd_b0d966d629cbd139!std::panicking::default_hook::{{closure}} + 0x1a4\r\nstd_b0d966d629cbd139!std::panicking::default_hook + 0x1dd\r\nstd_b0d966d629cbd139!std::panicking::rust_panic_with_hook + 0x2e8\r\nstd_b0d966d629cbd139!std::panicking::begin_panic<str*> + 0x62\r\nstd_b0d966d629cbd139!std::sync::rwlock::tests::test_into_inner_poison::{{closure}} + 0x7b\r\nstd_b0d966d629cbd139!std::sys_common::backtrace::__rust_begin_short_backtrace<closure,!> + 0x96\r\nstd_b0d966d629cbd139!std::thread::{{impl}}::spawn::{{closure}}::{{closure}} + 0x5\r\nstd_b0d966d629cbd139!std::panic::{{impl}}::call_once + 0x5\r\nstd_b0d966d629cbd139!std::panicking::try::do_call<std::panic::AssertUnwindSafe<closure>,!> + 0x12\r\nstd_b0d966d629cbd139!panic_unwind::__rust_maybe_catch_panic + 0x22\r\nstd_b0d966d629cbd139!std::panicking::try + 0x2c\r\nstd_b0d966d629cbd139!std::panic::catch_unwind + 0x2c\r\nstd_b0d966d629cbd139!std::thread::{{impl}}::spawn::{{closure}} + 0x6a\r\nstd_b0d966d629cbd139!alloc::boxed::{{impl}}::call_box<(),closure> + 0x98\r\nstd_b0d966d629cbd139!alloc::boxed::{{impl}}::call_once + 0x7\r\nstd_b0d966d629cbd139!std::sys_common::thread::start_thread + 0x66\r\nstd_b0d966d629cbd139!std::sys::imp::thread::{{impl}}::new::thread_start + 0x7c\r\nkernel32!BaseThreadInitThunk + 0x14\r\nntdll!RtlUserThreadStart + 0x21\r\n```\r\n\r\nI've also seen an access violation (0xc0000005).\r\nBacktrace:\r\n```\r\nntdll!NtWaitForMultipleObjects + 0x14\r\nKERNELBASE!WaitForMultipleObjectsEx + 0x106\r\nKERNELBASE!WaitForMultipleObjects + 0xe\r\nkernel32!WerpReportFaultInternal + 0x3ce\r\nkernel32!WerpReportFault + 0x73\r\nKERNELBASE!UnhandledExceptionFilter + 0x35b\r\nntdll!RtlUserThreadStart$filt$0 + 0x38\r\nntdll!_C_specific_handler + 0x96\r\nntdll!RtlpExecuteHandlerForException + 0xd\r\nntdll!RtlDispatchException + 0x358\r\nntdll!KiUserExceptionDispatch + 0x2e\r\nstd_crash!core::str::run_utf8_validation + 0x40\r\nstd_crash!core::str::from_utf8 + 0x1f\r\nstd_crash!std::sys_common::backtrace::output_fileline + 0x184\r\nstd_crash!std::sys_common::backtrace::_print::{{closure}} + 0x31\r\nstd_crash!std::sys::imp::backtrace::printing::printing::foreach_symbol_fileline + 0xc9\r\nstd_crash!std::sys_common::backtrace::_print + 0xad6\r\nstd_crash!std::sys_common::backtrace::print + 0x22\r\nstd_crash!std::panicking::default_hook::{{closure}} + 0x1a4\r\nstd_crash!std::panicking::default_hook + 0x1dd\r\nstd_crash!std::panicking::rust_panic_with_hook + 0x2e8\r\nstd_crash!std::panicking::begin_panic<str*> + 0x62\r\nstd_crash!std::collections::hash::map::test_map::test_placement_panic::mkpanic + 0x18\r\nstd_crash!std::collections::hash::map::test_map::test_placement_panic::{{closure}} + 0x55\r\nstd_crash!core::ops::function::FnOnce::call_once + 0x55\r\nstd_crash!std::panic::{{impl}}::call_once + 0x55\r\nstd_crash!std::panicking::try::do_call<std::panic::AssertUnwindSafe<closure>,()> + 0x74\r\nstd_crash!panic_unwind::__rust_maybe_catch_panic + 0x22\r\nstd_crash!std::panicking::try + 0x32\r\nstd_crash!std::panic::catch_unwind + 0x32\r\nstd_crash!std::collections::hash::map::test_map::test_placement_panic + 0x1ef\r\nstd_crash!test::run_test::{{closure}} + 0x5\r\nstd_crash!core::ops::function::FnOnce::call_once + 0x5\r\nstd_crash!test::{{impl}}::call_box<(),closure> + 0x1e\r\nstd_crash!panic_unwind::__rust_maybe_catch_panic + 0x22\r\nstd_crash!std::panicking::try + 0x38\r\nstd_crash!std::panic::catch_unwind + 0x38\r\nstd_crash!test::run_test::run_test_inner::{{closure}} + 0x168\r\nstd_crash!std::sys_common::backtrace::__rust_begin_short_backtrace<closure,()> + 0x1df\r\nstd_crash!std::thread::{{impl}}::spawn::{{closure}}::{{closure}} + 0x48\r\nstd_crash!std::panic::{{impl}}::call_once + 0x48\r\nstd_crash!std::panicking::try::do_call<std::panic::AssertUnwindSafe<closure>,()> + 0x58\r\nstd_crash!panic_unwind::__rust_maybe_catch_panic + 0x22\r\nstd_crash!std::panicking::try + 0x7a\r\nstd_crash!std::panic::catch_unwind + 0x7a\r\nstd_crash!std::thread::{{impl}}::spawn::{{closure}} + 0xd8\r\nstd_crash!alloc::boxed::{{impl}}::call_box<(),closure> + 0x123\r\nstd_crash!alloc::boxed::{{impl}}::call_once + 0x7\r\nstd_crash!std::sys_common::thread::start_thread + 0x66\r\nstd_crash!std::sys::imp::thread::{{impl}}::new::thread_start + 0x7c\r\nkernel32!BaseThreadInitThunk + 0x14\r\nntdll!RtlUserThreadStart + 0x21\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46243/timeline", "performed_via_github_app": null, "state_reason": null}