{"url": "https://api.github.com/repos/rust-lang/rust/issues/107362", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107362/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107362/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107362/events", "html_url": "https://github.com/rust-lang/rust/issues/107362", "id": 1559746060, "node_id": "I_kwDOAAsO6M5c99YM", "number": 107362, "title": "[ICE]: Panic with recursive type + GAT", "user": {"login": "douglas-raillard-arm", "id": 23336875, "node_id": "MDQ6VXNlcjIzMzM2ODc1", "avatar_url": "https://avatars.githubusercontent.com/u/23336875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/douglas-raillard-arm", "html_url": "https://github.com/douglas-raillard-arm", "followers_url": "https://api.github.com/users/douglas-raillard-arm/followers", "following_url": "https://api.github.com/users/douglas-raillard-arm/following{/other_user}", "gists_url": "https://api.github.com/users/douglas-raillard-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/douglas-raillard-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/douglas-raillard-arm/subscriptions", "organizations_url": "https://api.github.com/users/douglas-raillard-arm/orgs", "repos_url": "https://api.github.com/users/douglas-raillard-arm/repos", "events_url": "https://api.github.com/users/douglas-raillard-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/douglas-raillard-arm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2023-01-27T13:09:31Z", "updated_at": "2023-02-09T16:24:36Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Code\n\n```Rust\npub trait Functor\r\n{\r\n    type With<T>: Functor;\r\n}\r\n\r\npub struct IdFunctor<T>(T);\r\nimpl<T> Functor for IdFunctor<T> {\r\n    type With<T2> = IdFunctor<T2>;\r\n}\r\n\r\nimpl<T> Functor for Vec<T> {\r\n    type With<T2> = Vec<T2> ;\r\n}\r\n\r\n\r\npub struct Compose<F1, F2, T>(F1::With<F2::With<T>>)\r\nwhere\r\n    F1: Functor + ?Sized,\r\n    F2: Functor + ?Sized;\r\n\r\nimpl<F1, F2, T> Functor for Compose<F1, F2, T>\r\nwhere\r\n    F1: Functor + ?Sized,\r\n    F2: Functor + ?Sized\r\n{\r\n    type With<T2> = F1::With<F2::With<T2>> ;\r\n}\r\n\r\npub enum Value<F>\r\nwhere\r\n    F: Functor + ?Sized,\r\n{\r\n    SignedInt(*mut F::With<i64>),\r\n    Array(*mut Value<Compose<F, Vec<()>, ()>>),\r\n\r\n}\r\n\r\nfn main() {\r\n    let x: Value<IdFunctor<()>> = Value::SignedInt(&mut IdFunctor(1));\r\n}\n```\n\n\n### Affected release channels\n\n- [ ] Previous Stable\n- [X] Current Stable\n- [X] Current Beta\n- [x] Current Nightly\n\n### Rust Version\n\n```Shell\nCompiled on the playground so here is the info I could gather:\r\n\r\nnote: rustc 1.69.0-nightly (d7948c843 2023-01-26) running on x86_64-unknown-linux-gnu\r\nnote: compiler flags: --crate-type bin -C embed-bitcode=no -C codegen-units=1 -C debuginfo=2\r\nnote: some of the compiler flags provided by cargo are hidden\n```\n\n\n### Current error output\n\n```Shell\n\u00a0\r\n\u28ff\r\nStandard Error\r\n\r\n   Compiling playground v0.0.1 (/playground)\r\nwarning: unused variable: `x`\r\n  --> src/main.rs:39:9\r\n   |\r\n39 |     let x: Value<IdFunctor<()>> = Value::SignedInt(&mut IdFunctor(1));\r\n   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\r\n   |\r\n   = note: `#[warn(unused_variables)]` on by default\r\n\r\nthread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 0', /cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0\r\n\r\n[...]\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.69.0-nightly (d7948c843 2023-01-26) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: --crate-type bin -C embed-bitcode=no -C codegen-units=1 -C debuginfo=2\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [is_sized_raw] computing whether `_` is `Sized`\r\n#1 [layout_of] computing layout of `*mut _`\r\n#2 [layout_of] computing layout of `*mut <Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<IdFunctor<()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()> as Functor>::With<i64>`\r\n#3 [layout_of] computing layout of `Value<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<Compose<IdFunctor<()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>, alloc::vec::Vec<()>, ()>>`\r\nend of query stack\r\nwarning: `playground` (bin \"playground\") generated 1 warning (run `cargo fix --bin \"playground\"` to apply 1 suggestion)\r\nerror: could not compile `playground`; 1 warning emitted\n```\n\n\n### Backtrace\n\n```Shell\nApologies for pastebin, but github rejects issues with more than 65536 char:\r\nhttps://pastebin.com/jsEBz8MM\n```\n\n\n### Anything else?\n\nreplacing this:\r\n```rust\r\n    SignedInt(*mut F::With<i64>),\r\n[...]\r\n    let x: Value<IdFunctor<()>> = Value::SignedInt(&mut IdFunctor(1));\r\n```\r\n\r\nBy that:\r\n```rust\r\n    SignedInt(F::With<i64>),\r\n[...]\r\n    let x: Value<IdFunctor<()>> = Value::SignedInt(IdFunctor(1));\r\n```\r\n\r\nbrings a \"normal compiler error\":\r\n```\r\nerror[[E0275]](https://doc.rust-lang.org/nightly/error-index.html#E0275): overflow evaluating the requirement `Value<Compose<Compose<Compose<Compose<Compose<Compose<..., ..., ...>, ..., ...>, ..., ...>, ..., ...>, ..., ...>, ..., ...>>: Sized`\r\n  |\r\n  = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`playground`)\r\n```\r\n\r\nWhich seems pretty consistent with the error encountered with the pointer:\r\n```\r\n#0 [is_sized_raw] computing whether `_` is `Sized`\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107362/timeline", "performed_via_github_app": null, "state_reason": null}