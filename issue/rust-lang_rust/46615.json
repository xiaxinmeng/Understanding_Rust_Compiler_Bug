{"url": "https://api.github.com/repos/rust-lang/rust/issues/46615", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46615/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46615/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46615/events", "html_url": "https://github.com/rust-lang/rust/issues/46615", "id": 280778773, "node_id": "MDU6SXNzdWUyODA3Nzg3NzM=", "number": 46615, "title": "Confusing error message when trait is impl'd on &T and bounds are not satisfied", "user": {"login": "Rantanen", "id": 385385, "node_id": "MDQ6VXNlcjM4NTM4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/385385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rantanen", "html_url": "https://github.com/Rantanen", "followers_url": "https://api.github.com/users/Rantanen/followers", "following_url": "https://api.github.com/users/Rantanen/following{/other_user}", "gists_url": "https://api.github.com/users/Rantanen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rantanen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rantanen/subscriptions", "organizations_url": "https://api.github.com/users/Rantanen/orgs", "repos_url": "https://api.github.com/users/Rantanen/repos", "events_url": "https://api.github.com/users/Rantanen/events{/privacy}", "received_events_url": "https://api.github.com/users/Rantanen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-10T03:34:37Z", "updated_at": "2020-06-11T18:01:11Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Example code: https://play.rust-lang.org/?gist=6e7c1a4ad58c82717271ad4d5cef1181&version=stable\r\n\r\nThe form that I encountered was: \r\n```\r\nerror[E0277]: the trait bound `&Ident: std::cmp::PartialEq<str>` is not satisfied\r\n  --> src/main.rs:22:18\r\n   |\r\n22 |         if ident.eq( \"STRING\" ) {\r\n   |                  ^^ can't compare `&Ident` with `str`\r\n   |\r\n   = help: the trait `std::cmp::PartialEq<str>` is not implemented for `&Ident`\r\n```\r\n\r\n`syn::Ident` implements `PartialEq<T> where T: AsRef<str>` so I know I can compare `Ident` with a `str`.\r\n\r\nMy first reaction was confusion with `str`. It's so rare to see `str` alone that my first instinct was to ensure that what I have is `&str`. While still confused, I decided to throw an `&` in front of my parameter. To my surprise that fixed the error!\r\n\r\n... but now I was even more confused. `ident.eq( &\"Static string\" )` looks a bit weird - and why would it even make a difference?\r\n\r\nAfter a while I realized that my `ident` was a `ref` of `&Ident` - so essentially a double-borrowed `&&Ident`. But as Rust has auto-(de)ref for method calls, this shouldn't matter. I've had `&&&...Foo` types in the past by being overly eager with `&`'s and these have worked just fine without needing any manual `*`'s.\r\n\r\nHowever I've now concluded that the problem here is the built-in `impl PartialEq<&B> for &A`.\r\n\r\nWith `let ident : &&Ident`, the `ident.eq(..)` gets resolved to:\r\n\r\n```rust\r\nimpl<'a, 'b, A (&Ident), B = ?>PartialEq<&B> for &A\r\nwhere A (&Ident) : PartialEq<B> {\r\n    fn eq( &self, other: &B ) -> bool;\r\n}\r\n```\r\nWhere `B` ends up as `str` to make the `eq(..)` signature match `&str`. Thus the error.\r\n\r\nIn any case the biggest issue here is the \"friendly\" error message, I feel: `can't compare '&Ident' with 'str'`. Both types here seem wrong.\r\n\r\n- On the right side as far as I can tell, `\"STRING\"` is `&str`, not `str`. \r\n- On the left side the type should be `&&Ident`, not an `&Ident`.\r\n\r\nI guess the parameters are wrong, because Rust does one cycle of derefs. The original types are `&&Ident` and `&str`, but the impl above drops one `&` from each of these.\r\n\r\nWhat purpose does the `PartialEq<&B> for &A` impl serve anyway? If that impl didn't exist, wouldn't rustc do derefs for `&&&A` until it found impl for `A`? Then it would deref the argument. Or is this unwanted behavior in this scenario - even if this is how the auto-deref works everywhere else? Or ~~am I missing~~ I am probably missing some other detail that prevents this from working.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46615/timeline", "performed_via_github_app": null, "state_reason": null}