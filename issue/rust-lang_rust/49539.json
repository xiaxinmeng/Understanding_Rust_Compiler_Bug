{"url": "https://api.github.com/repos/rust-lang/rust/issues/49539", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49539/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49539/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49539/events", "html_url": "https://github.com/rust-lang/rust/issues/49539", "id": 310234880, "node_id": "MDU6SXNzdWUzMTAyMzQ4ODA=", "number": 49539, "title": "Optimization opportunity for constructor functions", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 884691893, "node_id": "MDU6TGFiZWw4ODQ2OTE4OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-codegen", "name": "WG-codegen", "color": "c2e0c6", "default": false, "description": "Working Group: Codegen (Runtime perf and code size)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-03-31T11:44:28Z", "updated_at": "2021-03-13T19:42:18Z", "closed_at": "2021-03-13T19:42:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following constructor:\r\n```rust\r\nstruct Foo([u8; 512]);\r\n\r\nimpl Foo {\r\n    fn new() -> Foo {\r\n        Foo([42u8; 512])\r\n    }\r\n}\r\n```\r\n\r\n(stupid newtype with large and stupid content to trigger a recognizable `memset` call)\r\n\r\nNow, let's say we use the constructor in some way:\r\n\r\n```rust\r\npub fn foo() -> Option<Foo> {\r\n    Some(Foo::new())\r\n}\r\n```\r\n\r\nTypical rust would essentially have lots of constructs like this, in more elaborated forms.\r\n\r\nThe code above compiles to the following straightforward code:\r\n```asm\r\n  push rbx\r\n  mov rbx, rdi            // rdi is the pointer we got from the caller to store the (large) Option result.\r\n  lea rdi, [rbx + 1]      // \\\r\n  mov esi, 42             // | memset(ptr + 1, 42, 512)\r\n  mov edx, 512            // |\r\n  call memset@PLT         // /\r\n  mov byte ptr [rbx], 1   // set the Option discriminant for Some.\r\n  mov rax, rbx            // return the pointer where the Option is.\r\n  pop rbx\r\n  ret\r\n```\r\n\r\nNow, if for some reason the constructor is not inlined (and that can happen), here is what this becomes:\r\n```asm\r\n  push r14\r\n  push rbx\r\n  sub rsp, 520            // prepare space on the stack\r\n  mov rbx, rdi            // rdi is the pointer we got from the caller to store the (large) Option result.\r\n  lea r14, [rsp + 8]      // \\\r\n  mov rdi, r14            // | Foo::new(&buffer_on_the_stack)\r\n  call Foo::new           // / meaning Foo::new will call memset(&buffer_on_the_stack, 42, 512)\r\n  lea rdi, [rbx + 1]      // \\\r\n  mov edx, 512            // | memcpy(ptr + 1, &buffer_on_the_stack, 512)\r\n  mov rsi, r14            // |\r\n  call memcpy@PLT         // /\r\n  mov byte ptr [rbx], 1   // set the Option discriminant for Some.\r\n  mov rax, rbx            // return the pointer where the Option is.\r\n  add rsp, 520\r\n  pop rbx\r\n  pop r14\r\n  ret\r\n```\r\n\r\nI don't see a reason why this couldn't be the following instead:\r\n```asm\r\n  push rbx\r\n  mov rbx, rdi            // rdi is the pointer we got from the caller to store the (large) Option result.\r\n  lea rdi, [rbx + 1]      // \\\r\n  call Foo::new           // / Foo::new(ptr + 1)\r\n  mov byte ptr [rbx], 1   // set the Option discriminant for Some.\r\n  mov rax, rbx            // return the pointer where the Option is.\r\n  pop rbx\r\n  ret\r\n```\r\n\r\navoiding a useless copy that inlining avoided.", "closed_by": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49539/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49539/timeline", "performed_via_github_app": null, "state_reason": "completed"}