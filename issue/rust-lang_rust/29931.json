{"url": "https://api.github.com/repos/rust-lang/rust/issues/29931", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29931/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29931/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29931/events", "html_url": "https://github.com/rust-lang/rust/issues/29931", "id": 117846001, "node_id": "MDU6SXNzdWUxMTc4NDYwMDE=", "number": 29931, "title": "Vec's reallocation strategy needs settling", "user": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 48, "created_at": "2015-11-19T16:05:41Z", "updated_at": "2023-05-07T03:31:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Background\r\n\r\nCurrently, Vec's documentation frequently contains the caveat that \"more space may be reserved than requested\". This is primarily in response to the fact that jemalloc (or any other allocator) can actually reserve more space than you requested because it relies on fixed size-classes to more effeciently dole out memory. (see the table [here](https://web.archive.org/web/20150529223415/http://www.canonware.com/download/jemalloc/jemalloc-latest/doc/jemalloc.html))\r\n\r\nJemalloc itself exposes a `malloc_usable_size` function which can be used to determine how much capacity was _actually_ allocated for a pointer, as well as `nallocx` which can be used to determine how much capacity _will_ be allocated for a given size and alignment. Vec can in principle query one of these methods and update its capacity field with the result.\r\n\r\nThe question at hand is: _is this ever worth it to check `usable_capacity`, and is it ever undesirable?_\r\n\r\nThis issue was kicked off by Firefox devs who have experience doing exactly this optimization, and claim it being profitable. Facebook has also claimed excellent dividends in making its allocation strategy more jemalloc friendly, but to my knowledge do not actually query usable_capacity.\r\n\r\nCurrently our alloction strategy is almost completely naive. One can see the source [here](http://doc.rust-lang.org/1.4.0/src/alloc/raw_vec.rs.html#191-202), which boils down to:\r\n\r\n``` rust\r\nlet new_cap = if self.cap == 0 { \r\n    4\r\n} else { \r\n    2 * self.cap \r\n}\r\n```\r\n\r\nTo the best of my knowledge, [this](https://github.com/facebook/folly/blob/badc3ebe7ef9d370e0d4b9d110f5dad6f6284d7e/folly/FBVector.h#L1127-L1156) is all the capacity logic for FBVector, which boils down to:\r\n\r\n``` rust\r\nlet new cap = if self.cap == 0 {\r\n    max(64 / size_of_elem, 1)   // empty\r\n} else if self.cap < 4096 / size_of_elem) {\r\n    self.cap * 2                // small\r\n} else if self.cap > 4096 * 32 / size_of_elem) {\r\n    self.cap * 2                // huge\r\n} else {\r\n    (self.cap * 3 + 1) / 2      // moderate\r\n}\r\n```\r\n\r\nThe only major deviation from Rust today being a 1.5 growth factor for \"moderate\" sized allocations. Note that there _is_ a [path](https://github.com/facebook/folly/blob/26d9f3f3cc34d30f7e73a6f12a3bae5102c7512e/folly/small_vector.h#L636-L644) in their small_vector type that queries malloc_usable_size.\r\n\r\nUnfortunately I've been unable to find good information on what Firefox does here. The best I could find is [this discussion](https://bugzilla.mozilla.org/show_bug.cgi?id=419131) which demonstrates big wins --  6.5% less calls to malloc and 11% less memory usage. However the effort seems to peter out when it is asserted that this is obsoleted by Gecko just using power-of-two capacities. mxr and dxr seem to suggest it's only used for statistics. \r\n\r\nHopefully Firefox and Facebook devs can chime in on any experiences.\r\n\r\n# Going Forward\r\n\r\nI have several outstanding concerns before we push further on this matter.\r\n\r\nRust is not C++, so I am partially suspicious of any benchmarks that demonstrate value in C++. In particular, the proliferation of `size_hint` and `extend` could completely blast away any need to be clever with capacities for most programs. I would also expect a large Rust application to frob the allocator less in general just because we default to move semantics, and don't have implicit assignment/copy constructors. Also, Rust programs are much more \"reckless\" with just passing around pointers into buffers because the borrow checker will always catch misuse. Slices in particular make this incredibly ergonomic. We need Rust-specific benchmarks. I'm sure the Hyper, Servo, Glium, Serde, and Rust devs all have some interesting workloads to look at. \r\n\r\nRust's Vec is basically the community's `malloc`/`calloc`, because actual malloc is unstable and unsafe. We explicitly support extracting the Vec's pointer and taking control of the allocation. In that regard I believe it is desirable for it to be maximally well-behaved and performant for \"good\" cases (knowing exactly the capacity you want, having no use for extra capacity). There's a certain value in requesting a certain capacity, and getting the capacity. Both `nallocx` and `malloc_usable_size` are virtual function calls with non-trivial logic, and may have unacceptable overhead for responsible users of Vec.\r\n\r\nNote that anything we do must enable `Vec` and `Box<[T]>` to reliably roundtrip through each other without reallocating in certain cases. If I invoke `shrink_to_fit` or `with_capacity`, it ought to not reallocate when I try to convert to a `Box<[T]>`. As far as I can tell, this should be possible to uphold even when using `malloc_usable_size` because jemalloc is \"fuzzy\" and only requires that the given size is somewhere between the requested one and the usable one. \r\n\r\nAnything we do must also work with allocators that aren't jemalloc. This may be as simple as setting `usable_size = requested_size` for every allocator that isn't jemalloc.\r\n\r\nCC @pnkfelix @erickt @reem @seanmonstar @tomaka @SimonSapin @larsberg @pcwalton @Swatinem @nnethercote\r\n\r\nCC #29848 #29847 #27627\r\n\r\nCC @rust-lang/libs \r\n\r\nEDIT(workingjubilee, 2023-05-06): Originally one of the links touched on the master branch of folly instead of a permalink to a specific commit. Linkrot claimed the one to jemalloc's docs. These have been updated with a permalink and a Wayback Machine link, respectively.", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29931/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29931/timeline", "performed_via_github_app": null, "state_reason": null}