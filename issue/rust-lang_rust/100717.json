{"url": "https://api.github.com/repos/rust-lang/rust/issues/100717", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100717/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100717/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100717/events", "html_url": "https://github.com/rust-lang/rust/issues/100717", "id": 1343131042, "node_id": "I_kwDOAAsO6M5QDo2i", "number": 100717, "title": "Diagnostic Translation", "user": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 3537211959, "node_id": "LA_kwDOAAsO6M7S1ZI3", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-impl-incomplete", "name": "S-tracking-impl-incomplete", "color": "4682b4", "default": false, "description": ""}, {"id": 4417099521, "node_id": "LA_kwDOAAsO6M8AAAABB0eXAQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-translation", "name": "A-translation", "color": "f7e101", "default": false, "description": "Area: Translation infrastructure, and migrating existing diagnostics to SessionDiagnostic"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 106, "created_at": "2022-08-18T13:46:20Z", "updated_at": "2023-06-20T01:30:38Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The Rust Diagnostics working group is leading an effort to add support for internationalization of error messages in the compiler, allowing the compiler to produce output in languages other than English. This issue tracks the current status of the effort, which was announced in the [*\"Contribute to the diagnostic translation effort!\"* post on *Inside Rust*](https://blog.rust-lang.org/inside-rust/2022/08/16/diagnostic-effort.html).\r\n\r\n## What's the current status?\r\nDiagnostic translation will take a long time to be finished. At a high-level, there are four primary steps: \r\n\r\n- [x] Implement initial translation infrastructure\r\n- [ ] Make diagnostics translatable through migration to new infrastructure (**we are here**)\r\n- [ ] Set up Pontoon for translators to use\r\n- [ ] Establish translation teams for different languages\r\n- [ ] Implement infrastructure for distributing language packs in collaboration with infrastructure/release teams (as appropriate)\r\n\r\nImplementing the initial translation infrastructure provides the groundwork that enables diagnostic messages to be made translatable at all. That initial infrastructure is largely completed - there might be some gaps that we'll discover and patch up as we continue - but it's almost all there.\r\n\r\nNext, all of the diagnostics in rustc need to be modified so that they can be translatable. There's some bad news - that's a _lot_ of work. But there's also some good news - that's a lot of _highly parallelizable_ work that you can help with! It doesn't require any familiarity with the Rust compiler, just an eagerness to get involved.\r\n\r\n## How to get started?\r\nIt's very easy to get started, the process looks like the following:\r\n\r\n1. Join [our Zulip chat](https://rust-lang.zulipchat.com/#narrow/stream/336883-i18n/topic/.23100717.20diag.20translation) and say hello! Everyone is very friendly and eager to help if you have any trouble.\r\n1. [Set up a development environment](https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html) for the compiler.\r\n1. Identify a module to migrate (see _\"Identifying diagnostics to migrate\"_ below).\r\n1. Migrate diagnostics (see _\"Migrate diagnostics\"_ below).\r\n1. Open a pull request with your changes.\r\n1. Repeat and profit!\r\n\r\n### Identifying diagnostics to migrate\r\nOur goal is to migrate every diagnostic in the compiler to be translatable and to switch from using a \"diagnostic builder\" to using \"diagnostic structs\". That's a lot of diagnostics, so we're splitting the work up by module in the compiler so that nobody steps on anyone else's toes.\r\n\r\n- [x] `rustc_apfloat`\r\n  - Completed by @5225225\r\n  - #100723\r\n- [x] `rustc_arena` \r\n  - Completed by @5225225 \r\n  - #100723\r\n- [x] `rustc_ast` \r\n  - Completed by @5225225\r\n  - #100723\r\n- [x] `rustc_ast_lowering` \r\n  - Completed by @JeanCASPAR\r\n  - #100724\r\n  - #101049\r\n- [x] `rustc_ast_passes`\r\n  - Currently being worked on by @finalchild\r\n  - #100694\r\n  - #101657\r\n  - https://github.com/rust-lang/rust/pull/108456\r\n- [x] `rustc_ast_pretty`\r\n  - Completed by @5225225\r\n  - #100723\r\n- [x] `rustc_attr`\r\n  - Completed by @hampuslidin\r\n  - #100836\r\n- [ ] `rustc_borrowck`\r\n  - Currently being worked on by @AndyJado\r\n  - #100798\r\n  - #100864\r\n  - #100871\r\n  - #100900\r\n  - #101042\r\n  - #101305 \r\n  - #101301\r\n  - #101276\r\n  - #103469\r\n  - #101686\r\n  - #101275\r\n  - #103559\r\n  - #103960\r\n  - #104055\r\n- [ ] `rustc_builtin_macros`\r\n  - Available to be worked on!\r\n  - #101408\r\n  - #101935\r\n  - #110092\r\n- [ ] `rustc_codegen_cranelift`\r\n  - Blocked - hard to make the errors use the rustc infrastructure.\r\n- [x] `rustc_codegen_gcc`\r\n  - Completed by @ellishg\r\n  - #101075 \r\n  - #102509\r\n- [x] `rustc_codegen_llvm`\r\n  - Currently being worked on by @SLASHLogin\r\n  - #101005\r\n- [ ] `rustc_codegen_ssa`\r\n  - Currently being worked on by @JhonnyBillM\r\n  - #102612\r\n  - #103792\r\n- [ ] `rustc_const_eval` \r\n  - Currently being worked on by @fee1-dead\r\n  - #100738 \r\n- [x] `rustc_data_structures`\r\n  - Completed by @5225225 \r\n  - #100723\r\n- [x] `rustc_driver` \r\n  - Completed by @adriantombu\r\n  - #100890 \r\n- [x] `rustc_error_codes`\r\n  - Completed by @5225225 \r\n  - #100723\r\n- [x] `rustc_error_messages` \r\n  - Completed by @5225225 \r\n  - #100723\r\n- [ ] `rustc_errors` \r\n  - Available to be worked on!\r\n  - #102684\r\n- [ ] `rustc_expand` \r\n  - Currently being worked on by @tshepang\r\n  - #100651\r\n  - #108436\r\n- [x] `rustc_feature` \r\n  - Completed by @5225225 \r\n  - #100723\r\n- [x] `rustc_fs_util` \r\n  - Completed by @5225225 \r\n  - #100723\r\n- [x] `rustc_graphviz` \r\n  - Completed by @5225225 \r\n  - #100723\r\n- [x] `rustc_hir` \r\n  - Completed by @5225225 \r\n  - #100723\r\n- [ ] `rustc_hir_analysis` \r\n  - Currently being worked on by @obeis\r\n  - #108434\r\n- [x] `rustc_hir_pretty` \r\n  - Completed by @5225225 \r\n  - #100723\r\n- [ ] `rustc_hir_typeck` \r\n  - Available to work on!\r\n  - #100722\r\n  - #101007 \r\n- [x] `rustc_incremental` \r\n  - Completed by @davidtwco\r\n  - #100754\r\n- [x] `rustc_index`\r\n  - Completed by @5225225 \r\n  - #100723\r\n- [ ] `rustc_infer` \r\n  - Currently being worked on by @IntQuant\r\n  - #100843 \r\n  - #101153\r\n  - #101936 \r\n- [x] `rustc_interface` \r\n  - Completed by @SkiFire13\r\n  - #100808\r\n- [x] `rustc_lexer`\r\n  - Completed by @5225225 \r\n  - #100723 \r\n- [ ] `rustc_lint` \r\n  - Currently being worked on by @Rejyr\r\n  - #100776\r\n  - #101138\r\n- [x] `rustc_lint_defs` \r\n  - Completed by @5225225\r\n  - #100723\r\n- [x] `rustc_llvm` \r\n  - Completed by @5225225 \r\n  - #100723\r\n- [x] `rustc_log`\r\n  - Completed by @5225225 in #100723 \r\n- [x] `rustc_macros` \r\n  - Completed by @5225225 in #100723\r\n- [x] `rustc_metadata`\r\n  - Completed by @CleanCut in #100928\r\n- [ ] `rustc_middle`\r\n  - Available to work on!\r\n  - #101021\r\n- [ ] `rustc_mir_build`\r\n  - Available to work on!\r\n  - #100854 (continue from this partially completed work!)\r\n- [x] `rustc_mir_dataflow` \r\n  - Completed by @5225225 \r\n  - #100744\r\n- [x] `rustc_monomorphize`\r\n  - Completed by @CleanCut in #100730\r\n- [ ] `rustc_parse`\r\n  - Currently being worked on by @Xiretza\r\n  - #100667\r\n  - #100713\r\n  - #101619 \r\n- [x] `rustc_parse_format` \r\n  - Completed by @5225225 \r\n  - #100723\r\n- [x] `rustc_passes`\r\n  - Completed by @CleanCut, @rdvdev2 and @diegooliveira\r\n  - #100870\r\n  - #102110\r\n  - #101815\r\n  - #102110\r\n  - #103397\r\n- [x] `rustc_plugin_impl` \r\n  - Completed by @Facel3ss1\r\n  - #100768\r\n- [x] `rustc_privacy` \r\n  - Completed by @davidtwco\r\n  - #98420\r\n- [x] `rustc_query_impl` \r\n  - Completed by @5225225\r\n  - #100723\r\n- [x] `rustc_query_system`\r\n  - Completed by @evopen \r\n  - #100844\r\n  - #102623\r\n- [ ] `rustc_resolve` \r\n  - Currently being worked on by @rajputrajat\r\n  - #101162\r\n- [x] `rustc_save_analysis` \r\n  - Completed by @wonchulee in #100780\r\n- [x] `rustc_serialize`\r\n  - Completed by @5225225\r\n  - #100723\r\n- [x] `rustc_session`\r\n  - Completed by @LuisCardosoOliveira\r\n  - #100753 101466\r\n  - #101041 \r\n  - #101266 \r\n- [x] `rustc_smir`\r\n  - Completed by @5225225 \r\n  - #100723\r\n- [x] `rustc_span` \r\n  - Completed by @5225225 \r\n  - #100723\r\n- [x] `rustc_symbol_mangling` \r\n  - Completed by @JhonnyBillM\r\n  - #100831\r\n- [x] `rustc_target` \r\n  - Completed by @5225225 \r\n  - #100723\r\n- [ ] `rustc_trait_selection::traits::error_reporting::suggestions` \r\n  - Available to work on!\r\n  - #101466 \r\n- [ ] `rustc_trait_selection` (everything else) \r\n  - Available to work on!\r\n  - #100814\r\n- [x] `rustc_traits`\r\n  - Completed by @5225225 \r\n  - #100723\r\n- [x] `rustc_transmute` \r\n  - Completed by @JhonnyBillM \r\n  - #100842\r\n- [x] `rustc_ty_utils` \r\n  - Available to work on!\r\n  - #100735\r\n  - #110095\r\n- [x] `rustc_type_ir`\r\n  - Completed by @JhonnyBillM \r\n  - #100721\r\n- [ ] `rustfmt`\r\n  - Available to be worked on!\r\n- [ ] `clippy`\r\n  - Available to be worked on!\r\n- [ ] `rustdoc`\r\n  - Available to be worked on!-\r\n\r\n**Note:** Some of these crates might not have diagnostics in them, in which case we'll just enable our internal lints on them. Some might have lots and lots of work that we can split up further, let us know! If there aren't many crates left, then feel free to leave a comment asking if someone is still working on their crate (check if they commented or have put a PR up recently).\r\n\r\nOnce you've picked a module (**leave a comment letting us know!**), how do you find the diagnostics to migrate? We've created rustc-internal lints that you can apply to a module which will produce an error for every diagnostic that hasn't been migrated.\r\n\r\n```rust=\r\n#![deny(rustc::untranslatable_diagnostic)]\r\n#![deny(rustc::diagnostic_outside_of_impl)]\r\n```\r\n\r\n(*an example of using these would just be adding them to the top of a file*)\r\n\r\nAfter adding these attributes, you can run `./x.py check` to build the compiler in check mode (just like `cargo check` in another project). You'll notice a bunch of errors that will look something like these:\r\n\r\n```text=\r\nerror: diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\r\n    --> compiler/rustc_parse/src/parser/mod.rs:1443:40\r\n     |\r\n1443 |     let mut err = sess.span_diagnostic.struct_span_err(\r\n     |                                        ^^^^^^^^^^^^^^^\r\n\r\nerror: diagnostics should be created using translatable messages\r\n    --> compiler/rustc_parse/src/parser/mod.rs:1443:40\r\n     |\r\n1443 |     let mut err = sess.span_diagnostic.struct_span_err(\r\n     |                                        ^^^^^^^^^^^^^^^\r\n```\r\n\r\nThere will be two errors for each diagnostic that isn't migrated:\r\n\r\n1. *\"diagnostics should be created using translatable messages\"*\r\n    - This error occurs when a diagnostic function is being invoked with something that isn't a translatable message (like a string literal or a formatted string).\r\n        - e.g. `err.label(\"an example label\")` instead of `err.label(fluent::example_label)`\r\n        - `fluent::example_label` corresponds to a message in a \"Fluent resource\" which we can provide different versions of for each language.\r\n2. *\"diagnostics should only be created in `Diagnostic`/`Subdiagnostic` impls\"*\r\n    - This error occurs when a diagnostic function is being called outside of an impl of `Diagnostic` or `Subdiagnostic`. One of our goals with this migration is to move all diagnostic emission logic into impls on structs, as it helps keep the compiler tidy and works towards other goals of the diagnostics working group.\r\n    - There are two ways to resolve this:\r\n        1. Using a diagnostic derive to implement them automatically (preferred!)\r\n        1. Implementing one of these traits (`Diagnostic` for errors and warnings, `LintDiagnostic` for lints, or `Subdiagnsostic` for parts of an error/warning/lint) manually.\r\n    - See _\"Migrate diagnostics\"_ for more on these.\r\n\r\nWe'll know we're finished when we can leave those attributes on every module in the compiler.\r\n\r\n### Migrate diagnostics\r\nOkay, so you've got a diagnostic in front of you that you need to migrate.. now what? \r\n\r\n- There's an introduction to performing a migration in the [*\"Contribute to the diagnostic translation effort!\"* post on *Inside Rust*](https://blog.rust-lang.org/inside-rust/2022/08/16/diagnostic-effort.html), this should serve as a decent introduction to the process.\r\n- There's detailed documentation on [diagnostic structs](https://rustc-dev-guide.rust-lang.org/diagnostics/diagnostic-structs.html) and on [diagnostic translation](https://rustc-dev-guide.rust-lang.org/diagnostics/translation.html) in the developer guide that should be useful reference material.\r\n- There are a lot of pull requests that perform migrations that you can dig through for examples, just [look for pull requests labelled `A-translation`](https://github.com/rust-lang/rust/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+label%3AA-translation).\r\n\r\nWhile migrating diagnostics, there might be cases you run into that we've not run across yet. Let us know in Zulip, you might be able to experiment and teach us how to translate some diagnostics, or there may be an opportunity to extend our core infrastructure (e.g. the derives). Don't worry though, you can always skip a diagnostic and leave it for someone else too.\r\n\r\n## Where to get help?\r\nDiscussion is primarily happening in the [`#i18n` stream on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/336883-i18n/topic/.23100717.20diag.20translation). Ask any questions you have in that chat and someone will try to help. If you don't get a response, feel free to ping `@davidtwco` or `@t-compiler/wg-diagnostics`.\r\n\r\n## One-off tasks\r\nSometimes there are one-off tasks which improve compiler infrastructure around translation or just make things easier to use, these are listed below, feel free to comment to take them:\r\n\r\n#### Completed\r\n- [x] ~~Extend `SessionDiagnostic` derive to work on enums ([context](https://github.com/rust-lang/rust/pull/100831#discussion_r951403293))~~ #102189\r\n- [x] ~~In [#100753](https://github.com/rust-lang/rust/pull/100753/files#diff-75e151b9de9e9418f72fab3e76335c676cbca4e50db984c2ddb63bdf1b7db3e3R375-R377), there are some functions annotated with `#[rustc_lint_diagnostics]` which is used to know when to trigger our internal lints, that are themselves triggering the internal lint - it would be good to change the internal lint so that it skips functions annotated with `#[rustc_lint_diagnostics]`.~~ #101230\r\n- [x] ~~Support `span_suggestions`-equivalent in diagnostic derives.~~ #103209\r\n- [x] ~~#103042~~\r\n- [x] ~~#104047~~\r\n\r\n#### In-progress\r\n\r\n#### To-do\r\n- [ ] Diagnostic migration lints won't fire on diagnostics emitted in macros, this might be something we can improve ([context](https://github.com/rust-lang/rust/pull/101075#issuecomment-1231791643))\r\n- [ ] Adding support for `DefId` to `Span` conversions in the derive macros, e.g. `#[primary_span(def_span)]` or something like that ([context](https://github.com/rust-lang/rust/pull/100814#discussion_r958612056)).\r\n- [ ] Better support for `Option<impl IntoDiagnosticArg>` ([context](https://github.com/rust-lang/rust/pull/101153#discussion_r959259504))\r\n- [ ] Better support for `MultiSpan` ([context](https://github.com/rust-lang/rust/pull/101153#discussion_r959262000)).\r\n- [ ] Compile-time checks for unused Fluent messages (#110754)\r\n- [ ] Add a `IntoDiagnosticSpan` trait that can be implemented for anything usable with `#[primary_span]` (i.e. so we can extend `#[primary_span]` support to `Ident` easily, for example) (partially complete at https://github.com/davidtwco/rust/tree/translation-into-diagnostic-span)\r\n- [ ] #101109\r\n- [x] #103539", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100717/reactions", "total_count": 17, "+1": 10, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 5, "rocket": 2, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100717/timeline", "performed_via_github_app": null, "state_reason": null}