{"url": "https://api.github.com/repos/rust-lang/rust/issues/10319", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/10319/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/10319/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/10319/events", "html_url": "https://github.com/rust-lang/rust/issues/10319", "id": 22213674, "node_id": "MDU6SXNzdWUyMjIxMzY3NA==", "number": 10319, "title": "Enhanced functions for Option", "user": {"login": "orenbenkiki", "id": 68190, "node_id": "MDQ6VXNlcjY4MTkw", "avatar_url": "https://avatars.githubusercontent.com/u/68190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orenbenkiki", "html_url": "https://github.com/orenbenkiki", "followers_url": "https://api.github.com/users/orenbenkiki/followers", "following_url": "https://api.github.com/users/orenbenkiki/following{/other_user}", "gists_url": "https://api.github.com/users/orenbenkiki/gists{/gist_id}", "starred_url": "https://api.github.com/users/orenbenkiki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orenbenkiki/subscriptions", "organizations_url": "https://api.github.com/users/orenbenkiki/orgs", "repos_url": "https://api.github.com/users/orenbenkiki/repos", "events_url": "https://api.github.com/users/orenbenkiki/events{/privacy}", "received_events_url": "https://api.github.com/users/orenbenkiki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-11-06T18:11:11Z", "updated_at": "2013-11-08T08:04:03Z", "closed_at": "2013-11-07T05:34:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found that defining the following made my code cleaner and shorter, something along these lins would be welcome in the standard library:\n\n``` rust\n/// More operations for options.\npub trait WhenOption<T> {\n    /// Call a function that borrows the value, if there is one.\n    fn when_some(&self, action: &fn(&T));\n\n    /// Call a function that borrows the mutable value, if there is one.\n    fn mut_when_some(&mut self, action: &fn(&mut T));\n\n    /// Call a function that takes the value, if there is one.\n    fn take_some(self, action: &fn(T));\n\n    /// Call a function that borrows the value, if there is one; otherwise\n    /// return a default.\n    fn when_some_or<U>(&self, default: U, action: &fn(&T) -> U) -> U;\n\n    /// Call a function that borrows the mutable value, if there is one;\n    /// otherwise return a default.\n    fn mut_when_some_or<U>(&mut self, default: U, action: &fn(&mut T) -> U) -> U;\n\n    /// Call a function that takes the value, if there is one; otherwise\n    /// return a default.\n    fn take_some_or<U>(self, default: U, action: &fn(T) -> U) -> U;\n\n    /// Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.\n    fn when_map<U>(&self, f: &fn(&T) -> U) -> Option<U>;\n}\n\n/// More operations for options.\nimpl<T> WhenOption<T> for Option<T> {\n    /// Call a function that borrows the value, if there is one.\n    fn when_some(&self, action: &fn(&T)) {\n        match self {\n            &None => (),\n            &Some(ref value) => action(value),\n        }\n    }\n\n    /// Call a function that borrows the mutable value, if there is one.\n    fn mut_when_some(&mut self, action: &fn(&mut T)) {\n        match self {\n            &None => (),\n            &Some(ref mut value) => action(value),\n        }\n    }\n\n    /// Call a function that takes the value, if there is one.\n    fn take_some(self, action: &fn(T)) {\n        match self {\n            None => (),\n            Some(value) => action(value),\n        }\n    }\n\n    /// Call a function that borrows the value, if there is one; otherwise\n    /// return a default.\n    fn when_some_or<U>(&self, default: U, action: &fn(&T) -> U) -> U {\n        match self {\n            &None => default,\n            &Some(ref value) => action(value),\n        }\n    }\n\n    /// Call a function that borrows the mutable value, if there is one;\n    /// otherwise return a default.\n    fn mut_when_some_or<U>(&mut self, default: U, action: &fn(&mut T) -> U) -> U {\n        match self {\n            &None => default,\n            &Some(ref mut value) => action(value),\n        }\n    }\n\n    /// Call a function that takes the value, if there is one; otherwise\n    /// return a default.\n    fn take_some_or<U>(self, default: U, action: &fn(T) -> U) -> U {\n        match self {\n            None => default,\n            Some(value) => action(value),\n        }\n    }\n\n    /// Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.\n    fn when_map<U>(&self, f: &fn(&T) -> U) -> Option<U> {\n        match self {\n            &Some(ref value) => Some(f(value)),\n            &None => None,\n        }\n    }\n}\n```\n", "closed_by": {"login": "orenbenkiki", "id": 68190, "node_id": "MDQ6VXNlcjY4MTkw", "avatar_url": "https://avatars.githubusercontent.com/u/68190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orenbenkiki", "html_url": "https://github.com/orenbenkiki", "followers_url": "https://api.github.com/users/orenbenkiki/followers", "following_url": "https://api.github.com/users/orenbenkiki/following{/other_user}", "gists_url": "https://api.github.com/users/orenbenkiki/gists{/gist_id}", "starred_url": "https://api.github.com/users/orenbenkiki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orenbenkiki/subscriptions", "organizations_url": "https://api.github.com/users/orenbenkiki/orgs", "repos_url": "https://api.github.com/users/orenbenkiki/repos", "events_url": "https://api.github.com/users/orenbenkiki/events{/privacy}", "received_events_url": "https://api.github.com/users/orenbenkiki/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/10319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/10319/timeline", "performed_via_github_app": null, "state_reason": "completed"}