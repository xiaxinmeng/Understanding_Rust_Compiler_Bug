{"url": "https://api.github.com/repos/rust-lang/rust/issues/47709", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47709/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47709/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47709/events", "html_url": "https://github.com/rust-lang/rust/issues/47709", "id": 291233988, "node_id": "MDU6SXNzdWUyOTEyMzM5ODg=", "number": 47709, "title": "Type inference: weird behavior of compiler missing type info in unambiguous test case", "user": {"login": "PaulGrandperrin", "id": 1748936, "node_id": "MDQ6VXNlcjE3NDg5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1748936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PaulGrandperrin", "html_url": "https://github.com/PaulGrandperrin", "followers_url": "https://api.github.com/users/PaulGrandperrin/followers", "following_url": "https://api.github.com/users/PaulGrandperrin/following{/other_user}", "gists_url": "https://api.github.com/users/PaulGrandperrin/gists{/gist_id}", "starred_url": "https://api.github.com/users/PaulGrandperrin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PaulGrandperrin/subscriptions", "organizations_url": "https://api.github.com/users/PaulGrandperrin/orgs", "repos_url": "https://api.github.com/users/PaulGrandperrin/repos", "events_url": "https://api.github.com/users/PaulGrandperrin/events{/privacy}", "received_events_url": "https://api.github.com/users/PaulGrandperrin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-01-24T14:44:41Z", "updated_at": "2018-03-02T14:41:17Z", "closed_at": "2018-02-27T18:23:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I found a weird looking inference behavior.\r\n\r\nI have a piece of code (reduced the best I could) that doesn't compile even though it seems that there are no type ambiguities.\r\nBut what's even weirder is that removing some code that shouldn't have any effects (an identity `map()`) makes the code compile. This does, however, proves (AFAIK) that type inference in this example is unambiguous and that rustc is indeed capable of solving it.\r\n\r\nHere is the code:\r\n```rust\r\n#[derive(PartialEq)]\r\nstruct Foo {\r\n    bar: u64\r\n}\r\n\r\nfn test() -> Option<Foo> {\r\n    vec![Foo{bar:0}].into_iter()\r\n        .fold(None, |acc, o| {\r\n            if let Some(acc) = acc {\r\n                if o.bar == acc.bar {\r\n                    return Some(acc)\r\n                }\r\n            }\r\n            Some(o)\r\n        }).map(|o| {\r\n            o\r\n        })\r\n}\r\n\r\nfn main() {\r\n    test();\r\n}\r\n```\r\nThe compilation will fail:\r\n```\r\nerror[E0619]: the type of this value must be known in this context\r\n  --> src/main.rs:10:29\r\n   |\r\n10 |                 if o.bar == acc.bar {\r\n   |                             ^^^^^^^\r\n\r\n```\r\nHowever, it will compile if you do any of those things:\r\n- replace `None` by `None::<Foo>`\r\n- remove the last useless identity `map()`\r\n- replace `o.bar == acc.bar` by `o == acc`\r\n\r\nSo for instance, this seemingly identical code will compile:\r\n```rust\r\n#[derive(PartialEq)]\r\nstruct Foo {\r\n    bar: u64\r\n}\r\n\r\nfn test() -> Option<Foo> {\r\n    vec![Foo{bar:0}].into_iter()\r\n        .fold(None, |acc, o| {\r\n            if let Some(acc) = acc {\r\n                if o.bar == acc.bar {\r\n                    return Some(acc)\r\n                }\r\n            }\r\n            Some(o)\r\n        })/*.map(|o| {  // only this part was removed\r\n            o\r\n        })*/\r\n}\r\n\r\nfn main() {\r\n    test();\r\n}\r\n```\r\nand this one will also compile fine but thanks to a completely different kind of change:\r\n```rust\r\n#[derive(PartialEq)]\r\nstruct Foo {\r\n    bar: u64\r\n}\r\n\r\nfn test() -> Option<Foo> {\r\n    vec![Foo{bar:0}].into_iter()\r\n        .fold(None, |acc, o| {\r\n            if let Some(acc) = acc {\r\n                if o/*.bar*/ == acc/*.bar*/ { // now I compare the whole struct instead of the bar member\r\n                    return Some(acc)\r\n                }\r\n            }\r\n            Some(o)\r\n        }).map(|o| {\r\n            o\r\n        })\r\n}\r\n\r\nfn main() {\r\n    test();\r\n}\r\n```\r\n\r\n**Playground**:\r\nhttps://play.rust-lang.org/?gist=6934d0a3d56d305c8638fd446cdd1d70&version=nightly\r\n\r\n@mbrubeck : because we spoke about it on IRC.", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47709/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47709/timeline", "performed_via_github_app": null, "state_reason": "completed"}