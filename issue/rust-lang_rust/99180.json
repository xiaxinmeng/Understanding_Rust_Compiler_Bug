{"url": "https://api.github.com/repos/rust-lang/rust/issues/99180", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99180/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99180/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99180/events", "html_url": "https://github.com/rust-lang/rust/issues/99180", "id": 1302046947, "node_id": "I_kwDOAAsO6M5Nm6jj", "number": 99180, "title": "MIR building optimizes away some place expressions around \"_\" patterns even with -Zmir-opt-level=0", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-07-12T13:13:04Z", "updated_at": "2023-04-24T10:06:15Z", "closed_at": "2023-04-24T09:51:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Consider the following code -- the comments say it all:\r\n```rust\r\nfn main() {\r\n    let ptr = 32 as *const u8;\r\n    \r\n    // This is UB, and Miri finds it:\r\n    //unsafe { let _ptr = std::ptr::addr_of!(*ptr); }\r\n    \r\n    // So this should also be UB, but Miri says nothing:\r\n    unsafe { let _ = *ptr; }\r\n    \r\n    // And same for this:\r\n    unsafe {\r\n        match *ptr { _ => {} }\r\n    }\r\n}\r\n```\r\nHere is the mir-opt-level=0 MIR for this:\r\n```\r\nfn main() -> () {\r\n    let mut _0: ();                      // return place in scope 0 at place.rs:1:11: 1:11\r\n    let _1: *const u8;                   // in scope 0 at place.rs:2:9: 2:12\r\n    let _2: ();                          // in scope 0 at place.rs:8:5: 8:29\r\n    scope 1 {\r\n        debug ptr => _1;                 // in scope 1 at place.rs:2:9: 2:12\r\n        scope 2 {\r\n            scope 3 {\r\n            }\r\n        }\r\n        scope 4 {\r\n        }\r\n    }\r\n\r\n    bb0: {\r\n        StorageLive(_1);                 // scope 0 at place.rs:2:9: 2:12\r\n        _1 = const 32_usize as *const u8 (PointerFromExposedAddress); // scope 0 at place.rs:2:15: 2:30\r\n        StorageLive(_2);                 // scope 1 at place.rs:8:5: 8:29\r\n        _2 = const ();                   // scope 2 at place.rs:8:5: 8:29\r\n        StorageDead(_2);                 // scope 1 at place.rs:8:28: 8:29\r\n        _0 = const ();                   // scope 4 at place.rs:12:27: 12:29\r\n        StorageDead(_1);                 // scope 0 at place.rs:14:1: 14:2\r\n        return;                          // scope 0 at place.rs:14:2: 14:2\r\n    }\r\n}\r\n```\r\nCurrently, MIR building \"loses\" the entire place expression somewhere, *even though that place expression could cause UB*. IMO that is a bug. Can we change MIR building to preserve the place expressions?\r\n\r\nWe could have a `EvalPlace` MIR statement that just computes a place expression and then does nothing with the result. (To be clear, there should be *no* place-to-value conversion, i.e., no actual load from the `*ptr` place. But the place expression itself should be evaluated.) We *do* have `FakeRead`, which works on a place, but (a) its docs talk about \"inspecting constants and discriminant values\" so that is doing more than just evaluating the place expression, and (b) it is \"disallowed after drop elaboration\".\r\n\r\nCc @rust-lang/wg-mir-opt in lieu of a \"MIR building wg\".\r\nAlso I think this is related to THIR unsafety checking; MIR unsafety checking does not even complain about some of these `*ptr` because they get erased before reaching MIR, but in THIR they would still be visible.\r\nAlso related: https://github.com/rust-lang/rust/issues/79735 https://github.com/rust-lang/unsafe-code-guidelines/issues/261", "closed_by": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99180/timeline", "performed_via_github_app": null, "state_reason": "completed"}