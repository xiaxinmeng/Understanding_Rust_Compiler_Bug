{"url": "https://api.github.com/repos/rust-lang/rust/issues/51863", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51863/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51863/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51863/events", "html_url": "https://github.com/rust-lang/rust/issues/51863", "id": 336438151, "node_id": "MDU6SXNzdWUzMzY0MzgxNTE=", "number": 51863, "title": "stdio handles are not `UnwindSafe`", "user": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-06-28T01:05:59Z", "updated_at": "2018-07-03T14:31:35Z", "closed_at": "2018-07-03T14:31:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`io::{Stdout, Stderr, StdoutLock, StderrLock}` are not `UnwindSafe`:\r\n\r\n```rust\r\nuse std::io::{Stdout, Stderr, StdoutLock, StderrLock};\r\nuse std::panic::UnwindSafe;\r\n\r\nfn assert_unwind_safe<T: UnwindSafe>() {}\r\n\r\nfn main() {\r\n    assert_unwind_safe::<Stdout>();\r\n    assert_unwind_safe::<Stderr>();\r\n    assert_unwind_safe::<StdoutLock<'static>>();\r\n    assert_unwind_safe::<StderrLock<'static>>();\r\n}\r\n```\r\n\r\nHowever, because they are protected by mutexes, it doesn't make sense why these handles shouldn't be `UnwindSafe`. It seems to be an oversight because they use `ReentrantMutex` internally, which transitively opts-out of `UnwindSafe` because it contains an `UnsafeCell`.\r\n\r\nThis makes `io::Stdout` a pain to use with `slog` which requires `Send + Sync + UnwindSafe` on its output, necessitating a second mutex wrapping the handle or a custom wrapper implementing `UnwindSafe`. `AssertUnwindSafe` is not a solution here because it doesn't implement `Write` for its contained type.\r\n\r\nEither `ReentrantMutex` should manually implement `UnwindSafe` as well, or the stdio handles should. I also recommend adding delegated impls of `Read`, `Write` and `BufRead` to `AssertUnwindSafe`.\r\n\r\nAddendum: I'm still having problems with `slog` but for another reason; `slog_json::Json` is also not `UnwindSafe` or `Sync` because it uses `RefCell` internally.\r\n\r\nAddendum 2: because it uses `Mutex` and not `ReentrantMutex`, `Stdin` is already `UnwindSafe + RefUnwindSafe`, and thus `StdinLock` is too. My original code example didn't error for those types but I didn't notice.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51863/timeline", "performed_via_github_app": null, "state_reason": "completed"}