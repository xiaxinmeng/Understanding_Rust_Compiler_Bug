{"url": "https://api.github.com/repos/rust-lang/rust/issues/52485", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52485/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52485/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52485/events", "html_url": "https://github.com/rust-lang/rust/issues/52485", "id": 342346909, "node_id": "MDU6SXNzdWUzNDIzNDY5MDk=", "number": 52485, "title": "suggestion in unresolved trait method calls misses crate `as` rename", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-18T14:13:09Z", "updated_at": "2020-06-11T17:32:57Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Okay get ready, this is quite a combination of pieces to fit together to reproduce this.\r\n\r\nIf crate A defines a trait (with a method), and crate B rexports A under a new name (via `pub extern crate A as NewName`), and crate C pulls in crate B and makes a call to the trait's method without importing the trait or without implementing it ...\r\n\r\n... then the diagnostic produced by rustc comes *close* but just misses the mark, because it ignores B's rename of A in its suggestion.\r\n\r\nUnder the details below is a complete set of steps to reproduce; here I use four separate instances of the \"A\" in my example above, in order to enumerate the four combinations of {pub,}{,as _}:\r\n\r\n<details>\r\n\r\n```\r\n% ls *.rs\r\ncase_four.rs\tcase_three.rs\treexporter.rs\r\ncase_one.rs\tcase_two.rs\ttest.rs\r\n% cat case_one.rs\r\n```\r\n```rust\r\n#![crate_type=\"lib\"]\r\npub fn function_in_one() -> &'static str { \"find me!\" }\r\n\r\npub trait TraitInOne { fn find_me_1() { } }\r\n```\r\n```\r\n% cat case_two.rs\r\n```\r\n```rust\r\n#![crate_type=\"lib\"]\r\npub fn function_in_two() -> &'static str { \"find me!\" }\r\n\r\npub trait TraitInTwo { fn find_me_2() { } }\r\n```\r\n```rust\r\n% cat case_three.rs\r\n#![crate_type=\"lib\"]\r\npub fn function_in_three() -> &'static str { \"find me!\" }\r\n\r\npub trait TraitInThree { fn find_me_3() { } }\r\n```\r\n```\r\n% cat case_four.rs\r\n```\r\n```rust\r\n#![crate_type=\"lib\"]\r\npub fn function_in_four() -> &'static str { \"find me!\" }\r\n\r\npub trait TraitInFour { fn find_me_4() { } }\r\n```\r\n```\r\n% cat reexporter.rs\r\n```\r\n```rust\r\n#![crate_type=\"lib\"]\r\n\r\nextern crate case_one;\r\nextern crate case_two as two;\r\npub extern crate case_three;\r\npub extern crate case_four as four;\r\n```\r\n```\r\n% cat test.rs\r\n```\r\n```rust\r\nextern crate reexporter;\r\n\r\nstruct T;\r\n\r\nfn main() {\r\n    T.find_me_1();\r\n    T.find_me_2();\r\n    T.find_me_3();\r\n    T.find_me_4();\r\n}\r\n```\r\n```\r\n% rustc --version\r\nrustc 1.29.0-nightly (4f3c7a472 2018-07-17)\r\n% rustc case_one.rs && rustc case_two.rs && rustc case_three.rs && rustc case_four.rs && rustc -L . reexporter.rs\r\n% rustc -L . test.rs\r\nerror[E0599]: no method named `find_me_1` found for type `T` in the current scope\r\n --> test.rs:6:7\r\n  |\r\n3 | struct T;\r\n  | --------- method `find_me_1` not found for this\r\n...\r\n6 |     T.find_me_1();\r\n  |       ^^^^^^^^^\r\n  |\r\n  = help: items from traits can only be used if the trait is implemented and in scope\r\n  = note: the following trait defines an item `find_me_1`, perhaps you need to implement it:\r\n          candidate #1: `case_one::TraitInOne`\r\n\r\nerror[E0599]: no method named `find_me_2` found for type `T` in the current scope\r\n --> test.rs:7:7\r\n  |\r\n3 | struct T;\r\n  | --------- method `find_me_2` not found for this\r\n...\r\n7 |     T.find_me_2();\r\n  |       ^^^^^^^^^\r\n  |\r\n  = help: items from traits can only be used if the trait is implemented and in scope\r\n  = note: the following trait defines an item `find_me_2`, perhaps you need to implement it:\r\n          candidate #1: `case_two::TraitInTwo`\r\n\r\nerror[E0599]: no method named `find_me_3` found for type `T` in the current scope\r\n --> test.rs:8:7\r\n  |\r\n3 | struct T;\r\n  | --------- method `find_me_3` not found for this\r\n...\r\n8 |     T.find_me_3();\r\n  |       ^^^^^^^^^\r\n  |\r\n  = help: items from traits can only be used if the trait is implemented and in scope\r\n  = note: the following trait defines an item `find_me_3`, perhaps you need to implement it:\r\n          candidate #1: `reexporter::case_three::TraitInThree`\r\n\r\nerror[E0599]: no method named `find_me_4` found for type `T` in the current scope\r\n --> test.rs:9:7\r\n  |\r\n3 | struct T;\r\n  | --------- method `find_me_4` not found for this\r\n...\r\n9 |     T.find_me_4();\r\n  |       ^^^^^^^^^\r\n  |\r\n  = help: items from traits can only be used if the trait is implemented and in scope\r\n  = note: the following trait defines an item `find_me_4`, perhaps you need to implement it:\r\n          candidate #1: `reexporter::case_four::TraitInFour`\r\n\r\nerror: aborting due to 4 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0599`.\r\n% \r\n```\r\n\r\n</details>\r\n\r\n----\r\n\r\n(Also of potential interest after reviewing the results from the cases enumerated in the details block: the diagnostic also suggests the paths `case_one::TraitInOne` and `case_two::TraitInTwo`, even though these crates are themselves not linked by `test.rs` itself. This is probably better than saying nothing at all, but it could be nice to give a hint to the user that they'll need to also add the `extern crate` declarations in `test.rs` itself?)\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52485/timeline", "performed_via_github_app": null, "state_reason": null}