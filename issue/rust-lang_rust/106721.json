{"url": "https://api.github.com/repos/rust-lang/rust/issues/106721", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106721/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106721/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106721/events", "html_url": "https://github.com/rust-lang/rust/issues/106721", "id": 1529114478, "node_id": "I_kwDOAAsO6M5bJG9u", "number": 106721, "title": "Conflicting implementations error that violates orphan rules", "user": {"login": "shamatar", "id": 6467575, "node_id": "MDQ6VXNlcjY0Njc1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shamatar", "html_url": "https://github.com/shamatar", "followers_url": "https://api.github.com/users/shamatar/followers", "following_url": "https://api.github.com/users/shamatar/following{/other_user}", "gists_url": "https://api.github.com/users/shamatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shamatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions", "organizations_url": "https://api.github.com/users/shamatar/orgs", "repos_url": "https://api.github.com/users/shamatar/repos", "events_url": "https://api.github.com/users/shamatar/events{/privacy}", "received_events_url": "https://api.github.com/users/shamatar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-01-11T14:07:28Z", "updated_at": "2023-01-11T15:51:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Below there are two examples that express the same intention: there is some basic trait, there is some more strict trait (that is independent), and there is a generic implementation of basic for all types that implement a strict one. \r\n\r\nFirst there is a divergence: if traits are parametrised by extra generic there is an error, and if not - there is none, but from my point of view it's the same logical relation.  \r\n\r\nSecond, it implies that conflicting implementations may result from implementing something in external crate. But it's against orphan rules, because both trait and type for which conflicting implementations are conjectured to exist are defined in this crate, so they will both be foreign for any external crate.\r\n\r\nThis example works:\r\n\r\n```rust\r\n  pub struct ConcreteType;\r\n  \r\n  pub trait Base {}\r\n  \r\n  impl Base for ConcreteType {}\r\n  \r\n  pub trait Extended {\r\n      type Base: Base; // irrelevant for reproducibility\r\n  }\r\n  \r\n  impl<T: Extended> Base for T {}\r\n```\r\n\r\nBut this doesn't\r\n\r\n```rust\r\n  pub struct ConcreteType<A: AT> {\r\n      _marker: std::marker::PhantomData<A>\r\n  }\r\n  \r\n  pub trait AT {}\r\n  \r\n  pub trait Base<A: AT> {}\r\n  \r\n  impl<A: AT> Base<A> for ConcreteType<A> {}\r\n  \r\n  pub trait Extended<A: AT> {\r\n      type Base; // irrelevant for reproducibility\r\n  }\r\n  \r\n  impl<A: AT, T: Extended<A>> Base<A> for T {}\r\n```\r\n\r\nI expected to see this happen: both examples compile.\r\n\r\nInstead, this happened: \r\n```\r\nerror[[E0119]](https://doc.rust-lang.org/stable/error-index.html#E0119): conflicting implementations of trait `Base<_>` for type `ConcreteType<_>`\r\n  --> src/lib.rs:15:1\r\n   |\r\n9  | impl<A: AT> Base<A> for ConcreteType<A> {}\r\n   | --------------------------------------- first implementation here\r\n...\r\n15 | impl<A: AT, T: Extended<A>> Base<A> for T {}\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `ConcreteType<_>`\r\n   |\r\n   = note: downstream crates may implement trait `Extended<_>` for type `ConcreteType<_>`\r\n ```\r\n\r\n### Meta\r\n\r\nWas using Rust playground (stable) for everything.\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106721/timeline", "performed_via_github_app": null, "state_reason": null}