{"url": "https://api.github.com/repos/rust-lang/rust/issues/78220", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78220/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78220/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78220/events", "html_url": "https://github.com/rust-lang/rust/issues/78220", "id": 727086460, "node_id": "MDU6SXNzdWU3MjcwODY0NjA=", "number": 78220, "title": "Incorrect trait bound resolution in the presence of associated types", "user": {"login": "wuggen", "id": 6334059, "node_id": "MDQ6VXNlcjYzMzQwNTk=", "avatar_url": "https://avatars.githubusercontent.com/u/6334059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wuggen", "html_url": "https://github.com/wuggen", "followers_url": "https://api.github.com/users/wuggen/followers", "following_url": "https://api.github.com/users/wuggen/following{/other_user}", "gists_url": "https://api.github.com/users/wuggen/gists{/gist_id}", "starred_url": "https://api.github.com/users/wuggen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wuggen/subscriptions", "organizations_url": "https://api.github.com/users/wuggen/orgs", "repos_url": "https://api.github.com/users/wuggen/repos", "events_url": "https://api.github.com/users/wuggen/events{/privacy}", "received_events_url": "https://api.github.com/users/wuggen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-10-22T06:21:14Z", "updated_at": "2021-01-07T12:09:15Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nThe following code:\r\n\r\n```rust\r\npub trait Foo<T> {\r\n    type FooType;\r\n}\r\n\r\npub trait Bar {\r\n    type BarType;\r\n}\r\n\r\npub struct ConcreteBar;\r\n\r\nimpl Bar for ConcreteBar {\r\n    type BarType = ();\r\n}\r\n\r\npub trait Xyzzy<T> {}\r\n\r\npub trait Quux {}\r\n\r\npub struct SomeStruct<S, A>(PhantomData<(S, A)>);\r\n\r\nimpl<S, A> Quux for SomeStruct<S, A>\r\nwhere\r\n    A: Foo<<ConcreteBar as Bar>::BarType>,\r\n    <A as Foo<<ConcreteBar as Bar>::BarType>>::FooType: Xyzzy<S>,\r\n{\r\n}\r\n```\r\n\r\nproduces the following error:\r\n\r\n```\r\nerror[E0277]: the trait bound `A: Foo<()>` is not satisfied\r\n  --> src/minimal1.rs:23:1\r\n   |\r\n23 | / impl<S, A> Quux for SomeStruct<S, A>\r\n24 | | where\r\n25 | |     A: Foo<<ConcreteBar as Bar>::BarType>,\r\n26 | |     <A as Foo<<ConcreteBar as Bar>::BarType>>::FooType: Xyzzy<S>,\r\n27 | | {\r\n28 | | }\r\n   | |_^ the trait `Foo<()>` is not implemented for `A`\r\n   |\r\nhelp: consider further restricting this bound\r\n   |\r\n25 |     A: Foo<<ConcreteBar as Bar>::BarType> + Foo<()>,\r\n   |                                           ^^^^^^^^^\r\n```\r\n\r\nIn theory, this should compile fine. `ConcreteBar::BarType` is `()`, so the trait bound `A: Foo<<ConcreteBar as Bar>::BarType>` should be equivalent to `A: Foo<()>`.\r\n\r\nChanging the first bound to `A: Foo<()>` eliminates the error. Additionally, adding a third type parameter `B` and changing the bounds to the following:\r\n\r\n```\r\nB: Bar,\r\nA: Foo<B::BarType>,\r\n<A as Foo<B::BarType>>::FooType: Xyzzy<S>,\r\n```\r\n\r\neliminates the error. However, see the additional context below.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\nThis has been tested on the current stable and nightly compilers:\r\n```\r\nrustc 1.47.0 (18bf6b4f0 2020-10-07)\r\nbinary: rustc\r\ncommit-hash: 18bf6b4f01a6feaf7259ba7cdae58031af1b7b39\r\ncommit-date: 2020-10-07\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.47.0\r\nLLVM version: 11.0\r\n\r\nrustc 1.49.0-nightly (1eaadebb3 2020-10-21)\r\nbinary: rustc\r\ncommit-hash: 1eaadebb3dee31669c7649b32747381d11614fae\r\ncommit-date: 2020-10-21\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.49.0-nightly\r\nLLVM version: 11.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n\r\n### Additional context\r\n\r\nI encountered this issue while working with generic traits from typenum, generic-array, and nalgebra, and in this context the above-mentioned workarounds do not work. Unfortunately I have yet to find an example of this more persistent version of the issue that does not use types and traits from these crates.\r\n\r\n<details><summary>Several code and error examples</summary>\r\n\r\n```rust\r\nuse generic_array::ArrayLength;\r\nuse nalgebra::{base::dimension::DimName, ArrayStorage, Vector, U1};\r\nuse std::{marker::PhantomData, ops::Mul};\r\nuse typenum::Prod;\r\n\r\npub trait Foo {\r\n    type FooType;\r\n}\r\n\r\npub struct SomeStruct<D>(PhantomData<D>);\r\n\r\nimpl<D> Foo for SomeStruct<D>\r\nwhere\r\n    D: DimName,\r\n    D::Value: Mul<<U1 as DimName>::Value>,\r\n    Prod<D::Value, <U1 as DimName>::Value>: ArrayLength<f32>,\r\n{\r\n    type FooType = Vector<f32, D, ArrayStorage<f32, D, U1>>;\r\n}\r\n```\r\n```\r\nerror[E0277]: cannot multiply `<D as DimName>::Value` by `UInt<UTerm, B1>`\r\n  --> src/using_crates.rs:18:5\r\n   |\r\n18 |     type FooType = Vector<f32, D, ArrayStorage<f32, D, U1>>;\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `<D as DimName>::Value * UInt<UTerm, B1>`\r\n   |\r\n  ::: /home/john/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.22.1/src/base/array_storage.rs:41:15\r\n   |\r\n41 |     R::Value: Mul<C::Value>,\r\n   |               ------------- required by this bound in `ArrayStorage`\r\n   |\r\n   = help: the trait `Mul<UInt<UTerm, B1>>` is not implemented for `<D as DimName>::Value`\r\nhelp: consider further restricting the associated type\r\n   |\r\n16 |     Prod<D::Value, <U1 as DimName>::Value>: ArrayLength<f32>, <D as DimName>::Value: Mul<UInt<UTerm, B1>>\r\n   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n(Plus a couple of duplicate errors pointing to different spans.)\r\n\r\nBounding on `Mul<typenum::U1>` directly:\r\n\r\n```rust\r\nimpl<D> Foo for SomeStruct<D>\r\nwhere\r\n    D: DimName,\r\n    D::Value: Mul<typenum::U1>,\r\n    Prod<D::Value, <U1 as DimName>::Value>: ArrayLength<f32>,\r\n{\r\n    type FooType = Vector<f32, D, ArrayStorage<f32, D, U1>>;\r\n}\r\n```\r\n```\r\nerror[E0277]: the trait bound `<<D as DimName>::Value as Mul<UInt<UTerm, B1>>>::Output: generic_array::ArrayLength<f32>` is not satisfied\r\n  --> src/using_crates.rs:18:5\r\n   |\r\n18 |     type FooType = Vector<f32, D, ArrayStorage<f32, D, U1>>;\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `generic_array::ArrayLength<f32>` is not implemented for `<<D as DimName>::Value as Mul<UInt<UTerm, B1>>>::Output`\r\n   |\r\n  ::: /home/john/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.22.1/src/base/array_storage.rs:42:31\r\n   |\r\n42 |     Prod<R::Value, C::Value>: ArrayLength<N>,\r\n   |                               -------------- required by this bound in `ArrayStorage`\r\n   |\r\nhelp: consider further restricting the associated type\r\n   |\r\n16 |     Prod<D::Value, <U1 as DimName>::Value>: ArrayLength<f32>, <<D as DimName>::Value as Mul<UInt<UTerm, B1>>>::Output: generic_array::ArrayLength<f32>\r\n   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nUsing the compiler-suggested bound actually leads to it suggesting the exact same bound again:\r\n\r\n```rust\r\nimpl<D> Foo for SomeStruct<D>\r\nwhere\r\n    D: DimName,\r\n    D::Value: Mul<typenum::U1>,\r\n    <<D as DimName>::Value as Mul<UInt<UTerm, B1>>>::Output: generic_array::ArrayLength<f32>\r\n{\r\n    type FooType = Vector<f32, D, ArrayStorage<f32, D, U1>>;\r\n}\r\n```\r\n```\r\nerror[E0277]: the trait bound `<<D as DimName>::Value as Mul<UInt<UTerm, B1>>>::Output: generic_array::ArrayLength<f32>` is not satisfied\r\n  --> src/using_crates.rs:18:5\r\n   |\r\n18 |     type FooType = Vector<f32, D, ArrayStorage<f32, D, U1>>;\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `generic_array::ArrayLength<f32>` is not implemented for `<<D as DimName>::Value as Mul<UInt<UTerm, B1>>>::Output`\r\n   |\r\n  ::: /home/john/.cargo/registry/src/github.com-1ecc6299db9ec823/nalgebra-0.22.1/src/base/array_storage.rs:42:31\r\n   |\r\n42 |     Prod<R::Value, C::Value>: ArrayLength<N>,\r\n   |                               -------------- required by this bound in `ArrayStorage`\r\n   |\r\nhelp: consider further restricting the associated type\r\n   |\r\n16 |     <<D as DimName>::Value as Mul<UInt<UTerm, B1>>>::Output: generic_array::ArrayLength<f32>, <<D as DimName>::Value as Mul<UInt<UTerm, B1>>>::Output: generic_array::ArrayLength<f32>\r\n   |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n</details>", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78220/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78220/timeline", "performed_via_github_app": null, "state_reason": null}