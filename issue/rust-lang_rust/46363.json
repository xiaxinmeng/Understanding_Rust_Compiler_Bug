{"url": "https://api.github.com/repos/rust-lang/rust/issues/46363", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46363/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46363/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46363/events", "html_url": "https://github.com/rust-lang/rust/issues/46363", "id": 277728074, "node_id": "MDU6SXNzdWUyNzc3MjgwNzQ=", "number": 46363, "title": "Adding a specialized impl can break inference.", "user": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-29T11:58:05Z", "updated_at": "2021-04-01T08:13:37Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Relevant to #31844. This is how it happens:\r\n```rust\r\n#![feature(specialization)]\r\n\r\ntrait B { fn b(&self) -> Self; }\r\n\r\n// Impl 1\r\nimpl<T> B for Option<T> where T: Default\r\n{\r\n    default fn b(&self) -> Option<T> { Some(T::default()) }\r\n}\r\n// Removing one of the two concrete impls makes inference succeed.\r\n// Impl 2\r\nimpl B for Option<String>\r\n{\r\n    fn b(&self) -> Self { Some(\"special\".into()) }\r\n}\r\n// Impl 3\r\nimpl B for Option<i32>\r\n{\r\n    fn b(&self) -> Self { Some(0) }\r\n}\r\n\r\nfn main() { \r\n    // Cannot infer `T` in `Option<T>`.\r\n   None.b();\r\n}\r\n```\r\nThis issue does not originate from specialization, since if we removed `Impl 1` the same problem would occur. But with specialization if those impls were added in order, the story would be a bit confusing:\r\n1. With `Impl 1`, inference fails.\r\n2. Added `Impl 2`, yay inference succeeds.\r\n3. Added `Impl 3`, inference is back to failing.\r\n\r\nThe only fix would be to make inference fail in step 2. Even if it's not something we want fix it still seems worth noting somewhere that we are ok with specializaton breaking inference.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46363/timeline", "performed_via_github_app": null, "state_reason": null}