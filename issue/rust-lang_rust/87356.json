{"url": "https://api.github.com/repos/rust-lang/rust/issues/87356", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87356/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87356/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87356/events", "html_url": "https://github.com/rust-lang/rust/issues/87356", "id": 950184514, "node_id": "MDU6SXNzdWU5NTAxODQ1MTQ=", "number": 87356, "title": "Lifetime error in scoped spawn doesn't identify the captured lifetime", "user": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-07-21T23:34:40Z", "updated_at": "2021-09-10T13:04:45Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This is a self-contained reproducer from https://github.com/rayon-rs/rayon/issues/871\r\n\r\nGiven the following code:\r\nhttps://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=c51857b253b7171e3b2c1083e7f8aa0a\r\n\r\n```rust\r\n// Library code implementing a scoped spawn:\r\n\r\nuse std::marker::PhantomData;\r\n\r\nstruct Scope<'scope> {\r\n    marker: PhantomData<dyn FnOnce(&Self) + 'scope>,\r\n}\r\n\r\nimpl<'scope> Scope<'scope> {\r\n    fn spawn(&self, _f: impl FnOnce(&Self) + 'scope) {\r\n        todo!(\"run the task before the end of 'scope\");\r\n    }\r\n}\r\n\r\nfn scope<'scope>(f: impl FnOnce(&Scope<'scope>)) {\r\n    let s = Scope { marker: PhantomData };\r\n    f(&s);\r\n}\r\n\r\n// User code trying to make sense of lifetimes:\r\n\r\nstruct Test<'scope_ref, 'scope, 'value> {\r\n    value: &'value usize,\r\n    scope: &'scope_ref Scope<'scope>,\r\n}\r\n\r\nimpl<'scope_ref, 'scope, 'value> Test<'scope_ref, 'scope, 'value>\r\nwhere\r\n    'scope: 'scope_ref,\r\n    'value: 'scope,\r\n{\r\n    fn test(&self) {\r\n        self.scope.spawn(|scope| {\r\n            let t = Test { scope, value: self.value };\r\n            // Ignore the fact that this will respawn forever.\r\n            t.test();\r\n        });\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let value = 0;\r\n\r\n    scope(|scope| {\r\n        let t = Test { scope, value: &value };\r\n        t.test();\r\n    });\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\r\n  --> src/lib.rs:33:26\r\n   |\r\n33 |           self.scope.spawn(|scope| {\r\n   |  __________________________^\r\n34 | |             let t = Test { scope, value: self.value };\r\n35 | |             // Ignore the fact that this will respawn forever.\r\n36 | |             t.test();\r\n37 | |         });\r\n   | |_________^\r\n   |\r\nnote: first, the lifetime cannot outlive the lifetime `'scope_ref` as defined on the impl at 27:6...\r\n  --> src/lib.rs:27:6\r\n   |\r\n27 | impl<'scope_ref, 'scope, 'value> Test<'scope_ref, 'scope, 'value>\r\n   |      ^^^^^^^^^^\r\nnote: ...so that the types are compatible\r\n  --> src/lib.rs:33:26\r\n   |\r\n33 |           self.scope.spawn(|scope| {\r\n   |  __________________________^\r\n34 | |             let t = Test { scope, value: self.value };\r\n35 | |             // Ignore the fact that this will respawn forever.\r\n36 | |             t.test();\r\n37 | |         });\r\n   | |_________^\r\n   = note: expected `(&&Test<'_, 'scope, '_>,)`\r\n              found `(&&Test<'scope_ref, 'scope, 'value>,)`\r\nnote: but, the lifetime must be valid for the lifetime `'scope` as defined on the impl at 27:18...\r\n  --> src/lib.rs:27:18\r\n   |\r\n27 | impl<'scope_ref, 'scope, 'value> Test<'scope_ref, 'scope, 'value>\r\n   |                  ^^^^^^\r\nnote: ...so that the types are compatible\r\n  --> src/lib.rs:33:20\r\n   |\r\n33 |         self.scope.spawn(|scope| {\r\n   |                    ^^^^^\r\n   = note: expected `&Scope<'_>`\r\n              found `&Scope<'scope>`\r\n```\r\n\r\nIt's true that this spawn closure does not outlive the `'scope` lifetime, but this output doesn't really help us figure out **why**. The closure captures `self` with its anonymous lifetime, but it could be fixed like so:\r\n\r\n```patch\r\n-        self.scope.spawn(|scope| {\r\n-            let t = Test { scope, value: self.value };\r\n+        let value = self.value;\r\n+        self.scope.spawn(move |scope| {\r\n+            let t = Test { scope, value };\r\n```\r\n\r\n---\r\n\r\nPS: This can also be fixed by switching to 2021 edition, I suppose due to [RFC 2229](https://rust-lang.github.io/rfcs/2229-capture-disjoint-fields.html) disjoint capturing. This surprises me, because I would have thought that would capture a reference to `self.value`, which would still have a lifetime issue, but in MIR it appears to be copying it like a `move` closure.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87356/timeline", "performed_via_github_app": null, "state_reason": null}