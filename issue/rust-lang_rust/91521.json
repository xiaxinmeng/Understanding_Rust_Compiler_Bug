{"url": "https://api.github.com/repos/rust-lang/rust/issues/91521", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91521/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91521/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91521/events", "html_url": "https://github.com/rust-lang/rust/issues/91521", "id": 1071190636, "node_id": "I_kwDOAAsO6M4_2RJs", "number": 91521, "title": "Large parameters are copied to stack even in trivial wrappers", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-12-04T11:47:39Z", "updated_at": "2022-05-03T16:32:05Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code: <https://rust.godbolt.org/z/j13WbYT6o>\r\n\r\n```rust\r\nextern \"Rust\" {\r\n    fn bar(x: [String; 100]) -> usize;\r\n}\r\n\r\npub unsafe fn foo(x: [String; 100]) -> usize {\r\n    bar(x)\r\n}\r\n```\r\n\r\nI expected to see this happen: \r\nEverything should be already set up on the stack appropriately to just call `bar` immediately on entering `foo`.\r\n\r\nInstead, this happened:\r\nIt copies the 2400 bytes to stack, then calls `bar` with the pointer to that stack copy\r\n```asm\r\nexample::foo:\r\n        push    rbx\r\n        sub     rsp, 2400\r\n        mov     rsi, rdi\r\n        mov     rbx, rsp\r\n        mov     edx, 2400\r\n        mov     rdi, rbx\r\n        call    qword ptr [rip + memcpy@GOTPCREL]\r\n        mov     rdi, rbx\r\n        call    qword ptr [rip + bar@GOTPCREL]\r\n        add     rsp, 2400\r\n        pop     rbx\r\n        ret\r\n```\r\n\r\nSince at the ABI level that's passed as a pointer, I suspect this is more a \"how rustc emits stuff\" than an LLVM bug -- maybe there's some https://llvm.org/docs/LangRef.html#parameter-attributes we could set that would help.  Or maybe the unnecessary double-move in MIR is part of the problem:\r\n```rust\r\nfn foo(_1: [String; 100]) -> usize {\r\n    debug x => _1;                       // in scope 0 at /app/example.rs:5:19: 5:20\r\n    let mut _0: usize;                   // return place in scope 0 at /app/example.rs:5:40: 5:45\r\n    let mut _2: [std::string::String; 100]; // in scope 0 at /app/example.rs:6:9: 6:10\r\n\r\n    bb0: {\r\n        StorageLive(_2);                 // scope 0 at /app/example.rs:6:9: 6:10\r\n        _2 = move _1;                    // scope 0 at /app/example.rs:6:9: 6:10\r\n        _0 = bar(move _2) -> bb1;        // scope 0 at /app/example.rs:6:5: 6:11\r\n    }\r\n\r\n    bb1: {\r\n        StorageDead(_2);                 // scope 0 at /app/example.rs:6:10: 6:11\r\n        return;                          // scope 0 at /app/example.rs:7:2: 7:2\r\n    }\r\n}\r\n```\r\n\r\n### Context\r\n\r\nI was trying various things to see if I could remove some bad behaviour from array's `map`, which is troublesome enough that it's caveated in the docs, https://github.com/rust-lang/rust/pull/87609\r\n\r\nI had thought this was due to newtypes, as in these bugs\r\n- https://github.com/rust-lang/rust/issues/79914\r\n- https://github.com/rust-lang/rust/issues/90595\r\n\r\nBut since it repro'd even without the extra wrappers I figured I'd file a distinct bug.\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91521/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91521/timeline", "performed_via_github_app": null, "state_reason": null}