{"url": "https://api.github.com/repos/rust-lang/rust/issues/68789", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68789/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68789/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68789/events", "html_url": "https://github.com/rust-lang/rust/issues/68789", "id": 558802369, "node_id": "MDU6SXNzdWU1NTg4MDIzNjk=", "number": 68789, "title": "ICE due to `#[track_caller]` shim with -Z unleash-the-miri-inside-of-you", "user": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 268744493, "node_id": "MDU6TGFiZWwyNjg3NDQ0OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-fn", "name": "A-const-fn", "color": "f7e101", "default": false, "description": "Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1606844895, "node_id": "MDU6TGFiZWwxNjA2ODQ0ODk1", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-track_caller", "name": "F-track_caller", "color": "f9c0cc", "default": false, "description": "`#![feature(track_caller)]`"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-02-03T02:13:36Z", "updated_at": "2020-02-03T14:54:18Z", "closed_at": "2020-02-03T14:49:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Reproducer:\r\n\r\n```rust\r\n// compile-flags: -Z unleash-the-miri-inside-of-you\r\n\r\n#![feature(core_intrinsics, const_caller_location, track_caller, const_fn)]\r\n\r\nuse std::panic::Location;\r\nuse std::intrinsics::caller_location;\r\n\r\ntype L = &'static Location<'static>;\r\n\r\n#[track_caller]\r\nconst fn foo() -> L {\r\n    caller_location()\r\n}\r\n\r\nconst fn bar() -> L {\r\n    // Why we need `-Z unleash...`:\r\n    let x: fn() -> L = foo;\r\n    x()\r\n}\r\n\r\nconst CTFE: L = bar();\r\n\r\nfn main() {\r\n    dbg!(bar());\r\n    dbg!(CTFE); // This is what causes the ICE.\r\n}\r\n```\r\n\r\nreduced:\r\n\r\n```rust\r\n#![feature(core_intrinsics, const_caller_location, track_caller, const_fn)]\r\n\r\nuse std::panic::Location;\r\nuse std::intrinsics::caller_location;\r\n\r\ntype L = &'static Location<'static>;\r\n\r\n#[track_caller]\r\nconst fn foo() -> L {\r\n    caller_location()\r\n}\r\n\r\nconst fn bar() -> L {\r\n    let x: fn() -> L = foo;\r\n    x()\r\n}\r\n\r\nconst CTFE: L = bar();\r\n\r\nfn main() {\r\n    CTFE;\r\n}\r\n```\r\n\r\nwith backtrace:\r\n\r\n```\r\nthread 'rustc' panicked at 'index out of bounds: the len is 1 but the index is 1', /rustc/48840618382eccb8a799320c8e5d08e3b52f4c42/src/libcore/slice/mod.rs:2791:10\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66 \r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:77\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1057\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1426\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:204\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:224\r\n  10: rustc_driver::report_ice\r\n  11: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:476\r\n  12: rust_begin_unwind\r\n             at src/libstd/panicking.rs:380\r\n  13: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:85\r\n  14: core::panicking::panic_bounds_check\r\n             at src/libcore/panicking.rs:63\r\n  15: rustc_mir::interpret::eval_context::InterpCx<M>::layout_of_local\r\n  16: rustc_mir::interpret::operand::<impl rustc_mir::interpret::eval_context::InterpCx<M>>::access_local  17: rustc_mir::interpret::operand::<impl rustc_mir::interpret::eval_context::InterpCx<M>>::eval_place_to_op\r\n  18: rustc_mir::interpret::operand::<impl rustc_mir::interpret::eval_context::InterpCx<M>>::eval_operand  19: <core::iter::adapters::ResultShunt<I,E> as core::iter::traits::iterator::Iterator>::next\r\n  20: <alloc::vec::Vec<T> as alloc::vec::SpecExtend<T,I>>::from_iter\r\n  21: rustc_mir::interpret::step::<impl rustc_mir::interpret::eval_context::InterpCx<M>>::step\r\n  22: rustc_mir::const_eval::eval_queries::const_eval_raw_provider\r\n  23: rustc::ty::query::__query_compute::const_eval_raw\r\n  24: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::const_eval_raw>::compute\r\n  25: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  26: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  27: rustc_mir::const_eval::machine::<impl rustc_mir::interpret::eval_context::InterpCx<rustc_mir::const_eval::machine::CompileTimeInterpreter>>::try_eval_const_fn_call\r\n  28: <rustc_mir::const_eval::machine::CompileTimeInterpreter as rustc_mir::interpret::machine::Machine>::find_mir_or_eval_fn\r\n  29: rustc_mir::interpret::terminator::<impl rustc_mir::interpret::eval_context::InterpCx<M>>::eval_fn_call\r\n  30: rustc_mir::interpret::step::<impl rustc_mir::interpret::eval_context::InterpCx<M>>::step\r\n  31: rustc_mir::const_eval::eval_queries::const_eval_raw_provider\r\n  32: rustc::ty::query::__query_compute::const_eval_raw\r\n  33: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::const_eval_raw>::compute\r\n  34: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  35: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n 36: rustc_mir::const_eval::eval_queries::const_eval_validated_provider\r\n  37: rustc::ty::query::__query_compute::const_eval_validated\r\n  38: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::const_eval_validated>::compute\r\n  39: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  40: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  41: rustc_mir::const_eval::eval_queries::const_eval_validated_provider\r\n  42: rustc::ty::query::__query_compute::const_eval_validated\r\n  43: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::const_eval_validated>::compute\r\n  44: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  45: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  46: rustc::mir::interpret::queries::<impl rustc::ty::context::TyCtxt>::const_eval_poly\r\n  47: <rustc_lint::builtin::UnusedBrokenConst as rustc_lint::passes::LateLintPass>::check_item\r\n  48: <rustc_lint::BuiltinCombinedLateLintPass as rustc_lint::passes::LateLintPass>::check_item\r\n  49: rustc_hir::intravisit::Visitor::visit_nested_item\r\n  50: rustc_hir::intravisit::walk_crate\r\n  51: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  52: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:86\r\n  53: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  54: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:86\r\n  55: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  56: rustc_interface::passes::analysis\r\n  57: rustc::ty::query::__query_compute::analysis\r\n  58: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  59: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  60: rustc::ty::context::tls::enter_global\r\n  61: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  62: scoped_tls::ScopedKey<T>::set\r\n  63: syntax::with_globals\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.42.0-nightly (488406183 2020-01-16) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -Z unleash-the-miri-inside-of-you\r\n\r\nquery stack during panic:\r\n#0 [const_eval_raw] const-evaluating `bar`\r\n#1 [const_eval_raw] const-evaluating `CTFE`\r\n#2 [const_eval_validated] const-evaluating + checking `CTFE`\r\n#3 [const_eval_validated] const-evaluating + checking `CTFE`\r\n#4 [analysis] running analysis passes on this crate                        \r\nend of query stack   \r\n```\r\n\r\ncc @anp @RalfJung @oli-obk \r\n\r\nAlso, from the provided description in the reference PR:\r\n\r\n> In a const context, the attribute does not affect function ABI and instead informs the const\r\nevaluator to continue walking up the stack when probing for the topmost caller location.\r\n\r\n...it sounds like this is violating the runtime-compiletime-same-behavior rule. In particular, it sounds like `dbg!(bar());` and `dbg!(CTFE);` would print out different things. We would get that on stable if we allowed `const fn()` pointers.\r\n\r\nRelatedly, the following:\r\n\r\n```rust\r\n#![feature(core_intrinsics, const_caller_location, track_caller, const_fn)]\r\n\r\nuse std::panic::Location;\r\nuse std::intrinsics::caller_location;\r\n\r\ntype L = &'static Location<'static>;\r\n\r\n#[track_caller]\r\nconst fn foo() -> L {\r\n    caller_location()\r\n}\r\n\r\nconst fn bar() -> L {\r\n    let x: fn() -> L = foo;\r\n    x()\r\n}\r\n\r\nfn main() {\r\n    bar();\r\n}\r\n```\r\n\r\n...results in:\r\n\r\n```rust\r\n$ RUST_BACKTRACE=1 rustc -Z unleash-the-miri-inside-of-you foo.rs\r\nwarning: skipping const checks\r\n  --> foo.rs:15:5\r\n   |\r\n15 |     x()\r\n   |     ^^^\r\n\r\nthread 'rustc' panicked at 'index out of bounds: the len is 1 but the index is 1', /rustc/48840618382eccb8a799320c8e5d08e3b52f4c42/src/libcore/slice/mod.rs:2791:10\r\nstack backtrace:\r\nIncorrect number of arguments passed to called function!\r\n  %1 = call align 8 dereferenceable(24) %\"core::panic::Location\"* @_ZN3foo3foo17h9a95a22c2f60a5e2E()     \r\nin function _ZN3foo3bar17hcb643110f71c9dddE\r\nLLVM ERROR: Broken function found, compilation aborted!\r\n```", "closed_by": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68789/timeline", "performed_via_github_app": null, "state_reason": "completed"}