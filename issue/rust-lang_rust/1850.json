{"url": "https://api.github.com/repos/rust-lang/rust/issues/1850", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/1850/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/1850/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/1850/events", "html_url": "https://github.com/rust-lang/rust/issues/1850", "id": 3245347, "node_id": "MDU6SXNzdWUzMjQ1MzQ3", "number": 1850, "title": "Building and compiling C code with rustc/cargo", "user": {"login": "thoughtpolice", "id": 3416, "node_id": "MDQ6VXNlcjM0MTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thoughtpolice", "html_url": "https://github.com/thoughtpolice", "followers_url": "https://api.github.com/users/thoughtpolice/followers", "following_url": "https://api.github.com/users/thoughtpolice/following{/other_user}", "gists_url": "https://api.github.com/users/thoughtpolice/gists{/gist_id}", "starred_url": "https://api.github.com/users/thoughtpolice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thoughtpolice/subscriptions", "organizations_url": "https://api.github.com/users/thoughtpolice/orgs", "repos_url": "https://api.github.com/users/thoughtpolice/repos", "events_url": "https://api.github.com/users/thoughtpolice/events{/privacy}", "received_events_url": "https://api.github.com/users/thoughtpolice/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2012-02-16T02:02:34Z", "updated_at": "2013-03-14T23:43:33Z", "closed_at": "2013-03-14T09:01:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I discussed this in #1555. Basically, there are often times when you want to bundle some C code with a package, either because it's a binding and the source is portable, you're writing a shim for say, a C++ library, or just any transient piece of glue you want to distribute (say something that interfaces with `rt` etc.)\n\nCargo doesn't support this right now, as it only compiles crates in the source directory from what I can tell. `rustc` does not understand `.c` source files. Native modules work by mapping to shared libraries, but sometimes this is overkill (because the source is small,) and other times it's clunky (sundown and other libraries may be intended to included inline, so it's more work for a user who has to do it out of band anyway.)  Sometimes these shims are even required - you need a stable name for the linker to resolve, because the link-time function name is hidden behind a macro. This sort of wrapping occurs in many APIs.\n\nIdeally for something like #1555, if we could compile C/C++ code one way or another with a crate, a `sundown` library can be registered with cargo-central, with the source inline as it's only 3 files, rustdoc can be split off and also put in cargo-central too. I think this is a nice way to go, especially because rustdoc won't depend on sundown somehow being installed, but this is just one use case overall I think. It would also make it possible for me to reuse code and write bindings to other libraries easily (like LevelDB, and NaCl) that I've done in the past.\n\nThere are two ways of accomplishing this broadly speaking, both with merits, I think:\n\n 1) Make `rustc` be able to just accept c files to compile and run through the linker, along with crates. Alternatively this could be specified with crate attributes or something, listing the files to include in the build.\n 2) Make `cargo` actually take the responsibility of building the C files - this avoids complexity in the frontend but cargo may have to do a lot more. I think this does have merit from the POV of getting complexity out of the frontend.\n\nHowever, I think 1 is the way to go and has the most bang for your buck, since rustc is already doing the compilation, and can give flags that may be necessary to the C compiler (like say, `-fPIC` or not.) This does keep cargo simpler. It also makes it really easy for users: `rustc leveldb` or somesuch, for example, where there may be an `#cfiles[(...)]` attribute in the crate. You don't need cargo just to build your project, either.\n\nThis does mean there may need to be more syntax for accommodating native methods that resolve to a link time symbol, not a full blown library. I don't know what the syntax would look like, I'm open to suggestions from others here.\n", "closed_by": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/1850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/1850/timeline", "performed_via_github_app": null, "state_reason": "completed"}