{"url": "https://api.github.com/repos/rust-lang/rust/issues/29023", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29023/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29023/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29023/events", "html_url": "https://github.com/rust-lang/rust/issues/29023", "id": 111188157, "node_id": "MDU6SXNzdWUxMTExODgxNTc=", "number": 29023, "title": "Static method impls specialized for concrete phantom types invisible to other crates", "user": {"login": "mlalic", "id": 229614, "node_id": "MDQ6VXNlcjIyOTYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/229614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlalic", "html_url": "https://github.com/mlalic", "followers_url": "https://api.github.com/users/mlalic/followers", "following_url": "https://api.github.com/users/mlalic/following{/other_user}", "gists_url": "https://api.github.com/users/mlalic/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlalic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlalic/subscriptions", "organizations_url": "https://api.github.com/users/mlalic/orgs", "repos_url": "https://api.github.com/users/mlalic/repos", "events_url": "https://api.github.com/users/mlalic/events{/privacy}", "received_events_url": "https://api.github.com/users/mlalic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-13T14:09:56Z", "updated_at": "2017-04-15T14:42:23Z", "closed_at": "2017-04-15T14:42:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Let there be a crate consisting of the following short code snippet:\n\n``` rust\nuse std::marker::PhantomData;\n\npub struct Foo;\npub struct Bar;\n\npub struct Baz<T> {\n    _t: PhantomData<T>,\n}\n\nimpl Baz<Foo> {\n    pub fn new() -> Baz<Foo> {\n        Baz { _t: PhantomData }\n    }\n}\n\nimpl Baz<Bar> {\n    pub fn new() -> Baz<Bar> {\n        Baz { _t: PhantomData }\n    }\n}\n```\n\nWithin the same crate, a function such as the following:\n\n``` rust\nfn test_both_available() {\n    let foo: Baz<Foo> = Baz::<Foo>::new();\n    let bar: Baz<Bar> = Baz::<Bar>::new();\n}\n```\n\ncompiles with no error.\n\nHowever, when the crate is imported by a different one, the same function causes a compilation error. The compiler decides that the `Baz` struct only has a single `new` method and as such does not accept any type parameters. The method that it ends up seeing is always the one whose `impl` was defined second in the original crate.\n\nExample compiler error:\n\n```\nexamples/foo.rs:6:31: 6:34 error: too many type parameters provided: expected at most 0 parameters, found 1 parameter [E0087]\nexamples/foo.rs:6     let foo: Baz<Foo> = Baz::<Foo>::new();\n                                                ^~~\nexamples/foo.rs:6:31: 6:34 help: run `rustc --explain E0087` to see a detailed explanation\nexamples/foo.rs:6:25: 6:42 error: mismatched types:\n expected `phantom_test::Baz<phantom_test::Foo>`,\n    found `phantom_test::Baz<phantom_test::Bar>`\n(expected struct `phantom_test::Foo`,\n    found struct `phantom_test::Bar`) [E0308]\nexamples/foo.rs:6     let foo: Baz<Foo> = Baz::<Foo>::new();\n                                          ^~~~~~~~~~~~~~~~~\nexamples/foo.rs:6:25: 6:42 help: run `rustc --explain E0308` to see a detailed explanation\nexamples/foo.rs:7:31: 7:34 error: too many type parameters provided: expected at most 0 parameters, found 1 parameter [E0087]\nexamples/foo.rs:7     let bar: Baz<Bar> = Baz::<Bar>::new();\n                                                ^~~\nexamples/foo.rs:7:31: 7:34 help: run `rustc --explain E0087` to see a detailed explanation\nerror: aborting due to 3 previous errors\n```\n\nIf the following two functions are added to the original crate:\n\n``` rust\npub fn foo() -> Baz<Foo> {\n    Baz::<Foo>::new()\n}\n\npub fn bar() -> Baz<Bar> {\n    Baz::<Bar>::new()\n}\n```\n\nother crates can then use them to instantiate the corresponding `Baz` struct.\n\nThis seems like some surprising behavior... I would expect that if a function such as `test_both_available` can be defined within the original crate, it would also be all right in crates that import the original one.\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29023/timeline", "performed_via_github_app": null, "state_reason": "completed"}