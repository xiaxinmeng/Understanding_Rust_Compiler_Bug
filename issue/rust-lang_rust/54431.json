{"url": "https://api.github.com/repos/rust-lang/rust/issues/54431", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54431/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54431/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54431/events", "html_url": "https://github.com/rust-lang/rust/issues/54431", "id": 362640799, "node_id": "MDU6SXNzdWUzNjI2NDA3OTk=", "number": 54431, "title": "Vtables not position independent for target thumbv7em-none-eabi", "user": {"login": "torfmaster", "id": 24639767, "node_id": "MDQ6VXNlcjI0NjM5NzY3", "avatar_url": "https://avatars.githubusercontent.com/u/24639767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/torfmaster", "html_url": "https://github.com/torfmaster", "followers_url": "https://api.github.com/users/torfmaster/followers", "following_url": "https://api.github.com/users/torfmaster/following{/other_user}", "gists_url": "https://api.github.com/users/torfmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/torfmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/torfmaster/subscriptions", "organizations_url": "https://api.github.com/users/torfmaster/orgs", "repos_url": "https://api.github.com/users/torfmaster/repos", "events_url": "https://api.github.com/users/torfmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/torfmaster/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 55301954, "node_id": "MDU6TGFiZWw1NTMwMTk1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-Arm", "name": "O-Arm", "color": "6e6ec0", "default": false, "description": "Target: 32-bit Arm processors (armv6, armv7, thumb...), including 64-bit Arm in AArch32 state"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-21T14:28:53Z", "updated_at": "2020-02-27T19:35:41Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "# Summary\r\nI'm having trouble using dynamic dispatch for trait objects on a cortex-m4. \r\nThe setup is rather complicated as relocated binaries only make sense for binaries which will actually be relocated. In this case I try to run a tock app created with libtock-rs.\r\n\r\nThe vtables in the binary get relocated, however the content of the vtables is not position independent but pointing to the load addresses of the function to be called.\r\n\r\nI have written a \"fixup-routine\" in the following pull request, however uses a very rough heuristics to identify vtables in the .rodata section:\r\nhttps://github.com/tock/libtock-rs/pull/56\r\n\r\n# Description of the problem\r\nI compile (using nightly-2018-08-16) the traitobj-Example in the PR using ropi-relocation model. Access to the vtable works just fine as the addresses of the vtables are access relatively to the position of the application in flash. However, the addresses in the vtables point to the static load address in the binary of the functions to call.\r\n\r\nCurrently, I solve the problem using a fixup routine which fixes the addresses in the vtables (and potentially destroys other elements of .rodata).\r\n\r\n# Expected behavior\r\nThe addresses in the vtables should be accessed in a way which is position independent.\r\nAt least there should be a way to identify vtables in the .rodata segment such that at least theoretically the vtables could be fixed. However, recently the behavior of the Rust compiler changed so that it creates vtable-Symbols which don't carry names containing \"vtable\" anymore so for me it is impossible to find these symbols ( rust nightly 2018-06-14 stil creates symbols named *vtable*).\r\n\r\n# Provide information\r\nThe description provided here is relatively rough. Please help me providing the information necessary to investigate the problem.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54431/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54431/timeline", "performed_via_github_app": null, "state_reason": null}