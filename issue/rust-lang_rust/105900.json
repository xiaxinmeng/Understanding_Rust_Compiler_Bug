{"url": "https://api.github.com/repos/rust-lang/rust/issues/105900", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105900/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105900/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105900/events", "html_url": "https://github.com/rust-lang/rust/issues/105900", "id": 1503054720, "node_id": "I_kwDOAAsO6M5ZlsuA", "number": 105900, "title": "Exponential compile times for nested struct with associated type and generics", "user": {"login": "alansartorio", "id": 47906325, "node_id": "MDQ6VXNlcjQ3OTA2MzI1", "avatar_url": "https://avatars.githubusercontent.com/u/47906325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alansartorio", "html_url": "https://github.com/alansartorio", "followers_url": "https://api.github.com/users/alansartorio/followers", "following_url": "https://api.github.com/users/alansartorio/following{/other_user}", "gists_url": "https://api.github.com/users/alansartorio/gists{/gist_id}", "starred_url": "https://api.github.com/users/alansartorio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alansartorio/subscriptions", "organizations_url": "https://api.github.com/users/alansartorio/orgs", "repos_url": "https://api.github.com/users/alansartorio/repos", "events_url": "https://api.github.com/users/alansartorio/events{/privacy}", "received_events_url": "https://api.github.com/users/alansartorio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-12-19T14:27:01Z", "updated_at": "2023-04-20T05:41:04Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\n\r\npub trait Wrappable<I>: Sized {\r\n    type Type;\r\n    fn wrap(self) -> Wrapper<Self, Self::Type> {\r\n        Wrapper(self, PhantomData)\r\n    }\r\n}\r\n\r\npub struct Wrapper<A, E>(A, PhantomData<E>);\r\nimpl<I, E, A: Wrappable<I, Type = E>> Wrappable<I> for Wrapper<A, E> {\r\n    type Type = E;\r\n}\r\n\r\nimpl Wrappable<u8> for u8 {\r\n    type Type = u8;\r\n}\r\n\r\npub fn function() {\r\n    0u8\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap()\r\n        .wrap();\r\n}\r\n```\r\n\r\nAnd for each wrap I add, compilation times and memory usage double unexpectedly.\r\n\r\nWhen I run `RUSTFLAGS=\"-Z time-passes\" cargo check` I get this:\r\n```\r\n    Blocking waiting for file lock on build directory\r\n    Checking slow_compile v0.1.0 (/####/slow_compile)\r\ntime:   0.000; rss:   36MB ->   39MB (   +3MB)        parse_crate\r\ntime:   0.001; rss:   41MB ->   58MB (  +16MB)        expand_crate\r\ntime:   0.001; rss:   41MB ->   58MB (  +16MB)        macro_expand_crate\r\ntime:   0.000; rss:   58MB ->   61MB (   +3MB)        late_resolve_crate\r\ntime:   0.000; rss:   58MB ->   61MB (   +3MB)        resolve_crate\r\ntime:   0.002; rss:   41MB ->   61MB (  +19MB)        configure_and_expand\r\ntime:   0.000; rss:   62MB ->   65MB (   +3MB)        misc_checking_1\r\ntime:   0.000; rss:   65MB ->   69MB (   +4MB)        type_collecting\r\ntime:  13.023; rss:   69MB -> 2788MB (+2719MB)        item_bodies_checking\r\ntime:  13.023; rss:   65MB -> 2788MB (+2722MB)        type_check_crate\r\ntime:   0.002; rss: 2788MB -> 2790MB (   +3MB)        MIR_borrow_checking\r\ntime:   0.004; rss: 2790MB -> 2811MB (  +21MB)        crate_lints\r\ntime:   0.004; rss: 2790MB -> 2811MB (  +21MB)        lint_checking\r\ntime:   0.004; rss: 2790MB -> 2811MB (  +21MB)        misc_checking_3\r\ntime:   0.046; rss: 2811MB -> 2811MB (   +0MB)        codegen_crate\r\ntime:   0.001; rss: 2811MB -> 2815MB (   +4MB)        incr_comp_persist_result_cache\r\ntime:   0.001; rss: 2811MB -> 2815MB (   +4MB)        serialize_dep_graph\r\ntime:   0.042; rss: 2815MB -> 1809MB (-1006MB)        free_global_ctxt\r\ntime:  13.200; rss:   28MB ->   95MB (  +67MB)        total\r\n    Finished dev [unoptimized + debuginfo] target(s) in 13.86s\r\n```\r\n\r\nHere's a playground where you can reproduce it:\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=db81287cfac9166b22476eb739703812\r\n\r\nI got this code by reducing a parser I was writing using the [chumsky](https://crates.io/crates/chumsky) crate:\r\n```rust\r\nuse chumsky::prelude::*;\r\n\r\npub fn parser() -> impl Parser<char, (), Error = Simple<char>> {\r\n    // Time to compile gets quicker when I replace line 7 with:\r\n    //just::<char, _, _>(\"a\")\r\n\r\n    just(\"a\")\r\n        .then(just(\"a\"))\r\n        .then(just(\"a\"))\r\n        .then(just(\"a\"))\r\n        .then(just(\"a\"))\r\n        .then(just(\"a\"))\r\n        .then(just(\"a\"))\r\n        .then(just(\"a\"))\r\n        .then(just(\"a\"))\r\n        .then(just(\"a\"))\r\n        .then(just(\"a\"))\r\n        .then(just(\"a\"))\r\n        .then(just(\"a\"))\r\n        // Each call I add increases cargo check time by a factor of x10\r\n        //  and memory usage by x2\r\n        //.then(just(\"a\"))\r\n        .ignored()\r\n}\r\n```\r\n\r\nI checked some similar issues but I couldn't find the same problem I have:\r\n* This one says that it worked fine on version 1.40.0, but my code doesn't\r\nhttps://github.com/rust-lang/rust/issues/83341\r\n\r\n* This one uses the `return_position_impl_trait_in_trait` feature, mine doesn't\r\nhttps://github.com/rust-lang/rust/issues/102527\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.68.0-nightly (d0dc9efff 2022-12-18)\r\nbinary: rustc\r\ncommit-hash: d0dc9efff14ac0a1eeceffd1e605e37eeb8362a0\r\ncommit-date: 2022-12-18\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.68.0-nightly\r\nLLVM version: 15.0.6\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105900/timeline", "performed_via_github_app": null, "state_reason": null}