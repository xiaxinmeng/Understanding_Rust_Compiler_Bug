{"url": "https://api.github.com/repos/rust-lang/rust/issues/102870", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102870/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102870/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102870/events", "html_url": "https://github.com/rust-lang/rust/issues/102870", "id": 1402608760, "node_id": "I_kwDOAAsO6M5Tmhx4", "number": 102870, "title": "Occurs `higher-ranked lifetime error` by dyn-trait, associated types, and Send constraints.", "user": {"login": "White-Green", "id": 43771790, "node_id": "MDQ6VXNlcjQzNzcxNzkw", "avatar_url": "https://avatars.githubusercontent.com/u/43771790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/White-Green", "html_url": "https://github.com/White-Green", "followers_url": "https://api.github.com/users/White-Green/followers", "following_url": "https://api.github.com/users/White-Green/following{/other_user}", "gists_url": "https://api.github.com/users/White-Green/gists{/gist_id}", "starred_url": "https://api.github.com/users/White-Green/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/White-Green/subscriptions", "organizations_url": "https://api.github.com/users/White-Green/orgs", "repos_url": "https://api.github.com/users/White-Green/repos", "events_url": "https://api.github.com/users/White-Green/events{/privacy}", "received_events_url": "https://api.github.com/users/White-Green/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-10-10T05:16:21Z", "updated_at": "2022-10-10T05:16:21Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nA program using dyn-trait and associae types fails to infer a Send constraint and gives a `higher-ranked lifetime error`.\r\nI think this is either a bug in rustc or the error message needs to be improved.\r\nHere is the (probably near-minimal) code that produces this error.\r\n\r\n```rust\r\nuse std::any::Any;\r\nuse std::future::Future;\r\n\r\n// OK0\r\n// struct ResultType(Box<dyn Any + Send>);\r\n// impl From<Box<dyn Any + Send>> for ResultType {\r\n//     fn from(value: Box<dyn Any + Send>) -> Self {\r\n//         ResultType(value)\r\n//     }\r\n// }\r\n\r\n// NG0\r\ntype ResultType = Box<dyn Any + Send>;\r\n\r\nfn f() -> impl Future<Output=ResultType> + Send {\r\n    async move {\r\n        // OK1\r\n        // let result = vec![ATNewType::<Option<ResultType>>(f2().await)];\r\n\r\n        // NG1\r\n        let mut result = Vec::<ATNewType<Option<ResultType>>>::new();\r\n        result.push(ATNewType::<Option<ResultType>>(f2().await));\r\n\r\n        // OK2\r\n        // let result = Some(ATNewType::<Option<ResultType>>(f2().await));\r\n\r\n        // NG2\r\n        // let mut result = None::<ATNewType<Option<ResultType>>>;\r\n        // result = Some(ATNewType::<Option<ResultType>>(f2().await));\r\n\r\n        (Box::new(()) as Box<dyn Any + Send>).into()\r\n    }\r\n}\r\n\r\nasync fn f2() { unimplemented!() }\r\n\r\ntrait Trait {\r\n    type AT;\r\n}\r\n\r\nstruct ATNewType<T: Trait>(T::AT);\r\n\r\nimpl<T: 'static> Trait for Option<T> {\r\n    type AT = ();\r\n}\r\n```\r\n\r\nWhen compiling this program, rustc outputs the following error.\r\n\r\n```\r\nerror: higher-ranked lifetime error\r\n  --> src/main.rs:16:5\r\n   |\r\n16 | /     async move {\r\n17 | |         // OK1\r\n18 | |         // let result = vec![ATNewType::<Option<ResultType>>(f2().await)];\r\n19 | |\r\n...  |\r\n31 | |         (Box::new(()) as Box<dyn Any + Send>).into()\r\n32 | |     }\r\n   | |_____^\r\n```\r\n\r\nI tried some changes to the program to see if this error would go away. The results are described below.\r\n\r\n- comment-out `NG1` and uncomment either `OK1` or `OK2` -> succeed to compilation.\r\n- comment-out `NG1` and uncomment both `OK1` and `OK2` -> failed to compilation.\r\n- comment-out `NG1` and uncomment `NG2` -> failed to compilation.\r\n- comment-out `NG0` and uncomment `OK0` -> succeed to compilation regardless of the contents of function f.\r\n- remove Send constraints from the return type of function f -> succeed to compilation regardless of the contents of function f.\r\n- change `ResultType` to a non-dyn-trait type like `Box<()>` (and make the program consistent) -> succeed to compilation regardless of the contents of function f.\r\n- change `Trait` to be implemented only for `Option<ResultType>` -> receive a different error message below\r\n```\r\nerror: implementation of `Trait` is not general enough\r\n  --> src\\main.rs:16:5\r\n   |\r\n16 | /     async move {\r\n17 | |         // OK1\r\n18 | |         // let result = vec![ATNewType::<Option<ResultType>>(f2().await)];\r\n19 | |\r\n...  |\r\n31 | |         (Box::new(()) as Box<dyn Any + Send>).into()\r\n32 | |     }\r\n   | |_____^ implementation of `Trait` is not general enough\r\n   |\r\n   = note: `Option<Box<(dyn Any + Send + '0)>>` must implement `Trait`, for any lifetime `'0`...\r\n   = note: ...but `Trait` is actually implemented for the type `Option<Box<(dyn Any + Send + 'static)>>`\r\n```\r\n\r\nI am not familiar with the internals of rustc, but I hope this investigation helps.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nI have seen this error in several rustc below.\r\n```\r\nrustc 1.64.0 (a55dd71d5 2022-09-19)\r\nbinary: rustc\r\ncommit-hash: a55dd71d5fb0ec5a6a3a9e8c27b2127ba491ce52\r\ncommit-date: 2022-09-19\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.64.0\r\nLLVM version: 14.0.6\r\n```\r\n\r\n```\r\nrustc 1.66.0-nightly (81f391930 2022-10-09)\r\nbinary: rustc\r\ncommit-hash: 81f391930301afbc121b7c468138069daa354bf8\r\ncommit-date: 2022-10-09\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.66.0-nightly\r\nLLVM version: 15.0.2\r\n```\r\n\r\n```\r\nrustc 1.64.0 (a55dd71d5 2022-09-19)\r\nbinary: rustc\r\ncommit-hash: a55dd71d5fb0ec5a6a3a9e8c27b2127ba491ce52\r\ncommit-date: 2022-09-19\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.64.0\r\nLLVM version: 14.0.6\r\n```\r\n\r\n```\r\nrustc 1.66.0-nightly (81f391930 2022-10-09)\r\nbinary: rustc\r\ncommit-hash: 81f391930301afbc121b7c468138069daa354bf8\r\ncommit-date: 2022-10-09\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.66.0-nightly\r\nLLVM version: 15.0.2\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102870/timeline", "performed_via_github_app": null, "state_reason": null}