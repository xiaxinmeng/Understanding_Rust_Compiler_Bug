{"url": "https://api.github.com/repos/rust-lang/rust/issues/89606", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89606/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89606/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89606/events", "html_url": "https://github.com/rust-lang/rust/issues/89606", "id": 1018864414, "node_id": "I_kwDOAAsO6M48uqMe", "number": 89606, "title": "Internal compiler error: \"entered unreachable code: we captured two identical projections\"", "user": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252628, "node_id": "MDU6TGFiZWwyNjIyNTI2Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta", "name": "regression-from-stable-to-beta", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to beta."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1966877457, "node_id": "MDU6TGFiZWwxOTY2ODc3NDU3", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-critical", "name": "P-critical", "color": "eb6420", "default": false, "description": "Critical priority"}], "state": "closed", "locked": false, "assignee": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/85", "html_url": "https://github.com/rust-lang/rust/milestone/85", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/85/labels", "id": 7000387, "node_id": "MI_kwDOAAsO6M4AatFD", "number": 85, "title": "1.56.0", "description": "", "creator": {"login": "rustbot", "id": 47979223, "node_id": "MDQ6VXNlcjQ3OTc5MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47979223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustbot", "html_url": "https://github.com/rustbot", "followers_url": "https://api.github.com/users/rustbot/followers", "following_url": "https://api.github.com/users/rustbot/following{/other_user}", "gists_url": "https://api.github.com/users/rustbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustbot/subscriptions", "organizations_url": "https://api.github.com/users/rustbot/orgs", "repos_url": "https://api.github.com/users/rustbot/repos", "events_url": "https://api.github.com/users/rustbot/events{/privacy}", "received_events_url": "https://api.github.com/users/rustbot/received_events", "type": "User", "site_admin": false}, "open_issues": 2, "closed_issues": 625, "state": "closed", "created_at": "2021-07-24T07:40:14Z", "updated_at": "2022-04-26T15:23:54Z", "due_on": null, "closed_at": "2021-10-22T02:37:55Z"}, "comments": 11, "created_at": "2021-10-06T17:51:42Z", "updated_at": "2021-10-12T00:20:33Z", "closed_at": "2021-10-12T00:20:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\nThis bug popped up in CI on a project of ours. This does not reproduce on stable, but does reproduce on nightly and the latest beta (`1.56.0-beta.4`). Bisection shows that `nightly-2021-09-26` was the first build with the regression. Further bisection points to 6867dd2c014a3ebd20948c64671a569c2b7dffc1 being the commit that introduced the regression. If I had to guess from the PRs in the rollup I'd say #89208 seems the most likely, since it touched the code around the error source.\r\n\r\n### Code\r\n\r\n```Rust\r\nuse std::borrow::Cow;\r\n\r\npub type Block = [u8];\r\npub type BlockAncestorBlock<'a> = Cow<'a, [u8]>;\r\n\r\nenum Fork {\r\n    Local,\r\n    Foreign,\r\n}\r\n\r\npub struct BlockHeader<'a> {\r\n    pub block: Cow<'a, Block>,\r\n}\r\n\r\npub struct PairedFork<'a>\r\n{\r\n    local_head_block: Option<BlockAncestorBlock<'a>>,\r\n    foreign_head_block: Option<BlockAncestorBlock<'a>>,\r\n}\r\n\r\nimpl<'a> Iterator for PairedFork<'a>\r\n{\r\n    type Item = (BlockHeader<'a>, BlockHeader<'a>);\r\n\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        let tuplify = |prev_header: Option<BlockHeader<'a>>| match prev_header {\r\n            Some(block_header) => (\r\n                Some(Cow::Owned(Vec::from(block_header.block))),\r\n                Some(block_header),\r\n            ),\r\n            None => (None, None),\r\n        };\r\n        let mut advance = |fork: Fork| {\r\n            let PairedFork {\r\n                local_head_block,\r\n                foreign_head_block,\r\n            } = self;\r\n            let (next_block, header) = tuplify(None);\r\n            match fork {\r\n                Fork::Local => self.local_head_block = next_block,\r\n                Fork::Foreign => self.foreign_head_block = next_block,\r\n            };\r\n            header\r\n        };\r\n        None\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.57.0-nightly (25ec82738 2021-10-05)\r\nbinary: rustc\r\ncommit-hash: 25ec8273855fde2d72ae877b397e054de5300e10\r\ncommit-date: 2021-10-05\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.57.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'internal error: entered unreachable code: we captured two identical projections: capture1 = CapturedPlace { place: Place { base_ty: &mut PairedFork<'a>, base: Upvar(UpvarId(HirId { owner: DefId(0:24 ~ regression[aef9]::{impl#0}::next), local_id: 2 };`self`;DefId(0:26 ~ regression[aef9]::{impl#0}::next::{closure#1}))), projections: [Projection { ty: PairedFork<'a>, kind: Deref }, Projection { ty: std::option::Option<std::borrow::Cow<'a, [u8]>>, kind: Field(1, 0) }] }, info: CaptureInfo { capture_kind_expr_id: Some(HirId { owner: DefId(0:24 ~ regression[aef9]::{impl#0}::next), local_id: 91 }), path_expr_id: Some(HirId { owner: DefId(0:24 ~ regression[aef9]::{impl#0}::next), local_id: 91 }), capture_kind: ByRef(UpvarBorrow(MutBorrow, '_#30r)) }, mutability: Mut }, capture2 = CapturedPlace { place: Place { base_ty: &mut PairedFork<'a>, base: Upvar(UpvarId(HirId { owner: DefId(0:24 ~ regression[aef9]::{impl#0}::next), local_id: 2 };`self`;DefId(0:26 ~ regression[aef9]::{impl#0}::next::{closure#1}))), projections: [Projection { ty: PairedFork<'a>, kind: Deref }, Projection { ty: std::option::Option<std::borrow::Cow<'_, [u8]>>, kind: Field(1, 0) }] }, info: CaptureInfo { capture_kind_expr_id: Some(HirId { owner: DefId(0:24 ~ regression[aef9]::{impl#0}::next), local_id: 54 }), path_expr_id: Some(HirId { owner: DefId(0:24 ~ regression[aef9]::{impl#0}::next), local_id: 54 }), capture_kind: ByRef(UpvarBorrow(MutBorrow, '_#27r)) }, mutability: Mut }', compiler/rustc_typeck/src/check/upvar.rs:665:17\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/25ec8273855fde2d72ae877b397e054de5300e10/library/std/src/panicking.rs:517:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/25ec8273855fde2d72ae877b397e054de5300e10/library/core/src/panicking.rs:100:14\r\n   2: alloc::slice::<impl [T]>::sort_by::{{closure}}\r\n   3: alloc::slice::merge_sort\r\n   4: rustc_typeck::check::upvar::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::compute_min_captures\r\n   5: rustc_typeck::check::upvar::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::analyze_closure\r\n   6: rustc_hir::intravisit::walk_stmt\r\n   7: rustc_hir::intravisit::walk_block\r\n   8: rustc_hir::intravisit::walk_body\r\n   9: rustc_infer::infer::InferCtxtBuilder::enter\r\n  10: rustc_typeck::check::typeck\r\n  11: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  12: rustc_data_structures::stack::ensure_sufficient_stack\r\n  13: rustc_query_system::query::plumbing::try_execute_query\r\n  14: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::typeck\r\n  15: rustc_typeck::check::typeck\r\n  16: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  17: rustc_data_structures::stack::ensure_sufficient_stack\r\n  18: rustc_query_system::query::plumbing::try_execute_query\r\n  19: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::typeck\r\n  20: rustc_data_structures::sync::par_for_each_in\r\n  21: rustc_typeck::check::typeck_item_bodies\r\n  22: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  23: rustc_data_structures::stack::ensure_sufficient_stack\r\n  24: rustc_query_system::query::plumbing::try_execute_query\r\n  25: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::typeck_item_bodies\r\n  26: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  27: rustc_typeck::check_crate\r\n  28: rustc_interface::passes::analysis\r\n  29: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  30: rustc_data_structures::stack::ensure_sufficient_stack\r\n  31: rustc_query_system::query::plumbing::try_execute_query\r\n  32: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\r\n  33: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  34: rustc_span::with_source_map\r\n  35: scoped_tls::ScopedKey<T>::set\r\n\r\nquery stack during panic:\r\n#0 [typeck] type-checking `<impl at src/main.rs:21:1: 47:2>::next`\r\n#1 [typeck] type-checking `<impl at src/main.rs:21:1: 47:2>::next::{closure#0}`\r\nend of query stack\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89606/timeline", "performed_via_github_app": null, "state_reason": "completed"}