{"url": "https://api.github.com/repos/rust-lang/rust/issues/81751", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81751/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81751/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81751/events", "html_url": "https://github.com/rust-lang/rust/issues/81751", "id": 801227193, "node_id": "MDU6SXNzdWU4MDEyMjcxOTM=", "number": 81751, "title": "global_asm! does not register location information to LLVM, resulting in suboptimal error reporting.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-02-04T12:12:22Z", "updated_at": "2023-04-05T17:30:28Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Quick example ([run on playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=8dcc111cf690e80a409e53c0c260a9c7)):\r\n```rust\r\n#![feature(asm, global_asm)]\r\n\r\nglobal_asm!(\"GlobalThisIsNotAnInstruction\");\r\n\r\nfn main() {\r\n    unsafe {\r\n        asm!(\"MainThisIsNotAnInstruction\");\r\n    }\r\n}\r\n```\r\n\r\nCurrent error output is:\r\n```rust\r\nerror: invalid instruction mnemonic 'globalthisisnotaninstruction'\r\n  |\r\nnote: instantiated into assembly here\r\n --> <inline asm>:1:1\r\n  |\r\n1 | GlobalThisIsNotAnInstruction\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: invalid instruction mnemonic 'mainthisisnotaninstruction'\r\n --> src/main.rs:7:15\r\n  |\r\n7 |         asm!(\"MainThisIsNotAnInstruction\");\r\n  |               ^\r\n  |\r\nnote: instantiated into assembly here\r\n --> <inline asm>:2:2\r\n  |\r\n2 |     MainThisIsNotAnInstruction\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nThe reason `asm!` has location information is [because it attaches `!srcloc` metadata](https://github.com/rust-lang/rust/blob/6645da366eed0c61258a04265bea513e94df7ea6/compiler/rustc_codegen_llvm/src/asm.rs#L381-L407) on the `call asm` instruction, whereas `global_asm!` [does nothing of the sort](https://github.com/rust-lang/rust/blob/6645da366eed0c61258a04265bea513e94df7ea6/compiler/rustc_codegen_llvm/src/asm.rs#L335).\r\n\r\nIt's not clear [from the LLVM documentation](https://releases.llvm.org/11.0.0/docs/LangRef.html#module-level-inline-assembly) whether `!srcloc` (or something equivalent) is supported for `module asm`, so this might be blocked on LLVM implementing it in the first place.\r\n\r\nThis came up as @Jasper-Bekkers tried iimplementing `AsmMethods::codegen_global_asm` for `rustc_codegen_spirv` and noticed there was no `Span` being passed, and (presumably the more worrying aspect) that `hir::GlobalAsm` contains no `Span` either - it probably should (given that `hir::InlineAsm` has `line_spans: &[Span]`).\r\n\r\ncc @Amanieu @mrhota ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81751/timeline", "performed_via_github_app": null, "state_reason": null}