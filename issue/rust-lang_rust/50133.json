{"url": "https://api.github.com/repos/rust-lang/rust/issues/50133", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50133/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50133/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50133/events", "html_url": "https://github.com/rust-lang/rust/issues/50133", "id": 316463688, "node_id": "MDU6SXNzdWUzMTY0NjM2ODg=", "number": 50133, "title": "Invalid collision with TryFrom implementation?", "user": {"login": "npmccallum", "id": 288304, "node_id": "MDQ6VXNlcjI4ODMwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/288304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npmccallum", "html_url": "https://github.com/npmccallum", "followers_url": "https://api.github.com/users/npmccallum/followers", "following_url": "https://api.github.com/users/npmccallum/following{/other_user}", "gists_url": "https://api.github.com/users/npmccallum/gists{/gist_id}", "starred_url": "https://api.github.com/users/npmccallum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npmccallum/subscriptions", "organizations_url": "https://api.github.com/users/npmccallum/orgs", "repos_url": "https://api.github.com/users/npmccallum/repos", "events_url": "https://api.github.com/users/npmccallum/events{/privacy}", "received_events_url": "https://api.github.com/users/npmccallum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2018-04-21T05:27:18Z", "updated_at": "2023-05-25T20:42:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sorry for the code dump. This is the smallest code I could make to reproduce the problem.\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\nuse std::convert::TryFrom;\r\n\r\ntrait Integer {}\r\nimpl Integer for u8 {}\r\n\r\ntrait Adapter<I: Integer>: TryFrom<I> + Into<I> {}\r\n\r\nenum Choice {\r\n    Foo,\r\n    Bar,\r\n    Baz\r\n}\r\n\r\nimpl From<Choice> for u8 {\r\n    fn from(c: Choice) -> u8 {\r\n        match c {\r\n            Choice::Foo => 1,\r\n            Choice::Bar => 2,\r\n            Choice::Baz => 3,\r\n        }\r\n    }\r\n}\r\n\r\nimpl TryFrom<u8> for Choice {\r\n    type Error = ();\r\n    fn try_from(i: u8) -> Result<Choice, ()> {\r\n        match i {\r\n            1 => Ok(Choice::Foo),\r\n            2 => Ok(Choice::Bar),\r\n            3 => Ok(Choice::Baz),\r\n            _ => Err(()),\r\n        }\r\n    }\r\n}\r\n\r\nimpl Adapter<u8> for Choice {}\r\n\r\nstruct Pick<I: Integer, A: Adapter<I>> {\r\n    phantom: PhantomData<A>,\r\n    value: I,\r\n}\r\n\r\nimpl<I: Integer, A: Adapter<I>> From<A> for Pick<I, A> {\r\n    fn from(a: A) -> Pick<I, A> {\r\n        Pick {\r\n            phantom: PhantomData,\r\n            value: a.into(),\r\n        }\r\n    }\r\n}\r\n\r\nimpl<I: Integer, A: Adapter<I>> TryFrom<Pick<I, A>> for A {\r\n    type Error = A::Error;\r\n\r\n    fn try_from(p: Pick<I, A>) -> Result<A, Self::Error> {\r\n        A::try_from(p.value)\r\n    }\r\n}\r\n```\r\n\r\nAttempting to compile this produces:\r\n\r\n```\r\nerror[E0119]: conflicting implementations of trait `std::convert::TryFrom<Pick<_, _>>`:\r\n  --> src/main.rs:53:1\r\n   |\r\n53 | impl<I: Integer, A: Adapter<I>> TryFrom<Pick<I, A>> for A {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: conflicting implementation in crate `core`:\r\n           - impl<T, U> std::convert::TryFrom<U> for T\r\n             where T: std::convert::From<U>;\r\n\r\nerror[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g. `MyStruct<A>`)\r\n  --> src/main.rs:53:1\r\n   |\r\n53 | impl<I: Integer, A: Adapter<I>> TryFrom<Pick<I, A>> for A {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `A` must be used as the type parameter for some local type\r\n   |\r\n   = note: only traits defined in the current crate can be implemented for a type parameter\r\n```\r\n\r\nI've spent several hours looking at this and I can't figure out why I'm getting these errors. The type parameter `A` is being used as the type parameter for a local type. Maybe the compiler can't tell because it is nested inside `TryFrom<>`?\r\n\r\nBut I'm also not sure why the first error occurs at all. The rule it conflicts with can basically be described as \"types with infallible conversions implicitly implement fallible conversions.\" But in my case there is no infallible conversion. So I don't see where the conflict is arising from.\r\n\r\nIf there is really a bug and I'm not just overtired, this may impact #49305.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50133/reactions", "total_count": 64, "+1": 64, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50133/timeline", "performed_via_github_app": null, "state_reason": null}