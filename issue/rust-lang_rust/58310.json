{"url": "https://api.github.com/repos/rust-lang/rust/issues/58310", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58310/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58310/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58310/events", "html_url": "https://github.com/rust-lang/rust/issues/58310", "id": 408225402, "node_id": "MDU6SXNzdWU0MDgyMjU0MDI=", "number": 58310, "title": "Implement \"small substs optimization\" for substs of length 1", "user": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2019-02-08T16:24:51Z", "updated_at": "2020-08-21T21:51:59Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "One of the core types in the compiler is `ty::Subst`, which represents a list of \"substitutions\" - arguments to generic parameters. For example, `Option<u32>` has a `Substs` of `[Uint(u32)]` and `T: Sized` has a `Substs` of `[Param(T)]`.\r\n\r\nA `ty::Substs` is an interned `&'tcx List<Kind<'tcx>>`. It is represented as a thin pointer to a struct of this form:\r\n\r\n```Rust\r\npub struct List<T> {\r\n    len: usize,\r\n    data: [T; 0],\r\n    opaque: OpaqueListContents,\r\n}\r\n```\r\n\r\nWhere a `List` of length 0 is represented by this bit of evil code:\r\n```Rust\r\nimpl<T> List<T> {\r\n    #[inline(always)]\r\n    pub fn empty<'a>() -> &'a List<T> {\r\n        #[repr(align(64), C)]\r\n        struct EmptySlice([u8; 64]);\r\n        static EMPTY_SLICE: EmptySlice = EmptySlice([0; 64]);\r\n        assert!(mem::align_of::<T>() <= 64);\r\n        unsafe {\r\n            &*(&EMPTY_SLICE as *const _ as *const List<T>)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd `List`s of non-zero length are represented by a `List` that references an interner. This is inefficient, because I'm quite sure that many `Subst`s are of length 1 (e.g., consider all the trait bounds of traits with no type parameter).\r\n\r\nWhen we look into the interner, there are 2 problems:\r\n1. This requires a memory lookup, which increases CPU cache usage and can cause CPU cache misses.\r\n2. When we are creating a new type, we need to intern the substs, which causes hashmap lookups and even more CPU cache misses.\r\n\r\n## Potential for measurements\r\n\r\nIt might be nice to count the amount of `Substs` of each length while compiling popular crates. This should be rather easy if you modify the interner.\r\n\r\n## Implementation Strategy\r\n\r\n### Stage 1 - getting a newtype\r\n\r\nThere are a few representations for `Substs` that are possible, but in any case I think the best way to go forward would be to first hide the representation.\r\n\r\nCurrently a `Substs` is this typedef:\r\n```Rust\r\npub type Substs<'tcx> = List<Kind<'tcx>>;\r\n```\r\n\r\nAnd it is normally used as `&'tcx Substs<'tcx>`.\r\n\r\nWe would need to replace it with something that has a hidden representation, i.e. initially a newtype of the form:\r\n```Rust\r\npub struct SubstsRef<'tcx> {\r\n    inner: &'tcx Substs<'tcx>\r\n}\r\n```\r\n\r\nI think a reasonable way of going around this would be to first have a\r\n```rust\r\npub type SubstsRef<'tcx> = &'tcx Substs<'tcx>;\r\n```\r\n\r\nThen retire the use of the old `Substs` typedef in most places, then switch `SubstsRef` to be a newtype.\r\n\r\nWhen using a newtype, it's probably a good idea to have a `Deref` impl of this form:\r\n```Rust\r\nimpl<'tcx> Deref for SubstsRef<'tcx> {\r\n    type Target = [Kind<'tcx>];\r\n\r\n    #[inline]\r\n    fn deref(&self) -> &Self::Target { self.inner }\r\n}\r\n```\r\n\r\nThis will avoid needing to implement specific methods in most cases.\r\n\r\nAlso remember to implement the \"derive\" trait impls (`Hash`, `PartialEq`, etc.) as needed.\r\n\r\n## Stage 2 - improving the representation\r\n\r\nMy preferred representation is as follows:\r\n\r\nUse the first 2 bits as the tag, in the style of [`TAG_MASK`], e.g.\r\n```rust\r\nconst TYPE_TAG: usize = 0b00;\r\nconst REGION_TAG: usize = 0b01;\r\nconst LIST_TAG: usize = 0b10;\r\n```\r\n\r\nThen represent things as follows:\r\n\r\nA substs of length 0: `List::empty() | LIST_TAG`\r\nA substs of a single type: `ty | TYPE_TAG`\r\nA substs of a single region: `ty | REGION_TAG`\r\nA substs of length >1: `substs | LIST_TAG`\r\n\r\nYou'll want to define `Substs` as follows:\r\n```rust\r\n#[repr(C)]\r\npub struct SubstsRef<'tcx> {\r\n    ptr: NonZeroUsize,\r\n    marker: PhantomData<Kind<'tcx>>\r\n}\r\n```\r\n\r\nThen you can implement `Deref` in this style:\r\n```Rust\r\nimpl<'tcx> Deref for SubstsRef<'tcx> {\r\n    type Target = [Kind<'tcx>];\r\n\r\n    #[inline]\r\n    fn deref(&self) -> &Self::Target {\r\n        let ptr = self.ptr.get();\r\n        match ptr & TAG_MASK {\r\n            REGION_TAG | TYPE_TAG => {\r\n                // We still match layout with `Kind`.\r\n                let this: &[Kind; 1] = mem::transmute(self);\r\n                this\r\n            }\r\n            LIST_TAG => {\r\n                let inner: &List<Kind> = &*((ptr & !TAG_MASK) as *const _);\r\n                inner\r\n            }\r\n            _ => intrinsics::unreachable()\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThen you'll basically only need to change the interning functions not to go through the interner for substs of length 1. As long as you always consistently map substs of length 1 to not use an interner, you can do `PartialEq`, `Hash` etc. \"by value\".\r\n\r\nThen you can \"cut the ribbon\" and do a `@bors try` to see how much perf you gain.\r\n\r\n## Stage 2a - Cleanup\r\n\r\nRemove occurrences of `InternalSubsts` in comments.\r\n\r\n## Items for later investigation\r\n\r\nIt might be worth investigating whether it's worth extending the small substs optimization to substs of length 2 to get rid of even more interner calls - that would increase the size of `TyS` and things, so it might be a space-time tradeoff.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58310/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58310/timeline", "performed_via_github_app": null, "state_reason": null}