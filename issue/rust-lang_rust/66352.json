{"url": "https://api.github.com/repos/rust-lang/rust/issues/66352", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66352/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66352/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66352/events", "html_url": "https://github.com/rust-lang/rust/issues/66352", "id": 521868387, "node_id": "MDU6SXNzdWU1MjE4NjgzODc=", "number": 66352, "title": "Investigate replacing query Providers structs with trait objects.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-12T23:46:57Z", "updated_at": "2019-11-28T21:15:56Z", "closed_at": "2019-11-28T21:15:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Part of the motivation here is that for non-local crates, we right now have to go through `dyn Any` to actually get access to per-crate data, whereas if `Providers` were replaced with a trait object, the implementer would have direct access to any private data they may happen to need.\r\n\r\n<hr/>\r\n\r\nHowever, `Providers` is really handy in that we can construct it at runtime, piece by piece, but there is nothing equivalent to that when it comes to `trait` methods, short of this hack:\r\n\r\nInstead of:\r\n```rust\r\nlet mut providers = rustc::query::Providers::default();\r\nfoo::provide(&mut providers);\r\nbar::provide(&mut providers);\r\nbaz::provide(&mut providers);\r\nproviders\r\n```\r\nwe'd likely need:\r\n```rust\r\n// You wouldn't actually be able to have a match like this,\r\n// instead the rest of the code would be in a generic function.\r\nlet providers = match krate_source {\r\n    Local(hir) => rustc::hir::Provide { hir },\r\n    NonLocal(data) => rustc_metadata::rmeta::Provide { data },\r\n};\r\nlet providers = foo::Provide(providers);\r\nlet providers = bar::Provide(providers);\r\nlet providers = baz::Provide(providers);\r\nBox::new(providers) as Box<dyn rustc::query::Provider>\r\n```\r\n\r\nEach of `{foo,bar,baz}::Provide<T>` would have to be a newtype (of `T`) with an `impl` that delegates all but a few methods, to `T`.\r\n(Also, we could use free functions `fn provide(impl Provider) -> impl Provider`, and have the entirety of the newtype as an implementation detail hidden inside the body, perhaps by using a macro?)\r\n\r\nWe can probably automate some of this this by having a marker `trait DelegateTo<T>: Deref<Target = T> {}` which enables a `default impl` of `Provider` delegating all the methods to `T`, and then the regular `impl` of `Provider` for each individual `Provide<T>` newtype would contain only the methods that are relevant to it.\r\n\r\nThis still feels horribly inefficient but at least we don't have to generate the delegation using macros so *maybe* it's not that bad?\r\n\r\ncc @nikomatsakis @michaelwoerister @Zoxc ", "closed_by": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66352/timeline", "performed_via_github_app": null, "state_reason": "completed"}