{"url": "https://api.github.com/repos/rust-lang/rust/issues/88204", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88204/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88204/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88204/events", "html_url": "https://github.com/rust-lang/rust/issues/88204", "id": 976091344, "node_id": "MDU6SXNzdWU5NzYwOTEzNDQ=", "number": 88204, "title": "Slice::contains generates suboptimal assembly code", "user": {"login": "SadiinsoSnowfall", "id": 32017313, "node_id": "MDQ6VXNlcjMyMDE3MzEz", "avatar_url": "https://avatars.githubusercontent.com/u/32017313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SadiinsoSnowfall", "html_url": "https://github.com/SadiinsoSnowfall", "followers_url": "https://api.github.com/users/SadiinsoSnowfall/followers", "following_url": "https://api.github.com/users/SadiinsoSnowfall/following{/other_user}", "gists_url": "https://api.github.com/users/SadiinsoSnowfall/gists{/gist_id}", "starred_url": "https://api.github.com/users/SadiinsoSnowfall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SadiinsoSnowfall/subscriptions", "organizations_url": "https://api.github.com/users/SadiinsoSnowfall/orgs", "repos_url": "https://api.github.com/users/SadiinsoSnowfall/repos", "events_url": "https://api.github.com/users/SadiinsoSnowfall/events{/privacy}", "received_events_url": "https://api.github.com/users/SadiinsoSnowfall/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2021-08-21T09:16:34Z", "updated_at": "2023-05-15T07:07:47Z", "closed_at": "2023-05-15T07:07:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given `val: u8`, `slice: &[u8; 8]` and `arr: [u8; 8]`, I expected the following statements to compile down to the same thing : \r\n```rust\r\n// a\r\nslice.contains(&val);\r\n\r\n// b\r\nslice[0] == val\r\n  || slice[1] == val\r\n  || slice[2] == val\r\n  || slice[3] == val\r\n  || slice[4] == val\r\n  || slice[5] == val\r\n  || slice[6] == val\r\n  || slice[7] == val;\r\n  \r\n// c\r\narr.contains(&val);\r\n\r\n// d\r\narr[0] == val\r\n  || arr[1] == val\r\n  || arr[2] == val\r\n  || arr[3] == val\r\n  || arr[4] == val\r\n  || arr[5] == val\r\n  || arr[6] == val\r\n  || arr[7] == val;\r\n  ```\r\n  \r\n  However, the resulting assembly differs quite a lot:\r\n  * The `a` statement compiles down to a loop, checking one element at a time, except for `T = u8|i8` and `N < 16` where it instead call fall on the fast path of [`memchr`](https://github.com/rust-lang/rust/blob/master/library/core/src/slice/memchr.rs#L43) which gets optimized a little bit better.\r\n  * The `b` statement compiles down to a unrolled-loop, checking one element at a time in a branchless fashion. Most of the time it doesn't give any SIMD instructions.\r\n  * The `c` statement always compiles down to a loop, checking one element at a time, except for `T = u8|i8` and `N >= 16` where it instead call [`memchr_general_case`](https://github.com/rust-lang/rust/blob/master/library/core/src/slice/memchr.rs#L50)\r\n  * The `d` statement always compiles down to a few branchless SIMD instructions for any primitive type used and any array size.\r\n  \r\nBecause the slice/array size is known at compile-time and the type checker guarantees that it will be respected by any calling function, I expected the compiler to take this into account while optimizing the resulting assembly. However, this information seems to be lost at some point when using the `contains` method.\r\n\r\n`arr.contains(&val)` and `slice.contains(&val)` are simplified as `arr.as_ref().iter().any(|e| *e == val)` and `slice.iter().any(|e| *e == val)` if I'm not mistaken (which is wierd because for some N and T, they don't yield the same assembly). The compiler does not seem to be able to unroll this case.\r\n\r\ngodbolt links for\r\n[T=u8; N=8](https://godbolt.org/z/bTYnod7hc)\r\n[T=u16; N=8](https://godbolt.org/z/9cc7jKsEz)\r\n[T=u32; N=8](https://godbolt.org/z/9c3KoGj17)\r\n[T=u64; N=8](https://godbolt.org/z/4naeK4Too)\r\n\r\n[T=u8; N=16](https://godbolt.org/z/G15cWdfYG)\r\n[T=u16; N=16](https://godbolt.org/z/qKWWPxT67)\r\n[T=u32; N=16](https://godbolt.org/z/rq8ha7xMs)\r\n[T=u64; N=16](https://godbolt.org/z/4naeK4Too)\r\n ", "closed_by": {"login": "SadiinsoSnowfall", "id": 32017313, "node_id": "MDQ6VXNlcjMyMDE3MzEz", "avatar_url": "https://avatars.githubusercontent.com/u/32017313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SadiinsoSnowfall", "html_url": "https://github.com/SadiinsoSnowfall", "followers_url": "https://api.github.com/users/SadiinsoSnowfall/followers", "following_url": "https://api.github.com/users/SadiinsoSnowfall/following{/other_user}", "gists_url": "https://api.github.com/users/SadiinsoSnowfall/gists{/gist_id}", "starred_url": "https://api.github.com/users/SadiinsoSnowfall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SadiinsoSnowfall/subscriptions", "organizations_url": "https://api.github.com/users/SadiinsoSnowfall/orgs", "repos_url": "https://api.github.com/users/SadiinsoSnowfall/repos", "events_url": "https://api.github.com/users/SadiinsoSnowfall/events{/privacy}", "received_events_url": "https://api.github.com/users/SadiinsoSnowfall/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88204/timeline", "performed_via_github_app": null, "state_reason": "completed"}