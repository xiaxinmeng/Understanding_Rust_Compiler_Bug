{"url": "https://api.github.com/repos/rust-lang/rust/issues/85159", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85159/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85159/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85159/events", "html_url": "https://github.com/rust-lang/rust/issues/85159", "id": 885138989, "node_id": "MDU6SXNzdWU4ODUxMzg5ODk=", "number": 85159, "title": "Associated type projection fails within Diesel Insertable constraint", "user": {"login": "oeed", "id": 3835991, "node_id": "MDQ6VXNlcjM4MzU5OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3835991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oeed", "html_url": "https://github.com/oeed", "followers_url": "https://api.github.com/users/oeed/followers", "following_url": "https://api.github.com/users/oeed/following{/other_user}", "gists_url": "https://api.github.com/users/oeed/gists{/gist_id}", "starred_url": "https://api.github.com/users/oeed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oeed/subscriptions", "organizations_url": "https://api.github.com/users/oeed/orgs", "repos_url": "https://api.github.com/users/oeed/repos", "events_url": "https://api.github.com/users/oeed/events{/privacy}", "received_events_url": "https://api.github.com/users/oeed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-05-10T21:22:11Z", "updated_at": "2021-05-10T21:22:11Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse diesel::{\r\n    insertable::CanInsertInSingleQuery, mysql::Mysql, prelude::*, query_builder::QueryFragment,\r\n};\r\n\r\ndiesel::table! {\r\n  posts (id) {\r\n      id -> Integer,\r\n      title -> Varchar,\r\n      body -> Text,\r\n      published -> Bool,\r\n  }\r\n}\r\n\r\n#[derive(Queryable)]\r\npub struct Post {\r\n    pub id: i32,\r\n    pub title: String,\r\n    pub body: String,\r\n    pub published: bool,\r\n}\r\n\r\ntrait Create {\r\n    type Table: Table;\r\n\r\n    fn create_assoc_type<V, Conn: Connection<Backend = Mysql>>(\r\n        &self,\r\n        values: V,\r\n        conn: &Conn,\r\n    ) -> QueryResult<()>\r\n    where\r\n        V: Insertable<Self::Table>,\r\n        V::Values: QueryFragment<Mysql> + CanInsertInSingleQuery<Mysql>;\r\n}\r\n\r\npub struct PostRepository {}\r\n\r\nimpl Create for PostRepository {\r\n    type Table = posts::table;\r\n\r\n    // impl the function with an associated type\r\n    fn create_assoc_type<V, Conn: Connection<Backend = Mysql>>(\r\n        &self,\r\n        values: V,\r\n        conn: &Conn,\r\n    ) -> QueryResult<()>\r\n    where\r\n        V: Insertable<Self::Table>,\r\n        V::Values: QueryFragment<Mysql> + CanInsertInSingleQuery<Mysql>,\r\n    {\r\n        values.insert_into(posts::table).execute(conn)?;\r\n        Ok(())\r\n    }\r\n}\r\n\r\nimpl PostRepository {\r\n    // impl the function without an associated type\r\n    fn create_fixed_type<V, Conn: Connection<Backend = Mysql>>(\r\n        &self,\r\n        values: V,\r\n        conn: &Conn,\r\n    ) -> QueryResult<()>\r\n    where\r\n        V: Insertable<posts::table>,\r\n        V::Values: QueryFragment<Mysql> + CanInsertInSingleQuery<Mysql>,\r\n    {\r\n        values.insert_into(posts::table).execute(conn)?;\r\n\r\n        Ok(())\r\n    }\r\n}\r\n```\r\nThe above file is running on Diesel's master branch from its Mysql 'getting_started_step_1' (model.rs) example as a minimum reproduction; I couldn't find a way to make a smaller reproduction without Diesel sorry.\r\n\r\nI expected to see this happen: \r\nThere are two versions of largely the same function:\r\n- `create_assoc_type` from the trait `Create` which uses an associated type in a constraint `V: Insertable<Self::Table>`, with `type Table = posts::table`.\r\n- `create_fixed_type` implemented directly on the struct, using the same value directly in the constraint instead of through an associated type `V: Insertable<posts::table>`\r\n\r\nGiven `Self::Table` refers to the exact same type used in `create_fixed_type` I would expect these to behave largely identically.\r\n\r\nInstead, this happened:\r\n`create_fixed_type` compiles okay, but `create_assoc_type` does not compile with the below error. If I remove the constraint `V::Values: QueryFragment<Mysql> + CanInsertInSingleQuery<Mysql>` from `create_assoc_type` the error goes away, but to call `.execute()` those constraints are required.\r\n\r\nI originally reported in on Diesel's Gitter, but was [referred to reporting the bug](https://gitter.im/diesel-rs/diesel?at=60990357d261cc4d74bb46f3) upstream here.\r\n\r\n```\r\nerror[E0277]: the trait bound `V: diesel::Insertable<models::posts::table>` is not satisfied\r\n  --> examples/mysql/getting_started_step_1/src/models.rs:41:5\r\n   |\r\n41 | /     fn create_assoc_type<V, Conn: Connection<Backend = Mysql>>(\r\n42 | |         &self,\r\n43 | |         values: V,\r\n44 | |         conn: &Conn,\r\n...  |\r\n47 | |         V: Insertable<Self::Table>,\r\n48 | |         V::Values: QueryFragment<Mysql> + CanInsertInSingleQuery<Mysql>,\r\n   | |________________________________________________________________________^ the trait `diesel::Insertable<models::posts::table>` is not implemented for `V`\r\n   |\r\nhelp: consider further restricting this bound\r\n   |\r\n47 |         V: Insertable<Self::Table> + diesel::Insertable<models::posts::table>,\r\n   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\nReplicated this on 1.51 and nightly.\r\n`rustc +nightly --version --verbose`:\r\n```\r\nrustc 1.54.0-nightly (676ee1472 2021-05-06)\r\nbinary: rustc\r\ncommit-hash: 676ee14729462585b969bbc52f32c307403f4126\r\ncommit-date: 2021-05-06\r\nhost: x86_64-apple-darwin\r\nrelease: 1.54.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nRUST_BACKTRACE=1 cargo +nightly check\r\n    Checking diesel_demo_step_1_mysql v0.1.0 (/Users/.../Downloads/diesel-master/examples/mysql/getting_started_step_1)\r\nerror[E0277]: the trait bound `V: diesel::Insertable<models::posts::table>` is not satisfied\r\n  --> examples/mysql/getting_started_step_1/src/models.rs:41:5\r\n   |\r\n41 | /     fn create_assoc_type<V, Conn: Connection<Backend = Mysql>>(\r\n42 | |         &self,\r\n43 | |         values: V,\r\n44 | |         conn: &Conn,\r\n...  |\r\n47 | |         V: Insertable<Self::Table>,\r\n48 | |         V::Values: QueryFragment<Mysql> + CanInsertInSingleQuery<Mysql>,\r\n   | |________________________________________________________________________^ the trait `diesel::Insertable<models::posts::table>` is not implemented for `V`\r\n   |\r\nhelp: consider further restricting this bound\r\n   |\r\n47 |         V: Insertable<Self::Table> + diesel::Insertable<models::posts::table>,\r\n   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror[E0277]: the trait bound `V: diesel::Insertable<models::posts::table>` is not satisfied\r\n  --> examples/mysql/getting_started_step_1/src/models.rs:41:8\r\n   |\r\n41 |     fn create_assoc_type<V, Conn: Connection<Backend = Mysql>>(\r\n   |        ^^^^^^^^^^^^^^^^^ the trait `diesel::Insertable<models::posts::table>` is not implemented for `V`\r\n   |\r\nhelp: consider further restricting this bound\r\n   |\r\n47 |         V: Insertable<Self::Table> + diesel::Insertable<models::posts::table>,\r\n   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `diesel_demo_step_1_mysql`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85159/timeline", "performed_via_github_app": null, "state_reason": null}