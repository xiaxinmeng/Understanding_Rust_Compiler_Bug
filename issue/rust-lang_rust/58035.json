{"url": "https://api.github.com/repos/rust-lang/rust/issues/58035", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58035/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58035/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58035/events", "html_url": "https://github.com/rust-lang/rust/issues/58035", "id": 405453003, "node_id": "MDU6SXNzdWU0MDU0NTMwMDM=", "number": 58035, "title": "rustc should warn when the implementation of Display requires to display self", "user": {"login": "rgiot", "id": 400372, "node_id": "MDQ6VXNlcjQwMDM3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/400372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rgiot", "html_url": "https://github.com/rgiot", "followers_url": "https://api.github.com/users/rgiot/followers", "following_url": "https://api.github.com/users/rgiot/following{/other_user}", "gists_url": "https://api.github.com/users/rgiot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rgiot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rgiot/subscriptions", "organizations_url": "https://api.github.com/users/rgiot/orgs", "repos_url": "https://api.github.com/users/rgiot/repos", "events_url": "https://api.github.com/users/rgiot/events{/privacy}", "received_events_url": "https://api.github.com/users/rgiot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-31T21:41:47Z", "updated_at": "2019-01-31T22:41:40Z", "closed_at": "2019-01-31T22:41:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "`rustc` should fail or warn when the implementation of the `Display` trait of a strcut requires to display it. Indeed there is a stack overflow as the code is recursively called.\r\n`rustc` already detect recursion issues in other cases.\r\nSuch mistake can happen when using \"{}\" instead of \"{:?}\" for debug purpose.\r\n\r\nThis code:\r\n\r\n```rust\r\nuse std::fmt;\r\n\r\nstruct Dummy {\r\n}\r\n\r\nimpl fmt::Display for Dummy {\r\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\r\n        write!(f, \"{}\", self) // XXX Should fail or warn at compilation there\r\n    }\r\n}\r\n\r\n\r\nimpl Dummy {\r\n    fn recursive(&self) {\r\n        self.recursive(); /// XXX rustc warn there\r\n    }\r\n}\r\n\r\n#[cfg(test)]\r\nmod test {\r\n    #[test]\r\n    fn illustrate() {\r\n        let dummy = crate::Dummy{};\r\n        println!(\"{}\", dummy);\r\n    }\r\n}\r\n```\r\n\r\nproducde this compilation message and  test error:\r\n\r\n```\r\ncargo test\r\n   Compiling tmp v0.1.0 (/tmp)\r\nwarning: function cannot return without recursing\r\n  --> src/lib.rs:13:5\r\n   |\r\n13 |     fn recursive(&self) {\r\n   |     ^^^^^^^^^^^^^^^^^^^ cannot return without recursing\r\n14 |         self.recursive();\r\n   |         ---------------- recursive call site\r\n   |\r\n   = note: #[warn(unconditional_recursion)] on by default\r\n   = help: a `loop` may express intention better if this is on purpose\r\n\r\nwarning: struct is never constructed: `Dummy`\r\n --> src/lib.rs:3:1\r\n  |\r\n3 | struct Dummy {\r\n  | ^^^^^^^^^^^^\r\n  |\r\n  = note: #[warn(dead_code)] on by default\r\n\r\nwarning: method is never used: `recursive`\r\n  --> src/lib.rs:13:5\r\n   |\r\n13 |     fn recursive(&self) {\r\n   |     ^^^^^^^^^^^^^^^^^^^\r\n\r\nwarning: function cannot return without recursing\r\n  --> src/lib.rs:13:5\r\n   |\r\n13 |     fn recursive(&self) {\r\n   |     ^^^^^^^^^^^^^^^^^^^ cannot return without recursing\r\n14 |         self.recursive();\r\n   |         ---------------- recursive call site\r\n   |\r\n   = note: #[warn(unconditional_recursion)] on by default\r\n   = help: a `loop` may express intention better if this is on purpose\r\n\r\nwarning: method is never used: `recursive`\r\n  --> src/lib.rs:13:5\r\n   |\r\n13 |     fn recursive(&self) {\r\n   |     ^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: #[warn(dead_code)] on by default\r\n\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.23s\r\n     Running target/debug/deps/tmp-dea596419d86ba6c\r\n\r\nrunning 1 test\r\n\r\nthread 'test::illustrate' has overflowed its stack\r\nfatal runtime error: stack overflow\r\n\r\n```\r\n\r\nAlthough to have this crash is normal, the compiler should raise a warning exactly as it does for the recursive function. \r\n\r\nWith this version\r\n\r\n```rust\r\nimpl fmt::Display for Dummy {\r\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\r\n        unimplemented!(\"{}\", self) // XXX Should fail or warn at compilation there\r\n    }\r\n}\r\n```\r\n\r\nalthough the crash is slightly different:\r\n```\r\nthread panicked while processing panic. aborting.\r\nerror: process didn't exit successfully: `/tmp/target/debug/deps/tmp-dea596419d86ba6c` (signal: 4, SIGILL: illegal instruction)\r\n\r\n```\r\n\r\ncompilation warning should be the same.\r\n\r\nI'm writting this issue because I guess it can be detected by the compiler as `Display` (or `Debug`) belong to the language.\r\n\r\n\r\n## Meta\r\n\r\n```\r\nrustc --version --verbose\r\nrustc 1.34.0-nightly (147311c5f 2019-01-30)\r\nbinary: rustc\r\ncommit-hash: 147311c5fc62537da8eb9c6f69536bec6719d534\r\ncommit-date: 2019-01-30\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.34.0-nightly\r\nLLVM version: 8.0\r\n```", "closed_by": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58035/timeline", "performed_via_github_app": null, "state_reason": "completed"}