{"url": "https://api.github.com/repos/rust-lang/rust/issues/21203", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/21203/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/21203/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/21203/events", "html_url": "https://github.com/rust-lang/rust/issues/21203", "id": 54478475, "node_id": "MDU6SXNzdWU1NDQ3ODQ3NQ==", "number": 21203, "title": "Don't ICE when uncallable functions occur due to unsatisfiable where clauses", "user": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2015-01-15T17:26:53Z", "updated_at": "2021-10-27T21:37:57Z", "closed_at": "2021-10-27T21:37:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**UPDATED DESCRIPTION:**\n\nWe now allow the original problem, but some corner cases are still unhandled. See comments below.\n\n**ORIGINAL DESCRIPTION:**\n\nWhere clauses right now require predicates to contain type parameters, as in:\n\n``` rust\ntrait Foo {\n    fn foo(&self);\n}\n\nstruct Bar<T> {\n    x: T,\n}\n\nimpl<T> Foo for Bar<T> where T: Foo {\n    fn foo(&self) {\n        self.x.foo()\n    }\n}\n```\n\nBut we cannot add constraints on non-generic types:\n\n``` rust\nstruct Baz { x: i32 }\n\nimpl Foo for Baz where i32: Foo {\n    fn foo(&self) {\n        self.x.foo()\n    }\n}\n```\n\nWill error out with:\n\n```\ntest.rs:15:1: 19:2 error: cannot bound type `i32`, where clause bounds may only be attached to types involving type parameters\ntest.rs:15 impl Foo for Baz where i32: Foo {\ntest.rs:16     fn foo(&self) {\ntest.rs:17         self.x.foo()\ntest.rs:18     }\ntest.rs:19 }\n```\n\nIn hand written code this usually won't come up, but this would be really helpful for a code generator like `macro_rules!` or `#[derive]`, especially when dealing with associated types. Currently the only way to know if a type is generic or not is to manually walk it and see if any of the type paths start with the same name as a type parameter. If so, add that type to the predicate list. Instead, it would be much simpler if we could just add all the types listed in a field or enum to the predicate list and let the type checker report an error if one of those types doesn't implement the trait.\n\ncc @nikomatsakis, @jroesch\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/21203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/21203/timeline", "performed_via_github_app": null, "state_reason": "completed"}