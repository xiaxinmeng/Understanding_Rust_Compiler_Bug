{"url": "https://api.github.com/repos/rust-lang/rust/issues/74018", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74018/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74018/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74018/events", "html_url": "https://github.com/rust-lang/rust/issues/74018", "id": 650778685, "node_id": "MDU6SXNzdWU2NTA3Nzg2ODU=", "number": 74018, "title": "ICE when playing around with existential types, impl trait", "user": {"login": "vandenheuvel", "id": 20440137, "node_id": "MDQ6VXNlcjIwNDQwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/20440137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vandenheuvel", "html_url": "https://github.com/vandenheuvel", "followers_url": "https://api.github.com/users/vandenheuvel/followers", "following_url": "https://api.github.com/users/vandenheuvel/following{/other_user}", "gists_url": "https://api.github.com/users/vandenheuvel/gists{/gist_id}", "starred_url": "https://api.github.com/users/vandenheuvel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vandenheuvel/subscriptions", "organizations_url": "https://api.github.com/users/vandenheuvel/orgs", "repos_url": "https://api.github.com/users/vandenheuvel/repos", "events_url": "https://api.github.com/users/vandenheuvel/events{/privacy}", "received_events_url": "https://api.github.com/users/vandenheuvel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 147085028, "node_id": "MDU6TGFiZWwxNDcwODUwMjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-nightly", "name": "regression-from-stable-to-nightly", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to nightly."}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472502130, "node_id": "MDU6TGFiZWwxNDcyNTAyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-type_alias_impl_trait", "name": "F-type_alias_impl_trait", "color": "f9c0cc", "default": false, "description": "`#[feature(type_alias_impl_trait)]`"}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-03T22:05:07Z", "updated_at": "2020-09-28T15:06:42Z", "closed_at": "2020-09-28T15:06:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This seems to be a regression from `1.45.0-beta.3 (2020-06-27 8196407f01018b442e80)` to `1.46.0-nightly (2020-07-03 f844ea1e561475e60232)`.\r\n\r\nThe following (totally incorrect, nightly features dependent) code is rejected without an ICE on the mentioned beta version, but nightly handles this less gracefully.\r\n```rust\r\ntrait Trait {\r\n    type Associated;\r\n    fn into(self) -> Self::Associated;\r\n}\r\n\r\nimpl<'a, I: Iterator<Item = i32>> Trait for (i32, I) {\r\n    type Associated = (i32, impl Iterator<Item = i32>);\r\n    fn into(self) -> Self::Associated { (0_i32, &[0_i32].iter()) }\r\n}\r\n```\r\n\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nerror: internal compiler error: src/librustc_mir/borrow_check/region_infer/mod.rs:691:13: member constraint for `DefId(0:10 ~ playground[4db5]::{{impl}}[0]::Associated[0]::{{opaque}}[0])` has an option region `'_#4r` that is not a universal region\r\n\r\nthread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:916:9\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:78\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1076\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1537\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:198\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:217\r\n  10: rustc_driver::report_ice\r\n  11: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:524\r\n  12: std::panicking::begin_panic\r\n  13: rustc_errors::HandlerInner::bug\r\n  14: rustc_errors::Handler::bug\r\n  15: rustc_middle::util::bug::opt_span_bug_fmt::{{closure}}\r\n  16: rustc_middle::ty::context::tls::with_opt::{{closure}}\r\n  17: rustc_middle::ty::context::tls::with_opt\r\n  18: rustc_middle::util::bug::opt_span_bug_fmt\r\n  19: rustc_middle::util::bug::bug_fmt\r\n  20: rustc_mir::borrow_check::region_infer::RegionInferenceContext::solve\r\n  21: rustc_mir::borrow_check::nll::compute_regions\r\n  22: rustc_mir::borrow_check::do_mir_borrowck\r\n  23: rustc_infer::infer::InferCtxtBuilder::enter\r\n  24: rustc_mir::borrow_check::mir_borrowck\r\n  25: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::mir_borrowck>::compute\r\n  26: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  27: rustc_data_structures::stack::ensure_sufficient_stack\r\n  28: rustc_query_system::query::plumbing::get_query_impl\r\n  29: rustc_typeck::collect::type_of::find_opaque_ty_constraints::ConstraintLocator::check\r\n  30: rustc_hir::intravisit::walk_impl_item_ref\r\n  31: rustc_hir::intravisit::walk_item\r\n  32: rustc_typeck::collect::type_of::type_of\r\n  33: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::type_of>::compute\r\n  34: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  35: rustc_data_structures::stack::ensure_sufficient_stack\r\n  36: rustc_query_system::query::plumbing::get_query_impl\r\n  37: rustc_query_system::query::plumbing::ensure_query_impl\r\n  38: <rustc_typeck::collect::CollectItemTypesVisitor as rustc_hir::intravisit::Visitor>::visit_item\r\n  39: rustc_middle::hir::map::Map::visit_item_likes_in_module\r\n  40: rustc_typeck::collect::collect_mod_item_types\r\n  41: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::collect_mod_item_types>::compute\r\n  42: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  43: rustc_data_structures::stack::ensure_sufficient_stack\r\n  44: rustc_query_system::query::plumbing::get_query_impl\r\n  45: rustc_query_system::query::plumbing::ensure_query_impl\r\n  46: rustc_session::session::Session::track_errors\r\n  47: rustc_typeck::check_crate\r\n  48: rustc_interface::passes::analysis\r\n  49: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::analysis>::compute\r\n  50: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  51: rustc_query_system::query::plumbing::get_query_impl\r\n  52: rustc_middle::ty::context::tls::enter_global\r\n  53: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  54: rustc_span::with_source_map\r\n  55: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  56: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.46.0-nightly (f844ea1e5 2020-07-03) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C codegen-units=1 -C debuginfo=2 --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [mir_borrowck] borrow-checking `<(i32, I) as Trait>::into`\r\n#1 [type_of] computing type of `<(i32, I) as Trait>::Associated::{{opaque}}#0`\r\n#2 [collect_mod_item_types] collecting item types in top-level module\r\n#3 [analysis] running analysis passes on this crate\r\nend of query stack\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n[Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=09461292709a415e46c811a99d6e60f8). Scanning the codebase gives the impression that this `bug!` can only be triggered when `impl_trait_in_bindings` is enabled. See #61773.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74018/timeline", "performed_via_github_app": null, "state_reason": "completed"}