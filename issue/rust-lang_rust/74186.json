{"url": "https://api.github.com/repos/rust-lang/rust/issues/74186", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74186/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74186/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74186/events", "html_url": "https://github.com/rust-lang/rust/issues/74186", "id": 654169563, "node_id": "MDU6SXNzdWU2NTQxNjk1NjM=", "number": 74186, "title": "Missed optimization: Loop with decreasing index does not elide bounds check", "user": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-09T15:52:39Z", "updated_at": "2020-07-14T18:11:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried code very similar to the code below. The expected produced code would perform one bounds check at the start of the function and none inside the loop. `offsets` is first asserted to be valid for the initial index. This should be enough to also find that it is valid for all smaller indices. No loop iteration can increase the index so the index correctness is a loop invariant.\r\n\r\n```rust\r\nfn problematic(buf: &mut [u8], offsets: &[u8], mut idx: usize) {\r\n    let offsets = &offsets[..=idx];\r\n    for b in buf {\r\n        *b = idx as u8;\r\n        idx = idx.saturating_sub(usize::from(offsets[idx]));\r\n    }\r\n}\r\n```\r\n\r\nInstead we get this:\r\n\r\n<details>\r\n\r\n<pre>\r\nplayground::problematic:\r\n\tpush\trax\r\n\tcmp\tr8, -1\r\n\tje\t.LBB0_3\r\n\tmov\tr9, rsi\r\n\tlea\trsi, [r8 + 1]\r\n\tcmp\tr8, rcx\r\n\tjae\t.LBB0_2\r\n\ttest\tr9, r9\r\n\tje\t.LBB0_8\r\n\txor\tr10d, r10d\r\n\tmov\trcx, r8\r\n\r\n.LBB0_6:\r\n\tmov\tbyte ptr [rdi + r10], cl\r\n;; The critical jump and cmp we don't want to have, costs ~5-10% loop perf\r\n\tcmp\trcx, r8\r\n\tja\t.LBB0_9\r\n\tmovzx\teax, byte ptr [rdx + rcx]\r\n\tsub\trcx, rax\r\n\tmov\teax, 0\r\n\tcmovb\trcx, rax\r\n\tadd\tr10, 1\r\n\tcmp\tr9, r10\r\n\tjne\t.LBB0_6\r\n\r\n.LBB0_8:\r\n\tpop\trax\r\n\tret\r\n\r\n.LBB0_9:\r\n\tlea\trdx, [rip + .Lanon.9b054490e6ade753ffe504f874525a87.2]\r\n\tmov\trdi, rcx\r\n\tcall\tqword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\r\n\tud2\r\n\r\n.LBB0_3:\r\n\tlea\trdi, [rip + .Lanon.9b054490e6ade753ffe504f874525a87.1]\r\n\tcall\tqword ptr [rip + core::slice::slice_index_overflow_fail@GOTPCREL]\r\n\tud2\r\n\r\n.LBB0_2:\r\n\tlea\trdx, [rip + .Lanon.9b054490e6ade753ffe504f874525a87.1]\r\n\tmov\trdi, rsi\r\n\tmov\trsi, rcx\r\n\tcall\tqword ptr [rip + core::slice::slice_index_len_fail@GOTPCREL]\r\n\tud2\r\n\r\n.Lanon.9b054490e6ade753ffe504f874525a87.0:\r\n\t.ascii\t\"src/lib.rs\"\r\n\r\n.Lanon.9b054490e6ade753ffe504f874525a87.1:\r\n\t.quad\t.Lanon.9b054490e6ade753ffe504f874525a87.0\r\n\t.asciz\t\"\\n\\000\\000\\000\\000\\000\\000\\000\\002\\000\\000\\000\\024\\000\\000\"\r\n\r\n.Lanon.9b054490e6ade753ffe504f874525a87.2:\r\n\t.quad\t.Lanon.9b054490e6ade753ffe504f874525a87.0\r\n\t.asciz\t\"\\n\\000\\000\\000\\000\\000\\000\\000\\005\\000\\000\\000.\\000\\000\"\r\n</pre>\r\n</details>", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74186/timeline", "performed_via_github_app": null, "state_reason": null}