{"url": "https://api.github.com/repos/rust-lang/rust/issues/112604", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112604/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112604/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112604/events", "html_url": "https://github.com/rust-lang/rust/issues/112604", "id": 1755911172, "node_id": "I_kwDOAAsO6M5oqRQE", "number": 112604, "title": "ICE: broken MIR: equate_inputs_and_outputs: NoSolution", "user": {"login": "K4rakara", "id": 40474474, "node_id": "MDQ6VXNlcjQwNDc0NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/40474474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/K4rakara", "html_url": "https://github.com/K4rakara", "followers_url": "https://api.github.com/users/K4rakara/followers", "following_url": "https://api.github.com/users/K4rakara/following{/other_user}", "gists_url": "https://api.github.com/users/K4rakara/gists{/gist_id}", "starred_url": "https://api.github.com/users/K4rakara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/K4rakara/subscriptions", "organizations_url": "https://api.github.com/users/K4rakara/orgs", "repos_url": "https://api.github.com/users/K4rakara/repos", "events_url": "https://api.github.com/users/K4rakara/events{/privacy}", "received_events_url": "https://api.github.com/users/K4rakara/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2023-06-14T02:08:43Z", "updated_at": "2023-06-16T03:20:44Z", "closed_at": "2023-06-16T01:55:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "All of this is yanked out of my work-in-progress bug-for-bug* Misskey Flavored markdown parser, which uses the `Parser` trait, as defined below, to hopefully allow the compiler to create well-optimized functions via inlining and such.\r\n\r\nWhere things get messy is in the introduction of the `DynParser` trait, which uses the same technique used by the `lending_iterator` and `higher-kinded-types` crates in order to remove the generic lifetime from its associated type, `Output`, since lifetime-only generic associated types aren't object-safe (yet?), despite lifetime-only generic parameters being object-safe.\r\n\r\nObject-safety is required in this case, because the `impl Trait` syntax doesn't support cyclic types (for obvious reasons), so boxing and dynamic dispatch is necessary in order to break said cycle.\r\n\r\n_*as in, it behaves identically to `mfm-js`, regardless of if that behavior is really \"correct\" behavior for a markdown parser or not._\r\n\r\n### Code\r\n\r\n<details><summary>Sorry for the rather large reproduction, this was as small as I was able to get it :sweat:</summary>\r\n\r\n```rust\r\n#![feature(decl_macro)]\r\n#![feature(lazy_cell)]\r\n#![feature(never_type)]\r\n\r\n// Stand-in for the `higher-kinded-types` crate:\r\nmod higher_kinded_types {\r\n    use with_lifetime::WithLifetime;\r\n    mod with_lifetime {\r\n        pub trait WithLifetime<'lt> : Send + Sync + Unpin {\r\n            type T;\r\n        }\r\n\r\n        impl<'lt, T : ?Sized + WithLifetime<'lt>>\r\n            WithLifetime<'lt>\r\n        for\r\n            crate::higher_kinded_types::__private::HKT<T>\r\n        {\r\n            type T = T::T;\r\n        }\r\n    }\r\n\r\n    pub trait HKT : Send + Sync + Unpin + seal::Sealed {\r\n        type __<'lt>;\r\n    }\r\n\r\n    mod seal {\r\n        pub trait Sealed {}\r\n        impl<T : ?Sized> Sealed for super::__private::HKT<T> {}\r\n    }\r\n\r\n    impl<T : ?Sized> HKT for T\r\n    where\r\n        Self : for<'any> WithLifetime<'any> + seal::Sealed,\r\n    {\r\n        type __<'lt> = <Self as WithLifetime<'lt>>::T;\r\n    }\r\n\r\n    mod __private {\r\n        pub use {::core, super::with_lifetime::WithLifetime};\r\n        pub struct HKT<T : ?Sized>(::core::marker::PhantomData<T>, !);\r\n    }\r\n\r\n    pub macro HKT(<$lt:lifetime> = $T:ty $(,)?) {\r\n        __private::HKT<dyn for<$lt> WithLifetime<$lt, T = $T>>\r\n    }\r\n}\r\n\r\n// Stand-in for the `once-cell` crate.\r\nmod once_cell {\r\n    pub mod unsync {\r\n        pub use std::cell::LazyCell as Lazy;\r\n    }\r\n}\r\n\r\nuse std::str::CharIndices;\r\n\r\nuse higher_kinded_types::HKT;\r\n\r\npub trait DynParser {\r\n    type Output: HKT;\r\n\r\n    fn dyn_parse<'a>(\r\n        &self,\r\n        input: &'a str,\r\n        chars: CharIndices<'a>,\r\n        state: &mut ParserState,\r\n    ) -> Result<'a, <Self::Output as HKT>::__<'a>>;\r\n}\r\n\r\nimpl<T> DynParser for T\r\nwhere\r\n    T: Parser,\r\n{\r\n    type Output = HKT!(<'a> = T::Output<'a>);\r\n\r\n    fn dyn_parse<'a>(\r\n        &self,\r\n        input: &'a str,\r\n        chars: CharIndices<'a>,\r\n        state: &mut ParserState,\r\n    ) -> Result<'a, <Self::Output as HKT>::__<'a>> {\r\n        self.parse(input, chars, state)\r\n    }\r\n}\r\n\r\npub trait Parser {\r\n    type Output<'a>;\r\n    \r\n    fn parse<'a>(\r\n        &self,\r\n        input: &'a str,\r\n        chars: CharIndices<'a>,\r\n        state: &mut ParserState,\r\n    ) -> Result<'a, Self::Output<'a>>;\r\n}\r\n\r\nimpl<Output: HKT> Parser for dyn '_ + DynParser<Output = Output> {\r\n    type Output<'a> = Output::__<'a>;\r\n\r\n    fn parse<'a>(\r\n        &self,\r\n        input: &'a str,\r\n        chars: CharIndices<'a>,\r\n        state: &mut ParserState,\r\n    ) -> Result<'a, Self::Output<'a>> {\r\n        self.dyn_parse(input, chars, state)\r\n    }\r\n}\r\n\r\nimpl<T> Parser for Box<T>\r\nwhere\r\n    T: ?Sized + Parser,\r\n{\r\n    type Output<'a> = T::Output<'a>;\r\n\r\n    fn parse<'a>(\r\n        &self,\r\n        input: &'a str,\r\n        chars: CharIndices<'a>,\r\n        state: &mut ParserState,\r\n    ) -> Result<'a, Self::Output<'a>> {\r\n        <T as Parser>::parse(self, input, chars, state)\r\n    }\r\n}\r\n\r\n#[derive(Clone, Debug, Default)]\r\npub struct ParserState { }\r\n\r\npub type Result<'a, T, E = ()> = ::std::result::Result<(CharIndices<'a>, T), E>;\r\n\r\npub const fn always<T>(value: T) -> impl for<'a> Parser<Output<'a> = T>\r\nwhere\r\n    T: Clone,\r\n{\r\n    #[derive(Clone)]\r\n    struct Always<T> { value: T }\r\n\r\n    impl<T> Parser for Always<T>\r\n    where\r\n        T: Clone,\r\n    {\r\n        type Output<'a> = T;\r\n\r\n        fn parse<'a>(\r\n            &self,\r\n            _: &'a str,\r\n            chars: CharIndices<'a>,\r\n            _: &mut ParserState,\r\n        ) -> Result<'a, Self::Output<'a>> {\r\n            Ok((chars, self.value.clone()))\r\n        }\r\n    }\r\n\r\n    Always { value }\r\n}\r\n\r\npub const fn lazy<T, F>(init: F) -> impl for<'a> Parser<Output<'a> = T::Output<'a>>\r\nwhere\r\n    F: FnOnce() -> T,\r\n    T: Parser,\r\n{\r\n    struct Lazy<F, T> { inner: once_cell::unsync::Lazy<T, F> }\r\n\r\n    impl<F, T> Parser for Lazy<F, T>\r\n    where\r\n        F: FnOnce() -> T,\r\n        T: Parser,\r\n    {\r\n        type Output<'a> = T::Output<'a>;\r\n\r\n        fn parse<'a>(\r\n            &self,\r\n            input: &'a str,\r\n            chars: CharIndices<'a>,\r\n            state: &mut ParserState,\r\n        ) -> Result<'a, Self::Output<'a>> {\r\n            self.inner.parse(input, chars, state)\r\n        }\r\n    }\r\n\r\n    Lazy { inner: once_cell::unsync::Lazy::new(init) }\r\n}\r\n\r\npub fn uncycle<'a, T>(parser: T) -> Box<dyn 'a + DynParser<Output = HKT!(<'b> = T::Output<'b>)>>\r\nwhere\r\n    T: Parser + 'a,\r\n{\r\n    Box::new(parser)\r\n}\r\n\r\n/// vvv HERE vvv\r\npub fn foo() -> impl for<'a> Parser<Output<'a> = ()> {\r\n    lazy(|| uncycle(always(())))\r\n}\r\n\r\nfn main() {\r\n    println!(\"Hello, world!\");\r\n}\r\n```\r\n\r\n</details>\r\n\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.72.0-nightly (df77afbca 2023-06-12)\r\nbinary: rustc\r\ncommit-hash: df77afbcaf3365a32066a8ca4a00ae6fc9a69647\r\ncommit-date: 2023-06-12\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.72.0-nightly\r\nLLVM version: 16.0.5\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: no errors encountered even though `delay_span_bug` issued\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:99 ~ delay_span_bug_ice[dc5f]::foo::{closure#0}) (bb0[0]): equate_inputs_and_outputs: `std::boxed::Box<dyn DynParser<Output = higher_kinded_types::__private::HKT<dyn for<'b> higher_kinded_types::with_lifetime::WithLifetime<'b, for<'b> T = ()>>>>==std::boxed::Box<dyn DynParser<Output = higher_kinded_types::__private::HKT<dyn for<'b> higher_kinded_types::with_lifetime::WithLifetime<'b, for<'b> T = <impl Parser<Output = ()> as Parser>::Output<'b>>>>>` failed with `NoSolution`\r\n   --> src/main.rs:193:10\r\n    |\r\n193 |     lazy(|| uncycle(always(())))\r\n    |          ^^^^^^^^^^^^^^^^^^^^^^\r\n    |\r\n    = note: delayed at compiler/rustc_borrowck/src/type_check/input_output.rs:133:13\r\n```\r\n\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\n 0: <rustc_errors::HandlerInner>::emit_diagnostic\r\n 1: <rustc_errors::Handler>::delay_span_bug::<rustc_span::span_encoding::Span, alloc::string::String>\r\n 2: rustc_borrowck::type_check::type_check\r\n 3: rustc_borrowck::nll::compute_regions\r\n 4: rustc_borrowck::do_mir_borrowck\r\n 5: rustc_borrowck::mir_borrowck\r\n 6: rustc_query_impl::plumbing::__rust_begin_short_backtrace::<rustc_query_impl::query_impl::mir_borrowck::dynamic_query::{closure#2}::{closure#0}, rustc_middle::query::erase::Erased<[u8; 8]>>\r\n 7: <rustc_query_impl::query_impl::mir_borrowck::dynamic_query::{closure#2} as core::ops::function::FnOnce<(rustc_middle::ty::context::TyCtxt, rustc_span::def_id::LocalDefId)>>::call_once\r\n 8: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::DynamicConfig<rustc_query_system::query::caches::VecCache<rustc_span::def_id::LocalDefId, rustc_middle::query::erase::Erased<[u8; 8]>>, false, false, false>, rustc_query_impl::plumbing::QueryCtxt, true>\r\n 9: rustc_query_impl::query_impl::mir_borrowck::get_query_incr::__rust_end_short_backtrace\r\n10: <rustc_borrowck::type_check::TypeChecker>::prove_closure_bounds\r\n11: <rustc_borrowck::type_check::TypeChecker>::typeck_mir\r\n12: rustc_borrowck::type_check::type_check\r\n13: rustc_borrowck::nll::compute_regions\r\n14: rustc_borrowck::do_mir_borrowck\r\n15: rustc_borrowck::mir_borrowck\r\n16: rustc_query_impl::plumbing::__rust_begin_short_backtrace::<rustc_query_impl::query_impl::mir_borrowck::dynamic_query::{closure#2}::{closure#0}, rustc_middle::query::erase::Erased<[u8; 8]>>\r\n17: <rustc_query_impl::query_impl::mir_borrowck::dynamic_query::{closure#2} as core::ops::function::FnOnce<(rustc_middle::ty::context::TyCtxt, rustc_span::def_id::LocalDefId)>>::call_once\r\n18: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::DynamicConfig<rustc_query_system::query::caches::VecCache<rustc_span::def_id::LocalDefId, rustc_middle::query::erase::Erased<[u8; 8]>>, false, false, false>, rustc_query_impl::plumbing::QueryCtxt, true>\r\n19: rustc_query_impl::query_impl::mir_borrowck::get_query_incr::__rust_end_short_backtrace\r\n20: rustc_hir_analysis::collect::type_of::opaque::find_opaque_ty_constraints_for_rpit\r\n21: rustc_hir_analysis::collect::type_of::type_of\r\n22: rustc_query_impl::plumbing::__rust_begin_short_backtrace::<rustc_query_impl::query_impl::type_of::dynamic_query::{closure#2}::{closure#0}, rustc_middle::query::erase::Erased<[u8; 8]>>\r\n23: <rustc_query_impl::query_impl::type_of::dynamic_query::{closure#2} as core::ops::function::FnOnce<(rustc_middle::ty::context::TyCtxt, rustc_span::def_id::DefId)>>::call_once\r\n24: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::DynamicConfig<rustc_query_system::query::caches::DefaultCache<rustc_span::def_id::DefId, rustc_middle::query::erase::Erased<[u8; 8]>>, false, false, false>, rustc_query_impl::plumbing::QueryCtxt, true>\r\n25: rustc_query_impl::query_impl::type_of::get_query_incr::__rust_end_short_backtrace\r\n26: rustc_middle::query::plumbing::query_get_at::<rustc_query_system::query::caches::DefaultCache<rustc_span::def_id::DefId, rustc_middle::query::erase::Erased<[u8; 8]>>>\r\n27: rustc_hir_analysis::check::check::check_mod_item_types\r\n28: rustc_query_impl::plumbing::__rust_begin_short_backtrace::<rustc_query_impl::query_impl::check_mod_item_types::dynamic_query::{closure#2}::{closure#0}, rustc_middle::query::erase::Erased<[u8; 0]>>\r\n29: <rustc_query_impl::query_impl::check_mod_item_types::dynamic_query::{closure#2} as core::ops::function::FnOnce<(rustc_middle::ty::context::TyCtxt, rustc_span::def_id::LocalDefId)>>::call_once\r\n30: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::DynamicConfig<rustc_query_system::query::caches::VecCache<rustc_span::def_id::LocalDefId, rustc_middle::query::erase::Erased<[u8; 0]>>, false, false, false>, rustc_query_impl::plumbing::QueryCtxt, true>\r\n31: rustc_query_impl::query_impl::check_mod_item_types::get_query_incr::__rust_end_short_backtrace\r\n32: <rustc_middle::hir::map::Map>::for_each_module::<rustc_hir_analysis::check_crate::{closure#6}::{closure#0}>\r\n33: <rustc_session::session::Session>::time::<(), rustc_hir_analysis::check_crate::{closure#6}>\r\n34: rustc_hir_analysis::check_crate\r\n35: rustc_interface::passes::analysis\r\n36: rustc_query_impl::plumbing::__rust_begin_short_backtrace::<rustc_query_impl::query_impl::analysis::dynamic_query::{closure#2}::{closure#0}, rustc_middle::query::erase::Erased<[u8; 1]>>\r\n37: <rustc_query_impl::query_impl::analysis::dynamic_query::{closure#2} as core::ops::function::FnOnce<(rustc_middle::ty::context::TyCtxt, ())>>::call_once\r\n38: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::DynamicConfig<rustc_query_system::query::caches::SingleCache<rustc_middle::query::erase::Erased<[u8; 1]>>, false, false, false>, rustc_query_impl::plumbing::QueryCtxt, true>\r\n39: rustc_query_impl::query_impl::analysis::get_query_incr::__rust_end_short_backtrace\r\n40: <rustc_middle::ty::context::GlobalCtxt>::enter::<rustc_driver_impl::run_compiler::{closure#1}::{closure#2}::{closure#4}, core::result::Result<(), rustc_span::ErrorGuaranteed>>\r\n41: <rustc_interface::interface::Compiler>::enter::<rustc_driver_impl::run_compiler::{closure#1}::{closure#2}, core::result::Result<core::option::Option<rustc_interface::queries::Linker>, rustc_span::ErrorGuaranteed>>\r\n42: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>\r\n43: std::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>\r\n44: <<std::thread::Builder>::spawn_unchecked_<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#1} as core::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\r\n45: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\n           at /rustc/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/library/alloc/src/boxed.rs:1985:9\r\n46: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\n           at /rustc/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/library/alloc/src/boxed.rs:1985:9\r\n47: std::sys::unix::thread::Thread::new::thread_start\r\n           at /rustc/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/library/std/src/sys/unix/thread.rs:108:17\r\n48: start_thread\r\n49: __clone3\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112604/timeline", "performed_via_github_app": null, "state_reason": "completed"}