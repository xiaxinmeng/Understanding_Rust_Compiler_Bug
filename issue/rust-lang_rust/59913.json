{"url": "https://api.github.com/repos/rust-lang/rust/issues/59913", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59913/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59913/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59913/events", "html_url": "https://github.com/rust-lang/rust/issues/59913", "id": 432504990, "node_id": "MDU6SXNzdWU0MzI1MDQ5OTA=", "number": 59913, "title": "Tracking Issue for stabilizing Profile-Guided Optimization support", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 37977651, "node_id": "MDU6TGFiZWwzNzk3NzY1MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/metabug", "name": "metabug", "color": "5319e7", "default": false, "description": "Issues about issues themselves (\"bugs about bugs\")"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 884691893, "node_id": "MDU6TGFiZWw4ODQ2OTE4OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-codegen", "name": "WG-codegen", "color": "c2e0c6", "default": false, "description": "Working Group: Codegen (Runtime perf and code size)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-04-12T10:47:51Z", "updated_at": "2019-08-08T12:28:02Z", "closed_at": "2019-08-08T12:28:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Profile-guided optimization (PGO) is a common optimization technique for ahead-of-time compilers. It works by collecting data about a programs typical execution (e.g. probability of branches taken, typical runtime values of variables, etc) and then uses this information during program optimization for things like inlining decisions, machine code layout, or indirect call promotion.\r\n\r\nLLVM supports different forms of PGO, the most effective of which relies on generating instrumented binaries that collect the profiling information. The Rust compiler has had [experimental support](https://github.com/rust-lang/rust/pull/48346) for this via the `-Z pgo-gen` and `-Z pgo-use` flags for a while. This issue tracks the progress of making this functionality available in stable Rust.\r\n\r\n### Steps:\r\n- [x] Add `run-make` test that makes sure that `inline` and `cold` attributes are added to LLVM IR by LLVM's PGO passes. (#60262)\r\n- [x] Add `codegen` test making sure that instrumentation is generated as expected. (#60038)\r\n- [x] Add `run-make` test that makes sure PGO works in a mixed Rust/C++ codebase using ThinLTO done via `lld`. (#61036)\r\n- [x] Document the command line flags in the [rustc book](https://doc.rust-lang.org/stable/rustc/). \r\n- [x] Document the implementation in the [rustc-guide](https://github.com/rust-lang/rustc-guide/). (https://github.com/rust-lang/rustc-guide/pull/318)\r\n- [x] Fix suboptimal compilation of the profiling runtime (#59531, PR fixing it is #60402)\r\n- [x] Fix instrumentation related linker errors on MSVC (#59812)\r\n- [x] Clarify role of the [pre-inlining pass](https://github.com/rust-lang/rust/pull/48346/files#diff-f32b852c683c99fc96cfbda848664debR65) optionally done by LLVM when compiling with PGO.\r\n  - I verified that `rustc` already behaves like Clang here: Pre-inlining is enabled except for `-Copt-level=s` and `-Copt-level=z`. \r\n- [x] Triage PGO-related issues reported so far\r\n  - [x] #49409 (support for Windows GNU)\r\n  - [x] #57257 (support for Aarch64, fixed)\r\n  - [x] #57258 (linker error with rather specific setup, not a blocker)\r\n- [x] Clarify whether [reported problems](https://bugs.llvm.org/show_bug.cgi?id=41279) related to SEH on Windows affect the stabilization of this feature. (see #61002 and #61005)\r\n- [x] Adapt PGO cli flags to how [Clang](https://clang.llvm.org/docs/UsersManual.html#cmdoption-fprofile-generate)) and GCC handle them. (Implement in https://github.com/rust-lang/rust/pull/59874)\r\n- [x] Make PGO available via stable `-C profile-generate` and `-C profile-use` flags (mirroring the corresponding [Clang flags](https://clang.llvm.org/docs/UsersManual.html#cmdoption-fprofile-generate)).\r\n- [x] Clarify if PGO support should be restricted to tier 1 platforms (because we need to provide the profiling runtime). cc @rust-lang/release \r\n\r\n### Non-Goals:\r\n- This first round of PGO support does not yet include [context-sensitive instrumentation](https://clang.llvm.org/docs/UsersManual.html#cmdoption-fcs-profile-generate), which might be added at a later point in time.\r\n\r\n### Further Information:\r\n- Some further information is provided at the [WG-profile-guided-optimization](https://github.com/rust-lang/compiler-team/tree/master/working-groups/pgo) page.\r\n- As far as I can tell, PGO subsumes \"ordering file\" related optimizations (see https://github.com/rust-lang/rust/issues/50655). UPDATE: This should be verified. PGO might only affect basic block ordering, not the order of entire functions.\r\n\r\ncc @rust-lang/core @rust-lang/compiler ", "closed_by": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59913/reactions", "total_count": 7, "+1": 3, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 3, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59913/timeline", "performed_via_github_app": null, "state_reason": "completed"}