{"url": "https://api.github.com/repos/rust-lang/rust/issues/44891", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44891/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44891/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44891/events", "html_url": "https://github.com/rust-lang/rust/issues/44891", "id": 261090537, "node_id": "MDU6SXNzdWUyNjEwOTA1Mzc=", "number": 44891, "title": "Extract queries for the trait system operations that are performed in trans", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 693557542, "node_id": "MDU6TGFiZWw2OTM1NTc1NDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-traits", "name": "WG-traits", "color": "c2e0c6", "default": false, "description": "Working group: Traits, https://internals.rust-lang.org/t/announcing-traits-working-group/6804"}, {"id": 693665681, "node_id": "MDU6TGFiZWw2OTM2NjU2ODE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-incr-comp", "name": "WG-incr-comp", "color": "c2e0c6", "default": false, "description": "Working group: incremental compilation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-09-27T19:27:42Z", "updated_at": "2018-02-25T22:05:28Z", "closed_at": "2018-02-25T22:05:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, there are a number of trait system operations that are used by the code in trans. Currently, they are invoked directly, and behind the scenes they use a `DepTrackingMap` to memoize across multiple calls. It would be better for incremental if they were converted into named queries. Effectively the goal is to remove the `trans_trait_caches` field of the tcx. For these particular operations, since they do not work on types that include inference variables, this should be fairly straight-forward:\r\n\r\n- `trans_fulfill_obligation`, [defined here](https://github.com/rust-lang/rust/blob/0e6f4cf51cd3b799fb057956f8e733d16605d09b/src/librustc/traits/trans/mod.rs#L35), which [immediately invokes the `memoize`  function here](https://github.com/rust-lang/rust/blob/0e6f4cf51cd3b799fb057956f8e733d16605d09b/src/librustc/traits/trans/mod.rs#L44).\r\n- The associated type normalization [that is cached here](https://github.com/rust-lang/rust/blob/0e6f4cf51cd3b799fb057956f8e733d16605d09b/src/librustc/traits/trans/mod.rs#L141-L144) could also be invoking a (newly defined) query. \r\n\r\nThe idea would to take the following steps:\r\n\r\n- Define a query for `trans_fulfill_obligation`.\r\n    - [Reference material on how to define a query can be found here.](https://github.com/rust-lang/rust/blob/master/src/librustc/ty/maps/README.md)\r\n    - [Reference material on how the Rust compiler represents types and what the `Ty<'tcx>` type is.](https://github.com/rust-lang/rust/blob/0e6f4cf51cd3b799fb057956f8e733d16605d09b/src/librustc/ty/README.md#allocating-and-working-with-types)\r\n    - In this case, you will need to add an appropriate line to the list of queries, and then you will need to convert the existing `fn trans_fulfill_obligation` from a *method* (as it is currently defined) into a free-standing function that serves as a provider. You can just remove the call to `memoize`, which would no longer be needed.\r\n    - The trait system already defines a number of queries; those providers [are linked here](https://github.com/rust-lang/rust/blob/0e6f4cf51cd3b799fb057956f8e733d16605d09b/src/librustc/traits/mod.rs#L833-L840), so you could pick one of those to use as a rough model for what bits go where (e.g., [the `specialization_graph_of` query](https://github.com/rust-lang/rust/blob/0e6f4cf51cd3b799fb057956f8e733d16605d09b/src/librustc/traits/mod.rs#L836)).\r\n- With respect to the normalization that is [taking place here](https://github.com/rust-lang/rust/blob/0e6f4cf51cd3b799fb057956f8e733d16605d09b/src/librustc/traits/trans/mod.rs#L141-L144), I think a wee bit of refactoring is in order before we introduce the query. The actual setup here is a bit confused and probably could use *even more* refactoring, but for the purposes of this issue, we can do something fairly tailored.\r\n    - Step 1: Rename the method `normalize_associated_type()` to `normalize_associated_type_in()`. This method is [defined here](https://github.com/rust-lang/rust/blob/0e6f4cf51cd3b799fb057956f8e733d16605d09b/src/librustc/infer/mod.rs#L489-L490). It only has a handful of callers (as you can see with a quick `rg \\.normalize_associated_type\\(`).\r\n        - This is a generic function that will normalize associated types in all kinds of things.\r\n    - Step 2: Define a query `normalize_ty(Ty<'tcx>) -> Ty<'tcx>` that simply invokes `normalize_associated_types_in`. This is basically that function in query form, but specialized to inputs of type `Ty<'tcx>`.\r\n    - Step 3. Replace [these lines that invoke `memoize()`](https://github.com/rust-lang/rust/blob/0e6f4cf51cd3b799fb057956f8e733d16605d09b/src/librustc/traits/trans/mod.rs#L141-L144)) with code that just invokes the query `self.tcx.normalize_ty(ty)`.\r\n\r\nFor bonus points, we might consider converting the following functions into queries. It seems like they could benefit from caching:\r\n\r\n- `traits::get_vtable_methods` ([definition](https://github.com/rust-lang/rust/blob/0e6f4cf51cd3b799fb057956f8e733d16605d09b/src/librustc/traits/mod.rs#L653))\r\n    - would have to be converted to return a vector\r\n- `traits::normalize_and_test_predicates`\r\n- `trans_normalize`\r\n- `trans_apply_param_substs`\r\n\r\nIt's unclear though if this is a good idea. I'd keep those for a later PR so we can do some experiments with performance and memory use.", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44891/timeline", "performed_via_github_app": null, "state_reason": "completed"}