{"url": "https://api.github.com/repos/rust-lang/rust/issues/20995", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/20995/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/20995/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/20995/events", "html_url": "https://github.com/rust-lang/rust/issues/20995", "id": 54037820, "node_id": "MDU6SXNzdWU1NDAzNzgyMA==", "number": 20995, "title": "Program deadlocks depending on name of scoped thread", "user": {"login": "burtonageo", "id": 1732920, "node_id": "MDQ6VXNlcjE3MzI5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/1732920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burtonageo", "html_url": "https://github.com/burtonageo", "followers_url": "https://api.github.com/users/burtonageo/followers", "following_url": "https://api.github.com/users/burtonageo/following{/other_user}", "gists_url": "https://api.github.com/users/burtonageo/gists{/gist_id}", "starred_url": "https://api.github.com/users/burtonageo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burtonageo/subscriptions", "organizations_url": "https://api.github.com/users/burtonageo/orgs", "repos_url": "https://api.github.com/users/burtonageo/repos", "events_url": "https://api.github.com/users/burtonageo/events{/privacy}", "received_events_url": "https://api.github.com/users/burtonageo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-12T10:20:44Z", "updated_at": "2015-01-12T13:28:43Z", "closed_at": "2015-01-12T13:20:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been using rust to learn about threading using the [Little Book of Semaphores](http://greenteapress.com/semaphores/downey08semaphores.pdf). I'm currently on Exercise 3.2 (page 12), and I've encountered an unintuitive phenomenon where my program deadlocks depending on what I've named my thread in its let binding. The program is shown below ([link to rust playpen](http://is.gd/hssjm7)), and the relevant lines are 29 and 30 (`let s_b2 =`\u2026).\n\n``` rust\nuse std::sync::{Arc, Semaphore};\nuse std::thread::Thread;\n\n// Our functions. a1 and b1, and a2 and b2\n// can happen concurrently, but a1 must happen\n// before b2 and b1 must happen before a2\nfn statement_a1() { println!(\"a1\"); }\nfn statement_a2() { println!(\"a2\"); }\n\nfn statement_b1() { println!(\"b1\"); }\nfn statement_b2() { println!(\"b2\"); }\n\n#[allow(unstable)]\nfn main() {\n\n    // We use 2 semaphores here: sem_a to signal that\n    // statement_a2 can safely run, and sem_b to signal\n    // that statement_b2 can safely run\n    let sem_a = Arc::new(Semaphore::new(0));\n    let sem_b = Arc::new(Semaphore::new(0));\n\n    let s_a1 = sem_a.clone();\n    let _ = Thread::scoped(move || {\n        statement_a1();\n        s_a1.release();\n    });\n\n    let s_b2 = sem_b.clone();\n    // Rename this thread to _, and the program deadlocks\n    let _t = Thread::scoped(move || {\n        s_b2.acquire();\n        statement_a2();\n    });\n\n    let s_b1 = sem_b.clone();\n    let _ = Thread::scoped(move || {\n        statement_b1();\n        s_b1.release();\n    });\n\n    let s_a2 = sem_a.clone();\n    let _ = Thread::scoped(move || {\n        s_a2.acquire();\n        statement_b2();\n    });\n}\n```\n\nMy rust version on my local machine is rustc 1.0.0-dev (d2d35db57 2015-01-11 06:55:33 +0000), and I use OSX.\n", "closed_by": {"login": "burtonageo", "id": 1732920, "node_id": "MDQ6VXNlcjE3MzI5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/1732920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burtonageo", "html_url": "https://github.com/burtonageo", "followers_url": "https://api.github.com/users/burtonageo/followers", "following_url": "https://api.github.com/users/burtonageo/following{/other_user}", "gists_url": "https://api.github.com/users/burtonageo/gists{/gist_id}", "starred_url": "https://api.github.com/users/burtonageo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burtonageo/subscriptions", "organizations_url": "https://api.github.com/users/burtonageo/orgs", "repos_url": "https://api.github.com/users/burtonageo/repos", "events_url": "https://api.github.com/users/burtonageo/events{/privacy}", "received_events_url": "https://api.github.com/users/burtonageo/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/20995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/20995/timeline", "performed_via_github_app": null, "state_reason": "completed"}