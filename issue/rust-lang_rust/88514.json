{"url": "https://api.github.com/repos/rust-lang/rust/issues/88514", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88514/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88514/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88514/events", "html_url": "https://github.com/rust-lang/rust/issues/88514", "id": 983273321, "node_id": "MDU6SXNzdWU5ODMyNzMzMjE=", "number": 88514, "title": "Diagnostic suggestions sometimes incorrectly point to external crates", "user": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-08-30T22:56:38Z", "updated_at": "2021-09-25T16:41:33Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In some situations, rustc may provide a diagnostic suggestion in an external crate, which in general it shouldn't do.  These external crates may be in cargo's registry cache, which the user should not be modifying.  For example, `cargo fix` may stomp on changes outside of the package (which is a separate issue https://github.com/rust-lang/cargo/issues/9857).  Usually rustc is good about avoiding this, so I'm not sure what is wrong in these situations.\r\n\r\nIn general, I expect rustc to not provide suggestions to modify dependencies.\r\n\r\nThe crater run found several instances of this, each for different underlying reasons (all dealing with macros).\r\n\r\n## Example 1 \u2014\u00a0unused tt\r\n\r\nExample dependency:\r\n\r\n```rust\r\n// bar.rs\r\n#[macro_export]\r\nmacro_rules! m {\r\n    ($i:tt) => {\r\n        $crate::m!(foo $i);\r\n    };\r\n    (foo $i:tt) => {\r\n        let $i = 1;\r\n    }\r\n}\r\n```\r\n\r\nExample local crate:\r\n\r\n```rust\r\n// foo.rs\r\npub fn foo() {\r\n    bar::m!(abc);\r\n}\r\n```\r\n\r\nResulting suggestion:\r\n\r\n```\r\nwarning: unused variable: `abc`\r\n --> /Users/eric/Temp/crater-2021/foo/bar/src/lib.rs:7:13\r\n  |\r\n7 |         let $i = 1;\r\n  |             ^^ help: if this is intentional, prefix it with an underscore: `_abc`\r\n  |\r\n  = note: `#[warn(unused_variables)]` on by default\r\n```\r\n\r\nA key point of this example is that the macro uses `tt` instead of `ident`.  `ident` will not issue an unused warning.\r\n\r\nFound in the 2021 crater run for:\r\n\r\n* https://tiny.cc/oaaiuz/gh/rchaser53.at-coder-localplayground/log.txt\r\n\r\n## Example 2 \u2014 Weird $body suggestion\r\n\r\nThe following makes a suggestion to remove unnecessary braces, but the suggestion doesn't actually remove any braces.\r\n\r\n```rust\r\n// Using cpython 0.2.1\r\nuse cpython::*;\r\n\r\nfn hello(py: Python) -> PyResult<PyString> {\r\n    Ok(PyString::new(py, \"Rust says: Hello world\"))\r\n}\r\n\r\npy_module_initializer!(example, initexample, PyInit_example, |py, m| {\r\n    m.add(py, \"hello\", py_fn!(py, hello()))?;\r\n    Ok(())\r\n});\r\n```\r\n\r\nSuggestion:\r\n\r\n```\r\nwarning: unnecessary braces around block return value\r\n   --> /Users/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/cpython-0.2.1/src/argparse.rs:386:52\r\n    |\r\n386 |     ( $py:expr, $iter:expr, $body:block, [] ) => { $body };\r\n    |                                                    ^^^^^ help: remove these braces\r\n    |\r\n    = note: `#[warn(unused_braces)]` on by default\r\n\r\nwarning: `foo` (lib) generated 1 warning\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.01s\r\n```\r\n\r\nFound in the 2021 crater run for:\r\n\r\n* https://tiny.cc/oaaiuz/gh/AustinHaugerud.mb_ext_script/log.txt\r\n* https://tiny.cc/oaaiuz/gh/expobrain.python-rust-library-example/log.txt\r\n* https://tiny.cc/oaaiuz/gh/mazurwiktor.aoaddons-python/log.txt\r\n\r\n## Example 3 \u2014 Hidden JSON suggestion\r\n\r\nIn this example, the human-readable text doesn't mention the dependency, but the JSON includes a MachineApplicable suggestion.\r\n\r\n```rust\r\n// diesel 1.4.7\r\n#[macro_use]\r\nextern crate diesel;\r\nuse diesel::table;\r\n\r\ntable! {\r\n    use diesel::sql_types::*;\r\n    use std::fs;\r\n\r\n    users {\r\n        id -> Integer,\r\n        name -> VarChar,\r\n        favorite_color -> Nullable<VarChar>,\r\n    }\r\n}\r\n```\r\n\r\nThis emits two duplicate diagnostics in human form:\r\n\r\n```\r\nwarning: unused import: `std::fs`\r\n --> src/lib.rs:7:9\r\n  |\r\n7 |     use std::fs;\r\n  |         ^^^^^^^\r\n  |\r\n  = note: `#[warn(unused_imports)]` on by default\r\n\r\nwarning: unused import: `std::fs`\r\n --> src/lib.rs:7:9\r\n  |\r\n7 |     use std::fs;\r\n  |         ^^^^^^^\r\n\r\nwarning: `foo` (lib) generated 2 warnings\r\n```\r\n\r\nBuried in the JSON output is a machine-applicable change which modifies diesel:\r\n\r\n```javascript\r\n{\r\n    \"byte_end\": 9126,\r\n    \"byte_start\": 9108,\r\n    \"column_end\": 55,\r\n    \"column_start\": 37,\r\n    \"expansion\":\r\n    {},\r\n    \"file_name\": \"/Users/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel-1.4.7/src/macros/mod.rs\",\r\n    \"is_primary\": true,\r\n    \"label\": null,\r\n    \"line_end\": 299,\r\n    \"line_start\": 299,\r\n    \"suggested_replacement\": \"\",\r\n    \"suggestion_applicability\": \"MachineApplicable\",\r\n    \"text\":\r\n    [\r\n        {\r\n            \"highlight_end\": 55,\r\n            \"highlight_start\": 37,\r\n            \"text\": \"            imports = [$($imports)* use $($import)::+;],\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nFound in the 2021 crater run for:\r\n\r\n* https://tiny.cc/oaaiuz/gh/pigeon-app.pigeon-backend/log.txt\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.56.0-nightly (5eacec9ec 2021-08-28)\r\nbinary: rustc\r\ncommit-hash: 5eacec9ec7e112a0de1011519a57c45586d58414\r\ncommit-date: 2021-08-28\r\nhost: x86_64-apple-darwin\r\nrelease: 1.56.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88514/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88514/timeline", "performed_via_github_app": null, "state_reason": null}