{"url": "https://api.github.com/repos/rust-lang/rust/issues/112137", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112137/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112137/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112137/events", "html_url": "https://github.com/rust-lang/rust/issues/112137", "id": 1734103076, "node_id": "I_kwDOAAsO6M5nXFAk", "number": 112137, "title": "Unstable fingerprints for mir_built ", "user": {"login": "xxchan", "id": 37948597, "node_id": "MDQ6VXNlcjM3OTQ4NTk3", "avatar_url": "https://avatars.githubusercontent.com/u/37948597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xxchan", "html_url": "https://github.com/xxchan", "followers_url": "https://api.github.com/users/xxchan/followers", "following_url": "https://api.github.com/users/xxchan/following{/other_user}", "gists_url": "https://api.github.com/users/xxchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/xxchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xxchan/subscriptions", "organizations_url": "https://api.github.com/users/xxchan/orgs", "repos_url": "https://api.github.com/users/xxchan/repos", "events_url": "https://api.github.com/users/xxchan/events{/privacy}", "received_events_url": "https://api.github.com/users/xxchan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2023-05-31T12:22:33Z", "updated_at": "2023-05-31T15:12:35Z", "closed_at": "2023-05-31T15:12:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n-->\r\n\r\nDuplicate with #106814, #107079, #107665, but I have a reproduction (although not minimized)\r\n\r\nOriginally posted https://github.com/rust-lang/rust/issues/84970#issuecomment-1570079219 (not sure whether it's better to create a separate issue)\r\n\r\n```\r\ngit clone https://github.com/risingwavelabs/risingwave\r\n\r\ngit checkout 487c4c60c584e1e8d603b0a6d2af4632aa869a47 # this commit updated protobuf\r\ncargo build -p risingwave_pb \r\n\r\ngit checkout HEAD~\r\ncargo build -p risingwave_pb  # boom\r\n```\r\n\r\nlink to the commit https://github.com/risingwavelabs/risingwave/commit/487c4c60c584e1e8d603b0a6d2af4632aa869a47\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.71.0-nightly (c373194cb 2023-05-24)\r\nbinary: rustc\r\ncommit-hash: c373194cb6d882dc455a588bcc29c92a96b50252\r\ncommit-date: 2023-05-24\r\nhost: aarch64-apple-darwin\r\nrelease: 1.71.0-nightly\r\nLLVM version: 16.0.4\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: encountered incremental compilation error with mir_built(risingwave_pb[4467]::meta::subscribe_response::{impl#17}::merge::{closure#8}))\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nerror: internal compiler error: encountered incremental compilation error with mir_built(risingwave_pb[4467]::meta::subscribe_response::{impl#17}::merge::{closure#8})\r\n  |\r\n  = help: This is a known issue with the compiler. Run `cargo clean -p risingwave_pb` or `cargo clean` to allow your project to compile\r\n  = note: Please follow the instructions below to create a bug report with the provided information\r\n  = note: See <https://github.com/rust-lang/rust/issues/84970> for more information\r\n\r\nthread 'rustc' panicked at 'Found unstable fingerprints for mir_built(risingwave_pb[4467]::meta::subscribe_response::{impl#17}::merge::{closure#8}): Steal { value: RwLock(RefCell { value: Some(Body { basic_blocks: BasicBlocks { basic_blocks: [BasicBlockData { statements: [StorageLive(_3), StorageLive(_4), StorageLive(_5), _5 = move (_1.1: meta::MetaSnapshot), _4 = meta::subscribe_response::Info::Snapshot(move _5)], terminator: Some(Terminator { source_info: SourceInfo { span: src/prost/src/meta.rs:613:45: 613:46 (#3105), scope: scope[0] }, kind: drop(_5) -> [return: bb1, unwind: bb8] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_5), _3 = std::option::Option::<meta::subscribe_response::Info>::Some(move _4)], terminator: Some(Terminator { source_info: SourceInfo { span: src/prost/src/meta.rs:613:45: 613:46 (#3105), scope: scope[0] }, kind: drop(_4) -> [return: bb2, unwind: bb7] }), is_cleanup: false }, BasicBlockData { statements: [StorageDead(_4)], terminator: Some(Terminator { source_info: SourceInfo { span: src/prost/src/meta.rs:613:32: 613:46 (#28903), scope: scope[0] }, kind: drop((*(_1.0: &mut std::option::Option<meta::subscribe_response::Info>))) -> [return: bb3, unwind: bb4] }), is_cleanup: false }, BasicBlockData { statements: [(*(_1.0: &mut std::option::Option<meta::subscribe_response::Info>)) = move _3, _0 = const ()], terminator: Some(Terminator { source_info: SourceInfo { span: src/prost/src/meta.rs:613:45: 613:46 (#3105), scope: scope[0] }, kind: drop(_3) -> [return: bb5, unwind: bb9] }), is_cleanup: false }, BasicBlockData { statements: [(*(_1.0: &mut std::option::Option<meta::subscribe_response::Info>)) = move _3], terminator: Some(Terminator { source_info: SourceInfo { span: src/prost/src/meta.rs:613:32: 613:46 (#28903), scope: scope[0] }, kind: goto -> bb7 }), is_cleanup: true }, BasicBlockData { statements: [StorageDead(_3)], terminator: Some(Terminator { source_info: SourceInfo { span: src/prost/src/meta.rs:613:45: 613:46 (#3105), scope: scope[0] }, kind: drop(_1) -> [return: bb6, unwind: bb10] }), is_cleanup: false }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/prost/src/meta.rs:613:46: 613:46 (#3105), scope: scope[0] }, kind: return }), is_cleanup: false }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/prost/src/meta.rs:613:45: 613:46 (#3105), scope: scope[0] }, kind: drop(_3) -> [return: bb9, unwind terminate] }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/prost/src/meta.rs:613:45: 613:46 (#3105), scope: scope[0] }, kind: drop(_4) -> [return: bb9, unwind terminate] }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/prost/src/meta.rs:613:45: 613:46 (#3105), scope: scope[0] }, kind: drop(_1) -> [return: bb10, unwind terminate] }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/prost/src/meta.rs:613:32: 613:46 (#3105), scope: scope[0] }, kind: resume }), is_cleanup: true }], cache: Cache { predecessors: OnceCell(Uninit), switch_sources: OnceCell(Uninit), is_cyclic: OnceCell(Uninit), postorder: OnceCell(Uninit), dominators: OnceCell(Uninit) } }, phase: Built, pass_count: 0, source: MirSource { instance: Item(DefId(0:8602 ~ risingwave_pb[4467]::meta::subscribe_response::{impl#17}::merge::{closure#8})), promoted: None }, source_scopes: [SourceScopeData { span: src/prost/src/meta.rs:613:32: 613:46 (#3105), parent_scope: None, inlined: None, inlined_parent_scope: None, local_data: Set(SourceScopeLocalData { lint_root: HirId(DefId(0:8592 ~ risingwave_pb[4467]::meta::subscribe_response::{impl#17}::merge).837), safety: Safe }) }], generator: None, local_decls: [LocalDecl { mutability: Mut, local_info: Set(Boring), internal: false, ty: (), user_ty: None, source_info: SourceInfo { span: src/prost/src/meta.rs:613:32: 613:32 (#3105), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: Set(Boring), internal: false, ty: [closure@src/prost/src/meta.rs:613:32: 613:46], user_ty: None, source_info: SourceInfo { span: src/prost/src/meta.rs:613:32: 613:46 (#3105), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: Set(Boring), internal: false, ty: (), user_ty: None, source_info: SourceInfo { span: src/prost/src/meta.rs:613:32: 613:46 (#3105), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: Set(Boring), internal: false, ty: std::option::Option<meta::subscribe_response::Info>, user_ty: None, source_info: SourceInfo { span: src/prost/src/meta.rs:613:32: 613:46 (#3105), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: Set(AggregateTemp), internal: false, ty: meta::subscribe_response::Info, user_ty: None, source_info: SourceInfo { span: src/prost/src/meta.rs:613:32: 613:46 (#3105), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: Set(AggregateTemp), internal: false, ty: meta::MetaSnapshot, user_ty: None, source_info: SourceInfo { span: src/prost/src/meta.rs:613:32: 613:46 (#3105), scope: scope[0] } }], user_type_annotations: [], arg_count: 2, spread_arg: None, var_debug_info: [VarDebugInfo { name: \"field\", source_info: SourceInfo { span: src/prost/src/meta.rs:613:32: 613:46 (#26548), scope: scope[0] }, value: (*(_1.0: &mut std::option::Option<meta::subscribe_response::Info>)), argument_index: None, references: 0 }, VarDebugInfo { name: \"owned_value\", source_info: SourceInfo { span: src/prost/src/meta.rs:613:32: 613:46 (#26548), scope: scope[0] }, value: (_1.1: meta::MetaSnapshot), argument_index: None, references: 0 }], span: src/prost/src/meta.rs:613:32: 613:46 (#3105), required_consts: [], is_polymorphic: true, injection_phase: None, tainted_by_errors: None }) }) }', /rustc/c373194cb6d882dc455a588bcc29c92a96b50252/compiler/rustc_query_system/src/query/plumbing.rs:735:9\r\nstack backtrace:\r\n   0: _rust_begin_unwind\r\n   1: core::panicking::panic_fmt\r\n   2: rustc_query_system::query::plumbing::incremental_verify_ich_failed::<rustc_middle::ty::context::TyCtxt>\r\n   3: rustc_query_system::query::plumbing::incremental_verify_ich::<rustc_middle::ty::context::TyCtxt, rustc_middle::query::erase::Erased<[u8; 8]>>\r\n   4: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::DynamicConfig<rustc_query_system::query::caches::VecCache<rustc_span::def_id::LocalDefId, rustc_middle::query::erase::Erased<[u8; 8]>>, false, false, false>, rustc_query_impl::plumbing::QueryCtxt, true>\r\n   5: rustc_mir_transform::mir_const\r\n   6: rustc_mir_transform::mir_promoted\r\n   7: rustc_borrowck::mir_borrowck\r\n   8: <core::panic::unwind_safe::AssertUnwindSafe<rustc_data_structures::sync::par_for_each_in<&[rustc_span::def_id::LocalDefId], <rustc_middle::hir::map::Map>::par_body_owners<rustc_interface::passes::analysis::{closure#1}::{closure#0}>::{closure#0}>::{closure#0}::{closure#0}> as core::ops::function::FnOnce<()>>::call_once\r\n   9: rustc_data_structures::sync::par_for_each_in::<&[rustc_span::def_id::LocalDefId], <rustc_middle::hir::map::Map>::par_body_owners<rustc_interface::passes::analysis::{closure#1}::{closure#0}>::{closure#0}>\r\n  10: rustc_interface::passes::analysis\r\n  11: <rustc_interface::queries::QueryResult<&rustc_middle::ty::context::GlobalCtxt>>::enter::<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}::{closure#2}::{closure#4}>\r\n  12: <rustc_interface::interface::Compiler>::enter::<rustc_driver_impl::run_compiler::{closure#1}::{closure#2}, core::result::Result<core::option::Option<rustc_interface::queries::Linker>, rustc_span::ErrorGuaranteed>>\r\n  13: rustc_span::set_source_map::<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}::{closure#0}>\r\n  14: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.71.0-nightly (c373194cb 2023-05-24) running on aarch64-apple-darwin\r\n\r\nnote: compiler flags: --crate-type lib -C lto=off -C embed-bitcode=no -C split-debuginfo=unpacked -C debuginfo=2 -C incremental=[REDACTED] -C link-arg=-fuse-ld=/opt/homebrew/opt/llvm/bin/ld64.lld\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [mir_built] building MIR for `meta::subscribe_response::<impl at src/prost/src/meta.rs:613:32: 613:46>::merge::{closure#8}`\r\n#1 [mir_const] preparing `meta::subscribe_response::<impl at src/prost/src/meta.rs:613:32: 613:46>::merge::{closure#8}` for borrow checking\r\n#2 [mir_promoted] promoting constants in MIR for `meta::subscribe_response::<impl at src/prost/src/meta.rs:613:32: 613:46>::merge::{closure#8}`\r\n#3 [mir_borrowck] borrow-checking `meta::subscribe_response::<impl at src/prost/src/meta.rs:613:32: 613:46>::merge::{closure#8}`\r\n#4 [analysis] running analysis passes on this crate\r\nend of query stack\r\nthere was a panic while trying to force a dep node\r\ntry_mark_green dep node stack:\r\n#0 mir_borrowck(risingwave_pb[4467]::meta::subscribe_response::{impl#17}::merge)\r\nend of try_mark_green dep node stack\r\nerror: internal compiler error: reentrant incremental verify failure, suppressing message\r\n\r\nerror: could not compile `risingwave_pb` (lib) due to 2 previous errors\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "xxchan", "id": 37948597, "node_id": "MDQ6VXNlcjM3OTQ4NTk3", "avatar_url": "https://avatars.githubusercontent.com/u/37948597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xxchan", "html_url": "https://github.com/xxchan", "followers_url": "https://api.github.com/users/xxchan/followers", "following_url": "https://api.github.com/users/xxchan/following{/other_user}", "gists_url": "https://api.github.com/users/xxchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/xxchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xxchan/subscriptions", "organizations_url": "https://api.github.com/users/xxchan/orgs", "repos_url": "https://api.github.com/users/xxchan/repos", "events_url": "https://api.github.com/users/xxchan/events{/privacy}", "received_events_url": "https://api.github.com/users/xxchan/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112137/timeline", "performed_via_github_app": null, "state_reason": "completed"}