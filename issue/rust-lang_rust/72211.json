{"url": "https://api.github.com/repos/rust-lang/rust/issues/72211", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72211/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72211/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72211/events", "html_url": "https://github.com/rust-lang/rust/issues/72211", "id": 618489539, "node_id": "MDU6SXNzdWU2MTg0ODk1Mzk=", "number": 72211, "title": "Huge stack allocation is generated when assigning a huge piece of memory to a reference", "user": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}, {"id": 2061474479, "node_id": "MDU6TGFiZWwyMDYxNDc0NDc5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt-nrvo", "name": "A-mir-opt-nrvo", "color": "f7e101", "default": false, "description": "Fixed by NRVO"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-05-14T19:42:28Z", "updated_at": "2021-04-02T15:05:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nI am developing an application for an armv7 embedded device. I'm holding the application state in a stack-allocated enum, where one of the enum variations is 16k (total memory is 64k)\r\n\r\nSwitching to the huge app state, my microcontroller hard faults. I have played with a short repro on [godbolt.org](https://godbolt.org/z/fosnuv) and I found that a particular pattern reserves stack space where I don't believe is necessary.\r\n\r\nI tried this code:\r\n\r\n```rust\r\npub fn init(a: usize) -> [usize; 1600] {\r\n    [a; 1600]\r\n}\r\n\r\npub fn fun(bar: &mut [usize; 1600], w: bool, a: usize) {\r\n    *bar = init(a);\r\n}\r\n```\r\n\r\nI expected to see this happen:\r\ngenerated machine code fills `bar` directly\r\n\r\nInstead, this happened:\r\ngenerated machine code fills stack then copies to `bar`\r\n\r\nCode generated with `-C opt-level=3 --target=armv7-unknown-linux-gnueabihf` on godbolt.org\r\n\r\n```asm\r\nexample::fun:\r\n        push    {r7, lr}\r\n        sub.w   sp, sp, #2000 ; I don't like this stack alloc\r\n        movs    r1, #0\r\n        mov     r3, sp\r\n.LBB1_1:\r\n        str     r2, [r3, r1]\r\n        adds    r1, #4\r\n        cmp.w   r1, #2000\r\n        bne     .LBB1_1\r\n        mov     r1, sp\r\n        mov.w   r2, #2000\r\n        bl      __aeabi_memcpy4\r\n        add.w   sp, sp, #2000\r\n        pop     {r7, pc}\r\n```\r\n\r\n`rustc --version --verbose`:\r\n```\r\n1.43 and newer\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72211/timeline", "performed_via_github_app": null, "state_reason": null}