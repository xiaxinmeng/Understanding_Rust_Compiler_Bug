{"url": "https://api.github.com/repos/rust-lang/rust/issues/89225", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89225/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89225/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89225/events", "html_url": "https://github.com/rust-lang/rust/issues/89225", "id": 1006616440, "node_id": "I_kwDOAAsO6M47_794", "number": 89225, "title": "LLVM ERROR: Unsupported expression in static initializer (On macOS)", "user": {"login": "plzin", "id": 44929542, "node_id": "MDQ6VXNlcjQ0OTI5NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/44929542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plzin", "html_url": "https://github.com/plzin", "followers_url": "https://api.github.com/users/plzin/followers", "following_url": "https://api.github.com/users/plzin/following{/other_user}", "gists_url": "https://api.github.com/users/plzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/plzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plzin/subscriptions", "organizations_url": "https://api.github.com/users/plzin/orgs", "repos_url": "https://api.github.com/users/plzin/repos", "events_url": "https://api.github.com/users/plzin/events{/privacy}", "received_events_url": "https://api.github.com/users/plzin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 123111, "node_id": "MDU6TGFiZWwxMjMxMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-macos", "name": "O-macos", "color": "6e6ec0", "default": false, "description": "Operating system: macOS"}, {"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-09-24T16:06:57Z", "updated_at": "2023-04-05T17:35:36Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "rustc seems to generate invalid/unsupported LLVM IR on macOS for release builds.\r\nLinux and debug builds seem to be unaffected.\r\n\r\n### Code\r\n\r\n```Rust\r\n#[allow(dead_code)] // There are warnings because some of RugInt's members are never accessed.\r\n\r\n// This represents the arbitrary precision Integer type from the rug crate.\r\nstruct RugInt {\r\n    pub m: i32,\r\n    pub n: i32,\r\n    pub o: *const i32,\r\n}\r\n\r\nimpl RugInt {\r\n    // Integer::new in the rug crate.\r\n    pub const fn new() -> Self {\r\n        const VALUE_REF: &i32 = &0x1D1E_6010;\r\n        Self {\r\n            m: 0,\r\n            n: 0,\r\n            o: VALUE_REF as *const i32,\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    unsafe {\r\n        // Allocate memory for an array of 32 RugInts.\r\n        let n = 32;\r\n        let layout = std::alloc::Layout::array::<RugInt>(n).unwrap();\r\n        let ptr = std::alloc::alloc(layout) as *mut RugInt;\r\n\r\n        // Initialize the array with empty RugInts.\r\n        for i in 0..n {\r\n            ptr.add(i).write(RugInt::new());\r\n        }\r\n\r\n        // Don't let the compiler remove the code by printing a value in the array.\r\n        println!(\"{}\", (*ptr).m);\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Meta\r\nThis issue occurs on the stable version\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.55.0 (c8dfcfe04 2021-09-06)\r\nbinary: rustc\r\ncommit-hash: c8dfcfe046a7680554bf4eb612bad840e7631c4b\r\ncommit-date: 2021-09-06\r\nhost: x86_64-apple-darwin\r\nrelease: 1.55.0\r\nLLVM version: 12.0.1\r\n```\r\nas well as the most recent nightly version:\r\n```\r\nrustc 1.57.0-nightly (2b862bed9 2021-09-23)\r\nbinary: rustc\r\ncommit-hash: 2b862bed9889808b69629fd7246317189b9517a5\r\ncommit-date: 2021-09-23\r\nhost: x86_64-apple-darwin\r\nrelease: 1.57.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n### Error output\r\n`cargo build --release`\r\n```\r\n   Compiling bug v0.1.0 (/path/bug)\r\nLLVM ERROR: Unsupported expression in static initializer: zext (i64 ptrtoint (<{ [4 x i8] }>* @alloc3 to i64) to i128)\r\nerror: could not compile `bug`\r\n```\r\n\r\n### Initial investigation\r\nBy running `cargo rustc --release -- --emit=llvm-ir` to emit the LLVM, I could narrow the issue down a bit.\r\nThe faulty initializer belongs to a constant called `@.memset_pattern`:\r\n```\r\n@.memset_pattern = private unnamed_addr constant i128 zext (i64 ptrtoint (<{ [4 x i8] }>* @alloc3 to i64) to i128), align 16\r\n```\r\n\r\nThis constant is used inside the `main` function in a call to [`memset_pattern16`](https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/memset_pattern16.3.html)\r\n```\r\ncall void @memset_pattern16(i8* %0, i8* bitcast (i128* @.memset_pattern to i8*), i64 512)\r\n```\r\n\r\nThis function is (as far as I know) not available on Linux which explains why the bug doesn't occur on Linux.\r\nThis function seems to replace the initialization loop in the code above which explains why the bug doesn't occur on debug builds.\r\nThe optimization seems to be very sensitive: When I removed the second member in the struct, the code compiles, because the compiler unrolls the loop instead of calling memset_pattern16.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89225/timeline", "performed_via_github_app": null, "state_reason": null}