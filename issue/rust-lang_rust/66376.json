{"url": "https://api.github.com/repos/rust-lang/rust/issues/66376", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66376/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66376/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66376/events", "html_url": "https://github.com/rust-lang/rust/issues/66376", "id": 522341185, "node_id": "MDU6SXNzdWU1MjIzNDExODU=", "number": 66376, "title": "[Feature request] Autogenerate boilerplate", "user": {"login": "ckaran", "id": 12038467, "node_id": "MDQ6VXNlcjEyMDM4NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/12038467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckaran", "html_url": "https://github.com/ckaran", "followers_url": "https://api.github.com/users/ckaran/followers", "following_url": "https://api.github.com/users/ckaran/following{/other_user}", "gists_url": "https://api.github.com/users/ckaran/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckaran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckaran/subscriptions", "organizations_url": "https://api.github.com/users/ckaran/orgs", "repos_url": "https://api.github.com/users/ckaran/repos", "events_url": "https://api.github.com/users/ckaran/events{/privacy}", "received_events_url": "https://api.github.com/users/ckaran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-13T16:43:12Z", "updated_at": "2019-11-13T18:06:37Z", "closed_at": "2019-11-13T16:50:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a request to implement what I wrote about at https://internals.rust-lang.org/t/tools-team-tell-us-your-sorrows/9657/27?u=ckaran.  Below is the copy/paste of what I wrote.\r\n\r\n### Area\r\n\r\nSource code generation\r\n\r\nBasically, I find myself writing what a lot of what is essentially boilerplate.  For example, if I have the following function:\r\n\r\n```rust\r\npub fn foo(a: Bar) -> bool {\r\n// stuff here.\r\n}\r\n```\r\n\r\nI will thereafter have to expand it into something like:\r\n\r\n```rust\r\n/// # `Foo`s `Bar`s\r\n///\r\n/// Will `Foo` a `Bar` if it hasn't already been `Foo`d.  Will not `Foo` a\r\n/// if it has already been `Foo`d, so this is safe to use on any `Bar`\r\n/// you come across, without checking to see if it has already\r\n/// been `Foo`d.\r\n///\r\n/// # Example - added if needed\r\n///\r\n/// ```rust\r\n/// use crate::bar::Bar;\r\n/// fn main() {\r\n///     let bar = Bar::new();\r\n///     match foo(bar) {\r\n///         true => println!(\"Did foo the bar\"),\r\n///         false => println!(\"Bar was already foo'd, not doing anything\")\r\n///     };\r\n/// }\r\n/// ```\r\n///\r\n/// # Parameters - added if needed\r\n///\r\n/// - `a` - A Bar that may or may not have already been `Foo`d.  \r\n///\r\n/// # Returns - added if needed\r\n///\r\n/// `true` iff `a` wasn't `Foo`d before this call.  If this call returns,\r\n/// rather than panics, then `a` will have been `Foo`d successfully.\r\n///\r\n/// # Panics - added if needed\r\n///\r\n/// Will panic if `a` has been `Baz`d.\r\n///\r\n/// # Errors - added if needed\r\n/// # Safety - added if needed\r\n/// # Aborts - added if needed\r\n/// # Undefined Behavior - added if needed\r\npub fn foo(a: &mut Bar) -> bool {\r\n// stuff here.\r\n}\r\n\r\n// A whole bunch more functions\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n\r\n    fn test_foo() {\r\n        // Some kind of test\r\n    }\r\n}\r\n\r\n```\r\n\r\nThat is a lot of boilerplate for each function, struct, union, etc.  What I want is a tool that is able to analyze the contents of a module (probably via the AST) and generate the boilerplate in place as needed (kind of like how `cargo fmt` figures out where whitespace should be added).  It should do the following:\r\n\r\n- If there are no module-level docs, add the appropriate block at the top.  Put in a `FIXME` comment anywhere I need to fill something in.\r\n- For each member of a struct, enum, union, etc., make sure that there is documentation in place.\r\n- For each function/method, add in the docs as shown above **intelligently**.  That is, if my function doesn't have any parameters, don't bother with that section.  If it does have parameters, add in a single stub line for each parameter.  Same for every other heading.\r\n- For each chunk of executable code, add in a unit test stub whose contents are `assert!(false)`, so that I know what I need to fill in.\r\n    - **Moonshot** Generate multiple test stubs by analyzing the branches within a function to generate stubs that exercise each choice you can make in a branch.  I.e., the test stub ensures that by the time I reach the `FIXME` section, I'm guaranteed to be within some particular block within the function.\r\n- **Don't overrwrite what is already there!** I want this to be an idempotent operation, so that I can run it whenever I want, kind of like how I run `cargo fmt --all` on my code right before each commit.\r\n\r\n### Is there a tool for this already?\r\n\r\nNot as far as I can tell, but I may not be looking in the right places.\r\n\r\n#### If not: which tool do you think it should be included in?\r\n\r\n`rustdoc` for the documentation portion, probably with a new switch like `cargo doc --generate_doc_stubs`.  Maybe something like `rustc --generate_test_stubs` for the test stubs?  Not sure what the best place would be...\r\n\r\n### Did you manage to work around the lack of tooling?\r\n\r\nCopy/pasting of function names, and then prefixing with `test_`, or copy/pasting home-grown documentation stubs, etc.", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66376/timeline", "performed_via_github_app": null, "state_reason": "completed"}