{"url": "https://api.github.com/repos/rust-lang/rust/issues/103064", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103064/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103064/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103064/events", "html_url": "https://github.com/rust-lang/rust/issues/103064", "id": 1409721327, "node_id": "I_kwDOAAsO6M5UBqPv", "number": 103064, "title": "`RUSTFLAGS=-Clink-dead-code` breaks rustc build (alternatives?)", "user": {"login": "AE1020", "id": 68134252, "node_id": "MDQ6VXNlcjY4MTM0MjUy", "avatar_url": "https://avatars.githubusercontent.com/u/68134252?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AE1020", "html_url": "https://github.com/AE1020", "followers_url": "https://api.github.com/users/AE1020/followers", "following_url": "https://api.github.com/users/AE1020/following{/other_user}", "gists_url": "https://api.github.com/users/AE1020/gists{/gist_id}", "starred_url": "https://api.github.com/users/AE1020/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AE1020/subscriptions", "organizations_url": "https://api.github.com/users/AE1020/orgs", "repos_url": "https://api.github.com/users/AE1020/repos", "events_url": "https://api.github.com/users/AE1020/events{/privacy}", "received_events_url": "https://api.github.com/users/AE1020/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-14T18:42:38Z", "updated_at": "2023-04-27T03:32:51Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "[I'm attempting to add instrumentation functions to rustc, to be called from the LLDB debug console](https://rust-lang.zulipchat.com/#narrow/stream/317568-t-compiler.2Fwg-debugging/topic/Dumping.20e.2Eg.2E.20datatype.20.28Ty.29.20Without.20Recompiling/near/303684868).  Here's a simple example of trying to add a C-style function and a Rust function to a hello world program:\r\n\r\n```rust\r\n#[no_mangle] #[allow(dead_code)]\r\npub extern \"C\" fn c_from_debugger_test() {\r\n    println!(\"I am a c call from the debugger\");\r\n}\r\n\r\n#[no_mangle] #[allow(dead_code)]\r\npub fn rust_from_debugger_test(num: u8) {\r\n    println!(\"I am a rust {} call from the debugger\", num);\r\n}\r\n\r\nfn main() {\r\n    println!(\"Hello, I'm just a main()\");\r\n}\r\n```\r\n\r\nI built this with **`rustc -g hello.rs`**.  Then with a breakpoint in main, at the LLDB debug console I tried:\r\n\r\n    > print c_from_debugger_test()\r\n    error: could not find item\r\n\r\n    > print rust_from_debugger_test(10)\r\n    error: could not find item\r\n\r\nI had seen suggestions online that adding `#[no_mangle]` should be enough to get a function into the root set.  That's echoed in comments at time of writing in the rust compiler sources at [compiler/rustc_monomorphize/src/collector.rs](https://github.com/rust-lang/rust/blob/ee1c3b385b6673b6ef37d80dfabe048e993c2ae2/compiler/rustc_monomorphize/src/collector.rs#L66):\r\n\r\n    //! ... (In eager\r\n    //! collection mode, during incremental compilation, all non-generic functions\r\n    //! are considered as roots, as well as when the `-Clink-dead-code` option is\r\n    //! specified. Functions marked `#[no_mangle]` and functions called by inlinable\r\n    //! functions also always act as roots.)\r\n\r\nThe functions would be included in the link if I instead built with **`rustc -g hello.rs -Clink-dead-code`**:\r\n\r\n    > print c_from_debugger_test()\r\n    (()) = () {}  // terminal shows \"I am a c call from the debugger\"\r\n\r\n    > print rust_from_debugger_test(10)\r\n    (()) = () {}  // terminal shows \"I am a rust 10 call from the debugger\"\r\n\r\n**Unfortunately...** there are issues (e.g. [#77529](https://github.com/rust-lang/rust/issues/77529)) with using `-Clink-dead-code` when building some codebases, and that includes building the rust compiler itself.\r\n\r\nIf I try building rustc with `export RUSTFLAGS=\"-Clink-dead-code\"`, this error stops the build (probably there would be others):\r\n\r\n    Compiling rustc-std-workspace-core v1.99.0 (/home/ae1020/rust/library/rustc-std-workspace-core)\r\n    thread 'rustc' panicked at 'called `Option::unwrap()` on a `None` value' \r\n        compiler/rustc_monomorphize/src/collector.rs:1379:36\r\n\r\n*(Coincidentally (?), that's the file with the comment about #[no_mangle] that I cite above.)*\r\n\r\nWhat I'm actually looking for is a way to add these root functions callable from the debugger to the rustc compiler...\r\n\r\n* Possible if #[no_mangle] caused functions to be considered live roots, as the comment suggests\r\n\r\n   * If this is not true, should the comment be updated?\r\n\r\n* Possible if there was a way to build rustc using the `RUSTFLAGS=\"-Clink-dead-code\"`\r\n\r\n* Perhaps there's another other trick or #[...] setting which could affect being included in the link?\r\n\r\n*(A workaround is to hack in spurious calls reachable from main() somewhere to the instrumentation functions.)*\r\n\r\n### Meta\r\n\r\n```\r\n$ rustc --version --verbose\r\nrustc 1.64.0 (a55dd71d5 2022-09-19)\r\nbinary: rustc\r\ncommit-hash: a55dd71d5fb0ec5a6a3a9e8c27b2127ba491ce52\r\ncommit-date: 2022-09-19\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.64.0\r\nLLVM version: 14.0.6\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103064/timeline", "performed_via_github_app": null, "state_reason": null}