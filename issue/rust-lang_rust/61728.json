{"url": "https://api.github.com/repos/rust-lang/rust/issues/61728", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61728/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61728/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61728/events", "html_url": "https://github.com/rust-lang/rust/issues/61728", "id": 454445787, "node_id": "MDU6SXNzdWU0NTQ0NDU3ODc=", "number": 61728, "title": "Lifetime mismatch from itself", "user": {"login": "xplorld", "id": 7023694, "node_id": "MDQ6VXNlcjcwMjM2OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7023694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xplorld", "html_url": "https://github.com/xplorld", "followers_url": "https://api.github.com/users/xplorld/followers", "following_url": "https://api.github.com/users/xplorld/following{/other_user}", "gists_url": "https://api.github.com/users/xplorld/gists{/gist_id}", "starred_url": "https://api.github.com/users/xplorld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xplorld/subscriptions", "organizations_url": "https://api.github.com/users/xplorld/orgs", "repos_url": "https://api.github.com/users/xplorld/repos", "events_url": "https://api.github.com/users/xplorld/events{/privacy}", "received_events_url": "https://api.github.com/users/xplorld/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-11T02:02:14Z", "updated_at": "2022-02-07T14:35:14Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I found myself encountering error[E0623], but the error message is not understandable and seems buggy: it says some variable's lifetime mismatches from itself.\r\n\r\nMinimum Reproducible:\r\n\r\n```\r\n#[derive(Debug)]\r\nenum IntOrRef<'a> {\r\n    I(u32),\r\n    R(&'a u32),\r\n}\r\n\r\n#[derive(Debug)]\r\nstruct V<'a> {\r\n    v: Vec<IntOrRef<'a>>,\r\n}\r\n\r\nfn f(v: &mut V) {\r\n    match v.v.last().unwrap() {\r\n        IntOrRef::I(i) => {v.v.push(IntOrRef::R(&i));}\r\n        IntOrRef::R(_)=> {}\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut v = V { v: vec![IntOrRef::I(1)] };\r\n    f(&mut v);\r\n    dbg!(v);\r\n}\r\n```\r\n\r\nResult:\r\n\r\n```\r\nerror[E0623]: lifetime mismatch\r\n  --> src/bin/temp.rs:14:37\r\n   |\r\n12 | fn f(v: &mut V) {\r\n   |         ------\r\n   |         |\r\n   |         these two types are declared with different lifetimes...\r\n13 |     match v.v.last().unwrap() {\r\n14 |         IntOrRef::I(i) => {v.v.push(IntOrRef::R(&i));}\r\n   |                                     ^^^^^^^^^^^^^^^ ...but data from `v` flows into `v` here\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0623`.\r\n```\r\n\r\nFor me, this is not understandable, and I do not know how to fix it. In the real code, I want to copy a long-lived variable's short-lived reference to a new one and failed. I wonder:\r\n\r\n1. How should I annotate lifetimes to get this work?\r\n2. What does it mean by \"mismatching from itself\"?\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.35.0 (3c235d560 2019-05-20)\r\nbinary: rustc\r\ncommit-hash: 3c235d5600393dfe6c36eeed34042efad8d4f26e\r\ncommit-date: 2019-05-20\r\nhost: x86_64-apple-darwin\r\nrelease: 1.35.0\r\nLLVM version: 8.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61728/timeline", "performed_via_github_app": null, "state_reason": null}