{"url": "https://api.github.com/repos/rust-lang/rust/issues/99256", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99256/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99256/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99256/events", "html_url": "https://github.com/rust-lang/rust/issues/99256", "id": 1305356254, "node_id": "I_kwDOAAsO6M5Nzife", "number": 99256, "title": "Source of lifetime coercion is not reported starting in 1.63", "user": {"login": "mqudsi", "id": 606923, "node_id": "MDQ6VXNlcjYwNjkyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/606923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mqudsi", "html_url": "https://github.com/mqudsi", "followers_url": "https://api.github.com/users/mqudsi/followers", "following_url": "https://api.github.com/users/mqudsi/following{/other_user}", "gists_url": "https://api.github.com/users/mqudsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mqudsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mqudsi/subscriptions", "organizations_url": "https://api.github.com/users/mqudsi/orgs", "repos_url": "https://api.github.com/users/mqudsi/repos", "events_url": "https://api.github.com/users/mqudsi/events{/privacy}", "received_events_url": "https://api.github.com/users/mqudsi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/94", "html_url": "https://github.com/rust-lang/rust/milestone/94", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/94/labels", "id": 7981561, "node_id": "MI_kwDOAAsO6M4Aecn5", "number": 94, "title": "1.63.0", "description": null, "creator": {"login": "rustbot", "id": 47979223, "node_id": "MDQ6VXNlcjQ3OTc5MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47979223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustbot", "html_url": "https://github.com/rustbot", "followers_url": "https://api.github.com/users/rustbot/followers", "following_url": "https://api.github.com/users/rustbot/following{/other_user}", "gists_url": "https://api.github.com/users/rustbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustbot/subscriptions", "organizations_url": "https://api.github.com/users/rustbot/orgs", "repos_url": "https://api.github.com/users/rustbot/repos", "events_url": "https://api.github.com/users/rustbot/events{/privacy}", "received_events_url": "https://api.github.com/users/rustbot/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 772, "state": "closed", "created_at": "2022-05-15T04:52:15Z", "updated_at": "2022-11-06T09:13:54Z", "due_on": null, "closed_at": "2022-08-14T12:59:19Z"}, "comments": 7, "created_at": "2022-07-14T22:39:17Z", "updated_at": "2023-01-04T20:48:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When the lifetime of a value is coerced to a longer one due to the use of an associated function or trait member and the previous lifetime used by other call sites is no longer sufficient, rustc no longer includes any mention of the coercion site (and includes a red herring that forces one to go chasing after the wrong goose). This makes it much, much harder to figure out why code is not working as all the locations rustc mentions are perfectly fine and have nothing to do with the actual cause of the error.\r\n\r\n### Code\r\n\r\n```rust\r\nuse std::path::{Path, PathBuf};\r\n\r\nenum PolyStr<'a> {\r\n    Str(&'a str),\r\n}\r\n\r\nimpl<'a> From<&'static str> for PolyStr<'static> {\r\n    fn from(s: &'static str) -> Self {\r\n        PolyStr::Str(s)\r\n    }\r\n}\r\n\r\n#[derive(Default)]\r\nstruct Ffcommand<'a> {\r\n    inputs: Vec<&'a Path>,\r\n    output: Option<PolyStr<'a>>,\r\n}\r\n\r\nimpl<'a> Ffcommand<'a> {\r\n    pub fn run(&self) -> bool {\r\n        true\r\n    }\r\n\r\n    pub fn input(mut self, p: &'a Path) -> Self {\r\n        self.inputs.push(p);\r\n        self\r\n    }\r\n\r\n    pub fn output<P>(mut self, p: P) -> Self\r\n    where\r\n        P: Into<PolyStr<'a>> + 'a\r\n    {\r\n        self.output = Some(p.into());\r\n        self\r\n    }\r\n}\r\n\r\n#[derive(Default)]\r\nstruct Ffinfo<'a> {\r\n    cmd: Ffcommand<'a>,\r\n    path: PathBuf,\r\n}\r\n\r\nimpl Ffinfo<'_> {\r\n    fn foo(&self) -> bool {\r\n        let cmd = Ffcommand::default()\r\n            .input(&self.path)\r\n            // uncomment the next line to see the error\r\n            // .output(\"pipe:1\")\r\n            ;\r\n            \r\n        cmd.run()\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut info = Ffinfo::default();\r\n    info.path = PathBuf::from(\"./hello.world\");\r\n    info.foo();\r\n}\r\n\r\n```\r\n\r\nWhen the commented-out line is added back in, rustc will emit the following error:\r\n\r\n```\r\nerror[[E0521]](https://doc.rust-lang.org/beta/error-index.html#E0521): borrowed data escapes outside of associated function\r\n  --> src/main.rs:46:19\r\n   |\r\n45 |       fn foo(&self) -> bool {\r\n   |              -----\r\n   |              |\r\n   |              `self` is a reference that is only valid in the associated function body\r\n   |              let's call the lifetime of this reference `'1`\r\n46 |           let cmd = Ffcommand::default()\r\n   |  ___________________^\r\n47 | |             .input(&self.path)\r\n   | |                              ^\r\n   | |                              |\r\n   | |______________________________`self` escapes the associated function body here\r\n   |                                argument requires that `'1` must outlive `'static`\r\n\r\nFor more information about this error, try `rustc --explain E0521`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n[Try on playground](https://play.rust-lang.org/?version=beta&mode=debug&edition=2021&gist=e27d357e44b18e36503950ba53524c4f).\r\n\r\nThe error message points to `self` and `.input()` as the locations pertaining to this error, when in fact the error stems entirely from the usage of `.output()`, which coerces the lifetime to `'static` due to the trait impl, at the same time as `.input()`, which doesn't last as long.\r\n\r\nrustc stable (1.62) emits the following error message instead, which is infinitely more helpful:\r\n\r\n```\r\nerror[[E0759]](https://doc.rust-lang.org/stable/error-index.html#E0759): `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\r\n  --> src/main.rs:47:20\r\n   |\r\n45 |     fn foo(&self) -> bool {\r\n   |            ----- this data with an anonymous lifetime `'_`...\r\n46 |         let cmd = Ffcommand::default()\r\n47 |             .input(&self.path)\r\n   |                    ^^^^^^^^^^ ...is used here...\r\n48 |             .output(\"pipe:1\")\r\n   |              ------ ...and is required to live as long as `'static` here\r\n\r\nFor more information about this error, try `rustc --explain E0759`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nNotice that here the correct call sites (`.input()` and `.output()`) are mentioned. In particular, the fact that `.output()` is where `'static` is required is clearly mentioned, making it easy to figure out what is going on.\r\n\r\nNeedless to say, this is a highly stripped-down example for illustration purposes. It took me perhaps half-an-hour to chase down the actual issue in a real codebase; IIRC the `.output()` equivalent was part of the original code and `.input()` was added some months later, and there were a lot of false trails to chase down before finding the `.output()` lifetime coercion.\r\n\r\n\r\n### Version it worked on\r\n\r\n<!--\r\nProvide the most recent version this worked on, for example:\r\n\r\nIt most recently worked on: Rust 1.47\r\n-->\r\n\r\nIt most recently worked on: 1.62.0\r\n\r\n### Version with regression\r\n\r\n<!--\r\nProvide the version you are using that has the regression.\r\n-->\r\n\r\n`rustc --version --verbose`: \r\n```\r\n1.63.0-beta.5 2022-07-10 93ef0cd7fd86d3d05cee\r\n```\r\n\r\n<!--\r\nDid the compiler crash? If so, please provide a backtrace.\r\n-->\r\n\r\n<!--\r\nIf you know when this regression occurred, please add a line like below, replacing `{channel}` with one of stable, beta, or nightly.\r\n\r\n@rustbot modify labels: +regression-from-stable-to-beta -regression-untriaged\r\n-->\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99256/timeline", "performed_via_github_app": null, "state_reason": null}