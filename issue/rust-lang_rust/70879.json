{"url": "https://api.github.com/repos/rust-lang/rust/issues/70879", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70879/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70879/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70879/events", "html_url": "https://github.com/rust-lang/rust/issues/70879", "id": 595739130, "node_id": "MDU6SXNzdWU1OTU3MzkxMzA=", "number": 70879, "title": "Misleading error message talks about return value of closure when the issue is about Fn vs FnOnce", "user": {"login": "Darksonn", "id": 928074, "node_id": "MDQ6VXNlcjkyODA3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/928074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Darksonn", "html_url": "https://github.com/Darksonn", "followers_url": "https://api.github.com/users/Darksonn/followers", "following_url": "https://api.github.com/users/Darksonn/following{/other_user}", "gists_url": "https://api.github.com/users/Darksonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/Darksonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Darksonn/subscriptions", "organizations_url": "https://api.github.com/users/Darksonn/orgs", "repos_url": "https://api.github.com/users/Darksonn/repos", "events_url": "https://api.github.com/users/Darksonn/events{/privacy}", "received_events_url": "https://api.github.com/users/Darksonn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-07T09:49:22Z", "updated_at": "2020-04-07T09:55:49Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In this code:\r\n\r\n```rust\r\npub struct Shared {}\r\n\r\npub trait State {\r\n    fn new(shared: Rc<RefCell<Shared>>) -> Self where Self: Sized;\r\n}\r\n\r\npub struct StateManager {\r\n    factories: HashMap<String, Box<dyn Fn() -> Box<dyn State>>>,\r\n    shared: Rc<RefCell<Shared>>\r\n}\r\n\r\nimpl StateManager {\r\n    pub fn new() -> Self {\r\n        Self {\r\n            factories: HashMap::new(),\r\n            shared: Rc::new(RefCell::new(Shared {}))\r\n        }\r\n    }\r\n    pub fn register_state<S: State + 'static>(&mut self, name: String) {\r\n        let shared = self.shared.clone();\r\n        self.factories.insert(name, Box::new(move || {\r\n            // uncomment this to make it compile:\r\n            // let shared = shared.clone();\r\n            Box::new(S::new(shared)) as Box<dyn State>\r\n        }) as Box<dyn Fn() -> Box<dyn State>>);\r\n    }\r\n}\r\n```\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=9efce4d01d986d3decac7f581d5be7fc)\r\n\r\nI expected to see this happen: An error that explains that the closure is `FnOnce` due to giving `shared` away.\r\n\r\nInstead, this happened: An error that says the closure is not `dyn Fn()`, which appears to be talking about its return value. Note in particular the `help` note about wrapping it in a closure with no arguments.\r\n\r\nThe error is:\r\n```\r\nerror[E0277]: expected a `std::ops::Fn<()>` closure, found `[closure@src/lib.rs:25:46: 29:10 shared:std::rc::Rc<std::cell::RefCell<Shared>>]`\r\n  --> src/lib.rs:25:37\r\n   |\r\n25 |           self.factories.insert(name, Box::new(move || {\r\n   |  _____________________________________^\r\n26 | |             // uncomment this to make it compile:\r\n27 | |             // let shared = shared.clone();\r\n28 | |             Box::new(S::new(shared)) as Box<dyn State>\r\n29 | |         }) as Box<dyn Fn() -> Box<dyn State>>);\r\n   | |__________^ expected an `Fn<()>` closure, found `[closure@src/lib.rs:25:46: 29:10 shared:std::rc::Rc<std::cell::RefCell<Shared>>]`\r\n   |\r\n   = help: the trait `std::ops::Fn<()>` is not implemented for `[closure@src/lib.rs:25:46: 29:10 shared:std::rc::Rc<std::cell::RefCell<Shared>>]`\r\n   = note: wrap the `[closure@src/lib.rs:25:46: 29:10 shared:std::rc::Rc<std::cell::RefCell<Shared>>]` in a closure with no arguments: `|| { /* code */ }\r\n   = note: required for the cast to the object type `dyn std::ops::Fn() -> std::boxed::Box<dyn State>`\r\n```\r\nBy moving things around a little bit, you get the expected error message:\r\n```rust\r\npub fn register_state<S: State + 'static>(&mut self, name: String) {\r\n    let shared = self.shared.clone();\r\n    \r\n    let closure: Box<dyn Fn() -> Box<dyn State>> = Box::new(move || {\r\n        // uncomment this to make it compile:   \r\n        // let shared = shared.clone();\r\n        Box::new(S::new(shared)) as Box<dyn State>\r\n    });\r\n    \r\n    self.factories.insert(name, closure);\r\n}\r\n```\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=c472f559ddb95739f3dfa95f9c74de9a)\r\n```\r\nerror[E0507]: cannot move out of `shared`, a captured variable in an `Fn` closure\r\n  --> src/lib.rs:29:29\r\n   |\r\n24 |         let shared = self.shared.clone();\r\n   |             ------ captured outer variable\r\n...\r\n29 |             Box::new(S::new(shared)) as Box<dyn State>\r\n   |                             ^^^^^^ move occurs because `shared` has type `std::rc::Rc<std::cell::RefCell<Shared>>`, which does not implement the `Copy` trait\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70879/timeline", "performed_via_github_app": null, "state_reason": null}