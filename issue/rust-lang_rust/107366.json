{"url": "https://api.github.com/repos/rust-lang/rust/issues/107366", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107366/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107366/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107366/events", "html_url": "https://github.com/rust-lang/rust/issues/107366", "id": 1559796833, "node_id": "I_kwDOAAsO6M5c-Jxh", "number": 107366, "title": "[ICE]: compiler segfault with GAT", "user": {"login": "douglas-raillard-arm", "id": 23336875, "node_id": "MDQ6VXNlcjIzMzM2ODc1", "avatar_url": "https://avatars.githubusercontent.com/u/23336875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/douglas-raillard-arm", "html_url": "https://github.com/douglas-raillard-arm", "followers_url": "https://api.github.com/users/douglas-raillard-arm/followers", "following_url": "https://api.github.com/users/douglas-raillard-arm/following{/other_user}", "gists_url": "https://api.github.com/users/douglas-raillard-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/douglas-raillard-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/douglas-raillard-arm/subscriptions", "organizations_url": "https://api.github.com/users/douglas-raillard-arm/orgs", "repos_url": "https://api.github.com/users/douglas-raillard-arm/repos", "events_url": "https://api.github.com/users/douglas-raillard-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/douglas-raillard-arm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630799571, "node_id": "MDU6TGFiZWw2MzA3OTk1NzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compilemem", "name": "I-compilemem", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to memory usage during compilation."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2023-01-27T13:45:43Z", "updated_at": "2023-01-31T09:39:02Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Code\n\n```Rust\npub trait Functor\r\n{\r\n    type With<T>: Functor;\r\n}\r\n\r\npub struct IdFunctor<T>(T);\r\nimpl<T> Functor for IdFunctor<T> {\r\n    type With<T2> = IdFunctor<T2>;\r\n}\r\n\r\nimpl<T> Functor for Vec<T> {\r\n    type With<T2> = Vec<T2>;\r\n}\r\n\r\nimpl<T> Functor for Box<T> {\r\n    type With<T2> = Box<T2>;\r\n}\r\n\r\npub struct Compose<F1, F2, T>(F1::With<F2::With<T>>)\r\nwhere\r\n    F1: Functor,\r\n    F2: Functor;\r\n\r\nimpl<F1, F2, T> Functor for Compose<F1, F2, T>\r\nwhere\r\n    F1: Functor,\r\n    F2: Functor\r\n{\r\n    type With<T2> = F1::With<F2::With<T2>>;\r\n}\r\n\r\npub enum Value<F, FVEC>\r\nwhere\r\n    F: Functor,\r\n    FVEC: Functor,\r\n{\r\n    UnsignedInt(F::With<u64>),\r\n    Array(Box<Value<FVEC, Compose<F, FVEC, ()>>>),\r\n}\r\n\r\n\r\nfn main() {\r\n    let x: Value<IdFunctor<()>, Compose<IdFunctor<()>, Vec<()>, ()>> = Value::UnsignedInt(IdFunctor(1));\r\n}\n```\n\n\n### Affected release channels\n\n- [ ] Previous Stable\n- [X] Current Stable\n- [X] Current Beta\n- [X] Current Nightly\n\n### Rust Version\n\n```Shell\nrustc 1.66.1 (90743e729 2023-01-10)\r\nbinary: rustc\r\ncommit-hash: 90743e7298aca107ddaa0c202a4d3604e29bfeb6\r\ncommit-date: 2023-01-10\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.66.1\r\nLLVM version: 15.0.2\n```\n\n\n### Current error output\n\n```Shell\n>>> RUSTFLAGS=\"-A unused\" cargo test --color=always -- --nocapture --test-threads=1\r\n   Compiling traceevent v0.1.0 (lisa/tools/analysis/traceevent)\r\nerror: could not compile `traceevent`\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustc --crate-name traceevent --edition=2021 traceevent/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --test -C metadata=a2a838ea58b05a7f -C extra-filename=-a2a838ea58b05a7f --out-dir lisa/tools/analysis/target/debug/deps -C incremental=lisa/tools/analysis/target/debug/incremental -L dependency=lisa/tools/analysis/target/debug/deps --extern memmap2=lisa/tools/analysis/target/debug/deps/libmemmap2-39be61c96f5d1d0c.rlib --extern nom=lisa/tools/analysis/target/debug/deps/libnom-ff2be7353b7bf974.rlib --extern nom_locate=lisa/tools/analysis/target/debug/deps/libnom_locate-4ec40cb54fefc4c1.rlib --extern smartstring=lisa/tools/analysis/target/debug/deps/libsmartstring-b065da3210ea89f5.rlib --extern thiserror=lisa/tools/analysis/target/debug/deps/libthiserror-5bdf89cac3d44f1d.rlib -A unused` (signal: 11, SIGSEGV: invalid memory reference)\n```\n\n\n### Backtrace\n\n```Shell\nNo backtrace:\r\n(signal: 11, SIGSEGV: invalid memory reference)\n```\n\n\n### Anything else?\n\nThis happened while tinkering with a code similar to this issue:\r\nhttps://github.com/rust-lang/rust/issues/107362\r\n\r\nThe difference is that I \"manually unrolled\" one level of `Compose<F, Vec>` into FVEC, so the type of `Value<FVEC, Compose<F, FVEC, ()>>` is now (possibly) an infinite chain of mutually recursive F and FVEC instead of a directly recursive chain of F", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107366/timeline", "performed_via_github_app": null, "state_reason": null}