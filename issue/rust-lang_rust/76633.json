{"url": "https://api.github.com/repos/rust-lang/rust/issues/76633", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76633/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76633/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76633/events", "html_url": "https://github.com/rust-lang/rust/issues/76633", "id": 700127213, "node_id": "MDU6SXNzdWU3MDAxMjcyMTM=", "number": 76633, "title": "Adding a `take` method to `Default`", "user": {"login": "zesterer", "id": 3268430, "node_id": "MDQ6VXNlcjMyNjg0MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/3268430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zesterer", "html_url": "https://github.com/zesterer", "followers_url": "https://api.github.com/users/zesterer/followers", "following_url": "https://api.github.com/users/zesterer/following{/other_user}", "gists_url": "https://api.github.com/users/zesterer/gists{/gist_id}", "starred_url": "https://api.github.com/users/zesterer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zesterer/subscriptions", "organizations_url": "https://api.github.com/users/zesterer/orgs", "repos_url": "https://api.github.com/users/zesterer/repos", "events_url": "https://api.github.com/users/zesterer/events{/privacy}", "received_events_url": "https://api.github.com/users/zesterer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-09-12T07:46:25Z", "updated_at": "2020-09-13T08:46:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`std::mem::take` takes a mutable reference to a value with a type implementing `Default` and swaps it with the default value of that type.\r\n\r\nIt seems natural to me that `take` should therefore be a method on `Default`.\r\n\r\n```rust\r\npub trait Default: Sized {\r\n    fn default() -> Self;\r\n    fn take(&mut self) -> Self { std::mem::take(self) }\r\n}\r\n```\r\n\r\nA few points in favour:\r\n\r\n- 'Taking' a value is a very common operation. I often see uglier and more verbose attempts at taking a value, such as the following, written by developers that do not know about the functions in `std::mem` or are scared to use them because they sound like low-level operations.\r\n\r\n```rust\r\nlet y = x;\r\nx = Default::default();\r\n// use `y` for something else\r\n```\r\n\r\n- It's often quite awkward to import `std::mem::swap` and to use it like a prefix operator (in the same manner that `await!` was awkward to use before the `.await` operator.\r\n\r\n- It supersedes `Option::take`\r\n\r\nThe disadvantage is that this is a breaking change, conflicting with existing methods on types implementing `Default`, such as `Cell::take` (although it's also trivial to disambiguate existing code).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76633/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76633/timeline", "performed_via_github_app": null, "state_reason": null}