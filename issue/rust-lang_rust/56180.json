{"url": "https://api.github.com/repos/rust-lang/rust/issues/56180", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56180/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56180/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56180/events", "html_url": "https://github.com/rust-lang/rust/issues/56180", "id": 383729867, "node_id": "MDU6SXNzdWUzODM3Mjk4Njc=", "number": 56180, "title": "Expose Windows VolumeSerialNumber and FileIndex/FileId in std::os::windows::fs::MetadataExt", "user": {"login": "Sh4rK", "id": 221874, "node_id": "MDQ6VXNlcjIyMTg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/221874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sh4rK", "html_url": "https://github.com/Sh4rK", "followers_url": "https://api.github.com/users/Sh4rK/followers", "following_url": "https://api.github.com/users/Sh4rK/following{/other_user}", "gists_url": "https://api.github.com/users/Sh4rK/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sh4rK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sh4rK/subscriptions", "organizations_url": "https://api.github.com/users/Sh4rK/orgs", "repos_url": "https://api.github.com/users/Sh4rK/repos", "events_url": "https://api.github.com/users/Sh4rK/events{/privacy}", "received_events_url": "https://api.github.com/users/Sh4rK/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-23T07:59:53Z", "updated_at": "2023-03-19T09:46:55Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, using `std::os::unix::fs::MetadataExt` and `std::os::linux::fs::MetadataExt` it is possible to get the inode number of a file. This can be useful in determining whether two files are the same. There's a similar concept in Windows, consisting of a few parts:\r\n\r\n`VolumeSerialNumber`: The serial number of the volume that contains the file.\r\n`FileIndex`: A 64 bit unique (within a volume) identifier that is associated with a file.\r\n`FileId`: A 128 bit unique (within a volume) identifier that is associated with a file (this is the \"evolution\" of the above, according to the docs currently only used by ReFS).\r\n\r\nSources: [_BY_HANDLE_FILE_INFORMATION](https://docs.microsoft.com/en-us/windows/desktop/api/fileapi/ns-fileapi-_by_handle_file_information) [_FILE_ID_INFO](https://docs.microsoft.com/en-us/windows/desktop/api/winbase/ns-winbase-_file_id_info)\r\n\r\nCombining the `VolumeSerialNumber` and `FileIndex`/`FileId` of a file is thus a unique identifier of a file on a single machine (at a given time; unique IDs may be reused).\r\n\r\nI would like these to get added to `std::os::windows::fs::MetadataExt`. The changes needed would be fairly tiny (literally just exposing already available data in case of `VolumeSerialNumber` and `FileIndex` [here](https://github.com/rust-lang/rust/blob/6a2d1b4e15d5de90f8c36181b1d429da658adfd2/src/libstd/sys/windows/fs.rs#L299-L309) but an additional function call for `FileId`), and it wouldn't introduce any breaking changes as far as I can see, it would only add 2/3 methods. Would this require an RFC?\r\n\r\nI see that the RFCs README lists \"Additions to std.\" as an as example, but on the other hand I wouldn't say this is a \"substantial\" change.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56180/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56180/timeline", "performed_via_github_app": null, "state_reason": null}