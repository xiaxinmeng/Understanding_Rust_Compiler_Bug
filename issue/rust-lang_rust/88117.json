{"url": "https://api.github.com/repos/rust-lang/rust/issues/88117", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88117/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88117/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88117/events", "html_url": "https://github.com/rust-lang/rust/issues/88117", "id": 972805269, "node_id": "MDU6SXNzdWU5NzI4MDUyNjk=", "number": 88117, "title": "`rustc_data_structures::jobserver` should fall back to an in-process implementation if no jobserver in environment", "user": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-08-17T15:20:48Z", "updated_at": "2023-04-09T04:14:15Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "In https://github.com/rust-lang/rust/issues/88091 we discovered a scaling limit on concurrent `rustc` invocations when run outside of a build system that provides a jobserver pipe. In that configuration, the compiler [creates its own pipe](https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/compiler/rustc_data_structures/src/jobserver.rs#L23) for internal thread scheduling, which means that each invocation of `rustc` makes a pipe with two pages. On Linux, there is a soft limit on the number of per-user pipe pages which roughly nets out to allowing up to 512 concurrent `rustc`s if there were no other processes using pipes.\r\n\r\nPer @alexcrichton in https://github.com/rust-lang/rust/issues/88091#issuecomment-899864927, this fallback jobserver doesn't need to be inherited by any forked processes which should mean it's OK to use an in-process concurrency controller instead of the jobserver client.\r\n\r\nLooking at the code, I think it should be possible to refactor `rustc_data_structures::jobserver::client()` to return a shim that can either dispatch to a real jobserver client or to an in-process semaphore. The client only seems to be used for `rustc_data_structures::jobserver::{schedule_thread,release_thread}` and for LLVM thread creation, so it should be a smallish refactor.\r\n\r\ncc @tmandry ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88117/timeline", "performed_via_github_app": null, "state_reason": null}