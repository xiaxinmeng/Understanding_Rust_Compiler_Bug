{"url": "https://api.github.com/repos/rust-lang/rust/issues/102007", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102007/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102007/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102007/events", "html_url": "https://github.com/rust-lang/rust/issues/102007", "id": 1377486853, "node_id": "I_kwDOAAsO6M5SGsgF", "number": 102007, "title": "Enhance incompat errors on diverging fn return `!`", "user": {"login": "pinkforest", "id": 36498018, "node_id": "MDQ6VXNlcjM2NDk4MDE4", "avatar_url": "https://avatars.githubusercontent.com/u/36498018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pinkforest", "html_url": "https://github.com/pinkforest", "followers_url": "https://api.github.com/users/pinkforest/followers", "following_url": "https://api.github.com/users/pinkforest/following{/other_user}", "gists_url": "https://api.github.com/users/pinkforest/gists{/gist_id}", "starred_url": "https://api.github.com/users/pinkforest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pinkforest/subscriptions", "organizations_url": "https://api.github.com/users/pinkforest/orgs", "repos_url": "https://api.github.com/users/pinkforest/repos", "events_url": "https://api.github.com/users/pinkforest/events{/privacy}", "received_events_url": "https://api.github.com/users/pinkforest/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1472513132, "node_id": "MDU6TGFiZWwxNDcyNTEzMTMy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-never_type", "name": "F-never_type", "color": "f9c0cc", "default": false, "description": "`#![feature(never_type)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-09-19T06:51:33Z", "updated_at": "2023-05-13T17:45:37Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Issues\r\n\r\nI think these may be Error enhancements to flag unreachable and / or E0308 at fn return incompat ?\r\n\r\n1) Return on Incompatible [diverging](https://doc.rust-lang.org/rust-by-example/fn/diverging.html) `!` is allowed\r\n\r\n2) Unreachable is not errored with used diverging `!` function -- EDIT: do we need to enhance error priorities here ?\r\n\r\n3) Also the default unit or `()` type is allowed to be incompatible with diverging `!` in non-main fn\r\n\r\n4) Should there be a lint for `fn main() -> !` ?\r\n\r\n_I also note that the behaviour here is same with `#![feature(never_type)]` or without it whilst using nightly._\r\n\r\n### Related Stuff / Issues\r\n\r\n - https://rust-lang.zulipchat.com/#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/.E2.9C.94.20.23102007.20diverging.20fn.20return.20errors/near/300313778\r\n - https://doc.rust-lang.org/rust-by-example/fn/diverging.html type\r\n - https://github.com/rust-lang/rfcs/pull/1216\r\n - https://doc.rust-lang.org/reference/types/never.html type - Not stabilised though ?\r\n - https://github.com/rust-lang/rfcs/pull/1216#issuecomment-240644538 -  req's unstable `#![feature(never_type)]` ?\r\n - https://github.com/rust-lang/rust/issues/35121#issuecomment-1174544082\r\n\r\n### 1 - Return on Incompatible diverging `!` type is allowed\r\n\r\nIf we set the signature to return [String](https://doc.rust-lang.org/std/string/struct.String.html) type in `exit_elsewhere` where as we really return diverging `!`:\r\n\r\n```rust\r\nfn exit_elsewhere() -> String {\r\n    std::process::exit(0)\r\n}\r\n\r\nfn main() {\r\n    let bar: Option<&str> = None;\r\n\r\n    let foo = match bar {\r\n        Some(\"Foo\") => \"I'm &str\",\r\n        None => exit_elsewhere(),\r\n    };\r\n}\r\n```\r\n\r\nI would expect to get an error that String return type is incompatible with process::exit diverging `!` type\r\n\r\nBut I get instead compiler assuming String is returned when it's not down at match assign:\r\n\r\n```\r\nerror[E0308]: `match` arms have incompatible types\r\n  --> src/main.rs:14:17\r\n   |\r\n11 |       let foo = match bar {\r\n   |  _______________-\r\n12 | |         Some(_) => \"I'm another &str\",\r\n   | |                    ------------------ this is found to be of type `&str`\r\n13 | |         None => exit_elsewhere(),\r\n   | |                 ^^^^^^^^^^^^^^^^\r\n   | |                 |\r\n   | |                 expected `&str`, found struct `String`\r\n   | |                 help: consider borrowing here: `&exit_elsewhere()`\r\n14 | |     };\r\n   | |_____- `match` arms have incompatible types\r\n```\r\n\r\n_Note: If `process::exit` is in the assign-match local scope it does correctly figure out that the type is never returned and allows it_\r\n\r\n### 2 - Unreachable is not errored with used diverging function\r\n\r\nEDIT: This is not errored as the E0308 has prio over unreachable - if I omit the match-assign the unreachable does surface\r\nEDIT.2: Nonetheless it does provide insight how the priorities work given we don't Error on diverging `!` incompat on return fn type\r\n\r\nIf I put unreachable statement after the `std::process::exit`\r\n\r\n```rust\r\nfn exit_elsewhere() -> String {\r\n    std::process::exit(0);\r\n\r\n    \"\" // this should be unreachable                                                                                                                                                                                         \r\n}\r\n\r\n```\r\nThen I finally get what I want re: incompatible type\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:6:5\r\n  |\r\n3 | fn exit_elsewhere() -> String {\r\n  |                        ------ expected `String` because of return type\r\n...\r\n6 |     \"\"\r\n  |     ^^- help: try using a conversion method: `.to_string()`\r\n  |     |\r\n  |     expected struct `String`, found `&str`\r\n```\r\n\r\nBut the above should have complained about \"\" being unreachable which it didn't.\r\n\r\ne.g. if I put .to_string() to return String as the signature says I will get the E0308 only from match-assign scope.\r\n\r\n### 3 - Also with default unit () type is allowed to be incompatible with diverging `!` type\r\n\r\nGiven by default all function signatures return `()` or [unit ](https://doc.rust-lang.org/std/primitive.unit.html) if the return type is not defined\r\n\r\nAnd since function signatures are global where as Rust type inference only extends to local types this becomes tricky.\r\n\r\nThis would be easy to put off as edge-case though but anyways :woman_shrugging: \r\n\r\nFor example from this default `()` return type:\r\n\r\n```rust\r\nfn exit_elsewhere() {\r\n    std::process::exit(0)\r\n}\r\n```\r\n\r\nWe get again E0308 at match assignment instead of return type incompatibility:\r\n\r\n```\r\nerror[E0308]: `match` arms have incompatible types\r\n  --> src/main.rs:21:17\r\n   |\r\n19 |       let foo = match Some(\"Foo\") {\r\n   |  _______________-\r\n20 | |         Some(\"Foo\") => \"I'm &str\",\r\n   | |                        ---------- this is found to be of type `&str`\r\n21 | |         None => exit_elsewhere(),\r\n   | |                 ^^^^^^^^^^^^^^^^ expected `&str`, found `()`\r\n22 | |     }\r\n   | |_____- `match` arms have incompatible types\r\n```\r\n\r\nThis ofcourse works if we put diverging function type `!` to exit_elsewhere signature explicitly:\r\n\r\n```rust\r\nfn exit_elsewhere() -> ! {\r\n    std::process::exit(0)\r\n}\r\n```\r\nFor the unit type maybe the compiler should warn here if the return type is not really `()` in non-main ?\r\n\r\nConsidering [process::exit](https://doc.rust-lang.org/stable/src/std/process.rs.html#1-2194) is has diverging return type and that should trigger error if returned against unit:\r\n\r\n```rust\r\npub fn exit(code: i32) -> ! {\r\n    crate::rt::cleanup();\r\n    crate::sys::os::exit(code)\r\n}\r\n```\r\n\r\n### 4 - Should there be a lint for `fn main -> !`\r\n\r\nThe above ofcourse has interesting implications to main fn's beyond non-main fn's too as main fn's tend to infer `()`\r\n\r\nThis is given `fn main()` in bin targets generally infers `process:exit(0)` or a long running / panicy etc. process.\r\n\r\n### Meta\r\n\r\n$ rustc --version -v\r\nrustc 1.65.0-nightly (750bd1a7f 2022-09-14)\r\nbinary: rustc\r\ncommit-hash: 750bd1a7ff3e010611b97ee75d30b7cbf5f3a03c\r\ncommit-date: 2022-09-14\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.65.0-nightly\r\nLLVM version: 15.0.0\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102007/timeline", "performed_via_github_app": null, "state_reason": null}