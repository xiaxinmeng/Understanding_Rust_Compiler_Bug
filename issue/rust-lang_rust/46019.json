{"url": "https://api.github.com/repos/rust-lang/rust/issues/46019", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46019/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46019/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46019/events", "html_url": "https://github.com/rust-lang/rust/issues/46019", "id": 274328434, "node_id": "MDU6SXNzdWUyNzQzMjg0MzQ=", "number": 46019, "title": "Making a function generic (but not using the parameter at all) causes ~12% slowdown", "user": {"login": "marshallpierce", "id": 575695, "node_id": "MDQ6VXNlcjU3NTY5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/575695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marshallpierce", "html_url": "https://github.com/marshallpierce", "followers_url": "https://api.github.com/users/marshallpierce/followers", "following_url": "https://api.github.com/users/marshallpierce/following{/other_user}", "gists_url": "https://api.github.com/users/marshallpierce/gists{/gist_id}", "starred_url": "https://api.github.com/users/marshallpierce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marshallpierce/subscriptions", "organizations_url": "https://api.github.com/users/marshallpierce/orgs", "repos_url": "https://api.github.com/users/marshallpierce/repos", "events_url": "https://api.github.com/users/marshallpierce/events{/privacy}", "received_events_url": "https://api.github.com/users/marshallpierce/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-15T22:31:53Z", "updated_at": "2018-01-23T15:10:10Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I found a situation where making a function that contains the majority of the hot code a generic function produces about a 12% performance regression in benchmarks, even though the generic parameter is not actually used and the type parameter in question is only ever used with one type.\r\n\r\nThe code in question is at https://bitbucket.org/marshallpierce/stream-vbyte-rust. The benchmark that exhibits the largest degradation is `encode_scalar_rand_1k`.\r\n\r\n[ 95ba949](https://bitbucket.org/marshallpierce/stream-vbyte-rust/commits/95ba949e0580656e91b1a58c3c89421261b4843e) is the commit that introduces the generic and associated slowdown.\r\n\r\nWhen comparing the output of `perf annotate -l` for that benchmark in the two cases, it looks like the [hot code](https://bitbucket.org/marshallpierce/stream-vbyte-rust/src/95ba949e0580656e91b1a58c3c89421261b4843e/src/scalar.rs?fileviewer=file-view-default#scalar.rs-102) is compiled significantly differently. `cmp.rs:846` (an implementation of `lt()`) shows up as the leading offender in `perf annotate` with about 12% of samples in the slow case, basically the same as the performance delta I'm seeing, whereas it's not present at all in the base case.\r\n\r\nIn the base case, it looks like inlining collapsed function calls up through `encode::encode`, a few layers up the call stack:\r\n\r\n```\r\n...\r\n    0.00 :        110ef:       cmp    $0x1,%rax\r\n    0.00 :        110f3:       jbe    11150 <stream_vbyte::encode::encode+0x1f0>\r\n         :      _ZN12stream_vbyte6encode17encode_num_scalarE():\r\n    0.00 :        110f5:       cmp    $0x2,%rdx\r\n    0.00 :        110f9:       jb     111d3 <stream_vbyte::encode::encode+0x273>\r\n    0.00 :        110ff:       movzbl -0x2b(%rbp),%ecx\r\n    0.00 :        11103:       mov    %cl,0x1(%r14,%r12,1)\r\n         :      _ZN4core4iter5range8{{impl}}11next<usize>E():\r\n    0.00 :        11108:       cmp    $0x3,%rax\r\n    0.00 :        1110c:       jb     11150 <stream_vbyte::encode::encode+0x1f0>\r\n         :      _ZN12stream_vbyte6encode17encode_num_scalarE():\r\n    0.00 :        1110e:       cmp    $0x3,%rdx\r\n    0.00 :        11112:       jb     111da <stream_vbyte::encode::encode+0x27a>\r\n    0.00 :        11118:       movzbl -0x2a(%rbp),%ecx\r\n    0.00 :        1111c:       mov    %cl,0x2(%r14,%r12,1)\r\n         :      _ZN4core4iter5range8{{impl}}11next<usize>E():\r\n    0.00 :        11121:       cmp    $0x4,%rax\r\n    0.00 :        11125:       jb     11150 <stream_vbyte::encode::encode+0x1f0>\r\n         :      _ZN12stream_vbyte6encode17encode_num_scalarE():\r\n    0.00 :        11127:       cmp    $0x4,%rdx\r\n...\r\n``` \r\n\r\nIn the slower case, `encode_num_scalar` was inlined only into its direct caller, `do_encode_quads`:\r\n\r\n```\r\n         :      _ZN9byteorder8{{impl}}9write_u32E():\r\n lib.rs:1726    2.11 :    1149a:       mov    %r10d,-0x2c(%rbp)\r\n         :      _ZN12stream_vbyte6encode17encode_num_scalarE():\r\n         :              output[i] = buf[i];\r\n mod.rs:161    0.77 :     1149e:       test   %r13,%r13\r\n    0.00 :        114a1:       je     1167d <stream_vbyte::scalar::do_encode_quads+0x41d>\r\n    0.16 :        114a7:       movzbl -0x2c(%rbp),%ecx\r\n    1.62 :        114ab:       mov    %cl,(%r9,%rax,1)\r\n         :      _ZN4core3cmp5impls8{{impl}}2ltE():\r\n cmp.rs:846    2.90 :     114af:       cmp    $0x1,%r8\r\n    0.00 :        114b3:       jbe    11510 <stream_vbyte::scalar::do_encode_quads+0x2b0>\r\n         :      _ZN12stream_vbyte6encode17encode_num_scalarE():\r\n    0.41 :        114b5:       cmp    $0x2,%r13\r\n    0.00 :        114b9:       jb     11648 <stream_vbyte::scalar::do_encode_quads+0x3e8>\r\n    0.08 :        114bf:       movzbl -0x2b(%rbp),%ecx\r\n mod.rs:161    0.55 :     114c3:       mov    %cl,0x1(%r9,%rax,1)\r\n         :      _ZN4core4iter5range8{{impl}}11next<usize>E():\r\n range.rs:218    1.82 :   114c8:       cmp    $0x3,%r8\r\n    0.00 :        114cc:       jb     11510 <stream_vbyte::scalar::do_encode_quads+0x2b0>\r\n         :      _ZN12stream_vbyte6encode17encode_num_scalarE():\r\n    0.16 :        114ce:       cmp    $0x3,%r13\r\n    0.00 :        114d2:       jb     1166d <stream_vbyte::scalar::do_encode_quads+0x40d>\r\n    0.04 :        114d8:       movzbl -0x2a(%rbp),%ecx\r\n    0.14 :        114dc:       mov    %cl,0x2(%r9,%rax,1)\r\n         :      _ZN4core4iter5range8{{impl}}11next<usize>E():\r\n    1.24 :        114e1:       cmp    $0x4,%r8\r\n    0.00 :        114e5:       jb     11510 <stream_vbyte::scalar::do_encode_quads+0x2b0>\r\n         :      _ZN12stream_vbyte6encode17encode_num_scalarE():\r\n    0.06 :        114e7:       cmp    $0x4,%r13\r\n    0.00 :        114eb:       jb     11674 <stream_vbyte::scalar::do_encode_quads+0x414>\r\n    0.00 :        114f1:       movzbl -0x29(%rbp),%ecx\r\n```\r\n\r\nNote the non-zero percentages attached to various `cmp` instructions. Also, based on my casual \"look at how many times `encode_num_scalar` appears to have been inlined\" analysis, it looks like the slow case unrolled the loop 4x while the fast case did not. (Discussing on rust-internals led to https://github.com/rust-lang/rfcs/issues/2219.)\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\n\r\nrustc 1.21.0 (3b72af97e 2017-10-09)\r\nbinary: rustc\r\ncommit-hash: 3b72af97e42989b2fe104d8edbaee123cdf7c58f\r\ncommit-date: 2017-10-09\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.21.0\r\nLLVM version: 4.0", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46019/timeline", "performed_via_github_app": null, "state_reason": null}