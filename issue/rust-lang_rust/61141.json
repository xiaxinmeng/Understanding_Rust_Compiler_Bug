{"url": "https://api.github.com/repos/rust-lang/rust/issues/61141", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61141/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61141/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61141/events", "html_url": "https://github.com/rust-lang/rust/issues/61141", "id": 448388898, "node_id": "MDU6SXNzdWU0NDgzODg4OTg=", "number": 61141, "title": "cleaner output when dbg!() is given a literal value", "user": {"login": "MarkMcCaskey", "id": 5770194, "node_id": "MDQ6VXNlcjU3NzAxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5770194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarkMcCaskey", "html_url": "https://github.com/MarkMcCaskey", "followers_url": "https://api.github.com/users/MarkMcCaskey/followers", "following_url": "https://api.github.com/users/MarkMcCaskey/following{/other_user}", "gists_url": "https://api.github.com/users/MarkMcCaskey/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarkMcCaskey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarkMcCaskey/subscriptions", "organizations_url": "https://api.github.com/users/MarkMcCaskey/orgs", "repos_url": "https://api.github.com/users/MarkMcCaskey/repos", "events_url": "https://api.github.com/users/MarkMcCaskey/events{/privacy}", "received_events_url": "https://api.github.com/users/MarkMcCaskey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-24T23:57:59Z", "updated_at": "2019-05-25T03:44:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello!  I'm unsure if this should be an RFC but it seems similar to #57845, so I'll start by filing an issue here.\r\n\r\n## The problem\r\n\r\nOften I end up writing `dbg!` code with constant values, usually strings, to trace control flow.\r\n\r\n```Rust\r\ndbg!(\"Start loop\");\r\nwhile condition {\r\n   dbg!(\"Phase 1\");\r\n   unsafe { libc::do_something() }\r\n   ...\r\n   dbg!(\"Phase 2\");\r\n   ...\r\n}\r\n```\r\n\r\nThe output is a bit noisier than I'd like.\r\n`[lib/emscripten/src/syscalls/unix.rs:826] \"Start loop\" = \"Start loop\"`\r\n\r\n## The solution\r\n\r\nDetect if the argument to the macro is a literal value (assuming this is possible) and make the output just:\r\n`[lib/emscripten/src/syscalls/unix.rs:826] \"Start loop\"`\r\n\r\n## Alternatives considered:\r\n- `eprintln!`: doesn't have line and file info.  It's a separate macro, so it's less aesthetically pleasing and less intuitive in my opinion.\r\n- `debug!`: usually I'm already using these for other tasks and filtering them out is harder and less convenient than `dbg!`;  `dbg!` is nice because it's explicitly a temporary debugging tool\r\n- a custom macro: it'd be nice to be able to use this consistently anywhere", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61141/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61141/timeline", "performed_via_github_app": null, "state_reason": null}