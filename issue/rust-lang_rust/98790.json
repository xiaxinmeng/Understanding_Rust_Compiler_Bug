{"url": "https://api.github.com/repos/rust-lang/rust/issues/98790", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98790/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98790/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98790/events", "html_url": "https://github.com/rust-lang/rust/issues/98790", "id": 1291916766, "node_id": "I_kwDOAAsO6M5NARXe", "number": 98790, "title": "Rustc pretty printer generates syntactically invalid output for some binary operators", "user": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-07-02T00:13:01Z", "updated_at": "2022-07-02T00:13:16Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "```rust\r\n// repro.rs\r\n\r\nmacro_rules! repro {\r\n    () => {\r\n        match () {\r\n            () => true,\r\n        }\r\n    };\r\n}\r\n\r\npub fn repro() -> bool {\r\n    repro!() | true\r\n}\r\n```\r\n\r\n```console\r\n$ rustc --edition=2021 -Zunpretty=expanded lib.rs \r\n#![feature(prelude_import)]\r\n#[prelude_import]\r\nuse std::prelude::rust_2021::*;\r\n#[macro_use]\r\nextern crate std;\r\nmacro_rules! repro { () => { match() { () => true, } } ; }\r\n\r\npub fn repro() -> bool { match () { () => true, } | true }\r\n```\r\n\r\nAnother manifestation of the exact same pretty printer bug (in case this one is easier to incorporate into the test suite):\r\n\r\n```rust\r\nmacro_rules! stringify_item {\r\n    ($item:item) => {\r\n        stringify!($item)\r\n    };\r\n}\r\n\r\nmacro_rules! repro {\r\n    ($expr:expr) => {\r\n        stringify_item! {\r\n            pub fn repro() -> bool {\r\n                $expr\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nfn main() {\r\n    println!(\"{}\", repro!(match () { () => true } | true));\r\n}\r\n```\r\n\r\n```console\r\n$ cargo run\r\npub fn repro() -> bool { match () { () => true, } | true }\r\n```\r\n\r\nThe `repro` function in each of these outputs is syntactically invalid code, which is not what `-Zunpretty=expanded` or `stringify!` should be creating.\r\n\r\n```console\r\nerror: expected one of `...`, `..=`, `..`, `:`, or `|`, found `}`\r\n --> src/lib.rs:1:58\r\n  |\r\n1 | pub fn repro() -> bool { match () { () => true, } | true }\r\n  |                                                          ^ expected one of `...`, `..=`, `..`, `:`, or `|`\r\n  |\r\nhelp: parentheses are required to parse this as an expression\r\n  |\r\n1 | pub fn repro() -> bool { (match () { () => true, }) | true }\r\n  |                          +                        +\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:1:26\r\n  |\r\n1 | pub fn repro() -> bool { match () { () => true, } | true }\r\n  |                          ^^^^^^^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here\r\n  |                          |\r\n  |                          expected `()`, found `bool`\r\n```\r\n\r\nThe correct output in both cases would be either of the following syntactically valid outputs:\r\n\r\n```rust\r\npub fn repro() -> bool { (match () { () => true, }) | true }\r\n```\r\n\r\n```rust\r\npub fn repro() -> bool { (match () { () => true, } | true) }\r\n```\r\n\r\nThe rustc pretty printer already does parenthesis insertion in similar scenarios so it is a bug that it is not doing it here. For example:\r\n\r\n```rust\r\n// lib.rs\r\n\r\nstruct Struct {}\r\n\r\nmacro_rules! repro {\r\n    () => {\r\n        Struct {}\r\n    };\r\n}\r\n\r\npub fn repro() -> bool {\r\n    match repro!() {\r\n        _ => {}\r\n    }\r\n}\r\n```\r\n\r\n```console\r\n$ rustc --edition=2021 -Zunpretty=expanded src/lib.rs \r\n#![feature(prelude_import)]\r\n#[prelude_import]\r\nuse std::prelude::rust_2021::*;\r\n#[macro_use]\r\nextern crate std;\r\nstruct Struct {}\r\n\r\nmacro_rules! repro { () => { Struct {} } ; }\r\n\r\npub fn repro() -> bool { match (Struct {}) { _ => {} } }\r\n```\r\n\r\nNotice that the pretty printer put parens around `Struct {}` because `match Struct {} { _ => {} }` would not have been valid syntax.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98790/timeline", "performed_via_github_app": null, "state_reason": null}