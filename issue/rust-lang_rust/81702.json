{"url": "https://api.github.com/repos/rust-lang/rust/issues/81702", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81702/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81702/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81702/events", "html_url": "https://github.com/rust-lang/rust/issues/81702", "id": 800181304, "node_id": "MDU6SXNzdWU4MDAxODEzMDQ=", "number": 81702, "title": "bootstrapping rustc for a custom target no longers works since 1.48, assembles stages for `build` not `host`", "user": {"login": "danc86", "id": 398575, "node_id": "MDQ6VXNlcjM5ODU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/398575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danc86", "html_url": "https://github.com/danc86", "followers_url": "https://api.github.com/users/danc86/followers", "following_url": "https://api.github.com/users/danc86/following{/other_user}", "gists_url": "https://api.github.com/users/danc86/gists{/gist_id}", "starred_url": "https://api.github.com/users/danc86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danc86/subscriptions", "organizations_url": "https://api.github.com/users/danc86/orgs", "repos_url": "https://api.github.com/users/danc86/repos", "events_url": "https://api.github.com/users/danc86/events{/privacy}", "received_events_url": "https://api.github.com/users/danc86/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 325438536, "node_id": "MDU6TGFiZWwzMjU0Mzg1MzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-bootstrap", "name": "T-bootstrap", "color": "bfd4f2", "default": false, "description": "Relevant to the bootstrap subteam: Rust's build system (x.py and src/bootstrap)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-02-03T10:15:09Z", "updated_at": "2021-03-22T16:45:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm working with Yocto's meta-rust layer, trying to build rustc 1.49. I'm building on a regular x86_64 Linux host, but we use a custom JSON target specification due to rust-lang/cargo#3349. So we have `x86_64-unknown-linux-gnu` (real Rust triple) cross-bootstrapping for `x86_64-linux` (custom target which is essentially the same as `x86_64-unknown-linux-gnu` but with a different name):\r\n\r\n```\r\ntarget = [\"x86_64-linux\"]\r\nhost = [\"x86_64-linux\"]\r\nbuild = \"x86_64-unknown-linux-gnu\"\r\n```\r\n\r\nWith rust 1.47, `x.py build --stage 2 src/rustc` gives us the desired bootstrapping behaviour:\r\n\r\n```\r\nBuilding stage0 std artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage0 std from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage0 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage0 rustc from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nAssembling stage1 compiler (x86_64-unknown-linux-gnu)\r\nBuilding stage1 std artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage1 std from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage1 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage1 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nAssembling stage2 compiler (x86_64-unknown-linux-gnu)\r\nUplifting stage1 std (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage2 std from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nUplifting stage1 rustc (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage2 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage1 std artifacts (x86_64-unknown-linux-gnu -> x86_64-linux)\r\nCopying stage1 std from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-linux)\r\nUplifting stage1 std (x86_64-unknown-linux-gnu -> x86_64-linux)\r\nCopying stage2 std from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-linux)\r\nBuilding stage1 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-linux)\r\nCopying stage1 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-linux)\r\nUplifting stage1 rustc (x86_64-unknown-linux-gnu -> x86_64-linux)\r\nCopying stage2 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-linux)\r\nAssembling stage2 compiler (x86_64-linux)\r\nUplifting stage1 std (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage2 std from stage1 (x86_64-unknown-linux-gnu -> x86_64-linux / x86_64-unknown-linux-gnu)\r\nUplifting stage1 rustc (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage2 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-linux / x86_64-unknown-linux-gnu)\r\nUplifting stage1 std (x86_64-unknown-linux-gnu -> x86_64-linux)\r\nCopying stage2 std from stage1 (x86_64-unknown-linux-gnu -> x86_64-linux / x86_64-linux)\r\nUplifting stage1 rustc (x86_64-unknown-linux-gnu -> x86_64-linux)\r\nCopying stage2 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-linux / x86_64-linux)\r\n```\r\n\r\n(Note that it also insisted on building a compiler for the build triple `x86_64-unknown-linux-gnu` as well as the host `x86_64-linux`, which is unnecessary but not harmful. It seems this has been addressed in bootstrap since 1.47.)\r\n\r\nThe end result with 1.47 above is that the `build/x86_64-linux/stage2` directory contains an assembled rustc for the host `x86_64-linux` with libstd for `x86_64-linux` (and `x86_64-unknown-linux-gnu`).\r\n\r\nHowever, with 1.48 and 1.49 the bootstrap behaviour has changed in a way that I still don't grok. When I run `x.py build --stage 2` it seems both stage0 and stage1 are built for `x86_64-unknown-linux-gnu`. There is no stage1 built for the host `x86_64-linux` which is what I would expect.\r\n\r\n```\r\nBuilding stage0 std artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage0 std from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage0 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage0 rustc from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nAssembling stage1 compiler (x86_64-unknown-linux-gnu)\r\nBuilding stage1 std artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage1 std from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage1 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage1 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nAssembling stage2 compiler (x86_64-unknown-linux-gnu)\r\nBuilding stage1 std artifacts (x86_64-unknown-linux-gnu -> x86_64-linux)\r\nCopying stage1 std from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-linux)\r\nUplifting stage1 std (x86_64-unknown-linux-gnu -> x86_64-linux)\r\nCopying stage2 std from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-linux)\r\nBuilding stage1 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-linux)\r\nCopying stage1 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-linux)\r\nAssembling stage2 compiler (x86_64-linux)\r\nBuilding rustdoc for stage2 (x86_64-linux)\r\n```\r\n\r\nAs a result, this step: `Uplifting stage1 std (x86_64-unknown-linux-gnu -> x86_64-linux)` doesn't actually do what it says. The `build/x86_64-linux/stage2` directory ends up containing a compiler, but its rustlib directory is empty:\r\n\r\n```\r\n$ find build/x86_64-linux/stage2\r\nbuild/x86_64-linux/stage2/\r\nbuild/x86_64-linux/stage2/lib\r\nbuild/x86_64-linux/stage2/lib/rustlib\r\nbuild/x86_64-linux/stage2/lib/rustlib/src\r\nbuild/x86_64-linux/stage2/lib/rustlib/src/rust\r\nbuild/x86_64-linux/stage2/lib/rustlib/x86_64-linux\r\nbuild/x86_64-linux/stage2/lib/rustlib/x86_64-linux/lib\r\nbuild/x86_64-linux/stage2/lib/rustlib/x86_64-linux/codegen-backends\r\nbuild/x86_64-linux/stage2/lib/libstd-0689b0d4825be2a9.so\r\nbuild/x86_64-linux/stage2/lib/libtest-c874a8d9a6c5eeb1.so\r\nbuild/x86_64-linux/stage2/lib/libchalk_derive-882f59f2b68bc54d.so\r\nbuild/x86_64-linux/stage2/lib/librustc_driver-3d1b959398c548de.so\r\nbuild/x86_64-linux/stage2/lib/librustc_macros-47465b30dcf2dd0e.so\r\nbuild/x86_64-linux/stage2/lib/libtracing_attributes-72e8112b29a353da.so\r\nbuild/x86_64-linux/stage2/bin\r\nbuild/x86_64-linux/stage2/bin/rustc\r\nbuild/x86_64-linux/stage2/bin/rustdoc\r\n```\r\n\r\nThat step seems to be copying into `build/x86_64-unknown-linux-gnu/stage2` instead.\r\n\r\nComplete build config and target spec for reference:\r\n[config.toml](https://github.com/rust-lang/rust/files/5916877/config.toml.txt)\r\n[x86_64-linux.json](https://github.com/rust-lang/rust/files/5916884/x86_64-linux.json.txt)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81702/timeline", "performed_via_github_app": null, "state_reason": null}