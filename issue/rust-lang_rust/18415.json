{"url": "https://api.github.com/repos/rust-lang/rust/issues/18415", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/18415/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/18415/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/18415/events", "html_url": "https://github.com/rust-lang/rust/issues/18415", "id": 47114280, "node_id": "MDU6SXNzdWU0NzExNDI4MA==", "number": 18415, "title": "str escape sequences are undocumented", "user": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-10-29T05:56:04Z", "updated_at": "2018-04-29T16:21:17Z", "closed_at": "2014-11-21T03:36:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The [`str` module](http://doc.rust-lang.org/std/str/index.html) doesn't document what escape sequences are valid if any. For example, documentation doesn't state whether this will match a newline as would be expected:\n\n``` rust\nlet path = Path::new(\"test.txt\");\nlet mut file = BufferedReader::new(File::open(&path));\n\nfor line in file.lines() {\n    println!(\"{}\", line.unwrap().as_slice().ends_with(\"\\n\"));\n}\n```\n\nIt also doesn't specify what format these strings are supposed to be written in. Much of the documentation including many escape sequences are documented in the [reference](http://doc.rust-lang.org/reference.html#character-and-string-literals) but it is difficult (slow) to parse as it is. I think it would be good to have it in `std::str` or at least to make the reference more clear. More escape documentation is in [`libsyntax`](https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/lexer/mod.rs#L752). Better escape documentation is in the [`regex` module](http://doc.rust-lang.org/regex/index.html#escape-sequences) (though it's not exactly related).\n\nFor what it's worth, [Python](https://docs.python.org/3/library/text.html#textservices) doesn't seem to document it either (at least, I couldn't find it).\n\nBelow is my first shot at what it could look like.\n\n---\n# Escapes\n\n```\n\\a          bell (\\x07)\n\\f          form feed (\\x0C)\n\\t          horizontal tab\n\\n          new line\n\\r          carriage return\n\\v          vertical tab (\\x0B)\n\\\\          backslash\nU+0009 (HT) (I don't know what HT is)\n\\x7F        8-bit hex character code (exactly 2 digits)\n\\u7FFF      16-bit hex character code (exactly 4 digits)\n\\U7EEEFFFF  32-bit hex character code (exactly 8 digits)\n```\n# Raw string literals\n\n`r` followed by any number (including zero) of `#`'s followed by `\"` and closed in the reverse:\n\n```\nr\"raw input\\\\\";    // raw input\\\\\n// What is the purpose of these `#`s?\nr#\"another\"#;      // another\nr###\"3 sharps\"###; // 3 sharps\n```\n# Byte literal\n\nA single ASCII character:\n\n```\nb'T';  // T\nb'\\''; // ' (escape for single quotes)\n```\n# Byte string literals\n\nA sequence of ASCII characters:\n\n```\nb\"foo\";              // foo\nb\"\\\"foo\\\"\";          // \"foo\" (escape for `\"`)\nbr##\"foo #\"# bar\"##; // foo #\"# bar\n```\n\n---\n\nNote: I'm not really familiar with all the string formats. I'm just to collect them together so they're more obvious.\n\n@steveklabnik Does it make sense to collect them onto the [`std::str`](http://doc.rust-lang.org/std/str/index.html) page? If so, I can probably submit a PR making something like this but I'm not sure where it should go.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/18415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/18415/timeline", "performed_via_github_app": null, "state_reason": "completed"}