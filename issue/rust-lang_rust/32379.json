{"url": "https://api.github.com/repos/rust-lang/rust/issues/32379", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32379/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32379/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32379/events", "html_url": "https://github.com/rust-lang/rust/issues/32379", "id": 142203743, "node_id": "MDU6SXNzdWUxNDIyMDM3NDM=", "number": 32379, "title": "include!(...) (still) does not see local variables ", "user": {"login": "comex", "id": 47517, "node_id": "MDQ6VXNlcjQ3NTE3", "avatar_url": "https://avatars.githubusercontent.com/u/47517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/comex", "html_url": "https://github.com/comex", "followers_url": "https://api.github.com/users/comex/followers", "following_url": "https://api.github.com/users/comex/following{/other_user}", "gists_url": "https://api.github.com/users/comex/gists{/gist_id}", "starred_url": "https://api.github.com/users/comex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/comex/subscriptions", "organizations_url": "https://api.github.com/users/comex/orgs", "repos_url": "https://api.github.com/users/comex/repos", "events_url": "https://api.github.com/users/comex/events{/privacy}", "received_events_url": "https://api.github.com/users/comex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-03-20T20:49:24Z", "updated_at": "2019-09-01T13:36:04Z", "closed_at": "2019-09-01T13:36:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a dupe of #11390 from two years ago; the current behavior appears to be the same, and I just ran into it in my project.  That issue was closed as expected behavior, but I don't think the behavior makes any sense.\n\nThe contents of`include!`d files, like the definitions of macros, have a separate hygiene scope and cannot reference local variables by name.  However, whereas macros can be granted access to local names by passing them as parameters, `include!` has no way to pass parameters, so as far as I can tell, included files essentially can't access locals at all.  (Wrapping the included file in a `macro_rules!` declaration doesn't work because the macro name itself is subject to hygiene, so it can't be called.  There may be some more complex workaround but I can't figure it out.)\n\nOf course, later-compilation-stage approaches work, like having the include evaluate to a lambda expression which the including code then calls.  Alternately, a build script can manually combine the two to produce a file containing the full module, which can then be included or specified with the `path` attribute on a `mod` declaration.  But both of these have drawbacks and shouldn't be necessary when `include!` is right there.\n\nEven if the local variable limitation somehow weren't an issue, I'm skeptical that the benefits of hygiene apply to the way  `include!` seems to be typically used in the first place: rarely, and usually as an artifact of the build process, a way to combine checked-in and generated code, rather than as a self-contained abstraction like macros tend to be.\n\nUnfortunately, at this point, changing the behavior of `include!` would be a breaking change, so I don't propose it.  But it would be nice to have some sort of alternate form or argument to the macro that puts the included text in the same hygiene scope as the caller.\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32379/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32379/timeline", "performed_via_github_app": null, "state_reason": "completed"}