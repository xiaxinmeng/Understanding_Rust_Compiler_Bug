{"url": "https://api.github.com/repos/rust-lang/rust/issues/51937", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51937/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51937/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51937/events", "html_url": "https://github.com/rust-lang/rust/issues/51937", "id": 337184480, "node_id": "MDU6SXNzdWUzMzcxODQ0ODA=", "number": 51937, "title": "Suggest adding `return` or moving items before block/control flow expression statement when expression statement followed only by item statements and there's no trailing expression", "user": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-30T04:05:23Z", "updated_at": "2022-11-11T04:28:41Z", "closed_at": "2022-11-11T04:28:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Basically, when the code is of the form\r\n\r\n```rust\r\nfn fn_name() -> return_type {\r\n    statements;\r\n    { control flow expression without terminating semicolon }\r\n    items\r\n    /* no terminating expression */\r\n}\r\n```\r\n\r\nthen when the mismatched type error happens on the control flow expression statement, check if every following statement is an item declaration. If it is, emit a help pointing out that the item declaration statements are causing the control flow expression to be an expression statement and that the default unit return value is returned. It can probably be fixed by adding a `return` or moving the item declarations to before the expression statement so it gets treated as an expression.\r\n\r\nProbably more crazy, make it a non-fatal error by actually assuming the programmer meant for it to be the final expression if the type matches the return type of the function.\r\n\r\nFor an example, consider the following function:\r\n\r\n```rust\r\nfn example_fn() -> i32 {\r\n  if helper_fn() == 0 {\r\n    10\r\n  } else {\r\n    20\r\n  }\r\n\r\n  fn helper_fn() -> i32 { 0 }\r\n}\r\n```\r\n\r\nCurrently it prints out two type errors. One states that the if should be of type `unit`, but it's actually type `i32`. The other states the function block should be of type `i32`, but it is actually of type `unit`. Instead, it should give a single error pointing out that item declaration of `helper_fn` prevents the `if` from being in the return expression position and to either manually return the `if` or to move `helper_fn` to before the `if` expression. And then, for the possibly crazy part, actually presume there's a return there and continue compilation so that other errors can be collected.", "closed_by": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51937/timeline", "performed_via_github_app": null, "state_reason": "completed"}