{"url": "https://api.github.com/repos/rust-lang/rust/issues/71058", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71058/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71058/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71058/events", "html_url": "https://github.com/rust-lang/rust/issues/71058", "id": 598476455, "node_id": "MDU6SXNzdWU1OTg0NzY0NTU=", "number": 71058, "title": "Adding a `Send` bound generates `the parameter type `S` must be valid for any other region`", "user": {"login": "Ekleog", "id": 411447, "node_id": "MDQ6VXNlcjQxMTQ0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ekleog", "html_url": "https://github.com/Ekleog", "followers_url": "https://api.github.com/users/Ekleog/followers", "following_url": "https://api.github.com/users/Ekleog/following{/other_user}", "gists_url": "https://api.github.com/users/Ekleog/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ekleog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ekleog/subscriptions", "organizations_url": "https://api.github.com/users/Ekleog/orgs", "repos_url": "https://api.github.com/users/Ekleog/repos", "events_url": "https://api.github.com/users/Ekleog/events{/privacy}", "received_events_url": "https://api.github.com/users/Ekleog/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-12T12:42:58Z", "updated_at": "2020-04-15T12:16:31Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I'm using `cargo 1.43.0-nightly (bda50510d 2020-03-02)` / `rustc 1.43.0-nightly (c20d7eecb 2020-03-11)`.\r\n\r\nWith this code (simplified from [this crate](https://github.com/Ekleog/yuubind/tree/7dbebd924fe73e7de905c24a46564f631b7e46c1), edition 2018 with as only dependency `futures = \"0.3.4\"`):\r\n```rust\r\nuse futures::{prelude::*, Future, Stream};\r\nuse std::{\r\n    pin::Pin,\r\n    task::{Context, Poll},\r\n};\r\n\r\npub struct Foo {}\r\n\r\nimpl Foo {\r\n    pub fn foo<'a, S>(\r\n        &'a mut self,\r\n        reader: &'a mut StreamWrapperOuter<S>,\r\n    ) -> Pin<Box<dyn 'a + Send + Future<Output = ()>>>\r\n    where\r\n        S: 'a + Unpin + Send + Stream<Item = Vec<()>>,\r\n    {\r\n        Box::pin(async move {\r\n            let _res = reader.concat().await;\r\n            unimplemented!()\r\n        })\r\n    }\r\n}\r\n\r\npub struct StreamWrapperOuter<'a, S>\r\nwhere\r\n    S: Unpin + Stream<Item = Vec<()>>,\r\n{\r\n    _source: &'a mut StreamWrapperInner<S>,\r\n}\r\n\r\nimpl<'a, S> Stream for StreamWrapperOuter<'a, S>\r\nwhere\r\n    S: Unpin + Stream<Item = Vec<()>>,\r\n{\r\n    type Item = Vec<()>;\r\n\r\n    fn poll_next(self: Pin<&mut Self>, _ctx: &mut Context) -> Poll<Option<Self::Item>> {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nstruct StreamWrapperInner<S: Stream> {\r\n    _stream: S,\r\n}\r\n\r\nimpl<S: Stream> Stream for StreamWrapperInner<S> {\r\n    type Item = S::Item;\r\n\r\n    fn poll_next(self: Pin<&mut Self>, _ctx: &mut Context) -> Poll<Option<S::Item>> {\r\n        unimplemented!()\r\n    }\r\n}\r\n```\r\n\r\nI get the following error:\r\n```rust\r\nerror[E0311]: the parameter type `S` may not live long enough\r\n  --> src/lib.rs:17:9\r\n   |\r\n17 | /         Box::pin(async move {\r\n18 | |             let _res = reader.concat().await;\r\n19 | |             unimplemented!()\r\n20 | |         })\r\n   | |__________^\r\n   |\r\n   = help: consider adding an explicit lifetime bound for `S`\r\n   = note: the parameter type `S` must be valid for any other region...\r\nnote: ...so that the type `StreamWrapperInner<S>` will meet its required lifetime bounds\r\n  --> src/lib.rs:17:9\r\n   |\r\n17 | /         Box::pin(async move {\r\n18 | |             let _res = reader.concat().await;\r\n19 | |             unimplemented!()\r\n20 | |         })\r\n   | |__________^\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nHowever, removing the `Send` bounds on both the return type of `Foo::foo` and its `S` type parameter, it compiles perfectly.\r\n\r\nI'm pretty surprised with the fact that adding a `Send` bound apparently changes the lifetime; and the fact that `S` \u201cmust be valid for any other region\u201d would make me guess it's a stray `for<'r>` like has already happened with async/await. What do you think about this?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71058/timeline", "performed_via_github_app": null, "state_reason": null}