{"url": "https://api.github.com/repos/rust-lang/rust/issues/67069", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67069/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67069/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67069/events", "html_url": "https://github.com/rust-lang/rust/issues/67069", "id": 533595372, "node_id": "MDU6SXNzdWU1MzM1OTUzNzI=", "number": 67069, "title": "Warn if type-name in parameter-position", "user": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-05T20:58:22Z", "updated_at": "2022-11-02T17:26:21Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was surprised that one can confuse himself like in the cooked-up example below: Specifying a concrete type for a parameter on an `impl` does what one expects. This might lead to the expectation that you can specify a concrete type for a parameter on an `fn`, which is not the case:\r\n\r\n```rust\r\nstruct Foobar<T>(T);\r\n\r\ntrait Foo {\r\n    fn bar<H>(&self, b: H) where H: std::fmt::Display ;\r\n}\r\n\r\n// `String` is a type...\r\nimpl Foo for Foobar<String> {\r\n    // `String` is not a type, it's a type-parameter named `String`.\r\n    // This is almost guaranteed to be wrong!\r\n    fn bar<String>(&self, _b: String) where String: std::fmt::Display {}\r\n}\r\n```\r\nHere, `String` does not refer to the type `String` but is still a generic parameter, now named `String` instead of `H`.\r\n\r\nIf we don't specify the `Display`-bound, the compiler even helpfully suggests to add the requirement `String: Display`, which we can do right away. We can use `fn bar<u32>(...)` and the compiler will warn that `u32` should be upper-cased.\r\n\r\nMaybe the compiler could warn if a parameter is given the name of a type that is in scope? Something to the tune of\r\n\r\n> The type-parameter named `String` in `fn bar<String>(...)` has the same name as the type `std::string::String` in the local scope. Be aware that this declares a type-parameter named `String`. It does not specify a concrete type and might lead to confusion. The original definition is `fn bar<H>(...)`", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67069/timeline", "performed_via_github_app": null, "state_reason": null}