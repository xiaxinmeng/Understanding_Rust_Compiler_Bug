{"url": "https://api.github.com/repos/rust-lang/rust/issues/83111", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83111/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83111/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83111/events", "html_url": "https://github.com/rust-lang/rust/issues/83111", "id": 831132885, "node_id": "MDU6SXNzdWU4MzExMzI4ODU=", "number": 83111, "title": " Compiler generates invalid program that segfault when executed", "user": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-03-14T11:28:41Z", "updated_at": "2021-03-14T12:33:21Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#[no_mangle]\r\nextern \"C\" fn new() -> Box<usize> {\r\n    Box::new(42)\r\n}\r\n\r\n#[no_mangle]\r\nextern \"C\" fn free(_: Option<Box<usize>>) {}\r\n\r\nfn main() {\r\n    let a = new();\r\n    println!(\"a = {}\", a);\r\n}\r\n```\r\n\r\nPlayground: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f5501d69b691435bbdcf9c758de6111b\r\n\r\nI expected to see this happen:\r\n\r\nA valid program is being generated by the compiler and it prints `a = 42` and then exists when executed.\r\n\r\nInstead, this happened:\r\n\r\nThe program segfaults when executed.\r\n\r\n### Meta\r\n\r\nYou can verify using the playground link that its segfaulting on:\r\n- stable: currently `1.50.0`\r\n- beta\r\n- nightly\r\n\r\nI also manually tried locally with `1.49.0` and it also segfaults.\r\n\r\n### Debug\r\n\r\nDebugging with gdb:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x000055555555942e in alloc::alloc::box_free ()\r\n(gdb) bt\r\n#0  0x000055555555942e in alloc::alloc::box_free ()\r\n#1  0x000055555555991d in core::ptr::drop_in_place ()\r\n#2  0x00005555555598ef in core::ptr::drop_in_place ()\r\n#3  0x000055555555995d in free ()\r\n#4  0x0000555555559417 in alloc::alloc::dealloc ()\r\n#5  0x0000555555559588 in <alloc::alloc::Global as core::alloc::AllocRef>::dealloc ()\r\n#6  0x00005555555594d1 in alloc::alloc::box_free ()\r\n#7  0x000055555555991d in core::ptr::drop_in_place ()\r\n#8  0x00005555555598ef in core::ptr::drop_in_place ()\r\n#9  0x000055555555995d in free ()\r\n#10 0x0000555555559417 in alloc::alloc::dealloc ()\r\n#11 0x0000555555559588 in <alloc::alloc::Global as core::alloc::AllocRef>::dealloc ()\r\n#12 0x00005555555594d1 in alloc::alloc::box_free ()\r\n#13 0x000055555555991d in core::ptr::drop_in_place ()\r\n#14 0x00005555555598ef in core::ptr::drop_in_place ()\r\n#15 0x000055555555995d in free ()\r\n#16 0x0000555555559417 in alloc::alloc::dealloc ()\r\n#17 0x0000555555559588 in <alloc::alloc::Global as core::alloc::AllocRef>::dealloc ()\r\n#18 0x00005555555594d1 in alloc::alloc::box_free ()\r\n#19 0x000055555555991d in core::ptr::drop_in_place ()\r\n#20 0x00005555555598ef in core::ptr::drop_in_place ()\r\n#21 0x000055555555995d in free ()\r\n#22 0x0000555555559417 in alloc::alloc::dealloc ()\r\n#23 0x0000555555559588 in <alloc::alloc::Global as core::alloc::AllocRef>::dealloc ()\r\n#24 0x00005555555594d1 in alloc::alloc::box_free ()\r\n#25 0x000055555555991d in core::ptr::drop_in_place ()\r\n#26 0x00005555555598ef in core::ptr::drop_in_place ()\r\n#27 0x000055555555995d in free ()\r\n#28 0x0000555555559417 in alloc::alloc::dealloc ()\r\n#29 0x0000555555559588 in <alloc::alloc::Global as core::alloc::AllocRef>::dealloc ()\r\n```\r\n\r\nThe whole call stack is filled by calls to free. I guess it makes sense in some way since that I mistakenly re-defined free with a function that calls itself, leading to a recursive call \"loop\".\r\n\r\nI fully understand that problem is on my side, I probably should not have re-defined free but arguably when defining ffi-compatible function, one could re-use an already existing libc function name without realizing it and thus leading to all sort of surprising behavior.\r\n\r\nMaybe the compiler should:\r\n- provide a compiler warning\r\n- do not allow to replace a libc symbol unless explicitly requesting it using a function attribute or something", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83111/timeline", "performed_via_github_app": null, "state_reason": null}