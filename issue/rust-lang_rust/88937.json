{"url": "https://api.github.com/repos/rust-lang/rust/issues/88937", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88937/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88937/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88937/events", "html_url": "https://github.com/rust-lang/rust/issues/88937", "id": 996176500, "node_id": "I_kwDOAAsO6M47YHJ0", "number": 88937, "title": "Missing support for target features on s390x", "user": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 896260695, "node_id": "MDU6TGFiZWw4OTYyNjA2OTU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-SystemZ", "name": "O-SystemZ", "color": "6e6ec0", "default": false, "description": "Target: SystemZ processors (s390x)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-09-14T15:52:11Z", "updated_at": "2021-09-15T21:33:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There are a number of places where rust handles architecture-specific features, in particular:\r\n\r\n- the `target_feature` attribute to enable/disable features when compiling parts of the code base\r\n- the `target_feature` conditional compilation option to check for the presence of a feature at compile time\r\n- the `is_`_arch_`_feature_detected!` macro to check for the presence of a feature at run time\r\n\r\nAll of this seems to be missing for s390x at the moment.\r\n\r\nThe LLVM back-end does support fine-grained selection of features as defined by the architecture (Principles of Operation).  There is also support for run-time detection on Linux via the HWCAP mechanism and/or the `/proc/cpuinfo` file, however this is somewhat less fine-grained and uses slightly different naming conventions, so there may have to be some selection / name mapping here.\r\n\r\nThis is the current list of HWCAP values and the associated string in the `features` line in `/proc/cpuinfo`.  Where applicable, I've also listed the corresponding LLVM feature name and architecture level where it was introduced.  Some HWCAP values have no feature name, either because they're assumed to always present (LLVM doesn't support any architecture earlier than arch8), or because they refer to HW features without ISA impact.\r\n\r\n```\r\nHWCAP value          /proc           LLVM feature                          arch level\r\n                     cpuinfo\r\n\r\nHWCAP_S390_ESAN3     \"esan3\"         n/a\r\nHWCAP_S390_ZARCH     \"zarch\"         n/a\r\nHWCAP_S390_STFLE     \"stfle\"         n/a\r\nHWCAP_S390_MSA       \"msa\"           n/a\r\nHWCAP_S390_LDISP     \"ldisp\"         n/a\r\nHWCAP_S390_EIMM      \"eimm\"          n/a\r\nHWCAP_S390_DFP       \"dfp\"           n/a\r\nHWCAP_S390_HPAGE     \"edat\"          n/a\r\nHWCAP_S390_ETF3EH    \"etf3eh\"        n/a\r\nHWCAP_S390_HIGH_GPRS \"highgprs\"      \"high-word\"                           arch9            \r\nHWCAP_S390_TE        \"te\"            \"transactional-execution\"             arch10    \r\nHWCAP_S390_VXRS      \"vx\"            \"vector\"                              arch11              \r\nHWCAP_S390_VXRS_BCD  \"vxd\"           \"vector-packed-decimal\"               arch11  \r\nHWCAP_S390_VXRS_EXT  \"vxe\"           \"vector-enhancements-1\"               arch12\r\nHWCAP_S390_GS        \"gs\"            \"guarded-storage\"                     arch12    \r\nHWCAP_S390_VXRS_EXT2 \"vxe2\"          \"vector-enhancements-2\"               arch13  \r\nHWCAP_S390_VXRS_PDE  \"vxp\"           \"vector-packed-decimal-enhancement\"   arch13\r\nHWCAP_S390_SORT      \"sort\"          \"enhanced-sort\"                       arch13            \r\nHWCAP_S390_DFLT      \"dflt\"          \"deflate-conversion\"                  arch13           \r\nHWCAP_S390_VXRS_PDE2 \"vxp2\"          \"vector-packed-decimal-enhancement-2\" arch14\r\nHWCAP_S390_NNPA      \"nnpa\"          \"nnp-assist\"                          arch14                \r\nHWCAP_S390_PCI_MIO   \"pcimio\"        n/a\r\nHWCAP_S390_SIE       \"sie\"           n/a\r\n```\r\n\r\nAs an alternative to using HWCAP, it would also be possible to detect the fine-grained facilities available in the hardware.  This could be done either by parsing the `facilities` line in `/proc/cpuinfo`, or else by using the STORE FACILITY LIST EXTENDED instruction.  The advantage would be that the HW facilities match 1:1 to the LLVM features.  The disadvantage is that certain facilities (e.g. \"transactional-execution\" or \"vector\") require OS support in addition to HW support, e.g. to swap extended register sets during context switch.  This is correctly handled by checking the HWCAP feature list, but will be missed by just checking for the HW facilities.\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88937/timeline", "performed_via_github_app": null, "state_reason": null}