{"url": "https://api.github.com/repos/rust-lang/rust/issues/110593", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110593/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110593/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110593/events", "html_url": "https://github.com/rust-lang/rust/issues/110593", "id": 1676492853, "node_id": "I_kwDOAAsO6M5j7UA1", "number": 110593, "title": "Inconsistency in Required where clauses on GAT ", "user": {"login": "zylthinking", "id": 1066931, "node_id": "MDQ6VXNlcjEwNjY5MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1066931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zylthinking", "html_url": "https://github.com/zylthinking", "followers_url": "https://api.github.com/users/zylthinking/followers", "following_url": "https://api.github.com/users/zylthinking/following{/other_user}", "gists_url": "https://api.github.com/users/zylthinking/gists{/gist_id}", "starred_url": "https://api.github.com/users/zylthinking/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zylthinking/subscriptions", "organizations_url": "https://api.github.com/users/zylthinking/orgs", "repos_url": "https://api.github.com/users/zylthinking/repos", "events_url": "https://api.github.com/users/zylthinking/events{/privacy}", "received_events_url": "https://api.github.com/users/zylthinking/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 2352122097, "node_id": "MDU6TGFiZWwyMzUyMTIyMDk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-discussion", "name": "C-discussion", "color": "f5f1fd", "default": false, "description": "Category: Discussion or questions that doesn't represent real issues."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-04-20T10:57:34Z", "updated_at": "2023-04-21T02:42:57Z", "closed_at": "2023-04-21T02:42:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "For trait `LendingIterator` and struct `WindowsMut<'t, T>`\r\n```rust\r\ntrait LendingIterator {\r\n    type Item<'a> ;\r\n    fn next<'a>(&'a mut self) -> Option<Self::Item<'a>>;\r\n    fn do_check(checker: Self::Item<'_>) {}\r\n}\r\n\r\nstruct WindowsMut<'t, T> {\r\n    slice: &'t mut T,\r\n    start: usize,\r\n    window_size: usize,\r\n}\r\n\r\n```\r\nThe following impl compiles, no requiring where clauses because of  `do_check` :\r\n\r\n```rust\r\nimpl<'t> LendingIterator for WindowsMut<'t, bool> {\r\n    type Item<'a> = &'a bool;\r\n\r\n    fn next<'a>(&'a mut self) -> Option<Self::Item<'a>> {\r\n        None\r\n    }\r\n}\r\n\r\n```\r\nmeaning GAT can conclude `'t : 'a`; \r\n\r\nbut the following fails:\r\n```rust\r\nimpl<'t, T> LendingIterator for WindowsMut<'t, T> {\r\n    type Item<'a> = &'a T;\r\n\r\n    fn next<'a>(&'a mut self) -> Option<Self::Item<'a>> {\r\n        None\r\n    }\r\n}\r\n```\r\n\r\nreporting:\r\n> the parameter type `T` may not live long enough\r\n\r\nSeems `Self : 'a` is not necessary, because return value of next may not be related to self, for example:\r\n\r\n```rust\r\ntrait LendingIterator {\r\n    type Item<'a>;\r\n    fn next<'a>(&'a mut self) -> Option<Self::Item<'a>>;\r\n}\r\n\r\nstruct WindowsMut<'t, T> {\r\n    slice: &'t mut T,\r\n    start: usize,\r\n    window_size: usize,\r\n}\r\n\r\nimpl<'t, T> LendingIterator for WindowsMut<'t, T> {\r\n    type Item<'a> = &'a bool;\r\n\r\n    fn next<'a>(&'a mut self) -> Option<Self::Item<'a>> {\r\n        Some(&true)\r\n    }\r\n}\r\n```\r\n\r\nbut reports missing required bound on `Item`\r\n```\r\nerror: missing required bound on `Item`\r\n --> src/lib.rs:4:5\r\n  |\r\n4 |     type Item<'a>;\r\n  |     ^^^^^^^^^^^^^-\r\n  |                  |\r\n  |                  help: add the required where clause: `where Self: 'a`\r\n  |\r\n  = note: this bound is currently required to ensure that impls have maximum flexibility\r\n  = note: we are soliciting feedback, [see issue #87479 <https://github.com/rust-lang/rust/issues/87479>](https://github.com/rust-lang/rust/issues/87479) for more information\r\n```\r\n\r\nAnd when it does reference Self, `&'a self` already indicates `T: 'a`", "closed_by": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110593/timeline", "performed_via_github_app": null, "state_reason": "completed"}