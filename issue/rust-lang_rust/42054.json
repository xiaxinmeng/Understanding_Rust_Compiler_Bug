{"url": "https://api.github.com/repos/rust-lang/rust/issues/42054", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42054/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42054/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42054/events", "html_url": "https://github.com/rust-lang/rust/issues/42054", "id": 229315575, "node_id": "MDU6SXNzdWUyMjkzMTU1NzU=", "number": 42054, "title": "Impl for unrelated trait makes type checker a happy camper", "user": {"login": "chrivers", "id": 644439, "node_id": "MDQ6VXNlcjY0NDQzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/644439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrivers", "html_url": "https://github.com/chrivers", "followers_url": "https://api.github.com/users/chrivers/followers", "following_url": "https://api.github.com/users/chrivers/following{/other_user}", "gists_url": "https://api.github.com/users/chrivers/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrivers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrivers/subscriptions", "organizations_url": "https://api.github.com/users/chrivers/orgs", "repos_url": "https://api.github.com/users/chrivers/repos", "events_url": "https://api.github.com/users/chrivers/events{/privacy}", "received_events_url": "https://api.github.com/users/chrivers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-05-17T11:04:58Z", "updated_at": "2017-06-23T15:24:43Z", "closed_at": "2017-06-23T15:24:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been scratching my head over this for a while, and spent a good while condensing it into the smallest possible reproduction:\r\n\r\n```rust\r\n#![feature(specialization)]\r\n\r\ntrait CanEncode { }\r\n\r\nimpl CanEncode for u32 { }\r\n\r\n/*\r\nmod fix {\r\n  impl<'a> super::CanEncode for &'a String         {}\r\n  impl<'a> super::CanEncode for &'a Option<String> {}\r\n}\r\n*/\r\nimpl<T> CanEncode for T where T: IntoIterator, T::Item: CanEncode {}\r\n\r\nfn main() {  }\r\n```\r\n\r\nIf we leave the `fix` {} mod commented, we get this error:\r\n\r\n```\r\nrustc 1.19.0-nightly (75b056812 2017-05-15)\r\nerror[E0119]: conflicting implementations of trait `CanEncode` for type `u32`:\r\n  --> <anon>:27:1\r\n   |\r\n5  | impl CanEncode for u32 { }\r\n   | -------------------------- first implementation here\r\n...\r\n27 | impl<T> CanEncode for T where T: IntoIterator, T::Item: CanEncode {}\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u32`\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nI mean, fair enough, maybe they do conflict, when not taking the trait bounds into account. However, enabling the 2 `fix` impls makes this both compile and (in the upstream project) work just fine.\r\n\r\nI've tried with other types than `u32`:\r\n\r\nType | Result\r\n----- | -----\r\nu8 | conflict\r\nu16 | conflict\r\nu32 | conflict\r\ni32 | conflict\r\nusize | conflict\r\nempty struct | works\r\nempty enum | works\r\nu32 newtype | works\r\nstruct with copy | works(!)\r\n\r\nI'm not sure of the current state of specialization, but from what I've read about the propose lattice resolution, I think this might be related. If the 2 fix impls fills out the \"type hole\", then that explains why a seemingly completely irrelevant impl can fix some other impl.\r\n\r\nIs this a \"real\" bug, or \"just\" a confusing error message? Or have I made some more fundamental error?\r\n\r\nedit: playground example: https://play.rust-lang.org/?gist=cef612dde92315c043a418121198ec7c&version=nightly&backtrace=2", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42054/timeline", "performed_via_github_app": null, "state_reason": "completed"}