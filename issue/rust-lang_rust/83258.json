{"url": "https://api.github.com/repos/rust-lang/rust/issues/83258", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83258/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83258/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83258/events", "html_url": "https://github.com/rust-lang/rust/issues/83258", "id": 834709596, "node_id": "MDU6SXNzdWU4MzQ3MDk1OTY=", "number": 83258, "title": "Writing valid UTF-8 to the Windows terminal using stdout().write() can incorrectly return an error", "user": {"login": "Count-Count", "id": 51271955, "node_id": "MDQ6VXNlcjUxMjcxOTU1", "avatar_url": "https://avatars.githubusercontent.com/u/51271955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Count-Count", "html_url": "https://github.com/Count-Count", "followers_url": "https://api.github.com/users/Count-Count/followers", "following_url": "https://api.github.com/users/Count-Count/following{/other_user}", "gists_url": "https://api.github.com/users/Count-Count/gists{/gist_id}", "starred_url": "https://api.github.com/users/Count-Count/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Count-Count/subscriptions", "organizations_url": "https://api.github.com/users/Count-Count/orgs", "repos_url": "https://api.github.com/users/Count-Count/repos", "events_url": "https://api.github.com/users/Count-Count/events{/privacy}", "received_events_url": "https://api.github.com/users/Count-Count/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 46311113, "node_id": "MDU6TGFiZWw0NjMxMTExMw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-unicode", "name": "A-unicode", "color": "f7e101", "default": false, "description": "Area: unicode related"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-03-18T11:41:17Z", "updated_at": "2021-09-02T05:57:15Z", "closed_at": "2021-09-02T05:57:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse std::io::Write;\r\n\r\nfn standard_write_all<W: std::io::Write>(mut w: W, mut buf: &[u8]) -> Result<(), std::io::Error> {\r\n    while !buf.is_empty() {\r\n        match w.write(buf) {\r\n            Ok(0) => {\r\n                return Err(std::io::Error::new(\r\n                    std::io::ErrorKind::WriteZero,\r\n                    \"failed to write whole buffer\",\r\n                ));\r\n            }\r\n            Ok(n) => buf = &buf[n..],\r\n            Err(ref e) if e.kind() == std::io::ErrorKind::Interrupted => {}\r\n            Err(e) => return Err(e),\r\n        }\r\n    }\r\n    Ok(())\r\n}\r\n\r\nfn main() {\r\n    let poison = \"Text here does not matter.\\n\".to_owned() + \"x\".repeat(1024 - 1).as_str() + \"\ud83d\ude00\";\r\n\r\n    // The special stdout().write_all() impl works.\r\n    std::io::stdout().write_all(poison.as_bytes()).unwrap();\r\n    println!();\r\n    println!();\r\n\r\n    // A standard write_all() implementation fails.\r\n    //\r\n    // 1. First write call\r\n    // The bytes up to the newline are passed through to the console in one write.\r\n    //\r\n    // The next 1023 b'x' bytes and the first byte of \"\ud83d\ude00\" are buffered leading to\r\n    // an incomplete codepoint at the end of the buffer. The buffer is now poisoned\r\n    // meaning that the next write() call will fail even if the missing UTF-8 bytes\r\n    // are supplied.\r\n    //\r\n    // 2. Second write call\r\n    // The buffer is flushed completely on the next call, the console writes 1023 b'x' bytes\r\n    // and is then forced to write the remaining byte from the incomplete UTF-8 sequence.\r\n    standard_write_all(std::io::stdout(), poison.as_bytes()).unwrap();\r\n}\r\n```\r\n\r\nI expected to see this happen: Program does not panic.\r\n\r\nInstead, this happened: Program panics with the error `Windows stdio in console mode does not support writing non-UTF-8 byte sequences`.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.50.0 (cb75ad5db 2021-02-10)\r\nbinary: rustc\r\ncommit-hash: cb75ad5db02783e8b0222fee363c5f63f7e2cf5b\r\ncommit-date: 2021-02-10\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.50.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Custom { kind: InvalidData, error: \"Windows stdio in console mode does not support writing non-UTF-8 byte sequences\" }', src\\main.rs:35:65\r\nstack backtrace:\r\n   0: std::panicking::begin_panic_handler\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b\\/library\\std\\src\\panicking.rs:493\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b\\/library\\core\\src\\panicking.rs:92\r\n   2: core::option::expect_none_failed\r\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b\\/library\\core\\src\\option.rs:1268\r\n   3: core::result::Result<tuple<>, std::io::error::Error>::unwrap<tuple<>,std::io::error::Error>\r\n             at C:\\Users\\hans\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\core\\src\\result.rs:973\r\n   4: termcolorbug::main\r\n             at .\\src\\main.rs:35\r\n   5: core::ops::function::FnOnce::call_once<fn(),tuple<>>\r\n             at C:\\Users\\hans\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\core\\src\\ops\\function.rs:227\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n### Update\r\nTo clarify: This problem occurs with all `Write` trait implementations that don't override the default `Write::write_all()` implementation, e.g. with this simple DelegatingWrite:\r\n```rust\r\nuse std::io::Write;\r\n\r\nstruct DelegatingWrite<W> {\r\n    delegate: W,\r\n}\r\n\r\nimpl<W: Write> DelegatingWrite<W> {\r\n    fn new(delegate: W) -> DelegatingWrite<W> {\r\n        DelegatingWrite { delegate }\r\n    }\r\n}\r\n\r\nimpl<W: Write> Write for DelegatingWrite<W> {\r\n    fn write(&mut self, b: &[u8]) -> std::io::Result<usize> {\r\n        self.delegate.write(b)\r\n    }\r\n\r\n    fn flush(&mut self) -> std::io::Result<()> {\r\n        self.delegate.flush()\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let poison = \"Text here does not matter.\\n\".to_owned() + \"x\".repeat(1024 - 1).as_str() + \"\ud83d\ude00\";\r\n    let mut w = DelegatingWrite::new(std::io::stdout());\r\n    write!(w, \"{}\", poison).unwrap(); // <-- panics\r\n}\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83258/timeline", "performed_via_github_app": null, "state_reason": "completed"}