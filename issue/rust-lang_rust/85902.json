{"url": "https://api.github.com/repos/rust-lang/rust/issues/85902", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85902/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85902/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85902/events", "html_url": "https://github.com/rust-lang/rust/issues/85902", "id": 908543514, "node_id": "MDU6SXNzdWU5MDg1NDM1MTQ=", "number": 85902, "title": "Add a cargo option to generate coverage reports using `-Z instrument-coverage`", "user": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 609101895, "node_id": "MDU6TGFiZWw2MDkxMDE4OTU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-cargo", "name": "T-cargo", "color": "bfd4f2", "default": false, "description": "Relevant to the cargo team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 2483744621, "node_id": "MDU6TGFiZWwyNDgzNzQ0NjIx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-code-coverage", "name": "A-code-coverage", "color": "f7e101", "default": false, "description": "Area: Source-based code coverage (-Cinstrument-coverage)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-06-01T17:45:26Z", "updated_at": "2021-06-04T22:58:06Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The Rust unstable book includes some examples of the workflow for generating LLVM coverage reports using [`-Z instrument-coverage`](https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/instrument-coverage.html).\r\n\r\nGiven the flexibility of this feature, having these detailed examples is useful, but there should be an \"easy button\" for generating coverage reports for the more common use cases. (I have some personal bash scripts to simplify the process during development, for example.) `cargo` can provide a great foundation for cross platform automation of Rust coverage analysis.\r\n\r\nSome loose requirements, off the top of my head, include:\r\n\r\n* Enable coverage analysis of both `cargo run` and `cargo test` options. (Enabling the coverage report workflow will, therefore, probably be a flag option to these commands, versus a separate command, I think.)\r\n* Automatically configure `LLVM_PROFILE_FILE`, with the right filename patterns for filename deconfliction, and a path to a coverage-specific subdirectory of the target directory.\r\n* Automatically delete old `profraw`, `profdata`, and report data, before starting another coverage analysis (unless the user provides a flag option to retain old data).\r\n* Enable all of the features shown in the [unstable book documentation](https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/instrument-coverage.html), including test coverage (for example, if doc tests are included, the workflow should automatically enable `--persist-doctests`, and the workflow should automatically include the right test binaries when running the `llvm-cov` command).\r\n* There should be a way to include `llvm-cov` options in the `cargo` command.\r\n* There should be a default `llvm-cov` option configuration that generates a coverage report with minimal `cargo` flags, and perhaps a few easy flags for other common configurations (for example, generating results as text, with ANSI terminal color highlights or not, or generating HTML, with files saved in the coverage target subdirectory with associated `profraw`/`profdata` files).\r\n* There should be a way to re-run the coverage reports with different options without re-running the binaries/tests.\r\n  - If possible, use timestamps and dependencies, and automatically re-use old results if the program/tests were not re-built by `cargo`\r\n\r\nLonger term:\r\n\r\n* There should be a way to generate reports from multiple binary/test runs, by merging the `profraw` data from multiple executions (being careful not to automatically delete data from prior runs when the user requests this feature).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85902/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85902/timeline", "performed_via_github_app": null, "state_reason": null}