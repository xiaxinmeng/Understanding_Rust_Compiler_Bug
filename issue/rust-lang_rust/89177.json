{"url": "https://api.github.com/repos/rust-lang/rust/issues/89177", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89177/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89177/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89177/events", "html_url": "https://github.com/rust-lang/rust/issues/89177", "id": 1004509640, "node_id": "I_kwDOAAsO6M4735nI", "number": 89177, "title": "Execution continues after stdin read_line when ctrl-c is pressed on Windows", "user": {"login": "arlosi", "id": 704597, "node_id": "MDQ6VXNlcjcwNDU5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/704597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arlosi", "html_url": "https://github.com/arlosi", "followers_url": "https://api.github.com/users/arlosi/followers", "following_url": "https://api.github.com/users/arlosi/following{/other_user}", "gists_url": "https://api.github.com/users/arlosi/gists{/gist_id}", "starred_url": "https://api.github.com/users/arlosi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arlosi/subscriptions", "organizations_url": "https://api.github.com/users/arlosi/orgs", "repos_url": "https://api.github.com/users/arlosi/repos", "events_url": "https://api.github.com/users/arlosi/events{/privacy}", "received_events_url": "https://api.github.com/users/arlosi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-09-22T16:47:01Z", "updated_at": "2021-10-14T19:23:05Z", "closed_at": "2021-10-14T19:23:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When blocking on `read_line` from `stdin`, if I press Ctrl-C, program execution continues past the blocking `read_line` call for a short period before the program is terminated on Windows.\r\n\r\nI tried this code:\r\n\r\n```rust\r\nfn main() -> std::io::Result<()> {\r\n    use std::io::BufRead;\r\n    println!(\"Press Ctrl-C\");\r\n    let mut line = String::new();\r\n    let bytes = std::io::stdin().lock().read_line(&mut line)?;\r\n    println!(\"This should not print if Ctrl-C was pressed. Read {} bytes\", bytes);\r\n    Ok(())\r\n}\r\n```\r\n\r\n**I expected to see this happen:** Program should **exit** after pressing Ctrl-C without printing the second message.\r\n**Instead, this happened:** Program prints `This should not print if Ctrl-C was pressed. Read 0 bytes` after pressing Ctrl-C. \r\n\r\nThis only occurs on Windows. *nix platforms exit without printing the second message.\r\n\r\nSince program execution continues after ctrl-c, unexpected results occur. For example, running `cargo login`, then pressing `ctrl-c` instead of entering a token, `cargo` will overwrite the saved token with `\"\"` on Windows.\r\n\r\n*nix platforms continue blocking in `read_line` when ctrl-c is pressed. Including if a handler for ctrl-c is set up.\r\n\r\n### Why it's happening\r\n`read_line` calls the Windows `ReadConsoleW` API. That API returns *success* with an empty buffer for Ctrl-C (and Ctrl-Break). `read_line` then also returns `Ok`.  In parallel, Windows uses a separate thread that raises an exception for the ctrl-c event that terminates the process. This leads to a short window of time where program execution continues after ctrl-c is pressed.\r\n\r\n### Potential solutions\r\nEven though `ReadConsoleW` returns success, it also sets LastError to `ERROR_OPERATION_ABORTED` for this case, so we *can* detect this case.\r\n\r\nThe Rust standard library calls `ReadConsoleW` here\r\nhttps://github.com/rust-lang/rust/blob/cfff31bc833070a00578bd6178160aeed56f28ba/library/std/src/sys/windows/stdio.rs#L295\r\n\r\n#### Re-try the call immediately\r\nWe could re-try the call to `ReadConsoleW` immediately for this specific case by adding a check after the `ReadConsoleW` call.\r\n```rust\r\n    loop {\r\n        cvt(unsafe {\r\n            c::SetLastError(0);\r\n            c::ReadConsoleW(\r\n                handle,\r\n                buf.as_mut_ptr() as c::LPVOID,\r\n                buf.len() as u32,\r\n                &mut amount,\r\n                &mut input_control as c::PCONSOLE_READCONSOLE_CONTROL,\r\n            )\r\n        })?;\r\n\r\n        // ReadConsoleW returns success with ERROR_OPERATION_ABORTED for Ctrl-C or Ctrl-Break.\r\n        // Explicitly check for that case here and try again.\r\n        if amount == 0 {\r\n            if unsafe { c::GetLastError() } == c::ERROR_OPERATION_ABORTED {\r\n                continue;\r\n            }\r\n        }\r\n        break;\r\n    }\r\n```\r\n\r\n#### Return an error\r\nAlternately, after the call to `ReadConsoleW`, we could add a check to detect this error and propagate it:\r\n```rust\r\n    if amount == 0 {\r\n        let err = crate::io::Error::last_os_error();\r\n        if err.raw_os_error() == Some(c::ERROR_OPERATION_ABORTED as i32) {\r\n            return Err(err);\r\n        }\r\n    }\r\n```\r\nReturning an error still differs from *nix, in that it raises an error instead of continuing to block.\r\n\r\n#### Return an error then retry\r\nWe could return the error as described above, and change the mapping of `ERROR_OPERATION_ABORTED` from `ErrorKind::TimedOut` to `ErrorKind::Interrupted`. \r\nhttps://github.com/rust-lang/rust/blob/cfff31bc833070a00578bd6178160aeed56f28ba/library/std/src/sys/windows/mod.rs#L79\r\n\r\n`ErrorKind::Interrupted` would then re-tried the `BufRead` infrastructure.\r\n\r\n#### Do nothing\r\nMaybe this is expected behavior and we want a difference between Windows and *nix here.\r\n\r\n### Meta\r\nOccurs in both stable and nightly.\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.57.0-nightly (497ee321a 2021-09-09)\r\nbinary: rustc\r\ncommit-hash: 497ee321af3b8496eaccd7af7b437f18bab81abf\r\ncommit-date: 2021-09-09\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.57.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89177/timeline", "performed_via_github_app": null, "state_reason": "completed"}