{"url": "https://api.github.com/repos/rust-lang/rust/issues/101532", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101532/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101532/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101532/events", "html_url": "https://github.com/rust-lang/rust/issues/101532", "id": 1364622724, "node_id": "I_kwDOAAsO6M5RVn2E", "number": 101532, "title": "Most dead code warnings don't work inside `const _`", "user": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-09-07T12:55:20Z", "updated_at": "2022-09-07T14:57:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n\r\n```rust\r\nconst _: () = {\r\n    let a: ();\r\n\r\n    struct B {}\r\n\r\n    enum C {}\r\n\r\n    fn d() {}\r\n\r\n    const E: () = {};\r\n};\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nwarning: unused variable: `a`\r\n --> <source>:2:9\r\n  |\r\n2 |     let a: ();\r\n  |         ^ help: if this is intentional, prefix it with an underscore: `_a`\r\n  |\r\n  = note: `#[warn(unused_variables)]` on by default\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\nwarning: unused variable: `a`\r\n --> <source>:2:9\r\n  |\r\n2 |     let a: ();\r\n  |         ^ help: if this is intentional, prefix it with an underscore: `_a`\r\n  |\r\n  = note: `#[warn(unused_variables)]` on by default\r\n\r\nwarning: struct `B` is never constructed\r\n --> <source>:4:12\r\n  |\r\n4 |     struct B {}\r\n  |            ^\r\n  |\r\n  = note: `#[warn(dead_code)]` on by default\r\n\r\nwarning: enum `C` is never used\r\n --> <source>:6:10\r\n  |\r\n6 |     enum C {}\r\n  |          ^\r\n\r\nwarning: function `d` is never used\r\n --> <source>:8:8\r\n  |\r\n8 |     fn d() {}\r\n  |        ^\r\n\r\nwarning: constant `E` is never used\r\n  --> <source>:10:5\r\n   |\r\n10 |     const E: () = {};\r\n   |     ^^^^^^^^^^^^^^^^^\r\n\r\nwarning: 5 warnings emitted\r\n```\r\n\r\nWhat's surprising is that adding `pub` changes the output to the expected one, even though `pub` doesn't make any meaning on `const _: ()`:\r\n\r\n```rust\r\npub const _: () = {\r\n    let a: ();\r\n\r\n    struct B {}\r\n\r\n    enum C {}\r\n\r\n    fn d() {}\r\n\r\n    const E: () = {};\r\n};\r\n```\r\n\r\nIt's also interesting that the logic matches what happens with functions. For example, in:\r\n\r\n```rust\r\nfn foo() {\r\n    let a: ();\r\n\r\n    struct B {}\r\n\r\n    enum C {}\r\n\r\n    fn d() {}\r\n\r\n    const E: () = {};\r\n}\r\n```\r\n\r\nthe function `foo` itself and also only the variable `a` are reported as unused, while the rest of the items don't get a warning:\r\n\r\n```\r\nwarning: unused variable: `a`\r\n --> <source>:2:9\r\n  |\r\n2 |     let a: ();\r\n  |         ^ help: if this is intentional, prefix it with an underscore: `_a`\r\n  |\r\n  = note: `#[warn(unused_variables)]` on by default\r\n\r\nwarning: function `foo` is never used\r\n --> <source>:1:4\r\n  |\r\n1 | fn foo() {\r\n  |    ^^^\r\n  |\r\n  = note: `#[warn(dead_code)]` on by default\r\n\r\nwarning: 2 warnings emitted\r\n```\r\n\r\nHowever, once `foo` is made public, all the items get warnings:\r\n\r\n```\r\nwarning: unused variable: `a`\r\n --> <source>:2:9\r\n  |\r\n2 |     let a: ();\r\n  |         ^ help: if this is intentional, prefix it with an underscore: `_a`\r\n  |\r\n  = note: `#[warn(unused_variables)]` on by default\r\n\r\nwarning: struct `B` is never constructed\r\n --> <source>:4:12\r\n  |\r\n4 |     struct B {}\r\n  |            ^\r\n  |\r\n  = note: `#[warn(dead_code)]` on by default\r\n\r\nwarning: enum `C` is never used\r\n --> <source>:6:10\r\n  |\r\n6 |     enum C {}\r\n  |          ^\r\n\r\nwarning: function `d` is never used\r\n --> <source>:8:8\r\n  |\r\n8 |     fn d() {}\r\n  |        ^\r\n\r\nwarning: constant `E` is never used\r\n  --> <source>:10:5\r\n   |\r\n10 |     const E: () = {};\r\n   |     ^^^^^^^^^^^^^^^^^\r\n\r\nwarning: 5 warnings emitted\r\n```\r\n\r\nEither way, `const _` should have different treatment due to being anonymous, but it's still a bit surprising that only `let` variables get inside both `const _` and `fn foo`.\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101532/timeline", "performed_via_github_app": null, "state_reason": null}