{"url": "https://api.github.com/repos/rust-lang/rust/issues/68467", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68467/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68467/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68467/events", "html_url": "https://github.com/rust-lang/rust/issues/68467", "id": 553744282, "node_id": "MDU6SXNzdWU1NTM3NDQyODI=", "number": 68467, "title": "Code generation quality for a recursive function", "user": {"login": "lovasoa", "id": 552629, "node_id": "MDQ6VXNlcjU1MjYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/552629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovasoa", "html_url": "https://github.com/lovasoa", "followers_url": "https://api.github.com/users/lovasoa/followers", "following_url": "https://api.github.com/users/lovasoa/following{/other_user}", "gists_url": "https://api.github.com/users/lovasoa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovasoa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovasoa/subscriptions", "organizations_url": "https://api.github.com/users/lovasoa/orgs", "repos_url": "https://api.github.com/users/lovasoa/repos", "events_url": "https://api.github.com/users/lovasoa/events{/privacy}", "received_events_url": "https://api.github.com/users/lovasoa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 632838966, "node_id": "MDU6TGFiZWw2MzI4Mzg5NjY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-slice-patterns", "name": "A-slice-patterns", "color": "f7e101", "default": false, "description": "Area: slice patterns, https://github.com/rust-lang/rust/issues/23121"}, {"id": 884691893, "node_id": "MDU6TGFiZWw4ODQ2OTE4OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-codegen", "name": "WG-codegen", "color": "c2e0c6", "default": false, "description": "Working Group: Codegen (Runtime perf and code size)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-22T19:25:16Z", "updated_at": "2020-03-08T16:40:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After reading [this blog post](https://thomashartmann.dev/blog/feature(slice_patterns)/) recently, I was very happily surprised with the quality of the code generation for the following function : \r\n\r\n```rust\r\nfn middle(xs: &[u32]) -> Option<&u32> {\r\n    match xs {\r\n        [_, inner @ .., _] => middle(inner),\r\n        [x] => Some(x),\r\n        [] => None,\r\n    }\r\n}\r\n```\r\n\r\n```asm\r\nexample::middle:\r\n        cmp     rsi, 2\r\n        jb      .LBB0_2\r\n        add     rsi, -2\r\n        mov     rax, rsi\r\n        and     rax, -2\r\n        lea     rdi, [rdi + 2*rax]\r\n        add     rdi, 4\r\n        and     esi, 1\r\n.LBB0_2:\r\n        xor     eax, eax\r\n        cmp     rsi, 1\r\n        cmove   rax, rdi\r\n        ret\r\n```\r\n\r\nIt is amazing what the compiler is able to achieve !\r\n\r\nBut then, I tried this very slight variation : \r\n\r\n```rust\r\npub fn middle(xs: &[u32]) -> Option<u32> {\r\n    match xs {\r\n        [_, inner @ .., _] => middle(inner),\r\n        [x] => Some(*x),\r\n        [] => None,\r\n    }\r\n}\r\n```\r\n\r\n(the only difference is that we are returning an `u32` instead of an `&u32`)\r\n\r\nAnd the generated code changes dramatically:\r\n\r\n```asm\r\nexample::middle:\r\n        push    rax\r\n        cmp     rsi, 1\r\n        jbe     .LBB0_1\r\n        add     rdi, 4\r\n        add     rsi, -2\r\n        call    qword ptr [rip + example::middle@GOTPCREL]\r\n        pop     rcx\r\n        ret\r\n.LBB0_1:\r\n        cmp     rsi, 1\r\n        jne     .LBB0_2\r\n        mov     edx, dword ptr [rdi]\r\n        mov     eax, 1\r\n        pop     rcx\r\n        ret\r\n.LBB0_2:\r\n        xor     eax, eax\r\n        pop     rcx\r\n        ret\r\n``` \r\n\r\nIs there something making the optimization harder to apply in the second case, or is it a bug somewhere in the compiler ? ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68467/timeline", "performed_via_github_app": null, "state_reason": null}