{"url": "https://api.github.com/repos/rust-lang/rust/issues/79603", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79603/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79603/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79603/events", "html_url": "https://github.com/rust-lang/rust/issues/79603", "id": 754485853, "node_id": "MDU6SXNzdWU3NTQ0ODU4NTM=", "number": 79603, "title": "std::alloc::Global.shrink returns an error if realloc returns null", "user": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-12-01T15:18:47Z", "updated_at": "2020-12-05T01:59:16Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Some allocators do not (wish to) permit reducing the size of a large allocation below a certain threshold. This leaves the GlobalAlloc::realloc implementation with two choices to handle such shrink operations:\r\n\r\n- Create a new, smaller allocation, copy the contents from the large to the small allocation, free the large allocation\r\n- Return a null pointer to indicate that the allocation has not changed\r\n\r\nThe second choice corresponds to the allocator behavior. Unfortunately std::alloc::Global.shrink translates this into an error instead of returning the old pointer: https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library/alloc/src/alloc.rs#L289-L290\r\n\r\nDownstream (e.g. RawVec) aborts the process if this happens even though there is still plenty of memory available.\r\n\r\nUntil GlobalAlloc has been completely replaced by AllocRef, I believe that it would be better if std::alloc::Global.shrink handled null pointer return values of the global allocator by returning the original allocation.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79603/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79603/timeline", "performed_via_github_app": null, "state_reason": null}