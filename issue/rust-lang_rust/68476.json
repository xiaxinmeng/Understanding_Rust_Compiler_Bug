{"url": "https://api.github.com/repos/rust-lang/rust/issues/68476", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68476/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68476/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68476/events", "html_url": "https://github.com/rust-lang/rust/issues/68476", "id": 553893007, "node_id": "MDU6SXNzdWU1NTM4OTMwMDc=", "number": 68476, "title": "Diagnostics for mismatched generic types for enum constructors accessed via Self could show where the mismatch occurs", "user": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-23T01:45:27Z", "updated_at": "2020-04-08T01:06:44Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "In this code, I used `Self::VariantName` to construct a new enum. However, since `Self` is treated as `Wrapper<T>`, I get an error when I try to populate `Self::There` / `Wrapper<T>::There` with a value of type `U`:\r\n\r\n```rust\r\nenum Wrapper<T> {\r\n    There(T),\r\n    NotThere,\r\n}\r\n\r\nimpl<T> Wrapper<T> {\r\n    fn map<U>(self, f: impl FnOnce(T) -> U) -> Wrapper<U> {\r\n        match self {\r\n            Self::There(v) => Self::There(f(v)),\r\n            Self::NotThere => Self::NotThere,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n([Playground](https://play.integer32.com/?version=stable&mode=debug&edition=2018&gist=d2020ec808cbb3a65df21fb04012ac22))\r\n\r\nErrors:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:9:43\r\n  |\r\n9 |             Self::There(v) => Self::There(f(v)),\r\n  |                                           ^^^^ expected type parameter, found a different type parameter\r\n  |\r\n  = note: expected type `T`\r\n             found type `U`\r\n  = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\r\n  = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:9:31\r\n  |\r\n7 |     fn map<U>(self, f: impl FnOnce(T) -> U) -> Wrapper<U> {\r\n  |                                                ---------- expected `Wrapper<U>` because of return type\r\n8 |         match self {\r\n9 |             Self::There(v) => Self::There(f(v)),\r\n  |                               ^^^^^^^^^^^^^^^^^ expected type parameter, found a different type parameter\r\n  |\r\n  = note: expected type `Wrapper<U>`\r\n             found type `Wrapper<T>`\r\n  = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\r\n  = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\r\n```\r\n\r\nThis threw me for a fair number of minutes, mostly spent saying \"no, that function `f` takes a `T` and returns a `U`, not the other way around\". \r\n\r\nTechnically, the compiler *is* pointing to the entire call of `f` which should have tipped me off to realizing that it's the constructor call that was an issue.\r\n\r\nInterestingly, the same problem doesn't occur for structs:\r\n\r\n```rust\r\nstruct Wrapper<T>(T);\r\n\r\nimpl<T> Wrapper<T> {\r\n    fn map<U>(self, f: impl FnOnce(T) -> U) -> Wrapper<U> {\r\n        Self(f(self.0))\r\n    }\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68476/timeline", "performed_via_github_app": null, "state_reason": null}