{"url": "https://api.github.com/repos/rust-lang/rust/issues/33685", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/33685/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/33685/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/33685/events", "html_url": "https://github.com/rust-lang/rust/issues/33685", "id": 155246805, "node_id": "MDU6SXNzdWUxNTUyNDY4MDU=", "number": 33685, "title": "`hr_lifetime_in_assoc_type` future-compatibility warnings", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-05-17T12:26:58Z", "updated_at": "2023-02-26T12:44:27Z", "closed_at": "2017-04-02T10:54:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is the **summary issue** for the `hr_lifetime_in_assoc_type` future-compatibility warning and other related errors. The goal of this page is describe why this change was made and how you can fix code that is affected by it. It also provides a place to ask questions or register a complaint if you feel the change should not be made. For more information on the policy around future-compatibility warnings, see our [breaking change policy guidelines][].\r\n\r\n#### What is the warning for?\r\n\r\nThe warning is issued in two cases. First, if you have a where-clause where a higher-ranked lifetime appears **only** in the associated type. This most commonly occurs when the lifetime appears in the return type for one of the closure traits:\r\n\r\n``` rust\r\nwhere F: for<'a> Fn() -> &'a u32\r\n//                        ^^ this one\r\n```\r\n\r\nBut could also occur in other associated type bindings:\r\n\r\n``` rust\r\nwhere T: for<'a> Iterator<Item=&'a u32>\r\n//                              ^^ this one\r\n```\r\n\r\nThe second situation is when you have a `fn` type with a lifetime that appears only in the return type:\r\n\r\n``` rust\r\nlet x: for<'a> fn() -> &'a i32\r\n//                      ^^ this one\r\n```\r\n\r\n### How to fix\r\n\r\nNote that it is perfectly fine for a higher-ranked lifetime to appear in an associated type or function return type **if it also appears in the trait inputs or function arguments**:\r\n\r\n``` rust\r\nwhere F: for<'a> Fn(&'a u32) -> &'a u32 // OK!\r\n//                   ^^ appears in trait input types here\r\n\r\nwhere for<'a> &'a T: Iterator<Item=&'a u32> // OK!\r\n//             ^^ appears in trait input types here\r\n\r\nlet x: for<'a> fn(&'a i32) -> &'a i32\r\n//                 ^^ appears in function arguments here\r\n```\r\n\r\nIn cases where the lifetime appears only in the return type, it is also generally better to use `'static`:\r\n\r\n``` rust\r\n// so e.g. this:\r\nwhere F: for<'a> Fn() -> &'a u32\r\n\r\n// becomes this:\r\nwhere F: Fn() -> &'static u32\r\n```\r\n\r\n#### More details and future errors\r\n\r\nThese constructs are being rejected as part of the fix for issue rust-lang/rust#32330. This is a soundness bug that concerns cases like these. In general, all higher-ranked lifetimes that are used in the value of an associated type (and in this case, the function return type is an associated type) must also appear in the trait's input types. This constraint is already enforced for impls, but enforcement was overlooked for where-clauses.\r\n\r\nThese sorts of where-clauses and types are not only ill-formed, they are useless. For example, now that #32330 is fixed, there are no types that could satisfy such a where-clause, nor are there any functions with a type like `for<'a> fn() -> &'a i32` (see next section for more details).\r\n\r\nOnce #32330 is fully fixed, there are some cases of code that will yield errors which will not currently receive warnings. The crux of the problem concerns lifetime parameters that only appear in the return type of a fn declaration -- these are changing to no longer be considered \"higher-ranked\" (or \"late-bound\"). This change is usually harmless, but it can trigger compilation errors of various kinds. For engineering reasons, there are some cases where it was not possible to issue warnings, though we will try to cause the error message to direct people to this issue.\r\n\r\nHere is an example of an affected function:\r\n\r\n``` rust\r\nfn foo<'a>() -> &'a i32 { }\r\n//               ^^ will no be longer higher-ranked\r\n```\r\n\r\nMerely calling this function should work as before. But assigning it to a fn pointer variable will trigger an error, depending on the type of that variable:\r\n\r\n``` rust\r\nfn main() {\r\n    let f: for<'a> fn() -> &'a i32 = foo;\r\n    //                      ^^ note that we will now issue a warning for this type, as well.\r\n}\r\n```\r\n\r\nAnother, more subtle, error can occur when a function is stored into a variable and then invoked multiple times:\r\n\r\n```\r\nfn bar<'b, 'c>() -> (&'b i32, 'c i32) {\r\n    let f = foo;\r\n    (f(), f()) // <-- will be an error\r\n    // but note that (foo(), foo()) works\r\n}\r\n```\r\n\r\nEssentially, the change is that each time you reference `foo` (directly!), there is now a single lifetime assigned for its parameter `'a`, no matter how many times you call it. In cases like `bar` above, we need to assign distinct references to each call, so we have to reference `foo` twice.\r\n\r\n#### Related bugs\r\n\r\nAlso related is https://github.com/rust-lang/rust/issues/33684, which can cause these warnings to be issued _more_ frequently than one might expect. In particular, due to #33684, the compiler fails to recognize certain equivalences around lifetime parameters. For example, this function:\r\n\r\n```\r\nfn foo<'a>(&u32) -> &'a u32\r\n```\r\n\r\nprobably ought to be considered equivalent to this function:\r\n\r\n```\r\nfn foo(&u32) -> &'static u32\r\n```\r\n\r\nand both of them ought to be usable in a context where `for<'a> fn(&'a u32) -> &'a u32` is required. But because of #33684, only the version that explicitly uses `'static` is considered to satisfy the higher-ranked type.\r\n#### When will this warning become a hard error?\r\n\r\nThe typical process is as follows: at the beginning of each 6-week release cycle, the Rust compiler team will review the set of outstanding future compatibility warnings and nominate some of them for **Final Comment Period**. Toward the end of the cycle, we will review any comments and make a final determination whether to convert the warning into a hard error or remove it entirely.\r\n", "closed_by": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/33685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/33685/timeline", "performed_via_github_app": null, "state_reason": "completed"}