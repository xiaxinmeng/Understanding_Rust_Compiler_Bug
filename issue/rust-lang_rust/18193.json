{"url": "https://api.github.com/repos/rust-lang/rust/issues/18193", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/18193/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/18193/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/18193/events", "html_url": "https://github.com/rust-lang/rust/issues/18193", "id": 46307864, "node_id": "MDU6SXNzdWU0NjMwNzg2NA==", "number": 18193, "title": "Iterator methods produce slow code", "user": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-10-20T18:16:21Z", "updated_at": "2015-02-19T21:27:57Z", "closed_at": "2015-02-19T21:27:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following benchmark:\n\n``` rust\n#![feature(asm)]\n\nextern crate test;\n\nuse test::{Bencher};\n\n#[inline(never)]\nfn gen() -> Vec<u8> {\n    Vec::from_elem(1024 * 65, 0)\n}\n\n#[bench]\nfn position(b: &mut Bencher) {\n    let v = gen();\n    b.iter(|| {\n        test::black_box(v.as_slice().iter().position(|&c| c == 1));\n    });\n}\n\n#[bench]\nfn iter(b: &mut Bencher) {\n    let v = gen();\n    b.iter(|| {\n        let mut res = None;\n        let mut i = 0u;\n        for &b in v.as_slice().iter() {\n            if b == 1 {\n                res = Some(i);\n                break;\n            }\n            i += 1;\n        }\n        test::black_box(res);\n    });\n}\n\n#[bench]\nfn enumerate(b: &mut Bencher) {\n    let v = gen();\n    b.iter(|| {\n        let mut res = None;\n        for (i, &b) in v.as_slice().iter().enumerate() {\n            if b == 1 {\n                res = Some(i);\n                break;\n            }\n        }\n        test::black_box(res);\n    });\n}\n\n#[bench]\nfn _range(b: &mut Bencher) {\n    let v = gen();\n    b.iter(|| {\n        let mut res = None;\n        for i in range(0, v.len()) {\n            if v[i] == 1 {\n                res = Some(i);\n                break;\n            }\n        }\n        test::black_box(res);\n    });\n}\n\n#[bench]\nfn assembly(b: &mut Bencher) {\n    let v = gen();\n    b.iter(|| {\n        unsafe {\n            let mut start = v.as_ptr();\n            let end = start.offset(v.len() as int);\n            asm!(\"\n                dec $0\n                .align 16, 0x90\n            AGAIN:\n                inc $0\n                cmp $0, $1\n                je EXIT\n                cmpb $$1, ($0)\n                jne AGAIN\n            EXIT:\n                \" : \"+r\"(start) : \"r\"(end));\n            if start < end {\n                test::black_box(Some(start as uint - v.as_ptr() as uint));\n            } else {\n                test::black_box(None::<u8>);\n            }\n        }\n    });\n}\n```\n\nWhich produces the following output:\n\ntest _range    ... bench:     65200 ns/iter (+/- 1033)\ntest assembly  ... bench:     **60802** ns/iter (+/- 248)\ntest enumerate ... bench:     64441 ns/iter (+/- 566)\ntest iter      ... bench:     91170 ns/iter (+/- 465)\ntest position  ... bench:     **91112** ns/iter (+/- 384)\n\n`position` is the correct abstraction for this but its code is 50% slower than the naive assembly implementation and 40% slower than `enumerate`.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/18193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/18193/timeline", "performed_via_github_app": null, "state_reason": "completed"}