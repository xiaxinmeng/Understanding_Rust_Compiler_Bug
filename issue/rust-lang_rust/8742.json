{"url": "https://api.github.com/repos/rust-lang/rust/issues/8742", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/8742/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/8742/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/8742/events", "html_url": "https://github.com/rust-lang/rust/issues/8742", "id": 18515820, "node_id": "MDU6SXNzdWUxODUxNTgyMA==", "number": 8742, "title": "Hazards on uint overflow in std::vec", "user": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-08-25T03:15:06Z", "updated_at": "2013-09-17T04:10:52Z", "closed_at": "2013-09-17T04:10:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "std::vec does not check for overflow properly, and it should be possible to crash Rust where uint overflow can be triggered in reserve logic (at least in 32-bit Rust).\n- `.reserve(n)` must allocate `n` elements, or `fail!()` (or controlled OOM abort in the runtime/allocator); I think this is ok today.\n- `.reserve_at_least(n)` must allocate at least `n` elements or `fail!()`. This is buggy today since sufficiently large `n` will round \"up\" to `0`.\n- Must check for overflow when computing new input to `.reserve` or `.reverse_at_least`\n- Instances where we have possibility of overflow, then call to reserve method, then follows unsafe code assuming successful allocation:\n  - https://github.com/mozilla/rust/blob/2690b513506dad53d0b86b20f8b73bc420dfb3a2/src/libstd/vec.rs#L1349\n  - https://github.com/mozilla/rust/blob/2690b513506dad53d0b86b20f8b73bc420dfb3a2/src/libstd/vec.rs#L1358\n  - https://github.com/mozilla/rust/blob/2690b513506dad53d0b86b20f8b73bc420dfb3a2/src/libstd/vec.rs#L1403\n- Knock-off instances of the same problem in `str`\n  - https://github.com/mozilla/rust/blob/2690b513506dad53d0b86b20f8b73bc420dfb3a2/src/libstd/str.rs#L156\n  - https://github.com/mozilla/rust/blob/2690b513506dad53d0b86b20f8b73bc420dfb3a2/src/libstd/str.rs#L186\n  - https://github.com/mozilla/rust/blob/2690b513506dad53d0b86b20f8b73bc420dfb3a2/src/libstd/str.rs#L1021\n  - https://github.com/mozilla/rust/blob/2690b513506dad53d0b86b20f8b73bc420dfb3a2/src/libstd/str.rs#L2127\n  - https://github.com/mozilla/rust/blob/2690b513506dad53d0b86b20f8b73bc420dfb3a2/src/libstd/str.rs#L2145\n  - https://github.com/mozilla/rust/blob/2690b513506dad53d0b86b20f8b73bc420dfb3a2/src/libstd/str.rs#L2162\n\nverdict: if you `unsafe {}`, check for overflow.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/8742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/8742/timeline", "performed_via_github_app": null, "state_reason": "completed"}