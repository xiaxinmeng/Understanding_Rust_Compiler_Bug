{"url": "https://api.github.com/repos/rust-lang/rust/issues/59865", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59865/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59865/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59865/events", "html_url": "https://github.com/rust-lang/rust/issues/59865", "id": 431779161, "node_id": "MDU6SXNzdWU0MzE3NzkxNjE=", "number": 59865, "title": "lifetime error mentions implemented trait instead of the associated type and the mismatched type.", "user": {"login": "rodrimati1992", "id": 18036327, "node_id": "MDQ6VXNlcjE4MDM2MzI3", "avatar_url": "https://avatars.githubusercontent.com/u/18036327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodrimati1992", "html_url": "https://github.com/rodrimati1992", "followers_url": "https://api.github.com/users/rodrimati1992/followers", "following_url": "https://api.github.com/users/rodrimati1992/following{/other_user}", "gists_url": "https://api.github.com/users/rodrimati1992/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodrimati1992/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodrimati1992/subscriptions", "organizations_url": "https://api.github.com/users/rodrimati1992/orgs", "repos_url": "https://api.github.com/users/rodrimati1992/repos", "events_url": "https://api.github.com/users/rodrimati1992/events{/privacy}", "received_events_url": "https://api.github.com/users/rodrimati1992/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-11T00:36:50Z", "updated_at": "2022-12-29T22:12:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In [this reddit thread](https://www.reddit.com/r/rust/comments/bbswe6/confusing_error_message_cannot_infer_lifetime/) a user commented on their confusion with an error message.\r\n\r\nThe problem is that the lifetime error for this code mentions `Iterator` twice in the error message instead the types whose lifetimes don't match.\r\n\r\nThe code that triggers the bug:\r\n```\r\nuse std::marker::PhantomData;\r\n\r\nstruct AnIterator<'a> {\r\n    first: String,\r\n    _marker:PhantomData<&'a str>\r\n}\r\n\r\nimpl<'a> Iterator for AnIterator<'a> {\r\n    type Item = &'a str;\r\n\r\n    fn next<'b>(&'b mut self) -> Option<Self::Item> {\r\n        Some(self.first.as_str())\r\n    }\r\n}\r\n\r\n```\r\n\r\nThe error message:\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\r\n  --> src/lib.rs:12:25\r\n   |\r\n12 |         Some(self.first.as_str())\r\n   |                         ^^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the lifetime 'b as defined on the method body at 11:13...\r\n  --> src/lib.rs:11:13\r\n   |\r\n11 |     fn next<'b>(&'b mut self) -> Option<Self::Item> {\r\n   |             ^^\r\nnote: ...so that reference does not outlive borrowed content\r\n  --> src/lib.rs:12:14\r\n   |\r\n12 |         Some(self.first.as_str())\r\n   |              ^^^^^^^^^^\r\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 8:6...\r\n  --> src/lib.rs:8:6\r\n   |\r\n8  | impl<'a> Iterator for AnIterator<'a> {\r\n   |      ^^\r\n   = note: ...so that the types are compatible:\r\n           expected std::iter::Iterator\r\n              found std::iter::Iterator\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0495`.\r\nerror: Could not compile `playground`.\r\n\r\n```\r\nHere in the last note,instead of saying `expected std::iter::Iterator` `found std::iter::Iterator`,\r\nit should be `expected &'a str` `found &'b str`.\r\n\r\nIt prints the correct error message if I change ` ->Option<Self::Item>` to `->Option<&'a str>`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59865/timeline", "performed_via_github_app": null, "state_reason": null}