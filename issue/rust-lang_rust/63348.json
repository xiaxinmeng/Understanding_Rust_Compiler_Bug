{"url": "https://api.github.com/repos/rust-lang/rust/issues/63348", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63348/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63348/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63348/events", "html_url": "https://github.com/rust-lang/rust/issues/63348", "id": 477852508, "node_id": "MDU6SXNzdWU0Nzc4NTI1MDg=", "number": 63348, "title": "Rust with [no_std] & CustomAllocator -> rust_oom either undefined in link stage or already defined in compile stage :/", "user": {"login": "2ndTaleStudio", "id": 43264484, "node_id": "MDQ6VXNlcjQzMjY0NDg0", "avatar_url": "https://avatars.githubusercontent.com/u/43264484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/2ndTaleStudio", "html_url": "https://github.com/2ndTaleStudio", "followers_url": "https://api.github.com/users/2ndTaleStudio/followers", "following_url": "https://api.github.com/users/2ndTaleStudio/following{/other_user}", "gists_url": "https://api.github.com/users/2ndTaleStudio/gists{/gist_id}", "starred_url": "https://api.github.com/users/2ndTaleStudio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/2ndTaleStudio/subscriptions", "organizations_url": "https://api.github.com/users/2ndTaleStudio/orgs", "repos_url": "https://api.github.com/users/2ndTaleStudio/repos", "events_url": "https://api.github.com/users/2ndTaleStudio/events{/privacy}", "received_events_url": "https://api.github.com/users/2ndTaleStudio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4434124801, "node_id": "LA_kwDOAAsO6M8AAAABCEtgAQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-bare-metal", "name": "O-bare-metal", "color": "6e6ec0", "default": false, "description": "Target: Rust without an operating system"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-07T10:49:06Z", "updated_at": "2022-08-17T06:53:39Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\ni'm a bit new to rust and writing a library for embedded Raspberry Pi bare metal programming. I'm completely using ``#![no_std]`` in all of my crates. However, at a certain point functions of the ``alloc`` crate are needed. So I came accross the option to implement a custom ``GlobalAllocator`` as per the doc: (https://doc.rust-lang.org/core/alloc/trait.GlobalAlloc.html).\r\n\r\nHowever, when compiling this the crate also requires an ``alloc_error_handler`` present like so:\r\n```\r\n#![no_std]\r\n#![feature(alloc_error_handler)]\r\n\r\n#[global_allocator]\r\nstatic ALLOCATOR: RusPiRoAllocator = RusPiRoAllocator;\r\n[...] here comes the implementation of the allocator [...]\r\n#[alloc_error_handler]\r\nfn alloc_error_handler(_: Layout) -> ! {\r\n    // TODO: how to handle memory allocation errors?\r\n    loop { }\r\n}\r\n```\r\nHowever, doing so compilation works fine, but using this crate in an actual binary to be build as a dependency lead to the linker error ``undefined reference to 'rust_oom'``.\r\n\r\nSo well I just put this into the code as well:\r\n```\r\n#[alloc_error_handler]\r\nfn alloc_error_handler(_: Layout) -> ! {\r\n    // TODO: how to handle memory allocation errors?\r\n    loop { }\r\n}\r\n\r\n#[no_mangle]\r\nfn rust_oom() -> ! {\r\n    // well, currently there is nothing we could do on out-of-memory other than halt the core\r\n    loop { }\r\n}\r\n```\r\nBUT, doing so the compiler complains that the function ``rust_oom`` has already being defined. So for whatever reason the compiler seem to optimize the ``rust_oom`` function away before linking. As a workaround I put the ``rust_oom`` function into a separate crate the allocator crate depends on. (you can find the whole code here: [ruspiro-allocator](https://github.com/RusPiRo/ruspiro-allocator/).\r\n\r\nWith this workaround in place the building of the binary works fine as long as the ``ruspiro-allocator`` crate is a direct dependency of it. I would rather like to bundle other crates of mine into a new crate that makes it easier to consume and may need only one dependency in the binary to be created with some feature gates but not many...\r\n\r\nSo I created a crate, lets call it ``kernel-crate`` that represents the final binary to be build. This crate has a dependency to a ``library-crate`` which depends on ``allocator-crate``.\r\nIn this scenario the linker will again complain that the reference to ``rust_oom`` is undefined. So somewhere down the route the function seem to be optimized away again...\r\nBut if ``kernel-crate`` directly depends on ``allocator-crate`` everything works fine....\r\n\r\nI would appreciate if someone could shed a light on the issue and how to solve it properly.\r\n\r\nBtw. I'm building for the target ``armv7-unknown-linux-gnueabihf``, cross compiling from a windows host machine with cargo version:\r\n```\r\ncargo 1.38.0-nightly (677a180f4 2019-07-08)\r\n```\r\n\r\nAny hint would be much appreciated...\r\nThanks in advance. ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63348/timeline", "performed_via_github_app": null, "state_reason": null}