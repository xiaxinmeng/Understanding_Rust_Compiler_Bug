{"url": "https://api.github.com/repos/rust-lang/rust/issues/17899", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/17899/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/17899/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/17899/events", "html_url": "https://github.com/rust-lang/rust/issues/17899", "id": 45425957, "node_id": "MDU6SXNzdWU0NTQyNTk1Nw==", "number": 17899, "title": "Add lint for direct recursive self-call of function", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}], "state": "closed", "locked": false, "assignee": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2014-10-09T22:31:54Z", "updated_at": "2015-01-25T10:59:29Z", "closed_at": "2015-01-25T10:59:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "With trait objects it is not so rare to have code like\n\n``` rust\nimpl Foo for Box<Foo> {\n    fn bar(&self, x: uint) {\n        // call the `bar` method in the vtable, could try:\n        // self.bar(x);\n        // (*self).bar(x);\n        // (**self).bar(x);\n    }\n}\n```\n\nOne might first write `self.bar(x)`, but this will be calling that same bar, via since `Box<Foo>` has a \"real\" `bar` method itself. The correct procedure is `(**self).bar(x)`. This would helped by detecting the most obvious cases of a function calling itself in a nonterminating way. The most obvious way that is likely to have low risk of false positives is detecting if the CFG of a function reaches a self-call unconditionally. e.g.\n\n``` rust\n// these receive a warning:\nfn foo() { foo() }\n\nfn bar(x: uint) {\n    bar(x - 1);\n}\n\nfn baz(x: uint) -> uint {\n    if x == 0 {\n        println!(\"hi\")\n    }\n    2 * baz(x + 1)\n}\n\n// this is fine:\nfn qux(x: uint) {\n    if x == 0 { loop {} } // (could be `return 1`, etc. etc.)\n\n    qux(x - 1) + 1\n}\n```\n\nNotably, it does not matter if the arguments to the self call are different, since the call will always occur, and it also does not matter if the self-call is in tail position.\n\nThere is the possibility that someone is using infinite recursion to achieve an infinite loop, it doesn't seem crazy to recommend that they use `loop` instead.\n\nA more conservative alternative would be just detecting the method call in the first example, that is, a function that consists of a single expression that is a self-call.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/17899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/17899/timeline", "performed_via_github_app": null, "state_reason": "completed"}