{"url": "https://api.github.com/repos/rust-lang/rust/issues/71309", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71309/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71309/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71309/events", "html_url": "https://github.com/rust-lang/rust/issues/71309", "id": 602603234, "node_id": "MDU6SXNzdWU2MDI2MDMyMzQ=", "number": 71309, "title": "\"try expression alternatives have incompatible types\" is confusing wording", "user": {"login": "comex", "id": 47517, "node_id": "MDQ6VXNlcjQ3NTE3", "avatar_url": "https://avatars.githubusercontent.com/u/47517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/comex", "html_url": "https://github.com/comex", "followers_url": "https://api.github.com/users/comex/followers", "following_url": "https://api.github.com/users/comex/following{/other_user}", "gists_url": "https://api.github.com/users/comex/gists{/gist_id}", "starred_url": "https://api.github.com/users/comex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/comex/subscriptions", "organizations_url": "https://api.github.com/users/comex/orgs", "repos_url": "https://api.github.com/users/comex/repos", "events_url": "https://api.github.com/users/comex/events{/privacy}", "received_events_url": "https://api.github.com/users/comex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1486899747, "node_id": "MDU6TGFiZWwxNDg2ODk5NzQ3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-try_blocks", "name": "F-try_blocks", "color": "f9c0cc", "default": false, "description": "`#![feature(try_blocks)]`"}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}, {"id": 1624891239, "node_id": "MDU6TGFiZWwxNjI0ODkxMjM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-incorrect", "name": "D-incorrect", "color": "c9f7a3", "default": false, "description": "A diagnostic that is giving misleading or incorrect information"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-19T02:40:25Z", "updated_at": "2021-09-17T09:44:28Z", "closed_at": "2021-09-17T09:44:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Simple example:\r\n```rust\r\nfn foo(x: Result<i32, ()>) -> Result<(), ()> {\r\n    let y: u32 = x?;\r\n    Ok(())\r\n}\r\n```\r\nCompilation result (`rust version 1.44.0-nightly (52fa23add 2020-04-18)`):\r\n```\r\nerror[E0308]: try expression alternatives have incompatible types\r\n --> src/lib.rs:2:18\r\n  |\r\n2 |     let y: u32 = x?;\r\n  |                  ^^ expected `u32`, found `i32`\r\n  |\r\nhelp: you can convert an `i32` to `u32` and panic if the converted value wouldn't fit\r\n  |\r\n2 |     let y: u32 = x?.try_into().unwrap();\r\n  |                  ^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nParts of this diagnostic are great, showing the mismatched types (`u32` and `i32`) and even suggesting a valid possible fix.  But the wording of the error itself is confusing.  What \"try expression alternatives\"?  I don't see any alternatives.\r\n\r\nTaking a glance at the compiler implementation, it's referring to the arms of the `match` block that `?` desugars into.  But it's confusing to talk about those, because:\r\n- They're not visible to the user.\r\n- Why would there be a type mismatch between the arms in the first place, if there are only two arms and one of them always ends in a `return` rather than producing a value?  Did type inference infer the error branch as having type `u32` due to the context?\r\n\r\n  If so, the message is technically accurate, but unhelpful: from the user's point of view, the 'real' issue is a mismatch between the expected type of `x?` (namely `i32`) and the context.  As far as I can imagine, this is the *only* possible cause of a type mismatch between the arms of a desugared `?`.  So it seems like it would be fine to just change the error message to not mention the arms.\r\n\r\nAs a sidenote, if I take the `-Zunpretty=hir` output and try to compile that:\r\n```rust\r\n#![feature(try_trait)]\r\nuse std::ops::Try;\r\nuse std::convert::From;\r\nfn foo(x: Result<i32, ()>) -> Result<(), ()> {\r\n    let y: u32 = match Try::into_result(x) {\r\n        Ok(val) => val,\r\n        Err(err) => return Try::from_error(From::from(err)),\r\n    };\r\n    Ok(())\r\n}\r\n```\r\n\r\n...oddly enough, I don't get a \"match arms have incompatible types\" error, but a more helpful one instead:\r\n```\r\nerror[E0308]: mismatched types\r\n --> q.rs:6:20\r\n  |\r\n6 |         Ok(val) => val,\r\n  |                    ^^^ expected `u32`, found `i32`\r\n  |\r\nhelp: you can convert an `i32` to `u32` and panic if the converted value wouldn't fit\r\n  |\r\n6 |         Ok(val) => val.try_into().unwrap(),\r\n  |                    ^^^^\r\n```\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71309/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71309/timeline", "performed_via_github_app": null, "state_reason": "completed"}