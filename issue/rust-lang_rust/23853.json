{"url": "https://api.github.com/repos/rust-lang/rust/issues/23853", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/23853/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/23853/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/23853/events", "html_url": "https://github.com/rust-lang/rust/issues/23853", "id": 65130816, "node_id": "MDU6SXNzdWU2NTEzMDgxNg==", "number": 23853, "title": "internal compiler error: coherence failed to report ambiguit", "user": {"login": "max6cn", "id": 6182234, "node_id": "MDQ6VXNlcjYxODIyMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6182234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max6cn", "html_url": "https://github.com/max6cn", "followers_url": "https://api.github.com/users/max6cn/followers", "following_url": "https://api.github.com/users/max6cn/following{/other_user}", "gists_url": "https://api.github.com/users/max6cn/gists{/gist_id}", "starred_url": "https://api.github.com/users/max6cn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max6cn/subscriptions", "organizations_url": "https://api.github.com/users/max6cn/orgs", "repos_url": "https://api.github.com/users/max6cn/repos", "events_url": "https://api.github.com/users/max6cn/events{/privacy}", "received_events_url": "https://api.github.com/users/max6cn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-03-30T04:22:20Z", "updated_at": "2015-04-06T19:01:14Z", "closed_at": "2015-04-06T19:01:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying the example from http://ironframework.io and got the following error:\n\n```\n/Users/max6/.cargo/registry/src/github.com-1ecc6299db9ec823/plugin-0.2.2/src/lib.rs:75:45: 75:59\nerror: internal compiler error: coherence failed to report ambiguity:\ncannot locate the impl of the trait `core::any::Any` for the type `<P as typemap::Key>::Value`\n```\n## Steps to reproduce this error:\n1. create new project\n\n```\ncargo new webex1  --bin\n```\n1. edit  `main.rs` as following\n   \n   ``` rust\n   extern crate iron;\n   \n   use iron::prelude::*;\n   use iron::status;\n   \n   fn main() {\n       fn hello_world(_: &mut Request) -> IronResult<Response> {\n           Ok(Response::with((status::Ok, \"Hello World!\")))\n       }\n   \n       Iron::new(hello_world).http(\"localhost:3000\").unwrap();\n       println!(\"On 3000\");\n   }\n   \n   ```\n   \n   add following lines to `Cargo.toml`\n   \n   ``` ini\n   [dependencies]\n   iron = \"*\"\n   ```\n2. `RUST_BACKTRACE=1 cargo run`\n## Output\n\n```\nCompiling conduit-mime-types v0.7.3\nCompiling time v0.1.22\nCompiling openssl-sys v0.5.3\nCompiling num_cpus v0.1.0\nCompiling url v0.2.28\nCompiling mime v0.0.10\nCompiling plugin v0.2.2\n/Users/max6/.cargo/registry/src/github.com-1ecc6299db9ec823/plugin-0.2.2/src/lib.rs:75:45: 75:59 error: internal compiler error: coherence failed to report ambiguity: cannot locate the impl of the trait `core::any::Any` for the type `<P as typemap::Key>::Value`\n/Users/max6/.cargo/registry/src/github.com-1ecc6299db9ec823/plugin-0.2.2/src/lib.rs:75             return Ok(self.extensions_mut().get_mut::<P>().unwrap());\n^~~~~~~~~~~~~~\nnote: the compiler unexpectedly panicked. this is a bug.\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\nnote: run with `RUST_BACKTRACE=1` for a backtrace\nthread 'rustc' panicked at 'Box<Any>', /Users/rustbuild/src/rust-buildbot/slave/nightly-dist-rustc-mac/build/src/libsyntax/diagnostic.rs:130\n\n\n```\n## Related Source file\n\n`cat /Users/max6/.cargo/registry/src/github.com-1ecc6299db9ec823/plugin-0.2.2/src/lib.rs`\n\n``` rust\n#![feature(core)]\n#![deny(missing_docs, warnings)]\n\n//! Lazily-Evaluated, Order-Independent Plugins for Extensible Types.\n\nextern crate typemap;\nuse typemap::{TypeMap, Key};\n\n/// Implementers of this trait can act as plugins for other types, via `OtherType::get<P>()`.\n///\n/// To create a plugin, implement this trait and provide an empty implementation\n/// of `Key` to associate the plugin with its return type, `Key::Value`.\npub trait Plugin<E: ?Sized>: Key {\n  /// The error type associated with this plugin.\n  type Error;\n\n  /// Create the plugin from an instance of the extended type.\n  ///\n  /// While `eval` is given a mutable reference to the extended\n  /// type, it is important for implementers to remember that\n  /// the result of `eval` is usually cached, so care should\n  /// be taken when doing mutation on the extended type.\n  fn eval(&mut E) -> Result<Self::Value, Self::Error>;\n}\n\n/// Defines an interface that extensible types must implement.\n///\n/// Extensible types must contain a TypeMap.\npub trait Extensible {\n  /// Get a reference to the type's extension storage.\n  fn extensions(&self) -> &TypeMap;\n\n  /// Get a mutable reference to the type's extension storage.\n  fn extensions_mut(&mut self) -> &mut TypeMap;\n}\n\n/// An interface for plugins that cache values between calls.\n///\n/// `R` is the type of the plugin's return value, which must be cloneable.\npub trait Pluggable {\n  /// Return a copy of the plugin's produced value.\n  ///\n  /// The plugin will be created if it doesn't exist already.\n  /// If plugin creation fails, an error is returned.\n  ///\n  /// `P` is the plugin type.\n  fn get<P: Plugin<Self>>(&mut self) -> Result<P::Value, P::Error>\n  where P::Value: Clone + 'static, Self: Extensible, P::Error: Clone {\n    self.get_ref::<P>().map(|v| v.clone())\n  }\n\n  /// Return a reference to the plugin's produced value.\n  ///\n  /// The plugin will be created if it doesn't exist already.\n  /// If plugin creation fails an error is returned.\n  ///\n  /// `P` is the plugin type.\n  fn get_ref<P: Plugin<Self>>(&mut self) -> Result<&P::Value, P::Error>\n  where P::Value: 'static, Self: Extensible {\n    self.get_mut::<P>().map(|mutref| &*mutref)\n  }\n\n  /// Return a mutable reference to the plugin's produced value.\n  ///\n  /// The plugin will be created if it doesn't exist already.\n  /// If plugin creation fail an error is returned.\n  ///\n  /// `P` is the plugin type.\n  fn get_mut<P: Plugin<Self>>(&mut self) -> Result<&mut P::Value, P::Error>\n  where P::Value: 'static, Self: Extensible {\n    use typemap::Entry::{Occupied, Vacant};\n    use std::intrinsics::unreachable;\n\n    if self.extensions().contains::<P>() {\n      return Ok(self.extensions_mut().get_mut::<P>().unwrap());\n    }\n\n    <P as Plugin<Self>>::eval(self).map(move |data| {\n      match self.extensions_mut().entry::<P>() {\n        Vacant(entry) => entry.insert(data),\n        Occupied(..) => unsafe { unreachable() }\n      }\n      })\n    }\n\n    /// Create and evaluate a once-off instance of a plugin.\n    fn compute<P: Plugin<Self>>(&mut self) -> Result<P::Value, P::Error> {\n      <P as Plugin<Self>>::eval(self)\n    }\n  }\n\n  #[cfg(test)]\n  mod test {\n    extern crate void;\n\n    use test::void::{Void, VoidExtensions};\n\n    use typemap::{TypeMap, Key};\n    use super::{Extensible, Plugin, Pluggable};\n\n    struct Extended {\n      map: TypeMap\n    }\n\n    impl Extended {\n      fn new() -> Extended {\n        Extended { map: TypeMap::new() }\n      }\n    }\n\n    impl Extensible for Extended {\n      fn extensions(&self) -> &TypeMap { &self.map }\n      fn extensions_mut(&mut self) -> &mut TypeMap { &mut self.map }\n    }\n\n    impl Pluggable for Extended {}\n\n      macro_rules! generate_simple_plugin (\n        ($t:ty, $v:ident, $v2:expr) => {\n          #[derive(PartialEq, Debug, Clone)]\n          struct $v(i32);\n\n          impl Key for $t { type Value = $t; }\n\n          impl Plugin<Extended> for $t {\n            type Error = Void;\n\n            fn eval(_: &mut Extended) -> Result<$t, Void> {\n              Ok($v($v2))\n            }\n          }\n        }\n        );\n\n        generate_simple_plugin!(One, One, 1);\n        generate_simple_plugin!(Two, Two, 2);\n        generate_simple_plugin!(Three, Three, 3);\n        generate_simple_plugin!(Four, Four, 4);\n        generate_simple_plugin!(Five, Five, 5);\n        generate_simple_plugin!(Six, Six, 6);\n        generate_simple_plugin!(Seven, Seven, 7);\n        generate_simple_plugin!(Eight, Eight, 8);\n        generate_simple_plugin!(Nine, Nine, 9);\n        generate_simple_plugin!(Ten, Ten, 10);\n\n        #[test] fn test_simple() {\n          let mut extended = Extended::new();\n          assert_eq!(extended.get::<One>(),   Ok(One(1)));\n          assert_eq!(extended.get::<Two>(),   Ok(Two(2)));\n          assert_eq!(extended.get::<Three>(), Ok(Three(3)));\n        }\n\n        #[test] fn test_resize() {\n          let mut extended = Extended::new();\n          extended.get::<One>().void_unwrap();\n          extended.get::<Two>().void_unwrap();\n          extended.get::<Three>().void_unwrap();\n          extended.get::<Four>().void_unwrap();\n          extended.get::<Five>().void_unwrap();\n          extended.get::<Six>().void_unwrap();\n          extended.get::<Seven>().void_unwrap();\n          extended.get::<Eight>().void_unwrap();\n          extended.get::<Nine>().void_unwrap();\n          extended.get::<Ten>().void_unwrap();\n          assert_eq!(extended.get_ref::<One>(), Ok(&One(1)))\n        }\n\n        #[test] fn test_custom_return_type() {\n          let mut extended = Extended::new();\n\n          // Define a struct.\n          struct IntPlugin;\n\n          // Map it onto an `i32` value.\n          impl Key for IntPlugin { type Value = i32; }\n\n          // Define the plugin evaluation function.\n          impl Plugin<Extended> for IntPlugin {\n            type Error = Void;\n\n            fn eval(_: &mut Extended) -> Result<i32, Void> {\n              Ok(0i32)\n            }\n          }\n          assert_eq!(extended.get::<IntPlugin>().void_unwrap(), 0i32);\n        }\n      }\n```\n## Backtrace and version information\n\n`rustc --version --verbose`:\n\n```\nrustc --version --verbose\nrustc 1.0.0-nightly (27901849e 2015-03-25) (built 2015-03-26)\nbinary: rustc\ncommit-hash: 27901849e07558639b8decc03707e0317ae8280e\ncommit-date: 2015-03-25\nbuild-date: 2015-03-26\nhost: x86_64-apple-darwin\nrelease: 1.0.0-nightly\n```\n\nBacktrace:\n\n```\nstack backtrace:\n1:        0x11145dae4 - sys::backtrace::write::h60a4d01122ac4cc2OjD\n2:        0x111488c38 - panicking::on_panic::h71bf3930cf08a95dY9I\n3:        0x1113a687e - rt::unwind::begin_unwind_inner::h8510ec4880ca5ddc8RI\n4:        0x110ba4c1e - rt::unwind::begin_unwind::h11428392113330414505\n5:        0x110ba4bcb - diagnostic::SpanHandler::span_bug::h51d3c08c25edd395taB\n6:        0x10e53c241 - middle::traits::error_reporting::report_fulfillment_errors::h5d246675425c9d4bhwM\n7:        0x10dadd912 - check::vtable::select_all_fcx_obligations_or_error::h25f1bd2bc40df770k2b\n8:        0x10db8e6fa - check::check_bare_fn::hef1e97f4f82ddc463nn\n9:        0x10db93d2f - check::check_method_body::hbbb7de48d1cfdabeTVn\n10:        0x10db8a0c4 - check::check_item::h25c21617996c325dOGn\n11:        0x10dc5fed6 - check_crate::closure.36000\n12:        0x10dc5ad9a - check_crate::hd293b9d434113177OmC\n13:        0x10d996627 - driver::phase_3_run_analysis_passes::h4f2a12d60051e411rGa\n14:        0x10d97c667 - driver::compile_input::h16042e7910f69e15Rba\n15:        0x10da36173 - run_compiler::ha385e70672e841abs2b\n16:        0x10da33d05 - thunk::F.Invoke<A, R>::invoke::h16437619201372565195\n17:        0x10da330c7 - rt::unwind::try::try_fn::h3771335316142457703\n18:        0x11150f1e8 - rust_try_inner\n19:        0x11150f1d5 - rust_try\n20:        0x10da33465 - thunk::F.Invoke<A, R>::invoke::h15947769794543045347\n21:        0x111473bcd - sys::thread::create::thread_start::hbb06c6fdb1ad3e1eYPH\n22:     0x7fff83b6b267 - _pthread_body\n23:     0x7fff83b6b1e4 - _pthread_start\n\n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/23853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/23853/timeline", "performed_via_github_app": null, "state_reason": "completed"}