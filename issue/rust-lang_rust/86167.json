{"url": "https://api.github.com/repos/rust-lang/rust/issues/86167", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86167/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86167/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86167/events", "html_url": "https://github.com/rust-lang/rust/issues/86167", "id": 916213848, "node_id": "MDU6SXNzdWU5MTYyMTM4NDg=", "number": 86167, "title": "Debuginfo type names: Clarify how to handle impl-prefixed paths ", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-06-09T13:39:07Z", "updated_at": "2021-06-09T13:39:07Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently paths in stringified type names emitted to debuginfo are generated [by simply concatenating the components of corresponding `DefPath`s](https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs#L289-L298). For paths involving `impls` this leads to a rendering that is out of sync with how such paths are presented in error messages and symbol demangling. For example we get something like:\r\n```\r\nfoo::bar::{impl#2}::baz\r\n```\r\nwhere we would actually like to have something like:\r\n```\r\n<foo::bar::SomeType>::baz // if this an inherent impl\r\n<foo::bar::SomeType as xyz::SomeTrait>::baz // if this is a trait impl\r\n```\r\nor in the case of the more machine-oriented/C++-like names generated for MSVC debuggers:\r\n```\r\nimpl$<foo::bar::SomeType>::baz // if this an inherent impl\r\nimpl$<xyz::SomeTrait, foo::bar::SomeType>::baz // if this is a trait impl\r\n```\r\n\r\nOpen questions are:\r\n- Should the path to the impl be included, as in `abc::def::impl$<foo::bar::SomeType>::baz` vs just `impl$<foo::bar::SomeType>::baz`? \r\n- Do we need a disambiguator for impls so we can avoid ambiguous names in case of specialization. Or is that too much detail in this context? (see the [equivalent for symbol mangling](https://rust-lang.github.io/rfcs/2603-rust-symbol-name-mangling-v0.html#items-within-generic-impls)).\r\n- Is there value (in particular for this feature) in porting debuginfo type name generation to the `ty::print::Printer` framework?\r\n- How exactly does this interact with the DWARF namespace tree that we generate in debuginfo?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86167/timeline", "performed_via_github_app": null, "state_reason": null}