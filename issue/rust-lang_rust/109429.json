{"url": "https://api.github.com/repos/rust-lang/rust/issues/109429", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109429/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109429/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109429/events", "html_url": "https://github.com/rust-lang/rust/issues/109429", "id": 1633280662, "node_id": "I_kwDOAAsO6M5hWeKW", "number": 109429, "title": "Compiler unhelpful when clone surprisingly returns shared reference instead of owned object", "user": {"login": "Zannick", "id": 518709, "node_id": "MDQ6VXNlcjUxODcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/518709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zannick", "html_url": "https://github.com/Zannick", "followers_url": "https://api.github.com/users/Zannick/followers", "following_url": "https://api.github.com/users/Zannick/following{/other_user}", "gists_url": "https://api.github.com/users/Zannick/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zannick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zannick/subscriptions", "organizations_url": "https://api.github.com/users/Zannick/orgs", "repos_url": "https://api.github.com/users/Zannick/repos", "events_url": "https://api.github.com/users/Zannick/events{/privacy}", "received_events_url": "https://api.github.com/users/Zannick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-03-21T06:00:46Z", "updated_at": "2023-05-25T02:42:51Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried [this code](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=07cea9cbbfcf33ed748b07cba62208d8), mimicking a usage of [`fasthash`](https://docs.rs/fasthash/latest/fasthash/) that I expected to work with HashMap:\r\n\r\n```rust\r\nuse std::collections::hash_map::DefaultHasher;\r\nuse std::collections::HashMap;\r\nuse std::hash::BuildHasher;\r\nuse std::hash::Hash;\r\n\r\npub struct Hash128_1;\r\n\r\nimpl BuildHasher for Hash128_1 {\r\n    type Hasher = DefaultHasher;\r\n    fn build_hasher(&self) -> DefaultHasher { DefaultHasher::default() }\r\n}\r\n\r\n#[allow(unused)]\r\npub fn hashmap_copy<T, U>(\r\n    map: &HashMap<T, U, Hash128_1>,\r\n) where T: Hash + Clone, U: Clone\r\n{\r\n    let mut copy: Vec<U> = map.clone().into_values().collect();\r\n}\r\n\r\npub fn make_map() -> HashMap<String, i64, Hash128_1>\r\n{\r\n    HashMap::with_hasher(Hash128_1)\r\n}\r\n```\r\n\r\nI expected to see one of these happen:\r\n* hashmap_copy compiles, so function can copy the hashmap values into a vector and modify it as necessary.\r\n* rustc gives an error that `Clone` is not implemented for `HashMap<T, U, Hash128_1>` because `Hash128_1` does not have an implementation for `Clone`.\r\n\r\nInstead, this happened:\r\n\r\n```\r\nerror[[E0507]](https://doc.rust-lang.org/nightly/error_codes/E0507.html): cannot move out of a shared reference\r\n  --> src/lib.rs:19:28\r\n   |\r\n19 |     let mut copy: Vec<U> = map.clone().into_values().collect();\r\n   |                            ^^^^^^^^^^^^-------------\r\n   |                            |           |\r\n   |                            |           value moved due to this method call\r\n   |                            move occurs because value has type `HashMap<T, U, Hash128_1>`, which does not implement the `Copy` trait\r\n   |\r\nnote: `HashMap::<K, V, S>::into_values` takes ownership of the receiver `self`, which moves value\r\n  --> /rustc/44f5180584404d18058cbbf224c55255db4fdcbb/library/std/src/collections/hash/map.rs:487:24\r\n```\r\n\r\nThis appears to be a complaint that `map.clone()` is already borrowed somehow by the time I call `into_values` on it. On further research, there is [a `Clone` implementation for shared references](https://doc.rust-lang.org/std/clone/trait.Clone.html#impl-Clone-for-%26T) (#91805). I can get around this with `map.values().map(Clone::clone).collect()` to avoid needing `Clone` on the hasher param but:\r\n\r\n1. I find it surprising that `clone()` can return a HashMap reference instead of an owned object based on whether I messed up the type parameters.\r\n2. The error message was perplexing and I got lucky with my research while filing this bug report.\r\n\r\nBuilt on 1.68.0 stable and 1.70.0-nightly in the playground (2023-03-20 44f5180584404d18058c)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109429/timeline", "performed_via_github_app": null, "state_reason": null}