{"url": "https://api.github.com/repos/rust-lang/rust/issues/96579", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96579/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96579/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96579/events", "html_url": "https://github.com/rust-lang/rust/issues/96579", "id": 1221849228, "node_id": "I_kwDOAAsO6M5I0_CM", "number": 96579, "title": "Desuraring of destructuring assignment has subtle effects on drop-order / scopes of temporaries", "user": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2518066976, "node_id": "MDU6TGFiZWwyNTE4MDY2OTc2", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-destructuring_assignment", "name": "F-destructuring_assignment", "color": "f9c0cc", "default": false, "description": "`#![feature(destructuring_assignment)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-04-30T14:53:09Z", "updated_at": "2022-04-30T17:19:54Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "For example\r\n```rs\r\nfn main() {\r\n    struct L;\r\n    impl Drop for L {\r\n        fn drop(&mut self) {\r\n            println!(\"dropped L\")\r\n        }\r\n    }\r\n    struct M;\r\n    impl Drop for M {\r\n        fn drop(&mut self) {\r\n            println!(\"dropped M\")\r\n        }\r\n    }\r\n\r\n    let x;\r\n    (x = (drop(&L), ()), M);\r\n\r\n    println!(\"---\"); // -------------\r\n\r\n    let (x1, x2);\r\n    ((x1, x2) = (drop(&L), ()), M);\r\n}\r\n```\r\nOutput:\r\n```\r\ndropped M\r\ndropped L\r\n---\r\ndropped L\r\ndropped M\r\n```\r\n\r\n<hr>\r\n\r\nI came across this by reading [the reference](https://doc.rust-lang.org/stable/reference/expressions/operator-expr.html#destructuring-assignments):\r\n\r\n> Assignee expressions are then desugared to pattern matches followed by sequential assignment.\r\n\r\n> The desugaring method is straightforward, and is illustrated best by example.\r\n>\r\n> ```rs\r\n> (a, b) = (3, 4);\r\n>\r\n> [a, b] = [3, 4];\r\n>\r\n> Struct { x: a, y: b } = Struct { x: 3, y: 4};\r\n>\r\n> // desugars to:\r\n>\r\n> {\r\n>     let (_a, _b) = (3, 4);\r\n>     a = _a;\r\n>     b = _b;\r\n> }\r\n>\r\n> {\r\n>     let [_a, _b] = [3, 4];\r\n>     a = _a;\r\n>     b = _b;\r\n> }\r\n>\r\n> {\r\n>     let Struct { x: _a, y: _b } = Struct { x: 3, y: 4};\r\n>     a = _a;\r\n>     b = _b;\r\n> }\r\n>```\r\n\r\nThe difference between \r\n```\r\nSTATEMENT CONTAINING \u2026 x = EXPR \u2026\r\n```\r\nand\r\n```\r\nSTATEMENT CONTAINING \u2026 { let _x = EXPR; x = _x } \u2026\r\n```\r\nis that in the former case, temporaries in `EXPR` are dropped _after_ the surrounding statement is evaluated, while the latter case has them dropped right after the `let _x = EXPR`.\r\n\r\n<hr>\r\n\r\nIt seems to me that a better desugaring would have been to use something like\r\n```rs\r\n(a, b) = (3, 4);\r\n\r\n[a, b] = [3, 4];\r\n\r\nStruct { x: a, y: b } = Struct { x: 3, y: 4};\r\n\r\n// desugars to:\r\n\r\nmatch (3, 4) {\r\n    (_a, _b) => {\r\n        a = _a;\r\n        b = _b;\r\n    }\r\n}\r\n\r\nmatch [3, 4] {\r\n    [_a, _b] =>\r\n        a = _a;\r\n        b = _b;\r\n    }\r\n}\r\n\r\nmatch Struct { x: 3, y: 4} {\r\n    Struct { x: _a, y: _b } => {\r\n        a = _a;\r\n        b = _b;\r\n    }\r\n}\r\n```\r\n\r\n<hr>\r\n\r\nOr applied to the example above:\r\n```rs\r\nfn main() {\r\n    \u2026\u2026\u2026\r\n    \r\n    let (x1, x2);\r\n    // current desugaring\r\n    (\r\n        {\r\n            let (_x1, _x2) = (drop(&L), ());\r\n            x1 = _x1;\r\n            x2 = _x2;\r\n        },\r\n        M,\r\n    );\r\n\r\n    println!(\"---\"); // -------------\r\n\r\n    let (x1, x2);\r\n    // better desugaring\r\n    (\r\n        match (drop(&L), ()) {\r\n            (_x1, _x2) => {\r\n                x1 = _x1;\r\n                x2 = _x2;\r\n            }\r\n        },\r\n        M,\r\n    );\r\n}\r\n```\r\n```\r\ndropped L\r\ndropped M\r\n---\r\ndropped M\r\ndropped L\r\n```\r\n\r\n[Full example in the playground.](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=666c04b6614b33b686aad9c2b30131e1)\r\n\r\nAs a point of comparison, e.g. [desugaring of `for` loops](https://doc.rust-lang.org/stable/reference/expressions/loop-expr.html#iterator-loops), and similarly many macros, use `match` in a similar way to ensure proper temporary scopes.\r\n\r\nChanging it now might technically be a breaking change, OTOH, the feature of destructuring assignment is still very young, and the change is small. I\u2019m not 100% certain about the \"bug\" label, but I\u2019ll add it for now, next to \"enhancement\", to let the reader choose whichever they feel more appropriate: @rustbot label C-bug, C-enhancement, F-destructuring_assignment, T-compiler", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96579/timeline", "performed_via_github_app": null, "state_reason": null}