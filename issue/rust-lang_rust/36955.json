{"url": "https://api.github.com/repos/rust-lang/rust/issues/36955", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/36955/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/36955/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/36955/events", "html_url": "https://github.com/rust-lang/rust/issues/36955", "id": 180864485, "node_id": "MDU6SXNzdWUxODA4NjQ0ODU=", "number": 36955, "title": "Enum discriminants used as indices are subject to bounds checks", "user": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-10-04T11:09:17Z", "updated_at": "2016-10-07T01:19:04Z", "closed_at": "2016-10-06T23:31:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[Case Study](https://www.reddit.com/r/rust/comments/55ns2m/safe_and_efficient_bidirectional_trees/d8dcmv4)\n\nAll enum discriminants are statically known, but the optimizer appears not to be able to introspect their max values when they are cast to primitives and used as indices, probably because at the LLVM level, they only ever _are_ primitives. LLVM is never told their maximum value. This means that when using enum discriminants to index arrays/vectors whose lengths are also statically known, bounds checks are emitted even when one would reasonably expect them to be elided.\n\nMinimal example ([Playground](https://is.gd/IfbMnf)):\n\n``` rust\n#![feature(test)]\n\nextern crate test;\n\nuse test::black_box;\n\n#[repr(usize)]\nenum Index {\n    Zero = 0,\n    One = 1,\n}\n\n#[inline(never)]\nfn idx_cast(vals: &[i32; 2], idx: Index) {\n    black_box(vals[idx as usize]);\n}\n\nfn main() {\n    let vals = black_box([0, 1]);\n    idx_cast(&vals, black_box(Index::Zero));\n}\n```\n\nIf you look at the emitted assembly (in release mode), you can see that `idx_cast` does a bounds-check.\n\nIf you add `::std::intrinsics::assume(idx as usize < 2)`, the bounds-check is elided and LLVM appears to use the discriminant as the index directly: https://is.gd/DdX7dd\n\nThis also works even if `enum Index` is not `#[repr(usize)]`; LLVM simply zero-extends the discriminant: https://is.gd/2JrJty\n\nSo as a possible optimization at codegen, whenever an enum is cast to a primitive, we could (or maybe even _should_) emit `@llvm.assume( [discriminant value] <= [maximum discriminant value] )`.\n\nConverting via explicit `match` also allows elision of the bounds check without reintroducing a branch, but has differing behavior between enums with 2 variants and enums of more variants:\n- 2 variant enums get a `use 1 if discriminant is 1, otherwise 0` treatment: https://is.gd/VS7JZK\n- Enums with > 2 variants directly use the discriminant (or zero-extend it if it's a different width) like the `assume` solution: https://is.gd/d8dEtY  \n\nI assume LLVM does the former in the different-width case because it uses fewer cycles than the latter, since they are otherwise functionally equivalent. However, when the enum is `#[repr(usize)]`, the 2-variant version is using 3 extra, unnecessary instructions. But that seems like an LLVM problem more than a codegen problem.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/36955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/36955/timeline", "performed_via_github_app": null, "state_reason": "completed"}