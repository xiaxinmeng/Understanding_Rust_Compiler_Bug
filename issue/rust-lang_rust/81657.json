{"url": "https://api.github.com/repos/rust-lang/rust/issues/81657", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81657/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81657/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81657/events", "html_url": "https://github.com/rust-lang/rust/issues/81657", "id": 799050880, "node_id": "MDU6SXNzdWU3OTkwNTA4ODA=", "number": 81657, "title": "Opt in lint on reachable pattern", "user": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 1976249438, "node_id": "MDU6TGFiZWwxOTc2MjQ5NDM4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-exhaustiveness-checking", "name": "A-exhaustiveness-checking", "color": "f7e101", "default": false, "description": "Relating to exhaustiveness / usefulness checking of patterns"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-02-02T08:24:33Z", "updated_at": "2021-09-16T12:28:54Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Filing to track https://github.com/rust-lang/rust/issues/44109#issuecomment-521781237. Despite https://github.com/dtolnay/syn being an obvious use case for #\\[non_exhaustive\\] because we need to be able to add variants over time as new syntax is added to Rust, the thing that makes #\\[non_exhaustive\\] unusable is that there is no opt-in way for downstream to request test breakage when one of their wildcard arms becomes reachable.\r\n\r\nOur requirements are:\r\n\r\n1. It needs to be **easy** to match a syntax tree node nonexhaustively, the most common case.\r\n2. It needs to be **easy** for code that uses Syn to opt in to a *test failure* when Syn adds a variant.\r\n3. It needs to be **hard** for code that uses code that uses Syn (2 levels removed) to get a *build failure* when Syn adds a variant.\r\n\r\nItem 2 is important for the small fraction of use cases that want to update their code to take into account new syntax, such as a prettyprinter. Item 3 is important so that code downstream of the code that wants to update is never broken in the interim.\r\n\r\nInstead of #\\[non_exhaustive\\], the idiom we are currently using is to have a hidden variant `__TestExhaustive` and documenting the supported pattern for exhaustive matches as being:\r\n\r\n```rust\r\nmatch expr {\r\n    Expr::Array(e) => {...}\r\n    Expr::Assign(e) => {...}\r\n    ...\r\n    Expr::Yield(e) => {...}\r\n\r\n    #[cfg(test)]\r\n    Expr::__TestExhaustive(_) => unimplemented!(),\r\n    #[cfg(not(test))]\r\n    _ => { /* some sane fallback */ }\r\n}\r\n```\r\n\r\nThis meets requirements 1 and 2, but not 3 because people by and large do not read documentation and will write a dumb exhaustive match that breaks on new variants.\r\n\r\nCurrently #\\[non_exhaustive\\] only meets requirements 1 and 3, but the only thing missing for it to meet 2 is the following lint:\r\n\r\n```rust\r\nmatch expr {\r\n    Expr::Array(e) => {...}\r\n    Expr::Assign(e) => {...}\r\n    ...\r\n    Expr::Yield(e) => {...}\r\n\r\n    #[cfg_attr(test, deny(reachable))]\r\n    _ => { /* some sane fallback */ }\r\n}\r\n```\r\n\r\nwhere `reachable` is an allow-by-default lint on catch-all arms of a nonexhaustive match.\r\n\r\n1. This meets requirement 1 because the lint is allow by default so you just match nonexhaustively and that's it.\r\n2. This meets requirement 2 because you add this deny attribute to opt in to having your tests notify you of new variants. Note that this works even in the absence of *any* tests; we don't assume existence of a test case that actually exercises the new syntax at runtime.\r\n3. This meets requirement 3 because it can never break crates downstream of the match, due to cap-lints=allow.\r\n\r\n@Nadrieril ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81657/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81657/timeline", "performed_via_github_app": null, "state_reason": null}