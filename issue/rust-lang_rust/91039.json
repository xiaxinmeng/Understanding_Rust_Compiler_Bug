{"url": "https://api.github.com/repos/rust-lang/rust/issues/91039", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91039/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91039/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91039/events", "html_url": "https://github.com/rust-lang/rust/issues/91039", "id": 1058535468, "node_id": "I_kwDOAAsO6M4_F_gs", "number": 91039, "title": "[ER] Two array bound tests with %", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 3425147156, "node_id": "LA_kwDOAAsO6M7MJ5kU", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-array", "name": "A-array", "color": "f7e101", "default": false, "description": "Area: [T; N]"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-11-19T13:33:55Z", "updated_at": "2022-07-30T19:45:05Z", "closed_at": "2022-07-30T09:30:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "(This should be an enhancement request).\r\n\r\n```rust\r\npub fn foo(a: &mut [u8; 25]) {\r\n    for i in 0 .. a.len() {\r\n        if i % 5 > 0 { a[i - 1] = 0; }\r\n        if i % 5 < 4 { a[i + 1] = 0; }\r\n    }\r\n}\r\n```\r\n\r\nUsing rustc v.1.58.0-nightly cc946fcd3 2021-11-18, compiling in release mode (even with aggressive compilation flags) gives an asm like:\r\n\r\n```asm\r\nfoo:\r\n        push    rax\r\n        mov     rax, rdi\r\n        mov     edi, 1\r\n        xor     edx, edx\r\n        jmp     .LBB0_1\r\n.LBB0_4:\r\n        add     rdi, 1\r\n        add     dl, 1\r\n        cmp     rdi, 26\r\n        je      .LBB0_5\r\n.LBB0_1:\r\n        movzx   ecx, dl\r\n        imul    ecx, ecx, 205\r\n        shr     ecx, 10\r\n        lea     ecx, [rcx + 4*rcx]\r\n        neg     ecx\r\n        movzx   esi, cl\r\n        lea     rcx, [rdi + rsi]\r\n        cmp     cl, 1\r\n        je      .LBB0_7\r\n        lea     rcx, [rdi - 2]\r\n        cmp     rcx, 25\r\n        jae     .LBB0_3\r\n        lea     rcx, [rdi + rsi]\r\n        add     rcx, -1\r\n        mov     byte ptr [rax + rdi - 2], 0\r\n        cmp     cl, 4\r\n        jae     .LBB0_4\r\n.LBB0_7:\r\n        lea     rcx, [rdi - 1]\r\n        cmp     rcx, 23\r\n        ja      .LBB0_9\r\n        mov     byte ptr [rax + rdi], 0\r\n        jmp     .LBB0_4\r\n.LBB0_5:\r\n        pop     rax\r\n        ret\r\n.LBB0_9:\r\n        lea     rdx, [rip + .L__unnamed_1]\r\n        mov     esi, 25\r\n        call    qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\r\n        ud2\r\n.LBB0_3:\r\n        lea     rdx, [rip + .L__unnamed_2]\r\n        mov     esi, 25\r\n        mov     rdi, rcx\r\n        call    qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\r\n        ud2\r\n```\r\n\r\nLLVM can't remove the two array bound tests, despite they should be safe when the array length is divisible by 5.\r\n\r\nCurrently LLVM is able to remove those tests if fully unrolls that loop compiling with `-O -C llvm-args=-unroll-threshold=500`:\r\n\r\n```asm\r\nfoo:\r\n        mov     word ptr [rdi], 0\r\n        mov     byte ptr [rdi + 2], 0\r\n        mov     dword ptr [rdi + 3], 0\r\n        mov     byte ptr [rdi + 7], 0\r\n        mov     word ptr [rdi + 8], 0\r\n        mov     dword ptr [rdi + 10], 0\r\n        mov     byte ptr [rdi + 14], 0\r\n        mov     dword ptr [rdi + 15], 0\r\n        mov     word ptr [rdi + 18], 0\r\n        mov     word ptr [rdi + 21], 0\r\n        mov     byte ptr [rdi + 20], 0\r\n        mov     word ptr [rdi + 22], 0\r\n        mov     byte ptr [rdi + 24], 0\r\n        ret\r\n```\r\n\r\nI'd like LLVM to remove both bound tests. Expecially the first one because `inbound(i - 1) if i % 5 > 0 && a.len() > 0`.", "closed_by": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91039/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}