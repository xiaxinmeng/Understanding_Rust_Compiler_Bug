{"url": "https://api.github.com/repos/rust-lang/rust/issues/55941", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55941/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55941/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55941/events", "html_url": "https://github.com/rust-lang/rust/issues/55941", "id": 380483309, "node_id": "MDU6SXNzdWUzODA0ODMzMDk=", "number": 55941, "title": "Add X to crate attributes to enable message is not very clear", "user": {"login": "Firstyear", "id": 271005, "node_id": "MDQ6VXNlcjI3MTAwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/271005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Firstyear", "html_url": "https://github.com/Firstyear", "followers_url": "https://api.github.com/users/Firstyear/followers", "following_url": "https://api.github.com/users/Firstyear/following{/other_user}", "gists_url": "https://api.github.com/users/Firstyear/gists{/gist_id}", "starred_url": "https://api.github.com/users/Firstyear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Firstyear/subscriptions", "organizations_url": "https://api.github.com/users/Firstyear/orgs", "repos_url": "https://api.github.com/users/Firstyear/repos", "events_url": "https://api.github.com/users/Firstyear/events{/privacy}", "received_events_url": "https://api.github.com/users/Firstyear/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-14T00:25:30Z", "updated_at": "2020-06-11T18:00:39Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nerror[E0658]: use of unstable library feature 'try_from' (see issue #33417)\r\n   --> src/schema.rs:441:9\r\n    |\r\n441 |     use std::convert::TryFrom;\r\n    |         ^^^^^^^^^^^^^^^^^^^^^\r\n    |\r\n    = help: add #![feature(try_from)] to the crate attributes to enable\r\n````\r\n\r\nThe message above is what I get attempting to use try_from. The issue is that it's not clear *where* crate attributes are, or whey they go. The rust book makes little mention of them. Adding this to \"lib.rs\",  causes new errors such as:\r\n\r\n```\r\nerror: an inner attribute is not permitted in this context\r\n  --> src/lib.rs:15:3\r\n   |\r\n15 | #![feature(try_from)]\r\n   |   ^\r\n   |\r\n   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\r\n\r\n````\r\n\r\nAs a result, it's really not clear how to resolve this error.\r\n\r\nThe descriptive error rustc --explain E0658 also doesn't demonstrate what to do correctly. \r\n\r\nThe error message should explain *which* file to add the #[feature] line too. Additionally, the E0658 should explain not just what file, but what to do in a multi-file case (ie lib.rs contains mod foo, and foo.rs wants to use the feature).\r\n\r\nThis would help to make this easier to resolve and access these features. \r\n\r\nEDIT: It would be also useful to handle the mod tests situation as well where you want to test a feature like TryFrom in mod tests, because that likely needs different/other handling? ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55941/reactions", "total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55941/timeline", "performed_via_github_app": null, "state_reason": null}