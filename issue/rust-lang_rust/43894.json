{"url": "https://api.github.com/repos/rust-lang/rust/issues/43894", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43894/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43894/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43894/events", "html_url": "https://github.com/rust-lang/rust/issues/43894", "id": 250462294, "node_id": "MDU6SXNzdWUyNTA0NjIyOTQ=", "number": 43894, "title": "struct pass-by-value failing on SPARC", "user": {"login": "dhduvall", "id": 7074165, "node_id": "MDQ6VXNlcjcwNzQxNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7074165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhduvall", "html_url": "https://github.com/dhduvall", "followers_url": "https://api.github.com/users/dhduvall/followers", "following_url": "https://api.github.com/users/dhduvall/following{/other_user}", "gists_url": "https://api.github.com/users/dhduvall/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhduvall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhduvall/subscriptions", "organizations_url": "https://api.github.com/users/dhduvall/orgs", "repos_url": "https://api.github.com/users/dhduvall/repos", "events_url": "https://api.github.com/users/dhduvall/events{/privacy}", "received_events_url": "https://api.github.com/users/dhduvall/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 632899563, "node_id": "MDU6TGFiZWw2MzI4OTk1NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-SPARC", "name": "O-SPARC", "color": "6e6ec0", "default": false, "description": "Target: SPARC processors"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4288196623, "node_id": "LA_kwDOAAsO6M7_mLAP", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-abi", "name": "A-abi", "color": "f7e101", "default": false, "description": "Area: Concerning the \"application binary interface\" between functions."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-08-15T22:58:03Z", "updated_at": "2023-03-04T21:08:01Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "There are a handful of testsuite failures on SPARC that seem to be related, and they have to do with passing structs by value into C.  Although in at least one case (`extern-fn-struct-passing-abi`), the C code isn't getting the right values (but there it's a floating-point value), in the integer case Shawn and I have dived into (`extern-pass-TwoU8s`), that part appears to be correct.  It's the retrieval of the struct's return value that seems to be wrong.\r\n\r\nThe problem becomes a bit more apparent if we rebuild the test with `-g` instead of `-O`.  I can attach full files if necessary, but here is (what I think is the relevant part of) the IR for the `main()` function:\r\n\r\n```\r\n; extern_pass_TwoU8s::main\r\n; Function Attrs: uwtable\r\ndefine internal void @_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE() unnamed_addr #0 !dbg !294 {\r\nstart:\r\n  %tmp_ret1 = alloca %\"core::fmt::ArgumentV1\"\r\n  %tmp_ret = alloca %\"core::fmt::ArgumentV1\"\r\n  %abi_cast = alloca i16\r\n  %arg = alloca %TwoU8s\r\n  %__arg1 = alloca %TwoU8s**\r\n  %__arg0 = alloca %TwoU8s**\r\n  %_22 = alloca { %TwoU8s**, [0 x i8], %TwoU8s**, [0 x i8] }\r\n  %_21 = alloca [2 x %\"core::fmt::ArgumentV1\"]\r\n  %_16 = alloca %\"core::fmt::Arguments\"\r\n  %right_val = alloca %TwoU8s*\r\n  %left_val = alloca %TwoU8s*\r\n  %_5 = alloca { %TwoU8s*, [0 x i8], %TwoU8s*, [0 x i8] }\r\n  %y = alloca %TwoU8s\r\n  %x = alloca %TwoU8s\r\n  call void @llvm.dbg.declare(metadata %TwoU8s* %x, metadata !297, metadata !144), !dbg !299\r\n  call void @llvm.dbg.declare(metadata %TwoU8s* %y, metadata !300, metadata !144), !dbg !302\r\n  call void @llvm.dbg.declare(metadata %TwoU8s** %left_val, metadata !303, metadata !144), !dbg !306\r\n  call void @llvm.dbg.declare(metadata %TwoU8s** %right_val, metadata !307, metadata !144), !dbg !306\r\n  call void @llvm.dbg.declare(metadata %TwoU8s*** %__arg0, metadata !308, metadata !144), !dbg !311\r\n  call void @llvm.dbg.declare(metadata %TwoU8s*** %__arg1, metadata !312, metadata !144), !dbg !311\r\n  %0 = getelementptr inbounds %TwoU8s, %TwoU8s* %x, i32 0, i32 0, !dbg !313\r\n  store i8 22, i8* %0, !dbg !313\r\n  %1 = getelementptr inbounds %TwoU8s, %TwoU8s* %x, i32 0, i32 2, !dbg !313\r\n  store i8 23, i8* %1, !dbg !313\r\n  %2 = getelementptr inbounds %TwoU8s, %TwoU8s* %x, i32 0, i32 0, !dbg !314\r\n  %3 = getelementptr inbounds %TwoU8s, %TwoU8s* %x, i32 0, i32 2, !dbg !314\r\n  %4 = load i8, i8* %2, !dbg !314\r\n  %5 = load i8, i8* %3, !dbg !314\r\n  %6 = getelementptr inbounds %TwoU8s, %TwoU8s* %arg, i32 0, i32 0, !dbg !314\r\n  store i8 %4, i8* %6, !dbg !314\r\n  %7 = getelementptr inbounds %TwoU8s, %TwoU8s* %arg, i32 0, i32 2, !dbg !314\r\n  store i8 %5, i8* %7, !dbg !314\r\n  %8 = bitcast %TwoU8s* %arg to i64*, !dbg !314\r\n  %9 = load i64, i64* %8, align 1, !dbg !314\r\n  %10 = call i16 @rust_dbg_extern_identity_TwoU8s(i64 %9), !dbg !314\r\n  store i16 %10, i16* %abi_cast, !dbg !314\r\n  %11 = bitcast %TwoU8s* %y to i8*, !dbg !314\r\n  %12 = bitcast i16* %abi_cast to i8*, !dbg !314\r\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 2, i32 1, i1 false), !dbg !314\r\n  br label %bb1, !dbg !314\r\n\r\nbb1:                                              ; preds = %start\r\n  %13 = getelementptr inbounds { %TwoU8s*, [0 x i8], %TwoU8s*, [0 x i8] }, { %TwoU8s*, [0 x i8], %TwoU8s*, [0 x i8] }* %_5, i32 0, i32 0, !dbg !315\r\n  store %TwoU8s* %x, %TwoU8s** %13, !dbg !315\r\n  %14 = getelementptr inbounds { %TwoU8s*, [0 x i8], %TwoU8s*, [0 x i8] }, { %TwoU8s*, [0 x i8], %TwoU8s*, [0 x i8] }* %_5, i32 0, i32 2, !dbg !315\r\n  store %TwoU8s* %y, %TwoU8s** %14, !dbg !315\r\n  %15 = getelementptr inbounds { %TwoU8s*, [0 x i8], %TwoU8s*, [0 x i8] }, { %TwoU8s*, [0 x i8], %TwoU8s*, [0 x i8] }* %_5, i32 0, i32 0, !dbg !315\r\n  %16 = load %TwoU8s*, %TwoU8s** %15, !dbg !315, !nonnull !91\r\n  store %TwoU8s* %16, %TwoU8s** %left_val, !dbg !315\r\n  %17 = getelementptr inbounds { %TwoU8s*, [0 x i8], %TwoU8s*, [0 x i8] }, { %TwoU8s*, [0 x i8], %TwoU8s*, [0 x i8] }* %_5, i32 0, i32 2, !dbg !315\r\n  %18 = load %TwoU8s*, %TwoU8s** %17, !dbg !315, !nonnull !91\r\n  store %TwoU8s* %18, %TwoU8s** %right_val, !dbg !315\r\n  %19 = load %TwoU8s*, %TwoU8s** %left_val, !dbg !306, !nonnull !91\r\n  %20 = load %TwoU8s*, %TwoU8s** %right_val, !dbg !306, !nonnull !91\r\n; call <extern_pass_TwoU8s::TwoU8s as core::cmp::PartialEq>::eq\r\n  %21 = call zeroext i1 @\"_ZN67_$LT$extern_pass_TwoU8s..TwoU8s$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9059cf2eb03b4778E\"(%TwoU8s* noalias readonly dereferenceable(2) %19, %TwoU8s* noalias readonly dereferenceable(2) %20), !dbg !306\r\n  br label %bb2, !dbg !306\r\n```\r\nand the resulting assembly (more or less):\r\n\r\n```\r\nextern-pass-TwoU8s.stage2-sparcv> _ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE::dis\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE:       save      %sp, -0x1c0, %sp\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+4:     call      +0x8          <_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0xc>\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+8:     sethi     %hi(0x106c00), %i0\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0xc:   or        %i0, 0x168, %i0\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x10:  add       %i0, %o7, %i0\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x14:  mov       0x16, %i1\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x18:  stb       %i1, [%fp + 0x737]\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x1c:  add       %fp, 0x737, %i1\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x20:  or        %i1, 0x1, %i1\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x24:  mov       0x17, %i2\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x28:  stb       %i2, [%i1]\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x2c:  ldub      [%fp + 0x737], %i1\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x30:  stb       %i1, [%fp + 0x7d7]\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x34:  add       %fp, 0x7d7, %i1\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x38:  or        %i1, 0x1, %i1\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x3c:  stb       %i2, [%i1]\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x40:  ldx       [%fp + 0x7d7], %o0\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x44:  call      +0x724        <rust_dbg_extern_identity_TwoU8s>\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x48:  stx       %i0, [%fp + 0x72f]\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x4c:  sth       %o0, [%fp + 0x7dd]\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x50:  lduh      [%fp + 0x7dd], %i0\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x54:  ba        +0x8          <_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x5c>\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x58:  sth       %i0, [%fp + 0x73f]\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x5c:  add       %fp, 0x737, %i0\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x60:  stx       %i0, [%fp + 0x747]\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x64:  add       %fp, 0x73f, %i0\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x68:  stx       %i0, [%fp + 0x74f]\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x6c:  ldx       [%fp + 0x747], %i0\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x70:  stx       %i0, [%fp + 0x757]\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x74:  ldx       [%fp + 0x74f], %i0\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x78:  stx       %i0, [%fp + 0x75f]\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x7c:  ldx       [%fp + 0x757], %o0\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x80:  call      +0x240        <_ZN67_$LT$extern_pass_TwoU8s..TwoU8s$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9059cf2eb03b4778E>\r\n_ZN18extern_pass_TwoU8s4main17h7a27acd65aa2f60dE+0x84:  mov       %i0, %o1\r\n```\r\n\r\nWe believe the `sth` instruction after the call to `rust_dbg_extern_identity_TwoU8s` is where it goes wrong, implying something wrong with the `store` instruction in the IR.\r\n\r\nHere is the IR for the equivalent C function (albeit compiled by clang from a different version of LLVM):\r\n\r\n```\r\n; Function Attrs: nounwind\r\ndefine signext i32 @main() #0 {\r\n  %1 = alloca i32, align 4\r\n  %t = alloca %struct.TwoU8s, align 1\r\n  %u = alloca %struct.TwoU8s, align 1\r\n  %2 = alloca i64, align 8\r\n  %3 = alloca %struct.TwoU8s, align 1\r\n  %4 = alloca i64, align 8\r\n  store i32 0, i32* %1, align 4\r\n  %5 = getelementptr inbounds %struct.TwoU8s, %struct.TwoU8s* %t, i32 0, i32 0\r\n  store i8 22, i8* %5, align 1\r\n  %6 = getelementptr inbounds %struct.TwoU8s, %struct.TwoU8s* %t, i32 0, i32 1\r\n  store i8 23, i8* %6, align 1\r\n  %7 = bitcast i64* %2 to i8*\r\n  %8 = bitcast %struct.TwoU8s* %t to i8*\r\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 2, i32 1, i1 false)\r\n  %9 = load i64, i64* %2, align 8\r\n  %10 = call i64 @rust_dbg_extern_identity_TwoU8s(i64 %9)\r\n  store i64 %10, i64* %4, align 8\r\n  %11 = bitcast i64* %4 to i8*\r\n  %12 = bitcast %struct.TwoU8s* %3 to i8*\r\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %11, i64 2, i32 1, i1 false)\r\n  %13 = bitcast %struct.TwoU8s* %u to i8*\r\n  %14 = bitcast %struct.TwoU8s* %3 to i8*\r\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 2, i32 1, i1 false)\r\n  %15 = getelementptr inbounds %struct.TwoU8s, %struct.TwoU8s* %u, i32 0, i32 0\r\n  %16 = load i8, i8* %15, align 1\r\n  %17 = zext i8 %16 to i32\r\n  %18 = icmp eq i32 %17, 22\r\n  br i1 %18, label %21, label %19\r\n```\r\n\r\nAnyway, this was about as far as we got before we needed to take a break, but figured it was worth writing up and seeing if anyone here had any insights.  This is all on the beta branch, at commit f38ffa8d7b, though the failure happens on all versions of rust I've run the testsuite for.\r\n\r\n@binarycrusader ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43894/timeline", "performed_via_github_app": null, "state_reason": null}