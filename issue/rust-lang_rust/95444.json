{"url": "https://api.github.com/repos/rust-lang/rust/issues/95444", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95444/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95444/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95444/events", "html_url": "https://github.com/rust-lang/rust/issues/95444", "id": 1185322501, "node_id": "I_kwDOAAsO6M5GppYF", "number": 95444, "title": "`-Ztime-passes`: only print passes that take more than 5 milliseconds", "user": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}], "state": "closed", "locked": false, "assignee": {"login": "randomicon00", "id": 20146907, "node_id": "MDQ6VXNlcjIwMTQ2OTA3", "avatar_url": "https://avatars.githubusercontent.com/u/20146907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randomicon00", "html_url": "https://github.com/randomicon00", "followers_url": "https://api.github.com/users/randomicon00/followers", "following_url": "https://api.github.com/users/randomicon00/following{/other_user}", "gists_url": "https://api.github.com/users/randomicon00/gists{/gist_id}", "starred_url": "https://api.github.com/users/randomicon00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randomicon00/subscriptions", "organizations_url": "https://api.github.com/users/randomicon00/orgs", "repos_url": "https://api.github.com/users/randomicon00/repos", "events_url": "https://api.github.com/users/randomicon00/events{/privacy}", "received_events_url": "https://api.github.com/users/randomicon00/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "randomicon00", "id": 20146907, "node_id": "MDQ6VXNlcjIwMTQ2OTA3", "avatar_url": "https://avatars.githubusercontent.com/u/20146907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randomicon00", "html_url": "https://github.com/randomicon00", "followers_url": "https://api.github.com/users/randomicon00/followers", "following_url": "https://api.github.com/users/randomicon00/following{/other_user}", "gists_url": "https://api.github.com/users/randomicon00/gists{/gist_id}", "starred_url": "https://api.github.com/users/randomicon00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randomicon00/subscriptions", "organizations_url": "https://api.github.com/users/randomicon00/orgs", "repos_url": "https://api.github.com/users/randomicon00/repos", "events_url": "https://api.github.com/users/randomicon00/events{/privacy}", "received_events_url": "https://api.github.com/users/randomicon00/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2022-03-29T19:30:26Z", "updated_at": "2022-06-20T04:56:20Z", "closed_at": "2022-06-20T04:56:20Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now, `-Ztime-passes` has very long output, most of which is completely useless for determining which part of your crate is slow:\n\n<details>\n\n```\ntime:   0.002; rss:   49MB ->   52MB (   +2MB)  parse_crate\ntime:   0.000; rss:   52MB ->   52MB (   +0MB)  attributes_injection\ntime:   0.000; rss:   52MB ->   52MB (   +0MB)  incr_comp_prepare_session_directory\ntime:   0.000; rss:   52MB ->   52MB (   +0MB)  incr_comp_garbage_collect_session_directories\ntime:   0.000; rss:   52MB ->   52MB (   +0MB)  plugin_loading\ntime:   0.000; rss:   52MB ->   52MB (   +0MB)  plugin_registration\ntime:   0.000; rss:   54MB ->   54MB (   +0MB)  crate_injection\ntime:   0.013; rss:   54MB ->   80MB (  +25MB)  expand_crate\ntime:   0.000; rss:   80MB ->   80MB (   +0MB)  check_unused_macros\ntime:   0.013; rss:   54MB ->   80MB (  +25MB)  macro_expand_crate\ntime:   0.000; rss:   80MB ->   80MB (   +0MB)  maybe_building_test_harness\ntime:   0.000; rss:   80MB ->   80MB (   +0MB)  AST_validation\ntime:   0.000; rss:   80MB ->   80MB (   +0MB)  maybe_create_a_macro_crate\ntime:   0.000; rss:   80MB ->   80MB (   +0MB)  finalize_imports\ntime:   0.000; rss:   80MB ->   80MB (   +0MB)  resolve_access_levels\ntime:   0.000; rss:   80MB ->   80MB (   +0MB)  finalize_macro_resolutions\ntime:   0.001; rss:   80MB ->   82MB (   +2MB)  late_resolve_crate\ntime:   0.000; rss:   82MB ->   82MB (   +0MB)  resolve_main\ntime:   0.000; rss:   82MB ->   82MB (   +0MB)  resolve_check_unused\ntime:   0.000; rss:   82MB ->   82MB (   +0MB)  resolve_report_errors\ntime:   0.000; rss:   82MB ->   82MB (   +0MB)  resolve_postprocess\ntime:   0.001; rss:   80MB ->   82MB (   +2MB)  resolve_crate\ntime:   0.000; rss:   82MB ->   82MB (   +0MB)  complete_gated_feature_checking\ntime:   0.015; rss:   52MB ->   82MB (  +30MB)  configure_and_expand\ntime:   0.000; rss:   82MB ->   82MB (   +0MB)  prepare_outputs\ntime:   0.000; rss:   82MB ->   82MB (   +0MB)  blocked_on_dep_graph_loading\ntime:   0.002; rss:   82MB ->   84MB (   +2MB)  hir_lowering\ntime:   0.000; rss:   84MB ->   84MB (   +0MB)  early_lint_checks\ntime:   0.000; rss:   84MB ->   84MB (   +0MB)  drop_ast\ntime:   0.000; rss:   84MB ->   84MB (   +0MB)  setup_global_ctxt\ntime:   0.000; rss:   87MB ->   87MB (   +0MB)  looking_for_entry_point\ntime:   0.000; rss:   87MB ->   87MB (   +0MB)  looking_for_derive_registrar\ntime:   0.000; rss:   90MB ->   90MB (   +0MB)  unused_lib_feature_checking\ntime:   0.002; rss:   87MB ->   90MB (   +4MB)  misc_checking_1\ntime:   0.002; rss:   90MB ->   94MB (   +4MB)  type_collecting\ntime:   0.000; rss:   94MB ->   94MB (   +0MB)  impl_wf_inference\ntime:   0.000; rss:   94MB ->   94MB (   +0MB)  unsafety_checking\ntime:   0.013; rss:   94MB ->  116MB (  +22MB)  coherence_checking\ntime:   0.004; rss:  116MB ->  118MB (   +2MB)  wf_checking\ntime:   0.007; rss:  118MB ->  124MB (   +6MB)  item_types_checking\ntime:   0.013; rss:  124MB ->  127MB (   +3MB)  item_bodies_checking\ntime:   0.041; rss:   90MB ->  127MB (  +37MB)  type_check_crate\ntime:   0.000; rss:  127MB ->  127MB (   +0MB)  match_checking\ntime:   0.001; rss:  127MB ->  127MB (   +0MB)  liveness_and_intrinsic_checking\ntime:   0.001; rss:  127MB ->  127MB (   +0MB)  misc_checking_2\ntime:   0.016; rss:  127MB ->  129MB (   +2MB)  MIR_borrow_checking\ntime:   0.000; rss:  129MB ->  129MB (   +0MB)  MIR_effect_checking\ntime:   0.000; rss:  129MB ->  129MB (   +0MB)  layout_testing\ntime:   0.005; rss:  129MB ->  130MB (   +1MB)  crate_lints\ntime:   0.000; rss:  130MB ->  130MB (   +0MB)  module_lints\ntime:   0.000; rss:  130MB ->  130MB (   +0MB)  check_lint_expectations\ntime:   0.006; rss:  129MB ->  130MB (   +1MB)  lint_checking\ntime:   0.001; rss:  130MB ->  130MB (   +0MB)  privacy_checking_modules\ntime:   0.008; rss:  129MB ->  130MB (   +1MB)  misc_checking_3\ntime:   0.000; rss:  132MB ->  132MB (   +0MB)  monomorphization_collector_root_collections\ntime:   0.024; rss:  132MB ->  140MB (   +8MB)  monomorphization_collector_graph_walk\ntime:   0.003; rss:  140MB ->  141MB (   +1MB)  partition_and_assert_distinct_symbols\ntime:   0.033; rss:  130MB ->  141MB (  +11MB)  generate_crate_metadata\ntime:   0.000; rss:  141MB ->  141MB (   +0MB)  find_cgu_reuse\ntime:   0.055; rss:  141MB ->  162MB (  +21MB)  codegen_to_LLVM_IR\ntime:   0.060; rss:  141MB ->  162MB (  +21MB)  codegen_crate\ntime:   0.000; rss:  161MB ->  161MB (   +0MB)  assert_dep_graph\ntime:   0.000; rss:  161MB ->  161MB (   +0MB)  check_dirty_clean\ntime:   0.000; rss:  161MB ->  161MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::type_of)\ntime:   0.000; rss:  161MB ->  162MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::generics_of)\ntime:   0.000; rss:  162MB ->  162MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::predicates_of)\ntime:   0.000; rss:  161MB ->  161MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::mir_const_qualif)\ntime:   0.000; rss:  161MB ->  161MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::mir_for_ctfe)\ntime:   0.000; rss:  161MB ->  161MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::optimized_mir)\ntime:   0.000; rss:  161MB ->  160MB (   -1MB)  encode_query_results_for(rustc_query_impl::queries::covered_code_regions)\ntime:   0.000; rss:  160MB ->  160MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::promoted_mir)\ntime:   0.000; rss:  160MB ->  160MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::adt_def)\ntime:   0.000; rss:  160MB ->  160MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::unsafety_check_result)\ntime:   0.000; rss:  160MB ->  160MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::thir_check_unsafety)\ntime:   0.000; rss:  160MB ->  160MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::typeck)\ntime:   0.000; rss:  160MB ->  160MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::diagnostic_only_typeck)\ntime:   0.000; rss:  160MB ->  160MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::used_trait_imports)\ntime:   0.000; rss:  160MB ->  160MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::mir_borrowck)\ntime:   0.000; rss:  160MB ->  160MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::eval_to_allocation_raw)\ntime:   0.000; rss:  160MB ->  159MB (   -1MB)  encode_query_results_for(rustc_query_impl::queries::eval_to_const_value_raw)\ntime:   0.000; rss:  159MB ->  159MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::check_match)\ntime:   0.000; rss:  159MB ->  159MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::symbol_name)\ntime:   0.000; rss:  159MB ->  159MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::codegen_fn_attrs)\ntime:   0.000; rss:  159MB ->  159MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::codegen_fulfill_obligation)\ntime:   0.001; rss:  159MB ->  159MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::specialization_graph_of)\ntime:   0.000; rss:  159MB ->  159MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::adt_drop_tys)\ntime:   0.000; rss:  159MB ->  159MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::adt_significant_drop_tys)\ntime:   0.000; rss:  159MB ->  159MB (   +0MB)  encode_query_results_for(rustc_query_impl::queries::unused_generic_params)\ntime:   0.003; rss:  161MB ->  159MB (   -3MB)  encode_query_results\ntime:   0.004; rss:  161MB ->  159MB (   -3MB)  incr_comp_serialize_result_cache\ntime:   0.004; rss:  161MB ->  159MB (   -3MB)  incr_comp_persist_result_cache\ntime:   0.000; rss:  159MB ->  159MB (   +0MB)  incr_comp_persist_dep_graph\ntime:   0.004; rss:  161MB ->  159MB (   -3MB)  serialize_dep_graph\ntime:   0.003; rss:  159MB ->  115MB (  -44MB)  free_global_ctxt\ntime:   0.061; rss:  146MB ->  115MB (  -30MB)  LLVM_passes(crate)\ntime:   0.000; rss:  114MB ->  114MB (   +0MB)  join_worker_thread\ntime:   0.001; rss:  114MB ->  114MB (   +0MB)  copy_all_cgu_workproducts_to_incr_comp_cache_dir\ntime:   0.002; rss:  115MB ->  114MB (   -1MB)  finish_ongoing_codegen\ntime:   0.000; rss:  114MB ->  114MB (   +0MB)  llvm_dump_timing_file\ntime:   0.000; rss:  114MB ->  114MB (   +0MB)  serialize_work_products\ntime:   0.000; rss:  114MB ->  114MB (   +0MB)  incr_comp_finalize_session_directory\ntime:   0.000; rss:  114MB ->  114MB (   +0MB)  link_binary_check_files_are_writeable\ntime:   0.002; rss:  114MB ->  114MB (   +0MB)  link_rlib\ntime:   0.000; rss:  114MB ->  114MB (   +0MB)  link_binary_remove_temps\ntime:   0.003; rss:  114MB ->  114MB (   +0MB)  link_binary\ntime:   0.003; rss:  114MB ->  114MB (   +0MB)  link_crate\ntime:   0.005; rss:  115MB ->  114MB (   +0MB)  link\ntime:   0.196; rss:   39MB ->   95MB (  +56MB)  total\n```\n\n</details>\n\nIt would be great to make self-profile smarter and only prints passes that take more than x milliseconds (.005 seconds seems like a reasonable cutoff). Then most lines would be trimmed but long running lints would still show up. It will still be possible to see the full information by running `-Zself-profile`, which is recommended for heavy-duty profiling anyway since it gives you more tools around the collected data.\n\n_Originally posted by @jyn514 in https://github.com/rust-lang/rust/issues/79953#issuecomment-743708396_\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"randomicon00\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95444/timeline", "performed_via_github_app": null, "state_reason": "completed"}