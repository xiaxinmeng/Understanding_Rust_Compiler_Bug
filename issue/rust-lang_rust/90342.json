{"url": "https://api.github.com/repos/rust-lang/rust/issues/90342", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90342/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90342/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90342/events", "html_url": "https://github.com/rust-lang/rust/issues/90342", "id": 1037364928, "node_id": "I_kwDOAAsO6M491O7A", "number": 90342, "title": "macOS: Apple linker not aware of the default 10.7 deployment target, causing issues on macOS 12.0 Monterey", "user": {"login": "cormacrelf", "id": 378760, "node_id": "MDQ6VXNlcjM3ODc2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/378760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cormacrelf", "html_url": "https://github.com/cormacrelf", "followers_url": "https://api.github.com/users/cormacrelf/followers", "following_url": "https://api.github.com/users/cormacrelf/following{/other_user}", "gists_url": "https://api.github.com/users/cormacrelf/gists{/gist_id}", "starred_url": "https://api.github.com/users/cormacrelf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cormacrelf/subscriptions", "organizations_url": "https://api.github.com/users/cormacrelf/orgs", "repos_url": "https://api.github.com/users/cormacrelf/repos", "events_url": "https://api.github.com/users/cormacrelf/events{/privacy}", "received_events_url": "https://api.github.com/users/cormacrelf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 123111, "node_id": "MDU6TGFiZWwxMjMxMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-macos", "name": "O-macos", "color": "6e6ec0", "default": false, "description": "Operating system: macOS"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2021-10-27T12:32:24Z", "updated_at": "2021-11-25T19:20:41Z", "closed_at": "2021-11-25T19:20:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### TL;DR for passers-by who just want to compile code on Monterey\r\n\r\nTry this, it might fix an error like `ld: reference to symbol (which has not been assigned an address)` or `ld: Assertion failed: (_mode == modeFinalAddress), function finalAddress, file ld.hpp, line 1190.`\r\n\r\n```\r\nexport MACOSX_DEPLOYMENT_TARGET=10.7\r\ncargo clean\r\ncargo build/run/etc\r\n```\r\n\r\n### Core problem\r\n\r\nmacOS targets are tricky because LLVM behaves differently depending on the MACOSX_DEPLOYMENT_TARGET environment variable, or a version specified in the target triple you tell LLVM to use.\r\n\r\nHowever, another component also uses the deployment target information to customise its output. That is the linker, `ld` from Xcode / the Command Line Tools.\r\n\r\nRustc's default deployment target is 10.7. **It only passes this to LLVM, and not to `ld`.**\r\n\r\nWhen you invoke rustc using `env MACOSX_DEPLOYMENT_TARGET=10.7 cargo/rustc/etc`, it does what it should be doing by default, because it allows that env var to pass through to `ld` (aka `cc`). When you do not provide the environment variable, it results in LLVM using 10.7 but `ld` using a much, much newer one.[^1] I believe this to be a bug in its own right -- you would expect rustc's default deployment target to apply to both the compiler and the Apple linker, but it does not.\r\n\r\n**Solution: set `MACOSX_DEPLOYMENT_TARGET=10.7` if it is not already present in the environment for the `cc` invocation that ultimately calls `ld` to create a finished binary.**\r\n\r\n[^1]: it's not 12.0! It's different, somehow even newer! See the table.\r\n\r\n### Observing this in practice / a linker error repro\r\n\r\nI found this when compiling https://lib.rs/curl on an M1/aarch64 Monterey machine. It involves the `link_section=\"__DATA,__mod_init_func\"` technique [see e.g. here](https://github.com/mmastrac/rust-ctor#under-the-hood). The cause of the error is that with the 'much, much newer'  deployment target that `ld` uses by default, the linker transforms this into something completely different, and it prevents linking to the static function pointer, something that works with any deployment target set.\r\n\r\nBut without further ado, this fails with a linker error if you build it in debug mode on macOS 12.0, using Xcode 13 or the Command Line Tools. It is very similar to [this code](https://github.com/alexcrichton/curl-rust/blob/df64ee4fcb1e3e2927d04e6bb6d8a1c0feedc844/src/lib.rs#L93-L101) in curl-rust.\r\n\r\n```rust\r\n// lib.rs\r\n#[cfg_attr(target_os = \"macos\", link_section = \"__DATA,__mod_init_func\")]\r\n#[used]\r\nstatic INIT_FUNC: extern \"C\" fn() = init_func;\r\n\r\nextern \"C\" fn init_func() {\r\n    println!(\"And if the band you're in starts playing different tunes\");\r\n    println!(\"I'll see you on the dark side of the main.\\n\");\r\n}\r\n\r\npub fn init_manually() {\r\n    INIT_FUNC();\r\n}\r\n```\r\n```rust\r\n// main.rs\r\nfn main() {\r\n    println!(\"Hello from main()\\n\");\r\n    // this should simply print the message a second time.\r\n    // including this line works around <https://github.com/rust-lang/rust/issues/47384> but it\r\n    // causes a linker error, when compiling the call to INIT_FUNC\r\n    mod_init_func::init_manually();\r\n}\r\n```\r\n\r\n```sh\r\ncargo build # fails with ld error, below\r\ncargo build --release # works fine, because LLVM has managed to inline `init_func` into `init_manually`.\r\n```\r\n\r\nThe error message is a bit fragile, it seems to depend on whether you are compiling a finished binary or some intermediate crate. When compiling a crate that depends on `curl`, you get this:\r\n\r\n```\r\n$ cargo build\r\n\r\n... long cc -arch arm64 invocation\r\n...\r\n  = note: ld: reference to symbol (which has not been assigned an address) __ZN4curl4init9INIT_CTOR17h97cc33cf050cb462E in '__ZN4curl4init17ha644d831c2a57f65E' from /Users/cormac/git/tryout/libcurl-monterey/target/debug/deps/libcurl-0f9cbb7dde66dd88.rlib(curl-0f9cbb7dde66dd88.curl.0b6dcf6e-cgu.2.rcgu.o) for architecture arm64\r\n          clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\nBut with this repro or `cargo test` in the curl-rust repo, you get this (very similar in spirit):\r\n\r\n```\r\n  = note: 0  0x100340224  __assert_rtn + 128\r\n          1  0x1003457e8  ld::tool::OutputFile::addressAndTarget(ld::Internal const&, ld::Fixup const*, ld::Atom const**) (.cold.1) + 0\r\n          2  0x10027f104  ld::tool::OutputFile::addressOf(ld::Internal const&, ld::Fixup const*, ld::Atom const**) + 252\r\n          3  0x100280478  ld::tool::OutputFile::applyFixUps(ld::Internal&, unsigned long long, ld::Atom const*, unsigned char*) + 1568\r\n          4  0x100285540  ld::tool::OutputFile::writeAtoms(ld::Internal&, unsigned char*) + 356\r\n          5  0x10027cfa4  ld::tool::OutputFile::writeOutputFile(ld::Internal&) + 408\r\n          6  0x100275adc  ld::tool::OutputFile::write(ld::Internal&) + 216\r\n          7  0x1002031d8  main + 584\r\n          A linker snapshot was created at:\r\n                /tmp/mod_init_func-0236ccc15f993087-2021-09-27-224626.ld-snapshot\r\n          ld: Assertion failed: (_mode == modeFinalAddress), function finalAddress, file ld.hpp, line 1190.\r\n          clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\n### Bonus: Linkers and pre-main init hooks in Mach-O\r\n\r\nThere appear to be some changes around this recently. If you compile the equivalent C code, you actually get the exact same problem.\r\n\r\nUsing ld from Apple LLVM 13.0.0 on a Monterey machine, linking a [C file](https://gist.github.com/11dcf1787fcc284ad69d28d5932e1928) with `__attribute__((section(\"__DATA,__mod_init_func\"))) typeof(myinit) *__init = myinit;`\r\n\r\n| MACOSX_DEPLOYMENT_TARGET | where it ends up | runs before main | you can call `__init(...)` as a function from main |\r\n| -- | -- | -- | --|\r\n| 10.7 through 10.14 | `__DATA,__mod_init_func` | \u2705 | \u2705 |\r\n| 10.15 through 12.0 | `__DATA_CONST,__mod_init_func` | \u2705 | \u2705 |\r\n| not set | `__TEXT,__init_offsets`, with a completely different format | \u2705 | \u274c - \"ld: reference to symbol (which has not been assigned an address) ___init in '_main'\" |\r\n\r\nIf you tell clang to link the static in the `__DATA_CONST,__mod_init_func` section instead, then it doesn't work at all, it doesn't run before main. Clearly the \"API\" is to use the well-known __DATA,__mod_init_func, and the only guarantee is that it will execute that function before main.\r\n\r\nThe above particular Rust code not compiling is therefore not really a rustc bug in its own right. Every platform has its own way of doing this, and \"newer macOS\" is just another variation that needs to be added. Hacky platform-specific linker section stuff is almost certainly out of scope for stable/guaranteed behaviour. To do this correctly I think you would need a `build.rs` that *always* has access to a `MACOSX_DEPLOYMENT_TARGET` env variable, i.e. cargo should set the env var to 10.7 if it is not already set. Then you could set some cfgs in build.rs to determine which link section to add when the target_os is macos. That solution also works for informing `ld`, the only difference being build.rs might get it from cargo.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.56.0 (09c42c458 2021-10-18)\r\nbinary: rustc\r\ncommit-hash: 09c42c45858d5f3aedfa670698275303a3d19afa\r\ncommit-date: 2021-10-18\r\nhost: aarch64-apple-darwin\r\nrelease: 1.56.0\r\nLLVM version: 13.0.0\r\n```\r\n\r\nThis happens in beta/nightly-2021-10-26 too.\r\n\r\nld version:\r\n\r\n```\r\nld -v\r\n@(#)PROGRAM:ld  PROJECT:ld64-711\r\nBUILD 18:11:19 Aug  3 2021\r\nconfigured to support archs: armv6 armv7 armv7s arm64 arm64e arm64_32 i386 x86_64 x86_64h armv6m armv7k armv7m armv7em\r\nLTO support using: LLVM version 13.0.0, (clang-1300.0.29.3) (static support for 27, runtime is 27)\r\nTAPI support using: Apple TAPI version 13.0.0 (tapi-1300.0.6.5)\r\n```\r\n\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"hkratz\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90342/reactions", "total_count": 31, "+1": 21, "-1": 0, "laugh": 1, "hooray": 4, "confused": 0, "heart": 2, "rocket": 2, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90342/timeline", "performed_via_github_app": null, "state_reason": "completed"}