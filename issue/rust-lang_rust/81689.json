{"url": "https://api.github.com/repos/rust-lang/rust/issues/81689", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81689/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81689/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81689/events", "html_url": "https://github.com/rust-lang/rust/issues/81689", "id": 799922022, "node_id": "MDU6SXNzdWU3OTk5MjIwMjI=", "number": 81689, "title": "Incorrect Compiler Suggestions when Missing Trait Dependencies on PartialEq", "user": {"login": "Mercerenies", "id": 8659281, "node_id": "MDQ6VXNlcjg2NTkyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/8659281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mercerenies", "html_url": "https://github.com/Mercerenies", "followers_url": "https://api.github.com/users/Mercerenies/followers", "following_url": "https://api.github.com/users/Mercerenies/following{/other_user}", "gists_url": "https://api.github.com/users/Mercerenies/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mercerenies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mercerenies/subscriptions", "organizations_url": "https://api.github.com/users/Mercerenies/orgs", "repos_url": "https://api.github.com/users/Mercerenies/repos", "events_url": "https://api.github.com/users/Mercerenies/events{/privacy}", "received_events_url": "https://api.github.com/users/Mercerenies/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-02-03T03:07:57Z", "updated_at": "2021-02-03T19:00:31Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n\r\ntrait MyTrait {}\r\n\r\nstruct Foo<T>(T);\r\nstruct Example<T>(Foo<T>);\r\n\r\nimpl<T : MyTrait> PartialEq for Foo<T> {\r\n  fn eq(&self, other: &Self) -> bool {\r\n    false\r\n  }\r\n}\r\n\r\nimpl<T> PartialEq for Example<T> {\r\n  fn eq(&self, other: &Self) -> bool {\r\n    self.0 == other.0\r\n  }\r\n}\r\n\r\nfn main() {}\r\n\r\n```\r\n\r\nI expected to see this happen: The compilation should fail, possibly suggesting that I constrain my `PartialEq for Example<T>` to require `T : MyTrait`.\r\n\r\nInstead, this happened: The compilation does indeed fail, but with the following message.\r\n```\r\nerror[E0369]: binary operation `==` cannot be applied to type `Foo<T>`\r\n  --> rustbug.rs:15:12\r\n   |\r\n15 |     self.0 == other.0\r\n   |     ------ ^^ ------- Foo<T>\r\n   |     |\r\n   |     Foo<T>\r\n   |\r\nhelp: consider restricting type parameter `T`\r\n   |\r\n13 | impl<T: std::cmp::PartialEq> PartialEq for Example<T> {\r\n   |       ^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\nNotably, Rust unhelpfully suggests that I constrain my instance to `T : PartialEq`. Amusingly, if I follow this advice, Rust will subsequently suggest that I require `PartialEq` *twice*.\r\n```\r\nhelp: consider further restricting this bound\r\n   |\r\n13 | impl<T : std::cmp::PartialEq + std::cmp::PartialEq> PartialEq for Example<T> {\r\n   |                              ^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nThe same behavior applies if we try to derive `PartialEq` as\r\n```\r\n#[derive(PartialEq)]\r\nstruct Example<T>(Foo<T>);\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nbinary: rustc\r\ncommit-hash: e1884a8e3c3e813aada8254edfa120e85bf5ffca\r\ncommit-date: 2020-12-29\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.49.0\r\n```\r\nAlso reproduced the same error on Nightly:\r\n```\r\nbinary: rustc\r\ncommit-hash: 04caa632dd10c2bf64b69524c7f9c4c30a436877\r\ncommit-date: 2021-01-30\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.51.0-nightly\r\nLLVM version: 11.0.1\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n(N/A Error happens at compile-time)\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81689/timeline", "performed_via_github_app": null, "state_reason": null}