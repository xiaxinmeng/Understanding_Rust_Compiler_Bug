{"url": "https://api.github.com/repos/rust-lang/rust/issues/57831", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57831/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57831/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57831/events", "html_url": "https://github.com/rust-lang/rust/issues/57831", "id": 401742062, "node_id": "MDU6SXNzdWU0MDE3NDIwNjI=", "number": 57831, "title": "Diagnostic: no EMMS instruction before call", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 55301991, "node_id": "MDU6TGFiZWw1NTMwMTk5MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86", "name": "O-x86", "color": "6e6ec0", "default": false, "description": "Target: x86 processors"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-22T12:29:09Z", "updated_at": "2021-02-09T17:24:39Z", "closed_at": "2021-02-09T17:24:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The Intel compiler has an extremely useful warning (https://software.intel.com/en-us/articles/cdiag964) that triggers if MMX code interfaces with x87 code without an EMMS instruction before the x87 code. \r\n\r\nExample ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=b4ae6f0f7c5de1050d03cb6e8a38201b)):\r\n\r\n```rust\r\npub fn init(_x: i32);\r\nfn main() {\r\n    unsafe {\r\n        let m0 = _mm_cvtsi32_si64(1);\r\n        let m1 = _mm_cvtsi32_si64(2);\r\n        let mut m2 = _mm_cvtsi32_si64(4);\r\n\r\n        m2 = _mm_add_pi8(m0, m1);\r\n        let value = _mm_cvtsi64_si32(m2);\r\n\r\n        // Without a call to _mm_empty()\r\n        // this program has UB\r\n        //_mm_empty();\r\n        init(value);\r\n    }\r\n}\r\n```\r\n\r\nWithout the call to `_mm_empty` no `emms` instruction is emitted, and the program has undefined behavior. \r\n\r\nIt would be nice if rustc could emit the following error message:\r\n\r\n```\r\ninit(value);\r\n^^^^^^^^^^ error: no EMMS instruction before call\r\n\r\nnote: Use the EMMS instruction (e.g.  by calling the _mm_empty() intrinsic ) \r\nafter the MMX instructions immediately before the x87 code to restore \r\nthe Floating-point status on the CPU.\r\n```\r\n\r\nThere are a couple of common ways to emit an EMMS instruction:\r\n\r\n* using `{core, std}::arch::{x86, x86_64}::{_mm_empty(), _m_empty()}`\r\n* using `asm!(\"emms\" : : : \"volatile\")`;\r\n\r\nThe diagnostic should not be emitted if an EMMS instruction is emitted right before a call to an x87 function.\r\n\r\n---\r\n\r\nNote, LLVM, by design, does not emit EMMS instructions when they are needed (https://bugs.llvm.org/show_bug.cgi?id=1838). Instead, the user generating LLVM-IR is responsible of doing so manually when necessary. ", "closed_by": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57831/timeline", "performed_via_github_app": null, "state_reason": "completed"}