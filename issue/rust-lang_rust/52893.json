{"url": "https://api.github.com/repos/rust-lang/rust/issues/52893", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52893/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52893/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52893/events", "html_url": "https://github.com/rust-lang/rust/issues/52893", "id": 346034121, "node_id": "MDU6SXNzdWUzNDYwMzQxMjE=", "number": 52893, "title": "Where clause `Binder(<...>)` was applicable to `Obligation(predicate=Binder(TraitPredicate(<...>)),depth=1)` but now is not", "user": {"login": "akiselev", "id": 653604, "node_id": "MDQ6VXNlcjY1MzYwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/653604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akiselev", "html_url": "https://github.com/akiselev", "followers_url": "https://api.github.com/users/akiselev/followers", "following_url": "https://api.github.com/users/akiselev/following{/other_user}", "gists_url": "https://api.github.com/users/akiselev/gists{/gist_id}", "starred_url": "https://api.github.com/users/akiselev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akiselev/subscriptions", "organizations_url": "https://api.github.com/users/akiselev/orgs", "repos_url": "https://api.github.com/users/akiselev/repos", "events_url": "https://api.github.com/users/akiselev/events{/privacy}", "received_events_url": "https://api.github.com/users/akiselev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}, {"id": 1791937891, "node_id": "MDU6TGFiZWwxNzkxOTM3ODkx", "url": "https://api.github.com/repos/rust-lang/rust/labels/ICEBreaker-Cleanup-Crew", "name": "ICEBreaker-Cleanup-Crew", "color": "74cc28", "default": false, "description": "Helping to \"clean up\" bugs with minimal examples and bisections"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-07-31T04:50:07Z", "updated_at": "2021-10-13T16:42:53Z", "closed_at": "2021-10-13T16:42:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**EDITED**: MCVE is here: https://github.com/rust-lang/rust/issues/52893#issuecomment-602111959\r\n\r\n```\r\nerror: internal compiler error: librustc\\traits\\select.rs:2469: Where clause `Binder(<Class<P, T> as At<Name>>)` was applicable to `Obligation(predicate=Binder(TraitPredicate(<Class<_, _> as At<_>>)),depth=1)` but now is not\r\n\r\nthread 'main' panicked at 'Box<Any>', librustc_errors\\lib.rs:554:9\r\nstack backtrace:\r\n   0: <u128 as compiler_builtins::int::Int>::min_value\r\n   1: <std::sync::mpsc::RecvTimeoutError as std::error::Error>::cause\r\n   2: std::panicking::take_hook\r\n   3: std::panicking::take_hook\r\n   4: rustc::ty::structural_impls::<impl rustc::ty::context::Lift<'tcx> for rustc::middle::const_val::ErrKind<'a>>::lift_to_tcx\r\n   5: std::panicking::rust_panic_with_hook\r\n   6: <rustc_errors::diagnostic::SubDiagnostic as core::fmt::Debug>::fmt\r\n   7: rustc_errors::Handler::bug\r\n   8: rustc::mir::interpret::UndefMask::grow\r\n   9: rustc::ty::context::tls::track_diagnostic\r\n  10: rustc::ty::context::tls::track_diagnostic\r\n  11: rustc::ty::context::tls::track_diagnostic\r\n  12: rustc::session::bug_fmt\r\n  13: rustc::session::bug_fmt\r\n  14: rustc::traits::select::SelectionContext::coinductive_predicate\r\n  15: rustc::traits::select::SelectionContext::select\r\n  16: rustc::infer::InferCtxt::commit_from\r\n  17: rustc::traits::project::normalize_projection_type\r\n  18: rustc::traits::project::normalize_projection_type\r\n  19: <rustc::traits::project::AssociatedTypeNormalizer<'a, 'b, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  20: <rustc::hir::intravisit::IdRange as core::fmt::Debug>::fmt\r\n  21: rustc::ty::fast_reject::simplify_type\r\n  22: rustc::ty::fast_reject::simplify_type\r\n  23: rustc::traits::project::poly_project_and_unify_type\r\n  24: rustc::ty::context::TyCtxt::_intern_canonical_var_infos\r\n  25: <unknown>\r\n  26: <unknown>\r\n  27: rustc::traits::select::SelectionContext::coinductive_predicate\r\n  28: rustc::traits::select::SelectionContext::coinductive_predicate\r\n  29: rustc::traits::select::SelectionContext::select\r\n  30: rustc::infer::InferCtxt::commit_from\r\n  31: rustc::traits::project::normalize_projection_type\r\n  32: rustc::traits::project::normalize_projection_type\r\n  33: <rustc::traits::project::AssociatedTypeNormalizer<'a, 'b, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  34: <rustc_typeck::coherence::inherent_impls_overlap::InherentOverlapChecker<'a, 'tcx> as rustc::hir::itemlikevisit::ItemLikeVisitor<'v>>::visit_trait_item\r\n  35: <rustc_typeck::check::method::probe::ProbeContext<'a, 'gcx, 'tcx> as core::ops::deref::Deref>::deref\r\n  36: <rustc_typeck::check::method::probe::ProbeContext<'a, 'gcx, 'tcx> as core::ops::deref::Deref>::deref\r\n  37: <rustc_typeck::check::method::probe::ProbeContext<'a, 'gcx, 'tcx> as core::ops::deref::Deref>::deref\r\n  38: rustc_typeck::hir_trait_to_predicates\r\n  39: <unknown>\r\n  40: <unknown>\r\n  41: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  42: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  43: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  44: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  45: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  46: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  47: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  48: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  49: <rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx> as rustc_typeck::astconv::AstConv<'gcx, 'tcx>>::record_ty\r\n  50: <rustc_typeck::check::GatherLocalsVisitor<'a, 'gcx, 'tcx> as rustc::hir::intravisit::Visitor<'gcx>>::visit_pat\r\n  51: <rustc_typeck::coherence::inherent_impls_overlap::InherentOverlapChecker<'a, 'tcx> as rustc::hir::itemlikevisit::ItemLikeVisitor<'v>>::visit_trait_item\r\n  52: <rustc_typeck::check::CheckItemTypesVisitor<'a, 'tcx> as rustc::hir::itemlikevisit::ItemLikeVisitor<'tcx>>::visit_item\r\n  53: rustc::ty::maps::<impl rustc::ty::maps::config::QueryConfig<'tcx> for rustc::ty::maps::queries::typeck_tables_of<'tcx>>::compute\r\n  54: rustc::ty::context::tls::track_diagnostic\r\n  55: rustc::dep_graph::graph::DepGraph::assert_ignored\r\n  56: rustc::ty::context::tls::track_diagnostic\r\n  57: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_mark_green_and_read\r\n  58: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_mark_green_and_read\r\n  59: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_mark_green_and_read\r\n  60: <rustc_typeck::check::Diverges as core::fmt::Debug>::fmt\r\n  61: <rustc_typeck::check::CheckItemTypesVisitor<'a, 'tcx> as rustc::hir::itemlikevisit::ItemLikeVisitor<'tcx>>::visit_item\r\n  62: rustc::ty::context::tls::track_diagnostic\r\n  63: rustc::dep_graph::graph::DepGraph::assert_ignored\r\n  64: rustc::ty::context::tls::track_diagnostic\r\n  65: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_mark_green_and_read\r\n  66: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_mark_green_and_read\r\n  67: rustc_typeck::check_crate\r\n  68: <env_logger::Logger as log::Log>::flush\r\n  69: <rustc_driver::pretty::UserIdentifiedItem as core::fmt::Debug>::fmt\r\n  70: <unknown>\r\n  71: rustc_driver::driver::compile_input\r\n  72: rustc_driver::run_compiler\r\n  73: rustc_driver::driver::build_output_filenames\r\n  74: <unknown>\r\n  75: rustc_driver::driver::build_output_filenames\r\n  76: _rust_maybe_catch_panic\r\n  77: rustc_driver::profile::trace::write_style\r\n  78: rustc_driver::main\r\n  79: <unknown>\r\n  80: std::panicking::update_panic_count\r\n  81: _rust_maybe_catch_panic\r\n  82: std::rt::lang_start_internal\r\n  83: <unknown>\r\n  84: <unknown>\r\n  85: BaseThreadInitThunk\r\n  86: RtlUserThreadStart\r\nquery stack during panic:\r\n#0 [typeck_tables_of] processing `<Class<P, T> as AddClass<Name, F>>::init`\r\n#1 [typeck_item_bodies] type-checking all item bodies\r\nend of query stack\r\nerror: aborting due to previous error\r\n\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.27.2 (58cc626de 2018-07-18) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: -C debuginfo=2 -C incremental --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n```\r\nwith\r\n\r\n```\r\nrustc 1.27.2 (58cc626de 2018-07-18)\r\nbinary: rustc\r\ncommit-hash: 58cc626de3301192d5d8c6dcbde43b5b44211ae2\r\ncommit-date: 2018-07-18\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.27.2\r\nLLVM version: 6.0\r\n```\r\n\r\nFrom the code (Offending implementation at the top, specifically `<X as Entry>::Data: Fn(Y) -> Class<P, OLIST>`:\r\n\r\n```rust\r\nextern crate frunk;\r\nextern crate frunk_core;\r\n\r\nuse std::marker::PhantomData;\r\nuse frunk::*;\r\nuse frunk::prelude::*;\r\n\r\nimpl<P, T, Name, F, OLIST: HList, X, Y, FINAL> AddClass<Name, F> for Class<P, T> \r\nwhere\r\n    Self: At<Name>,\r\n    Self::AtRes: Entry<Data=T>,\r\n    X: Entry,\r\n    F: Fn(Y) ->OLIST,\r\n    T: Push<(PhantomData<HCons<Name, HCons<P, HNil>>>, F)>,\r\n    <X as Entry>::Data: Fn(Y) -> Class<P, OLIST>,\r\n    <Class<P, T> as At<Name>>::AtRes: Push<(Path<Hlist![Name, P]>, F)>,\r\n    <<Class<P, T> as At<Name>>::AtRes as Push<(Path<Hlist![Name, P]>, F)>>::PushRes: for<'this> ToRef<'this, Output=HCons<X, Y>> + Push<OLIST>,\r\n    <<<Class<P, T> as At<Name>>::AtRes as Push<(Path<HCons<Name, HCons<P, HNil>>>, F)>>::PushRes as Push<OLIST>>::PushRes: Entry<Data=FINAL>\r\n{\r\n    type Output = Class<P, FINAL>;\r\n\r\n    fn init(self, func: F) -> Self::Output {\r\n        let builder = self.at();\r\n        let builder = builder.push((Path::new(), func));\r\n        let output = {\r\n            let refs = builder.to_ref();\r\n            let func = refs.head.borrow_data();\r\n            func(refs.tail)\r\n        };\r\n        let final_data = builder.push(output);\r\n        Class {\r\n            path: Path::new(),\r\n            data: final_data.get_data()\r\n        }\r\n    }\r\n}\r\n\r\nstruct Class<P, T> {\r\n    path: Path<P>,\r\n    data: T\r\n}\r\n\r\ntrait At<Name> {\r\n    type AtRes;\r\n\r\n    fn at(self) -> Self::AtRes;\r\n}\r\n\r\ntrait Push<T> {\r\n    type PushRes;\r\n\r\n    fn push(self, other: T) -> Self::PushRes;\r\n}\r\n\r\nimpl<T> Push<T> for HNil {\r\n    type PushRes = HCons<T, HNil>;\r\n\r\n    fn push(self, other: T) -> HCons<T, HNil> {\r\n        HCons {\r\n            head: other,\r\n            tail: HNil\r\n        }\r\n    }\r\n}\r\n\r\nimpl<T, HEAD, TAIL> Push<T> for HCons<HEAD, TAIL> {\r\n    type PushRes = HCons<T, HCons<HEAD, TAIL>>;\r\n\r\n    fn push(self, other: T) -> HCons<T, HCons<HEAD, TAIL>> {\r\n        HCons {\r\n            head: other,\r\n            tail: self\r\n        }\r\n    }\r\n}\r\n\r\nimpl<Name, P, T> At<Name> for Class<P, T> {\r\n    type AtRes = Class<HCons<Name, P>, T>;\r\n\r\n    fn at(self) -> Class<HCons<Name, P>, T> {\r\n        Class {\r\n            path: Path::new(),\r\n            data: self.data\r\n        }\r\n    }\r\n}\r\n\r\ntrait AddClass<Name, F>: At<Name> {\r\n    type Output;\r\n\r\n    fn init(self, func: F) -> Self::Output;\r\n}\r\n\r\ntrait Entry {\r\n    type Path;\r\n    type Data;\r\n\r\n    fn get_data(self) -> Self::Data;\r\n    fn borrow_data(&self) -> &Self::Data;\r\n}\r\n\r\nimpl<N, T> Entry for (N, T) {\r\n    type Path = N;\r\n    type Data = T;\r\n\r\n    fn get_data(self) -> Self::Data {\r\n        self.1\r\n    }\r\n\r\n    fn borrow_data(&self) -> &Self::Data {\r\n        &self.1\r\n    }\r\n}\r\n\r\nimpl<N, T> Entry for Class<N, T> {\r\n    type Path = N;\r\n    type Data = T;\r\n\r\n    fn get_data(self) -> Self::Data {\r\n        self.data\r\n    }\r\n\r\n    fn borrow_data(&self) -> &Self::Data {\r\n        &self.data\r\n    }\r\n}\r\n\r\nimpl<'this, P, T: 'this> ToRef<'this> for Class<P, T>\r\nwhere\r\n    <Class<P, T> as Entry>::Data: ToRef<'this>,\r\n    <T as frunk_core::traits::ToRef<'this>>::Output: 'this,\r\n    T: frunk_core::traits::ToRef<'this>,\r\n{\r\n    type Output = <<Self as Entry>::Data as ToRef<'this>>::Output;\r\n\r\n    fn to_ref(&'this self) -> <T as ToRef<'this>>::Output {\r\n        self.borrow_data().to_ref()\r\n    }\r\n}\r\n\r\nimpl<P: HList, T> Class<P, T> {\r\n    fn at<Name>(self) -> Class<HCons<Name, P>, T> {\r\n        Class {\r\n            path: Path::new(),\r\n            data: self.data\r\n        }\r\n    }\r\n\r\n    fn with<Name, F>(self, constructor: F) -> <Self as AddClass<Name, F>>::Output\r\n    where \r\n        Self: AddClass<Name, F>\r\n    {\r\n        self.init(constructor)\r\n    }\r\n\r\n    fn from<F>(self, constructor: F) -> <Self as AddClass<P, F>>::Output\r\n    where \r\n        Self: AddClass<P, F>\r\n    {\r\n        self.init(constructor)\r\n    }\r\n}\r\n\r\n#[derive(Copy, Clone, Debug)]\r\npub struct Path<T> {\r\n    path: PhantomData<T>\r\n}\r\n\r\nimpl<P> Path<P> {\r\n    pub fn new() -> Path<P> {\r\n        Path {\r\n            path: PhantomData\r\n        }\r\n    }\r\n}\r\n\r\npub struct VEntry<P, T> {\r\n    path: Path<P>,\r\n    data: PhantomData<T>\r\n}\r\n```\r\n\r\nChanging `F: Fn(Y) -> OLIST` to `F: Fn(Y) -> Class<P, OLIST>` does not fix the crash. Changing `<X as Entry>::Data: Fn(Y) -> Class<P, OLIST>` to `<X as Entry>::Data: Fn(Y) -> OLIST` compiles. The latter is the correct implementation and I discovered this crash in the middle of some refactoring so I did not expect anything specific to happen except a type checking error. \r\n\r\nThe crash also happens in nightly 2018-7-23 and 2018-7-30.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52893/timeline", "performed_via_github_app": null, "state_reason": "completed"}