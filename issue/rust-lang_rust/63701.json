{"url": "https://api.github.com/repos/rust-lang/rust/issues/63701", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63701/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63701/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63701/events", "html_url": "https://github.com/rust-lang/rust/issues/63701", "id": 482307427, "node_id": "MDU6SXNzdWU0ODIzMDc0Mjc=", "number": 63701, "title": "Unhelpful error message E0505 for self-referencing lifetime constraint", "user": {"login": "upsuper", "id": 333750, "node_id": "MDQ6VXNlcjMzMzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/333750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/upsuper", "html_url": "https://github.com/upsuper", "followers_url": "https://api.github.com/users/upsuper/followers", "following_url": "https://api.github.com/users/upsuper/following{/other_user}", "gists_url": "https://api.github.com/users/upsuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/upsuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/upsuper/subscriptions", "organizations_url": "https://api.github.com/users/upsuper/orgs", "repos_url": "https://api.github.com/users/upsuper/repos", "events_url": "https://api.github.com/users/upsuper/events{/privacy}", "received_events_url": "https://api.github.com/users/upsuper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-19T13:18:48Z", "updated_at": "2019-08-19T23:59:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code:\r\n```rust\r\ntrait Handler {}\r\nstruct Easy2<H: Handler>(H);\r\n\r\nstruct Context<'r>(Option<&'r [u8]>);\r\nimpl<'r> Handler for &'r mut Context<'r> {}\r\n\r\nfn perform<'a>(ctx: &'a mut Context<'a>) {\r\n    Easy2(ctx);\r\n}\r\nfn build_response(_ctx: Context) {}\r\n\r\nfn call() {\r\n    let mut ctx = Context(None);\r\n    perform(&mut ctx);\r\n    build_response(ctx);\r\n}\r\n```\r\n\r\nRust reports:\r\n```\r\nerror[E0505]: cannot move out of `ctx` because it is borrowed\r\n  --> src/lib.rs:15:20\r\n   |\r\n14 |     perform(&mut ctx);\r\n   |             -------- borrow of `ctx` occurs here\r\n15 |     build_response(ctx);\r\n   |                    ^^^\r\n   |                    |\r\n   |                    move out of `ctx` occurs here\r\n   |                    borrow later used here\r\n```\r\n\r\nThis seems to be a confusing error, and doesn't help diagnosing where the problem is. The real fix here is to remove the lifetime annotations on `perform` and have `impl Handler` use different lifetimes for the two places, but this is totally unobvious from the error message.\r\n\r\nIt might be more helpful if it can point out that this is still borrowed because `ctx` forms a self-reference due to `<'a>(ctx: &'a mut Context<'a>)` and the field.\r\n\r\nAnd it might also be useful to warn `impl<'r> Handler for &'r mut Context<'r>`. I'm not sure whether a declaration like this where self-reference can arise has any legit use cases. It might be helpful to suggest people giving them two different lifetimes.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63701/timeline", "performed_via_github_app": null, "state_reason": null}