{"url": "https://api.github.com/repos/rust-lang/rust/issues/103241", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103241/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103241/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103241/events", "html_url": "https://github.com/rust-lang/rust/issues/103241", "id": 1414880076, "node_id": "I_kwDOAAsO6M5UVVtM", "number": 103241, "title": "Divergent suggestions to \"borrow\" when I actually need to path to the method via the reference type", "user": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-10-19T12:25:22Z", "updated_at": "2022-10-19T21:33:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=df5c66b96626da8c8ca63b5969f4494f)):\r\n\r\n```rust\r\nstruct S;\r\n\r\ntrait T {\r\n    fn g(self: Self) -> u32;\r\n}\r\n\r\nimpl T for &S {\r\n    fn g(self: Self) -> u32 { 3 }\r\n}\r\n\r\nfn main() {\r\n    let s = S;\r\n    let f = S::g;\r\n    assert_eq!(f(&s), 3);\r\n}\r\n```\r\n\r\n### Current output\r\n\r\n```\r\nerror[E0277]: the trait bound `S: T` is not satisfied\r\n  --> src/main.rs:13:13\r\n   |\r\n13 |     let f = S::g;\r\n   |             ^^^^ the trait `T` is not implemented for `S`\r\n   |\r\nhelp: consider borrowing here\r\n   |\r\n13 |     let f = &S::g;\r\n   |             +\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:14:18\r\n   |\r\n14 |     assert_eq!(f(&s), 3);\r\n   |                - ^^ expected struct `S`, found `&S`\r\n   |                |\r\n   |                arguments to this function are incorrect\r\n   |\r\nnote: associated function defined here\r\n  --> src/main.rs:4:8\r\n   |\r\n4  |     fn g(self: Self) -> u32;\r\n   |        ^\r\nhelp: consider removing the borrow\r\n   |\r\n14 -     assert_eq!(f(&s), 3);\r\n14 +     assert_eq!(f(s), 3);\r\n   |\r\n```\r\n\r\nNeither of these suggestions gets me any closer to a working program:\r\n* The first suggestion doesn't solve the problem, because it just tries to borrow the function that can't be found.\r\n* The first suggestion diverges. The compiler will keep suggesting to add more `&` in the same place.\r\n* The second suggestion, on its own, makes the second error go away (somehow). But it has to be reverted once I apply the actual fix for the first error.\r\n\r\n### Suggested output\r\n\r\n```\r\nerror[E0277]: the trait bound `S: T` is not satisfied\r\n  --> src/main.rs:13:13\r\n   |\r\n13 |     let f = S::g;\r\n   |             ^^^^ the trait `T` is not implemented for `S`\r\n   |\r\nnote: required because `g` is a method of trait `T`\r\nhelp: the trait `T` is implemented for the reference type, `&S`\r\nhelp: consider finding the method `g` via the reference type, `&S`\r\n   |\r\n13 |     let f = <&S>::g;\r\n   |             ++ + \r\n   |\r\n```\r\n\r\n* The note explains why the error message refers to`T`.\r\n* The suggestion fixes the path, and adds the angle brackets required to write a path segment that starts with `&`.\r\n\r\nThere are several alternatives here: `<&S>::g`, `T::g`, and the fully qualified path `<&S as T>::g` all work. I figure `<&S>::g` is the best suggestion because it is closest to the original code.\r\n\r\n### About that second error\r\n\r\nWhere is that second error coming from? Would it make sense to silence it? It's weird to see a type error regarding a function that doesn't exist (which is how I interpret the first message).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103241/timeline", "performed_via_github_app": null, "state_reason": null}