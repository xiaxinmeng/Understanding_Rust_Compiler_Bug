{"url": "https://api.github.com/repos/rust-lang/rust/issues/46758", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46758/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46758/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46758/events", "html_url": "https://github.com/rust-lang/rust/issues/46758", "id": 282575718, "node_id": "MDU6SXNzdWUyODI1NzU3MTg=", "number": 46758, "title": "Option::map_or generates a bunch of garbage IR", "user": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-12-15T23:32:25Z", "updated_at": "2020-01-31T22:49:48Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See e.g.\r\n```Rust\r\nfn main() {\r\n    let x = Some(\"hello\".to_owned());\r\n    x.map_or(0, |_| 1);\r\n}\r\n```\r\n\r\nWhich generates this initial IR:\r\n```\r\n; <core::option::Option<T>>::map_or\r\n; Function Attrs: inlinehint uwtable\r\ndefine internal i32 @\"_ZN38_$LT$core..option..Option$LT$T$GT$$GT$6map_or17hf55f2f906b05703eE\"(%\"core::option::Option<alloc::string::String>\"* noalias nocapture dereferenceable(24) %self, i32 %default) unnamed_addr #0 personality i32 (i32, i32, i64, %\"unwind::libunwind::_Unwind_Exception\"*, %\"unwind::libunwind::_Unwind_Context\"*)* @rust_eh_personality {\r\nstart:\r\n  %personalityslot = alloca { i8*, i32 }, align 8\r\n  %_12 = alloca i8, align 1\r\n  %_11 = alloca i8, align 1\r\n  %_10 = alloca i8, align 1\r\n  %_8 = alloca %\"alloc::string::String\", align 8\r\n  %_7 = alloca { [0 x i8], %\"alloc::string::String\", [0 x i8] }, align 8\r\n  %t = alloca %\"alloc::string::String\", align 8\r\n  %_0 = alloca i32, align 4\r\n  store i8 0, i8* %_12\r\n  store i8 0, i8* %_10\r\n  store i8 0, i8* %_11\r\n  store i8 1, i8* %_10\r\n  store i8 1, i8* %_11\r\n  store i8 1, i8* %_12\r\n  %0 = bitcast %\"core::option::Option<alloc::string::String>\"* %self to {}**\r\n  %1 = load {}*, {}** %0\r\n  %2 = icmp eq {}* %1, null\r\n  %3 = select i1 %2, i64 0, i64 1\r\n  switch i64 %3, label %bb3 [\r\n    i64 0, label %bb2\r\n    i64 1, label %bb4\r\n  ]\r\n\r\nbb1:                                              ; preds = %bb11, %bb10, %bb12\r\n  %4 = bitcast { i8*, i32 }* %personalityslot to i8**\r\n  %5 = load i8*, i8** %4\r\n  %6 = getelementptr inbounds { i8*, i32 }, { i8*, i32 }* %personalityslot, i32 0, i32 1\r\n  %7 = load i32, i32* %6\r\n  %8 = insertvalue { i8*, i32 } undef, i8* %5, 0\r\n  %9 = insertvalue { i8*, i32 } %8, i32 %7, 1\r\n  resume { i8*, i32 } %9\r\n\r\nbb2:                                              ; preds = %start\r\n  store i8 0, i8* %_11\r\n  store i32 %default, i32* %_0\r\n  br label %bb5\r\n\r\nbb3:                                              ; preds = %start\r\n  unreachable\r\n\r\nbb4:                                              ; preds = %start\r\n  store i8 0, i8* %_10\r\n  %10 = bitcast %\"core::option::Option<alloc::string::String>\"* %self to %\"core::option::Option<alloc::string::String>::Some\"*\r\n  %11 = bitcast %\"core::option::Option<alloc::string::String>::Some\"* %10 to %\"alloc::string::String\"*\r\n  %12 = bitcast %\"alloc::string::String\"* %11 to i8*\r\n  %13 = bitcast %\"alloc::string::String\"* %t to i8*\r\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %12, i64 24, i32 8, i1 false)\r\n  store i8 0, i8* %_12\r\n  %14 = bitcast %\"alloc::string::String\"* %t to i8*\r\n  %15 = bitcast %\"alloc::string::String\"* %_8 to i8*\r\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %14, i64 24, i32 8, i1 false)\r\n  %16 = bitcast { [0 x i8], %\"alloc::string::String\", [0 x i8] }* %_7 to %\"alloc::string::String\"*\r\n  %17 = bitcast %\"alloc::string::String\"* %_8 to i8*\r\n  %18 = bitcast %\"alloc::string::String\"* %16 to i8*\r\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %17, i64 24, i32 8, i1 false)\r\n  %19 = bitcast { [0 x i8], %\"alloc::string::String\", [0 x i8] }* %_7 to %\"alloc::string::String\"*\r\n; invoke map_example::main::{{closure}}\r\n  %20 = invoke i32 @\"_ZN11map_example4main28_$u7b$$u7b$closure$u7d$$u7d$17h0799836f5ea6b921E\"(%\"alloc::string::String\"* noalias nocapture dereferenceable(24) %19)\r\n          to label %bb7 unwind label %cleanup\r\n\r\nbb5:                                              ; preds = %bb2, %bb7\r\n  %21 = load i8, i8* %_12, !range !1\r\n  %22 = trunc i8 %21 to i1\r\n  br i1 %22, label %bb15, label %bb8\r\n\r\nbb6:                                              ; preds = %bb13, %bb14\r\n  %23 = bitcast %\"core::option::Option<alloc::string::String>\"* %self to {}**\r\n  %24 = load {}*, {}** %23\r\n  %25 = icmp eq {}* %24, null\r\n  %26 = select i1 %25, i64 0, i64 1\r\n  switch i64 %26, label %bb12 [\r\n    i64 1, label %bb10\r\n  ]\r\n\r\nbb7:                                              ; preds = %bb4\r\n  store i32 %20, i32* %_0\r\n  br label %bb5\r\n\r\nbb8:                                              ; preds = %bb15, %bb5\r\n  %27 = load i8, i8* %_11, !range !1\r\n  %28 = trunc i8 %27 to i1\r\n  br i1 %28, label %bb16, label %bb9\r\n\r\nbb9:                                              ; preds = %bb16, %bb8\r\n  %29 = bitcast %\"core::option::Option<alloc::string::String>\"* %self to {}**\r\n  %30 = load {}*, {}** %29\r\n  %31 = icmp eq {}* %30, null\r\n  %32 = select i1 %31, i64 0, i64 1\r\n  switch i64 %32, label %bb20 [\r\n    i64 1, label %bb18\r\n  ]\r\n\r\n\r\nbb10:                                             ; preds = %bb6\r\n  %33 = load i8, i8* %_10, !range !1\r\n  %34 = trunc i8 %33 to i1\r\n  br i1 %34, label %bb11, label %bb1\r\n\r\nbb11:                                             ; preds = %bb10\r\n  store i8 0, i8* %_10\r\n  %35 = bitcast %\"core::option::Option<alloc::string::String>\"* %self to %\"core::option::Option<alloc::string::String>::Some\"*\r\n  %36 = bitcast %\"core::option::Option<alloc::string::String>::Some\"* %35 to %\"alloc::string::String\"*\r\n; call core::ptr::drop_in_place\r\n  call void @_ZN4core3ptr13drop_in_place17h5aaf0cb4e5af22beE(%\"alloc::string::String\"* %36) #8\r\n  br label %bb1\r\n\r\nbb12:                                             ; preds = %bb6\r\n; call core::ptr::drop_in_place\r\n  call void @_ZN4core3ptr13drop_in_place17h85c4ff3726432e4eE(%\"core::option::Option<alloc::string::String>\"* %self) #8\r\n  br label %bb1\r\n\r\nbb13:                                             ; preds = %bb14\r\n  store i8 0, i8* %_11\r\n  br label %bb6\r\n\r\nbb14:                                             ; preds = %cleanup\r\n  %37 = load i8, i8* %_11, !range !1\r\n  %38 = trunc i8 %37 to i1\r\n  br i1 %38, label %bb13, label %bb6\r\n\r\nbb15:                                             ; preds = %bb5\r\n  store i8 0, i8* %_12\r\n  br label %bb8\r\n\r\nbb16:                                             ; preds = %bb8\r\n  store i8 0, i8* %_11\r\n  br label %bb9\r\n\r\nbb17:                                             ; preds = %bb19, %bb18, %bb20\r\n  %39 = load i32, i32* %_0\r\n  ret i32 %39\r\n\r\nbb18:                                             ; preds = %bb9\r\n  %40 = load i8, i8* %_10, !range !1\r\n  %41 = trunc i8 %40 to i1\r\n  br i1 %41, label %bb19, label %bb17\r\n\r\nbb19:                                             ; preds = %bb18\r\n  store i8 0, i8* %_10\r\n  %42 = bitcast %\"core::option::Option<alloc::string::String>\"* %self to %\"core::option::Option<alloc::string::String>::Some\"*\r\n  %43 = bitcast %\"core::option::Option<alloc::string::String>::Some\"* %42 to %\"alloc::string::String\"*\r\n; call core::ptr::drop_in_place\r\n  call void @_ZN4core3ptr13drop_in_place17h5aaf0cb4e5af22beE(%\"alloc::string::String\"* %43)\r\n  br label %bb17\r\n\r\nbb20:                                             ; preds = %bb9\r\n; call core::ptr::drop_in_place\r\n  call void @_ZN4core3ptr13drop_in_place17h85c4ff3726432e4eE(%\"core::option::Option<alloc::string::String>\"* %self)\r\n  br label %bb17\r\n\r\ncleanup:                                          ; preds = %bb4\r\n  %44 = landingpad { i8*, i32 }\r\n          cleanup\r\n  %45 = extractvalue { i8*, i32 } %44, 0\r\n  %46 = extractvalue { i8*, i32 } %44, 1\r\n  %47 = getelementptr inbounds { i8*, i32 }, { i8*, i32 }* %personalityslot, i32 0, i32 0\r\n  store i8* %45, i8** %47\r\n  %48 = getelementptr inbounds { i8*, i32 }, { i8*, i32 }* %personalityslot, i32 0, i32 1\r\n  store i32 %46, i32* %48\r\n  br label %bb14\r\n```\r\n\r\nWhich is quite a bit of IR for such a little function:\r\n```Rust\r\n    pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {\r\n        match self {\r\n            Some(t) => f(t),\r\n            None => default,\r\n        }\r\n    }\r\n```\r\n\r\nI suspect #46525 might be involved in causing drop elaboration to go crazy", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46758/timeline", "performed_via_github_app": null, "state_reason": null}