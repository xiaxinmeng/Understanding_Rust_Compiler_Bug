{"url": "https://api.github.com/repos/rust-lang/rust/issues/82509", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82509/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82509/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82509/events", "html_url": "https://github.com/rust-lang/rust/issues/82509", "id": 816075843, "node_id": "MDU6SXNzdWU4MTYwNzU4NDM=", "number": 82509, "title": "Suggested resolution to \"unconstrained generic constant\" does not make sense for types other than usize", "user": {"login": "nickmertin", "id": 14988409, "node_id": "MDQ6VXNlcjE0OTg4NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/14988409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickmertin", "html_url": "https://github.com/nickmertin", "followers_url": "https://api.github.com/users/nickmertin/followers", "following_url": "https://api.github.com/users/nickmertin/following{/other_user}", "gists_url": "https://api.github.com/users/nickmertin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickmertin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickmertin/subscriptions", "organizations_url": "https://api.github.com/users/nickmertin/orgs", "repos_url": "https://api.github.com/users/nickmertin/repos", "events_url": "https://api.github.com/users/nickmertin/events{/privacy}", "received_events_url": "https://api.github.com/users/nickmertin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-02-25T04:37:42Z", "updated_at": "2022-06-28T16:29:00Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Based on a [StackOverflow question](https://stackoverflow.com/q/66361365/3402566).\r\n\r\nGiven the following code: ([Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=664f18be85840e14c179ae3e21963461))\r\n\r\n```rust\r\n#![feature(const_generics)]\r\n#![feature(const_evaluatable_checked)]\r\n\r\nuse std::ops::Mul;\r\n\r\npub struct Foo <const bar: i64> {\r\n    value: f64,\r\n}\r\n\r\nimpl<const baz: i64, const quux: i64> Mul<Foo<quux>> for Foo<baz> {\r\n    type Output = Foo<{baz + quux}>;\r\n\r\n    fn mul(self, rhs: Foo<quux>) -> Self::Output {\r\n        Self::Output {\r\n            value: self.value * rhs.value,\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let a: Foo<3> = Foo { value: 2.0 };\r\n    let b: Foo<4> = Foo { value: 9.0 };\r\n    let c = a * b;\r\n    println!(\"{}\", c.value);\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror: unconstrained generic constant\r\n  --> src/main.rs:11:5\r\n   |\r\n11 |     type Output = Foo<{baz + quux}>;\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\nhelp: try adding a `where` bound using this expression: `where [u8; {baz + quux}]: Sized`\r\n```\r\n\r\nThis suggestion fails to compile, because `baz` and `quux` (and their sum) have type `i64`, while the context of a slice length requires `usize`. Ideally, it should instead suggest `where Foo<{baz + quux}>: Sized`, which does compile.\r\n\r\nStrictly speaking, pulling out the context of the constant expression's use and checking if it implements `Sized` will not work if the type is not supposed to implement `Sized`; perhaps `PhantomData<Foo<{baz + quux}>>: Sized` would be an alternative to suggest in that case. Overall, the pattern does seem a little hacky, working around the fact that there is no way to specify a constraint that a type exists.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82509/reactions", "total_count": 13, "+1": 13, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82509/timeline", "performed_via_github_app": null, "state_reason": null}