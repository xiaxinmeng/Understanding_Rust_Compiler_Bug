{"url": "https://api.github.com/repos/rust-lang/rust/issues/27787", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/27787/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/27787/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/27787/events", "html_url": "https://github.com/rust-lang/rust/issues/27787", "id": 100670317, "node_id": "MDU6SXNzdWUxMDA2NzAzMTc=", "number": 27787, "title": "Tracking issue for sorted collection ranges", "user": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 219670472, "node_id": "MDU6TGFiZWwyMTk2NzA0NzI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/final-comment-period", "name": "final-comment-period", "color": "1e76d9", "default": false, "description": "In the final comment period and will be merged soon unless new substantive objections are raised."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 289259951, "node_id": "MDU6TGFiZWwyODkyNTk5NTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-help-wanted", "name": "E-help-wanted", "color": "02E10C", "default": false, "description": "Call for participation: Help is requested to fix this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 92, "created_at": "2015-08-13T01:27:23Z", "updated_at": "2017-03-29T23:55:38Z", "closed_at": "2017-03-19T07:06:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This covers `btree_range` and `collections_bound`. Both try to address the combinatorics over inclusive/exclusive/none bounds on ordered queries. I am significantly unsatisfied with the current solution, which is `btree.range(Bound(&K), Bound(&K))`. This pushes all the combinatorics into a nasty calling convention. Instead, I believe we would be better served by a build pattern:\n\n```\nfor x in btree.range().ge(&min).lt(&max) { .. }\n```\n\nThis allows you to avoid importing and dispatching on enum. It also has the advantage of making simpler queries simpler. Compare:\n\n```\n// today (assuming you've totally imported the bound variants)\nfor x in btree.range(Unbounded, Inclusive(&max)) {\n\n// tomorrow?\nfor x in btree.range().le(&max) { .. }\n```\n\nThis also could potentially address https://github.com/rust-lang/rfcs/pull/1195\n\n```\nlet pred = btree.range().le(&max).get();\n```\n\nAnd can be extended to support `drain` or `remove` similarly;\n\n```\nfor x in btree.range_mut().gt(&min).drain() { .. }\n```\n\n```\nler pred = btree.range_mut().le(&max).remove();\n```\n\nWhich if desirable can be sugarred to direct methods on btree in the future.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/27787/reactions", "total_count": 11, "+1": 11, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/27787/timeline", "performed_via_github_app": null, "state_reason": "completed"}