{"url": "https://api.github.com/repos/rust-lang/rust/issues/81248", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81248/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81248/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81248/events", "html_url": "https://github.com/rust-lang/rust/issues/81248", "id": 791487254, "node_id": "MDU6SXNzdWU3OTE0ODcyNTQ=", "number": 81248, "title": "Flatten and FlatMap have incorrect bounds for their FusedIterator impls", "user": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-01-21T20:56:40Z", "updated_at": "2021-01-29T04:06:39Z", "closed_at": "2021-01-29T04:06:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I would expect the following code to either not compile (because `iter` shouldn't implement `FusedIterator`) or to not panic (because it does, so its contract should guarantee that calling next after the first `None` will always return `None`), however it compiles and panics:\r\n\r\n```rust\r\nuse core::iter::FusedIterator;\r\n\r\nfn check_is_fused<T, I: Iterator<Item = T> + FusedIterator>(mut i: I) {\r\n    while let Some(_) = i.next() {}\r\n    assert!(i.next().is_none());\r\n}\r\n\r\nstruct NonFusedIter(bool);\r\n\r\nimpl Iterator for NonFusedIter {\r\n    type Item = ();\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        self.0 = !self.0;\r\n        Some(()).filter(|_| !self.0)\r\n    }\r\n}\r\n\r\nimpl DoubleEndedIterator for NonFusedIter {\r\n    fn next_back(&mut self) -> Option<Self::Item> {\r\n        self.0 = !self.0;\r\n        Some(()).filter(|_| !self.0)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut iter = vec![NonFusedIter(true)].into_iter().flatten();\r\n    iter.next_back();\r\n    check_is_fused(iter);\r\n}\r\n```\r\n\r\n[Playground example](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=5d9a8cf1438d3ac4a1260773f90631a9)\r\n\r\nThis is caused by the fact that the impl of `FusedIterator` for `Flatten` only requires the outer iterator to implement `FusedIterator`, not the inner one, however the implementation doesn't actually fuse `backiter`, which is what causes the assert to fail. The same problem is present for `FlatMap`.\r\n\r\nPossible solutions:\r\n\r\n* Change how `FlattenCompat` is implemented to guarantee it to be fused even if the inner iterators are not fused. This would silently change its behavior, however it wouldn't be a breaking change. \r\n* Change the bounds for those impls. This would be a (minor?) breaking change.\r\n\r\nAdditionally I don't think there's anything that requires the outer iterator to always be manually fused in `FlattenCompat`. Should we also change it in the process?\r\n\r\nSee also https://users.rust-lang.org/t/why-doesn-t-std-flatten-implement-std-fusediterator-regardless-if-the-outer-or-inner-iterators-do/54477", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81248/timeline", "performed_via_github_app": null, "state_reason": "completed"}