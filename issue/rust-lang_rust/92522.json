{"url": "https://api.github.com/repos/rust-lang/rust/issues/92522", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92522/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92522/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92522/events", "html_url": "https://github.com/rust-lang/rust/issues/92522", "id": 1092588660, "node_id": "I_kwDOAAsO6M5BH5R0", "number": 92522, "title": "Rustc panicked at unexpected index out of Bound", "user": {"login": "chenzhawyang", "id": 38232928, "node_id": "MDQ6VXNlcjM4MjMyOTI4", "avatar_url": "https://avatars.githubusercontent.com/u/38232928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenzhawyang", "html_url": "https://github.com/chenzhawyang", "followers_url": "https://api.github.com/users/chenzhawyang/followers", "following_url": "https://api.github.com/users/chenzhawyang/following{/other_user}", "gists_url": "https://api.github.com/users/chenzhawyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenzhawyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenzhawyang/subscriptions", "organizations_url": "https://api.github.com/users/chenzhawyang/orgs", "repos_url": "https://api.github.com/users/chenzhawyang/repos", "events_url": "https://api.github.com/users/chenzhawyang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenzhawyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-01-03T15:09:36Z", "updated_at": "2022-01-11T18:42:47Z", "closed_at": "2022-01-11T18:42:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\nThe data I am reading here is the Unihan Database (https://www.unicode.org/Public/UCD/latest/ucd/Unihan.zip). This happens randomly when I am testing out this toy example, after I run `cargo clearn` this runs fine, so I am not sure about the reproducibility of this error.\r\n\r\n### Code\r\n\r\n```Rust\r\nuse std::{                                                                                                                                                                                                                                                                                                                     \r\n    fs,                                                                                                                                                                                                                                                                                                                        \r\n    thread,                                                                                                                                                                                                                                                                                                                    \r\n    path::PathBuf                                                                                                                                                                                                                                                                                                              \r\n};                                                                                                                                                                                                                                                                                                                             \r\nuse glob::{                                                                                                                                                                                                                                                                                                                    \r\n    glob,                                                                                                                                                                                                                                                                                                                      \r\n};                                                                                                                                                                                                                                                                                                                             \r\nuse rayon::prelude::*;                                                                                                                                                                                                                                                                                                         \r\n                                                                                                                                                                                                                                                                                                                               \r\n#[cold]                                                                                                                                                                                                                                                                                                                        \r\npub fn read_unihan_data() -> Vec<Vec<RawEntry>> {                                                                                                                                                                                                                                                                              \r\n    let files = glob(\"data/unihan/*.txt\").expect(\"failed read unihan data files\");                                                                                                                                                                                                                                             \r\n                                                                                                                                                                                                                                                                                                                               \r\n    files.into_iter()                                                                                                                                                                                                                                                                                                          \r\n        .filter_map(|x| {                                                                                                                                                                                                                                                                                                      \r\n            if x.is_ok() {                                                                                                                                                                                                                                                                                                     \r\n                Some(to_lines(&x.unwrap()))                                                                                                                                                                                                                                                                                    \r\n            } else {                                                                                                                                                                                                                                                                                                           \r\n                None                                                                                                                                                                                                                                                                                                           \r\n            }                                                                                                                                                                                                                                                                                                                  \r\n        })                                                                                                                                                                                                                                                                                                                     \r\n        .map(|str| to_rawentries(str))                                                                                                                                                                                                                                                                                         \r\n        .collect::<Vec<Vec<RawEntry>>>()                                                                                                                                                                                                                                                                                       \r\n}                                                                                                                                                                                                                                                                                                                              \r\n                                                                                                                                                                                                                                                                                                                               \r\n#[inline(always)]                                                                                                                                                                                                                                                                                                              \r\nfn to_lines(path: &PathBuf) -> Vec<String> {                                                                                                                                                                                                                                                                                   \r\n    let s = fs::read_to_string(path)                                                                                                                                                                                                                                                                                           \r\n        .expect(format!(\"failed to read {:?}\", &path).as_str());                                                                                                                                                                                                                                                               \r\n                                                                                                                                                                                                                                                                                                                               \r\n    s.par_lines()                                                                                                                                                                                                                                                                                                              \r\n        .filter(|str| {                                                                                                                                                                                                                                                                                                        \r\n            str.chars().nth(0) != Some('#')                                                                                                                                                                                                                                                                                    \r\n        })                                                                                                                                                                                                                                                                                                                     \r\n        .map(|str| str.to_string())                                                                                                                                                                                                                                                                                            \r\n        .collect::<Vec<String>>()                                                                                                                                                                                                                                                                                              \r\n}                                                                                                                                                                                                                                                                                                                              \r\n                                                                                                                                                                                                                                                                                                                               \r\n#[inline(always)]                                                                                                                                                                                                                                                                                                              \r\nfn to_rawentries(lines: Vec<String>) -> Vec<RawEntry> {                                                                                                                                                                                                                                                                        \r\n    lines.into_par_iter()                                                                                                                                                                                                                                                                                                      \r\n        .filter_map(|str| {                                                                                                                                                                                                                                                                                                    \r\n            RawEntry::from_line(str)                                                                                                                                                                                                                                                                                           \r\n        })                                                                                                                                                                                                                                                                                                                     \r\n        .collect::<Vec<RawEntry>>()                                                                                                                                                                                                                                                                                            \r\n}                                                                                                                                                                                                                                                                                                                              \r\n                               \r\n#[derive(Debug)]                                                                                                                                                                                                                                                                                                               \r\npub struct RawEntry {                                                                                                                                                                                                                                                                                                          \r\n    codept: String,                                                                                                                                                                                                                                                                                                            \r\n    char: char,                                                                                                                                                                                                                                                                                                                \r\n    field: String,                                                                                                                                                                                                                                                                                                             \r\n    value: String,                                                                                                                                                                                                                                                                                                             \r\n}                                                                                                                                                                                                                                                                                                                              \r\n                                                                                                                                                                                                                                                                                                                               \r\nimpl RawEntry {                                                                                                                                                                                                                                                                                                                \r\n    #[inline(always)]                                                                                                                                                                                                                                                                                                          \r\n    pub fn from_line(line: String) -> Option<RawEntry> {                                                                                                                                                                                                                                                                       \r\n        let v = line                                                                                                                                                                                                                                                                                                           \r\n            .split('\\t')                                                                                                                                                                                                                                                                                                       \r\n            .collect::<Vec<&str>>();                                                                                                                                                                                                                                                                                           \r\n                                                                                                                                                                                                                                                                                                                               \r\n        (v.len() == 3).then(|| {                                                                                                                                                                                                                                                                                               \r\n            let codept = v[0].to_string();                                                                                                                                                                                                                                                                                     \r\n            let char = {                                                                                                                                                                                                                                                                                                       \r\n                let n = u32::from_str_radix(&codept.split('+').nth(1).unwrap(), 16).unwrap();                                                                                                                                                                                                                                  \r\n                char::from_u32(n).unwrap()                                                                                                                                                                                                                                                                                     \r\n            };                                                                                                                                                                                                                                                                                                                 \r\n            let field = v[1].to_string();                                                                                                                                                                                                                                                                                      \r\n            let value = v[2].to_string();                                                                                                                                                                                                                                                                                      \r\n                                                                                                                                                                                                                                                                                                                               \r\n            RawEntry { codept, char, field, value }                                                                                                                                                                                                                                                                            \r\n        })                                                                                                                                                                                                                                                                                                                     \r\n    }                                                                                                                                                                                                                                                                                                                          \r\n}\r\n\r\nfn main() {                                                                                                                                                                                                                                              \r\n    let v = read_unihan_data();                                                                                              \r\n    println!(\"{:#?}\", &v[0][10..20]);                                                                                                    \r\n} \r\n\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.59.0-nightly (8f3238f89 2022-01-02)\r\nbinary: rustc\r\ncommit-hash: 8f3238f898163f09726c3d2b2cc9bafb09da26f3\r\ncommit-date: 2022-01-02\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.59.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'index out of bounds: the len is 76 but the index is 76', compiler/rustc_query_impl/src/on_disk_cache.rs:726:18\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.59.0-nightly (8f3238f89 2022-01-02) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [typeck] type-checking `unihan::read_unihan_data::{closure#0}`\r\n#1 [check_match] match-checking `unihan::read_unihan_data::{closure#0}`\r\nend of query stack\r\nerror: could not compile `hnans`\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'index out of bounds: the len is 76 but the index is 76', compiler/rustc_query_impl/src/on_disk_cache.rs:726:18\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/8f3238f898163f09726c3d2b2cc9bafb09da26f3/library/std/src/panicking.rs:498:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/8f3238f898163f09726c3d2b2cc9bafb09da26f3/library/core/src/panicking.rs:107:14\r\n   2: core::panicking::panic_bounds_check\r\n             at /rustc/8f3238f898163f09726c3d2b2cc9bafb09da26f3/library/core/src/panicking.rs:75:5\r\n   3: <rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n   4: <rustc_middle::ty::FieldDef as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n   5: <rustc_middle::ty::VariantDef as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n   6: <rustc_query_impl::on_disk_cache::CacheDecoder as rustc_serialize::serialize::Decoder>::read_seq::<alloc::vec::Vec<rustc_middle::ty::VariantDef>, <alloc::vec::Vec<rustc_middle::ty::VariantDef> as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode::{closure#0}>\r\n   7: <rustc_middle::ty::adt::AdtDef as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n   8: <rustc_middle::ty::sty::TyKind as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n   9: <&rustc_middle::ty::TyS as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n  10: <&rustc_middle::ty::TyS as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n  11: <core::result::Result<rustc_middle::ty::subst::GenericArg, alloc::string::String> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode::{closure#0}>>::{closure#0}>\r\n  12: <rustc_middle::ty::sty::TyKind as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n  13: <&rustc_middle::ty::TyS as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n  14: <&rustc_middle::ty::TyS as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n  15: <core::result::Result<rustc_middle::ty::subst::GenericArg, alloc::string::String> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode::{closure#0}>>::{closure#0}>\r\n  16: <rustc_middle::ty::sty::TyKind as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n  17: <&rustc_middle::ty::TyS as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n  18: <&rustc_middle::ty::TyS as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n  19: <rustc_query_impl::on_disk_cache::CacheDecoder as rustc_serialize::serialize::Decoder>::read_map::<std::collections::hash::map::HashMap<rustc_hir::hir_id::ItemLocalId, &rustc_middle::ty::TyS, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>, <std::collections::hash::map::HashMap<rustc_hir::hir_id::ItemLocalId, &rustc_middle::ty::TyS, core::hash::BuildHasherDefault<rustc_hash::FxHasher>> as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode::{closure#0}>\r\n  20: <rustc_middle::ty::context::TypeckResults as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode::{closure#0}\r\n  21: <&rustc_middle::ty::context::TypeckResults as rustc_serialize::serialize::Decodable<rustc_query_impl::on_disk_cache::CacheDecoder>>::decode\r\n  22: <rustc_query_impl::on_disk_cache::OnDiskCache>::try_load_query_result::<&rustc_middle::ty::context::TypeckResults>\r\n  23: rustc_query_system::query::plumbing::try_load_from_disk_and_cache_in_memory::<rustc_query_impl::plumbing::QueryCtxt, rustc_span::def_id::LocalDefId, &rustc_middle::ty::context::TypeckResults>\r\n  24: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::plumbing::QueryCtxt, rustc_query_system::query::caches::DefaultCache<rustc_span::def_id::LocalDefId, &rustc_middle::ty::context::TypeckResults>>\r\n  25: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::typeck\r\n  26: <rustc_middle::ty::context::TyCtxt>::typeck_body\r\n  27: rustc_mir_build::thir::pattern::check_match::check_match\r\n  28: <rustc_query_system::dep_graph::graph::DepGraph<rustc_middle::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle::ty::context::TyCtxt, rustc_span::def_id::DefId, ()>\r\n  29: rustc_data_structures::stack::ensure_sufficient_stack::<((), rustc_query_system::dep_graph::graph::DepNodeIndex), rustc_query_system::query::plumbing::execute_job<rustc_query_impl::plumbing::QueryCtxt, rustc_span::def_id::DefId, ()>::{closure#3}>\r\n  30: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::plumbing::QueryCtxt, rustc_query_system::query::caches::DefaultCache<rustc_span::def_id::DefId, ()>>\r\n  31: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::check_match\r\n  32: <core::panic::unwind_safe::AssertUnwindSafe<rustc_interface::passes::analysis::{closure#1}::{closure#0}> as core::ops::function::FnOnce<()>>::call_once\r\n  33: <rustc_session::session::Session>::time::<(), rustc_interface::passes::analysis::{closure#1}>\r\n  34: rustc_interface::passes::analysis\r\n  35: <rustc_query_system::dep_graph::graph::DepGraph<rustc_middle::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle::ty::context::TyCtxt, (), core::result::Result<(), rustc_errors::ErrorReported>>\r\n  36: rustc_data_structures::stack::ensure_sufficient_stack::<(core::result::Result<(), rustc_errors::ErrorReported>, rustc_query_system::dep_graph::graph::DepNodeIndex), rustc_query_system::query::plumbing::execute_job<rustc_query_impl::plumbing::QueryCtxt, (), core::result::Result<(), rustc_errors::ErrorReported>>::{closure#3}>\r\n  37: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::plumbing::QueryCtxt, rustc_query_system::query::caches::DefaultCache<(), core::result::Result<(), rustc_errors::ErrorReported>>>\r\n  38: rustc_query_system::query::plumbing::get_query::<rustc_query_impl::queries::analysis, rustc_query_impl::plumbing::QueryCtxt>\r\n  39: <rustc_interface::passes::QueryContext>::enter::<rustc_driver::run_compiler::{closure#1}::{closure#2}::{closure#3}, core::result::Result<(), rustc_errors::ErrorReported>>\r\n  40: <rustc_interface::interface::Compiler>::enter::<rustc_driver::run_compiler::{closure#1}::{closure#2}, core::result::Result<core::option::Option<rustc_interface::queries::Linker>, rustc_errors::ErrorReported>>\r\n  41: rustc_span::with_source_map::<core::result::Result<(), rustc_errors::ErrorReported>, rustc_interface::interface::create_compiler_and_run<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>::{closure#1}>\r\n  42: rustc_interface::interface::create_compiler_and_run::<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.59.0-nightly (8f3238f89 2022-01-02) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [typeck] type-checking `unihan::read_unihan_data::{closure#0}`\r\n#1 [check_match] match-checking `unihan::read_unihan_data::{closure#0}`\r\n#2 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror: could not compile `hnans`\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "chenzhawyang", "id": 38232928, "node_id": "MDQ6VXNlcjM4MjMyOTI4", "avatar_url": "https://avatars.githubusercontent.com/u/38232928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenzhawyang", "html_url": "https://github.com/chenzhawyang", "followers_url": "https://api.github.com/users/chenzhawyang/followers", "following_url": "https://api.github.com/users/chenzhawyang/following{/other_user}", "gists_url": "https://api.github.com/users/chenzhawyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenzhawyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenzhawyang/subscriptions", "organizations_url": "https://api.github.com/users/chenzhawyang/orgs", "repos_url": "https://api.github.com/users/chenzhawyang/repos", "events_url": "https://api.github.com/users/chenzhawyang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenzhawyang/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92522/timeline", "performed_via_github_app": null, "state_reason": "completed"}