{"url": "https://api.github.com/repos/rust-lang/rust/issues/46991", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46991/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46991/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46991/events", "html_url": "https://github.com/rust-lang/rust/issues/46991", "id": 284394195, "node_id": "MDU6SXNzdWUyODQzOTQxOTU=", "number": 46991, "title": "Avoid path to macro-generated extern crate in error messages", "user": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-12-25T02:20:46Z", "updated_at": "2020-06-19T20:33:37Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "```rust\r\nuse serde::Deserialize;\r\n\r\n// Expands to:\r\n//\r\n// const _IMPL_DESERIALIZE_FOR_S: () = {\r\n//     extern crate serde as _serde;\r\n//     impl<'de> _serde::Deserialize<'de> for S { /* ... */ }\r\n// }\r\n#[derive(Deserialize)]\r\nstruct S;\r\n\r\nfn main() {\r\n    // Requires S: serde::Serialize.\r\n    serde_json::to_string(&S);\r\n}\r\n```\r\n\r\nThe message as of rustc 1.24.0-nightly (c284f8807 2017-12-24):\r\n\r\n```\r\nerror[E0277]: the trait bound `S: _IMPL_DESERIALIZE_FOR_S::_serde::Serialize` is not satisfied\r\n  --> src/main.rs:16:5\r\n   |\r\n16 |     serde_json::to_string(&S);\r\n   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `_IMPL_DESERIALIZE_FOR_S::_serde::Serialize` is not implemented for `S`\r\n   |\r\n   = note: required by `serde_json::to_string`\r\n```\r\n\r\nIn this case it would be more desirable for the error message to refer to `serde::Serialize` rather than `_IMPL_DESERIALIZE_FOR_S::_serde::Serialize`. The extern crate means that the user's Cargo.toml includes the `serde` crate under `[dependencies]`, so showing `serde::Serialize` as the path seems reasonable.\r\n\r\nI understand that `serde::Serialize` could be ambiguous if the user's crate includes `mod serde` at the top level. For now we could ignore that case and show `serde::Serialize` anyway, or treat it as a special case and not show `serde::Serialize` if they have a `mod serde`. The special case would go away with https://github.com/rust-lang/rfcs/pull/2126 by showing `crate::serde::Serialize`.\r\n\r\nFixing this would be valuable in allowing us to reinstate the lint against unused extern crate by addressing the usability issue reported in #44294.\r\n\r\nMentioning @pnkfelix who worked on #46112.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46991/timeline", "performed_via_github_app": null, "state_reason": null}