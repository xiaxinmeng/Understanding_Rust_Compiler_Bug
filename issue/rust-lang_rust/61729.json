{"url": "https://api.github.com/repos/rust-lang/rust/issues/61729", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61729/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61729/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61729/events", "html_url": "https://github.com/rust-lang/rust/issues/61729", "id": 454447393, "node_id": "MDU6SXNzdWU0NTQ0NDczOTM=", "number": 61729, "title": "Can this error be a little better? \"E0576: cannot find method or associated constant ...\"", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-11T02:10:08Z", "updated_at": "2023-01-11T15:03:09Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "[playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=54f2dc1b7eeea77f0cf2d000cb05f413):\r\n```rust\r\n// src: https://doc.rust-lang.org/stable/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\r\ntrait Pilot {\r\n    fn fly(&self);\r\n}\r\n\r\ntrait Wizard {\r\n    fn fly(&self);\r\n}\r\n\r\nstruct Human;\r\n\r\nimpl Pilot for Human {\r\n    fn fly(&self) {\r\n        println!(\"This is your captain speaking.\");\r\n    }\r\n}\r\n\r\nimpl Wizard for Human {\r\n    fn fly(&self) {\r\n        println!(\"Up!\");\r\n    }\r\n}\r\n\r\nimpl Human {\r\n    fn fly(&self) {\r\n        println!(\"*waving arms furiously*\");\r\n    }\r\n}\r\n\r\nstruct Human2;\r\nimpl Human2 {\r\n    fn fly(&self) {\r\n        println!(\"*waving arms furiously 2*\");\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let person = Human;\r\n    Pilot::fly(&person);\r\n    <Human as Pilot>::fly(&person);\r\n    Wizard::fly(&person);\r\n    <Human as Wizard>::fly(&person);\r\n    person.fly();\r\n    Human::fly(&person);\r\n    <Human as Human>::fly(&person); // E0576: cannot find method or associated constant `fly` in `Human`  not found in `Human`\r\n    <Human as Human2>::fly(&person); // E0576: cannot find method or associated constant `fly` in `Human2`  not found in `Human2`\r\n}\r\n```\r\n\r\n```\r\n    Checking l_19_16 v0.1.0 (/home/user/build/2nonpkgs/rust.stuff/reflo/book/l_19_16)\r\nerror[E0576]: cannot find method or associated constant `fly` in `Human`\r\n  --> book/l_19_16/src/main.rs:45:23\r\n   |\r\n45 |     <Human as Human>::fly(&person); // E0576: cannot find method or associated constant `fly` in `Human`  not found in `Human`\r\n   |                       ^^^ not found in `Human`\r\n\r\nerror[E0576]: cannot find method or associated constant `fly` in `Human2`\r\n  --> book/l_19_16/src/main.rs:46:24\r\n   |\r\n46 |     <Human as Human2>::fly(&person); // E0576: cannot find method or associated constant `fly` in `Human2`  not found in `Human2`\r\n   |                        ^^^ not found in `Human2`\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nerror: Could not compile `l_19_16`.\r\n```\r\n\r\nThe problem(s):\r\n\r\n- [ ] can't use `<Human as Human>` probably because the latter `Human` isn't a trait, (so `Type as Type` is not valid?), as per:\r\n\r\n> In general, fully qualified syntax is defined as follows:\r\n>\r\n> `<Type as Trait>::function(receiver_if_method, next_arg, ...);`\r\n>\r\n> For associated functions, there would not be a receiver: there would only be the list of other arguments. You could use fully qualified syntax everywhere that you call functions or methods. However, you\u2019re allowed to omit any part of this syntax that Rust can figure out from other information in the program. You only need to use this more verbose syntax in cases where there are multiple implementations that use the same name and Rust needs help to identify which implementation you want to call.\r\n\r\n\r\n- [ ]  the error says it can't find the method(`or associated constant` - this is true) in `Human` but this is not true, the method is there, for both `Human` and `Human2` - can the error be improved in this regard?\r\n- [ ] maybe the error should say that `Human`(or `Human2`) isn't a trait instead? (if `<Type as Trait>::function(...)` is the only allowed syntax.\r\n\r\n\r\n<details>\r\n\r\n```\r\nrustc 1.37.0-dev (5c45343f1 2019-06-08)\r\nbinary: rustc\r\ncommit-hash: 5c45343f11fbf93cf4e15568aee3ff3f2f287466\r\ncommit-date: 2019-06-08\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.37.0-dev\r\nLLVM version: 8.0\r\n\r\ncargo 1.37.0-dev (65e3885c 2019-06-06)\r\nrelease: 1.37.0\r\ncommit-hash: 65e3885ce3a60e61aaede458233616c177a1f701\r\ncommit-date: 2019-06-06\r\n```\r\n\r\n</details>", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61729/timeline", "performed_via_github_app": null, "state_reason": null}