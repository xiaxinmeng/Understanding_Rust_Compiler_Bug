{"url": "https://api.github.com/repos/rust-lang/rust/issues/107795", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107795/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107795/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107795/events", "html_url": "https://github.com/rust-lang/rust/issues/107795", "id": 1576057823, "node_id": "I_kwDOAAsO6M5d8Lvf", "number": 107795, "title": "How to enable Intel AMX in `asm!` on Linux?", "user": {"login": "jczaja", "id": 15085062, "node_id": "MDQ6VXNlcjE1MDg1MDYy", "avatar_url": "https://avatars.githubusercontent.com/u/15085062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jczaja", "html_url": "https://github.com/jczaja", "followers_url": "https://api.github.com/users/jczaja/followers", "following_url": "https://api.github.com/users/jczaja/following{/other_user}", "gists_url": "https://api.github.com/users/jczaja/gists{/gist_id}", "starred_url": "https://api.github.com/users/jczaja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jczaja/subscriptions", "organizations_url": "https://api.github.com/users/jczaja/orgs", "repos_url": "https://api.github.com/users/jczaja/repos", "events_url": "https://api.github.com/users/jczaja/events{/privacy}", "received_events_url": "https://api.github.com/users/jczaja/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123110, "node_id": "MDU6TGFiZWwxMjMxMTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-linux", "name": "O-linux", "color": "6e6ec0", "default": false, "description": "Operating system: Linux"}, {"id": 55302148, "node_id": "MDU6TGFiZWw1NTMwMjE0OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86_64", "name": "O-x86_64", "color": "6e6ec0", "default": false, "description": "Target: x64 processors"}, {"id": 5223550385, "node_id": "LA_kwDOAAsO6M8AAAABN1kNsQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-target-feature", "name": "A-target-feature", "color": "f7e101", "default": false, "description": "Area: Enabling/disabling target features like AVX, Neon, etc."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2023-02-08T12:47:27Z", "updated_at": "2023-03-03T22:20:53Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "\r\nHi,\r\n\r\nI want to use in Rust (via inline assembly) [Intel AMX instruction set](https://software.intel.com/content/dam/develop/external/us/en/documents-tps/architecture-instruction-set-extensions-programming-reference.pdf).\r\nAMX support is by default disabled in Linux Kernel due to significant amount of memory(~10KB) that has to be save on stack when there is context switching for programs using AMX. To enable AMX we need processor\r\nwith this capability (sapphirerapids), recent enough Linux kernel (5.16+) and stacks of FPU&sigalt to be of a size enough to be able to store AMX tiles (registers). Article on enabling AMX is [here](https://lwn.net/Articles/874846/).\r\nI have implemented a programs to enable and test AMX: one in C++ and the other in Rust. The one in C++ does initialize AMX properly, but the Rust program is not able to initialize AMX properly (likely due to stack sizes being not big enough, see \"PROGRAM EXITS HERE in Rust example\"). Similar problem was [described](https://bugs.python.org/issue46968) for python programming language. Please advice how to have AMX support enabled in Rust on SapphireRapids under Linux.\r\n\r\n### Details:\r\n#### C++ program:\r\n\r\n```\r\n#include <iostream>\r\n                       \r\nnamespace {\r\n#include <unistd.h>\r\n#include <sys/syscall.h>\r\n\r\n#define XFEATURE_XTILECFG 17\r\n#define XFEATURE_XTILEDATA 18\r\n#define XFEATURE_MASK_XTILECFG (1 << XFEATURE_XTILECFG)\r\n#define XFEATURE_MASK_XTILEDATA (1 << XFEATURE_XTILEDATA)\r\n#define XFEATURE_MASK_XTILE (XFEATURE_MASK_XTILECFG | XFEATURE_MASK_XTILEDATA)\r\n#define ARCH_GET_XCOMP_PERM 0x1022\r\n#define ARCH_REQ_XCOMP_PERM 0x1023\r\n\r\nbool init() {\r\n    unsigned long bitmask = 0;\r\n    long status = syscall(SYS_arch_prctl, ARCH_GET_XCOMP_PERM, &bitmask);\r\n    if (0 != status) return false;\r\n    if (bitmask & XFEATURE_MASK_XTILEDATA) return true;\r\n\r\n    status = syscall(SYS_arch_prctl, ARCH_REQ_XCOMP_PERM, XFEATURE_XTILEDATA);\r\n    if (0 != status)\r\n        return false; // XFEATURE_XTILEDATA setup is failed, TMUL usage is not allowed\r\n    status = syscall(SYS_arch_prctl, ARCH_GET_XCOMP_PERM, &bitmask);\r\n\r\n    // XFEATURE_XTILEDATA setup is failed, can't use TMUL\r\n    if (0 != status || !(bitmask & XFEATURE_MASK_XTILEDATA)) return false;\r\n\r\n    // XFEATURE_XTILEDATA set successfully, TMUL usage is allowed\r\n    return true;\r\n}\r\n}\r\n\r\nint main(int argc, char **argv) {\r\n\r\n    puts(\"Using system call to enable AMX...\");\r\n    if (!init()) { \r\n      printf(\"Error: AMX is not available\\n\");\r\n      return 1;\r\n    }\r\n    puts(\"...AMX is now enabled!\\n\");\r\n}\r\n\r\n```\r\n#### Rust:\r\n##### main:rs:\r\n```\r\nuse syscalls::*;\r\n\r\nfn initialize_amx_if_available() -> bool {\r\n    const ARCH_GET_XCOMP_PERM: usize = 0x1022;\r\n    const ARCH_REQ_XCOMP_PERM: usize = 0x1023;\r\n    const XFEATURE_XTILECFG: usize = 17;\r\n    const XFEATURE_XTILEDATA: usize = 18;\r\n    const XFEATURE_MASK_XTILEDATA: usize = 1 << XFEATURE_XTILEDATA;\r\n    const XFEATURE_MASK_XTILECFG: usize = 1 << XFEATURE_XTILECFG;\r\n    const XFEATURE_MASK_XTILE: usize = XFEATURE_MASK_XTILECFG | XFEATURE_MASK_XTILEDATA;\r\n\r\n    let bitmask: [usize; 1] = [0; 1];\r\n    let mut status: usize = 0;\r\n    unsafe {\r\n        let maybe_status = syscall!(Sysno::arch_prctl, ARCH_GET_XCOMP_PERM, bitmask.as_ptr());\r\n        match maybe_status {\r\n            Ok(s) => status = s,\r\n            Err(_) => {\r\n                println!(\"AMX not supported!\");\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (bitmask[0] & XFEATURE_MASK_XTILEDATA) != 0 {\r\n        return true;\r\n    }\r\n\r\n    unsafe {\r\n        let maybe_status = syscall!(Sysno::arch_prctl, ARCH_REQ_XCOMP_PERM, XFEATURE_XTILEDATA);\r\n        match maybe_status {\r\n            Ok(s) => status = s,\r\n            Err(err) => {\r\n                println!(\"AMX Error: XFEATURE_XTILEDATA setup is failed, TMUL usage is not allowed! Error: {}\",err);\r\n                return false;          //<========================================== PROGRAM EXITS HERE!!!\r\n            }\r\n        }\r\n    }\r\n\r\n    unsafe {\r\n        status = syscall!(Sysno::arch_prctl, ARCH_GET_XCOMP_PERM, bitmask.as_ptr())\r\n            .expect(\"Error: ARCH_PRCTL syscall failed!\");\r\n    }\r\n    if status != 0 || ((bitmask[0] & XFEATURE_MASK_XTILEDATA) == 0) {\r\n        println!(\"AMX not supported!\");\r\n        return false;   \r\n    }\r\n\r\n    // XFEATURE_XTILEDATA set successfully, TMUL usage is allowed\r\n    true\r\n}\r\n\r\nfn main() {\r\n  if initialize_amx_if_available() == true {\r\n      println!(\"Success: AMX Enabled!\");\r\n  } else {\r\n      println!(\"ERROR: Could not enable AMX!\");\r\n  }\r\n}\r\n```\r\n\r\n##### Cargo.toml\r\n```\r\n[package]\r\nname = \"test-enable-amx\"\r\nversion = \"0.1.0\"\r\nedition = \"2021\"\r\n\r\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\r\n\r\n[dependencies]\r\nsyscalls = \"0.6.7\"\r\n\r\n```\r\n\r\n**building:**`RUSTFLAGS='-C target-cpu=sapphirerapids -C target-feature=+amx-int8,+amx-bf16,+amx-tile' cargo build`\r\n**toolchains used:** 1.67.0 , 1.69.0-nightly\r\n**Linux kernel:** 5.19.0-1.el8.elrepo.x86_64\r\n**OS:** Centos 8.5\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107795/timeline", "performed_via_github_app": null, "state_reason": null}