{"url": "https://api.github.com/repos/rust-lang/rust/issues/108545", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108545/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108545/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108545/events", "html_url": "https://github.com/rust-lang/rust/issues/108545", "id": 1602131077, "node_id": "I_kwDOAAsO6M5ffpSF", "number": 108545, "title": "Tracking Issue for `option_as_slice`", "user": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-02-27T23:50:25Z", "updated_at": "2023-03-19T11:35:05Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Feature gate: `#![feature(option_as_slice)]`\r\n\r\nThis is a tracking issue for the `Option::as_slice` and `Option::as_mut_slice` methods.\r\n\r\nThe functions return an immutable or mutable slice to the value contained in the Option, if any. Otherwise an empty slice is returned.\r\n\r\n### Public API\r\n\r\n```rust\r\n// core::option\r\n\r\nimpl Option {\r\n    pub fn as_slice(&self) -> &[T] { .. }\r\n\r\n    pub fn as_mut_slice(&mut self) -> &mut [T] { .. }\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: \r\n  - #105871\r\n  - #108623\r\n  - #109095\r\n- [ ] Final comment period (FCP)[^1]\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n~~The current implementation contains an optimization which relies on the fact that layout randomization as currently implemented only applies to individual variants, never to the discriminant, and thus the offset of the `value` within `Some(value)`  is always either 0 (because of niche optimization) or would be the same if the type was `Option<MaybeUninit<T>>` instead of `Option<T>`.~~\r\n\r\n~~Before stabilization, the implementation should be changed to either use an intrinsic to get the offset or extend the `offset_of!` macro (recently merged [RFC#3308](https://rust-lang.github.io/rfcs/3308-offset_of.html)) to cover enum variants and use that. There might also be a smaller solution (that we'd still need to check re the rules of Rust layout), which would simply be `mem::size_of::<Option<T>>() - mem::size_of::<T>()`. I can see that this works for all types I've tested it with, and indeed I'm quite sure that it will work perfectly with the current layout implementation, but I'd like someone from the types team have a look at it before actually using it in a stable API.~~\r\n\r\nThe implementation now uses an approach that's always sound (just less efficient than optimal if the hack guesses wrong).  A stabilization conversation would probably still want to discuss whether we're comfortable with shipping that approach as stable (since the implementation could be improved non-breakingly later) or we'd prefer to wait for a more principled approach (such as an extension of `offset_of!` from https://github.com/rust-lang/rfcs/pull/3308 that allows enum variants) first.\r\n\r\n[^1]: https://std-dev-guide.rust-lang.org/feature-lifecycle/stabilization.html\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108545/reactions", "total_count": 3, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108545/timeline", "performed_via_github_app": null, "state_reason": null}