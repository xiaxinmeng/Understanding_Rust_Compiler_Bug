{"url": "https://api.github.com/repos/rust-lang/rust/issues/53934", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53934/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53934/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53934/events", "html_url": "https://github.com/rust-lang/rust/issues/53934", "id": 356611799, "node_id": "MDU6SXNzdWUzNTY2MTE3OTk=", "number": 53934, "title": "disambiguate between multiple suggestions and a single multi-span suggestion; or, JSON error format is not round-trippable", "user": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 419557634, "node_id": "MDU6TGFiZWw0MTk1NTc2MzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-medium", "name": "E-medium", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Medium / intermediate"}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}, {"id": 5400383360, "node_id": "LA_kwDOAAsO6M8AAAABQeNPgA", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-diagnostic-infra", "name": "D-diagnostic-infra", "color": "c9f7a3", "default": false, "description": "Issues that affect all diagnostics, or relate to the diagnostic machinery itself"}], "state": "open", "locked": false, "assignee": {"login": "yerke", "id": 5137691, "node_id": "MDQ6VXNlcjUxMzc2OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/5137691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yerke", "html_url": "https://github.com/yerke", "followers_url": "https://api.github.com/users/yerke/followers", "following_url": "https://api.github.com/users/yerke/following{/other_user}", "gists_url": "https://api.github.com/users/yerke/gists{/gist_id}", "starred_url": "https://api.github.com/users/yerke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yerke/subscriptions", "organizations_url": "https://api.github.com/users/yerke/orgs", "repos_url": "https://api.github.com/users/yerke/repos", "events_url": "https://api.github.com/users/yerke/events{/privacy}", "received_events_url": "https://api.github.com/users/yerke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "yerke", "id": 5137691, "node_id": "MDQ6VXNlcjUxMzc2OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/5137691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yerke", "html_url": "https://github.com/yerke", "followers_url": "https://api.github.com/users/yerke/followers", "following_url": "https://api.github.com/users/yerke/following{/other_user}", "gists_url": "https://api.github.com/users/yerke/gists{/gist_id}", "starred_url": "https://api.github.com/users/yerke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yerke/subscriptions", "organizations_url": "https://api.github.com/users/yerke/orgs", "repos_url": "https://api.github.com/users/yerke/repos", "events_url": "https://api.github.com/users/yerke/events{/privacy}", "received_events_url": "https://api.github.com/users/yerke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 29, "created_at": "2018-09-03T23:15:10Z", "updated_at": "2023-04-17T16:29:47Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "## Summary\r\n\r\nTo solve rust-lang-nursery/rustfix#141 (and one can only assume that RLS faces a similar problem), we need to be able to tell the difference between multiple suggestions (of which we likely only want to apply one), and a single suggestion that happens to touch multiple spans. The `DiagnosticBuilder` API supports this distinction by offering separate [`span_suggestions`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/struct.Diagnostic.html#method.span_suggestions) and [`multipart_suggestion`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/struct.Diagnostic.html#method.multipart_suggestion) methods. However, it looks like the actual JSON output conflates these two cases?! (I _hope_ I've simply misunderstood something; @estebank @oli-obk @killercup @nrc, please tell I'm just being stupid and wrong and confused here; the embarrassment of that would be less bad than than the headache of having to fix this.)\r\n\r\n## Diagnosis\r\n\r\nThe relevant layout of fields is this: `Diagnostic` [has a vec of many](https://github.com/rust-lang/rust/blob/cd5c26f0eb48c8f32ea86e9f2434d905ff2cfc74/src/librustc_errors/diagnostic.rs#L28) `CodeSuggestion`s, a `CodeSuggestion` [has a vec of many](https://github.com/rust-lang/rust/blob/cd5c26f0eb48c8f32ea86e9f2434d905ff2cfc74/src/librustc_errors/lib.rs#L99) `Substitution`s, and a `Substitution` [has a vec of many](https://github.com/rust-lang/rust/blob/cd5c26f0eb48c8f32ea86e9f2434d905ff2cfc74/src/librustc_errors/lib.rs#L113) `SubstitutionPart`s.\r\n\r\n[`span_suggestions` pushes](https://github.com/rust-lang/rust/blob/cd5c26f0eb48c8f32ea86e9f2434d905ff2cfc74/src/librustc_errors/diagnostic.rs#L303-L308) one `CodeSuggestion` with multiple `Substitution`s (each of which has a single `SubstitutionPart`) onto an existing diagnostic-builder. (So, arguably either the method name `span_suggestions` or the field name `suggestions` is a misnomer\u2014it's the \"substitutions\" that are plural here, not the \"suggestions\"; you'd have to call `.span_suggestion` multiple times to get multiple elements in `suggestions`. But leave that aside for the moment.)\r\n\r\n[`multipart_suggestion` pushes](https://github.com/rust-lang/rust/blob/cd5c26f0eb48c8f32ea86e9f2434d905ff2cfc74/src/librustc_errors/diagnostic.rs#L286-L292) one `CodeSuggestion` with one `Substitution` with multiple `SubstitutionParts` onto an existing diagnostic-builder.\r\n\r\nAll this is fine. The problem comes when we serialize diagnostics to JSON for `--error-format json`. The [serialized diagnostic format](https://github.com/rust-lang/rust/blob/cd5c26f0eb48c8f32ea86e9f2434d905ff2cfc74/src/libsyntax/json.rs#L97-L109) contains a `children` field whose elements are also serialized diagnostics (with no children themselves). The suggestions [are converted](https://github.com/rust-lang/rust/blob/cd5c26f0eb48c8f32ea86e9f2434d905ff2cfc74/src/libsyntax/json.rs#L175-L184) and [included as \"children\"](https://github.com/rust-lang/rust/blob/cd5c26f0eb48c8f32ea86e9f2434d905ff2cfc74/src/libsyntax/json.rs#L212-L214), but in doing so, we [flat-map all the substitution parts together](https://github.com/rust-lang/rust/blob/cd5c26f0eb48c8f32ea86e9f2434d905ff2cfc74/src/libsyntax/json.rs#L323-L338), making it impossible to know with certainty which parts came from the same `Substitution`.\r\n\r\n## Concrete examples\r\n\r\nThe following program (taken [from the rustfix test suite](https://github.com/rust-lang-nursery/rustfix/blob/ef816e0688f31b0613fdded80f474d30cc5ee46e/tests/edge-cases/skip-multi-option-lints.rs), but let's call it `ambiguous-display.rs` here) fails to compile because `Display` is not in scope. (Actually, it'll still fail after fixing that, but that doesn't matter for our purpose here.) \r\n\r\n```rust\r\nfn main() {\r\n    let xs = vec![String::from(\"foo\")];\r\n    let d: &Display = &xs;\r\n    println!(\"{}\", d);\r\n}\r\n```\r\n\r\nWe get two mutually-exclusive suggestions to use `std::fmt::Display` and `std::path::Display`, [issued in librustc_resolve](https://github.com/rust-lang/rust/blob/ee73f80dc963707df3b3da82976556d64cac5752/src/librustc_resolve/lib.rs#L4771-L4785).\r\n\r\nThe terminal error output is:\r\n\r\n```\r\nerror[E0412]: cannot find type `Display` in this scope\r\n --> ambiguous-display.rs:3:13\r\n  |\r\n3 |     let d: &Display = &xs;\r\n  |             ^^^^^^^ not found in this scope\r\nhelp: possible candidates are found in other modules, you can import them into scope\r\n  |\r\n1 | use std::fmt::Display;\r\n  |\r\n1 | use std::path::Display;\r\n\r\n```\r\n\r\nThe JSON error format is:\r\n\r\n```json\r\n{\r\n    \"message\": \"cannot find type `Display` in this scope\",\r\n    \"code\": {\r\n        \"code\": \"E0412\",\r\n        \"explanation\": \"\\nThe type name used is not in scope.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0412\\nimpl Something {} // error: type name `Something` is not in scope\\n\\n// or:\\n\\ntrait Foo {\\n    fn bar(N); // error: type name `N` is not in scope\\n}\\n\\n// or:\\n\\nfn foo(x: T) {} // type name `T` is not in scope\\n```\\n\\nTo fix this error, please verify you didn't misspell the type name, you did\\ndeclare it or imported it into the scope. Examples:\\n\\n```\\nstruct Something;\\n\\nimpl Something {} // ok!\\n\\n// or:\\n\\ntrait Foo {\\n    type N;\\n\\n    fn bar(_: Self::N); // ok!\\n}\\n\\n// or:\\n\\nfn foo<T>(x: T) {} // ok!\\n```\\n\\nAnother case that causes this error is when a type is imported into a parent\\nmodule. To fix this, you can follow the suggestion and use File directly or\\n`use super::File;` which will import the types from the parent namespace. An\\nexample that causes this error is below:\\n\\n```compile_fail,E0412\\nuse std::fs::File;\\n\\nmod foo {\\n    fn some_function(f: File) {}\\n}\\n```\\n\\n```\\nuse std::fs::File;\\n\\nmod foo {\\n    // either\\n    use super::File;\\n    // or\\n    // use std::fs::File;\\n    fn foo(f: File) {}\\n}\\n# fn main() {} // don't insert it for us; that'll break imports\\n```\\n\"\r\n    },\r\n    \"level\": \"error\",\r\n    \"spans\": [\r\n        {\r\n            \"file_name\": \"ambiguous-display.rs\",\r\n            \"byte_start\": 64,\r\n            \"byte_end\": 71,\r\n            \"line_start\": 3,\r\n            \"line_end\": 3,\r\n            \"column_start\": 13,\r\n            \"column_end\": 20,\r\n            \"is_primary\": true,\r\n            \"text\": [\r\n                {\r\n                    \"text\": \"    let d: &Display = &xs;\",\r\n                    \"highlight_start\": 13,\r\n                    \"highlight_end\": 20\r\n                }\r\n            ],\r\n            \"label\": \"not found in this scope\",\r\n            \"suggested_replacement\": null,\r\n            \"suggestion_applicability\": null,\r\n            \"expansion\": null\r\n        }\r\n    ],\r\n    \"children\": [\r\n        {\r\n            \"message\": \"possible candidates are found in other modules, you can import them into scope\",\r\n            \"code\": null,\r\n            \"level\": \"help\",\r\n            \"spans\": [\r\n                {\r\n                    \"file_name\": \"ambiguous-display.rs\",\r\n                    \"byte_start\": 0,\r\n                    \"byte_end\": 0,\r\n                    \"line_start\": 1,\r\n                    \"line_end\": 1,\r\n                    \"column_start\": 1,\r\n                    \"column_end\": 1,\r\n                    \"is_primary\": true,\r\n                    \"text\": [\r\n                        {\r\n                            \"text\": \"fn main() {\",\r\n                            \"highlight_start\": 1,\r\n                            \"highlight_end\": 1\r\n                        }\r\n                    ],\r\n                    \"label\": null,\r\n                    \"suggested_replacement\": \"use std::fmt::Display;\\n\\n\",\r\n                    \"suggestion_applicability\": \"Unspecified\",\r\n                    \"expansion\": null\r\n                },\r\n                {\r\n                    \"file_name\": \"ambiguous-display.rs\",\r\n                    \"byte_start\": 0,\r\n                    \"byte_end\": 0,\r\n                    \"line_start\": 1,\r\n                    \"line_end\": 1,\r\n                    \"column_start\": 1,\r\n                    \"column_end\": 1,\r\n                    \"is_primary\": true,\r\n                    \"text\": [\r\n                        {\r\n                            \"text\": \"fn main() {\",\r\n                            \"highlight_start\": 1,\r\n                            \"highlight_end\": 1\r\n                        }\r\n                    ],\r\n                    \"label\": null,\r\n                    \"suggested_replacement\": \"use std::path::Display;\\n\\n\",\r\n                    \"suggestion_applicability\": \"Unspecified\",\r\n                    \"expansion\": null\r\n                }\r\n            ],\r\n            \"children\": [],\r\n            \"rendered\": null\r\n        }\r\n    ],\r\n    \"rendered\": \"error[E0412]: cannot find type `Display` in this scope\\n --> ambiguous-display.rs:3:13\\n  |\\n3 |     let d: &Display = &xs;\\n  |             ^^^^^^^ not found in this scope\\nhelp: possible candidates are found in other modules, you can import them into scope\\n  |\\n1 | use std::fmt::Display;\\n  |\\n1 | use std::path::Display;\\n  |\\n\\n\"\r\n}\r\n```\r\n\r\nThe following program (`dot-dot-not-last.rs`) will fail to compile because `..` can only appear last in a struct pattern.\r\n\r\n```rustc\r\nstruct Point { x: isize, y: isize }\r\n\r\nfn main() {\r\n    let p = Point { x: 1, y: 2 };\r\n    let Point { .., y, } = p;\r\n}\r\n```\r\n\r\nWe get one unique suggestion that needs to touch multiple spans (removing the `..` from its original location and inserting it at the end), issued [in the parser](https://github.com/rust-lang/rust/blob/ee73f80dc963707df3b3da82976556d64cac5752/src/libsyntax/parse/parser.rs#L3904-L3910).\r\n\r\nThe terminal error output is:\r\n\r\n```\r\nerror: expected `}`, found `,`\r\n --> dot-dot-not-last.rs:5:19\r\n  |\r\n5 |     let Point { .., y, } = p;\r\n  |                 --^\r\n  |                 | |\r\n  |                 | expected `}`\r\n  |                 `..` must be at the end and cannot have a trailing comma\r\nhelp: move the `..` to the end of the field list\r\n  |\r\n5 |     let Point {  y, .. } = p;\r\n  |                --   ^^^^\r\n\r\n```\r\n\r\nThe JSON error output is:\r\n\r\n```json\r\n{\r\n    \"message\": \"expected `}`, found `,`\",\r\n    \"code\": null,\r\n    \"level\": \"error\",\r\n    \"spans\": [\r\n        {\r\n            \"file_name\": \"dot-dot-not-last.rs\",\r\n            \"byte_start\": 101,\r\n            \"byte_end\": 102,\r\n            \"line_start\": 5,\r\n            \"line_end\": 5,\r\n            \"column_start\": 19,\r\n            \"column_end\": 20,\r\n            \"is_primary\": true,\r\n            \"text\": [\r\n                {\r\n                    \"text\": \"    let Point { .., y, } = p;\",\r\n                    \"highlight_start\": 19,\r\n                    \"highlight_end\": 20\r\n                }\r\n            ],\r\n            \"label\": \"expected `}`\",\r\n            \"suggested_replacement\": null,\r\n            \"suggestion_applicability\": null,\r\n            \"expansion\": null\r\n        },\r\n        {\r\n            \"file_name\": \"dot-dot-not-last.rs\",\r\n            \"byte_start\": 99,\r\n            \"byte_end\": 102,\r\n            \"line_start\": 5,\r\n            \"line_end\": 5,\r\n            \"column_start\": 17,\r\n            \"column_end\": 20,\r\n            \"is_primary\": false,\r\n            \"text\": [\r\n                {\r\n                    \"text\": \"    let Point { .., y, } = p;\",\r\n                    \"highlight_start\": 17,\r\n                    \"highlight_end\": 20\r\n                }\r\n            ],\r\n            \"label\": \"`..` must be at the end and cannot have a trailing comma\",\r\n            \"suggested_replacement\": null,\r\n            \"suggestion_applicability\": null,\r\n            \"expansion\": null\r\n        }\r\n    ],\r\n    \"children\": [\r\n        {\r\n            \"message\": \"move the `..` to the end of the field list\",\r\n            \"code\": null,\r\n            \"level\": \"help\",\r\n            \"spans\": [\r\n                {\r\n                    \"file_name\": \"dot-dot-not-last.rs\",\r\n                    \"byte_start\": 99,\r\n                    \"byte_end\": 102,\r\n                    \"line_start\": 5,\r\n                    \"line_end\": 5,\r\n                    \"column_start\": 17,\r\n                    \"column_end\": 20,\r\n                    \"is_primary\": true,\r\n                    \"text\": [\r\n                        {\r\n                            \"text\": \"    let Point { .., y, } = p;\",\r\n                            \"highlight_start\": 17,\r\n                            \"highlight_end\": 20\r\n                        }\r\n                    ],\r\n                    \"label\": null,\r\n                    \"suggested_replacement\": \"\",\r\n                    \"suggestion_applicability\": \"Unspecified\",\r\n                    \"expansion\": null\r\n                },\r\n                {\r\n                    \"file_name\": \"dot-dot-not-last.rs\",\r\n                    \"byte_start\": 106,\r\n                    \"byte_end\": 107,\r\n                    \"line_start\": 5,\r\n                    \"line_end\": 5,\r\n                    \"column_start\": 24,\r\n                    \"column_end\": 25,\r\n                    \"is_primary\": true,\r\n                    \"text\": [\r\n                        {\r\n                            \"text\": \"    let Point { .., y, } = p;\",\r\n                            \"highlight_start\": 24,\r\n                            \"highlight_end\": 25\r\n                        }\r\n                    ],\r\n                    \"label\": null,\r\n                    \"suggested_replacement\": \".. }\",\r\n                    \"suggestion_applicability\": \"Unspecified\",\r\n                    \"expansion\": null\r\n                }\r\n            ],\r\n            \"children\": [],\r\n            \"rendered\": null\r\n        }\r\n    ],\r\n    \"rendered\": \"error: expected `}`, found `,`\\n --> dot-dot-not-last.rs:5:19\\n  |\\n5 |     let Point { .., y, } = p;\\n  |                 --^\\n  |                 | |\\n  |                 | expected `}`\\n  |                 `..` must be at the end and cannot have a trailing comma\\nhelp: move the `..` to the end of the field list\\n  |\\n5 |     let Point {  y, .. } = p;\\n  |                --   ^^^^\\n\\n\"\r\n}\r\n```\r\n\r\nWe'd want Rustfix (and similar tools) to apply _both_ of the suggestions in `children[0].spans` in the case of dot-dot-not-last.rs, but only one of them (offering a choice in an interactive mode) for ambiguous-display.rs. But how is Rustfix supposed to reliably tell the difference? (In the specific case of `span_suggestions`, you can check that the start and end spans are the same in `children[0].spans`, but I'd really rather not _rely_ on that to merely infer something that the format, I argue, _should_ state with certainty.)\r\n\r\nThis issue should likely receive the A-diagnostics and T-dev-tools (and, one might argue, P-high) labels.\r\n\r\n## Current proposed resolution\r\n\r\nThis issue is currently proposed to be left as a future improvement; [see this comment for the current status](https://github.com/rust-lang/rust/issues/53934#issuecomment-831396123)\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"yerke\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53934/reactions", "total_count": 7, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53934/timeline", "performed_via_github_app": null, "state_reason": null}