{"url": "https://api.github.com/repos/rust-lang/rust/issues/48825", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48825/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48825/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48825/events", "html_url": "https://github.com/rust-lang/rust/issues/48825", "id": 303233378, "node_id": "MDU6SXNzdWUzMDMyMzMzNzg=", "number": 48825, "title": "Add `is_signaling_nan()` to `std::f32` and `std::f64`", "user": {"login": "icefoxen", "id": 1335133, "node_id": "MDQ6VXNlcjEzMzUxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1335133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/icefoxen", "html_url": "https://github.com/icefoxen", "followers_url": "https://api.github.com/users/icefoxen/followers", "following_url": "https://api.github.com/users/icefoxen/following{/other_user}", "gists_url": "https://api.github.com/users/icefoxen/gists{/gist_id}", "starred_url": "https://api.github.com/users/icefoxen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/icefoxen/subscriptions", "organizations_url": "https://api.github.com/users/icefoxen/orgs", "repos_url": "https://api.github.com/users/icefoxen/repos", "events_url": "https://api.github.com/users/icefoxen/events{/privacy}", "received_events_url": "https://api.github.com/users/icefoxen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-03-07T19:42:24Z", "updated_at": "2018-05-07T13:53:24Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Use case: I'm writing a webassembly interpreter.  Webassembly specifies that signaling NaN's are invalid.  So, I must be able to detect signaling NaN's from my input and return an error when they occur.  But, Rust doesn't offer a method for it, so I had to write my own bit-twiddling implementations.  This isn't hard, but it seems like it should exist already.\r\n\r\nI first brought this up in the `num` crate, here: https://github.com/rust-num/num/issues/364 , but they can't add it to the `Float` trait without breaking backwards compatibility, and the exact definition of a signaling NaN is quite architecture-dependent (or at least more so than usual) so it seems like maybe it belongs in std anyway.\r\n\r\nFor any platform that implements IEEE 754-2008 the following implementations should suffice:\r\n\r\n```rust\r\n/// Returns whether or not the float is a signaling NaN.\r\n/// A signaling NaN has a format like:\r\n/// `s111 1111 1nxx xxxx xxxx xxxx xxxx xxxx`\r\n/// where the `x`'s represent a non-zero number (zero\r\n/// would be infinity) and `n` is 0.\r\n/// The sign bit `s` may be anything.\r\n///\r\n/// On some old-fashioned platforms (PA-RISC, some MIPS)\r\n/// a signaling NaN is marked by `n=1`, but the 2008 revision of\r\n/// IEEE754 defines it to be `n=0`.\r\nfn f32_is_signaling_nan(f: f32) -> bool {\r\n    let uf: u32 = f.to_bits();\r\n    let signal_bit = 1 << 22;\r\n    let signal_bit_clear = (uf & signal_bit) == 0;\r\n    f32::is_nan(f) && signal_bit_clear\r\n}\r\n\r\n/// Same as `f32_is_signaling_nan()` for `f64`'s.\r\n/// The signaling-nan-bit is bit 51 instead of bit 22\r\nfn f64_is_signaling_nan(f: f64) -> bool {\r\n    let uf: u64 = f.to_bits();\r\n    let signal_bit = 1 << 51;\r\n    let signal_bit_clear = (uf & signal_bit) == 0;\r\n    f64::is_nan(f) && signal_bit_clear\r\n}\r\n```\r\n\r\nHowever, I think LLVM has intrinsics for this too, if I'm looking in the right place: <https://llvm.org/doxygen/classllvm_1_1detail_1_1IEEEFloat.html#accc978f15db9b1b2b8e3ac171cbac4e3>\r\n\r\nI'll make an RFC if people want, but this didn't seem like a \"significant change\", so here it is.  I'll be happy to make a PR for these too if desired.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48825/timeline", "performed_via_github_app": null, "state_reason": null}