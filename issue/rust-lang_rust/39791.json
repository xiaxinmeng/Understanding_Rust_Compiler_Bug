{"url": "https://api.github.com/repos/rust-lang/rust/issues/39791", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/39791/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/39791/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/39791/events", "html_url": "https://github.com/rust-lang/rust/issues/39791", "id": 207303867, "node_id": "MDU6SXNzdWUyMDczMDM4Njc=", "number": 39791, "title": "rustc -O results in larger stack frames than no-opt", "user": {"login": "yzarubin", "id": 9013112, "node_id": "MDQ6VXNlcjkwMTMxMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/9013112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yzarubin", "html_url": "https://github.com/yzarubin", "followers_url": "https://api.github.com/users/yzarubin/followers", "following_url": "https://api.github.com/users/yzarubin/following{/other_user}", "gists_url": "https://api.github.com/users/yzarubin/gists{/gist_id}", "starred_url": "https://api.github.com/users/yzarubin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yzarubin/subscriptions", "organizations_url": "https://api.github.com/users/yzarubin/orgs", "repos_url": "https://api.github.com/users/yzarubin/repos", "events_url": "https://api.github.com/users/yzarubin/events{/privacy}", "received_events_url": "https://api.github.com/users/yzarubin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-02-13T18:42:16Z", "updated_at": "2017-07-25T18:43:21Z", "closed_at": "2017-07-25T18:43:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am rewriting some C++ code in Rust, and ran into an issue where certain code compiled with optimizations, actually results in larger stack frames than code compiled without optimizations leading to poorer recursive performance.\r\n\r\nThe code in question:\r\n```rust\r\nuse std::collections::*;\r\nstatic N: usize = 1800;\r\n\r\nfn go(i: usize, a: i64, b: i64, memo: &mut Vec<HashMap<i64, HashMap<i64, i64>>>) -> i64 {\r\n  if i == N { return 0 }\r\n\r\n  let ans = go(i + 1, a + 2, b - 1, memo);\r\n  memo[i].entry(a).or_insert(HashMap::new()).insert(b, ans);\r\n\r\n  return ans ^ a ^ b;\r\n}\r\n\r\nfn main() {\r\n  let mut memo = vec![HashMap::<i64, HashMap<i64, i64>>::new(); N];\r\n  let k = go(0, 0, 0, &mut memo);\r\n  println!(\"{}\", k);\r\n}\r\n```\r\n\r\nOn my machine, this code runs fine when compiled with `rustc`, but will result in SO when compiled with `rustc -O`. From my testing, optimizations result in a stack frame twice the size of no-opt. I suspect it has something to do with the hashmap usage, but I haven't dug deeper as I wanted to see if this is a known issue first.\r\n\r\nAnother comment I'd like to make, is that it seems to me, that both the -O and no-opt variants result in much poorer performance than equivalent C++ compiled with clang.\r\n\r\nThe equivalent C++11 program:\r\n\r\n```c++\r\n#include <vector>\r\n#include <unordered_map>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\nll N = 100000;\r\n\r\nll go(ll i, ll a, ll b, vector<unordered_map<ll, unordered_map<ll, ll>>> &memo) {\r\n  if (i == N) return 0;\r\n\r\n  auto ans = go(i + 1, a + 2, b - 1, memo);\r\n  memo[i][a][b] = ans;\r\n\r\n  return ans ^ a ^ b;\r\n}\r\n\r\nint main () {\r\n  vector<unordered_map<ll, unordered_map<ll, ll>>> memo(N);\r\n  auto k = go(0, 0, 0, memo);\r\n  printf(\"%lld\\n\", k);\r\n  return 0;\r\n}\r\n```\r\n\r\nWhen compiled on my machine (Darwin 14.5.0) with `g++ -std=c++11 -O3 `, it works for `N` up to 100000, which is almost 100x better than Rust.\r\n\r\n```\r\nrustc --version --verbose\r\nrustc 1.15.1 (021bd294c 2017-02-08)\r\nbinary: rustc\r\ncommit-hash: 021bd294c039bd54aa5c4aa85bcdffb0d24bc892\r\ncommit-date: 2017-02-08\r\nhost: x86_64-apple-darwin\r\nrelease: 1.15.1\r\nLLVM version: 3.9\r\n\r\ng++ --version\r\nApple LLVM version 7.0.2 (clang-700.1.81)\r\nTarget: x86_64-apple-darwin14.5.0\r\n```\r\n\r\n\r\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/39791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/39791/timeline", "performed_via_github_app": null, "state_reason": "completed"}