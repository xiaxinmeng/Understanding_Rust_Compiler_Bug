{"url": "https://api.github.com/repos/rust-lang/rust/issues/58834", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58834/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58834/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58834/events", "html_url": "https://github.com/rust-lang/rust/issues/58834", "id": 416034603, "node_id": "MDU6SXNzdWU0MTYwMzQ2MDM=", "number": 58834, "title": "Usage of boolean negation operator sometimes breaks closure type inference", "user": {"login": "CodeSandwich", "id": 26183680, "node_id": "MDQ6VXNlcjI2MTgzNjgw", "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CodeSandwich", "html_url": "https://github.com/CodeSandwich", "followers_url": "https://api.github.com/users/CodeSandwich/followers", "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}", "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}", "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions", "organizations_url": "https://api.github.com/users/CodeSandwich/orgs", "repos_url": "https://api.github.com/users/CodeSandwich/repos", "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}", "received_events_url": "https://api.github.com/users/CodeSandwich/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-01T10:21:07Z", "updated_at": "2023-04-28T09:58:58Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The closure implements a trait, which is accepted in a function. Depending on its body the closure type inference sometimes works and sometimes fails forcing user to annotate argument type ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=852633722647b74e5b5ed18261db0b72)):\r\n```rust\r\nuse std::ops::Not;\r\n\r\nfn main() {\r\n    bar(|x| x);             // ok\r\n    bar(|x| Not::not(x));   // ok\r\n    bar(|x: bool| x.not()); // needs type annotation\r\n    bar(|x: bool| !x);      // needs type annotation\r\n    bar(|x| !&x);           // ok\r\n    bar(|x: bool| !*&x);    // needs type annotation\r\n}\r\n\r\ntrait Foo<T> {\r\n    type Output;\r\n}\r\n\r\nimpl<F: Fn(T) -> O, T, O> Foo<T> for F {\r\n    type Output = O;\r\n}\r\n\r\nfn bar(_: impl Foo<bool, Output = bool>) {}\r\n```\r\nI'm not 100% sure that it's a bug, but the inconsistency is alarming.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58834/timeline", "performed_via_github_app": null, "state_reason": null}