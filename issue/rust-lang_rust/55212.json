{"url": "https://api.github.com/repos/rust-lang/rust/issues/55212", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55212/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55212/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55212/events", "html_url": "https://github.com/rust-lang/rust/issues/55212", "id": 372091952, "node_id": "MDU6SXNzdWUzNzIwOTE5NTI=", "number": 55212, "title": "A codegen option to stub `default_hook` + safe optimizations to `lang_start_internal` shrink the minimum executable size by 60%", "user": {"login": "alexchandel", "id": 637714, "node_id": "MDQ6VXNlcjYzNzcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/637714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexchandel", "html_url": "https://github.com/alexchandel", "followers_url": "https://api.github.com/users/alexchandel/followers", "following_url": "https://api.github.com/users/alexchandel/following{/other_user}", "gists_url": "https://api.github.com/users/alexchandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexchandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexchandel/subscriptions", "organizations_url": "https://api.github.com/users/alexchandel/orgs", "repos_url": "https://api.github.com/users/alexchandel/repos", "events_url": "https://api.github.com/users/alexchandel/events{/privacy}", "received_events_url": "https://api.github.com/users/alexchandel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-19T19:44:54Z", "updated_at": "2020-04-06T23:34:47Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The smallest \"Hello World\" binary in Rust using the normal entry point is roughly:\r\n\r\n```rust\r\nextern crate libc;\r\nuse std::alloc::System;\r\n#[global_allocator]\r\nstatic ALLOCATOR: System = System;\r\n\r\nfn main() {\r\n    const BUF: &'static [u8] = b\"Hello World!\\n\";\r\n    unsafe {\r\n        libc::write(libc::STDOUT_FILENO,\r\n                    BUF.as_ptr() as *const libc::c_void,\r\n                    BUF.len()\r\n        )\r\n    };\r\n}\r\n```\r\n\r\nThat's a good test of the minimum Rust binary size. Compiled with `opt-level = 's'`  `lto = true` on macOS 10.14 with the 17th's nightly, it is:\r\n\r\n| panic                | symbols  | size |\r\n|----------------------|----------|------|\r\n| (default = 'unwind') |          | 160K |\r\n| (default = 'unwind') | stripped | 121K |\r\n| 'abort'              |          | 133K |\r\n| 'abort'              | stripped | 101K |\r\n\r\nHowever about 60% of that is code that's (usually, see below) not used anywhere else in a program, and could be eliminated by adding a codegen option to disable the default panic hook + making a few safe optimizations to `lang_start_internal`.\r\n\r\n### 1. Codegen option to replace std::panicking::default_hook with an empty shim\r\n\r\nThis option would simply cause `std::panicking::default_hook` to be defined as `fn default_hook(_: &PanicInfo) {}`. With that definition, the above program shrinks from 120K -> 79K unstripped, 121K -> 55K striped (62K & 43K with `panic = 'abort'`). Decompilation indicates everything eliminated is backtrace/dsym/dwarf stuff.\r\n\r\nPanicking silently by eliminating the default hook is desirable in some situations, especially in stripped executables. Note that the code size reduction can't be achieved with `std::panicking::set_hook` though, because panic calls before main prevent `default_hook` from being optimized away.\r\n\r\n### 2. Optimize an inlined `sys_common::cleanup()`\r\n\r\n`sys_common::cleanup` is inlined into `lang_start_internal` and guaranteed to only ever be called once.  However the compiler can't optimize away the tests in its `std::sync::Once::call_once`, resulting in many unnecessary panic checks.\r\n\r\nManually removing these further shrinks an unwinding executable to 69K unstripped, 47K stripped. (`panic = 'abort'` even further to 53K & 34K.) Symbols from `std::sync::Once` account for the reduction, and it would apply to any program not using that type.\r\n\r\n### 3. Change `Thread::new` to `Thread::_new`\r\n\r\nFrom:\r\n\r\n```rust\r\nlet thread = Thread::new(Some(\"main\".to_owned()));\r\n```\r\n\r\nto:\r\n\r\n```rust\r\nlet thread = Thread::_new(::ffi::CString::_from_box_unchecked(Box::new(*b\"main\\0\")));\r\n```\r\n\r\nIn the former, `\"main\"` is guaranteed to result in a valid CString, and `Option` in guaranteed to be `Some`. Nonetheless 2 panic checks and a mutation are emitted.  In the latter, the resultant CString is still guaranteed to be valid. This cuts <1K, but skips the 2 unnecessary checks.\r\n\r\nNote that `pub(crate) unsafe fn _from_box_unchecked` is added to `CString` to skip mutating `b\"main\"` to `b\"main\\0\"` but is not strictly necessary to skip the checks. However `CString`'s Invariant 2 is still preserved with all public unsafe functions.\r\n\r\nThis doesn't currently happen, but `Thread::new(Some(\"main\".to_owned()))` would be inlined into `lang_start_internal` and the checks and mutation would be optimized away if the compiler could be taught:\r\n\r\n* that `\"main\".to_owned()` (`into()` a `Vec<u8>`) contains no `NulError`, and thus the call to `CString::new` could be rewritten to `CString::from_vec_unchecked`,\r\n* that afterwards, `CString::from_vec_unchecked` could be short-circuited by appending `0` to the original `Vec<u8>`,\r\n* and to apply these through calls to `Thread::new`.\r\n\r\n### Comments\r\n\r\nThe final reductions are:\r\n\r\n| panic                | symbols  | old  | new |\r\n|----------------------|----------|------|-----|\r\n| (default = 'unwind') |          | 160K | 69K |\r\n| (default = 'unwind') | stripped | 121K | 47K |\r\n| 'abort'              |          | 133K | 53K |\r\n| 'abort'              | stripped | 101K | 34K |\r\n\r\n`panic = 'unwind'` still correctly unwinds with an empty `default_hook` (albeit silently). AFAIK none of these changes should require an RFC, but let me know.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55212/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55212/timeline", "performed_via_github_app": null, "state_reason": null}