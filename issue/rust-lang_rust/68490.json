{"url": "https://api.github.com/repos/rust-lang/rust/issues/68490", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68490/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68490/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68490/events", "html_url": "https://github.com/rust-lang/rust/issues/68490", "id": 554366899, "node_id": "MDU6SXNzdWU1NTQzNjY4OTk=", "number": 68490, "title": "Tracking issue for RFC 2700: numeric constants as associated consts", "user": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89436934, "node_id": "MDU6TGFiZWw4OTQzNjkzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-approved", "name": "B-RFC-approved", "color": "d304cb", "default": false, "description": "Approved by a merged RFC but not yet implemented."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2020-01-23T19:46:17Z", "updated_at": "2023-02-16T19:34:24Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This is a tracking issue for [the RFC 2700](https://github.com/rust-lang/rfcs/blob/master/text/2700-associated-constants-on-ints.md) (rust-lang/rfcs#2700): \"Deprecate stdlib modules dedicated to numeric constants and move those constants to associated consts\".\r\n\r\n**Steps:**\r\n\r\n- [x] Add new constants (see #68325) \r\n- [x] Stabilize new constants ([see instructions on rustc-guide][stabilization-guide])\r\n- [x] Update test suite to use new constants (#78380)\r\n- [x] Fix error messages using old symbols (#78382)\r\n- [x] Support for indeterminate deprecation dates (#78381)\r\n- [x] Deprecate-in-future the old items\r\n- [ ] Fully deprecate the old items\r\n- [x] Adjust documentation ([see instructions on rustc-guide][doc-guide])\r\n\r\n[stabilization-guide]: https://rust-lang.github.io/rustc-guide/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rust-lang.github.io/rustc-guide/stabilization_guide.html#documentation-prs\r\n\r\n**Unresolved questions:**\r\n\r\n- [x] [Resolved: [Yes](https://github.com/rust-lang/rust/issues/68490#issuecomment-747022696)] Should the old items be deprecated? See the RFC thread as well as [\"unresolved questions\"](https://github.com/rust-lang/rfcs/blob/master/text/2700-associated-constants-on-ints.md#unresolved-questions): \r\n  > How long should we go before issuing a deprecation warning? At the extreme end of the scale we could wait until the next edition of Rust is released, and have the legacy items only issue deprecation warnings when opting in to the new edition; this would limit disruption only to people opting in to a new edition (and, being merely an trivially-addressed deprecation, would constitute far less of a disruption than any ordinary edition-related change; any impact of the deprecation would be mere noise in light of the broader edition-related impacts). However long it takes, it is the opinion of the author that deprecation should happen eventually, as we should not give the impression that it is the ideal state of things that there should exist three ways of finding the maximum value of an integer type; we expect experienced users to intuitively reach for the new way proposed in this RFC as the \"natural\" way these constants ought to be implemented, but for the sake of new users it would be a pedagogical wart to allow all three to exist without explicitly calling out the preferred one.\r\n- [x] [Resolved: [No](https://github.com/rust-lang/rust/issues/68490#issuecomment-747022696)] Should constants from `std::{f32, f64}::consts` also be made associated consts? From [the alternative question of the RFC](https://github.com/rust-lang/rfcs/blob/master/text/2700-associated-constants-on-ints.md#alternatives):\r\n  > Unlike the twelve integral modules, the two floating-point modules would not themselves be entirely deprecated by the changes proposed here. This is because the `std::f32` and `std::f64` modules each contain a `consts` submodule, in which reside constants of a more mathematical bent (the sort of things other languages might put in a `std::math` module).\r\n  > \r\n  > It is the author's opinion that special treatment for such \"math-oriented constants\" (as opposed to the \"machine-oriented constants\" addressed by this RFC) is not particularly precedented; e.g. this separation is not consistent with the existing set of associated functions implemented on `f32` and `f64`, which consist of a mix of both functions concerned with mathematical operations (e.g. `f32::atanh`) and functions concerned with machine representation (e.g. `f32::is_sign_negative`). However, although earlier versions of this RFC proposed deprecating `std::{f32, f64}::consts` (and thereby `std::{f32, f64}` as well), the current version does not do so, as this was met with mild resistance (and, in any case, the greatest gains from this RFC will be its impact on the integral modules).\r\n  > \r\n  > Ultimately, there is no reason that such a change could not be left to a future RFC if desired. However, one alternative design would be to turn all the constants in `{f32, f64}` into associated consts as well, which would leave no more modules in the standard library that shadow primitive types. A different alternative would be to restrict this RFC only to the integral modules, leaving f32 and f64 for a future RFC, since the integral modules are the most important aspect of this RFC and it would be a shame for them to get bogged down by the unrelated concerns of the floating-point modules.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68490/reactions", "total_count": 6, "+1": 5, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68490/timeline", "performed_via_github_app": null, "state_reason": null}