{"url": "https://api.github.com/repos/rust-lang/rust/issues/95822", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95822/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95822/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95822/events", "html_url": "https://github.com/rust-lang/rust/issues/95822", "id": 1197721252, "node_id": "I_kwDOAAsO6M5HY8ak", "number": 95822, "title": "Behavior of `let _ =` for captured variables in closure can be *very* strange", "user": {"login": "kyren", "id": 1538607, "node_id": "MDQ6VXNlcjE1Mzg2MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1538607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyren", "html_url": "https://github.com/kyren", "followers_url": "https://api.github.com/users/kyren/followers", "following_url": "https://api.github.com/users/kyren/following{/other_user}", "gists_url": "https://api.github.com/users/kyren/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyren/subscriptions", "organizations_url": "https://api.github.com/users/kyren/orgs", "repos_url": "https://api.github.com/users/kyren/repos", "events_url": "https://api.github.com/users/kyren/events{/privacy}", "received_events_url": "https://api.github.com/users/kyren/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-04-08T19:32:55Z", "updated_at": "2022-06-13T14:46:49Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In a project I'm working on, there was code like the following:\r\n\r\n```rust\r\nlet closure: Box<dyn Fn()> = {\r\n    // First we set up some kind of handle to a running task... this could be any RAII value or any\r\n    // handle, just something we need to keep alive.  The type does not implement Copy.\r\n    let handle = ...;\r\n\r\n    // We need to create a closure and keep the handle alive for as long as the closure, so we move\r\n    // it into the closure.\r\n    Box::new(move || {\r\n        // We need to tell rust that the handle should be moved into the closure, so just use it\r\n        // somehow.\r\n        let _ = handle;\r\n    })\r\n};\r\n```\r\n\r\nI can't bisect this right now across rust versions, but I could *swear* that at some point the behavior of this was to move `handle` into the closure and keep it alive until the closure was dropped.  That is not the case at least as of rust 1.60, as of the current rust, the `handle` value is dropped immediately when the enclosing block ends, so to fix this bug, the code was changed like this:\r\n\r\n```rust\r\nlet closure: Box<dyn Fn()> = {\r\n    let handle = ...;\r\n    Box::new(move || {\r\n        // Change `let _ = handle;` into `let _ = &handle;`\r\n        let _ = &handle;\r\n    })\r\n};\r\n```\r\n\r\nThis behaves as expected and keeps the `handle` value alive as long as the closure is alive.\r\n\r\nBut, the original situation is still strange to me.  Previously to this, I would have expected `let _ = x;` to be equivalent to `mem::drop(x);`, but that is not the case!  Replacing `let _ = handle;` with `mem::drop(handle);` actually makes the original code not compile at all, and this makes complete sense!  The handle value does not implement Copy, so by calling drop on it, you've moved the non-Copy value into a closure that is expected to implement `Fn()`, so you can't drop the one value once per closure call.  If using `let _ = x;` here was a compiler error, everything would make sense to me.\r\n\r\nThe behavior can be summarized like this:\r\n\r\n```rust\r\nfn main() {\r\n    struct Droppy;\r\n    impl Drop for Droppy {\r\n        fn drop(&mut self) {\r\n            println!(\"drop\")\r\n        }\r\n    }\r\n\r\n    let f: Box<dyn Fn()> = {\r\n        let d = Droppy;\r\n        Box::new(move || {\r\n            // Case 1: This makes sense that this causes `d` to be moved into the closure and not\r\n            // dropped until the closure is dropped.\r\n            // let _ = &d;\r\n            \r\n            // Case 2: This is a compiler error because `Droppy` is not Copy, makes sense.\r\n            // std::mem::drop(d);\r\n            \r\n            // Case 3: This compiles and drops `d` at the end of the enclosing block, *before* the\r\n            // closure is even called.  This is very strange.\r\n            let _ = d;\r\n        })\r\n    };\r\n\r\n    println!(\"start\");\r\n    f();\r\n    println!(\"end\");\r\n}\r\n```\r\n\r\ncase 1 prints\r\n```\r\nstart\r\nend\r\ndrop\r\n```\r\n \r\ncase 2 does not compile, with\r\n```cannot move out of `d`, a captured variable in an `Fn` closure```\r\n\r\ncase 3 prints\r\n```\r\ndrop\r\nstart\r\nend\r\n```\r\n\r\nI'm not sure if this is a bug or whether this behavior *truly* changed at some previous rust version or whether case 3 above should also be a compiler error, but this behavior is very surprising.\r\n\r\nIt also wouldn't surprise me if this was already a known bug and I have just completely failed to search for it properly, if this is a duplicate or already known then I apologize for the noise, but it's pretty hard to search for.  Sorry if that's the case!", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95822/timeline", "performed_via_github_app": null, "state_reason": null}