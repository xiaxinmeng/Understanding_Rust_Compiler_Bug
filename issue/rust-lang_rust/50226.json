{"url": "https://api.github.com/repos/rust-lang/rust/issues/50226", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50226/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50226/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50226/events", "html_url": "https://github.com/rust-lang/rust/issues/50226", "id": 317699156, "node_id": "MDU6SXNzdWUzMTc2OTkxNTY=", "number": 50226, "title": "Error-message if method taking Self:?Sized is implemented on trait directly", "user": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-25T16:18:23Z", "updated_at": "2020-07-14T00:32:24Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Maybe this is totally obvious (or even rtfm), yet I found this behaviour quite surprising. I ran into the problem when moving a method from a trait-implementation to the trait itself.\r\n\r\nIf a method that takes `self` is implemented on a trait directly, the compiler complains that `Self` is not `Sized`. If we split the implementation into it's own `impl`, even when there is no (explicit) `Sized`, everything Just Works \u2122.\r\n\r\nIt was said on `#rust` that the `impl`-variant has an implicit `Sized`-bound while the trait does not. This would make sense to me, yet the error message regarding `E0277` could be much better if it concerns a method taking `Self`, defined directly on the trait itself, and the missing bound is `Sized` .\r\n\r\nThis compiles:\r\n\r\n```rust\r\nuse std::any::Any;\r\n\r\n// Look ma, no :Sized!\r\ntrait Foobar<'a> {\r\n    fn foo(self) -> Box<Any + 'a>;\r\n}\r\n\r\n// Look popa, no :Sized!\r\nimpl<'a, T> Foobar<'a> for T where T: 'a {\r\n    fn foo(self) -> Box<Any + 'a> {\r\n        Box::new(self)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let _foo: Box<Any> = \"foo\".foo();\r\n}\r\n```\r\n\r\nThis does not:\r\n\r\n```rust\r\nuse std::any::Any;\r\n\r\n// Causes an error because Self is ?Sized\r\ntrait Foobar<'a> {\r\n    fn foo(self) -> Box<Any + 'a> {\r\n        Box::new(self)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let _foo: Box<Any> = \"foo\".foo();\r\n}\r\n```\r\n\r\n> error[E0277]: the trait bound `Self: std::marker::Sized` is not satisfied\r\n>  --> src/main.rs:6:12\r\n>   |\r\n> 6 |     fn foo(self) -> Box<Any + 'a> {\r\n>   |            ^^^^ `Self` does not have a constant size known at compile-time\r\n>   |\r\n>   = help: the trait `std::marker::Sized` is not implemented for `Self`\r\n>   = help: consider adding a `where Self: std::marker::Sized` bound\r\n>   = note: all local variables must have a statically known size\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50226/timeline", "performed_via_github_app": null, "state_reason": null}