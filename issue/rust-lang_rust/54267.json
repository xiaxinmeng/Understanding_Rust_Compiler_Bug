{"url": "https://api.github.com/repos/rust-lang/rust/issues/54267", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54267/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54267/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54267/events", "html_url": "https://github.com/rust-lang/rust/issues/54267", "id": 360585700, "node_id": "MDU6SXNzdWUzNjA1ODU3MDA=", "number": 54267, "title": "mpsc::Receiver::recv_timeout may panic in weird edgecase", "user": {"login": "kpcyrd", "id": 7763184, "node_id": "MDQ6VXNlcjc3NjMxODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7763184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpcyrd", "html_url": "https://github.com/kpcyrd", "followers_url": "https://api.github.com/users/kpcyrd/followers", "following_url": "https://api.github.com/users/kpcyrd/following{/other_user}", "gists_url": "https://api.github.com/users/kpcyrd/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpcyrd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpcyrd/subscriptions", "organizations_url": "https://api.github.com/users/kpcyrd/orgs", "repos_url": "https://api.github.com/users/kpcyrd/repos", "events_url": "https://api.github.com/users/kpcyrd/events{/privacy}", "received_events_url": "https://api.github.com/users/kpcyrd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-15T23:38:57Z", "updated_at": "2018-09-23T00:59:38Z", "closed_at": "2018-09-23T00:59:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Description\r\n\r\nI'm currently stuck in a very obscure edgecase: the first recv_timeout panics the program with an assertion fail if no message is received until the timeout. If a message is sent before this timeout the program won't crash, even if the 2nd call to recv_timeout does hit the timeout:\r\n\r\n## This does work\r\n1. recv_timeout(100ms) // message is sent within that time\r\n2. message is processed\r\n3. recv_timeout(100ms) // no message within timeout\r\n4. program doesn't crash and tries again\r\n\r\n## This doesn't work\r\n1. recv_timeout(100ms) // no message within timeout\r\n2. assertion fail in stdlib panics the program\r\n\r\n## Backtrace\r\n\r\n```\r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `112055772029824`,\r\n right: `0`', libstd/sync/mpsc/shared.rs:253:13\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::print\r\n             at libstd/sys_common/backtrace.rs:71\r\n             at libstd/sys_common/backtrace.rs:59\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at libstd/panicking.rs:211\r\n   3: std::panicking::default_hook\r\n             at libstd/panicking.rs:227\r\n   4: std::panicking::rust_panic_with_hook\r\n             at libstd/panicking.rs:475\r\n   5: std::panicking::continue_panic_fmt\r\n             at libstd/panicking.rs:390\r\n   6: std::panicking::begin_panic_fmt\r\n             at libstd/panicking.rs:345\r\n   7: <std::sync::mpsc::shared::Packet<T>>::decrement\r\n             at /checkout/src/libstd/macros.rs:78\r\n   8: <std::sync::mpsc::shared::Packet<T>>::recv\r\n             at /checkout/src/libstd/sync/mpsc/shared.rs:232\r\n   9: <std::sync::mpsc::Receiver<T>>::recv_deadline\r\n             at /checkout/src/libstd/sync/mpsc/mod.rs:1387\r\n  10: <std::sync::mpsc::Receiver<T>>::recv_timeout\r\n             at /checkout/src/libstd/sync/mpsc/mod.rs:1300\r\n[my code starts here]\r\n```\r\n\r\n## Code from stdlib\r\nThis is the code in question. The first assert fails for unknown reasons (not sure how `to_wake` is used):\r\n\r\n```rust\r\n    // Essentially the exact same thing as the stream decrement function.\r\n    // Returns true if blocking should proceed.\r\n    fn decrement(&self, token: SignalToken) -> StartResult {\r\n        unsafe {\r\n            assert_eq!(self.to_wake.load(Ordering::SeqCst), 0);\r\n            let ptr = token.cast_to_usize();\r\n            self.to_wake.store(ptr, Ordering::SeqCst);\r\n\r\n\r\n            let steals = ptr::replace(self.steals.get(), 0);\r\n\r\n\r\n            match self.cnt.fetch_sub(1 + steals, Ordering::SeqCst) {\r\n                DISCONNECTED => { self.cnt.store(DISCONNECTED, Ordering::SeqCst); }\r\n                // If we factor in our steals and notice that the channel has no\r\n                // data, we successfully sleep\r\n                n => {\r\n                    assert!(n >= 0);\r\n                    if n - steals <= 0 { return Installed }\r\n                }\r\n            }\r\n\r\n\r\n            self.to_wake.store(0, Ordering::SeqCst);\r\n            drop(SignalToken::cast_from_usize(ptr));\r\n            Abort\r\n        }\r\n    }\r\n```\r\n\r\n## Failed attempt to reproduce\r\n\r\nThe issue is 100% reliable in my codebase (the number changes, but the panic is always the same, even after full rebuilds), I've tried to build a test case that is structed the same way my program is structured but failed to reproduce the issue. The full code base isn't public yet.\r\n\r\n```rust\r\nuse std::thread;\r\nuse std::sync::mpsc;\r\nuse std::time::Duration;\r\n\r\nenum Event {\r\n    Tick,\r\n    Done,\r\n}\r\n\r\nfn main() {\r\n    let (tx, rx) = mpsc::channel();\r\n\r\n    thread::spawn(move || {\r\n        thread::sleep(Duration::from_secs(3));\r\n        tx.send(Event::Tick).unwrap();\r\n        thread::sleep(Duration::from_secs(3));\r\n        tx.send(Event::Done).unwrap();\r\n    });\r\n\r\n    loop {\r\n        match rx.recv_timeout(Duration::from_secs(100)) {\r\n            Ok(Event::Tick) => println!(\"tick\"),\r\n            Ok(Event::Done) => break,\r\n            Err(mpsc::RecvTimeoutError::Timeout) => (),\r\n            Err(mpsc::RecvTimeoutError::Disconnected) => break,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Random thoughts\r\n\r\nI'm suspecting there might be a dependency at fault that has unsound unsafe code, but I'm running out of ideas how to debug this (had some issues with valgrind and still working on getting it to work). Some pointers would be appreciated.\r\n\r\n## System info\r\nArchlinux with stable rustc from rustup:\r\n```\r\nrustc 1.29.0 (aa3ca1994 2018-09-11)\r\ncargo 1.29.0 (524a578d7 2018-08-05)\r\n```", "closed_by": {"login": "kpcyrd", "id": 7763184, "node_id": "MDQ6VXNlcjc3NjMxODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7763184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpcyrd", "html_url": "https://github.com/kpcyrd", "followers_url": "https://api.github.com/users/kpcyrd/followers", "following_url": "https://api.github.com/users/kpcyrd/following{/other_user}", "gists_url": "https://api.github.com/users/kpcyrd/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpcyrd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpcyrd/subscriptions", "organizations_url": "https://api.github.com/users/kpcyrd/orgs", "repos_url": "https://api.github.com/users/kpcyrd/repos", "events_url": "https://api.github.com/users/kpcyrd/events{/privacy}", "received_events_url": "https://api.github.com/users/kpcyrd/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54267/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54267/timeline", "performed_via_github_app": null, "state_reason": "completed"}