{"url": "https://api.github.com/repos/rust-lang/rust/issues/111457", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111457/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111457/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111457/events", "html_url": "https://github.com/rust-lang/rust/issues/111457", "id": 1705183113, "node_id": "I_kwDOAAsO6M5loweJ", "number": 111457, "title": "std::str::split_inclusive gives unexpected results compared to std::str::split", "user": {"login": "vdods", "id": 8673448, "node_id": "MDQ6VXNlcjg2NzM0NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/8673448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vdods", "html_url": "https://github.com/vdods", "followers_url": "https://api.github.com/users/vdods/followers", "following_url": "https://api.github.com/users/vdods/following{/other_user}", "gists_url": "https://api.github.com/users/vdods/gists{/gist_id}", "starred_url": "https://api.github.com/users/vdods/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vdods/subscriptions", "organizations_url": "https://api.github.com/users/vdods/orgs", "repos_url": "https://api.github.com/users/vdods/repos", "events_url": "https://api.github.com/users/vdods/events{/privacy}", "received_events_url": "https://api.github.com/users/vdods/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-05-11T06:52:32Z", "updated_at": "2023-05-11T10:12:49Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nUp front, thanks everyone who has worked on Rust for creating a fantastic language :-)\r\n\r\nI tried this code:\r\n\r\n```rust\r\nfn run_case_char(s: &str, sep: char) {\r\n    println!(\"{:?} --- split_inclusive --> {:?}\", s, s.split_inclusive(sep).collect::<Vec<_>>());\r\n    println!(\"{:?} --- split           --> {:?}\", s, s.split(sep).collect::<Vec<_>>());\r\n}\r\n\r\nfn main() {\r\n    run_case_char(\"xsys\", 's');\r\n    run_case_char(\"xsy\", 's');\r\n    run_case_char(\"xs\", 's');\r\n    run_case_char(\"x\", 's');\r\n    run_case_char(\"\", 's');\r\n}\r\n```\r\n\r\nI expected to see this happen: I expected the output of `std::str::split_inclusive` to be identical to that of `std::str::split` except with the separator included.  In particular, I expected the same number of items in the iterator.  The precise output was:\r\n```\r\n\"xsys\" --- split_inclusive --> [\"xs\", \"ys\"]\r\n\"xsys\" --- split           --> [\"x\", \"y\", \"\"]\r\n\"xsy\" --- split_inclusive --> [\"xs\", \"y\"]\r\n\"xsy\" --- split           --> [\"x\", \"y\"]\r\n\"xs\" --- split_inclusive --> [\"xs\"]\r\n\"xs\" --- split           --> [\"x\", \"\"]\r\n\"x\" --- split_inclusive --> [\"x\"]\r\n\"x\" --- split           --> [\"x\"]\r\n\"\" --- split_inclusive --> []\r\n\"\" --- split           --> [\"\"]\r\n```\r\n\r\nInstead, this happened: In the calls to `std::str::split_inclusive`, if the last substring was the empty string, it was not included in the result.  This was extra surprising when the input string was the empty string, in which case the resulting iterator has no elements.\r\n\r\nI see an explanation of this behavior under the examples section of the documentation for `std::str::split_inclusive`: \"If the last element of the string is matched, that element will be considered the terminator of the preceding substring. That substring will be the last item returned by the iterator.\"  However, this seems to contradict the definitional description: \"An iterator over substrings of this string slice, separated by characters matched by a pattern. Differs from the iterator produced by split in that split_inclusive leaves the matched part as the terminator of the substring.\"\r\n\r\nAnyway, a concrete example of why I think the empty string should not be ignored at the end is producing a contiguous segmentation of a string into newline-terminated lines that agrees with the line count.  The line count is 1 plus the number of newlines in the string, and the last line may well be the empty string, but it's no less valid as a line.\r\n\r\nLooking at the source, I see that the implementation of the method is\r\n```\r\n    pub fn split_inclusive<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitInclusive<'a, P> {\r\n        SplitInclusive(SplitInternal {\r\n            start: 0,\r\n            end: self.len(),\r\n            matcher: pat.into_searcher(self),\r\n            allow_trailing_empty: false,\r\n            finished: false,\r\n        })\r\n    }\r\n```\r\nand in particular, the presence of `allow_trailing_empty` implies that in principle either behavior could be specified easily, though obviously that's hidden behind the private type SplitInternal.\r\n\r\nAnyway, I realize that it's probably not feasible to change the behavior of the existing method.  I would be in favor of adding the ability to specify `allow_trailing_empty` somehow.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.67.1 (d5a82bbd2 2023-02-07)\r\nbinary: rustc\r\ncommit-hash: d5a82bbd26e1ad8b7401f6a718a9c57c96905483\r\ncommit-date: 2023-02-07\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.67.1\r\nLLVM version: 15.0.6\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111457/timeline", "performed_via_github_app": null, "state_reason": null}