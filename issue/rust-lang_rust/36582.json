{"url": "https://api.github.com/repos/rust-lang/rust/issues/36582", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/36582/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/36582/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/36582/events", "html_url": "https://github.com/rust-lang/rust/issues/36582", "id": 177828375, "node_id": "MDU6SXNzdWUxNzc4MjgzNzU=", "number": 36582, "title": "Rust has trouble seeing higher ranked lifetimes through generics", "user": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-09-19T16:13:50Z", "updated_at": "2021-09-15T17:19:04Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Rust has trouble seeing that a generic function is \"generic\" over higher ranked lifetimes. This behavior is best described by example. Given:\n\n``` rust\nfn id<X>(x: X) -> X { x }\n\nfn id_wrapped<'a, T>(v: &'a T) -> &'a T {\n    // Defined for<'a>. No coercion.\n    id::<&'a T>(v)\n}\n\nfn has_hrl<F: Fn(&()) -> &()>(f: F) {}\n\nfn main() {\n    has_hrl(id);\n    has_hrl(id_wrapped);\n    has_hrl(|x| id(x));\n}\n```\n\nRust complains:\n\n``` rust\nerror[E0281]: type mismatch: the type `fn(_) -> _ {id::<_>}` implements the trait `std::ops::Fn<(_,)>`, but the trait `for<'r> std::ops::Fn<(&'r (),)>` is required (expected concrete lifetime, found bound lifetime parameter )\n  --> tmp.rs:11:5\n   |\n11 |     has_hrl(id);\n   |     ^^^^^^^\n   |\n   = note: required by `has_hrl`\n\nerror[E0271]: type mismatch resolving `for<'r> <fn(_) -> _ {id::<_>} as std::ops::FnOnce<(&'r (),)>>::Output == &'r ()`\n  --> tmp.rs:11:5\n   |\n11 |     has_hrl(id);\n   |     ^^^^^^^ expected bound lifetime parameter , found concrete lifetime\n   |\n   = note: concrete lifetime that was found is lifetime '_#0r\n   = note: required by `has_hrl`\n\nerror: aborting due to 2 previous errors\n```\n\nHowever, the `has_hrl(id_wrapped)` and `has_hrl(|x| id(x))` calls demonstrate that, at some level, the rust type checker infers that `id` implements `for<'r> Fn(&'r ()) -> &'r ()`. That's why I filed this as a bug instead of an RFC issue. However, I can move this if you feel that it's too much of a feature request.\n\n---\n\nMy motivation is functional programming. Not being able to infer that a generic function is defined for some HRL makes it impossible to use such functions with, e.g., `Iterator::filter`.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/36582/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/36582/timeline", "performed_via_github_app": null, "state_reason": null}