{"url": "https://api.github.com/repos/rust-lang/rust/issues/60606", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60606/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60606/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60606/events", "html_url": "https://github.com/rust-lang/rust/issues/60606", "id": 441250604, "node_id": "MDU6SXNzdWU0NDEyNTA2MDQ=", "number": 60606, "title": "Clarification on **must** word in CStr::from_bytes_with_nul_unchecked docs", "user": {"login": "kpp", "id": 467709, "node_id": "MDQ6VXNlcjQ2NzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpp", "html_url": "https://github.com/kpp", "followers_url": "https://api.github.com/users/kpp/followers", "following_url": "https://api.github.com/users/kpp/following{/other_user}", "gists_url": "https://api.github.com/users/kpp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpp/subscriptions", "organizations_url": "https://api.github.com/users/kpp/orgs", "repos_url": "https://api.github.com/users/kpp/repos", "events_url": "https://api.github.com/users/kpp/events{/privacy}", "received_events_url": "https://api.github.com/users/kpp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-05-07T14:01:42Z", "updated_at": "2019-05-08T15:26:39Z", "closed_at": "2019-05-08T15:26:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/rust-lang/rust/blob/55c48b4e823ad3518bb8e6d3fd7da4f2fc0c5fc2/src/libstd/ffi/c_str.rs#L1017\r\n\r\nLet's take a look at https://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked :\r\n\r\n> Unsafely creates a C string wrapper from a byte slice.\r\n  This function will cast the provided bytes to a CStr wrapper without performing any sanity checks. The provided slice **must** be nul-terminated and not contain any interior nul bytes.\r\n\r\nIn some weird cases it is OK to create CStr from a non-nul-terminated and containing any interior nul bytes. It does not feel right to do so, because CStr stands for type representing a borrowed reference to a nul-terminated array of bytes, however it can be useful when dealing with a tricky C code. Let's take a look where (I believe) there is no UB and no errors:\r\n\r\n```\r\nuse std::ffi::CStr;\r\n\r\nfn main() {\r\n    let bytes = [42, 0, 42];\r\n    unsafe {\r\n        let cstr = CStr::from_bytes_with_nul_unchecked(&bytes[..]);\r\n        let ptr = cstr.as_ptr();\r\n        dbg!(ptr);\r\n    };\r\n}\r\n```\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e5d413791dc64a7d85be34733fb297eb\r\n\r\nAccording to https://www.ietf.org/rfc/rfc2119.txt **MUST**:\r\n\r\n> MUST   This word, or the terms \"REQUIRED\" or \"SHALL\", mean that the\r\n   definition is an **absolute** requirement of the specification.\r\n\r\nSo I feel like \"**must** be nul-terminated and not contain any interior nul bytes\" is too absolute for the docs, and the word **should** will fit better (with some kind of clarification), because:\r\n\r\n> SHOULD   This word, or the adjective \"RECOMMENDED\", mean that there\r\n   may exist valid reasons in particular circumstances to ignore a\r\n   particular item, but the full implications must be understood and\r\n   carefully weighed before choosing a different course.\r\n\r\ncc @RalfJung \r\n", "closed_by": {"login": "kpp", "id": 467709, "node_id": "MDQ6VXNlcjQ2NzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpp", "html_url": "https://github.com/kpp", "followers_url": "https://api.github.com/users/kpp/followers", "following_url": "https://api.github.com/users/kpp/following{/other_user}", "gists_url": "https://api.github.com/users/kpp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpp/subscriptions", "organizations_url": "https://api.github.com/users/kpp/orgs", "repos_url": "https://api.github.com/users/kpp/repos", "events_url": "https://api.github.com/users/kpp/events{/privacy}", "received_events_url": "https://api.github.com/users/kpp/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60606/timeline", "performed_via_github_app": null, "state_reason": "completed"}