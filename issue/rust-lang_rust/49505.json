{"url": "https://api.github.com/repos/rust-lang/rust/issues/49505", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49505/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49505/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49505/events", "html_url": "https://github.com/rust-lang/rust/issues/49505", "id": 310047267, "node_id": "MDU6SXNzdWUzMTAwNDcyNjc=", "number": 49505, "title": "Derive(PartialOrd) generates pretty bad code", "user": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 849077850, "node_id": "MDU6TGFiZWw4NDkwNzc4NTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-compiler-performance", "name": "WG-compiler-performance", "color": "c2e0c6", "default": false, "description": "Working group: Compiler Performance"}, {"id": 884691893, "node_id": "MDU6TGFiZWw4ODQ2OTE4OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-codegen", "name": "WG-codegen", "color": "c2e0c6", "default": false, "description": "Working Group: Codegen (Runtime perf and code size)"}], "state": "closed", "locked": false, "assignee": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-03-30T11:48:16Z", "updated_at": "2018-05-15T05:39:45Z", "closed_at": "2018-05-15T05:39:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\n#[automatically_derived]\r\n#[allow(unused_qualifications)]\r\nimpl <T: ::std::cmp::PartialOrd> ::std::cmp::PartialOrd for Option<T> {\r\n    #[inline]\r\n    fn partial_cmp(&self, __arg_0: &Option<T>)\r\n     -> ::std::option::Option<::std::cmp::Ordering> {\r\n        {\r\n            let __self_vi =\r\n                unsafe { ::std::intrinsics::discriminant_value(&*self) } as\r\n                    isize;\r\n            let __arg_1_vi =\r\n                unsafe { ::std::intrinsics::discriminant_value(&*__arg_0) } as\r\n                    isize;\r\n            if true && __self_vi == __arg_1_vi {\r\n                match (&*self, &*__arg_0) {\r\n                    (&Option::Some(ref __self_0),\r\n                     &Option::Some(ref __arg_1_0)) =>\r\n                    match ::std::cmp::PartialOrd::partial_cmp(&(*__self_0),\r\n                                                              &(*__arg_1_0)) {\r\n                        ::std::option::Option::Some(::std::cmp::Ordering::Equal)\r\n                        =>\r\n                        ::std::option::Option::Some(::std::cmp::Ordering::Equal),\r\n                        __cmp => __cmp,\r\n                    },\r\n                    _ =>\r\n                    ::std::option::Option::Some(::std::cmp::Ordering::Equal),\r\n                }\r\n            } else { __self_vi.partial_cmp(&__arg_1_vi) }\r\n        }\r\n    }\r\n    #[inline]\r\n    fn lt(&self, __arg_0: &Option<T>) -> bool {\r\n        {\r\n            let __self_vi =\r\n                unsafe { ::std::intrinsics::discriminant_value(&*self) } as\r\n                    isize;\r\n            let __arg_1_vi =\r\n                unsafe { ::std::intrinsics::discriminant_value(&*__arg_0) } as\r\n                    isize;\r\n            if true && __self_vi == __arg_1_vi {\r\n                match (&*self, &*__arg_0) {\r\n                    (&Option::Some(ref __self_0),\r\n                     &Option::Some(ref __arg_1_0)) =>\r\n                    (*__self_0) < (*__arg_1_0) ||\r\n                        !((*__arg_1_0) < (*__self_0)) && false,\r\n                    _ => false,\r\n                }\r\n            } else { __self_vi.lt(&__arg_1_vi) }\r\n        }\r\n    }\r\n    #[inline]\r\n    fn le(&self, __arg_0: &Option<T>) -> bool {\r\n        {\r\n            let __self_vi =\r\n                unsafe { ::std::intrinsics::discriminant_value(&*self) } as\r\n                    isize;\r\n            let __arg_1_vi =\r\n                unsafe { ::std::intrinsics::discriminant_value(&*__arg_0) } as\r\n                    isize;\r\n            if true && __self_vi == __arg_1_vi {\r\n                match (&*self, &*__arg_0) {\r\n                    (&Option::Some(ref __self_0),\r\n                     &Option::Some(ref __arg_1_0)) =>\r\n                    (*__self_0) < (*__arg_1_0) ||\r\n                        !((*__arg_1_0) < (*__self_0)) && true,\r\n                    _ => true,\r\n                }\r\n            } else { __self_vi.le(&__arg_1_vi) }\r\n        }\r\n    }\r\n    #[inline]\r\n    fn gt(&self, __arg_0: &Option<T>) -> bool {\r\n        {\r\n            let __self_vi =\r\n                unsafe { ::std::intrinsics::discriminant_value(&*self) } as\r\n                    isize;\r\n            let __arg_1_vi =\r\n                unsafe { ::std::intrinsics::discriminant_value(&*__arg_0) } as\r\n                    isize;\r\n            if true && __self_vi == __arg_1_vi {\r\n                match (&*self, &*__arg_0) {\r\n                    (&Option::Some(ref __self_0),\r\n                     &Option::Some(ref __arg_1_0)) =>\r\n                    (*__self_0) > (*__arg_1_0) ||\r\n                        !((*__arg_1_0) > (*__self_0)) && false,\r\n                    _ => false,\r\n                }\r\n            } else { __self_vi.gt(&__arg_1_vi) }\r\n        }\r\n    }\r\n    #[inline]\r\n    fn ge(&self, __arg_0: &Option<T>) -> bool {\r\n        {\r\n            let __self_vi =\r\n                unsafe { ::std::intrinsics::discriminant_value(&*self) } as\r\n                    isize;\r\n            let __arg_1_vi =\r\n                unsafe { ::std::intrinsics::discriminant_value(&*__arg_0) } as\r\n                    isize;\r\n            if true && __self_vi == __arg_1_vi {\r\n                match (&*self, &*__arg_0) {\r\n                    (&Option::Some(ref __self_0),\r\n                     &Option::Some(ref __arg_1_0)) =>\r\n                    (*__self_0) > (*__arg_1_0) ||\r\n                        !((*__arg_1_0) > (*__self_0)) && true,\r\n                    _ => true,\r\n                }\r\n            } else { __self_vi.ge(&__arg_1_vi) }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nInstead of doing stuff such as `(a > b) || !(b > a) && true` in `ge`, rustc should probably just reuse the operator syntax by doing `a >= b`.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49505/timeline", "performed_via_github_app": null, "state_reason": "completed"}