{"url": "https://api.github.com/repos/rust-lang/rust/issues/89526", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89526/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89526/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89526/events", "html_url": "https://github.com/rust-lang/rust/issues/89526", "id": 1015488750, "node_id": "I_kwDOAAsO6M48hyDu", "number": 89526, "title": "Type mismatch error on associated type as array type in trait bound", "user": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-10-04T18:22:01Z", "updated_at": "2023-04-30T10:38:02Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This example is fairly contrived, but I believe it should compile\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7d37659480cbde3d0455ab62b80f029c\r\n\r\n<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\n```rust\r\npub trait Foo {\r\n    type Size: Copy;\r\n\r\n    fn to_bytes(&self) -> [Self::Size; 9];\r\n}\r\n\r\npub trait MyTrait<T> {}\r\n\r\nimpl<T> MyTrait<T> for T {}\r\n\r\npub fn bar<G: Foo, T: Foo>(a: &G, _b : &T) -> G::Size\r\nwhere\r\n    [T::Size; 9]: MyTrait<T::Size>,\r\n{\r\n    deeper_bar(a)\r\n}\r\n\r\nfn deeper_bar<G: Foo>(a: &G) -> G::Size\r\nwhere\r\n    [G::Size; 9]: MyTrait<G::Size>,\r\n    // The compiler selects the ParamCandidate ([T::Size; 9]: MyTrait<T::Size>) to prove this bound\r\n{\r\n    a.to_bytes()[0]\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nI expected to see this happen: Code compiles\r\n\r\nInstead, this happened: \r\n\r\nWe get the following error on both the nightly and stable version:\r\n\r\n```\r\nerror[E0271]: type mismatch resolving `<G as Foo>::Size == <T as Foo>::Size`\r\n  --> non_const_effective2.rs:17:5\r\n   |\r\n13 | pub fn bar<G: Foo, T: Foo>(a: &G, _b : &T) -> G::Size\r\n   |            -       - found type parameter\r\n   |            |\r\n   |            expected type parameter\r\n...\r\n17 |     deeper_bar(a)\r\n   |     ^^^^^^^^^^ expected type parameter `G`, found type parameter `T`\r\n   |\r\n   = note: expected associated type `<G as Foo>::Size`\r\n              found associated type `<T as Foo>::Size`\r\n   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nI think this fails because we incorrectly choose a candidate from the caller bounds, since type inference equates the two associated types. We end up with two candidates but reject the ImplCandidate in favour of the ParamCandidate.\r\n\r\nUsing the associated type directly instead of inside an array does not cause an error:\r\n\r\n```\r\npub trait Foo {\r\n    type Size: Copy;\r\n\r\n    fn to_bytes(&self) -> [Self::Size; 9];\r\n}\r\n\r\npub trait MyTrait<T> {}\r\n\r\nimpl<T> MyTrait<T> for T {}\r\n\r\npub fn bar<G: Foo, T: Foo>(a: &G, _b : &T) -> G::Size\r\nwhere\r\n    T::Size: MyTrait<T::Size>,\r\n{\r\n    deeper_bar(a)\r\n}\r\n\r\nfn deeper_bar<G: Foo>(a: &G) -> G::Size\r\nwhere\r\n    G::Size: MyTrait<G::Size>,\r\n{\r\n    a.to_bytes()[0]\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=3ce5b779d6811dd5182f5a70537e6b3e", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89526/timeline", "performed_via_github_app": null, "state_reason": null}