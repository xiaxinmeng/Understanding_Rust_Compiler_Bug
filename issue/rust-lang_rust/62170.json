{"url": "https://api.github.com/repos/rust-lang/rust/issues/62170", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62170/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62170/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62170/events", "html_url": "https://github.com/rust-lang/rust/issues/62170", "id": 461406808, "node_id": "MDU6SXNzdWU0NjE0MDY4MDg=", "number": 62170, "title": "match guard is lengthening borrow unexpectedly under NLL", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 867465703, "node_id": "MDU6TGFiZWw4Njc0NjU3MDM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-complete", "name": "NLL-complete", "color": "f799ea", "default": false, "description": "Working towards the \"valid code works\" goal"}, {"id": 1146616045, "node_id": "MDU6TGFiZWwxMTQ2NjE2MDQ1", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-polonius", "name": "NLL-polonius", "color": "f799ea", "default": false, "description": "Issues related for using Polonius in the borrow checker"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-27T09:02:13Z", "updated_at": "2019-06-27T10:28:50Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Spawned off of  #60914, namely the [regression][cs_review regression] of the [cs_review crate][]\r\n\r\n[cs_review regression]: https://crater-reports.s3.amazonaws.com/pr-60914/try%23f45cc3094ee337acd688771b9234318046b0572d/gh/198d.cs_review/log.txt\r\n[cs_review crate]: https://github.com/198d/cs_review\r\n\r\nI was looking for examples of soundness issues fixed by NLL for a blog post that I'm working on, and the first crate I looked at stymied me.\r\n\r\nMaybe I'm forgetting something crucial, but I would think we might be able to accept this code ([play](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=e7323ca65897ebe873e8154a70457dcc)):\r\n\r\n```rust\r\nstruct Node(String, Option<Box<Node>>, Option<Box<Node>>);\r\n\r\nfn main() {\r\n    let mut data = Some(Box::new(Node(\"input1\".to_string(), None, None)));\r\n    let mut input1 = &mut data;\r\n    loop {\r\n        match {input1} { // the `{ }` fool AST-borrowck into accepting w/o NLL\r\n            \r\n            &mut Some(ref mut n) if {true} => { input1 = &mut n.1; }\r\n        //            ~~~~~~~~~  ~~~~~~~~~ combo of 1. borrow, 2. guard, ... \r\n\r\n            _other => { break; }\r\n        //  ~~~~~~                         ... and 3. move cause NLL to reject\r\n\r\n        // Why does guard cause borrow last longer than it would otherwise here?\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nNote: I don't think we're going to hit this \"regression\" too often, because it critically depends on some bug in AST-borrowck where I believe AST-borrowck mishandled `{ ... }` around the match input. Since I do not think that is a common pattern in match inputs, we probably can get away with not addressing this for a while.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62170/timeline", "performed_via_github_app": null, "state_reason": null}