{"url": "https://api.github.com/repos/rust-lang/rust/issues/84277", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84277/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84277/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84277/events", "html_url": "https://github.com/rust-lang/rust/issues/84277", "id": 860487457, "node_id": "MDU6SXNzdWU4NjA0ODc0NTc=", "number": 84277, "title": "Tracking Issue for `try_trait_v2`, A new design for the `?` desugaring (RFC#3058)", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89436934, "node_id": "MDU6TGFiZWw4OTQzNjkzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-approved", "name": "B-RFC-approved", "color": "d304cb", "default": false, "description": "Approved by a merged RFC but not yet implemented."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2923355268, "node_id": "MDU6TGFiZWwyOTIzMzU1MjY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-try_trait_v2", "name": "F-try_trait_v2", "color": "F9C0CC", "default": false, "description": "Tracking issue for RFC#3058"}, {"id": 3537216018, "node_id": "LA_kwDOAAsO6M7S1aIS", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-design-concerns", "name": "S-tracking-design-concerns", "color": "4682b4", "default": false, "description": "Blocking design concerns"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 86, "created_at": "2021-04-17T18:35:36Z", "updated_at": "2023-06-12T19:18:16Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nNOTE: For library features, please use the \"Library Tracking Issue\" template instead.\r\n\r\nThank you for creating a tracking issue! \ud83d\udcdc Tracking issues are for tracking a\r\nfeature from implementation to stabilisation. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nThis is a tracking issue for the RFC \"`try_trait_v2`: A new design for the `?` desugaring\" (rust-lang/rfcs#3058).\r\nThe feature gate for the issue is `#![feature(try_trait_v2)]`.\r\n\r\nThis obviates https://github.com/rust-lang/rfcs/pull/1859, tracked in https://github.com/rust-lang/rust/issues/42327.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [ ] Implement the RFC\r\n  - [x] Add the new traits and impls\r\n  - [x] Update the desugar in ast lowering\r\n  - [x] Fixup all the tests\r\n  - [ ] Add nice error messages in inference\r\n  - [ ] Improve perf with enough MIR optimizations\r\n  - [x] ~~Delete the old way after a bootstrap update~~ https://github.com/rust-lang/rust/pull/88223\r\n- [ ] Not strictly needed, but a mir-opt to simplify the matches would really help: https://github.com/rust-lang/rust/issues/85133\r\n- [ ] Add more detailed documentation about how to implement and use the traits\r\n- [ ] Decide whether to block return types that are `FromResidual` but not `Try`\r\n- [x] Fix rustdoc to show the default type parameter on `FromResidual` better (Issue https://github.com/rust-lang/rust/issues/85454)\r\n- [ ] Before stabilizing, ensure that all uses of `Infallible` are either fine that way or have been replaced by `!`\r\n- [ ] Stabilizing this will allow people to implement `Iterator::try_fold`\r\n  - [ ] As part of stabilizing, document implementing try_fold for iterators (perhaps reopen https://github.com/rust-lang/rust/pull/62606)\r\n  - [ ] Ensure that the default implementations of other things have the desired long-term DAG, since changing them is essentially impossible later.  (Specifically, it would be nice to have `fold` be implemented in terms of `try_fold`, so that both don't need to be overridden.)\r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\nFrom RFC:\r\n- [ ] What vocabulary should `Try` use in the associated types/traits? Output+residual, continue+break, or something else entirely?\r\n- [ ] Is it ok for the two traits to be tied together closely, as outlined here, or should they be split up further to allow types that can be only-created or only-destructured?\r\n\r\nFrom experience in nightly:\r\n- [ ] Should there be a trait requirement on residuals of any kind?  It's currently possible to accidentally be `FromResidual` from a type that's never actually produced as a residual (https://github.com/SergioBenitez/Rocket/pull/1645).  But that would add more friction for cases not using the `Foo<!>` pattern, so may not be worth it.\r\n  - Given the trait in #91286, that might look like changing the associated `type Residual;` to `type Residual: Residual<Self::Output>;`.\r\n\r\n### Implementation history\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n\r\n- [x] Basic traits and impls added, https://github.com/rust-lang/rust/pull/84092\r\n- [x] Removing `try_trait` from `stdarch`, https://github.com/rust-lang/stdarch/pull/1142\r\n- [x] Implementing the desugaring, https://github.com/rust-lang/rust/pull/84767", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84277/reactions", "total_count": 110, "+1": 28, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 82, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84277/timeline", "performed_via_github_app": null, "state_reason": null}