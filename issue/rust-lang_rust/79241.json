{"url": "https://api.github.com/repos/rust-lang/rust/issues/79241", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79241/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79241/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79241/events", "html_url": "https://github.com/rust-lang/rust/issues/79241", "id": 747741066, "node_id": "MDU6SXNzdWU3NDc3NDEwNjY=", "number": 79241, "title": "Incorrect trait implementations listed for non-implemented custom auto trait", "user": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1624891239, "node_id": "MDU6TGFiZWwxNjI0ODkxMjM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-incorrect", "name": "D-incorrect", "color": "c9f7a3", "default": false, "description": "A diagnostic that is giving misleading or incorrect information"}, {"id": 1967303144, "node_id": "MDU6TGFiZWwxOTY3MzAzMTQ0", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-negative_impls", "name": "F-negative_impls", "color": "f9c0cc", "default": false, "description": "#![feature(negative_impls)]"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-11-20T19:28:07Z", "updated_at": "2023-04-05T17:30:19Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The error says:\r\n\r\n```\r\n   = help: the following implementations were found:\r\n             <UnsafeCell<T> as AlwaysImmByRef>\r\n```\r\n\r\nBut that's incorrect \u2013 the whole problem is that `UnsafeCell` does *not* implement the trait! It should either not list `UnsafeCell` or list it as a negative impl (or whatever they're called).\r\n\r\n```rust\r\n#![feature(negative_impls)]\r\n#![feature(optin_builtin_traits)]\r\n\r\nuse std::cell::Cell;\r\nuse std::cell::UnsafeCell;\r\n\r\nauto trait AlwaysImmByRef {}\r\n\r\nimpl<T> !AlwaysImmByRef for UnsafeCell<T> {}\r\n\r\nfn foo(x: &impl AlwaysImmByRef) -> i32 {\r\n    x as *const _ as i32\r\n}\r\n\r\nfn main() {\r\n    println!(\"{}\", foo(&Cell::new(String::from(\"hello\"))));\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=d52257a80ebd45fb47e90e92f7fcd99f))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0277]: the trait bound `UnsafeCell<String>: AlwaysImmByRef` is not satisfied in `Cell<String>`\r\n  --> src/main.rs:16:20\r\n   |\r\n11 | fn foo(x: &impl AlwaysImmByRef) -> i32 {\r\n   |                 -------------- required by this bound in `foo`\r\n...\r\n16 |     println!(\"{}\", foo(&Cell::new(String::from(\"hello\"))));\r\n   |                    ^^^ within `Cell<String>`, the trait `AlwaysImmByRef` is not implemented for `UnsafeCell<String>`\r\n   |\r\n   = help: the following implementations were found:\r\n             <UnsafeCell<T> as AlwaysImmByRef>\r\n   = note: required because it appears within the type `Cell<String>`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground`\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79241/timeline", "performed_via_github_app": null, "state_reason": null}