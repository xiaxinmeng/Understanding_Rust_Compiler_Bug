{"url": "https://api.github.com/repos/rust-lang/rust/issues/29143", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29143/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29143/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29143/events", "html_url": "https://github.com/rust-lang/rust/issues/29143", "id": 112021284, "node_id": "MDU6SXNzdWUxMTIwMjEyODQ=", "number": 29143, "title": "If `trait Subtrait: Super where Clause { }` then typeck should assume Clause, right? ", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-10-18T13:48:24Z", "updated_at": "2015-10-20T13:50:42Z", "closed_at": "2015-10-20T13:50:42Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Consider the following code:\n\n``` rust\ntrait Bound { fn bound_m(&self, _: &str) { } }\ntrait Super { type A; fn mk(&self) -> Self::A; }\ntrait Sub: Super where Self::A: Bound { }\nimpl Super for () { type A = u32; fn mk(&self) -> u32 { 13 } }\nimpl Bound for u32 { }\nimpl Sub for () { }\n\nfn main() { let s = (); foo(&s); }\n\nfn foo<S:Sub+Default>(s: &S) where S::A: Bound {\n    s.mk().bound_m(\"b.\");\n}\n```\n\nThe above compiles and runs fine, but one might well ask: Why did I need to put that `where`-clause on `fn foo`?  It is already present on the `trait Sub: Super where Self::A: Bound`, shouldn't the compiler thus infer that any `S:Sub` already satisfies that requirement?\n\nUnfortunately, if you try that out, it doesn't work:\n\n``` rust\n// #[cfg(doesnt_work)]\nfn bar<S:Sub+Default>(s: &S) { s.mk().bound_m(\"c.\"); }\n```\n\nyields:\n\n```\n<anon>:15:39: 15:52 error: no method named `bound_m` found for type `<S as Super>::A` in the current scope\n<anon>:15 fn bar<S:Sub+Default>(s: &S) { s.mk().bound_m(\"c.\"); }\n                                                ^~~~~~~~~~~~~\n<anon>:15:39: 15:52 help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `bound_m`, perhaps you need to implement it:\n<anon>:15:39: 15:52 help: candidate #1: `Bound`\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n```\n\n[playpen](http://is.gd/W4Gfk6)\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29143/timeline", "performed_via_github_app": null, "state_reason": "completed"}