{"url": "https://api.github.com/repos/rust-lang/rust/issues/10212", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/10212/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/10212/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/10212/events", "html_url": "https://github.com/rust-lang/rust/issues/10212", "id": 21937857, "node_id": "MDU6SXNzdWUyMTkzNzg1Nw==", "number": 10212, "title": "Consider using available_externally linkage for cross-crate inlined functions", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2013-11-01T01:18:01Z", "updated_at": "2014-05-29T23:08:35Z", "closed_at": "2014-05-29T23:08:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In rust, a static variable is essentially the same thing as a `#define`, and to achieve the same sort of optimizations about knowing the symbol at compile time we use the `available_externally` linkage from LLVM. What this means is that the source crate defining a static will always compile the version of the static into its own data section of the executable.\n\nWhen an external crate then links to this source crate, it will import statics as they're used. Each static is imported in a manner like:\n\n```\n@original.source.name = available_externally i32 3\n```\n\nWhere `original.source.name` is the name of the symbol in original crate, and `3` is the actual value of the constant. What this means is that LLVM can optimize based on the value of the constant (because we specify it explicitly, we loaded it from the serialized ast of the external crate). The reason we do this is so that a static has one and only one address. The `available_externally` linkage means that no symbol will be emitted into the crate. If LLVM determines that it needs the symbol (such as you took the address of the static), then it will link against it, otherwise LLVM optimizes it all out.\n\nIn theory, we could also apply this `available_externally` optimization to functions as well. What this would mean is that the source crate would provide definitions for all `#[inline]` functions, and then all crates linking against this crate would use `available_externally`. I would hope that this meant that LLVM would attempt to inline the function, but if LLVM didn't decide to inline the function it wouldn't recompile it or emit a symbol for it.\n\nIn theory this means smaller crates because all non-inlined calls to an `#[inline]` function would result in cross-crate calls.\n\nI'm a little doubtful that this would provide an actual size benefit, and I'm also unsure of whether LLVM would even optimize like this. I'm only taking my vague understanding of the linkage mode and applying it to what seems reasonable for functions. Regardless, this may be an interesting project for anyone wishing to really take a bite out of dealing with LLVM, learning compiler internals, and possibly providing a nice reduction in binary size without losing any performance.\n", "closed_by": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/10212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/10212/timeline", "performed_via_github_app": null, "state_reason": "completed"}