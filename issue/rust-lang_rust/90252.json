{"url": "https://api.github.com/repos/rust-lang/rust/issues/90252", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90252/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90252/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90252/events", "html_url": "https://github.com/rust-lang/rust/issues/90252", "id": 1034760637, "node_id": "I_kwDOAAsO6M49rTG9", "number": 90252, "title": "Problem with type inference", "user": {"login": "SvetlinZarev", "id": 1794797, "node_id": "MDQ6VXNlcjE3OTQ3OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1794797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SvetlinZarev", "html_url": "https://github.com/SvetlinZarev", "followers_url": "https://api.github.com/users/SvetlinZarev/followers", "following_url": "https://api.github.com/users/SvetlinZarev/following{/other_user}", "gists_url": "https://api.github.com/users/SvetlinZarev/gists{/gist_id}", "starred_url": "https://api.github.com/users/SvetlinZarev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SvetlinZarev/subscriptions", "organizations_url": "https://api.github.com/users/SvetlinZarev/orgs", "repos_url": "https://api.github.com/users/SvetlinZarev/repos", "events_url": "https://api.github.com/users/SvetlinZarev/events{/privacy}", "received_events_url": "https://api.github.com/users/SvetlinZarev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2021-10-25T07:09:44Z", "updated_at": "2021-10-28T04:57:00Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\n**I tried this code:**\r\n\r\n```rust\r\npub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {\r\n    let mut widths = vec![(0usize, heights.len()); heights.len()];\r\n    let mut stack = vec![];\r\n\r\n    for (idx, &x) in heights.iter().enumerate() {\r\n        while let Some(&pos) = stack.last() {\r\n            if x >= heights[pos] {\r\n                break;\r\n            }\r\n\r\n            widths[pos].1 = idx;\r\n            stack.pop();\r\n        }\r\n\r\n        stack.push(idx);\r\n    }\r\n\r\n    todo!()\r\n}\r\n```\r\n\r\n**I expected to see this happen:**\r\nThe code should have compiled without errors\r\n\r\n\r\n**Instead, this happened:**\r\n```\r\nerror[E0282]: type annotations needed\r\n  --> src/lib.rs:11:13\r\n   |\r\n11 |             widths[pos].1 = idx;\r\n   |             ^^^^^^^^^^^ cannot infer type\r\n   |\r\n   = note: type must be known at this point\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\nI've checked with 1.45 stable, 1.56 stable, 1.57 beta , 1.58 nightly\r\n\r\n`rustc --version --verbose`:\r\n```\r\n`--> rustc --version --verbose\r\nrustc 1.56.0 (09c42c458 2021-10-18)\r\nbinary: rustc\r\ncommit-hash: 09c42c45858d5f3aedfa670698275303a3d19afa\r\ncommit-date: 2021-10-18\r\nhost: x86_64-apple-darwin\r\nrelease: 1.56.0\r\nLLVM version: 13.0.0\r\n```\r\n\r\n**Additional information**\r\n\r\nIf I change `widths[pos].1 = idx` to `widths[pos] = (0, idx)` the code compiles fine:\r\n```rust\r\npub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {\r\n    let mut widths = vec![(0, heights.len()); heights.len()];\r\n    let mut stack = vec![];\r\n\r\n    for (idx, &x) in heights.iter().enumerate() {\r\n        while let Some(&pos) = stack.last() {\r\n            if x >= heights[pos] {\r\n                break;\r\n            }\r\n\r\n            widths[pos] = (0, idx); // now it compiles fine\r\n            stack.pop();\r\n        }\r\n\r\n        stack.push(idx);\r\n    }\r\n  \r\n    todo!()\r\n}\r\n```\r\n\r\nIt also compiles fine if I add type annotations for the `stack` variable, which should be `Vec<usize>` as its content is comming from `.enumerate()`:\r\n```rust\r\npub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {\r\n    let mut widths = vec![(0, heights.len()); heights.len()];\r\n    let mut stack: Vec<usize> = vec![];\r\n\r\n    for (idx, &x) in heights.iter().enumerate() {\r\n        while let Some(&pos) = stack.last() {\r\n            if x >= heights[pos] {\r\n                break;\r\n            }\r\n\r\n            widths[pos].1 = idx; // now it compiles fine\r\n            stack.pop();\r\n        }\r\n\r\n        stack.push(idx);\r\n    }\r\n  \r\n    todo!()\r\n}\r\n```\r\n\r\nIt also compiles fine if I add type annotations for  `widths` like that, but fails with the same error without that type annotation. \r\n```rust\r\npub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {\r\n    let mut widths = vec![(0, heights.len()); heights.len()];\r\n    let mut stack = vec![];\r\n\r\n    for (idx, &x) in heights.iter().enumerate() {\r\n        while let Some(&pos) = stack.last() {\r\n            if x >= heights[pos] {\r\n                break;\r\n            }\r\n\r\n            let at_pos: &mut (usize, usize) = &mut widths[pos]; // type annotations added here\r\n            at_pos.1 = idx;\r\n            stack.pop(); \r\n         }\r\n\r\n        stack.push(idx);\r\n    }\r\n  \r\n    todo!()\r\n}\r\n```\r\n\r\nSo at the end I'm not sure If it fails to infer the type of `pos` or the type of `widths`\r\n\r\nA user at StackOverflow managed to create the following smaller reproducible example:\r\n```rust\r\nfn some_fn() {\r\n    let mut widths = vec![(0usize, 0usize); 100];\r\n    let mut stack = vec![]; \r\n    //let mut stack:Vec<usize> = vec![]; //why explicit type definition is needed\r\n\r\n    let a = stack.pop().unwrap();\r\n    let idx = 0usize;\r\n    widths[a].1 = idx;\r\n\r\n    stack.push(idx);\r\n}\r\n```\r\n\r\nHere is the SO question for reference: https://stackoverflow.com/questions/69696784/cannot-infer-type-type-annotations-needed-but-the-type-is-already-known", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90252/timeline", "performed_via_github_app": null, "state_reason": null}