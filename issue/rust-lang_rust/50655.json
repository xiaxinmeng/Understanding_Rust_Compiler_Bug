{"url": "https://api.github.com/repos/rust-lang/rust/issues/50655", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50655/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50655/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50655/events", "html_url": "https://github.com/rust-lang/rust/issues/50655", "id": 322309862, "node_id": "MDU6SXNzdWUzMjIzMDk4NjI=", "number": 50655, "title": "Use section/symbol ordering files for compiling rustc (e.g. BOLT)", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 325438536, "node_id": "MDU6TGFiZWwzMjU0Mzg1MzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-bootstrap", "name": "T-bootstrap", "color": "bfd4f2", "default": false, "description": "Relevant to the bootstrap subteam: Rust's build system (x.py and src/bootstrap)"}, {"id": 593503757, "node_id": "MDU6TGFiZWw1OTM1MDM3NTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-infra", "name": "T-infra", "color": "bfd4f2", "default": false, "description": "Relevant to the infrastructure team, which will review and decide on the PR/issue."}, {"id": 762300676, "node_id": "MDU6TGFiZWw3NjIzMDA2NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-blocked", "name": "S-blocked", "color": "d3dddd", "default": false, "description": "Status: marked as blocked \u274c on something else such as an RFC or other implementation work."}, {"id": 849077850, "node_id": "MDU6TGFiZWw4NDkwNzc4NTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-compiler-performance", "name": "WG-compiler-performance", "color": "c2e0c6", "default": false, "description": "Working group: Compiler Performance"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2018-05-11T14:06:22Z", "updated_at": "2023-02-03T07:47:18Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The order in which code is located in binaries has an influence on how fast the binary executes because (as I understand it) it affects instruction cache locality and how efficiently the code is paged in from disk. Many linkers support specifying this order (e.g. LLD via `--symbol-ordering-file` and MSVC via `-ORDER`). The hard part, though, is to find an order that will actually improve things. The chromium project has a [tool](https://cs.chromium.org/chromium/src/tools/cygprofile/) for thisand somewhere else I've read that valgrind could be used for this too. The expected speedups are a few percent.\r\n\r\nPrerequisites: \r\n- [ ] Support function instrumentation in `rustc` (if using the chromium tool) similar to what GCC's `-finstrument-functions` does.\r\n- [ ] Compile an instrumented version of the compiler\r\n- [ ] Run the instrumented version of the compiler for a realistic test program (this should be less sensitive than full PGO)\r\n- [ ] Use the generated ordering file for building release artifacts\r\n\r\nThe first point shouldn't be too hard. The rest, however, would big a big infrastructure investment. I hope that we'll get PGO support for our CI at some point. This symbol ordering business could then be part of that.\r\n\r\ncc @glandium @rust-lang/wg-compiler-performance @rust-lang/infra \r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50655/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50655/timeline", "performed_via_github_app": null, "state_reason": null}