{"url": "https://api.github.com/repos/rust-lang/rust/issues/67067", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67067/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67067/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67067/events", "html_url": "https://github.com/rust-lang/rust/issues/67067", "id": 533584644, "node_id": "MDU6SXNzdWU1MzM1ODQ2NDQ=", "number": 67067, "title": "Impossible to Specify Appropriate Lifetime with `for<'a> &'a ...`", "user": {"login": "phlopsi", "id": 3685294, "node_id": "MDQ6VXNlcjM2ODUyOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3685294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phlopsi", "html_url": "https://github.com/phlopsi", "followers_url": "https://api.github.com/users/phlopsi/followers", "following_url": "https://api.github.com/users/phlopsi/following{/other_user}", "gists_url": "https://api.github.com/users/phlopsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/phlopsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phlopsi/subscriptions", "organizations_url": "https://api.github.com/users/phlopsi/orgs", "repos_url": "https://api.github.com/users/phlopsi/repos", "events_url": "https://api.github.com/users/phlopsi/events{/privacy}", "received_events_url": "https://api.github.com/users/phlopsi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-05T20:35:30Z", "updated_at": "2019-12-05T21:08:23Z", "closed_at": "2019-12-05T21:08:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I had [asked for help](https://users.rust-lang.org/t/cannot-infer-appropriate-lifetime/35315) on the Rust user forum, but from what I've learned, Rust provides no way to specify lifetimes in a way to succesfully run the loop in the `drop`-method in the following example:\r\n```rust\r\nstruct MyStruct<TCollection>\r\nwhere\r\n    for<'a> &'a TCollection: IntoIterator<Item = &'a ()>,\r\n{\r\n    references: TCollection,\r\n}\r\n\r\nimpl<TCollection> Drop for MyStruct<TCollection>\r\nwhere\r\n    for<'b> &'b TCollection: IntoIterator<Item = &'b ()>,\r\n{\r\n    fn drop(&mut self) {\r\n        for _ in &self.references {}\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let _ = MyStruct {\r\n        references: Vec::new(),\r\n    };\r\n}\r\n\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=68b57e15619bab6b751c78217d266498))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0367]: The requirement `for<'b> <&'b TCollection as std::iter::IntoIterator>::Item == &'b ()` is added only by the Drop impl.\r\n  --> src/lib.rs:8:1\r\n   |\r\n8  | / impl<TCollection> Drop for MyStruct<TCollection>\r\n9  | | where\r\n10 | |     for<'b> &'b TCollection: IntoIterator<Item = &'b ()>,\r\n11 | | {\r\n...  |\r\n14 | |     }\r\n15 | | }\r\n   | |_^\r\n   |\r\nnote: The same requirement must be part of the struct/enum definition\r\n  --> src/lib.rs:1:1\r\n   |\r\n1  | / struct MyStruct<TCollection>\r\n2  | | where\r\n3  | |     for<'a> &'a TCollection: IntoIterator<Item = &'a ()>,\r\n4  | | {\r\n5  | |     references: TCollection,\r\n6  | | }\r\n   | |_^\r\n\r\nerror[E0367]: The requirement `for<'b> &'b TCollection: std::iter::IntoIterator` is added only by the Drop impl.\r\n  --> src/lib.rs:8:1\r\n   |\r\n8  | / impl<TCollection> Drop for MyStruct<TCollection>\r\n9  | | where\r\n10 | |     for<'b> &'b TCollection: IntoIterator<Item = &'b ()>,\r\n11 | | {\r\n...  |\r\n14 | |     }\r\n15 | | }\r\n   | |_^\r\n   |\r\nnote: The same requirement must be part of the struct/enum definition\r\n  --> src/lib.rs:1:1\r\n   |\r\n1  | / struct MyStruct<TCollection>\r\n2  | | where\r\n3  | |     for<'a> &'a TCollection: IntoIterator<Item = &'a ()>,\r\n4  | | {\r\n5  | |     references: TCollection,\r\n6  | | }\r\n   | |_^\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0367`.\r\nerror: could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n```\r\n\r\nRust should be able to determine, that the `where`-clause in the struct and the `Drop`-impl are compatible. I consider this a bug.", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67067/timeline", "performed_via_github_app": null, "state_reason": "completed"}