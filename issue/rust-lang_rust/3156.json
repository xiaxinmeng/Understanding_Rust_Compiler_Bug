{"url": "https://api.github.com/repos/rust-lang/rust/issues/3156", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3156/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3156/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3156/events", "html_url": "https://github.com/rust-lang/rust/issues/3156", "id": 6115633, "node_id": "MDU6SXNzdWU2MTE1NjMz", "number": 3156, "title": "Type inference insufficient around trait parameterized functions", "user": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-08-08T22:59:49Z", "updated_at": "2014-06-16T21:56:34Z", "closed_at": "2012-08-21T02:07:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is related to #912.\n\nThe following code doesn't work:\n\n```\nfn main() {\n    for iter::eachi(some({a: 0})) |i, a| { \n        #debug[\"%u %d\", i, a.a];\n    }\n}\n```\n\nIt fails with\n\n```\nnubs/closure-trait-infer.rs:3:27: 3:30 error: the type of this value must be known in this context\nnubs/closure-trait-infer.rs:3         #debug[\"%u %d\", i, a.a];\n```\n\nwhich is really unfortunate. \n\n`eachi` is declared with the prototype `fn eachi<A,IA:base_iter<A>>(vec: IA, blk: fn(uint, A) -> bool)`. When called in the above code, IA is instantiated with the type `option<{a: int}>`, and a note is made that `option<{a: int}>` must implement the trait `base_iter<A>`. However, without knowing the details of the implementation, there is no way to know that the only `A` such that `option<{a: int}>` implements `base_iter<A>` is `{a: int}`.\n\nI can think of a couple of possible solutions, varying wildly in feasibility:\n1) Do some sort of opportunistic impl search during typechecking, probably in some super ad-hoc place such as during function argument typechecking, after checking the non-closure arguments but before checking closure arguments. This is not particularly principled but might be pretty feasible.\n\n2) Introduce proper higher kinded type variables and traits over them. Then traits wouldn't be parameterized over type variables but would instead be implemented for higher kinds. The signature of `eachi` would be `fn eachi<A,IA:base_iter>(vec: IA<A>, blk: fn(uint, A) -> bool)` and `IA<A>` would be unified with `option<{a: int}>` right off the bat. \n\n3) Fix issue #912 so that the type isn't needed while typechecking the closure.\n", "closed_by": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3156/timeline", "performed_via_github_app": null, "state_reason": "completed"}