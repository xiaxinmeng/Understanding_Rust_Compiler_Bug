{"url": "https://api.github.com/repos/rust-lang/rust/issues/86743", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86743/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86743/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86743/events", "html_url": "https://github.com/rust-lang/rust/issues/86743", "id": 933525147, "node_id": "MDU6SXNzdWU5MzM1MjUxNDc=", "number": 86743, "title": "New ICE in 1.55.0-nightly 6d820866a 2021-06-29", "user": {"login": "Jake-Shadle", "id": 2316028, "node_id": "MDQ6VXNlcjIzMTYwMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2316028?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jake-Shadle", "html_url": "https://github.com/Jake-Shadle", "followers_url": "https://api.github.com/users/Jake-Shadle/followers", "following_url": "https://api.github.com/users/Jake-Shadle/following{/other_user}", "gists_url": "https://api.github.com/users/Jake-Shadle/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jake-Shadle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jake-Shadle/subscriptions", "organizations_url": "https://api.github.com/users/Jake-Shadle/orgs", "repos_url": "https://api.github.com/users/Jake-Shadle/repos", "events_url": "https://api.github.com/users/Jake-Shadle/events{/privacy}", "received_events_url": "https://api.github.com/users/Jake-Shadle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 12, "created_at": "2021-06-30T10:08:02Z", "updated_at": "2021-07-08T16:33:20Z", "closed_at": "2021-07-08T16:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Code\r\n\r\nUnfortunately, trying to make a minimized repro for this ICE was too difficult, as this particular struct impl is extremely entangled and in quite large, minimizing it resulted in no ICE, so I'm just reporting this immediately in the hopes that it will ring a bell as this is a change that occurred between\r\n\r\n`nightly-x86_64-unknown-linux-gnu - rustc 1.55.0-nightly (a435b49e8 2021-06-28)` (good)\r\n\r\nand\r\n\r\n`nightly-x86_64-unknown-linux-gnu - rustc 1.55.0-nightly (6d820866a 2021-06-29)` (ice)\r\n\r\n```Rust\r\ntype FutureHandle = u64;\r\npub type TrainingHandle = u64;\r\npub type InferenceHandle = u64;\r\nuse std::future::Future;\r\n\r\nstruct ExperimentConfigFuture;\r\n\r\nstruct MLApiHost;\r\n\r\nstruct Experiment;\r\n\r\nimpl MLApiHost {\r\n    pub fn new() -> Self {\r\n        loop {}\r\n    }\r\n\r\n    #[cfg(target_os = \"linux\")]\r\n    fn refresh_system_data(&mut self) {\r\n        loop {}\r\n    }\r\n\r\n    #[allow(clippy::indexing_slicing)]\r\n    fn set_worker_module_link(&mut self, link: &str) -> anyhow::Result<()> {\r\n        loop {}\r\n    }\r\n\r\n    fn list_experiments(\r\n        &mut self,\r\n        hive_url: String,\r\n        hive_port: u32,\r\n    ) -> impl Future<Output = anyhow::Result<Vec<Experiment>>> {\r\n        std::future::ready(Err(anyhow::anyhow!(\"...\")))\r\n    }\r\n\r\n    fn can_connect_to_hive(\r\n        &self,\r\n        hive_url: String,\r\n        hive_port: u32,\r\n    ) -> impl Future<Output = Result<bool, ()>> {\r\n        std::future::ready(Err(()))\r\n    }\r\n\r\n    fn get_hive_connection(&mut self, handle: TrainingHandle) -> Result<(), ()> {\r\n        loop {}\r\n    }\r\n\r\n    fn get_tract_connection(&mut self, handle: InferenceHandle) -> Result<(), ()> {\r\n        loop {}\r\n    }\r\n\r\n    fn connect_to_experiment(\r\n        &mut self,\r\n        hive_url: &str,\r\n        hive_port: u32,\r\n        experiment_id: &str,\r\n    ) -> impl Future<Output = anyhow::Result<TrainingHandle>> {\r\n        std::future::ready(Err(anyhow::anyhow!(\"...\")))\r\n    }\r\n\r\n    #[allow(clippy::too_many_arguments)]\r\n    fn start_hive_training(\r\n        &mut self,\r\n        hive_url: &str,\r\n        hive_port: u32,\r\n        game_name: &str,\r\n        experiment_name: &str,\r\n        num_features: u32,\r\n        num_actions: u32,\r\n        num_remote_ark_workers: u32,\r\n        module_config: &str,\r\n        checkpoint: Option<&str>,\r\n        training_duration_in_seconds: u64,\r\n    ) -> impl Future<Output = anyhow::Result<TrainingHandle>> {\r\n        std::future::ready(Err(anyhow::anyhow!(\"...\")))\r\n    }\r\n\r\n    fn stop_experiment(\r\n        &mut self,\r\n        handle: TrainingHandle,\r\n        stop_remote_workers: bool,\r\n    ) -> impl Future<Output = Result<(), ()>> {\r\n        std::future::ready(Err(()))\r\n    }\r\n\r\n    fn stop_hive_training(\r\n        &mut self,\r\n        handle: TrainingHandle,\r\n    ) -> impl Future<Output = Result<(), ()>> {\r\n        std::future::ready(Err(()))\r\n    }\r\n\r\n    fn start_tract_inference(\r\n        &mut self,\r\n        num_features: u32,\r\n        num_actions: u32,\r\n        snapshot_data: &[u8],\r\n    ) -> Result<InferenceHandle, ()> {\r\n        loop {}\r\n    }\r\n\r\n    fn stop_tract_inference(&mut self, handle: InferenceHandle) -> Result<(), ()> {\r\n        loop {}\r\n    }\r\n\r\n    fn safe_user_name(&self) -> String {\r\n        loop {}\r\n    }\r\n\r\n    fn experiment_config_from_registry(\r\n        &mut self,\r\n        hive_url: String,\r\n        hive_port: u32,\r\n        experiment_id: String,\r\n    ) -> impl Future<Output = anyhow::Result<()>> {\r\n        std::future::ready(Err(anyhow::anyhow!(\"...\")))\r\n    }\r\n\r\n    fn download_snapshot_from_registry(\r\n        &mut self,\r\n        hive_url: String,\r\n        hive_port: u32,\r\n        experiment_id: String,\r\n    ) -> impl Future<Output = Result<Vec<u8>, ()>> {\r\n        std::future::ready(Err(()))\r\n    }\r\n\r\n    fn experiment_config_to_ffi(\r\n        &mut self,\r\n        config: impl Future<Output = anyhow::Result<()>> + Send + 'static,\r\n    ) -> ExperimentConfigFuture {\r\n        loop {}\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.55.0-nightly (6d820866a 2021-06-29)\r\nbinary: rustc\r\ncommit-hash: 6d820866a27b1949e237be79b9c8c0145fe728b7\r\ncommit-date: 2021-06-29\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.55.0-nightly\r\nLLVM version: 12.0.1\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 163', /cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/snapshot_vec.rs:199:10\r\n```\r\n\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/6d820866a27b1949e237be79b9c8c0145fe728b7/library/std/src/panicking.rs:515:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/6d820866a27b1949e237be79b9c8c0145fe728b7/library/core/src/panicking.rs:92:14\r\n   2: core::panicking::panic_bounds_check\r\n             at /rustc/6d820866a27b1949e237be79b9c8c0145fe728b7/library/core/src/panicking.rs:69:5\r\n   3: rustc_infer::infer::InferCtxt::shallow_resolve_ty\r\n   4: <smallvec::SmallVec<A> as core::iter::traits::collect::Extend<<A as smallvec::Array>::Item>>::extend\r\n   5: rustc_middle::ty::fold::TypeFoldable::fold_with\r\n   6: rustc_middle::ty::structural_impls::<impl rustc_middle::ty::fold::TypeFoldable for &rustc_middle::ty::TyS>::super_fold_with\r\n   7: rustc_middle::ty::fold::TypeFoldable::fold_with\r\n   8: rustc_middle::ty::structural_impls::<impl rustc_middle::ty::fold::TypeFoldable for &rustc_middle::ty::TyS>::super_fold_with\r\n   9: rustc_infer::infer::InferCtxtBuilder::enter\r\n  10: core::ops::function::FnOnce::call_once\r\n  11: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  12: rustc_data_structures::stack::ensure_sufficient_stack\r\n  13: rustc_query_system::query::plumbing::get_query_impl\r\n  14: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::normalize_generic_arg_after_erasing_regions\r\n  15: <rustc_middle::ty::normalize_erasing_regions::NormalizeAfterErasingRegionsFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty\r\n  16: rustc_middle::ty::normalize_erasing_regions::<impl rustc_middle::ty::context::TyCtxt>::normalize_erasing_regions\r\n  17: rustc_middle::ty::util::<impl rustc_middle::ty::TyS>::has_significant_drop\r\n  18: rustc_typeck::check::upvar::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::analyze_closure\r\n  19: rustc_hir::intravisit::walk_expr\r\n  20: rustc_hir::intravisit::walk_expr\r\n  21: <rustc_typeck::check::upvar::InferBorrowKindVisitor as rustc_hir::intravisit::Visitor>::visit_expr\r\n  22: rustc_hir::intravisit::walk_expr\r\n  23: <rustc_typeck::check::upvar::InferBorrowKindVisitor as rustc_hir::intravisit::Visitor>::visit_expr\r\n  24: rustc_typeck::check::upvar::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::closure_analyze\r\n  25: rustc_infer::infer::InferCtxtBuilder::enter\r\n  26: rustc_typeck::check::typeck\r\n  27: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  28: rustc_data_structures::stack::ensure_sufficient_stack\r\n  29: rustc_query_system::query::plumbing::force_query_with_job\r\n  30: rustc_query_system::query::plumbing::get_query_impl\r\n  31: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::typeck\r\n  32: rustc_middle::ty::<impl rustc_middle::ty::context::TyCtxt>::par_body_owners\r\n  33: rustc_typeck::check::typeck_item_bodies\r\n  34: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  35: rustc_data_structures::stack::ensure_sufficient_stack\r\n  36: rustc_query_system::query::plumbing::force_query_with_job\r\n  37: rustc_query_system::query::plumbing::get_query_impl\r\n  38: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::typeck_item_bodies\r\n  39: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  40: rustc_typeck::check_crate\r\n  41: rustc_interface::passes::analysis\r\n  42: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  43: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  44: rustc_query_system::dep_graph::graph::DepGraph<K>::with_eval_always_task\r\n  45: rustc_data_structures::stack::ensure_sufficient_stack\r\n  46: rustc_query_system::query::plumbing::force_query_with_job\r\n  47: rustc_query_system::query::plumbing::get_query_impl\r\n  48: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\r\n  49: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  50: rustc_span::with_source_map\r\n  51: rustc_interface::interface::create_compiler_and_run\r\n  52: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.55.0-nightly (6d820866a 2021-06-29) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental -C link-arg=-fuse-ld=lld -C link-arg=-Wl,--build-id=sha1\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [normalize_generic_arg_after_erasing_regions] normalizing `impl std::future::Future`\r\n#1 [typeck] type-checking `host_api::ml::<impl at components/module-host/src/host_api/ml.rs:264:1: 920:2>::experiment_config_to_ffi`\r\n#2 [typeck_item_bodies] type-checking all item bodies\r\n#3 [analysis] running analysis passes on this crate\r\nend of query stack\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"arora-aman\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86743/timeline", "performed_via_github_app": null, "state_reason": "completed"}