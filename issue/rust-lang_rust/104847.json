{"url": "https://api.github.com/repos/rust-lang/rust/issues/104847", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104847/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104847/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104847/events", "html_url": "https://github.com/rust-lang/rust/issues/104847", "id": 1463822093, "node_id": "I_kwDOAAsO6M5XQCcN", "number": 104847, "title": "[ER] Sub-optimal allocation of simple zeroed Vec of arrays", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 3425147156, "node_id": "LA_kwDOAAsO6M7MJ5kU", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-array", "name": "A-array", "color": "f7e101", "default": false, "description": "Area: [T; N]"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-11-24T21:20:40Z", "updated_at": "2023-04-05T17:34:07Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I expect the two diffent functions to be compiled to the same asm:\r\n\r\n```rust\r\nconst N: usize = 1_000_000;\r\npub fn foo1() -> Vec<[u32; N]> {\r\n    vec![[0; N]; 3]\r\n}\r\npub fn foo2() -> Vec<u32> {\r\n    vec![0; N * 3]\r\n}\r\n```\r\n\r\nBut they aren't, and this slows down code:\r\n\r\n```asm\r\nfoo1:\r\n        push    r14\r\n        push    rbx\r\n        push    rax\r\n        mov     r14, rdi\r\n        mov     edi, 12000000\r\n        mov     esi, 4\r\n        call    qword ptr [rip + __rust_alloc@GOTPCREL]\r\n        test    rax, rax\r\n        je      .LBB0_1\r\n        mov     rbx, rax\r\n        mov     edx, 12000000\r\n        mov     rdi, rax\r\n        xor     esi, esi\r\n        call    qword ptr [rip + memset@GOTPCREL]\r\n        mov     qword ptr [r14], rbx\r\n        vmovddup        xmm0, qword ptr [rip + .LCPI0_0]\r\n        vmovups xmmword ptr [r14 + 8], xmm0\r\n        mov     rax, r14\r\n        add     rsp, 8\r\n        pop     rbx\r\n        pop     r14\r\n        ret\r\n.LBB0_1:\r\n        mov     edi, 12000000\r\n        mov     esi, 4\r\n        call    qword ptr [rip + alloc::alloc::handle_alloc_error@GOTPCREL]\r\n        ud2\r\n\r\n\r\nfoo2:\r\n        push    rbx\r\n        mov     rbx, rdi\r\n        mov     edi, 12000000\r\n        mov     esi, 4\r\n        call    qword ptr [rip + __rust_alloc_zeroed@GOTPCREL]\r\n        test    rax, rax\r\n        je      .LBB1_1\r\n        mov     qword ptr [rbx], rax\r\n        vmovddup        xmm0, qword ptr [rip + .LCPI1_0]\r\n        vmovups xmmword ptr [rbx + 8], xmm0\r\n        mov     rax, rbx\r\n        pop     rbx\r\n        ret\r\n.LBB1_1:\r\n        mov     edi, 12000000\r\n        mov     esi, 4\r\n        call    qword ptr [rip + alloc::alloc::handle_alloc_error@GOTPCREL]\r\n        ud2\r\n```\r\n\r\nUsing (and using aggressive compilation flags):\r\n\r\n```\r\nrustc 1.67.0-nightly (70f8737b2 2022-11-23)\r\nbinary: rustc\r\ncommit-hash: 70f8737b2f5d3bf7d6b784fad00b663b7ff9feda\r\ncommit-date: 2022-11-23\r\nhost: x86_64-pc-windows-gnu\r\nrelease: 1.67.0-nightly\r\nLLVM version: 15.0.4\r\n```\r\n\r\nIt's a small difference but I can see it in my benchmarks. Fixing this problem is sufficiently important because Vec is used everywhere in most of the Rust ecosystem. So even small Vec improvements are worth having.\r\n\r\nCurrently as a workaround to reduce the number of heap allocation you can use something like:\r\n\r\n```rust\r\nlet mut buf = vec![0_u32; N * 3];\r\nlet ([x1, x2, x3], []) = buf.as_chunks_mut::<N>() else { panic!() };\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104847/timeline", "performed_via_github_app": null, "state_reason": null}