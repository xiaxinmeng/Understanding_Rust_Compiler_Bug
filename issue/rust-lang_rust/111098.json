{"url": "https://api.github.com/repos/rust-lang/rust/issues/111098", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111098/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111098/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111098/events", "html_url": "https://github.com/rust-lang/rust/issues/111098", "id": 1692729063, "node_id": "I_kwDOAAsO6M5k5P7n", "number": 111098, "title": "Windows GNU toolchain with -Cinstrument-coverage generates invalid data", "user": {"login": "jmetter", "id": 5980287, "node_id": "MDQ6VXNlcjU5ODAyODc=", "avatar_url": "https://avatars.githubusercontent.com/u/5980287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmetter", "html_url": "https://github.com/jmetter", "followers_url": "https://api.github.com/users/jmetter/followers", "following_url": "https://api.github.com/users/jmetter/following{/other_user}", "gists_url": "https://api.github.com/users/jmetter/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmetter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmetter/subscriptions", "organizations_url": "https://api.github.com/users/jmetter/orgs", "repos_url": "https://api.github.com/users/jmetter/repos", "events_url": "https://api.github.com/users/jmetter/events{/privacy}", "received_events_url": "https://api.github.com/users/jmetter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 266005714, "node_id": "MDU6TGFiZWwyNjYwMDU3MTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows-gnu", "name": "O-windows-gnu", "color": "6e6ec0", "default": false, "description": "Toolchain: GNU, Operating system: Windows"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2483744621, "node_id": "MDU6TGFiZWwyNDgzNzQ0NjIx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-code-coverage", "name": "A-code-coverage", "color": "f7e101", "default": false, "description": "Area: Source-based code coverage (-Cinstrument-coverage)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-05-02T16:28:10Z", "updated_at": "2023-05-03T04:32:03Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The profraw output of a binary compiled with the x86_64-pc-windows-gnu toolchain is considered \"malformed instrumentation profile data\" by llvm-profdata. In addition, the relevant coverage mapping sections (namely .lprfn, .lcovfun) within the EXE do not match expectations of llvm-cov. Both problems are presumably caused by linker issues concering COFF file handling in the GNU toolchain.\r\n\r\nGiven the simple demo program in the attachment, the following works just fine with the MSVC toolchain:\r\n```powershell\r\nrustc +nightly-x86_64-pc-windows-msvc -Cinstrument-coverage main.rs -o main_msvc.exe\r\n$Env:LLVM_PROFILE_FILE=\"msvc.profraw\"\r\n.\\main_msvc.exe\r\n$msvc_sysroot=$(rustc +nightly-x86_64-pc-windows-msvc --print sysroot)\r\n$msvc_tools=$msvc_sysroot + \"\\lib\\rustlib\\x86_64-pc-windows-msvc\\bin\\\"\r\n&$msvc_tools\\llvm-profdata.exe merge msvc.profraw -o msvc.profdata\r\n&$msvc_tools\\llvm-cov show main_msvc.exe --instr-profile msvc.profdata\r\n```\r\nThis outputs correct coverage information. I expected the same behavior from the GNU toolchain:\r\n```powershell\r\nrustc +nightly-x86_64-pc-windows-gnu -Cinstrument-coverage main.rs -o main_gnu.exe\r\n$Env:LLVM_PROFILE_FILE=\"gnu.profraw\"\r\n.\\main_gnu.exe\r\n$gnu_sysroot=$(rustc +nightly-x86_64-pc-windows-gnu --print sysroot)\r\n$gnu_tools=$gnu_sysroot + \"\\lib\\rustlib\\x86_64-pc-windows-gnu\\bin\\\"\r\n&$gnu_tools\\llvm-profdata.exe merge gnu.profraw -o gnu.profdata\r\n```\r\nBut llvm-profdata failed:\r\n```\r\nwarning: gnu.profraw: malformed instrumentation profile data\r\nerror: no profile can be merged\r\n```\r\n\r\n(Sidenote: I had to copy libgcc_s_seh-1.dll and libwinpthread-1.dll into the same folder as llvm-profdata or otherwise the GNU version of the tool fails to launch if called directly - which resulted in a confusing error when called indirectly by grcov)\r\n\r\n<details><summary>Investigation</summary>\r\n\r\nThe generated gnu.profraw is shorter and lacks the function names:\r\n\r\nmsvc.profraw:\r\n```\r\n00000000   81 72 66 6F 72 70 6C FF 08 00 00 00 00 00 00 00  \u0081rforpl.........\r\n00000010   00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00  ................\r\n00000020   00 00 00 00 00 00 00 00 0A 00 00 00 00 00 00 00  ................\r\n00000030   00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00  ........\u0080.......\r\n00000040   79 FF FF FF 00 00 00 00 01 40 50 1B F6 7F 00 00  y........@P.\u00f6\u2302..\r\n00000050   01 00 00 00 00 00 00 00 F0 0D 72 91 B9 C4 E0 D1  ........\u00f0.r\u0091\u00b9\u00c4\u00e0\u00d1\r\n00000060   AD C7 B1 32 70 9C 78 B2 80 FF FF FF 00 00 00 00  \u00ad\u00c7\u00b12p\u009cx\u00b2\u0080.......\r\n00000070   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000080   02 00 00 00 00 00 00 00 01 43 74 2F CF 00 F7 D8  .........Ct/\u00cf.\u00f7\u00d8\r\n00000090   99 39 35 49 69 5E 03 A1 60 FF FF FF 00 00 00 00  \u009995Ii^.\u00a1`.......\r\n000000A0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n000000B0   02 00 00 00 00 00 00 00 4B 91 E1 4B B9 7A D0 85  ........K\u0091\u00e1K\u00b9z\u00d0\u0085\r\n000000C0   93 0D 62 81 11 C9 A3 F1 40 FF FF FF 00 00 00 00  \u0093.b\u0081.\u00c9\u00a3\u00f1@.......\r\n000000D0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n000000E0   02 00 00 00 00 00 00 00 5F 86 D0 72 69 5A D5 B4  ........_\u0086\u00d0riZ\u00d5\u00b4\r\n000000F0   3D 7D A8 8E 0F CC D2 0D 20 FF FF FF 00 00 00 00  =}\u00a8\u008e.\u00cc\u00d2. .......\r\n00000100   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000110   03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000120   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................\r\n00000130   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................\r\n00000140   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................\r\n00000150   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000160   00 00 00 00 00 00 00 00 54 00 5F 52 4E 76 43 73  ........T._RNvCs\r\n00000170   64 53 61 6B 56 33 65 42 31 79 58 5F 34 6D 61 69  dSakV3eB1yX_4mai\r\n00000180   6E 33 66 6F 6F 01 5F 52 4E 76 43 73 64 53 61 6B  n3foo._RNvCsdSak\r\n00000190   56 33 65 42 31 79 58 5F 34 6D 61 69 6E 33 62 61  V3eB1yX_4main3ba\r\n000001A0   72 01 5F 52 4E 76 43 73 64 53 61 6B 56 33 65 42  r._RNvCsdSakV3eB\r\n000001B0   31 79 58 5F 34 6D 61 69 6E 34 6D 61 69 6E 28 00  1yX_4main4main(.\r\n000001C0   5F 52 4E 76 4E 74 43 73 64 53 61 6B 56 33 65 42  _RNvNtCsdSakV3eB\r\n000001D0   31 79 58 5F 34 6D 61 69 6E 35 73 74 75 66 66 38  1yX_4main5stuff8\r\n000001E0   64 6F 5F 73 74 75 66 66                          do_stuff\r\n```\r\n\r\ngnu.profraw:\r\n```\r\n00000000   81 72 66 6F 72 70 6C FF 08 00 00 00 00 00 00 00  \u0081rforpl.........\r\n00000010   00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................\r\n00000020   00 00 00 00 00 00 00 00 0A 00 00 00 00 00 00 00  ................\r\n00000030   00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00  ................\r\n00000040   D1 CF FF FF 00 00 00 00 01 B0 29 39 F6 7F 00 00  \u00d1\u00cf.......\u00b0)9\u00f6\u2302..\r\n00000050   01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000060   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000070   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000080   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000090   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................\r\n000000A0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................\r\n000000B0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................\r\n000000C0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n000000D0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n```\r\n\r\nThe strings appear if `-Clink-dead-code` is passed:\r\n```powershell\r\nrustc +nightly-x86_64-pc-windows-gnu -Cinstrument-coverage -Clink-dead-code main.rs -o main_gnu_ldc.exe\r\n$Env:LLVM_PROFILE_FILE=\"gnu_ldc.profraw\"\r\n.\\main_gnu_ldc.exe\r\n```\r\n\r\ngnu_ldc.profraw:\r\n```\r\n00000000   81 72 66 6F 72 70 6C FF 08 00 00 00 00 00 00 00  \u0081rforpl.........\r\n00000010   00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00  ................\r\n00000020   00 00 00 00 00 00 00 00 0A 00 00 00 00 00 00 00  ................\r\n00000030   00 00 00 00 00 00 00 00 83 00 00 00 00 00 00 00  ........\u0083.......\r\n00000040   D1 EF FF FF 00 00 00 00 01 50 19 50 F6 7F 00 00  \u00d1\u00ef.......P.P\u00f6\u2302..\r\n00000050   01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000060   00 00 00 00 00 00 00 00 F0 0D 72 91 B9 C4 E0 D1  ........\u00f0.r\u0091\u00b9\u00c4\u00e0\u00d1\r\n00000070   33 7C 1A DC 65 39 44 59 C8 EF FF FF 00 00 00 00  3|.\u00dce9DY\u00c8\u00ef......\r\n00000080   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000090   02 00 00 00 00 00 00 00 01 43 74 2F CF 00 F7 D8  .........Ct/\u00cf.\u00f7\u00d8\r\n000000A0   E1 31 81 8A 97 17 AA BA A8 EF FF FF 00 00 00 00  \u00e11\u0081\u008a\u0097.\u00aa\u00ba\u00a8\u00ef......\r\n000000B0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n000000C0   02 00 00 00 00 00 00 00 4B 91 E1 4B B9 7A D0 85  ........K\u0091\u00e1K\u00b9z\u00d0\u0085\r\n000000D0   D9 EE E3 C6 DB 92 8F 50 88 EF FF FF 00 00 00 00  \u00d9\u00ee\u00e3\u00c6\u00db\u0092\u008fP\u0088\u00ef......\r\n000000E0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n000000F0   02 00 00 00 00 00 00 00 5F 86 D0 72 69 5A D5 B4  ........_\u0086\u00d0riZ\u00d5\u00b4\r\n00000100   3D 7D A8 8E 0F CC D2 0D 68 EF FF FF 00 00 00 00  =}\u00a8\u008e.\u00cc\u00d2.h\u00ef......\r\n00000110   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000120   03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000130   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000140   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000150   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................\r\n00000160   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................\r\n00000170   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................\r\n00000180   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00000190   00 00 00 00 00 00 00 00 00 00 00 54 00 5F 52 4E  ...........T._RN\r\n000001A0   76 43 73 64 53 61 6B 56 33 65 42 31 79 58 5F 34  vCsdSakV3eB1yX_4\r\n000001B0   6D 61 69 6E 33 66 6F 6F 01 5F 52 4E 76 43 73 64  main3foo._RNvCsd\r\n000001C0   53 61 6B 56 33 65 42 31 79 58 5F 34 6D 61 69 6E  SakV3eB1yX_4main\r\n000001D0   33 62 61 72 01 5F 52 4E 76 43 73 64 53 61 6B 56  3bar._RNvCsdSakV\r\n000001E0   33 65 42 31 79 58 5F 34 6D 61 69 6E 34 6D 61 69  3eB1yX_4main4mai\r\n000001F0   6E 28 00 5F 52 4E 76 4E 74 43 73 64 53 61 6B 56  n(._RNvNtCsdSakV\r\n00000200   33 65 42 31 79 58 5F 34 6D 61 69 6E 35 73 74 75  3eB1yX_4main5stu\r\n00000210   66 66 38 64 6F 5F 73 74 75 66 66 00 00 00 00 00  ff8do_stuff.....\r\n```\r\n\r\nBut this file is still considered malformed by llvm-profdata. Looking at the .lprfn section in the binary:\r\n\r\n```\r\n&$msvc_tools\\llvm-objdump.exe -s -j '.lprfn' main_msvc.exe\r\nmain_msvc.exe:  file format coff-x86-64\r\nContents of section .lprfn:\r\n 140034000 0054005f 524e7643 73645361 6b563365  .T._RNvCsdSakV3e\r\n 140034010 42317958 5f346d61 696e3366 6f6f015f  B1yX_4main3foo._\r\n 140034020 524e7643 73645361 6b563365 42317958  RNvCsdSakV3eB1yX\r\n 140034030 5f346d61 696e3362 6172015f 524e7643  _4main3bar._RNvC\r\n 140034040 73645361 6b563365 42317958 5f346d61  sdSakV3eB1yX_4ma\r\n 140034050 696e346d 61696e28 005f524e 764e7443  in4main(._RNvNtC\r\n 140034060 73645361 6b563365 42317958 5f346d61  sdSakV3eB1yX_4ma\r\n 140034070 696e3573 74756666 38646f5f 73747566  in5stuff8do_stuf\r\n 140034080 6600                                 f.\r\n```\r\n\r\n```\r\n&$gnu_tools\\llvm-objdump.exe -s -j '.lprfn' main_gnu_ldc.exe\r\nmain_gnu_ldc.exe:       file format coff-x86-64\r\nContents of section .lprfn:\r\n 140105000 00000000 54005f52 4e764373 6453616b  ....T._RNvCsdSak\r\n 140105010 56336542 3179585f 346d6169 6e33666f  V3eB1yX_4main3fo\r\n 140105020 6f015f52 4e764373 6453616b 56336542  o._RNvCsdSakV3eB\r\n 140105030 3179585f 346d6169 6e336261 72015f52  1yX_4main3bar._R\r\n 140105040 4e764373 6453616b 56336542 3179585f  NvCsdSakV3eB1yX_\r\n 140105050 346d6169 6e346d61 696e2800 5f524e76  4main4main(._RNv\r\n 140105060 4e744373 6453616b 56336542 3179585f  NtCsdSakV3eB1yX_\r\n 140105070 346d6169 6e357374 75666638 646f5f73  4main5stuff8do_s\r\n 140105080 74756666 00000000                    tuff....\r\n```\r\nThe GNU version adds three extra zero bytes at the front and the end compared to the MSVC version.\r\n\r\nBoth the computation in `InstrProfilingPlatformWindows.c` \r\n\r\n```c\r\nconst char COMPILER_RT_SECTION(\".lprfn$A\") NamesStart = '\\0';\r\nconst char COMPILER_RT_SECTION(\".lprfn$Z\") NamesEnd = '\\0';\r\n\r\nconst char *__llvm_profile_begin_names(void) { return &NamesStart + 1; }\r\nconst char *__llvm_profile_end_names(void) { return &NamesEnd; }\r\n```\r\nand the llvm-cov tool (`CoverageMappingReader.cpp`) expect exactly one padding byte at the front.\r\n```cpp\r\n  // If this is a linked PE/COFF file, then we have to skip over the null byte\r\n  // that is allocated in the .lprfn$A section in the LLVM profiling runtime.\r\n  const ObjectFile *Obj = Section.getObject();\r\n  if (isa<COFFObjectFile>(Obj) && !Obj->isRelocatableObject())\r\n    Data = Data.drop_front(1);\r\n```\r\n\r\nApparently, the extra padding bytes are generated because GCC outputs 4 byte sections for a single char.\r\n```\r\n&$gnu_tools\\llvm-objdump.exe --all-headers $libprofiler_gnu | Select-String \"\\.lprf\"\r\n 35 .lprfnd$Z                             00000020 0000000000000000 DATA\r\n 36 .lprfnd$A                             00000020 0000000000000000 DATA\r\n 38 .lprfc$Z                              00000004 0000000000000000 DATA\r\n 39 .lprfc$A                              00000004 0000000000000000 DATA\r\n 40 .lprfn$Z                              00000004 0000000000000000 DATA\r\n 41 .lprfn$A                              00000004 0000000000000000 DATA\r\n 42 .lprfd$Z                              00000040 0000000000000000 DATA\r\n 43 .lprfd$A                              00000040 0000000000000000 DATA\r\n```\r\n\r\nwhile MSVC generates a one byte section:\r\n```\r\n&$msvc_tools\\llvm-objdump.exe --all-headers $libprofiler_msvc | Select-String \"\\.lprf\"\r\n 13 .lprfd$A      00000030 0000000000000000 DATA\r\n 14 .lprfd$Z      00000030 0000000000000000 DATA\r\n 15 .lprfn$A      00000001 0000000000000000 DATA\r\n 16 .lprfn$Z      00000001 0000000000000000 DATA\r\n 17 .lprfc$A      00000001 0000000000000000 DATA\r\n 18 .lprfc$Z      00000001 0000000000000000 DATA\r\n 20 .lprfnd$A     00000018 0000000000000000 DATA\r\n 21 .lprfnd$Z     00000018 0000000000000000 DATA\r\n```\r\n\r\nAlso note that we have a comparable issue with the lprfd, that should be 48 bytes `sizeof(__llvm_profile_data)` but is allocated in a 64-byte section by GCC.\r\n\r\nI was able to work around this, by building a profiler_builtins out-of-tree (simlar to minicov) and providing the $A and $Z sections/symbols from rust code. I did not find a switch in GCC to generate properly sized sections, but I may have missed it.\r\n\r\nThis way, the llvm-profdata accepted the generated profraw and llvm-cov accepted the EXE file. The resulting coverage was not satisfying, as it contained only coverage information for a single section.\r\n\r\nThe MSVC generated 'lcovfun' section desribes all four functions:\r\n```\r\n&$msvc_tools\\llvm-objdump.exe -s -j '.lcovfun' main_msvc.exe\r\nmain_msvc.exe:  file format coff-x86-64\r\nContents of section .lcovfun:\r\n 140032000 f00d7291 b9c4e0d1 09000000 adc7b132  ..r............2\r\n 140032010 709c78b2 7a2f4ca3 0f7973eb 01010001  p.x.z/L..ys.....\r\n 140032020 01030102 02000000 4b91e14b b97ad085  ........K..K.z..\r\n 140032030 09000000 930d6281 11c9a3f1 7a2f4ca3  ......b.....z/L.\r\n 140032040 0f7973eb 01010001 010a0102 02000000  .ys.............\r\n 140032050 0143742f cf00f7d8 09000000 99393549  .Ct/.........95I\r\n 140032060 695e03a1 7a2f4ca3 0f7973eb 01010001  i^..z/L..ys.....\r\n 140032070 01060102 02000000 5f86d072 695ad5b4  ........_..riZ..\r\n 140032080 1c000000 3d7da88e 0fccd20d 538568a3  ....=}......S.h.\r\n 140032090 a07b3068 01010201 05050204 01030101  .{0h............\r\n 1400320a0 09050209 000e0202 09000e07 02010002  ................\r\n```\r\n\r\nand the four functions are also present in the GNU generated object file:\r\n\r\n```\r\nrustc +nightly-x86_64-pc-windows-gnu -Cinstrument-coverage -Clink-dead-code --emit=obj main.rs -o main_gnu_ldc.o\r\n&$gnu_tools\\llvm-objdump.exe -s -j '.lcovfun$M' main_gnu_ldc.o\r\nmain_gnu_ldc.o: file format coff-x86-64\r\nContents of section .lcovfun$M:\r\n 0000 4b91e14b b97ad085 09000000 d9eee3c6  K..K.z..........\r\n 0010 db928f50 73a65812 005f97d4 01010001  ...Ps.X.._......\r\n 0020 010a0102 02                          .....\r\nContents of section .lcovfun$M:\r\n 0000 5f86d072 695ad5b4 1c000000 3d7da88e  _..riZ......=}..\r\n 0010 0fccd20d 73a65812 005f97d4 01020201  ....s.X.._......\r\n 0020 05050204 01030101 09050209 000e0202  ................\r\n 0030 09000e07 02010002                    ........\r\nContents of section .lcovfun$M:\r\n 0000 f00d7291 b9c4e0d1 09000000 337c1adc  ..r.........3|..\r\n 0010 65394459 73a65812 005f97d4 01010001  e9DYs.X.._......\r\n 0020 01030102 02                          .....\r\nContents of section .lcovfun$M:\r\n 0000 0143742f cf00f7d8 09000000 e131818a  .Ct/.........1..\r\n 0010 9717aaba 73a65812 005f97d4 01010001  ....s.X.._......\r\n 0020 01060102 02                          .....\r\n```\r\n\r\nand each of the sections has a symbol with a unique name (__covrec_B4D55A6972D0865Fu = linkonce_odr hidden constant, ...) but the linker still only keeps a single symbol in the generated binary:\r\n```\r\n&$gnu_tools\\llvm-objdump.exe -s -j '.lcovfun' main_gnu_ldc.exe\r\nmain_gnu_ldc.exe:       file format coff-x86-64\r\nContents of section .lcovfun:\r\n 140103000 f00d7291 b9c4e0d1 09000000 337c1adc  ..r.........3|..\r\n 140103010 65394459 7a2f4ca3 0f7973eb 01010001  e9DYz/L..ys.....\r\n 140103020 01030102 02\r\n```\r\n\r\nI did not find a solution for the linker dropping the other covrecs.\r\n</details>\r\n\r\n### Meta\r\n\r\n` rustc +nightly-x86_64-pc-windows-msvc --version --verbose`:\r\n```\r\nrustc 1.71.0-nightly (b628260df 2023-04-22)\r\nbinary: rustc\r\ncommit-hash: b628260df0587ae559253d8640ecb8738d3de613\r\ncommit-date: 2023-04-22\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.71.0-nightly\r\nLLVM version: 16.0.2\r\n```\r\n\r\n`rustc +nightly-x86_64-pc-windows-gnu --version --verbose`:\r\n```\r\nrustc 1.71.0-nightly (b628260df 2023-04-22)\r\nbinary: rustc\r\ncommit-hash: b628260df0587ae559253d8640ecb8738d3de613\r\ncommit-date: 2023-04-22\r\nhost: x86_64-pc-windows-gnu\r\nrelease: 1.71.0-nightly\r\nLLVM version: 16.0.2\r\n```\r\n\r\n[demo.zip](https://github.com/rust-lang/rust/files/11375472/demo.zip)\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111098/timeline", "performed_via_github_app": null, "state_reason": null}