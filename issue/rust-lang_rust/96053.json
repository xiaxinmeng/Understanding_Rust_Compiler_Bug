{"url": "https://api.github.com/repos/rust-lang/rust/issues/96053", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96053/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96053/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96053/events", "html_url": "https://github.com/rust-lang/rust/issues/96053", "id": 1204630207, "node_id": "I_kwDOAAsO6M5HzTK_", "number": 96053, "title": "Improve diagnostics when ignoring a `#[must_use]` value", "user": {"login": "cameron1024", "id": 29902409, "node_id": "MDQ6VXNlcjI5OTAyNDA5", "avatar_url": "https://avatars.githubusercontent.com/u/29902409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cameron1024", "html_url": "https://github.com/cameron1024", "followers_url": "https://api.github.com/users/cameron1024/followers", "following_url": "https://api.github.com/users/cameron1024/following{/other_user}", "gists_url": "https://api.github.com/users/cameron1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/cameron1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cameron1024/subscriptions", "organizations_url": "https://api.github.com/users/cameron1024/orgs", "repos_url": "https://api.github.com/users/cameron1024/repos", "events_url": "https://api.github.com/users/cameron1024/events{/privacy}", "received_events_url": "https://api.github.com/users/cameron1024/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-04-14T14:55:10Z", "updated_at": "2023-04-05T17:28:33Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following:\r\n```rust\r\nfn main() {\r\n    example();\r\n}\r\n\r\n#[must_use]\r\nfn example() -> i32 {\r\n    1\r\n}\r\n```\r\nThe following output is given:\r\n```\r\nwarning: unused return value of `example` that must be used\r\n --> src/main.rs:2:5\r\n  |\r\n2 |     example();\r\n  |     ^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(unused_must_use)]` on by default\r\n```\r\n\r\nIdeally I'd like to see an additional line saying something like\r\n```\r\nif you want to explicitly ignore the return value, use `let _ = ...`\r\n```\r\nDoes this seem sensible? If so I'd be happy to work on it. The main downside I can see is it might lead people to ignore things when they shouldn't, for example someone new to Rust might use `let _ = result_returning_function();` in a spirit of \"doing what the compiler says to do\", so maybe this should be special-cased to not apply to `Result`?\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96053/timeline", "performed_via_github_app": null, "state_reason": null}