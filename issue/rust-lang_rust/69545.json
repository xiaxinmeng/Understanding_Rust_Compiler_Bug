{"url": "https://api.github.com/repos/rust-lang/rust/issues/69545", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69545/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69545/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69545/events", "html_url": "https://github.com/rust-lang/rust/issues/69545", "id": 572710193, "node_id": "MDU6SXNzdWU1NzI3MTAxOTM=", "number": 69545, "title": "New Ternary Operator for Rust", "user": {"login": "mrjpaxton", "id": 32535106, "node_id": "MDQ6VXNlcjMyNTM1MTA2", "avatar_url": "https://avatars.githubusercontent.com/u/32535106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrjpaxton", "html_url": "https://github.com/mrjpaxton", "followers_url": "https://api.github.com/users/mrjpaxton/followers", "following_url": "https://api.github.com/users/mrjpaxton/following{/other_user}", "gists_url": "https://api.github.com/users/mrjpaxton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrjpaxton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrjpaxton/subscriptions", "organizations_url": "https://api.github.com/users/mrjpaxton/orgs", "repos_url": "https://api.github.com/users/mrjpaxton/repos", "events_url": "https://api.github.com/users/mrjpaxton/events{/privacy}", "received_events_url": "https://api.github.com/users/mrjpaxton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-28T11:54:52Z", "updated_at": "2020-03-01T18:03:55Z", "closed_at": "2020-02-28T12:12:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a suggestion for a new and readable ternary operator. I know there's already an issue thread that discusses this, and it is a hot-button topic, but hear me out. Those of you who like this C/C++ feature a lot might like this idea.\r\n\r\nThe reason why the ternary operator `?:` exists in C++ is to save keystrokes/typing, and improve code layout. It can help improve readability in certain circumstances, while also being a double-edged sword by decreasing readability and keyword searching in other situations. In other words, even professional programmers would agree, its invention can be perceived as its own folly.\r\n\r\nI also am aware that the question mark `?` is now used as its own operator for the use of try statements in Rust, so I do not want to conflict with this.\r\n\r\nHowever, what about something more intuitive? This just literally popped into my mind a few minutes ago:\r\n\r\n```\r\nlet my_value = conditional +: {true} -: {false};\r\n```\r\n\r\nNow I don't know if the brackets need to be required, but let's just assume that they do. But you can see how obvious this is, right? If the statement is true (positive) it will evaluate to true. If negative (false) it will just go to false.\r\n\r\nIt should support newlines as well:\r\n\r\n```\r\nlet my_value = conditional\r\n+: {true statement}\r\n-: {false statement};\r\n```\r\n\r\nPerhaps order can be reversed:\r\n\r\n```\r\nlet my_value = conditional\r\n-: {false statement}\r\n+: {true statement};\r\n```\r\n\r\nAnd perhaps either the true/false stanza can be ignored:\r\n\r\n```\r\nlet my_value = conditional\r\n+: {true statement};\r\n```\r\n\r\nNow, if anyone mentions the `match` operator (similar to `switch` in C++) then yes, you could use that, but this would have the exact same overhead as an `if-else`, which is what you would want, versus the overhead of a `match`, which can be negligible, but still significant for large code bases.\r\n\r\nFeel free to close if anyone is still firm on using `if-else`, because I can deal with it. I just don't know if everyone else is....", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69545/timeline", "performed_via_github_app": null, "state_reason": "completed"}