{"url": "https://api.github.com/repos/rust-lang/rust/issues/88649", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88649/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88649/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88649/events", "html_url": "https://github.com/rust-lang/rust/issues/88649", "id": 988347386, "node_id": "MDU6SXNzdWU5ODgzNDczODY=", "number": 88649, "title": "StorageLive is added on a local that was already live", "user": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 147085028, "node_id": "MDU6TGFiZWwxNDcwODUwMjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-nightly", "name": "regression-from-stable-to-nightly", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to nightly."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-09-04T18:42:15Z", "updated_at": "2021-09-06T17:12:19Z", "closed_at": "2021-09-06T13:20:15Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Miri's CI started failing recently, with an error similar to:\r\n\r\n```\r\nerror: Undefined Behavior: StorageLive on a local that was already live\r\n --> foo.rs:9:52\r\n  |\r\n9 |             Foo::Variant1(x) | Foo::Variant2(x) if x => {}\r\n  |                                                    ^ StorageLive on a local that was already live\r\n  |\r\n  = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\r\n  = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\r\n```\r\n\r\nIt seems likely that this is a regression from #88572. cc @matthewjasper \r\n\r\nThanks to @hyd-dev for doing the original minimization.\r\n\r\n### MCVE\r\n\r\n```rust\r\nenum Foo {\r\n    Variant1(bool),\r\n    Variant2(bool),\r\n}\r\n\r\nfn main() {\r\n    loop {\r\n        match Foo::Variant1(true) {\r\n            Foo::Variant1(x) | Foo::Variant2(x) if x => {}\r\n            _ => {}\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Generated MIR (from right after building)\r\n\r\n```rust\r\n// MIR for `main` 0 mir_map\r\n\r\nfn main() -> () {\r\n    let mut _0: ();                      // return place in scope 0 at foo.rs:6:11: 6:11\r\n    let mut _1: !;                       // in scope 0 at foo.rs:7:5: 12:6\r\n    let mut _2: ();                      // in scope 0 at foo.rs:6:1: 13:2\r\n    let mut _3: Foo;                     // in scope 0 at foo.rs:8:15: 8:34\r\n    let mut _4: isize;                   // in scope 0 at foo.rs:9:13: 9:29\r\n    let mut _5: &Foo;                    // in scope 0 at foo.rs:8:15: 8:34\r\n    let _6: bool;                        // in scope 0 at foo.rs:9:27: 9:28\r\n    let _7: &bool;                       // in scope 0 at foo.rs:9:27: 9:28\r\n    let mut _8: bool;                    // in scope 0 at foo.rs:9:52: 9:53\r\n    let mut _9: bool;                    // in scope 0 at foo.rs:9:52: 9:53\r\n    scope 1 {\r\n        debug x => _6;                   // in scope 1 at foo.rs:9:27: 9:28\r\n        debug x => _7;                   // in scope 1 at foo.rs:9:27: 9:28\r\n    }\r\n\r\n    bb0: {\r\n        StorageLive(_1);                 // scope 0 at foo.rs:7:5: 12:6\r\n        goto -> bb1;                     // scope 0 at foo.rs:7:5: 12:6\r\n    }\r\n\r\n    bb1: {\r\n        falseUnwind -> [real: bb2, cleanup: bb19]; // scope 0 at foo.rs:7:5: 12:6\r\n    }\r\n\r\n    bb2: {\r\n        StorageLive(_3);                 // scope 0 at foo.rs:8:15: 8:34\r\n        _3 = Foo::Variant1(const true);  // scope 0 at foo.rs:8:15: 8:34\r\n        FakeRead(ForMatchedPlace(None), _3); // scope 0 at foo.rs:8:15: 8:34\r\n        _4 = discriminant(_3);           // scope 0 at foo.rs:8:15: 8:34\r\n        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb5, otherwise: bb4]; // scope 0 at foo.rs:8:9: 8:34\r\n    }\r\n\r\n    bb3: {\r\n        falseEdge -> [real: bb8, imaginary: bb5]; // scope 0 at foo.rs:9:13: 9:29\r\n    }\r\n\r\n    bb4: {\r\n        _2 = const ();                   // scope 0 at foo.rs:10:18: 10:20\r\n        goto -> bb16;                    // scope 0 at foo.rs:10:18: 10:20\r\n    }\r\n\r\n    bb5: {\r\n        falseEdge -> [real: bb12, imaginary: bb4]; // scope 0 at foo.rs:9:32: 9:48\r\n    }\r\n\r\n    bb6: {\r\n        goto -> bb4;                     // scope 0 at foo.rs:8:9: 8:34\r\n    }\r\n\r\n    bb7: {\r\n        _2 = const ();                   // scope 1 at foo.rs:9:57: 9:59\r\n        StorageDead(_6);                 // scope 0 at foo.rs:9:58: 9:59\r\n        StorageDead(_9);                 // scope 0 at foo.rs:9:58: 9:59\r\n        StorageDead(_7);                 // scope 0 at foo.rs:9:58: 9:59\r\n        goto -> bb16;                    // scope 0 at foo.rs:9:58: 9:59\r\n    }\r\n\r\n    bb8: {\r\n        StorageLive(_7);                 // scope 0 at foo.rs:9:27: 9:28\r\n        _7 = &((_3 as Variant1).0: bool); // scope 0 at foo.rs:9:27: 9:28\r\n        _5 = &shallow _3;                // scope 0 at foo.rs:8:15: 8:34\r\n        StorageLive(_8);                 // scope 0 at foo.rs:9:52: 9:53\r\n        _8 = (*_7);                      // scope 0 at foo.rs:9:52: 9:53\r\n        switchInt(move _8) -> [false: bb10, otherwise: bb9]; // scope 0 at foo.rs:9:52: 9:53\r\n    }\r\n\r\n    bb9: {\r\n        FakeRead(ForMatchGuard, _5);     // scope 0 at foo.rs:9:52: 9:53\r\n        FakeRead(ForGuardBinding, _7);   // scope 0 at foo.rs:9:52: 9:53\r\n        StorageLive(_6);                 // scope 0 at foo.rs:9:27: 9:28\r\n        _6 = ((_3 as Variant1).0: bool); // scope 0 at foo.rs:9:27: 9:28\r\n        goto -> bb7;                     // scope 0 at foo.rs:8:9: 11:10\r\n    }\r\n\r\n    bb10: {\r\n        goto -> bb11;                    // scope 0 at foo.rs:9:52: 9:53\r\n    }\r\n\r\n    bb11: {\r\n        StorageDead(_8);                 // scope 0 at foo.rs:9:58: 9:59\r\n        StorageDead(_7);                 // scope 0 at foo.rs:9:58: 9:59\r\n        falseEdge -> [real: bb4, imaginary: bb5]; // scope 0 at foo.rs:9:52: 9:53\r\n    }\r\n\r\n    bb12: {\r\n        StorageLive(_7);                 // scope 0 at foo.rs:9:46: 9:47\r\n        _7 = &((_3 as Variant2).0: bool); // scope 0 at foo.rs:9:46: 9:47\r\n        _5 = &shallow _3;                // scope 0 at foo.rs:8:15: 8:34\r\n        StorageLive(_9);                 // scope 0 at foo.rs:9:52: 9:53\r\n        _9 = (*_7);                      // scope 0 at foo.rs:9:52: 9:53\r\n        switchInt(move _9) -> [false: bb14, otherwise: bb13]; // scope 0 at foo.rs:9:52: 9:53\r\n    }\r\n\r\n    bb13: {\r\n        FakeRead(ForMatchGuard, _5);     // scope 0 at foo.rs:9:52: 9:53\r\n        FakeRead(ForGuardBinding, _7);   // scope 0 at foo.rs:9:52: 9:53\r\n        StorageLive(_6);                 // scope 0 at foo.rs:9:46: 9:47\r\n        _6 = ((_3 as Variant2).0: bool); // scope 0 at foo.rs:9:46: 9:47\r\n        goto -> bb7;                     // scope 0 at foo.rs:8:9: 11:10\r\n    }\r\n\r\n    bb14: {\r\n        goto -> bb15;                    // scope 0 at foo.rs:9:52: 9:53\r\n    }\r\n\r\n    bb15: {\r\n        StorageDead(_9);                 // scope 0 at foo.rs:9:58: 9:59\r\n        StorageDead(_7);                 // scope 0 at foo.rs:9:58: 9:59\r\n        falseEdge -> [real: bb6, imaginary: bb4]; // scope 0 at foo.rs:9:52: 9:53\r\n    }\r\n\r\n    bb16: {\r\n        StorageDead(_3);                 // scope 0 at foo.rs:12:5: 12:6\r\n        goto -> bb1;                     // scope 0 at foo.rs:7:5: 12:6\r\n    }\r\n\r\n    bb17: {\r\n        unreachable;                     // scope 0 at foo.rs:7:5: 12:6\r\n    }\r\n\r\n    bb18: {\r\n        StorageDead(_1);                 // scope 0 at foo.rs:12:5: 12:6\r\n        return;                          // scope 0 at foo.rs:13:2: 13:2\r\n    }\r\n\r\n    bb19 (cleanup): {\r\n        resume;                          // scope 0 at foo.rs:6:1: 13:2\r\n    }\r\n}\r\n```\r\n\r\nEDIT: updated the MIR output so it's from the latest nightly", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88649/timeline", "performed_via_github_app": null, "state_reason": "completed"}