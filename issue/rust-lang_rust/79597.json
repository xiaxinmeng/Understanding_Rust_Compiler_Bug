{"url": "https://api.github.com/repos/rust-lang/rust/issues/79597", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79597/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79597/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79597/events", "html_url": "https://github.com/rust-lang/rust/issues/79597", "id": 754331681, "node_id": "MDU6SXNzdWU3NTQzMzE2ODE=", "number": 79597, "title": "Tracking Issue for `const_heap`", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}, {"id": 1089771154, "node_id": "MDU6TGFiZWwxMDg5NzcxMTU0", "url": "https://api.github.com/repos/rust-lang/rust/labels/needs-rfc", "name": "needs-rfc", "color": "fceb9f", "default": false, "description": "This change is large or controversial enough that it should have an (e-)RFC accepted before doing it"}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}, {"id": 3537211959, "node_id": "LA_kwDOAAsO6M7S1ZI3", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-impl-incomplete", "name": "S-tracking-impl-incomplete", "color": "4682b4", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2020-12-01T11:53:24Z", "updated_at": "2023-03-30T20:52:54Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a tracking issue for https://github.com/rust-lang/const-eval/issues/20\r\nThe feature gate for the issue is `#![feature(const_heap)]`.\r\nThe general design can be found [here](https://hackmd.io/h2O2vkj3RimrBTfm9hvZWA#AllocRef-allocGlobal-and-allocConstGlobal)\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n\r\n- [ ] Implement https://github.com/rust-lang/const-eval/issues/20 experimentally\r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n\r\n* Do we want to allow the regular `Global` allocator? This would give us post-monomorpization errors. More details can be found in https://hackmd.io/h2O2vkj3RimrBTfm9hvZWA#Transient-heap-allocations-via-Global\r\n* If we stabilize this, we fundamentally change the nature of `const fn`: before this change, a `const fn() -> T` would inevitably have to always return the same value; after this change, that is no longer the case. With `ptr_guaranteed_eq`, this can even to some extend be observed during CTFE. So in that sense, this feature is much bigger than anything we ever stabilized for CTFE.\r\n* We can already emulate all this via `build.rs` scripts or proc macros that generate the appropriate constants/statics and references them. Const heap will \"just\" make generating static/const allocations more convenient.\r\n* Once we permit references to things that (can) contain interior mutability, it would be possible for users to write a `const fn foo() -> &'static Cell<i32>`, which could then be used to initialize a `const FOO: &'static Cell<i32>` which is unsound (and only caught by dynamic checks). The tracking issue for interior mutability behind references is #80384\r\n\r\n### Implementation history\r\n\r\n* #79594 adds the base intrinsic for telling the miri-engine to create a virtual heap allocation\r\n* #79664 makes sure that code outside of the const evaluator has no knowledge about heap allocations", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79597/reactions", "total_count": 11, "+1": 4, "-1": 0, "laugh": 0, "hooray": 5, "confused": 0, "heart": 0, "rocket": 0, "eyes": 2}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79597/timeline", "performed_via_github_app": null, "state_reason": null}