{"url": "https://api.github.com/repos/rust-lang/rust/issues/12967", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12967/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12967/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12967/events", "html_url": "https://github.com/rust-lang/rust/issues/12967", "id": 29536572, "node_id": "MDU6SXNzdWUyOTUzNjU3Mg==", "number": 12967, "title": "serialize::json can't handle HashMap<uint, V>", "user": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-03-17T04:16:16Z", "updated_at": "2014-03-19T04:11:01Z", "closed_at": "2014-03-19T04:11:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "or, AFAIK, any other numeric value.. I've isolated a few test cases in my local branch:\n\n``` .rust\n#[test]\n    fn test_hashmap_with_numeric_key() {\n        use std::str::from_utf8;\n        use std::io::Writer;\n        use std::io::MemWriter;\n        use collections::HashMap;\n        let mut hm: HashMap<uint, bool> = HashMap::new();\n        hm.insert(1, true);\n        let mut mem_buf = MemWriter::new();\n        {\n            let mut encoder = Encoder::new(&mut mem_buf as &mut io::Writer);\n            hm.encode(&mut encoder)\n        }\n        let bytes = mem_buf.unwrap();\n        let json_str = from_utf8(bytes).unwrap();\n        match from_str(json_str) {\n            Err(_) => fail!(\"Unable to parse json_str: {:?}\", json_str),\n            _ => {} // it parsed and we are good to go\n        }\n    }\n    #[test]\n    fn test_hashmap_with_numeric_key_can_handle_double_quote_delimited_key() {\n        use collections::HashMap;\n        use Decodable;\n        let json_str = \"{\\\"1\\\":true}\";\n        let json_obj = match from_str(json_str) {\n            Err(_) => fail!(\"Unable to parse json_str: {:?}\", json_str),\n            Ok(o) => o\n        };\n        let mut decoder = Decoder::new(json_obj);\n        let hm: HashMap<uint, bool> = Decodable::decode(&mut decoder);\n    }\n```\n\nhere be the spew:\n\n```\nfailures:\n\n---- json::tests::test_hashmap_with_numeric_key_can_handle_double_quote_delimited_key stdout ----\n        task 'json::tests::test_hashmap_with_numeric_key_can_handle_double_quote_delimited_key' failed at 'JSON decode error: expected number but found string: \"1\"', /Users/jeff/src/rust/src/libserialize/json.rs:1259\n\n---- json::tests::test_hashmap_with_numeric_key stdout ----\n        task 'json::tests::test_hashmap_with_numeric_key' failed at 'Unable to parse json_str: \"{1:true}\"', /Users/jeff/src/rust/src/libserialize/json.rs:2539\n\n\nfailures:\n    json::tests::test_hashmap_with_numeric_key\n    json::tests::test_hashmap_with_numeric_key_can_handle_double_quote_delimited_key\n\ntest result: FAILED. 60 passed; 2 failed; 0 ignored; 8 measured\n```\n\nIn case it isn't obvious: `{1:true}` is not valid JSON. Not only does it not pass muster for the web-based validators I checked (plus firefox's JSONView addon), but even `serialize::json` will not decode a JSON string created by it's own encoder.\n\nThe other test was something I created to catch/anticipate what the solution would end up producing.\n\nI dug into the code for `json::Encoder` a bit and one of the solutions I wanted to pursue was to, in `emit_map_elt_key`, look at the state of the output bytes after running the `f` param that actually maps the key value. You can then see if the last key added is wrapped in quotes and add them if they're missing.\n\nSadly, the output state is kept as a `&mut Writer` so you have no ability examine/mutate it.. So I guess `Decoder`/`Encoder` will have to keep their own `~[u8]` that it will grow/mutate during the process, and then dump into the `wr` field at the end, instead of growing it organically during the parsing process.\n", "closed_by": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12967/timeline", "performed_via_github_app": null, "state_reason": "completed"}