{"url": "https://api.github.com/repos/rust-lang/rust/issues/45462", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45462/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45462/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45462/events", "html_url": "https://github.com/rust-lang/rust/issues/45462", "id": 267536684, "node_id": "MDU6SXNzdWUyNjc1MzY2ODQ=", "number": 45462, "title": "Inference worse in method signature using associated type than with new generic type parameter eq-constrained to the associated type", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-23T04:11:25Z", "updated_at": "2022-12-08T07:43:03Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "With this signature\r\n```rust\r\n    fn try_fold<F, T: Try>(self, init: T::Ok, mut f: F) -> T where\r\n        Self: Sized, F: FnMut(T::Ok, Self::Item) -> T\r\n```\r\nThis code\r\n```rust\r\n    let a = [1, 2, 3];\r\n    let sum = a.iter().try_fold(0i8, |acc, &x| acc.checked_add(x));\r\n```\r\nGets `error[E0619]: the type of this value must be known in this context`.\r\n\r\nBut it works fine with the seemingly-equivalent signature\r\n```rust\r\n    fn try_fold<F, U, T: Try<Ok=U>>(self, init: U, mut f: F) -> T where\r\n        Self: Sized, F: FnMut(U, Self::Item) -> T\r\n```\r\nSince `acc` and `init` must have the same type in both cases, shouldn't both signatures work?\r\n\r\nFull repro: https://play.rust-lang.org/?gist=f8d2baeae64b17344e1cf27673a2e905&version=nightly", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45462/timeline", "performed_via_github_app": null, "state_reason": null}