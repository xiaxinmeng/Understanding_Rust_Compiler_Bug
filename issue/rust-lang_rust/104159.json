{"url": "https://api.github.com/repos/rust-lang/rust/issues/104159", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104159/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104159/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104159/events", "html_url": "https://github.com/rust-lang/rust/issues/104159", "id": 1440655949, "node_id": "I_kwDOAAsO6M5V3qpN", "number": 104159, "title": "Unable to build 'no_std' crate into dylib", "user": {"login": "crazyboycjr", "id": 9761046, "node_id": "MDQ6VXNlcjk3NjEwNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/9761046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crazyboycjr", "html_url": "https://github.com/crazyboycjr", "followers_url": "https://api.github.com/users/crazyboycjr/followers", "following_url": "https://api.github.com/users/crazyboycjr/following{/other_user}", "gists_url": "https://api.github.com/users/crazyboycjr/gists{/gist_id}", "starred_url": "https://api.github.com/users/crazyboycjr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crazyboycjr/subscriptions", "organizations_url": "https://api.github.com/users/crazyboycjr/orgs", "repos_url": "https://api.github.com/users/crazyboycjr/repos", "events_url": "https://api.github.com/users/crazyboycjr/events{/privacy}", "received_events_url": "https://api.github.com/users/crazyboycjr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 1353613039, "node_id": "MDU6TGFiZWwxMzUzNjEzMDM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lang-item", "name": "A-lang-item", "color": "f7e101", "default": false, "description": "Area: lang items"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-11-08T17:57:42Z", "updated_at": "2023-05-17T08:55:34Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hi folks,\r\n\r\nI am having an issue of building a dylib with no_std.\r\n\r\n```\r\n$ cat src/lib.rs\r\n#[no_std]\r\n\r\n$ rustc src/lib.rs --crate-type dylib -C prefer-dynamic -o libnostd_dylib.so\r\nerror: language item required, but not found: `eh_personality`\r\n\r\nerror: `#[panic_handler]` function required, but not found\r\n\r\nerror: aborting due to 2 previous errors\r\n```\r\n\r\nAfter adding the missing language items, the compilation is fine.\r\n```\r\n$ cat src/lib.rs\r\n#![no_std]\r\n#![feature(lang_items)]\r\n#[lang = \"eh_personality\"] extern fn eh_personality() {}\r\n#[panic_handler] fn panic(_info: &core::panic::PanicInfo) -> ! { loop {} }\r\n```\r\n\r\nBut linking the product (libnostd_dylib.so) into an executable gives me duplicate language items.\r\n```\r\n$ cat src/main.rs\r\nuse nostd_dylib;\r\nfn main() { }\r\n\r\n$ rustc --edition=2021 src/main.rs --crate-type bin -L . --extern nostd_dylib=libnostd_dylib.so -C prefer-dynamic # cargo build also works the same way\r\nwarning: unused import: `nostd_dylib`\r\n --> src/main.rs:1:5\r\n  |\r\n1 | use nostd_dylib;\r\n  |     ^^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(unused_imports)]` on by default\r\n\r\nerror: duplicate lang item in crate `lib` (which `main` depends on): `panic_impl`.\r\n  |\r\n  = note: the lang item is first defined in crate `std` (which `main` depends on)\r\n  = note: first definition in `std` loaded from /home/cjr/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-d6566390077dd5f5.so, /home/cjr/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-d6566390077dd5f5.rlib\r\n  = note: second definition in `lib` loaded from /home/cjr/misc/nostd-dylib/libnostd_dylib.so\r\n\r\nerror: duplicate lang item in crate `lib` (which `main` depends on): `eh_personality`.\r\n  |\r\n  = note: the lang item is first defined in crate `panic_unwind` (which `std` depends on)\r\n  = note: first definition in `panic_unwind` loaded from /home/cjr/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libpanic_unwind-a8f484438681c15e.rlib\r\n  = note: second definition in `lib` loaded from /home/cjr/misc/nostd-dylib/libnostd_dylib.so\r\n\r\nerror: aborting due to 2 previous errors; 1 warning emitted\r\n```\r\n\r\nAs others have pointed out (https://stackoverflow.com/questions/43097676/how-to-build-a-standard-linux-so-library-with-stable-rust-without-using-std), an end product such as a binary executable needs panic handlers and exception handling routines to run. I can understand that. I may also partially get/accept the point that a shared library could be an end product (perhaps it would be better if someone could name an example).\r\n\r\nBut what I feel quite confusing is that, most of the time, the dylib could be intermediate (I know it will be linked by other crates/executables), and those crates (or libstd) will ultimately provide these language items, so how can I produce a no_std dylib without providing these two language items in this crate itself?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104159/timeline", "performed_via_github_app": null, "state_reason": null}