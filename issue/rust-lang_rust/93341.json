{"url": "https://api.github.com/repos/rust-lang/rust/issues/93341", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93341/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93341/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93341/events", "html_url": "https://github.com/rust-lang/rust/issues/93341", "id": 1115243628, "node_id": "I_kwDOAAsO6M5CeURs", "number": 93341, "title": "Failed to unify types when using GATs and HRTBs", "user": {"login": "reinerp", "id": 777239, "node_id": "MDQ6VXNlcjc3NzIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/777239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reinerp", "html_url": "https://github.com/reinerp", "followers_url": "https://api.github.com/users/reinerp/followers", "following_url": "https://api.github.com/users/reinerp/following{/other_user}", "gists_url": "https://api.github.com/users/reinerp/gists{/gist_id}", "starred_url": "https://api.github.com/users/reinerp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reinerp/subscriptions", "organizations_url": "https://api.github.com/users/reinerp/orgs", "repos_url": "https://api.github.com/users/reinerp/repos", "events_url": "https://api.github.com/users/reinerp/events{/privacy}", "received_events_url": "https://api.github.com/users/reinerp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}], "state": "closed", "locked": false, "assignee": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2022-01-26T16:53:22Z", "updated_at": "2022-03-08T04:35:09Z", "closed_at": "2022-03-08T04:35:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I believe the following code should typecheck under nightly (https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=f3d45f199cadea62341a727f66c52d86):\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\nuse std::marker::PhantomData;\r\n\r\nstruct Id<'id>(PhantomData<fn(&'id ()) -> &'id ()>);\r\n\r\nfn new_id() -> Id<'static> {\r\n    Id(PhantomData)\r\n}\r\n\r\npub trait HasLifetime where {\r\n    type AtLifetime<'a>;\r\n}\r\n\r\npub struct ExistentialLifetime<S: HasLifetime>(S::AtLifetime<'static>);\r\n\r\nimpl<S: HasLifetime> ExistentialLifetime<S> {\r\n    pub fn new<F>(f: F) -> ExistentialLifetime<S>\r\n        where for<'id> F: FnOnce(Id<'id>) -> S::AtLifetime<'id> {\r\n        ExistentialLifetime(f(new_id()))\r\n    }\r\n}\r\n\r\n\r\nstruct ExampleS<'id>(Id<'id>);\r\n\r\nstruct ExampleMarker;\r\n\r\nimpl HasLifetime for ExampleMarker {\r\n    type AtLifetime<'id> = ExampleS<'id>;\r\n}\r\n\r\n\r\nfn broken0() -> ExistentialLifetime<ExampleMarker> {\r\n    fn new_helper<'id>(id: Id<'id>) -> ExampleS<'id> {\r\n        ExampleS(id)\r\n    }\r\n\r\n    ExistentialLifetime::<ExampleMarker>::new(new_helper)\r\n}\r\n\r\nfn broken1() -> ExistentialLifetime<ExampleMarker> {\r\n    fn new_helper<'id>(id: Id<'id>) -> <ExampleMarker as HasLifetime>::AtLifetime<'id> {\r\n        ExampleS(id)\r\n    }\r\n\r\n    ExistentialLifetime::<ExampleMarker>::new(new_helper)\r\n}\r\n\r\nfn broken2() -> ExistentialLifetime<ExampleMarker> {\r\n    ExistentialLifetime::<ExampleMarker>::new(|id| ExampleS(id))\r\n}\r\n```\r\n\r\nNote that this uses generic associated types (`AtLifetime<'a>`) and it also uses a higher-rank trait bound in `fn new`.\r\n\r\nHowever, rustc nightly rejects this program with the following error:\r\n\r\n```\r\n Compiling playground v0.0.1 (/playground)\r\nerror[E0271]: type mismatch resolving `for<'id> <for<'id> fn(Id<'id>) -> ExampleS<'id> {broken0::new_helper} as FnOnce<(Id<'id>,)>>::Output == <ExampleMarker as HasLifetime>::AtLifetime<'id>`\r\n  --> src/lib.rs:38:5\r\n   |\r\n38 |     ExistentialLifetime::<ExampleMarker>::new(new_helper)\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found struct `ExampleS`\r\n   |\r\n   = note: expected associated type `<ExampleMarker as HasLifetime>::AtLifetime<'_>`\r\n                       found struct `ExampleS<'_>`\r\n   = help: consider constraining the associated type `<ExampleMarker as HasLifetime>::AtLifetime<'_>` to `ExampleS<'_>` or calling a method that returns `<ExampleMarker as HasLifetime>::AtLifetime<'_>`\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\r\nnote: required by a bound in `ExistentialLifetime::<S>::new`\r\n  --> src/lib.rs:18:46\r\n   |\r\n17 |     pub fn new<F>(f: F) -> ExistentialLifetime<S>\r\n   |            --- required by a bound in this\r\n18 |         where for<'id> F: FnOnce(Id<'id>) -> S::AtLifetime<'id> {\r\n   |                                              ^^^^^^^^^^^^^^^^^^ required by this bound in `ExistentialLifetime::<S>::new`\r\n\r\nerror[E0271]: type mismatch resolving `for<'id> <for<'id> fn(Id<'id>) -> <ExampleMarker as HasLifetime>::AtLifetime<'id> {broken1::new_helper} as FnOnce<(Id<'id>,)>>::Output == <ExampleMarker as HasLifetime>::AtLifetime<'id>`\r\n  --> src/lib.rs:46:5\r\n   |\r\n46 |     ExistentialLifetime::<ExampleMarker>::new(new_helper)\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found struct `ExampleS`\r\n   |\r\n   = note: expected associated type `<ExampleMarker as HasLifetime>::AtLifetime<'_>`\r\n                       found struct `ExampleS<'_>`\r\n   = help: consider constraining the associated type `<ExampleMarker as HasLifetime>::AtLifetime<'_>` to `ExampleS<'_>` or calling a method that returns `<ExampleMarker as HasLifetime>::AtLifetime<'_>`\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\r\nnote: required by a bound in `ExistentialLifetime::<S>::new`\r\n  --> src/lib.rs:18:46\r\n   |\r\n17 |     pub fn new<F>(f: F) -> ExistentialLifetime<S>\r\n   |            --- required by a bound in this\r\n18 |         where for<'id> F: FnOnce(Id<'id>) -> S::AtLifetime<'id> {\r\n   |                                              ^^^^^^^^^^^^^^^^^^ required by this bound in `ExistentialLifetime::<S>::new`\r\n\r\nerror[E0271]: type mismatch resolving `for<'id> <[closure@src/lib.rs:50:47: 50:64] as FnOnce<(Id<'id>,)>>::Output == <ExampleMarker as HasLifetime>::AtLifetime<'id>`\r\n  --> src/lib.rs:50:5\r\n   |\r\n50 |     ExistentialLifetime::<ExampleMarker>::new(|id| ExampleS(id))\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found struct `ExampleS`\r\n   |\r\n   = note: expected associated type `<ExampleMarker as HasLifetime>::AtLifetime<'_>`\r\n                       found struct `ExampleS<'_>`\r\n   = help: consider constraining the associated type `<ExampleMarker as HasLifetime>::AtLifetime<'_>` to `ExampleS<'_>` or calling a method that returns `<ExampleMarker as HasLifetime>::AtLifetime<'_>`\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\r\nnote: required by a bound in `ExistentialLifetime::<S>::new`\r\n  --> src/lib.rs:18:46\r\n   |\r\n17 |     pub fn new<F>(f: F) -> ExistentialLifetime<S>\r\n   |            --- required by a bound in this\r\n18 |         where for<'id> F: FnOnce(Id<'id>) -> S::AtLifetime<'id> {\r\n   |                                              ^^^^^^^^^^^^^^^^^^ required by this bound in `ExistentialLifetime::<S>::new`\r\n\r\nFor more information about this error, try `rustc --explain E0271`.\r\nerror: could not compile `playground` due to 3 previous errors\r\n```\r\n\r\nI think rustc is wrong to reject this code. As you can see, it fails to unify type `<ExampleMarker as HasLifetime>::AtLifetime<'_>` with type `ExampleS<'_>`. But these types _should_ unify!\r\n\r\nVersion of rustc: `1.60.0-nightly 2022-01-25 8cdb3cd94efece1e17cb`.\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"compiler-errors\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93341/timeline", "performed_via_github_app": null, "state_reason": "completed"}