{"url": "https://api.github.com/repos/rust-lang/rust/issues/101917", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101917/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101917/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101917/events", "html_url": "https://github.com/rust-lang/rust/issues/101917", "id": 1376464970, "node_id": "I_kwDOAAsO6M5SCzBK", "number": 101917, "title": "Compiler panic", "user": {"login": "afitzek", "id": 3415366, "node_id": "MDQ6VXNlcjM0MTUzNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3415366?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afitzek", "html_url": "https://github.com/afitzek", "followers_url": "https://api.github.com/users/afitzek/followers", "following_url": "https://api.github.com/users/afitzek/following{/other_user}", "gists_url": "https://api.github.com/users/afitzek/gists{/gist_id}", "starred_url": "https://api.github.com/users/afitzek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afitzek/subscriptions", "organizations_url": "https://api.github.com/users/afitzek/orgs", "repos_url": "https://api.github.com/users/afitzek/repos", "events_url": "https://api.github.com/users/afitzek/events{/privacy}", "received_events_url": "https://api.github.com/users/afitzek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-09-16T20:57:00Z", "updated_at": "2022-09-17T06:59:56Z", "closed_at": "2022-09-17T06:59:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\nI don't really have any idea what is going on here, just reporting the bug as the output suggested.\r\n\r\n### Code\r\n\r\n```Rust\r\nuse std::{future::Future, sync::Arc, pin::Pin};\r\n\r\nuse tokio::sync::mpsc;\r\nuse tokio::sync::broadcast;\r\n\r\npub fn channel<Req, Resp>(limit: usize) -> (Requester<Req, Resp>, RequestHandler<Req, Resp>) {\r\n    let (req_sender, req_receiver) = mpsc::channel::<(Req, Responder<Resp>)>(limit);\r\n    let sender = Requester::new(req_sender);\r\n    let receiver = RequestHandler::new(req_receiver);\r\n    (sender, receiver)\r\n}\r\n\r\npub struct Responder<Resp> {\r\n    sender: mpsc::Sender<Resp>\r\n}\r\n\r\nimpl<Resp> Responder<Resp> {\r\n    fn new(sender: mpsc::Sender<Resp>) -> Self {\r\n        Responder { sender }\r\n    }\r\n\r\n    pub async fn respond(&self, resp: Resp) -> anyhow::Result<()> {\r\n        match self.sender.send(resp).await {\r\n            Ok(_) => Ok(()),\r\n            Err(e) => {\r\n                Err(anyhow::Error::msg(\"Failed to send response\"))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npub struct RequestHandler<Req, Resp> {\r\n    receiver: mpsc::Receiver<(Req, Responder<Resp>)>\r\n}\r\n\r\nimpl<Req, Resp> RequestHandler<Req, Resp> {\r\n    fn new(receiver: mpsc::Receiver<(Req, Responder<Resp>)>) -> Self {\r\n        RequestHandler { receiver }\r\n    }\r\n\r\n    pub async fn recv(&mut self) -> Option<(Req, Responder<Resp>)> {\r\n        self.receiver.recv().await\r\n    }\r\n}\r\n\r\npub struct Response<Resp> {\r\n    receiver: mpsc::Receiver<Resp>\r\n}\r\n\r\nimpl<Resp> Response<Resp> {\r\n    fn new(receiver: mpsc::Receiver<Resp>) -> Self {\r\n        Response { receiver }\r\n    }\r\n\r\n    pub async fn get(&mut self) -> Option<Resp> {\r\n        self.receiver.recv().await\r\n    }\r\n}\r\n\r\npub struct Requester<Req, Resp> {\r\n    sender: mpsc::Sender<(Req, Responder<Resp>)>\r\n}\r\n\r\nimpl<Req, Resp> Requester<Req, Resp> {\r\n    fn new(sender: mpsc::Sender<(Req, Responder<Resp>)>) -> Self {\r\n        Requester { sender }\r\n    }\r\n\r\n    pub async fn send(&self, request: Req, await_response: bool) -> anyhow::Result<Option<Resp>> {\r\n        let (resp_sender, resp_receiver) = mpsc::channel(1);\r\n        let responder = Responder::new(resp_sender);\r\n        match self.sender.send((request, responder)).await {\r\n            Ok(v) => {\r\n                if await_response {\r\n                    let mut resp_receiver = Response::new(resp_receiver);\r\n                    Ok(resp_receiver.get().await)\r\n                } else {\r\n                    Ok(None)\r\n                }\r\n            },\r\n            Err(e) => {\r\n                Err(anyhow::Error::msg(\"Failed to send request to service\"))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\npub struct LookupService {\r\n    tx: Requester<LookupRegisterRequest, LookupRegisterResponse>,\r\n}\r\n\r\nimpl LookupService {\r\n    pub async fn register_hosts(&self, hosts: Vec<String>) -> anyhow::Result<()> {\r\n        let receiver = self\r\n            .tx\r\n            .send(LookupRegisterRequest::RegisterHosts, true)\r\n            .await?;\r\n        match receiver {\r\n            Some(v) => {\r\n                // TODO: something with the response\r\n                println!(\"Received response for host registration ...\");\r\n            }\r\n            None => {\r\n                print!(\"No response\")\r\n            }\r\n        };\r\n        Ok(())\r\n    }\r\n}\r\n\r\nenum LookupRegisterRequest {\r\n    RegisterHosts,\r\n}\r\n\r\nenum LookupRegisterResponse {\r\n    RegisteredHosts,\r\n}\r\n\r\npub fn start_service<Req, Resp, F>(\r\n    limit: usize,\r\n    mut termination_rx: broadcast::Receiver<()>,\r\n    mut f: F,\r\n) -> anyhow::Result<(\r\n    Requester<Req, Resp>,\r\n    impl Future<Output = anyhow::Result<()>>,\r\n)>\r\nwhere\r\n    F: FnMut(Req) -> Pin<Box<dyn Future<Output = Option<Resp>>>>,\r\n    Req: Send + Sync,\r\n    Resp: Send + Sync,\r\n{\r\n    let (register_tx, mut req_handler) = channel::<Req, Resp>(limit);\r\n\r\n    let join = async move {\r\n        loop {\r\n            tokio::select! {\r\n                handle_response = req_handler.recv() => {\r\n                    match handle_response {\r\n                        Some((req, responder)) => {\r\n                            let result = f(req).await;\r\n                            if let Some(v) = result {\r\n                                responder.respond(v).await;\r\n                            }\r\n                        },\r\n                        _ => {\r\n                            println!(\"Some error\")\r\n                        }\r\n                    };\r\n                }\r\n                _ = termination_rx.recv() => {\r\n                    return Ok(());\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    Ok((register_tx, join))\r\n}\r\n\r\nasync fn lookup_handler(req: LookupRegisterRequest) -> Option<LookupRegisterResponse> {\r\n    match req {\r\n        LookupRegisterRequest::RegisterHosts => {\r\n            println!(\"Got host register call\");\r\n        }\r\n        _ => {\r\n            println!(\"Invalid lookup request\");\r\n        }\r\n    };\r\n    Some(LookupRegisterResponse::RegisteredHosts)\r\n}\r\n\r\npub fn start_lookup_service(\r\n    termination_rx: broadcast::Receiver<()>,\r\n) -> anyhow::Result<(Arc<LookupService>, impl Future<Output = anyhow::Result<()>>)> {\r\n    let (request, join) = start_service::<LookupRegisterRequest, LookupRegisterResponse, _>(\r\n        100,\r\n        termination_rx,\r\n        lookup_handler,\r\n    )?;\r\n    Ok((Arc::new(LookupService { tx: request }), join))\r\n}\r\nasync fn signal_handler_ctrl_c(tx: broadcast::Sender<()>) -> std::io::Result<()> {\r\n    tokio::signal::ctrl_c().await?;\r\n    let _ = tx.send(());\r\n    Ok(())\r\n}\r\n\r\nfn signal_handler() -> broadcast::Sender<()> {\r\n    let (terminate_tx, _) = broadcast::channel(1);\r\n    tokio::spawn(signal_handler_ctrl_c(terminate_tx.clone()));\r\n    terminate_tx\r\n}\r\n\r\n#[tokio::main]\r\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\r\n    let terminate_rx = signal_handler();\r\n\r\n    let (lookup_service, lookup_handle) =\r\n        start_lookup_service(terminate_rx.subscribe())?;\r\n\r\n    tokio::try_join!(\r\n        lookup_handle,\r\n        lookup_service.register_hosts(vec![\"test\".to_string()])\r\n    );\r\n    Ok(())\r\n}\r\n\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.61.0 (fe5b13d68 2022-05-18)\r\nbinary: rustc\r\ncommit-hash: fe5b13d681f25ee6474be29d748c65adcd91f69e\r\ncommit-date: 2022-05-18\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.61.0\r\nLLVM version: 14.0.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nwarning: unreachable pattern\r\n   --> src/main.rs:166:9\r\n    |\r\n166 |         _ => {\r\n    |         ^\r\n    |\r\n    = note: `#[warn(unreachable_patterns)]` on by default\r\n\r\nwarning: unused variable: `e`\r\n  --> src/main.rs:25:17\r\n   |\r\n25 |             Err(e) => {\r\n   |                 ^ help: if this is intentional, prefix it with an underscore: `_e`\r\n   |\r\n   = note: `#[warn(unused_variables)]` on by default\r\n\r\nwarning: unused variable: `v`\r\n  --> src/main.rs:73:16\r\n   |\r\n73 |             Ok(v) => {\r\n   |                ^ help: if this is intentional, prefix it with an underscore: `_v`\r\n\r\nwarning: unused variable: `e`\r\n  --> src/main.rs:81:17\r\n   |\r\n81 |             Err(e) => {\r\n   |                 ^ help: if this is intentional, prefix it with an underscore: `_e`\r\n\r\nwarning: unused variable: `hosts`\r\n  --> src/main.rs:94:40\r\n   |\r\n94 |     pub async fn register_hosts(&self, hosts: Vec<String>) -> anyhow::Result<()> {\r\n   |                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_hosts`\r\n\r\nwarning: unused variable: `v`\r\n   --> src/main.rs:100:18\r\n    |\r\n100 |             Some(v) => {\r\n    |                  ^ help: if this is intentional, prefix it with an underscore: `_v`\r\n\r\nwarning: unused `Result` that must be used\r\n   --> src/main.rs:143:33\r\n    |\r\n143 | ...                   responder.respond(v).await;\r\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    |\r\n    = note: `#[warn(unused_must_use)]` on by default\r\n    = note: this `Result` may be an `Err` variant, which should be handled\r\n\r\nwarning: unused `Result` that must be used\r\n   --> src/main.rs:202:5\r\n    |\r\n202 | /     tokio::try_join!(\r\n203 | |         lookup_handle,\r\n204 | |         lookup_service.register_hosts(vec![\"test\".to_string()])\r\n205 | |     );\r\n    | |_____^\r\n    |\r\n    = note: this `Result` may be an `Err` variant, which should be handled\r\n    = note: this warning originates in the macro `$crate::try_join` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror: internal compiler error: /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/compiler/rustc_codegen_ssa/src/mir/block.rs:1167:22: codegen_argument: OperandRef(Ref((%\"type 0x7f3777ae3c80\"*:  %4 = alloca %41, align 1), None, Align { pow2: 0 }) @ TyAndLayout { ty: std::future::from_generator::GenFuture<[static generator@src/main.rs:161:87: 171:2]>, layout: Layout { fields: Arbitrary { offsets: [Size { raw: 0 }], memory_index: [0] }, variants: Single { index: 0 }, abi: Aggregate { sized: true }, largest_niche: Some(Niche { offset: Size { raw: 0 }, scalar: Scalar { value: Int(I8, false), valid_range: 0..=2 } }), align: AbiAndPrefAlign { abi: Align { pow2: 0 }, pref: Align { pow2: 3 } }, size: Size { raw: 1 } } }) invalid for pair argument\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', compiler/rustc_errors/src/lib.rs:1279:9\r\nstack backtrace:\r\n   0:     0x7f378e09e1cd - std::backtrace_rs::backtrace::libunwind::trace::h22893a5306c091b4\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\r\n   1:     0x7f378e09e1cd - std::backtrace_rs::backtrace::trace_unsynchronized::h29c3bc6f9e91819d\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\r\n   2:     0x7f378e09e1cd - std::sys_common::backtrace::_print_fmt::he497d8a0ec903793\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/std/src/sys_common/backtrace.rs:66:5\r\n   3:     0x7f378e09e1cd - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h9c2a9d2774d81873\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/std/src/sys_common/backtrace.rs:45:22\r\n   4:     0x7f378e0f801c - core::fmt::write::hba4337c43d992f49\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/core/src/fmt/mod.rs:1194:17\r\n   5:     0x7f378e08f7c1 - std::io::Write::write_fmt::heb73de6e02cfabed\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/std/src/io/mod.rs:1655:15\r\n   6:     0x7f378e0a12b5 - std::sys_common::backtrace::_print::h63c8b24acdd8e8ce\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/std/src/sys_common/backtrace.rs:48:5\r\n   7:     0x7f378e0a12b5 - std::sys_common::backtrace::print::h426700d6240cdcc2\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/std/src/sys_common/backtrace.rs:35:9\r\n   8:     0x7f378e0a12b5 - std::panicking::default_hook::{{closure}}::hc9a76eed0b18f82b\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/std/src/panicking.rs:295:22\r\n   9:     0x7f378e0a0f69 - std::panicking::default_hook::h2e88d02087fae196\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/std/src/panicking.rs:314:9\r\n  10:     0x7f378e8ad1d1 - rustc_driver[413d55b6344850e3]::DEFAULT_HOOK::{closure#0}::{closure#0}\r\n  11:     0x7f377c3d64a3 - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::h6f7e2ef87b1794c3\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/alloc/src/boxed.rs:1875:9\r\n  12:     0x7f377c3decac - proc_macro::bridge::client::<impl proc_macro::bridge::Bridge>::enter::{{closure}}::{{closure}}::hda9fd97957b4a278\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/proc_macro/src/bridge/client.rs:319:21\r\n  13:     0x7f377c3e3fb0 - std::panicking::update_hook::{{closure}}::hb276c126826df1d8\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/std/src/panicking.rs:258:41\r\n  14:     0x7f378e0a1a00 - std::panicking::rust_panic_with_hook::habfdcc2e90f9fd4c\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/std/src/panicking.rs:702:17\r\n  15:     0x7f378f97d141 - std[3b302b3c9093c22]::panicking::begin_panic::<rustc_errors[a7dbbf867eaca825]::ExplicitBug>::{closure#0}\r\n  16:     0x7f378f97ce96 - std[3b302b3c9093c22]::sys_common::backtrace::__rust_end_short_backtrace::<std[3b302b3c9093c22]::panicking::begin_panic<rustc_errors[a7dbbf867eaca825]::ExplicitBug>::{closure#0}, !>\r\n  17:     0x7f378f984406 - std[3b302b3c9093c22]::panicking::begin_panic::<rustc_errors[a7dbbf867eaca825]::ExplicitBug>\r\n  18:     0x7f378f990ec6 - std[3b302b3c9093c22]::panic::panic_any::<rustc_errors[a7dbbf867eaca825]::ExplicitBug>\r\n  19:     0x7f378f992673 - <rustc_errors[a7dbbf867eaca825]::HandlerInner>::bug\r\n  20:     0x7f378f9920d0 - <rustc_errors[a7dbbf867eaca825]::Handler>::bug\r\n  21:     0x7f378f8d1636 - rustc_middle[9ca07169fec39ed9]::ty::context::tls::with_opt::<rustc_middle[9ca07169fec39ed9]::util::bug::opt_span_bug_fmt<rustc_span[7238ca7210ca999e]::span_encoding::Span>::{closure#0}, ()>\r\n  22:     0x7f378f8d4746 - rustc_middle[9ca07169fec39ed9]::util::bug::opt_span_bug_fmt::<rustc_span[7238ca7210ca999e]::span_encoding::Span>\r\n  23:     0x7f378f8d46c3 - rustc_middle[9ca07169fec39ed9]::util::bug::bug_fmt\r\n  24:     0x7f378fb43e6f - rustc_codegen_ssa[1019aa072f95d074]::mir::codegen_mir::<rustc_codegen_llvm[8781444834f164ae]::builder::Builder>\r\n  25:     0x7f378fb0a6d4 - rustc_codegen_llvm[8781444834f164ae]::base::compile_codegen_unit::module_codegen\r\n  26:     0x7f37908110f6 - <rustc_query_system[ac245aac4c1950a0]::dep_graph::graph::DepGraph<rustc_middle[9ca07169fec39ed9]::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle[9ca07169fec39ed9]::ty::context::TyCtxt, rustc_span[7238ca7210ca999e]::symbol::Symbol, rustc_codegen_ssa[1019aa072f95d074]::ModuleCodegen<rustc_codegen_llvm[8781444834f164ae]::ModuleLlvm>>\r\n  27:     0x7f37908075b9 - rustc_codegen_llvm[8781444834f164ae]::base::compile_codegen_unit\r\n  28:     0x7f37907e1096 - rustc_codegen_ssa[1019aa072f95d074]::base::codegen_crate::<rustc_codegen_llvm[8781444834f164ae]::LlvmCodegenBackend>\r\n  29:     0x7f3790825db3 - <rustc_codegen_llvm[8781444834f164ae]::LlvmCodegenBackend as rustc_codegen_ssa[1019aa072f95d074]::traits::backend::CodegenBackend>::codegen_crate\r\n  30:     0x7f37907b68e7 - <rustc_session[8df92abe178df33c]::session::Session>::time::<alloc[59b4cdf2bf51ef42]::boxed::Box<dyn core[a3420257622cd381]::any::Any>, rustc_interface[550884b2b179878f]::passes::start_codegen::{closure#0}>\r\n  31:     0x7f37907ae9cb - <rustc_interface[550884b2b179878f]::passes::QueryContext>::enter::<<rustc_interface[550884b2b179878f]::queries::Queries>::ongoing_codegen::{closure#0}::{closure#0}, core[a3420257622cd381]::result::Result<alloc[59b4cdf2bf51ef42]::boxed::Box<dyn core[a3420257622cd381]::any::Any>, rustc_errors[a7dbbf867eaca825]::ErrorGuaranteed>>\r\n  32:     0x7f37907db48f - <rustc_interface[550884b2b179878f]::queries::Queries>::ongoing_codegen\r\n  33:     0x7f379078fa8b - <rustc_interface[550884b2b179878f]::interface::Compiler>::enter::<rustc_driver[413d55b6344850e3]::run_compiler::{closure#1}::{closure#2}, core[a3420257622cd381]::result::Result<core[a3420257622cd381]::option::Option<rustc_interface[550884b2b179878f]::queries::Linker>, rustc_errors[a7dbbf867eaca825]::ErrorGuaranteed>>\r\n  34:     0x7f379077503f - rustc_span[7238ca7210ca999e]::with_source_map::<core[a3420257622cd381]::result::Result<(), rustc_errors[a7dbbf867eaca825]::ErrorGuaranteed>, rustc_interface[550884b2b179878f]::interface::create_compiler_and_run<core[a3420257622cd381]::result::Result<(), rustc_errors[a7dbbf867eaca825]::ErrorGuaranteed>, rustc_driver[413d55b6344850e3]::run_compiler::{closure#1}>::{closure#1}>\r\n  35:     0x7f37907910a4 - rustc_interface[550884b2b179878f]::interface::create_compiler_and_run::<core[a3420257622cd381]::result::Result<(), rustc_errors[a7dbbf867eaca825]::ErrorGuaranteed>, rustc_driver[413d55b6344850e3]::run_compiler::{closure#1}>\r\n  36:     0x7f37907737c2 - <scoped_tls[7ed3ce20ede545d8]::ScopedKey<rustc_span[7238ca7210ca999e]::SessionGlobals>>::set::<rustc_interface[550884b2b179878f]::interface::run_compiler<core[a3420257622cd381]::result::Result<(), rustc_errors[a7dbbf867eaca825]::ErrorGuaranteed>, rustc_driver[413d55b6344850e3]::run_compiler::{closure#1}>::{closure#0}, core[a3420257622cd381]::result::Result<(), rustc_errors[a7dbbf867eaca825]::ErrorGuaranteed>>\r\n  37:     0x7f379078938f - std[3b302b3c9093c22]::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface[550884b2b179878f]::util::run_in_thread_pool_with_globals<rustc_interface[550884b2b179878f]::interface::run_compiler<core[a3420257622cd381]::result::Result<(), rustc_errors[a7dbbf867eaca825]::ErrorGuaranteed>, rustc_driver[413d55b6344850e3]::run_compiler::{closure#1}>::{closure#0}, core[a3420257622cd381]::result::Result<(), rustc_errors[a7dbbf867eaca825]::ErrorGuaranteed>>::{closure#0}, core[a3420257622cd381]::result::Result<(), rustc_errors[a7dbbf867eaca825]::ErrorGuaranteed>>\r\n  38:     0x7f3790774af9 - <<std[3b302b3c9093c22]::thread::Builder>::spawn_unchecked_<rustc_interface[550884b2b179878f]::util::run_in_thread_pool_with_globals<rustc_interface[550884b2b179878f]::interface::run_compiler<core[a3420257622cd381]::result::Result<(), rustc_errors[a7dbbf867eaca825]::ErrorGuaranteed>, rustc_driver[413d55b6344850e3]::run_compiler::{closure#1}>::{closure#0}, core[a3420257622cd381]::result::Result<(), rustc_errors[a7dbbf867eaca825]::ErrorGuaranteed>>::{closure#0}, core[a3420257622cd381]::result::Result<(), rustc_errors[a7dbbf867eaca825]::ErrorGuaranteed>>::{closure#1} as core[a3420257622cd381]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\r\n  39:     0x7f378e0abbf3 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::ha99802c2c52ada61\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/alloc/src/boxed.rs:1861:9\r\n  40:     0x7f378e0abbf3 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::ha39aea1c57e28a15\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/alloc/src/boxed.rs:1861:9\r\n  41:     0x7f378e0abbf3 - std::sys::unix::thread::Thread::new::thread_start::h9f8e3d72b1f7662f\r\n                               at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/std/src/sys/unix/thread.rs:108:17\r\n  42:     0x7f378de9f78d - <unknown>\r\n  43:     0x7f378df208e4 - clone\r\n  44:                0x0 - <unknown>\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.61.0 (fe5b13d68 2022-05-18) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: --crate-type bin -C embed-bitcode=no -C debuginfo=2 -C incremental\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nwarning: `rust-compile-bug-1` (bin \"rust-compile-bug-1\") generated 8 warnings\r\nerror: could not compile `rust-compile-bug-1`; 8 warnings emitted\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\n   Compiling rust-compile-bug-1 v0.1.0 (/home/andy/devel/github.com/afitzek/rust-compile-bug-1)\r\nwarning: unreachable pattern\r\n   --> src/main.rs:166:9\r\n    |\r\n166 |         _ => {\r\n    |         ^\r\n    |\r\n    = note: `#[warn(unreachable_patterns)]` on by default\r\n\r\nwarning: unused variable: `e`\r\n  --> src/main.rs:25:17\r\n   |\r\n25 |             Err(e) => {\r\n   |                 ^ help: if this is intentional, prefix it with an underscore: `_e`\r\n   |\r\n   = note: `#[warn(unused_variables)]` on by default\r\n\r\nwarning: unused variable: `v`\r\n  --> src/main.rs:73:16\r\n   |\r\n73 |             Ok(v) => {\r\n   |                ^ help: if this is intentional, prefix it with an underscore: `_v`\r\n\r\nwarning: unused variable: `e`\r\n  --> src/main.rs:81:17\r\n   |\r\n81 |             Err(e) => {\r\n   |                 ^ help: if this is intentional, prefix it with an underscore: `_e`\r\n\r\nwarning: unused variable: `hosts`\r\n  --> src/main.rs:94:40\r\n   |\r\n94 |     pub async fn register_hosts(&self, hosts: Vec<String>) -> anyhow::Result<()> {\r\n   |                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_hosts`\r\n\r\nwarning: unused variable: `v`\r\n   --> src/main.rs:100:18\r\n    |\r\n100 |             Some(v) => {\r\n    |                  ^ help: if this is intentional, prefix it with an underscore: `_v`\r\n\r\nwarning: unused `Result` that must be used\r\n   --> src/main.rs:143:33\r\n    |\r\n143 | ...                   responder.respond(v).await;\r\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    |\r\n    = note: `#[warn(unused_must_use)]` on by default\r\n    = note: this `Result` may be an `Err` variant, which should be handled\r\n\r\nwarning: unused `Result` that must be used\r\n   --> src/main.rs:202:5\r\n    |\r\n202 | /     tokio::try_join!(\r\n203 | |         lookup_handle,\r\n204 | |         lookup_service.register_hosts(vec![\"test\".to_string()])\r\n205 | |     );\r\n    | |_____^\r\n    |\r\n    = note: this `Result` may be an `Err` variant, which should be handled\r\n    = note: this warning originates in the macro `$crate::try_join` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror: internal compiler error: /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/compiler/rustc_codegen_ssa/src/mir/block.rs:1167:22: codegen_argument: OperandRef(Ref((%\"type 0x7f59d4c5ac80\"*:  %4 = alloca %41, align 1), None, Align { pow2: 0 }) @ TyAndLayout { ty: std::future::from_generator::GenFuture<[static generator@src/main.rs:161:87: 171:2]>, layout: Layout { fields: Arbitrary { offsets: [Size { raw: 0 }], memory_index: [0] }, variants: Single { index: 0 }, abi: Aggregate { sized: true }, largest_niche: Some(Niche { offset: Size { raw: 0 }, scalar: Scalar { value: Int(I8, false), valid_range: 0..=2 } }), align: AbiAndPrefAlign { abi: Align { pow2: 0 }, pref: Align { pow2: 3 } }, size: Size { raw: 1 } } }) invalid for pair argument\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', compiler/rustc_errors/src/lib.rs:1279:9\r\nstack backtrace:\r\n   0: std::panicking::begin_panic::<rustc_errors::ExplicitBug>\r\n   1: std::panic::panic_any::<rustc_errors::ExplicitBug>\r\n   2: <rustc_errors::HandlerInner>::bug\r\n   3: <rustc_errors::Handler>::bug\r\n   4: rustc_middle::ty::context::tls::with_opt::<rustc_middle::util::bug::opt_span_bug_fmt<rustc_span::span_encoding::Span>::{closure#0}, ()>\r\n   5: rustc_middle::util::bug::opt_span_bug_fmt::<rustc_span::span_encoding::Span>\r\n   6: rustc_middle::util::bug::bug_fmt\r\n   7: rustc_codegen_ssa::mir::codegen_mir::<rustc_codegen_llvm::builder::Builder>\r\n   8: rustc_codegen_llvm::base::compile_codegen_unit::module_codegen\r\n   9: <rustc_query_system::dep_graph::graph::DepGraph<rustc_middle::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle::ty::context::TyCtxt, rustc_span::symbol::Symbol, rustc_codegen_ssa::ModuleCodegen<rustc_codegen_llvm::ModuleLlvm>>\r\n  10: rustc_codegen_llvm::base::compile_codegen_unit\r\n  11: rustc_codegen_ssa::base::codegen_crate::<rustc_codegen_llvm::LlvmCodegenBackend>\r\n  12: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate\r\n  13: <rustc_session::session::Session>::time::<alloc::boxed::Box<dyn core::any::Any>, rustc_interface::passes::start_codegen::{closure#0}>\r\n  14: <rustc_interface::passes::QueryContext>::enter::<<rustc_interface::queries::Queries>::ongoing_codegen::{closure#0}::{closure#0}, core::result::Result<alloc::boxed::Box<dyn core::any::Any>, rustc_errors::ErrorGuaranteed>>\r\n  15: <rustc_interface::queries::Queries>::ongoing_codegen\r\n  16: <rustc_interface::interface::Compiler>::enter::<rustc_driver::run_compiler::{closure#1}::{closure#2}, core::result::Result<core::option::Option<rustc_interface::queries::Linker>, rustc_errors::ErrorGuaranteed>>\r\n  17: rustc_span::with_source_map::<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_interface::interface::create_compiler_and_run<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#1}>\r\n  18: rustc_interface::interface::create_compiler_and_run::<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>\r\n  19: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.61.0 (fe5b13d68 2022-05-18) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: --crate-type bin -C embed-bitcode=no -C debuginfo=2 -C incremental\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nwarning: `rust-compile-bug-1` (bin \"rust-compile-bug-1\") generated 8 warnings\r\nerror: could not compile `rust-compile-bug-1`; 8 warnings emitted\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "afitzek", "id": 3415366, "node_id": "MDQ6VXNlcjM0MTUzNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3415366?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afitzek", "html_url": "https://github.com/afitzek", "followers_url": "https://api.github.com/users/afitzek/followers", "following_url": "https://api.github.com/users/afitzek/following{/other_user}", "gists_url": "https://api.github.com/users/afitzek/gists{/gist_id}", "starred_url": "https://api.github.com/users/afitzek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afitzek/subscriptions", "organizations_url": "https://api.github.com/users/afitzek/orgs", "repos_url": "https://api.github.com/users/afitzek/repos", "events_url": "https://api.github.com/users/afitzek/events{/privacy}", "received_events_url": "https://api.github.com/users/afitzek/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101917/timeline", "performed_via_github_app": null, "state_reason": "completed"}