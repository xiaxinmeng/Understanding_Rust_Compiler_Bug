{"url": "https://api.github.com/repos/rust-lang/rust/issues/93279", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93279/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93279/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93279/events", "html_url": "https://github.com/rust-lang/rust/issues/93279", "id": 1113171774, "node_id": "I_kwDOAAsO6M5CWac-", "number": 93279, "title": "Function calls in logic expressions sometimes cause optimization misses", "user": {"login": "BlaCoiso", "id": 13855359, "node_id": "MDQ6VXNlcjEzODU1MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/13855359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BlaCoiso", "html_url": "https://github.com/BlaCoiso", "followers_url": "https://api.github.com/users/BlaCoiso/followers", "following_url": "https://api.github.com/users/BlaCoiso/following{/other_user}", "gists_url": "https://api.github.com/users/BlaCoiso/gists{/gist_id}", "starred_url": "https://api.github.com/users/BlaCoiso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BlaCoiso/subscriptions", "organizations_url": "https://api.github.com/users/BlaCoiso/orgs", "repos_url": "https://api.github.com/users/BlaCoiso/repos", "events_url": "https://api.github.com/users/BlaCoiso/events{/privacy}", "received_events_url": "https://api.github.com/users/BlaCoiso/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-01-24T21:42:41Z", "updated_at": "2023-04-05T17:34:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Calling functions, including `const` ones, on a logic expression (eg `a || b`) sometimes cause certain optimizations to be missed\r\n\r\nI tried this code:\r\n```rs\r\n#[inline]\r\npub const fn a1(b: u8) -> bool {\r\n    !b.is_ascii()\r\n}\r\n\r\n#[inline]\r\npub const fn a2(b: u8) -> bool {\r\n    b.is_ascii_control()\r\n}\r\n\r\npub const fn check1(b: u8) -> bool {\r\n    let a1 = a1(b);\r\n    let a2 = a2(b);\r\n    a1 || a2\r\n}\r\n\r\n// this should generate the exact same code as check1 but it doesn't\r\npub const fn check2(b: u8) -> bool {\r\n    a1(b) || a2(b)\r\n}\r\n```\r\n\r\nExpected result: both functions (`check1` and `check2`) generate the same assembly code\r\n\r\nActual result: \r\n```x86asm\r\nexample::check1:\r\n        add     dil, -32\r\n        cmp     dil, 95\r\n        setae   al\r\n        ret\r\n\r\nexample::check2:\r\n        test    dil, dil\r\n        js      .LBB1_1\r\n        cmp     dil, 32\r\n        setb    cl\r\n        cmp     dil, 127\r\n        sete    al\r\n        or      al, cl\r\n        ret\r\n.LBB1_1:\r\n        mov     al, 1\r\n        ret\r\n```\r\n\r\nGodbolt link: https://godbolt.org/z/vfPe13G8P\r\n\r\nAdditionally, changing the comparison order affects optimization:\r\n```rs\r\n// this optimizes correctly and generates same code as check1 despite being equivalent\r\n// const fns have no side effects and logical or is commutative\r\npub const fn check3(b: u8) -> bool {\r\n    a2(b) || a1(b)\r\n}\r\n```\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.60.0-nightly (84322efad 2022-01-23)\r\nbinary: rustc\r\ncommit-hash: 84322efad553c7a79c80189f2d1b9197c1aa005f\r\ncommit-date: 2022-01-23\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.60.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93279/timeline", "performed_via_github_app": null, "state_reason": null}