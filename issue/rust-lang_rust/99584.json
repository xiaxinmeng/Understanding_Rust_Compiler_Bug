{"url": "https://api.github.com/repos/rust-lang/rust/issues/99584", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99584/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99584/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99584/events", "html_url": "https://github.com/rust-lang/rust/issues/99584", "id": 1314061133, "node_id": "I_kwDOAAsO6M5OUvtN", "number": 99584, "title": "Compiler suggestions give invalid syntax when trying to constraint associated type with a trait that has the same name as a derive macro", "user": {"login": "matheus-consoli", "id": 27595790, "node_id": "MDQ6VXNlcjI3NTk1Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/27595790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matheus-consoli", "html_url": "https://github.com/matheus-consoli", "followers_url": "https://api.github.com/users/matheus-consoli/followers", "following_url": "https://api.github.com/users/matheus-consoli/following{/other_user}", "gists_url": "https://api.github.com/users/matheus-consoli/gists{/gist_id}", "starred_url": "https://api.github.com/users/matheus-consoli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matheus-consoli/subscriptions", "organizations_url": "https://api.github.com/users/matheus-consoli/orgs", "repos_url": "https://api.github.com/users/matheus-consoli/repos", "events_url": "https://api.github.com/users/matheus-consoli/events{/privacy}", "received_events_url": "https://api.github.com/users/matheus-consoli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-07-22T02:33:10Z", "updated_at": "2023-03-15T03:52:30Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Sorry if this is duplicated, I think it's well known that problems with derive macros and their correspondent traits are quite a pain to handle, but I couldn't find this reported yet.\r\n\r\nGiven the following code: [play](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=2318f3f870cbcd28950dc28e2d0bfe6c)\r\n\r\n```rust\r\nstruct Foo;\r\nstruct Bar;\r\n\r\nimpl TryInto<Foo> for Bar {\r\n    type Error = ();\r\n    fn try_into(self) -> Result<Foo, Self::Error> {\r\n        Ok(Foo)\r\n    }\r\n}\r\n\r\nfn baz(foo: impl TryInto<Foo>) {\r\n    foo.try_into().unwrap();\r\n}\r\n```\r\n\r\nThe current output correctly tells me that I need to constrain the `TryInto::Error` with `Debug`:\r\n\r\n```rust\r\nerror[E0277]: `<impl TryInto<Foo> as TryInto<Foo>>::Error` doesn't implement `Debug`\r\n    --> src/main.rs:14:20\r\n     |\r\n14   |     foo.try_into().unwrap();\r\n     |                    ^^^^^^ `<impl TryInto<Foo> as TryInto<Foo>>::Error` cannot be formatted using `{:?}` because it doesn't implement `Debug`\r\n     |\r\n     = help: the trait `Debug` is not implemented for `<impl TryInto<Foo> as TryInto<Foo>>::Error`\r\nnote: required by a bound in `Result::<T, E>::unwrap`\r\n    --> /.../.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:1074:12\r\n     |\r\n1074 |         E: fmt::Debug,\r\n     |            ^^^^^^^^^^ required by this bound in `Result::<T, E>::unwrap`\r\nhelp: introduce a type parameter with a trait bound instead of using `impl Trait`\r\n     |\r\n11   | fn baz<T: TryInto<Foo>>(foo: T) where <T as TryInto<Foo>>::Error: Debug {\r\n     |       +++++++++++++++++      ~  +++++++++++++++++++++++++++++++++++++++\r\n\r\n```\r\n\r\nBut if I just copy and paste the suggestion, without having the `Debug` trait in the scope, the compiler will correctly fail to compile, and even instruct me to bring the correct trait into scope, but also suggests an invalid syntax in the `where` clause:\r\n\r\n```rust\r\nerror[E0404]: expected trait, found derive macro `Debug`\r\n  --> src/main.rs:12:71\r\n   |\r\n12 |     fn baz<T: TryInto<Foo>>(foo: T) where <T as TryInto<Foo>>::Error: Debug {\r\n   |                                                                       ^^^^^ not a trait\r\n   |\r\nhelp: constrain the associated type to `Debug`\r\n   |\r\n12 |     fn baz<T: TryInto<Foo>>(foo: T) where T: TryInto<Foo><Error = Debug> {\r\n   |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nhelp: consider importing one of these items instead\r\n   |\r\n1  | use core::fmt::Debug;\r\n   |\r\n1  | use std::fmt::Debug;\r\n```\r\n\r\nIdeally, the compiler would instruct me to import the correct trait in the first error, giving no chance to output `TryInto<Foo><Error = Debug>`", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99584/timeline", "performed_via_github_app": null, "state_reason": null}