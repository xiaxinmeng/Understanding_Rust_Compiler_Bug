{"url": "https://api.github.com/repos/rust-lang/rust/issues/83341", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83341/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83341/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83341/events", "html_url": "https://github.com/rust-lang/rust/issues/83341", "id": 837034942, "node_id": "MDU6SXNzdWU4MzcwMzQ5NDI=", "number": 83341, "title": "Compile slow down against trait bound of nested structs ", "user": {"login": "KeenS", "id": 4434568, "node_id": "MDQ6VXNlcjQ0MzQ1Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/4434568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KeenS", "html_url": "https://github.com/KeenS", "followers_url": "https://api.github.com/users/KeenS/followers", "following_url": "https://api.github.com/users/KeenS/following{/other_user}", "gists_url": "https://api.github.com/users/KeenS/gists{/gist_id}", "starred_url": "https://api.github.com/users/KeenS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KeenS/subscriptions", "organizations_url": "https://api.github.com/users/KeenS/orgs", "repos_url": "https://api.github.com/users/KeenS/repos", "events_url": "https://api.github.com/users/KeenS/events{/privacy}", "received_events_url": "https://api.github.com/users/KeenS/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-03-21T10:09:06Z", "updated_at": "2021-03-24T15:28:56Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a regression report! \ud83d\udc1b A regression is something that changed between versions of Rust but was not supposed to.\r\n\r\nPlease provide a short summary of the regression, along with any information you feel is relevant to replicate it.\r\n-->\r\n\r\nI'm not sure if this should be reported as a regression. I found compiling my code with Rust 1.41.0 took triple time compared to the previous version. It occurred 1 year ago and [filed at my repo](https://github.com/KeenS/webml/issues/78), so this is a bit old issue.\r\n\r\nThe code contains nested structs with trait bounds. It took some time to compile in the previous version too. I guess compiling this code take exponential time even in older versions of rust compiler because when I add a pass to the chain, compile time increases under certain multiplier. The issue is the multiplier increased in Rust 1.41.0.\r\n\r\nHere is some brief measures:\r\n\r\n```console\r\n$ time rustc +1.36.0 slow_compilation.rs\r\nrustc +1.36.0 slow_compilation.rs  16.25s user 0.68s system 99% cpu 16.939 total\r\n$ time rustc +1.40.0 slow_compilation.rs\r\nrustc +1.40.0 slow_compilation.rs  21.16s user 0.58s system 99% cpu 21.743 total\r\n$ time rustc +1.41.0 slow_compilation.rs\r\nrustc +1.41.0 slow_compilation.rs  59.95s user 0.69s system 99% cpu 1:00.66 total\r\n$ time rustc +1.50.0 slow_compilation.rs\r\nrustc +1.50.0 slow_compilation.rs  48.87s user 0.75s system 99% cpu 49.634 total\r\n$ time rustc +nightly slow_compilation.rs\r\nrustc +nightly slow_compilation.rs  50.08s user 0.60s system 100% cpu 50.671 total\r\n```\r\n\r\nCompiling slowed down in 1.41.0. Though there are some improvements in the latest versions, it is still slow.\r\n\r\nHere is flamegraph of rust compiler against compiling the code:\r\n\r\n![flamegraph](https://user-images.githubusercontent.com/4434568/106348141-59f3c180-6307-11eb-818e-75d0e0723a70.png)\r\n\r\nI `git bisect`ed and found the problem is introduced in this PR: https://github.com/rust-lang/rust/pull/66408\r\n\r\n### Code\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse std::fmt::Display;\r\nuse std::marker::PhantomData;\r\n\r\npub trait Pass<T, E> {\r\n    type Target;\r\n    fn trans(&mut self, t: T) -> Result<Self::Target, E>;\r\n}\r\n\r\npub struct PrintablePass<T>(pub T, pub &'static str);\r\n\r\nimpl<T, In, Out, Err> Pass<In, Err> for PrintablePass<T>\r\nwhere\r\n    T: Pass<In, Err, Target = Out>,\r\n    Out: Display,\r\n{\r\n    type Target = Out;\r\n\r\n    fn trans(&mut self, i: In) -> Result<Self::Target, Err> {\r\n        let o = self.0.trans(i)?;\r\n        Ok(o)\r\n    }\r\n}\r\n\r\npub struct Chain<F, FO, S, SO> {\r\n    pub fst: F,\r\n    pub snd: S,\r\n    phantom: PhantomData<(FO, SO)>,\r\n}\r\n\r\nimpl<F, FO, S, SO> Chain<F, FO, S, SO> {\r\n    pub fn new(fst: F, snd: S) -> Self {\r\n        Chain {\r\n            fst,\r\n            snd,\r\n            phantom: PhantomData,\r\n        }\r\n    }\r\n}\r\n\r\nimpl<F, E, S, T, In, Out> Pass<In, E> for Chain<F, T, S, Out>\r\nwhere\r\n    F: Pass<In, E, Target = T>,\r\n    S: Pass<T, E, Target = Out>,\r\n{\r\n    type Target = Out;\r\n\r\n    fn trans(&mut self, i: In) -> Result<Self::Target, E> {\r\n        let &mut Chain {\r\n            ref mut fst,\r\n            ref mut snd,\r\n            ..\r\n        } = self;\r\n        let t = fst.trans(i)?;\r\n        let o = snd.trans(t)?;\r\n        Ok(o)\r\n    }\r\n}\r\n\r\n#[macro_export]\r\nmacro_rules! compile_pass {\r\n    ($($labels: ident : $passes: expr,)*) => {\r\n        compile_pass!($($labels: $passes),*)\r\n    };\r\n    ($label: ident : $pass: expr, $($labels: ident : $passes: expr),*) => {\r\n        Chain::new(PrintablePass($pass, stringify!($label)), compile_pass!($($labels: $passes),*))\r\n    };\r\n    ($label: ident : $pass: expr) => {\r\n        PrintablePass($pass, stringify!($label))\r\n    };\r\n}\r\n\r\nmacro_rules! def_pass {\r\n    ($name: ident) => {\r\n        struct $name;\r\n        impl<'a> Pass<&'a str, ()> for $name {\r\n            type Target = &'a str;\r\n            fn trans(&mut self, i: &'a str) -> Result<Self::Target, ()> {\r\n                Ok(i)\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\ndef_pass!(Parse);\r\ndef_pass!(Desugar);\r\ndef_pass!(Rename);\r\ndef_pass!(VarToConstructor);\r\ndef_pass!(Typer);\r\ndef_pass!(CaseSimplify);\r\ndef_pass!(AST2HIR);\r\ndef_pass!(ConstructorToEnum);\r\ndef_pass!(Simplify);\r\ndef_pass!(FlatExpr);\r\ndef_pass!(FlatLet);\r\ndef_pass!(UnnestFunc);\r\ndef_pass!(ForceClosure);\r\ndef_pass!(HIR2MIR);\r\ndef_pass!(UnAlias);\r\ndef_pass!(BlockArrange);\r\ndef_pass!(MIR2LIR);\r\ndef_pass!(LIR2WASM);\r\n\r\npub fn compile_str<'a>(input: &'a str) -> Result<&'a str, ()> {\r\n    let mut passes = compile_pass![\r\n        parse: Parse,\r\n        desugar: Desugar,\r\n        rename: Rename,\r\n        var_to_constructor: VarToConstructor,\r\n        typing: Typer,\r\n        case_simplify: CaseSimplify,\r\n        ast_to_hir: AST2HIR,\r\n        constructor_to_enum: ConstructorToEnum,\r\n        simplify: Simplify,\r\n        flattening_expression: FlatExpr,\r\n        flattening_let: FlatLet,\r\n        unnest_functions: UnnestFunc,\r\n        closure_conversion: ForceClosure,\r\n        hir_to_mir: HIR2MIR,\r\n        unalias: UnAlias,\r\n        block_arrange: BlockArrange,\r\n        mir_to_lir: MIR2LIR,\r\n        backend: LIR2WASM,\r\n    ];\r\n\r\n    passes.trans(input)\r\n}\r\n\r\nfn main() {}\r\n\r\n```\r\n\r\nI expected to see this happen: compiles in < 30s\r\n\r\nInstead, this happened: compiles in > 60s\r\n\r\n### Version it worked on\r\n\r\n<!--\r\nProvide the most recent version this worked on, for example:\r\n\r\nIt most recently worked on: Rust 1.47\r\n-->\r\n\r\nIt most recently worked on: 1.40.0\r\n\r\n### Version with regression\r\n\r\n<!--\r\nProvide the version you are using that has the regression.\r\n-->\r\n\r\n`rustc --version --verbose`: \r\n```\r\nrustc +1.41.0 --version --verbose\r\nrustc 1.41.0 (5e1a79984 2020-01-27)\r\nbinary: rustc\r\ncommit-hash: 5e1a799842ba6ed4a57e91f7ab9435947482f7d8\r\ncommit-date: 2020-01-27\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.41.0\r\nLLVM version: 9.0\r\n```\r\n\r\n<!--\r\nDid the compiler crash? If so, please provide a backtrace.\r\n-->\r\n\r\n### Backtrace\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n<!--\r\nIf you know when this regression occurred, please add a line like below, replacing `{channel}` with one of stable, beta, or nightly.\r\n\r\n@rustbot modify labels: +regression-from-stable-to-{channel} -regression-untriaged\r\n-->\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83341/timeline", "performed_via_github_app": null, "state_reason": null}