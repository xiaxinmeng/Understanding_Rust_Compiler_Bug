{"url": "https://api.github.com/repos/rust-lang/rust/issues/73450", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73450/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73450/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73450/events", "html_url": "https://github.com/rust-lang/rust/issues/73450", "id": 640648057, "node_id": "MDU6SXNzdWU2NDA2NDgwNTc=", "number": 73450, "title": "Issues/miscompilation around ARM T32 frame pointer with new asm syntax", "user": {"login": "cbiffle", "id": 45247, "node_id": "MDQ6VXNlcjQ1MjQ3", "avatar_url": "https://avatars.githubusercontent.com/u/45247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbiffle", "html_url": "https://github.com/cbiffle", "followers_url": "https://api.github.com/users/cbiffle/followers", "following_url": "https://api.github.com/users/cbiffle/following{/other_user}", "gists_url": "https://api.github.com/users/cbiffle/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbiffle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbiffle/subscriptions", "organizations_url": "https://api.github.com/users/cbiffle/orgs", "repos_url": "https://api.github.com/users/cbiffle/repos", "events_url": "https://api.github.com/users/cbiffle/events{/privacy}", "received_events_url": "https://api.github.com/users/cbiffle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 55301954, "node_id": "MDU6TGFiZWw1NTMwMTk1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-Arm", "name": "O-Arm", "color": "6e6ec0", "default": false, "description": "Target: 32-bit Arm processors (armv6, armv7, thumb...), including 64-bit Arm in AArch32 state"}, {"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2046313052, "node_id": "MDU6TGFiZWwyMDQ2MzEzMDUy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-asm", "name": "F-asm", "color": "f9c0cc", "default": false, "description": "`#![feature(asm)]` (not `llvm_asm`)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-06-17T18:19:03Z", "updated_at": "2020-06-27T18:24:32Z", "closed_at": "2020-06-26T14:06:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Summary\r\n\r\nFirst: the new `asm!` syntax reserves `r11` on ARM as a frame pointer. This is incorrect on Thumb targets, where it should be `r7`. (`llvm_asm!` gets this right.)\r\n\r\nSecond: if you attempt to use `r7`, things miscompile. (This is true of `llvm_asm!` as well, and is the actual issue that brought me here.)\r\n\r\n# Code\r\n\r\nI'm having a hard time writing a minimal reproduction, because you need to create a function with sufficient complexity to trigger reliance on the frame pointer. Here's what I've got.\r\n\r\nImagine that we have an OS syscall, invoked on ARM by the `svc` instruction, that needs to receive one parameter in `r7`. (This is simplified from our actual ABI, but we do use `r7` for \\[reasons].)\r\n\r\n```rust\r\nasm!(\r\n    \"svc #0\",\r\n    in(\"r7\") dest.as_mut_ptr(),\r\n    options(nostack, readonly, preserves_flags)\r\n);\r\n```\r\nWe most often see this when a function (syscall stub) containing a block like that gets inlined into another function, but we've also encountered it within a single small function.\r\n\r\nIn the disassembly, we see stuff like this:\r\n\r\n```\r\n   2c492:       f1a7 003d       sub.w   r0, r7, #61      ; <-- here r7 is acting as frame pointer\r\n   2c496:       9019            str     r0, [sp, #100]\r\n   2c498:       a813            add     r0, sp, #76\r\n  ; ... unrelated instructions, but which notably do not save r7 ...\r\n   2c4ac:       460f            mov     r7, r1   ; <-- here, r7 is being loaded with the parameter\r\n  ; ... unrelated instructions ...\r\n   2c4b8:       df00            svc     0    ; <-- system call!\r\n   2c4bc:       b11c            cbz     r4, 2c4c6\r\n   ; ... unrelated instructions ...\r\n   2c4e0:       f1a7 003d       sub.w   r0, r7, #61     ; <-- r7 is assumed to still be frame pointer\r\n   2c4e4:       9019            str     r0, [sp, #100]\r\n```\r\nIf one were to use `r11` instead (which, spoiler, we also use), one would get a compiler error:\r\n\r\n```\r\nerror: invalid register `r11`: the frame pointer cannot be used as an operand for inline asm\r\n   --> userlib/src/lib.rs:191:13\r\n    |\r\n191 |             in(\"r11\") Sysnum::BorrowRead as u32,\r\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\n...which is actually _wrong_ for my target, but the intent is right: it appears to be trying to guard against this miscompilation case.\r\n\r\n# Expectations\r\n\r\nI would normally expect that an _explicit clobber_ would be enough for the compiler to not assume a particular value is live in a register across the `asm!` statement. This isn't true in either `llvm_asm!` or the new syntax. (I tried the new syntax to see if it fixed this -- and also because I expected a chilly reception to a bug in a deprecated syntax.)\r\n\r\nMoreover, I argue that it is a misfeature to prevent the user from describing an `asm` sequence that damages the frame pointer. Such sequences can absolutely occur, particularly in cases of register bank switching, context restore, or naked functions that manage their own frames. The restriction on naming frame pointer should be loosened, in my opinion; the compiler can always generate code to save/restore it. (I'm currently ok with the ban on naming `sp` or `pc`.)\r\n\r\nBut barring that, the restriction should be correct.\r\n\r\n### Meta\r\n\r\nThis miscompilation was initially observed using `llvm_asm!` on the 2020-05-01 nightly. Confirmed with the new `asm!` syntax on:\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.46.0-nightly (feb3536eb 2020-06-09)\r\nbinary: rustc\r\ncommit-hash: feb3536eba10c2e4585d066629598f03d5ddc7c6\r\ncommit-date: 2020-06-09\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.46.0-nightly\r\nLLVM version: 10.0\r\n```\r\n\r\nThe `asm!` announcement said I should add `F-asm` to this report, but it is not apparent how I would do that.\r\n\r\nHat tip to @labbott for identifying this.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73450/timeline", "performed_via_github_app": null, "state_reason": "completed"}