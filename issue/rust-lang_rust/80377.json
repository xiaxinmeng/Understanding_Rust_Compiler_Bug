{"url": "https://api.github.com/repos/rust-lang/rust/issues/80377", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80377/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80377/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80377/events", "html_url": "https://github.com/rust-lang/rust/issues/80377", "id": 774866444, "node_id": "MDU6SXNzdWU3NzQ4NjY0NDQ=", "number": 80377, "title": "Tracking Issue for const_ptr_read", "user": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 268744493, "node_id": "MDU6TGFiZWwyNjg3NDQ0OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-fn", "name": "A-const-fn", "color": "f7e101", "default": false, "description": "Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2020-12-26T12:16:39Z", "updated_at": "2023-05-10T10:42:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(const_ptr_read)]`\r\n\r\nThis is a tracking issue for making the functions `ptr::read` and `ptr::read_unaligned`, and the same methods on `*const T` and `*mut T`, `const fn`. This unlocks things like moving values out of arrays in const context.\r\n\r\n<!--\r\nInclude a short description of the feature.\r\n-->\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\nmod ptr {\r\n    pub const unsafe fn read<T>(src: *const T) -> T;\r\n    pub const unsafe fn read_unaligned<T>(src: *const T) -> T;\r\n}\r\n\r\nimpl<T> *const T {\r\n    pub const unsafe fn read(self) -> T;\r\n    pub const unsafe fn read_unaligned(self) -> T;\r\n}\r\n\r\nimpl<T> *mut T {\r\n    pub const unsafe fn read(self) -> T;\r\n    pub const unsafe fn read_unaligned(self) -> T;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nIn the simplest case, this is a PR implementing the feature followed by a PR\r\nthat stabilises the feature. However it's not uncommon for the feature to be\r\nchanged before stabilization. For larger features, the implementation could be\r\nsplit up in multiple steps.\r\n-->\r\n\r\n- [x] Implementation: #79684\r\n- [x] FCP\r\n- [x] Stabilization PR: #97320\r\n\r\n#### Related\r\n* const_ptr_write #86302\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\nInorder to make `intrinsics::copy` and `intrinsics::copy_nonoverlapping` compile as `const fn`, some checks were removed.\r\nSee [comment](https://github.com/rust-lang/rust/pull/79684#discussion_r546257825) for some more info\r\n> For this PR, I see two options:\r\n>\r\n>* Leave it as \"something we can do once we have a story for const-dependent dispatch\".\r\n>* Comment out the debug assertions for now. Their usefulness is anyway limited since the libstd everyone uses is compiled without debug assertions.\r\n>\r\n>I guess the question is one of evaluating the relative usefulness of these new const operations vs the assertions.\r\n\r\n(#79684 did the `Comment out the debug assertions for now.`-thing).\r\n\r\nSo the question is, how do we bring them back?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80377/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80377/timeline", "performed_via_github_app": null, "state_reason": null}