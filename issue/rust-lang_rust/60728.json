{"url": "https://api.github.com/repos/rust-lang/rust/issues/60728", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60728/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60728/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60728/events", "html_url": "https://github.com/rust-lang/rust/issues/60728", "id": 442974666, "node_id": "MDU6SXNzdWU0NDI5NzQ2NjY=", "number": 60728, "title": "Tracking issue for Weak::into_raw/from_raw & similar", "user": {"login": "vorner", "id": 11783500, "node_id": "MDQ6VXNlcjExNzgzNTAw", "avatar_url": "https://avatars.githubusercontent.com/u/11783500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vorner", "html_url": "https://github.com/vorner", "followers_url": "https://api.github.com/users/vorner/followers", "following_url": "https://api.github.com/users/vorner/following{/other_user}", "gists_url": "https://api.github.com/users/vorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/vorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vorner/subscriptions", "organizations_url": "https://api.github.com/users/vorner/orgs", "repos_url": "https://api.github.com/users/vorner/repos", "events_url": "https://api.github.com/users/vorner/events{/privacy}", "received_events_url": "https://api.github.com/users/vorner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 32, "created_at": "2019-05-11T09:39:27Z", "updated_at": "2020-05-29T11:16:43Z", "closed_at": "2020-05-29T11:16:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Changing this to a tracking issue for the feature:\r\n\r\n* [x] Pull request #60766\r\n* [ ] :question: What to do about dangling Weak (created by `Weak::new()`) and `T: ?Sized`? These seem to be incompatible.\r\n* [ ] Stabilization\r\n\r\n# The original proposal\r\n\r\nHello\r\n\r\nThe Arc has the `into_raw` and `from_raw` methods. I think it would be technically possible to have the same on `Weak`. Obviously, as `Weak` is non-owning, it would be up to the caller to make sure the pointer is not dangling when used.\r\n\r\nWould adding these (and maybe `as_raw` too \u2012 one can get a reference out of `Arc`, but not from `Weak`) require an RFC, because the handling of these methods might be even a bit more delicate than the ones on `Arc`, or is this considered small enough for just a pull request & later stabilization?\r\n\r\n# Motivation\r\n\r\nI've written the [arc-swap](https://crates.io/crates/arc-swap) crate that allows to keep an Arc around but make it point to some other object atomically. It uses the mentioned methods. It would make sense to have weak version of this atomic storage too. \r\n\r\nAdditionally, the `as_raw` would make it possible to compare if eg an `Arc` and `Weak` point to the same object (which would also come handy in some alternative of the [`Cache`](https://docs.rs/arc-swap/0.3.11/arc_swap/cache/struct.Cache.html) that doesn't hold the object alive needlessly).", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60728/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60728/timeline", "performed_via_github_app": null, "state_reason": "completed"}