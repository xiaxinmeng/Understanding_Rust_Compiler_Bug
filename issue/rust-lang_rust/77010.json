{"url": "https://api.github.com/repos/rust-lang/rust/issues/77010", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77010/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77010/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77010/events", "html_url": "https://github.com/rust-lang/rust/issues/77010", "id": 705467380, "node_id": "MDU6SXNzdWU3MDU0NjczODA=", "number": 77010, "title": "Setting associated type of a trait breaks supertrait bounds", "user": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-09-21T10:17:52Z", "updated_at": "2020-10-09T22:08:09Z", "closed_at": "2020-10-09T22:08:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nThis code compiles fine until you'll uncomment `BAssoc = ()`.\r\n```rust\r\npub trait A {\r\n    type AAssoc: B</*BAssoc = ()*/>;\r\n}\r\n\r\npub trait B\r\nwhere\r\n    Self: Into<<Self as B>::BAssoc> \r\n{\r\n    type BAssoc;\r\n}\r\n\r\nfn test<T: A>(x: T::AAssoc) -> <T::AAssoc as B>::BAssoc {\r\n    x.into()\r\n}\r\n```\r\n\r\nWith `BAssoc = ()` the code fails to compile with the following error:\r\n```\r\nerror[E0277]: the trait bound `(): From<<T as A>::AAssoc>` is not satisfied\r\n  --> src/lib.rs:13:5\r\n   |\r\n5  | pub trait B\r\n   |           - required by a bound in this\r\n6  | where\r\n7  |     Self: Into<<Self as B>::BAssoc> \r\n   |           ------------------------- required by this bound in `B`\r\n...\r\n13 |     x.into()\r\n   |     ^^^^^^^^ the trait `From<<T as A>::AAssoc>` is not implemented for `()`\r\n   |\r\n   = note: required because of the requirements on the impl of `Into<()>` for `<T as A>::AAssoc`\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:13:5\r\n   |\r\n12 | fn test<T: A>(x: T::AAssoc) -> <T::AAssoc as B>::BAssoc {\r\n   |                                ------------------------ expected `()` because of return type\r\n13 |     x.into()\r\n   |     ^^^^^^^^- help: try adding a semicolon: `;`\r\n   |     |\r\n   |     expected `()`, found associated type\r\n   |\r\n   = note:    expected unit type `()`\r\n           found associated type `<<T as A>::AAssoc as B>::BAssoc`\r\n   = help: consider constraining the associated type `<<T as A>::AAssoc as B>::BAssoc` to `()`\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\r\n```\r\n\r\nThat seems really weird - how making type less generic makes code that should work for any type fail?\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nTested on stable `1.46.0` and `1.48.0`-nightly (2020-09-20 1fd5b9d516c035a898dc)", "closed_by": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77010/timeline", "performed_via_github_app": null, "state_reason": "completed"}