{"url": "https://api.github.com/repos/rust-lang/rust/issues/49879", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49879/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49879/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49879/events", "html_url": "https://github.com/rust-lang/rust/issues/49879", "id": 313349415, "node_id": "MDU6SXNzdWUzMTMzNDk0MTU=", "number": 49879, "title": "Implement cross-language ThinLTO", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 884691893, "node_id": "MDU6TGFiZWw4ODQ2OTE4OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-codegen", "name": "WG-codegen", "color": "c2e0c6", "default": false, "description": "Working Group: Codegen (Runtime perf and code size)"}], "state": "closed", "locked": false, "assignee": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 50, "created_at": "2018-04-11T14:28:56Z", "updated_at": "2019-04-16T11:01:31Z", "closed_at": "2019-04-16T11:01:30Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "## What is cross-language LTO?\r\n\r\nRust uses LLVM as its code generation backend, as does the Clang C/C++ compiler and many other languages. As a consequence, all of those LLVM-based compilers can produce artifacts that can partake in a common Link-Time-Optimization step, irrespective of the given source language. Thus, in this context, cross-language LTO means that we enable the Rust compiler to produce static libraries that can make use of LLVM-LTO-based linker plugins as exist for newer versions of `ld`, `gold`, and in `lld`.\r\n\r\n## Why is cross-language LTO a good thing?\r\n\r\nIn order for Rust to interoperate with code written in other languages, calls have to go through a C interface. This interface poses a boundary for inter-procedural optimizations like inlining. At the same time inter-procedural optimizations are very important for performance. Cross-language LTO makes this boundary transparent to LLVM, effectively allowing for C/C++ code to be inlined into Rust code and vice versa.\r\n\r\n## How can it be implemented?\r\nThere are several options. The basic requirement is that we emit LLVM bitcode into our object files in a format that the LLVM linker plugin can handle. There are two formats that fulfill this requirement:\r\n\r\n1. We emit `.o` files that actually aren't object files but plain LLVM bitcode files.\r\n2. We add the LLVM bitcode of an object file into a special `.llvmbc` section of the object file. \r\n\r\nGiven these requirements there are a few ways of implementing the feature:\r\n\r\n1. Always emit bitcode into object files instead of storing them as separate files in RLIBs\r\n    - Pros\r\n        - simple for users, it just works\r\n        - this is something that some platforms, like IOS, want to have anyway\r\n    - Cons\r\n        - staticlibs would contain bitcode, even though it might not be needed\r\n        - the Rust compiler would have to be modified to read bitcode out of a section instead of separate obj-file\r\n        - we could not store bitcode compressed anymore\r\n\r\n2. Just stabilize `-Z embed-bitcode` and require users to do the rest\r\n    - Pros\r\n        - simple to implement\r\n    - Cons\r\n        - harder to use (needs user intervention)\r\n        - unclear how to integrate with Cargo\r\n        - RLIBs generated this way will contain bitcode twice\r\n\r\n3. Add a flag that makes `rustc` emit bitcode files instead of object files\r\n    - Pros\r\n        - no redundant codegen\r\n        - no redundant machine code\r\n    - Cons \r\n        - harder to use (needs user intervention)\r\n        - produces libraries that are incompatible with regular compilation, which is weird\r\n        - even more strange special casing Rust compiler backend\r\n        - unclear how to integrate with Cargo\r\n\r\n4. Add a `-C cross-language-lto` flag that (1) makes the compiler embed bitcode into RLIBs and static libraries, and (2) makes the compiler invoke the linker with the `LLVMgold.so` plugin, if applicable.\r\n    - Pros\r\n        - would make cross-language LTO available for binaries built with `rustc`\r\n        - `rustc` can skip the redundant ThinLTO step for binaries and dylibs\r\n        - RLIBs and staticlibs would be bigger but it's on an opt-in basis\r\n    - Cons\r\n        - since LTO is deferred to the linker, it would not be integrated with the Make jobserver\r\n        - harder to use (needs user intervention)\r\n        - unclear how to integrate with Cargo\r\n\r\nI think I would opt for option (1) since it's the most straightforward to use. **EDIT:** Added option (4) which I also like.\r\n\r\ncc @rust-lang/compiler @alexcrichton \r\n(@rust-lang/wg-codegen might also be interested in this)", "closed_by": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49879/reactions", "total_count": 29, "+1": 14, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 14, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49879/timeline", "performed_via_github_app": null, "state_reason": "completed"}