{"url": "https://api.github.com/repos/rust-lang/rust/issues/83957", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83957/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83957/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83957/events", "html_url": "https://github.com/rust-lang/rust/issues/83957", "id": 851990117, "node_id": "MDU6SXNzdWU4NTE5OTAxMTc=", "number": 83957, "title": "Switch `#[derive(PartialEq)]` to have separate lhs and rhs lifetimes", "user": {"login": "programmerjake", "id": 4584340, "node_id": "MDQ6VXNlcjQ1ODQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4584340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/programmerjake", "html_url": "https://github.com/programmerjake", "followers_url": "https://api.github.com/users/programmerjake/followers", "following_url": "https://api.github.com/users/programmerjake/following{/other_user}", "gists_url": "https://api.github.com/users/programmerjake/gists{/gist_id}", "starred_url": "https://api.github.com/users/programmerjake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/programmerjake/subscriptions", "organizations_url": "https://api.github.com/users/programmerjake/orgs", "repos_url": "https://api.github.com/users/programmerjake/repos", "events_url": "https://api.github.com/users/programmerjake/events{/privacy}", "received_events_url": "https://api.github.com/users/programmerjake/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2021-04-07T04:22:27Z", "updated_at": "2021-04-08T00:31:25Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "As far as I can tell the following code shouldn't cause a lifetime error but it does. If `Iter::Item` is changed to `&'a ()` instead of `PhantomData<&'a ()>` the error goes away.\r\n\r\n```rust\r\nuse core::marker::PhantomData;\r\n\r\nfn g<A: Iterator, B: Iterator>(a: A, b: B) -> A\r\nwhere\r\n    A::Item: PartialEq<B::Item>,\r\n{\r\n    todo!()\r\n}\r\n\r\npub struct Iter<'a>(&'a ());\r\n\r\nimpl<'a> Iterator for Iter<'a> {\r\n    type Item = PhantomData<&'a ()>;\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        todo!()\r\n    }\r\n}\r\n\r\npub fn f<'a, B: AsRef<()>>(a: &'a (), b: B) -> &'a () {\r\n    g(Iter(a), Iter(b.as_ref())).0\r\n}\r\n\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d27af5bf15b5ca4328b034316ef4aa64))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0309]: the parameter type `B` may not live long enough\r\n  --> src/lib.rs:20:21\r\n   |\r\n19 | pub fn f<'a, B: AsRef<()>>(a: &'a (), b: B) -> &'a () {\r\n   |              -- help: consider adding an explicit lifetime bound...: `B: 'a +`\r\n20 |     g(Iter(a), Iter(b.as_ref())).0\r\n   |                     ^ ...so that the type `B` is not borrowed for too long\r\n\r\nerror[E0309]: the parameter type `B` may not live long enough\r\n  --> src/lib.rs:20:23\r\n   |\r\n19 | pub fn f<'a, B: AsRef<()>>(a: &'a (), b: B) -> &'a () {\r\n   |              -- help: consider adding an explicit lifetime bound...: `B: 'a +`\r\n20 |     g(Iter(a), Iter(b.as_ref())).0\r\n   |                       ^^^^^^ ...so that the reference type `&B` does not outlive the data it points at\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0309`.\r\nerror: could not compile `playground`\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83957/timeline", "performed_via_github_app": null, "state_reason": null}