{"url": "https://api.github.com/repos/rust-lang/rust/issues/82944", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82944/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82944/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82944/events", "html_url": "https://github.com/rust-lang/rust/issues/82944", "id": 826462488, "node_id": "MDU6SXNzdWU4MjY0NjI0ODg=", "number": 82944, "title": "Unnecessary stack writes when using write_volatile with arrays", "user": {"login": "niluxv", "id": 34834616, "node_id": "MDQ6VXNlcjM0ODM0NjE2", "avatar_url": "https://avatars.githubusercontent.com/u/34834616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niluxv", "html_url": "https://github.com/niluxv", "followers_url": "https://api.github.com/users/niluxv/followers", "following_url": "https://api.github.com/users/niluxv/following{/other_user}", "gists_url": "https://api.github.com/users/niluxv/gists{/gist_id}", "starred_url": "https://api.github.com/users/niluxv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niluxv/subscriptions", "organizations_url": "https://api.github.com/users/niluxv/orgs", "repos_url": "https://api.github.com/users/niluxv/repos", "events_url": "https://api.github.com/users/niluxv/events{/privacy}", "received_events_url": "https://api.github.com/users/niluxv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1353616418, "node_id": "MDU6TGFiZWwxMzUzNjE2NDE4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-intrinsics", "name": "A-intrinsics", "color": "f7e101", "default": false, "description": "Area: intrinsics"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-03-09T18:50:34Z", "updated_at": "2023-04-08T08:40:29Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Labels: I-slow\r\nMaybe this is an LLVM issue rather than a rustc issue, but `std::ptr::write_volatile`, when used with arrays, results in highly non-optimal assembly on x86_64.\r\n\r\nFor example\r\n```rust\r\n#[repr(align(8))]\r\npub struct B8 (\r\n    [u8; 8]\r\n);\r\nimpl B8 {\r\n    const ZERO: Self = Self([0; 8]);\r\n}\r\n\r\npub fn zeroize_b8(bytes: &mut B8) {\r\n    let ptr: *mut B8 = bytes as *mut B8;\r\n    unsafe {\r\n        std::ptr::write_volatile(ptr, B8::ZERO);\r\n    }\r\n}\r\n```\r\nresults in\r\n```asm\r\nplayground::zeroize_b8:\r\n\tpushq\t%rax\r\n\tmovq\t$0, (%rsp) # write 0u64 to the stack\r\n\tmovq\t(%rsp), %rax # read this 0u64 from the stack to rax\r\n\tmovq\t%rax, (%rdi) # perform the actual write operation\r\n\tpopq\t%rax\r\n\tretq\r\n```\r\nIt first writes the value to the stack, than reads it from the stack into a register, and finially writes that register to the memory pointed at by `ptr`.\r\nThis takes 3 move instructions while we only need 1!\r\n```asm\r\nplayground::zeroize_b8_handwritten_asm:\r\n\tmovq\t$0, (%rdi) # perform the actual write operation\r\n\tretq\r\n```\r\nUsing a `u64` instead of an eight byte array works fine, and only issues a single move. (In fact it emits asm identical to the handwritten asm above.)\r\n[Try it on playground](https://play.rust-lang.org/?version=stable&mode=release&edition=2018&gist=322997010abe0182a26302cc6e8cbcbb)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82944/timeline", "performed_via_github_app": null, "state_reason": null}