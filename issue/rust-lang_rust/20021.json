{"url": "https://api.github.com/repos/rust-lang/rust/issues/20021", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/20021/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/20021/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/20021/events", "html_url": "https://github.com/rust-lang/rust/issues/20021", "id": 52469027, "node_id": "MDU6SXNzdWU1MjQ2OTAyNw==", "number": 20021, "title": "Permit impl methods whose bounds cannot be satisfied to have no body", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 419557634, "node_id": "MDU6TGFiZWw0MTk1NTc2MzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-medium", "name": "E-medium", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Medium / intermediate"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2014-12-19T10:36:16Z", "updated_at": "2022-09-26T21:37:38Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a curious case with where clauses where sometimes we can show that a method in an impl could not possibly be called. This is because the impl has more precise information than the trait. Here is an example:\n\n``` rust\n    trait MyTrait<T> {\n        fn method(&self, t: &T) where T : Eq;\n    }\n\n    struct Foo;\n    struct Bar; // note that `Bar` does not derive `Eq`\n\n    impl MyTrait<Bar> for Foo {\n        fn method(&self, t: &T) where Bar : Eq { // <-- `Bar : Eq` cannot be satisfied!\n        }\n    }\n```\n\nWe should permit the method body to be omitted in such a case. As a workaround, once #20020 is fixed, I imagine it would be possible to write an impl like this:\n\n```\nimpl MyTrait<Bar> for Foo {\n    fn method(&self, t: &T) { // no where clause at all\n        panic!(\"Bar : Eq could not be satisfied\");\n    }\n}\n```\n\nHowever, it is unfortunate to require that of the user. For one thing, perhaps it happens later that an impl of `Eq` is added for `Bar` -- now we have this method hanging around that will panic. It'd be nice to detect that statically. \n\nThe plan then would be to permit:\n\n```\nimpl MyTrait<Bar> for Foo {\n    fn method(&self, t: &T); // <-- no body or where clauses needed\n}\n```\n\nThis serves as a declaration that you believe this method could never be called. At trans time, we will generate a body that simply does the equivalent of `panic!(\"unsatisfiable method`method`invoked\")`.\n\nI plan to open an amendment to the where clause RFC describing this particular case.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/20021/reactions", "total_count": 6, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/20021/timeline", "performed_via_github_app": null, "state_reason": null}