{"url": "https://api.github.com/repos/rust-lang/rust/issues/20659", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/20659/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/20659/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/20659/events", "html_url": "https://github.com/rust-lang/rust/issues/20659", "id": 53559104, "node_id": "MDU6SXNzdWU1MzU1OTEwNA==", "number": 20659, "title": "Error in Linux codegen when using inline assembly.", "user": {"login": "alexchandel", "id": 637714, "node_id": "MDQ6VXNlcjYzNzcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/637714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexchandel", "html_url": "https://github.com/alexchandel", "followers_url": "https://api.github.com/users/alexchandel/followers", "following_url": "https://api.github.com/users/alexchandel/following{/other_user}", "gists_url": "https://api.github.com/users/alexchandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexchandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexchandel/subscriptions", "organizations_url": "https://api.github.com/users/alexchandel/orgs", "repos_url": "https://api.github.com/users/alexchandel/repos", "events_url": "https://api.github.com/users/alexchandel/events{/privacy}", "received_events_url": "https://api.github.com/users/alexchandel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-01-06T20:27:59Z", "updated_at": "2017-04-29T00:27:49Z", "closed_at": "2017-04-29T00:27:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "This code, when compiled with `rustc --emit obj --crate-type lib -O -Z no-landing-pads -C no-stack-check --target x86_64-unknown-linux-gnu test.rs`, produces machine code inconsistent with the [System V ABI](http://www.x86-64.org/documentation/abi.pdf), which Linux follows:\n\n``` rust\n#![feature(asm)]\n\nuse std::intrinsics::offset;\n\npub type char_t = i8;\npub type int_t = i32;\n\npub static mut ARGC: uint = 0;\npub static mut ARGV: *const *const char_t = 0 as *const *const char_t;\npub static mut ENVC: uint = 0;\npub static mut ENVP: *const *const char_t = 0 as *const *const char_t;\n\nextern \"C\" {\n    fn main(argc: int_t,\n            argv: *const *const char_t,\n            envp: *const *const char_t) -> int_t;\n    fn exit(status: int_t) -> !;\n}\n\n#[no_mangle]\npub unsafe fn start() {\n    asm!(\"  mov (%rsp), $0\n            lea +8(%rsp), $1\"\n            : \"=r\"(ARGC), \"=r\"(ARGV) ::: \"volatile\");\n\n    ENVP = offset(ARGV, ARGC as int + 1);\n\n    let mut envc: *const *const char_t = ENVP;\n    while (*envc as uint != 0) {\n        envc = offset(envc, 1); // increases by one pointer size\n    }\n    ENVC = (envc as uint - ENVP as uint - 1);\n\n    let status = main(ARGC as int_t, ARGV, ENVP);\n\n    exit(status);\n}\n```\n\nNotice the inline assembly statement in `start` attempts to use the value that `%rsp` holds when the function is invoked. On OS X, this succeeds (ignoring the predictable frame-pointer saving in the function prologue).\n\nHowever, Rust produces the following assembly on Linux:\n\n``` asm\nstart:\n       0:   50                                              pushq   %rax\n       1:   48 8b 3c 24                                     movq    (%rsp), %rdi\n       5:   48 8d 74 24 08                                  leaq    8(%rsp), %rsi\n       a:   48 8b 05 00 00 00 00                            movq    (%rip), %rax        # ARGC\n      11:   48 89 38                                        movq    %rdi, (%rax)\n      14:   48 8b 05 00 00 00 00                            movq    (%rip), %rax        # ARGV\n      1b:   48 89 30                                        movq    %rsi, (%rax)\n      1e:   48 8d 54 fe 08                                  leaq    8(%rsi,%rdi,8), %rdx\n      23:   48 8b 05 00 00 00 00                            movq    (%rip), %rax        # ENVP\n      2a:   48 89 10                                        movq    %rdx, (%rax)\n      2d:   48 8d 04 fe                                     leaq    (%rsi,%rdi,8), %rax\n      31:   90                                              nop\n...\n      3f:   90                                              nop\n      40:   48 83 78 08 00                                  cmpq    $0, 8(%rax)\n      45:   48 8d 40 08                                     leaq    8(%rax), %rax\n      49:   75 f5                                           jne -11\n      4b:   48 ff c8                                        decq    %rax\n      4e:   48 29 d0                                        subq    %rdx, %rax\n      51:   48 8b 0d 00 00 00 00                            movq    (%rip), %rcx        # ENVC\n      58:   48 89 01                                        movq    %rax, (%rcx)\n      5b:   e8 00 00 00 00                                  callq   0        # main\n      60:   89 c7                                           movl    %eax, %edi\n      62:   e8 00 00 00 00                                  callq   0        # exit\n```\n\nNotice that the value that `%rax` holds when the function is called is saved, even though the ABI specifies that `%rax` is not preserved across function calls. It should be clobbered here, yet Rust generates assembly to save its value.\n\nThis only occurs when optimizations are turned on. When compiling without `-O`, `%rax` is no longer saved.\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/20659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/20659/timeline", "performed_via_github_app": null, "state_reason": "completed"}