{"url": "https://api.github.com/repos/rust-lang/rust/issues/97932", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97932/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97932/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97932/events", "html_url": "https://github.com/rust-lang/rust/issues/97932", "id": 1266729671, "node_id": "I_kwDOAAsO6M5LgMLH", "number": 97932, "title": "Producing better output in case of \"error[E0277]: the size for values of type `dyn std::error::Error` cannot be known at compilation time\"", "user": {"login": "rdxdkr", "id": 34519094, "node_id": "MDQ6VXNlcjM0NTE5MDk0", "avatar_url": "https://avatars.githubusercontent.com/u/34519094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdxdkr", "html_url": "https://github.com/rdxdkr", "followers_url": "https://api.github.com/users/rdxdkr/followers", "following_url": "https://api.github.com/users/rdxdkr/following{/other_user}", "gists_url": "https://api.github.com/users/rdxdkr/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdxdkr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdxdkr/subscriptions", "organizations_url": "https://api.github.com/users/rdxdkr/orgs", "repos_url": "https://api.github.com/users/rdxdkr/repos", "events_url": "https://api.github.com/users/rdxdkr/events{/privacy}", "received_events_url": "https://api.github.com/users/rdxdkr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-06-09T22:21:50Z", "updated_at": "2022-06-10T01:04:23Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Given the following code: ([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=16bc3de98bdd8816f23b0863cf5fa85e))\r\n\r\n```rust\r\n// credits to kpreid in the official Discord server\r\nuse std::error::Error;\r\n\r\nfn wants_an_error(e: impl Into<Box<dyn Error + Send + Sync>>) {}\r\n\r\nfn main() {\r\n    let x: Box<dyn Error> = Box::new(\"oops\".parse::<i32>().unwrap_err());\r\n    wants_an_error(x);\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0277]: the size for values of type `dyn std::error::Error` cannot be known at compilation time\r\n --> src\\main.rs:7:20\r\n  |\r\n7 |     wants_an_error(x);\r\n  |     -------------- ^ doesn't have a size known at compile-time\r\n  |     |\r\n  |     required by a bound introduced by this call\r\n  |\r\n  = help: the trait `Sized` is not implemented for `dyn std::error::Error`\r\n  = note: required because of the requirements on the impl of `std::error::Error` for `Box<dyn std::error::Error>`\r\n  = note: required because of the requirements on the impl of `From<Box<dyn std::error::Error>>` for `Box<(dyn std::error::Error + Send + Sync + 'static)>`\r\n  = note: required because of the requirements on the impl of `Into<Box<(dyn std::error::Error + Send + Sync + 'static)>>` for `Box<dyn std::error::Error>`\r\nnote: required by a bound in `wants_an_error`\r\n --> src\\main.rs:3:27\r\n  |\r\n3 | fn wants_an_error(e: impl Into<Box<dyn Error + Send + Sync>>) {}\r\n  |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `wants_an_error`\r\n\r\nerror[E0277]: `dyn std::error::Error` cannot be sent between threads safely\r\n --> src\\main.rs:7:20\r\n  |\r\n7 |     wants_an_error(x);\r\n  |     -------------- ^ `dyn std::error::Error` cannot be sent between threads safely\r\n  |     |\r\n  |     required by a bound introduced by this call\r\n  |\r\n  = help: the trait `Send` is not implemented for `dyn std::error::Error`\r\n  = note: required because of the requirements on the impl of `Send` for `Unique<dyn std::error::Error>`\r\n  = note: required because it appears within the type `Box<dyn std::error::Error>`\r\n  = note: required because of the requirements on the impl of `From<Box<dyn std::error::Error>>` for `Box<(dyn std::error::Error + Send + Sync + 'static)>`\r\n  = note: required because of the requirements on the impl of `Into<Box<(dyn std::error::Error + Send + Sync + 'static)>>` for `Box<dyn std::error::Error>`\r\nnote: required by a bound in `wants_an_error`\r\n --> src\\main.rs:3:27\r\n  |\r\n3 | fn wants_an_error(e: impl Into<Box<dyn Error + Send + Sync>>) {}\r\n  |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `wants_an_error`\r\n\r\nerror[E0277]: `dyn std::error::Error` cannot be shared between threads safely\r\n --> src\\main.rs:7:20\r\n  |\r\n7 |     wants_an_error(x);\r\n  |     -------------- ^ `dyn std::error::Error` cannot be shared between threads safely\r\n  |     |\r\n  |     required by a bound introduced by this call\r\n  |\r\n  = help: the trait `Sync` is not implemented for `dyn std::error::Error`\r\n  = note: required because of the requirements on the impl of `Sync` for `Unique<dyn std::error::Error>`\r\n  = note: required because it appears within the type `Box<dyn std::error::Error>`\r\n  = note: required because of the requirements on the impl of `From<Box<dyn std::error::Error>>` for `Box<(dyn std::error::Error + Send + Sync + 'static)>`\r\n  = note: required because of the requirements on the impl of `Into<Box<(dyn std::error::Error + Send + Sync + 'static)>>` for `Box<dyn std::error::Error>`\r\nnote: required by a bound in `wants_an_error`\r\n --> src\\main.rs:3:27\r\n  |\r\n3 | fn wants_an_error(e: impl Into<Box<dyn Error + Send + Sync>>) {}\r\n  |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `wants_an_error`\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\n```\r\n\r\nI think the output should point more clearly to the solution, which is to declare `x` as `Box<dyn Error + Send + Sync>`. Now that I know what's going on I understand why the compiler complains like that , but in my code it was less obvious and I had no idea until user kpreid in the Discord server explained it to me. The compiler already points to Send and Sync being absent (although maybe in a somewhat obscure way), but the part about Sized confused me and made it more difficult to look for a solution.\r\n\r\nThe same output is produced by Stable, Beta, and Nightly on the 2021 Edition.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97932/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97932/timeline", "performed_via_github_app": null, "state_reason": null}