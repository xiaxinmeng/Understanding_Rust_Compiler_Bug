{"url": "https://api.github.com/repos/rust-lang/rust/issues/58646", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58646/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58646/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58646/events", "html_url": "https://github.com/rust-lang/rust/issues/58646", "id": 413428074, "node_id": "MDU6SXNzdWU0MTM0MjgwNzQ=", "number": 58646, "title": "Does the MIR generated for match still build in order-deps visible to MIR-borrowck?", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}, {"id": 867465703, "node_id": "MDU6TGFiZWw4Njc0NjU3MDM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-complete", "name": "NLL-complete", "color": "f799ea", "default": false, "description": "Working towards the \"valid code works\" goal"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-22T14:29:27Z", "updated_at": "2019-02-27T21:05:36Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Spawned off of PR #57609\r\n\r\nThe above PR has an interesting unit test that checks that we aren't assuming too much order dependence; the test (from file named \"match-cfg-fake-edges.rs\") looks like this ([play](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=f48fdf189e92c85e03ff3142f2aaa73c)):\r\n\r\n```rust\r\nfn all_previous_tests_may_be_done(y: &mut (bool, bool)) {\r\n    let r = &mut y.1;\r\n    // We don't actually test y.1 to select the second arm, but we don't want\r\n    // borrowck results to be based on the order we match patterns.\r\n    match y {\r\n        (false, true) => 1, //~ ERROR cannot use `y.1` because it was mutably borrowed\r\n        (true, _) => { r; 2 } // (use of \"above\" borrow)\r\n        (false, _) => 3,\r\n    };\r\n}\r\n```\r\n\r\nwhile reviewing that test case, I wondered whether order-dependence, as implicitly defined by the above test, would also include this variant:\r\n\r\n```rust\r\nfn any_tests_may_be_done(y: &mut (bool, bool)) {\r\n    let r = &mut y.1;\r\n    // We don't test y.1 to select the first arm. Does this present\r\n    // an instance where borrowck results are based on the order we\r\n    // match patterns?\r\n    match y {\r\n        (true, _) => { r; 2 } // (use of \"below\" borrow)\r\n        (false, true) => 1, //~ ERROR cannot use `y.1` because it was mutably borrowed\r\n        (false, _) => 3,\r\n    };\r\n}\r\n```\r\n\r\nToday, `all_previous_tests_may_be_done` is rejected (with a warning under NLL migration mode, and a hard error if you opt into `#![feature(nll)`, but `any_tests_may_be_done` is accepted.\r\n\r\nIs this an internally consistent policy?\r\n\r\n----\r\n\r\nMaybe my question is most simply put like this:\r\n * since we are adding some \"fake edges\" from some match-arms to the other arms that follow (to try to avoid prematurely tying ourselves to a particular code-generation strategy for MIR, in terms of what inputs MIR-borrowck will accept), ...\r\n * shouldn't we be adding even more such \"fake edges\" that go from the bottom arms *back up* to the ones before them?\r\n\r\nThat would increase our flexibility for MIR code-generation, in theory, even further, right?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58646/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58646/timeline", "performed_via_github_app": null, "state_reason": null}