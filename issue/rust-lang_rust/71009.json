{"url": "https://api.github.com/repos/rust-lang/rust/issues/71009", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71009/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71009/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71009/events", "html_url": "https://github.com/rust-lang/rust/issues/71009", "id": 598123062, "node_id": "MDU6SXNzdWU1OTgxMjMwNjI=", "number": 71009, "title": "De-stabilize target spec JSON ", "user": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 201852178, "node_id": "MDU6TGFiZWwyMDE4NTIxNzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-stability", "name": "A-stability", "color": "f7e101", "default": false, "description": "Area: issues related to #[stable] and #[unstable] attributes themselves."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 632453790, "node_id": "MDU6TGFiZWw2MzI0NTM3OTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-target-specs", "name": "A-target-specs", "color": "f7e101", "default": false, "description": "Area: compile-target specifications"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2020-04-10T22:32:55Z", "updated_at": "2021-01-29T16:56:57Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "In a recent [Zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Stability.20guarantees.20of.20custom.20target.20specifications), it was noted that we currently consider JSON target specifications unstable, in the sense that options are relatively freely added and removed.\r\n\r\nCurrently, the compiler will load target specifications from three places.\r\n\r\nIf a triple is passed without trailing \".json\":\r\n * a built-in list, specified as Rust structs\r\n * `$RUST_TARGET_PATH`, split like PATH on the system we're running on, or, if not set, the current directory.\r\n   * we then attempt to load `$triple.json` from the directories listed\r\n\r\nIf a triple is passed with .json, then we directly attempt to load that file path (relative or absolute).\r\n\r\nThis is the history as best as I can tell:\r\n * Original `--target` support, including RUST_TARGET_PATH, was implemented in #16156.\r\n * Trailing .json leading to a file lookup was added by @phil-opp in #49019.\r\n\r\nI cannot currently find any explicit discussion around stability, but presumably that discussion did happen at some time, happy to receive links to it. I would like to propose that we de-stabilize the RUST_TARGET_PATH and file-path loading, making only built-in targets usable. To my knowledge, this essentially is already the status quo: you need to build core/std to actually use a target, and that's not possible on beta/stable without intentional stability holes like RUSTC_BOOTSTRAP.\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71009/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71009/timeline", "performed_via_github_app": null, "state_reason": null}