{"url": "https://api.github.com/repos/rust-lang/rust/issues/43804", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43804/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43804/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43804/events", "html_url": "https://github.com/rust-lang/rust/issues/43804", "id": 249632597, "node_id": "MDU6SXNzdWUyNDk2MzI1OTc=", "number": 43804, "title": "Possibly use a known profiling format for timings ?", "user": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-08-11T13:16:12Z", "updated_at": "2019-03-11T09:18:53Z", "closed_at": "2019-03-11T02:59:27Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "With the new `-Z trans-time-graph` from #43506, soon to be joined by `-Z profile-queries` from #43345, and their impact on `time-passes`, would it make sense to output such timings in an existing profiling format instead of ad-hoc ones ?\r\n\r\nA couple formats come to mind: \r\n* the one used by the Gecko profiler and its [frontend](https://github.com/devtools-html/perf.html)\r\n* or Chrome's tracing format + [frontend](https://github.com/catapult-project/catapult/tree/master/tracing)\r\n\r\nThey both seem to support multiple processes/threads, and the frontend tools are pretty powerful in filtering, sorting, etc.\r\n\r\nChrome's format looks easy to generate, and Aras P had a couple good articles about how they use it at Unity:\r\n* [an introduction to the tool and JSON format](http://aras-p.info/blog/2017/01/23/Chrome-Tracing-as-Profiler-Frontend/)\r\n* [a second one](http://aras-p.info/blog/2017/08/08/Unreasonable-Effectiveness-of-Profilers/) less about the format and more about another use of the trace viewer in their build tool \u2014 which of course made me think of jobserver and Cargo.\r\n\r\nGecko's and perf-html looks more complex/complete and has a seriously impressive polished UI (but might have some Firefox related concepts, ie JS or C++ contexts one can see in the UI). To see how it looks, here's an example of a [big trace from gecko+stylo](https://perf-html.io/public/238c45b01e92f673ebe25920e2c4edbbb7e9c6ce/timeline/?hiddenThreads=&range=0.5349_0.8494&thread=0&threadOrder=0-2-3-4-5-6-1) (I think, I saw this in the servo irc chan) \r\n\r\nI think both frontends could be used on perf.rlo. I know Chrome's trace viewer can be compiled to a single (huge) html file one can use outside of Chrome to trace json timing files. And I _think_ perf-html is client-side only as well.\r\n\r\n(As an aside, could it also be interesting to output to such formats with a more fine-grained profiling data successor to `time-passes` \u2014 and not just for the 2 HTML outputs mentioned above ? I think this would be extremely useful to see and track hotspots on perf.rlo, which IIRC will probably switch to only showing totals without passes data)\r\n\r\ncc @michaelwoerister, @eddyb, @nikomatsakis ", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43804/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43804/timeline", "performed_via_github_app": null, "state_reason": "completed"}