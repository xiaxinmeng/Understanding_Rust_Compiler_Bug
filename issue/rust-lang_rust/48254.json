{"url": "https://api.github.com/repos/rust-lang/rust/issues/48254", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48254/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48254/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48254/events", "html_url": "https://github.com/rust-lang/rust/issues/48254", "id": 297667366, "node_id": "MDU6SXNzdWUyOTc2NjczNjY=", "number": 48254, "title": "Option::unwrap, panic!, print!, maybe others induce string relocations", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-16T02:43:45Z", "updated_at": "2022-07-11T03:14:44Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following code:\r\n```rust\r\npub fn foo(a: Option<usize>) -> usize {\r\n    a.unwrap()\r\n}\r\n```\r\n\r\nThis generates the following:\r\n```asm\r\nexample::foo:\r\n  cmp qword ptr [rdi], 1\r\n  jne .LBB0_1\r\n  mov rax, qword ptr [rdi + 8]\r\n  ret\r\n.LBB0_1:\r\n  push rbp\r\n  mov rbp, rsp\r\n  lea rdi, [rip + .Lref.2]\r\n  call core::panicking::panic@PLT\r\n  ud2\r\n\r\nstr.0:\r\n  .ascii \"called `Option::unwrap()` on a `None` value\"\r\n\r\nstr.1:\r\n  .ascii \"/checkout/src/libcore/option.rs\"\r\n\r\n.Lref.2:\r\n  .quad str.0\r\n  .quad 43\r\n  .quad str.1\r\n  .quad 31\r\n  .long 335\r\n  .long 21\r\n```\r\n\r\nThe quads under `.Lref.2` correspond to (pointer, length) pairs for both strings emitted by unwrap(). The way they are stored looks related to the call convention for `core::panicking::panic`, which looks like it just wants a pointer to a buffer containing 2 &str and 2 integers. The problem with this is that each of those pointers need relocations in the final position independent binary. And in ELF, those are large: each relocation is 2 (on 32-bits) or 3 (on 64-bits) words, so 24 bytes on 64-bits. Per string.\r\n\r\nThe same kind of thing happens with `panic!`:\r\n```rust\r\npub fn foo() {\r\n    panic!(\"foo\")\r\n}\r\n```\r\n\r\nI'll skip the assembly for the code itself, but the data looks like:\r\n```asm\r\nstr.1:\r\n  .ascii \"/tmp/compiler-explorer-compiler118116-63-xzcrje.hzu9d/example.rs\"\r\n\r\n.Lref.2:\r\n  .quad str.1\r\n  .quad 64\r\n  .long 2\r\n  .long 5\r\n\r\nstr.4:\r\n  .ascii \"foo\"\r\n```\r\n\r\nDo note that there is no reference to `str.4`, the corresponding (pointer, length) is actually created from code in that case:\r\n```asm\r\n  lea rcx, [rip + str.4]\r\n  mov qword ptr [rax], rcx\r\n  mov qword ptr [rax + 8], 3\r\n```\r\n\r\nAnd the same again for `print!`:\r\n```rust\r\npub fn foo() {\r\n    print!(\"foo\")\r\n}\r\n```\r\n\r\ngenerating this data:\r\n```asm\r\nstr.0:\r\n  .ascii \"foo\"\r\n\r\n.Lref.1:\r\n  .quad str.0\r\n  .quad 3\r\n```\r\n\r\nA counter example is `Option::expect`:\r\n```rust\r\npub fn foo(a: Option<usize>) -> usize {\r\n    a.expect(\"bar\")\r\n}\r\n```\r\nwhich generates:\r\n```asm\r\nexample::foo:\r\n  cmp qword ptr [rdi], 1\r\n  jne .LBB0_1\r\n  mov rax, qword ptr [rdi + 8]\r\n  ret\r\n.LBB0_1:\r\n  push rbp\r\n  mov rbp, rsp\r\n  lea rdi, [rip + str.0]\r\n  mov esi, 3\r\n  call core::option::expect_failed@PLT\r\n  ud2\r\n\r\nstr.0:\r\n  .ascii \"bar\"\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48254/timeline", "performed_via_github_app": null, "state_reason": null}