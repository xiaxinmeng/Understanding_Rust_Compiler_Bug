{"url": "https://api.github.com/repos/rust-lang/rust/issues/91973", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91973/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91973/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91973/events", "html_url": "https://github.com/rust-lang/rust/issues/91973", "id": 1081329705, "node_id": "I_kwDOAAsO6M5Ac8gp", "number": 91973, "title": "Strange behavior when specializing over a generic trait parameter", "user": {"login": "joergbrech", "id": 25240961, "node_id": "MDQ6VXNlcjI1MjQwOTYx", "avatar_url": "https://avatars.githubusercontent.com/u/25240961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joergbrech", "html_url": "https://github.com/joergbrech", "followers_url": "https://api.github.com/users/joergbrech/followers", "following_url": "https://api.github.com/users/joergbrech/following{/other_user}", "gists_url": "https://api.github.com/users/joergbrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/joergbrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joergbrech/subscriptions", "organizations_url": "https://api.github.com/users/joergbrech/orgs", "repos_url": "https://api.github.com/users/joergbrech/repos", "events_url": "https://api.github.com/users/joergbrech/events{/privacy}", "received_events_url": "https://api.github.com/users/joergbrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1472579062, "node_id": "MDU6TGFiZWwxNDcyNTc5MDYy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-specialization", "name": "F-specialization", "color": "f9c0cc", "default": false, "description": "`#![feature(specialization)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-12-15T18:02:37Z", "updated_at": "2021-12-17T10:46:44Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following code:\r\n\r\n```rust\r\n#![feature(min_specialization, never_type)]\r\n\r\npub struct Foo;\r\n\r\npub trait Bar<T>\r\n{\r\n    fn myfunc(&self, _: T);\r\n}\r\n\r\nimpl<T> Bar<T> for Foo\r\n{\r\n    default fn myfunc(&self, _: T) { println!(\"default\"); }\r\n}\r\n\r\nimpl Bar<bool> for Foo\r\n{\r\n    fn myfunc(&self, _: bool) { println!(\"bool\"); }\r\n}\r\n\r\n// uncommenting the following impl will fix the compiler error\r\n// impl Bar<!> for Foo\r\n// {\r\n//     fn myfunc(&self, _: !) {}\r\n// }\r\n\r\nfn main() {\r\n    Foo.myfunc(true);\r\n    Foo.myfunc(42);\r\n}\r\n```\r\n\r\nThe compiler errors with \r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:28:16\r\n   |\r\n28 |     Foo.myfunc(42);\r\n   |                ^^ expected `bool`, found integer\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\n```\r\n\r\nhttps://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=5b161930612fbcee70a522948c6a1fb6\r\n\r\nI would have expected that `Foo.myfunc(42)` falls back to the default implementation. The weird thing is, if I uncomment the second special implementation for any other type (e.g. `!`) the code all of a sudden compiles and works as expected.\r\n\r\nSo I have A = `(T, Foo)`, B = `(bool, Foo)` and C = `(!, Foo)`, where B and C do not overlap and are both subsets of A. Why do I need the specialization C to get the specialization B to work, when C is completely independent of B?\r\n\r\n_Originally posted by @joergbrech in https://github.com/rust-lang/rust/issues/31844#issuecomment-994983430 and https://users.rust-lang.org/t/specialization-over-generic-trait-parameter/68838_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91973/timeline", "performed_via_github_app": null, "state_reason": null}