{"url": "https://api.github.com/repos/rust-lang/rust/issues/106700", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106700/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106700/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106700/events", "html_url": "https://github.com/rust-lang/rust/issues/106700", "id": 1528239590, "node_id": "I_kwDOAAsO6M5bFxXm", "number": 106700, "title": "Specialized Associated Type Cannot be Assigned to Value of Concrete Type (Despite type_name Working as Expected)", "user": {"login": "NathanielB123", "id": 30476356, "node_id": "MDQ6VXNlcjMwNDc2MzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30476356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NathanielB123", "html_url": "https://github.com/NathanielB123", "followers_url": "https://api.github.com/users/NathanielB123/followers", "following_url": "https://api.github.com/users/NathanielB123/following{/other_user}", "gists_url": "https://api.github.com/users/NathanielB123/gists{/gist_id}", "starred_url": "https://api.github.com/users/NathanielB123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NathanielB123/subscriptions", "organizations_url": "https://api.github.com/users/NathanielB123/orgs", "repos_url": "https://api.github.com/users/NathanielB123/repos", "events_url": "https://api.github.com/users/NathanielB123/events{/privacy}", "received_events_url": "https://api.github.com/users/NathanielB123/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-01-11T01:18:01Z", "updated_at": "2023-01-11T17:14:48Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\n#![feature(specialization)]\r\n#![allow(incomplete_features)]\r\n\r\nuse core::marker::PhantomData;\r\n\r\nstruct HCons<T, R>(PhantomData<(T, R)>);\r\nstruct Nil {}\r\n\r\nstruct True {}\r\nstruct False {}\r\n\r\ntrait Contains<T> {\r\n    type Result;\r\n}\r\n\r\nimpl<H, R: Contains<T>, T> Contains<T> for HCons<H, R> {\r\n    default type Result = R::Result;\r\n}\r\n\r\nimpl<T, R: Contains<T>> Contains<T> for HCons<T, R> {\r\n    type Result = True;\r\n}\r\n\r\nimpl<T> Contains<T> for Nil {\r\n    type Result = False;\r\n}\r\n\r\ntype F = <HCons<i32, HCons<String, Nil>> as Contains<String>>::Result;\r\n\r\nfn main() {\r\n    // Prints std::any::type_name::<F>() = \"playground::True\"\r\n    dbg!(std::any::type_name::<F>());\r\n    // Error here\r\n    let x: F = True {};\r\n}\r\n```\r\n\r\nRust Playground: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=650a25b3c35c5626361afb0c61af2aa5\r\n\r\nI expected to see this happen: \r\nNo compile error, program runs and prints `[src/main.rs:31] std::any::type_name::<F>() = \"playground::True\"`\r\n\r\nInstead, this happened: \r\nCompile Error:\r\n```\r\nerror[[E0308]](https://doc.rust-lang.org/nightly/error-index.html#E0308): mismatched types\r\n  --> src/main.rs:34:16\r\n   |\r\n34 |     let x: F = True {};\r\n   |            -   ^^^^^^^ expected associated type, found struct `True`\r\n   |            |\r\n   |            expected due to this\r\n   |\r\n   = note: expected associated type `<HCons<i32, HCons<String, Nil>> as Contains<String>>::Result`\r\n                       found struct `True`\r\n   = help: consider constraining the associated type `<HCons<i32, HCons<String, Nil>> as Contains<String>>::Result` to `True` or calling a method that returns `<HCons<i32, HCons<String, Nil>> as Contains<String>>::Result`\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\r\n```\r\n\r\nInterestingly, when removing the offending line, the code runs and prints that the type is `playground::True` as desired, so the compiler clearly knows that the type of `F` is `True`.\r\n\r\nPlayground with offending line removed: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=e511b1ca810826d8e20abb3316a46ba1\r\n\r\nPlayground Version:\r\n\r\n```\r\nBuild using the Nightly version: 1.68.0-nightly\r\n(2023-01-09 3020239de947ec52677e)\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106700/timeline", "performed_via_github_app": null, "state_reason": null}