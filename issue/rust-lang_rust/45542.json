{"url": "https://api.github.com/repos/rust-lang/rust/issues/45542", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45542/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45542/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45542/events", "html_url": "https://github.com/rust-lang/rust/issues/45542", "id": 268594175, "node_id": "MDU6SXNzdWUyNjg1OTQxNzU=", "number": 45542, "title": "Specialization: cannot specialize an impl of a local trait when the default impl is a blanket impl bounded by a non-local trait", "user": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-26T00:41:55Z", "updated_at": "2017-10-31T18:08:01Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Found this in the Chucklefish AMA thread, [in the subthread](https://www.reddit.com/r/rust/comments/78bowa/hey_this_is_kyren_from_chucklefish_we_make_and/dow4br2/?context=3) about working around the lack of `Ord` on floats.\r\n\r\nThis code compiles:\r\n```rust\r\n#![feature(specialization)]\r\n\r\ntrait Foo { fn foo(&self); }\r\n\r\nimpl<T: Ord> Foo for T { default fn foo(&self) {} }\r\n```\r\n\r\n...But adding a specialized impl fails:\r\n```rust\r\n#![feature(specialization)]\r\n\r\ntrait Foo { fn foo(&self); }\r\n\r\nimpl<T: Ord> Foo for T { default fn foo(&self) {} }\r\n\r\nimpl Foo for f64 { fn foo(&self) {} }\r\n```\r\n\r\nError message:\r\n```\r\nerror[E0119]: conflicting implementations of trait `Foo` for type `f64`:\r\n --> src/main.rs:7:1\r\n  |\r\n5 | impl<T: Ord> Foo for T { default fn foo(&self) {} }\r\n  | --------------------------------------------------- first implementation here\r\n6 | \r\n7 | impl Foo for f64 { fn foo(&self) {} }\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `f64`\r\n  |\r\n  = note: upstream crates may add new impl of trait `std::cmp::Ord` for type `f64` in future versions\r\n```\r\n\r\nI'm afraid I don't see how the error message is relevant, or how an upstream impl of `Ord` for `f64` could conflict with this impl of the local `Foo` trait. Is this intended behavior?\r\n\r\nThe above is a reduction, here's the original example which raises a few other questions:\r\n```rust\r\n#![feature(specialization)]\r\n\r\npub trait OrdSubset: PartialOrd<Self> + PartialEq<Self> {\r\n\tfn is_outside_order(&self) -> bool;\r\n}\r\n\r\nimpl<T: Ord> OrdSubset for T {\r\n    default fn is_outside_order(&self) -> bool {\r\n        false\r\n    }\r\n}\r\n\r\n// I'd expect this to work\r\nimpl OrdSubset for f64 {\r\n\tfn is_outside_order(&self) -> bool {\r\n\t\t\t(*self).is_nan()\r\n\t}\r\n}\r\n\r\n// not sure about this\r\nimpl<'a, A: OrdSubset> OrdSubset for &'a A {\r\n\tfn is_outside_order(&self) -> bool {\r\n\t\t(**self).is_outside_order()\r\n\t}\r\n}\r\n\r\n/*   The next two are basically the same as above, &mut and f64\r\n\r\nimpl<'a, A: OrdSubset> OrdSubset for &'a mut A {\r\n\tfn is_outside_order(&self) -> bool {\r\n\t\t(**self).is_outside_order()\r\n\t}\r\n}\r\n\r\nimpl OrdSubset for f32 {\r\n\tfn is_outside_order(&self) -> bool {\r\n\t\t(*self).is_nan()\r\n\t}\r\n}\r\n*/\r\nfn main() {\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45542/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45542/timeline", "performed_via_github_app": null, "state_reason": null}