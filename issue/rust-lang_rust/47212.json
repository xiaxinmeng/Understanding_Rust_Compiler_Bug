{"url": "https://api.github.com/repos/rust-lang/rust/issues/47212", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47212/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47212/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47212/events", "html_url": "https://github.com/rust-lang/rust/issues/47212", "id": 286221231, "node_id": "MDU6SXNzdWUyODYyMjEyMzE=", "number": 47212, "title": "Option map won't compile while match works well", "user": {"login": "andreytkachenko", "id": 1773973, "node_id": "MDQ6VXNlcjE3NzM5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1773973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreytkachenko", "html_url": "https://github.com/andreytkachenko", "followers_url": "https://api.github.com/users/andreytkachenko/followers", "following_url": "https://api.github.com/users/andreytkachenko/following{/other_user}", "gists_url": "https://api.github.com/users/andreytkachenko/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreytkachenko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreytkachenko/subscriptions", "organizations_url": "https://api.github.com/users/andreytkachenko/orgs", "repos_url": "https://api.github.com/users/andreytkachenko/repos", "events_url": "https://api.github.com/users/andreytkachenko/events{/privacy}", "received_events_url": "https://api.github.com/users/andreytkachenko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 800802916, "node_id": "MDU6TGFiZWw4MDA4MDI5MTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-coercions", "name": "A-coercions", "color": "f7e101", "default": false, "description": "Area: implicit and explicit `expr as Type` coercions"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-05T08:19:49Z", "updated_at": "2022-03-22T07:28:56Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Consider this snippet:\r\n\r\n```rust\r\nfn xxx() -> Option<&'static str> {\r\n    Some(\"word1 word2 word3\")\r\n}\r\n\r\nfn to_words<'a>() -> Option<Box<Iterator<Item = &'a str> + 'a>> {\r\n    xxx().map(|x|Box::new(x.split(' ')))\r\n}\r\n\r\nfn main() {\r\n    println!(\"{}\", to_words().unwrap().count());\r\n}\r\n```\r\n\r\nit won't compiles with the error:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:6:5\r\n  |\r\n5 | fn to_words<'a>() -> Option<Box<Iterator<Item = &'a str> + 'a>> {\r\n  |                      ------------------------------------------ expected `std::option::Option<std::boxed::Box<std::iter::Iterator<Item=&'a str> + 'a>>` because of return type\r\n6 |     xxx().map(|x|Box::new(x.split(' ')))\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::iter::Iterator, found struct `std::str::Split`\r\n  |\r\n  = note: expected type `std::option::Option<std::boxed::Box<std::iter::Iterator<Item=&'a str> + 'a>>`\r\n             found type `std::option::Option<std::boxed::Box<std::str::Split<'_, char>>>`\r\n```\r\n\r\nbut match in exactly same case compiles well:\r\n\r\n```rust\r\nfn xxx() -> Option<&'static str> {\r\n    Some(\"word1 word2 word3\")\r\n}\r\n\r\nfn to_words<'a>() -> Option<Box<Iterator<Item = &'a str> + 'a>> {\r\n    match xxx() {\r\n        Some(x) => Some(Box::new(x.split(' '))),\r\n        None => None\r\n    }\r\n}\r\n\r\nfn main() {\r\n    println!(\"{}\", to_words().unwrap().count());\r\n}\r\n```\r\n\r\nAnd if I explicitly define closure's argument type and returning value type it also compiles well:\r\n\r\n```rust\r\nfn xxx() -> Option<&'static str> {\r\n    Some(\"word1 word2 word3\")\r\n}\r\n\r\nfn to_words<'a>() -> Option<Box<Iterator<Item = &'a str> + 'a>> {\r\n    let f: fn(x: &'a str) -> Box<Iterator<Item = &'a str>> = |x| {\r\n        Box::new(x.split(' '))\r\n    };\r\n    \r\n    xxx().map(f)\r\n}\r\n\r\nfn main() {\r\n    println!(\"{}\", to_words().unwrap().count());\r\n}\r\n```\r\nI am sure there should not be differences between match and map at all.\r\n\r\nThis issue is reproduceble on rust stable and nightly.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47212/timeline", "performed_via_github_app": null, "state_reason": null}