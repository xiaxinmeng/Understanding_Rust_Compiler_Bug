{"url": "https://api.github.com/repos/rust-lang/rust/issues/85950", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85950/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85950/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85950/events", "html_url": "https://github.com/rust-lang/rust/issues/85950", "id": 910059316, "node_id": "MDU6SXNzdWU5MTAwNTkzMTY=", "number": 85950, "title": "slice docs could use example functions, clear header", "user": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 2238194189, "node_id": "MDU6TGFiZWwyMjM4MTk0MTg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-slice", "name": "A-slice", "color": "f7e101", "default": false, "description": "Area: [T]"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-06-03T03:29:04Z", "updated_at": "2021-08-12T09:23:42Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The API docs for the [slice type] describes what `[T]` is and explains the meaning of `&[T]` and `&mut [T]`, but this can still be vague for Rust programmers. A programmer with even a modest interest in using Rust for what it's been strongly advertised for, systems programming, is very likely to encounter the need to slice bytes between days 0 to 7, when they have not yet adjusted to Rust syntax and are not clear on why the type's identification in a function signature or type annotation is not the same as its name. In addition, it is easy to miss the type annotations in the existing examples.\r\n\r\nRecently, on nightly, the struct declaration of e.g. `std::vec::Vec` has been made visible, making an easy to read \"header\" that quickly gives an example of the type. This is very nice for generated structs, especially ones with type parameters, but primitives have a harder time of it, as there's no obvious \"declaration\" to give to a reader. Instead, the problem to address is an immediate \"okay, what does this look like in usage?\" So, a clear example of a very simple function signature as one of the visible examples, and possibly raising the descriptions of `&[T]` and `&mut [T]` towards the top of the page, may help clarify this.\r\n\r\n[slice type]: https://doc.rust-lang.org/nightly/std/primitive.slice.html\r\n\r\n### Reproducer\r\nWe tried the documentation page for the [slice type].\r\nWe expected to see an easy-to-read example of a function that accepts or returns slices.\r\nInstead, we scanned the page without finding a clear example of such, and found it easy to miss the existing examples.\r\nMay require being mildly tired or undercaffeinated to reproduce.\r\n\r\n### Docs Version\r\n```bash\r\n# at the time of this issue, this could use improvement for both the stable and nightly std API docs\r\nrustc 1.54.0-nightly (9111b8ae9 2021-05-26)\r\nrustc 1.52.1 (9bc8c42bb 2021-05-09)\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85950/timeline", "performed_via_github_app": null, "state_reason": null}