{"url": "https://api.github.com/repos/rust-lang/rust/issues/21390", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/21390/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/21390/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/21390/events", "html_url": "https://github.com/rust-lang/rust/issues/21390", "id": 54758666, "node_id": "MDU6SXNzdWU1NDc1ODY2Ng==", "number": 21390, "title": "ICE: aliasability violation with closure", "user": {"login": "e00E", "id": 1462179, "node_id": "MDQ6VXNlcjE0NjIxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1462179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/e00E", "html_url": "https://github.com/e00E", "followers_url": "https://api.github.com/users/e00E/followers", "following_url": "https://api.github.com/users/e00E/following{/other_user}", "gists_url": "https://api.github.com/users/e00E/gists{/gist_id}", "starred_url": "https://api.github.com/users/e00E/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/e00E/subscriptions", "organizations_url": "https://api.github.com/users/e00E/orgs", "repos_url": "https://api.github.com/users/e00E/repos", "events_url": "https://api.github.com/users/e00E/events{/privacy}", "received_events_url": "https://api.github.com/users/e00E/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-19T12:35:59Z", "updated_at": "2015-01-29T22:54:22Z", "closed_at": "2015-01-29T22:54:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "rustc --version --verbose:\n\n```\nrustc 1.0.0-nightly (f4f10dba2 2015-01-17 20:31:08 +0000)\nbinary: rustc\ncommit-hash: f4f10dba2975b51c2d2c92157018db3ac13d4d4a\ncommit-date: 2015-01-17 20:31:08 +0000\nhost: x86_64-pc-windows-gnu\nrelease: 1.0.0-nightly\n```\n\nBacktrace: (the offending line 111 is at the bottom of the source snippet below)\n\n```\nsource.rs:111:22: 111:78 error: internal compiler error: aliasability violation with closure\nsource.rs:111             try_consume( key, &|&: value| item.effects.effects.push( consume( value ) ) );\n                                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nnote: the compiler unexpectedly panicked. this is a bug.\nnote: we would appreciate a bug report: http://doc.rust-lang.org/complement-bugreport.html\nnote: run with `RUST_BACKTRACE=1` for a backtrace\nthread 'rustc' panicked at 'Box<Any>', C:\\bot\\slave\\nightly-dist-rustc-win-64\\build\\src\\libsyntax\\diagnostic.rs:126\n\nstack backtrace:\n   1:         0x69beb95b - sys::backtrace::write::h3574a74d3ac66ba0Dcu\n   2:         0x69bff6c3 - rt::unwind::register::hb202fe2a2fd24f5eyYz\n   3:         0x69b8363f - rt::unwind::begin_unwind_inner::h24cce2e033842dba7Vz\n   4:         0x6f89b58c - diagnostic::SpanHandler::span_bug::he7f492467f6ccae95qF\n   5:         0x6f89b543 - diagnostic::SpanHandler::span_bug::he7f492467f6ccae95qF\n   6:           0x591d82 - session::Session::span_bug::hbbd1fa2194e20c7cfBp\n   7:         0x705e170c - borrowck::move_data::MovePathIndex...std..cmp..PartialEq::ne::h1a3439607cb47b24mTd\n   8:         0x705e84bd - borrowck::gather_loans::GatherLoanCtxt<'a, 'tcx>.euv..Delegate<'tcx>::mutate::hdc7adcebb6b13c04Nsc\n   9:         0x705e66c9 - borrowck::gather_loans::GatherLoanCtxt<'a, 'tcx>.euv..Delegate<'tcx>::borrow::h4842d9e140720d87kqc\n  10:         0x705d92f3 - borrowck::check_loans::CheckLoanCtxt<'a, 'tcx>.euv..Delegate<'tcx>::decl_without_init::h9c67fbfec08849cbHoa\n  11:         0x705d5152 - borrowck::check_loans::CheckLoanCtxt<'a, 'tcx>.euv..Delegate<'tcx>::decl_without_init::h9c67fbfec08849cbHoa\n  12:         0x705d8ef6 - borrowck::check_loans::CheckLoanCtxt<'a, 'tcx>.euv..Delegate<'tcx>::decl_without_init::h9c67fbfec08849cbHoa\n  13:         0x705d4d13 - borrowck::check_loans::CheckLoanCtxt<'a, 'tcx>.euv..Delegate<'tcx>::decl_without_init::h9c67fbfec08849cbHoa\n  14:         0x705d8c17 - borrowck::check_loans::CheckLoanCtxt<'a, 'tcx>.euv..Delegate<'tcx>::decl_without_init::h9c67fbfec08849cbHoa\n  15:         0x705d51df - borrowck::check_loans::CheckLoanCtxt<'a, 'tcx>.euv..Delegate<'tcx>::decl_without_init::h9c67fbfec08849cbHoa\n  16:         0x705d8c17 - borrowck::check_loans::CheckLoanCtxt<'a, 'tcx>.euv..Delegate<'tcx>::decl_without_init::h9c67fbfec08849cbHoa\n  17:         0x705d3b11 - borrowck::check_loans::CheckLoanCtxt<'a, 'tcx>.euv..Delegate<'tcx>::decl_without_init::h9c67fbfec08849cbHoa\n  18:         0x705d3fc7 - borrowck::check_loans::CheckLoanCtxt<'a, 'tcx>.euv..Delegate<'tcx>::decl_without_init::h9c67fbfec08849cbHoa\n  19:         0x705d8c17 - borrowck::check_loans::CheckLoanCtxt<'a, 'tcx>.euv..Delegate<'tcx>::decl_without_init::h9c67fbfec08849cbHoa\n  20:         0x705d3c0a - borrowck::check_loans::CheckLoanCtxt<'a, 'tcx>.euv..Delegate<'tcx>::decl_without_init::h9c67fbfec08849cbHoa\n  21:         0x705fcc12 - borrowck::check_crate::hb708c27b837bb24bUIe\n  22:         0x705f9986 - borrowck::BorrowckCtxt<'a, 'tcx>.Visitor<'v>::visit_fn::h85e169569b3db6adOHe\n  23:         0x705fbb13 - borrowck::check_crate::hb708c27b837bb24bUIe\n\nCould not compile `DotA_Simulator`.\n```\n\nSource code (only the parts related to the problem):\n\n```\n...\nlet string = File::open( &Path::new( filename ) ).read_to_string().unwrap();\nlet json = json::from_str( string.as_slice() ).unwrap();\nlet object = json.as_object().unwrap();\n\nlet mut item = Item::new();\nitem.name = object[\"Name\".to_string()].as_string().unwrap().to_string();\nitem.cost = object[\"ItemCost\".to_string()].as_f64().unwrap();\n\n//get the corresponding f64 to a key\nlet get_f64 = |&: key: &str| -> f64 {\n    object.get( &key.to_string() ).unwrap().as_f64().unwrap()\n};\n\n//Checks if all keys are mapped\nlet contains_all = |&: keys: &[&str]| -> bool {\n    for k in keys.iter() {\n        if !object.contains_key( &k.to_string() ) { return false; }\n    }\n    true\n};\n//Consumes a value if its key exists.\nlet try_consume = |&: key: &str, consume: &Fn(f64)| {\n    match object.get(&key.to_string()) {\n        Some(ref json) => consume( json.as_f64().unwrap() ),\n        None => ()\n    };\n};\n{\n//Same as above but consume creates an Effect that gets pushed onto the item.\n//This is in a separate scope because the Closure captures item.effects.effects until it goes out of scope.\nlet try_consume_push = |&: key: &str, consume: &Fn(f64) -> Effect| {\n    try_consume( key, &|&: value| item.effects.effects.push( consume( value ) ) );\n};\n...\n```\n\nIf some info about my code matters:\nI have a json object from which I want to extract a bunch of values that are all f64 and which get turned into a struct called Effect depending on their key which are put into a struct called Item. To have less duplicate code I define a few helper closures that use the same json object, Item and eachother.\nThe closures take other closures as arguments which I pass by reference because the compiler complains about them not being sized otherwise.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/21390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/21390/timeline", "performed_via_github_app": null, "state_reason": "completed"}