{"url": "https://api.github.com/repos/rust-lang/rust/issues/106107", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106107/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106107/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106107/events", "html_url": "https://github.com/rust-lang/rust/issues/106107", "id": 1509910729, "node_id": "I_kwDOAAsO6M5Z_2jJ", "number": 106107, "title": "derived `PartialOrd::le` is non-optimal for 2-field struct of primitive integers", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-12-24T02:29:34Z", "updated_at": "2023-04-05T17:32:48Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This codegen test should pass: [comparison-operators-twofields.patch](https://github.com/rust-lang/rust/files/10297861/comparison-operators-twofields.patch) <https://play.rust-lang.org/?version=nightly&mode=release&edition=2021&gist=4c8846efffd0574ec44e60c3cffbe842>\r\n\r\nAnd it turns out that the derived `PartialOrd::lt` *does* pass that test\r\n```llvm\r\ndefine noundef zeroext i1 @check_lt(i16 %0, i16 %1, i16 %2, i16 %3) unnamed_addr #0 {\r\nstart:\r\n  %_6.i.i = icmp slt i16 %0, %2\r\n  %_9.i.i.not = icmp eq i16 %0, %2\r\n  %_6.i3.i = icmp ult i16 %1, %3\r\n  %4 = select i1 %_9.i.i.not, i1 %_6.i3.i, i1 %_6.i.i\r\n  ret i1 %4\r\n}\r\n```\r\nbut the derived `le`, `gt`, and `ge` do **not** pass it.\r\n```llvm\r\ndefine noundef zeroext i1 @check_gt(i16 %0, i16 %1, i16 %2, i16 %3) unnamed_addr #0 {\r\nstart:\r\n  %_6.i.i = icmp slt i16 %0, %2\r\n  %_9.i.i = icmp ne i16 %0, %2\r\n  %..i.i = zext i1 %_9.i.i to i8\r\n  %_3.0.i.i = select i1 %_6.i.i, i8 -1, i8 %..i.i\r\n  %4 = icmp eq i8 %_3.0.i.i, 0\r\n  %_6.i3.i = icmp ult i16 %1, %3\r\n  %_9.i4.i = icmp ne i16 %1, %3\r\n  %..i5.i = zext i1 %_9.i4.i to i8\r\n  %_3.0.i6.i = select i1 %_6.i3.i, i8 -1, i8 %..i5.i\r\n  %.0.i = select i1 %4, i8 %_3.0.i6.i, i8 %_3.0.i.i\r\n  %5 = icmp eq i8 %.0.i, 1\r\n  ret i1 %5\r\n}\r\n```\r\ninstead leaving in a whole bunch of unnecessary stuff.\r\n\r\nGiven the direction in #98655, we probably *don't* want to fix this by changing the derive.\r\n\r\nSo potential fixes could be changing our `Ord::cmp` implementation for integers (cc #105840), changing the default `PartialOrd::le` implementations (cc #106065), improved optimizations in LLVM (cc https://github.com/llvm/llvm-project/issues/59666), or more.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106107/timeline", "performed_via_github_app": null, "state_reason": null}