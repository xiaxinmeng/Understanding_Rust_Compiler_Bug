{"url": "https://api.github.com/repos/rust-lang/rust/issues/15966", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/15966/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/15966/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/15966/events", "html_url": "https://github.com/rust-lang/rust/issues/15966", "id": 38694808, "node_id": "MDU6SXNzdWUzODY5NDgwOA==", "number": 15966, "title": "Trait implementation for reference to trait causes stack overflow at runtime", "user": {"login": "devyn", "id": 10729, "node_id": "MDQ6VXNlcjEwNzI5", "avatar_url": "https://avatars.githubusercontent.com/u/10729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devyn", "html_url": "https://github.com/devyn", "followers_url": "https://api.github.com/users/devyn/followers", "following_url": "https://api.github.com/users/devyn/following{/other_user}", "gists_url": "https://api.github.com/users/devyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/devyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devyn/subscriptions", "organizations_url": "https://api.github.com/users/devyn/orgs", "repos_url": "https://api.github.com/users/devyn/repos", "events_url": "https://api.github.com/users/devyn/events{/privacy}", "received_events_url": "https://api.github.com/users/devyn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-07-25T03:36:19Z", "updated_at": "2015-03-12T12:14:21Z", "closed_at": "2015-03-12T12:14:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code produces a stack overflow at runtime, only when optimizations are turned off.\n\nThe behavior that occurs once optimizations are turned on is odd, too: \"called `Option::unwrap()` on a `None` value\" even though I don't see any way a None could possibly be produced, but presumably LLVM eliminates the recursive call to `testcase::&'a T.Tag::to_tag` somehow and the stack overflow doesn't occur anymore.\n\n``` rust\nuse std::sync::Arc;\n\npub trait Tag {\n  fn to_tag(&self) -> Option<Arc<String>>;\n}\n\nimpl Tag for Arc<String> {\n  fn to_tag(&self) -> Option<Arc<String>> {\n    Some(self.clone())\n  }\n}\n\nimpl Tag for String {\n  fn to_tag(&self) -> Option<Arc<String>> {\n    Some(Arc::new(self.clone()))\n  }\n}\n\nimpl<'a> Tag for &'a str {\n  fn to_tag(&self) -> Option<Arc<String>> {\n    Some(Arc::new(self.to_string()))\n  }\n}\n\nimpl<'a, T: Tag> Tag for &'a T {\n  fn to_tag(&self) -> Option<Arc<String>> {\n    self.to_tag()\n  }\n}\n\nimpl<T: Tag> Tag for Option<T> {\n  fn to_tag(&self) -> Option<Arc<String>> {\n    self.as_ref().and_then(|t| t.to_tag())\n  }\n}\n\nfn main() {\n  let tag = \"hello\".to_tag();\n\n  println!(\"{}\", *tag.as_ref().to_tag().unwrap())\n}\n```\n\nSnippet of gdb backtrace:\n\n```\n#0  0x000000000045561a in rust_stack_exhausted ()\n#1  0x00000000004050e1 in __morestack ()\n#2  0x0000000000404f61 in testcase::&'a T.Tag::to_tag (self=0x7fffffffc810) at testcase.rs:27\n#3  0x0000000000404f61 in testcase::&'a T.Tag::to_tag (self=0x7fffffffc810) at testcase.rs:27\n#4  0x0000000000404f61 in testcase::&'a T.Tag::to_tag (self=0x7fffffffc810) at testcase.rs:27\n...\n```\n\nObviously this can just be fixed by correcting that particular implementation to:\n\n``` rust\nimpl<'a, T: Tag> Tag for &'a T {\n  fn to_tag(&self) -> Option<Arc<String>> {\n    (**self).to_tag()\n  }\n}\n```\n\nbut I feel like the compiler should be able to detect this and either resolve the cycle or throw an error.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/15966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/15966/timeline", "performed_via_github_app": null, "state_reason": "completed"}