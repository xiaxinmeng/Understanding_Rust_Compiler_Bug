{"url": "https://api.github.com/repos/rust-lang/rust/issues/103212", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103212/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103212/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103212/events", "html_url": "https://github.com/rust-lang/rust/issues/103212", "id": 1413723553, "node_id": "I_kwDOAAsO6M5UQ7Wh", "number": 103212, "title": "Help message to use `U::try_from(t)` when use `U::from(t)` to expect `Result<U, E>`", "user": {"login": "TheAwiteb", "id": 59842932, "node_id": "MDQ6VXNlcjU5ODQyOTMy", "avatar_url": "https://avatars.githubusercontent.com/u/59842932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheAwiteb", "html_url": "https://github.com/TheAwiteb", "followers_url": "https://api.github.com/users/TheAwiteb/followers", "following_url": "https://api.github.com/users/TheAwiteb/following{/other_user}", "gists_url": "https://api.github.com/users/TheAwiteb/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheAwiteb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheAwiteb/subscriptions", "organizations_url": "https://api.github.com/users/TheAwiteb/orgs", "repos_url": "https://api.github.com/users/TheAwiteb/repos", "events_url": "https://api.github.com/users/TheAwiteb/events{/privacy}", "received_events_url": "https://api.github.com/users/TheAwiteb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-18T19:17:29Z", "updated_at": "2022-10-20T07:16:57Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Related to #103148\r\n\r\nThe issue is that there is no help message telling you that `Result<T, E>` is available in the trait `TryFrom` when you use `T::from` to receive `Result` (of course you have to make sure it is there first)\r\n\r\nGiven the following code: ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=1e82e2cfd989cd68f03106e5860124c9))\r\n\r\n```rust\r\nstruct Foo;\r\n\r\nimpl TryFrom<Foo> for i32 {\r\n    type Error = ();\r\n\r\n    fn try_from(_: Foo) -> Result<Self, Self::Error> {\r\n        Ok(2)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    // let num: Result<i32, _> = Foo.into(); // use try_into will fix this\r\n    let num: Result<i32, _> = i32::from(Foo); // use try_from will fix this\r\n\r\n    println!(\"{num:?}\");\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[[E0277]](https://doc.rust-lang.org/stable/error-index.html#E0277): the trait bound `i32: From<Foo>` is not satisfied\r\n  --> src/main.rs:15:31\r\n   |\r\n15 |     let num: Result<i32, _> = i32::from(Foo);\r\n   |                               ^^^^^^^^^ the trait `From<Foo>` is not implemented for `i32`\r\n   |\r\n   = help: the following other types implement trait `From<T>`:\r\n             <f32 as From<i16>>\r\n             <f32 as From<i8>>\r\n             <f32 as From<u16>>\r\n             <f32 as From<u8>>\r\n             <f64 as From<f32>>\r\n             <f64 as From<i16>>\r\n             <f64 as From<i32>>\r\n             <f64 as From<i8>>\r\n           and 67 others\r\n\r\nerror[[E0308]](https://doc.rust-lang.org/stable/error-index.html#E0308): mismatched types\r\n  --> src/main.rs:15:31\r\n   |\r\n15 |     let num: Result<i32, _> = i32::from(Foo);\r\n   |              --------------   ^^^^^^^^^^^^^^ expected enum `Result`, found `i32`\r\n   |              |\r\n   |              expected due to this\r\n   |\r\n   = note: expected enum `Result<i32, _>`\r\n              found type `i32`\r\nhelp: try wrapping the expression in a variant of `Result`\r\n   |\r\n15 |     let num: Result<i32, _> = Ok(i32::from(Foo));\r\n   |                               +++              +\r\n15 |     let num: Result<i32, _> = Err(i32::from(Foo));\r\n   |                               ++++              +\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\nerror[[E0277]](https://doc.rust-lang.org/stable/error-index.html#E0277): the trait bound `i32: From<Foo>` is not satisfied\r\n  --> src/main.rs:15:31\r\n   |\r\n15 |     let num: Result<i32, _> = i32::from(Foo);\r\n   |                               ^^^^^^^^^ the trait `From<Foo>` is not implemented for `i32`\r\n   |\r\n   = help: the following other types implement trait `From<T>`:\r\n             <f32 as From<i16>>\r\n             <f32 as From<i8>>\r\n             <f32 as From<u16>>\r\n             <f32 as From<u8>>\r\n             <f64 as From<f32>>\r\n             <f64 as From<i16>>\r\n             <f64 as From<i32>>\r\n             <f64 as From<i8>>\r\n           and 67 others\r\nhelp: `TryFrom<Foo>` is implemented for `i32`\r\n   |\r\n15 | let num: Result<i32, _> = i32::try_from(Foo));\r\n   |                                ~~~~~~~~\r\n\r\n\r\nerror[[E0308]](https://doc.rust-lang.org/stable/error-index.html#E0308): mismatched types\r\n  --> src/main.rs:15:31\r\n   |\r\n15 |     let num: Result<i32, _> = i32::from(Foo);\r\n   |              --------------   ^^^^^^^^^^^^^^ expected enum `Result`, found `i32`\r\n   |              |\r\n   |              expected due to this\r\n   |\r\n   = note: expected enum `Result<i32, _>`\r\n              found type `i32`\r\nhelp: try wrapping the expression in a variant of `Result`\r\n   |\r\n15 |     let num: Result<i32, _> = Ok(i32::from(Foo));\r\n   |                               +++              +\r\n15 |     let num: Result<i32, _> = Err(i32::from(Foo));\r\n   |                               ++++              +\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n\r\n\r\n<!-- TRIAGEBOT_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"TheAwiteb\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_END -->\r\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103212/timeline", "performed_via_github_app": null, "state_reason": null}