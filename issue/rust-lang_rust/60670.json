{"url": "https://api.github.com/repos/rust-lang/rust/issues/60670", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60670/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60670/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60670/events", "html_url": "https://github.com/rust-lang/rust/issues/60670", "id": 442243752, "node_id": "MDU6SXNzdWU0NDIyNDM3NTI=", "number": 60670, "title": "Tracking issue for existential lifetimes", "user": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-09T13:42:09Z", "updated_at": "2022-06-15T17:47:37Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a tracking issue for existential lifetimes.\r\n\r\n**Description:**\r\n\r\nAllow hiding a type (via `impl Trait`) that is invariant over some lifetime without explicitly mentioning the invariant lifetime.\r\n\r\nConsider the following:\r\n```rust\r\nimpl Trait<'b> for Cell<&'a u32> { }\r\n\r\nfn foo(x: Cell<&'x u32>) -> impl Trait<'y> where 'x: 'y { x }\r\n```\r\n\r\nThere is no reason this cannot be legal, although it is not permitted at present. We would want to translate the function signature internally into something like:\r\n```rust\r\nfn foo(x: Cell<&'x u32>) -> impl exists<'x: 'y> Trait<'y> where 'x: 'y { x }\r\n```\r\nAlthough it be noted there is no need for user-facing `exists<...>` syntax; only HIR and `ty` representations probably. The concrete type corresponding to `impl exists<'x: 'y> Trait<'y>` can this be soundly checked by the compiler at use site.\r\n\r\nNote, we still need to be careful to ban situations like those mentioned by @matthewjasper in https://github.com/rust-lang/rust/pull/59402. By actually embedding the existential lifetime in the type rather than simply doing a check when resolving the opaque type, we should be able to resolve these issues, however. One can view this solution as a \"compiler-internalised\" version of [the `Captures` marker trait solution](https://github.com/rust-lang/rust/pull/56047), in some sense.\r\n\r\n**Steps:**\r\n\r\n- [ ] Decide on exact semantics of existential lifetimes. Perhaps @nikomatsakis can briefly write up his thoughts here.\r\n- [ ] Implement the RFC (cc previous attempts https://github.com/rust-lang/rust/pull/57870 and https://github.com/rust-lang/rust/pull/59402, @nikomatsakis for mentoring instructions?)\r\n- [ ] Stabilization PR ([see instructions on rustc-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rust-lang.github.io/rustc-guide/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rust-lang.github.io/rustc-guide/stabilization_guide.html#documentation-prs\r\n\r\nCC @Centril @nikomatsakis @matthewjasper @cramertj ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60670/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60670/timeline", "performed_via_github_app": null, "state_reason": null}