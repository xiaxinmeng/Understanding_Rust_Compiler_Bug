{"url": "https://api.github.com/repos/rust-lang/rust/issues/66741", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66741/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66741/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66741/events", "html_url": "https://github.com/rust-lang/rust/issues/66741", "id": 528125563, "node_id": "MDU6SXNzdWU1MjgxMjU1NjM=", "number": 66741, "title": "Tracking issue for `handle_alloc_error` defaulting to panic (for no_std + liballoc)", "user": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 880020421, "node_id": "MDU6TGFiZWw4ODAwMjA0MjE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-embedded", "name": "WG-embedded", "color": "c2e0c6", "default": false, "description": "Of interest to the embedded Working Group"}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}, {"id": 3537211959, "node_id": "LA_kwDOAAsO6M7S1ZI3", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-impl-incomplete", "name": "S-tracking-impl-incomplete", "color": "4682b4", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 90, "created_at": "2019-11-25T14:31:34Z", "updated_at": "2022-12-22T15:36:32Z", "closed_at": "2022-12-17T00:04:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The proposal below was implemented in https://github.com/rust-lang/rust/pull/76448, feature-gated under `#![feature(default_alloc_error_handler)]`.\r\n\r\nIssues to resolve before stabilization:\r\n\r\n* [ ] Document the new behavior\r\n* [ ] Get some usage experience beyond a synthetic test case https://github.com/rust-lang/rust/issues/66741#issuecomment-706069713\r\n* [ ] The current implementation might have UB https://github.com/rust-lang/rust/pull/76448#discussion_r502293959 https://github.com/rust-lang/rust/issues/66741#issuecomment-706079813\r\n  > Removing that unwind attribute needs to be benchmarked as it could lead to many extra unwind edges\r\n\r\n\r\nInitial proposal:\r\n\r\n----\r\n\r\n## Summary\r\n\r\nThis issue is for getting consensus on a change initially proposed in the tracking issue for `#[alloc_error_handler]`: https://github.com/rust-lang/rust/issues/51540#issuecomment-553114657\r\n\r\nWhen no `#[alloc_error_handler]` is defined (which implies that `std` is not linked, since it [literally](https://github.com/rust-lang/rust/blob/582a4eaee6b3674a34aeefaa5ecad0207bac9b4b/src/libstd/alloc.rs#L204-L218) has such a handler), `alloc::alloc::handle_alloc_error` should default to calling `core::panic!` with a message identical to the one that `std` prints to stderr before aborting in that case.\r\n\r\nAlthough https://github.com/rust-lang/rust/issues/51540#issuecomment-556079840 suggested that a full RFC would not be necessary, this is loosely structured after the RFC template.\r\n\r\n\r\n## Background\r\n\r\nSee the Background section of [the sibling issue proposing stabilization of the attribute](https://github.com/rust-lang/rust/issues/66740).\r\n\r\n## Motivation\r\n\r\nAs of Rust 1.36, specifying an allocation error handler is the only requirement for using the `alloc` crate in `no_std` environments (i.e. without the `std` crate being also linked in the program) that cannot be fulfilled by users on the Stable release channel.\r\n\r\nRemoving this requirement by having a default behavior would allow:\r\n\r\n* `no_std` + `liballoc` applications to start running on the Stable channel\r\n* `no_std` applications that run on Stable to start using `liballoc`\r\n\r\n\r\n## Guide-level explanation\r\n\r\nWhen `std` *is* linked in an application, `alloc::alloc::handle_alloc_error` defaults to printing an error message to stderr and aborting the process.\r\n\r\nWhen `std` is *not* linked and no other [`#[alloc_error_handler]`](https://github.com/rust-lang/rust/issues/51540) is defined, `handle_alloc_error` defaults to panicking as if the following handler were defined:\r\n\r\n```rust\r\n#[alloc_error_handler]\r\nfn default_handler(layout: core::alloc::Layout) -> ! {\r\n    panic!(\"memory allocation of {} bytes failed\", layout.size())\r\n}\r\n```\r\n\r\n\r\n## Reference-level explanation\r\n\r\nThe implementation for this would be very similar to that of `#[global_allocator]`. (Links in the next two paragraphs go to that implementation.)\r\n\r\n`alloc::alloc::handle_alloc_error` is modified to [call](https://github.com/rust-lang/rust/blob/582a4eaee6b3674a34aeefaa5ecad0207bac9b4b/src/liballoc/alloc.rs#L84) an [`extern \"Rust\" { fn \u2026 }` declaration](https://github.com/rust-lang/rust/blob/582a4eaee6b3674a34aeefaa5ecad0207bac9b4b/src/liballoc/alloc.rs#L16-L23).\r\n\r\nThe definition of this function does not exist in Rust source code. Instead, it is [synthesized](https://github.com/rust-lang/rust/blob/582a4eaee6b3674a34aeefaa5ecad0207bac9b4b/src/librustc_codegen_llvm/allocator.rs) by the compiler [for \u201ctop-level\u201d compilations (executables, `cdylib`s, etc.) when `alloc` is in the crate dependency graph](https://github.com/rust-lang/rust/blob/582a4eaee6b3674a34aeefaa5ecad0207bac9b4b/src/librustc_codegen_ssa/base.rs#L553-L571). If an `#[alloc_error_handler]` is defined, the synthesized function calls it. If not, the synthesized function calls `alloc::alloc::default_error_handler` which is a new lang item. (Or [is\u00a0it?](https://github.com/rust-lang/rust/blob/582a4eaee6b3674a34aeefaa5ecad0207bac9b4b/src/libstd/alloc.rs#L236-L240))\r\n\r\nIn order to allow experimentation for this new default behavior, it should initially be gated behind the `#![feature(default_alloc_error_handler)]` feature flag. When no handler is defined, a call to the default is (at first) only synthesized if *any* of the crates in the dependency graph has that feature gate. If none of them do, [the current compilation error](https://github.com/rust-lang/rust/blob/582a4eaee6b3674a34aeefaa5ecad0207bac9b4b/src/librustc/middle/weak_lang_items.rs#L110-L111) continues to be emitted.\r\n\r\n\r\n## Alternatives\r\n\r\nThe status quo is that `no_std` + `alloc` requires Nightly.\r\n\r\n[Stabilizing `#[alloc_error_handler]`](https://github.com/rust-lang/rust/issues/66740) or some other mechanism for specifying this handler is another way to unlock the `no_std` + `liballoc` on Stable use case. This removes the initial motivation for coming up with this default behavior. However perhaps this default is still desirable? In a `no_std` environment where there is no process to abort, the allocation error handler will likely be very similar to the panic handler (which is already mandatory).\r\n\r\n<!-- TRIAGEBOT_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"haraldh\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_END -->\r\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66741/reactions", "total_count": 24, "+1": 15, "-1": 0, "laugh": 0, "hooray": 7, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66741/timeline", "performed_via_github_app": null, "state_reason": "completed"}