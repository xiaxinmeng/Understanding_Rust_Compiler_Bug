{"url": "https://api.github.com/repos/rust-lang/rust/issues/81931", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81931/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81931/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81931/events", "html_url": "https://github.com/rust-lang/rust/issues/81931", "id": 804720340, "node_id": "MDU6SXNzdWU4MDQ3MjAzNDA=", "number": 81931, "title": "repr(simd) does not align to Intel recs on x86_64", "user": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 55302148, "node_id": "MDU6TGFiZWw1NTMwMjE0OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86_64", "name": "O-x86_64", "color": "6e6ec0", "default": false, "description": "Target: x64 processors"}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-02-09T16:42:38Z", "updated_at": "2022-03-23T00:33:24Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code: ([Playground](https://play.rust-lang.org/?version=nightly&mode=release&edition=2018&gist=7368b80ff5ab55aed15bffdc34cbaad2)). The random inputs are mostly just to keep the compiler fairly \"honest\" and block optimizing away the instructions it would use.\r\n\r\n```rust\r\n#![feature(repr_simd)]\r\n#![feature(platform_intrinsics)]\r\nuse rand::random;\r\n\r\n#[derive(Debug)]\r\n#[repr(simd)]\r\nstruct f32x2(f32, f32);\r\n\r\nextern \"platform-intrinsic\" {\r\n    fn simd_shuffle2<T, U>(a: T, b: T, idx: [u32; 2]) -> U;\r\n}\r\n\r\nfn main() {\r\n    let x = f32x2(rand::random(), rand::random());\r\n    let y = f32x2(rand::random(), rand::random());\r\n    let z: f32x2 = unsafe { simd_shuffle2(x, y, [0, 2]) };\r\n    println!(\"Alignment is: {:?}\", std::mem::align_of::<f32x2>());\r\n    println!(\"Data is: {:?}\", z);\r\n}\r\n```\r\n\r\n> For best performance, the Streaming SIMD Extensions and Streaming SIMD Extensions 2 require their memory operands to be aligned to 16-byte boundaries.\r\n\r\nThus, I expected to see this happen: \r\n```\r\nAlignment is: 16\r\nData is: f32x2(0.12946808, 0.4856578)\r\n```\r\n\r\nInstead, this happened:\r\n```stdout\r\nAlignment is: 8\r\nData is: f32x2(0.12946808, 0.4856578)\r\n```\r\n\r\nThat does not appear to be the correct alignment to report for this type, unless I am misunderstanding something here.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.52.0-nightly (0fc6756b4 2021-02-08)\r\nbinary: rustc\r\ncommit-hash: 0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a\r\ncommit-date: 2021-02-08\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.52.0-nightly\r\nLLVM version: 11.0.1\r\n```\r\n\r\nI believe this is related to, but not exactly the same as, #27060. Apologies if this is a total duplicate, or if I am misunderstanding something here about what Rust means by \"alignment\", but after careful review with @calebzulawski, we started to arrive at the conclusion that something was off.\r\n\r\nHere is the generated assembly, as you can see, it uses multiple SSE instructions, including `movaps`, an aligned load, but I haven't exhaustively analyzed it so I can't immediately tell if actual alignment requirements are being adhered to here and I am just spooked by the seemingly misleading information.\r\n<details><summary>x86_64 Assembly</summary>\r\n\r\n```asm\r\nstd::sys_common::backtrace::__rust_begin_short_backtrace: # @std::sys_common::backtrace::__rust_begin_short_backtrace\r\n# %bb.0:\r\n\tsub\trsp, 8\r\n\tcall\trdi\r\n\tmov\trax, rsp\r\n\t#APP\r\n\t#NO_APP\r\n\tpop\trax\r\n\tret\r\n                                        # -- End function\r\n\r\nstd::rt::lang_start: # @std::rt::lang_start\r\n# %bb.0:\r\n\tsub\trsp, 8\r\n\tmov\trcx, rdx\r\n\tmov\trdx, rsi\r\n\tmov\tqword ptr [rsp], rdi\r\n\tlea\trsi, [rip + .L__unnamed_1]\r\n\tmov\trdi, rsp\r\n\tcall\tqword ptr [rip + std::rt::lang_start_internal@GOTPCREL]\r\n\tpop\trcx\r\n\tret\r\n                                        # -- End function\r\n\r\nstd::rt::lang_start::{{closure}}: # @\"std::rt::lang_start::{{closure}}\"\r\n# %bb.0:\r\n\tsub\trsp, 8\r\n\tmov\trdi, qword ptr [rdi]\r\n\tcall\tstd::sys_common::backtrace::__rust_begin_short_backtrace\r\n\txor\teax, eax\r\n\tpop\trcx\r\n\tret\r\n                                        # -- End function\r\n\r\n<&T as core::fmt::Debug>::fmt: # @\"<&T as core::fmt::Debug>::fmt\"\r\n# %bb.0:\r\n\tmov\trdi, qword ptr [rdi]\r\n\tjmp\tqword ptr [rip + core::fmt::float::<impl core::fmt::Debug for f32>::fmt@GOTPCREL] # TAILCALL\r\n                                        # -- End function\r\n\r\ncore::fmt::num::<impl core::fmt::Debug for usize>::fmt: # @\"core::fmt::num::<impl core::fmt::Debug for usize>::fmt\"\r\n# %bb.0:\r\n\tpush\tr14\r\n\tpush\trbx\r\n\tsub\trsp, 8\r\n\tmov\trbx, rsi\r\n\tmov\tr14, rdi\r\n\tmov\trdi, rsi\r\n\tcall\tqword ptr [rip + core::fmt::Formatter::debug_lower_hex@GOTPCREL]\r\n\ttest\tal, al\r\n\tje\t.LBB4_1\r\n# %bb.3:\r\n\tmov\trdi, r14\r\n\tmov\trsi, rbx\r\n\tadd\trsp, 8\r\n\tpop\trbx\r\n\tpop\tr14\r\n\tjmp\tqword ptr [rip + core::fmt::num::<impl core::fmt::LowerHex for usize>::fmt@GOTPCREL] # TAILCALL\r\n\r\n.LBB4_1:\r\n\tmov\trdi, rbx\r\n\tcall\tqword ptr [rip + core::fmt::Formatter::debug_upper_hex@GOTPCREL]\r\n\tmov\trdi, r14\r\n\tmov\trsi, rbx\r\n\tadd\trsp, 8\r\n\ttest\tal, al\r\n\tje\t.LBB4_2\r\n# %bb.4:\r\n\tpop\trbx\r\n\tpop\tr14\r\n\tjmp\tqword ptr [rip + core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt@GOTPCREL] # TAILCALL\r\n\r\n.LBB4_2:\r\n\tpop\trbx\r\n\tpop\tr14\r\n\tjmp\tqword ptr [rip + core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt@GOTPCREL] # TAILCALL\r\n                                        # -- End function\r\n\r\ncore::ops::function::FnOnce::call_once{{vtable.shim}}: # @\"core::ops::function::FnOnce::call_once{{vtable.shim}}\"\r\n# %bb.0:\r\n\tsub\trsp, 8\r\n\tmov\trdi, qword ptr [rdi]\r\n\tcall\tstd::sys_common::backtrace::__rust_begin_short_backtrace\r\n\txor\teax, eax\r\n\tpop\trcx\r\n\tret\r\n                                        # -- End function\r\n\r\ncore::ptr::drop_in_place<&f32>: # @\"core::ptr::drop_in_place<&f32>\"\r\n# %bb.0:\r\n\tret\r\n                                        # -- End function\r\n\r\ncore::ptr::drop_in_place<rand::rngs::thread::ThreadRng>: # @\"core::ptr::drop_in_place<rand::rngs::thread::ThreadRng>\"\r\n# %bb.0:\r\n\tmov\trax, qword ptr [rdi]\r\n\tadd\tqword ptr [rax], -1\r\n\tmov\trax, qword ptr [rdi]\r\n\tcmp\tqword ptr [rax], 0\r\n\tjne\t.LBB7_2\r\n# %bb.1:\r\n\tadd\tqword ptr [rax + 8], -1\r\n\tmov\trdi, qword ptr [rdi]\r\n\tcmp\tqword ptr [rdi + 8], 0\r\n\tje\t.LBB7_3\r\n\r\n.LBB7_2:\r\n\tret\r\n\r\n.LBB7_3:\r\n\tmov\tesi, 368\r\n\tmov\tedx, 16\r\n\tjmp\tqword ptr [rip + __rust_dealloc@GOTPCREL] # TAILCALL\r\n                                        # -- End function\r\n\r\nrand::rngs::adapter::reseeding::ReseedingCore<R,Rsdr>::reseed_and_generate: # @\"rand::rngs::adapter::reseeding::ReseedingCore<R,Rsdr>::reseed_and_generate\"\r\n# %bb.0:\r\n\tpush\tr15\r\n\tpush\tr14\r\n\tpush\tr13\r\n\tpush\tr12\r\n\tpush\trbx\r\n\tsub\trsp, 160\r\n\tmov\tr15, rdx\r\n\tmov\tr14, rsi\r\n\tmov\trbx, rdi\r\n\txorps\txmm0, xmm0\r\n\tmovaps\txmmword ptr [rsp + 16], xmm0\r\n\tmovaps\txmmword ptr [rsp], xmm0\r\n\tmov\trsi, rsp\r\n\tmov\tedx, 32\r\n\tcall\tqword ptr [rip + <rand_core::os::OsRng as rand_core::RngCore>::try_fill_bytes@GOTPCREL]\r\n\ttest\trax, rax\r\n\tje\t.LBB8_1\r\n# %bb.2:\r\n\tmov\tr12, rax\r\n\tmov\tr13, rdx\r\n\tmov\trdi, rax\r\n\tcall\tqword ptr [rdx]\r\n# %bb.3:\r\n\tmov\trsi, qword ptr [r13 + 8]\r\n\ttest\trsi, rsi\r\n\tje\t.LBB8_5\r\n# %bb.4:\r\n\tmov\trdx, qword ptr [r13 + 16]\r\n\tmov\trdi, r12\r\n\tcall\tqword ptr [rip + __rust_dealloc@GOTPCREL]\r\n\tjmp\t.LBB8_5\r\n\r\n.LBB8_1:\r\n\tmovaps\txmm0, xmmword ptr [rsp]\r\n\tmovaps\txmm1, xmmword ptr [rsp + 16]\r\n\tmovaps\txmmword ptr [rsp + 144], xmm1\r\n\tmovaps\txmmword ptr [rsp + 128], xmm0\r\n\tlea\trdx, [rip + .L__unnamed_2]\r\n\tlea\trdi, [rsp + 80]\r\n\tlea\trsi, [rsp + 128]\r\n\tmov\tecx, 8\r\n\tcall\tqword ptr [rip + rand_chacha::guts::init_chacha@GOTPCREL]\r\n\tmov\trax, qword ptr [rsp + 80]\r\n\tmov\trcx, qword ptr [rsp + 120]\r\n\tmov\tqword ptr [rsp + 64], rcx\r\n\tmovups\txmm0, xmmword ptr [rsp + 104]\r\n\tmovaps\txmmword ptr [rsp + 48], xmm0\r\n\tmovups\txmm0, xmmword ptr [rsp + 88]\r\n\tmovaps\txmmword ptr [rsp + 32], xmm0\r\n\tmov\trcx, qword ptr [rbx + 48]\r\n\tmov\tqword ptr [rbx + 56], rcx\r\n\tmov\tqword ptr [rbx], rax\r\n\tmovaps\txmm0, xmmword ptr [rsp + 32]\r\n\tmovups\txmmword ptr [rbx + 8], xmm0\r\n\tmovaps\txmm0, xmmword ptr [rsp + 48]\r\n\tmovups\txmmword ptr [rbx + 24], xmm0\r\n\tmov\trax, qword ptr [rsp + 64]\r\n\tmov\tqword ptr [rbx + 40], rax\r\n\r\n.LBB8_5:\r\n\tmov\tqword ptr [rbx + 64], r15\r\n\tmov\trax, -256\r\n\tadd\trax, qword ptr [rbx + 48]\r\n\tmov\tqword ptr [rbx + 56], rax\r\n\tmov\trdi, rbx\r\n\tmov\tesi, 6\r\n\tmov\trdx, r14\r\n\tcall\tqword ptr [rip + rand_chacha::guts::refill_wide@GOTPCREL]\r\n\tadd\trsp, 160\r\n\tpop\trbx\r\n\tpop\tr12\r\n\tpop\tr13\r\n\tpop\tr14\r\n\tpop\tr15\r\n\tret\r\n\tmov\trbx, rax\r\n\tmov\trdi, r12\r\n\tmov\trsi, r13\r\n\tcall\talloc::alloc::box_free\r\n\tmov\trdi, rbx\r\n\tcall\t_Unwind_Resume@PLT\r\n\tud2\r\n                                        # -- End function\r\n\r\nalloc::alloc::box_free: # @alloc::alloc::box_free\r\n# %bb.0:\r\n\tmov\trax, rsi\r\n\tmov\trsi, qword ptr [rsi + 8]\r\n\ttest\trsi, rsi\r\n\tje\t.LBB9_1\r\n# %bb.2:\r\n\tmov\trdx, qword ptr [rax + 16]\r\n\tjmp\tqword ptr [rip + __rust_dealloc@GOTPCREL] # TAILCALL\r\n\r\n.LBB9_1:\r\n\tret\r\n                                        # -- End function\r\n\r\n.LCPI10_0:\r\n\t.long\t0x33800000                      # float 5.96046448E-8\r\n\r\nplayground::main: # @playground::main\r\n# %bb.0:\r\n\tpush\trbp\r\n\tpush\tr15\r\n\tpush\tr14\r\n\tpush\trbx\r\n\tsub\trsp, 72\r\n\tcall\tqword ptr [rip + rand::rngs::thread::thread_rng@GOTPCREL]\r\n\tmov\trbx, rax\r\n\tmov\tr14, rax\r\n\tmov\tqword ptr [rsp], rax\r\n\tmov\trax, qword ptr [rax + 16]\r\n\tcmp\trax, 64\r\n\tjb\t.LBB10_7\r\n# %bb.1:\r\n\tcall\tqword ptr [rip + rand::rngs::adapter::reseeding::fork::get_fork_counter@GOTPCREL]\r\n# %bb.2:\r\n\tlea\trdx, [rbx + 24]\r\n\tadd\trbx, 288\r\n\tmov\trcx, qword ptr [r14 + 344]\r\n\ttest\trcx, rcx\r\n\tjle\t.LBB10_4\r\n# %bb.3:\r\n\tcmp\tqword ptr [r14 + 352], rax\r\n\tjs\t.LBB10_4\r\n# %bb.5:\r\n\tadd\trcx, -256\r\n\tmov\tqword ptr [r14 + 344], rcx\r\n\tmov\trdi, rbx\r\n\tmov\tesi, 6\r\n\tcall\tqword ptr [rip + rand_chacha::guts::refill_wide@GOTPCREL]\r\n\tjmp\t.LBB10_6\r\n\r\n.LBB10_4:\r\n\tmov\trdi, rbx\r\n\tmov\trsi, rdx\r\n\tmov\trdx, rax\r\n\tcall\trand::rngs::adapter::reseeding::ReseedingCore<R,Rsdr>::reseed_and_generate\r\n\r\n.LBB10_6:\r\n\tmov\tqword ptr [r14 + 16], 0\r\n\txor\teax, eax\r\n\r\n.LBB10_7:\r\n\tmov\tr15d, dword ptr [r14 + 4*rax + 24]\r\n\tadd\trax, 1\r\n\tmov\tqword ptr [r14 + 16], rax\r\n\tadd\tqword ptr [r14], -1\r\n\tjne\t.LBB10_10\r\n# %bb.8:\r\n\tadd\tqword ptr [r14 + 8], -1\r\n\tjne\t.LBB10_10\r\n# %bb.9:\r\n\tmov\tesi, 368\r\n\tmov\tedx, 16\r\n\tmov\trdi, r14\r\n\tcall\tqword ptr [rip + __rust_dealloc@GOTPCREL]\r\n\r\n.LBB10_10:\r\n\tcall\tqword ptr [rip + rand::rngs::thread::thread_rng@GOTPCREL]\r\n\tmov\trbx, rax\r\n\tmov\tqword ptr [rsp], rax\r\n\tmov\trax, qword ptr [rax + 16]\r\n\tcmp\trax, 64\r\n\tjb\t.LBB10_19\r\n# %bb.11:\r\n\tcall\tqword ptr [rip + rand::rngs::adapter::reseeding::fork::get_fork_counter@GOTPCREL]\r\n# %bb.12:\r\n\tlea\trdx, [rbx + 24]\r\n\tmov\trdi, rbx\r\n\tadd\trdi, 288\r\n\tmov\trcx, qword ptr [rbx + 344]\r\n\ttest\trcx, rcx\r\n\tjle\t.LBB10_14\r\n# %bb.13:\r\n\tcmp\tqword ptr [rbx + 352], rax\r\n\tjs\t.LBB10_14\r\n# %bb.17:\r\n\tadd\trcx, -256\r\n\tmov\tqword ptr [rbx + 344], rcx\r\n\tmov\tesi, 6\r\n\tcall\tqword ptr [rip + rand_chacha::guts::refill_wide@GOTPCREL]\r\n\tjmp\t.LBB10_18\r\n\r\n.LBB10_14:\r\n\tmov\trsi, rdx\r\n\tmov\trdx, rax\r\n\tcall\trand::rngs::adapter::reseeding::ReseedingCore<R,Rsdr>::reseed_and_generate\r\n\r\n.LBB10_18:\r\n\tmov\tqword ptr [rbx + 16], 0\r\n\txor\teax, eax\r\n\r\n.LBB10_19:\r\n\tadd\trax, 1\r\n\tmov\tqword ptr [rbx + 16], rax\r\n\tadd\tqword ptr [rbx], -1\r\n\tjne\t.LBB10_22\r\n# %bb.20:\r\n\tadd\tqword ptr [rbx + 8], -1\r\n\tjne\t.LBB10_22\r\n# %bb.21:\r\n\tmov\tesi, 368\r\n\tmov\tedx, 16\r\n\tmov\trdi, rbx\r\n\tcall\tqword ptr [rip + __rust_dealloc@GOTPCREL]\r\n\r\n.LBB10_22:\r\n\tcall\tqword ptr [rip + rand::rngs::thread::thread_rng@GOTPCREL]\r\n\tmov\trbx, rax\r\n\tmov\tqword ptr [rsp], rax\r\n\tmov\trax, qword ptr [rax + 16]\r\n\tcmp\trax, 64\r\n\tjb\t.LBB10_29\r\n# %bb.23:\r\n\tcall\tqword ptr [rip + rand::rngs::adapter::reseeding::fork::get_fork_counter@GOTPCREL]\r\n# %bb.24:\r\n\tlea\trdx, [rbx + 24]\r\n\tmov\trdi, rbx\r\n\tadd\trdi, 288\r\n\tmov\trcx, qword ptr [rbx + 344]\r\n\ttest\trcx, rcx\r\n\tjle\t.LBB10_26\r\n# %bb.25:\r\n\tcmp\tqword ptr [rbx + 352], rax\r\n\tjs\t.LBB10_26\r\n# %bb.27:\r\n\tadd\trcx, -256\r\n\tmov\tqword ptr [rbx + 344], rcx\r\n\tmov\tesi, 6\r\n\tcall\tqword ptr [rip + rand_chacha::guts::refill_wide@GOTPCREL]\r\n\tjmp\t.LBB10_28\r\n\r\n.LBB10_26:\r\n\tmov\trsi, rdx\r\n\tmov\trdx, rax\r\n\tcall\trand::rngs::adapter::reseeding::ReseedingCore<R,Rsdr>::reseed_and_generate\r\n\r\n.LBB10_28:\r\n\tmov\tqword ptr [rbx + 16], 0\r\n\txor\teax, eax\r\n\r\n.LBB10_29:\r\n\tmov\tebp, dword ptr [rbx + 4*rax + 24]\r\n\tadd\trax, 1\r\n\tmov\tqword ptr [rbx + 16], rax\r\n\tadd\tqword ptr [rbx], -1\r\n\tjne\t.LBB10_32\r\n# %bb.30:\r\n\tadd\tqword ptr [rbx + 8], -1\r\n\tjne\t.LBB10_32\r\n# %bb.31:\r\n\tmov\tesi, 368\r\n\tmov\tedx, 16\r\n\tmov\trdi, rbx\r\n\tcall\tqword ptr [rip + __rust_dealloc@GOTPCREL]\r\n\r\n.LBB10_32:\r\n\tcall\tqword ptr [rip + rand::rngs::thread::thread_rng@GOTPCREL]\r\n\tmov\trbx, rax\r\n\tmov\tqword ptr [rsp], rax\r\n\tmov\trax, qword ptr [rax + 16]\r\n\tcmp\trax, 64\r\n\tjb\t.LBB10_39\r\n# %bb.33:\r\n\tcall\tqword ptr [rip + rand::rngs::adapter::reseeding::fork::get_fork_counter@GOTPCREL]\r\n# %bb.34:\r\n\tlea\trdx, [rbx + 24]\r\n\tmov\trdi, rbx\r\n\tadd\trdi, 288\r\n\tmov\trcx, qword ptr [rbx + 344]\r\n\ttest\trcx, rcx\r\n\tjle\t.LBB10_36\r\n# %bb.35:\r\n\tcmp\tqword ptr [rbx + 352], rax\r\n\tjs\t.LBB10_36\r\n# %bb.37:\r\n\tadd\trcx, -256\r\n\tmov\tqword ptr [rbx + 344], rcx\r\n\tmov\tesi, 6\r\n\tcall\tqword ptr [rip + rand_chacha::guts::refill_wide@GOTPCREL]\r\n\tjmp\t.LBB10_38\r\n\r\n.LBB10_36:\r\n\tmov\trsi, rdx\r\n\tmov\trdx, rax\r\n\tcall\trand::rngs::adapter::reseeding::ReseedingCore<R,Rsdr>::reseed_and_generate\r\n\r\n.LBB10_38:\r\n\tmov\tqword ptr [rbx + 16], 0\r\n\txor\teax, eax\r\n\r\n.LBB10_39:\r\n\tadd\trax, 1\r\n\tmov\tqword ptr [rbx + 16], rax\r\n\tadd\tqword ptr [rbx], -1\r\n\tjne\t.LBB10_42\r\n# %bb.40:\r\n\tadd\tqword ptr [rbx + 8], -1\r\n\tjne\t.LBB10_42\r\n# %bb.41:\r\n\tmov\tesi, 368\r\n\tmov\tedx, 16\r\n\tmov\trdi, rbx\r\n\tcall\tqword ptr [rip + __rust_dealloc@GOTPCREL]\r\n\r\n.LBB10_42:\r\n\tshr\tebp, 8\r\n\tcvtsi2ss\txmm0, ebp\r\n\tshr\tr15d, 8\r\n\tcvtsi2ss\txmm1, r15d\r\n\tmovss\txmm2, dword ptr [rip + .LCPI10_0] # xmm2 = mem[0],zero,zero,zero\r\n\tmulss\txmm0, xmm2\r\n\tmulss\txmm1, xmm2\r\n\tunpcklps\txmm1, xmm0                      # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]\r\n\tmovlps\tqword ptr [rsp + 64], xmm1\r\n\tlea\trax, [rip + .L__unnamed_3]\r\n\tmov\tqword ptr [rsp + 48], rax\r\n\tlea\trax, [rip + core::fmt::num::<impl core::fmt::Debug for usize>::fmt]\r\n\tmov\tqword ptr [rsp + 56], rax\r\n\tlea\trax, [rip + .L__unnamed_4]\r\n\tmov\tqword ptr [rsp], rax\r\n\tmov\tqword ptr [rsp + 8], 2\r\n\tmov\tqword ptr [rsp + 16], 0\r\n\tlea\trbx, [rsp + 48]\r\n\tmov\tqword ptr [rsp + 32], rbx\r\n\tmov\tqword ptr [rsp + 40], 1\r\n\tmov\trbp, qword ptr [rip + std::io::stdio::_print@GOTPCREL]\r\n\tmov\trdi, rsp\r\n\tcall\trbp\r\n\tlea\trax, [rsp + 64]\r\n\tmov\tqword ptr [rsp + 48], rax\r\n\tlea\trax, [rip + <playground::f32x2 as core::fmt::Debug>::fmt]\r\n\tmov\tqword ptr [rsp + 56], rax\r\n\tlea\trax, [rip + .L__unnamed_5]\r\n\tmov\tqword ptr [rsp], rax\r\n\tmov\tqword ptr [rsp + 8], 2\r\n\tmov\tqword ptr [rsp + 16], 0\r\n\tmov\tqword ptr [rsp + 32], rbx\r\n\tmov\tqword ptr [rsp + 40], 1\r\n\tmov\trdi, rsp\r\n\tcall\trbp\r\n\tadd\trsp, 72\r\n\tpop\trbx\r\n\tpop\tr14\r\n\tpop\tr15\r\n\tpop\trbp\r\n\tret\r\n\tjmp\t.LBB10_16\r\n\tjmp\t.LBB10_16\r\n\tjmp\t.LBB10_16\r\n\r\n.LBB10_16:\r\n\tmov\trbx, rax\r\n\tmov\trdi, rsp\r\n\tcall\tcore::ptr::drop_in_place<rand::rngs::thread::ThreadRng>\r\n\tmov\trdi, rbx\r\n\tcall\t_Unwind_Resume@PLT\r\n\tud2\r\n                                        # -- End function\r\n\r\n<playground::f32x2 as core::fmt::Debug>::fmt: # @\"<playground::f32x2 as core::fmt::Debug>::fmt\"\r\n# %bb.0:\r\n\tpush\tr15\r\n\tpush\tr14\r\n\tpush\tr12\r\n\tpush\trbx\r\n\tsub\trsp, 40\r\n\tmov\trbx, rdi\r\n\tlea\tr15, [rdi + 4]\r\n\tlea\trdx, [rip + .L__unnamed_6]\r\n\tlea\tr14, [rsp + 16]\r\n\tmov\tecx, 5\r\n\tmov\trdi, r14\r\n\tcall\tqword ptr [rip + core::fmt::Formatter::debug_tuple@GOTPCREL]\r\n\tmov\tqword ptr [rsp + 8], rbx\r\n\tlea\trbx, [rip + .L__unnamed_7]\r\n\tmov\tr12, qword ptr [rip + core::fmt::builders::DebugTuple::field@GOTPCREL]\r\n\tlea\trsi, [rsp + 8]\r\n\tmov\trdi, r14\r\n\tmov\trdx, rbx\r\n\tcall\tr12\r\n\tmov\tqword ptr [rsp + 8], r15\r\n\tlea\trsi, [rsp + 8]\r\n\tmov\trdi, r14\r\n\tmov\trdx, rbx\r\n\tcall\tr12\r\n\tmov\trdi, r14\r\n\tcall\tqword ptr [rip + core::fmt::builders::DebugTuple::finish@GOTPCREL]\r\n\tadd\trsp, 40\r\n\tpop\trbx\r\n\tpop\tr12\r\n\tpop\tr14\r\n\tpop\tr15\r\n\tret\r\n                                        # -- End function\r\n\r\nmain:                                   # @main\r\n# %bb.0:\r\n\tsub\trsp, 8\r\n\tmov\trcx, rsi\r\n\tmovsxd\trdx, edi\r\n\tlea\trax, [rip + playground::main]\r\n\tmov\tqword ptr [rsp], rax\r\n\tlea\trsi, [rip + .L__unnamed_1]\r\n\tmov\trdi, rsp\r\n\tcall\tqword ptr [rip + std::rt::lang_start_internal@GOTPCREL]\r\n                                        # kill: def $eax killed $eax killed $rax\r\n\tpop\trcx\r\n\tret\r\n                                        # -- End function\r\n\r\n.L__unnamed_1:\r\n\t.quad\tcore::ptr::drop_in_place<&f32>\r\n\t.quad\t8                               # 0x8\r\n\t.quad\t8                               # 0x8\r\n\t.quad\tstd::rt::lang_start::{{closure}}\r\n\t.quad\tstd::rt::lang_start::{{closure}}\r\n\t.quad\tcore::ops::function::FnOnce::call_once{{vtable.shim}}\r\n\r\n.L__unnamed_2:\r\n\t.zero\t8\r\n\r\n.L__unnamed_8:\r\n\t.ascii\t\"Alignment is: \"\r\n\r\n.L__unnamed_9:\r\n\t.byte\t10\r\n\r\n.L__unnamed_4:\r\n\t.quad\t.L__unnamed_8\r\n\t.asciz\t\"\\016\\000\\000\\000\\000\\000\\000\"\r\n\t.quad\t.L__unnamed_9\r\n\t.asciz\t\"\\001\\000\\000\\000\\000\\000\\000\"\r\n\r\n.L__unnamed_3:\r\n\t.asciz\t\"\\b\\000\\000\\000\\000\\000\\000\"\r\n\r\n.L__unnamed_10:\r\n\t.ascii\t\"Data is: \"\r\n\r\n.L__unnamed_5:\r\n\t.quad\t.L__unnamed_10\r\n\t.asciz\t\"\\t\\000\\000\\000\\000\\000\\000\"\r\n\t.quad\t.L__unnamed_9\r\n\t.asciz\t\"\\001\\000\\000\\000\\000\\000\\000\"\r\n\r\n.L__unnamed_6:\r\n\t.ascii\t\"f32x2\"\r\n\r\n.L__unnamed_7:\r\n\t.quad\tcore::ptr::drop_in_place<&f32>\r\n\t.quad\t8                               # 0x8\r\n\t.quad\t8                               # 0x8\r\n\t.quad\t<&T as core::fmt::Debug>::fmt\r\n\r\n```\r\n\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81931/timeline", "performed_via_github_app": null, "state_reason": null}