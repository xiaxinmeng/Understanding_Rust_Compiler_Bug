{"url": "https://api.github.com/repos/rust-lang/rust/issues/73891", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73891/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73891/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73891/events", "html_url": "https://github.com/rust-lang/rust/issues/73891", "id": 648086037, "node_id": "MDU6SXNzdWU2NDgwODYwMzc=", "number": 73891, "title": "[Missed optimization?] Having many if branches that all check for Some(_) is slower than pre-destructuring the Some before the if section", "user": {"login": "arifd", "id": 2345750, "node_id": "MDQ6VXNlcjIzNDU3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2345750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arifd", "html_url": "https://github.com/arifd", "followers_url": "https://api.github.com/users/arifd/followers", "following_url": "https://api.github.com/users/arifd/following{/other_user}", "gists_url": "https://api.github.com/users/arifd/gists{/gist_id}", "starred_url": "https://api.github.com/users/arifd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arifd/subscriptions", "organizations_url": "https://api.github.com/users/arifd/orgs", "repos_url": "https://api.github.com/users/arifd/repos", "events_url": "https://api.github.com/users/arifd/events{/privacy}", "received_events_url": "https://api.github.com/users/arifd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-30T11:10:58Z", "updated_at": "2020-07-01T00:49:04Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "If you compile the following code in play.rust-lang.org to LLVM IR in release mode, it will generate 135 lines of LLVM code.\r\n```rust\r\npub fn has_start(board_idx: usize, start_idx: Option<usize>) -> Option<usize> {\r\n    match board_idx {\r\n        0 => {\r\n            if start_idx == Some(0) { return Some(0) };\r\n            if start_idx == Some(15) { return Some(3) };\r\n        }\r\n        1 => if start_idx == Some(1) { return Some(0) },\r\n        2 => if start_idx == Some(2) { return Some(0) },\r\n        3 => if start_idx == Some(3) { return Some(0) },\r\n        4 => {\r\n            if start_idx == Some(4) { return Some(0) };\r\n            if start_idx == Some(5) { return Some(1) };\r\n        }\r\n        5 => if start_idx == Some(14) { return Some(3) },\r\n        9 => if start_idx == Some(6) { return Some(1) },\r\n        10 => {\r\n            if start_idx == Some(13) { return Some(3) };\r\n            if start_idx == Some(12) { return Some(2) };\r\n        }\r\n        11 => if start_idx == Some(11) { return Some(2) },\r\n        12 => if start_idx == Some(10) { return Some(2) },\r\n        13 => if start_idx == Some(9) { return Some(2) },\r\n        14 => {\r\n            if start_idx == Some(8) { return Some(2) };\r\n            if start_idx == Some(7) { return Some(2) };\r\n        }\r\n        _ => { return None }\r\n    }\r\n    None\r\n}\r\n```\r\nHowever, if you pre-destructure the Some, as in the following example, you now generate only 109 lines of LLVM code.\r\n```rust\r\npub fn has_start(board_idx: usize, start_idx: Option<usize>) -> Option<usize> {\r\n    if let Some(start) = start_idx {\r\n        match board_idx {\r\n            0 => {\r\n                if start == 0 { return Some(0) };\r\n                if start == 15 { return Some(3) };\r\n            }\r\n            1 => if start == 1 { return Some(0) },\r\n            2 => if start == 2 { return Some(0) },\r\n            3 => if start == 3 { return Some(0) },\r\n            4 => {\r\n                if start == 4 { return Some(0) };\r\n                if start == 5 { return Some(1) };\r\n            }\r\n            5 => if start == 14 { return Some(3) },\r\n            9 => if start == 6 { return Some(1) },\r\n            10 => {\r\n                if start == 13 { return Some(3) };\r\n                if start == 12 { return Some(2) };\r\n            }\r\n            11 => if start == 11 { return Some(2) },\r\n            12 => if start == 10 { return Some(2) },\r\n            13 => if start == 9 { return Some(2) },\r\n            14 => {\r\n                if start == 8 { return Some(2) };\r\n                if start == 7 { return Some(2) };\r\n            }\r\n            _ => { return None }\r\n        }\r\n    }\r\n    None\r\n}\r\n```\r\nSeems like a relatively simple opportunity for optimisation behind the scenes?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73891/timeline", "performed_via_github_app": null, "state_reason": null}