{"url": "https://api.github.com/repos/rust-lang/rust/issues/21106", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/21106/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/21106/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/21106/events", "html_url": "https://github.com/rust-lang/rust/issues/21106", "id": 54236168, "node_id": "MDU6SXNzdWU1NDIzNjE2OA==", "number": 21106, "title": "Rust documentation does not document interaction between modules, scopes, and traits", "user": {"login": "arienmalec", "id": 1158918, "node_id": "MDQ6VXNlcjExNTg5MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1158918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arienmalec", "html_url": "https://github.com/arienmalec", "followers_url": "https://api.github.com/users/arienmalec/followers", "following_url": "https://api.github.com/users/arienmalec/following{/other_user}", "gists_url": "https://api.github.com/users/arienmalec/gists{/gist_id}", "starred_url": "https://api.github.com/users/arienmalec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arienmalec/subscriptions", "organizations_url": "https://api.github.com/users/arienmalec/orgs", "repos_url": "https://api.github.com/users/arienmalec/repos", "events_url": "https://api.github.com/users/arienmalec/events{/privacy}", "received_events_url": "https://api.github.com/users/arienmalec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-13T19:27:01Z", "updated_at": "2015-02-16T23:22:10Z", "closed_at": "2015-02-16T23:22:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Per issue #7643, methods implemented on traits are only searched when the trait can be searched in \"scope\". Per the close of issue #21049, that search \"scope\" is more narrowly defined: method search on implemented traits is only for traits that can be referenced without a module path. That is to say, a method defined as an implementation on a trait that can be referenced as`traits::Foo` will not be found, whereas the same method will be found if the trait can be referenced as `Foo` (see the example program in #21049.\n\nThis behavior is inconsistent with documentation. For example, the reference documentation 6.1.9 (http://doc.rust-lang.org/reference.html#traits) states \"All values that have implementations of this trait in scope can have their draw and bounding_box methods called, using value.bounding_box() syntax.\" implying that what matters is that the `impl` is reachable, whereas the compiler also demands that the trait be reachable.\n\nThe close of issue #21049 implies that there's a different definition of \"scope\" for traits; again, what seems to matter is that the trait be reachable without module qualification (again, as bare `Foo` rather than through `traits::Foo`). This requires `use` statements that import the name without qualification (`use traits::Foo;` or `use traits::{Foo,Bar,Baz};` rather than `use` statements that merely bring the module into scope (`use traits;`). This behavior does not seem to be documented.\n\nOutside of reference documentation, in the book and rustbyexample material it would be useful to document examples of this behavior in the documentation of traits.\n\nFinally, existing examples that implement traits should be changed to bring the trait into scope without module qualification. For example, the examples for implementing `std::fmt::Show` and `std::fmt::String` generally do so through a `use std::fmt;` statement, requiring reference as `fmt::String`. Fortunately, this example seems to work, either because the standard library follows different rules for trait method search, or because the `fmt` method implemented is called in a different way. Despite the fact that it works, it's confusing, because that approach will not work in other contexts.\n\nThis brings up a different issue: because of the trait method reference rules, a trait shouldn't be named any name that is already imported without qualification - `String` is therefore a bad trait name.\n\nI'd be happy to take a hand at cleaning up documentation, but I'll admit that I don't understand the way this **should** work (as indicated by my original bug report, I would assume that methods for implemented traits should be found so long as both the underlying trait and implementation are reachable  in scope, whether module qualified or not).\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/21106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/21106/timeline", "performed_via_github_app": null, "state_reason": "completed"}