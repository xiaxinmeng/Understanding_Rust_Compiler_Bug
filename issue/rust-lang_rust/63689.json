{"url": "https://api.github.com/repos/rust-lang/rust/issues/63689", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63689/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63689/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63689/events", "html_url": "https://github.com/rust-lang/rust/issues/63689", "id": 482013945, "node_id": "MDU6SXNzdWU0ODIwMTM5NDU=", "number": 63689, "title": "Transition rustc Parser to proc_macro token model", "user": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 27424086, "node_id": "MDU6TGFiZWwyNzQyNDA4Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-parser", "name": "A-parser", "color": "f7e101", "default": false, "description": "Area: The parsing of Rust source code to an AST."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-08-18T16:48:13Z", "updated_at": "2022-01-29T01:21:23Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, there are two different approaches for dealing with composite tokens like `>>` in rustc.\r\n\r\n1. Keep tokens in composed form, and split into pieces, `>` and `>`, when necessary.\r\n2. Keep tokens decomposed, with jointness information, and join tokens when necessary.\r\n\r\nAt the moment, the first approach is used by the parser, and the second approach is used by the proc_macro API. It would be good to move the parser to the decomposed approach as well, as it is somewhat more natural, more future-compatible (one can introduce new tokens) and having two of a thing is bad in itself!\r\n\r\nHere are some relevant bits of the code that handle composed model:\r\n\r\n* Composed tokens as produced by [rustc_lexer](https://github.com/rust-lang/rust/blob/71e2882973e63b9ddc837a61ac8631e6451d31a9/src/librustc_lexer/src/lib.rs#L271-L281)\r\n* Composed tokens preserved by the [token cooking](https://github.com/rust-lang/rust/blob/71e2882973e63b9ddc837a61ac8631e6451d31a9/src/libsyntax/parse/lexer/mod.rs#L306)\r\n* Here's the bit when we produce [a TokenTree](https://github.com/rust-lang/rust/blob/71e2882973e63b9ddc837a61ac8631e6451d31a9/src/libsyntax/parse/lexer/tokentrees.rs#L207-L210), consumed by the parser. Note that, although we are tracking jointness here, the tokens are composed.\r\n* Here's the bit of the parser which [decomposes](https://github.com/rust-lang/rust/blob/71e2882973e63b9ddc837a61ac8631e6451d31a9/src/libsyntax/parse/parser.rs#L700-L736) tokens on the fly.\r\n\r\nHere are the bits relevant to decomposed model:\r\n\r\n* Gluing tokens in [TokenStreamBuilder](https://github.com/rust-lang/rust/blob/71e2882973e63b9ddc837a61ac8631e6451d31a9/src/libsyntax/tokenstream.rs#L412-L429)\r\n* [Token::glue](https://github.com/rust-lang/rust/blob/71e2882973e63b9ddc837a61ac8631e6451d31a9/src/libsyntax/parse/token.rs#L554-L612)\r\n\r\nNote that the `tt` matcher in `macro_rules` eats one composed token, and this is affects language specification.\r\nThat is, when we transition to decomposed model, we'll need to fix [this code](https://github.com/rust-lang/rust/blob/71e2882973e63b9ddc837a61ac8631e6451d31a9/src/libsyntax/ext/tt/macro_parser.rs#L903-L905) to eat one *composed* token to maintain backwards compatibility.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63689/reactions", "total_count": 8, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63689/timeline", "performed_via_github_app": null, "state_reason": null}