{"url": "https://api.github.com/repos/rust-lang/rust/issues/69064", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69064/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69064/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69064/events", "html_url": "https://github.com/rust-lang/rust/issues/69064", "id": 563360856, "node_id": "MDU6SXNzdWU1NjMzNjA4NTY=", "number": 69064, "title": "Lifetime elision doesn't work right with nested self receivers. ", "user": {"login": "manuthambi", "id": 29098731, "node_id": "MDQ6VXNlcjI5MDk4NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/29098731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/manuthambi", "html_url": "https://github.com/manuthambi", "followers_url": "https://api.github.com/users/manuthambi/followers", "following_url": "https://api.github.com/users/manuthambi/following{/other_user}", "gists_url": "https://api.github.com/users/manuthambi/gists{/gist_id}", "starred_url": "https://api.github.com/users/manuthambi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/manuthambi/subscriptions", "organizations_url": "https://api.github.com/users/manuthambi/orgs", "repos_url": "https://api.github.com/users/manuthambi/repos", "events_url": "https://api.github.com/users/manuthambi/events{/privacy}", "received_events_url": "https://api.github.com/users/manuthambi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-11T17:24:51Z", "updated_at": "2021-09-19T13:27:20Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\nSeems like lifetime elision doesn't work quite right with nested self receivers. The error messages are also misleading. Of course this can be worked around by providing the annotation in the code\r\n\r\n\r\n```rust\r\nuse std::rc::Rc;\r\n\r\nstruct S {\r\n    val: String,\r\n}\r\n\r\nimpl S {\r\n    // error[E0623]: lifetime mismatch\r\n    //  --> src/lib.rs:9:9\r\n    //   |\r\n    // 8 |     fn rc1(self: &Rc<Self>, _s: &str) -> &str {\r\n    //   |                  ---------               ----\r\n    //   |                  |\r\n    //   |                  this parameter and the return type are declared with different lifetimes...\r\n    // 9 |         self.val.as_ref()\r\n    //   |         ^^^^^^^^^^^^^^^^^ ...but data from `self` is returned here\r\n    fn rc1(self: &Rc<Self>, _s: &str) -> &str {\r\n        self.val.as_ref()\r\n    }\r\n\r\n    //     error[E0106]: missing lifetime specifier\r\n    //   --> src/lib.rs:11:32\r\n    //    |\r\n    // 11 |     fn rc2(self: &Rc<Self>) -> &str {\r\n    //    |                                ^ help: consider giving it a 'static lifetime: `&'static`\r\n    //    |\r\n    //    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\r\n    fn rc2(self: &Rc<Self>) -> &str {\r\n        self.val.as_ref()\r\n    }\r\n\r\n\r\n    // Compiles fine\r\n    fn ref1(&self, _s: &str) -> &str {\r\n        self.val.as_ref()\r\n    }\r\n\r\n    // Compiles fine\r\n    fn ref2(&self) -> &str {\r\n        self.val.as_ref()\r\n    }\r\n}\r\n```\r\n\r\n#64325", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69064/timeline", "performed_via_github_app": null, "state_reason": null}