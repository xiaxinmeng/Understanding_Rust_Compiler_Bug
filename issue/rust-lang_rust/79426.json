{"url": "https://api.github.com/repos/rust-lang/rust/issues/79426", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79426/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79426/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79426/events", "html_url": "https://github.com/rust-lang/rust/issues/79426", "id": 751116008, "node_id": "MDU6SXNzdWU3NTExMTYwMDg=", "number": 79426, "title": "[ER] cartesian_product_array, permutations_array, combinations_array", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-11-25T21:03:10Z", "updated_at": "2020-11-28T16:01:45Z", "closed_at": "2020-11-28T16:01:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Now Rust is powerful enough to implement a generator like a (simplified version of) Python itertools.product:\r\nhttps://docs.python.org/3/library/itertools.html#itertools.product\r\n\r\nYou may want to add to Rust stdlib something like this, that has an API similar to that Python itertool function:\r\n\r\n```rust\r\n#![feature(min_const_generics, generator_trait, generators, array_map)]\r\n\r\nuse std::ops::{Generator, GeneratorState};\r\nuse std::pin::Pin;\r\n\r\nfn generator_to_iterator<G>(g: G) -> impl Iterator<Item = G::Yield>\r\nwhere G: Generator<Return = ()> + Unpin {\r\n    struct It<G>(G);\r\n\r\n    impl<G: Generator<Return = ()> + Unpin> Iterator for It<G> {\r\n        type Item = G::Yield;\r\n\r\n        fn next(&mut self) -> Option<Self::Item> {\r\n            match Pin::new(&mut self.0).resume(()) {\r\n                GeneratorState::Yielded(y) => Some(y),\r\n                GeneratorState::Complete(()) => None,\r\n            }\r\n        }\r\n    }\r\n\r\n    It(g)\r\n}\r\n\r\n\r\nfn cartesian_product_array<T, const N: usize, const REPEAT: usize>\r\n                          (data: &[T; N]) -> impl Iterator<Item=[&T; REPEAT]> + '_ {\r\n    generator_to_iterator(move || {\r\n        if N == 0 { return; }\r\n        let mut indexes = [0; REPEAT];\r\n\r\n        loop {\r\n            yield indexes.map(|i| &data[i]);\r\n            let mut j = REPEAT - 1;\r\n            loop {\r\n                indexes[j] += 1;\r\n                if indexes[j] < N { break; }\r\n                indexes[j] = 0;\r\n                if j == 0 { return; }\r\n                j -= 1;\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\n\r\nfn permutations_array<T, const N: usize>\r\n                     (data: &[T; N]) -> impl Iterator<Item=[&T; N]> {\r\n    generator_to_iterator(move || {\r\n        if N == 0 { return; }\r\n\r\n        let mut perm = [0_usize; N];\r\n        (0 .. N).for_each(|i| perm[i] = i);\r\n\r\n        loop {\r\n            let mut i = N - 1;\r\n\r\n            while perm[i - 1] >= perm[i] {\r\n                i -= 1;\r\n                if i < 1 { return; }\r\n            }\r\n\r\n            let mut j = N;\r\n            while perm[j - 1] <= perm[i - 1] { j -= 1; }\r\n\r\n            perm.swap(i - 1, j - 1);\r\n            i += 1;\r\n            j = N;\r\n            perm[i - 1 .. j].reverse();\r\n            yield perm.map(|i| &data[i]);\r\n        }\r\n    })\r\n}\r\n\r\n\r\nfn combinations_array<T, const N: usize, const K: usize>\r\n                     (data: &[T; N]) -> impl Iterator<Item=[&T; K]> {\r\n    generator_to_iterator(move || {\r\n        if N == 0 { return; }\r\n\r\n        let mut comb = [0_usize; K];\r\n        (0 .. K).for_each(|i| comb[i] = i);\r\n\r\n        while comb[K - 1] < N {\r\n            yield comb.map(|i| &data[i]);\r\n\r\n            let mut t = K - 1;\r\n            while t != 0 && comb[t] == N - K + t {\r\n                t -= 1\r\n            }\r\n            comb[t] += 1;\r\n            for i in t + 1 .. K {\r\n                comb[i] = comb[i - 1] + 1;\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\n\r\nfn main() {\r\n    for [&c0, &c1, &c2, &c3, &c4] in cartesian_product_array(&['A', 'B', 'C', 'D']) {\r\n        println!(\"{:?}\", [c0, c1, c2, c3, c4]);\r\n    }\r\n    println!();\r\n\r\n    for [&p0, &p1, &p2] in permutations_array(&[10, 20, 30]) {\r\n        println!(\"{:?}\", [p0, p1, p2]);\r\n    }\r\n    println!();\r\n\r\n    for [&p0, &p1, &p2] in combinations_array(&['a', 'b', 'c', 'd', 'e']) {\r\n        println!(\"{:?}\", [p0, p1, p2]);\r\n    }\r\n}\r\n```\r\n\r\nThis is isn't maximally flexible because REPEAT is a compile-time value and probably it's not maximally fast. But from my experience the size of windows and chunks are most times compile-time constants. And this has a very handy usage syntax, and it avoids heap usage.\r\n\r\nThe Python API allows to use one or more input sequences, instead of REPEAT, but for simplicity this takes only one slice and always use REPEAT.\r\n\r\nEdit: added permutations and combinations. Modified the input, now it's always an array instead of a slice. This makes the code a little less flexible but it helps type inference.", "closed_by": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79426/timeline", "performed_via_github_app": null, "state_reason": "completed"}