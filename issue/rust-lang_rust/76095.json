{"url": "https://api.github.com/repos/rust-lang/rust/issues/76095", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76095/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76095/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76095/events", "html_url": "https://github.com/rust-lang/rust/issues/76095", "id": 688635511, "node_id": "MDU6SXNzdWU2ODg2MzU1MTE=", "number": 76095, "title": "Confusing error when impl is available only on RefCell contents", "user": {"login": "iximeow", "id": 4615790, "node_id": "MDQ6VXNlcjQ2MTU3OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4615790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iximeow", "html_url": "https://github.com/iximeow", "followers_url": "https://api.github.com/users/iximeow/followers", "following_url": "https://api.github.com/users/iximeow/following{/other_user}", "gists_url": "https://api.github.com/users/iximeow/gists{/gist_id}", "starred_url": "https://api.github.com/users/iximeow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iximeow/subscriptions", "organizations_url": "https://api.github.com/users/iximeow/orgs", "repos_url": "https://api.github.com/users/iximeow/repos", "events_url": "https://api.github.com/users/iximeow/events{/privacy}", "received_events_url": "https://api.github.com/users/iximeow/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1839565265, "node_id": "MDU6TGFiZWwxODM5NTY1MjY1", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-terse", "name": "D-terse", "color": "c9f7a3", "default": false, "description": "A diagnostic that doesn't give enough information about the problem at hand"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-30T01:48:41Z", "updated_at": "2020-08-30T05:47:27Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Some Rust ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=227b1cd9bb00ec3fae00686900972efc)):\r\n```rust\r\nuse std::cell::RefCell;\r\n\r\nstruct WorkDoer<'f, F> {\r\n    f: &'f F,\r\n}\r\n\r\nimpl<'f> WorkDoer<'f, i32> {\r\n    fn do_work(&self) {}\r\n}\r\n\r\nfn main() {\r\n    let f = RefCell::new(1i32);\r\n    let work = WorkDoer { f: &f };\r\n    work.do_work();\r\n}\r\n```\r\nyields an error about no method `do_work` being found:\r\n```\r\nerror[E0599]: no method named `do_work` found for struct `WorkDoer<'_, std::cell::RefCell<i32>>` in the current scope\r\n  --> src/main.rs:14:10\r\n   |\r\n3  | struct WorkDoer<'f, F> {\r\n   | ---------------------- method `do_work` not found for this\r\n...\r\n14 |     work.do_work();\r\n   |          ^^^^^^^ method not found in `WorkDoer<'_, std::cell::RefCell<i32>>`\r\n```\r\nwhere `do_work` _does_ exist, but on a different type. Specifically, `WorkDoer<'_, i32>`.\r\n\r\nIn the above example, `WorkDoer` should be made from a borrow of the `RefCell`, like `WorkDoer { f: &*f.borrow() }`, which rustc is entirely happy to build. It would be _fantastic_ if rustc could suggest that the `borrow` would make a `do_work` available.\r\n\r\n### Related messages\r\nThere's (what I think to be) a similar variation of this with a more generic `impl`:\r\n```rust\r\nuse std::cell::RefCell;\r\n\r\nstruct WorkDoer<'f, F> {\r\n    f: &'f F,\r\n}\r\n\r\nimpl<'f, I: std::ops::Add> WorkDoer<'f, I> {\r\n    fn do_work(&self) {}\r\n}\r\n\r\nfn main() {\r\n    let f = RefCell::new(1i32);\r\n    let work = WorkDoer { f: &f };\r\n    work.do_work();\r\n}\r\n```\r\nyielding a more informative error:\r\n```\r\nerror[E0599]: no method named `do_work` found for struct `WorkDoer<'_, std::cell::RefCell<i32>>` in the current scope\r\n   --> src/main.rs:14:10\r\n    |\r\n3   |   struct WorkDoer<'f, F> {\r\n    |   ---------------------- method `do_work` not found for this\r\n...\r\n14  |       work.do_work();\r\n    |            ^^^^^^^ method not found in `WorkDoer<'_, std::cell::RefCell<i32>>`\r\n    |\r\n    = note: the method `do_work` exists but the following trait bounds were not satisfied:\r\n            `std::cell::RefCell<i32>: std::ops::Add`\r\n```\r\nbut if the constraints become much more complex than `I: std::ops::Add` it can be very confusing to read through mismatched types only to realize you've forgotten to borrow the `RefCell`.\r\n\r\nIf `rustc` could observe that the inner type satisfies the constraints and makes `do_work` available, then suggest that change, it'd be kind of incredibly good and cool.\r\n\r\n(this is a minimization of https://twitter.com/iximeow/status/1297651292148359170 which @estebank also asked me to file an issue about :) the aforementioned \"try _borrowing the RefCell contents_\" suggestion would be very handy here.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76095/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76095/timeline", "performed_via_github_app": null, "state_reason": null}