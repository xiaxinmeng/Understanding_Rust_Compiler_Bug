{"url": "https://api.github.com/repos/rust-lang/rust/issues/16738", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/16738/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/16738/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/16738/events", "html_url": "https://github.com/rust-lang/rust/issues/16738", "id": 41021001, "node_id": "MDU6SXNzdWU0MTAyMTAwMQ==", "number": 16738, "title": "Should the std library implement Equiv for Str?", "user": {"login": "glennw", "id": 2350882, "node_id": "MDQ6VXNlcjIzNTA4ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/2350882?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glennw", "html_url": "https://github.com/glennw", "followers_url": "https://api.github.com/users/glennw/followers", "following_url": "https://api.github.com/users/glennw/following{/other_user}", "gists_url": "https://api.github.com/users/glennw/gists{/gist_id}", "starred_url": "https://api.github.com/users/glennw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glennw/subscriptions", "organizations_url": "https://api.github.com/users/glennw/orgs", "repos_url": "https://api.github.com/users/glennw/repos", "events_url": "https://api.github.com/users/glennw/events{/privacy}", "received_events_url": "https://api.github.com/users/glennw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-08-24T21:50:57Z", "updated_at": "2015-01-27T17:07:08Z", "closed_at": "2015-01-27T17:07:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Anything that implements Str trait gets an implicit implementation of Equiv (see http://doc.rust-lang.org/std/cmp/trait.Equiv.html#tymethod.equiv).\n\nIn Servo, we have an Atom type that represents an interned string. For efficiency reasons, the hash value of the Atom is != the hash value of the string it represents.\n\nIf you then have a HashMap<Atom> and call find_equiv(&str) it fails silently due to the hash mismatches.\n\nIdeally we want this to be a compile error (you should always construct an Atom rather than use find_equiv).\n\nHowever, due to the implicit trait implementation mentioned above, any type that implements Str also implements Equiv.\n\nWe have a workaround - we currently don't implement Str for Atom, and instead just implement as_slice() as a method on the Atom type.\n\nShould we consider removing the implicit implementation of Equiv for anything that implements Str?\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/16738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/16738/timeline", "performed_via_github_app": null, "state_reason": "completed"}