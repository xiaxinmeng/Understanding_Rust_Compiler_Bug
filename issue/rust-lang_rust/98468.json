{"url": "https://api.github.com/repos/rust-lang/rust/issues/98468", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98468/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98468/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98468/events", "html_url": "https://github.com/rust-lang/rust/issues/98468", "id": 1284200497, "node_id": "I_kwDOAAsO6M5Mi1gx", "number": 98468, "title": "Suboptimal codegen when using unwrap_or_else with unreachable_unchecked", "user": {"login": "james7132", "id": 3137680, "node_id": "MDQ6VXNlcjMxMzc2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/3137680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/james7132", "html_url": "https://github.com/james7132", "followers_url": "https://api.github.com/users/james7132/followers", "following_url": "https://api.github.com/users/james7132/following{/other_user}", "gists_url": "https://api.github.com/users/james7132/gists{/gist_id}", "starred_url": "https://api.github.com/users/james7132/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/james7132/subscriptions", "organizations_url": "https://api.github.com/users/james7132/orgs", "repos_url": "https://api.github.com/users/james7132/repos", "events_url": "https://api.github.com/users/james7132/events{/privacy}", "received_events_url": "https://api.github.com/users/james7132/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-06-24T21:16:22Z", "updated_at": "2022-10-20T07:59:34Z", "closed_at": "2022-10-20T07:59:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\npub struct Foo {\r\n    i: Vec<usize>,\r\n    v: Vec<usize>,\r\n}\r\n\r\nimpl Foo {\r\n    fn get(&self, i: usize) -> Option<&usize> {\r\n        let index = self.i.get(i)?;\r\n        self.v.get(*index)\r\n    }\r\n\r\n    unsafe fn get_unchecked(&self, i: usize) -> &usize {\r\n        let index = self.i.get_unchecked(i);\r\n        self.v.get_unchecked(*index)\r\n    }\r\n}\r\n\r\npub unsafe fn get_unchecked(f: &Foo, idx: usize) -> &usize {\r\n    f.get_unchecked(idx)\r\n}\r\n\r\npub unsafe fn get_unwrap_checked_unreachable(f: &Foo, idx: usize) -> &usize {\r\n    f.get(idx).unwrap_or_else(|| std::hint::unreachable_unchecked())\r\n}\r\n\r\npub fn get(f: &Foo, idx: usize) -> Option<&usize> {\r\n    f.get(idx)\r\n}\r\n```\r\n\r\nI expected to see this happen: The `unwrap_or_else` case generates branch-free assembly.\r\n\r\nInstead, this happened: \r\n\r\nThis was the generated assembly (opt-level 3):\r\n\r\n```x86\r\nexample::get_unchecked:\r\n        mov     rax, qword ptr [rdi]\r\n        mov     rax, qword ptr [rax + 8*rsi]\r\n        shl     rax, 3\r\n        add     rax, qword ptr [rdi + 24]\r\n        ret\r\n\r\nexample::get_unwrap_checked_unreachable:\r\n        xor     eax, eax\r\n        cmp     qword ptr [rdi + 16], rsi\r\n        jbe     .LBB1_3\r\n        mov     rcx, qword ptr [rdi]\r\n        test    rcx, rcx\r\n        je      .LBB1_3\r\n        mov     rcx, qword ptr [rcx + 8*rsi]\r\n        lea     rdx, [8*rcx]\r\n        add     rdx, qword ptr [rdi + 24]\r\n        xor     eax, eax\r\n        cmp     rcx, qword ptr [rdi + 40]\r\n        cmovb   rax, rdx\r\n.LBB1_3:\r\n        ret\r\n\r\nexample::get:\r\n        xor     eax, eax\r\n        cmp     qword ptr [rdi + 16], rsi\r\n        jbe     .LBB2_3\r\n        mov     rcx, qword ptr [rdi]\r\n        test    rcx, rcx\r\n        je      .LBB2_3\r\n        mov     rcx, qword ptr [rcx + 8*rsi]\r\n        lea     rdx, [8*rcx]\r\n        add     rdx, qword ptr [rdi + 24]\r\n        xor     eax, eax\r\n        cmp     rcx, qword ptr [rdi + 40]\r\n        cmovb   rax, rdx\r\n.LBB2_3:\r\n        ret\r\n```\r\n\r\n### Meta\r\n\r\nRust version rustc 1.61.0 (fe5b13d68 2022-05-18) ([on Compiler Explorer](https://godbolt.org/z/qrcaWs5a3))\r\n\r\n`rustc --version --verbose`:\r\n```\r\nTODO\r\n```\r\n\r\n(not at my home machine right now, will fill in these details soon)\r\n\r\n### Context\r\nThe primary use case is to have an alternative version of `std::hint::unreachable_unchecked` that is checked in debug builds via `unreachable!()`, but unchecked in release builds.", "closed_by": {"login": "james7132", "id": 3137680, "node_id": "MDQ6VXNlcjMxMzc2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/3137680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/james7132", "html_url": "https://github.com/james7132", "followers_url": "https://api.github.com/users/james7132/followers", "following_url": "https://api.github.com/users/james7132/following{/other_user}", "gists_url": "https://api.github.com/users/james7132/gists{/gist_id}", "starred_url": "https://api.github.com/users/james7132/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/james7132/subscriptions", "organizations_url": "https://api.github.com/users/james7132/orgs", "repos_url": "https://api.github.com/users/james7132/repos", "events_url": "https://api.github.com/users/james7132/events{/privacy}", "received_events_url": "https://api.github.com/users/james7132/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98468/timeline", "performed_via_github_app": null, "state_reason": "completed"}