{"url": "https://api.github.com/repos/rust-lang/rust/issues/20219", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/20219/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/20219/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/20219/events", "html_url": "https://github.com/rust-lang/rust/issues/20219", "id": 52848550, "node_id": "MDU6SXNzdWU1Mjg0ODU1MA==", "number": 20219, "title": "Drop elision doesn't work with #[unsafe_no_drop_flag]", "user": {"login": "cgaebel", "id": 128969, "node_id": "MDQ6VXNlcjEyODk2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/128969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgaebel", "html_url": "https://github.com/cgaebel", "followers_url": "https://api.github.com/users/cgaebel/followers", "following_url": "https://api.github.com/users/cgaebel/following{/other_user}", "gists_url": "https://api.github.com/users/cgaebel/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgaebel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgaebel/subscriptions", "organizations_url": "https://api.github.com/users/cgaebel/orgs", "repos_url": "https://api.github.com/users/cgaebel/repos", "events_url": "https://api.github.com/users/cgaebel/events{/privacy}", "received_events_url": "https://api.github.com/users/cgaebel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-12-25T05:35:47Z", "updated_at": "2017-01-17T18:43:58Z", "closed_at": "2017-01-17T18:43:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`#[unsafe_no_drop_flag]` prevents drop elision. This is especially unfortunate because most things with `Drop` impls also use `#[unsafe_no_drop_flag]`, including performance sensitive data structures like `Iobuf`s and `Vec`s.\n\nSee the following example, and note the call to `Drop` that is generated only in the `#[unsafe_no_drop_flag]` case.\n# Code Tested\n\n(build with `rustc x.rs --crate-type lib --opt-level 3 --emit llvm-ir --emit asm`)\n\n``` rust\nextern crate test;\n\n#[unsafe_no_drop_flag]\npub struct BigAndComplicatedDestructor {\n    x: [u8, ..255],\n}\n\nimpl Drop for BigAndComplicatedDestructor {\n    #[inline(never)]\n    fn drop(&mut self) {\n        if !self.x.iter().all(|&x| x == 0) {\n            println!(\"DROP\");\n            test::black_box(self)\n        }\n    }\n}\n\n#[inline(never)]\nfn f(x: BigAndComplicatedDestructor) {\n    println!(\"1\");\n    drop(x)\n}\n\npub fn look_at_me_copy(i: int, x: BigAndComplicatedDestructor) {\n    f(x)\n}\n```\n# With #[unsafe_no_drop_flag]\n\n``` asm\n__ZN15look_at_me_copy20h59e37a9f6231c17eucaE:\n    .cfi_startproc\n    .cfi_personality 155, _rust_eh_personality\nLeh_func_begin2:\n    .cfi_lsda 16, Lexception2\n    leaq    -280(%rsp), %r11\n    cmpq    %gs:816, %r11\n    ja  LBB2_2\n    movabsq $280, %r10\n    movabsq $0, %r11\n    callq   ___morestack\n    retq\nLBB2_2:\n    pushq   %rbp\nLtmp18:\n    .cfi_def_cfa_offset 16\nLtmp19:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLtmp20:\n    .cfi_def_cfa_register %rbp\n    pushq   %r14\n    pushq   %rbx\n    subq    $256, %rsp\nLtmp21:\n    .cfi_offset %rbx, -32\nLtmp22:\n    .cfi_offset %r14, -24\n    movq    %rsi, %rbx\n    leaq    -272(%rbp), %r14\n    movl    $255, %edx\n    movq    %r14, %rdi\n    callq   _memcpy\n    xorl    %esi, %esi\n    movl    $255, %edx\n    movq    %rbx, %rdi\n    callq   _memset\nLtmp15:\n    movq    %r14, %rdi\n    callq   __ZN1f20h6e40d25e2cfa92e4ibaE\nLtmp16:\n    movq    %rbx, %rdi\n    callq   __ZN32BigAndComplicatedDestructor.Drop4drop20h5306dcf8d3a2009fnaaE\n    addq    $256, %rsp\n    popq    %rbx\n    popq    %r14\n    popq    %rbp\n    retq\n```\n# Without #[unsafe_no_drop_flag]\n\n``` asm\n__ZN15look_at_me_copy20h59e37a9f6231c17eucaE:\n    .cfi_startproc\n    .cfi_personality 155, _rust_eh_personality\nLeh_func_begin2:\n    .cfi_lsda 16, Lexception2\n    leaq    -280(%rsp), %r11\n    cmpq    %gs:816, %r11\n    ja  LBB2_2\n    movabsq $280, %r10\n    movabsq $0, %r11\n    callq   ___morestack\n    retq\nLBB2_2:\n    pushq   %rbp\nLtmp18:\n    .cfi_def_cfa_offset 16\nLtmp19:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLtmp20:\n    .cfi_def_cfa_register %rbp\n    pushq   %r14\n    pushq   %rbx\n    subq    $256, %rsp\nLtmp21:\n    .cfi_offset %rbx, -32\nLtmp22:\n    .cfi_offset %r14, -24\n    movq    %rsi, %rbx\n    leaq    -272(%rbp), %r14\n    movl    $256, %edx\n    movq    %r14, %rdi\n    callq   _memcpy\n    xorl    %esi, %esi\n    movl    $256, %edx\n    movq    %rbx, %rdi\n    callq   _memset\nLtmp15:\n    movq    %r14, %rdi\n    callq   __ZN1f20h6e40d25e2cfa92e4ibaE\nLtmp16:\n    addq    $256, %rsp\n    popq    %rbx\n    popq    %r14\n    popq    %rbp\n    retq\n```\n\nThere's another codegen bug here, too. The memset is a dead store, which llvm isn't smart enough to optimize away in either case. This leads me to believe that it still thinks the arguments are alive even though they're consumed. This function should have compiled into a `jmp`, but instead a `memcpy`, `memset`, and `drop` call are all generated.\n\nMerry Christmas!\n\ncc @aatch\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/20219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/20219/timeline", "performed_via_github_app": null, "state_reason": "completed"}