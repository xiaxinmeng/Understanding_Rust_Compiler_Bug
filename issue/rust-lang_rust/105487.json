{"url": "https://api.github.com/repos/rust-lang/rust/issues/105487", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105487/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105487/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105487/events", "html_url": "https://github.com/rust-lang/rust/issues/105487", "id": 1486293513, "node_id": "I_kwDOAAsO6M5YlwoJ", "number": 105487, "title": "CG Backends should validate Call types more strictly", "user": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 120005, "node_id": "MDU6TGFiZWwxMjAwMDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-testsuite", "name": "A-testsuite", "color": "f7e101", "default": false, "description": "Area: The testsuite used to check the correctness of rustc"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-12-09T08:16:56Z", "updated_at": "2023-04-10T19:02:57Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In https://github.com/rust-lang/rust/pull/104321, I bent the compilers rules a bit, both intentionally and not, in particular:\r\n\r\nUp until https://github.com/rust-lang/rust/pull/105250, the function generated for `Future::poll` was using `ResumeTy` instead of `&mut Context<'_>` for its argument. This was fine as `ResumeTy` was just a newtype wrapper around `*const Context`, so both are just pointers. Though @bjorn3 pointed out, this could have started randomly failing when using `-Zrandomize-layout`. Driveby question: Would `#[repr(transparent)]` have provided stronger guarantees here?\r\n\r\nThe second case, fixed by https://github.com/rust-lang/rust/pull/105082, was a mismatched return type. The change in https://github.com/rust-lang/rust/pull/104321 correctly changed the generated *MIR* to output (and write to) `Poll`. Though the `FnAbi` was unchanged and still referring to a `GeneratorState`.\r\nThis was seemingly fine as both happened to have the same size and alignment.\r\nCallers were assuming a `Poll`, MIR was outputting a `Poll`. But the `FnAbi` was advertising a `GeneratorState` erronously.\r\n\r\nAs discovered by @bjorn3 in https://github.com/rust-lang/rust/pull/104321#issuecomment-1336363077, `cg_clif` does a more stricter validation of the call arguments and return values in the codegen backend, which the other backends evidently did not do.\r\n\r\nThey probably should.\r\n\r\nCC @compiler-errors @oli-obk ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105487/timeline", "performed_via_github_app": null, "state_reason": null}