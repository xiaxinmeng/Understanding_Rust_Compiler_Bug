{"url": "https://api.github.com/repos/rust-lang/rust/issues/55873", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55873/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55873/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55873/events", "html_url": "https://github.com/rust-lang/rust/issues/55873", "id": 379526929, "node_id": "MDU6SXNzdWUzNzk1MjY5Mjk=", "number": 55873, "title": "ICE when macro produces multiple functions each with \"wrong number of type arguments\" turbofish errors", "user": {"login": "tormol", "id": 10460821, "node_id": "MDQ6VXNlcjEwNDYwODIx", "avatar_url": "https://avatars.githubusercontent.com/u/10460821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tormol", "html_url": "https://github.com/tormol", "followers_url": "https://api.github.com/users/tormol/followers", "following_url": "https://api.github.com/users/tormol/following{/other_user}", "gists_url": "https://api.github.com/users/tormol/gists{/gist_id}", "starred_url": "https://api.github.com/users/tormol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tormol/subscriptions", "organizations_url": "https://api.github.com/users/tormol/orgs", "repos_url": "https://api.github.com/users/tormol/repos", "events_url": "https://api.github.com/users/tormol/events{/privacy}", "received_events_url": "https://api.github.com/users/tormol/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-11T14:17:32Z", "updated_at": "2019-10-14T19:00:56Z", "closed_at": "2019-10-14T19:00:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Minimal repro:\r\n\r\n```rust\r\nmacro_rules! m {($asref:ty) => {\r\n    fn bar(s: &str) -> &$asref {s.as_ref::<$asref>()}\r\n    fn baz(s: &str) -> &$asref {s.as_ref::<$asref>()}\r\n}}\r\n\r\nm!{[u8]}\r\n\r\nfn main() {}\r\n```\r\n\r\nProduces this error and backtrace:\r\n\r\n```\r\n$ RUST_BACKTRACE=1 rustc two_functions.rs \r\nerror[E0107]: wrong number of type arguments: expected 0, found 1\r\n --> two_functions.rs:6:4\r\n  |\r\n6 | m!{[u8]}\r\n  |    ^^^^ unexpected type argument\r\n\r\nerror: internal compiler error: librustc_typeck/check/mod.rs:2384: no type for node 47: type u8 (id=47) in fcx 0x7ffd82952eb0\r\n\r\nthread 'main' panicked at 'Box<Any>', librustc_errors/lib.rs:600:9\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::_print\r\n             at libstd/sys_common/backtrace.rs:71\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at libstd/sys_common/backtrace.rs:59\r\n             at libstd/panicking.rs:211\r\n   3: std::panicking::default_hook\r\n             at libstd/panicking.rs:227\r\n   4: rustc::util::common::panic_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n             at libstd/panicking.rs:480\r\n   6: std::panicking::begin_panic\r\n   7: rustc_errors::Handler::bug\r\n   8: rustc::util::bug::opt_span_bug_fmt::{{closure}}\r\n   9: rustc::ty::context::tls::with_opt::{{closure}}\r\n  10: rustc::ty::context::tls::with_context_opt\r\n  11: rustc::ty::context::tls::with_opt\r\n  12: rustc::util::bug::opt_span_bug_fmt\r\n  13: rustc::util::bug::bug_fmt\r\n  14: rustc_typeck::check::FnCtxt::node_ty\r\n  15: <rustc_typeck::check::writeback::WritebackCx<'cx, 'gcx, 'tcx> as rustc::hir::intravisit::Visitor<'gcx>>::visit_ty\r\n  16: <rustc_typeck::check::writeback::WritebackCx<'cx, 'gcx, 'tcx> as rustc::hir::intravisit::Visitor<'gcx>>::visit_ty\r\n  17: rustc::hir::intravisit::walk_expr\r\n  18: <rustc_typeck::check::writeback::WritebackCx<'cx, 'gcx, 'tcx> as rustc::hir::intravisit::Visitor<'gcx>>::visit_expr\r\n  19: <rustc_typeck::check::writeback::WritebackCx<'cx, 'gcx, 'tcx> as rustc::hir::intravisit::Visitor<'gcx>>::visit_expr\r\n  20: rustc_typeck::check::writeback::<impl rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx>>::resolve_type_vars_in_body\r\n  21: rustc::ty::context::tls::with_related_context\r\n  22: rustc::infer::InferCtxtBuilder::enter\r\n  23: rustc_typeck::check::typeck_tables_of\r\n  24: rustc::ty::query::__query_compute::typeck_tables_of\r\n  25: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::typeck_tables_of<'tcx>>::compute\r\n  26: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  27: rustc::ty::context::tls::with_related_context\r\n  28: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  29: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query\r\n  30: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::ensure_query\r\n  31: rustc::session::Session::track_errors\r\n  32: rustc_typeck::check::typeck_item_bodies\r\n  33: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::typeck_item_bodies<'tcx>>::compute\r\n  34: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  35: rustc::ty::context::tls::with_related_context\r\n  36: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  37: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query\r\n  38: rustc_typeck::check_crate\r\n  39: rustc::ty::context::tls::enter_context\r\n  40: <std::thread::local::LocalKey<T>>::with\r\n  41: rustc::ty::context::TyCtxt::create_and_enter\r\n  42: rustc_driver::driver::compile_input\r\n  43: rustc_driver::run_compiler_with_pool\r\n  44: <scoped_tls::ScopedKey<T>>::set\r\n  45: rustc_driver::run_compiler\r\n  46: syntax::with_globals\r\n  47: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:102\r\n  48: rustc_driver::run\r\n  49: rustc_driver::main\r\n  50: std::rt::lang_start::{{closure}}\r\n  51: std::panicking::try::do_call\r\n             at libstd/rt.rs:59\r\n             at libstd/panicking.rs:310\r\n  52: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:102\r\n  53: std::rt::lang_start_internal\r\n             at libstd/panicking.rs:289\r\n             at libstd/panic.rs:398\r\n             at libstd/rt.rs:58\r\n  54: main\r\n  55: __libc_start_main\r\n  56: <unknown>\r\nquery stack during panic:\r\n#0 [typeck_tables_of] processing `baz`\r\n#1 [typeck_item_bodies] type-checking all item bodies\r\nend of query stack\r\nerror: aborting due to 2 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0107`.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.32.0-nightly (6e9b84296 2018-11-10) running on x86_64-unknown-linux-gnu\r\n```\r\n\r\nThe ICE does not occur if the type list does not contain a macro parameter, or both usages are in the same function:\r\n\r\n```rust\r\nmacro_rules! foo {($asref:ty) => {\r\n    fn bar(s: &str) -> &[u8] {s.as_ref::<[u8]>()}\r\n    fn baz(s: &str) -> &[u8] {s.as_ref::<[u8]>()}\r\n    fn quux(s: &str) -> (&asref, &$asref) {\r\n        let a = {s.as_ref::<$asref>()};\r\n        let b = {s.as_ref::<$asref>()};\r\n        (a, b)\r\n    }\r\n}}\r\n\r\nfoo!{[u8]}\r\n```\r\n\r\n\r\nI discovered this ICE with a macro containing mirrored `PartialEq` impls using `.as_ref()` for turning the\r\nlocal type into the type to compare against. Reduced version:\r\n\r\n```rust\r\nstruct Foo(u8);\r\nimpl AsRef<u8> for Foo {\r\n    fn as_ref(&self) -> &u8 {\r\n        &self.0\r\n    }\r\n}\r\n\r\nmacro_rules! impl_partial_eq {($wider: ty) => {\r\n    impl PartialEq<Foo> for $wider {\r\n        fn eq(&self, other: &Foo) -> bool {\r\n            self == other.as_ref::<$wider>()\r\n        }\r\n    }\r\n    impl PartialEq<$wider> for Foo {\r\n        fn eq(&self, other: &$wider) -> bool {\r\n            self.as_ref::<$wider>() == other\r\n        }\r\n    }\r\n}}\r\n\r\nimpl_partial_eq!{u8}\r\n```\r\nA single impl but with both `eq()` and `ne()` also ICEs.\r\n\r\n## Meta\r\nrustc 1.32.0-nightly (6e9b84296 2018-11-10)\r\nbinary: rustc\r\ncommit-hash: 6e9b84296223126a0a59bde63a0f97011bb7b0f5\r\ncommit-date: 2018-11-10\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.32.0-nightly\r\nLLVM version: 8.0\r\n\r\n## Release bisect\r\nThe ICE first appeared in Rust 1.25.0, and is also present in Rust 1.30.1 and 1.31.0-beta-8.\r\n\r\nRust 1.20.0 and before had a much clearer error message:\r\n```\r\nerror[E0035]: does not take type parameters\r\n --> two_functions.rs:2:35\r\n  |\r\n2 |     fn bar(s: &str) -> &$asref {s.as_ref::<$asref>()}\r\n  |                                   ^^^^^^ called with unneeded type parameters\r\n...\r\n6 | m!{[u8]}\r\n  | -------- in this macro invocation\r\n\r\nerror[E0035]: does not take type parameters\r\n --> two_functions.rs:3:35\r\n  |\r\n3 |     fn baz(s: &str) -> &$asref {s.as_ref::<$asref>()}\r\n  |                                   ^^^^^^ called with unneeded type parameters\r\n...\r\n6 | m!{[u8]}\r\n  | -------- in this macro invocation\r\n\r\nerror: aborting due to 2 previous errors\r\n```", "closed_by": {"login": "tormol", "id": 10460821, "node_id": "MDQ6VXNlcjEwNDYwODIx", "avatar_url": "https://avatars.githubusercontent.com/u/10460821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tormol", "html_url": "https://github.com/tormol", "followers_url": "https://api.github.com/users/tormol/followers", "following_url": "https://api.github.com/users/tormol/following{/other_user}", "gists_url": "https://api.github.com/users/tormol/gists{/gist_id}", "starred_url": "https://api.github.com/users/tormol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tormol/subscriptions", "organizations_url": "https://api.github.com/users/tormol/orgs", "repos_url": "https://api.github.com/users/tormol/repos", "events_url": "https://api.github.com/users/tormol/events{/privacy}", "received_events_url": "https://api.github.com/users/tormol/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55873/timeline", "performed_via_github_app": null, "state_reason": "completed"}