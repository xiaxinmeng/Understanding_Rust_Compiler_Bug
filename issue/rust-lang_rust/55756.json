{"url": "https://api.github.com/repos/rust-lang/rust/issues/55756", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55756/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55756/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55756/events", "html_url": "https://github.com/rust-lang/rust/issues/55756", "id": 378318038, "node_id": "MDU6SXNzdWUzNzgzMTgwMzg=", "number": 55756, "title": "Lifetimes bug on beta 1.31: the associated type may not live long enough ", "user": {"login": "mersinvald", "id": 8722061, "node_id": "MDQ6VXNlcjg3MjIwNjE=", "avatar_url": "https://avatars.githubusercontent.com/u/8722061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mersinvald", "html_url": "https://github.com/mersinvald", "followers_url": "https://api.github.com/users/mersinvald/followers", "following_url": "https://api.github.com/users/mersinvald/following{/other_user}", "gists_url": "https://api.github.com/users/mersinvald/gists{/gist_id}", "starred_url": "https://api.github.com/users/mersinvald/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mersinvald/subscriptions", "organizations_url": "https://api.github.com/users/mersinvald/orgs", "repos_url": "https://api.github.com/users/mersinvald/repos", "events_url": "https://api.github.com/users/mersinvald/events{/privacy}", "received_events_url": "https://api.github.com/users/mersinvald/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252628, "node_id": "MDU6TGFiZWwyNjIyNTI2Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta", "name": "regression-from-stable-to-beta", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to beta."}, {"id": 867483626, "node_id": "MDU6TGFiZWw4Njc0ODM2MjY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-fixed-by-NLL", "name": "NLL-fixed-by-NLL", "color": "f799ea", "default": false, "description": "Bugs fixed, but only when NLL is enabled."}], "state": "closed", "locked": false, "assignee": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 19, "created_at": "2018-11-07T14:43:55Z", "updated_at": "2018-11-20T12:44:41Z", "closed_at": "2018-11-19T16:59:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A reduced test case ([play](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=95c6cf5b6f9d53cfb7136cfa1bbd0b7e)):\r\n\r\n```rust\r\n#![crate_type=\"lib\"]\r\n\r\npub trait Database<'a> {\r\n    type Guard: 'a;\r\n}\r\n\r\npub struct Stateful<'a, D: 'a>(&'a D);\r\n\r\nimpl<'b, D: for <'a> Database<'a>> Stateful<'b, D> {\r\n    pub fn callee<'a>(&'a self) -> <D as Database<'a>>::Guard {\r\n        unimplemented!()\r\n    }\r\n    pub fn caller<'a>(&'a self) -> <D as Database<'a>>::Guard {\r\n        let state = self.callee();\r\n        unimplemented!()\r\n    }\r\n}\r\n```\r\n\r\nError diagnostic output in details block below\r\n\r\n<details>\r\n\r\n```\r\nerror[E0311]: the associated type `<D as Database<'_>>::Guard` may not live long enough\r\n  --> src/lib.rs:14:13\r\n   |\r\n14 |         let state = self.callee();\r\n   |             ^^^^^\r\n   |\r\n   = help: consider adding an explicit lifetime bound for `<D as Database<'_>>::Guard`\r\nnote: the associated type `<D as Database<'_>>::Guard` must be valid for the block suffix following statement 0 at 14:9...\r\n  --> src/lib.rs:14:9\r\n   |\r\n14 | /         let state = self.callee();\r\n15 | |         unimplemented!()\r\n16 | |     }\r\n   | |_____^\r\nnote: ...so that variable is valid at time of its declaration\r\n  --> src/lib.rs:14:13\r\n   |\r\n14 |         let state = self.callee();\r\n   |             ^^^^^\r\n\r\nerror[E0311]: the associated type `<D as Database<'_>>::Guard` may not live long enough\r\n  --> src/lib.rs:14:13\r\n   |\r\n14 |         let state = self.callee();\r\n   |             ^^^^^\r\n   |\r\n   = help: consider adding an explicit lifetime bound for `<D as Database<'_>>::Guard`\r\nnote: the associated type `<D as Database<'_>>::Guard` must be valid for the block at 13:63...\r\n  --> src/lib.rs:13:63\r\n   |\r\n13 |       pub fn caller<'a>(&'a self) -> <D as Database<'a>>::Guard {\r\n   |  _______________________________________________________________^\r\n14 | |         let state = self.callee();\r\n15 | |         unimplemented!()\r\n16 | |     }\r\n   | |_____^\r\nnote: ...so that references are valid when the destructor runs\r\n  --> src/lib.rs:14:13\r\n   |\r\n14 |         let state = self.callee();\r\n   |             ^^^^^\r\n\r\nerror[E0311]: the associated type `<D as Database<'_>>::Guard` may not live long enough\r\n  --> src/lib.rs:14:21\r\n   |\r\n14 |         let state = self.callee();\r\n   |                     ^^^^^^^^^^^^^\r\n   |\r\n   = help: consider adding an explicit lifetime bound for `<D as Database<'_>>::Guard`\r\nnote: the associated type `<D as Database<'_>>::Guard` must be valid for the method call at 14:21...\r\n  --> src/lib.rs:14:21\r\n   |\r\n14 |         let state = self.callee();\r\n   |                     ^^^^^^^^^^^^^\r\nnote: ...so type `<D as Database<'_>>::Guard` of expression is valid during the expression\r\n  --> src/lib.rs:14:21\r\n   |\r\n14 |         let state = self.callee();\r\n   |                     ^^^^^^^^^^^^^\r\n\r\nerror[E0311]: the associated type `<D as Database<'_>>::Guard` may not live long enough\r\n  --> src/lib.rs:14:21\r\n   |\r\n14 |         let state = self.callee();\r\n   |                     ^^^^^^^^^^^^^\r\n   |\r\n   = help: consider adding an explicit lifetime bound for `<D as Database<'_>>::Guard`\r\nnote: the associated type `<D as Database<'_>>::Guard` must be valid for the destruction scope surrounding statement at 14:9...\r\n  --> src/lib.rs:14:9\r\n   |\r\n14 |         let state = self.callee();\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...so that references are valid when the destructor runs\r\n  --> src/lib.rs:14:21\r\n   |\r\n14 |         let state = self.callee();\r\n   |                     ^^^^^^^^^^^^^\r\n\r\nerror: aborting due to 4 previous errors\r\n```\r\n\r\n</details>\r\n\r\n## Original bug report\r\n\r\n#### Versions\r\nrustc 1.31.0-beta.4 (04da282bb 2018-11-01)\r\ncargo 1.31.0-beta (efb7972a0 2018-10-24)\r\n\r\n#### Expected behavior\r\nEverything compiling correctly like it does on stable 1.30\r\n\r\n#### Actual behavior\r\nA lot of lifetime-related errors:\r\n```\r\nerror[E0311]: the associated type `<D as trie::Database<'_>>::Guard` may not live long enough                                                                                                                                    \r\n   --> /home/mike/dev/etcdev/sputnikvm/stateful/src/lib.rs:536:23                                                                                                                                                                \r\n    |                                                                                                                                                                                                                            \r\n536 |         let account = state.get(&address);                                                                                                                                                                                 \r\n    |                       ^^^^^^^^^^^^^^^^^^^                                                                                                                                                                                  \r\n    |                                                                                                                                                                                                                            \r\n    = help: consider adding an explicit lifetime bound for `<D as trie::Database<'_>>::Guard`                                                                                                                                    \r\nnote: the associated type `<D as trie::Database<'_>>::Guard` must be valid for the method call at 536:23...                                                                                                                      \r\n   --> /home/mike/dev/etcdev/sputnikvm/stateful/src/lib.rs:536:23                                                                                                                                                                \r\n    |                                                                                                                                                                                                                            \r\n536 |         let account = state.get(&address);                                                                                                                                                                                 \r\n    |                       ^^^^^^^^^^^^^^^^^^^                                                                                                                                                                                  \r\nnote: ...so that a type/lifetime parameter is in scope here                                                                                                                                                                      \r\n   --> /home/mike/dev/etcdev/sputnikvm/stateful/src/lib.rs:536:23                                                                                                                                                                \r\n    |                                                                                                                                                                                                                            \r\n536 |         let account = state.get(&address);                                                                                                                                                                                 \r\n    |                       ^^^^^^^^^^^^^^^^^^^                                                                                                                                                                                  \r\n                                                 \r\n```\r\n\r\nIt has been an issue in nightly 1.31 for a long time now, but I haven't reported the issue while it was just nightly. Now the regression is in beta channel and may land in stable, breaking existing code.\r\n\r\nMy own findings on the subject: regression is related to an old lifetime system, it's not reproducible with `nll` feature on, so on `nightly` the code can be compiled with `nll`, but not without it. Same holds for beta now except `nll` isn't quite there yet.\r\n\r\nThe subjected codebase: https://github.com/ETCDEVTeam/sputnikvm/tree/master/stateful", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55756/timeline", "performed_via_github_app": null, "state_reason": "completed"}