{"url": "https://api.github.com/repos/rust-lang/rust/issues/69225", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69225/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69225/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69225/events", "html_url": "https://github.com/rust-lang/rust/issues/69225", "id": 566037034, "node_id": "MDU6SXNzdWU1NjYwMzcwMzQ=", "number": 69225, "title": "Memory unsafety problem in safe Rust", "user": {"login": "dfyz", "id": 42850, "node_id": "MDQ6VXNlcjQyODUw", "avatar_url": "https://avatars.githubusercontent.com/u/42850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfyz", "html_url": "https://github.com/dfyz", "followers_url": "https://api.github.com/users/dfyz/followers", "following_url": "https://api.github.com/users/dfyz/following{/other_user}", "gists_url": "https://api.github.com/users/dfyz/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfyz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfyz/subscriptions", "organizations_url": "https://api.github.com/users/dfyz/orgs", "repos_url": "https://api.github.com/users/dfyz/repos", "events_url": "https://api.github.com/users/dfyz/events{/privacy}", "received_events_url": "https://api.github.com/users/dfyz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1568663381, "node_id": "MDU6TGFiZWwxNTY4NjYzMzgx", "url": "https://api.github.com/repos/rust-lang/rust/labels/ICEBreaker-LLVM", "name": "ICEBreaker-LLVM", "color": "74cc28", "default": false, "description": "Bugs identified for the LLVM ICE-breaker group"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 38, "created_at": "2020-02-17T03:40:22Z", "updated_at": "2020-02-27T20:21:07Z", "closed_at": "2020-02-27T18:16:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a [small program](https://github.com/dfyz/rust-segfault) (a simplification of a test function from a larger project) that slices a small array and tries to access an out-of-bounds element of the slice. Running it with `cargo run --release` using the stable `1.41.0` release prints something like this (tested on macOS 10.15 and Ubuntu 19.10):\r\n```\r\n0 0 3 18446744073709551615\r\n[1]    21065 segmentation fault  cargo run --release\r\n```\r\nIt looks like the resulting slice somehow has length `2**64 - 1`, so the bounds checking is omitted, which predictably results in a segfault. On `1.39.0` and `1.40.0` the very same program prints what I would expect:\r\n```\r\n0 0 3 0\r\nthread 'main' panicked at 'index out of bounds: the len is 0 but the index is 16777216', src/main.rs:13:35\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\n```\r\n\r\nThe problem goes away if I do any of the following:\r\n  * remove either of the two `do_test(...);` calls in `main()`;\r\n  * remove the `for _ in 0..1 {` loop;\r\n  * replace the `for y in 0..x {` loop with `for y in 0..1 {`;\r\n  * remove the `z.extend(std::iter::repeat(0).take(x));` line or replace it with `z.extend(std::iter::repeat(0).take(1));`;\r\n  * replace the `for arr_ref in arr {` loop with `let arr_ref = &arr[0];`;\r\n  * specify `RUSTFLAGS=\"-C opt-level=2\"`;\r\n  * specify `RUSTFLAGS=\"-C codegen-units=1\"`.\r\n\r\nMy best guess is `-C opt-level=3` enables a problematic optimization pass in LLVM, which results in miscompilation. This is corroborated by the fact that MIR (`--emit mir`) and LLVM IR before optimizations (`--emit llvm-ir -C no-prepopulate-passes`) is the same for both `-C opt-level=2` and `-C opt-level=3`.\r\n\r\nSome additional info that might be helpful:\r\n  * I can't reproduce the problem in the Rust playground (presumably because it uses `codegen-units = 1`);\r\n  * I can't reproduce the problem on Windows 10 with the same `1.41.0` release (no idea what makes it different);\r\n  * `cargo-bisect-rustc` says the regression first happened in the `2019-12-12` nightly, specifically [in this commit](https://github.com/rust-lang/rust/commit/033662dfbca088937b9cdfd3d9584015b5e375b2). This seems suspicious to me, given that `1.40.0`, which does not exhibit the problem, was released after this date.\r\n\r\nI'm attaching the program inline in case the GitHub repo doesn't work (if you want to compile it without Cargo, use `rustc -C opt-level=3 main.rs`):\r\n```rust\r\nfn do_test(x: usize) {\r\n    let arr = vec![vec![0u8; 3]];\r\n\r\n    let mut z = Vec::new();\r\n    for arr_ref in arr {\r\n        for y in 0..x {\r\n            for _ in 0..1 {\r\n                z.extend(std::iter::repeat(0).take(x));\r\n                let a = y * x;\r\n                let b = (y + 1) * x - 1;\r\n                let slice = &arr_ref[a..b];\r\n                eprintln!(\"{} {} {} {}\", a, b, arr_ref.len(), slice.len());\r\n                eprintln!(\"{:?}\", slice[1 << 24]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    do_test(1);\r\n    do_test(2);\r\n}\r\n```", "closed_by": {"login": "dfyz", "id": 42850, "node_id": "MDQ6VXNlcjQyODUw", "avatar_url": "https://avatars.githubusercontent.com/u/42850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfyz", "html_url": "https://github.com/dfyz", "followers_url": "https://api.github.com/users/dfyz/followers", "following_url": "https://api.github.com/users/dfyz/following{/other_user}", "gists_url": "https://api.github.com/users/dfyz/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfyz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfyz/subscriptions", "organizations_url": "https://api.github.com/users/dfyz/orgs", "repos_url": "https://api.github.com/users/dfyz/repos", "events_url": "https://api.github.com/users/dfyz/events{/privacy}", "received_events_url": "https://api.github.com/users/dfyz/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69225/reactions", "total_count": 116, "+1": 79, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 13, "rocket": 0, "eyes": 23}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69225/timeline", "performed_via_github_app": null, "state_reason": "completed"}