{"url": "https://api.github.com/repos/rust-lang/rust/issues/57445", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57445/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57445/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57445/events", "html_url": "https://github.com/rust-lang/rust/issues/57445", "id": 396962069, "node_id": "MDU6SXNzdWUzOTY5NjIwNjk=", "number": 57445, "title": "It should be possible to use uninitialized memory in statics", "user": {"login": "robsmith11", "id": 22622548, "node_id": "MDQ6VXNlcjIyNjIyNTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/22622548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robsmith11", "html_url": "https://github.com/robsmith11", "followers_url": "https://api.github.com/users/robsmith11/followers", "following_url": "https://api.github.com/users/robsmith11/following{/other_user}", "gists_url": "https://api.github.com/users/robsmith11/gists{/gist_id}", "starred_url": "https://api.github.com/users/robsmith11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robsmith11/subscriptions", "organizations_url": "https://api.github.com/users/robsmith11/orgs", "repos_url": "https://api.github.com/users/robsmith11/repos", "events_url": "https://api.github.com/users/robsmith11/events{/privacy}", "received_events_url": "https://api.github.com/users/robsmith11/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-01-08T15:39:24Z", "updated_at": "2020-11-05T16:26:39Z", "closed_at": "2020-11-05T16:26:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the past, I've found it useful to \"initialize\" statics using uninitialized memory and then do the actual initialization (requiring non-const fns) at the beginning of my `main()`.\r\n\r\nIn recent nightlies, this strategy seems to be longer possible.  Is there an alternative or could this be allowed again?  I'm already using an `unsafe` block, so it shouldn't be a problem to risk UB.\r\n\r\nExample:\r\n```\r\n#![feature(const_transmute)]\r\n#![feature(const_fn)]\r\n#![feature(maybe_uninit)]\r\n#![feature(type_ascription)]\r\n\r\nuse std::collections::BTreeMap;\r\nuse std::mem::{MaybeUninit,transmute};\r\n\r\nstatic mut STATE:State = State::uninit();\r\n\r\n#[derive(Default)]\r\nstruct State {\r\n    x:BTreeMap<u64,f64>,\r\n    y:f64,\r\n}\r\n\r\nimpl State {\r\n    const fn uninit() -> Self {\r\n        unsafe { transmute(MaybeUninit::uninitialized():MaybeUninit<State>) }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    unsafe { STATE = State::default(); }\r\n}\r\n```\r\n\r\n```\r\nerror[E0080]: it is undefined behavior to use this value --> src/main.rs:9:1\r\n| 9 | static mut STATE:State = State::uninit();\r\n | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes at .x.root.node, but expected something in the range 1..=18446744073709551615 \r\n| = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior error: aborting due to previous error\r\n```", "closed_by": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57445/timeline", "performed_via_github_app": null, "state_reason": "completed"}