{"url": "https://api.github.com/repos/rust-lang/rust/issues/104981", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104981/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104981/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104981/events", "html_url": "https://github.com/rust-lang/rust/issues/104981", "id": 1465448436, "node_id": "I_kwDOAAsO6M5XWPf0", "number": 104981, "title": "When call from out of crate, E0275 occurs", "user": {"login": "Toru3", "id": 8950310, "node_id": "MDQ6VXNlcjg5NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8950310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Toru3", "html_url": "https://github.com/Toru3", "followers_url": "https://api.github.com/users/Toru3/followers", "following_url": "https://api.github.com/users/Toru3/following{/other_user}", "gists_url": "https://api.github.com/users/Toru3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Toru3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Toru3/subscriptions", "organizations_url": "https://api.github.com/users/Toru3/orgs", "repos_url": "https://api.github.com/users/Toru3/repos", "events_url": "https://api.github.com/users/Toru3/events{/privacy}", "received_events_url": "https://api.github.com/users/Toru3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-11-27T13:54:30Z", "updated_at": "2022-11-27T13:54:30Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n```terminal\r\n$ tree\r\n.\r\n\u251c\u2500\u2500 Cargo.toml\r\n\u2514\u2500\u2500 src\r\n    \u251c\u2500\u2500 bin\r\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 a.rs\r\n    \u2514\u2500\u2500 lib.rs\r\n\r\n2 directories, 3 files\r\n```\r\n\r\n`Cargo.toml`\r\n```toml\r\n[package]\r\nname = \"baz\"\r\nversion = \"0.1.0\"\r\nauthors = []\r\nedition = \"2018\"\r\n\r\n[dependencies]\r\n\r\n[features]\r\ndefault = []\r\nbar = []\r\n```\r\n\r\n`src/lib.rs`\r\n```rust\r\nuse std::ops::Add;\r\n\r\n#[derive(Clone, Debug)]\r\npub struct S<T>(pub T);\r\n\r\n// If comment outed, no error\r\nimpl<T> Add<&S<T>> for &S<T>\r\nwhere\r\n    T: for<'x> From<<&'x T as Add>::Output>,\r\n    for<'x> &'x T: Add,\r\n{\r\n    type Output = S<T>;\r\n    fn add(self, _: &S<T>) -> Self::Output {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\n// If comment outed, no error\r\nimpl<T> Add<&S<T>> for S<T>\r\nwhere\r\n    T: for<'x> From<<&'x T as Add>::Output>,\r\n    for<'x> &'x T: Add,\r\n{\r\n    type Output = Self;\r\n    fn add(self, _: &S<T>) -> Self::Output {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nimpl<T> Add<S<T>> for S<T>\r\nwhere\r\n    T: for<'x> From<<&'x T as Add>::Output>,\r\n    for<'x> &'x T: Add,\r\n{\r\n    type Output = Self;\r\n    fn add(self, _: S<T>) -> Self::Output {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\npub fn foo() {\r\n    dbg!(S(2i32) + S(3i32)); // OK\r\n}\r\n```\r\n\r\n`src/bin/a.rs`\r\n```rust\r\nfn main() {\r\n    #[cfg(not(feature = \"bar\"))]\r\n    {\r\n        use baz::S;\r\n        use std::ops::Add;\r\n        dbg!(S(2i32) + S(3i32)); // E0275\r\n        dbg!(S(2i32).add(S(3i32))); // E0275\r\n        dbg!(std::ops::Add::<S<i32>>::add(S(2i32), S(3i32))); // OK\r\n    }\r\n    #[cfg(feature = \"bar\")]\r\n    {\r\n        use baz::foo;\r\n        // suppress optimize\r\n        let v = std::env::args().collect::<Vec<_>>();\r\n        if v.len() == 42 {\r\n            foo();\r\n        }\r\n        println!(\"Hello, world!\");\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: no compile error\r\n\r\nInstead, this happened: E0275\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.67.0-nightly (b3bc6bf31 2022-11-24)\r\nbinary: rustc\r\ncommit-hash: b3bc6bf31265ac10946a0832092dbcedf9b26805\r\ncommit-date: 2022-11-24\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.67.0-nightly\r\nLLVM version: 15.0.4\r\n```\r\n\r\n```\r\nrustc 1.66.0-beta.2 (0040709e3 2022-11-20)\r\nbinary: rustc\r\ncommit-hash: 0040709e39bfa159d099ee14628ad4ac72f91406\r\ncommit-date: 2022-11-20\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.66.0-beta.2\r\nLLVM version: 15.0.2\r\n```\r\n\r\n```\r\nrustc 1.65.0 (897e37553 2022-11-02)\r\nbinary: rustc\r\ncommit-hash: 897e37553bba8b42751c67658967889d11ecd120\r\ncommit-date: 2022-11-02\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.65.0\r\nLLVM version: 15.0.0\r\n```\r\n\r\n<details><summary>log nightly</summary>\r\n<p>\r\n\r\n```terminal\r\n$ rustc --version --verbose\r\nrustc 1.67.0-nightly (b3bc6bf31 2022-11-24)\r\nbinary: rustc\r\ncommit-hash: b3bc6bf31265ac10946a0832092dbcedf9b26805\r\ncommit-date: 2022-11-24\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.67.0-nightly\r\nLLVM version: 15.0.4\r\n$ cargo clean\r\n$ cargo run --bin a\r\n   Compiling baz v0.1.0 (/home/Toru3/polynomial-ring2)\r\nerror[E0275]: overflow evaluating the requirement `for<'x> &'x Simd<_, _>: Add`\r\n  |\r\n  = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`a`)\r\n  = note: required for `&'x S<Simd<_, _>>` to implement `for<'x> Add`\r\n  = note: 127 redundant requirements hidden\r\n  = note: required for `&'x S<S<S<S<S<...>>>>>` to implement `for<'x> Add`\r\n  = note: the full type name has been written to '/home/Toru3/polynomial-ring2/target/debug/deps/a-84f17e47597c1027.long-type-12017482340628741203.txt'\r\n\r\nFor more information about this error, try `rustc --explain E0275`.\r\nerror: could not compile `baz` due to previous error\r\n$ cargo clean\r\n$ cargo run --bin a --features bar\r\n   Compiling baz v0.1.0 (/home/Toru3/polynomial-ring2)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.68s\r\n     Running `target/debug/a`\r\nHello, world!\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n<details><summary>log beta</summary>\r\n<p>\r\n\r\n```terminal\r\n$ rustc --version --verbose\r\nrustc 1.66.0-beta.2 (0040709e3 2022-11-20)\r\nbinary: rustc\r\ncommit-hash: 0040709e39bfa159d099ee14628ad4ac72f91406\r\ncommit-date: 2022-11-20\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.66.0-beta.2\r\nLLVM version: 15.0.2\r\n$ cargo clean\r\n$ cargo run --bin a\r\n   Compiling baz v0.1.0 (/home/Toru3/polynomial-ring2)\r\nerror[E0275]: overflow evaluating the requirement `for<'x> &'x Simd<_, _>: Add`\r\n  |\r\n  = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`a`)\r\n  = note: required for `&'x S<Simd<_, _>>` to implement `for<'x> Add`\r\n  = note: 127 redundant requirements hidden\r\n  = note: required for `&'x S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<Simd<_, _>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `for<'x> Add`\r\n\r\nFor more information about this error, try `rustc --explain E0275`.\r\nerror: could not compile `baz` due to previous error\r\n$ cargo clean\r\n$ cargo run --bin a --features bar\r\n   Compiling baz v0.1.0 (/home/Toru3/polynomial-ring2)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.64s\r\n     Running `target/debug/a`\r\nHello, world!\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n<details><summary>log stable</summary>\r\n<p>\r\n\r\n```terminal\r\n$ rustc --version --verbose\r\nrustc 1.65.0 (897e37553 2022-11-02)\r\nbinary: rustc\r\ncommit-hash: 897e37553bba8b42751c67658967889d11ecd120\r\ncommit-date: 2022-11-02\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.65.0\r\nLLVM version: 15.0.0\r\n$ cargo clean\r\n$ cargo run --bin a\r\n   Compiling baz v0.1.0 (/home/Toru3/polynomial-ring2)\r\nerror[E0275]: overflow evaluating the requirement `for<'x> &'x Simd<_, _>: Add`\r\n  |\r\n  = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`a`)\r\n  = note: required for `&'x S<Simd<_, _>>` to implement `for<'x> Add`\r\n  = note: 127 redundant requirements hidden\r\n  = note: required for `&'x S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<Simd<_, _>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `for<'x> Add`\r\n\r\nFor more information about this error, try `rustc --explain E0275`.\r\nerror: could not compile `baz` due to previous error\r\n$ cargo clean\r\n$ cargo run --bin a --features bar\r\n   Compiling baz v0.1.0 (/home/Toru3/polynomial-ring2)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.66s\r\n     Running `target/debug/a`\r\nHello, world!\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104981/timeline", "performed_via_github_app": null, "state_reason": null}