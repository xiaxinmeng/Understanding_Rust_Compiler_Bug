{"url": "https://api.github.com/repos/rust-lang/rust/issues/41732", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41732/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41732/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41732/events", "html_url": "https://github.com/rust-lang/rust/issues/41732", "id": 226098067, "node_id": "MDU6SXNzdWUyMjYwOTgwNjc=", "number": 41732, "title": "Remove unnecessary unstable features from libsyntax (and all transitive dependencies) to allow rustfmt to work on stable and enable the deprecation of syntex", "user": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-05-03T20:00:52Z", "updated_at": "2017-11-08T08:50:27Z", "closed_at": "2017-11-08T08:50:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "rustfmt needs to parse Rust code. Its options are libsyntax and syntex. @erickt (and everyone else) wants to deprecate syntex now that it's no longer needed for Serde. But libsyntax uses unstable features, which means that it will make people require a nightly compiler in the same vein that clippy currently does (i.e. will need to have one installed, but will not infect user code with nightliness). One option is to just ship rustfmt officially and not care that it can't be built on stable, in the same vein as libstd. But @ubsan would prefer to get libsyntax running on stable, and she believes that it would not be prohibitively difficult to do so.\r\n\r\nExcerpted conversation for reference:\r\n```\r\n13:13 < ubsan> #![feature(associated_consts)] #![feature(const_fn)]\r\n               #![feature(optin_builtin_traits)] #![feature(rustc_private)]\r\n               #![feature(staged_api)] #![feature(str_escape)]\r\n               #![feature(unicode)] #![feature(rustc_diagnostic_macros)]\r\n               #![feature(specialization)] #![feature(i128_type)]\r\n13:13 < ubsan> I have no idea why most of those are being used\r\n13:14 <&mbrubeck> library features like `rustc_private` feel like a different\r\n                  category than language features like `associated_consts`\r\n13:14 < ubsan> yeah\r\n13:14 < ubsan> to me, it seems like the only one syntax should be using is i128\r\n13:14 < ubsan> it seems... very strange... to have the rest of those\r\n13:15 < ubsan> I don't even know what 3 of them do\r\n13:15 <&mbrubeck> I can't see where `const fn` is used... at least it doesn't\r\n                  seem to define any const fns\r\n13:15 < ubsan> and why does syntax need associated consts, const fns, and\r\n               optin-builtin-traits?\r\n13:16 < bstrie> I don't suppose feature attributes warn when features aren't\r\n                actually being used?\r\n13:16 < bstrie> seems like that might be hard to determine\r\n13:16   mbrubeck has just been doing this same thing with Servo:\r\n                 https://github.com/servo/servo/issues/5286\r\n13:17 <&mbrubeck> bstrie: There's a lint, yes. Don't know whether it's 100%\r\n                  reliable or not.\r\n13:17 <&mbrubeck> In fact, it must not be because one of the feature gates\r\n                  removed here was unused but didn't warn:\r\n                  https://github.com/servo/servo/pull/16681\r\n13:18 < ubsan> it seems to me that if we remove all of the features of\r\n               libsyntax except for the `rustc_` ones\r\n13:19 < ubsan> and then featurize being a rustc crate\r\n13:19 < ubsan> you could literally just have syntex be syntax\r\n13:19 < bstrie> that would be nice\r\n13:19 < ubsan> looks like associated_consts is used in one place\r\n13:20 < ubsan> https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/parser.rs#L66\r\n13:20 < bstrie> ubsan: we'd also need to remove all the feature gates on all\r\n                the crates that libsyntax transitively uses\r\n13:20 < ubsan> bstrie: that's true\r\n13:21 < ubsan> I can't imagine it's very hard though\r\n13:21 < ubsan> where's bitflags! defined?\r\n13:21 < bstrie> probably not using the crates.io bitflags crate, eh?\r\n13:21 < ubsan> nope\r\n13:21 < ubsan> that's the other thing\r\n13:22 < ubsan> I feel like rustc should use crates.io crates when possible\r\n13:22 < bstrie> well that ability is relatively new, it's no wonder that it's\r\n                not\r\n13:22 <&mbrubeck> heh, rustc is using both bitflags and rustc_bitflags\r\n13:22 < ubsan> as opposed to being subtly different\r\n13:22 < ubsan> mbrubeck: lel\r\n13:23 <&mbrubeck> oh, because bitflags is in the dependency graph of things\r\n                  like mdbook and pulldown-cmark\r\n13:23 <&mbrubeck> so possibly not actually used in rustc\r\n13:23 <&mbrubeck> (I'm just searching through Cargo.lock)\r\n13:25 < eddyb> ubsan: I was actually supposed to look into making that suck less\r\n13:27 < ubsan> eddyb: make associated consts stable pls\r\n13:28 < eddyb> ubsan: https://github.com/rust-lang/rust/issues/27812\r\n13:59 < ubsan> bstrie: so my opinion is\r\n13:59 < ubsan> removing the features should be easy\r\n13:59 < ubsan> it takes maybe a few hours of work\r\n13:59 < ubsan> then nobody would really *need* to keep syntex up to date\r\n14:00 < ubsan> (except, perhaps, to replace the i/u128 type, but that should be\r\n               an easy bit of work that doesn't need to be changed each time)\r\n14:03 < eddyb> ubsan: so to stage i128\r\n14:03 < eddyb> ubsan: we had a rustc_i128 crate that had fake ones\r\n14:03 < eddyb> I think they were 64-bit instead but I'm not sure :P\r\n14:04 < ubsan> eddyb: I mean, you can implement them with 64-bit types\r\n14:04 < eddyb> hmm\r\n14:04 < ubsan> the only issue is `as` casts\r\n14:04 < eddyb> ubsan: you don't need all the ops, right?\r\n14:04 < eddyb> heh\r\n14:05 < ubsan> I mean, the thing is, the only op you can't get is as casts\r\n14:05 < ubsan> (which is another reason why `as` is terrible *cough*)\r\n14:06 < nagisa> I proposed to stabilise i128 on the tracking issue\r\n14:06 < ubsan> that works too\r\n15:35 < bstrie> erickt: in case you haven't been following the above saga,\r\n                ubsan posits that it might be easier to remove the unstable\r\n                features from libsyntax than to continue maintaining syntex for\r\n                rustfmt's sake\r\n15:36 <&erickt> bstrie: I'd love it if libsyntax removed unstable features\r\n15:37 <&erickt> I did a pass on that, oh, two years ago?\r\n15:37 <&erickt> got rid of some of em\r\n15:38 < ubsan> erickt: there's only two features that really need to be worked\r\n               on, left\r\n15:38 < ubsan> besides the rustc specific ones\r\n15:38 < ubsan> (which can be put under a feature gate)\r\n15:39 < ubsan> erickt: i128, and unicode\r\n15:53 < bstrie> < ubsan> it seems to me that if we remove all of the features\r\n               of libsyntax except for the `rustc_` ones and then featurize being a rustc crate\r\n15:53 < bstrie> ubsan: can you elaborate on ^\r\n15:56 < ubsan> bstrie: like, a crate feature\r\n15:59 < ubsan> #[cfg_attr(feature = \"rustc\", feature(rustc_doop))]\r\n```\r\n\r\nTL;DR: stabilize \"i128\" and \"unicode\", make the \"rustc\" features conditional on being used in rustc, and remove everything else. Should take \"maybe a few hours of work\". :P", "closed_by": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41732/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41732/timeline", "performed_via_github_app": null, "state_reason": "completed"}