{"url": "https://api.github.com/repos/rust-lang/rust/issues/88405", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88405/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88405/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88405/events", "html_url": "https://github.com/rust-lang/rust/issues/88405", "id": 981586623, "node_id": "MDU6SXNzdWU5ODE1ODY2MjM=", "number": 88405, "title": "Using GATs with other associated types sometimes claims those types don't satisfy their supertraits", "user": {"login": "kahomayo", "id": 74737340, "node_id": "MDQ6VXNlcjc0NzM3MzQw", "avatar_url": "https://avatars.githubusercontent.com/u/74737340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kahomayo", "html_url": "https://github.com/kahomayo", "followers_url": "https://api.github.com/users/kahomayo/followers", "following_url": "https://api.github.com/users/kahomayo/following{/other_user}", "gists_url": "https://api.github.com/users/kahomayo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kahomayo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kahomayo/subscriptions", "organizations_url": "https://api.github.com/users/kahomayo/orgs", "repos_url": "https://api.github.com/users/kahomayo/repos", "events_url": "https://api.github.com/users/kahomayo/events{/privacy}", "received_events_url": "https://api.github.com/users/kahomayo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-08-27T20:48:47Z", "updated_at": "2021-10-16T09:35:48Z", "closed_at": "2021-10-16T09:35:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using an associated type as an argument to a GAT will sometimes fail with an incorrect `[E0277]` \"trait bound is not satisfied\" error, when that type is used to constrain an associated type of another trait.\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\n\r\ntrait SomeTrait {}\r\ntrait OtherTrait { type Item; }\r\n\r\ntrait ErrorSimpleExample {\r\n    type AssociatedType: SomeTrait;\r\n    type GatBounded<T: SomeTrait>;\r\n    type ErrorMinimal: OtherTrait<Item = Self::GatBounded<Self::AssociatedType>>;\r\n}\r\n```\r\n[Playground link including the other examples in this issue](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=f434deb6a58e0c399a6cfae290688012)\r\n\r\nThis code should compile fine. In particular, `Self::GatBounded<Self::AssociatedType>` should be valid because `Self::AssociatedType` is constrained to implement `SomeTrait`.\r\n\r\nHowever, the compilation fails with the following error:\r\n\r\n```\r\nerror[E0277]: the trait bound `<Self as ErrorSimpleExample>::AssociatedType: SomeTrait` is not satisfied\r\n --> src/lib.rs:9:35\r\n  |\r\n9 |     type ErrorMinimal: OtherTrait<Item = Self::GatBounded<Self::AssociatedType>>;\r\n  |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SomeTrait` is not implemented for `<Self as ErrorSimpleExample>::AssociatedType`\r\n  |\r\nnote: required by a bound in `ErrorSimpleExample::GatBounded`\r\n --> src/lib.rs:8:24\r\n  |\r\n8 |     type GatBounded<T: SomeTrait>;\r\n  |                        ^^^^^^^^^ required by this bound in `ErrorSimpleExample::GatBounded`\r\nhelp: consider further restricting the associated type\r\n  |\r\n6 | trait ErrorSimpleExample where <Self as ErrorSimpleExample>::AssociatedType: SomeTrait {\r\n  |                          +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\n```\r\n\r\nThe trait bound `Self::AssociatedType: SomeTrait` is obviously satisfied, so something is wrong here. The suggested `where` clause does not fix the error, instead the compiler will suggest you add another one.\r\n\r\n<details><summary>Adding the same bound again and again</summary>\r\n<p>\r\n\r\n```rust\r\n\r\n#![feature(generic_associated_types)]\r\n\r\ntrait SomeTrait {}\r\ntrait OtherTrait {\r\n    type Item;\r\n}\r\n\r\ntrait ErrorSimpleExample\r\nwhere\r\n    <Self as ErrorSimpleExample>::AssociatedType: SomeTrait,\r\n    <Self as ErrorSimpleExample>::AssociatedType: SomeTrait,\r\n    <Self as ErrorSimpleExample>::AssociatedType: SomeTrait,\r\n    <Self as ErrorSimpleExample>::AssociatedType: SomeTrait,\r\n    <Self as ErrorSimpleExample>::AssociatedType: SomeTrait,\r\n    <Self as ErrorSimpleExample>::AssociatedType: SomeTrait,\r\n{\r\n    type AssociatedType: SomeTrait;\r\n    type GatBounded<T: SomeTrait>;\r\n    type ErrorMinimal: OtherTrait<Item = Self::GatBounded<Self::AssociatedType>>;\r\n}\r\n```\r\n\r\n```\r\nhelp: consider further restricting the associated type\r\n   |\r\n15 |     <Self as ErrorSimpleExample>::AssociatedType: SomeTrait, <Self as ErrorSimpleExample>::AssociatedType: SomeTrait\r\n   |    \r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n### Further observations\r\n\r\n#### Spreading types over several traits causes the same issue\r\n\r\nThis error occurs even if the first two `type`s, `AssociatedType` and `GatBounded`, are part of other traits (implemented either by `Self` or some generic type arguments).\r\n\r\n```rust\r\ntrait ExampleSetup {\r\n    type AssociatedTypeOfSomeTrait: SomeTrait;\r\n    type GatBoundedOnSomeTrait<T: SomeTrait>;\r\n}\r\n\r\ntrait ErrorUsingSupertrait: ExampleSetup {\r\n    type ErrorSupertrait: OtherTrait<Item = Self::GatBoundedOnSomeTrait<Self::AssociatedTypeOfSomeTrait>>;\r\n}\r\n```\r\n\r\n#### Error also happens in generic argument\r\n\r\n```rust\r\ntrait ErrorInTraitArgument: ExampleSetup {\r\n    type ErrorTraitArg: From<Self::GatBoundedOnSomeTrait<Self::AssociatedTypeOfSomeTrait>>;\r\n}\r\n```\r\n\r\n#### Error affected by other items in trait\r\n\r\nThe error seems to be affected by the presence and ordering of other items in the trait. This code happily compiles:\r\n\r\n```rust\r\ntrait OkInReturnBefore: ExampleSetup {\r\n    fn ok_before_type() -> Self::GatBoundedOnSomeTrait<Self::AssociatedTypeOfSomeTrait>;\r\n    type OkAfterFn: OtherTrait<Item = Self::GatBoundedOnSomeTrait<Self::AssociatedTypeOfSomeTrait>>;\r\n}\r\n```\r\n\r\nBut swapping the two items causes the above error:\r\n\r\n```rust\r\ntrait ErrorInReturnAfter: ExampleSetup {\r\n    type ErrorBeforeFn: OtherTrait<Item = Self::GatBoundedOnSomeTrait<Self::AssociatedTypeOfSomeTrait>>;\r\n    fn error_after_type() -> Self::GatBoundedOnSomeTrait<Self::AssociatedTypeOfSomeTrait>;\r\n}\r\n```\r\n\r\nMake sure to **write each test in a separate trait** to avoid other items messing with your testing. I initially thought the `ErrorTraitArg` example did not produce an error because I had put it into the same trait as other working examples.\r\n\r\n#### Potentially related issue\r\n\r\nI found another issue, #88287, that produces the same error message. However, I'm not sure if that is the same bug because I could not get `Self::GatBounded<Self::AssociatedType>` to error in only the return type position. That issue's example also uses the TAIT feature (which I'm unfamiliar with) so I was unable to reduce it enough to see similarities to my example.\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.56.0-nightly (0afc20860 2021-08-25)\r\nbinary: rustc\r\ncommit-hash: 0afc20860eb98a29d9bbeea80f2acc5be38c6bf3\r\ncommit-date: 2021-08-25\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.56.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\nAs well as rust playground `1.56.0-nightly (2021-08-25 0afc20860eb98a29d9bb)`\r\n\r\n@rustbot label +T-compiler +F-generic_associated_types +A-Traits +requires-nightly\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88405/timeline", "performed_via_github_app": null, "state_reason": "completed"}