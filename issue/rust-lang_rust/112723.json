{"url": "https://api.github.com/repos/rust-lang/rust/issues/112723", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112723/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112723/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112723/events", "html_url": "https://github.com/rust-lang/rust/issues/112723", "id": 1761327645, "node_id": "I_kwDOAAsO6M5o-7od", "number": 112723, "title": "std::sync::mpsc::Receiver::try_recv can block forever if sending thread is blocked", "user": {"login": "benhansen-io", "id": 509969, "node_id": "MDQ6VXNlcjUwOTk2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/509969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benhansen-io", "html_url": "https://github.com/benhansen-io", "followers_url": "https://api.github.com/users/benhansen-io/followers", "following_url": "https://api.github.com/users/benhansen-io/following{/other_user}", "gists_url": "https://api.github.com/users/benhansen-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/benhansen-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benhansen-io/subscriptions", "organizations_url": "https://api.github.com/users/benhansen-io/orgs", "repos_url": "https://api.github.com/users/benhansen-io/repos", "events_url": "https://api.github.com/users/benhansen-io/events{/privacy}", "received_events_url": "https://api.github.com/users/benhansen-io/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-06-16T20:55:24Z", "updated_at": "2023-06-17T13:28:58Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nuse std::{\r\n    sync::{mpsc, Arc},\r\n    time::{Duration, Instant},\r\n};\r\n\r\nuse thread_priority::ThreadPriority;\r\n\r\nfn main() {\r\n    const PINNED_CORE: usize = 2;\r\n\r\n    let (sender, receiver) = mpsc::channel::<usize>();\r\n\r\n    std::thread::Builder::new()\r\n        .name(\"sending\".to_owned())\r\n        .spawn(move || {\r\n            thread_priority::set_current_thread_priority(ThreadPriority::Min).unwrap();\r\n            core_affinity::set_for_current(core_affinity::CoreId { id: PINNED_CORE });\r\n\r\n            loop {\r\n                sender.send(42).unwrap();\r\n            }\r\n        })\r\n        .unwrap();\r\n\r\n    let num_received = Arc::new(std::sync::atomic::AtomicUsize::new(0));\r\n\r\n    std::thread::Builder::new()\r\n        .name(\"receiving\".to_owned())\r\n        .spawn({\r\n            let num_received = num_received.clone();\r\n            move || {\r\n                thread_priority::set_current_thread_priority(ThreadPriority::Max).unwrap();\r\n                core_affinity::set_for_current(core_affinity::CoreId { id: PINNED_CORE });\r\n\r\n                loop {\r\n                    let start = Instant::now();\r\n                    let try_receive_result = receiver.try_recv();\r\n                    let elapsed = start.elapsed();\r\n                    if elapsed > Duration::from_secs(1) {\r\n                        println!(\"try_recv blocked for {:.2} seconds\", elapsed.as_secs_f32());\r\n                    }\r\n                    match try_receive_result {\r\n                        Ok(_) => {\r\n                            num_received.fetch_add(1, std::sync::atomic::Ordering::SeqCst);\r\n                        }\r\n                        Err(mpsc::TryRecvError::Empty) => {\r\n                            std::thread::sleep(Duration::from_millis(200));\r\n                        }\r\n                        Err(mpsc::TryRecvError::Disconnected) => unreachable!(),\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .unwrap();\r\n\r\n    loop {\r\n        std::thread::sleep(Duration::from_millis(500));\r\n        println!(\r\n            \"Receiving thread has received {}\",\r\n            num_received.load(std::sync::atomic::Ordering::SeqCst)\r\n        )\r\n    }\r\n}\r\n\r\n```\r\n(full crate code available at https://github.com/benhansen-io/mpsc_deadlock_reproducer)\r\n\r\nBased on the following documentation:\r\n\r\n\r\n> This method will never block the caller in order to wait for data to become available. Instead, this will always return immediately with a possible option of pending data on the channel.\r\n\r\nI would not expect try_recv to ever block but the ouput shows lines such as:\r\n\r\n```\r\nReceiving thread has received 740113466                                                                                                 \r\nReceiving thread has received 740113466                                                                                                 \r\nReceiving thread has received 740113466                                                                                                 \r\ntry_recv blocked for 26.77 seconds                                                                                                      \r\nReceiving thread has received 740354709                                                                                                 \r\nReceiving thread has received 747929297                                                                                                 \r\nReceiving thread has received 754959588\r\n```\r\n\r\nWhen a deadlock is happening I get the following backtraces:\r\n\r\nBacktrace of the sending thread:\r\n\r\n```\r\n0  core::sync::atomic::atomic_or<usize> (dst=0x7fffec243ac8, val=1, order=<optimized out>) at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/sync/atomic.rs:3329\r\n#1  core::sync::atomic::AtomicUsize::fetch_or (self=0x7fffec243ac8, val=1, order=<optimized out>) at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/sync/atomic.rs:2645\r\n#2  std::sync::mpmc::list::Channel<usize>::write<usize> (self=0x5555555d4c00, token=0x7ffff7c8c910, msg=42) at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/sync/mpmc/list.rs:270\r\n#3  0x0000555555572949 in std::sync::mpmc::list::Channel<usize>::send<usize> (self=0x5555555d4c00, msg=42, _deadline=...) at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/sync/mpmc/list.rs:403\r\n#4  0x0000555555570015 in std::sync::mpmc::Sender<usize>::send<usize> (self=0x7ffff7c8cb10, msg=42) at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/sync/mpmc/mod.rs:128\r\n#5  0x0000555555566ad3 in std::sync::mpsc::Sender<usize>::send<usize> (self=0x7ffff7c8cb10, t=42) at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/sync/mpsc/mod.rs:614\r\n#6  0x0000555555573e8a in mpsc_deadlock_reproducer::main::{closure#0} () at src/main.rs:20\r\n#7  0x000055555556ac23 in std::sys_common::backtrace::__rust_begin_short_backtrace<mpsc_deadlock_reproducer::main::{closure_env#0}, ()> (f=...) at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/sys_common/backtrace.rs:134\r\n#8  0x000055555556ef63 in std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure#0}<mpsc_deadlock_reproducer::main::{closure_env#0}, ()> () at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/thread/mod.rs:526\r\n#9  0x0000555555572d93 in core::panic::unwind_safe::{impl#23}::call_once<(), std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure_env#0}<mpsc_deadlock_reproducer::main::{closure_env#0}, ()>> (self=...)\r\n    at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/panic/unwind_safe.rs:271\r\n#10 0x0000555555564d86 in std::panicking::try::do_call<core::panic::unwind_safe::AssertUnwindSafe<std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure_env#0}<mpsc_deadlock_reproducer::main::{closure_env#0}, ()>>, ()> (data=0x7ffff7c8cc90)\r\n    at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/panicking.rs:485\r\n#11 0x00005555555650fb in __rust_try ()\r\n#12 0x0000555555564b0e in std::panicking::try<(), core::panic::unwind_safe::AssertUnwindSafe<std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure_env#0}<mpsc_deadlock_reproducer::main::{closure_env#0}, ()>>> (f=...)\r\n    at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/panicking.rs:449\r\n#13 0x0000555555565343 in std::panic::catch_unwind<core::panic::unwind_safe::AssertUnwindSafe<std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure_env#0}<mpsc_deadlock_reproducer::main::{closure_env#0}, ()>>, ()> (f=...)\r\n    at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/panic.rs:140\r\n#14 0x000055555556e9bc in std::thread::{impl#0}::spawn_unchecked_::{closure#1}<mpsc_deadlock_reproducer::main::{closure_env#0}, ()> () at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/thread/mod.rs:525\r\n#15 0x00005555555611ee in core::ops::function::FnOnce::call_once<std::thread::{impl#0}::spawn_unchecked_::{closure_env#1}<mpsc_deadlock_reproducer::main::{closure_env#0}, ()>, ()> () at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/ops/function.rs:250\r\n#16 0x0000555555597085 in alloc::boxed::{impl#45}::call_once<(), dyn core::ops::function::FnOnce<(), Output=()>, alloc::alloc::Global> () at library/alloc/src/boxed.rs:1973\r\n#17 alloc::boxed::{impl#45}::call_once<(), alloc::boxed::Box<dyn core::ops::function::FnOnce<(), Output=()>, alloc::alloc::Global>, alloc::alloc::Global> () at library/alloc/src/boxed.rs:1973\r\n#18 std::sys::unix::thread::{impl#2}::new::thread_start () at library/std/src/sys/unix/thread.rs:108\r\n#19 0x00007ffff7d1844b in ?? () from /usr/lib/libc.so.6\r\n#20 0x00007ffff7d9be40 in ?? () from /usr/lib/libc.so.6\r\n```\r\n\r\nBacktrace of the receiving thread:\r\n\r\n```\r\n#0  0x00007ffff7d804fb in sched_yield () from /usr/lib/libc.so.6\r\n#1  0x0000555555570586 in std::sync::mpmc::utils::Backoff::spin_heavy (self=0x7ffff7a8b664)\r\n    at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/sync/mpmc/utils.rs:130\r\n#2  0x0000555555570a7f in std::sync::mpmc::list::Slot<usize>::wait_write<usize> (self=0x7fffec243ac0)\r\n    at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/sync/mpmc/list.rs:49\r\n#3  0x000055555557266a in std::sync::mpmc::list::Channel<usize>::read<usize> (self=0x5555555d4c00, token=0x7ffff7a8b800)\r\n    at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/sync/mpmc/list.rs:373\r\n#4  0x0000555555572cbc in std::sync::mpmc::list::Channel<usize>::try_recv<usize> (self=0x5555555d4c00)\r\n    at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/sync/mpmc/list.rs:411\r\n#5  0x00005555555701ba in std::sync::mpmc::Receiver<usize>::try_recv<usize> (self=0x7ffff7a8bba0)\r\n    at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/sync/mpmc/mod.rs:290\r\n#6  0x0000555555566af6 in std::sync::mpsc::Receiver<usize>::try_recv<usize> (self=0x7ffff7a8bba0)\r\n    at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/sync/mpsc/mod.rs:801\r\n#7  0x0000555555573f9c in mpsc_deadlock_reproducer::main::{closure#1} () at src/main.rs:37\r\n#8  0x000055555556ac59 in std::sys_common::backtrace::__rust_begin_short_backtrace<mpsc_deadlock_reproducer::main::{closure_env#1}, ()>\r\n    (f=...) at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/sys_common/backtrace.rs:134\r\n#9  0x000055555556ef45 in std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure#0}<mpsc_deadlock_reproducer::main::{closure_env#1}, ()> () at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/thread/mod.rs:526\r\n#10 0x0000555555572d58 in core::panic::unwind_safe::{impl#23}::call_once<(), std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure_env#0}<mpsc_deadlock_reproducer::main::{closure_env#1}, ()>> (self=...)\r\n    at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/panic/unwind_safe.rs:271\r\n#11 0x0000555555564dfe in std::panicking::try::do_call<core::panic::unwind_safe::AssertUnwindSafe<std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure_env#0}<mpsc_deadlock_reproducer::main::{closure_env#1}, ()>>, ()> (data=0x7ffff7a8bc70)\r\n    at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/panicking.rs:485\r\n#12 0x00005555555650fb in __rust_try ()\r\n#13 0x0000555555564bae in std::panicking::try<(), core::panic::unwind_safe::AssertUnwindSafe<std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure_env#0}<mpsc_deadlock_reproducer::main::{closure_env#1}, ()>>> (f=...)\r\n    at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/panicking.rs:449\r\n#14 0x0000555555565366 in std::panic::catch_unwind<core::panic::unwind_safe::AssertUnwindSafe<std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure_env#0}<mpsc_deadlock_reproducer::main::{closure_env#1}, ()>>, ()> (f=...)\r\n```\r\n\r\ntry_recv calling read which calls wait_write thus causing try_recv to wait on the sender seems fundamentally wrong.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.70.0 (90c541806 2023-05-31)\r\nbinary: rustc\r\ncommit-hash: 90c541806f23a127002de5b4038be731ba1458ca\r\ncommit-date: 2023-05-31\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.70.0\r\nLLVM version: 16.0.2\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112723/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112723/timeline", "performed_via_github_app": null, "state_reason": null}