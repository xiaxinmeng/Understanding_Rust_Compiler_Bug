{"url": "https://api.github.com/repos/rust-lang/rust/issues/67684", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67684/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67684/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67684/events", "html_url": "https://github.com/rust-lang/rust/issues/67684", "id": 543274759, "node_id": "MDU6SXNzdWU1NDMyNzQ3NTk=", "number": 67684, "title": "internal compiler error: src/librustc_traits/normalize_erasing_regions.rs:42", "user": {"login": "dpp", "id": 10572, "node_id": "MDQ6VXNlcjEwNTcy", "avatar_url": "https://avatars.githubusercontent.com/u/10572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpp", "html_url": "https://github.com/dpp", "followers_url": "https://api.github.com/users/dpp/followers", "following_url": "https://api.github.com/users/dpp/following{/other_user}", "gists_url": "https://api.github.com/users/dpp/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpp/subscriptions", "organizations_url": "https://api.github.com/users/dpp/orgs", "repos_url": "https://api.github.com/users/dpp/repos", "events_url": "https://api.github.com/users/dpp/events{/privacy}", "received_events_url": "https://api.github.com/users/dpp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-12-28T20:01:37Z", "updated_at": "2021-12-01T16:36:10Z", "closed_at": "2021-12-01T16:36:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "**EDITED**: MCVE is here: https://github.com/rust-lang/rust/issues/67684#issuecomment-747189906\r\n\r\nI received this compiler bug:\r\n\r\n```\r\nsand:mesa_x dpp$ cargo test\r\n   Compiling mesa_x v0.1.0 (/Users/dpp/proj/mesa_x)\r\nerror: internal compiler error: src/librustc_traits/normalize_erasing_regions.rs:42: could not fully normalize `fn() -> <impl combine::Parser as combine::Parser>::PartialState {<<impl combine::Parser as combine::Parser>::PartialState as std::default::Default>::default}`\r\n\r\nthread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:931:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n```\r\n\r\nCompiling with this cargo.toml file:\r\n\r\n```\r\n[package]\r\nname = \"mesa_x\"\r\nversion = \"0.1.0\"\r\nauthors = [\"David Pollak <feeder.of.the.bears@gmail.com>\"]\r\nedition = \"2018\"\r\n\r\n[dependencies]\r\n# nom = \"5.0.1\"\r\ncombine = \"3.8.1\"\r\n```\r\n\r\nAnd this `main.rs`:\r\n\r\n```\r\n#[macro_use]\r\nextern crate combine;\r\nuse combine::parser::char::{alpha_num, char, digit, letter, spaces};\r\nuse combine::stream::{Stream};\r\nuse combine::{\r\n    between, choice, attempt, easy,\r\n    many, many1, none_of, optional, parser, sep_by, Parser,\r\n};\r\n\r\n\r\n#[derive(Debug, PartialEq)]\r\npub struct Address {}\r\n#[derive(Debug, PartialEq)]\r\npub enum Range {}\r\n#[derive(Debug, PartialEq)]\r\npub enum Function {}\r\n\r\n#[derive(Debug, PartialEq)]\r\npub enum Expression {\r\n    Int(i128),\r\n    Float(f64),\r\n    Str(String),\r\n    Identifier(String),\r\n    Address(Address),\r\n    Range(Range),\r\n    Function(String, Vec<Expression>),\r\n    Infix(Function, Box<Expression>, Box<Expression>),\r\n    Expression(Box<Expression>),\r\n}\r\n\r\n\r\n// `impl Parser` can be used to create reusable parsers with zero overhead\r\nfn expr_<I>() -> impl Parser<Input = I, Output = Expression>\r\nwhere\r\n    I: Stream<Item = char, Error = easy::ParseError<I>>,\r\n    // Necessary due to rust-lang/rust#24159\r\n   // I::Error: ParseError<I::Item, I::Range, I::Position>,\r\n{\r\n \r\n    let int2 =  between(optional(spaces()), optional(spaces()), (optional(char('-')), many1(digit())))\r\n    .and_then(|(sign, s): (Option<char>, String)| {\r\n         match (sign, s.parse::<i128>()) {\r\n            (Some('-'), Ok(r)) => Ok(Expression::Int(r * -1i128)),\r\n            (_, Ok(r)) => Ok(Expression::Int(r)),\r\n            (_, Err(_x)) => Err(easy::Error::Expected(easy::Info::Borrowed(\"combine\"))),\r\n        }\r\n\r\n        });\r\n\r\n    let string = between(\r\n        (optional(spaces()), char('\"')),\r\n        (char('\"'), optional(spaces())),\r\n        many(none_of(\"\\\"\".chars())),\r\n    )\r\n    .map(|s| Expression::Str(s));\r\n\r\n    let identifier = (spaces(), letter(), many(alpha_num()))\r\n        .map(|(_, c, st): ((), char, String)| c.to_string() + &st);\r\n\r\n        let identifier2 = (spaces(), letter(), many(alpha_num()), spaces())\r\n        .map(|(_, c, st, _): ((), char, String, ())| Expression::Identifier(c.to_string() + &st));\r\n\r\n    let comma_list = sep_by(expr(), (optional(spaces()), char(','), optional(spaces()))).map(|v: Vec<Expression>| v);\r\n\r\n    let function = (\r\n        identifier,\r\n        between(char('('),\r\n        char(')'), comma_list)\r\n    )\r\n        .map(|(id, exprs)| Expression::Function(id, exprs));\r\n\r\n\r\n    choice((attempt(function), attempt(identifier2), attempt(string), attempt(int2))) //.skip_spaces()\r\n}\r\n\r\nparser! {\r\n    fn expr[I]()(I) -> Expression\r\n    where [I: Stream<Item = char, Error = easy::ParseError<I>>]\r\n    {\r\n        expr_()\r\n    }\r\n}\r\n\r\n#[test]\r\nfn test_parsing() {\r\n    let test_exprs = vec![\r\n        r#\"147\"#,\r\n        r#\"\"Hello World\"\"#,\r\n        r#\"true\"#,\r\n        r#\"if(32, \"yes\", \"no\")\"#,\r\n        r#\"if(true, \"yes\", \"no\")\"#,\r\n        r#\"  \"Hello World\"\"#,\r\n        r#\"-32\"#,\r\n        r#\"32.99\"#,\r\n        r#\"-32.822\"#,\r\n        //r#\"SuM(a1:$B7)\"#,\r\n        //r#\"3 + 39\"#,\r\n        //r#\"IF(a1, SUM(a1:$b$7), 3 + 39)\"#,\r\n    ];\r\n\r\n    for item in test_exprs {\r\n        match expr().easy_parse(item) {\r\n            Ok((_x, \"\")) => {\r\n                //println!(\"Got {:#?}\", x);\r\n                assert!(true)},\r\n            Ok((_, x)) => assert!(\r\n                false,\r\n                format!(\"Failed to parse whole thing... remaining '{}'\", x)\r\n            ),\r\n            Err(x) => assert!(false, format!(\"Trying '{}', got Error {:#?}\", item, x)),\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    println!(\"Hello, world!\");\r\n}\r\n```\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67684/timeline", "performed_via_github_app": null, "state_reason": "completed"}