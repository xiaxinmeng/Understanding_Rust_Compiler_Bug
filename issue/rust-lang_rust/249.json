{"url": "https://api.github.com/repos/rust-lang/rust/issues/249", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/249/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/249/events", "html_url": "https://github.com/rust-lang/rust/issues/249", "id": 646679, "node_id": "MDU6SXNzdWU2NDY2Nzk=", "number": 249, "title": "Polymorphic types don't seem to work across crate boundaries", "user": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2011-03-04T13:33:42Z", "updated_at": "2011-03-06T06:28:36Z", "closed_at": "2011-03-06T06:28:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If I use the rustc crate, I can't match on a std.option.t coming from that crate \u2014 firstly, the compiler thinks it is of type rustc.std.option.t, but even if I qualify it like that, I get errors like\n\n```\nerror: mismatched types: expected rustc.std.option.t but found rustc.std.option.t\n```\n\nMaybe this isn't planned for rustboot. It makes it rather hard to pretty-print an AST, but that can be worked around by moving all this into the rustc crate.\n\n(At some point, having the parser in a separate crate, and with an API that doesn't require creation of compiler sessions and environments, would be nice too.)\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/249/timeline", "performed_via_github_app": null, "state_reason": "completed"}