{"url": "https://api.github.com/repos/rust-lang/rust/issues/101628", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101628/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101628/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101628/events", "html_url": "https://github.com/rust-lang/rust/issues/101628", "id": 1368246414, "node_id": "I_kwDOAAsO6M5RjciO", "number": 101628, "title": "In-place optimisation in IntoIterator can lead to memory leak", "user": {"login": "Voultapher", "id": 6864584, "node_id": "MDQ6VXNlcjY4NjQ1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6864584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Voultapher", "html_url": "https://github.com/Voultapher", "followers_url": "https://api.github.com/users/Voultapher/followers", "following_url": "https://api.github.com/users/Voultapher/following{/other_user}", "gists_url": "https://api.github.com/users/Voultapher/gists{/gist_id}", "starred_url": "https://api.github.com/users/Voultapher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Voultapher/subscriptions", "organizations_url": "https://api.github.com/users/Voultapher/orgs", "repos_url": "https://api.github.com/users/Voultapher/repos", "events_url": "https://api.github.com/users/Voultapher/events{/privacy}", "received_events_url": "https://api.github.com/users/Voultapher/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2022-09-09T19:35:26Z", "updated_at": "2022-10-11T08:05:08Z", "closed_at": "2022-10-04T16:24:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nfn main() {\r\n    #[derive(Debug)]\r\n    struct Old(i32);\r\n\r\n    impl Drop for Old {\r\n        fn drop(&mut self) {\r\n            if self.0 == 44 {\r\n                panic!();\r\n            }\r\n\r\n            println!(\"Dropped Old: {}\", self.0);\r\n        }\r\n    }\r\n\r\n    #[derive(Debug)]\r\n    struct New(i32);\r\n\r\n    impl Drop for New {\r\n        fn drop(&mut self) {\r\n            println!(\"Dropped New: {}\", self.0);\r\n        }\r\n    }\r\n\r\n    let vec: Vec<Old> = vec![Old(11), Old(22), Old(33), Old(44), Old(55)];\r\n    let vec_ptr = vec.as_ptr();\r\n\r\n    let mapped_vec: Vec<New> = vec.into_iter().map(|x| New(x.0)).take(2).collect();\r\n    let mapped_vec_ptr = mapped_vec.as_ptr();\r\n\r\n    println!(\"vec_ptr:    {vec_ptr:?}\");\r\n    println!(\"mapped_vec: {mapped_vec_ptr:?}\");\r\n    println!(\"{mapped_vec:?}\");\r\n}\r\n```\r\n\r\nI expected to see this happen:\r\n\r\nThe drop implementation for `New(11)` and `New(22)` is called.\r\n\r\nInstead, this happened:\r\n\r\nEverything that was mapped and the allocation was leaked.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n\r\n```\r\nrustc 1.63.0 (4b91a6ea7 2022-08-08)\r\nbinary: rustc\r\ncommit-hash: 4b91a6ea7258a947e59c6522cd5898e7c0a6a88f\r\ncommit-date: 2022-08-08\r\nhost: aarch64-apple-darwin\r\nrelease: 1.63.0\r\nLLVM version: 14.0.5\r\n```\r\n\r\n\r\nI discovered this issue when I learned that `IntoIterator` re-uses a `Vec` allocation if possible. Which prompted me to read the code. Running the example with `cargo miri run` also reports the memory leak. And changing `New(i32)` to `New(i64)` no longer displays the memory leak. This is what I think happens:\r\n\r\n```\r\n[ 11| 22| 33| 44| 55] Values\r\n[ 0 | 1 | 2 | 3 | 4 ] Indices\r\n\r\n[Old|Old|Old|Old|Old] Start (default fn from_iter)\r\n\r\n[New|Old|Old|Old|Old] Map [0] (fn collect_in_place)\r\n[New|New|Old|Old|Old] Map [1] (fn collect_in_place)\r\n\r\n[New|New|Drp|Old|Old] Drop [2] (fn forget_allocation_drop_remaining)\r\n[New|New|Drp|Old|Old] Drop [3] (fn forget_allocation_drop_remaining) PANIC\r\n```\r\n\r\nWhile dropping `[3]` the `ptr::drop_in_place(remaining)` call in `forget_allocation_drop_remaining` panics.\r\n\r\nThen `[4]` is being dropped, but honestly I don't really understand why. My understanding is that `ptr::drop_in_place(remaining)` should unwind. If anyone can explain this, please do so.\r\n\r\nThen as part of unwinding `collect_in_place` `IntoIter` is dropped, but it has its fields set to an empty buffer of len 0, so it does nothing. Note, I suspect more optimal code gen could be achieved by using `mem::forget` to avoid generating code for the `IntoIter` drop that will never do anything after we cleared the fields.\r\n\r\nThe two created `New` will never get dropped, thus leading to the memory leak. Plus the main `Vec` allocation, previously owned by `IntoIterator` as stored in `dst_buf` will be leaked too. Because it was cleared in `forget_allocation_drop_remaining` and assumed to be taken over by `let vec = unsafe { Vec::from_raw_parts(dst_buf, len, cap) };` but we never reached that point.\r\n\r\n---\r\n\r\nProposed solution, a drop guard in `collect_in_place` that guards the `forget_allocation_drop_remaining` call and would drop the head in this case `0..2` and the backing allocation if `forget_allocation_drop_remaining` panics.\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101628/timeline", "performed_via_github_app": null, "state_reason": "completed"}