{"url": "https://api.github.com/repos/rust-lang/rust/issues/47253", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47253/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47253/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47253/events", "html_url": "https://github.com/rust-lang/rust/issues/47253", "id": 286587575, "node_id": "MDU6SXNzdWUyODY1ODc1NzU=", "number": 47253, "title": "\"Conditional jump or move depends on uninitialised value(s)\" on feature(generator)", "user": {"login": "dwrensha", "id": 495768, "node_id": "MDQ6VXNlcjQ5NTc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/495768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwrensha", "html_url": "https://github.com/dwrensha", "followers_url": "https://api.github.com/users/dwrensha/followers", "following_url": "https://api.github.com/users/dwrensha/following{/other_user}", "gists_url": "https://api.github.com/users/dwrensha/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwrensha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwrensha/subscriptions", "organizations_url": "https://api.github.com/users/dwrensha/orgs", "repos_url": "https://api.github.com/users/dwrensha/repos", "events_url": "https://api.github.com/users/dwrensha/events{/privacy}", "received_events_url": "https://api.github.com/users/dwrensha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-07T18:10:18Z", "updated_at": "2018-01-09T07:12:31Z", "closed_at": "2018-01-09T07:12:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Valgrind reports use of uninitialized memory in the following program, which was reduced from https://github.com/tokio-rs/tokio-timer/issues/36 and https://github.com/alexcrichton/futures-await/issues/47.\r\n\r\n```rust\r\n// main.rs\r\n#![feature(conservative_impl_trait, generators, generator_trait)]\r\n\r\npub type Poll<T, E> = Result<Async<T>, E>;\r\n\r\n#[derive(Copy, Clone, Debug, PartialEq)]\r\npub enum Async<T> {\r\n    Ready(T),\r\n    NotReady,\r\n}\r\n\r\npub trait Future {\r\n    type Item;\r\n    type Error;\r\n    fn poll(&mut self) -> Poll<Self::Item, Self::Error>;\r\n}\r\n\r\nimpl<F, T, E> Future for Option<F> where F: Future<Item=T, Error=E> {\r\n    type Item = Option<T>;\r\n    type Error = E;\r\n    fn poll(&mut self) -> Poll<Option<T>, E> {\r\n        match *self {\r\n            None => Ok(Async::Ready(None)),\r\n            Some(ref mut x) => match x.poll() {\r\n                Ok(Async::Ready(t)) => Ok(Async::Ready(Some(t))),\r\n                Ok(Async::NotReady) => Ok(Async::NotReady),\r\n                Err(e) => Err(e),\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npub mod __rt {\r\n    pub use std::ops::Generator;\r\n    use super::Poll;\r\n    use super::{Future, Async};\r\n    use std::ops::GeneratorState;\r\n\r\n    pub trait MyFuture<T: IsResult>: Future<Item=T::Ok, Error = T::Err> {}\r\n\r\n    impl<F, T> MyFuture<T> for F\r\n        where F: Future<Item = T::Ok, Error = T::Err > + ?Sized,\r\n              T: IsResult\r\n    {}\r\n\r\n    pub trait IsResult {\r\n        type Ok;\r\n        type Err;\r\n\r\n        fn into_result(self) -> Result<Self::Ok, Self::Err>;\r\n    }\r\n    impl<T, E> IsResult for Result<T, E> {\r\n        type Ok = T;\r\n        type Err = E;\r\n\r\n        fn into_result(self) -> Result<Self::Ok, Self::Err> { self }\r\n    }\r\n\r\n    pub struct GenFuture<T>(pub T);\r\n\r\n    pub enum Mu {}\r\n\r\n    impl<T> Future for GenFuture<T>\r\n        where T: Generator<Yield = Async<Mu>>,\r\n              T::Return: IsResult,\r\n    {\r\n        type Item = <T::Return as IsResult>::Ok;\r\n        type Error = <T::Return as IsResult>::Err;\r\n\r\n        fn poll(&mut self) -> Poll<Self::Item, Self::Error> {\r\n            match self.0.resume() {\r\n                GeneratorState::Yielded(Async::NotReady)\r\n                    => Ok(Async::NotReady),\r\n                GeneratorState::Yielded(Async::Ready(mu))\r\n                    => match mu {},\r\n                GeneratorState::Complete(e)\r\n                    => e.into_result().map(Async::Ready),\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npub struct Foo {\r\n    _a: Option<usize>,\r\n    _b: Option<String>,\r\n}\r\n\r\nfn ola() -> impl __rt::MyFuture<Result<(), String>> + 'static {\r\n    __rt::GenFuture(move || -> Result<(), String> {\r\n        let _f = Foo { _a: None, _b: None };\r\n        yield Async::NotReady;\r\n        return Ok(());\r\n    })\r\n}\r\n\r\nfn main() {\r\n    let ft = ola();\r\n    let _ = Some(ft).poll();\r\n}\r\n```\r\n\r\n\r\n```bash\r\n$ rustc -v -V\r\nrustc 1.25.0-nightly (6828cf901 2018-01-06)\r\nbinary: rustc\r\ncommit-hash: 6828cf90146c7fefc4ba4f16dffe75f763f2d910\r\ncommit-date: 2018-01-06\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.25.0-nightly\r\nLLVM version: 4.0\r\n$ rustc main.rs\r\n$ valgrind ./main\r\n==2217== Memcheck, a memory error detector\r\n==2217== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==2217== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\r\n==2217== Command: ./main\r\n==2217== \r\n==2217== Conditional jump or move depends on uninitialised value(s)\r\n==2217==    at 0x10FAF4: <core::option::Option<F> as main::Future>::poll (in /home/dwrensha/Desktop/main)\r\n==2217==    by 0x10F59A: main::main (in /home/dwrensha/Desktop/main)\r\n==2217==    by 0x10F7E2: std::rt::lang_start::{{closure}} (in /home/dwrensha/Desktop/main)\r\n==2217==    by 0x119E17: {{closure}} (rt.rs:59)\r\n==2217==    by 0x119E17: _ZN3std9panicking3try7do_call17hffb5315d0c0f678dE.llvm.3A805FA6 (panicking.rs:480)\r\n==2217==    by 0x123D9E: __rust_maybe_catch_panic (lib.rs:102)\r\n==2217==    by 0x11034F: try<i32,closure> (panicking.rs:459)\r\n==2217==    by 0x11034F: catch_unwind<closure,i32> (panic.rs:365)\r\n==2217==    by 0x11034F: std::rt::lang_start_internal (rt.rs:58)\r\n==2217==    by 0x10F7C6: std::rt::lang_start (in /home/dwrensha/Desktop/main)\r\n==2217==    by 0x10F62D: main (in /home/dwrensha/Desktop/main)\r\n==2217== \r\n==2217== Conditional jump or move depends on uninitialised value(s)\r\n==2217==    at 0x10FB06: <core::option::Option<F> as main::Future>::poll (in /home/dwrensha/Desktop/main)\r\n==2217==    by 0x10F59A: main::main (in /home/dwrensha/Desktop/main)\r\n==2217==    by 0x10F7E2: std::rt::lang_start::{{closure}} (in /home/dwrensha/Desktop/main)\r\n==2217==    by 0x119E17: {{closure}} (rt.rs:59)\r\n==2217==    by 0x119E17: _ZN3std9panicking3try7do_call17hffb5315d0c0f678dE.llvm.3A805FA6 (panicking.rs:480)\r\n==2217==    by 0x123D9E: __rust_maybe_catch_panic (lib.rs:102)\r\n==2217==    by 0x11034F: try<i32,closure> (panicking.rs:459)\r\n==2217==    by 0x11034F: catch_unwind<closure,i32> (panic.rs:365)\r\n==2217==    by 0x11034F: std::rt::lang_start_internal (rt.rs:58)\r\n==2217==    by 0x10F7C6: std::rt::lang_start (in /home/dwrensha/Desktop/main)\r\n==2217==    by 0x10F62D: main (in /home/dwrensha/Desktop/main)\r\n==2217== \r\n==2217== \r\n==2217== HEAP SUMMARY:\r\n==2217==     in use at exit: 0 bytes in 0 blocks\r\n==2217==   total heap usage: 6 allocs, 6 frees, 2,000 bytes allocated\r\n==2217== \r\n==2217== All heap blocks were freed -- no leaks are possible\r\n==2217== \r\n==2217== For counts of detected and suppressed errors, rerun with: -v\r\n==2217== Use --track-origins=yes to see where uninitialised values come from\r\n==2217== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47253/timeline", "performed_via_github_app": null, "state_reason": "completed"}