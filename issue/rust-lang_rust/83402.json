{"url": "https://api.github.com/repos/rust-lang/rust/issues/83402", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83402/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83402/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83402/events", "html_url": "https://github.com/rust-lang/rust/issues/83402", "id": 838303915, "node_id": "MDU6SXNzdWU4MzgzMDM5MTU=", "number": 83402, "title": "A pitfall that a temporary will not be dropped at the end of block expression it has been created in", "user": {"login": "viruscamp", "id": 5574216, "node_id": "MDQ6VXNlcjU1NzQyMTY=", "avatar_url": "https://avatars.githubusercontent.com/u/5574216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viruscamp", "html_url": "https://github.com/viruscamp", "followers_url": "https://api.github.com/users/viruscamp/followers", "following_url": "https://api.github.com/users/viruscamp/following{/other_user}", "gists_url": "https://api.github.com/users/viruscamp/gists{/gist_id}", "starred_url": "https://api.github.com/users/viruscamp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viruscamp/subscriptions", "organizations_url": "https://api.github.com/users/viruscamp/orgs", "repos_url": "https://api.github.com/users/viruscamp/repos", "events_url": "https://api.github.com/users/viruscamp/events{/privacy}", "received_events_url": "https://api.github.com/users/viruscamp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-03-23T03:03:34Z", "updated_at": "2021-03-23T04:00:29Z", "closed_at": "2021-03-23T03:59:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have checked #21114 #37612 #60107 and #78390 . \r\n\r\nI tried this code:\r\n```rust\r\nuse std::sync::Mutex;\r\nfn main() {\r\n    dead_lock_2();\r\n}\r\n\r\nfn dead_lock_1() {\r\n    let vec_mutex = Mutex::new(vec![1,2,3]);\r\n    // It's known that the temporary MutexGuard will be dropped at the end of while let, and will cause a dead lock.\r\n    while let Some(num) = vec_mutex.lock().unwrap().pop() {\r\n        if num == 2 {\r\n            vec_mutex.lock().unwrap().push(4);\r\n        }\r\n        println!(\"got {}\", num);\r\n    }\r\n}\r\n\r\nfn dead_lock_2() {\r\n    let vec_mutex = Mutex::new(vec![1,2,3]);\r\n    // I add a scope, and expect the temporary MutexGuard dropped at the end of the scope. It does not work as I expect.\r\n    while let Some(num) = {\r\n        vec_mutex.lock().unwrap().pop()\r\n    } {\r\n        if num == 2 {\r\n            vec_mutex.lock().unwrap().push(4);\r\n        }\r\n        println!(\"got {}\", num);\r\n    }\r\n}\r\n\r\nfn no_dead_lock() {\r\n    let vec_mutex = Mutex::new(vec![1,2,3]);\r\n    // It works. \r\n    while let Some(num) = {\r\n        let num = vec_mutex.lock().unwrap().pop();\r\n        num\r\n    } {\r\n        if num == 2 {\r\n            vec_mutex.lock().unwrap().push(4);\r\n        }\r\n        println!(\"got {}\", num);\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: the dead_lock_2 function got outputs as expect.\r\n```\r\ngot 3\r\ngot 2\r\ngot 4\r\ngot 1\r\n```\r\nInstead, this happened: the dead_lock_2 function got deadlock unexpected.\r\n```\r\ngot 3\r\n<--dead lock occurs-->\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.52.0-nightly (36f1f04f1 2021-03-17)\r\nbinary: rustc\r\ncommit-hash: 36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d\r\ncommit-date: 2021-03-17\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.52.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n\r\nI have got the answer: https://github.com/rust-lang/rust/issues/37612#issuecomment-305967660  \r\nThe drop scope of the temporary is usually the end of the enclosing statement. \r\nBut a block expression is not a statement, so ```{ vec_mutex.lock().unwrap().pop() }``` will not drop the temporary.  \r\n\r\nIt's a pitfall, so I think it should be:\r\n1. Add it clearly in document: https://doc.rust-lang.org/stable/reference/expressions.html#temporaries : Temporaries created in a block expression will not be dropped at the end of the block. \r\n2.  Or change the behavior:  The end of a block expression is also the drop scope of the temporary created in the block. ", "closed_by": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83402/timeline", "performed_via_github_app": null, "state_reason": "completed"}