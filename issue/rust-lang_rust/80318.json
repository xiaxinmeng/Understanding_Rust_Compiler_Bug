{"url": "https://api.github.com/repos/rust-lang/rust/issues/80318", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80318/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80318/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80318/events", "html_url": "https://github.com/rust-lang/rust/issues/80318", "id": 773348866, "node_id": "MDU6SXNzdWU3NzMzNDg4NjY=", "number": 80318, "title": "LLVM ERROR: Function addresses with offsets not supported", "user": {"login": "only-cliches", "id": 14365337, "node_id": "MDQ6VXNlcjE0MzY1MzM3", "avatar_url": "https://avatars.githubusercontent.com/u/14365337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/only-cliches", "html_url": "https://github.com/only-cliches", "followers_url": "https://api.github.com/users/only-cliches/followers", "following_url": "https://api.github.com/users/only-cliches/following{/other_user}", "gists_url": "https://api.github.com/users/only-cliches/gists{/gist_id}", "starred_url": "https://api.github.com/users/only-cliches/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/only-cliches/subscriptions", "organizations_url": "https://api.github.com/users/only-cliches/orgs", "repos_url": "https://api.github.com/users/only-cliches/repos", "events_url": "https://api.github.com/users/only-cliches/events{/privacy}", "received_events_url": "https://api.github.com/users/only-cliches/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-12-23T01:17:30Z", "updated_at": "2023-04-05T17:36:21Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I've ran into an issue with one of my libraries that was preventing it from compiling with `wasm-pack`.  It would otherwise compile just fine with `rustc` to other targets (no compiler errors) but when I would attempt to compile with `wasm-pack` I would get this cryptic error:\r\n\r\n```\r\nLLVM ERROR: Function addresses with offsets not supported\r\nerror: could not compile `hello-wasm`.\r\n```\r\n\r\nNo line numbers, no error trace, just that.\r\n\r\nAfter spending quite a while to find the offending block of code, I've discovered that the issue was caused by misusing the type system a bit.\r\n\r\nHere's the offending code:\r\n\r\n```rust\r\nuse wasm_bindgen::prelude::*;\r\nuse std::vec::Vec;\r\n\r\n#[wasm_bindgen]\r\npub fn err() -> i32 {\r\n    let vector: Vec<u8> = Vec::new();\r\n    // In my library, I meant to use `core::u16::MAX` and did this instead\r\n    let my_size = (u16::max as usize) - 1; // <- casting function as usize\r\n    // `u16::max` is actually a function to compare two numbers and get the maximum between them\r\n    if my_size > vector.len() {\r\n        20\r\n    } else {\r\n        50\r\n    }\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen: I think this is actually a type error.  `u16::max` is a function and I'm casting it to a `usize`.  I would hope the Rust compiler would yell at me for that or at least require me to write `unsafe` before I can cast a function to a `usize`.\r\n\r\nInstead, this happened: The program compiles and runs just fine unless you attempt to compile it to wasm with `wasm-pack build`.  If you run the function in a test, it spits out `20`.\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.47.0 (18bf6b4f0 2020-10-07)\r\nbinary: rustc\r\ncommit-hash: 18bf6b4f01a6feaf7259ba7cdae58031af1b7b39\r\ncommit-date: 2020-10-07\r\nhost: x86_64-apple-darwin\r\nrelease: 1.47.0\r\nLLVM version: 11.0\r\n```\r\n\r\n`wasm-pack -V`: \r\n```\r\nwasm-pack 0.9.1\r\n```\r\n\r\nHoping to save someone else a few days of hair pulling!\r\n\r\nEdit: A little bit more testing, it looks like the program compiles just fine if you change the line to this:\r\n```rust\r\n// let my_size = (u16::max as usize) - 1;\r\nlet my_size = (u16::max as usize)\r\n```\r\n\r\nSo it seems like combining the cast with an operation causes the issue.  Interestingly, not all operations cause the error.\r\n\r\n```rust\r\n// Doesn't compile with `wasm-pack`\r\nlet my_size = (u16::max as usize) + 1;\r\nlet my_size = (u16::max as usize) - 1;\r\nlet my_size = (u16::max as usize) + 2;\r\nlet my_size = (u16::max as usize) - 2;\r\n\r\n// Compiles Fine with `wasm-pack`:\r\nlet my_size = (u16::max as usize) * 1;\r\nlet my_size = (u16::max as usize) / 1;\r\nlet my_size = (u16::max as usize) * 2;\r\nlet my_size = (u16::max as usize) / 2;\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80318/timeline", "performed_via_github_app": null, "state_reason": null}