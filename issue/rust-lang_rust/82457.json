{"url": "https://api.github.com/repos/rust-lang/rust/issues/82457", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82457/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82457/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82457/events", "html_url": "https://github.com/rust-lang/rust/issues/82457", "id": 814900976, "node_id": "MDU6SXNzdWU4MTQ5MDA5NzY=", "number": 82457, "title": "Space for large, constant arrays is allocated on the stack", "user": {"login": "stevecheckoway", "id": 1239089, "node_id": "MDQ6VXNlcjEyMzkwODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1239089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevecheckoway", "html_url": "https://github.com/stevecheckoway", "followers_url": "https://api.github.com/users/stevecheckoway/followers", "following_url": "https://api.github.com/users/stevecheckoway/following{/other_user}", "gists_url": "https://api.github.com/users/stevecheckoway/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevecheckoway/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevecheckoway/subscriptions", "organizations_url": "https://api.github.com/users/stevecheckoway/orgs", "repos_url": "https://api.github.com/users/stevecheckoway/repos", "events_url": "https://api.github.com/users/stevecheckoway/events{/privacy}", "received_events_url": "https://api.github.com/users/stevecheckoway/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-02-23T23:00:34Z", "updated_at": "2021-02-24T12:08:20Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nWhen a large, constant array like\r\n```rust\r\nconst ARRAY: [u32; LARGE_CONSTANT] = [ /* ... */ ];\r\n```\r\nis accessed directly (rather than through a reference) in a function like this\r\n```rust\r\npub fn get(idx: usize) -> u32 {\r\n    match idx {\r\n        0..=8455 => ARRAY[idx],\r\n        8550..=8645 => ARRAY[idx - 94],\r\n        8740..=8835 => ARRAY[idx - 188],\r\n        8930..=13127 => ARRAY[idx - 282],\r\n        13206..=13299 => ARRAY[idx - 360],\r\n        13396..=13489 => ARRAY[idx - 456],\r\n        13586..=13679 => ARRAY[idx - 552],\r\n        13966..=14059 => ARRAY[idx - 838],\r\n        _ => 0,\r\n    }\r\n}\r\n```\r\nrustc appears to be allocating enough space to hold the whole array on the stack for each reference. With a large enough array times number of uses, this can cause the stack probe to fail. (I didn't check if the whole array is actually materialized on the stack each time or if only space for it is allocated.)\r\n\r\nI expected rustc to not allocate space for the constant array and instead access it directly from the read-only memory segment of the executable.\r\n\r\nInstead, when I run the code, I get\r\n```\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.00s\r\n     Running target/debug/deps/array_bug-d57a78204f1529fa\r\n\r\nrunning 1 test\r\n\r\nthread 'test::test' has overflowed its stack\r\nfatal runtime error: stack overflow\r\nerror: test failed, to rerun pass '--lib'\r\n\r\nCaused by:\r\n  process didn't exit successfully: `/Users/steve/programming/array-bug/target/debug/deps/array_bug-d57a78204f1529fa` (signal: 6, SIGABRT: process abort signal)\r\n```\r\n\r\nDisassembling the binary is sufficient to see the issue.\r\n```\r\narray_bug-d57a78204f1529fa`array_bug::get::h8e3dc22d47c73cc1:\r\n    0x1000014f0 <+0>:    pushq  %rbp\r\n    0x1000014f1 <+1>:    movq   %rsp, %rbp\r\n    0x1000014f4 <+4>:    movl   $0x2f9cd0, %eax           ; imm = 0x2F9CD0\r\n    0x1000014f9 <+9>:    callq  0x10007fd40               ; __rust_probestack\r\n    0x1000014fe <+14>:   subq   %rax, %rsp\r\n```\r\n\r\nAs you can see, this function is trying to allocate 3120336 bytes on the stack.\r\n\r\nA complete example from which the above output was derived is available [here](https://github.com/stevecheckoway/array-bug). The numbers in the array are meaningless. They came from `/dev/urandom`. The numbers in the match are likewise immaterial.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.49.0 (e1884a8e3 2020-12-29)\r\nbinary: rustc\r\ncommit-hash: e1884a8e3c3e813aada8254edfa120e85bf5ffca\r\ncommit-date: 2020-12-29\r\nhost: x86_64-apple-darwin\r\nrelease: 1.49.0\r\n```\r\n\r\nThe same occurs with nightly.\r\n```\r\ncargo 1.50.0-nightly (75d5d8cff 2020-12-22)\r\nrelease: 1.50.0\r\ncommit-hash: 75d5d8cffe3464631f82dcd3c470b78dc1dda8bb\r\ncommit-date: 2020-12-22\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n\r\n`RUST_BACKTRACE=1` does not work; however, here's a backtrace from `rust-lldb`.\r\n\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n* thread #2, name = 'test::test', stop reason = EXC_BAD_ACCESS (code=2, address=0x7000053986d8)\r\n  * frame #0: 0x000000010007fd57 array_bug-d57a78204f1529fa`__rust_probestack + 23\r\n    frame #1: 0x00000001000014fe array_bug-d57a78204f1529fa`array_bug::get::h8e3dc22d47c73cc1(idx=4294972670) at lib.rs:1\r\n    frame #2: 0x00000001000032d2 array_bug-d57a78204f1529fa`array_bug::test::test::hc711f7a43c02bc30 at lib.rs:52:17\r\n    frame #3: 0x0000000100004111 array_bug-d57a78204f1529fa`array_bug::test::test::_$u7b$$u7b$closure$u7d$$u7d$::had6d89fadeb77842((null)=0x0000700005598730) at lib.rs:51:5\r\n    frame #4: 0x00000001000039f1 array_bug-d57a78204f1529fa`core::ops::function::FnOnce::call_once::hc97ff02d53ad383b((null)=closure-0 @ 0x0000700005598730, (null)=<unavailable>) at function.rs:227:5\r\n    frame #5: 0x000000010002c12a array_bug-d57a78204f1529fa`test::__rust_begin_short_backtrace::h1d6019f47cc55f08 [inlined] core::ops::function::FnOnce::call_once::h23ab09971f90347f at function.rs:227:5 [opt]\r\n    frame #6: 0x000000010002c128 array_bug-d57a78204f1529fa`test::__rust_begin_short_backtrace::h1d6019f47cc55f08 at lib.rs:517 [opt]\r\n    frame #7: 0x000000010002a8c7 array_bug-d57a78204f1529fa`test::run_test::run_test_inner::_$u7b$$u7b$closure$u7d$$u7d$::h3defa140cc3517df [inlined] _$LT$alloc..boxed..Box$LT$F$C$A$GT$$u20$as$u20$core..ops..function..FnOnce$LT$Args$GT$$GT$::call_once::h12a9510fad786d50 at boxed.rs:1307:9 [opt]\r\n    frame #8: 0x000000010002a8c0 array_bug-d57a78204f1529fa`test::run_test::run_test_inner::_$u7b$$u7b$closure$u7d$$u7d$::h3defa140cc3517df [inlined] _$LT$std..panic..AssertUnwindSafe$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$$LP$$RP$$GT$$GT$::call_once::ha48b56b04ad25da0 at panic.rs:322 [opt]\r\n    frame #9: 0x000000010002a8c0 array_bug-d57a78204f1529fa`test::run_test::run_test_inner::_$u7b$$u7b$closure$u7d$$u7d$::h3defa140cc3517df [inlined] std::panicking::try::do_call::h4e253e91d72f4add at panicking.rs:381 [opt]\r\n    frame #10: 0x000000010002a8c0 array_bug-d57a78204f1529fa`test::run_test::run_test_inner::_$u7b$$u7b$closure$u7d$$u7d$::h3defa140cc3517df [inlined] std::panicking::try::h04beadc619e361ca at panicking.rs:345 [opt]\r\n    frame #11: 0x000000010002a8c0 array_bug-d57a78204f1529fa`test::run_test::run_test_inner::_$u7b$$u7b$closure$u7d$$u7d$::h3defa140cc3517df [inlined] std::panic::catch_unwind::hf3a82a81dfae044e at panic.rs:396 [opt]\r\n    frame #12: 0x000000010002a8c0 array_bug-d57a78204f1529fa`test::run_test::run_test_inner::_$u7b$$u7b$closure$u7d$$u7d$::h3defa140cc3517df [inlined] test::run_test_in_process::he5ca912ca9f4425d at lib.rs:544 [opt]\r\n    frame #13: 0x000000010002a8a7 array_bug-d57a78204f1529fa`test::run_test::run_test_inner::_$u7b$$u7b$closure$u7d$$u7d$::h3defa140cc3517df at lib.rs:450 [opt]\r\n    frame #14: 0x0000000100004e4b array_bug-d57a78204f1529fa`std::sys_common::backtrace::__rust_begin_short_backtrace::h11e8de6518e23f3b at backtrace.rs:125:18 [opt]\r\n    frame #15: 0x000000010000a021 array_bug-d57a78204f1529fa`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h9c2b7019f7d7dd03 [inlined] std::thread::Builder::spawn_unchecked::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::hcfceb62bb517582f at mod.rs:474:17 [opt]\r\n    frame #16: 0x0000000100009ffd array_bug-d57a78204f1529fa`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h9c2b7019f7d7dd03 [inlined] _$LT$std..panic..AssertUnwindSafe$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$$LP$$RP$$GT$$GT$::call_once::h56a2e20a57edcf31 at panic.rs:322 [opt]\r\n    frame #17: 0x0000000100009ffd array_bug-d57a78204f1529fa`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h9c2b7019f7d7dd03 [inlined] std::panicking::try::do_call::ha4b354535e898800 at panicking.rs:381 [opt]\r\n    frame #18: 0x0000000100009ffd array_bug-d57a78204f1529fa`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h9c2b7019f7d7dd03 [inlined] std::panicking::try::hccd11140096bd12b at panicking.rs:345 [opt]\r\n    frame #19: 0x0000000100009ffd array_bug-d57a78204f1529fa`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h9c2b7019f7d7dd03 [inlined] std::panic::catch_unwind::hf486f916485b6696 at panic.rs:396 [opt]\r\n    frame #20: 0x0000000100009ffd array_bug-d57a78204f1529fa`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h9c2b7019f7d7dd03 [inlined] std::thread::Builder::spawn_unchecked::_$u7b$$u7b$closure$u7d$$u7d$::hdb2f765d4cf1e663 at mod.rs:473 [opt]\r\n    frame #21: 0x0000000100009f4d array_bug-d57a78204f1529fa`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h9c2b7019f7d7dd03 at function.rs:227 [opt]\r\n    frame #22: 0x00000001000635ad array_bug-d57a78204f1529fa`std::sys::unix::thread::Thread::new::thread_start::hedb7cc0d930a8f40 [inlined] _$LT$alloc..boxed..Box$LT$F$C$A$GT$$u20$as$u20$core..ops..function..FnOnce$LT$Args$GT$$GT$::call_once::h22f4d58d7c8a821c at boxed.rs:1307:9 [opt]\r\n    frame #23: 0x00000001000635a7 array_bug-d57a78204f1529fa`std::sys::unix::thread::Thread::new::thread_start::hedb7cc0d930a8f40 [inlined] _$LT$alloc..boxed..Box$LT$F$C$A$GT$$u20$as$u20$core..ops..function..FnOnce$LT$Args$GT$$GT$::call_once::haa812e1889643845 at boxed.rs:1307 [opt]\r\n    frame #24: 0x000000010006359e array_bug-d57a78204f1529fa`std::sys::unix::thread::Thread::new::thread_start::hedb7cc0d930a8f40 at thread.rs:71 [opt]\r\n    frame #25: 0x00007fff5ddb32eb libsystem_pthread.dylib`_pthread_body + 126\r\n    frame #26: 0x00007fff5ddb6249 libsystem_pthread.dylib`_pthread_start + 66\r\n    frame #27: 0x00007fff5ddb240d libsystem_pthread.dylib`thread_start + 13\r\n```\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82457/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82457/timeline", "performed_via_github_app": null, "state_reason": null}