{"url": "https://api.github.com/repos/rust-lang/rust/issues/99513", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99513/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99513/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99513/events", "html_url": "https://github.com/rust-lang/rust/issues/99513", "id": 1311250646, "node_id": "I_kwDOAAsO6M5OKBjW", "number": 99513, "title": "[rustdoc-json] Foreign items that are only re-exported are no longer included in the index", "user": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 2682491374, "node_id": "MDU6TGFiZWwyNjgyNDkxMzc0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-rustdoc-json", "name": "A-rustdoc-json", "color": "f7e101", "default": false, "description": "Area: Rustdoc JSON backend"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-07-20T14:39:40Z", "updated_at": "2022-07-21T20:18:27Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "PR https://github.com/rust-lang/rust/pull/99287 changed the behavior of the JSON output of rustdoc to no longer do inlining of re-export as it was causing many problems. However the new behavior do not account for foreign items that are only re-exported as they are no longer included in the index.\r\n\r\nWe should fix this by re-introducing them in the index. But how ? I tried hacking around by doing partial-inlining but this will just re-introduce the problems we has before. I someone wants to build on what I did here is the code:\r\n\r\n<details>\r\n\r\n```diff\r\ndiff --git a/src/librustdoc/clean/inline.rs b/src/librustdoc/clean/inline.rs\r\nindex ce10ca9aa3d..5274a211986 100644\r\n--- a/src/librustdoc/clean/inline.rs\r\n+++ b/src/librustdoc/clean/inline.rs\r\n@@ -153,7 +153,18 @@ pub(crate) fn try_inline_glob(\r\n     match res {\r\n         Res::Def(DefKind::Mod, did) => {\r\n             let m = build_module(cx, did, visited);\r\n-            Some(m.items)\r\n+            if cx.output_format.is_json() {\r\n+                let m = clean::ModuleItem(m);\r\n+                let m = clean::Item::from_def_id_and_parts(\r\n+                    did,\r\n+                    None,\r\n+                    m,\r\n+                    cx,\r\n+                );\r\n+                Some(vec![m])\r\n+            } else {\r\n+                Some(m.items)\r\n+            }\r\n         }\r\n         // glob imports on things like enums aren't inlined even for local exports, so just bail\r\n         _ => None,\r\ndiff --git a/src/librustdoc/clean/mod.rs b/src/librustdoc/clean/mod.rs\r\nindex 9865601da5f..53a3246ae87 100644\r\n--- a/src/librustdoc/clean/mod.rs\r\n+++ b/src/librustdoc/clean/mod.rs\r\n@@ -2152,8 +2152,7 @@ fn clean_use_statement<'tcx>(\r\n     // forcefully don't inline if this is not public or if the\r\n     // #[doc(no_inline)] attribute is present.\r\n     // Don't inline doc(hidden) imports so they can be stripped at a later stage.\r\n-    let mut denied = cx.output_format.is_json()\r\n-        || !(visibility.is_public()\r\n+    let mut denied = !(visibility.is_public()\r\n             || (cx.render_options.document_private && is_visible_from_parent_mod))\r\n         || pub_underscore\r\n         || attrs.iter().any(|a| {\r\n@@ -2170,11 +2169,16 @@ fn clean_use_statement<'tcx>(\r\n     // Also check whether imports were asked to be inlined, in case we're trying to re-export a\r\n     // crate in Rust 2018+\r\n     let path = path.clean(cx);\r\n+    let mut inner_items = None;\r\n     let inner = if kind == hir::UseKind::Glob {\r\n         if !denied {\r\n             let mut visited = FxHashSet::default();\r\n             if let Some(items) = inline::try_inline_glob(cx, path.res, &mut visited) {\r\n-                return items;\r\n+                if cx.output_format.is_json() {\r\n+                    inner_items = Some(items);\r\n+                } else {\r\n+                    return items;\r\n+                }\r\n             }\r\n         }\r\n         Import::new_glob(resolve_use_source(cx, path), true)\r\n@@ -2204,16 +2208,25 @@ fn clean_use_statement<'tcx>(\r\n                 items.push(Item::from_def_id_and_parts(\r\n                     import_def_id,\r\n                     None,\r\n-                    ImportItem(Import::new_simple(name, resolve_use_source(cx, path), false)),\r\n+                    ImportItem(Import::new_simple(name, resolve_use_source(cx, path.clone()), false)),\r\n                     cx,\r\n                 ));\r\n-                return items;\r\n+                if cx.output_format.is_json() {\r\n+                    inner_items = Some(items);\r\n+                } else {\r\n+                    return items;\r\n+                }\r\n             }\r\n         }\r\n         Import::new_simple(name, resolve_use_source(cx, path), true)\r\n     };\r\n \r\n-    vec![Item::from_def_id_and_parts(import.def_id.to_def_id(), None, ImportItem(inner), cx)]\r\n+    if let Some(mut inner_items) = inner_items {\r\n+        inner_items.push(Item::from_def_id_and_parts(import.def_id.to_def_id(), None, ImportItem(inner), cx));\r\n+        inner_items\r\n+    } else {\r\n+        vec![Item::from_def_id_and_parts(import.def_id.to_def_id(), None, ImportItem(inner), cx)]\r\n+    }\r\n }\r\n \r\n fn clean_maybe_renamed_foreign_item<'tcx>(\r\n```\r\n\r\n</details>\r\n\r\ncc @aDotInTheVoid @CraftSpider @Enselic\r\n@rustbot labels +A-rustdoc-json +T-rustdoc +requires-nightly", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99513/timeline", "performed_via_github_app": null, "state_reason": null}