{"url": "https://api.github.com/repos/rust-lang/rust/issues/51575", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51575/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51575/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51575/events", "html_url": "https://github.com/rust-lang/rust/issues/51575", "id": 332786001, "node_id": "MDU6SXNzdWUzMzI3ODYwMDE=", "number": 51575, "title": "Tracking issue for targeting AMDGPU devices", "user": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-06-15T14:01:18Z", "updated_at": "2021-04-03T02:18:28Z", "closed_at": "2021-04-03T02:00:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This issue tracks progress/roadmap for what needs to be done to codegen for targets like AMDGPUs. Personally, I am working on AMDGPU codegen as it would be used for HSA. Specifically, I am aiming for the `amdgcn-amd-amdhsa-amdgiz` LLVM target. Note that I\u2019m still learning, so this issue will likely change as guided by experience.\r\n\r\nHere are the pieces that will be needed to make this work to a MVP level (ie not providing access to most GPU specific stuff):\r\n\r\n- [x] Initialize the LLVM target machine https://github.com/rust-lang/rust/pull/51548\r\n- [ ] Teach the LLVM codegen backend to be mindful of target machine imposed address spaces PR: https://github.com/rust-lang/rust/pull/51576. E.g. allocas are in address space 5 for the target triple I mentioned above.\r\n- [x] Add the `amdgpu-kernel` ABI (PR #52032).\r\n- [ ] Add a mechanism to delegate virtual function calls (meaning call by pointer value) to runtime libraries.\r\n- [ ] Required metadata ??\r\n\r\nThe address space changes are pretty general. However, in order to not require sweeping changes to how Rust is codegen-ed for LLVM, any target must support a flat address space. Flat meaning an addr space which is a superset of all others.\r\n\r\n`amdgpu-kernel` requires its return type be `void`. There are two ways I see to do this:\r\n* compile-time checks (somewhere in `rustc`), ie disallow any return type except `!` and `()`.\r\n* rewriting returns to use an `sret`-like style: promote the return to be an indirect first argument of the function.\r\n\r\nAs I recall, Rust inserts wrapper functions for functions with `extern \u201cabi\u201d` which call the real rust abi function. My current impl went with the magical rewriting, but I think forcing the user to acknowledge this with an error is better long term.\r\n\r\nPrivately, I've made it to errors stemming from # 4 on general Rust code (ie `std`/`core` code). See [this repo/crate](https://github.com/DiamondLovesYou/rust-mir-hsa/tree/master/runtime). Regarding virtual function calls, in principle, it\u2019s possible to support, if using HSA, completely GPU side. `amdgpu-kernel`s have access to two different `hsa_queue_t`s (one for the host and the device), setup by the GPU\u2019s hardware command processor. When a virtual call is encountered, the trick is to have the GPU write to its own `hsa_queue_t` then wait on the completion signal. Foreign functions can also be supported in this way, by writing to the host `hsa_queue_t` instead.\r\n\r\n\r\n#### Post-MVP\r\n\r\nTBD(TODO) Discuss?\r\n\r\n#### Informational links\r\n- [User Guilde for AMDGPU Backend](https://llvm.org/docs/AMDGPUUsage.html)\r\n- [AMD\u2019s HIP Clang branch](https://github.com/RadeonOpenCompute/clang/tree/amd-hip-upstream)\r\n\r\n", "closed_by": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51575/reactions", "total_count": 18, "+1": 4, "-1": 0, "laugh": 0, "hooray": 6, "confused": 0, "heart": 8, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51575/timeline", "performed_via_github_app": null, "state_reason": "completed"}