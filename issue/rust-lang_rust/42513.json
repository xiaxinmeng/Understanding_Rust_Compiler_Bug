{"url": "https://api.github.com/repos/rust-lang/rust/issues/42513", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42513/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42513/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42513/events", "html_url": "https://github.com/rust-lang/rust/issues/42513", "id": 234328679, "node_id": "MDU6SXNzdWUyMzQzMjg2Nzk=", "number": 42513, "title": "capture diagnostic output in queries", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 234876, "node_id": "MDU6TGFiZWwyMzQ4NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-hard", "name": "E-hard", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Hard / a lot"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-06-07T20:14:35Z", "updated_at": "2017-08-25T22:54:08Z", "closed_at": "2017-08-25T22:54:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now, queries produce results, but as a side-effect they may issue diagnostics. For incremental compilation, if we are going to (e.g.) skip typeck, but still produce the same output, we really need to capture this output so that we can replay it.\r\n\r\nRight now, to issue a diagnostic, you basically directly invoke methods on the session, [such as `span_err` and friends](https://github.com/rust-lang/rust/blob/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src/librustc/session/mod.rs#L158-L232). When `emit()` is called, these just directly dump out to stderr.\r\n\r\nTo fix this issue, we would want to record those diagnostics. There *is* already a [diagnostics object that is created](https://github.com/rust-lang/rust/blob/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src/librustc_errors/diagnostic.rs#L19-L28) (and thus can in principle be saved) -- but we'd have to find the right place to save it (in the query tables, presumably).\r\n\r\nWe also have to figure out how to recover the tcx. The easiest way to handle this would be to check the TLS for the current tcx (using `ty::tls::with()`) and record it that way. We generally discourage using TLS to get the tcx except in specific scenarios, but this may fall under that category.\r\n\r\nI'm tagging this for mentoring without instructions. There is still some amount of pending design work here that will require experimentation. Plus, once the work is done, we'll have to figure out (separately) how to actually **save** the errors to disk and replay them etc.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42513/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42513/timeline", "performed_via_github_app": null, "state_reason": "completed"}