{"url": "https://api.github.com/repos/rust-lang/rust/issues/99548", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99548/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99548/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99548/events", "html_url": "https://github.com/rust-lang/rust/issues/99548", "id": 1312837812, "node_id": "I_kwDOAAsO6M5OQFC0", "number": 99548, "title": "Weird HRTB behavior with associate types.", "user": {"login": "ArtBlnd", "id": 2209400, "node_id": "MDQ6VXNlcjIyMDk0MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/2209400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArtBlnd", "html_url": "https://github.com/ArtBlnd", "followers_url": "https://api.github.com/users/ArtBlnd/followers", "following_url": "https://api.github.com/users/ArtBlnd/following{/other_user}", "gists_url": "https://api.github.com/users/ArtBlnd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArtBlnd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArtBlnd/subscriptions", "organizations_url": "https://api.github.com/users/ArtBlnd/orgs", "repos_url": "https://api.github.com/users/ArtBlnd/repos", "events_url": "https://api.github.com/users/ArtBlnd/events{/privacy}", "received_events_url": "https://api.github.com/users/ArtBlnd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-07-21T07:56:42Z", "updated_at": "2023-04-26T04:17:10Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I've trying compile this code.\r\n\r\n```rust\r\n// This does not compiles\r\nfn create_baa_in_the_foo1() {\r\n    create_baa(Foo(()));\r\n}\r\n\r\n// This compiles\r\nfn create_baa_in_the_foo2() {\r\n    Baa(Foo(()));\r\n}\r\n\r\nstruct Baa<A>(A);\r\nfn create_baa<A, B>(foo: A) -> Baa<A>\r\nwhere\r\n    A: for<'a> FooTrait<'a, Output = B>,\r\n{\r\n    Baa(foo)\r\n}\r\n\r\ntrait FooTrait<'a> {\r\n    type Output;\r\n    fn output(&'a self) -> Self::Output;\r\n}\r\n\r\nstruct Foo(());\r\nimpl<'a> FooTrait<'a> for Foo {\r\n    type Output = &'a ();\r\n\r\n    fn output(&'a self) -> Self::Output {\r\n        &self.0\r\n    }\r\n}\r\n```\r\n\r\n\r\nEveryone knows the lifetime of the `Foo(())` is general enough but it emits error.\r\n```\r\nerror: implementation of `FooTrait` is not general enough\r\n  |\r\n2 |     create_baa(Foo(()));\r\n  |     ^^^^^^^^^ implementation of `FooTrait` is not general enough\r\n  |\r\n  = note: `Foo` must implement `FooTrait<'0>`, for any lifetime `'0`...\r\n  = note: ...but it actually implements `FooTrait<'1>`, for some specific lifetime `'1`\r\n```\r\n\r\nIf we remove `Output = B` and its generic type `B` it works fine.\r\n```rust\r\nstruct Baa<A>(A);\r\nfn create_baa<A>(foo: A) -> Baa<A>\r\nwhere\r\n    A: for<'a> FooTrait<'a>,\r\n{\r\n    Baa(foo)\r\n}\r\n```\r\n\r\nor in other way, moving references associate type to method signature. it also works.\r\n```rust\r\ntrait FooTrait<'a> {\r\n    type Output;\r\n    fn output(&'a self) -> &'a Self::Output;\r\n}\r\n\r\nstruct Foo(());\r\nimpl<'a> FooTrait<'a> for Foo {\r\n    type Output = ();\r\n\r\n    fn output(&'a self) -> &'a Self::Output {\r\n        &self.0\r\n    }\r\n}\r\n```\r\n\r\nI guess at least this code should have same lifetime behavior as first one.\r\nAm I doing wrong with something or this is something the bug related to https://github.com/rust-lang/rust/issues/70263?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99548/timeline", "performed_via_github_app": null, "state_reason": null}