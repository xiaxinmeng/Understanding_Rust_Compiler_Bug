{"url": "https://api.github.com/repos/rust-lang/rust/issues/56417", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56417/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56417/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56417/events", "html_url": "https://github.com/rust-lang/rust/issues/56417", "id": 386483340, "node_id": "MDU6SXNzdWUzODY0ODMzNDA=", "number": 56417, "title": "Stabilize uniform paths on Rust 2018 (technical details)", "user": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "closed", "locked": false, "assignee": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-12-01T18:22:29Z", "updated_at": "2019-06-09T11:26:38Z", "closed_at": "2019-01-12T23:00:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/rust-lang/rust/issues/55618 is the high-level and high-volume thread on whether we want uniform import paths in the language in general or not.\r\nThis is a more focused issue about how exactly stabilization will happen (assuming it will happen in general).\r\n\r\nFirst, regarding timing of the stabilization.\r\nI propose to test uniform paths for 4-5 weeks starting from Dec 07 (Rust 2018 release, 1.31 stable), and then backport their stabilization on 1.32 beta if everything is good.\r\n\r\nSecond, regarding sub-features and partial stabilization.\r\nImports `use NAME` or `use NAME::...` in the uniform path model can refer to various entities, not all of which may be expected or were discussed.\r\nHere's the list:\r\n- Items defined in named or unnamed modules (`mod m { struct NAME; }`, `fn f() { struct NAME; }`).\r\nNo known issues to resolve before stabilization.\r\n- Macros from other crates imported with `#[macro_use] extern crate ...`, for example `use panic` from the standard library.\r\nNo known issues to resolve before stabilization.\r\n- Extern crate names from extern prelude, for example `use std` or `use regex`.\r\nNo known issues to resolve before stabilization.\r\n- Names from the standard library prelude, for example `use Vec`.\r\nNo known issues to resolve before stabilization.\r\n- Built-in types, for example `use u8`.\r\nNo known issues to resolve before stabilization.\r\n- Built-in macros, for example `use env`.\r\nCurrently an error due to some (fixable) implementation details of built-in macros.\r\nNo known issues to resolve before stabilization (after the error is removed).\r\n- Macros defined with `macro_rules!` in the same crate, e.g. `macro_rules! mac {()=>()}    use mac as pac`\r\nUnresolved question: what visibility to attach to these macros, in other words - how far can they be reexported with `pub use`?\r\nProposal: treat `#[macro_export] macro_rules! { ... }` as `pub`, treat other `macro_rules! { ... }` as `pub(crate)`.\r\nMotivation: 1) `#[macro_export]` are indeed visible from other crates, 2) non-`#[macro_export]` macros themselves are indeed potentially visible from the whole crate, it depends on the containing module whether to actually let them out or not (similarly to public items in private modules and their potential reexports).\r\n- Built-in attributes, for example `use inline`.\r\nIssue: even if `inline` is reimported under some other name, e.g. `use inline as my_inline`, `my_inline` won't be treated as `inline` by the compiler. Even later stages of the compiler work with attributes at token level, not using resolution results. That's not good in general, ideally attributes should be lowered into some semantic form somewhere around AST -> HIR conversion.\r\nThis means a compatibility hazard, for example `#[my_repr(D)] fn f() {}` would be accepted and ignored if attributes are treated syntactically (assuming `use repr as my_repr`), but would be an error if attributes are treated semantically based on their resolution.\r\nOn the other hand, if `use builtin_attr` is still feature-gated, then things like `use proc_macro` (or `use ignore` as [recently reported](https://github.com/rust-lang/rust/issues/56398)) will be feature gated as well (`use` imports in all namespaces, and `proc_macro` is not only a crate, but also a built-in attribute).\r\nProposal: Allow imports of built-in attributes, but prohibit actually using names imported this way in attribute positions.\r\n- Derive helper attributes registered by derive macros, for example `use serde` attribute registered by `Serialize` macro.\r\nNot fully implemented, so imports can never refer to them.\r\nIssue (once fully implemented): similarly to built-in attributes, derive helpers reimported under other name will be unrecognizable by their respective proc macros, because proc macros work at token level.\r\nProposal: Allow imports of derive helper attributes, but prohibit actually using names imported this way in attribute positions.\r\n- \"Tool modules\" in tool attributes, like `rusfmt` in `rustfmt::skip`.\r\nIssue: similarly to built-in attributes, tool modules reimported under other name will be unrecognizable by their respective tools, because tools work at token level.\r\nProposal: Allow imports of tool modules, but prohibit actually using names imported this way in attribute paths.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56417/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56417/timeline", "performed_via_github_app": null, "state_reason": "completed"}