{"url": "https://api.github.com/repos/rust-lang/rust/issues/76300", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76300/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76300/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76300/events", "html_url": "https://github.com/rust-lang/rust/issues/76300", "id": 692300101, "node_id": "MDU6SXNzdWU2OTIzMDAxMDE=", "number": 76300, "title": "Seems like the bug is with $:block macro expansion", "user": {"login": "sarvi", "id": 1296825, "node_id": "MDQ6VXNlcjEyOTY4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1296825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarvi", "html_url": "https://github.com/sarvi", "followers_url": "https://api.github.com/users/sarvi/followers", "following_url": "https://api.github.com/users/sarvi/following{/other_user}", "gists_url": "https://api.github.com/users/sarvi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarvi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarvi/subscriptions", "organizations_url": "https://api.github.com/users/sarvi/orgs", "repos_url": "https://api.github.com/users/sarvi/repos", "events_url": "https://api.github.com/users/sarvi/events{/privacy}", "received_events_url": "https://api.github.com/users/sarvi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-09-03T20:13:53Z", "updated_at": "2020-10-01T04:41:13Z", "closed_at": "2020-10-01T04:41:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\nthe problem is tracked in the paste crate here, but the paste deveoper thinks it is a bug in rustc\r\nhttps://github.com/dtolnay/paste/issues/50\r\n\r\nThis fails to compile. It uses the paste crate for symbol expansion inside macros\r\n```\r\nextern crate paste;\r\nextern crate libc;\r\n\r\nuse paste::paste;\r\nuse std::ffi::CStr;\r\nuse libc::{c_void,c_char,c_int,size_t,ssize_t};\r\n\r\n#[macro_export]\r\nmacro_rules! testhook {\r\n\r\n    (unsafe fn $real_fn:ident ( $($v:ident : $t:ty),* ) -> $r:ty => $hook_fn:ident $body:block) => {\r\n        paste! {\r\n            pub unsafe fn $hook_fn ( $($v : $t),* ) -> $r {\r\n                println!(\"{}()\", stringify!($real_fn));\r\n                $body\r\n            }               \r\n        }\r\n    };\r\n}\r\n\r\ntesthook! {\r\n    unsafe fn readlink(path: *const c_char, buf: *mut c_char, bufsiz: size_t) -> ssize_t => my_readlink {\r\n        println!(\"readlink({})\", CStr::from_ptr(path).to_string_lossy());\r\n        0\r\n    }\r\n}\r\n```\r\nErroring out as \r\n```\r\nbash-4.4$ cargo clean ; cargo build\r\n   Compiling proc-macro2 v1.0.19\r\n   Compiling unicode-xid v0.2.1\r\n   Compiling syn v1.0.39\r\n   Compiling libc v0.2.76\r\n   Compiling paste v1.0.0\r\n   Compiling quote v1.0.7\r\n   Compiling ctor v0.1.15\r\n   Compiling readlink v0.1.0 (/ws/sarvi-sjc/redhook/examples/readlink)\r\nerror[E0423]: expected value, found built-in attribute `path`\r\n  --> src/lib.rs:15:17\r\n   |\r\n15 |                   $body\r\n   |                   ^^^^^ not a value\r\n...\r\n21 | / testhook! {\r\n22 | |     unsafe fn readlink(path: *const c_char, buf: *mut c_char, bufsiz: size_t) -> ssize_t => my_readlink {\r\n23 | |         println!(\"readlink({})\", CStr::from_ptr(path).to_string_lossy());\r\n24 | |         0\r\n25 | |     }\r\n26 | | }\r\n   | |_- in this macro invocation\r\n   |\r\n   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nwarning: unused imports: `c_int`, `c_void`\r\n --> src/lib.rs:6:12\r\n  |\r\n6 | use libc::{c_void,c_char,c_int,size_t,ssize_t};\r\n  |            ^^^^^^        ^^^^^\r\n  |\r\n  = note: `#[warn(unused_imports)]` on by default\r\n\r\nerror: aborting due to previous error; 1 warning emitted\r\n\r\nFor more information about this error, try `rustc --explain E0423`.\r\nerror: could not compile `readlink`.\r\n\r\nTo learn more, run the command again with --verbose.\r\nbash-4.4$ \r\n```\r\n\r\nThis compiles fine, without using paste, The only difference is the use of the paste! macro which does symbol expansion, though no actual symbol expansion code exists in the macro at this point. Just the mere act of invoking paste!{} caused the error. \r\nAnd fix it as \r\nChanging stringify!($real_fn) to \"something\" then compiles fine.\r\nBelow is the code that compiles without using paste! {}\r\n```\r\nextern crate paste;\r\nextern crate libc;\r\n\r\nuse paste::paste;\r\nuse std::ffi::CStr;\r\nuse libc::{c_void,c_char,c_int,size_t,ssize_t};\r\n\r\n#[macro_export]\r\nmacro_rules! testhook {\r\n\r\n    (unsafe fn $real_fn:ident ( $($v:ident : $t:ty),* ) -> $r:ty => $hook_fn:ident $body:block) => {\r\n            pub unsafe fn $hook_fn ( $($v : $t),* ) -> $r {\r\n                    println!(\"{}()\", extern crate paste;\r\n                    extern crate libc;\r\n                    \r\n                    use paste::paste;\r\n                    use std::ffi::CStr;\r\n                    use libc::{c_void,c_char,c_int,size_t,ssize_t};\r\n                    \r\n                    #[macro_export]\r\n                    macro_rules! testhook {\r\n                    \r\n                        (unsafe fn $real_fn:ident ( $($v:ident : $t:ty),* ) -> $r:ty => $hook_fn:ident $body:block) => {\r\n                                pub unsafe fn $hook_fn ( $($v : $t),* ) -> $r {\r\n                                        println!(\"{}()\", stringify!($real_fn));\r\n                                        $body\r\n                                }\r\n                        };\r\n                    }\r\n                    \r\n                    testhook! {\r\n                        unsafe fn readlink(path: *const c_char, buf: *mut c_char, bufsiz: size_t) -> ssize_t => my_readlink {\r\n                            println!(\"readlink({})\", CStr::from_ptr(path).to_string_lossy());\r\n                            0\r\n                        }\r\n                    }\r\n                    );\r\n                    $body\r\n            }\r\n    };\r\n}\r\n\r\ntesthook! {\r\n    unsafe fn readlink(path: *const c_char, buf: *mut c_char, bufsiz: size_t) -> ssize_t => my_readlink {\r\n        println!(\"readlink({})\", CStr::from_ptr(path).to_string_lossy());\r\n        0\r\n    }\r\n}\r\n```\r\n\r\nThe developer of the paste!{} crate thinks this is a bug in rustc and commented as below\r\n\r\nThis looks like a rustc bug. Putting println!(\"{:#?}\", input) at the beginning of the paste implementation to see what tokens the compiler is passing in as macro input, it shows:\r\n```\r\n...\r\n                    Ident {\r\n                        ident: \"path\",\r\n                        span: #0 bytes(456..460),\r\n                    },\r\n...\r\n                                            Ident {\r\n                                                ident: \"path\",\r\n                                                span: #22 bytes(381..386),\r\n                                            },\r\n...\r\n```\r\nwhere the two path tokens have totally different hygiene context (the #0 vs #22) and so do not resolve to each other.\r\n\r\nIt seems like the bug is with $:block, so you should be able to work around it by not using $:block.\r\n\r\n\r\nI expected to see this happen: *explanation*\r\n\r\nInstead, this happened: *explanation*\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nbash-4.4$ rustc -vV\r\nrustc 1.47.0-nightly (7e6d6e5f5 2020-08-16)\r\nbinary: rustc\r\ncommit-hash: 7e6d6e5f535321c2223f044caba16f97b825009c\r\ncommit-date: 2020-08-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.47.0-nightly\r\nLLVM version: 10.0\r\nbash-4.4$ \r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76300/timeline", "performed_via_github_app": null, "state_reason": "completed"}