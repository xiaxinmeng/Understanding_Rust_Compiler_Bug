{"url": "https://api.github.com/repos/rust-lang/rust/issues/52269", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52269/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52269/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52269/events", "html_url": "https://github.com/rust-lang/rust/issues/52269", "id": 340374517, "node_id": "MDU6SXNzdWUzNDAzNzQ1MTc=", "number": 52269, "title": "Built-in macros, derives and attributes have inconsistent interactions with macros of the same name.", "user": {"login": "alercah", "id": 20842325, "node_id": "MDQ6VXNlcjIwODQyMzI1", "avatar_url": "https://avatars.githubusercontent.com/u/20842325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alercah", "html_url": "https://github.com/alercah", "followers_url": "https://api.github.com/users/alercah/followers", "following_url": "https://api.github.com/users/alercah/following{/other_user}", "gists_url": "https://api.github.com/users/alercah/gists{/gist_id}", "starred_url": "https://api.github.com/users/alercah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alercah/subscriptions", "organizations_url": "https://api.github.com/users/alercah/orgs", "repos_url": "https://api.github.com/users/alercah/repos", "events_url": "https://api.github.com/users/alercah/events{/privacy}", "received_events_url": "https://api.github.com/users/alercah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 941498014, "node_id": "MDU6TGFiZWw5NDE0OTgwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros-1.2", "name": "A-macros-1.2", "color": "f7e101", "default": false, "description": "Issues which affect macros 1.2"}], "state": "closed", "locked": false, "assignee": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/56", "html_url": "https://github.com/rust-lang/rust/milestone/56", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/56/labels", "id": 3537666, "node_id": "MDk6TWlsZXN0b25lMzUzNzY2Ng==", "number": 56, "title": "Edition 2018 RC 2", "description": "", "creator": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 45, "state": "closed", "created_at": "2018-07-31T22:51:05Z", "updated_at": "2018-11-16T11:06:48Z", "due_on": "2018-10-25T07:00:00Z", "closed_at": "2018-11-16T11:06:48Z"}, "comments": 10, "created_at": "2018-07-11T19:26:54Z", "updated_at": "2018-09-19T01:29:28Z", "closed_at": "2018-09-19T00:56:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Macros currently occupy a single namespace, regardless of whether they are used for attributes, derives, or function-like macros. This was a design decision for procedural macros, on the basis that it is easier to split them into separate namespaces later, but it leads to some confusing interactions with built-in attributes (like `cfg` or `derive`), macros (like `compile_error` or `env`) or derives (like `Eq` or `Clone`). The behaviour should be tightened up so that it is intuitive and straightforward to explain.\r\n\r\n------\r\nCurrently, the rules appear to be as follows:\r\n\r\n* Macros can be defined that have the same name as a built-in attribute or macro. When used, the builtin takes precedence and the macro is ignored. If the macro is used in a different context, it is found and works normally (e.g. a function-like macro named `derive` can be called, or an attribute named `compile_error` can be used). Raw identifiers can be used to get around the built-in.\r\n* Macros can be defined that have the same name as a built-in derive, except with `proc_macro_derive`. If a macro is defined with the same name as a built-in derive, it takes precedence. Defining a macro with `proc_macro_derive` that conflicts with the built-in gives an error at the definition.\r\n\r\nIf `use_extern_macro` is enabled, then you can freely rename imports. This lets you get around the `proc_macro_derive` rule:\r\n\r\n```rust\r\n#![feature(use_extern_macro)]\r\n\r\nuse failure::Fail as Clone;\r\nuse std::fmt::{Display, Formatter};\r\n\r\n#[derive(Debug, Clone)]\r\nstruct Foo {\r\n}\r\n\r\nimpl Display for Foo {\r\n    fn fmt(&self, fmt : &mut Formatter) -> Result<(), std::fmt::Error> {\r\n        write!(fmt, \"{:?}\", self)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let _ = Foo{}.cause();\r\n}\r\n```\r\n\r\nNote that this behaviour applies only to [built-in macros](https://doc.rust-lang.org/src/core/macros.rs.html#539). Macros defined in libstd or libcore (for `no_std`) are imported in the prelude and can be overridden as one would expect for prelude names.\r\n\r\n------\r\nI do not think we can get away with treating all builtins as if they are normal names defined in the prelude that can be overridden. While it might be possible to treat some of them that way, the `cfg` attribute is an excellent example of one that cannot be safely modified, or else the following program would be problematic, because macro imports apply throughout the entire source file, not just after the import:\r\n\r\n```rust\r\n#[cfg(target_os = \"linux\")]\r\nuse some_crate::some_macro as cfg;\r\n```\r\n\r\nAt the same time, I don't see why built-in derives should be special. The traits they implement are not, after all; even the ones like `Copy` which are magical. And it is possible, though inadvisable, to shadow them independently: `trait Copy {}` won't prevent `#[derive(Copy)]` from working, for instance.\r\n\r\nThis implies to me that we should have the following in the macro namespace:\r\n1. Built-ins which are truly and deeply magical, and cannot safely be overridden. Their names are treated like keywords in the macro namespace, in that the same non-raw identifier cannot be used at all.\r\n2. Intrinsics which are implemented by the compiler, but defined and named normally, like existing lang items and intrinsic functions.\r\n\r\nThis would imply the following behaviour changes:\r\n1. `proc_macro_derive` can declare derives with the same name as an intrinsic derive; these will simply shadow the intrinsic.\r\n2. Built-in function-like macros and attributes are always referred to when their names are used in the macro namespace, even in the wrong context, unless a raw identifier is used.\r\n3. Macros of any kind cannot be declared with the same name as a built-in macro or attribute unless a raw identifier is used.\r\n4. Going forward, we could possibly look at converting some built-in attributes and macros into intrinsics so that their names are freed up.\r\n\r\nThis leaves an unresolved question around renaming imports (e.g. `use foo::bar as cfg;` where `foo::bar` is names both a function and macro; is this an error? warning? or it just silently hides the macro as `r#cfg`?) but would clean up the bulk of the issues with the situation.", "closed_by": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52269/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52269/timeline", "performed_via_github_app": null, "state_reason": "completed"}