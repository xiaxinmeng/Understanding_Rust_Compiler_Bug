{"url": "https://api.github.com/repos/rust-lang/rust/issues/112090", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112090/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112090/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112090/events", "html_url": "https://github.com/rust-lang/rust/issues/112090", "id": 1731467400, "node_id": "I_kwDOAAsO6M5nNBiI", "number": 112090, "title": "Are (non-free) generic constants guaranteed to be evaluated?", "user": {"login": "joshlf", "id": 1046063, "node_id": "MDQ6VXNlcjEwNDYwNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1046063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshlf", "html_url": "https://github.com/joshlf", "followers_url": "https://api.github.com/users/joshlf/followers", "following_url": "https://api.github.com/users/joshlf/following{/other_user}", "gists_url": "https://api.github.com/users/joshlf/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshlf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshlf/subscriptions", "organizations_url": "https://api.github.com/users/joshlf/orgs", "repos_url": "https://api.github.com/users/joshlf/repos", "events_url": "https://api.github.com/users/joshlf/events{/privacy}", "received_events_url": "https://api.github.com/users/joshlf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}, {"id": 5226679137, "node_id": "LA_kwDOAAsO6M8AAAABN4jLYQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-opsem", "name": "T-opsem", "color": "bfd4f2", "default": false, "description": "Relevant to the opsem team"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2023-05-30T03:59:11Z", "updated_at": "2023-05-31T07:28:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "_Reposted from https://github.com/rust-lang/unsafe-code-guidelines/issues/409 at the suggestion of @digama0_\r\n\r\nThanks to [this suggestion](https://github.com/google/zerocopy/pull/183#pullrequestreview-1448469259) by @gootorov, we're considering doing something like the following in zerocopy:\r\n\r\n```rust\r\npub trait MaybeTransmutableInto<T: FromBytes>: Sized + AsBytes {\r\n    const REF_TRANSMUTABLE_INTO: () = assert!(\r\n        mem::size_of::<Self>() == mem::size_of::<T>()\r\n            && mem::align_of::<Self>() >= mem::align_of::<T>()\r\n    );\r\n\r\n    fn transmute_ref_into(&self) -> &T {\r\n        let _: () = <Self as MaybeTransmutableInto<T>>::REF_TRANSMUTABLE_INTO;\r\n        unsafe { mem::transmute(self) }\r\n    }\r\n}\r\n```\r\n\r\nThe [nightly reference guarantees](https://doc.rust-lang.org/nightly/reference/items/constant-items.html#evaluation) that \"free constants are always evaluated at compile time.\" However, that's not quite what we have here - we evaluate the constant `REF_TRANSMUTABLE_INTO` but assign it to a runtime variable (`let _: () = ...`). If we replaced `let _` with `const _`, that would be a free constant, but it would never compile (even when we wanted it to) because a constant in a function body isn't allowed to reference types which are generic in that context.\r\n\r\nWhat I want to know is: Is this constant guaranteed to be evaluated so long as `transmute_ref_into` is used?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112090/timeline", "performed_via_github_app": null, "state_reason": null}