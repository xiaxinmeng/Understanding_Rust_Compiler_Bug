{"url": "https://api.github.com/repos/rust-lang/rust/issues/105077", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105077/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105077/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105077/events", "html_url": "https://github.com/rust-lang/rust/issues/105077", "id": 1468840805, "node_id": "I_kwDOAAsO6M5XjLtl", "number": 105077, "title": "Tracking Issue for Restrictions", "user": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89436934, "node_id": "MDU6TGFiZWw4OTQzNjkzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-approved", "name": "B-RFC-approved", "color": "d304cb", "default": false, "description": "Approved by a merged RFC but not yet implemented."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 5548680740, "node_id": "LA_kwDOAAsO6M8AAAABSromJA", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-impl_restriction", "name": "F-impl_restriction", "color": "f9c0cc", "default": false, "description": "`#![feature(impl_restriction)]`"}, {"id": 5548682753, "node_id": "LA_kwDOAAsO6M8AAAABSrouAQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-mut_restriction", "name": "F-mut_restriction", "color": "f9c0cc", "default": false, "description": "`#![feature(mut_restriction)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2022-11-29T23:36:02Z", "updated_at": "2023-05-26T13:15:13Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nNOTE: For library features, please use the \"Library Tracking Issue\" template instead.\r\n\r\nThank you for creating a tracking issue! \ud83d\udcdc Tracking issues are for tracking a\r\nfeature from implementation to stabilisation. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nThis is a tracking issue for the RFC \"Restrictions\" (rust-lang/rfcs#3323).\r\nThe feature gates for the issue are:\r\n* `#![feature(impl_restriction)]`\r\n* `#![feature(mut_restriction)]`\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [ ] Implement the RFC (@jhpratt has a branch in progress)\r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\n- [ ] Should a simpler syntax be provided for common cases? For instance, `sealed` or `readonly`. A\r\n  different syntax altogether could be used as well.\r\n  - Also see https://github.com/rust-lang/rfcs/pull/3323#issuecomment-1320747457.\r\n- [ ] Should an \"unnecessary restriction\" lint be introduced? It would fire when the restriction is as\r\n  strict or less strict than the visibility. This warning could also be used for `pub(self)`.\r\n  - Does this necessarily have to be decided as part of this RFC?\r\n- [ ] How will restrictions work with `macro_rules!` matchers? There is currently a `vis` matcher, but\r\n  it is likely unwise to add a new matcher for each restriction.\r\n  - The proposed syntax cannot be added to the `vis` matcher, as it does not current restrict the\r\n    tokens that can follow. For this reason, it could break existing code, such as the following\r\n    example.\r\n    ```rust\r\n    macro_rules! foo {\r\n        ($v:vis impl(crate) trait Foo) => {}\r\n    }\r\n    foo!(pub impl(crate) trait Foo);\r\n    ```\r\n  - A `restriction` matcher could work, but restrictions are not the same everywhere.\r\n  - `mut_restriction` and `impl_restriction` are relatively long.\r\n- [ ] What is the interaction between stability and restrictions?\r\n  - Suggestion: Visibility is an inherent part of the item; restrictions should be as well. Metadata\r\n    can be added in the future indicating when an item had its restriction lifted, if applicable.\r\n    The design for this is left to the language team as necessary. A decision does _not_ need to be\r\n    made prior to stabilization, as stability attributes are not stable in their own right.\r\n- [ ] Should the `in` syntax be permitted for restrictions? Including it is consistent with the existing\r\n  syntax for visibility. Further, the lack of inclusion would lead to continued use of the\r\n  workaround for `impl`. For `mut`, there is no workaround. The syntax is not used often for\r\n  visibility, but it is very useful when it is used.\r\n- [ ] Should `struct` expressions be disallowed?\r\n  - Where would it be desirable to prohibit mutability after construction, but still permit\r\n    construction with unchecked values?\r\n\r\n### Implementation history\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n\r\n- [ ] https://github.com/rust-lang/rust/pull/106074", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105077/reactions", "total_count": 10, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 1, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105077/timeline", "performed_via_github_app": null, "state_reason": null}