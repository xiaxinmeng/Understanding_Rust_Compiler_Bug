{"url": "https://api.github.com/repos/rust-lang/rust/issues/108791", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108791/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108791/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108791/events", "html_url": "https://github.com/rust-lang/rust/issues/108791", "id": 1610403036, "node_id": "I_kwDOAAsO6M5f_Mzc", "number": 108791, "title": "It seems we got memory leaking?", "user": {"login": "wisonye", "id": 3477321, "node_id": "MDQ6VXNlcjM0NzczMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/3477321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wisonye", "html_url": "https://github.com/wisonye", "followers_url": "https://api.github.com/users/wisonye/followers", "following_url": "https://api.github.com/users/wisonye/following{/other_user}", "gists_url": "https://api.github.com/users/wisonye/gists{/gist_id}", "starred_url": "https://api.github.com/users/wisonye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wisonye/subscriptions", "organizations_url": "https://api.github.com/users/wisonye/orgs", "repos_url": "https://api.github.com/users/wisonye/repos", "events_url": "https://api.github.com/users/wisonye/events{/privacy}", "received_events_url": "https://api.github.com/users/wisonye/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2023-03-05T22:59:42Z", "updated_at": "2023-03-07T16:49:06Z", "closed_at": "2023-03-07T16:49:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nfn main() {\r\n    let what_you_want_to_say = \"I'm Rust:)\".to_string();\r\n    println!(\"I'm so pound to say: {what_you_want_to_say}\");\r\n}\r\n```\r\n\r\nI expected to see this happen: Should no unfreed memory exists\r\n\r\nInstead, this happeneed: But it seems memory is still reachable?\r\n\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.66.0 (69f9c33d7 2022-12-12)\r\nbinary: rustc\r\ncommit-hash: 69f9c33d71c871fc16ac445211281c6e7a340943\r\ncommit-date: 2022-12-12\r\nhost: x86_64-unknown-freebsd\r\nrelease: 1.66.0\r\nLLVM version: 15.0.2\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```bash\r\nN  wison | /usr/home/wison/Rust/temp \uf0a4  valgrind --leak-check=full --show-reachable=yes -s ./target/release/temp\r\n==9434== Memcheck, a memory error detector\r\n==9434== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.\r\n==9434== Using Valgrind-3.20.0 and LibVEX; rerun with -h for copyright info\r\n==9434== Command: ./target/release/temp\r\n==9434==\r\nI'm so pound to say: I'm Rust:)\r\n==9434==\r\n==9434== HEAP SUMMARY:\r\n==9434==     in use at exit: 1,853 bytes in 6 blocks\r\n==9434==   total heap usage: 10 allocs, 4 frees, 2,983 bytes allocated\r\n==9434==\r\n==9434== 5 bytes in 1 blocks are still reachable in loss record 1 of 6\r\n==9434==    at 0x484CBC4: malloc (in /usr/local/libexec/valgrind/vgpreload_memcheck-amd64-freebsd.so)\r\n==9434==    by 0x14C91F: alloc (alloc.rs:99)\r\n==9434==    by 0x14C91F: alloc_impl (alloc.rs:181)\r\n==9434==    by 0x14C91F: allocate (alloc.rs:241)\r\n==9434==    by 0x14C91F: allocate_in<u8, alloc::alloc::Global> (raw_vec.rs:185)\r\n==9434==    by 0x14C91F: with_capacity_in<u8, alloc::alloc::Global> (raw_vec.rs:131)\r\n==9434==    by 0x14C91F: with_capacity_in<u8, alloc::alloc::Global> (mod.rs:673)\r\n==9434==    by 0x14C91F: with_capacity<u8> (mod.rs:483)\r\n==9434==    by 0x14C91F: spec_new_impl_bytes (c_str.rs:287)\r\n==9434==    by 0x14C91F: <&str as alloc::ffi::c_str::CString::new::SpecNewImpl>::spec_new_impl (c_str.rs:306)\r\n==9434==    by 0x12F11E: new<&str> (c_str.rs:316)\r\n==9434==    by 0x12F11E: init (rt.rs:104)\r\n==9434==    by 0x12F11E: {closure#1} (rt.rs:147)\r\n==9434==    by 0x12F11E: do_call<std::rt::lang_start_internal::{closure_env#1}, ()> (panicking.rs:483)\r\n==9434==    by 0x12F11E: try<(), std::rt::lang_start_internal::{closure_env#1}> (panicking.rs:447)\r\n==9434==    by 0x12F11E: catch_unwind<std::rt::lang_start_internal::{closure_env#1}, ()> (panic.rs:137)\r\n==9434==    by 0x12F11E: std::rt::lang_start_internal (rt.rs:147)\r\n==9434==    by 0x11C044: main (in /usr/home/wison/Rust/temp/target/release/temp)\r\n==9434==\r\n==9434== 16 bytes in 1 blocks are still reachable in loss record 2 of 6\r\n==9434==    at 0x484CBC4: malloc (in /usr/local/libexec/valgrind/vgpreload_memcheck-amd64-freebsd.so)\r\n==9434==    by 0x137E72: alloc (alloc.rs:99)\r\n==9434==    by 0x137E72: alloc_impl (alloc.rs:181)\r\n==9434==    by 0x137E72: allocate (alloc.rs:241)\r\n==9434==    by 0x137E72: exchange_malloc (alloc.rs:330)\r\n==9434==    by 0x137E72: try_initialize<u8, std::sys_common::remutex::current_thread_unique_ptr::X::__getit::{closure_env#0}> (local.rs:1111)\r\n==9434==    by 0x137E72: get<u8, std::sys_common::remutex::current_thread_unique_ptr::X::__getit::{closure_env#0}> (local.rs:1093)\r\n==9434==    by 0x137E72: std::sys_common::remutex::current_thread_unique_ptr::X::__getit (local.rs:271)\r\n==9434==    by 0x130B88: try_with<u8, std::sys_common::remutex::current_thread_unique_ptr::{closure_env#0}, usize> (local.rs:445)\r\n==9434==    by 0x130B88: with<u8, std::sys_common::remutex::current_thread_unique_ptr::{closure_env#0}, usize> (local.rs:422)\r\n==9434==    by 0x130B88: current_thread_unique_ptr (remutex.rs:177)\r\n==9434==    by 0x130B88: lock<core::cell::RefCell<std::io::buffered::linewriter::LineWriter<std::io::stdio::StdoutRaw>>> (remutex.rs:97)\r\n==9434==    by 0x130B88: lock (stdio.rs:657)\r\n==9434==    by 0x130B88: <&std::io::stdio::Stdout as std::io::Write>::write_fmt (stdio.rs:716)\r\n==9434==    by 0x1312D2: write_fmt (stdio.rs:690)\r\n==9434==    by 0x1312D2: print_to<std::io::stdio::Stdout> (stdio.rs:1008)\r\n==9434==    by 0x1312D2: std::io::stdio::_print (stdio.rs:1075)\r\n==9434==    by 0x11BFC3: temp::main (in /usr/home/wison/Rust/temp/target/release/temp)\r\n==9434==    by 0x11C052: std::sys_common::backtrace::__rust_begin_short_backtrace (in /usr/home/wison/Rust/temp/target/release/temp)\r\n==9434==    by 0x11C068: std::rt::lang_start::{{closure}} (in /usr/home/wison/Rust/temp/target/release/temp)\r\n==9434==    by 0x12F1DE: call_once<(), (dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (function.rs:286)\r\n==9434==    by 0x12F1DE: do_call<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panicking.rs:483)\r\n==9434==    by 0x12F1DE: try<i32, &(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (panicking.rs:447)\r\n==9434==    by 0x12F1DE: catch_unwind<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panic.rs:137)\r\n==9434==    by 0x12F1DE: {closure#2} (rt.rs:148)\r\n==9434==    by 0x12F1DE: do_call<std::rt::lang_start_internal::{closure_env#2}, isize> (panicking.rs:483)\r\n==9434==    by 0x12F1DE: try<isize, std::rt::lang_start_internal::{closure_env#2}> (panicking.rs:447)\r\n==9434==    by 0x12F1DE: catch_unwind<std::rt::lang_start_internal::{closure_env#2}, isize> (panic.rs:137)\r\n==9434==    by 0x12F1DE: std::rt::lang_start_internal (rt.rs:148)\r\n==9434==    by 0x11C044: main (in /usr/home/wison/Rust/temp/target/release/temp)\r\n==9434==\r\n==9434== 48 bytes in 1 blocks are still reachable in loss record 3 of 6\r\n==9434==    at 0x484CBC4: malloc (in /usr/local/libexec/valgrind/vgpreload_memcheck-amd64-freebsd.so)\r\n==9434==    by 0x12F157: alloc (alloc.rs:99)\r\n==9434==    by 0x12F157: alloc_impl (alloc.rs:181)\r\n==9434==    by 0x12F157: allocate (alloc.rs:241)be\r\n==9434==    by 0x12F157: {closure#0}<std::thread::Inner> (sync.rs:497)\r\n==9434==    by 0x12F157: try_allocate_for_layout<core::mem::maybe_uninit::MaybeUninit<std::thread::Inner>, alloc::sync::{impl#13}::new_uninit::{closure_env#0}<std::thread::Inner>, alloc::sync::{impl#13}::new_uninit::{closure_env#1}<std::thread::Inner>> (sync.rs:1185)\r\n==9434==    by 0x12F157: allocate_for_layout<core::mem::maybe_uninit::MaybeUninit<std::thread::Inner>, alloc::sync::{impl#13}::new_uninit::{closure_env#0}<std::thread::Inner>, alloc::sync::{impl#13}::new_uninit::{closure_env#1}<std::thread::Inner>> (sync.rs:1163)\r\n==9434==    by 0x12F157: new_uninit<std::thread::Inner> (sync.rs:495)\r\n==9434==    by 0x12F157: new (mod.rs:1216)\r\n==9434==    by 0x12F157: init (rt.rs:104)\r\n==9434==    by 0x12F157: {closure#1} (rt.rs:147)\r\n==9434==    by 0x12F157: do_call<std::rt::lang_start_internal::{closure_env#1}, ()> (panicking.rs:483)\r\n==9434==    by 0x12F157: try<(), std::rt::lang_start_internal::{closure_env#1}> (panicking.rs:447)\r\n==9434==    by 0x12F157: catch_unwind<std::rt::lang_start_internal::{closure_env#1}, ()> (panic.rs:137)\r\n==9434==    by 0x12F157: std::rt::lang_start_internal (rt.rs:147)\r\n==9434==    by 0x11C044: main (in /usr/home/wison/Rust/temp/target/release/temp)\r\n==9434==\r\n==9434== 56 bytes in 1 blocks are still reachable in loss record 4 of 6\r\n==9434==    at 0x484CBC4: malloc (in /usr/local/libexec/valgrind/vgpreload_memcheck-amd64-freebsd.so)\r\n==9434==    by 0x137FA8: alloc (alloc.rs:99)\r\n==9434==    by 0x137FA8: alloc_impl (alloc.rs:181)\r\n==9434==    by 0x137FA8: allocate (alloc.rs:241)\r\n==9434==    by 0x137FA8: exchange_malloc (alloc.rs:330)\r\n==9434==    by 0x137FA8: try_initialize<core::cell::RefCell<core::option::Option<std::sys_common::thread_info::ThreadInfo>>, std::sys_common::thread_info::THREAD_INFO::__getit::{closure_env#0}> (local.rs:1111)\r\n==9434==    by 0x137FA8: get<core::cell::RefCell<core::option::Option<std::sys_common::thread_info::ThreadInfo>>, std::sys_common::thread_info::THREAD_INFO::__getit::{closure_env#0}> (local.rs:1093)\r\n==9434==    by 0x137FA8: std::sys_common::thread_info::THREAD_INFO::__getit (local.rs:271)\r\n==9434==    by 0x1346BE: try_with<core::cell::RefCell<core::option::Option<std::sys_common::thread_info::ThreadInfo>>, std::sys_common::thread_info::set::{closure_env#0}, ()> (local.rs:445)\r\n==9434==    by 0x1346BE: with<core::cell::RefCell<core::option::Option<std::sys_common::thread_info::ThreadInfo>>, std::sys_common::thread_info::set::{closure_env#0}, ()> (local.rs:422)\r\n==9434==    by 0x1346BE: std::sys_common::thread_info::set (thread_info.rs:42)\r\n==9434==    by 0x12F1CB: init (rt.rs:105)\r\n==9434==    by 0x12F1CB: {closure#1} (rt.rs:147)\r\n==9434==    by 0x12F1CB: do_call<std::rt::lang_start_internal::{closure_env#1}, ()> (panicking.rs:483)\r\n==9434==    by 0x12F1CB: try<(), std::rt::lang_start_internal::{closure_env#1}> (panicking.rs:447)\r\n==9434==    by 0x12F1CB: catch_unwind<std::rt::lang_start_internal::{closure_env#1}, ()> (panic.rs:137)\r\n==9434==    by 0x12F1CB: std::rt::lang_start_internal (rt.rs:147)\r\n==9434==    by 0x11C044: main (in /usr/home/wison/Rust/temp/target/release/temp)\r\n==9434==\r\n==9434== 64 bytes in 1 blocks are still reachable in loss record 5 of 6\r\n==9434==    at 0x48500D5: calloc (in /usr/local/libexec/valgrind/vgpreload_memcheck-amd64-freebsd.so)\r\n==9434==    by 0x4873C92: ??? (in /lib/libthr.so.3)\r\n==9434==    by 0x486D229: ??? (in /lib/libthr.so.3)\r\n==9434==    by 0x486C2DB: ??? (in /lib/libthr.so.3)\r\n==9434==    by 0x400B0AC: ??? (in /libexec/ld-elf.so.1)\r\n==9434==    by 0x40096AA: ??? (in /libexec/ld-elf.so.1)\r\n==9434==    by 0x4007058: ??? (in /libexec/ld-elf.so.1)\r\n==9434==\r\n==9434== 1,664 bytes in 1 blocks are still reachable in loss record 6 of 6\r\n==9434==    at 0x48500D5: calloc (in /usr/local/libexec/valgrind/vgpreload_memcheck-amd64-freebsd.so)\r\n==9434==    by 0x486D218: ??? (in /lib/libthr.so.3)\r\n==9434==    by 0x486C2DB: ??? (in /lib/libthr.so.3)\r\n==9434==    by 0x400B0AC: ??? (in /libexec/ld-elf.so.1)\r\n==9434==    by 0x40096AA: ??? (in /libexec/ld-elf.so.1)\r\n==9434==    by 0x4007058: ??? (in /libexec/ld-elf.so.1)\r\n==9434==\r\n==9434== LEAK SUMMARY:\r\n==9434==    definitely lost: 0 bytes in 0 blocks\r\n==9434==    indirectly lost: 0 bytes in 0 blocks\r\n==9434==      possibly lost: 0 bytes in 0 blocks\r\n==9434==    still reachable: 1,853 bytes in 6 blocks\r\n==9434==         suppressed: 0 bytes in 0 blocks\r\n==9434==\r\n==9434== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108791/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}