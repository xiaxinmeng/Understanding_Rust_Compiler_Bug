{"url": "https://api.github.com/repos/rust-lang/rust/issues/68307", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68307/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68307/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68307/events", "html_url": "https://github.com/rust-lang/rust/issues/68307", "id": 551331545, "node_id": "MDU6SXNzdWU1NTEzMzE1NDU=", "number": 68307, "title": "Copy not implemented on returned closures", "user": {"login": "zakcutner", "id": 7256716, "node_id": "MDQ6VXNlcjcyNTY3MTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7256716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zakcutner", "html_url": "https://github.com/zakcutner", "followers_url": "https://api.github.com/users/zakcutner/followers", "following_url": "https://api.github.com/users/zakcutner/following{/other_user}", "gists_url": "https://api.github.com/users/zakcutner/gists{/gist_id}", "starred_url": "https://api.github.com/users/zakcutner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zakcutner/subscriptions", "organizations_url": "https://api.github.com/users/zakcutner/orgs", "repos_url": "https://api.github.com/users/zakcutner/repos", "events_url": "https://api.github.com/users/zakcutner/events{/privacy}", "received_events_url": "https://api.github.com/users/zakcutner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2020-01-17T10:27:05Z", "updated_at": "2020-01-19T10:41:39Z", "closed_at": "2020-01-19T00:11:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am exploring how the `Copy` trait is implicitly added to closures as in [this RFC](https://github.com/rust-lang/rfcs/blob/master/text/2132-copy-closures.md). As a simple example, let's say I create a function `foo` which takes a `Copy` closure.\r\n\r\n```rust\r\nfn foo(f: impl Fn(i32) + Copy) {\r\n    f(10);\r\n}\r\n```\r\n\r\nAlthough in this case `f` does not need to be `Copy`, this is just to simplify the example, let's pretend that it really does. Now I create a function `bar` which returns the same type of closure that `foo` accepts.\r\n\r\n```rust\r\nfn bar() -> impl Fn(i32) {\r\n    |x: i32| {\r\n        println!(\"{}\", x);\r\n    }\r\n}\r\n```\r\n\r\nFrom my reading of the RFC, the returned closure should implicitly implement `Copy`. However, if I try to call `foo` with the result from `bar`, the compiler gives me an error because I do not explicitly implement `Copy` on the closure returned by `bar`.\r\n\r\n```rust\r\nfoo(bar());\r\n    ^^^^^ the trait `std::marker::Copy` is not implemented for `impl std::ops::Fn<(i32,)>`\r\n```\r\n\r\nWhilst I could change the signature of `bar` to return `impl Fn(i32) + Copy` let's assume that I do not have control over this function as it is defined in another crate. Interestingly, if I wrap the whole thing in another (and pointless!) closure, it works \ud83d\udc40\r\n\r\n```rust\r\nfoo(|x: i32| bar()(x));\r\n```\r\n\r\nI have seen this exact pattern come up when using combinator libraries ([nom](https://github.com/Geal/nom) for instance), and the second working solution is pretty frustrating as the outer closure has no purpose.\r\n\r\n1. Is this the intended behaviour of the Rust compiler? Surely this is a bug that it can only infer `Copy` on local closures and not those returned by functions?\r\n\r\n2. Is there something simple I'm missing; maybe I can write this in another way to avoid this issue? For this, please assume that I cannot edit `foo` or `bar` as this is based on real examples where combinators I use are defined by other crates.\r\n\r\nThank you! \ud83d\ude04 ", "closed_by": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68307/timeline", "performed_via_github_app": null, "state_reason": "completed"}