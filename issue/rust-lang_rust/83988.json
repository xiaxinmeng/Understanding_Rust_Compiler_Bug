{"url": "https://api.github.com/repos/rust-lang/rust/issues/83988", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83988/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83988/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83988/events", "html_url": "https://github.com/rust-lang/rust/issues/83988", "id": 853053420, "node_id": "MDU6SXNzdWU4NTMwNTM0MjA=", "number": 83988, "title": "Failed to automatically apply fixes suggested by rustc", "user": {"login": "asg0451", "id": 4358545, "node_id": "MDQ6VXNlcjQzNTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/4358545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asg0451", "html_url": "https://github.com/asg0451", "followers_url": "https://api.github.com/users/asg0451/followers", "following_url": "https://api.github.com/users/asg0451/following{/other_user}", "gists_url": "https://api.github.com/users/asg0451/gists{/gist_id}", "starred_url": "https://api.github.com/users/asg0451/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asg0451/subscriptions", "organizations_url": "https://api.github.com/users/asg0451/orgs", "repos_url": "https://api.github.com/users/asg0451/repos", "events_url": "https://api.github.com/users/asg0451/events{/privacy}", "received_events_url": "https://api.github.com/users/asg0451/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-04-08T04:44:07Z", "updated_at": "2023-02-25T09:54:29Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI ran this command: \r\n```\r\ncargo +nightly clippy -Zunstable-options --fix --allow-dirty\r\n```\r\n\r\nand it told me to file a bug ;). Output below as requested:\r\n```\r\n$ cargo +nightly clippy -Zunstable-options --fix --allow-dirty\r\n    Checking idx v0.1.0 (/home/miles/rust/lfm-idxr/idx)\r\nwarning: failed to automatically apply fixes suggested by rustc to crate `idx`\r\n\r\nafter fixes were automatically applied the compiler reported errors within these files:\r\n\r\n  * idx/src/ingest_event.rs\r\n\r\nThis likely indicates a bug in either rustc or cargo itself,\r\nand we would appreciate a bug report! You're likely to see\r\na number of compiler warnings after this message which cargo\r\nattempted to fix but failed. If you could open an issue at\r\nhttps://github.com/rust-lang/rust/issues\r\nquoting the full output of this command we'd be very appreciative!\r\nNote that you may be able to make some more progress in the near-term\r\nfixing code with the `--broken-code` flag\r\n\r\nThe following errors were reported:\r\nerror[E0308]: mismatched types\r\n  --> idx/src/ingest_event.rs:56:9\r\n   |\r\n56 |         self.profile_type.as_ref().map(|profile_type| (&self.channel, profile_type))\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found struct `std::string::String`\r\n   |\r\n   = note: expected enum `std::option::Option<(&str, &str)>`\r\n              found enum `std::option::Option<(&std::string::String, &std::string::String)>`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nOriginal diagnostics will follow.\r\n\r\nwarning: this `if` has identical blocks\r\n  --> idx/src/ingest_event.rs:43:71\r\n   |\r\n43 |           } else if channel == \"instagram\" && profile_type == \"comment\" {\r\n   |  _______________________________________________________________________^\r\n44 | |             Some(fb_ts_to_epoch(profile.get(\"created_time\")?.as_str()?).ok()?)\r\n45 | |         } else {\r\n   | |_________^\r\n   |\r\n   = note: `#[warn(clippy::if_same_then_else)]` on by default\r\nnote: same as this\r\n  --> idx/src/ingest_event.rs:41:63\r\n   |\r\n41 |           if channel == \"facebook\" && profile_type == \"comment\" {\r\n   |  _______________________________________________________________^\r\n42 | |             Some(fb_ts_to_epoch(profile.get(\"created_time\")?.as_str()?).ok()?)\r\n43 | |         } else if channel == \"instagram\" && profile_type == \"comment\" {\r\n   | |_________^\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\r\n\r\nwarning: manual implementation of `Option::map`\r\n  --> idx/src/ingest_event.rs:56:9\r\n   |\r\n56 | /         if let Some(profile_type) = self.profile_type.as_ref() {\r\n57 | |             Some((&self.channel, profile_type))\r\n58 | |         } else {\r\n59 | |             None\r\n60 | |         }\r\n   | |_________^ help: try this: `self.profile_type.as_ref().map(|profile_type| (&self.channel, profile_type))`\r\n   |\r\n   = note: `#[warn(clippy::manual_map)]` on by default\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_map\r\n\r\nwarning: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\r\n  --> idx/src/tok_norm.rs:63:1\r\n   |\r\n63 | fn split_token_at_hm<'a>(tok: &'a str) -> Vec<String> {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\r\n\r\nwarning: this `if` has identical blocks\r\n  --> idx/src/ingest_event.rs:43:71\r\n   |\r\n43 |           } else if channel == \"instagram\" && profile_type == \"comment\" {\r\n   |  _______________________________________________________________________^\r\n44 | |             Some(fb_ts_to_epoch(profile.get(\"created_time\")?.as_str()?).ok()?)\r\n45 | |         } else {\r\n   | |_________^\r\n   |\r\n   = note: `#[warn(clippy::if_same_then_else)]` on by default\r\nnote: same as this\r\n  --> idx/src/ingest_event.rs:41:63\r\n   |\r\n41 |           if channel == \"facebook\" && profile_type == \"comment\" {\r\n   |  _______________________________________________________________^\r\n42 | |             Some(fb_ts_to_epoch(profile.get(\"created_time\")?.as_str()?).ok()?)\r\n43 | |         } else if channel == \"instagram\" && profile_type == \"comment\" {\r\n   | |_________^\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\r\n\r\nwarning: length comparison to zero\r\n  --> idx/src/tok_norm.rs:64:13\r\n   |\r\n64 |     assert!(tok.len() > 0);\r\n   |             ^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!tok.is_empty()`\r\n   |\r\n   = note: `#[warn(clippy::len_zero)]` on by default\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\r\n\r\nwarning: length comparison to zero\r\n  --> idx/src/tok_norm.rs:83:8\r\n   |\r\n83 |     if token.len() == 0 {\r\n   |        ^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `token.is_empty()`\r\n   |\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\r\n\r\nwarning: manual implementation of `Option::map`\r\n  --> idx/src/ingest_event.rs:56:9\r\n   |\r\n56 | /         if let Some(profile_type) = self.profile_type.as_ref() {\r\n57 | |             Some((&self.channel, profile_type))\r\n58 | |         } else {\r\n59 | |             None\r\n60 | |         }\r\n   | |_________^ help: try this: `self.profile_type.as_ref().map(|profile_type| (&self.channel, profile_type))`\r\n   |\r\n   = note: `#[warn(clippy::manual_map)]` on by default\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_map\r\n\r\nwarning: length comparison to zero\r\n   --> idx/src/tok_norm.rs:104:13\r\n    |\r\n104 |     assert!(token.len() > 0);\r\n    |             ^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!token.is_empty()`\r\n    |\r\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\r\n\r\nwarning: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\r\n  --> idx/src/tok_norm.rs:63:1\r\n   |\r\n63 | fn split_token_at_hm<'a>(tok: &'a str) -> Vec<String> {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\r\n\r\nwarning: length comparison to zero\r\n  --> idx/src/tok_norm.rs:64:13\r\n   |\r\n64 |     assert!(tok.len() > 0);\r\n   |             ^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!tok.is_empty()`\r\n   |\r\n   = note: `#[warn(clippy::len_zero)]` on by default\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\r\n\r\nwarning: length comparison to zero\r\n  --> idx/src/tok_norm.rs:83:8\r\n   |\r\n83 |     if token.len() == 0 {\r\n   |        ^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `token.is_empty()`\r\n   |\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\r\n\r\nwarning: length comparison to zero\r\n   --> idx/src/tok_norm.rs:104:13\r\n    |\r\n104 |     assert!(token.len() > 0);\r\n    |             ^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!token.is_empty()`\r\n    |\r\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\r\n\r\nwarning: 6 warnings emitted\r\n\r\nwarning: 6 warnings emitted\r\n\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.80s\r\n```\r\n\r\nrustc nightly version: rustc 1.52.0-nightly (51748a8fc 2021-03-05)\r\nUbuntu 20.04\r\n\r\nThe code might be confidential... but I might be able to provide it on request.\r\nI am in a project within a cargo workspace, if that helps. I typically use stable, but use nightly for this command.\r\n\r\nLet me know if you have any questions!", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83988/timeline", "performed_via_github_app": null, "state_reason": null}