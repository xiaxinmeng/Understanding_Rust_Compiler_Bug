{"url": "https://api.github.com/repos/rust-lang/rust/issues/37504", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37504/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37504/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37504/events", "html_url": "https://github.com/rust-lang/rust/issues/37504", "id": 186400756, "node_id": "MDU6SXNzdWUxODY0MDA3NTY=", "number": 37504, "title": "debuginfo: How to (ideally) represent reference and pointer types in DWARF", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 32, "created_at": "2016-10-31T21:20:49Z", "updated_at": "2022-03-04T15:53:13Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, we represent thin references and pointers with `DW_TAG_pointer_type` DIEs and fat pointers (slices and trait objects) as `DW_TAG_struct` DIEs with fields representing payload and metadata pointers. This is not ideal and with debuggers knowing about Rust, we can do better. The question is, what exactly do we want the representation for these kinds of types to look like.\r\n\r\nSome things seem pretty straightforward to me:\r\n- Rust references should be `DW_TAG_reference_type` DIEs.\r\n- Rust raw pointers should be `DW_TAG_pointer_type` DIEs.\r\n\r\nBut beyond that, there are some decisions to be made:\r\n\r\n### (1) How do we represent mutability?\r\nThe C++ version of DWARF represents a const pointer like `const char *` with three separate type entries:\r\n```\r\n0:\r\nDW_TAG_base_type\r\n    DW_AT_name \"char\"\r\n    ... \r\n\r\n1:\r\nDW_TAG_const_type\r\n    DW_AT_type: ref to <0>\r\n\r\n2:\r\nDW_TAG_pointer_type\r\n    DW_AT_type: ref to <1>\r\n```\r\n\r\nI think this is a bit verbose and I'm not sure it is entirely appropriate for Rust. Do we really have `const` and `mut` *types*? That is, does Rust have the concept of a `mut i32` at the type level, for example? I mean there are mutable and immutable *slots*/memory locations and we have \"mutable\" and \"shared\" references, but those two things seem kind of different to me.\r\n\r\nAs an alternative to using `DW_TAG_const_type` for representing mutability, we could re-use the `DW_AT_mutable` attribute that is already defined in DWARF. In C++ DWARF it is used for `mutable` fields. We could use it for reference type and local variable DIEs:\r\n```\r\n0: // char\r\nDW_TAG_base_type\r\n    DW_AT_name \"char\"\r\n    ... \r\n\r\n1: // &mut char\r\nDW_TAG_reference_type\r\n    DW_AT_type: ref to <0>\r\n    DW_AT_mutable: true\r\n\r\n2: // &char\r\nDW_TAG_reference_type\r\n    DW_AT_type: ref to <0>\r\n    DW_AT_mutable: false       // or just leave it off\r\n\r\n3: \r\nDW_TAG_variable\r\n    DW_AT_name: \"foo\"\r\n    DW_AT_type: ref to <0>\r\n    DW_AT_mutable: true\r\n    ...\r\n```\r\n\r\n### (2) How to represent fat pointers?\r\nThe pointer types in C/C++ DWARF don't have `DW_TAG_member` sub-DIEs, since they are always just values. Fat pointers in Rust are different: they have one field that is a pointer to the data, and another field that holds additional information, either the size of a slice or the pointer to a vtable. These need to be described somehow.\r\nI see a few options:\r\n\r\n1. A fat-pointer type is described by a `DW_TAG_pointer_type` or `DW_TAG_reference_type` DIE with two fields that are described by `DW_TAG_member` sub-DIEs, both having the `DW_AT_artificial` attribute. @tromey once suggested for slices that the field entries have no name and the debugger determines which is which by the type (the size is always an integer type, the data is always a pointer type). This could also be extended for trait objects, since the data pointer will always be a pointer to a trait and the vtable-pointer will always be something else.\r\n2. Treat trait objects and slices differently. Have a new `DW_TAG_slice_type` DIE that follows the encoding above and borrow some other attributes for trait objects: a `DW_AT_vtable_elem_location` attribute holds the offset of the vtable field within the fat-pointer value, and a `DW_AT_object_pointer` attribute does the same for the data pointer. This is distinctly not how these attributes are used in a C++ context but it would be a nice fit, I think.\r\n3. Mix of the above with `DW_AT_object_pointer` indicating data pointer field\r\n\r\nAnother questions is: Should fat-pointers (and thin pointers too, maybe) have a `DW_AT_byte_size` attribute that specifies their size explicitly?\r\n\r\ncc @tromey, @Manishearth \r\nSee also https://github.com/rust-lang/rust/issues/33073", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37504/timeline", "performed_via_github_app": null, "state_reason": null}