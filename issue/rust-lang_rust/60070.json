{"url": "https://api.github.com/repos/rust-lang/rust/issues/60070", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60070/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60070/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60070/events", "html_url": "https://github.com/rust-lang/rust/issues/60070", "id": 434658194, "node_id": "MDU6SXNzdWU0MzQ2NTgxOTQ=", "number": 60070, "title": "ICE: `OutputTypeParameterMismatch` when combining closures and higher-rank lifetime bounds", "user": {"login": "fredpointzero", "id": 1635937, "node_id": "MDQ6VXNlcjE2MzU5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/1635937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fredpointzero", "html_url": "https://github.com/fredpointzero", "followers_url": "https://api.github.com/users/fredpointzero/followers", "following_url": "https://api.github.com/users/fredpointzero/following{/other_user}", "gists_url": "https://api.github.com/users/fredpointzero/gists{/gist_id}", "starred_url": "https://api.github.com/users/fredpointzero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fredpointzero/subscriptions", "organizations_url": "https://api.github.com/users/fredpointzero/orgs", "repos_url": "https://api.github.com/users/fredpointzero/repos", "events_url": "https://api.github.com/users/fredpointzero/events{/privacy}", "received_events_url": "https://api.github.com/users/fredpointzero/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-04-18T08:48:22Z", "updated_at": "2019-07-10T10:09:27Z", "closed_at": "2019-07-10T10:09:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Update by pnkfelix: Here is a version of the code that does not use any features, so you can see the bug on stable/beta/nightly ([play](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=335318c74f48b36a8fe89be0d008b31c)):\r\n\r\n<details>\r\n<summary>Click to expand the code, in case playpen link above is broken</summary>\r\n\r\n```rust\r\n// FamilyType (GAT workaround)\r\npub trait FamilyLt<'a> {\r\n    type Out;\r\n}\r\n\r\nstruct RefMutFamily<T>(std::marker::PhantomData<T>, ());\r\nimpl<'a, T: 'a> FamilyLt<'a> for RefMutFamily<T> {\r\n    type Out = &'a mut T;\r\n}\r\n\r\npub trait Execute {\r\n    type E: Inject;\r\n    fn execute(self, value: <<Self::E as Inject>::I as FamilyLt>::Out);\r\n}\r\n\r\npub trait Inject\r\nwhere\r\n    Self: Sized,\r\n{\r\n    type I: for<'a> FamilyLt<'a>;\r\n    fn inject(_: &()) -> <Self::I as FamilyLt>::Out;\r\n}\r\n\r\nimpl<T: 'static> Inject for RefMutFamily<T> {\r\n    type I = Self;\r\n    fn inject(_: &()) -> <Self::I as FamilyLt>::Out {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\n// This struct is only used to give a hint to the compiler about the type `Q`\r\nstruct Annotate<Q>(std::marker::PhantomData<Q>);\r\nimpl<Q> Annotate<Q> {\r\n    fn new() -> Self {\r\n        Self(std::marker::PhantomData)\r\n    }\r\n}\r\n\r\n// This function annotate a closure so it can have Higher-Rank Lifetime Bounds\r\n//\r\n// See 'annotate' workaround: https://github.com/rust-lang/rust/issues/58052\r\nfn annotate<F, Q>(_q: Annotate<Q>, func: F) -> impl Execute + 'static\r\nwhere\r\n    F: for<'r> FnOnce(<<Q as Inject>::I as FamilyLt<'r>>::Out) + 'static,\r\n    Q: Inject + 'static,\r\n{\r\n    let wrapper: Wrapper<Q, F> = Wrapper(std::marker::PhantomData, func);\r\n    wrapper\r\n}\r\n\r\nstruct Wrapper<Q, F>(std::marker::PhantomData<Q>, F);\r\nimpl<Q, F> Execute for Wrapper<Q, F>\r\n    where\r\n        Q: Inject,\r\n        F: for<'r> FnOnce(<<Q as Inject>::I as FamilyLt<'r>>::Out),\r\n{\r\n    type E = Q;\r\n\r\n    fn execute(self, value: <<Self::E as Inject>::I as FamilyLt>::Out) {\r\n        (self.1)(value)\r\n    }\r\n}\r\n\r\nstruct Task {\r\n    _processor: Box<dyn FnOnce()>,\r\n}\r\n\r\n// This function consume the closure\r\nfn task<P>(processor: P) -> Task\r\nwhere P: Execute + 'static {\r\n    Task {\r\n        _processor: Box::new(move || {\r\n            let q = P::E::inject(&());\r\n            processor.execute(q);\r\n        })\r\n    }\r\n}\r\n\r\nfn main() {\r\n    task(annotate(\r\n        Annotate::<RefMutFamily<usize>>::new(),\r\n        |value: &mut usize| {\r\n            *value = 2;\r\n        }\r\n    ));\r\n}\r\n```\r\n\r\n</details>\r\n\r\nOriginal report follows.\r\n----\r\n\r\nHi, I ran into the ICE while compiling this code: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=c4d5196a6bdaf9a0bd5d346ef2bb20e1\r\n\r\nThe basic idea with this code is:\r\n1. To store a closure that have Higher-Ranked Lifetimes in its arguments. (See workaround here #58052\r\n1. The arguments implements a `FamilyLt` trait (workaround for GAT, see 'Workaround B' http://lukaskalbertodt.github.io/2018/08/03/solving-the-generalized-streaming-iterator-problem-without-gats.html)\r\n\r\nNote:\r\nThe ICE appeared when I actually use the closure to store it in the `FnBox`.\r\nSee, this one without the implementation of `task` compiles (source code below).\r\n\r\n\r\nThis may be related to #29997, but I prefered to report this use case as well.\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.35.0-nightly (f22dca0a1 2019-03-05)\r\nbinary: rustc\r\ncommit-hash: f22dca0a1bef4141e75326caacc3cd59f3d5be8e\r\ncommit-date: 2019-03-05\r\nhost: x86_64-pc-windows-gnu\r\nrelease: 1.35.0-nightly\r\nLLVM version: 8.0\r\n```\r\n\r\nBacktrace:\r\n```\r\nerror: internal compiler error: src/librustc/traits/codegen/mod.rs:58: Encountered error `OutputTypeParameterMismatch(Binder(<[closure@src/main.rs:147:9: 150:10] as std::ops::FnOnce<(<RefMutFamily<usize> as FamilyLt<'_>>::Out,)>>), Binder(<[closure@src/main.rs:147:9: 150:10] as std::ops::FnOnce<(RefMut<usize>,)>>), Sorts(ExpectedFound { expected: RefMut<usize>, found: <RefMutFamily<usize> as FamilyLt<'_>>::Out }))` selecting `Binder(<[closure@src/main.rs:147:9: 150:10] as std::ops::FnOnce<(RefMut<usize>,)>>)` during codegen\r\n\r\nthread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:635:9\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39\r\n   1: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:71\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n             at src/libstd/panicking.rs:197\r\n   3: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:211\r\n   4: rustc::util::common::panic_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:478\r\n   6: std::panicking::begin_panic\r\n   7: rustc_errors::Handler::bug\r\n   8: rustc::util::bug::opt_span_bug_fmt::{{closure}}\r\n   9: rustc::ty::context::tls::with_opt::{{closure}}\r\n  10: rustc::ty::context::tls::with_context_opt\r\n  11: rustc::ty::context::tls::with_opt\r\n  12: rustc::util::bug::opt_span_bug_fmt\r\n  13: rustc::util::bug::bug_fmt\r\n  14: rustc::ty::context::GlobalCtxt::enter_local\r\n  15: rustc::traits::codegen::codegen_fulfill_obligation\r\n  16: rustc::ty::query::__query_compute::codegen_fulfill_obligation\r\n  17: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::codegen_fulfill_obligation>::compute\r\n  18: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  19: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  20: rustc::ty::instance::Instance::resolve\r\n  21: <rustc_mir::monomorphize::collector::MirNeighborCollector as rustc::mir::visit::Visitor>::visit_terminator_kind\r\n  22: rustc_mir::monomorphize::collector::collect_items_rec\r\n  23: rustc_mir::monomorphize::collector::collect_items_rec\r\n  24: rustc_mir::monomorphize::collector::collect_items_rec\r\n  25: rustc_mir::monomorphize::collector::collect_items_rec\r\n  26: rustc_mir::monomorphize::collector::collect_items_rec\r\n  27: rustc_mir::monomorphize::collector::collect_items_rec\r\n  28: rustc_mir::monomorphize::collector::collect_crate_mono_items::{{closure}}\r\n  29: rustc::util::common::time\r\n  30: rustc_mir::monomorphize::collector::collect_crate_mono_items\r\n  31: rustc::util::common::time\r\n  32: rustc_mir::monomorphize::partitioning::collect_and_partition_mono_items\r\n  33: rustc::ty::query::__query_compute::collect_and_partition_mono_items\r\n  34: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::collect_and_partition_mono_items>::compute\r\n  35: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  36: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  37: rustc_codegen_ssa::base::codegen_crate\r\n  38: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_utils::codegen_backend::CodegenBackend>::codegen_crate\r\n  39: rustc::util::common::time\r\n  40: rustc_interface::passes::start_codegen\r\n  41: rustc::ty::context::tls::enter_global\r\n  42: rustc_interface::passes::BoxedGlobalCtxt::access::{{closure}}\r\n  43: rustc_interface::passes::create_global_ctxt::{{closure}}\r\n  44: rustc_interface::passes::BoxedGlobalCtxt::enter\r\n  45: rustc_interface::queries::Query<T>::compute\r\n  46: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::ongoing_codegen\r\n  47: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  48: std::thread::local::LocalKey<T>::with\r\n  49: scoped_tls::ScopedKey<T>::set\r\n  50: syntax::with_globals\r\nquery stack during panic:\r\n#0 [codegen_fulfill_obligation] checking if `std::ops::FnOnce` fulfills its obligations\r\n#1 [collect_and_partition_mono_items] collect_and_partition_mono_items\r\nend of query stack\r\nerror: aborting due to previous error\r\n```\r\n\r\n<details><summary>Source Code without `task`</summary>\r\n<p>\r\n\r\nNote: I fail to make a proper second link to playground, so copy paste the code here\r\n\r\n```\r\n#![feature(fnbox)]\r\n#![feature(never_type)]\r\n\r\nuse std::ops::{Deref, DerefMut};\r\nuse std::boxed::FnBox;\r\nuse std::sync::Arc;\r\n\r\n//\r\n// Context\r\n//\r\n\r\nstruct Context {}\r\n\r\n//\r\n// FamilyType (GAT workaround)\r\n//\r\n\r\npub trait FamilyLt<'a> {\r\n    type Out;\r\n}\r\n\r\nstruct RefMut<'a, T: 'a> {\r\n    value: &'a mut T\r\n}\r\nimpl<'a, T: 'a> Deref for RefMut<'a, T> {\r\n    type Target = T;\r\n    fn deref(&self) -> &Self::Target {\r\n        &self.value\r\n    }\r\n}\r\nimpl<'a, T: 'a> DerefMut for RefMut<'a, T> {\r\n    fn deref_mut(&mut self) -> &mut Self::Target {\r\n        &mut self.value\r\n    }\r\n}\r\n\r\nstruct RefMutFamily<T>(std::marker::PhantomData<T>, !);\r\nimpl<'a, T: 'a> FamilyLt<'a> for RefMutFamily<T> {\r\n    type Out = RefMut<'a, T>;\r\n}\r\n\r\n//\r\n// Execute trait\r\n//\r\n\r\npub trait Execute<Ctx, R, E> {\r\n    type Injected: TryInject<Ctx>;\r\n\r\n    fn execute(\r\n        self,\r\n        value: <<Self::Injected as TryInject<Ctx>>::Injected as FamilyLt>::Out,\r\n    ) -> Result<R, E>;\r\n}\r\n\r\n//\r\n// Injection trait\r\n//\r\n\r\npub trait TryInject<C>\r\nwhere\r\n    Self: Sized,\r\n{\r\n    type Error;\r\n    type Injected: for<'a> FamilyLt<'a>;\r\n\r\n    fn try_inject(context: &C) -> Result<<Self::Injected as FamilyLt>::Out, Self::Error>;\r\n}\r\n\r\nimpl<T: 'static> TryInject<Context> for RefMutFamily<T> {\r\n    type Error = ();\r\n    type Injected = Self;\r\n    \r\n     fn try_inject(context: &Context) -> Result<<Self::Injected as FamilyLt>::Out, Self::Error> {\r\n         unimplemented!()\r\n     }\r\n}\r\n\r\n//\r\n// Helper func\r\n//\r\n\r\nstruct Annotate<Q>(std::marker::PhantomData<Q>);\r\nimpl<Q> Annotate<Q> {\r\n    fn new() -> Self {\r\n        Self(std::marker::PhantomData)\r\n    }\r\n}\r\n\r\nfn annotate<F, Q, R, E, Ctx>(_q: Annotate<Q>, func: F) -> impl Execute<Ctx, R, E>\r\nwhere\r\n    F: for<'r> FnOnce(<<Q as TryInject<Ctx>>::Injected as FamilyLt<'r>>::Out) -> Result<R, E>,\r\n    Q: TryInject<Ctx>,\r\n{\r\n    struct Wrapper<Q, F>(std::marker::PhantomData<Q>, F);\r\n    impl<Ctx, Q, R, E, F> Execute<Ctx, R, E> for Wrapper<Q, F>\r\n    where\r\n        Q: TryInject<Ctx>,\r\n        F: for<'r> FnOnce(<<Q as TryInject<Ctx>>::Injected as FamilyLt<'r>>::Out) -> Result<R, E>,\r\n    {\r\n        type Injected = Q;\r\n\r\n        fn execute(\r\n            self,\r\n            value: <<Self::Injected as TryInject<Ctx>>::Injected as FamilyLt>::Out,\r\n        ) -> Result<R, E> {\r\n            (self.1)(value)\r\n        }\r\n    }\r\n    let wrapper: Wrapper<Q, F> = Wrapper(std::marker::PhantomData, func);\r\n    wrapper\r\n}\r\n\r\nstruct schedule {\r\n    processor: Box<FnBox(Arc<Context>) -> Result<(), ()>>,\r\n}\r\n\r\nfn task<Ctx, R, E, P>(processor: P)  \r\nwhere P: Execute<Ctx, R, E> {\r\n    \r\n}\r\n\r\n//\r\n// Usage\r\n//\r\n\r\nfn main() {\r\n    task(annotate(\r\n        Annotate::<RefMutFamily<usize>>::new(),\r\n        |mut value: RefMut<usize>| -> Result<usize, ()> {\r\n            *value = 2;\r\n            Ok(1)\r\n        }\r\n    ));\r\n}\r\n```\r\n\r\n</p>\r\n</details>", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60070/timeline", "performed_via_github_app": null, "state_reason": "completed"}