{"url": "https://api.github.com/repos/rust-lang/rust/issues/88275", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88275/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88275/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88275/events", "html_url": "https://github.com/rust-lang/rust/issues/88275", "id": 977596887, "node_id": "MDU6SXNzdWU5Nzc1OTY4ODc=", "number": 88275, "title": "Panic backtrace doesn't traverse ffi code with panic=abort", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-08-24T00:52:17Z", "updated_at": "2021-08-24T20:49:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n`Cargo.toml`:\r\n```\r\n[package]\r\nname = \"testcase\"\r\nversion = \"0.1.0\"\r\nedition = \"2018\"\r\n\r\n[profile.release]\r\npanic=\"abort\"\r\n\r\n[profile.dev]\r\npanic=\"abort\"\r\n\r\n[build-dependencies]\r\ncc = \"1\"\r\n```\r\n`build.rs`:\r\n```rust\r\nfn main() {\r\n    cc::Build::new().file(\"foo.c\").compile(\"foo\");\r\n}\r\n```\r\n`foo.c`:\r\n```c\r\n#include <stdio.h>\r\n\r\nextern void do_rust_panic(const char *msg);\r\n\r\nvoid foo() {\r\n\tdo_rust_panic(\"foo\");\r\n        // prevent tail-call optimization so that the frame for foo is always there\r\n\tprintf(\"foo\\n\");\r\n}\r\n```\r\n`src/main.rs`:\r\n```rust\r\nuse std::ffi::CStr;\r\nuse std::os::raw::c_char;\r\n\r\n#[no_mangle]\r\npub unsafe extern \"C\" fn do_rust_panic(message: *const c_char) {\r\n    panic!(\"{}\", CStr::from_ptr(message).to_string_lossy());\r\n}\r\n\r\nextern \"C\" {\r\n    fn foo();\r\n}\r\n\r\nfn main() {\r\n    unsafe {\r\n        foo();\r\n    }\r\n    // prevent tail-call optimization so that the frame for main is always there\r\n    println!(\"Hello, world!\");\r\n}\r\n```\r\nI expected to see this happen: the panic backtrace would traverse the ffi code, like it does without panic=abort.\r\n\r\nInstead, this happened: the panic backtrace stops at `do_rust_panic`:\r\n```\r\n$ RUST_BACKTRACE=1 cargo run --release\r\n    Finished release [optimized] target(s) in 0.00s\r\n     Running `target/release/testcase`\r\nHello, world!\r\nthread 'main' panicked at 'foo', src/main.rs:6:5\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/a178d0322ce20e33eac124758e837cbd80a6f633/library/std/src/panicking.rs:515:5\r\n   1: std::panicking::begin_panic_fmt\r\n             at /rustc/a178d0322ce20e33eac124758e837cbd80a6f633/library/std/src/panicking.rs:457:5\r\n   2: do_rust_panic\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\nWithout panic=abort:\r\n```\r\n$ RUST_BACKTRACE=1 cargo run --release\r\n    Finished release [optimized] target(s) in 0.00s\r\n     Running `target/release/testcase`\r\nthread 'main' panicked at 'foo', src/main.rs:6:5\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/a178d0322ce20e33eac124758e837cbd80a6f633/library/std/src/panicking.rs:515:5\r\n   1: std::panicking::begin_panic_fmt\r\n             at /rustc/a178d0322ce20e33eac124758e837cbd80a6f633/library/std/src/panicking.rs:457:5\r\n   2: do_rust_panic\r\n   3: foo\r\n   4: testcase::main\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.54.0 (a178d0322 2021-07-26)\r\nbinary: rustc\r\ncommit-hash: a178d0322ce20e33eac124758e837cbd80a6f633\r\ncommit-date: 2021-07-26\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.54.0\r\nLLVM version: 12.0.1\r\n```\r\n\r\nAlso reproducible with nightly:\r\n```\r\nrustc 1.56.0-nightly (af140757b 2021-08-22)\r\nbinary: rustc\r\ncommit-hash: af140757b4cb1a60d107c690720311ba8e06e7de\r\ncommit-date: 2021-08-22\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.56.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\nI tried tweaking the FFI build flags, adding combinations of `-fno-omit-frame-pointer`, `-funwind-tables` and `-g`, and none of them changed anything.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88275/timeline", "performed_via_github_app": null, "state_reason": null}