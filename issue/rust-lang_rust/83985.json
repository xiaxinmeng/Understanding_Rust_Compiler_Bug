{"url": "https://api.github.com/repos/rust-lang/rust/issues/83985", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83985/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83985/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83985/events", "html_url": "https://github.com/rust-lang/rust/issues/83985", "id": 852850840, "node_id": "MDU6SXNzdWU4NTI4NTA4NDA=", "number": 83985, "title": "Source-code based coverage is failing to identify some executable lines", "user": {"login": "wpbrown", "id": 5326080, "node_id": "MDQ6VXNlcjUzMjYwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/5326080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wpbrown", "html_url": "https://github.com/wpbrown", "followers_url": "https://api.github.com/users/wpbrown/followers", "following_url": "https://api.github.com/users/wpbrown/following{/other_user}", "gists_url": "https://api.github.com/users/wpbrown/gists{/gist_id}", "starred_url": "https://api.github.com/users/wpbrown/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wpbrown/subscriptions", "organizations_url": "https://api.github.com/users/wpbrown/orgs", "repos_url": "https://api.github.com/users/wpbrown/repos", "events_url": "https://api.github.com/users/wpbrown/events{/privacy}", "received_events_url": "https://api.github.com/users/wpbrown/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2483744621, "node_id": "MDU6TGFiZWwyNDgzNzQ0NjIx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-code-coverage", "name": "A-code-coverage", "color": "f7e101", "default": false, "description": "Area: Source-based code coverage (-Cinstrument-coverage)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-04-07T21:52:47Z", "updated_at": "2021-04-20T11:19:41Z", "closed_at": "2021-04-20T11:19:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to generate test code coverage with this source file using `-Zinstrument-coverage` and the LLVM tools.\r\n\r\nSource File:\r\nhttps://github.com/wpbrown/rust-codecov/blob/main/codecovsample/src/main.rs\r\n\r\nI expected to see this happen: `76% line coverage`\r\n\r\nInstead, this happened: `83% line coverage`.\r\n\r\ncargo-kcov, -Zprofile+grcov, and tarpaulin agree on 76%.\r\n\r\nIn the output below lines `65-67`, `116-118`, `163-165` were not executable but should have been executable+uncovered. Line `169-170` should be executable+covered.\r\n\r\n<details><summary>coverage output</summary>\r\n<p>\r\n\r\n```\r\n#![allow(dead_code)]#![allow(dead_code)]\r\n    2|       |\r\n    3|       |use async_trait::async_trait;\r\n    4|       |\r\n    5|      1|fn main() {\r\n    6|      1|    println!(\"codecovsample::main\");\r\n    7|      1|}\r\n    8|       |\r\n    9|       |enum Covered {\r\n   10|       |    Variant1,\r\n   11|       |    Variant2,\r\n   12|       |}\r\n   13|       |enum Uncovered {\r\n   14|       |    Variant1,\r\n   15|       |    Variant2,\r\n   16|       |}\r\n   17|       |enum PartiallyCovered {\r\n   18|       |    Variant1,\r\n   19|       |    Variant2,\r\n   20|       |}\r\n   21|       |\r\n   22|      2|fn fn_covered_enum(input: Covered) {\r\n   23|      2|    match input {\r\n   24|      2|        Covered::Variant1 => { println!(\"Variant1\"); }\r\n                                           ^1\r\n   25|      1|        Covered::Variant2 => { println!(\"Variant2\"); }\r\n   26|       |    }\r\n   27|      2|}\r\n   28|       |\r\n   29|      0|fn fn_uncovered_enum(input: Uncovered) {\r\n   30|      0|    match input {\r\n   31|      0|        Uncovered::Variant1 => { println!(\"Variant1\"); }\r\n   32|      0|        Uncovered::Variant2 => { println!(\"Variant2\"); }\r\n   33|       |    }\r\n   34|      0|}\r\n   35|       |\r\n   36|      1|fn fn_partially_covered_enum(input: PartiallyCovered) {\r\n   37|      1|    match input {\r\n   38|      1|        PartiallyCovered::Variant1 => { println!(\"Variant1\"); }\r\n   39|      0|        PartiallyCovered::Variant2 => { println!(\"Variant2\"); }\r\n   40|       |    }\r\n   41|      1|}\r\n   42|       |\r\n   43|       |trait ATrait {\r\n   44|       |    fn covered(&self);\r\n   45|       |    fn uncovered(&self);\r\n   46|       |    fn func_covered();    \r\n   47|       |    fn func_uncovered();\r\n   48|       |\r\n   49|      2|    fn default_covered(&self) {\r\n   50|      2|        println!(\"default_covered\");\r\n   51|      2|    }\r\n  ------------------\r\n  | <codecovsample::ATraitImplDirect as codecovsample::ATrait>::default_covered:\r\n  |   49|      1|    fn default_covered(&self) {\r\n  |   50|      1|        println!(\"default_covered\");\r\n  |   51|      1|    }\r\n  ------------------\r\n  | <codecovsample::ATraitImplGeneric as codecovsample::ATrait>::default_covered:\r\n  |   49|      1|    fn default_covered(&self) {\r\n  |   50|      1|        println!(\"default_covered\");\r\n  |   51|      1|    }\r\n  ------------------\r\n   52|       |    \r\n   53|      0|    fn default_uncovered(&self) {\r\n   54|      0|        println!(\"default_uncovered\");\r\n   55|      0|    }\r\n   56|       |}\r\n   57|       |trait BTrait {\r\n   58|       |    fn covered(&self);\r\n   59|       |    fn uncovered(&self);\r\n   60|       |\r\n   61|      1|    fn default_covered(&self) {\r\n   62|      1|        println!(\"default_covered\");\r\n   63|      1|    }\r\n   64|       |    \r\n   65|       |    fn default_uncovered(&self) {\r\n   66|       |        println!(\"default_uncovered\");\r\n   67|       |    }\r\n   68|       |}\r\n   69|       |\r\n   70|       |struct ATraitImplDirect;\r\n   71|       |\r\n   72|       |impl ATrait for ATraitImplDirect {\r\n   73|      1|    fn covered(&self) {\r\n   74|      1|        println!(\"covered\")\r\n   75|      1|    }\r\n   76|       |\r\n   77|      0|    fn uncovered(&self) {\r\n   78|      0|        println!(\"uncovered\");\r\n   79|      0|    }\r\n   80|       |\r\n   81|      1|    fn func_covered() {\r\n   82|      1|        println!(\"func_covered\");\r\n   83|      1|    }\r\n   84|       |\r\n   85|      0|    fn func_uncovered() {\r\n   86|      0|        println!(\"func_covered\");\r\n   87|      0|    }\r\n   88|       |}\r\n   89|       |\r\n   90|       |struct ATraitImplGeneric;\r\n   91|       |\r\n   92|       |impl ATrait for ATraitImplGeneric {\r\n   93|      1|    fn covered(&self) {\r\n   94|      1|        println!(\"covered\")\r\n   95|      1|    }\r\n   96|       |\r\n   97|      0|    fn uncovered(&self) {\r\n   98|      0|        println!(\"uncovered\");\r\n   99|      0|    }\r\n  100|       |\r\n  101|      1|    fn func_covered() {\r\n  102|      1|        println!(\"func_covered\");\r\n  103|      1|    }\r\n  104|       |\r\n  105|      0|    fn func_uncovered() {\r\n  106|      0|        println!(\"func_covered\");\r\n  107|      0|    }\r\n  108|       |}\r\n  109|       |struct BTraitImplBoxed;\r\n  110|       |\r\n  111|       |impl BTrait for BTraitImplBoxed {\r\n  112|      1|    fn covered(&self) {\r\n  113|      1|        println!(\"covered\")\r\n  114|      1|    }\r\n  115|       |\r\n  116|       |    fn uncovered(&self) {\r\n  117|       |        println!(\"uncovered\");\r\n  118|       |    }\r\n  119|       |}\r\n  120|       |\r\n  121|       |macro_rules! simple_rule {\r\n  122|       |    () => {\r\n  123|       |        println!(\"simple rule\");\r\n  124|       |    };\r\n  125|       |}\r\n  126|       |\r\n  127|      1|fn call_simple_rule() {\r\n  128|      1|    simple_rule!();\r\n  129|      1|}\r\n  130|       |\r\n  131|      1|fn call_generic_atrait<T: ATrait>(input: T) {\r\n  132|      1|    input.covered();\r\n  133|      1|    input.default_covered();\r\n  134|      1|    T::func_covered();\r\n  135|      1|}\r\n  136|       |\r\n  137|      1|async fn async_func() {\r\n  138|       |    println!(\"async_func\");\r\n  139|       |}\r\n  140|       |\r\n  141|      1|async fn async_func_anon() {\r\n  142|      1|    let x = async {\r\n  143|      1|        println!(\"async_func\");\r\n  144|      1|    };\r\n  145|      1|    x.await;\r\n  146|      1|}\r\n  147|       |\r\n  148|       |#[async_trait]\r\n  149|       |trait AsyncTrait {\r\n  150|       |    async fn covered(&self);\r\n  151|       |    async fn uncovered(&self);\r\n  152|       |}\r\n  153|       |\r\n  154|       |struct AsyncTraitImpl;\r\n  155|       |\r\n  156|       |#[async_trait]\r\n  157|       |impl AsyncTrait for AsyncTraitImpl {\r\n  158|      1|    async fn covered(&self) {\r\n  159|      1|        println!(\"covered\");\r\n  160|      1|        async_func_from_trait_covered().await;\r\n  161|      1|    }\r\n  162|       |\r\n  163|       |    async fn uncovered(&self) {\r\n  164|       |        println!(\"uncovered\");\r\n  165|       |    }\r\n  166|       |}\r\n  167|       |\r\n  168|      1|async fn async_func_from_trait_covered() {\r\n  169|       |    println!(\"covered async func from trait\");\r\n  170|       |}\r\n  171|       |\r\n  172|       |#[cfg(test)]\r\n  173|       |mod tests {\r\n  174|       |    use futures::executor::block_on;\r\n  175|       |\r\n  176|       |    use super::*;\r\n  177|       |\r\n  178|       |    #[test]\r\n  179|      1|    fn test_main() {\r\n  ------------------\r\n  | codecovsample::tests::test_main::{closure#0}:\r\n  |  179|      1|    fn test_main() {\r\n  ------------------\r\n  180|      1|        main();\r\n  181|      1|    }\r\n  ------------------\r\n  | codecovsample::tests::test_main:\r\n  |  179|      1|    fn test_main() {\r\n  |  180|      1|        main();\r\n  |  181|      1|    }\r\n  ------------------\r\n  182|       |\r\n  183|       |    #[test]\r\n  184|      1|    fn cover_enum() {\r\n  ------------------\r\n  | codecovsample::tests::cover_enum::{closure#0}:\r\n  |  184|      1|    fn cover_enum() {\r\n  ------------------\r\n  185|      1|        fn_covered_enum(Covered::Variant1);\r\n  186|      1|        fn_covered_enum(Covered::Variant2);\r\n  187|      1|    }\r\n  ------------------\r\n  | codecovsample::tests::cover_enum:\r\n  |  184|      1|    fn cover_enum() {\r\n  |  185|      1|        fn_covered_enum(Covered::Variant1);\r\n  |  186|      1|        fn_covered_enum(Covered::Variant2);\r\n  |  187|      1|    }\r\n  ------------------\r\n  188|       |\r\n  189|       |    #[test]\r\n  190|      1|    fn partially_cover_enum() {\r\n  ------------------\r\n  | codecovsample::tests::partially_cover_enum::{closure#0}:\r\n  |  190|      1|    fn partially_cover_enum() {\r\n  ------------------\r\n  191|      1|        fn_partially_covered_enum(PartiallyCovered::Variant1);\r\n  192|      1|    }\r\n  ------------------\r\n  | codecovsample::tests::partially_cover_enum:\r\n  |  190|      1|    fn partially_cover_enum() {\r\n  |  191|      1|        fn_partially_covered_enum(PartiallyCovered::Variant1);\r\n  |  192|      1|    }\r\n  ------------------\r\n  193|       |\r\n  194|       |    #[test]\r\n  195|      1|    fn cover_atrait_direct() {\r\n  ------------------\r\n  | codecovsample::tests::cover_atrait_direct::{closure#0}:\r\n  |  195|      1|    fn cover_atrait_direct() {\r\n  ------------------\r\n  196|      1|        let x = ATraitImplDirect;\r\n  197|      1|        x.covered();\r\n  198|      1|        x.default_covered();\r\n  199|      1|        <ATraitImplDirect as ATrait>::func_covered();\r\n  200|      1|    }\r\n  ------------------\r\n  | codecovsample::tests::cover_atrait_direct:\r\n  |  195|      1|    fn cover_atrait_direct() {\r\n  |  196|      1|        let x = ATraitImplDirect;\r\n  |  197|      1|        x.covered();\r\n  |  198|      1|        x.default_covered();\r\n  |  199|      1|        <ATraitImplDirect as ATrait>::func_covered();\r\n  |  200|      1|    }\r\n  ------------------\r\n  201|       |    #[test]\r\n  202|      1|    fn cover_atrait_boxed() {\r\n  ------------------\r\n  | codecovsample::tests::cover_atrait_boxed::{closure#0}:\r\n  |  202|      1|    fn cover_atrait_boxed() {\r\n  ------------------\r\n  203|      1|        let x: Box<dyn BTrait> = Box::new(BTraitImplBoxed);\r\n  204|      1|        x.covered();\r\n  205|      1|        x.default_covered();\r\n  206|      1|    }\r\n  ------------------\r\n  | codecovsample::tests::cover_atrait_boxed:\r\n  |  202|      1|    fn cover_atrait_boxed() {\r\n  |  203|      1|        let x: Box<dyn BTrait> = Box::new(BTraitImplBoxed);\r\n  |  204|      1|        x.covered();\r\n  |  205|      1|        x.default_covered();\r\n  |  206|      1|    }\r\n  ------------------\r\n  207|       |\r\n  208|       |    #[test]\r\n  209|      1|    fn cover_simple_rule() {\r\n  ------------------\r\n  | codecovsample::tests::cover_simple_rule::{closure#0}:\r\n  |  209|      1|    fn cover_simple_rule() {\r\n  ------------------\r\n  210|      1|        call_simple_rule();\r\n  211|      1|    }\r\n  ------------------\r\n  | codecovsample::tests::cover_simple_rule:\r\n  |  209|      1|    fn cover_simple_rule() {\r\n  |  210|      1|        call_simple_rule();\r\n  |  211|      1|    }\r\n  ------------------\r\n  212|       |\r\n  213|       |    #[test]\r\n  214|      1|    fn cover_generic_atrait() {\r\n  ------------------\r\n  | codecovsample::tests::cover_generic_atrait::{closure#0}:\r\n  |  214|      1|    fn cover_generic_atrait() {\r\n  ------------------\r\n  215|      1|        let x = ATraitImplGeneric;\r\n  216|      1|        call_generic_atrait(x);\r\n  217|      1|    }\r\n  ------------------\r\n  | codecovsample::tests::cover_generic_atrait:\r\n  |  214|      1|    fn cover_generic_atrait() {\r\n  |  215|      1|        let x = ATraitImplGeneric;\r\n  |  216|      1|        call_generic_atrait(x);\r\n  |  217|      1|    }\r\n  ------------------\r\n  218|       |\r\n  219|       |    #[test]\r\n  220|      1|    fn cover_async_funcs() {\r\n  ------------------\r\n  | codecovsample::tests::cover_async_funcs::{closure#0}:\r\n  |  220|      1|    fn cover_async_funcs() {\r\n  ------------------\r\n  221|      1|        block_on(async {\r\n  222|      1|            async_func().await;\r\n  223|      1|            async_func_anon().await;\r\n  224|      1|        });\r\n  225|      1|    }\r\n  ------------------\r\n  | codecovsample::tests::cover_async_funcs:\r\n  |  220|      1|    fn cover_async_funcs() {\r\n  |  221|      1|        block_on(async {\r\n  |  222|       |            async_func().await;\r\n  |  223|       |            async_func_anon().await;\r\n  |  224|      1|        });\r\n  |  225|      1|    }\r\n  ------------------\r\n  226|       |\r\n  227|       |    #[test]\r\n  228|      1|    fn cover_async_trait() {\r\n  ------------------\r\n  | codecovsample::tests::cover_async_trait::{closure#0}:\r\n  |  228|      1|    fn cover_async_trait() {\r\n  ------------------\r\n  229|      1|        block_on(async {\r\n  230|      1|            let x: Box<dyn AsyncTrait> = Box::new(AsyncTraitImpl);\r\n  231|      1|            x.covered().await;\r\n  232|      1|        });\r\n  233|      1|    }\r\n  ------------------\r\n  | codecovsample::tests::cover_async_trait:\r\n  |  228|      1|    fn cover_async_trait() {\r\n  |  229|      1|        block_on(async {\r\n  |  230|       |            let x: Box<dyn AsyncTrait> = Box::new(AsyncTraitImpl);\r\n  |  231|       |            x.covered().await;\r\n  |  232|      1|        });\r\n  |  233|      1|    }\r\n  ------------------\r\n  234|       |}\r\n\r\n\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.53.0-nightly (07e0e2ec2 2021-03-24)\r\nbinary: rustc\r\ncommit-hash: 07e0e2ec268c140e607e1ac7f49f145612d0f597\r\ncommit-date: 2021-03-24\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.53.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83985/timeline", "performed_via_github_app": null, "state_reason": "completed"}