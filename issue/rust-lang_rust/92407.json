{"url": "https://api.github.com/repos/rust-lang/rust/issues/92407", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92407/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92407/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92407/events", "html_url": "https://github.com/rust-lang/rust/issues/92407", "id": 1090618486, "node_id": "I_kwDOAAsO6M5BAYR2", "number": 92407, "title": "Internal Compiler Error using `Box::new_in` and the `allocator_api` feature", "user": {"login": "Javier-varez", "id": 5116453, "node_id": "MDQ6VXNlcjUxMTY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5116453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Javier-varez", "html_url": "https://github.com/Javier-varez", "followers_url": "https://api.github.com/users/Javier-varez/followers", "following_url": "https://api.github.com/users/Javier-varez/following{/other_user}", "gists_url": "https://api.github.com/users/Javier-varez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Javier-varez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Javier-varez/subscriptions", "organizations_url": "https://api.github.com/users/Javier-varez/orgs", "repos_url": "https://api.github.com/users/Javier-varez/repos", "events_url": "https://api.github.com/users/Javier-varez/events{/privacy}", "received_events_url": "https://api.github.com/users/Javier-varez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-12-29T16:13:06Z", "updated_at": "2022-02-19T12:25:56Z", "closed_at": "2022-02-19T12:25:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\n#![feature(allocator_api)]\r\n\r\nuse std::alloc::{AllocError, Allocator, GlobalAlloc, Layout};\r\nuse std::ptr::NonNull;\r\n\r\nstruct MyAllocator {}\r\n\r\nimpl MyAllocator {\r\n    fn new() -> Self {\r\n        Self {}\r\n    }\r\n}\r\n\r\nunsafe impl GlobalAlloc for MyAllocator {\r\n    unsafe fn alloc(&self, _layout: Layout) -> *mut u8 {\r\n        std::ptr::null_mut()\r\n    }\r\n\r\n    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\r\n}\r\n\r\n#[derive(Clone, Debug)]\r\nstruct RefAlloc<'a, T: GlobalAlloc>(&'a T);\r\n\r\nimpl<'a, T: GlobalAlloc> RefAlloc<'a, T> {\r\n    fn new(inner: &'a T) -> Self {\r\n        Self(inner)\r\n    }\r\n}\r\n\r\nunsafe impl<'a, T: GlobalAlloc> Allocator for RefAlloc<'a, T> {\r\n    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {\r\n        let ptr = unsafe { self.0.alloc(layout) };\r\n\r\n        if ptr.is_null() {\r\n            return Err(AllocError);\r\n        }\r\n\r\n        unsafe {\r\n            Ok(NonNull::new_unchecked(std::slice::from_raw_parts_mut(\r\n                ptr,\r\n                layout.size(),\r\n            )))\r\n        }\r\n    }\r\n\r\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {\r\n        self.0.dealloc(ptr.as_ptr(), layout)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let my_alloc: MyAllocator = MyAllocator::new();\r\n\r\n    // Constructing a box using the RefAlloc causes the compiler to crash\r\n    let a_box = Box::new_in(0, RefAlloc::new(&my_alloc));\r\n\r\n    println!(\"Hello, world! {:?}\", a_box);\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.59.0-nightly (5531927e8 2021-12-16)\r\nbinary: rustc\r\ncommit-hash: 5531927e8af9b99ad923af4c827c91038bca51ee\r\ncommit-date: 2021-12-16\r\nhost: aarch64-apple-darwin\r\nrelease: 1.59.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'assertion failed: i < this.fields.count()', /rustc/5531927e8af9b99ad923af4c827c91038bca51ee/compiler/rustc_middle/src/ty/layout.rs:2311:21\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.59.0-nightly (5531927e8 2021-12-16) running on aarch64-apple-darwin\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C split-debuginfo=unpacked -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0: _rust_begin_unwind\r\n   1: core::panicking::panic_fmt\r\n   2: core::panicking::panic\r\n   3: <&rustc_middle::ty::TyS as rustc_target::abi::TyAbiInterface<rustc_codegen_llvm::context::CodegenCx>>::ty_and_layout_field\r\n   4: <rustc_target::abi::TyAndLayout<&rustc_middle::ty::TyS> as rustc_codegen_llvm::type_of::LayoutLlvmExt>::scalar_pair_element_llvm_type\r\n   5: <rustc_target::abi::TyAndLayout<&rustc_middle::ty::TyS> as rustc_codegen_llvm::type_of::LayoutLlvmExt>::scalar_pair_element_llvm_type\r\n   6: <rustc_target::abi::call::FnAbi<&rustc_middle::ty::TyS> as rustc_codegen_llvm::abi::FnAbiLlvmExt>::llvm_type\r\n   7: <rustc_codegen_llvm::context::CodegenCx as rustc_codegen_ssa::traits::declare::PreDefineMethods>::predefine_fn\r\n   8: rustc_codegen_llvm::base::compile_codegen_unit::module_codegen\r\n   9: <rustc_query_system::dep_graph::graph::DepGraph<rustc_middle::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle::ty::context::TyCtxt, rustc_span::symbol::Symbol, rustc_codegen_ssa::ModuleCodegen<rustc_codegen_llvm::ModuleLlvm>>\r\n  10: rustc_codegen_llvm::base::compile_codegen_unit\r\n  11: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate\r\n  12: <rustc_session::session::Session>::time::<alloc::boxed::Box<dyn core::any::Any>, rustc_interface::passes::start_codegen::{closure#0}>\r\n  13: <rustc_interface::queries::Queries>::ongoing_codegen\r\n  14: <rustc_interface::interface::Compiler>::enter::<rustc_driver::run_compiler::{closure#1}::{closure#2}, core::result::Result<core::option::Option<rustc_interface::queries::Linker>, rustc_errors::ErrorReported>>\r\n  15: rustc_span::with_source_map::<core::result::Result<(), rustc_errors::ErrorReported>, rustc_interface::interface::create_compiler_and_run<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>::{closure#1}>\r\n  16: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorReported>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorReported>>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n### Notes\r\n\r\n - This issue is also reproducible in the [Rust Playground](https://play.rust-lang.org/?version=nightly&mode=release&edition=2021&gist=cbd262574473a3a82fb5ddc3e7a1e296).\r\n\r\n", "closed_by": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92407/timeline", "performed_via_github_app": null, "state_reason": "completed"}