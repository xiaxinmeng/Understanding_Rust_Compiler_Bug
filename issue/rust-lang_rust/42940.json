{"url": "https://api.github.com/repos/rust-lang/rust/issues/42940", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42940/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42940/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42940/events", "html_url": "https://github.com/rust-lang/rust/issues/42940", "id": 238964241, "node_id": "MDU6SXNzdWUyMzg5NjQyNDE=", "number": 42940, "title": "impl-trait return type is bounded by all input type parameters, even when unnecessary", "user": {"login": "Arnavion", "id": 1096010, "node_id": "MDQ6VXNlcjEwOTYwMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1096010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arnavion", "html_url": "https://github.com/Arnavion", "followers_url": "https://api.github.com/users/Arnavion/followers", "following_url": "https://api.github.com/users/Arnavion/following{/other_user}", "gists_url": "https://api.github.com/users/Arnavion/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arnavion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arnavion/subscriptions", "organizations_url": "https://api.github.com/users/Arnavion/orgs", "repos_url": "https://api.github.com/users/Arnavion/repos", "events_url": "https://api.github.com/users/Arnavion/events{/privacy}", "received_events_url": "https://api.github.com/users/Arnavion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3793096324, "node_id": "LA_kwDOAAsO6M7iFg6E", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-async", "name": "WG-async", "color": "c2e0c6", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2017-06-27T19:57:17Z", "updated_at": "2022-03-07T15:25:59Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nrustc 1.20.0-nightly (f590a44ce 2017-06-27)\r\nbinary: rustc\r\ncommit-hash: f590a44ce61888c78b9044817d8b798db5cd2ffd\r\ncommit-date: 2017-06-27\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.20.0-nightly\r\nLLVM version: 4.0\r\n```\r\n\r\n```rust\r\n#![feature(conservative_impl_trait)]\r\n\r\ntrait Future {\r\n}\r\n\r\nimpl<F> Future for Box<F> where F: Future + ?Sized {\r\n}\r\n\r\nstruct SomeFuture<'a>(&'a Client);\r\nimpl<'a> Future for SomeFuture<'a> {\r\n}\r\n\r\nstruct Client;\r\nimpl Client {\r\n\tfn post<'a, B>(&'a self, _body: &B) -> impl Future + 'a /* (1) */ {\r\n\t\tSomeFuture(self)\r\n\t}\r\n}\r\n\r\nfn login<'a>(client: &'a Client, username: &str) -> impl Future + 'a {\r\n\tclient.post(&[username])\r\n}\r\n\r\nfn main() {\r\n\tlet client = Client;\r\n\tlet _f = {\r\n\t\tlet username = \"foo\".to_string();\r\n\t\tlogin(&client, &username)\r\n\t};\r\n}\r\n```\r\n\r\nSince `SomeFuture` borrows `'a Client`, I'd expect `impl Future + 'a` to be the correct return type, but it gives this error:\r\n\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\r\n  --> src\\main.rs:21:16\r\n   |\r\n21 |    client.post(&[username])\r\n   |                  ^^^^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the function body at 20:1...\r\n  --> src\\main.rs:20:1\r\n   |\r\n20 | / fn login<'a>(client: &'a Client, username: &str) -> impl Future + 'a {\r\n21 | |  client.post(&[username])\r\n22 | | }\r\n   | |_^\r\nnote: ...so that expression is assignable (expected &str, found &str)\r\n  --> src\\main.rs:21:16\r\n   |\r\n21 |    client.post(&[username])\r\n   |                  ^^^^^^^^\r\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the function body at 20:1...\r\n  --> src\\main.rs:20:1\r\n   |\r\n20 | / fn login<'a>(client: &'a Client, username: &str) -> impl Future + 'a {\r\n21 | |  client.post(&[username])\r\n22 | | }\r\n   | |_^\r\nnote: ...so that the type `impl Future` will meet its required lifetime bounds\r\n  --> src\\main.rs:20:53\r\n   |\r\n20 | fn login<'a>(client: &'a Client, username: &str) -> impl Future + 'a {\r\n   |                                                     ^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error(s)\r\n```\r\n\r\n- Changing `_body` to have an explicit lifetime like `_body: &'b B` where `'b` is independent of `'a` or where `'a: 'b`  does not change the error. This and the original error make it seem that returning an `impl trait` is somehow causing the `_body` parameter to get the `'a` lifetime, even though it's clearly unused, let alone used in a way that it would require the `'a` lifetime.\r\n\r\n- Changing `(1)` from `impl Future + 'a` to `SomeFuture<'a>` fixes it.\r\n\r\n- Changing `(1)` from `impl Future + 'a` to `Box<Future + 'a>` and returning `Box::new(SomeFuture(self))` fixes it.", "closed_by": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42940/reactions", "total_count": 17, "+1": 17, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42940/timeline", "performed_via_github_app": null, "state_reason": null}