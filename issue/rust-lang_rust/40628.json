{"url": "https://api.github.com/repos/rust-lang/rust/issues/40628", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/40628/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/40628/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/40628/events", "html_url": "https://github.com/rust-lang/rust/issues/40628", "id": 215168677, "node_id": "MDU6SXNzdWUyMTUxNjg2Nzc=", "number": 40628, "title": "`UnwindSafe` is unergonomic", "user": {"login": "dpc", "id": 9209, "node_id": "MDQ6VXNlcjkyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/9209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpc", "html_url": "https://github.com/dpc", "followers_url": "https://api.github.com/users/dpc/followers", "following_url": "https://api.github.com/users/dpc/following{/other_user}", "gists_url": "https://api.github.com/users/dpc/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpc/subscriptions", "organizations_url": "https://api.github.com/users/dpc/orgs", "repos_url": "https://api.github.com/users/dpc/repos", "events_url": "https://api.github.com/users/dpc/events{/privacy}", "received_events_url": "https://api.github.com/users/dpc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2017-03-18T05:38:35Z", "updated_at": "2019-11-04T12:10:13Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As I expressed on IRC, I feel like, unless quickly taken care of, `UnwindSafe` is going to be a \"failed feature\". I've seen now quite a bit of people that told me that \"they just wrap everything in `AssertUnwindSafe`\" defeating the whole purpose of it. I've also seen comments that `UnwindSafe` is a PITA - sentiment that I'm beginning to share. I am tempted to ignore `UnwindSafe` completely as well, even though I'd like to do stuff properly. Please hear me out.\r\n\r\n`UnwindSafe` and `RefUnwindSafe` are not too complicated, but they force people into writing a lot of boilerplate, and the worst part once used ... force that boilerplate on all other users, that might not even know what is it all about.\r\n\r\nStatic dispatch works OK, since similarly to `Send` and `Sync` any `struct` will get `UnwindSafe` and `RefUnwindSafe` if all fields of it satisfy it.\r\n\r\nThe problem is dynamic dispatch, trait object and trait bounds. Any time someone has to use eg. `Box<TraitObject>`, even if it's only due to lack of `impl Trait` on stable, that person most probably should have done `Box<Trait + RefUnwindSafe>`. Otherwise that `Box<Trait>` does not satisfy `SafeUnwind`, even though most probably that would be the intention. After all [\"This trait is namely not implemented by UnsafeCell, the root of all interior mutability\"](https://doc.rust-lang.org/std/panic/trait.RefUnwindSafe.html).\r\n\r\nAnd even if that person is aware of \"unwind safety\", after putting `+RefUnwindSafe` it won't work because:\r\n \r\n    only Send/Sync traits can be used as additional traits in a trait object \r\n\r\nTo get this working a lot of boilerplate needs to be added. [Example in my code](https://github.com/slog-rs/slog/blob/0b4c3f2923c2f35f643f212d0dd8562af8dfd954/src/lib.rs#L1112) which is just a PITA. And the worst part: after putting `UnwindSafe` bound in types used in open-traits (to be implemented by users of a library), now all users have to satisfy that bound. They will have to remember about it, add blanket implementations adding `UnwindSafe` for every type used as trait object, and get libraries they might want to use it, to do the same...\r\n\r\nI don't know. Maybe I'm missing something here, but I feel like at least `+UnwindSafe` should work just like `+Send` and `+Sync`.\r\n\r\nAlso, I think if the default would be different, there would be almost no problem. `Box<Trait>` should mean `Box<Trait + RefUnwindSafe>`, and users should be able to opt-out of it with `Box<Trait + !RefUnwindSafe>`. This way, unaware uses would get their types `UnwindSafe` without knowing it.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/40628/reactions", "total_count": 23, "+1": 23, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/40628/timeline", "performed_via_github_app": null, "state_reason": null}