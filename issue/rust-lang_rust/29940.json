{"url": "https://api.github.com/repos/rust-lang/rust/issues/29940", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29940/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29940/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29940/events", "html_url": "https://github.com/rust-lang/rust/issues/29940", "id": 117918808, "node_id": "MDU6SXNzdWUxMTc5MTg4MDg=", "number": 29940, "title": "Is drop() working correctly in this scenario?", "user": {"login": "sga001", "id": 495660, "node_id": "MDQ6VXNlcjQ5NTY2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/495660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sga001", "html_url": "https://github.com/sga001", "followers_url": "https://api.github.com/users/sga001/followers", "following_url": "https://api.github.com/users/sga001/following{/other_user}", "gists_url": "https://api.github.com/users/sga001/gists{/gist_id}", "starred_url": "https://api.github.com/users/sga001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sga001/subscriptions", "organizations_url": "https://api.github.com/users/sga001/orgs", "repos_url": "https://api.github.com/users/sga001/repos", "events_url": "https://api.github.com/users/sga001/events{/privacy}", "received_events_url": "https://api.github.com/users/sga001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-19T22:06:32Z", "updated_at": "2015-11-19T22:20:58Z", "closed_at": "2015-11-19T22:20:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. I was experimenting with RwLock to see if and how I could upgrade/downgrade a lock. I ended up converging on something similar to the following code: \n\n```\nuse std::sync::RwLock;\n\nstruct Foo {\n    a: Vec<u8>,\n}\n\nfn main() {\n    let lock = RwLock::new(Foo{ a: vec![1, 2, 3] });\n    let mut x = lock.read().unwrap();\n\n    let a_ptr = &x.a;\n\n    if a_ptr.len() > 1 {\n       drop(a_ptr);\n       drop(x);\n       let mut y = lock.write().unwrap();\n       y.a[0] = 3;\n       drop(y);\n       x = lock.read().unwrap();\n   }\n\n   println!(\"{:?}\", x.a);\n}\n```\n\nMy expectation was that drop(a_ptr) would allow me to then call drop(x). This would then release the read lock and the call to lock.write() would not result in deadlock. However, this is not the case. I get the error: \n\n```\nerror: cannot move out of `x` because it is borrowed\n     drop(x);\nnote: borrow of `x` occurs here\n    let a_ptr = &x.a;\n```\n\nAm I misunderstanding how drop works? or is this a bug?\n", "closed_by": {"login": "sga001", "id": 495660, "node_id": "MDQ6VXNlcjQ5NTY2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/495660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sga001", "html_url": "https://github.com/sga001", "followers_url": "https://api.github.com/users/sga001/followers", "following_url": "https://api.github.com/users/sga001/following{/other_user}", "gists_url": "https://api.github.com/users/sga001/gists{/gist_id}", "starred_url": "https://api.github.com/users/sga001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sga001/subscriptions", "organizations_url": "https://api.github.com/users/sga001/orgs", "repos_url": "https://api.github.com/users/sga001/repos", "events_url": "https://api.github.com/users/sga001/events{/privacy}", "received_events_url": "https://api.github.com/users/sga001/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29940/timeline", "performed_via_github_app": null, "state_reason": "completed"}