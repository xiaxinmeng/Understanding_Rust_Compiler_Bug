{"url": "https://api.github.com/repos/rust-lang/rust/issues/106832", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106832/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106832/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106832/events", "html_url": "https://github.com/rust-lang/rust/issues/106832", "id": 1533084990, "node_id": "I_kwDOAAsO6M5bYQU-", "number": 106832, "title": "Impls for GAT-parameterized objects with bounds on specific instantation of GAT type result in incorrect mismatched type errors", "user": {"login": "inanna-malick", "id": 2675660, "node_id": "MDQ6VXNlcjI2NzU2NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2675660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inanna-malick", "html_url": "https://github.com/inanna-malick", "followers_url": "https://api.github.com/users/inanna-malick/followers", "following_url": "https://api.github.com/users/inanna-malick/following{/other_user}", "gists_url": "https://api.github.com/users/inanna-malick/gists{/gist_id}", "starred_url": "https://api.github.com/users/inanna-malick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inanna-malick/subscriptions", "organizations_url": "https://api.github.com/users/inanna-malick/orgs", "repos_url": "https://api.github.com/users/inanna-malick/repos", "events_url": "https://api.github.com/users/inanna-malick/events{/privacy}", "received_events_url": "https://api.github.com/users/inanna-malick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2023-01-14T01:31:29Z", "updated_at": "2023-01-29T22:32:42Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Let me first say thank you for implementing GATs, and also apologize for the heinous haskell-brained madness you see before you. With that out of the way:\r\n\r\nI tried to compile this code (https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=674f6412128946f9ef6abf6ddd15dcf7):\r\n\r\n```rust\r\npub trait Functor {\r\n    type Layer<X>;\r\n}\r\n\r\npub trait FunctorExt: Functor {\r\n    fn expand_and_collapse<In, Out>(\r\n        seed: In,\r\n        expand: impl Fn(In) -> <Self as Functor>::Layer<In>,\r\n        collapse: impl Fn(<Self as Functor>::Layer<Out>) -> Out,\r\n    ) -> Out;\r\n}\r\n\r\nimpl<X> FunctorExt for X\r\nwhere\r\n    X: Functor,\r\n{\r\n    fn expand_and_collapse<In, Out>(\r\n        seed: In,\r\n        expand: impl Fn(In) -> <X as Functor>::Layer<In>,\r\n        collapse: impl Fn(<X as Functor>::Layer<Out>) -> Out,\r\n    ) -> Out {\r\n        todo!()\r\n    }\r\n}\r\n\r\nstruct Repro<F>(std::marker::PhantomData<F>);\r\n\r\nimpl<F: Functor> Repro<F>\r\nwhere\r\n    // The following 'u8' ties the use of F::Layer in the repro fn to 'u8'\r\n    // if this line is commented out, it compiles successfully\r\n    F::Layer<u8>: Clone,\r\n{\r\n    fn repro(x: ()) {\r\n        // there is no reason to expect 'F::Layer<u8>' here\r\n        <F as FunctorExt>::expand_and_collapse(x, |x| todo!(), |_x| ());\r\n    }\r\n\r\n    // it works if you provide type annotation, although I do have a much more complex case\r\n    // that I wasn't able to minimize where even type annotations don't fix the problem\r\n    fn works(x: ()) {\r\n        <F as FunctorExt>::expand_and_collapse(\r\n            x,\r\n            |x: ()| -> F::Layer<()> { todo!() },\r\n            |_x: F::Layer<()>| -> () { () },\r\n        );\r\n    }\r\n}\r\n\r\n```\r\n\r\nI expected it to compile. \r\n\r\nInstead, it failed with \r\n```\r\nerror[[E0308]](https://doc.rust-lang.org/stable/error-index.html#E0308): mismatched types\r\n  --> src/lib.rs:37:69\r\n   |\r\n37 |         <F as FunctorExt>::expand_and_collapse(x, |x| todo!(), |_x| ());\r\n   |                                                                     ^^ expected `u8`, found `()`\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nNote: the `F::Layer<u8>: Clone` bound is not used anywhere in this code, and if that line is commented out, this code compiles.\r\n\r\n### Meta\r\n\r\nThe bug occurs in stable and nightly on play.rust-lang.org:\r\n1.66.1\r\n1.68.0-nightly\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=674f6412128946f9ef6abf6ddd15dcf7\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106832/timeline", "performed_via_github_app": null, "state_reason": null}