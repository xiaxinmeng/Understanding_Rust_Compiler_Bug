{"url": "https://api.github.com/repos/rust-lang/rust/issues/38586", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38586/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38586/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38586/events", "html_url": "https://github.com/rust-lang/rust/issues/38586", "id": 197445960, "node_id": "MDU6SXNzdWUxOTc0NDU5NjA=", "number": 38586, "title": "proc macro 1.1 error messages spew massive amounts of junk", "user": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2016-12-24T03:28:39Z", "updated_at": "2017-01-06T21:23:32Z", "closed_at": "2017-01-06T21:23:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is an example of an error message I got with serde and serde_derive 0.8.20 on a recent nightly. As pasted here it doesn't look horrific, but it consists of massive lines of garbage and whitespace that _wordwrap_ on the console to create a nonsense maelstrom.\r\n\r\nEven if we accept that the error messages must be bad, I think we can do considerably better than this. This is scheduled to be stable with 1.15 in feb. Can we fix this up before?\r\n\r\ncc @nrc @jonathandturner \r\n\r\n\r\n```\r\n$ cargo run -- create-local-job run-tc stable\r\n   Compiling cargobomb v0.1.0 (file:///home/ec2-user/cargobomb)\r\nerror[E0432]: unresolved import `serde::Serealize`\r\n  --> src/model.rs:17:13\r\n   |\r\n17 | use serde::{Serealize, Deserialize};\r\n   |             ^^^^^^^^^ no `Serealize` in the root. Did you mean to use `Serialize`?\r\n\r\nerror[E0277]: the trait bound `docker::Container: serde::Serialize` is not satisfied\r\n --> <proc-macro source code>:1:506\r\n  |\r\n1 | # [ allow ( non_upper_case_globals , unused_attributes , unused_qualifications ) ] const _IMPL_SERIALIZE_FOR_DockerJob : ( ) = { extern crate serde as _serde ; # [ automatically_derived ] impl _serde :: ser :: Serialize for DockerJob { fn serialize < __S > ( & self , _serializer : & mut __S ) -> :: std :: result :: Result < ( ) , __S :: Error > where __S : _serde :: ser :: Serializer { let mut __serde_state = try ! ( _serializer . serialize_struct ( \"DockerJob\" , 0 + 1 + 1 ) ) ; try ! ( _serializer . serialize_struct_elt ( & mut __serde_state , \"id\" , & self . id ) ) ; try ! ( _serializer . serialize_struct_elt ( & mut __serde_state , \"state\" , & self . state ) ) ; _serializer . serialize_struct_end ( __serde_state ) } } } ;\r\n  |the trait `serde::Serialize` is not implemented for `docker::Container`\r\n  |\r\n  = note: required because of the requirements on the impl of `serde::Serialize` for `&docker::Container`\r\n\r\nerror[E0277]: the trait bound `docker::Container: serde::Deserialize` is not satisfied\r\n --> <proc-macro source code>:1:1964\r\n  |\r\n1 | # [ allow ( non_upper_case_globals , unused_attributes , unused_qualifications ) ] const _IMPL_DESERIALIZE_FOR_DockerJob : ( ) = { extern crate serde as _serde ; # [ automatically_derived ] impl _serde :: de :: Deserialize for DockerJob { fn deserialize < __D > ( deserializer : & mut __D ) -> :: std :: result :: Result < DockerJob , __D :: Error > where __D : _serde :: de :: Deserializer { # [ allow ( non_camel_case_types ) ] enum __Field { __field0 , __field1 , __ignore , } impl _serde :: de :: Deserialize for __Field { # [ inline ] fn deserialize < __D > ( deserializer : & mut __D ) -> :: std :: result :: Result < __Field , __D :: Error > where __D : _serde :: de :: Deserializer , { struct __FieldVisitor ; impl _serde :: de :: Visitor for __FieldVisitor { type Value = __Field ; fn visit_usize < __E > ( & mut self , value : usize ) -> :: std :: result :: Result < __Field , __E > where __E : _serde :: de :: Error { match value { 0usize => { Ok ( __Field :: __field0 ) } 1usize => { Ok ( __Field :: __field1 ) } _ => Ok ( __Field :: __ignore ) } } fn visit_str < __E > ( & mut self , value : & str ) -> :: std :: result :: Result < __Field , __E > where __E : _serde :: de :: Error { match value { \"id\" => { Ok ( __Field :: __field0 ) } \"state\" => { Ok ( __Field :: __field1 ) } _ => Ok ( __Field :: __ignore ) } } fn visit_bytes < __E > ( & mut self , value : & [ u8 ] ) -> :: std :: result :: Result < __Field , __E > where __E : _serde :: de :: Error { match value { b\"id\" => { Ok ( __Field :: __field0 ) } b\"state\" => { Ok ( __Field :: __field1 ) } _ => Ok ( __Field :: __ignore ) } } } deserializer . deserialize_struct_field ( __FieldVisitor ) } } struct __Visitor ; impl _serde :: de :: Visitor for __Visitor { type Value = DockerJob ; # [ inline ] fn visit_seq < __V > ( & mut self , mut visitor : __V ) -> :: std :: result :: Result < DockerJob , __V :: Error > where __V : _serde :: de :: SeqVisitor { let __field0 = match try ! ( visitor . visit :: < Container > ( ) ) { Some ( value ) => { value } , None => { try ! ( visitor . end ( ) ) ; return Err ( _serde :: de :: Error :: invalid_length ( 0usize ) ) ; } } ; let __field1 = match try ! ( visitor . visit :: < JobState > ( ) ) { Some ( value ) => { value } , None => { try ! ( visitor . end ( ) ) ; return Err ( _serde :: de :: Error :: invalid_length ( 1usize ) ) ; } } ; try ! ( visitor . end ( ) ) ; Ok ( DockerJob { id : __field0 , state : __field1 } ) } # [ inline ] fn visit_map < __V > ( & mut self , mut visitor : __V ) -> :: std :: result :: Result < DockerJob , __V :: Error > where __V : _serde :: de :: MapVisitor { let mut __field0 : Option < Container > = None ; let mut __field1 : Option < JobState > = None ; while let Some ( key ) = try ! ( visitor . visit_key :: < __Field > ( ) ) { match key { __Field :: __field0 => { if __field0 . is_some ( ) { return Err ( < __V :: Error as _serde :: de :: Error > :: duplicate_field ( \"id\" ) ) ; } __field0 = Some ( try ! ( visitor . visit_value :: < Container > ( ) ) ) ; } __Field :: __field1 => { if __field1 . is_some ( ) { return Err ( < __V :: Error as _serde :: de :: Error > :: duplicate_field ( \"state\" ) ) ; } __field1 = Some ( try ! ( visitor . visit_value :: < JobState > ( ) ) ) ; } _ => { let _ = try ! ( visitor . visit_value :: < _serde :: de :: impls :: IgnoredAny > ( ) ) ; } } } try ! ( visitor . end ( ) ) ; let __field0 = match __field0 { Some ( __field0 ) => __field0 , None => try ! ( visitor . missing_field ( \"id\" ) ) } ; let __field1 = match __field1 { Some ( __field1 ) => __field1 , None => try ! ( visitor . missing_field ( \"state\" ) ) } ; Ok ( DockerJob { id : __field0 , state : __field1 } ) } } const FIELDS : & 'static [ & 'static str ] = & [ \"id\" , \"state\" ] ; deserializer . deserialize_struct ( \"DockerJob\" , FIELDS , __Visitor ) } } } ;\r\n  |the trait `serde::Deserialize` is not implemented for `docker::Container`\r\n\r\nerror[E0277]: the trait bound `docker::Container: serde::Deserialize` is not satisfied\r\n --> <proc-macro source code>:1:2970\r\n  |\r\n1 | # [ allow ( non_upper_case_globals , unused_attributes , unused_qualifications ) ] const _IMPL_DESERIALIZE_FOR_DockerJob : ( ) = { extern crate serde as _serde ; # [ automatically_derived ] impl _serde :: de :: Deserialize for DockerJob { fn deserialize < __D > ( deserializer : & mut __D ) -> :: std :: result :: Result < DockerJob , __D :: Error > where __D : _serde :: de :: Deserializer { # [ allow ( non_camel_case_types ) ] enum __Field { __field0 , __field1 , __ignore , } impl _serde :: de :: Deserialize for __Field { # [ inline ] fn deserialize < __D > ( deserializer : & mut __D ) -> :: std :: result :: Result < __Field , __D :: Error > where __D : _serde :: de :: Deserializer , { struct __FieldVisitor ; impl _serde :: de :: Visitor for __FieldVisitor { type Value = __Field ; fn visit_usize < __E > ( & mut self , value : usize ) -> :: std :: result :: Result < __Field , __E > where __E : _serde :: de :: Error { match value { 0usize => { Ok ( __Field :: __field0 ) } 1usize => { Ok ( __Field :: __field1 ) } _ => Ok ( __Field :: __ignore ) } } fn visit_str < __E > ( & mut self , value : & str ) -> :: std :: result :: Result < __Field , __E > where __E : _serde :: de :: Error { match value { \"id\" => { Ok ( __Field :: __field0 ) } \"state\" => { Ok ( __Field :: __field1 ) } _ => Ok ( __Field :: __ignore ) } } fn visit_bytes < __E > ( & mut self , value : & [ u8 ] ) -> :: std :: result :: Result < __Field , __E > where __E : _serde :: de :: Error { match value { b\"id\" => { Ok ( __Field :: __field0 ) } b\"state\" => { Ok ( __Field :: __field1 ) } _ => Ok ( __Field :: __ignore ) } } } deserializer . deserialize_struct_field ( __FieldVisitor ) } } struct __Visitor ; impl _serde :: de :: Visitor for __Visitor { type Value = DockerJob ; # [ inline ] fn visit_seq < __V > ( & mut self , mut visitor : __V ) -> :: std :: result :: Result < DockerJob , __V :: Error > where __V : _serde :: de :: SeqVisitor { let __field0 = match try ! ( visitor . visit :: < Container > ( ) ) { Some ( value ) => { value } , None => { try ! ( visitor . end ( ) ) ; return Err ( _serde :: de :: Error :: invalid_length ( 0usize ) ) ; } } ; let __field1 = match try ! ( visitor . visit :: < JobState > ( ) ) { Some ( value ) => { value } , None => { try ! ( visitor . end ( ) ) ; return Err ( _serde :: de :: Error :: invalid_length ( 1usize ) ) ; } } ; try ! ( visitor . end ( ) ) ; Ok ( DockerJob { id : __field0 , state : __field1 } ) } # [ inline ] fn visit_map < __V > ( & mut self , mut visitor : __V ) -> :: std :: result :: Result < DockerJob , __V :: Error > where __V : _serde :: de :: MapVisitor { let mut __field0 : Option < Container > = None ; let mut __field1 : Option < JobState > = None ; while let Some ( key ) = try ! ( visitor . visit_key :: < __Field > ( ) ) { match key { __Field :: __field0 => { if __field0 . is_some ( ) { return Err ( < __V :: Error as _serde :: de :: Error > :: duplicate_field ( \"id\" ) ) ; } __field0 = Some ( try ! ( visitor . visit_value :: < Container > ( ) ) ) ; } __Field :: __field1 => { if __field1 . is_some ( ) { return Err ( < __V :: Error as _serde :: de :: Error > :: duplicate_field ( \"state\" ) ) ; } __field1 = Some ( try ! ( visitor . visit_value :: < JobState > ( ) ) ) ; } _ => { let _ = try ! ( visitor . visit_value :: < _serde :: de :: impls :: IgnoredAny > ( ) ) ; } } } try ! ( visitor . end ( ) ) ; let __field0 = match __field0 { Some ( __field0 ) => __field0 , None => try ! ( visitor . missing_field ( \"id\" ) ) } ; let __field1 = match __field1 { Some ( __field1 ) => __field1 , None => try ! ( visitor . missing_field ( \"state\" ) ) } ; Ok ( DockerJob { id : __field0 , state : __field1 } ) } } const FIELDS : & 'static [ & 'static str ] = & [ \"id\" , \"state\" ] ; deserializer . deserialize_struct ( \"DockerJob\" , FIELDS , __Visitor ) } } } ;\r\n  |the trait `serde::Deserialize` is not implemented for `docker::Container`\r\n\r\nerror[E0277]: the trait bound `docker::Container: serde::Deserialize` is not satisfied\r\n --> <proc-macro source code>:1:3454\r\n  |\r\n1 | # [ allow ( non_upper_case_globals , unused_attributes , unused_qualifications ) ] const _IMPL_DESERIALIZE_FOR_DockerJob : ( ) = { extern crate serde as _serde ; # [ automatically_derived ] impl _serde :: de :: Deserialize for DockerJob { fn deserialize < __D > ( deserializer : & mut __D ) -> :: std :: result :: Result < DockerJob , __D :: Error > where __D : _serde :: de :: Deserializer { # [ allow ( non_camel_case_types ) ] enum __Field { __field0 , __field1 , __ignore , } impl _serde :: de :: Deserialize for __Field { # [ inline ] fn deserialize < __D > ( deserializer : & mut __D ) -> :: std :: result :: Result < __Field , __D :: Error > where __D : _serde :: de :: Deserializer , { struct __FieldVisitor ; impl _serde :: de :: Visitor for __FieldVisitor { type Value = __Field ; fn visit_usize < __E > ( & mut self , value : usize ) -> :: std :: result :: Result < __Field , __E > where __E : _serde :: de :: Error { match value { 0usize => { Ok ( __Field :: __field0 ) } 1usize => { Ok ( __Field :: __field1 ) } _ => Ok ( __Field :: __ignore ) } } fn visit_str < __E > ( & mut self , value : & str ) -> :: std :: result :: Result < __Field , __E > where __E : _serde :: de :: Error { match value { \"id\" => { Ok ( __Field :: __field0 ) } \"state\" => { Ok ( __Field :: __field1 ) } _ => Ok ( __Field :: __ignore ) } } fn visit_bytes < __E > ( & mut self , value : & [ u8 ] ) -> :: std :: result :: Result < __Field , __E > where __E : _serde :: de :: Error { match value { b\"id\" => { Ok ( __Field :: __field0 ) } b\"state\" => { Ok ( __Field :: __field1 ) } _ => Ok ( __Field :: __ignore ) } } } deserializer . deserialize_struct_field ( __FieldVisitor ) } } struct __Visitor ; impl _serde :: de :: Visitor for __Visitor { type Value = DockerJob ; # [ inline ] fn visit_seq < __V > ( & mut self , mut visitor : __V ) -> :: std :: result :: Result < DockerJob , __V :: Error > where __V : _serde :: de :: SeqVisitor { let __field0 = match try ! ( visitor . visit :: < Container > ( ) ) { Some ( value ) => { value } , None => { try ! ( visitor . end ( ) ) ; return Err ( _serde :: de :: Error :: invalid_length ( 0usize ) ) ; } } ; let __field1 = match try ! ( visitor . visit :: < JobState > ( ) ) { Some ( value ) => { value } , None => { try ! ( visitor . end ( ) ) ; return Err ( _serde :: de :: Error :: invalid_length ( 1usize ) ) ; } } ; try ! ( visitor . end ( ) ) ; Ok ( DockerJob { id : __field0 , state : __field1 } ) } # [ inline ] fn visit_map < __V > ( & mut self , mut visitor : __V ) -> :: std :: result :: Result < DockerJob , __V :: Error > where __V : _serde :: de :: MapVisitor { let mut __field0 : Option < Container > = None ; let mut __field1 : Option < JobState > = None ; while let Some ( key ) = try ! ( visitor . visit_key :: < __Field > ( ) ) { match key { __Field :: __field0 => { if __field0 . is_some ( ) { return Err ( < __V :: Error as _serde :: de :: Error > :: duplicate_field ( \"id\" ) ) ; } __field0 = Some ( try ! ( visitor . visit_value :: < Container > ( ) ) ) ; } __Field :: __field1 => { if __field1 . is_some ( ) { return Err ( < __V :: Error as _serde :: de :: Error > :: duplicate_field ( \"state\" ) ) ; } __field1 = Some ( try ! ( visitor . visit_value :: < JobState > ( ) ) ) ; } _ => { let _ = try ! ( visitor . visit_value :: < _serde :: de :: impls :: IgnoredAny > ( ) ) ; } } } try ! ( visitor . end ( ) ) ; let __field0 = match __field0 { Some ( __field0 ) => __field0 , None => try ! ( visitor . missing_field ( \"id\" ) ) } ; let __field1 = match __field1 { Some ( __field1 ) => __field1 , None => try ! ( visitor . missing_field ( \"state\" ) ) } ; Ok ( DockerJob { id : __field0 , state : __field1 } ) } } const FIELDS : & 'static [ & 'static str ] = & [ \"id\" , \"state\" ] ; deserializer . deserialize_struct ( \"DockerJob\" , FIELDS , __Visitor ) } } } ;\r\n  |the trait `serde::Deserialize` is not implemented for `docker::Container`\r\n\r\nerror: aborting due to 4 previous errors\r\n\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38586/timeline", "performed_via_github_app": null, "state_reason": "completed"}