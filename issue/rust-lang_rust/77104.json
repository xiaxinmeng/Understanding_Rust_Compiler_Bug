{"url": "https://api.github.com/repos/rust-lang/rust/issues/77104", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77104/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77104/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77104/events", "html_url": "https://github.com/rust-lang/rust/issues/77104", "id": 707366124, "node_id": "MDU6SXNzdWU3MDczNjYxMjQ=", "number": 77104, "title": "Inlining of `let` should preserve borrowing soundness on \"pure\" left arguments", "user": {"login": "jeapostrophe", "id": 232698, "node_id": "MDQ6VXNlcjIzMjY5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/232698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeapostrophe", "html_url": "https://github.com/jeapostrophe", "followers_url": "https://api.github.com/users/jeapostrophe/followers", "following_url": "https://api.github.com/users/jeapostrophe/following{/other_user}", "gists_url": "https://api.github.com/users/jeapostrophe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeapostrophe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeapostrophe/subscriptions", "organizations_url": "https://api.github.com/users/jeapostrophe/orgs", "repos_url": "https://api.github.com/users/jeapostrophe/repos", "events_url": "https://api.github.com/users/jeapostrophe/events{/privacy}", "received_events_url": "https://api.github.com/users/jeapostrophe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-09-23T13:26:53Z", "updated_at": "2020-09-23T22:49:41Z", "closed_at": "2020-09-23T14:14:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the context of this code:\r\n\r\n```rust\r\nstruct Obj {\r\n    o: i32\r\n}\r\n\r\nfn make() -> Obj {\r\n    Obj { o: 42 }\r\n}\r\n\r\nimpl Obj {\r\nfn touch(self: &mut Obj, amt: i32) -> i32 {\r\n    self.o = self.o + amt;\r\n    return self.o;\r\n}\r\n}\r\n```\r\n\r\nI expect this code:\r\n\r\n```rust\r\nfn main() {\r\n    let mut t = make();\r\n    let x1 = t.touch(t.touch(6));\r\n    println!(\"{:?}\", x1);\r\n}\r\n```\r\n\r\nTo run the same as this code:\r\n\r\n```rust\r\nfn main() {\r\n    let mut t = make();\r\n    let x0 = t.touch(6);\r\n    let x1 = t.touch(x0);\r\n    println!(\"{:?}\", x1);\r\n}\r\n```\r\n\r\nBecause the first is the inlined version of the second.\r\n\r\nInstead, I get this error:\r\n\r\n```\r\n24 |     let x1 = t.touch(t.touch(6));                     \r\n   |              - ----- ^ second mutable borrow occurs here                                                         \r\n   |              | |                                      \r\n   |              | first borrow later used by call        \r\n   |              first mutable borrow occurs here \r\n```\r\n\r\nI expect that programming languages should be invariant to the inlining of variables that occur only a single time and preserve the order of effects.\r\n\r\nI asked about this on the [forum](https://users.rust-lang.org/t/eta-expansion-or-what-does-rust-think-it-is-protecting-me-from/49151/2) and they told me that the expansion of my \"inlined\" version is actually:\r\n\r\n```rust\r\nlet self0 = &mut t;\r\nlet x0 = {\r\n    let self1  = &mut t;\r\n    let x1 = 6;\r\n    Obj::touch(self1, x1)\r\n};\r\nlet x1 = Obj::touch(self0, x0);\r\n```\r\n\r\nBecause you need to evaluate `t`, then you need to evaluate `t.touch(6)`, then you can call `touch` again. The issue being that evaluating `t` as an argument to `Obj::touch` has an effect of borrowing `t`. I think that the Rust compiler should have a case for situations like this to allow my original program. I don't know anything about the internals of the Rust compiler, but perhaps the special situation is when earlier arguments are pure, except for borrowing, then they can be evaluated after. In other words, the expansion could be\r\n\r\n```rust\r\nlet x0 = {\r\n    let self1  = &mut t;\r\n    let x1 = 6;\r\n    Obj::touch(self1, x1)\r\n};\r\nlet self0 = &mut t;  // <--- pure but for borrowing\r\nlet x1 = Obj::touch(self0, x0);\r\n```\r\n\r\nThank you!\r\n\r\nJay\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.46.0 (04488afe3 2020-08-24)\r\nbinary: rustc\r\ncommit-hash: 04488afe34512aa4c33566eb16d8c912a3ae04f9\r\ncommit-date: 2020-08-24\r\nhost: x86_64-apple-darwin\r\nrelease: 1.46.0\r\nLLVM version: 10.0\r\n```", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77104/timeline", "performed_via_github_app": null, "state_reason": "completed"}