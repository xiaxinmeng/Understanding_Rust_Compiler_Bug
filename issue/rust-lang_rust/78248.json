{"url": "https://api.github.com/repos/rust-lang/rust/issues/78248", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78248/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78248/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78248/events", "html_url": "https://github.com/rust-lang/rust/issues/78248", "id": 727700204, "node_id": "MDU6SXNzdWU3Mjc3MDAyMDQ=", "number": 78248, "title": "permit coercion in type ascription", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 800802916, "node_id": "MDU6TGFiZWw4MDA4MDI5MTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-coercions", "name": "A-coercions", "color": "f7e101", "default": false, "description": "Area: implicit and explicit `expr as Type` coercions"}], "state": "open", "locked": false, "assignee": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-10-22T20:30:01Z", "updated_at": "2020-11-25T21:30:11Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The current implementation of type ascription always equates the type of the expression with the required type (so `e: T` would force `e` to have type `T`). But the original plan was that type ascription would also permit *coercions*, so that one could do e.g. `return x: &dyn Foo` and coerce `x` to the type `dyn Foo` explicitly.\r\n\r\nThe challenge is that we can't *always* permit coercions because that would be unsound. In particular it would cause problems in contexts where references are being created, such as `&mut (x: T)`. This is because the reference that results would actually reference `x`, since `x: T` is defined to be a \"place expression\" just like `x` is. The problem then is that if the type of `x` and the type `T` are not the same, this permits unsoundness:\r\n\r\n```rust\r\nlet mut x: &'static u32 = &22;\r\nlet y = 44;\r\nlet p = &mut (x:&T); // here we coerce to a shorter lifetime\r\n*p = &y;\r\n```\r\n\r\nThe fix proposed in the original RFC was to force coercion to do type equality in *reference contexts*. But https://github.com/rust-lang/rfcs/pull/2623 proposed a simpler formulation. The idea is this: we already have a notion of *coercion contexts* where coercion can occur. If we are typing the expression E in a coercion context, and E is an ascription expression `E1: T`, then we coerce the type of `E1` to `T`. \r\n\r\nTo implement this, I think the idea would be to intercept the function `check_expr_coercable_to_type` and look to see if the expression is an ascription expression. If so, we would recursively invoke `check_expr_coercable_to_type` on the inner expression. This might be kind of a pain in terms of duplicating code, though, so it might be better to thread the info down to `check_expr_with_expectation` or something like that (maybe add a new kind of `Expectation`).\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"b-naber\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78248/timeline", "performed_via_github_app": null, "state_reason": null}