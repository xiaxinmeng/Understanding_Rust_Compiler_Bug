{"url": "https://api.github.com/repos/rust-lang/rust/issues/107107", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107107/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107107/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107107/events", "html_url": "https://github.com/rust-lang/rust/issues/107107", "id": 1550380316, "node_id": "I_kwDOAAsO6M5caO0c", "number": 107107, "title": "Improve diagnostics when invariance is the root cause", "user": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-01-20T06:45:01Z", "updated_at": "2023-01-20T06:45:01Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Code\n\n```Rust\nuse std::cell::RefCell;\r\n\r\nstruct Inner<'i>(&'i ());\r\n\r\nstruct Outer<'i> {\r\n    inner: RefCell<Inner<'i>>,\r\n}\r\n\r\nimpl Drop for Outer<'_> {\r\n    fn drop(&mut self) {}\r\n}\r\n\r\nstruct Holder<'o> {\r\n    outer: &'o Outer<'o>,\r\n}\r\n\r\nimpl<'o> Holder<'o> {\r\n    /*\r\n    fn new<'i: 'o>(outer: &'o Outer<'i>) -> Self {\r\n        Self {\r\n            outer\r\n        }\r\n    }\r\n    */\r\n    \r\n\r\n    fn new(outer: &'o Outer<'o>) -> Self {\r\n        Self { outer }\r\n    }\r\n\r\n    fn yep(&self) {}\r\n}\r\n\r\npub fn sadness() {\r\n    let i = ();\r\n    {\r\n        let outer = Outer {\r\n            inner: RefCell::new(Inner(&i)),\r\n        };\r\n\r\n        {\r\n            let _ = Holder::new(&outer);\r\n        }\r\n    }\r\n}\n```\n\n\n### Current output\n\n```Shell\nerror[E0597]: `outer` does not live long enough\r\n  --> src/lib.rs:42:33\r\n   |\r\n42 |             let _ = Holder::new(&outer);\r\n   |                                 ^^^^^^ borrowed value does not live long enough\r\n43 |         }\r\n44 |     }\r\n   |     -\r\n   |     |\r\n   |     `outer` dropped here while still borrowed\r\n   |     borrow might be used here, when `outer` is dropped and runs the `Drop` code for type `Outer`\n```\n\n\n### Desired output\n\n_No response_\n\n### Rationale and extra context\n\nThe problem here is really that `Outer<'i>` is invariant over `'i`. `&'o Outer<'i>` cannot be assigned to `&'o Outer<'o>`,, so the compiler requires that `'i == 'o`, but that doesn't hold since `'i` must outlive `'o` (for the `impl Drop for Outer<'i>`).  The error message is super helpful about this if the commented-out version of `new` is used instead (though at definition time, not at time of use), but doesn't explain any of this as-is.\r\n\r\nIdeally the error message would not only point out why it thinks the borrow of `outer` must last so long (because of the invariance), but also that the user's options are either to make the type not be invariant, or to make `Holder` have two separate lifetime arguments so that a requirement that `'i == 'o` isn't inferred.\n\n### Other cases\n\n_No response_\n\n### Anything else?\n\nThis may also be related to https://github.com/rust-lang/rust/issues/26804.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107107/timeline", "performed_via_github_app": null, "state_reason": null}