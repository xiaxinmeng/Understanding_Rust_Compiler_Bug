{"url": "https://api.github.com/repos/rust-lang/rust/issues/46676", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46676/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46676/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46676/events", "html_url": "https://github.com/rust-lang/rust/issues/46676", "id": 281242864, "node_id": "MDU6SXNzdWUyODEyNDI4NjQ=", "number": 46676, "title": "rustc accepts impls that has different type signatures from trait decls in lifetime parameters of the type", "user": {"login": "KeenS", "id": 4434568, "node_id": "MDQ6VXNlcjQ0MzQ1Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/4434568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KeenS", "html_url": "https://github.com/KeenS", "followers_url": "https://api.github.com/users/KeenS/followers", "following_url": "https://api.github.com/users/KeenS/following{/other_user}", "gists_url": "https://api.github.com/users/KeenS/gists{/gist_id}", "starred_url": "https://api.github.com/users/KeenS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KeenS/subscriptions", "organizations_url": "https://api.github.com/users/KeenS/orgs", "repos_url": "https://api.github.com/users/KeenS/repos", "events_url": "https://api.github.com/users/KeenS/events{/privacy}", "received_events_url": "https://api.github.com/users/KeenS/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-12T03:12:21Z", "updated_at": "2018-03-26T15:49:47Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I thought this code was invalid because 1. it had a redundant lifetime parameter and 2. it had different types from the trait decl in the types of the argument and the return value.\r\n\r\n```rust\r\ntrait Foo<T> {\r\n    fn foo(&self, t: T) -> T;\r\n}\r\n\r\nimpl<'a> Foo<Option<&'a str>> for () {\r\n    fn foo<'b>(&self, t: Option<&'b str>) -> Option<&'b str> {\r\n        t\r\n    }\r\n}\r\n```\r\n\r\nbut the compiler (both stable (1.22.1) and nightly (9fe7aa353 2017-12-11)) accepts this code.\r\nIs this indended or a bug?\r\n\r\nFYI: it seems compiler treat the signature method `foo` as the one of `Foo` (or, perhaps unifying `'b` to `'a`?) so it doesn't cause unsafe states like dangling pointer.\r\n\r\n```rust\r\nfn main() {\r\n    let s = \"String\".to_string();\r\n    {\r\n        let o = Some(s.as_ref());\r\n        let _ = <() as Foo<Option<&'static str>>>::foo(&(), Some(\"static\"));\r\n        // error\r\n        let _ = <() as Foo<Option<&'static str>>>::foo(&(), o);\r\n        // error\r\n        let _: Option<&'static str> = ().foo(o);\r\n    }\r\n\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46676/timeline", "performed_via_github_app": null, "state_reason": null}