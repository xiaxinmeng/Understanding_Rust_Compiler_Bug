{"url": "https://api.github.com/repos/rust-lang/rust/issues/37683", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37683/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37683/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37683/events", "html_url": "https://github.com/rust-lang/rust/issues/37683", "id": 188443343, "node_id": "MDU6SXNzdWUxODg0NDMzNDM=", "number": 37683, "title": "Add support for a import_name attribute to control the name of the symbol that is imported", "user": {"login": "m4b", "id": 1920204, "node_id": "MDQ6VXNlcjE5MjAyMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1920204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m4b", "html_url": "https://github.com/m4b", "followers_url": "https://api.github.com/users/m4b/followers", "following_url": "https://api.github.com/users/m4b/following{/other_user}", "gists_url": "https://api.github.com/users/m4b/gists{/gist_id}", "starred_url": "https://api.github.com/users/m4b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m4b/subscriptions", "organizations_url": "https://api.github.com/users/m4b/orgs", "repos_url": "https://api.github.com/users/m4b/repos", "events_url": "https://api.github.com/users/m4b/events{/privacy}", "received_events_url": "https://api.github.com/users/m4b/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-10T08:01:48Z", "updated_at": "2016-11-10T08:30:19Z", "closed_at": "2016-11-10T08:30:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I can't seem to find the ability to do this, and I noticed `export_name` so I figured maybe I should add a RFC for this, but since I stole this title from an issue (\r\nhttps://github.com/rust-lang/rust/issues/8735) raised by @huonw, and the changes were minimal, maybe it too will be minimal. :wink: \r\n\r\n## Proposal\r\n\r\nAdd an `#[import_name = \"ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12_M_constructIN9__gnu_cxx17__normal_iteratorIPwS4_EEEEvT_SA_St20forward_iterator_tag\"]` attribute inside of `extern` blocks to specify the  exact name of an import, but a different local name in the code.\r\n\r\nE.g.:\r\n\r\n```rust\r\n\r\nextern {\r\n  #[import_name=\"_ZN6snappy13RawUncompressEPKcmPc\"]\r\n  pub fn snappy_raw_uncompress();\r\n}\r\n```\r\n\r\n## Reason\r\n\r\n1. To make first steps to linking against C++ or beginning of C++ \"interop\"\r\n2. Sometimes symbol names have unwritable characters in rust function names, and hence are not even importable via normal means.  You can create this situation right now by `#[no_mangle]` and `#[export_name]` and then create a dynamic library.\r\n\r\n## Pros\r\n\r\n1. The duality is nice. seriously\r\n2. Anyone can experiment with the C++ ABI by painfully writing out import names if they want (or even better, automate it by scanning exported symbols, and piping them into a compiler extension :sunglasses: )\r\n3. Can now import functions with unusable function names\r\n\r\n## Cons\r\n\r\n1. Another thing.\r\n2. Could be abused?\r\n3. ?", "closed_by": {"login": "m4b", "id": 1920204, "node_id": "MDQ6VXNlcjE5MjAyMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1920204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m4b", "html_url": "https://github.com/m4b", "followers_url": "https://api.github.com/users/m4b/followers", "following_url": "https://api.github.com/users/m4b/following{/other_user}", "gists_url": "https://api.github.com/users/m4b/gists{/gist_id}", "starred_url": "https://api.github.com/users/m4b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m4b/subscriptions", "organizations_url": "https://api.github.com/users/m4b/orgs", "repos_url": "https://api.github.com/users/m4b/repos", "events_url": "https://api.github.com/users/m4b/events{/privacy}", "received_events_url": "https://api.github.com/users/m4b/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37683/timeline", "performed_via_github_app": null, "state_reason": "completed"}