{"url": "https://api.github.com/repos/rust-lang/rust/issues/71646", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71646/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71646/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71646/events", "html_url": "https://github.com/rust-lang/rust/issues/71646", "id": 608438939, "node_id": "MDU6SXNzdWU2MDg0Mzg5Mzk=", "number": 71646, "title": "Windows: io::Error::from_raw_os_error(ERROR_TIMEOUT) is not io::ErrorKind::TimedOut", "user": {"login": "carstenandrich", "id": 11141322, "node_id": "MDQ6VXNlcjExMTQxMzIy", "avatar_url": "https://avatars.githubusercontent.com/u/11141322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carstenandrich", "html_url": "https://github.com/carstenandrich", "followers_url": "https://api.github.com/users/carstenandrich/followers", "following_url": "https://api.github.com/users/carstenandrich/following{/other_user}", "gists_url": "https://api.github.com/users/carstenandrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/carstenandrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carstenandrich/subscriptions", "organizations_url": "https://api.github.com/users/carstenandrich/orgs", "repos_url": "https://api.github.com/users/carstenandrich/repos", "events_url": "https://api.github.com/users/carstenandrich/events{/privacy}", "received_events_url": "https://api.github.com/users/carstenandrich/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-28T16:09:24Z", "updated_at": "2020-06-23T07:50:47Z", "closed_at": "2020-06-23T07:50:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On Windows an io::Error created via `from_raw_os_error()` with the Windows system error code `ERROR_TIMEOUT` (1460) is not of the kind `io::ErrorKind::TimedOut`, but `io::ErrorKind::Other`.\r\nThis is counter-intuitive considering both (system error code and kind) have (almost) the same symbolic name.\r\n\r\nI've tested this with Rust 1.42 on x86_64-pc-windows-gnu, but this behavior is obviously still present in [git master](https://github.com/rust-lang/rust/blob/master/src/libstd/sys/windows/mod.rs#L64). Unless I'm overlooking sth., this should be fairly easy to fix by defining the `c::ERROR_TIMEOUT` constant and adding the following after [this line](https://github.com/rust-lang/rust/blob/89bc23643bc4ba979f28d6df8c091813c89c36a9/src/libstd/sys/windows/mod.rs#L64):\r\n```rust\r\nc::ERROR_TIMEOUT => return ErrorKind::TimedOut,\r\n```\r\nIf you'd like me to, I can prepare a merge request implementing the suggested fix.\r\n\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse std::io;\r\n\r\n// https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--500-999-\r\nconst ERROR_OPERATION_ABORTED: i32 = 995;\r\n// https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--1300-1699-\r\nconst ERROR_TIMEOUT: i32 = 1460;\r\n\r\nfn main() {\r\n\tassert_eq!(io::Error::from_raw_os_error(ERROR_OPERATION_ABORTED).kind(),\r\n\t\t\tio::ErrorKind::TimedOut);\r\n\tassert_eq!(io::Error::from_raw_os_error(ERROR_TIMEOUT).kind(),\r\n\t\t\tio::ErrorKind::TimedOut);\r\n}\r\n```\r\n\r\nI expected to see this happen: Assertion passes because (should be):\r\n```rust\r\nio::Error::from_raw_os_error(ERROR_TIMEOUT).kind() == io::ErrorKind::TimedOut`\r\n```\r\n\r\nInstead, this happened: Assertion fails because:\r\n```rust\r\nio::Error::from_raw_os_error(ERROR_TIMEOUT).kind() == io::ErrorKind::Other`\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.42.0 (b8cedc004 2020-03-09)\r\nbinary: rustc\r\ncommit-hash: b8cedc00407a4c56a3bda1ed605c6fc166655447\r\ncommit-date: 2020-03-09\r\nhost: x86_64-pc-windows-gnu\r\nrelease: 1.42.0\r\nLLVM version: 9.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `Other`,\r\n right: `TimedOut`', src\\main.rs:9:5\r\nstack backtrace:\r\n   0: backtrace::backtrace::dbghelp::trace\r\n             at C:\\Users\\VssAdministrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.40\\src\\backtrace/dbghelp.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at C:\\Users\\VssAdministrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.40\\src\\backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src\\libstd\\sys_common/backtrace.rs:77\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src\\libstd\\sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src\\libcore\\fmt/mod.rs:1052\r\n   5: std::io::Write::write_fmt\r\n             at src\\libstd\\io/mod.rs:1426\r\n   6: std::sys_common::backtrace::_print\r\n             at src\\libstd\\sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src\\libstd\\sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src\\libstd/panicking.rs:204\r\n   9: std::panicking::default_hook\r\n             at src\\libstd/panicking.rs:224\r\n  10: std::panicking::rust_panic_with_hook\r\n             at src\\libstd/panicking.rs:472\r\n  11: rust_begin_unwind\r\n             at src\\libstd/panicking.rs:380\r\n  12: std::panicking::begin_panic_fmt\r\n             at src\\libstd/panicking.rs:334\r\n  13: rust_test::main\r\n             at src/main.rs:9\r\n  14: std::rt::lang_start::{{closure}}\r\n             at /rustc/b8cedc00407a4c56a3bda1ed605c6fc166655447\\src\\libstd/rt.rs:67\r\n  15: std::rt::lang_start_internal::{{closure}}\r\n             at src\\libstd/rt.rs:52\r\n  16: std::panicking::try::do_call\r\n             at src\\libstd/panicking.rs:305\r\n  17: __rust_maybe_catch_panic\r\n             at src\\libpanic_unwind/lib.rs:86\r\n  18: std::panicking::try\r\n             at src\\libstd/panicking.rs:281\r\n  19: std::panic::catch_unwind\r\n             at src\\libstd/panic.rs:394\r\n  20: std::rt::lang_start_internal\r\n             at src\\libstd/rt.rs:51\r\n  21: std::rt::lang_start\r\n             at /rustc/b8cedc00407a4c56a3bda1ed605c6fc166655447\\src\\libstd/rt.rs:67\r\n  22: main\r\n  23: _tmainCRTStartup\r\n  24: mainCRTStartup\r\n  25: unit_addrs_search\r\n  26: unit_addrs_search\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nerror: process didn't exit successfully: `target\\debug\\rust-test.exe` (exit code: 101)\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71646/timeline", "performed_via_github_app": null, "state_reason": "completed"}