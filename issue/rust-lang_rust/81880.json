{"url": "https://api.github.com/repos/rust-lang/rust/issues/81880", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81880/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81880/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81880/events", "html_url": "https://github.com/rust-lang/rust/issues/81880", "id": 803534291, "node_id": "MDU6SXNzdWU4MDM1MzQyOTE=", "number": 81880, "title": "Rustc cannot optimize sequence of copies while clang does.", "user": {"login": "Kogia-sima", "id": 20660712, "node_id": "MDQ6VXNlcjIwNjYwNzEy", "avatar_url": "https://avatars.githubusercontent.com/u/20660712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kogia-sima", "html_url": "https://github.com/Kogia-sima", "followers_url": "https://api.github.com/users/Kogia-sima/followers", "following_url": "https://api.github.com/users/Kogia-sima/following{/other_user}", "gists_url": "https://api.github.com/users/Kogia-sima/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kogia-sima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kogia-sima/subscriptions", "organizations_url": "https://api.github.com/users/Kogia-sima/orgs", "repos_url": "https://api.github.com/users/Kogia-sima/repos", "events_url": "https://api.github.com/users/Kogia-sima/events{/privacy}", "received_events_url": "https://api.github.com/users/Kogia-sima/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-02-08T12:48:54Z", "updated_at": "2021-02-09T21:36:33Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I came from [here](https://users.rust-lang.org/t/why-rustc-cannot-optimize-sequence-of-copies-while-clang-does/55248). What I'd like to do is creating a function which writes `&'static str` wrapped with double quotation mark(\") into memory, where the string can mostly be evaluated at compile time.\r\n\r\nSimplified code:\r\n\r\nhttps://godbolt.org/z/PqaWGW\r\n\r\nAfter reading assembly output I figured out that it writes single `\"` character first, copies string contents, and then writes `\"` again.\r\n\r\nHowever, when I re-implemented the exactly same operation in C, clang properly optimized this operation. In other words, it joined `\"` and string contents at compilation time, and generated fewer instructions.\r\n\r\nhttps://godbolt.org/z/x3Kqza\r\n\r\nAs SkiFire13 states in [his answer](https://users.rust-lang.org/t/why-rustc-cannot-optimize-sequence-of-copies-while-clang-does/55248/2?u=kogia_sima), this seems to be caused by passing `&'static str` as an argument. When I passed raw pointer directly, LLVM generated same instructions as clang.\r\n\r\nIt isn't actually serious bottleneck in my program, but I suspect that this is a bug around `&'static str` codegen.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81880/timeline", "performed_via_github_app": null, "state_reason": null}