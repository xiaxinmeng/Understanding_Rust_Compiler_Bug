{"url": "https://api.github.com/repos/rust-lang/rust/issues/51567", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51567/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51567/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51567/events", "html_url": "https://github.com/rust-lang/rust/issues/51567", "id": 332612574, "node_id": "MDU6SXNzdWUzMzI2MTI1NzQ=", "number": 51567, "title": "HRTB-like bounds on structs", "user": {"login": "vitalyd", "id": 549403, "node_id": "MDQ6VXNlcjU0OTQwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/549403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vitalyd", "html_url": "https://github.com/vitalyd", "followers_url": "https://api.github.com/users/vitalyd/followers", "following_url": "https://api.github.com/users/vitalyd/following{/other_user}", "gists_url": "https://api.github.com/users/vitalyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vitalyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vitalyd/subscriptions", "organizations_url": "https://api.github.com/users/vitalyd/orgs", "repos_url": "https://api.github.com/users/vitalyd/repos", "events_url": "https://api.github.com/users/vitalyd/events{/privacy}", "received_events_url": "https://api.github.com/users/vitalyd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-15T00:59:12Z", "updated_at": "2021-05-04T19:01:55Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "So I have a situation, detailed in u.r.l.o [here](https://users.rust-lang.org/t/expressing-hrtb-like-bound-on-generic-struct/18081), that I'd be curious to see if there's a good solution for now or if anything in the pipeline might help.  It's likely a dupe of some existing issue(s) but I failed to find anything similar enough.\r\n\r\nI'll repeat my u.r.l.o. post below to save you the redirects.\r\n\r\n---\r\nSuppose you have a `Writer<T>` struct as follows:\r\n```rust\r\nstruct Writer<T> {\r\n    m: std::marker::PhantomData<fn(&T)>,\r\n}\r\n\r\nimpl<T> Writer<T> {\r\n    fn write(&mut self, val: &T) {} // somehow knows what to do - that's not important\r\n}\r\n```\r\nThe `Writer` is generic only to associate the T with the method parameter in write() - it otherwise doesn\u2019t store or use the T.\r\n\r\nNext, you have a struct like this:\r\n```rust\r\nstruct Record<'a> {\r\n    x: &'a i32,\r\n}\r\n```\r\nAnd now you want to have a Logger struct as follows:\r\n\r\n```rust\r\n// Don't want a lifetime parameter on `Logger`\r\nstruct Logger {\r\n    rec_writer: Writer<Record<'static>>, // it's not really 'static\r\n}\r\n\r\nimpl Logger {\r\n    fn write_record(&mut self) {\r\n        let x = 5;\r\n        let rec = Record {x: &x};\r\n        let rec: Record<'static> = unsafe {\r\n            std::mem::transmute(rec)\r\n        };\r\n        self.rec_writer.write(&rec);\r\n    }\r\n}\r\n```\r\nSo here I\u2019m transmuting to 'static to satisfy the type system, and I know that rec_writer.write(...) will not attempt to stash any values out of Record on the premise that they\u2019re 'static (which they\u2019re not). Ideally, what I\u2019d like to express is:\r\n\r\n```rust\r\nstruct Logger {\r\n    rec_writer: for<'a> Writer<Record<'a>>,\r\n}\r\n```\r\nwhich of course is invalid since HRTB only works on traits.\r\n\r\nIs there a clean way to achieve this? Am I forgetting something? I can probably redesign the code to not be structured like this, but I\u2019m curious if this is feasible as-is.\r\n\r\n---\r\n\r\nI don't think generic associated types (GAT) would help, and I suspect the issue borders more on HKT but I'm unsure.\r\n\r\nWould appreciate some insight/guidance from people in the know :).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51567/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51567/timeline", "performed_via_github_app": null, "state_reason": null}