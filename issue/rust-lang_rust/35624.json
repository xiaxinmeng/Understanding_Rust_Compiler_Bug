{"url": "https://api.github.com/repos/rust-lang/rust/issues/35624", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/35624/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/35624/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/35624/events", "html_url": "https://github.com/rust-lang/rust/issues/35624", "id": 170935660, "node_id": "MDU6SXNzdWUxNzA5MzU2NjA=", "number": 35624, "title": "Strange/useless compile error arising from associated type, where clause, and lifetime bounds", "user": {"login": "AltSysrq", "id": 1392512, "node_id": "MDQ6VXNlcjEzOTI1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1392512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AltSysrq", "html_url": "https://github.com/AltSysrq", "followers_url": "https://api.github.com/users/AltSysrq/followers", "following_url": "https://api.github.com/users/AltSysrq/following{/other_user}", "gists_url": "https://api.github.com/users/AltSysrq/gists{/gist_id}", "starred_url": "https://api.github.com/users/AltSysrq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AltSysrq/subscriptions", "organizations_url": "https://api.github.com/users/AltSysrq/orgs", "repos_url": "https://api.github.com/users/AltSysrq/repos", "events_url": "https://api.github.com/users/AltSysrq/events{/privacy}", "received_events_url": "https://api.github.com/users/AltSysrq/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-12T18:52:51Z", "updated_at": "2018-06-21T23:05:03Z", "closed_at": "2018-06-21T23:05:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Originally reported [on the forums](https://users.rust-lang.org/t/weird-issue-with-lifetimes-and-associated-types/6870).\n\nWhen an `impl` with two or more lifetimes (one bounding the other) implements a function which uses a `where` clause against its own associated type, the compiler produces a cryptic error complaining about the lifetimes and suggesting a \"fix\" which simply leaves the code unchanged. \n\nThe minimal case I was able to produce is below (also on [playpen](https://is.gd/sPiXrT)):\n\n``` rust\ntrait Trait {\n    type Associated;\n\n    // In the original, this method took parameters and was generic, and the\n    // constraint here was dependent on those generics, so this can't just be\n    // moved to `type Associated : Default`.\n    fn method() where Self::Associated : Default;\n}\n\nstruct Struct<'a, 'b>(&'a (), &'b ());\n\n// Problem here\n// Changing `'b: 'a` to just `'b` resolves the compiler error.\n// Note that in the real code, there actually is a need for this lifetime\n// constraint (and it's present on `Struct` as well).\nimpl<'a, 'b: 'a> Trait for Struct<'a, 'b> {\n    type Associated = ();\n\n    fn method() { }\n}\n\nfn main() { }\n```\n\nwhich results in the errors (this is from nightly; similar happens for stable though):\n\n```\nerror[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n  --> <anon>:19:5\n   |\n19 |     fn method() { }\n   |     ^^^^^^^^^^^^^^^\n   |\nhelp: consider using an explicit lifetime parameter as shown: fn method()\n  --> <anon>:19:5\n   |\n19 |     fn method() { }\n   |     ^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n```\n\nAt the very least, I think this is a bug with the diagnostics since they don't convey any clear information. There might also be something going on with the compiler though, since there doesn't seem to be any way for the lifetimes to even be in play here.\n## Meta\n\nOriginally ran into this on stable:\n\n```\n$ rustc --version --verbose\nrustc 1.10.0\nbinary: rustc\ncommit-hash: unknown\ncommit-date: unknown\nhost: x86_64-unknown-linux-gnu\nrelease: 1.10.0\n$ aptitude show rustc\nVersion: 1.10.0+dfsg1-1\n# Snip..\n```\n\nthough it does also happen on every version on play.rust-lang.org.\n", "closed_by": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/35624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/35624/timeline", "performed_via_github_app": null, "state_reason": "completed"}