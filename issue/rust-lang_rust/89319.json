{"url": "https://api.github.com/repos/rust-lang/rust/issues/89319", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89319/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89319/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89319/events", "html_url": "https://github.com/rust-lang/rust/issues/89319", "id": 1009647490, "node_id": "I_kwDOAAsO6M48Lf-C", "number": 89319, "title": "Unclosed block in an impl block emits many knock-down errors", "user": {"login": "pr2502", "id": 36980911, "node_id": "MDQ6VXNlcjM2OTgwOTEx", "avatar_url": "https://avatars.githubusercontent.com/u/36980911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pr2502", "html_url": "https://github.com/pr2502", "followers_url": "https://api.github.com/users/pr2502/followers", "following_url": "https://api.github.com/users/pr2502/following{/other_user}", "gists_url": "https://api.github.com/users/pr2502/gists{/gist_id}", "starred_url": "https://api.github.com/users/pr2502/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pr2502/subscriptions", "organizations_url": "https://api.github.com/users/pr2502/orgs", "repos_url": "https://api.github.com/users/pr2502/repos", "events_url": "https://api.github.com/users/pr2502/events{/privacy}", "received_events_url": "https://api.github.com/users/pr2502/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 27424086, "node_id": "MDU6TGFiZWwyNzQyNDA4Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-parser", "name": "A-parser", "color": "f7e101", "default": false, "description": "Area: The parsing of Rust source code to an AST."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}, {"id": 1659943986, "node_id": "MDU6TGFiZWwxNjU5OTQzOTg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-verbose", "name": "D-verbose", "color": "c9f7a3", "default": false, "description": "Too much output caused by a single piece of incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-09-28T11:49:57Z", "updated_at": "2021-09-29T14:14:52Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A single missing `}` in a function definition in an impl block causes all the subsequent functions in that impl block to not get parsed properly as a part of an impl block and will emit errors about receiver types like they were free functions, plus it will complain about all the calls to those functions (methods) as being undefined because of that. With reasonably large impl blocks a single missing `}` can cause pages of errors.\r\n\r\nGiven the following code: <https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=edf89a13b36bb0f47f887f1036d08665>\r\n\r\n```rust\r\nstruct Ctx {}\r\n\r\nenum Enum {\r\n    A(i32),\r\n    B(i32),\r\n}\r\n\r\nimpl Ctx {\r\n    fn foo(&mut self, e: &Enum) {\r\n        match e {\r\n            Enum::A(a) => self.a(a),\r\n            Enum::B(c) => {\r\n                self.b(c);\r\n            // oops, forgot `}` here\r\n        }\r\n    }\r\n\r\n    fn a(&mut self, _a: i32) {}\r\n\r\n    fn b(&mut self, _b: i32) {}\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror: this file contains an unclosed delimiter\r\n  --> src/lib.rs:21:3\r\n   |\r\n8  | impl Ctx {\r\n   |          - unclosed delimiter\r\n...\r\n12 |             Enum::B(c) => {\r\n   |                           - this delimiter might not be properly closed...\r\n...\r\n15 |         }\r\n   |         - ...as it matches this but it has different indentation\r\n...\r\n21 | }\r\n   |   ^\r\n\r\nerror: `self` parameter is only allowed in associated functions\r\n  --> src/lib.rs:18:10\r\n   |\r\n18 |     fn a(&mut self, _a: i32) {}\r\n   |          ^^^^^^^^^ not semantically valid as function parameter\r\n   |\r\n   = note: associated functions are those in `impl` or `trait` definitions\r\n\r\nerror: `self` parameter is only allowed in associated functions\r\n  --> src/lib.rs:20:10\r\n   |\r\n20 |     fn b(&mut self, _b: i32) {}\r\n   |          ^^^^^^^^^ not semantically valid as function parameter\r\n   |\r\n   = note: associated functions are those in `impl` or `trait` definitions\r\n\r\nerror[E0401]: can't use generic parameters from outer function\r\n  --> src/lib.rs:18:10\r\n   |\r\n8  | impl Ctx {\r\n   | ---- `Self` type implicitly declared here, by this `impl`\r\n...\r\n18 |     fn a(&mut self, _a: i32) {}\r\n   |          ^^^^^^^^^\r\n   |          |\r\n   |          use of generic parameter from outer function\r\n   |          use a type here instead\r\n\r\nerror[E0401]: can't use generic parameters from outer function\r\n  --> src/lib.rs:20:10\r\n   |\r\n8  | impl Ctx {\r\n   | ---- `Self` type implicitly declared here, by this `impl`\r\n...\r\n20 |     fn b(&mut self, _b: i32) {}\r\n   |          ^^^^^^^^^\r\n   |          |\r\n   |          use of generic parameter from outer function\r\n   |          use a type here instead\r\n\r\nerror[E0599]: no method named `a` found for mutable reference `&mut Ctx` in the current scope\r\n  --> src/lib.rs:11:32\r\n   |\r\n11 |             Enum::A(a) => self.a(a),\r\n   |                                ^ method not found in `&mut Ctx`\r\n\r\nerror[E0599]: no method named `b` found for mutable reference `&mut Ctx` in the current scope\r\n  --> src/lib.rs:13:22\r\n   |\r\n13 |                 self.b(c);\r\n   |                      ^ method not found in `&mut Ctx`\r\n\r\nSome errors have detailed explanations: E0401, E0599.\r\nFor more information about an error, try `rustc --explain E0401`.\r\nerror: could not compile `playground` due to 7 previous errors\r\n```\r\n\r\nIdeally rustc would only emit the first error.\r\n\r\nCurrent nightly seems to time-out on the playground but locally `rustc 1.57.0-nightly (05044c2e6 2021-09-26)` gives the same output as stable.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89319/timeline", "performed_via_github_app": null, "state_reason": null}