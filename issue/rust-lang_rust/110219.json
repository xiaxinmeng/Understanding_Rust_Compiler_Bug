{"url": "https://api.github.com/repos/rust-lang/rust/issues/110219", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110219/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110219/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110219/events", "html_url": "https://github.com/rust-lang/rust/issues/110219", "id": 1664035999, "node_id": "I_kwDOAAsO6M5jLyyf", "number": 110219, "title": "Trait with type-dependent optional function forces implementation regardless of type", "user": {"login": "cafce25", "id": 1965620, "node_id": "MDQ6VXNlcjE5NjU2MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/1965620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cafce25", "html_url": "https://github.com/cafce25", "followers_url": "https://api.github.com/users/cafce25/followers", "following_url": "https://api.github.com/users/cafce25/following{/other_user}", "gists_url": "https://api.github.com/users/cafce25/gists{/gist_id}", "starred_url": "https://api.github.com/users/cafce25/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cafce25/subscriptions", "organizations_url": "https://api.github.com/users/cafce25/orgs", "repos_url": "https://api.github.com/users/cafce25/repos", "events_url": "https://api.github.com/users/cafce25/events{/privacy}", "received_events_url": "https://api.github.com/users/cafce25/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-04-12T07:51:45Z", "updated_at": "2023-04-14T08:22:27Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code (from this [Stack Overflow question](https://stackoverflow.com/questions/75992601/trait-with-type-dependent-optional-function-forces-implementation-regardless-of)):\r\n\r\n```rust\r\ntrait Doable {}\r\n\r\ntrait MyTrait<T> {\r\n    fn set_member(&mut self, member: T);\r\n\r\n    fn do_member(&mut self)\r\n    where\r\n        T: Doable;\r\n}\r\n\r\nstruct MyMember;\r\nstruct MyTraitStruct(Option<MyMember>);\r\n\r\nimpl MyTrait<MyMember> for MyTraitStruct {\r\n    fn set_member(&mut self, member: MyMember) {\r\n        todo!();\r\n    }\r\n}\r\n```\r\n\r\n#### I expected to see this happen:\r\nIt compiles as `do_member` is only available if the type parameter `T` implements `Doable` which `MyMember` doesn't.\r\n\r\n#### Instead, this happened:\r\nIt doesn't compile with this error message:\r\n```\r\nerror[E0046]: not all trait items implemented, missing: `do_member`\r\n  --> main.rs:14:1\r\n   |\r\n6  | /     fn do_member(&mut self)\r\n7  | |     where\r\n8  | |         T: Doable;\r\n   | |__________________- `do_member` from trait\r\n...\r\n14 |   impl MyTrait<MyMember> for MyTraitStruct {\r\n   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `do_member` in implementation\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.68.2 (9eb3afe9e 2023-03-27)\r\nbinary: rustc\r\ncommit-hash: 9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0\r\ncommit-date: 2023-03-27\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.68.2\r\nLLVM version: 15.0.6\r\n```\r\nand\r\n```\r\nrustc 1.70.0-nightly (9df3a39fb 2023-04-11)\r\nbinary: rustc\r\ncommit-hash: 9df3a39fb30575d808e70800f9fad5362aac57a2\r\ncommit-date: 2023-04-11\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.70.0-nightly\r\nLLVM version: 16.0.2\r\n```\r\n\r\n\r\n### Workaround\r\nTo work around this one can simply implement the `do_member` method without the `where` clause:\r\n```rust\r\nimpl MyTrait<MyMember> for MyTraitStruct {\r\n    // [...]\r\n    fn do_member(&mut self) {}\r\n}\r\n```\r\nbut it feels rather pointless to implement a method that's not callable and doesn't do anything.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110219/timeline", "performed_via_github_app": null, "state_reason": null}