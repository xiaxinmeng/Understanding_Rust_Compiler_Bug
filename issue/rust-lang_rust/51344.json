{"url": "https://api.github.com/repos/rust-lang/rust/issues/51344", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51344/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51344/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51344/events", "html_url": "https://github.com/rust-lang/rust/issues/51344", "id": 329025666, "node_id": "MDU6SXNzdWUzMjkwMjU2NjY=", "number": 51344, "title": "Seemingly inconsistent behavior when using default trait parameters", "user": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-04T12:01:11Z", "updated_at": "2023-04-05T17:39:39Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I am building a `Length` trait for a `Line` struct that determines the length of a line using various geospatial distance algorithms. It utilizes a default trait parameter to specify a reasonable default to improve the ergonomics. While designing the trait, I noticed some inconsistent behavior.\r\n\r\nConsider the next two blocks of code.\r\n\r\n- The first has everything parameterized with type `T` which represents a numeric type for the coordinates of the lines and also the return type for the length algorithm.\r\n- The second is the same, but without a parameterized `T`. Instead `f32` is hardcoded everywhere.\r\n\r\nA couple questions come up:\r\n\r\n1. For the first code block, in the `main` function, why does it claim `Algo` needs to be specified when we call `length` as a method, but when we use UFCS (without specifying `Algo`) it seems to work fine?\r\n2. Why does the UFCS usage in the second code block not work like the first?\r\n\r\n[*playpen for code below*](https://play.rust-lang.org/?gist=767c3ed18a280fb246098dd1dc86d29a&version=stable&mode=debug)\r\n\r\n```rust\r\npub struct Line<T> {\r\n    start: (T, T),\r\n    end: (T, T),\r\n}\r\n\r\n////////////\r\n\r\npub trait LengthAlgo<T> {\r\n    fn length(line: Line<T>) -> T;\r\n}\r\n\r\n////////////\r\n\r\npub enum Haversine {}\r\n\r\nimpl<T> LengthAlgo<T> for Haversine {\r\n    fn length(line: Line<T>) -> T {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\npub enum Vincenty {}\r\n\r\nimpl<T> LengthAlgo<T> for Vincenty {\r\n    fn length(line: Line<T>) -> T {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\n////////////\r\n\r\npub trait Length<T, Algo: LengthAlgo<T> = Haversine> {\r\n    fn length(self) -> T;\r\n}\r\n\r\nimpl<T, Algo: LengthAlgo<T>> Length<T, Algo> for Line<T> {\r\n    fn length(self) -> T {\r\n        Algo::length(self)\r\n    }\r\n}\r\n\r\n////////////\r\n\r\nfn main() {\r\n    let line: Line<i32> = Line {\r\n        start: (4, 6),\r\n        end: (2, 23),\r\n    };\r\n    \r\n    // This doesn't compile \u2013 error message says `Algo` type needs to be specified\r\n    // let haversine_length = line.length();\r\n    \r\n    // This compiles, despite us not specifying the type for `Algo`\r\n    let haversine_length = Length::<i32>::length(line);\r\n}\r\n```\r\n\r\n[*playpen for code below*](https://play.rust-lang.org/?gist=d18f2bbaec2131b1fe8dd7b635807708&version=stable&mode=debug)\r\n\r\n```rust\r\npub struct Line {\r\n    start: (f32, f32),\r\n    end: (f32, f32),\r\n}\r\n\r\n////////////\r\n\r\npub trait LengthAlgo {\r\n    fn length(line: Line) -> f32;\r\n}\r\n\r\n////////////\r\n\r\npub enum Haversine {}\r\n\r\nimpl LengthAlgo for Haversine {\r\n    fn length(line: Line) -> f32 {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\npub enum Vincenty {}\r\n\r\nimpl LengthAlgo for Vincenty {\r\n    fn length(line: Line) -> f32 {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\n////////////\r\n\r\npub trait Length<Algo: LengthAlgo = Haversine> {\r\n    fn length(self) -> f32;\r\n}\r\n\r\nimpl<Algo: LengthAlgo> Length<Algo> for Line {\r\n    fn length(self) -> f32 {\r\n        Algo::length(self)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let line: Line = Line {\r\n        start: (4., 6.),\r\n        end: (2., 23.),\r\n    };\r\n    \r\n    // Neither line below compiles \u2013 error message says `Algo` type needs to be specified\r\n    // let haversine_length = line.length();\r\n    // let haversine_length = Length::length(line);\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51344/timeline", "performed_via_github_app": null, "state_reason": null}