{"url": "https://api.github.com/repos/rust-lang/rust/issues/75638", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75638/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75638/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75638/events", "html_url": "https://github.com/rust-lang/rust/issues/75638", "id": 680390849, "node_id": "MDU6SXNzdWU2ODAzOTA4NDk=", "number": 75638, "title": "Tracking Issue for Iterator::join", "user": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-17T17:08:53Z", "updated_at": "2022-06-01T19:35:10Z", "closed_at": "2022-06-01T19:35:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue! \ud83d\udcdc Tracking issues are for tracking a\r\nfeature from implementation to stabilisation. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nThis tracking issue is to create a more ergonomic method to `join` on `Iterator` without collect. Hopefully, we can do some optimizations on top of it but I haven't think of any case to improve it.\r\nThe feature gate for the issue is `#![feature(iterator_join)]`.\r\n\r\nBefore\r\n\r\n```rust\r\n[\"hello\", \"world\"].iter().collect::<Vec<_>>().join(\" \")\r\n```\r\n\r\nAfter\r\n\r\n```rust\r\n[\"hello\", \"world\"].iter().join(\" \")\r\n```\r\n\r\nIt makes use of `Join` under `slice_concat_trait` feature https://github.com/rust-lang/rust/issues/27747 and have a similar behavior to `Iterator::collect`.\r\nIt is similar to `join` from `itertools` except that it makes use of the stuff mentioned for feature parity between `Iterator` and `join` and ergonomics to not need to do `.collect::<Vec<_>>()`.\r\n\r\nTechnical implementation proof of concept.\r\n\r\n```rust\r\npub fn join<T, Separator>(iter: impl Iterator<Item = T>, sep: Separator) -> <[T] as Join<Separator>>::Output\r\nwhere\r\n    [T]: Join<Separator>,\r\n{\r\n    // <[S] as std::slice::Join<&str>>\r\n    // <[V] as std::slice::Join<&T>>\r\n    // <[V] as std::slice::Join<&[T]>>\r\n    Join::join(iter.collect::<Vec<T>>().as_slice(), sep)\r\n}\r\n```\r\n\r\nExisting discussion on zulip https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/join.20on.20Iterator\r\nRelated issue https://github.com/rust-lang/rust/issues/22754\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also uses as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [ ] Implement the RFC (cc @rust-lang/T-libs @Amanieu @cuviper) - https://github.com/rust-lang/rust/pull/75738\r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\n- [ ] Figure out potential performance improvements CC @lzutao \r\n- [ ] Add clippy lint to use `.join(sep)` rather than `.collect::<Vec<_>>().join()` after stabilization? Is it even possible when it goes across lines?\r\n\r\n### Implementation history\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n\r\n- Initial Implementation: WIP (please let me do this)", "closed_by": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75638/reactions", "total_count": 10, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 1, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75638/timeline", "performed_via_github_app": null, "state_reason": "completed"}