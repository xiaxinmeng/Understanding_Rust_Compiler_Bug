{"url": "https://api.github.com/repos/rust-lang/rust/issues/71017", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71017/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71017/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71017/events", "html_url": "https://github.com/rust-lang/rust/issues/71017", "id": 598189562, "node_id": "MDU6SXNzdWU1OTgxODk1NjI=", "number": 71017, "title": "Consider skipping 'unused import' lint for traits when errors have occured", "user": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-11T04:42:18Z", "updated_at": "2020-04-15T09:41:02Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The following code:\r\n\r\n```rust\r\ntrait Foo {\r\n    fn dummy(&self) {}\r\n}\r\nimpl Foo for bool {}\r\n\r\nmod bar {\r\n    use super::Foo;\r\n    fn contains_error() {\r\n        let a = missing_method();\r\n        a.dummy();\r\n    }\r\n}\r\n```\r\n\r\ngives the following output:\r\n\r\n```\r\nerror[E0425]: cannot find function `missing_method` in this scope\r\n --> src/lib.rs:9:17\r\n  |\r\n9 |         let a = missing_method();\r\n  |                 ^^^^^^^^^^^^^^ not found in this scope\r\n\r\nwarning: unused import: `super::Foo`\r\n --> src/lib.rs:7:9\r\n  |\r\n7 |     use super::Foo;\r\n  |         ^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(unused_imports)]` on by default\r\n```\r\n\r\nI think the 'unused import' lint firing is questionable. If the trait in question is being imported only for its methods, then the user will never actually write down the trait name in their code. As a result, introducing a seemingly unrelated compilation error during development may cause a method to no longer be resolved (`a.dummy()` in this example), resulting in the trait appearing unused.\r\n\r\nHowever, the fact that the trait appears unused here is only because we weren't able to perform method resolution. If the user decides to remove the import, they'll end up with a *new* compilation error after fixing the original one, requiring them to revert their change.\r\n\r\nI think we should suppress the `unused_imports` for traits if we encountered any errors before method resolution (or maybe before type-checking). The lint will still fire if there are other errors (e.g. borrowcheck) or no errors, but we won't give users this kind of false positive.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71017/timeline", "performed_via_github_app": null, "state_reason": null}