{"url": "https://api.github.com/repos/rust-lang/rust/issues/22405", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/22405/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/22405/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/22405/events", "html_url": "https://github.com/rust-lang/rust/issues/22405", "id": 57817489, "node_id": "MDU6SXNzdWU1NzgxNzQ4OQ==", "number": 22405, "title": "Could type inference insert coercions to accommodate box desugaring?", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-02-16T15:30:09Z", "updated_at": "2023-04-05T17:36:37Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The problem here was previously documented as a drawback in https://github.com/rust-lang/rfcs/pull/809 (with similar details provided in Appendix B).\n\nDemonstration code:\n\n``` rust\n#![feature(box_syntax)]\n\n// NOTE: Scroll down to \"START HERE\"\n\nfn main() { }\n\nmacro_rules! box_ {\n    ($value:expr) => { {\n        let mut place = ::BoxPlace::make();\n        let raw_place = ::Place::pointer(&mut place);\n        let value = $value;\n        unsafe { ::std::ptr::write(raw_place, value); ::Boxed::fin(place) }\n    } }\n}\n\npub trait BoxPlace<Data> : Place<Data> { fn make() -> Self; }\npub trait Place<Data: ?Sized> { fn pointer(&mut self) -> *mut Data; }\npub trait Boxed<CoercedFrom> { type Place; fn fin(filled: Self::Place) -> Self; }\n\nstruct BP<T: ?Sized> { _fake_box: Option<Box<T>> }\n\nimpl<T> BoxPlace<T> for BP<T> {\n    fn make() -> BP<T> { make_pl() }\n}\nimpl<T: ?Sized> Place<T> for BP<T> {\n    fn pointer(&mut self) -> *mut T { pointer(self) }\n}\nimpl<T> Boxed<T> for Box<T> {\n    type Place = BP<T>;\n    fn fin(x: BP<T>) -> Self { finaliz(x) }\n}\n\nfn make_pl<T>() -> BP<T> { loop { } }\nfn finaliz<T: ?Sized, CoercedFrom>(mut _filled: BP<CoercedFrom>) -> Box<T> { loop { } }\nfn pointer<T: ?Sized>(_p: &mut BP<T>) -> *mut T { loop { } }\n\n// START HERE\n\ntrait D1 { fn duh() -> Self; }\ntrait D2 { fn duh() -> Self; }\ntrait D3 { fn duh() -> Self; }\ntrait D4 { fn duh() -> Self; }\ntrait D5 { fn duh() -> Self; }\ntrait D6 { fn duh() -> Self; }\ntrait D7 { fn duh() -> Self; }\n\n// THIS WORKS TODAY (pre box desugaring).\nimpl<T> D1 for Box<[T]> { fn duh() -> Box<[T]> { box [] } }\n\n// D2/D3/D4/D5 WORK TOMORROW (they accommodate the box desugaring).\nimpl<T> D2 for Box<[T]> {\n    fn duh() -> Box<[T]> { let b: Box<[_; 0]> =  box_!( [] ); b }\n}\nimpl<T> D3 for Box<[T]> {\n    fn duh() -> Box<[T]> { (|b| -> Box<[_; 0]> { b })(box_!( [] )) }\n}\nimpl<T> D4 for Box<[T]> {\n    fn duh() -> Box<[T]> { (|b: Box<[_; 0]>| { b })(box_!( [] )) }\n}\nfn the<X>(x:X) -> X { x }\nimpl<T> D5 for Box<[T]> {\n    fn duh() -> Box<[T]> { the::<Box<[_; 0]>>(box_!( [] )) }\n}\n\n// BUT: D6 and D7 do not work.\n\nimpl<T> D6 for Box<[T]> { fn duh() -> Box<[T]> { box_!([]) } }\n\nimpl<T> D7 for Box<[T]> {\n    // fn duh() -> Box<[T]> { box_!( [] ) }\n    //\n    // desugars to:\n    fn duh() -> Box<[T]> {\n        let mut place = ::BoxPlace::make();\n        let raw_place = ::Place::pointer(&mut place);\n        let value = [];\n        unsafe { ::std::ptr::write(raw_place, value);\n                 ::Boxed::fin(place) }\n    }\n}\n```\n\nThe question posed by this issue is: Could we enhance the type inference and/or the design of this protocol so that, by tracking the sized-ness of the type unification variables, we could determine where coercions need to be inserted.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/22405/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/22405/timeline", "performed_via_github_app": null, "state_reason": null}