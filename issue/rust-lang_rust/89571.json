{"url": "https://api.github.com/repos/rust-lang/rust/issues/89571", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89571/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89571/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89571/events", "html_url": "https://github.com/rust-lang/rust/issues/89571", "id": 1016678600, "node_id": "I_kwDOAAsO6M48mUjI", "number": 89571, "title": "Safety hazard: thread::park() doesn't guarantee being unwind-free but sync::Once implicitly relies on it being unwind-free", "user": {"login": "Kixunil", "id": 1178779, "node_id": "MDQ6VXNlcjExNzg3Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kixunil", "html_url": "https://github.com/Kixunil", "followers_url": "https://api.github.com/users/Kixunil/followers", "following_url": "https://api.github.com/users/Kixunil/following{/other_user}", "gists_url": "https://api.github.com/users/Kixunil/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kixunil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions", "organizations_url": "https://api.github.com/users/Kixunil/orgs", "repos_url": "https://api.github.com/users/Kixunil/repos", "events_url": "https://api.github.com/users/Kixunil/events{/privacy}", "received_events_url": "https://api.github.com/users/Kixunil/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 4434017660, "node_id": "LA_kwDOAAsO6M8AAAABCEm9fA", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-atomic", "name": "A-atomic", "color": "f7e101", "default": false, "description": "Area: atomics, barriers, and sync primitives"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-10-05T18:57:25Z", "updated_at": "2023-05-16T15:58:49Z", "closed_at": "2023-04-12T16:28:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I noticed `Once`  contains [this code](https://github.com/rust-lang/rust/blob/25ec8273855fde2d72ae877b397e054de5300e10/library/std/src/sync/once.rs#L465-L476):\r\n\r\n```rust\r\n        // We have enqueued ourselves, now lets wait.\r\n        // It is important not to return before being signaled, otherwise we\r\n        // would drop our `Waiter` node and leave a hole in the linked list\r\n        // (and a dangling reference). Guard against spurious wakeups by\r\n        // reparking ourselves until we are signaled.\r\n        while !node.signaled.load(Ordering::Acquire) {\r\n            // If the managing thread happens to signal and unpark us before we\r\n            // can park ourselves, the result could be this thread never gets\r\n            // unparked. Luckily `park` comes with the guarantee that if it got\r\n            // an `unpark` just before on an unparked thread it does not park.\r\n            thread::park();\r\n        }\r\n```\r\n\r\nAs the comment correctly explains the while loop must **not** end prematurely. However if `thread::park()` unwinds it would break the loop.\r\n\r\nDoes `thread::park()` panic though?\r\nI found at least two instances: [1](https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sys_common/thread_parker/generic.rs#L44) [2](https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sys_common/thread_parker/generic.rs#L47) where it explicitly could and I didn't review all implementations, nor internals of `Mutex` and `CondVar`. I understand those are supposed to be unlikely but I guess they were intended to reduce unsafety but amusingly they increased it for `Once`.\r\n\r\nI think it'd be safer to either:\r\n\r\n* Guarantee that `park` can't unwind, change those panics to aborts and document it, ideally make this a public guarantee as well. (I noticed this issue because I'm writing something with structure similar to that piece in `Once`)\r\n* Explicitly document that this is **not** guaranteed with a warning about this footgun and change `Once` to abort if `park` panics.", "closed_by": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89571/timeline", "performed_via_github_app": null, "state_reason": "completed"}