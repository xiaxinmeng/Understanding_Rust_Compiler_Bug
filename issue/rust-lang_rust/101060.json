{"url": "https://api.github.com/repos/rust-lang/rust/issues/101060", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101060/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101060/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101060/events", "html_url": "https://github.com/rust-lang/rust/issues/101060", "id": 1352725068, "node_id": "I_kwDOAAsO6M5QoPJM", "number": 101060, "title": "Codegen weirdness for `sum` of `count_ones` over an array", "user": {"login": "alion02", "id": 22531550, "node_id": "MDQ6VXNlcjIyNTMxNTUw", "avatar_url": "https://avatars.githubusercontent.com/u/22531550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alion02", "html_url": "https://github.com/alion02", "followers_url": "https://api.github.com/users/alion02/followers", "following_url": "https://api.github.com/users/alion02/following{/other_user}", "gists_url": "https://api.github.com/users/alion02/gists{/gist_id}", "starred_url": "https://api.github.com/users/alion02/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alion02/subscriptions", "organizations_url": "https://api.github.com/users/alion02/orgs", "repos_url": "https://api.github.com/users/alion02/repos", "events_url": "https://api.github.com/users/alion02/events{/privacy}", "received_events_url": "https://api.github.com/users/alion02/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 55302148, "node_id": "MDU6TGFiZWw1NTMwMjE0OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86_64", "name": "O-x86_64", "color": "6e6ec0", "default": false, "description": "Target: x64 processors"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3793391339, "node_id": "LA_kwDOAAsO6M7iGo7r", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-none", "name": "WG-none", "color": "c2e0c6", "default": false, "description": "Indicates that no working group is assigned to an issue, but it *does* have an active owner"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-08-26T20:56:08Z", "updated_at": "2023-04-03T12:45:30Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "(Issue loosely owned by @wesleywiser and @pnkfelix monitoring https://github.com/llvm/llvm-project/issues/57476 )\r\n\r\n### Original Description below\r\n\r\n```rust\r\npub fn f(arr: [u64; 2]) -> u32 {\r\n    arr.into_iter().map(u64::count_ones).sum()\r\n}\r\n```\r\n\r\nBefore 1.62.0, this code correctly compiled to two popcounts and an addition on a modern x86-64 target.\r\n\r\n```asm\r\nexample::f:\r\n        popcnt  rcx, qword ptr [rdi]\r\n        popcnt  rax, qword ptr [rdi + 8]\r\n        add     eax, ecx\r\n        ret\r\n```\r\n\r\nSince 1.62.0 (up to latest nightly), the codegen is... [baffling at best.](https://godbolt.org/z/G9fa4Y8T7)\r\n\r\n```asm\r\n.LCPI0_0:\r\n        .zero   16,15\r\n.LCPI0_1:\r\n        .byte   0\r\n        .byte   1\r\n        .byte   1\r\n        .byte   2\r\n        .byte   1\r\n        .byte   2\r\n        .byte   2\r\n        .byte   3\r\n        .byte   1\r\n        .byte   2\r\n        .byte   2\r\n        .byte   3\r\n        .byte   2\r\n        .byte   3\r\n        .byte   3\r\n        .byte   4\r\nexample::f:\r\n        sub     rsp, 40\r\n        vmovups xmm0, xmmword ptr [rdi]\r\n        vmovdqa xmm1, xmmword ptr [rip + .LCPI0_0]\r\n        vmovdqa xmm3, xmmword ptr [rip + .LCPI0_1]\r\n        vmovaps xmmword ptr [rsp], xmm0\r\n        vmovdqa xmm0, xmmword ptr [rsp]\r\n        vpand   xmm2, xmm0, xmm1\r\n        vpsrlw  xmm0, xmm0, 4\r\n        vpand   xmm0, xmm0, xmm1\r\n        vpshufb xmm2, xmm3, xmm2\r\n        vpxor   xmm1, xmm1, xmm1\r\n        vpshufb xmm0, xmm3, xmm0\r\n        vpaddb  xmm0, xmm0, xmm2\r\n        vpsadbw xmm0, xmm0, xmm1\r\n        vpshufd xmm1, xmm0, 170\r\n        vpaddd  xmm0, xmm0, xmm1\r\n        vmovd   eax, xmm0\r\n        add     rsp, 40\r\n        ret\r\n```\r\n\r\nThe assembly for the original function is now a terribly misguided autovectorization. And, just to make sure (even though it's pretty obvious), I did run a benchmark - the autovectorized function is ~8x slower on my Zen 2 system.\r\n\r\nCalling that function from a different function brings back normal assembly. `-Cno-vectorize-slp` does nothing. I don't know exactly what `-Cno-vectorize-loops` does, but it's not good.\r\n\r\nIf you change the length of the array to 4, both functions get autovectorized. `-Cno-vectorize-slp` fixes the second function now. Adding `-Cno-vectorize-loops` causes the passthrough function to generate the worst assembly.\r\n\r\nChanging `into_iter` to `iter` fixes length 2, but doesn't fix length 4.\r\n\r\nI could go on, but in short it's a whole mess.\r\n\r\nI found a workaround that consistently works for all lengths: `iter` and `-Cno-vectorize-slp`.\r\n\r\n@rustbot modify labels: +regression-from-stable-to-stable -regression-untriaged +A-array +A-codegen +A-iterators +A-LLVM +A-simd +I-slow +O-x86_64 +perf-regression\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101060/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101060/timeline", "performed_via_github_app": null, "state_reason": null}