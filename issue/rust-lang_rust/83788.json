{"url": "https://api.github.com/repos/rust-lang/rust/issues/83788", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83788/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83788/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83788/events", "html_url": "https://github.com/rust-lang/rust/issues/83788", "id": 849330204, "node_id": "MDU6SXNzdWU4NDkzMzAyMDQ=", "number": 83788, "title": "Tracking issue for the unstable \"wasm\" ABI", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 3537250192, "node_id": "LA_kwDOAAsO6M7S1ieQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-needs-summary", "name": "S-tracking-needs-summary", "color": "4682b4", "default": false, "description": "It's hard to tell what's been done and what hasn't! Someone should do some investigation."}, {"id": 4288196623, "node_id": "LA_kwDOAAsO6M7_mLAP", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-abi", "name": "A-abi", "color": "f7e101", "default": false, "description": "Area: Concerning the \"application binary interface\" between functions."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2021-04-02T16:41:36Z", "updated_at": "2023-05-25T21:04:58Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This issue is intended to track the stabilization of the `\"wasm\"` ABI added in https://github.com/rust-lang/rust/pull/83763. This new ABI is notably different from the \"C\" ABI where the \"C\" ABI's purpose is to match whatever the C ABI for the platform is (in this case whatever clang does). The \"wasm\" ABI, however, is intended to match the WebAssembly specification and should be used for functions that need to be exported/imported from a wasm module to precisely match a desired WebAssembly signature.\r\n\r\nOne of the main features of the \"wasm\" ABI is that it automatically enables the multi-value feature in LLVM which means that functions can return more than one value. Additionally parameters are never passed indirectly and are always passed by-value when possible to ensure that what was written is what shows up in the ABI on the other end.\r\n\r\nIt's expected that one day the \"C\" ABI will be updated within clang to use multi-value, but even if that happens the ABI is likely to optimize for the performance of C itself rather than for binding the WebAssembly platform. The presence of a \"wasm\" ABI in Rust guarantees that there will always be an ABI to match the exact WebAssembly signature desired.\r\n\r\nAnother nice effect of stabilizing this ABI is that the `wasm32-unknown-unknown` target's default C ABI can be switched back to matching clang. This longstanding mismatch is due to my own personal mistake with the original definition and the reliance on the mistake in `wasm-bindgen`. Once the \"wasm\" ABI is stable, however, I can switch `wasm-bindgen` to using the \"wasm\" ABI everywhere and then the compiler can switch the default ABI of the `wasm32-unknown-unknown` target to match the C ABI of clang.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83788/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83788/timeline", "performed_via_github_app": null, "state_reason": null}