{"url": "https://api.github.com/repos/rust-lang/rust/issues/80690", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80690/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80690/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80690/events", "html_url": "https://github.com/rust-lang/rust/issues/80690", "id": 778177389, "node_id": "MDU6SXNzdWU3NzgxNzczODk=", "number": 80690, "title": "Tracking Issue for BufWriter::into_parts", "user": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2021-01-04T15:34:17Z", "updated_at": "2021-08-25T19:03:46Z", "closed_at": "2021-08-25T19:03:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(bufwriter_into_parts)]`\r\n\r\nThis is a tracking issue for `BufWriter::into_parts` and its associated error type etc.\r\n\r\nThis allows a `BufWriter` to be disassembled, and the inner writer to be recovered - without attempting to write out any buffered data (instead it is returnedt to the caller), and therefore (unlike `into_inner`) succeeding even if the underlying writer is returning errors.\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\n// std::io\r\n\r\n/// Disassembles this `BufWriter<W>`, returning the underlying writer, and any buffered but\r\n/// unwritten data.\r\nimpl<W> BufWriter<W> {\r\n    pub fn into_parts(mut self) -> (W, Result<Vec<u8>, WriterPanicked>);\r\n}\r\n\r\n/// Error newtype, wraps the buffered data, a `Vec<u8>`\r\npub struct WriterPanicked {...}\r\n\r\nimpl WriterPanicked {\r\n    pub fn into_inner(self) -> Vec<u8>;\r\n}\r\n\r\nimpl Error for WriterPanicked {...}\r\nimpl Display for WriterPanicked {...}\r\nimpl Debug for WriterPanicked {...}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: #79705 \r\n- [x] Gain experience with this API, to see if it's good\r\n- [ ] Stabilization PR with Final commenting period (FCP)\r\n\r\n### Unresolved Questions\r\n\r\n- Should `into_raw_parts` be called `into_parts`?   https://github.com/rust-lang/rust/issues/80690#issuecomment-846538005\r\n- Is there a suitable simpler API for presenting this functionality?  (I think not, see https://github.com/rust-lang/rust/pull/79705#issue-532707440)", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80690/timeline", "performed_via_github_app": null, "state_reason": "completed"}