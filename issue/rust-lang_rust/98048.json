{"url": "https://api.github.com/repos/rust-lang/rust/issues/98048", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98048/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98048/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98048/events", "html_url": "https://github.com/rust-lang/rust/issues/98048", "id": 1269157835, "node_id": "I_kwDOAAsO6M5Lpc_L", "number": 98048, "title": "Manual send implementation with partial captures produce hard to read diagnostics", "user": {"login": "mladedav", "id": 16705820, "node_id": "MDQ6VXNlcjE2NzA1ODIw", "avatar_url": "https://avatars.githubusercontent.com/u/16705820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mladedav", "html_url": "https://github.com/mladedav", "followers_url": "https://api.github.com/users/mladedav/followers", "following_url": "https://api.github.com/users/mladedav/following{/other_user}", "gists_url": "https://api.github.com/users/mladedav/gists{/gist_id}", "starred_url": "https://api.github.com/users/mladedav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mladedav/subscriptions", "organizations_url": "https://api.github.com/users/mladedav/orgs", "repos_url": "https://api.github.com/users/mladedav/repos", "events_url": "https://api.github.com/users/mladedav/events{/privacy}", "received_events_url": "https://api.github.com/users/mladedav/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-06-13T09:26:19Z", "updated_at": "2022-06-13T09:26:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: [Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=18a79c890fbd3689b2bcf57b92b50e36)\r\n\r\nThis does not compile with no features enabled but does with the `foo` feature (which forces capture of the whole object).\r\n\r\n```rust\r\nuse libc::c_void;\r\n\r\ntype Callback = extern fn(context: *mut c_void);\r\n\r\nstruct Context(*mut c_void);\r\nunsafe impl Send for Context {}\r\n\r\npub fn run(callback: Callback, context: *mut c_void) {\r\n    let context = Context(context);\r\n\r\n    let callback = move || {\r\n        #[cfg(feature = \"foo\")]\r\n        // Disjoint caapture\r\n        let _c = &context;\r\n        callback(context.0);\r\n    };\r\n\r\n    inner(callback);\r\n}\r\n\r\nfn inner<F>(_callback: F) where F: Fn() + Send + 'static {}\r\n\r\nfn main() { }\r\n\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0277]](https://doc.rust-lang.org/stable/error-index.html#E0277): `*mut c_void` cannot be sent between threads safely\r\n  --> src/main.rs:18:5\r\n   |\r\n11 |       let callback = move || {\r\n   |  ____________________-\r\n12 | |         #[cfg(feature = \"foo\")]\r\n13 | |         // Disjoint capture\r\n14 | |         let _c = &context;\r\n15 | |         callback(context.0);\r\n16 | |     };\r\n   | |_____- within this `[closure@src/main.rs:11:20: 16:6]`\r\n17 | \r\n18 |       inner(callback);\r\n   |       ^^^^^ `*mut c_void` cannot be sent between threads safely\r\n   |\r\n   = help: within `[closure@src/main.rs:11:20: 16:6]`, the trait `Send` is not implemented for `*mut c_void`\r\n   = note: required because it appears within the type `[closure@src/main.rs:11:20: 16:6]`\r\nnote: required by a bound in `inner`\r\n  --> src/main.rs:21:43\r\n   |\r\n21 | fn inner<F>(_callback: F) where F: Fn() + Send + 'static {}\r\n   |                                           ^^^^ required by this bound in `inner`\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\n   = help: within `[closure@src/main.rs:11:20: 16:6]`, the trait `Send` is not implemented for `*mut c_void` which was partially captured from context of type `Context`.\r\n   = note: required because it appears within the type `[closure@src/main.rs:11:20: 16:6]`\r\nnote: required by a bound in `inner`\r\nhelp: consider forcing capture of the whole object:\r\n15 +           _ = &context;\r\n```\r\n\r\nThe help text should be improved to make it clear why there is an issue with a type not implementing `Send` while not sending said type directly.\r\n\r\nThe only place I know to provide for additional context is [the edition guide](https://doc.rust-lang.org/edition-guide/rust-2021/disjoint-capture-in-closures.html).\r\n\r\n\r\nThis issue only exists in edition 2021 since it introduced partial captures.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98048/timeline", "performed_via_github_app": null, "state_reason": null}