{"url": "https://api.github.com/repos/rust-lang/rust/issues/85609", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85609/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85609/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85609/events", "html_url": "https://github.com/rust-lang/rust/issues/85609", "id": 899086265, "node_id": "MDU6SXNzdWU4OTkwODYyNjU=", "number": 85609, "title": "IPv4-in-IPv6 Address Support", "user": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-05-23T19:05:27Z", "updated_at": "2023-02-12T18:51:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This issue is split out of the larger discussion around stabilization of the `ip` feature (tracking issue: #27709). The focus of this issue on the question of how Rust should support IPv4-in-IPv6 adresses.\r\n\r\nThere are two ways of representing an IPv4 address in a IPv6 address:\r\n- As an IPv4-compatible IPv6 address:  `::1.2.3.4`\r\n- As an IPv4-mapped IPv6 address:  `::ffff:1.2.3.4`\r\n\r\nIPv4-compatible IPv6 addresses have been officially deprecated, see [IEFT RFC #4291 Section 2.5.5.1](https://datatracker.ietf.org/doc/html/rfc4291#section-2.5.5.1).\r\n\r\nTo convert between `Ipv4Addr` and `Ipv6Addr` there are the following methods:\r\n\r\n```rust\r\nimpl Ipv4Addr {\r\n    fn to_ipv6_mapped(&self) -> Ipv6Addr;\r\n    fn to_ipv6_compatible(&self) -> Ipv6Addr;\r\n}\r\n\r\nimpl Ipv6Addr {\r\n    fn to_ipv4(&self) -> Option<Ipv4Addr>; // supports converting both IPv4-compatible and Ipv4-mapped addresses\r\n\r\n    #[unstable]\r\n    fn to_ipv4_mapped(&self) -> Option<Ipv4Addr>; // only supports converting IPv4-mapped addresses\r\n}\r\n```\r\n\r\n## Open Problems\r\n\r\n### Converting IPv4-compatible addresses\r\n\r\nAs pointed out in (https://github.com/rust-lang/rust/pull/75019#issue-461267709) [IEFT RFC #4291 Section 2.5.5.1](https://datatracker.ietf.org/doc/html/rfc4291#section-2.5.5.1) states:\r\n> Note: The IPv4 address used in the \"IPv4-Compatible IPv6 address\" must be a globally-unique IPv4 unicast address. \r\n\r\nCurrently `to_ipv6_compatible` performs no such check. Because of this, and the fact that IPv4-compatible addresses have been deprecated it was suggested (https://github.com/rust-lang/rust/pull/75019#issuecomment-667659821) that `to_ipv6_compatible` should be deprecated. There was reservation against this (https://github.com/rust-lang/rust/pull/75019#issuecomment-667654211), and instead the docs were updated to reflect that users will almost always want to use `to_ipv6_mapped` and not `to_ipv6_compatible` (#75150).\r\n\r\nIn the other direction it was suggested to change the behaviour of `to_ipv4` to that of `to_ipv4_mapped` (https://github.com/rust-lang/rust/pull/76098#discussion_r530465408), and thus only support IPv4-mapped addresses and no longer IPv4-compatible addresses. `to_ipv4_mapped` could then be removed. Another suggestion (https://github.com/rust-lang/rust/pull/76098#discussion_r558190149) was to avoid changing the behaviour and instead stabilizie `to_ipv4_mapped` and deprecate `to_ipv4`.\r\n\r\nUnresolved: Should `to_ipv6_compatible` be changed or deprecated? Should `to_ipv4` be changed or deprecated?\r\n\r\n### Handling IPv4-in-IPv6 addresses\r\n\r\n#69772 raises the concern that other languages consider the IPv4-mapped `::ffff:127.0.0.1` to be localhost and Rust does not. This raised the broader question about which (if any) methods of `Ipv6Addr` should consider IPv4-mapped or IPv4-compatible addresses. A [tool](https://github.com/KodrAus/ipcheck) was created to check what multiple other languages were doing, however Rust offers much more helper methods than many other languages so there is often nothing to compare against. See the tool output (https://github.com/rust-lang/rust/pull/76098#issuecomment-760651861) and conclusion (https://github.com/rust-lang/rust/pull/76098#issuecomment-761234042). The results of this were:\r\n\r\n- Probably nothing should take IPv4-compatible addresses into account (https://github.com/rust-lang/rust/pull/76098#discussion_r528738546)\r\n- `is_unspecified` should not take IPv4-mapped addresses into account (https://github.com/rust-lang/rust/pull/76098#discussion_r558679462)\r\n- `is_loopback` should take IPv4-mapped addresses into account (#69772, https://github.com/rust-lang/rust/pull/76098#discussion_r528738546), see PR  #85655\r\n- For methods like `is_documentation` from the naming it unclear if we want this to mean \"any address for documentation\", and thus include IPv4 mapped addresses, or \"addresses specifically reserved for documentation as per [IETF RFC 3849](https://datatracker.ietf.org/doc/html/rfc3849)\"\r\n- For `is_global` it is also not clear what semantics we want (https://github.com/rust-lang/rust/pull/76098#discussion_r558690082)\r\n\r\nUnresolved: Nail down semantics of `is_global` and other helper methods. See also #85612 IP Utility Methods.\r\n\r\n## RFCs\r\n\r\n- IPv6 Addresses with Embedded IPv4 Addresses: [IETF RFC #4291 Section 2.5.5](https://datatracker.ietf.org/doc/html/rfc4291#section-2.5.5)\r\n- IPv6 Address Prefix Reserved for Documentation: [IETF RFC 3849](https://datatracker.ietf.org/doc/html/rfc3849)\r\n\r\n## Previous Discussion\r\n\r\n- stabilize the \"ip\" feature: [PR #66584](https://github.com/rust-lang/rust/pull/66584)\r\n- Stabilize the \"IP\" feature: [PR #76098](https://github.com/rust-lang/rust/pull/76098)\r\n- Stabilize the \"IP\" feature (continued from #76098): [PR #85585](https://github.com/rust-lang/rust/pull/85585)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85609/timeline", "performed_via_github_app": null, "state_reason": null}