{"url": "https://api.github.com/repos/rust-lang/rust/issues/83021", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83021/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83021/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83021/events", "html_url": "https://github.com/rust-lang/rust/issues/83021", "id": 829375147, "node_id": "MDU6SXNzdWU4MjkzNzUxNDc=", "number": 83021, "title": "`impl_trait_in_bindings` is a breaking change", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472505091, "node_id": "MDU6TGFiZWwxNDcyNTA1MDkx", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-impl_trait_in_bindings", "name": "F-impl_trait_in_bindings", "color": "f9c0cc", "default": false, "description": "`#![feature(impl_trait_in_bindings)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-03-11T17:41:08Z", "updated_at": "2022-05-03T08:18:24Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following program compiles without the `impl_trait_in_bindings` feature, but not with that feature. I believe this is because the way `impl_trait_in_bindings` is set up. If you look at https://github.com/rust-lang/rust/blob/9b2b02a840f358bcadef5c3ae861d2852da20b3d/compiler/rustc_typeck/src/check/gather_locals.rs#L61-L65\r\nyou can see that enabling the feature gate runs a completely different algorithm instead of emitting a feature error when the feature gate is not active. Before stabilizing `type_alias_impl_trait` we need to make sure that we change all such occurrences of feature-gate based type processing.\r\n\r\n```rust\r\n#![allow(incomplete_features)]\r\n#![feature(type_alias_impl_trait)]\r\n#![feature(impl_trait_in_bindings)]\r\nuse std::marker::PhantomData;\r\n\r\ntrait MyIndex<T> {\r\n    type O;\r\n    fn my_index(self) -> Self::O;\r\n}\r\ntrait MyFrom<T>: Sized {\r\n    type Error;\r\n    fn my_from(value: T) -> Result<Self, Self::Error>;\r\n}\r\n\r\ntrait F {}\r\nimpl F for () {}\r\ntype DummyT<T> = impl F;\r\nfn _dummy_t<T>() -> DummyT<T> {}\r\n\r\nstruct Phantom1<T>(PhantomData<T>);\r\nstruct Phantom2<T>(PhantomData<T>);\r\nstruct Scope<T>(Phantom2<DummyT<T>>);\r\n\r\nimpl<T> Scope<T> {\r\n    fn new() -> Self {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nimpl<T> MyFrom<Phantom2<T>> for Phantom1<T> {\r\n    type Error = ();\r\n    fn my_from(_: Phantom2<T>) -> Result<Self, Self::Error> {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nimpl<T: MyFrom<Phantom2<DummyT<U>>>, U> MyIndex<Phantom1<T>> for Scope<U> {\r\n    type O = T;\r\n    fn my_index(self) -> Self::O {\r\n        MyFrom::my_from(self.0).ok().unwrap()\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\r\n}\r\n\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=f926bd9df610fcdfddcf5dc5acb968cb))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0282]: type annotations needed\r\n  --> src/main.rs:45:38\r\n   |\r\n7  |     type O;\r\n   |     ------- `<Self as MyIndex<T>>::O` defined here\r\n...\r\n45 |     let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\r\n   |                                      ^^^^^^^^^^-------------\r\n   |                                      |\r\n   |                                      this method call resolves to `<Self as MyIndex<T>>::O`\r\n   |                                      cannot infer type for type parameter `T`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0282`.\r\nerror: could not compile `playground`\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83021/timeline", "performed_via_github_app": null, "state_reason": null}