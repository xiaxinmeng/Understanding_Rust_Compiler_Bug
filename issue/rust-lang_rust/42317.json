{"url": "https://api.github.com/repos/rust-lang/rust/issues/42317", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42317/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42317/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42317/events", "html_url": "https://github.com/rust-lang/rust/issues/42317", "id": 232329005, "node_id": "MDU6SXNzdWUyMzIzMjkwMDU=", "number": 42317, "title": "`cannot infer appropriate lifetime` error message is confusing", "user": {"login": "vext01", "id": 604955, "node_id": "MDQ6VXNlcjYwNDk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vext01", "html_url": "https://github.com/vext01", "followers_url": "https://api.github.com/users/vext01/followers", "following_url": "https://api.github.com/users/vext01/following{/other_user}", "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}", "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vext01/subscriptions", "organizations_url": "https://api.github.com/users/vext01/orgs", "repos_url": "https://api.github.com/users/vext01/repos", "events_url": "https://api.github.com/users/vext01/events{/privacy}", "received_events_url": "https://api.github.com/users/vext01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-30T17:43:32Z", "updated_at": "2017-06-08T13:42:27Z", "closed_at": "2017-06-07T21:15:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nThere is a class of error message which: a) is common, b) I've always been very confused by.\r\n\r\nHere's an example:\r\n\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\r\n  --> src/librustc_mir/transform/metarust_block_marker.rs:98:32\r\n   |\r\n98 |             let new_blk = self.make_callsite_block(bb, bb_data);\r\n   |                                ^^^^^^^^^^^^^^^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 91:49...\r\n  --> src/librustc_mir/transform/metarust_block_marker.rs:91:50\r\n   |\r\n91 |       fn add_callsites(&self, mir: &mut Mir<'tcx>) {\r\n   |  __________________________________________________^\r\n92 | |         // store the news blocks (which call the marker) here. There is one extra block per old\r\n93 | |         // block, and the extra block is stored at the old block's index.\r\n94 | |         let mut extra_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>> = IndexVec::new();\r\n...  |\r\n108| |         }\r\n109| |     }\r\n   | |_____^\r\nnote: ...so that reference does not outlive borrowed content\r\n  --> src/librustc_mir/transform/metarust_block_marker.rs:98:27\r\n   |\r\n98 |             let new_blk = self.make_callsite_block(bb, bb_data);\r\n   |                           ^^^^\r\nnote: but, the lifetime must be valid for the lifetime 'tcx as defined on the body at 91:49...\r\n  --> src/librustc_mir/transform/metarust_block_marker.rs:91:50\r\n   |\r\n91 |       fn add_callsites(&self, mir: &mut Mir<'tcx>) {\r\n   |  __________________________________________________^\r\n92 | |         // store the news blocks (which call the marker) here. There is one extra block per old\r\n93 | |         // block, and the extra block is stored at the old block's index.\r\n94 | |         let mut extra_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>> = IndexVec::new();\r\n...  |\r\n108| |         }\r\n109| |     }\r\n   | |_____^\r\nnote: ...so that expression is assignable (expected rustc::mir::BasicBlockData<'tcx>, found rustc::mir::BasicBlockData<'_>)\r\n  --> src/librustc_mir/transform/metarust_block_marker.rs:100:35\r\n   |\r\n100|                 extra_blocks.push(new_bb_data);\r\n   |                                   ^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nThe first issue I have is the sheer amount of information I am bombarded with. I can't keep all these details in my head while I am digesting the message.\r\n\r\nSecond, the flow of the error message and the locality of the details therein are confusing. Let me demonstrate by showing my trail of thought as I read the error:\r\n\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\r\n  --> src/librustc_mir/transform/metarust_block_marker.rs:98:32\r\n   |\r\n98 |             let new_blk = self.make_callsite_block(bb, bb_data);\r\n   |                                ^^^^^^^^^^^^^^^^^^^\r\n   |\r\n```\r\n\r\n> OK, something is wrong with the call to `make_callsite_block`.\r\n\r\n> But what's an `autoref`?\r\n\r\n```\r\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 91:49...\r\n```\r\n\r\n> What lifetime is \"the lifetime\"?\r\n\r\n> `#1` could say the lifetime name in brackets to reduce cognitive load.\r\n\r\n```\r\n  --> src/librustc_mir/transform/metarust_block_marker.rs:91:50\r\n   |\r\n91 |       fn add_callsites(&self, mir: &mut Mir<'tcx>) {\r\n   |  __________________________________________________^\r\n```\r\n\r\n> So now we are talking about a different function now. Is that the callee, or the caller of the one referenced before? Consult source code. Now where was I again?\r\n\r\n```\r\n92 | |         // store the news blocks (which call the marker) here. There is one extra block per old\r\n93 | |         // block, and the extra block is stored at the old block's index.\r\n94 | |         let mut extra_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>> = IndexVec::new();\r\n...  |\r\n108| |         }\r\n109| |     }\r\n   | |_____^\r\nnote: ...so that reference does not outlive borrowed content\r\n```\r\n\r\n> Which reference is \"that reference\"?\r\n\r\n```\r\n  --> src/librustc_mir/transform/metarust_block_marker.rs:98:27\r\n   |\r\n98 |             let new_blk = self.make_callsite_block(bb, bb_data);\r\n   |                           ^^^^\r\nnote: but, the lifetime must be valid for the lifetime 'tcx as defined on the body at 91:49...\r\n  --> src/librustc_mir/transform/metarust_block_marker.rs:91:50\r\n```\r\n\r\n> Argh! Head explodes.\r\n\r\n```\r\n   |\r\n91 |       fn add_callsites(&self, mir: &mut Mir<'tcx>) {\r\n   |  __________________________________________________^\r\n92 | |         // store the news blocks (which call the marker) here. There is one extra block per old\r\n93 | |         // block, and the extra block is stored at the old block's index.\r\n94 | |         let mut extra_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>> = IndexVec::new();\r\n...  |\r\n108| |         }\r\n109| |     }\r\n   | |_____^\r\nnote: ...so that expression is assignable (expected rustc::mir::BasicBlockData<'tcx>, found rustc::mir::BasicBlockData<'_>)\r\n  --> src/librustc_mir/transform/metarust_block_marker.rs:100:35\r\n   |\r\n100|                 extra_blocks.push(new_bb_data);\r\n   |                                   ^^^^^^^^^^^\r\n```\r\n\r\nBeing brutally honest, usually by this point I've given up trying to understand the error message and have instead resorted to brute force, adding/changing different lifetime annotations until the program compiles.\r\n\r\nI guess this relates to https://github.com/rust-lang-nursery/nomicon/issues/2, where I was trying to improve the documentation so that beginners could better understand lifetimes. Despite having written that PR, I still don't feel confident I've understood.\r\n\r\nThere has to be a more intuitive way for the compiler to explain what is wrong. Any ideas?\r\n\r\n(For context: I've been using Rust for probably 2 or 3 months, however, I am an experienced programmer in many other languages)", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42317/timeline", "performed_via_github_app": null, "state_reason": "completed"}