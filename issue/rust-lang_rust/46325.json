{"url": "https://api.github.com/repos/rust-lang/rust/issues/46325", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46325/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46325/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46325/events", "html_url": "https://github.com/rust-lang/rust/issues/46325", "id": 277337172, "node_id": "MDU6SXNzdWUyNzczMzcxNzI=", "number": 46325, "title": "Tracking issue for `coerce_never` compatibility lint", "user": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-28T10:44:00Z", "updated_at": "2018-02-28T18:10:45Z", "closed_at": "2018-02-28T18:10:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is the **summary issue** for the `coerce_never` future-compatibility warning and other related errors. The goal of this page is describe why this change was made and how you can fix code that is affected by it. It also provides a place to ask questions or register a complaint if you feel the change should not be made. For more information on the policy around future-compatibility warnings, see our [breaking change policy guidelines][guidelines].\r\n\r\n[guidelines]: https://github.com/rust-lang/rfcs/blob/master/text/1122-language-semver.md\r\n\r\n#### What is the warning for?\r\n\r\nIn Rust, if the end of a block can't be reached from the block's start (because the block contains an infinite loop, panic, or early return), you can leave out the trailing expression (which can't be reached in that case) at the end of the block, and then the block can return an arbitrary type.\r\n\r\nFor example, you can write this and give `x` every `Sized` type.\r\n```Rust\r\nfn example() {\r\n    let x: AnyTypeYouWant = {\r\n        if i_feel_like_panicking {\r\n            panic!();\r\n        } else {\r\n            return;\r\n        }\r\n        // the end of this block can't be reached. No trailing expression,\r\n        // and you can return any type you want.\r\n    };\r\n}\r\n```\r\n\r\nHowever, if you *do* write a trailing expression for the block, then it has to have the correct type - this is required to avoid some weird type inference problems:\r\n```Rust\r\nfn example() {\r\n    let x: u8 = {\r\n        panic!();\r\n        1u32 //~ ERROR mismatched types\r\n    };\r\n}\r\n```\r\n\r\nThis makes for a simple, consistent system.\r\n\r\nHowever, in previous versions of the compiler, you could let the trailing expression have the type `!`:\r\n```Rust\r\nfn example_will_break() -> ! {\r\n    panic!();\r\n    1u32 // unreachable expression\r\n}\r\n\r\n// or more practically (here the *trailing expression* can't return)\r\nfn example_will_break() -> ! {\r\n    Some(panic!()) // Option<_> is converted to !\r\n}\r\n```\r\n\r\nThat was an inconsistency, as it only worked for the type `!` specifically, rather than any other type (not even `()`, or on the other side, other empty enums). Therefore, it is being removed in preparation for `!` to be stabilized.\r\n\r\nIf you encounter this error, you can always fix it by creating a block with no trailing expression in the place of the type error, which as above can return arbitrary types:\r\n```Rust\r\nfn example_fixes() -> ! {\r\n    Some(panic!()); // now with more semicolons\r\n    // no trailing expression, this can return any type!\r\n}\r\n```\r\n\r\n#### When will this warning become a hard error?\r\n                    \r\nAt the beginning of each 6-week release cycle, the Rust compiler team will review the set of outstanding future compatibility warnings and nominate some of them for **Final Comment Period**. Toward the end of the cycle, we will review any comments and make a final determination whether to convert the warning into a hard error or remove it entirely.\r\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46325/timeline", "performed_via_github_app": null, "state_reason": "completed"}