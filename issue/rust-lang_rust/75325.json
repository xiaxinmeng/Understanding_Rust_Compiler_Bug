{"url": "https://api.github.com/repos/rust-lang/rust/issues/75325", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75325/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75325/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75325/events", "html_url": "https://github.com/rust-lang/rust/issues/75325", "id": 675678139, "node_id": "MDU6SXNzdWU2NzU2NzgxMzk=", "number": 75325, "title": "`TypeId` and Polymorphization", "user": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2263949245, "node_id": "MDU6TGFiZWwyMjYzOTQ5MjQ1", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-polymorphization", "name": "A-polymorphization", "color": "f7e101", "default": false, "description": "Area: Polymorphization"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-08-09T10:49:40Z", "updated_at": "2023-03-05T12:28:40Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "When polymorphization is enabled (`-Zpolymorphization=on`), then this can currently be observed by `TypeId`. For example, the following code when built with a polymorphization-enabled compiler will fail the asserts (and succeeds normally; [playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0fc2372645557cbbdc60f2d8d0e5be80)):\r\n\r\n```rust\r\nfn nop<T>() {}\r\n\r\nfn test_the_waters<A: 'static, B: 'static>(a: A, _: B) {\r\n    let any: Box<dyn std::any::Any> = Box::new(a);\r\n    assert!(any.downcast_ref::<A>().is_some());\r\n    assert!(any.downcast_ref::<B>().is_none());\r\n    assert!(any.downcast_ref::<fn()>().is_none());\r\n}\r\n\r\nfn main() {\r\n    test_the_waters(nop::<u32>, nop::<u64>);\r\n}\r\n```\r\n\r\nThis issue was discovered while investigating an earlier regression. After #74538 landed, the example shown below, where a polymorphized closure is indirectly passed to `TypeId`, would result in an ICE ([discussion from that investigation](https://rust-lang.zulipchat.com/#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/tokio.20regression.20%28.2374614%29/near/204662905)):\r\n\r\n```rust\r\nuse std::any::TypeId;\r\n\r\npub fn foo<T: 'static>(_: T) -> TypeId {\r\n    TypeId::of::<T>()\r\n}\r\n\r\nfn outer<T: 'static>() -> TypeId {\r\n    foo(|| ())\r\n}\r\n\r\nfn main() {\r\n    assert!(outer::<u8>() != outer::<u16>());\r\n}\r\n```\r\n\r\nIn #74717, the check introduced in #74538 was modified so that this case (and another unrelated case) would no longer ICE for polymorphized functions ([discussion regarding that PR](https://rust-lang.zulipchat.com/#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/tokio.20regression.20%28.2374614%29/near/205592381)). There have been [more recent discussion regarding this](https://rust-lang.zulipchat.com/#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/TypeId.20guarantees/near/206287053) in a dedicated Zulip topic.\r\n\r\n**Unresolved questions:**\r\n\r\n- [ ] What is the appropriate behaviour here w/r/t polymorphization?\r\n    - Current consensus appears to be that functions involving reflection cannot be polymorphized.\r\n- [ ] How do we fix this?\r\n    - Without triggering cycle errors, detecting when polymorphization is not appropriate due to later use of `TypeId` seems very challenging.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75325/timeline", "performed_via_github_app": null, "state_reason": null}