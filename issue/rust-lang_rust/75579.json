{"url": "https://api.github.com/repos/rust-lang/rust/issues/75579", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75579/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75579/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75579/events", "html_url": "https://github.com/rust-lang/rust/issues/75579", "id": 679692126, "node_id": "MDU6SXNzdWU2Nzk2OTIxMjY=", "number": 75579, "title": "ptr::align_offset generates surprisingly bad code", "user": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-16T05:24:05Z", "updated_at": "2020-10-26T09:11:40Z", "closed_at": "2020-10-26T09:11:40Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I happened to look at more closely at the generated assembly for some code that uses `align_offset`, and noticed... `align_offset` does not compile as efficiently as one might hope for the case of \"align pointer to `size_of::<usize>()`\"\r\n\r\nFor example (ignore that I omit handling of align_offset's error return value):\r\n\r\n```rust\r\npub unsafe fn align_offset(p: *const u8) -> *const u8 {\r\n    p.add(p.align_offset(core::mem::size_of::<usize>()))\r\n}\r\n```\r\n\r\ncompiles to\r\n\r\n```\r\nexample::align_offset:\r\n        movl    %edi, %ecx\r\n        andl    $7, %ecx\r\n        movl    $8, %eax\r\n        subq    %rcx, %rax\r\n        testq   %rcx, %rcx\r\n        cmoveq  %rcx, %rax\r\n        addq    %rdi, %rax\r\n        retq\r\n```\r\n\r\nWhereas performing the same alignment manually (forgive my convoluted way of doing this, my usual pattern is very slightly different and I don't have a memorized idiom for this without going through usize, since, well, I figured I just wanted to use align_offset):\r\n\r\n```rust\r\npub unsafe fn manual_align_offset(p: *const u8) -> *const u8 {\r\n    // IIRC just doing `arithmetic(p as usize) as *const u8` makes LLVM sad\r\n    let aligned = ((p as usize + USIZE_SIZE - 1) & !(USIZE_SIZE - 1)) as isize;\r\n    p.offset(aligned - (p as isize))\r\n}\r\n```\r\n\r\ncompiles to\r\n\r\n```\r\nexample::manual_align_offset:\r\n        leaq    7(%rdi), %rax\r\n        andq    $-8, %rax\r\n        retq\r\n```\r\n\r\nWhich is substantially better along a variety of metrics, including but not limited to actual runtime.\r\n\r\nTaking a look at the source for `align_offset` reveals that it uh, well it does some stuff. https://github.com/rust-lang/rust/blob/ac48e62db85e6db4bbe026490381ab205f4a614d/library/core/src/ptr/mod.rs#L1166-L1271 ... Anyway I'm just gonna take at face value that this all is needed since it tracks that sometimes you might need to GCD... And hell, maybe mine misses a case like \"`p + USIZE - 1` wraps around the address space but the aligned value wouldn't).\r\n\r\nAnyway IIUC align_offset is really considered the way forward for all pointer aligning, as miri will throw your code straight into the trash if it catches it dereferencing a pointer that you manually aligned... (I have Opinions on this but I'll spare you from a rant).\r\n\r\nSo, for that and a lot of reasons, I think we'd like the codegen for align_offset to look a lot closer to what I provided at opt-level=3, even if it means special-casing when `size_of::<T> == 1`... (I mean, I'd also love for it not to generate the whole code mountain in debug builds, but one thing at a time I guess).\r\n\r\nAnyway, the function's documentation comment tells me that @nagisa has taken up the sacred burden of \"keeper of `align_offset`'s secrets\"... I have questions: is this fixable? And if not, is there an interface that we can provide that lets us produce good code here? Am I missing something?\r\n\r\nP.S. Godbolt link: https://godbolt.org/z/388Enf", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75579/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75579/timeline", "performed_via_github_app": null, "state_reason": "completed"}