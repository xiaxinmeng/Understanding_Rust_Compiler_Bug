{"url": "https://api.github.com/repos/rust-lang/rust/issues/37784", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37784/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37784/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37784/events", "html_url": "https://github.com/rust-lang/rust/issues/37784", "id": 189472131, "node_id": "MDU6SXNzdWUxODk0NzIxMzE=", "number": 37784, "title": "Peekable's .peek() does not remember seeing a `None`", "user": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-15T18:39:11Z", "updated_at": "2016-11-22T12:39:46Z", "closed_at": "2016-11-22T12:39:46Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "If you use `iterator.peekable()`, call `.peek()` and see `None`, peekable does not remember that.\r\n\r\nThis means that the next call to either `.peek()` or `.next()` will query the underlying iterator again, making it easy to create fusing bugs. (A well behaved iterator user should not call `.next()` on a generic iterator that has already returned `None` once.)\r\n\r\nExample program which ends up being an infinite loop (the while let loop). [(playground link)](https://play.rust-lang.org/?gist=83efbe384e985edf9cc7bad650efda6f&version=stable&backtrace=1)\r\n\r\n```rust\r\n/// This is an iterator that is in line with the contract\r\n/// of the Iterator trait, but it is not fused.\r\n/// After having returned None once, it will start producing elements\r\n/// if .next() is called again.\r\npub struct CycleIter<'a, T: 'a> {\r\n    index: usize,\r\n    data: &'a [T],\r\n}\r\n\r\npub fn cycle<T>(data: &[T]) -> CycleIter<T> {\r\n    CycleIter {\r\n        index: 0,\r\n        data: data,\r\n    }\r\n}\r\n\r\nimpl<'a, T> Iterator for CycleIter<'a, T> {\r\n    type Item = &'a T;\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        let elt = self.data.get(self.index);\r\n        self.index += 1;\r\n        self.index %= 1 + self.data.len();\r\n        elt\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let data = [1, 2, 3];\r\n    // show that it works like a regular iterator\r\n    for elt in cycle(&data) {\r\n        print!(\"{}, \", elt);\r\n    }\r\n    println!(\"\");\r\n    \r\n    // Demonstrate that it's easy to create bugs with peekable\r\n    let mut iter = cycle(&data).peekable();\r\n    \r\n    while let Some(elt) = iter.next() {\r\n        let is_the_last = iter.peek().is_none();\r\n        println!(\"Saw element={}, is the last={:?}\", elt, is_the_last);\r\n    }\r\n}\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37784/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37784/timeline", "performed_via_github_app": null, "state_reason": "completed"}