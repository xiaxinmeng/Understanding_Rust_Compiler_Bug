{"url": "https://api.github.com/repos/rust-lang/rust/issues/67097", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67097/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67097/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67097/events", "html_url": "https://github.com/rust-lang/rust/issues/67097", "id": 534207083, "node_id": "MDU6SXNzdWU1MzQyMDcwODM=", "number": 67097, "title": "[rustc_codegen_ssa] Let function calls and definitions use OperandValue or custom enum instead of Bx::Value", "user": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1904923801, "node_id": "MDU6TGFiZWwxOTA0OTIzODAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-cranelift", "name": "A-cranelift", "color": "f7e101", "default": false, "description": "Things relevant to the [future] cranelift backend"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-06T19:00:43Z", "updated_at": "2020-03-12T13:51:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": ">> For example `Bx::Value` is assumed to be able to contain a pair\r\n>\r\n> I know this is offtopic but I just wanted to note that pair creation is intentionally funnelled through methods with \"immediate_or_packed_pair\" in their name, and they're limited to function inputs/outputs, for both calls and definitions (including e.g returns).\r\nThe solution there is to have an enum (or reuse `OperandValue`) which is used for e.g. `call`, `invoke`, `ret` and function params, but nothing else.\r\n\r\n_Originally posted by @eddyb in https://github.com/rust-lang/rust/pull/65881#issuecomment-562678719_\r\n\r\nThis is necessary to use cg_ssa with backends which can't represent pairs in `Bx::Value`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67097/timeline", "performed_via_github_app": null, "state_reason": null}