{"url": "https://api.github.com/repos/rust-lang/rust/issues/42047", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42047/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42047/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42047/events", "html_url": "https://github.com/rust-lang/rust/issues/42047", "id": 229156144, "node_id": "MDU6SXNzdWUyMjkxNTYxNDQ=", "number": 42047, "title": "Result-based error handling optimizes very poorly for large payloads", "user": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1448485701, "node_id": "MDU6TGFiZWwxNDQ4NDg1NzAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-error-handling", "name": "A-error-handling", "color": "f7e101", "default": false, "description": "Area: Error handling"}], "state": "open", "locked": false, "assignee": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 13, "created_at": "2017-05-16T20:17:04Z", "updated_at": "2019-11-29T15:29:47Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The overhead seems to mostly be extra memcopies.\r\n\r\n## Method\r\n\r\nI tested three cases:\r\n\r\n* `direct() -> Result<Huge, ()>`\r\n* `direct_boxed() -> Result<Box<Huge>, ()>`\r\n* `indirect(&mut Huge) -> Result<(), ()>`\r\n\r\n<details>\r\n<summary>Click For Code</summary>\r\n\r\n```rust\r\n#![feature(test, box_syntax)]\r\n\r\nextern crate test;\r\n\r\nuse std::io::{Write, Error, ErrorKind};\r\n\r\nconst DATA_SIZE: usize = 200;\r\n\r\nstruct Huge {\r\n    data: [u8; DATA_SIZE],\r\n}\r\n\r\n\r\nstruct HugeIter<'a> {\r\n    cur_val: Huge,\r\n    buf: &'a [u8],\r\n}\r\n\r\nimpl<'a> HugeIter<'a> {\r\n    fn next_direct(&mut self) -> Option<&Huge> {\r\n        if let Ok(val) = parse_huge_direct(&mut self.buf) {\r\n            self.cur_val = val;\r\n            Some(&self.cur_val)\r\n        } else {\r\n            None\r\n        }\r\n    }\r\n\r\n    fn next_indirect(&mut self) -> Option<&Huge> {\r\n        if let Ok(()) = parse_huge_indirect(&mut self.buf, &mut self.cur_val) {\r\n            Some(&self.cur_val)\r\n        } else {\r\n            None\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nstruct HugeIterBoxed<'a> {\r\n    cur_val: Box<Huge>,\r\n    buf: &'a [u8],\r\n}\r\n\r\nimpl<'a> HugeIterBoxed<'a> {\r\n    fn next_direct_boxed(&mut self) -> Option<&Huge> {\r\n        if let Ok(val) = parse_huge_direct_boxed(&mut self.buf) {\r\n            self.cur_val = val;\r\n            Some(&self.cur_val)\r\n        } else {\r\n            None\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nfn parse_huge_indirect(src: &mut &[u8], dest: &mut Huge) -> Result<(), Error> {\r\n    if src.len() < DATA_SIZE { return Err(Error::new(ErrorKind::UnexpectedEof, \"OH NO\")) }\r\n\r\n    (&mut dest.data[..]).write_all(&src[..DATA_SIZE])?;\r\n    *src = &src[DATA_SIZE..];\r\n    Ok(())\r\n}\r\n\r\nfn parse_huge_direct(src: &mut &[u8]) -> Result<Huge, Error> {\r\n    unsafe {\r\n        if src.len() < DATA_SIZE { return Err(Error::new(ErrorKind::UnexpectedEof, \"OH NO\")) }\r\n\r\n        let mut val = Huge { data: ::std::mem::uninitialized() };\r\n        (&mut val.data[..]).write_all(&src[..DATA_SIZE])?;\r\n        *src = &src[DATA_SIZE..];\r\n        Ok(val)\r\n    }\r\n}\r\n\r\nfn parse_huge_direct_boxed(src: &mut &[u8]) -> Result<Box<Huge>, Error> {\r\n    unsafe {\r\n        if src.len() < DATA_SIZE { return Err(Error::new(ErrorKind::UnexpectedEof, \"OH NO\")) }\r\n\r\n        let mut val = box Huge { data: ::std::mem::uninitialized() };\r\n        (&mut val.data[..]).write_all(&src[..DATA_SIZE])?;\r\n        *src = &src[DATA_SIZE..];\r\n        Ok(val)\r\n    }\r\n}\r\n\r\n#[bench]\r\nfn bench_direct(b: &mut test::Bencher) {\r\n    let data = test::black_box(vec![0; 1_000_000]);\r\n\r\n    b.iter(|| {\r\n        let mut iter = HugeIter { cur_val: Huge { data: [0; 200] }, buf: &data };\r\n        let mut total: u8 = 0;\r\n        while let Some(val) = iter.next_direct() {\r\n            total += val.data[..].iter().cloned().sum();\r\n        }\r\n\r\n        total\r\n    });\r\n}\r\n\r\n#[bench]\r\nfn bench_indirect(b: &mut test::Bencher) {\r\n    let data = test::black_box(vec![0; 1_000_000]);\r\n\r\n    b.iter(|| {\r\n        let mut iter = HugeIter { cur_val: Huge { data: [0; 200] }, buf: &data };\r\n        let mut total: u8 = 0;\r\n        while let Some(val) = iter.next_indirect() {\r\n            total += val.data[..].iter().cloned().sum();\r\n        }\r\n\r\n        total\r\n    });\r\n}\r\n\r\n#[bench]\r\nfn bench_direct_boxed(b: &mut test::Bencher) {\r\n    let data = test::black_box(vec![0; 1_000_000]);\r\n\r\n    b.iter(|| {\r\n        let mut iter = HugeIterBoxed { cur_val: box Huge { data: [0; 200] }, buf: &data };\r\n        let mut total: u8 = 0;\r\n        while let Some(val) = iter.next_direct_boxed() {\r\n            total += val.data[..].iter().cloned().sum();\r\n        }\r\n\r\n        total\r\n    });\r\n}\r\n```\r\n</details>\r\n\r\n\r\n## Bench Results:\r\n\r\n```\r\ntest bench_direct_boxed ... bench:     136,621 ns/iter (+/- 32,300)\r\ntest bench_direct       ... bench:     129,206 ns/iter (+/- 24,201)\r\ntest bench_indirect     ... bench:      83,301 ns/iter (+/- 21,078)\r\n```\r\n\r\n## ASM\r\n\r\n<details>\r\n<summary>ASM for bench_direct_boxed's closure</summary>\r\n\r\n```asm\r\n__ZN4test13ns_iter_inner17h91bd325045991a14E:\r\nLfunc_begin1:\r\n    .cfi_startproc\r\n    .cfi_personality 155, _rust_eh_personality\r\n    .cfi_lsda 16, Lexception1\r\n    pushq   %rbp\r\nLcfi8:\r\n    .cfi_def_cfa_offset 16\r\nLcfi9:\r\n    .cfi_offset %rbp, -16\r\n    movq    %rsp, %rbp\r\nLcfi10:\r\n    .cfi_def_cfa_register %rbp\r\n    pushq   %r15\r\n    pushq   %r14\r\n    pushq   %r13\r\n    pushq   %r12\r\n    pushq   %rbx\r\n    subq    $104, %rsp\r\nLcfi11:\r\n    .cfi_offset %rbx, -56\r\nLcfi12:\r\n    .cfi_offset %r12, -48\r\nLcfi13:\r\n    .cfi_offset %r13, -40\r\nLcfi14:\r\n    .cfi_offset %r14, -32\r\nLcfi15:\r\n    .cfi_offset %r15, -24\r\n    movq    %rsi, %rbx\r\n    movq    %rdi, -56(%rbp)\r\n    callq   __ZN3std4time7Instant3now17hc5a5b38c2510cf8bE\r\n    movq    %rax, -72(%rbp)\r\n    movq    %rbx, -48(%rbp)\r\n    testq   %rbx, %rbx\r\n    je  LBB1_13\r\n    xorl    %r15d, %r15d\r\n    .p2align    4, 0x90\r\nLBB1_2:\r\n    movl    $200, %edi\r\n    movl    $1, %esi\r\n    callq   ___rust_allocate\r\n    movq    %rax, %r14\r\n    testq   %r14, %r14\r\n    je  LBB1_25\r\n    movq    %r15, -64(%rbp)\r\n    xorl    %r13d, %r13d\r\n    xorl    %esi, %esi\r\n    movl    $200, %edx\r\n    movq    %r14, %rdi\r\n    callq   _memset\r\n    movq    -56(%rbp), %rax\r\n    movq    (%rax), %rax\r\n    movq    16(%rax), %r12\r\n    cmpq    $200, %r12\r\n    jae LBB1_14\r\n    movq    %r14, %rbx\r\n    jmp LBB1_5\r\n    .p2align    4, 0x90\r\nLBB1_14:\r\n    movq    (%rax), %r15\r\n    xorl    %r13d, %r13d\r\n    .p2align    4, 0x90\r\nLBB1_15:\r\n    movl    $200, %edi\r\n    movl    $1, %esi\r\n    callq   ___rust_allocate\r\n    movq    %rax, %rbx\r\n    testq   %rbx, %rbx\r\n    je  LBB1_16\r\n    movl    $200, %edx\r\n    movq    %rbx, %rdi\r\n    movq    %r15, %rsi\r\n    callq   _memcpy\r\n    movl    $200, %esi\r\n    movl    $1, %edx\r\n    movq    %r14, %rdi\r\n    callq   ___rust_deallocate\r\n    movdqu  (%rbx), %xmm0\r\n    movdqu  16(%rbx), %xmm1\r\n    movdqu  32(%rbx), %xmm2\r\n    movdqu  48(%rbx), %xmm3\r\n    paddb   %xmm0, %xmm2\r\n    paddb   %xmm1, %xmm3\r\n    movdqu  64(%rbx), %xmm0\r\n    movdqu  80(%rbx), %xmm1\r\n    movdqu  96(%rbx), %xmm4\r\n    movdqu  112(%rbx), %xmm5\r\n    paddb   %xmm0, %xmm4\r\n    paddb   %xmm2, %xmm4\r\n    paddb   %xmm1, %xmm5\r\n    paddb   %xmm3, %xmm5\r\n    movdqu  128(%rbx), %xmm0\r\n    movdqu  144(%rbx), %xmm1\r\n    movdqu  160(%rbx), %xmm2\r\n    movdqu  176(%rbx), %xmm3\r\n    paddb   %xmm0, %xmm2\r\n    paddb   %xmm4, %xmm2\r\n    paddb   %xmm1, %xmm3\r\n    paddb   %xmm5, %xmm3\r\n    paddb   %xmm2, %xmm3\r\n    pshufd  $78, %xmm3, %xmm0\r\n    paddb   %xmm3, %xmm0\r\n    pshufd  $229, %xmm0, %xmm1\r\n    paddb   %xmm0, %xmm1\r\n    movdqa  %xmm1, %xmm0\r\n    psrld   $16, %xmm0\r\n    paddb   %xmm1, %xmm0\r\n    movdqa  %xmm0, %xmm1\r\n    psrlw   $8, %xmm1\r\n    paddb   %xmm0, %xmm1\r\n    movdqa  %xmm1, -144(%rbp)\r\n    movzbl  192(%rbx), %eax\r\n    addb    -144(%rbp), %al\r\n    addb    193(%rbx), %al\r\n    addb    194(%rbx), %al\r\n    addb    195(%rbx), %al\r\n    addb    196(%rbx), %al\r\n    addb    197(%rbx), %al\r\n    addb    198(%rbx), %al\r\n    addb    199(%rbx), %al\r\n    addq    $200, %r15\r\n    addq    $-200, %r12\r\n    addb    %al, %r13b\r\n    cmpq    $200, %r12\r\n    movq    %rbx, %r14\r\n    jae LBB1_15\r\nLBB1_5:\r\nLtmp6:\r\n    movl    $5, %esi\r\n    leaq    _str.8(%rip), %rdi\r\n    callq   __ZN3std5error205_$LT$impl$u20$core..convert..From$LT$$RF$$u27$b$u20$str$GT$$u20$for$u20$alloc..boxed..Box$LT$std..error..Error$u20$$u2b$$u20$core..marker..Sync$u20$$u2b$$u20$core..marker..Send$u20$$u2b$$u20$$u27$a$GT$$GT$4from17hbabb0ef23dd78831E\r\n    movq    %rdx, %rcx\r\nLtmp7:\r\n    leaq    -88(%rbp), %r12\r\nLtmp8:\r\n    movl    $17, %esi\r\n    movq    %r12, %rdi\r\n    movq    %rax, %rdx\r\n    callq   __ZN3std2io5error5Error4_new17h399b6fceaf2b2ad7E\r\nLtmp9:\r\n    cmpb    $2, -88(%rbp)\r\n    movq    -64(%rbp), %r15\r\n    jb  LBB1_12\r\n    movq    -80(%rbp), %r14\r\n    movq    8(%r14), %rdi\r\n    movq    16(%r14), %rax\r\nLtmp11:\r\n    callq   *(%rax)\r\nLtmp12:\r\n    movq    16(%r14), %rax\r\n    movq    8(%rax), %rsi\r\n    testq   %rsi, %rsi\r\n    je  LBB1_11\r\n    movq    8(%r14), %rdi\r\n    movq    16(%rax), %rdx\r\n    callq   ___rust_deallocate\r\nLBB1_11:\r\n    movl    $24, %esi\r\n    movl    $8, %edx\r\n    movq    %r14, %rdi\r\n    callq   ___rust_deallocate\r\nLBB1_12:\r\n    incq    %r15\r\n    movl    $200, %esi\r\n    movl    $1, %edx\r\n    movq    %rbx, %rdi\r\n    callq   ___rust_deallocate\r\n    movb    %r13b, -88(%rbp)\r\n    ## InlineAsm Start\r\n    ## InlineAsm End\r\n    cmpq    -48(%rbp), %r15\r\n    jb  LBB1_2\r\nLBB1_13:\r\n    leaq    -104(%rbp), %rdi\r\n    leaq    -72(%rbp), %rsi\r\n    callq   __ZN3std4time7Instant7elapsed17h4a152db7d42dfbccE\r\n    movq    -104(%rbp), %rax\r\n    movl    -96(%rbp), %ecx\r\n    movq    %rax, -120(%rbp)\r\n    movl    %ecx, -112(%rbp)\r\n    leaq    -120(%rbp), %rdi\r\n    callq   __ZN4test11ns_from_dur17h77590a35c757ea7bE\r\n    addq    $104, %rsp\r\n    popq    %rbx\r\n    popq    %r12\r\n    popq    %r13\r\n    popq    %r14\r\n    popq    %r15\r\n    popq    %rbp\r\n    retq\r\nLBB1_16:\r\nLtmp3:\r\n    callq   __ZN5alloc3oom3oom17he0fcc1585169f6ffE\r\nLtmp4:\r\nLBB1_25:\r\n    callq   __ZN5alloc3oom3oom17he0fcc1585169f6ffE\r\nLBB1_23:\r\nLtmp5:\r\n    movq    %rax, %r15\r\n    movq    %r14, %rbx\r\n    jmp LBB1_24\r\nLBB1_18:\r\nLtmp13:\r\n    movq    %rax, %r15\r\n    movq    16(%r14), %rax\r\n    movq    8(%rax), %rsi\r\n    testq   %rsi, %rsi\r\n    je  LBB1_20\r\n    movq    8(%r14), %rdi\r\n    movq    16(%rax), %rdx\r\n    callq   ___rust_deallocate\r\nLBB1_20:\r\n    movl    $24, %esi\r\n    movl    $8, %edx\r\n    movq    %r14, %rdi\r\n    callq   ___rust_deallocate\r\n    jmp LBB1_24\r\nLBB1_22:\r\nLtmp10:\r\n    movq    %rax, %r15\r\nLBB1_24:\r\n    movl    $200, %esi\r\n    movl    $1, %edx\r\n    movq    %rbx, %rdi\r\n    callq   ___rust_deallocate\r\n    movq    %r15, %rdi\r\n    callq   __Unwind_Resume\r\nLfunc_end1:\r\n    .cfi_endproc\r\n    .section    __TEXT,__gcc_except_tab\r\n    .p2align    2\r\nGCC_except_table1:\r\nLexception1:\r\n    .byte   255\r\n    .byte   155\r\n    .asciz  \"\\320\"\r\n    .byte   3\r\n    .byte   78\r\nLset7 = Lfunc_begin1-Lfunc_begin1\r\n    .long   Lset7\r\nLset8 = Ltmp6-Lfunc_begin1\r\n    .long   Lset8\r\n    .long   0\r\n    .byte   0\r\nLset9 = Ltmp6-Lfunc_begin1\r\n    .long   Lset9\r\nLset10 = Ltmp9-Ltmp6\r\n    .long   Lset10\r\nLset11 = Ltmp10-Lfunc_begin1\r\n    .long   Lset11\r\n    .byte   0\r\nLset12 = Ltmp11-Lfunc_begin1\r\n    .long   Lset12\r\nLset13 = Ltmp12-Ltmp11\r\n    .long   Lset13\r\nLset14 = Ltmp13-Lfunc_begin1\r\n    .long   Lset14\r\n    .byte   0\r\nLset15 = Ltmp12-Lfunc_begin1\r\n    .long   Lset15\r\nLset16 = Ltmp3-Ltmp12\r\n    .long   Lset16\r\n    .long   0\r\n    .byte   0\r\nLset17 = Ltmp3-Lfunc_begin1\r\n    .long   Lset17\r\nLset18 = Ltmp4-Ltmp3\r\n    .long   Lset18\r\nLset19 = Ltmp5-Lfunc_begin1\r\n    .long   Lset19\r\n    .byte   0\r\nLset20 = Ltmp4-Lfunc_begin1\r\n    .long   Lset20\r\nLset21 = Lfunc_end1-Ltmp4\r\n    .long   Lset21\r\n    .long   0\r\n    .byte   0\r\n    .p2align    2\r\n\r\n    .section    __TEXT,__text,regular,pure_instructions\r\n    .p2align    4, 0x90\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n<details>\r\n<summary>ASM for bench_direct's closure</summary>\r\n\r\n```asm\r\nLfunc_begin0:\r\n    .cfi_startproc\r\n    .cfi_personality 155, _rust_eh_personality\r\n    .cfi_lsda 16, Lexception0\r\n    pushq   %rbp\r\nLcfi0:\r\n    .cfi_def_cfa_offset 16\r\nLcfi1:\r\n    .cfi_offset %rbp, -16\r\n    movq    %rsp, %rbp\r\nLcfi2:\r\n    .cfi_def_cfa_register %rbp\r\n    pushq   %r15\r\n    pushq   %r14\r\n    pushq   %r13\r\n    pushq   %r12\r\n    pushq   %rbx\r\n    subq    $520, %rsp\r\nLcfi3:\r\n    .cfi_offset %rbx, -56\r\nLcfi4:\r\n    .cfi_offset %r12, -48\r\nLcfi5:\r\n    .cfi_offset %r13, -40\r\nLcfi6:\r\n    .cfi_offset %r14, -32\r\nLcfi7:\r\n    .cfi_offset %r15, -24\r\n    movq    %rsi, %rbx\r\n    movq    %rdi, -72(%rbp)\r\n    callq   __ZN3std4time7Instant3now17hc5a5b38c2510cf8bE\r\n    movq    %rax, -96(%rbp)\r\n    movq    %rbx, -64(%rbp)\r\n    testq   %rbx, %rbx\r\n    je  LBB0_17\r\n    xorl    %eax, %eax\r\n    .p2align    4, 0x90\r\nLBB0_2:\r\n    incq    %rax\r\n    movq    %rax, -80(%rbp)\r\n    movq    -72(%rbp), %rax\r\n    movq    (%rax), %rax\r\n    movq    (%rax), %rcx\r\n    movq    16(%rax), %r14\r\n    pxor    %xmm0, %xmm0\r\n    movdqa  %xmm0, -176(%rbp)\r\n    movdqa  %xmm0, -192(%rbp)\r\n    movdqa  %xmm0, -208(%rbp)\r\n    movdqa  %xmm0, -224(%rbp)\r\n    movdqa  %xmm0, -240(%rbp)\r\n    movdqa  %xmm0, -256(%rbp)\r\n    movdqa  %xmm0, -272(%rbp)\r\n    movdqa  %xmm0, -288(%rbp)\r\n    movdqa  %xmm0, -304(%rbp)\r\n    movdqa  %xmm0, -320(%rbp)\r\n    movdqa  %xmm0, -336(%rbp)\r\n    movdqa  %xmm0, -352(%rbp)\r\n    movq    $0, -160(%rbp)\r\n    movq    %rcx, -152(%rbp)\r\n    movq    %r14, -144(%rbp)\r\n    xorl    %r15d, %r15d\r\n    cmpq    $200, %r14\r\n    jb  LBB0_7\r\n    jmp LBB0_4\r\n    .p2align    4, 0x90\r\nLBB0_6:\r\n    movdqu  (%rax), %xmm0\r\n    movdqu  16(%rax), %xmm1\r\n    movdqu  32(%rax), %xmm2\r\n    movdqu  48(%rax), %xmm3\r\n    paddb   %xmm0, %xmm2\r\n    paddb   %xmm1, %xmm3\r\n    movdqu  64(%rax), %xmm0\r\n    movdqu  80(%rax), %xmm1\r\n    movdqu  96(%rax), %xmm4\r\n    movdqu  112(%rax), %xmm5\r\n    paddb   %xmm0, %xmm4\r\n    paddb   %xmm2, %xmm4\r\n    paddb   %xmm1, %xmm5\r\n    paddb   %xmm3, %xmm5\r\n    movdqu  128(%rax), %xmm0\r\n    movdqu  144(%rax), %xmm1\r\n    movdqu  160(%rax), %xmm2\r\n    movdqu  176(%rax), %xmm3\r\n    paddb   %xmm0, %xmm2\r\n    paddb   %xmm4, %xmm2\r\n    paddb   %xmm1, %xmm3\r\n    paddb   %xmm5, %xmm3\r\n    paddb   %xmm2, %xmm3\r\n    pshufd  $78, %xmm3, %xmm0\r\n    paddb   %xmm3, %xmm0\r\n    pshufd  $229, %xmm0, %xmm1\r\n    paddb   %xmm0, %xmm1\r\n    movdqa  %xmm1, %xmm0\r\n    psrld   $16, %xmm0\r\n    paddb   %xmm1, %xmm0\r\n    movdqa  %xmm0, %xmm1\r\n    psrlw   $8, %xmm1\r\n    paddb   %xmm0, %xmm1\r\n    movdqa  %xmm1, -368(%rbp)\r\n    movzbl  192(%rax), %ecx\r\n    addb    -368(%rbp), %cl\r\n    addb    193(%rax), %cl\r\n    addb    194(%rax), %cl\r\n    addb    195(%rax), %cl\r\n    addb    196(%rax), %cl\r\n    addb    197(%rax), %cl\r\n    addb    198(%rax), %cl\r\n    addb    199(%rax), %cl\r\n    addb    %cl, %r15b\r\n    movq    -144(%rbp), %r14\r\n    cmpq    $200, %r14\r\n    jae LBB0_4\r\nLBB0_7:\r\n    movl    $5, %esi\r\n    leaq    _str.8(%rip), %rdi\r\n    callq   __ZN3std5error205_$LT$impl$u20$core..convert..From$LT$$RF$$u27$b$u20$str$GT$$u20$for$u20$alloc..boxed..Box$LT$std..error..Error$u20$$u2b$$u20$core..marker..Sync$u20$$u2b$$u20$core..marker..Send$u20$$u2b$$u20$$u27$a$GT$$GT$4from17hbabb0ef23dd78831E\r\n    movq    %rdx, %rcx\r\n    movl    $17, %esi\r\n    leaq    -552(%rbp), %rdi\r\n    movq    %rax, %rdx\r\n    callq   __ZN3std2io5error5Error4_new17h399b6fceaf2b2ad7E\r\n    movzbl  -552(%rbp), %eax\r\n    leaq    -551(%rbp), %rcx\r\n    movq    %rcx, %rdx\r\n    movzbl  6(%rdx), %ecx\r\n    movb    %cl, -42(%rbp)\r\n    movzwl  4(%rdx), %ecx\r\n    movw    %cx, -44(%rbp)\r\n    movl    (%rdx), %ecx\r\n    movl    %ecx, -48(%rbp)\r\n    cmpb    $2, %al\r\n    jb  LBB0_12\r\n    movq    -544(%rbp), %r14\r\n    movq    8(%r14), %rdi\r\n    movq    16(%r14), %rax\r\nLtmp0:\r\n    callq   *(%rax)\r\nLtmp1:\r\n    movq    16(%r14), %rax\r\n    movq    8(%rax), %rsi\r\n    testq   %rsi, %rsi\r\n    je  LBB0_11\r\n    movq    8(%r14), %rdi\r\n    movq    16(%rax), %rdx\r\n    callq   ___rust_deallocate\r\nLBB0_11:\r\n    movl    $24, %esi\r\n    movl    $8, %edx\r\n    movq    %r14, %rdi\r\n    callq   ___rust_deallocate\r\nLBB0_12:\r\n    xorl    %eax, %eax\r\n    testq   %rax, %rax\r\n    jne LBB0_6\r\n    jmp LBB0_16\r\n    .p2align    4, 0x90\r\nLBB0_4:\r\n    movq    -152(%rbp), %rbx\r\n    movzbl  6(%rbx), %eax\r\n    movb    %al, -50(%rbp)\r\n    movzwl  4(%rbx), %eax\r\n    movw    %ax, -52(%rbp)\r\n    movl    (%rbx), %eax\r\n    movl    %eax, -56(%rbp)\r\n    movzbl  7(%rbx), %r12d\r\n    movzbl  14(%rbx), %eax\r\n    movb    %al, -42(%rbp)\r\n    movzwl  12(%rbx), %eax\r\n    movw    %ax, -44(%rbp)\r\n    movl    8(%rbx), %eax\r\n    movl    %eax, -48(%rbp)\r\n    movq    15(%rbx), %rax\r\n    movq    %rax, -88(%rbp)\r\n    leaq    23(%rbx), %rsi\r\n    movl    $177, %edx\r\n    leaq    -552(%rbp), %r13\r\n    movq    %r13, %rdi\r\n    callq   _memcpy\r\n    addq    $200, %rbx\r\n    addq    $-200, %r14\r\n    movq    %rbx, -152(%rbp)\r\n    movq    %r14, -144(%rbp)\r\n    movzbl  -50(%rbp), %eax\r\n    movb    %al, -346(%rbp)\r\n    movzwl  -52(%rbp), %eax\r\n    movw    %ax, -348(%rbp)\r\n    movl    -56(%rbp), %eax\r\n    movl    %eax, -352(%rbp)\r\n    movb    %r12b, -345(%rbp)\r\n    movzbl  -42(%rbp), %eax\r\n    leaq    -344(%rbp), %rcx\r\n    movb    %al, 6(%rcx)\r\n    movzwl  -44(%rbp), %eax\r\n    movw    %ax, 4(%rcx)\r\n    movl    -48(%rbp), %eax\r\n    movl    %eax, (%rcx)\r\n    movq    -88(%rbp), %rax\r\n    movq    %rax, -337(%rbp)\r\n    movl    $177, %edx\r\n    leaq    -329(%rbp), %rdi\r\n    movq    %r13, %rsi\r\n    callq   _memcpy\r\n    leaq    -352(%rbp), %rax\r\n    testq   %rax, %rax\r\n    jne LBB0_6\r\nLBB0_16:\r\n    movb    %r15b, -352(%rbp)\r\n    leaq    -352(%rbp), %rax\r\n    ## InlineAsm Start\r\n    ## InlineAsm End\r\n    movq    -80(%rbp), %rax\r\n    cmpq    -64(%rbp), %rax\r\n    jb  LBB0_2\r\nLBB0_17:\r\n    leaq    -112(%rbp), %rdi\r\n    leaq    -96(%rbp), %rsi\r\n    callq   __ZN3std4time7Instant7elapsed17h4a152db7d42dfbccE\r\n    movq    -112(%rbp), %rax\r\n    movl    -104(%rbp), %ecx\r\n    movq    %rax, -128(%rbp)\r\n    movl    %ecx, -120(%rbp)\r\n    leaq    -128(%rbp), %rdi\r\n    callq   __ZN4test11ns_from_dur17h77590a35c757ea7bE\r\n    addq    $520, %rsp\r\n    popq    %rbx\r\n    popq    %r12\r\n    popq    %r13\r\n    popq    %r14\r\n    popq    %r15\r\n    popq    %rbp\r\n    retq\r\nLBB0_13:\r\nLtmp2:\r\n    movq    %rax, %rbx\r\n    movq    16(%r14), %rax\r\n    movq    8(%rax), %rsi\r\n    testq   %rsi, %rsi\r\n    je  LBB0_15\r\n    movq    8(%r14), %rdi\r\n    movq    16(%rax), %rdx\r\n    callq   ___rust_deallocate\r\nLBB0_15:\r\n    movl    $24, %esi\r\n    movl    $8, %edx\r\n    movq    %r14, %rdi\r\n    callq   ___rust_deallocate\r\n    movq    %rbx, %rdi\r\n    callq   __Unwind_Resume\r\nLfunc_end0:\r\n    .cfi_endproc\r\n    .section    __TEXT,__gcc_except_tab\r\n    .p2align    2\r\nGCC_except_table0:\r\nLexception0:\r\n    .byte   255\r\n    .byte   155\r\n    .byte   41\r\n    .byte   3\r\n    .byte   39\r\nLset0 = Lfunc_begin0-Lfunc_begin0\r\n    .long   Lset0\r\nLset1 = Ltmp0-Lfunc_begin0\r\n    .long   Lset1\r\n    .long   0\r\n    .byte   0\r\nLset2 = Ltmp0-Lfunc_begin0\r\n    .long   Lset2\r\nLset3 = Ltmp1-Ltmp0\r\n    .long   Lset3\r\nLset4 = Ltmp2-Lfunc_begin0\r\n    .long   Lset4\r\n    .byte   0\r\nLset5 = Ltmp1-Lfunc_begin0\r\n    .long   Lset5\r\nLset6 = Lfunc_end0-Ltmp1\r\n    .long   Lset6\r\n    .long   0\r\n    .byte   0\r\n    .p2align    2\r\n\r\n    .section    __TEXT,__text,regular,pure_instructions\r\n    .p2align    4, 0x90\r\n\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n<details>\r\n<summary>ASM for bench_indirect's closure</summary>\r\n\r\n```asm\r\n__ZN4test13ns_iter_inner17hba96d7af2bd3d26cE:\r\nLfunc_begin2:\r\n    .cfi_startproc\r\n    .cfi_personality 155, _rust_eh_personality\r\n    .cfi_lsda 16, Lexception2\r\n    pushq   %rbp\r\nLcfi16:\r\n    .cfi_def_cfa_offset 16\r\nLcfi17:\r\n    .cfi_offset %rbp, -16\r\n    movq    %rsp, %rbp\r\nLcfi18:\r\n    .cfi_def_cfa_register %rbp\r\n    pushq   %r15\r\n    pushq   %r14\r\n    pushq   %r13\r\n    pushq   %r12\r\n    pushq   %rbx\r\n    subq    $312, %rsp\r\nLcfi19:\r\n    .cfi_offset %rbx, -56\r\nLcfi20:\r\n    .cfi_offset %r12, -48\r\nLcfi21:\r\n    .cfi_offset %r13, -40\r\nLcfi22:\r\n    .cfi_offset %r14, -32\r\nLcfi23:\r\n    .cfi_offset %r15, -24\r\n    movq    %rsi, %rbx\r\n    movq    %rdi, -56(%rbp)\r\n    callq   __ZN3std4time7Instant3now17hc5a5b38c2510cf8bE\r\n    movq    %rax, -64(%rbp)\r\n    movq    %rbx, -48(%rbp)\r\n    testq   %rbx, %rbx\r\n    je  LBB2_9\r\n    xorl    %r14d, %r14d\r\n    leaq    -336(%rbp), %r12\r\n    .p2align    4, 0x90\r\nLBB2_2:\r\n    movq    -56(%rbp), %rax\r\n    movq    (%rax), %rax\r\n    movq    (%rax), %r15\r\n    movq    16(%rax), %rbx\r\n    pxor    %xmm0, %xmm0\r\n    movdqa  %xmm0, -160(%rbp)\r\n    movdqa  %xmm0, -176(%rbp)\r\n    movdqa  %xmm0, -192(%rbp)\r\n    movdqa  %xmm0, -208(%rbp)\r\n    movdqa  %xmm0, -224(%rbp)\r\n    movdqa  %xmm0, -240(%rbp)\r\n    movdqa  %xmm0, -256(%rbp)\r\n    movdqa  %xmm0, -272(%rbp)\r\n    movdqa  %xmm0, -288(%rbp)\r\n    movdqa  %xmm0, -304(%rbp)\r\n    movdqa  %xmm0, -320(%rbp)\r\n    movdqa  %xmm0, -336(%rbp)\r\n    movq    $0, -144(%rbp)\r\n    movq    %r15, -136(%rbp)\r\n    movq    %rbx, -128(%rbp)\r\n    xorl    %r13d, %r13d\r\n    cmpq    $199, %rbx\r\n    jbe LBB2_3\r\n    .p2align    4, 0x90\r\nLBB2_13:\r\n    movl    $200, %edx\r\n    movq    %r12, %rdi\r\n    movq    %r15, %rsi\r\n    callq   _memcpy\r\n    addq    $200, %r15\r\n    addq    $-200, %rbx\r\n    movq    %r15, -136(%rbp)\r\n    movq    %rbx, -128(%rbp)\r\n    movdqa  -304(%rbp), %xmm0\r\n    movdqa  -288(%rbp), %xmm1\r\n    paddb   -336(%rbp), %xmm0\r\n    paddb   -320(%rbp), %xmm1\r\n    paddb   -272(%rbp), %xmm0\r\n    paddb   -256(%rbp), %xmm1\r\n    paddb   -240(%rbp), %xmm0\r\n    paddb   -224(%rbp), %xmm1\r\n    paddb   -208(%rbp), %xmm0\r\n    paddb   -192(%rbp), %xmm1\r\n    paddb   -176(%rbp), %xmm0\r\n    paddb   -160(%rbp), %xmm1\r\n    paddb   %xmm0, %xmm1\r\n    pshufd  $78, %xmm1, %xmm0\r\n    paddb   %xmm1, %xmm0\r\n    pshufd  $229, %xmm0, %xmm1\r\n    paddb   %xmm0, %xmm1\r\n    movdqa  %xmm1, %xmm0\r\n    psrld   $16, %xmm0\r\n    paddb   %xmm1, %xmm0\r\n    movdqa  %xmm0, %xmm1\r\n    psrlw   $8, %xmm1\r\n    paddb   %xmm0, %xmm1\r\n    movdqa  %xmm1, -352(%rbp)\r\n    movzbl  -144(%rbp), %eax\r\n    addb    -352(%rbp), %al\r\n    addb    -143(%rbp), %al\r\n    addb    -142(%rbp), %al\r\n    addb    -141(%rbp), %al\r\n    addb    -140(%rbp), %al\r\n    addb    -139(%rbp), %al\r\n    addb    -138(%rbp), %al\r\n    addb    -137(%rbp), %al\r\n    addb    %al, %r13b\r\n    cmpq    $200, %rbx\r\n    jae LBB2_13\r\nLBB2_3:\r\n    movl    $5, %esi\r\n    leaq    _str.8(%rip), %rdi\r\n    callq   __ZN3std5error205_$LT$impl$u20$core..convert..From$LT$$RF$$u27$b$u20$str$GT$$u20$for$u20$alloc..boxed..Box$LT$std..error..Error$u20$$u2b$$u20$core..marker..Sync$u20$$u2b$$u20$core..marker..Send$u20$$u2b$$u20$$u27$a$GT$$GT$4from17hbabb0ef23dd78831E\r\n    movq    %rdx, %rcx\r\n    movl    $17, %esi\r\n    leaq    -112(%rbp), %rdi\r\n    movq    %rax, %rdx\r\n    callq   __ZN3std2io5error5Error4_new17h399b6fceaf2b2ad7E\r\n    cmpb    $2, -112(%rbp)\r\n    jb  LBB2_8\r\n    movq    -104(%rbp), %rbx\r\n    movq    8(%rbx), %rdi\r\n    movq    16(%rbx), %rax\r\nLtmp14:\r\n    callq   *(%rax)\r\nLtmp15:\r\n    movq    16(%rbx), %rax\r\n    movq    8(%rax), %rsi\r\n    testq   %rsi, %rsi\r\n    je  LBB2_7\r\n    movq    8(%rbx), %rdi\r\n    movq    16(%rax), %rdx\r\n    callq   ___rust_deallocate\r\nLBB2_7:\r\n    movl    $24, %esi\r\n    movl    $8, %edx\r\n    movq    %rbx, %rdi\r\n    callq   ___rust_deallocate\r\nLBB2_8:\r\n    incq    %r14\r\n    movb    %r13b, -336(%rbp)\r\n    ## InlineAsm Start\r\n    ## InlineAsm End\r\n    cmpq    -48(%rbp), %r14\r\n    jb  LBB2_2\r\nLBB2_9:\r\n    leaq    -80(%rbp), %rdi\r\n    leaq    -64(%rbp), %rsi\r\n    callq   __ZN3std4time7Instant7elapsed17h4a152db7d42dfbccE\r\n    movq    -80(%rbp), %rax\r\n    movl    -72(%rbp), %ecx\r\n    movq    %rax, -96(%rbp)\r\n    movl    %ecx, -88(%rbp)\r\n    leaq    -96(%rbp), %rdi\r\n    callq   __ZN4test11ns_from_dur17h77590a35c757ea7bE\r\n    addq    $312, %rsp\r\n    popq    %rbx\r\n    popq    %r12\r\n    popq    %r13\r\n    popq    %r14\r\n    popq    %r15\r\n    popq    %rbp\r\n    retq\r\nLBB2_10:\r\nLtmp16:\r\n    movq    %rax, %r14\r\n    movq    16(%rbx), %rax\r\n    movq    8(%rax), %rsi\r\n    testq   %rsi, %rsi\r\n    je  LBB2_12\r\n    movq    8(%rbx), %rdi\r\n    movq    16(%rax), %rdx\r\n    callq   ___rust_deallocate\r\nLBB2_12:\r\n    movl    $24, %esi\r\n    movl    $8, %edx\r\n    movq    %rbx, %rdi\r\n    callq   ___rust_deallocate\r\n    movq    %r14, %rdi\r\n    callq   __Unwind_Resume\r\nLfunc_end2:\r\n    .cfi_endproc\r\n    .section    __TEXT,__gcc_except_tab\r\n    .p2align    2\r\nGCC_except_table2:\r\nLexception2:\r\n    .byte   255\r\n    .byte   155\r\n    .byte   41\r\n    .byte   3\r\n    .byte   39\r\nLset22 = Lfunc_begin2-Lfunc_begin2\r\n    .long   Lset22\r\nLset23 = Ltmp14-Lfunc_begin2\r\n    .long   Lset23\r\n    .long   0\r\n    .byte   0\r\nLset24 = Ltmp14-Lfunc_begin2\r\n    .long   Lset24\r\nLset25 = Ltmp15-Ltmp14\r\n    .long   Lset25\r\nLset26 = Ltmp16-Lfunc_begin2\r\n    .long   Lset26\r\n    .byte   0\r\nLset27 = Ltmp15-Lfunc_begin2\r\n    .long   Lset27\r\nLset28 = Lfunc_end2-Ltmp15\r\n    .long   Lset28\r\n    .long   0\r\n    .byte   0\r\n    .p2align    2\r\n\r\n    .section    __TEXT,__literal16,16byte_literals\r\n    .p2align    4\r\nLCPI3_0:\r\n    .long   1127219200\r\n    .long   1160773632\r\n    .long   0\r\n    .long   0\r\nLCPI3_1:\r\n    .quad   4841369599423283200\r\n    .quad   4985484787499139072\r\n    .section    __TEXT,__literal8,8byte_literals\r\n    .p2align    3\r\nLCPI3_2:\r\n    .quad   4617315517961601024\r\nLCPI3_3:\r\n    .quad   4607182418800017408\r\n    .section    __TEXT,__text,regular,pure_instructions\r\n    .p2align    4, 0x90\r\n```\r\n\r\n</details>", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42047/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42047/timeline", "performed_via_github_app": null, "state_reason": null}