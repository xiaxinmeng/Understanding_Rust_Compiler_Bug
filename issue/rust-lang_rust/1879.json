{"url": "https://api.github.com/repos/rust-lang/rust/issues/1879", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/1879/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/1879/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/1879/events", "html_url": "https://github.com/rust-lang/rust/issues/1879", "id": 3325735, "node_id": "MDU6SXNzdWUzMzI1NzM1", "number": 1879, "title": "support LLVM subtargets", "user": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 116993, "node_id": "MDU6TGFiZWwxMTY5OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-driver", "name": "A-driver", "color": "f7e101", "default": false, "description": "Area: rustc_driver that ties everything together into the `rustc` compiler"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-02-22T01:29:01Z", "updated_at": "2014-06-16T21:56:21Z", "closed_at": "2013-04-23T01:43:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently we generate code for LLVM targets with target-specific features (subtargets, use of specific ISA features) on or off based on defaults. In some cases the defaults are ok, sometimes they're sniffed from the host (!) but in any case the user has no way to do something like \"build me an x86 binary with no SSE\".\n\nThis matters for old hardware, and will matter much more when targeting phones.\n\nAlso the bots should be modified to build snapshots using the _narrowest_ subtarget they can specify, so we can support self-hosting on the oldest hardware people happen to have. This was hit when @andrewjbaker tried to build stage1 on an older AMD Socket-A (pre-SSE2) chip. It's old but it's not _that_ old. We should continue to at least work there.\n\nThis piece has some driver work and some convert-to-strings-that-LLVM-understands work.\n\nThe driver work consists of taking `-m<foo>` and `-mno-<foo>` flags on the command line for individual CPU features, as well as `-march=<foo>`, `-mcpu=<cpu>` and `-mabi=<abi>` abbreviations that set `-m<foo>` feature flags collectively by more friendly arch/cpu names.\n\nTake a look in clang's command-line options file as well as its target file that translates down to LLVM-specific features. This is currently a jumble. Everyone knows it's a jumble. Rationalizing it will take a lot of work and we can't do it ahead of a drive to do so on the part of the LLVM and clang maintainers. We're along for the ride.\n\nLook at, say, `X86TargetInfo` in:\n\nhttp://llvm.org/viewvc/llvm-project/cfe/trunk/lib/Basic/Targets.cpp?view=markup\n\nAnd the various `-mfoo` flags in:\nhttp://llvm.org/viewvc/llvm-project/cfe/trunk/include/clang/Driver/Options.td?view=markup\n\nhttp://nondot.org/sabre/LLVMNotes/TargetSpec.txt\n", "closed_by": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/1879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/1879/timeline", "performed_via_github_app": null, "state_reason": "completed"}