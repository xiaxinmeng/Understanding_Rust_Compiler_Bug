{"url": "https://api.github.com/repos/rust-lang/rust/issues/93122", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93122/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93122/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93122/events", "html_url": "https://github.com/rust-lang/rust/issues/93122", "id": 1109548615, "node_id": "I_kwDOAAsO6M5CIl5H", "number": 93122, "title": "Error message for trying to bind range of units to unit suggests invalid code", "user": {"login": "AnthonyMikh", "id": 19252795, "node_id": "MDQ6VXNlcjE5MjUyNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/19252795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnthonyMikh", "html_url": "https://github.com/AnthonyMikh", "followers_url": "https://api.github.com/users/AnthonyMikh/followers", "following_url": "https://api.github.com/users/AnthonyMikh/following{/other_user}", "gists_url": "https://api.github.com/users/AnthonyMikh/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnthonyMikh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnthonyMikh/subscriptions", "organizations_url": "https://api.github.com/users/AnthonyMikh/orgs", "repos_url": "https://api.github.com/users/AnthonyMikh/repos", "events_url": "https://api.github.com/users/AnthonyMikh/events{/privacy}", "received_events_url": "https://api.github.com/users/AnthonyMikh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-01-20T17:01:21Z", "updated_at": "2022-05-29T02:43:10Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the [following code](https://play.rust-lang.org/?code=fn%20g%28%29%20%7B%0A%20%20%20%20let%20%28%29%20%3D%20%28%29..%3B%0A%20%20%20%20let%20%28%29%20%3D%20..%28%29%3B%0A%20%20%20%20let%20%28%29%20%3D%20..%3D%28%29%3B%0A%20%20%20%20let%20%28%29%20%3D%20%28%29..%28%29%3B%0A%20%20%20%20let%20%28%29%20%3D%20%28%29..%3D%28%29%3B%0A%7D):\r\n\r\n```rust\r\nfn g() {\r\n    let () = ()..;\r\n    let () = ..();\r\n    let () = ..=();\r\n    let () = ()..();\r\n    let () = ()..=();\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n<details>\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:2:9\r\n  |\r\n2 |     let () = ()..;\r\n  |         ^^   ---- this expression has type `RangeFrom<()>`\r\n  |         |\r\n  |         expected struct `RangeFrom`, found `()`\r\n  |\r\n  = note: expected struct `RangeFrom<()>`\r\n          found unit type `()`\r\nhelp: you might have meant to use field `start` whose type is `()`\r\n  |\r\n2 |     let () = ()...start;\r\n  |              ~~~~~~~~~~\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:3:9\r\n  |\r\n3 |     let () = ..();\r\n  |         ^^   ---- this expression has type `RangeTo<()>`\r\n  |         |\r\n  |         expected struct `RangeTo`, found `()`\r\n  |\r\n  = note: expected struct `RangeTo<()>`\r\n          found unit type `()`\r\nhelp: you might have meant to use field `end` whose type is `()`\r\n  |\r\n3 |     let () = ..().end;\r\n  |              ~~~~~~~~\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:4:9\r\n  |\r\n4 |     let () = ..=();\r\n  |         ^^   ----- this expression has type `RangeToInclusive<()>`\r\n  |         |\r\n  |         expected struct `RangeToInclusive`, found `()`\r\n  |\r\n  = note: expected struct `RangeToInclusive<()>`\r\n          found unit type `()`\r\nhelp: you might have meant to use field `end` whose type is `()`\r\n  |\r\n4 |     let () = ..=().end;\r\n  |              ~~~~~~~~~\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:5:9\r\n  |\r\n5 |     let () = ()..();\r\n  |         ^^   ------ this expression has type `std::ops::Range<()>`\r\n  |         |\r\n  |         expected struct `std::ops::Range`, found `()`\r\n  |\r\n  = note: expected struct `std::ops::Range<()>`\r\n          found unit type `()`\r\nhelp: you might have meant to use field `start` whose type is `()`\r\n  |\r\n5 |     let () = ()..().start;\r\n  |              ~~~~~~~~~~~~\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:6:9\r\n  |\r\n6 |     let () = ()..=();\r\n  |         ^^   ------- this expression has type `RangeInclusive<()>`\r\n  |         |\r\n  |         expected struct `RangeInclusive`, found `()`\r\n  |\r\n  = note: expected struct `RangeInclusive<()>`\r\n          found unit type `()`\r\nhelp: you might have meant to use field `start` whose type is `()`\r\n  |\r\n6 |     let () = ()..=().start;\r\n  |              ~~~~~~~~~~~~~\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground` due to 5 previous errors\r\n```\r\n\r\n</details>\r\n\r\nBlindly applying all the suggestions would lead to:\r\n\r\n```rust\r\nfn g() {\r\n    let () = ()...start;\r\n    let () = ..().end;\r\n    let () = ..=().end;\r\n    let () = ()..().start;\r\n    let () = ()..=().start;\r\n}\r\n```\r\n\r\n...which is obviously syntactically invalid.\r\n\r\nIdeally the output should account for required parenthesis and look like:\r\n\r\n<details>\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:2:9\r\n  |\r\n2 |     let () = ()..;\r\n  |         ^^   ---- this expression has type `RangeFrom<()>`\r\n  |         |\r\n  |         expected struct `RangeFrom`, found `()`\r\n  |\r\n  = note: expected struct `RangeFrom<()>`\r\n          found unit type `()`\r\nhelp: you might have meant to use field `start` whose type is `()`\r\n  |\r\n2 |     let () = (()..).start;\r\n  |              ~~~~~~~~~~~~\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:3:9\r\n  |\r\n3 |     let () = ..();\r\n  |         ^^   ---- this expression has type `RangeTo<()>`\r\n  |         |\r\n  |         expected struct `RangeTo`, found `()`\r\n  |\r\n  = note: expected struct `RangeTo<()>`\r\n          found unit type `()`\r\nhelp: you might have meant to use field `end` whose type is `()`\r\n  |\r\n3 |     let () = (..()).end;\r\n  |              ~~~~~~~~~~\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:4:9\r\n  |\r\n4 |     let () = ..=();\r\n  |         ^^   ----- this expression has type `RangeToInclusive<()>`\r\n  |         |\r\n  |         expected struct `RangeToInclusive`, found `()`\r\n  |\r\n  = note: expected struct `RangeToInclusive<()>`\r\n          found unit type `()`\r\nhelp: you might have meant to use field `end` whose type is `()`\r\n  |\r\n4 |     let () = (..=()).end;\r\n  |              ~~~~~~~~~~~\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:5:9\r\n  |\r\n5 |     let () = ()..();\r\n  |         ^^   ------ this expression has type `std::ops::Range<()>`\r\n  |         |\r\n  |         expected struct `std::ops::Range`, found `()`\r\n  |\r\n  = note: expected struct `std::ops::Range<()>`\r\n          found unit type `()`\r\nhelp: you might have meant to use field `start` whose type is `()`\r\n  |\r\n5 |     let () = (()..()).start;\r\n  |              ~~~~~~~~~~~~~~\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:6:9\r\n  |\r\n6 |     let () = ()..=();\r\n  |         ^^   ------- this expression has type `RangeInclusive<()>`\r\n  |         |\r\n  |         expected struct `RangeInclusive`, found `()`\r\n  |\r\n  = note: expected struct `RangeInclusive<()>`\r\n          found unit type `()`\r\nhelp: you might have meant to use field `start` whose type is `()`\r\n  |\r\n6 |     let () = (()..=()).start;\r\n  |              ~~~~~~~~~~~~~~~\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground` due to 5 previous errors\r\n```\r\n\r\n</details>\r\n\r\nThis issue is reproducible on stable versions from 1.51.0 to 1.58.0, latest beta (`rustc 1.59.0-beta.1 (7c0b25092 2022-01-13)`) and latest nightly (`rustc 1.60.0-nightly (9ad5d82f8 2022-01-18)`) at the moment.\r\n\r\n<details><summary>Some other things about this bug</summary>\r\n\r\n* Running compiler on \"fixed\" program leads to error message which suggests adding _even more_ field accesses.\r\n* It seems like it is required to bind value to unit pattern in order to trigger the bug. Other ways to require unit value that I tried (binding to a wildcard pattern with unit type type ascription, calling with a function with excepts a unit argument, returning range from a unit returning function) do not work.\r\n* It seems like it breaks only with units and not with any other type.\r\n\r\n</details>\r\n\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"terrarier2111\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93122/timeline", "performed_via_github_app": null, "state_reason": null}