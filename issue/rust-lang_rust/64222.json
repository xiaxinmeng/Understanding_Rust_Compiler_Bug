{"url": "https://api.github.com/repos/rust-lang/rust/issues/64222", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/64222/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/64222/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/64222/events", "html_url": "https://github.com/rust-lang/rust/issues/64222", "id": 490365441, "node_id": "MDU6SXNzdWU0OTAzNjU0NDE=", "number": 64222, "title": "Missed optimization: catch_unwind not removed when closure never unwinds", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-06T14:41:55Z", "updated_at": "2020-03-14T02:02:27Z", "closed_at": "2020-03-14T02:02:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider this C++ code (https://gcc.godbolt.org/z/iaSj6g) \r\n\r\n```c++\r\nextern \"C\" void foo() noexcept;\r\n\r\nint bar() {\r\n    try {\r\n        foo();\r\n        return 42;\r\n    } catch(...) {\r\n        return 13;\r\n    }\r\n}\r\n```\r\n\r\nwhich gets optimized to:\r\n\r\n```asm\r\nbar():                                # @bar()\r\n        push    rax\r\n        call    foo\r\n        mov     eax, 42\r\n        pop     rcx\r\n        ret\r\n```\r\n\r\nNow consider the semantically identical Rust code (https://gcc.godbolt.org/z/2tXtOM):\r\n\r\n```rust\r\n#![feature(unwind_attributes)]\r\n\r\nextern \"C\" {\r\n    // never unwinds:\r\n    #[unwind(abort)] fn foo(); \r\n}\r\n\r\npub unsafe fn bar() -> i32 {\r\n    std::panic::catch_unwind(|| { foo(); 42 }).unwrap_or(13)\r\n}\r\n```\r\n\r\nwhich generates (https://gcc.godbolt.org/z/fzSBl7 - note: to workaround `#[unwind(abort)]` currently not emitting `nounwind` I've added the attributes manually to the Rust output and piped the output through opt -O3 before piping it to llc -O3):\r\n\r\n```asm\r\n;; this is only a small part of what it generates\r\nexample::bar: # @example::bar\r\n  push rbp\r\n  push r14\r\n  push rbx\r\n  sub rsp, 32\r\n  mov qword ptr [rsp + 16], 0\r\n  mov qword ptr [rsp + 24], 0\r\n  lea rsi, [rsp + 12]\r\n  lea rdx, [rsp + 16]\r\n  lea rcx, [rsp + 24]\r\n  mov edi, offset std::panicking::try::do_call\r\n  call qword ptr [rip + __rust_maybe_catch_panic@GOTPCREL]\r\n  test eax, eax\r\n  je .LBB2_1\r\n  mov rdi, -1\r\n  call qword ptr [rip + std::panicking::update_panic_count@GOTPCREL]\r\n  mov r14, qword ptr [rsp + 16]\r\n  mov rbx, qword ptr [rsp + 24]\r\n  mov rdi, r14\r\n  call qword ptr [rbx]\r\n  mov rsi, qword ptr [rbx + 8]\r\n  mov ebp, 13\r\n  test rsi, rsi\r\n  je .LBB2_5\r\n  mov rdx, qword ptr [rbx + 16]\r\n  mov rdi, r14\r\n  call qword ptr [rip + __rust_dealloc@GOTPCREL]\r\n  jmp .LBB2_5\r\n.LBB2_1: # %_ZN3std5panic12catch_unwind17h19eaab96d48c9410E.exit\r\n  mov ebp, dword ptr [rsp + 12]\r\n.LBB2_5: # %\"_ZN4core6result19Result$LT$T$C$E$GT$9unwrap_or17hd512dca21f83b98fE.exit\"\r\n  mov eax, ebp\r\n  add rsp, 32\r\n  pop rbx\r\n  pop r14\r\n  pop rbp\r\n  ret\r\n  mov rbp, rax\r\n  mov rdi, r14\r\n  mov rsi, rbx\r\n  call alloc::alloc::box_free\r\n  mov rdi, rbp\r\n  call _Unwind_Resume\r\n```\r\n\r\nRemoving the unnecessary catch unwind I get instead: \r\n\r\n```asm\r\nexample::bar:\r\n  push rax\r\n  call qword ptr [rip + foo@GOTPCREL]\r\n  mov eax, 42\r\n  pop rcx\r\n  ret\r\n```\r\n\r\nwhich is the same code that clang generates and what I expect to be generated when the closure passed to `catch_unwind` never unwinds.\r\n\r\nFor `catch_unwind` to be a zero cost abstraction, it needs to generate the same machine code as C++ in this case when optimizations are turned on. ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/64222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/64222/timeline", "performed_via_github_app": null, "state_reason": "completed"}