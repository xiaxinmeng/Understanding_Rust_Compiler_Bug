{"url": "https://api.github.com/repos/rust-lang/rust/issues/72315", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72315/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72315/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72315/events", "html_url": "https://github.com/rust-lang/rust/issues/72315", "id": 619906534, "node_id": "MDU6SXNzdWU2MTk5MDY1MzQ=", "number": 72315, "title": "Trait object with non-static lifetime is accepted where static lifetime is expected and required", "user": {"login": "VFLashM", "id": 3723853, "node_id": "MDQ6VXNlcjM3MjM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3723853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VFLashM", "html_url": "https://github.com/VFLashM", "followers_url": "https://api.github.com/users/VFLashM/followers", "following_url": "https://api.github.com/users/VFLashM/following{/other_user}", "gists_url": "https://api.github.com/users/VFLashM/gists{/gist_id}", "starred_url": "https://api.github.com/users/VFLashM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VFLashM/subscriptions", "organizations_url": "https://api.github.com/users/VFLashM/orgs", "repos_url": "https://api.github.com/users/VFLashM/repos", "events_url": "https://api.github.com/users/VFLashM/events{/privacy}", "received_events_url": "https://api.github.com/users/VFLashM/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}, {"id": 1791937891, "node_id": "MDU6TGFiZWwxNzkxOTM3ODkx", "url": "https://api.github.com/repos/rust-lang/rust/labels/ICEBreaker-Cleanup-Crew", "name": "ICEBreaker-Cleanup-Crew", "color": "74cc28", "default": false, "description": "Helping to \"clean up\" bugs with minimal examples and bisections"}, {"id": 1966877457, "node_id": "MDU6TGFiZWwxOTY2ODc3NDU3", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-critical", "name": "P-critical", "color": "eb6420", "default": false, "description": "Critical priority"}], "state": "closed", "locked": false, "assignee": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 12, "created_at": "2020-05-18T04:52:08Z", "updated_at": "2020-06-11T08:46:23Z", "closed_at": "2020-06-11T08:46:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Problem: function is explicitly defined as accepting `Box<dyn Fn + 'static>` and yet it accepts `Box<dyn Fn + 'a>` where `'a` is definitely less than `'static`.\r\n\r\nIt allows to keep reference to an object past object lifetime and therefore cause a crash.\r\n\r\nSorry for an extremely long example, but issue in question is very fragile and I couldn't reproduce it with smaller code.\r\n\r\n```rust\r\nuse std::cell::RefCell;\r\n\r\n// a simple trait with one function accepting two arguments:\r\n// one by mutable reference and another one by value\r\ntrait Foo {\r\n    type MutArg; // type of an argument passed by mutable reference\r\n    type ValArg; // type of an argument passed by value\r\n\r\n    fn foo(&self, marg: &mut Self::MutArg, varg: Self::ValArg);\r\n}\r\n\r\n// ValArg can be a complex function which can be used\r\n// to pass MutArg from parent to child\r\n// note that all trait objects must have 'static lifetime\r\npub type FnValArg<MutArg> = Box<dyn\r\n    FnOnce(Box<dyn\r\n        FnOnce(&mut MutArg) + 'static\r\n    >) + 'static\r\n>;\r\n\r\n// FnFooBox is boxed Foo which ValArg is a function\r\ntype FnFooBox<MutArg1, MutArg2> = Box<dyn\r\n    Foo<ValArg=FnValArg<MutArg1>, MutArg=MutArg2>\r\n>;\r\n\r\n// FnFoo factory creates boxed FnFoo value on the fly\r\ntype FnFooFactory<MutArg1, MutArg2> = Box<dyn\r\n    Fn() -> FnFooBox<MutArg1, MutArg2>\r\n>;\r\n\r\n// FactoryFoo is a struct storing factory\r\n// and implementing Foo\r\nstruct FactoryFoo<MutArg1, MutArg2> {\r\n    factory: FnFooFactory<MutArg1, MutArg2>,\r\n    // Note: if instead of factory I store `subfoo` directly,\r\n    // bug does not reproduce (i.e. I get lifetime error as expected):\r\n    // subfoo: FnFooBox<MutArg1, MutArg2>,\r\n}\r\n\r\nimpl<MutArg1, MutArg2> Foo for FactoryFoo<MutArg1, MutArg2> {\r\n    type MutArg = (MutArg1, MutArg2);\r\n    type ValArg = i32; // irrelevant\r\n\r\n    fn foo(&self, marg: &mut Self::MutArg, _varg: Self::ValArg) {\r\n        let (marg1, marg2) = marg;\r\n        let subfoo = (self.factory)();\r\n        subfoo.foo(\r\n            marg2,\r\n            // `subfoo.foo` requires `varg` of type `FnValArg`\r\n            // `FnValArg` defined as boxed closure with 'static lifetime\r\n            //\r\n            // this closure captures mutable `marg1`, and therefore\r\n            // has the same lifetime as `marg`,\r\n            // which is obviously less than 'static\r\n            //\r\n            // and yet it is accepted and everything works,\r\n            // which allows `subfoo` to modify `marg1` if desired\r\n            //\r\n            // Note: if I move this expression into local variable\r\n            // bug does not reproduce (i.e. I get lifetime error as expected)\r\n            Box::new(move |subfun| subfun(marg1)),\r\n        );\r\n    }\r\n}\r\n\r\n// now let me illustrate that it's possible to cause a crash\r\n// with this lifetime issue:\r\n// idea is to capture reference to marg1 and store it globally\r\n\r\n// global variable storing FnValArg, which in turn captures marg1 from FactoryFoo\r\nthread_local! {\r\n    static GLOBAL_FN: RefCell<Option<FnValArg<String>>> = RefCell::new(None);\r\n}\r\n\r\n// struct implementing Foo and storing varg\r\n// (i.e. closure with captured `&mut marg1` inside)\r\n// in global variable\r\nstruct CrashFnFoo {}\r\n\r\nimpl Foo for CrashFnFoo {\r\n    type ValArg = FnValArg<String>;\r\n    type MutArg = i32; // irrelevant\r\n\r\n    fn foo(&self, _marg: &mut Self::MutArg, varg: Self::ValArg) {\r\n        // store varg function in global variable\r\n        GLOBAL_FN.with(|global_fn| {\r\n            global_fn.replace(Some(varg))\r\n        });\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let factory = || -> FnFooBox<String, i32> { Box::new(CrashFnFoo{}) };\r\n    let factory_foo = FactoryFoo { factory: Box::new(factory) };\r\n\r\n    {\r\n        let mut marg = (String::from(\"some data\"), 0);\r\n        // this captures `&mut marg.0` into `GLOBAL_FN`\r\n        factory_foo.foo(&mut marg, 0);\r\n    }\r\n\r\n    // by now marg is gone, but reference to it is still\r\n    // captured in closure inside of GLOBAL_FN\r\n    // now we just have to access it\r\n    GLOBAL_FN.with(|global_fn| {\r\n        let fn_refcell = RefCell::new(None);\r\n        global_fn.swap(&fn_refcell);\r\n\r\n        if let Some(func) = fn_refcell.into_inner() {\r\n            println!(\"crashing now\");\r\n            // modifying marg.0 String, which is long dead by now\r\n            func(Box::new(|marg1: &mut String| {\r\n                marg1.push_str(\"crash here, please\");\r\n            }));\r\n        }\r\n    });\r\n}\r\n```\r\n\r\nI expected this error to happen (and it actually does happen if you change the example even a little bit):\r\n\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\r\n  --> src/lib.rs:45:14\r\n   |\r\n45 |         let (marg1, marg2) = marg;\r\n   |              ^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 44:5...\r\n  --> src/lib.rs:44:5\r\n   |\r\n44 | /     fn foo(&self, marg: &mut Self::MutArg, _varg: Self::ValArg) {\r\n45 | |         let (marg1, marg2) = marg;\r\n46 | |         let subfoo = (self.factory)();\r\n47 | |         self.subfoo.foo(\r\n...  |\r\n62 | |         );\r\n63 | |     }\r\n   | |_____^\r\nnote: ...so that reference does not outlive borrowed content\r\n  --> src/lib.rs:45:14\r\n   |\r\n45 |         let (marg1, marg2) = marg;\r\n   |              ^^^^^\r\n   = note: but, the lifetime must be valid for the static lifetime...\r\nnote: ...so that the expression is assignable\r\n  --> src/lib.rs:61:13\r\n   |\r\n61 |             Box::new(move |subfun| subfun(marg1)),\r\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   = note: expected  `std::boxed::Box<(dyn std::ops::FnOnce(std::boxed::Box<(dyn for<'r> std::ops::FnOnce(&'r mut MutArg1) + 'static)>) + 'static)>`\r\n              found  `std::boxed::Box<dyn std::ops::FnOnce(std::boxed::Box<(dyn for<'r> std::ops::FnOnce(&'r mut MutArg1) + 'static)>)>`\r\n```\r\n\r\nInstead this code is silently accepted and causes a segmentation error when executed.\r\n\r\n### Meta\r\n\r\nI tried it both on stable and nightly rust:\r\n\r\n```\r\n$ rustc --version --verbose\r\nrustc 1.45.0-nightly (7ebd87a7a 2020-05-08)\r\nbinary: rustc\r\ncommit-hash: 7ebd87a7a1e0e21767422e115c9455ef6e6d4bee\r\ncommit-date: 2020-05-08\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.45.0-nightly\r\nLLVM version: 9.0\r\n```\r\n\r\n```\r\n$ rustc --version --verbose\r\nrustc 1.43.0 (4fb7144ed 2020-04-20)\r\nbinary: rustc\r\ncommit-hash: 4fb7144ed159f94491249e86d5bbd033b5d60550\r\ncommit-date: 2020-04-20\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.43.0\r\nLLVM version: 9.0\r\n```", "closed_by": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72315/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 3}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72315/timeline", "performed_via_github_app": null, "state_reason": "completed"}