{"url": "https://api.github.com/repos/rust-lang/rust/issues/63943", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63943/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63943/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63943/events", "html_url": "https://github.com/rust-lang/rust/issues/63943", "id": 485661023, "node_id": "MDU6SXNzdWU0ODU2NjEwMjM=", "number": 63943, "title": "Undefined Behavior in safe code that unwinds out of `extern \"C\"` function", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-08-27T08:24:21Z", "updated_at": "2021-03-11T19:49:00Z", "closed_at": "2021-03-11T19:49:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**UPDATE**: this optimization is perfectly correct. It only breaks code that already has undefined behavior. This is however an issue since until #52652 is fixed we want to keep such code working.\r\n\r\n**ORIGINAL TITLE**:  mis-compilation of noreturn extern \"C\" definitions that unwind on stable and nightly \r\n\r\n---\r\n\r\nOriginally reported here: https://github.com/rust-lang/rust/pull/63909#issuecomment-524905295 , which might contain a fix, but that has not been verified yet. \r\n\r\nThe default behavior of the Rust language on nightly Rust was to abort when a panic tries to escape from functions using certain ABIs intended for FFI, like `\"C\"`. #62603 changed this behavior on nightly Rust to match the stable Rust behavior, which let the function unwind, while still applying the `nounwind` attribute to these functions. When these functions return `Never`, they are also `noreturn`, and this results in mis-compilations on stable and nightly Rust. MWE:  \r\n\r\n```rust\r\nextern \"C\" fn bar() -> ! { panic!(\"nounwind noreturn fn unwinds\") }\r\nextern \"C\" fn baz() -> i32 {\r\n    if let Ok(_) = std::panic::catch_unwind(|| bar() ) {\r\n        unsafe { std::hint::unreachable_unchecked() }  // makes IR nicer\r\n    }\r\n    42\r\n}\r\nfn main() { std::process::exit((baz() != 42) as i32); }\r\n```\r\n\r\n`cargo run --release` returns success, but `RUSTFLAGS=\"-C lto=fat\" cargo run --release` returns failure.\r\n\r\n_I think_ that since https://github.com/rust-lang/rust/pull/63909 removes the `nounwind` attribute, it should end up fixing this bug, but we should probably add a test for this somewhere.\r\n\r\n---\r\n\r\nThe problem #62603 intended to solve is to allow Rust->C->Rust FFI where a Rust callback called from C can unwind through C back into Rust. This example can be adapted to this application, where the miscompilation persists:\r\n\r\n```cpp\r\n// foo.cpp\r\nusing fn_type = void(*)();\r\n[[ noreturn ]] extern \"C\" void foo(fn_type x);\r\n[[ noreturn ]] extern \"C\" void foo(fn_type x)  { x(); /* unreachable: */ throw 0; }\r\n```\r\n\r\n```rust\r\n// main.rs\r\nextern \"C\" { fn foo(x: extern \"C\" fn() -> !) -> !; }\r\nextern \"C\" fn bar() -> ! { panic!(\"nounwind noreturn fn unwinds\") }\r\nextern \"C\" fn baz() -> i32 {\r\n    if let Ok(_) = std::panic::catch_unwind(|| unsafe { foo(bar) }) {\r\n        unsafe { std::hint::unreachable_unchecked() }\r\n    }\r\n    42\r\n}\r\nfn main() {\r\n   std::process::exit((baz() != 42) as i32);\r\n}\r\n```\r\n\r\nAFAICT this miscompilation has always existed for Rust->C-Rust FFI.", "closed_by": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63943/timeline", "performed_via_github_app": null, "state_reason": "completed"}