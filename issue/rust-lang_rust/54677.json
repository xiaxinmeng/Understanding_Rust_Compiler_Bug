{"url": "https://api.github.com/repos/rust-lang/rust/issues/54677", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54677/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54677/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54677/events", "html_url": "https://github.com/rust-lang/rust/issues/54677", "id": 365156987, "node_id": "MDU6SXNzdWUzNjUxNTY5ODc=", "number": 54677, "title": "proc_macro::Span::source_file() returns incorrect paths", "user": {"login": "macpp", "id": 24246407, "node_id": "MDQ6VXNlcjI0MjQ2NDA3", "avatar_url": "https://avatars.githubusercontent.com/u/24246407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/macpp", "html_url": "https://github.com/macpp", "followers_url": "https://api.github.com/users/macpp/followers", "following_url": "https://api.github.com/users/macpp/following{/other_user}", "gists_url": "https://api.github.com/users/macpp/gists{/gist_id}", "starred_url": "https://api.github.com/users/macpp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/macpp/subscriptions", "organizations_url": "https://api.github.com/users/macpp/orgs", "repos_url": "https://api.github.com/users/macpp/repos", "events_url": "https://api.github.com/users/macpp/events{/privacy}", "received_events_url": "https://api.github.com/users/macpp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-29T18:44:59Z", "updated_at": "2018-12-30T01:55:15Z", "closed_at": "2018-12-30T01:55:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "in some cases, proc_macro::Span::source_file() returns SourceFile with path \"src/main.rs\" , even if macro was used in other file/module\r\n\r\nhow to recreate:\r\n\r\nin proc_macro crate: \r\nsrc/lib.rs\r\n```\r\n#![feature(proc_macro_span)]\r\nextern crate proc_macro;\r\nuse proc_macro::TokenStream;\r\n#[proc_macro_attribute]\r\npub fn pmacro_source_file_test(_metadata: TokenStream, input: TokenStream) -> TokenStream {\r\n    println!(\"tokens:\");\r\n    println!(\"{}\", &input);\r\n    for x in input.clone().into_iter() {\r\n        let file = x.span().source_file();\r\n        println!(\"file path: {:?} , is_real: {}\", file.path(), file.is_real());\r\n    }\r\n    input\r\n}\r\n```\r\n\r\nin test crate\r\nsrc/main.rs\r\n```\r\n#[macro_use]extern crate proc_macro_test; // #[pmacro_source_file_test] \r\nmod test;\r\nfn main() {}\r\n```\r\nsrc/test.rs\r\n```\r\n#[pmacro_source_file_test]\r\npub fn some_fn() {}\r\n\r\n#[pmacro_source_file_test]\r\nenum Enum1 {\r\n    one\r\n}\r\n\r\n#[pmacro_source_file_test]\r\nstruct Struct1 {\r\n    x : String\r\n}\r\n\r\n#[pmacro_source_file_test]\r\nenum Enum2 {}\r\n\r\n#[pmacro_source_file_test]\r\nstruct Struct2 {}\r\n```\r\n\r\nafter using `cargo build` i get following output:\r\n```\r\ntokens:\r\npub fn some_fn() { }\r\nfile path: \"src/test.rs\" , is_real: true\r\nfile path: \"src/test.rs\" , is_real: true\r\nfile path: \"src/test.rs\" , is_real: true\r\nfile path: \"src/test.rs\" , is_real: true\r\nfile path: \"src/test.rs\" , is_real: true\r\ntokens:\r\nenum Enum1 { one, }\r\nfile path: \"src/main.rs\" , is_real: true\r\nfile path: \"src/main.rs\" , is_real: true\r\nfile path: \"src/main.rs\" , is_real: true\r\ntokens:\r\nstruct Struct1 {\r\n    x: String,\r\n}\r\nfile path: \"src/main.rs\" , is_real: true\r\nfile path: \"src/main.rs\" , is_real: true\r\nfile path: \"src/main.rs\" , is_real: true\r\ntokens:\r\nenum Enum2 { }\r\nfile path: \"src/test.rs\" , is_real: true\r\nfile path: \"src/test.rs\" , is_real: true\r\nfile path: \"src/test.rs\" , is_real: true\r\ntokens:\r\nstruct Struct2 {\r\n}\r\nfile path: \"src/test.rs\" , is_real: true\r\nfile path: \"src/test.rs\" , is_real: true\r\nfile path: \"src/test.rs\" , is_real: true\r\n```\r\n\r\nwhen span::source_file().path() is invoked on span from `Struct1` or `Enum1` it returns \"src/main.rs\" , but should \"src/test.rs\" - `Struct1` and `Enum1` are defined  in src/test.rs. \r\nPath is correct for empty enums and empty structs.\r\nAs far as i know, this bug can happen with functions too, but i don't have simple example for now. \r\n\r\n`rustc --version --verbose`:\r\nrustc 1.30.0-nightly (63d51e89a 2018-09-28)\r\nbinary: rustc\r\ncommit-hash: 63d51e89af33a7cc1c81bbaee335131b7bd00803\r\ncommit-date: 2018-09-28\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.30.0-nightly\r\nLLVM version: 8.0 \r\n\r\n**update:** \r\nprobably consequence of #43081\r\n", "closed_by": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54677/timeline", "performed_via_github_app": null, "state_reason": "completed"}