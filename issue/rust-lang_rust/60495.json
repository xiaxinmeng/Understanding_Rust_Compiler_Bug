{"url": "https://api.github.com/repos/rust-lang/rust/issues/60495", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60495/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60495/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60495/events", "html_url": "https://github.com/rust-lang/rust/issues/60495", "id": 439839498, "node_id": "MDU6SXNzdWU0Mzk4Mzk0OTg=", "number": 60495, "title": "Inconsistent literal escaping in proc macros", "user": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36956, "node_id": "MDU6TGFiZWwzNjk1Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-frontend", "name": "A-frontend", "color": "f7e101", "default": false, "description": "Area: frontend (errors, parsing and HIR)"}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2079070889, "node_id": "MDU6TGFiZWwyMDc5MDcwODg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-proc-macros", "name": "A-proc-macros", "color": "f7e101", "default": false, "description": "Area: Procedural macros"}], "state": "open", "locked": false, "assignee": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-05-03T00:18:18Z", "updated_at": "2022-04-04T17:26:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Proc macros operate on tokens, including string/character/byte-string/byte literal tokens, which they can get from various sources.\r\n\r\n- Source 1: Lexer.\r\nThis is the most reliable source, the token is passed to a macro *precisely* like it was written in source code.\r\n`\"C\"` will be passed as `\"C\"`, but the same C in escaped form `\"\\x43\"` will be passed as `\"\\x43\"`.\r\nProc macros can observe the difference because `ToString` (the only way to get the literal contents in proc macro API) also prints the literal precisely.\r\n- Source 2: Proc macro API.\r\n`Literal::string(s: &str)` will make you a string literal containing data `s`, approximately.\r\nThe precise token (returned by `ToString`) will contain:\r\n    - `escape_debug(s)` for string literals (`Literal::string`)\r\n    - `escape_unicode(s)` for character literals (`Literal::character`)\r\n    - `escape_default(s)` for byte string literals (`Literal::byte_string`)\r\n- Source 3: Recovered from non-attribute AST\r\nAST goes through pretty-printing first, then re-tokenized.\r\nThe precise token (returned by `ToString`) will contain:\r\n    - precise `s` for raw AST strings\r\n    - `escape_debug(s)` for non-raw AST strings\r\n    - `escape_default(s)` for AST characters, bytes and byte strings (both raw and non-raw)\r\n- Source 4: Recovered from attribute AST\r\nJust an ad-hoc recovery without pretty-printing.\r\nThe precise token (returned by `ToString`) will contain:\r\n    - precise `s` for raw AST strings\r\n    - `escape_default(s)` for non-raw AST strings, AST characters, bytes and byte strings (both raw and non-raw)\r\n\r\nEDIT: Also doc comments go through `escape_debug` when converted to `#[doc = \"content\"]` tokens for proc macros.\r\n\r\nIt would be nice to\r\n- Figure out what escaping we actually want (perhaps none?) and document the motivation behind the escaping choices.\r\n- Get rid of the escaping differences between token sources, so that at least literals of the same kind are escaped identically.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60495/timeline", "performed_via_github_app": null, "state_reason": null}