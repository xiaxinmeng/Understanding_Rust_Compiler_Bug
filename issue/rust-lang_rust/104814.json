{"url": "https://api.github.com/repos/rust-lang/rust/issues/104814", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104814/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104814/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104814/events", "html_url": "https://github.com/rust-lang/rust/issues/104814", "id": 1463082382, "node_id": "I_kwDOAAsO6M5XNN2O", "number": 104814, "title": "atomic::Ordering docs provide fewer guarantees than C++20 reference", "user": {"login": "JanBeh", "id": 76393822, "node_id": "MDQ6VXNlcjc2MzkzODIy", "avatar_url": "https://avatars.githubusercontent.com/u/76393822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanBeh", "html_url": "https://github.com/JanBeh", "followers_url": "https://api.github.com/users/JanBeh/followers", "following_url": "https://api.github.com/users/JanBeh/following{/other_user}", "gists_url": "https://api.github.com/users/JanBeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanBeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanBeh/subscriptions", "organizations_url": "https://api.github.com/users/JanBeh/orgs", "repos_url": "https://api.github.com/users/JanBeh/repos", "events_url": "https://api.github.com/users/JanBeh/events{/privacy}", "received_events_url": "https://api.github.com/users/JanBeh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2022-11-24T10:01:58Z", "updated_at": "2022-11-28T20:59:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Problem description\r\n\r\nThe documentation in `std::sync::atomic` and `std::sync::atomic::Ordering` ([source in Rust 1.65](https://github.com/rust-lang/rust/blob/1.65.0/library/core/src/sync/atomic.rs)) describe that the `Ordering`s are equal to those defined in C++20:\r\n\r\nIn [`std::sync::atomic`](https://doc.rust-lang.org/std/sync/atomic/index.html):\r\n\r\n> Each method takes an [`Ordering`](https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html) which represents the strength of the memory barrier for that operation. These orderings are the same as the [C++20 atomic orderings](https://en.cppreference.com/w/cpp/atomic/memory_order). For more information see the [nomicon](https://doc.rust-lang.org/nomicon/atomics.html).\r\n\r\nIn [`std::sync::atomic::Ordering`](https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html):\r\n\r\n> Rust\u2019s memory orderings are [the same as those of C++20](https://en.cppreference.com/w/cpp/atomic/memory_order).\r\n> [\u2026]\r\n> `Relaxed`: [\u2026] Corresponds to [memory_order_relaxed](https://en.cppreference.com/w/cpp/atomic/memory_order#Relaxed_ordering) in C++20.\r\n> `Release`: [\u2026] Corresponds to [memory_order_release](https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering) in C++20.\r\n> `Acquire`: Corresponds to [memory_order_acquire](https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering) in C++20.\r\n> `AcqRel` [\u2026] Corresponds to [memory_order_acq_rel](https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering) in C++20.\r\n> `SeqCst` [\u2026] Corresponds to [memory_order_seq_cst](https://en.cppreference.com/w/cpp/atomic/memory_order#Sequentially-consistent_ordering) in C++20.\r\n\r\nHowever, at the same time, the documentation of `Ordering::Release` and `Ordering::Acquire` ([source in Rust 1.6.5](https://github.com/rust-lang/rust/blob/1.65.0/library/core/src/sync/atomic.rs#L236-L264)) lists the guarantees made by these `Ordering`s. In particular:\r\n\r\n> #### [`Release`](https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.Release):\r\n> \r\n> When coupled with a store, all previous operations become ordered before any load of this value with [`Acquire`](https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.Acquire) (or stronger) ordering. In particular, all previous writes become visible to all threads that perform an [`Acquire`](https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.Acquire) (or stronger) load of this value.\r\n>\r\n> #### [`Acquire`](https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.Acquire):\r\n> \r\n> When coupled with a load, if the loaded value was written by a store operation with [`Release`](https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.Release) (or stronger) ordering, then all subsequent operations become ordered after that store. In particular, all subsequent loads will see data written before the store.\r\n\r\nThese guarantees seem to be less than what the C++20 standard guarantees. Thus the explanation of these orderings differs from the C++20 standard.\r\n\r\nConsider the following example, where `a: AtomicUsize`, for example:\r\n\r\nOne thread does:\r\n\r\n```rust\r\na.store(10, Release);\r\na.fetch_add(1, Relaxed);\r\n```\r\n\r\nA second thread does:\r\n\r\n```rust\r\nif a.load(Acquire) == 11 {\r\n    /* \u2026 */\r\n}\r\n```\r\n\r\nSuppose the second thread reads the value 11 written by the `fetch_add` operation in the first thread. As this value was *not* written by a store operation with `Release` or stronger ordering (but with `Relaxed` ordering), there are no guarantees that thread two will see data written before any store in thread one.\r\n\r\nLooking into the [C++20 reference](https://en.cppreference.com/w/cpp/atomic/memory_order), however, reveals a concept named \"Release sequences\":\r\n\r\n> After a *release operation* A is performed on an atomic object M, the longest continuous subsequence of the modification order of M that consists of [\u2026] atomic read-modify-write operations made to M by any thread is known as *release sequence headed by A*.\r\n\r\nTo my understanding, the `fetch_add` in thread one is part of the release sequence headed by the `store`. \r\n\r\nLooking into the [Working Draft N4861](https://open-std.org/JTC1/SC22/WG21/docs/papers/2020/n4861.pdf) of the C++ Standard (the final revision isn't available for free), we see that on page 1525:\r\n\r\n> An atomic operation A that performs a release operation on an atomic object M synchronizes with an atomic operation B that performs an acquire operation on M and takes its value from any side effect in the release sequence headed by A.\r\n\r\nThus `a.store` in thread one would synchronize with the `a.load` in thread two, even though the rules described in Rust's documentation of `std::sync::atomic::Ordering` do not allow this reasoning; i.e. following solely the rules in Rust's documenation, one would (wrongly) assume that there is no synchronization between those two threads if thread two reads the value of `11` written by the `fetch_add` operation.\r\n\r\n### Additional issues with accessibility\r\n\r\nOverall, it's very difficult for someone who starts with the Rust documentation to get an overview on what the Rust atomics really do. The C++20 standard isn't available for free and ~~the linked C++ reference ([C++20 atomic orderings](https://en.cppreference.com/w/cpp/atomic/memory_order)) uses **but does *not* define** the \"synchronizes-with\" relationship (which is vital for following/understanding the atomic orderings)~~.\r\n\r\n### Intent of the Rust documentation\r\n\r\nBefore making any fixes to the documentation, it should be clarified whether the difference between the Rust documentation and the C++20 reference exists intentionally, i.e. is Rust deliberately giving less guarantees to the programmer than the C++20 standard does? (Even though still following the C++20 memory model in practice \"as of now\".) Or is the Rust documentation incomplete here?\r\n\r\n### Possible improvements\r\n\r\nUnderstanding atomics seems to be very complex, and it might be difficult to fully cover all details in the documentation of `std`. However, the description of the `Ordering`s in Rust's documentation should not differ from those given in the C++ reference.\r\n\r\nPossible solutions could be:\r\n\r\n* Explicitly state that the guarantees listed under each enum variant of `std::sync::atomic::Ordering` are non-exhaustive (not to be confused with the `non_exhaustive` property of the enum itself) and that the C++20 standard is the normative source.\r\n* Correctly explain the behavior in regard to release sequences.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104814/timeline", "performed_via_github_app": null, "state_reason": null}