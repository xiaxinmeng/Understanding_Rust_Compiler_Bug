{"url": "https://api.github.com/repos/rust-lang/rust/issues/48644", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48644/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48644/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48644/events", "html_url": "https://github.com/rust-lang/rust/issues/48644", "id": 301544109, "node_id": "MDU6SXNzdWUzMDE1NDQxMDk=", "number": 48644, "title": "Macros 2.0: #[cfg_attr] makes .to_string() and TokenStream disagree", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 632573348, "node_id": "MDU6TGFiZWw2MzI1NzMzNDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros-2.0", "name": "A-macros-2.0", "color": "f7e101", "default": false, "description": "Area: declarative macros 2.0, https://github.com/rust-lang/rust/issues/39412"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-01T20:14:56Z", "updated_at": "2018-04-14T15:43:14Z", "closed_at": "2018-04-14T15:43:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I ran across a very curious case today... Given this procedural macro:\r\n\r\n```rust\r\n#![crate_type = \"proc-macro\"]\r\n#![feature(proc_macro)]\r\n\r\nextern crate proc_macro;\r\n\r\nuse proc_macro::TokenStream;\r\n\r\n#[proc_macro_derive(Foo, attributes(foo))]\r\npub fn foo(input: TokenStream) -> TokenStream {\r\n    println!(\"{}\", input.to_string());\r\n    print_tts(input, 0);\r\n\r\n    TokenStream::empty()\r\n}\r\n\r\nfn print_tts(input: TokenStream, tab: usize) {\r\n    let mut t = String::new();\r\n    for _ in 0..tab {\r\n        t.push_str(\"  \");\r\n    }\r\n    for token in input {\r\n        match token.kind {\r\n            proc_macro::TokenNode::Group(d, others) => {\r\n                println!(\"{}{:?}\", t, d);\r\n                print_tts(others.into(), tab + 1);\r\n            }\r\n            s => println!(\"{}{:?}\", t, s),\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand this expansion:\r\n\r\n```rust\r\n#![crate_type = \"rlib\"]\r\n#![feature(proc_macro)]\r\n\r\n#[macro_use]\r\nextern crate foo;\r\n\r\n#[derive(Foo)]\r\npub struct MyStructc {\r\n    #[cfg_attr(my_cfg, foo)]\r\n    _a: i32,\r\n}\r\n```\r\n\r\nwhen compiled I get:\r\n\r\n```\r\n$ rustc +nightly foo.rs && rustc +nightly bar.rs -L .\r\npub struct MyStructc {\r\n    _a: i32,\r\n}\r\nTerm(Term(pub))\r\nTerm(Term(struct))\r\nTerm(Term(MyStructc))\r\nBrace\r\n  Op('#', Alone)\r\n  Bracket\r\n    Term(Term(cfg_attr))\r\n    Parenthesis\r\n      Term(Term(my_cfg))\r\n      Op(',', Alone)\r\n      Term(Term(foo))\r\n  Term(Term(_a))\r\n  Op(':', Alone)\r\n  Term(Term(i32))\r\nOp(',', Alone)\r\n```\r\n\r\nwhich is quite curious!\r\n\r\n~~The `to_string()` representation has the field present (even though the `--cfg` isn't supplied) and the token stream has the actual `#[cfg_attr]` there.~~\r\n\r\n~~I was actually expecting neither outcome to happen (how naive of me!) in terms of `#[cfg]` processing typically happening before custom derives, but maybe that's not possible?~~ -- er, just wrong thinking here\r\n\r\ncc @dtolnay \r\ncc @jseyfried \r\ncc @nrc\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48644/timeline", "performed_via_github_app": null, "state_reason": "completed"}