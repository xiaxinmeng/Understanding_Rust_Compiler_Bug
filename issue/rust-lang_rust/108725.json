{"url": "https://api.github.com/repos/rust-lang/rust/issues/108725", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108725/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108725/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108725/events", "html_url": "https://github.com/rust-lang/rust/issues/108725", "id": 1609615811, "node_id": "I_kwDOAAsO6M5f8MnD", "number": 108725, "title": "generic_const_exprs and a (non const generic) array size expression allow recursive generic type parameters", "user": {"login": "peter-kehl", "id": 4270240, "node_id": "MDQ6VXNlcjQyNzAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4270240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-kehl", "html_url": "https://github.com/peter-kehl", "followers_url": "https://api.github.com/users/peter-kehl/followers", "following_url": "https://api.github.com/users/peter-kehl/following{/other_user}", "gists_url": "https://api.github.com/users/peter-kehl/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-kehl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-kehl/subscriptions", "organizations_url": "https://api.github.com/users/peter-kehl/orgs", "repos_url": "https://api.github.com/users/peter-kehl/repos", "events_url": "https://api.github.com/users/peter-kehl/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-kehl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}, {"id": 5226739262, "node_id": "LA_kwDOAAsO6M8AAAABN4m2Pg", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-incomplete-features", "name": "requires-incomplete-features", "color": "76dcde", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-03-04T05:24:20Z", "updated_at": "2023-03-04T23:26:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following **does compile** (surprisingly - as opposed to #53191):\r\n```rust\r\n#![allow(incomplete_features)]\r\n\r\n// Without `generic_const_exprs`, this fails to compile and `T` is reported as \"never unused\",\r\n// regardless of whether the array size below is a (`const`) expression (`0*0`) or a literal (`0`).\r\n//\r\n// Note that `generic_const_exprs` \"shouldn't\" need to be required for this at all - there are no\r\n// `const` generic parameters here.\r\n#![feature(generic_const_exprs)]\r\n\r\n// Based on LeafNode and InternalNode in BTreeMap's internals.\r\npub struct Node<T> {\r\n    // When we change the array size from a `const` expression  (such as `0*0`) to a literal (such\r\n    // as `0`), we get an error: parameter `T` is never used.\r\n    //\r\n    // For anyone using this as a workaround (instead of `PhantomData`): Even if you have `0*0` as\r\n    // the array size here (and hence it takes no space), such an empty array field can affect\r\n    // alignment its owner struct.\r\n    _links: [Option<Box<Node<T>>>; 0*0],\r\n}\r\n```\r\n\r\nHowever, the same code (without comments), and with the only change being in the array size changed **from a (const) expression `0*0` to a literal `0`**, then **fails to compile**:\r\n```rust\r\n#![allow(incomplete_features)]\r\n#![feature(generic_const_exprs)]\r\n\r\npub struct Node<T> {\r\n    _links: [Option<Box<Node<T>>>; 0], // <-- array size changed from 0*0 to 0\r\n}\r\n```\r\n\r\nThe problem reported here is **not** whether this should compile or not. Rather, it's the inconsistency depending on the array size's being an expression vs. literal.\r\n\r\nBut while you're at it, please also shed some light on the the intended behavior, or planned behavior.\r\n\r\nSide note: Putting the array size within braces makes it compile, too:\r\n```rust\r\n#![allow(incomplete_features)]\r\n#![feature(generic_const_exprs)]\r\n\r\npub struct Node<T> {\r\n    #[allow(unused_braces)]\r\n    _links: [Option<Box<Node<T>>>; {0}],\r\n}\r\n```\r\n\r\nMotivation: This took hours to pinpoint/minimize (while I was hoping to minimize another issue, so that I can progress with co-allocation in library/alloc). So I hope this will save people's time.\r\n\r\nUpdate: The above minimization is not fully narrowed down - beyond my current bandwidth. Under some circumstances, recursive types with a generic parameter that is used solely for recursion (that is, not in any `PhantomData`-based field)  **do** compile even **without** `generic_const_exprs`. See `LeafNode` and `InternalNode` in BTreeMap's internals: it compiles, even though `library/alloc/src/lib.rs` does **not** use `generic_const_exprs`. (`NodeRef` itself **does** use `PhantomData`, but the (indirectly) recursive types `LeafNode` and `InternalNode` themselves do not.)\r\nHowever, that doesn't affect the inconsistency reported in this ticket.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108725/timeline", "performed_via_github_app": null, "state_reason": null}