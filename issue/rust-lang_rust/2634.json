{"url": "https://api.github.com/repos/rust-lang/rust/issues/2634", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/2634/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/2634/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/2634/events", "html_url": "https://github.com/rust-lang/rust/issues/2634", "id": 5104823, "node_id": "MDU6SXNzdWU1MTA0ODIz", "number": 2634, "title": "Say why non-implicitly-copyable things are that way", "user": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2012-06-16T07:19:38Z", "updated_at": "2015-01-16T20:41:55Z", "closed_at": "2015-01-16T20:41:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Updated Bug Report\n\nWe do not provide enough user feedback explaining why a type is non-copyable.  The error messages just say \"error: copying a value of non-copyable type `Type`\"\n\nThings have gotten a bit better since this bug was filed, in part because our story has changed somewhat (we no longer implicitly copy vectors/strings; we no longer have `@fn`), but we still do not have great user feedback, particularly with respect to explaining _how_ a type ended up being put into the \"non-copyable\" bucket.\n## Sample Code Enumerating Non-copyable Cases\n\n``` rust\n// Issue 2634\n// Better explanations for why non-implicitly copyable things are that way.\n\nuse NC = std::util::NonCopyable;\nuse NonCopyExamples::*;\n\nmod NonCopyExamples {\n    use NC = std::util::NonCopyable;\n    enum Void {}\n\n    pub struct S        { a: int, nc: NC }\n    pub struct T        { a: int, own: ~int }\n    pub struct U<'self> { a: int, mu: &'self mut int }\n    pub struct V        { a: int }\n    impl Drop for V { fn drop(&mut self) { } }\n    pub struct W<'self> { a: int, fun: &'self fn () }\n    pub struct X        { a: int, oyvey: Option<Void> } // (strcat: maybe bug)\n}\n\nstatic mut global_u : int = 3;\n\nfn fun() { println(\"Hello World\"); }\n\nfn construct() -> (S,T,U,V,W,X) {\n    let s = S{ a: 1, nc: NC };\n    let t = T{ a: 2, own: ~2 };\n    let u = unsafe { U{ a: 3, mu: &mut global_u } };\n    let v = V{ a: 4 };\n    let w = W{ a: 5, fun: fun };\n    let x = X{ a: 6, oyvey: None };\n    (s,t,u,v,w,x)\n}\n\nfn g<A>(a: A) { println!(\"{:?}\", a); }\n\n#[cfg(not(no_funcall_twice))]\nfn funcall_twice() {\n    use NonCopyExamples::*;\n\n    let (s,t,u,v,w,x) = construct();\n\n    g(s); g(s);\n    g(t); g(t);\n    g(u); g(u);\n    g(v); g(v);\n    g(w); g(w);\n    g(x); g(x);\n}\n#[cfg(no_funcall_twice)] fn funcall_twice() { }\n\n#[cfg(not(no_assign))]\nfn assign() {\n    use NonCopyExamples::*;\n\n    let (s,t,u,v,w,x) = construct();\n\n    let s_1 = s; let s_2 = s;\n    let t_1 = t; let t_2 = t;\n    let u_1 = u; let u_2 = u;\n    let v_1 = v; let v_2 = v;\n    let w_1 = w; let w_2 = w;\n    let x_1 = x; let x_2 = x;\n}\n#[cfg(no_assign)] fn assign() { }\n\n#[cfg(not(no_repeat))]\nfn repeat() {\n    use NonCopyExamples::*;\n\n    let (s,t,u,v,w,x) = construct();\n\n    let ss = [s, ..2];\n    let tt = [t, ..2];\n    let uu = [u, ..2];\n    let vv = [v, ..2];\n    let ww = [w, ..2];\n    let xx = [x, ..2];\n}\n#[cfg(no_repeat)] fn repeat() { }\n\nfn main() {\n    funcall_twice();\n    assign();\n    repeat();\n}\n\n```\n## Original Bug Report follows\n\nI think the error messages would be clearer if they were along these lines:\n\n```\nfoo.rs:10: warning: copying a value of type '~str' requires memory allocation\nfoo.rs:10: note: suggest use of 'move' to avoid this copy\nfoo.rs:20: warning: copying a value of type `BlockContext` duplicates mutable fields\nfoo.rs:20: note: use 'copy' if the copy is desired\nfoo.rs:30: warning: call to 'f' might copy values of type '~str', incurring memory allocation\nfoo.rs:30: note: see 'copy' interface bound here\nfoo.rs:40: warning: call to 'g' might copy values of type '~BlockContext', incurring memory allocation and duplicating mutable fields\nfoo.rs:40: note: see 'copy' interface bound here\n```\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/2634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/2634/timeline", "performed_via_github_app": null, "state_reason": "completed"}