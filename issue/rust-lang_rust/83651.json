{"url": "https://api.github.com/repos/rust-lang/rust/issues/83651", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83651/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83651/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83651/events", "html_url": "https://github.com/rust-lang/rust/issues/83651", "id": 843566239, "node_id": "MDU6SXNzdWU4NDM1NjYyMzk=", "number": 83651, "title": "Switch table generated when code for all match arms are identical", "user": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-03-29T16:51:02Z", "updated_at": "2023-04-05T17:35:24Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following code will generate a switch table, with all entries in the table pointing to the same label.\r\n\r\n```rust\r\npub enum Enum {\r\n    A,\r\n    B,\r\n    C,\r\n    D,\r\n}\r\n\r\npub fn test(v: Enum) {\r\n    match v {\r\n        Enum::A => println!(\"A\"),\r\n        Enum::B => println!(\"A\"),\r\n        Enum::C => println!(\"A\"),\r\n        Enum::D => println!(\"A\"),\r\n    }\r\n}\r\n```\r\n\r\nThis generates the following assembly:\r\n<details><summary>Assembly</summary>\r\n<p>\r\n\r\n```asm\r\nexample::test:\r\n        sub     rsp, 56\r\n        movzx   eax, dil\r\n        lea     rcx, [rip + .LJTI0_0]\r\n        movsxd  rax, dword ptr [rcx + 4*rax]\r\n        add     rax, rcx\r\n        jmp     rax\r\n.LBB0_1:\r\n        lea     rax, [rip + .L__unnamed_1]\r\n        mov     qword ptr [rsp + 8], rax\r\n        mov     qword ptr [rsp + 16], 1\r\n        mov     qword ptr [rsp + 24], 0\r\n        lea     rax, [rip + .L__unnamed_2]\r\n        mov     qword ptr [rsp + 40], rax\r\n        mov     qword ptr [rsp + 48], 0\r\n        lea     rdi, [rsp + 8]\r\n        call    qword ptr [rip + std::io::stdio::_print@GOTPCREL]\r\n        add     rsp, 56\r\n        ret\r\n.LJTI0_0:\r\n        .long   .LBB0_1-.LJTI0_0\r\n        .long   .LBB0_1-.LJTI0_0\r\n        .long   .LBB0_1-.LJTI0_0\r\n        .long   .LBB0_1-.LJTI0_0\r\n\r\n.L__unnamed_3:\r\n        .ascii  \"A\\n\"\r\n\r\n.L__unnamed_1:\r\n        .quad   .L__unnamed_3\r\n        .asciz  \"\\002\\000\\000\\000\\000\\000\\000\"\r\n\r\n.L__unnamed_2:\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nI would expect the switch table to be removed entirely. This is first observed when I tried to see what will happen if atomic operation's Ordering parameters are not inlined, e.g. wrap `atomic_usize.swap(0, ordering)` in a non-inlined function.\r\n\r\nThis behaviour is observed for all Rust versions and clang (but not GCC), so this is likely a LLVM issue.\r\n\r\n@rustbot label: +I-slow +I-heavy +A-LLVM", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83651/timeline", "performed_via_github_app": null, "state_reason": null}