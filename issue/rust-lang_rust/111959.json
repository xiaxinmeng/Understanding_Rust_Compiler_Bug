{"url": "https://api.github.com/repos/rust-lang/rust/issues/111959", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111959/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111959/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111959/events", "html_url": "https://github.com/rust-lang/rust/issues/111959", "id": 1726449409, "node_id": "I_kwDOAAsO6M5m54cB", "number": 111959, "title": "Using the `backtrace` crate worsens codegen when building with opt-level='s'", "user": {"login": "nmathewson", "id": 162054, "node_id": "MDQ6VXNlcjE2MjA1NA==", "avatar_url": "https://avatars.githubusercontent.com/u/162054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nmathewson", "html_url": "https://github.com/nmathewson", "followers_url": "https://api.github.com/users/nmathewson/followers", "following_url": "https://api.github.com/users/nmathewson/following{/other_user}", "gists_url": "https://api.github.com/users/nmathewson/gists{/gist_id}", "starred_url": "https://api.github.com/users/nmathewson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nmathewson/subscriptions", "organizations_url": "https://api.github.com/users/nmathewson/orgs", "repos_url": "https://api.github.com/users/nmathewson/repos", "events_url": "https://api.github.com/users/nmathewson/events{/privacy}", "received_events_url": "https://api.github.com/users/nmathewson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-05-25T20:30:19Z", "updated_at": "2023-05-26T21:38:40Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nMy apologies if this is a known issue.  I wanted to see whether the compiler would\r\noptimize the following code in the way that I expected:\r\n\r\n```rust\r\n// lib.rs\r\npub struct Data { body: Box<[u8;509]> }\r\n\r\nimpl Data {\r\n    pub fn some_bytes(&self) -> u16 {\r\n\tu16::from_be_bytes(\r\n\t\tself.body[3..5]\r\n\t\t\t.try_into()\r\n\t\t\t.expect(\"math fail\")\r\n\t)\r\n    }\r\n}\r\n```\r\n\r\nIt worked just fine, and compiled it down to a few simple instructions (according to cargo show-asm):\r\n```asm\r\n\tmov rax, qword ptr [rdi]\r\n\tmovzx eax, word ptr [rax + 3]\r\n\trol ax, 8\r\n\tret\r\n```\r\n\r\nBut when I tried the same code in my own project, it generated a much worse implementation.\r\n\r\nAfter some experimentation, I found that I could reproduce the issue by changing my test code as follows:\r\n\r\n```rust\r\n// lib.rs\r\n\r\nuse backtrace::Backtrace; // <--- ADDED THIS LINE\r\n\r\npub struct Data { body: Box<[u8;509]> }\r\n\r\nimpl Data {\r\n    pub fn some_bytes(&self) -> u16 {\r\n\tu16::from_be_bytes(\r\n\t\tself.body[3..5]\r\n\t\t\t.try_into()\r\n\t\t\t.expect(\"math fail\")\r\n\t)\r\n    }\r\n}\r\n```\r\n```toml\r\n// Cargo.toml\r\n[package]\r\nname = \"slice-playground\"\r\nversion = \"0.1.0\"\r\nedition = \"2021\"\r\n\r\n[profile.release]\r\nopt-level = 's'\r\n\r\n[dependencies]\r\nbacktrace = \"0.3.67\"\r\n```\r\n\r\n\r\nWith these changes, I got significantly worse code:\r\n```\r\n\t.cfi_startproc\r\n\tpush rax\r\n\t.cfi_def_cfa_offset 16\r\n\tmov rdi, qword ptr [rdi]\r\n\tadd rdi, 3\r\n\tmov esi, 2\r\n\tcall qword ptr [rip + core::array::<impl core::convert::TryFrom<&[T]> for [T; N]>::try_from@GOTPCREL]\r\n\ttest al, 1\r\n\tjne .LBB1_1\r\n\tshr eax, 8\r\n\trol ax, 8\r\n\tpop rcx\r\n\t.cfi_def_cfa_offset 8\r\n\tret\r\n\r\n.LBB1_1:\r\n\t.cfi_def_cfa_offset 16\r\n\tlea rdi, [rip + .L__unnamed_2]\r\n\tlea rcx, [rip + .L__unnamed_1]\r\n\tlea r8, [rip + .L__unnamed_3]\r\n\tmov rdx, rsp\r\n\tmov esi, 9\r\n\tcall qword ptr [rip + core::result::unwrap_failed@GOTPCREL]\r\n\r\n\tud2\r\n```\r\n\r\nNote that ALL of the changes are necessary to see the problem:  I had to add the backtrace crate, I had to use it in the code, and I had to set `opt-level = 's'`.\r\n\r\nI've reproduced this behavior with the following versions of Rust:\r\n\r\n```\r\n[2223]$ rustc +nightly --version --verbose \r\nrustc 1.71.0-nightly (c373194cb 2023-05-24)\r\nbinary: rustc\r\ncommit-hash: c373194cb6d882dc455a588bcc29c92a96b50252\r\ncommit-date: 2023-05-24\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.71.0-nightly\r\nLLVM version: 16.0.4\r\n[2224]$ rustc --version --verbose\r\nrustc 1.69.0 (84c898d65 2023-04-16)\r\nbinary: rustc\r\ncommit-hash: 84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc\r\ncommit-date: 2023-04-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.69.0\r\nLLVM version: 15.0.7\r\n```\r\n\r\nThanks for taking a look at this!", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111959/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111959/timeline", "performed_via_github_app": null, "state_reason": null}