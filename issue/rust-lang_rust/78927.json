{"url": "https://api.github.com/repos/rust-lang/rust/issues/78927", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78927/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78927/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78927/events", "html_url": "https://github.com/rust-lang/rust/issues/78927", "id": 740155823, "node_id": "MDU6SXNzdWU3NDAxNTU4MjM=", "number": 78927, "title": "On \"pattern in arg for fn def without body\" emit structured suggestion", "user": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}, {"id": 1839565265, "node_id": "MDU6TGFiZWwxODM5NTY1MjY1", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-terse", "name": "D-terse", "color": "c9f7a3", "default": false, "description": "A diagnostic that doesn't give enough information about the problem at hand"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-11-10T18:45:03Z", "updated_at": "2021-01-10T23:36:31Z", "closed_at": "2021-01-10T23:36:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Taken from https://github.com/rust-lang/rust/issues/35203#issuecomment-723553413\r\n\r\n> ```\r\n> error: patterns aren't allowed in functions without bodies\r\n>   --> src/lib.rs:11:45\r\n>    |\r\n> 11 |     fn partition_dedup_by_new<F>(&mut self, mut same_bucket: F) -> (&mut [T], &mut [T])\r\n>    |                                             ^^^^^^^^^^^^^^^\r\n>    |\r\n>    = note: `#[deny(patterns_in_fns_without_body)]` on by default\r\n>    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n>    = note: for more information, see issue #35203 <https://github.com/rust-lang/rust/issues/35203>\r\n> \r\n> error: aborting due to previous error\r\n> \r\n> error: could not compile `alt-dedup-rs`\r\n> \r\n> To learn more, run the command again with --verbose.\r\n> ```\r\n> Looks rust is giving me this error without suggestion, I didn't know the fix was just simply removing `mut` which does not seemed related to this issue. CC @estebank\r\n> \r\n> <details>\r\n>   <summary>code</summary>\r\n> \r\n> ```rust\r\n> use std::mem;\r\n> \r\n> pub trait NewDedup<T> {\r\n>     fn partition_dedup_new(&mut self) -> (&mut [T], &mut [T])\r\n>     where\r\n>         T: PartialEq<T>,\r\n>     {\r\n>         self.partition_dedup_by_new(|a, b| a == b)\r\n>     }\r\n> \r\n>     fn partition_dedup_by_new<F>(&mut self, mut same_bucket: F) -> (&mut [T], &mut [T])\r\n>     where\r\n>         F: FnMut(&mut T, &mut T) -> bool;\r\n> }\r\n> \r\n> impl<T> NewDedup<T> for &mut [T] {\r\n>     fn partition_dedup_by_new<F>(&mut self, mut same_bucket: F) -> (&mut [T], &mut [T])\r\n>     where\r\n>         F: FnMut(&mut T, &mut T) -> bool,\r\n>     {\r\n>         let len = self.len();\r\n>         if len <= 1 {\r\n>             return (self, &mut []);\r\n>         }\r\n> \r\n>         let ptr = self.as_mut_ptr();\r\n>         let mut next_read: usize = 1;\r\n>         let mut next_write: usize = 1;\r\n> \r\n>         // SAFETY: the `while` condition guarantees `next_read` and `next_write`\r\n>         // are less than `len`, thus are inside `self`. `prev_ptr_write` points to\r\n>         // one element before `ptr_write`, but `next_write` starts at 1, so\r\n>         // `prev_ptr_write` is never less than 0 and is inside the slice.\r\n>         // This fulfils the requirements for dereferencing `ptr_read`, `prev_ptr_write`\r\n>         // and `ptr_write`, and for using `ptr.add(next_read)`, `ptr.add(next_write - 1)`\r\n>         // and `prev_ptr_write.offset(1)`.\r\n>         //\r\n>         // `next_write` is also incremented at most once per loop at most meaning\r\n>         // no element is skipped when it may need to be swapped.\r\n>         //\r\n>         // `ptr_read` and `prev_ptr_write` never point to the same element. This\r\n>         // is required for `&mut *ptr_read`, `&mut *prev_ptr_write` to be safe.\r\n>         // The explanation is simply that `next_read >= next_write` is always true,\r\n>         // thus `next_read > next_write - 1` is too.\r\n>         unsafe {\r\n>             // Avoid bounds checks by using raw pointers.\r\n>             while next_read < len {\r\n>                 let ptr_read = ptr.add(next_read);\r\n>                 let prev_ptr_write = ptr.add(next_write - 1);\r\n>                 if !same_bucket(&mut *ptr_read, &mut *prev_ptr_write) {\r\n>                     next_write += 1;\r\n>                     next_read += 1;\r\n>                     // Avoid checking next_write != next_read once it is not in the same bucket,\r\n>                     // always swap memory if it is not in the same bucket.\r\n>                     while next_read < len {\r\n>                         let ptr_read = ptr.add(next_read);\r\n>                         let prev_ptr_write = ptr.add(next_write - 1);\r\n>                         if !same_bucket(&mut *ptr_read, &mut *prev_ptr_write) {\r\n>                             let ptr_write = prev_ptr_write.offset(1);\r\n>                             mem::swap(&mut *ptr_read, &mut *ptr_write);\r\n>                             next_write += 1;\r\n>                         }\r\n>                         next_read += 1;\r\n>                     }\r\n>                     return self.split_at_mut(next_write);\r\n>                 }\r\n>                 next_read += 1;\r\n>             }\r\n>         }\r\n> \r\n>         self.split_at_mut(next_write)\r\n>     }\r\n> }\r\n> ```\r\n\r\nWe should suggest to use an identifier. When possible take that identifier from the pattern, otherwise `_` should work just as well.\r\n\r\nCC @pickfire ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78927/reactions", "total_count": 3, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78927/timeline", "performed_via_github_app": null, "state_reason": "completed"}