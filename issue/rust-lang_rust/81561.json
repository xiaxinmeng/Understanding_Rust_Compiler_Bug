{"url": "https://api.github.com/repos/rust-lang/rust/issues/81561", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81561/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81561/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81561/events", "html_url": "https://github.com/rust-lang/rust/issues/81561", "id": 797480076, "node_id": "MDU6SXNzdWU3OTc0ODAwNzY=", "number": 81561, "title": "Support for borrow across yield (self-referential generator)", "user": {"login": "oersted", "id": 11427574, "node_id": "MDQ6VXNlcjExNDI3NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/11427574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oersted", "html_url": "https://github.com/oersted", "followers_url": "https://api.github.com/users/oersted/followers", "following_url": "https://api.github.com/users/oersted/following{/other_user}", "gists_url": "https://api.github.com/users/oersted/gists{/gist_id}", "starred_url": "https://api.github.com/users/oersted/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oersted/subscriptions", "organizations_url": "https://api.github.com/users/oersted/orgs", "repos_url": "https://api.github.com/users/oersted/repos", "events_url": "https://api.github.com/users/oersted/events{/privacy}", "received_events_url": "https://api.github.com/users/oersted/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-01-30T17:12:41Z", "updated_at": "2021-01-30T17:59:37Z", "closed_at": "2021-01-30T17:17:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's a toy example of a self-referential generator.\r\n\r\n```\r\nlet mut generator = || {\r\n    let x: u32 = 1;\r\n    let ptr = &x;\r\n    yield 0;\r\n    yield *ptr;\r\n};\r\n```\r\n\r\nIt keeps a borrow across a `yield`. When the generator is desugared into a state-machine, it needs to store the state that each `yield` depends on as a struct. In this case, one of the state structs will need to contain a reference to one of its members, thus, self-referential. Such a struct is not safe to move to another location in memory since the pointer of the reference will be left pointing at old (invalid) memory.\r\n\r\nThis is why the compiler throws the following error when encountering a generator like this, which is perfectly reasonable.\r\n\r\n```\r\nerror[E0626]: borrow may still be in use when generator yields\r\n  --> src/gen.rs:74:23\r\n   |\r\n74 |             let ptr = &x;\r\n   |                       ^^\r\n75 |             yield 0;\r\n   |             ------- possible yield occurs here\r\n```\r\n\r\nThis is all explained in detail by an excellent 6 part post starting here: [Async/Await I: Self-Referential Structs](https://boats.gitlab.io/blog/post/2018-01-25-async-i-self-referential-structs/). This post proposes a model for making objects immovable, which, to the best of my understanding, was one of the main drivers for the creation of the `Pin` feature.\r\n\r\nWe do have `Pin` now, but these kinds of generators don't seem to be supported yet, to the best of my knowledge.\r\n\r\nNow it does sound like they were supported at some point in 2019. A [comment in Reddit](https://www.reddit.com/r/rust/comments/dnbdjp/help_me_understand_generators_and_pinning/f59cvss?utm_source=share&utm_medium=web2x&context=3) clearly explains why the current `pub fn resume(self: Pin<&mut Self>,  arg: R) -> GeneratorState<Self::Yield, Self::Return>` interface is not appropriate for self-referential generators. This is because the `Pin<&mut Self>` only guarantees that the generator won't be moved within the `resume` call, but it could still be moved between `resume` calls, which is not safe for self-referential generators. The comment proposes using `Pin<Box<Generator>>.resume` instead, because doing `let pinned: Pin<Box<_>> = Box::pin(generator)` will consume `generator` and guarantee it won't be moved in future.\r\n\r\nHowever, `Pin<Box<Generator>>.resume` doesn't seem to exist at present (not sure if it ever did) and, regardless, self-referential generators don't seem to even compile on as shown in the Reddit post.\r\n\r\nHowever, from the following issue, I learned that generators can now be declared as immovable when they are defined.\r\n\r\n[Support `static` keyword for immovable generators](https://github.com/intellij-rust/intellij-rust/issues/3867)\r\n\r\nThis does compile with the latest nightly build.\r\n\r\n```\r\nlet mut generator = static || {\r\n    let x: u32 = 1;\r\n    let ptr = &x;\r\n    yield 0;\r\n    yield *ptr;\r\n};\r\n```\r\n \r\nI confirmed that it returns an anonymous object that implements `Generator` and, unlike the usual case, this object does not implement `Unpin`, as expected.\r\n\r\nNow, this is perfect, except that I can't find a way to use the generator. Of course, `generator.resume()` won't work, because of the current signature `pub fn resume(self: Pin<&mut Self>,  arg: R) -> GeneratorState<Self::Yield, Self::Return>`. As intended, `Pin::new(&mut generator)` doesn't work either because this `generator` doesn't implement `Unpin`. The suggestion for `Box::pin(generator).resume()` sounds like the right solution, but `Box<Pin<Generator>>` doesn't implement `resume` at this time.\r\n\r\nIs there any way to use static generators at all? I must be missing something.\r\n\r\nIt would be great if someone could give a clear update of the status of this feature. It is probably already documented somewhere, but the conversation around generators seems to live across years-long highly fragmented RFCs, GitHub issues, Rust forum posts, Reddit posts and blogs. So it's hard to get a clear picture.\r\n\r\nThank you in advance.", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81561/timeline", "performed_via_github_app": null, "state_reason": "completed"}