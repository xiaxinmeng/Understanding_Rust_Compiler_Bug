{"url": "https://api.github.com/repos/rust-lang/rust/issues/72730", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72730/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72730/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72730/events", "html_url": "https://github.com/rust-lang/rust/issues/72730", "id": 627115127, "node_id": "MDU6SXNzdWU2MjcxMTUxMjc=", "number": 72730, "title": "Cycle error through variance computation when using `-> _`.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-29T09:00:47Z", "updated_at": "2020-06-10T19:05:10Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Reduced example ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ffcbdecd32014759e9c2b83f57bcd186)):\r\n```rust\r\nstruct Wrapper<T>(T);\r\n\r\nfn foo<T>(x: Wrapper<T>) -> _ {\r\n    drop(x);\r\n}\r\n```\r\n```\r\nerror[E0391]: cycle detected when processing `foo`\r\n --> src/lib.rs:3:1\r\n  |\r\n3 | fn foo<T>(x: Wrapper<T>) -> _ {\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\nnote: ...which requires type-checking `foo`...\r\n --> src/lib.rs:3:1\r\n  |\r\n3 | fn foo<T>(x: Wrapper<T>) -> _ {\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...which requires processing `Wrapper`...\r\n --> src/lib.rs:1:1\r\n  |\r\n1 | struct Wrapper<T>(T);\r\n  | ^^^^^^^^^^^^^^^^^^^^^\r\n  = note: ...which requires computing the variances for items in this crate...\r\n  = note: ...which again requires processing `foo`, completing the cycle\r\nnote: cycle used when collecting item types in top-level module\r\n --> src/lib.rs:1:1\r\n  |\r\n1 | / struct Wrapper<T>(T);\r\n2 | |\r\n3 | | fn foo<T>(x: Wrapper<T>) -> _ {\r\n4 | |     drop(x);\r\n5 | | }\r\n  | |_^\r\n```\r\n\r\nYou can see right away that it's hard to figure out what \"processing\" means and we should probably start a cleanup effort to add proper descriptions to queries (or at least name the query in the default message, even if it might not look pretty at all). cc @rust-lang/compiler \r\n\r\n<hr/>\r\n\r\nUsing `-Ztreat-err-as-bug` + `RUST_BACKTRACE=1` I can turn the error into an ICE and get this:\r\n```\r\n#0 [crate_variances] computing the variances for items in this crate\r\n#1 [variances_of] processing `Wrapper`\r\n#2 [typeck_tables_of] type-checking `foo`\r\n#3 [fn_sig] processing `foo`\r\n#4 [collect_mod_item_types] collecting item types in top-level module\r\n#5 [analysis] running analysis passes on this crate\r\n```\r\n\r\nSo variance computation uses `fn_sig` (not sure why it would *need* to), which is normally harmless, as function signatures are fully explicit.\r\n\r\nBut we nowadays \"allow\" `_` in the signature, guaranteeing an error still, while showing the user the inferred type (this should be useful during prototyping but I keep forgetting it exists).\r\n\r\nAs a result of that, instead of `typeck_tables_of` depending on `fn_sig`, `fn_sig` depends on `typeck_tables_of` (since it needs the results of type inference from the `fn` body), so an otherwise harmless `fn_sig` turns into a cycle as soon as type-checking needs *any* variances.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72730/timeline", "performed_via_github_app": null, "state_reason": null}