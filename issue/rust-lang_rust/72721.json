{"url": "https://api.github.com/repos/rust-lang/rust/issues/72721", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72721/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72721/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72721/events", "html_url": "https://github.com/rust-lang/rust/issues/72721", "id": 626937680, "node_id": "MDU6SXNzdWU2MjY5Mzc2ODA=", "number": 72721, "title": "`LineWriter` should not fully flush its lines", "user": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-29T01:39:55Z", "updated_at": "2020-08-29T01:48:35Z", "closed_at": "2020-08-29T01:48:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, the behavior of `BufWriter` reaching a full buffer is that it calls the equivalent of `inner.write`, sending its buffered data to the wrapped writer, but not necessarily sending it all the way to the final sink. Conversely, `LineWriter` calls `flush` every time it hits a newline, which means it sends each written line to the final sink.\r\n\r\nFor example, suppose you had `LineWriter<BufWriter<Stdout>>`. Each time a line is written to the `LineWriter`, it's written all the way to `Stdout`, regardless of the buffering of that `BufWriter` in the middle.\r\n\r\nIt appears that the only reason this is the case is that, for simplicity, `LineWriter` is implemented as a wrapper around `BufWriter`. Because `BufWriter` doesn't expose direct control of how the buffer is written, the only way for `LineWriter` to cause the line to be written to the inner device is by calling `BufWriter::flush`.\r\n\r\nMy proposal, therefore, is to move the line-writing logic into methods on `BufWriter` (for instance, `BufWriter::write_line_buffered`), or into free functions. These methods would by simplified by having the `needs_flush` bool; they would instead return a `bool` with their Ok Result if a write succeeded but the flush failed. This design means that the logic may work with the buffer directly (through the `write` and `flush_buf` methods). Additionally- and this was the issue that motivated me to write this report in the first place- this would streamline the implementation of https://github.com/rust-lang/rust/issues/60673, which calls for a way for `Stdout` to be put in block-buffering mode instead of line-buffering, either through a runtime switch, or `tty` detection. Currently, the only way to implement this without *substantial* logic duplication is something like `enum { LineWriter, BufWriter }`, which has the disadvantage of not being switchable after creation.\r\n\r\nThis would be a change to the observable behavior, so I'm filing it as an issue here for discussion before implementing it.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72721/timeline", "performed_via_github_app": null, "state_reason": "completed"}