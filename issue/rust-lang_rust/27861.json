{"url": "https://api.github.com/repos/rust-lang/rust/issues/27861", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/27861/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/27861/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/27861/events", "html_url": "https://github.com/rust-lang/rust/issues/27861", "id": 101333873, "node_id": "MDU6SXNzdWUxMDEzMzM4NzM=", "number": 27861, "title": "No single-call way to constant-time move elements in and out of a Vec for pair/triple/etc.-wise operations", "user": {"login": "soltanmm", "id": 4889063, "node_id": "MDQ6VXNlcjQ4ODkwNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4889063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm", "html_url": "https://github.com/soltanmm", "followers_url": "https://api.github.com/users/soltanmm/followers", "following_url": "https://api.github.com/users/soltanmm/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm/orgs", "repos_url": "https://api.github.com/users/soltanmm/repos", "events_url": "https://api.github.com/users/soltanmm/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-08-17T03:46:42Z", "updated_at": "2015-08-17T15:43:49Z", "closed_at": "2015-08-17T04:20:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "This results in some annoying code bloat when trying to mutate two or more vector elements with respect to one another:\n\n``` rust\nstruct A {\n    a: u8,\n    b: u8\n}\n\nimpl A {\n    pub fn do_stuff(&mut self, other: &mut Self) {\n        self.a = other.a % self.b;\n        other.b = self.b % other.a;\n    }\n}\n\nfn main() {\n    let mut v = vec![A{a:1,b:1}, A{a:1,b:2}, A{a:2,b:5}, A{a:3,b:6}];\n    let i = 0;\n    let j = 1;\n\n    let mut a = v.swap_remove(i);\n    let mut b = v.swap_remove(j);\n    a.do_stuff(&mut b);\n    let end_minus_1 = v.len() - 1;\n    v.push(a);\n    v.swap(i, end_minus_1);\n    v.push(b);\n    v.swap(j, end_minus_1);\n\n    // compare with:\n    //\n    // let mut a = v.replace(i, A{a:0,b:0});\n    // let mut b = v.replace(j, A{a:0,b:0});\n    // a.do_stuff(&mut b);\n    // v.replace(i, a);\n    // b.replace(j, b);\n}\n```\n\n[playpen](http://is.gd/HXBqaH)\n\nNote that we have to also get the vector length and store it as an lvalue to get around `v` being mutably borrowed within the function call expression `v.swap(...)`. We currently have an overall 160% increase in the number of lines of code to do the same thing as a block of code using an operation arguably more atomic than `swap_remove`.\n\nAlternatives to this include cloning the vector once for each argument beyond unary arity of the operation, calling across all the different vectors, and then unifying the result, and using `unsafe` code to skip out on the borrow checker via raw pointers. Neither of those alternatives are particularly satisfying.\n", "closed_by": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/27861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/27861/timeline", "performed_via_github_app": null, "state_reason": "completed"}