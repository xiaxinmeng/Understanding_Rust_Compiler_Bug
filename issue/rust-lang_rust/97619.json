{"url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/8925", "repository_url": "https://api.github.com/repos/rust-lang/rust-clippy", "labels_url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/8925/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/8925/comments", "events_url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/8925/events", "html_url": "https://github.com/rust-lang/rust-clippy/issues/8925", "id": 1256252767, "node_id": "I_kwDOAZm0i85K4OVf", "number": 8925, "title": "clippy bug report", "user": {"login": "AlphaCodingPilot", "id": 101023339, "node_id": "U_kgDOBgV-aw", "avatar_url": "https://avatars.githubusercontent.com/u/101023339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlphaCodingPilot", "html_url": "https://github.com/AlphaCodingPilot", "followers_url": "https://api.github.com/users/AlphaCodingPilot/followers", "following_url": "https://api.github.com/users/AlphaCodingPilot/following{/other_user}", "gists_url": "https://api.github.com/users/AlphaCodingPilot/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlphaCodingPilot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlphaCodingPilot/subscriptions", "organizations_url": "https://api.github.com/users/AlphaCodingPilot/orgs", "repos_url": "https://api.github.com/users/AlphaCodingPilot/repos", "events_url": "https://api.github.com/users/AlphaCodingPilot/events{/privacy}", "received_events_url": "https://api.github.com/users/AlphaCodingPilot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149309557, "node_id": "MDU6TGFiZWwxNDkzMDk1NTc=", "url": "https://api.github.com/repos/rust-lang/rust-clippy/labels/C-bug", "name": "C-bug", "color": "F5F1FD", "default": false, "description": "Category: Clippy is not doing the correct thing"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-06-01T12:48:14Z", "updated_at": "2022-06-01T16:01:29Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### This is the output of the 'cargo clippy --fix' command:\r\n\r\ncargo clippy --fix\r\n    Checking equation-solver v0.1.0\r\nwarning: failed to automatically apply fixes suggested by rustc to crate `equation_solver`\r\n\r\nafter fixes were automatically applied the compiler reported errors within these files:\r\n\r\n  * src\\lib.rs\r\n\r\nThis likely indicates a bug in either rustc or cargo itself,\r\nand we would appreciate a bug report! You're likely to see\r\na number of compiler warnings after this message which cargo\r\nattempted to fix but failed. If you could open an issue at\r\nhttps://github.com/rust-lang/rust/issues\r\nquoting the full output of this command we'd be very appreciative!\r\nNote that you may be able to make some more progress in the near-term\r\nfixing code with the `--broken-code` flag\r\n\r\nThe following errors were reported:\r\nerror[E0596]: cannot borrow `term` as mutable, as it is not declared as mutable\r\n   --> src\\lib.rs:439:42\r\n    |\r\n428 |         term: Term,\r\n    |         ---- help: consider changing this to be mutable: `mut term`\r\n...\r\n439 |         let exceptions_in_domain = match term.solve()? {\r\n    |                                          ^^^^^^^^^^^^ cannot borrow as mutable\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0596`.\r\nOriginal diagnostics will follow.\r\n\r\nwarning: length comparison to zero\r\n   --> src\\lib.rs:135:28\r\n    |\r\n135 |                         if nested_terms.len() > 0 {\r\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!nested_terms.is_empty()`\r\n    |\r\n    = note: `#[warn(clippy::len_zero)]` on by default\r\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\r\n\r\nwarning: use of `ok_or` followed by a function call\r\n   --> src\\lib.rs:164:26\r\n    |\r\n164 |                         .ok_or(String::from(\"Equation is missing opening parenthesis\"))?;\r\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `ok_or_else(|| String::from(\"Equation is missing opening parenthesis\"))`\r\n    |\r\n    = note: `#[warn(clippy::or_fun_call)]` on by default\r\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\r\n\r\nwarning: length comparison to zero\r\n   --> src\\lib.rs:177:12\r\n    |\r\n177 |         if nested_terms.len() > 0 {\r\n    |            ^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!nested_terms.is_empty()`\r\n    |\r\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\r\n\r\nwarning: redundant clone\r\n   --> src\\lib.rs:439:46\r\n    |\r\n439 |         let exceptions_in_domain = match term.clone().solve()? {\r\n    |                                              ^^^^^^^^ help: remove this\r\n    |\r\n    = note: `#[warn(clippy::redundant_clone)]` on by default\r\nnote: this value is dropped without further use\r\n   --> src\\lib.rs:439:42\r\n    |\r\n439 |         let exceptions_in_domain = match term.clone().solve()? {\r\n    |                                          ^^^^\r\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\r\n\r\nwarning: redundant closure\r\n   --> src\\lib.rs:442:22\r\n    |\r\n442 |                 .map(|value| OrderedFloat(value))\r\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `OrderedFloat`\r\n    |\r\n    = note: `#[warn(clippy::redundant_closure)]` on by default\r\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\r\n\r\nwarning: `equation-solver` (lib test) generated 5 warnings\r\nwarning: failed to automatically apply fixes suggested by rustc to crate `equation_solver`\r\n\r\nafter fixes were automatically applied the compiler reported errors within these files:\r\n\r\n  * src\\lib.rs\r\n\r\nThis likely indicates a bug in either rustc or cargo itself,\r\nand we would appreciate a bug report! You're likely to see\r\n428 |         term: Term,\r\n    |         ---- help: consider changing this to be mutable: `mut term`\r\n...\r\n439 |         let exceptions_in_domain = match term.solve()? {\r\n    |                                          ^^^^^^^^^^^^ cannot borrow as mutable\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0596`.\r\nOriginal diagnostics will follow.\r\n\r\nwarning: `equation-solver` (lib) generated 5 warnings (5 duplicates)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 8.06s\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/8925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust-clippy/issues/8925/timeline", "performed_via_github_app": null, "state_reason": null}