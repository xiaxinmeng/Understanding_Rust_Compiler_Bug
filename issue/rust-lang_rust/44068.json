{"url": "https://api.github.com/repos/rust-lang/rust/issues/44068", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44068/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44068/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44068/events", "html_url": "https://github.com/rust-lang/rust/issues/44068", "id": 252529837, "node_id": "MDU6SXNzdWUyNTI1Mjk4Mzc=", "number": 44068, "title": "parameterized index for RawVec", "user": {"login": "dobkeratops", "id": 1120754, "node_id": "MDQ6VXNlcjExMjA3NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1120754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dobkeratops", "html_url": "https://github.com/dobkeratops", "followers_url": "https://api.github.com/users/dobkeratops/followers", "following_url": "https://api.github.com/users/dobkeratops/following{/other_user}", "gists_url": "https://api.github.com/users/dobkeratops/gists{/gist_id}", "starred_url": "https://api.github.com/users/dobkeratops/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dobkeratops/subscriptions", "organizations_url": "https://api.github.com/users/dobkeratops/orgs", "repos_url": "https://api.github.com/users/dobkeratops/repos", "events_url": "https://api.github.com/users/dobkeratops/events{/privacy}", "received_events_url": "https://api.github.com/users/dobkeratops/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-08-24T08:47:18Z", "updated_at": "2017-11-17T01:07:19Z", "closed_at": "2017-11-17T01:07:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Suggestion:-\r\n\r\ncould we parameterise the 'RawVec' with an index/size type, to make allocators for limited sizes easier - there are many scenarios (clustered data, and memories between bit-sizes*) where a limited number of bits are useful. (for example 'number of bones' being 8 or 16 bits whilst 'number of vertices' might be 16 or 32bits).\r\n\r\nEven Further customisation might be possible with policy objects, e.g. controlling how capacity is stored/calculated (how about a growable vector that only allows power-of-2 capacities, hence it only needs a byte to store a shift value..).. but thats too big a change right now.\r\nAnother issue is usize vs  isize, bjarne and others now think 'unsigned indices' are a mistake.\r\n\r\nMy full intent is to make a parameterized replacement for ```Vec<T>``` (ie. ```Vec<T,INDEX=usize>``` ), but just having this internal utility generalised would simplify rolling that 'front end' with less cut-paste repetition, and without changing the user-facing interface in the stdlib (even then, having the default being usize should mean no visible/breaking change)\r\n\r\nProposed change:-\r\n```\r\n#[allow(missing_debug_implementations)]\r\npub struct RawVec<T, A: Alloc = Heap, INDEX=usize> {\r\n    ptr: Unique<T>,\r\n    cap: INDEX,\r\n    a: A,\r\n}\r\n// follow through in all code working on RawVec, \r\n// some further thought maybe required e.g. panics for capacity overflow?\r\n```\r\n\r\nthe type-param here is called 'INDEX' but it might also be SIZE.. not sure which the clearest name is.\r\n\r\nr.e. 'memories between bit sizes': I'm alluding to the phenomenon that made intel do 'segmentation' in the middle ground between 16 and 32bits. \r\nSimilarly, today, we have many devices with memories in the range 4-32gb of RAM for which 64bits of address or index are overkill, 32bits are insufficient, but 32bits *as a scaled Index* is easily enough.\r\n\r\n (e.g. it's very unlikely you'd fill the whole of that with one array of objects under 16bytes each, so a 32bit index is fine. in graphics, you typically fill memory with 2d information (textures).. (you'll never have a 8billion x 1 pixel texture) and vertices (~16+ bytes each),and you'd never fill the whole of memory with just one object (in that rare scenario , if it's parameterized you can choose i64). A lot of data is explicitely clustered into chunks to reduce the bit-requirement of indexing (and provide greater locality)... there is synergy between these (greater locality = reduced address bits)\r\n", "closed_by": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44068/reactions", "total_count": 2, "+1": 0, "-1": 2, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44068/timeline", "performed_via_github_app": null, "state_reason": "completed"}