{"url": "https://api.github.com/repos/rust-lang/rust/issues/84584", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84584/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84584/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84584/events", "html_url": "https://github.com/rust-lang/rust/issues/84584", "id": 867639802, "node_id": "MDU6SXNzdWU4Njc2Mzk4MDI=", "number": 84584, "title": "`#[deprecated]` on re-exported items does not work", "user": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-04-26T12:17:32Z", "updated_at": "2021-04-26T12:17:44Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Problem\r\n\r\nGiven the following code: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ac1e0d070ba838247ac3587ca23bbaed\r\n\r\n```rust\r\n#[derive(PartialEq, Eq)]\r\nstruct New;\r\n\r\n#[deprecated(note = \"bang\")]\r\nuse New as DeprecatedAlias;\r\n\r\n#[deprecated(note = \"bang\")]\r\ntype ConstAndTy = New; // \r\n\r\n#[deprecated(note = \"bang\")]\r\n#[allow(nonstandard_style)]\r\nconst ConstAndTy: New = New;\r\n\r\nfn main ()\r\n{\r\n    // \ud83d\ude2d (does not warn)\r\n    let self::DeprecatedAlias: DeprecatedAlias = DeprecatedAlias;\r\n    let _ = DeprecatedAlias {};\r\n    \r\n    // OK (does warn)\r\n    let self::ConstAndTy: ConstAndTy = ConstAndTy;\r\n    let _ = ConstAndTy {};\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n  - deprecated warnings for all four usages of `ConstAndTy` (constant value, type, constant pattern, literal struct constructor).\r\n\r\n  - **No warnings whatsoever for any of the four usages of `DeprecatedAlias`.**\r\n\r\n<details>\r\n\r\n```text\r\nwarning: use of deprecated constant `ConstAndTy`: bang\r\n  --> src/main.rs:21:40\r\n   |\r\n21 |     let self::ConstAndTy: ConstAndTy = ConstAndTy;\r\n   |                                        ^^^^^^^^^^\r\n   |\r\n   = note: `#[warn(deprecated)]` on by default\r\n\r\nwarning: use of deprecated constant `ConstAndTy`: bang\r\n  --> src/main.rs:21:9\r\n   |\r\n21 |     let self::ConstAndTy: ConstAndTy = ConstAndTy;\r\n   |         ^^^^^^^^^^^^^^^^\r\n\r\nwarning: use of deprecated type alias `ConstAndTy`: bang\r\n  --> src/main.rs:21:27\r\n   |\r\n21 |     let self::ConstAndTy: ConstAndTy = ConstAndTy;\r\n   |                           ^^^^^^^^^^\r\n\r\nwarning: use of deprecated type alias `ConstAndTy`: bang\r\n  --> src/main.rs:22:13\r\n   |\r\n22 |     let _ = ConstAndTy {};\r\n   |             ^^^^^^^^^^\r\n```\r\n\r\n</details>\r\n\r\nMoreover, even if it were to lint about the `use`-reexported deprecated item, I suspect there would be no mention of the item at the origin of the re-export, even when visible and not deprecated itself.\r\n\r\n### Suggested improvement\r\n\r\nIdeally:\r\n\r\n  - the output should warn about `DeprecatedAlias` too:\r\n\r\n    ```\r\n    warning: use of deprecated constant `DeprecatedAlias`: bang\r\n      --> src/main.rs:17:50\r\n       |\r\n    17 |     let self::DeprecatedAlias: DeprecatedAlias = DeprecatedAlias;\r\n       |                                                  ^^^^^^^^^^^^^^^\r\n       |\r\n       = note: `#[warn(deprecated)]` on by default\r\n    \r\n    warning: use of deprecated constant `DeprecatedAlias`: bang\r\n      --> src/main.rs:17:9\r\n       |\r\n    17 |     let self::DeprecatedAlias: DeprecatedAlias = DeprecatedAlias;\r\n       |         ^^^^^^^^^^^^^^^^^^^^^\r\n    \r\n    warning: use of deprecated type alias `DeprecatedAlias`: bang\r\n      --> src/main.rs:17:32\r\n       |\r\n    17 |     let self::DeprecatedAlias: DeprecatedAlias = DeprecatedAlias;\r\n       |                                ^^^^^^^^^^^^^^^\r\n    \r\n    warning: use of deprecated type alias `DeprecatedAlias`: bang\r\n      --> src/main.rs:18:13\r\n       |\r\n    18 |     let _ = DeprecatedAlias {};\r\n       |             ^^^^^^^^^^^^^^^\r\n    ```\r\n\r\n  - And when the source of the re-export is visible to the scope where the deprecated alias is used, it should also suggest using that path instead:\r\n\r\n    ```diff\r\n      warning: use of deprecated constant `DeprecatedAlias`: bang\r\n        --> src/main.rs:17:50\r\n         |\r\n      17 |     let self::DeprecatedAlias: DeprecatedAlias = DeprecatedAlias;\r\n         |                                                  ^^^^^^^^^^^^^^^\r\n    +    |                                                  help: use the non-deprecated path: `New`\r\n         |\r\n         = note: `#[warn(deprecated)]` on by default\r\n      \r\n      warning: use of deprecated constant `DeprecatedAlias`: bang\r\n        --> src/main.rs:17:9\r\n         |\r\n      17 |     let self::DeprecatedAlias: DeprecatedAlias = DeprecatedAlias;\r\n         |         ^^^^^^^^^^^^^^^^^^^^^\r\n    +    |         help: use the non-deprecated path: `self::New`\r\n      \r\n      warning: use of deprecated type alias `DeprecatedAlias`: bang\r\n        --> src/main.rs:17:32\r\n         |\r\n      17 |     let self::DeprecatedAlias: DeprecatedAlias = DeprecatedAlias;\r\n         |                                ^^^^^^^^^^^^^^^\r\n    +    |                                help: use the non-deprecated path: `New`\r\n      \r\n      warning: use of deprecated type alias `DeprecatedAlias`: bang\r\n        --> src/main.rs:18:13\r\n         |\r\n      18 |     let _ = DeprecatedAlias {};\r\n         |             ^^^^^^^^^^^^^^^\r\n    +    |             help: use the non-deprecated path: `New`\r\n    ```\r\n\r\n### Rationale and further discussion\r\n\r\n_c.f._ https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Updating.20reverse.20dependencies.20using.20code.20modification\r\n\r\n  - cc @shepmaster @jyn514 @thomcc ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84584/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84584/timeline", "performed_via_github_app": null, "state_reason": null}