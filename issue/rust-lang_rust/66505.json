{"url": "https://api.github.com/repos/rust-lang/rust/issues/66505", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66505/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66505/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66505/events", "html_url": "https://github.com/rust-lang/rust/issues/66505", "id": 524094053, "node_id": "MDU6SXNzdWU1MjQwOTQwNTM=", "number": 66505, "title": "cannot resolve `<&'t1 T as std::iter::IntoIterator>::IntoIter == _`", "user": {"login": "wdanilo", "id": 1623053, "node_id": "MDQ6VXNlcjE2MjMwNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1623053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdanilo", "html_url": "https://github.com/wdanilo", "followers_url": "https://api.github.com/users/wdanilo/followers", "following_url": "https://api.github.com/users/wdanilo/following{/other_user}", "gists_url": "https://api.github.com/users/wdanilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdanilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdanilo/subscriptions", "organizations_url": "https://api.github.com/users/wdanilo/orgs", "repos_url": "https://api.github.com/users/wdanilo/repos", "events_url": "https://api.github.com/users/wdanilo/events{/privacy}", "received_events_url": "https://api.github.com/users/wdanilo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-18T02:11:53Z", "updated_at": "2022-10-17T18:58:36Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hi! Let's consider the following code:\r\n\r\n```rust\r\nuse std::rc::Rc;\r\nuse core::cell::RefCell;\r\nuse core::cell::Ref;\r\n\r\npub struct SharedDirtyFlag<T> {\r\n    data: Rc<RefCell<T>>\r\n}\r\n\r\nimpl<T> SharedDirtyFlag<T>\r\nwhere for<'t> &'t T: IntoIterator {\r\n    pub fn iter(&self) -> SharedDirtyFlagIter<T> {\r\n        let borrow = self.data.borrow();\r\n        let iter   = borrow.into_iter();\r\n        let iter   = unsafe { unbound_lifetimes(iter) };\r\n        SharedDirtyFlagIter { iter, borrow }\r\n    }\r\n}\r\n\r\npub struct SharedDirtyFlagIter<'t,T>\r\nwhere &'t T: IntoIterator {\r\n    pub iter   : <&'t T as IntoIterator>::IntoIter,\r\n    pub borrow : Ref<'t,T>\r\n}\r\n\r\nunsafe fn unbound_lifetimes<'t1, 't2, T>\r\n(t: <&'t1 T as IntoIterator>::IntoIter) -> <&'t2 T as IntoIterator>::IntoIter\r\nwhere &'t1 T: IntoIterator,\r\n      &'t2 T: IntoIterator {\r\n    std::mem::transmute(t)\r\n}\r\n```\r\nPlayground: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=5dca98d86cd811ec108f83e01435e69a\r\n\r\nIt creates an internal-mutable wrapper over a generic type `T` and should expose the iterator. In order to expose the iterator we need to keep both the original iterator as well as the dynamic borrow of `T`. In order to do so we need to keep two interconnected values in a single structure and we need to tell rustc to allow it by relaxing constraints on the lifetimes. The problem is that it does not compile here. The error is:\r\n\r\n```rust\r\nerror[E0284]: type annotations required: cannot resolve `<&'t1 T as std::iter::IntoIterator>::IntoIter == _`\r\n  --> src/lib.rs:25:1\r\n   |\r\n25 | / unsafe fn unbound_lifetimes<'t1, 't2, T>\r\n26 | | (t: <&'t1 T as IntoIterator>::IntoIter) -> <&'t2 T as IntoIterator>::IntoIter\r\n27 | | where &'t1 T: IntoIterator,\r\n28 | |       &'t2 T: IntoIterator {\r\n29 | |     std::mem::transmute(t)\r\n30 | | }\r\n   | |_^\r\n```\r\n\r\nAnd now:\r\n1. It seems like a bug. If this is a bug, **is there any way now to express it somehow?**\r\n2. If this is not a bug, could I ask for an explanation of why it does not compile (both I and several people on Rust Discord do not understand it) and an explanation of how to implement this pattern in a generic form?\r\n\r\n-------------\r\n\r\n**EDIT**\r\nThere is also a minimized form of this issue shown below (thanks Rantanen for discovering it!). However, the questions above still apply and I'd be thankful for the answers.\r\n```rust\r\nunsafe fn unbound_lifetimes<'t1, 't2, T>\r\n(t: <&'t1 T as IntoIterator>::IntoIter) -> <&'t2 T as IntoIterator>::IntoIter\r\nwhere &'t1 T: IntoIterator,\r\n      &'t2 T: IntoIterator {\r\n    unimplemented!()\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66505/timeline", "performed_via_github_app": null, "state_reason": null}