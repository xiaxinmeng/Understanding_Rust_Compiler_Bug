{"url": "https://api.github.com/repos/rust-lang/rust/issues/71072", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71072/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71072/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71072/events", "html_url": "https://github.com/rust-lang/rust/issues/71072", "id": 598551015, "node_id": "MDU6SXNzdWU1OTg1NTEwMTU=", "number": 71072, "title": "rustc should suggest using async version of Mutex", "user": {"login": "jimblandy", "id": 751272, "node_id": "MDQ6VXNlcjc1MTI3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/751272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimblandy", "html_url": "https://github.com/jimblandy", "followers_url": "https://api.github.com/users/jimblandy/followers", "following_url": "https://api.github.com/users/jimblandy/following{/other_user}", "gists_url": "https://api.github.com/users/jimblandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimblandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimblandy/subscriptions", "organizations_url": "https://api.github.com/users/jimblandy/orgs", "repos_url": "https://api.github.com/users/jimblandy/repos", "events_url": "https://api.github.com/users/jimblandy/events{/privacy}", "received_events_url": "https://api.github.com/users/jimblandy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": {"login": "LucioFranco", "id": 5758045, "node_id": "MDQ6VXNlcjU3NTgwNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5758045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LucioFranco", "html_url": "https://github.com/LucioFranco", "followers_url": "https://api.github.com/users/LucioFranco/followers", "following_url": "https://api.github.com/users/LucioFranco/following{/other_user}", "gists_url": "https://api.github.com/users/LucioFranco/gists{/gist_id}", "starred_url": "https://api.github.com/users/LucioFranco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LucioFranco/subscriptions", "organizations_url": "https://api.github.com/users/LucioFranco/orgs", "repos_url": "https://api.github.com/users/LucioFranco/repos", "events_url": "https://api.github.com/users/LucioFranco/events{/privacy}", "received_events_url": "https://api.github.com/users/LucioFranco/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "LucioFranco", "id": 5758045, "node_id": "MDQ6VXNlcjU3NTgwNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5758045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LucioFranco", "html_url": "https://github.com/LucioFranco", "followers_url": "https://api.github.com/users/LucioFranco/followers", "following_url": "https://api.github.com/users/LucioFranco/following{/other_user}", "gists_url": "https://api.github.com/users/LucioFranco/gists{/gist_id}", "starred_url": "https://api.github.com/users/LucioFranco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LucioFranco/subscriptions", "organizations_url": "https://api.github.com/users/LucioFranco/orgs", "repos_url": "https://api.github.com/users/LucioFranco/repos", "events_url": "https://api.github.com/users/LucioFranco/events{/privacy}", "received_events_url": "https://api.github.com/users/LucioFranco/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 12, "created_at": "2020-04-12T19:07:32Z", "updated_at": "2022-01-27T08:43:32Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If one accidentally uses `std::sync::Mutex` in asynchronous code and holds a `MutexGuard` across an await, then the future is marked `!Send`, and you can't spawn it off to run on another thread - all correct. Rustc even gives you an excellent error message, pointing out the `MutexGuard` as the reason the future is not `Send`.\r\n\r\nBut people new to asynchronous programming are not going to immediately realize that there is such a thing as an 'async-friendly mutex'. You need to be aware that ordinary mutexes insist on being unlocked on the same thread that locked them; and that executors move tasks from one thread to another; and that the solution is not to make ordinary mutexes more complex but to create a new mutex type altogether. These make sense in hindsight, but I'll bet that they leap to mind only for a small group of elite users. (But probably a majority of the people who will ever read this bug. Ahem.)\r\n\r\nSo I think rustc should provide extra help when the value held across an `await`, and thus causing a future not to be `Send`, is a `MutexGuard`, pointing out that one must use an asynchronous version of `Mutex` if one needs to hold guards across an await. It's awkward to suggest `tokio::sync::Mutex` or `async_std::sync::Mutex`, but surely there's some diplomatic way to phrase it that is still explicit enough to be helpful.\r\n\r\nPerhaps this could be generalized to other types. For example, if the offending value is an `Rc`, the help should suggest `Arc`.\r\n\r\nHere's an illustration of what I mean:\r\n\r\n```\r\nuse std::future::Future;\r\nuse std::sync::Mutex;\r\n\r\nfn fake_spawn<F: Future + Send + 'static>(f: F) { }\r\n\r\nasync fn wrong_mutex() {\r\n    let m = Mutex::new(1);\r\n    let mut guard = m.lock().unwrap();\r\n    (async { }).await;\r\n    *guard += 1;\r\n}\r\n\r\nfn main() {\r\n    fake_spawn(wrong_mutex());\r\n    //~^ERROR: future cannot be sent between threads safely\r\n}\r\n```\r\n\r\nThe error message is great:\r\n```\r\nerror: future cannot be sent between threads safely\r\n  --> src/main.rs:14:5\r\n   |\r\n4  | fn fake_spawn<F: Future + Send + 'static>(f: F) { }\r\n   |    ----------             ---- required by this bound in `fake_spawn`\r\n...\r\n14 |     fake_spawn(wrong_mutex());\r\n   |     ^^^^^^^^^^ future returned by `wrong_mutex` is not `Send`\r\n   |\r\n   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard<'_, i32>`\r\nnote: future is not `Send` as this value is used across an await\r\n  --> src/main.rs:9:5\r\n   |\r\n8  |     let mut guard = m.lock().unwrap();\r\n   |         --------- has type `std::sync::MutexGuard<'_, i32>`\r\n9  |     (async { }).await;\r\n   |     ^^^^^^^^^^^^^^^^^ await occurs here, with `mut guard` maybe used later\r\n10 |     *guard += 1;\r\n11 | }\r\n   | - `mut guard` is later dropped here\r\n```\r\nI just wish it included:\r\n```\r\nhelp: If you need to hold a mutex guard while you're awaiting, you must use an async-aware version of the `Mutex` type.\r\nhelp: Many asynchronous foundation crates provide such a `Mutex` type.\r\n```\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\nThis issue has been assigned to @LucioFranco via [this comment](https://github.com/rust-lang/rust/issues/71072#issuecomment-658306268).\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"LucioFranco\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71072/reactions", "total_count": 19, "+1": 19, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71072/timeline", "performed_via_github_app": null, "state_reason": null}