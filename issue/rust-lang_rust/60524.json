{"url": "https://api.github.com/repos/rust-lang/rust/issues/60524", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60524/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60524/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60524/events", "html_url": "https://github.com/rust-lang/rust/issues/60524", "id": 440203886, "node_id": "MDU6SXNzdWU0NDAyMDM4ODY=", "number": 60524, "title": "macro_rules gives up early when parsing keywords in `expr` contexts", "user": {"login": "reuvenpo", "id": 35386347, "node_id": "MDQ6VXNlcjM1Mzg2MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/35386347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reuvenpo", "html_url": "https://github.com/reuvenpo", "followers_url": "https://api.github.com/users/reuvenpo/followers", "following_url": "https://api.github.com/users/reuvenpo/following{/other_user}", "gists_url": "https://api.github.com/users/reuvenpo/gists{/gist_id}", "starred_url": "https://api.github.com/users/reuvenpo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reuvenpo/subscriptions", "organizations_url": "https://api.github.com/users/reuvenpo/orgs", "repos_url": "https://api.github.com/users/reuvenpo/repos", "events_url": "https://api.github.com/users/reuvenpo/events{/privacy}", "received_events_url": "https://api.github.com/users/reuvenpo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 27424086, "node_id": "MDU6TGFiZWwyNzQyNDA4Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-parser", "name": "A-parser", "color": "f7e101", "default": false, "description": "Area: The parsing of Rust source code to an AST."}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-03T20:13:34Z", "updated_at": "2019-06-23T13:59:12Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I'm sorry for the vague title; I'm not sure how to summarize this issue, or pin down it's root cause.\r\nI'm also sorry if this is intended behavior, i just find it very confusing.\r\n\r\nI found this while playing around with the limits of the macro_rules parser, trying to narrow down an edge case i noticed while working on adding flexibility to the `py-comp` crate.\r\nGiven the definition:\r\n\r\n```rust\r\nmacro_rules! m {\r\n    ($e:expr) => {\"expr\"};\r\n    ($t:tt) => {\"tt\"};\r\n}\r\n```\r\nwe get the following behaviours:\r\n```rust\r\nm!(1+1)  // expr\r\nm!(foo)  // expr\r\nm!(=)  // tt\r\n```\r\nwhich is reasonable, but writing:\r\n```rust\r\nm!(for)\r\n```\r\n(or any keyword like `while`, `if`, `match`, `box` and probably others)\r\nwe get:\r\n```\r\nerror: expected pattern, found `<eof>`\r\n --> src/main.rs:7:23\r\n  |\r\n7 |     println!(\"{}\", m!(for));\r\n  |                       ^^^ expected pattern\r\n\r\nerror: aborting due to previous error\r\n```\r\nImportantly, removing the first case (`($e:expr) => {\"expr\"};`) allows that last example to be translated to `\"tt\"`\r\n\r\nThis is confusing to me: I though that the parser tries each option until it finds one that matches, or fails the macro if none did, but in this case it obviously bails the macro parsing early without exhausting all options.\r\n\r\nYou can play around with it here:\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=374709ef7516dfee7b5df2bca278764b", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60524/timeline", "performed_via_github_app": null, "state_reason": null}