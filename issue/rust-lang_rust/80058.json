{"url": "https://api.github.com/repos/rust-lang/rust/issues/80058", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80058/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80058/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80058/events", "html_url": "https://github.com/rust-lang/rust/issues/80058", "id": 768024442, "node_id": "MDU6SXNzdWU3NjgwMjQ0NDI=", "number": 80058, "title": "asm!: lint on bare memory accesses without [] or offset", "user": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 2046313052, "node_id": "MDU6TGFiZWwyMDQ2MzEzMDUy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-asm", "name": "F-asm", "color": "f9c0cc", "default": false, "description": "`#![feature(asm)]` (not `llvm_asm`)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-12-15T18:53:05Z", "updated_at": "2023-04-05T17:36:19Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "In Intel syntax mode without prefixes, writing `mov rax, some_symbol` is equivalent to `mov rax, [some_symbol]`: in both cases it refers to the memory pointed to by the symbol. However, I've seen multiple people think the former syntax obtains the address of the symbol instead. (Referring to the address of the symbol requires `offset`, [which doesn't currently work in LLVM](https://github.com/rust-lang/rust/issues/79874).) This confusion can result in bugs that are quite difficult to debug.\r\n\r\nI think it'd be appropriate, working in conjunction with a future version of LLVM's assembly parser, to catch \"bare\" uses of symbols, and suggest either adding `[]` around it to access the memory pointed to by the symbol, or adding `offset` to use the address of the symbol.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80058/timeline", "performed_via_github_app": null, "state_reason": null}