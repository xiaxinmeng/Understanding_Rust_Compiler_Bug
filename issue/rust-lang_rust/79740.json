{"url": "https://api.github.com/repos/rust-lang/rust/issues/79740", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79740/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79740/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79740/events", "html_url": "https://github.com/rust-lang/rust/issues/79740", "id": 757716085, "node_id": "MDU6SXNzdWU3NTc3MTYwODU=", "number": 79740, "title": "panic! in `Command` child forked from non-main thread results in exit status 0", "user": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-12-05T16:34:05Z", "updated_at": "2021-05-16T00:53:59Z", "closed_at": "2021-05-16T00:53:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nIf a panic occurs in a child process forked off by `Command` on a thread other than the main thread, the whole child process exits 0, so it looks like things have worked when in fact they've gone catastrophically wrong.  This seems like a serious error handling bug.\r\n\r\n@rustbot modify labels +T-libs +libs-impl\r\n\r\n### Steps to reproduce\r\n\r\n```rust\r\nuse std::io;\r\nuse std::process::Command;\r\nuse std::os::unix::process::CommandExt;\r\nuse std::thread;\r\n\r\nfn main() -> Result<(),io::Error> {\r\n    let thr = thread::spawn(||{\r\n        let mut c = Command::new(\"echo\");\r\n        c.arg(\"hi\");\r\n        unsafe {\r\n            c.pre_exec(|| panic!(\"crash now!\"));\r\n        }\r\n        let st = c.status().expect(\"get status\");\r\n        println!(\"{:?}\", st);\r\n    });\r\n    thr.join().expect(\"joined\");\r\n    Ok(())\r\n}\r\n```\r\n\r\n### Actual behaviour\r\n\r\n```\r\nthread '<unnamed>' panicked at 'crash now!', t.rs:11:27\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\nExitStatus(ExitStatus(0))\r\n```\r\n\r\n### Expected behaviour\r\n\r\n * The spawned thread builds the Command.\r\n * `Command.status` tries to run the command, so\r\n * `Command.status` forks, and then runs the `pre_exec` closure\r\n * The `pre_exec` closure panics\r\n * Consequently, the child process exits with `SIGABRT` or in any case nonzero\r\n * `st` is not a success\r\n\r\nSpecifically, the last line should be something like `ExitStatus(ExitStatus(25856))` (which is what you get without the `thread::spawn`)\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.50.0-nightly (3ff10e74a 2020-12-04)\r\nbinary: rustc\r\ncommit-hash: 3ff10e74a74ed093fcabac1de27fe1cd65bbbb4a\r\ncommit-date: 2020-12-04\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.50.0-nightly\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n\r\n<details><summary>Backtrace (not particularly enlightening)</summary>\r\n<p>\r\n```\r\nthread '<unnamed>' panicked at 'crash now!', t.rs:11:27\r\nstack backtrace:\r\n   0: std::panicking::begin_panic\r\n   1: t::main::{{closure}}::{{closure}}\r\n   2: <alloc::boxed::Box<F,A> as core::ops::function::FnMut<Args>>::call_mut\r\n             at /rustc/1773f60ea5d42e86b8fdf78d2fc5221ead222bc1/library/alloc/src/boxed.rs:1314:9\r\n   3: std::sys::unix::process::process_inner::<impl std::sys::unix::process::process_common::Command>::do_exec\r\n             at /rustc/1773f60ea5d42e86b8fdf78d2fc5221ead222bc1/library/std/src/sys/unix/process/process_unix.rs:228:13\r\n   4: std::sys::unix::process::process_inner::<impl std::sys::unix::process::process_common::Command>::spawn\r\n             at /rustc/1773f60ea5d42e86b8fdf78d2fc5221ead222bc1/library/std/src/sys/unix/process/process_unix.rs:58:36\r\n   5: std::process::Command::status\r\n             at /rustc/1773f60ea5d42e86b8fdf78d2fc5221ead222bc1/library/std/src/process.rs:904:9\r\n   6: t::main::{{closure}}\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nExitStatus(ExitStatus(0))\r\n\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79740/timeline", "performed_via_github_app": null, "state_reason": "completed"}