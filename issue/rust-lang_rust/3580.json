{"url": "https://api.github.com/repos/rust-lang/rust/issues/3580", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3580/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3580/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3580/events", "html_url": "https://github.com/rust-lang/rust/issues/3580", "id": 7112093, "node_id": "MDU6SXNzdWU3MTEyMDkz", "number": 3580, "title": "Casting an enum to an int inside match", "user": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2012-09-25T03:33:21Z", "updated_at": "2012-09-25T17:02:11Z", "closed_at": "2012-09-25T17:01:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I'm trying to convert an `int` to an `enum`, so I was attempting to use a match. Unfortunately I can't cast the enum values.\n\n```\nmod error {\n    enum Token {\n        // unable to use constants in to define an enum at compile time :(\n        NoError                 = 0,                // GLFW_NO_ERROR;\n        NotInitialized          = 0x00070001,       // GLFW_NOT_INITIALIZED;\n        NoCurrentContext        = 0x00070002,       // GLFW_NO_CURRENT_CONTEXT;\n        InvalidEnum             = 0x00070003,       // GLFW_INVALID_ENUM;\n        InvalidValue            = 0x00070004,       // GLFW_INVALID_VALUE;\n        OutOfMemory             = 0x00070005,       // GLFW_OUT_OF_MEMORY;\n        OpenglUnavailable       = 0x00070006,       // GLFW_OPENGL_UNAVAILABLE;\n        VersionUnavailable      = 0x00070007,       // GLFW_VERSION_UNAVAILABLE;\n        PlatformError           = 0x00070008,       // GLFW_PLATFORM_ERROR;\n        WindowNotActive         = 0x00070009,       // GLFW_WINDOW_NOT_ACTIVE;\n        FormatUnavailable       = 0x0007000A,       // GLFW_FORMAT_UNAVAILABLE;\n    }\n}\n\nfn get_error() -> error::Token {\n    let e = glfwGetError(); // e is an int\n\n    match e {\n        error::NoError            as int => { error::NoError            }\n        error::NotInitialized     as int => { error::NotInitialized     }\n        error::NoCurrentContext   as int => { error::NoCurrentContext   }\n        error::InvalidEnum        as int => { error::InvalidEnum        }\n        error::InvalidValue       as int => { error::InvalidValue       }\n        error::OutOfMemory        as int => { error::OutOfMemory        }\n        error::OpenglUnavailable  as int => { error::OpenglUnavailable  }\n        error::VersionUnavailable as int => { error::VersionUnavailable }\n        error::PlatformError      as int => { error::PlatformError      }\n        error::WindowNotActive    as int => { error::WindowNotActive    }\n        error::FormatUnavailable  as int => { error::FormatUnavailable  }\n        _ => { fail(~\"Unknown GLFW error\") }\n    }\n}\n```\n\nError:\n\n```\n./src/owindow/glfw.rs:206:8: 206:36 error: mismatched types: expected enum but found `int`\n./src/owindow/glfw.rs:206         error::NoError            => { error::NoError            }\n```\n\nThis is the ugly work-around I've been using:\n\n```\nfn get_error() -> error::Token {\n    let e = glfwGetError();\n\n    if      e == GLFW_NO_ERROR              { error::NoError            }\n    else if e == GLFW_NOT_INITIALIZED       { error::NotInitialized     }\n    else if e == GLFW_NO_CURRENT_CONTEXT    { error::NoCurrentContext   }\n    else if e == GLFW_INVALID_ENUM          { error::InvalidEnum        }\n    else if e == GLFW_INVALID_VALUE         { error::InvalidValue       }\n    else if e == GLFW_OUT_OF_MEMORY         { error::OutOfMemory        }\n    else if e == GLFW_OPENGL_UNAVAILABLE    { error::OpenglUnavailable  }\n    else if e == GLFW_VERSION_UNAVAILABLE   { error::VersionUnavailable }\n    else if e == GLFW_PLATFORM_ERROR        { error::PlatformError      }\n    else if e == GLFW_WINDOW_NOT_ACTIVE     { error::WindowNotActive    }\n    else if e == GLFW_FORMAT_UNAVAILABLE    { error::FormatUnavailable  }\n    else { fail(~\"Unknown GLFW error\") }\n}\n```\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3580/timeline", "performed_via_github_app": null, "state_reason": "completed"}