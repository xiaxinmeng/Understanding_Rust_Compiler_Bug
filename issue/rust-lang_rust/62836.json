{"url": "https://api.github.com/repos/rust-lang/rust/issues/62836", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62836/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62836/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62836/events", "html_url": "https://github.com/rust-lang/rust/issues/62836", "id": 470706520, "node_id": "MDU6SXNzdWU0NzA3MDY1MjA=", "number": 62836, "title": "Add a way to get the number of bits in a representation", "user": {"login": "danieldulaney", "id": 12433940, "node_id": "MDQ6VXNlcjEyNDMzOTQw", "avatar_url": "https://avatars.githubusercontent.com/u/12433940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldulaney", "html_url": "https://github.com/danieldulaney", "followers_url": "https://api.github.com/users/danieldulaney/followers", "following_url": "https://api.github.com/users/danieldulaney/following{/other_user}", "gists_url": "https://api.github.com/users/danieldulaney/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldulaney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldulaney/subscriptions", "organizations_url": "https://api.github.com/users/danieldulaney/orgs", "repos_url": "https://api.github.com/users/danieldulaney/repos", "events_url": "https://api.github.com/users/danieldulaney/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldulaney/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-20T19:24:49Z", "updated_at": "2019-12-22T01:28:27Z", "closed_at": "2019-12-22T01:28:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "A few `core` APIs return values related to a number of bits. For example, the various [`leading_zeros` methods](https://doc.rust-lang.org/std/primitive.usize.html#method.leading_zeros), [`trailing_zeros` methods](https://doc.rust-lang.org/std/primitive.usize.html#method.trailing_zeros), [`count_zeros` methods](https://doc.rust-lang.org/std/primitive.usize.html#method.count_zeros), and [`count_ones` methods](https://doc.rust-lang.org/std/primitive.usize.html#method.count_ones). When working with these, you often need to determine the number of bits in the given number's representation. There does not appear to be an officially-supported way to do this in Rust. In fact, I could not find any documentation or RFC endorsing 8 bits per byte as a hard requirement. For example, will `size_of::<u32>()` always be 4? [Edit: Actually, it does say at the top of the `usize` primitive type that it will be 4 bytes on a 32-bit target at 8 bytes on a 64-bit target. I do wish it was slightly more prominent.]\r\n\r\nThere are at least three options:\r\n- Add a `BITS_PER_BYTE` or similar constant somewhere with the value 8, and add documentation that `size_of::<T>() * BITS_PER_BYTE` is the number of bits in `T`'s representation.\r\n- Add a `size_of_bits::<T>()` method in `core::mem` that returns the size of a type in bits\r\n- Note in the documentation that the number of bits in an item's representation is always 8 times its size in bytes, but don't make a code change. Developers who need the size of an object can define their own `BITS_PER_BYTE` constant.\r\n\r\nI think that this would be a small but valuable addition to the standard library. Having to define a magic number in my code that is not based on any official documentation feels like a design deficiency.\r\n\r\nIs this something that needs an RFC? If so, I would be happy to write one up. (It would be my first RFC, so I'd appreciate any guidance).", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62836/timeline", "performed_via_github_app": null, "state_reason": "completed"}