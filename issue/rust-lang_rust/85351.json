{"url": "https://api.github.com/repos/rust-lang/rust/issues/85351", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85351/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85351/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85351/events", "html_url": "https://github.com/rust-lang/rust/issues/85351", "id": 892559005, "node_id": "MDU6SXNzdWU4OTI1NTkwMDU=", "number": 85351, "title": "Miscompilation on ARM-M with nightly-2021-04-23", "user": {"login": "cbiffle", "id": 45247, "node_id": "MDQ6VXNlcjQ1MjQ3", "avatar_url": "https://avatars.githubusercontent.com/u/45247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbiffle", "html_url": "https://github.com/cbiffle", "followers_url": "https://api.github.com/users/cbiffle/followers", "following_url": "https://api.github.com/users/cbiffle/following{/other_user}", "gists_url": "https://api.github.com/users/cbiffle/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbiffle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbiffle/subscriptions", "organizations_url": "https://api.github.com/users/cbiffle/orgs", "repos_url": "https://api.github.com/users/cbiffle/repos", "events_url": "https://api.github.com/users/cbiffle/events{/privacy}", "received_events_url": "https://api.github.com/users/cbiffle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252628, "node_id": "MDU6TGFiZWwyNjIyNTI2Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta", "name": "regression-from-stable-to-beta", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to beta."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}, {"id": 1568663381, "node_id": "MDU6TGFiZWwxNTY4NjYzMzgx", "url": "https://api.github.com/repos/rust-lang/rust/labels/ICEBreaker-LLVM", "name": "ICEBreaker-LLVM", "color": "74cc28", "default": false, "description": "Bugs identified for the LLVM ICE-breaker group"}, {"id": 1966877457, "node_id": "MDU6TGFiZWwxOTY2ODc3NDU3", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-critical", "name": "P-critical", "color": "eb6420", "default": false, "description": "Critical priority"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2021-05-15T23:32:08Z", "updated_at": "2021-06-10T17:51:48Z", "closed_at": "2021-06-10T17:51:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We are seeing a subtle occasional miscompilation on ARM-M using `nightly-2021-04-23` in `rust-toolchain`. It is difficult to elicit and reproduce, since subtle changes to the layout of the code will cause the compiler to make decisions that either do or do not trigger the bug. It appears to have something to do with stack frame maintenance in outlined functions. We are definitely observing it on `thumbv8m.main-none-eabihf`, but it's subtle enough that we may also be getting it on `thumbv7em-none-eabihf` and just haven't noticed it yet.\r\n\r\nAs of somewhat recently (late April?) output at `opt-level = \"z\"` has started including outlined functions that look like this (actual example):\r\n\r\n```\r\n000211e6 <OUTLINED_FUNCTION_2>:\r\n   211e6:\tf84d ed08 \tstr.w\tlr, [sp, #-8]!\r\n   211ea:\te9cd 5007 \tstrd\tr5, r0, [sp, #28]\r\n   211ee:\t4620      \tmov\tr0, r4\r\n   211f0:\tf8ad 6034 \tstrh.w\tr6, [sp, #52]\t; 0x34\r\n   211f4:\te9cd 1209 \tstrd\tr1, r2, [sp, #36]\t; 0x24\r\n   211f8:\tf7fe ff33 \tbl\t20062 <_ZN7userlib2hl7Message5fixed17h5f2a9abf3d25035aE>\r\n   211fc:\t2800      \tcmp\tr0, #0\r\n   211fe:\tf85d eb08 \tldr.w\tlr, [sp], #8\r\n   21202:\t4770      \tbx\tlr\r\n```\r\n\r\nNow, note that the instructions at 0x211e6 and 0x211fe are setting up and tearing down a temporary stack frame, respectively. This will become important in a bit.\r\n\r\nIt appears that the stack frame offsets used in instructions while this temporary stack frame exists are not being updated to reflect its existence. Stack variables updated within the outlined function above are being deposited 8 bytes off where they should be.\r\n\r\nI do not currently have a compact repro case, and the code in question has not yet been published (though I could arrange to publish it if it would help, we intend to open source it). Here are two execution traces of programs showing correct behavior vs corrupt behavior. Both traces set up arguments to a syscall, which uses struct return and deposits a struct onto the stack; the routines then shuffle the results around before calling a library function. It is during the shuffling that things go awry.\r\n\r\nIn this working trace I have called the struct return buffer in the stack frame R and another related-but-separate buffer B. I've omitted instructions that don't contribute by control flow or value-dominating the registers at the end. S refers to the value of the stack pointer on entry to the trace.\r\n```\r\n   2006e:\t4606      \tmov\tr6, r0  ; r6 = B\r\n   20070:\ta801      \tadd\tr0, sp, #4  ; r0 = R = S + 4\r\n   20072:\t460d      \tmov\tr5, r1\r\n   20074:\t9000      \tstr\tr0, [sp, #0]\r\n   20076:\t4630      \tmov\tr0, r6\r\n   20078:\t2102      \tmovs\tr1, #2\r\n   2007a:\t2200      \tmovs\tr2, #0\r\n   2007c:\t2300      \tmovs\tr3, #0\r\n   2007e:\tf001 f8bc \tbl\t211fa <sys_recv_stub>\r\n   20082:\t2800      \tcmp\tr0, #0\r\n    ...\r\n   2009c:\t9803      \tldr\tr0, [sp, #12] ; r0 = [S + 12] = [R + 8]\r\n    ...\r\n   200a2:\te9dd 1204 \tldrd\tr1, r2, [sp, #16]\r\n    ; r1 = [S + 16] = [R + 12]\r\n    ; r2 = [S + 20] = [R + 16]\r\n    ...\r\n   200b0:\tf001 f89c \tbl\t211ec <OUTLINED_FUNCTION_1>\r\n    ; (following call)\r\n    ...\r\n   211f0:\te9cd 1203 \tstrd\tr1, r2, [sp, #12]\r\n    ; [S + 12] = r1 = [R + 12]\r\n    ; [S + 16] = r2 = [R + 16]\r\n   211f4:\te9cd 6001 \tstrd\tr6, r0, [sp, #4]\r\n    ; [S + 4] = r6 = B\r\n    ; [S + 8] = [R + 8]\r\n   211f8:\t4770      \tbx\tlr\r\n    ; (returns)\r\n   200b4:\ta801      \tadd\tr0, sp, #4  ; r0 = S + 4 = R\r\n   200b6:\tf000 f875 \tbl\t201a4 <_ZN7userlib2hl7Message5fixed17h5f2a9abf3d25035aE>\r\n    ; function invoked with r0 = R = S + 4\r\n    ; words [S+4], [S+8], [S+12], [S+16] initialized\r\n    ; everything's good\r\n```\r\n\r\nNow, here is the non-working trace with the same sort of annotations. Note that while the function at the end is still called with one argument `R` (stack frame plus 28), the actual struct being passed is deposited starting 8 bytes lower at stack frame plus 20:\r\n```\r\n   200e4:\tac07      \tadd\tr4, sp, #28 ; r4 = S + 28 = R\r\n    ...\r\n   20106:\tad06      \tadd\tr5, sp, #24 ; r5 = S + 24 = B\r\n    ...\r\n   2010a:\t4628      \tmov\tr0, r5  ; r0 = S + 24\r\n   2010c:\t2102      \tmovs\tr1, #2\r\n   2010e:\t2200      \tmovs\tr2, #0\r\n   20110:\t2300      \tmovs\tr3, #0\r\n   20112:\t9400      \tstr\tr4, [sp, #0]  ; stack arg = r4 = S + 28 = R\r\n   20114:\tf001 f876 \tbl\t21204 <sys_recv_stub>\r\n   20118:\t2800      \tcmp\tr0, #0\r\n    ...\r\n   20136:\te9dd 120a \tldrd\tr1, r2, [sp, #40]\r\n    ; r1 = [S + 40] = [R + 12]\r\n    ; r2 = [S + 44] = [R + 16]\r\n    ...\r\n   20144:\tf001 f84f \tbl\t211e6 <OUTLINED_FUNCTION_2>\r\n    ; (following call)\r\n   211e6:\tf84d ed08 \tstr.w\tlr, [sp, #-8]!  ; sp = S - 8 <---- stack frame adjust\r\n   211ea:\te9cd 5007 \tstrd\tr5, r0, [sp, #28]\r\n    ; [S + 20] = B\r\n    ; [S + 24] = r0 = (known to be zero from CFG, omitted)\r\n   211ee:\t4620      \tmov\tr0, r4  ; r0 = r4 = R, set above, before call\r\n    ...\r\n   211f4:\te9cd 1209 \tstrd\tr1, r2, [sp, #36]\r\n    ; [S + 28] = r1 = [R + 12]\r\n    ; [S + 32] = r2 = [R + 16]\r\n   211f8:\tf7fe ff33 \tbl\t20062 <_ZN7userlib2hl7Message5fixed17h5f2a9abf3d25035aE>\r\n    ; function invoked with r0 = S + 28\r\n    ; actual struct written at: S+20.\r\n```\r\n\r\n**Additional notes:**\r\n\r\n- We started seeing this after bumping `rust-toolchain` from `nightly-2020-12-29` to `nightly-2021-04-23`, so the behavior was introduced somewhere between those points. (@luqmana points out that this likely includes the LLVM 11-12 transition.)\r\n- While we have seen this on ARMv7/8-M, that's because that's the architecture we're using -- it might affect other platforms, not sure.\r\n- We build mostly at `opt-level = \"z\"` but this may or may not be specific to that opt level.\r\n- This was found by @labbott. Thanks also to @bcantrill for helping reduce the behavior.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.53.0-nightly (7f4afdf02 2021-04-22)\r\nbinary: rustc\r\ncommit-hash: 7f4afdf0255600306bf67432da722c7b5d2cbf82\r\ncommit-date: 2021-04-22\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.53.0-nightly\r\nLLVM version: 12.0.0\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85351/timeline", "performed_via_github_app": null, "state_reason": "completed"}