{"url": "https://api.github.com/repos/rust-lang/rust/issues/110228", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110228/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110228/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110228/events", "html_url": "https://github.com/rust-lang/rust/issues/110228", "id": 1664422563, "node_id": "I_kwDOAAsO6M5jNRKj", "number": 110228, "title": "MIR Validation: suprious \"has deref at the wrong place\"", "user": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-04-12T11:57:43Z", "updated_at": "2023-04-12T12:11:37Z", "closed_at": "2023-04-12T12:08:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This code should be fine, and Miri actually runs it without any complaint\r\n```rust\r\n#![feature(custom_mir, core_intrinsics)]\r\nextern crate core;\r\nuse core::intrinsics::mir::*;\r\n#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\r\npub fn fn0() {\r\n    mir! {\r\n        let x: i32;\r\n        let tuple: (*mut i32,);\r\n        {\r\n            tuple.0 = core::ptr::addr_of_mut!(x);\r\n            *(tuple.0) = 1;\r\n            Return()\r\n        }\r\n    }\r\n}\r\npub fn main() {\r\n    fn0();\r\n}\r\n```\r\n\r\nBut it fails MIR validation\r\n```\r\n% rustc repro.rs           \r\nerror: internal compiler error: no errors encountered even though `delay_span_bug` issued\r\n\r\nerror: internal compiler error: broken MIR in Item(WithOptConstParam { did: DefId(0:5 ~ repro[e1bb]::fn0), const_param_did: None }) (after phase change to runtime-optimized) at bb0[1]:\r\n                                (*(_2.0: *mut i32)), has deref at the wrong place\r\n  --> repro.rs:11:13\r\n   |\r\n11 |             *(tuple.0) = 1;\r\n   |             ^^^^^^^^^^^^^^\r\n   |\r\n   = note: delayed at    0: std::backtrace::Backtrace::create\r\n              1: <rustc_errors::HandlerInner>::emit_diagnostic\r\n              2: <rustc_errors::Handler>::delay_span_bug::<rustc_span::span_encoding::Span, &alloc::string::String>\r\n              3: <rustc_const_eval::transform::validate::TypeChecker>::fail::<alloc::string::String>\r\n              4: <rustc_const_eval::transform::validate::TypeChecker as rustc_middle::mir::visit::Visitor>::visit_place\r\n              5: <rustc_const_eval::transform::validate::TypeChecker as rustc_middle::mir::visit::Visitor>::visit_statement\r\n              6: <rustc_const_eval::transform::validate::Validator as rustc_middle::mir::MirPass>::run_pass\r\n              7: rustc_mir_transform::pass_manager::run_passes_inner\r\n              8: rustc_mir_transform::optimized_mir\r\n              9: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::queries::optimized_mir, rustc_query_impl::plumbing::QueryCtxt>\r\n             10: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::optimized_mir\r\n             11: <rustc_middle::ty::context::TyCtxt>::instance_mir\r\n             12: rustc_monomorphize::collector::collect_neighbours\r\n             13: rustc_monomorphize::collector::collect_items_rec\r\n             14: rustc_monomorphize::collector::collect_items_rec\r\n             15: <core::panic::unwind_safe::AssertUnwindSafe<rustc_data_structures::sync::par_for_each_in<alloc::vec::Vec<rustc_middle::mir::mono::MonoItem>, rustc_monomorphize::collector::collect_crate_mono_items::{closure#1}::{closure#0}>::{closure#0}::{closure#0}> as core::ops::function::FnOnce<()>>::call_once\r\n             16: rustc_data_structures::sync::par_for_each_in::<alloc::vec::Vec<rustc_middle::mir::mono::MonoItem>, rustc_monomorphize::collector::collect_crate_mono_items::{closure#1}::{closure#0}>\r\n             17: <rustc_session::session::Session>::time::<(), rustc_monomorphize::collector::collect_crate_mono_items::{closure#1}>\r\n             18: rustc_monomorphize::collector::collect_crate_mono_items\r\n             19: rustc_monomorphize::partitioning::collect_and_partition_mono_items\r\n             20: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::queries::collect_and_partition_mono_items, rustc_query_impl::plumbing::QueryCtxt>\r\n             21: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::collect_and_partition_mono_items\r\n             22: rustc_codegen_ssa::base::codegen_crate::<rustc_codegen_llvm::LlvmCodegenBackend>\r\n             23: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate\r\n             24: <rustc_session::session::Session>::time::<alloc::boxed::Box<dyn core::any::Any>, rustc_interface::passes::start_codegen::{closure#0}>\r\n             25: rustc_interface::passes::start_codegen\r\n             26: <rustc_middle::ty::context::GlobalCtxt>::enter::<<rustc_interface::queries::Queries>::ongoing_codegen::{closure#0}::{closure#0}, core::result::Result<alloc::boxed::Box<dyn core::any::Any>, rustc_span::ErrorGuaranteed>>\r\n             27: <rustc_interface::queries::Queries>::ongoing_codegen\r\n             28: <rustc_interface::interface::Compiler>::enter::<rustc_driver_impl::run_compiler::{closure#1}::{closure#2}, core::result::Result<core::option::Option<rustc_interface::queries::Linker>, rustc_span::ErrorGuaranteed>>\r\n             29: rustc_span::set_source_map::<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}::{closure#0}>\r\n             30: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>\r\n             31: std::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>\r\n             32: <<std::thread::Builder>::spawn_unchecked_<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>::{closure#1} as core::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\r\n             33: std::sys::unix::thread::Thread::new::thread_start\r\n             34: __pthread_joiner_wake\r\n           \r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.70.0-nightly (9df3a39fb 2023-04-11) running on aarch64-apple-darwin\r\n\r\nquery stack during panic:\r\nend of query stack\r\n```\r\n\r\nCustom MIR translation looks right\r\n```\r\n% rustc -Zunpretty=mir repro.rs\r\n// WARNING: This output format is intended for human consumers only\r\n// and is subject to change without notice. Knock yourself out.\r\nfn fn0() -> () {\r\n    let mut _0: ();                      // return place in scope 0 at repro.rs:5:14: 5:14\r\n    let mut _1: i32;                     // in scope 0 at /rustc/9df3a39fb30575d808e70800f9fad5362aac57a2/library/core/src/intrinsics/mir.rs:390:21: 390:32\r\n    let mut _2: (*mut i32,);             // in scope 0 at /rustc/9df3a39fb30575d808e70800f9fad5362aac57a2/library/core/src/intrinsics/mir.rs:390:21: 390:32\r\n\r\n    bb0: {\r\n        (_2.0: *mut i32) = &raw mut _1;  // scope 0 at repro.rs:10:13: 10:49\r\n        (*(_2.0: *mut i32)) = const 1_i32; // scope 0 at repro.rs:11:13: 11:27\r\n        return;                          // scope 0 at repro.rs:12:13: 12:21\r\n    }\r\n}\r\n\r\nfn main() -> () {\r\n    let mut _0: ();                      // return place in scope 0 at repro.rs:16:15: 16:15\r\n    let _1: ();                          // in scope 0 at repro.rs:17:5: 17:10\r\n\r\n    bb0: {\r\n        _1 = fn0() -> bb1;               // scope 0 at repro.rs:17:5: 17:10\r\n                                         // mir::Constant\r\n                                         // + span: repro.rs:17:5: 17:8\r\n                                         // + literal: Const { ty: fn() {fn0}, val: Value(<ZST>) }\r\n    }\r\n\r\n    bb1: {\r\n        return;                          // scope 0 at repro.rs:18:2: 18:2\r\n    }\r\n}\r\n```\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.70.0-nightly (9df3a39fb 2023-04-11)\r\nbinary: rustc\r\ncommit-hash: 9df3a39fb30575d808e70800f9fad5362aac57a2\r\ncommit-date: 2023-04-11\r\nhost: aarch64-apple-darwin\r\nrelease: 1.70.0-nightly\r\nLLVM version: 16.0.2\r\n```", "closed_by": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110228/timeline", "performed_via_github_app": null, "state_reason": "completed"}