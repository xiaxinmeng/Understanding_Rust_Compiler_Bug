{"url": "https://api.github.com/repos/rust-lang/rust/issues/25165", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/25165/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/25165/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/25165/events", "html_url": "https://github.com/rust-lang/rust/issues/25165", "id": 73805045, "node_id": "MDU6SXNzdWU3MzgwNTA0NQ==", "number": 25165, "title": "Order-dependent type inference failure with match", "user": {"login": "pythonesque", "id": 923144, "node_id": "MDQ6VXNlcjkyMzE0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/923144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pythonesque", "html_url": "https://github.com/pythonesque", "followers_url": "https://api.github.com/users/pythonesque/followers", "following_url": "https://api.github.com/users/pythonesque/following{/other_user}", "gists_url": "https://api.github.com/users/pythonesque/gists{/gist_id}", "starred_url": "https://api.github.com/users/pythonesque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pythonesque/subscriptions", "organizations_url": "https://api.github.com/users/pythonesque/orgs", "repos_url": "https://api.github.com/users/pythonesque/repos", "events_url": "https://api.github.com/users/pythonesque/events{/privacy}", "received_events_url": "https://api.github.com/users/pythonesque/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2015-05-07T02:08:47Z", "updated_at": "2023-04-05T17:36:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Not sure if this has been reported yet, but it really seems like Rust should be able to do better here.\n\nThis also works if we replace the `match` with an `if let` and move the `res` assignment below it.\n\nNote that this is a reduced testcase and therefore contrived, but the original issue can be seen [here](http://www.reddit.com/r/rust/comments/352u97/question_about_function_accepting_a_closure_as_an/).\n\n---\n\n``` rust\nstruct Foo;\n\nimpl Foo {\n    fn foo(self) -> () { () }\n}\n\nfn main() {\n    let mut res = None; // Compiles if we use `None::<Foo>`;\n    match res {\n        Some(winning) => { let _: () = winning.foo(); },\n        None => res = Some(Foo), // Compiles if we move the None clause above the Some.\n    }\n}\n```\n\n``` console\n<anon>:10:40: 10:53 error: the type of this value must be known in this context\n<anon>:10         Some(winning) => { let _: () = winning.foo(); },\n                                                 ^~~~~~~~~~~~~\n```\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/25165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/25165/timeline", "performed_via_github_app": null, "state_reason": null}