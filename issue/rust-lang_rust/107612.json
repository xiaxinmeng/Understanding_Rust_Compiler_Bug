{"url": "https://api.github.com/repos/rust-lang/rust/issues/107612", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107612/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107612/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107612/events", "html_url": "https://github.com/rust-lang/rust/issues/107612", "id": 1568757217, "node_id": "I_kwDOAAsO6M5dgVXh", "number": 107612, "title": "Consider simulation testing for math on 16-bit targets", "user": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 120005, "node_id": "MDU6TGFiZWwxMjAwMDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-testsuite", "name": "A-testsuite", "color": "f7e101", "default": false, "description": "Area: The testsuite used to check the correctness of rustc"}, {"id": 1884641928, "node_id": "MDU6TGFiZWwxODg0NjQxOTI4", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-AVR", "name": "O-AVR", "color": "6e6ec0", "default": false, "description": "Target: AVR processors (ATtiny, ATmega, etc.)"}, {"id": 4434140250, "node_id": "LA_kwDOAAsO6M8AAAABCEucWg", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-msp430", "name": "O-msp430", "color": "6e6ec0", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2023-02-02T20:45:16Z", "updated_at": "2023-03-16T17:17:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We have a few tier 3 targets that are 16-bit, AVR and MSP430. These have numerous issues but a number of them have been resolved recently. It's almost like you can really compile for them! Unfortunately these targets have almost no regression testing, as they are bare-metal, cross-compile-only targets. If we are serious about supporting them, it would be prudent to run tests. Fortunately, AVR has a sophisticated simulation testing ecosystem which several users report as reliable-enough for \"the program builds and functions, and maybe even as-intended\". However, as these are tier 3 targets, it would be somewhat of a policy change to add testing for much more than \"you can technically build code for them ever\".\r\n\r\n_On the other hand_, the simulation testing in this case would probably be for bare minimums like \"arithmetic and bitwise operators work\". Embedded users are often willing to work around the inadequacy of `std` and the language, but it's hard to expect them to build around us if they don't have access to even basic computation primitives.\r\n\r\nIt may be surprising these targets need regression testing for such minimums, but nonetheless it's hard to expect them to be elevated past even tier 3 if we don't allow regression testing for those basics. On the other hand, if they break, _very few_ compiler programmers will know how to fix them, and the policy of not running testing for tier 3 targets is there for a reason. So, this may need an MCP or something like that? I don't know. I'm just raising it as an issue here to, for now, track issues that either currently or would enjoy this. Or maybe this will just wait until we elevate support for these targets past tier 3.\r\n\r\n- https://github.com/rust-lang/rust/issues/77131\r\n- https://github.com/rust-lang/rust/issues/82242\r\n- https://github.com/rust-lang/rust/issues/82380\r\n- An apparent regression introduced by virtually no regression testing for AVR:\r\n  - https://github.com/rust-lang/rust/issues/102278\r\n  - https://github.com/rust-lang/rust/issues/76930", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107612/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107612/timeline", "performed_via_github_app": null, "state_reason": null}