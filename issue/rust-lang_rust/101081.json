{"url": "https://api.github.com/repos/rust-lang/rust/issues/101081", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101081/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101081/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101081/events", "html_url": "https://github.com/rust-lang/rust/issues/101081", "id": 1353027423, "node_id": "I_kwDOAAsO6M5QpY9f", "number": 101081, "title": "Regression transmuting `RwLockReadGuard<T: ?Sized>`.", "user": {"login": "zachs18", "id": 8355914, "node_id": "MDQ6VXNlcjgzNTU5MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8355914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zachs18", "html_url": "https://github.com/zachs18", "followers_url": "https://api.github.com/users/zachs18/followers", "following_url": "https://api.github.com/users/zachs18/following{/other_user}", "gists_url": "https://api.github.com/users/zachs18/gists{/gist_id}", "starred_url": "https://api.github.com/users/zachs18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zachs18/subscriptions", "organizations_url": "https://api.github.com/users/zachs18/orgs", "repos_url": "https://api.github.com/users/zachs18/repos", "events_url": "https://api.github.com/users/zachs18/events{/privacy}", "received_events_url": "https://api.github.com/users/zachs18/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 262252628, "node_id": "MDU6TGFiZWwyNjIyNTI2Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta", "name": "regression-from-stable-to-beta", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to beta."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/95", "html_url": "https://github.com/rust-lang/rust/milestone/95", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/95/labels", "id": 8127235, "node_id": "MI_kwDOAAsO6M4AfAMD", "number": 95, "title": "1.64.0", "description": null, "creator": {"login": "rustbot", "id": 47979223, "node_id": "MDQ6VXNlcjQ3OTc5MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47979223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustbot", "html_url": "https://github.com/rustbot", "followers_url": "https://api.github.com/users/rustbot/followers", "following_url": "https://api.github.com/users/rustbot/following{/other_user}", "gists_url": "https://api.github.com/users/rustbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustbot/subscriptions", "organizations_url": "https://api.github.com/users/rustbot/orgs", "repos_url": "https://api.github.com/users/rustbot/repos", "events_url": "https://api.github.com/users/rustbot/events{/privacy}", "received_events_url": "https://api.github.com/users/rustbot/received_events", "type": "User", "site_admin": false}, "open_issues": 2, "closed_issues": 857, "state": "closed", "created_at": "2022-06-25T02:07:59Z", "updated_at": "2022-11-09T16:13:06Z", "due_on": null, "closed_at": "2022-10-03T13:56:33Z"}, "comments": 12, "created_at": "2022-08-27T12:02:25Z", "updated_at": "2022-10-08T17:39:25Z", "closed_at": "2022-10-08T17:39:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a regression report! \ud83d\udc1b A regression is something that changed between versions of Rust but was not supposed to.\r\n\r\nPlease provide a short summary of the regression, along with any information you feel is relevant to replicate it.\r\n-->\r\n`RwLockReadGuard<T>` is now not transmutable when `T` is (dependent on) a generic parameter and `?Sized`, when it was previously \r\n\r\n(I don't necessarily think this is a significant enough problem to be worth \"fixing\", but I guess it is technically a regression).\r\n\r\n### Code\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse std::sync::RwLockReadGuard;\r\n// the lifetimes aren't important\r\nfn test1<'to, 'from: 'to, T: ?Sized>(guard: RwLockReadGuard<'from, T>) -> RwLockReadGuard<'to, T> {\r\n    unsafe { std::mem::transmute(guard) }\r\n}\r\n```\r\n\r\nI expected to see this happen: compilation success\r\n\r\nInstead, this happened: compilation error\r\n```\r\nerror[E0512]: cannot transmute between types of different sizes, or dependently-sized types\r\n --> src/main.rs:7:14\r\n  |\r\n7 |     unsafe { std::mem::transmute(guard) }\r\n  |              ^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: `RwLockReadGuard<T>` does not have a fixed size\r\n```\r\n\r\n### Version it worked on\r\n\r\n<!--\r\nProvide the most recent version this worked on, for example:\r\n\r\nIt most recently worked on: Rust 1.47\r\n-->\r\n\r\nIt most recently worked on: Rust 1.63.0\r\n\r\n### Version with regression\r\n\r\n<!--\r\nProvide the version you are using that has the regression.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.64.0-beta.3 (82bf34178 2022-08-18)\r\nbinary: rustc\r\ncommit-hash: 82bf34178fb14562d158c4611bdab35d4d39b31c\r\ncommit-date: 2022-08-18\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.64.0-beta.3\r\nLLVM version: 14.0.6\r\n```\r\n\r\n<!--\r\nDid the compiler crash? If so, please provide a backtrace.\r\n-->\r\n\r\n### Backtrace\r\n(no backtrace, compiler didn't crash)\r\n\r\n### Why\r\n[This commit](https://github.com/rust-lang/rust/commit/7cefa8f9959565acc6e3606cfa6aa1376c9f862f) changed the definition of `RwLockReadGuard` from\r\n```rs\r\npub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\r\n    lock: &'a RwLock<T>,\r\n}\r\n```\r\nto\r\n```rs\r\npub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\r\n    inner_lock: &'a sys::MovableRwLock,\r\n    data: &'a T,\r\n}\r\n```\r\n\r\n(The following is (AFAICT) why this change caused this regression; It is not itself a regression, and it applies to all (recent) versions of rustc (i.e. since at least 1.41.0))\r\n\r\nAFICT, rustc currently only supports transmuting a subset of `Sized` types that it conservatively can guarantee are the same size. For generic struct types with `?Sized` parameters, i think rustc can only guarantee the size if the whole struct's size does not depend on the parameters, or if the struct's only non-zst field is a (transitive transparent wrapper of a) pointer type depending on a generic parameter (`rustc_middle::ty::layout::SizeSkeleton` only has `Known(usize)` and `Pointer { .. }` variants, so can only express completely known and only-a-pointer sizes), e.g.\r\n```rs\r\npub struct Works<T: ?Sized> { // SizeSkeleton::compute returns Ok(Pointer { .. }) for this when T: ?Sized\r\n    inner: *mut T,\r\n}\r\npub unsafe fn works<T: ?Sized>(from: Works<T>) -> Works<T> {\r\n    std::mem::transmute(from) // works\r\n}\r\n\r\n#[repr(align(32))]\r\nstruct OverAlignZST;\r\n\r\npub struct AlsoWorks<T: ?Sized> { // SizeSkeleton::compute returns Ok(Pointer { .. }) for this when T: ?Sized\r\n    inner: *mut T,\r\n    other: OverAlignZST,\r\n}\r\npub unsafe fn also_works<T: ?Sized>(from: AlsoWorks<T>) -> AlsoWorks<T> {\r\n    std::mem::transmute(from) // works\r\n}\r\n\r\npub struct DoesntWork<T: ?Sized> { // SizeSkeleton::compute returns Err(Unknown(T)) for this when T: ?Sized\r\n    inner: *mut T,\r\n    other: u8,\r\n}\r\npub unsafe fn doesnt_work<T: ?Sized>(from: DoesntWork<T>) -> DoesntWork<T> {\r\n    std::mem::transmute(from) // DoesntWork<T> does not have a fixed size\r\n}\r\n```\r\n\r\n(See also: #101084 )\r\n<details><summary>Moved to #101084</summary>\r\n<p>\r\n(See also: #101084)\r\nUnrelated note: I think this size-calculation ignoring all ZSTs (not just 1-ZSTs) when there is a pointer field can cause `transmute` to (incorrectly?) allow transmuting between differently-sized types, e.g. this compiles and runs normally, but ICEs under miri:\r\n\r\n```rs\r\n#[repr(align(32))]\r\nstruct OverAlignZST;\r\n\r\npub struct AlsoWorks<T: ?Sized> { // SizeSkeleton::compute returns Ok(Pointer { .. }) for this when T: ?Sized\r\n    inner: *mut T,\r\n    other: OverAlignZST,\r\n}\r\n// This does not compile if you remove ?Sized\r\npub unsafe fn also_works<T: ?Sized>(from: *mut T) -> AlsoWorks<T> {\r\n    std::mem::transmute(from) // works\r\n}\r\nfn main() {\r\n    let mut x = vec![0; 16];\r\n    let x = &mut x[..];\r\n    unsafe {\r\n        let x = also_works(x);\r\n      }\r\n }\r\n```\r\n\r\n```\r\n$ cargo miri run\r\n...\r\nthread 'rustc' panicked at 'assertion failed: `(left == right)`\r\n  left: `Size(16 bytes)`,\r\n right: `Size(32 bytes)`\r\n...\r\nquery stack during panic:\r\nend of query stack\r\n\r\nMiri caused an ICE during evaluation. Here's the interpreter backtrace at the time of the panic:\r\nnote: the place in the program where the ICE was triggered\r\n  --> src/main.rs:57:5\r\n   |\r\n57 |     std::mem::transmute(from) // works\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: inside `also_works3::<[i32]>` \r\n...\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n@rustbot modify labels: +regression-from-stable-to-beta -regression-untriaged\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101081/timeline", "performed_via_github_app": null, "state_reason": "completed"}