{"url": "https://api.github.com/repos/rust-lang/rust/issues/98295", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98295/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98295/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98295/events", "html_url": "https://github.com/rust-lang/rust/issues/98295", "id": 1276935632, "node_id": "I_kwDOAAsO6M5MHH3Q", "number": 98295, "title": "Incorrect debug info for `no_mangle` statics on Windows", "user": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 266005765, "node_id": "MDU6TGFiZWwyNjYwMDU3NjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows-msvc", "name": "O-windows-msvc", "color": "6e6ec0", "default": false, "description": "Toolchain: MSVC, Operating system: Windows"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-06-20T13:31:00Z", "updated_at": "2022-06-21T12:06:07Z", "closed_at": "2022-06-21T12:06:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As a part of #97085 which is itself a fix for #33172, @wesleywiser and I discovered that LLVM seems to be producing the incorrect debug information for `no_mangle` statics on Windows. \r\n\r\nFor the following code:\r\n\r\n```rust\r\n#[no_mangle]\r\npub static TEST: u64 = 0xdeadbeef;\r\n```\r\n\r\nThe correct debug information should not include a namespace. but it does:\r\n\r\n```\r\nS_GDATA32: [0002:000003D0], Type: T_UQUAD(0023), no_mangle_info::TEST\r\n``` \r\n\r\nHere's the relevant LLVM IR which at least looks correct:\r\n\r\n```\r\n!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())\r\n!26 = distinct !DIGlobalVariable(name: \"TEST\", scope: !27, file: !28, line: 20, type: !29, isLocal: false, isDefinition: true, align: 8)\r\n!27 = !DINamespace(name: \"no_mangle_info\", scope: null)\r\n!28 = !DIFile(filename: \".\\\\no_mangle-info.rs\", directory: \"C:\\\\Users\\\\ryanl\\\\Code\\\\rust\\\\src\\\\test\\\\debuginfo\", checksumkind: CSK_SHA1, checksum: \"cd1cbe539c7de2272a5b619eaa5fc983476c4229\")\r\n!29 = !DIDerivedType(tag: DW_TAG_typedef, name: \"u64\", file: !2, baseType: !30)\r\n!30 = !DIBasicType(name: \"unsigned __int64\", size: 64, encoding: DW_ATE_unsigned)\r\n```\r\n\r\nThis seems to be caused by an issue in LLVM which incorrectly walks the namespace hierarchy when building up statics. \r\n\r\nOf particular suspicion is the following code in LVVM which seems to be switching on whether the code in question is fortran or not. The relevant code path for DWARF does not have such logic.\r\n\r\nhttps://github.com/rust-lang/llvm-project/blob/2ed29d87efbe8a440fed6d171d4e33851fbb1c59/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp#L3279-L3283\r\n\r\n```cpp\r\n  // For Fortran, the scoping portion is elided in its name so that we can\r\n  // reference the variable in the command line of the VS debugger.\r\n  std::string QualifiedName =\r\n      (moduleIsInFortran()) ? std::string(DIGV->getName())\r\n                            : getFullyQualifiedName(Scope, DIGV->getName());\r\n```\r\n\r\nIn order to fix this, we need to understand the logic inside of `getFullyQualifiedName` and whether we can bail out early in the case of building a qualified name for a `no_mangle` binding. ", "closed_by": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98295/timeline", "performed_via_github_app": null, "state_reason": "completed"}