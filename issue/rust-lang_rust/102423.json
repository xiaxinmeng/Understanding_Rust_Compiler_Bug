{"url": "https://api.github.com/repos/rust-lang/rust/issues/102423", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102423/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102423/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102423/events", "html_url": "https://github.com/rust-lang/rust/issues/102423", "id": 1389727404, "node_id": "I_kwDOAAsO6M5S1Y6s", "number": 102423, "title": "if let expression extends the lifetime of trailing variables in BlockExpression too much", "user": {"login": "Lonami", "id": 6297805, "node_id": "MDQ6VXNlcjYyOTc4MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6297805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lonami", "html_url": "https://github.com/Lonami", "followers_url": "https://api.github.com/users/Lonami/followers", "following_url": "https://api.github.com/users/Lonami/following{/other_user}", "gists_url": "https://api.github.com/users/Lonami/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lonami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lonami/subscriptions", "organizations_url": "https://api.github.com/users/Lonami/orgs", "repos_url": "https://api.github.com/users/Lonami/repos", "events_url": "https://api.github.com/users/Lonami/events{/privacy}", "received_events_url": "https://api.github.com/users/Lonami/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-09-28T17:40:17Z", "updated_at": "2022-09-28T17:40:17Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code ([playground link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=17a24ec40e9a2e7ac83165ccf6f5d950)):\r\n\r\n```rust\r\nuse core::future::Future;\r\nuse std::sync::Mutex;\r\n\r\nasync fn sleep() {\r\n    // sleepy things (just used to have a callable async fn)...\r\n}\r\n\r\npub fn spawn<T>(_: T)\r\nwhere\r\n    T: Future + Send,\r\n    T::Output: Send,\r\n{\r\n    // executor things (just used to check for Send-ness)...\r\n}\r\n\r\n// ---\r\n\r\nstruct Foo;\r\n\r\nimpl Foo {\r\n    fn get_foo(&mut self) -> bool {\r\n        true\r\n    }\r\n}\r\n\r\nasync fn next_update() {\r\n    let mutex = Mutex::new(Foo);\r\n    loop {\r\n        if let true = {\r\n            let mut foo = mutex.lock().unwrap();\r\n            foo.get_foo()\r\n        } {\r\n            sleep().await;\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    spawn(next_update());\r\n}\r\n```\r\n\r\nI expected to see this happen: `next_update()` would result in a `Future: Send`.\r\n\r\nInstead, this happened: `next_update()`'s `Future` is not `Send`.\r\n\r\nFor some reason, `foo`'s lifetime is not within the explicit block, but rather around the entire `loop`.\r\n\r\n<details><summary>Compilation errors</summary>\r\n<p>\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror: future cannot be sent between threads safely\r\n  --> src/lib.rs:39:11\r\n   |\r\n39 |     spawn(next_update());\r\n   |           ^^^^^^^^^^^^^ future returned by `next_update` is not `Send`\r\n   |\r\n   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, Foo>`\r\nnote: future is not `Send` as this value is used across an await\r\n  --> src/lib.rs:33:20\r\n   |\r\n31 |             foo.get_foo()\r\n   |             --- has type `MutexGuard<'_, Foo>` which is not `Send`\r\n32 |         } {\r\n33 |             sleep().await;\r\n   |                    ^^^^^^ await occurs here, with `foo` maybe used later\r\n34 |         }\r\n35 |     }\r\n   |     - `foo` is later dropped here\r\nhelp: consider moving this into a `let` binding to create a shorter lived borrow\r\n  --> src/lib.rs:31:13\r\n   |\r\n31 |             foo.get_foo()\r\n   |             ^^^^^^^^^^^^^\r\nnote: required by a bound in `spawn`\r\n  --> src/lib.rs:10:17\r\n   |\r\n8  | pub fn spawn<T>(_: T)\r\n   |        ----- required by a bound in this\r\n9  | where\r\n10 |     T: Future + Send,\r\n   |                 ^^^^ required by this bound in `spawn`\r\n\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n\r\nIf the `if let true` condition is changed with a simple `if`, the future will be `Send` (the code will work):\r\n\r\n```rust\r\nif {\r\n// ^ no let true\r\n    let mut foo = mutex.lock().unwrap();\r\n    foo.get_foo()\r\n} {\r\n    sleep().await;\r\n}\r\n```\r\n\r\nIf the `if let true` condition's block expression is changed to create a temporary for the result of `get_foo()`, the future will also be `Send` (the code will work):\r\n\r\n```rust\r\nif let true = {\r\n    let mut foo = mutex.lock().unwrap();\r\n    let tmp = foo.get_foo();\r\n    //  ^~~ new temporary\r\n    tmp\r\n} {\r\n    sleep().await;\r\n}\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nNightly version: 1.66.0-nightly\r\n(2022-09-27 470e518c4b43265020c8)\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102423/timeline", "performed_via_github_app": null, "state_reason": null}