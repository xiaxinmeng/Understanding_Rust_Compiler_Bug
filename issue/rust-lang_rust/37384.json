{"url": "https://api.github.com/repos/rust-lang/rust/issues/37384", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37384/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37384/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37384/events", "html_url": "https://github.com/rust-lang/rust/issues/37384", "id": 184982772, "node_id": "MDU6SXNzdWUxODQ5ODI3NzI=", "number": 37384, "title": "Improving type mismatch errors", "user": {"login": "jntrnr", "id": 547158, "node_id": "MDQ6VXNlcjU0NzE1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/547158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jntrnr", "html_url": "https://github.com/jntrnr", "followers_url": "https://api.github.com/users/jntrnr/followers", "following_url": "https://api.github.com/users/jntrnr/following{/other_user}", "gists_url": "https://api.github.com/users/jntrnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/jntrnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jntrnr/subscriptions", "organizations_url": "https://api.github.com/users/jntrnr/orgs", "repos_url": "https://api.github.com/users/jntrnr/repos", "events_url": "https://api.github.com/users/jntrnr/events{/privacy}", "received_events_url": "https://api.github.com/users/jntrnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-24T23:39:38Z", "updated_at": "2017-07-26T16:50:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "From: https://internals.rust-lang.org/t/improving-type-mismatch-errors/4263\n## Background\n\nFor a type mismatch error, there often are a known set of steps to transition from one type to another.  If it's the first time the user has seen this error, they're forced to go read docs to find the correct API call to do the conversion.  This takes time and can be a bit frustration.  Luckily, over time your muscle memory will kick in with the known conversion (eg String->&str or &str->String) and it will then just be a minor inconvenience to do the fix.\n## Improved errors\n\nThe idea is pretty simple: have the compiler search the methods on the type looking for a compatible self parameter as the one argument and the expected type as the return type.\n\nFor the `&str` to `String` case, for example, it may find:\n\n```\nfn to_string(&self) -> String\n```\n\nThis can then become a suggestion we give the user.  Whereas currently we say:\n\n```\nerror[E0308]: mismatched types\n --> <anon>:4:17\n  |\n4 |   expect_string(\"foo\");\n  |                 ^^^^^ expected struct `std::string::String`, found reference\n  |\n  = note: expected type `std::string::String`\n  = note:    found type `&'static str`\n```\n\nWe could potentially say:\n\n```\nerror[E0308]: mismatched types\n --> <anon>:4:17\n  |\n4 |   expect_string(\"foo\");\n  |                 ^^^^^ expected struct `std::string::String`, found reference\n  |\nsuggestion:\n  |   expect_string(\"foo\".to_string());\n  |                      ------------ convert to a String\n```\n## Caveats\n### Can't grab methods blindly\n\nIf we search for this pattern naively, we could potentially suggest methods that have side effects.  While, yes, the correct type comes out, the dev could have inadvertently added a difficult to debug issue to their code in the process, just because the compiler told them to.\n\nAlso, some methods are very likely not what the user intended, like @GuillaumeGomez 's example:\n\n```\nnow when you write \"let x: usize = String::new();\", it suggests capacity or len method\n```\n\nTo prevent this, we may need to annotate methods with a \"safe for suggestion\" keyword that the suggestion logic can understand.\n### Multiple steps needed\n\nSometimes it's more than just one step.  While we don't necessarily want to search deeply, we could do a limited number of steps.  Assuming something like the \"safe for suggestion\" feature above, we're in a small, bounded search space and still able to deliver helpful suggestions.\n### Supporting `&` and `&mut`\n\nSince adding an `&` or `&mut` is a common task in Rust, we should also add them to the search space for each step (assuming the type is allowed to take that step)\n### Multiple possibilities\n\nSometimes there are multiple possibilities for the conversion.  It may be through one step (like `.to_string()` and `.into()`) or different ways to multi-step to the right type.  We'd need to come up with a heuristic here, eg) possibly showing a couple suggestions sorted by the by the shortest in terms of character length.\n### How do generics/traits factor into this?\n\nI have no idea :slight_smile: This may be easier than it seems, I'm not sure.  If it proves to be tricky, maybe we can support them in a later revision of the idea as we get more experience with it?\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37384/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37384/timeline", "performed_via_github_app": null, "state_reason": null}