{"url": "https://api.github.com/repos/rust-lang/rust/issues/34503", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/34503/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/34503/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/34503/events", "html_url": "https://github.com/rust-lang/rust/issues/34503", "id": 162497484, "node_id": "MDU6SXNzdWUxNjI0OTc0ODQ=", "number": 34503, "title": "fulfillment error involving quickcheck `Testable` trait on `fn` types (and tuples?)", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252628, "node_id": "MDU6TGFiZWwyNjIyNTI2Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta", "name": "regression-from-stable-to-beta", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to beta."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2016-06-27T16:48:46Z", "updated_at": "2016-07-02T22:14:03Z", "closed_at": "2016-07-02T22:14:03Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "spawned off of #33723\n\nThis code ([playpen](https://play.rust-lang.org/?gist=f0e97c376b52fef3555b1ca26bfc6a51&version=nightly&backtrace=0)) causes an ICE in the beta and nightly compilers:\n\n``` rust\n// Heavily reduced version of `quickcheck` with an `fn main`that ICE's the compiler.\n//\n// This is for issues #33723 and #34503\n\n// This provides a modified version of the `Iterator` trait whose\n// `fn max` method does not have a `Self: Sized` bound. This is\n// to isolate the distinct bug underlying #33723 (which was sidestepped\n// by PR #34419).\nuse self::my_iter::Iterator;\nmod my_iter {\n    pub trait Iterator {\n        type Item;\n        fn next(&mut self) -> Option<Self::Item>;\n        fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F>\n            where Self: Sized, F: FnMut(&mut St, Self::Item) -> Option<B>,\n        {\n            Scan{iter: self, f: f, state: initial_state}\n        }\n\n        // This version of `fn max` takes `&self` rather than `self` to sidestep\n        // the vtable Self: Sized fix from PR #34419\n        fn max(&self) -> Option<Self::Item> where Self::Item: Ord\n        {\n            return select_fold1(self,\n                                |_| (),\n                                // switch to y even if it is only equal, to preserve\n                                // stability.\n                                |_, x, _, y| *x <= *y)\n                .map(|(_, x)| x);\n\n            fn select_fold1<I: ?Sized,B, FProj, FCmp>(mut _it: &I,\n                                                      mut _f_proj: FProj,\n                                                      mut _f_cmp: FCmp) -> Option<(B, I::Item)>\n                where I: Iterator, FProj: FnMut(&I::Item) -> B, FCmp: FnMut(&B, &I::Item, &B, &I::Item) -> bool\n            {\n                unimplemented!()\n            }\n        }\n    }\n\n    #[derive(Clone)]\n    pub struct Scan<I, St, F> {\n        iter: I,\n        f: F,\n        state: St,\n    }\n\n    impl<B, I, St, F> Iterator for Scan<I, St, F> where\n        I: Iterator,\n    F: FnMut(&mut St, I::Item) -> Option<B>,\n    {\n        type Item = B;\n\n        #[inline]\n        fn next(&mut self) -> Option<B> {\n            self.iter.next().and_then(|a| (self.f)(&mut self.state, a))\n        }\n    }\n\n    impl<I: Iterator + ?Sized> Iterator for Box<I> {\n        type Item = I::Item;\n        fn next(&mut self) -> Option<I::Item> {\n            (**self).next()\n        }\n    }\n}\n\npub trait Arbitrary : Clone + 'static {\n    fn arbitrary<G>() -> Self { unimplemented! () }\n    fn shrink(&self) -> Box<Iterator<Item=Self>> { unimplemented!() }\n}\n\nimpl<A: Arbitrary> Arbitrary for Option<A> { }\n\nimpl<A: Arbitrary> Arbitrary for (A,)\n{\n    fn shrink(&self) -> Box<Iterator<Item=(A,)>> {\n        let (ref a, ) = *self;\n        let srest = a\n            .shrink()\n            .scan((), |_, _| unimplemented!());\n        Box::new(srest)\n    }\n}\n\nimpl<A: Arbitrary, B: Arbitrary> Arbitrary for (A, B,)\n{\n    fn shrink(&self) -> Box<Iterator<Item=(A, B)>> {\n        let (ref a, ref b) = *self;\n        let srest = (b.clone(),) // <--- use of unary tuple is key to reproducing bug\n            .shrink()\n            .scan(a.clone(), |_, _| unimplemented!());\n        Box::new(srest)\n    }\n}\n\npub fn quickcheck<A: Testable>(f: A) {\n    f.result::<A>();\n}\n\npub trait Testable : Send + 'static {\n    fn result<G>(&self) { unimplemented!() }\n}\n\nimpl Testable for () { }\n\nimpl<T: Testable, A: Arbitrary, B: Arbitrary> Testable for fn(A, B) -> T\n{\n    fn result<G_>(&self) {\n        let a: (A, B) = Arbitrary::arbitrary::<G_>();\n        a.shrink();\n    }\n}\n\n#[derive(Clone, Debug)]\nstruct PackedNode;\nimpl Arbitrary for PackedNode { }\n\nfn main() {\n    fn with_nodes(_: PackedNode, _: Option<PackedNode>) { unimplemented!() }\n    quickcheck(with_nodes as fn(PackedNode, Option<PackedNode>));\n}\n\n```\n\nhere is the compiler ICE message:\n\n```\nerror: internal compiler error: ../src/librustc/infer/mod.rs:681: Encountered errors `[FulfillmentError(Obligation(predicate=Binder(TraitPredicate(<PackedNode as std::cmp::PartialEq>)),depth=2),Unimplemented), FulfillmentError(Obligation(predicate=Binder(TraitPredicate(<PackedNode as std::cmp::PartialOrd>)),depth=2),Unimplemented)]` resolving bounds after type-checking\nnote: the compiler unexpectedly panicked. this is a bug.\n```\n\n(What follows is the original reduced test case, which stopped ICE'ing recently due to an unrelated bug fix, which prompted me to write the above revision of the code to continue demonstrating the bug in question.)\n## Old Description\n\n``` rust\n// Heavily reduced version of `quickcheck` with an `fn main`that ICE's the compiler.\n//\n// This is for issue #33723.\n\npub trait Arbitrary : Clone + 'static {\n    fn arbitrary<G>() -> Self { unimplemented! () }\n    fn shrink(&self) -> Box<Iterator<Item=Self>> { unimplemented!() }\n}\n\nimpl<A: Arbitrary> Arbitrary for Option<A> { }\n\nimpl<A: Arbitrary> Arbitrary for (A,)\n{\n    fn shrink(&self) -> Box<Iterator<Item=(A,)>> {\n        let (ref a, ) = *self;\n        let srest = a\n            .shrink()\n            .scan((), |_, _| unimplemented!());\n        Box::new(srest)\n    }\n}\n\nimpl<A: Arbitrary, B: Arbitrary> Arbitrary for (A, B,)\n{\n    fn shrink(&self) -> Box<Iterator<Item=(A, B)>> {\n        let (ref a, ref b) = *self;\n        let srest = (b.clone(),) // <--- use of unary tuple is key to reproducing bug\n            .shrink()\n            .scan(a.clone(), |_, _| unimplemented!());\n        Box::new(srest)\n    }\n}\n\npub fn quickcheck<A: Testable>(f: A) {\n    f.result::<A>();\n}\n\npub trait Testable : Send + 'static {\n    fn result<G>(&self) { unimplemented!() }\n}\n\nimpl Testable for () { }\n\nimpl<T: Testable, A: Arbitrary, B: Arbitrary> Testable for fn(A, B) -> T\n{\n    fn result<G_>(&self) {\n        let a: (A, B) = Arbitrary::arbitrary::<G_>();\n        a.shrink();\n    }\n}\n\n#[derive(Clone, Debug)]\nstruct PackedNode;\nimpl Arbitrary for PackedNode { }\n\nfn main() {\n    fn with_nodes(_: PackedNode, _: Option<PackedNode>) { unimplemented!() }\n    quickcheck(with_nodes as fn(PackedNode, Option<PackedNode>));\n}\n```\n\nThis is the ICE in question:\n\n```\nerror: internal compiler error: ../src/librustc/infer/mod.rs:642: Encountered errors \n`[FulfillmentError(Obligation(predicate=Binder(TraitPredicate(<PackedNode as std::cmp::PartialEq>)),depth=2),Unimplemented), \n  FulfillmentError(Obligation(predicate=Binder(TraitPredicate(<PackedNode as std::cmp::PartialOrd>)),depth=2),Unimplemented)]`\n resolving bounds after type-checking\n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/34503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/34503/timeline", "performed_via_github_app": null, "state_reason": "completed"}