{"url": "https://api.github.com/repos/rust-lang/rust/issues/44343", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44343/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44343/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44343/events", "html_url": "https://github.com/rust-lang/rust/issues/44343", "id": 255335781, "node_id": "MDU6SXNzdWUyNTUzMzU3ODE=", "number": 44343, "title": "Use #[repr(C)] HList's to infer type-erased fmt fn pointers in format_args!'s static data.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}, {"id": 2238476604, "node_id": "MDU6TGFiZWwyMjM4NDc2NjA0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-fmt", "name": "A-fmt", "color": "f7e101", "default": false, "description": "Area: std::fmt"}], "state": "open", "locked": false, "assignee": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2017-09-05T16:27:00Z", "updated_at": "2020-11-05T10:20:02Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now `format_args!` uses, e.g. `ArgumentV1::new(&runtime_data, Debug::fmt)` (for `{:?}`), at runtime, using up *two* pointers per argument at runtime instead of just one (`&runtime_data`).\r\n\r\nWith `allow_internal_unsafe` and #44240, we can place the (e.g. `Debug::fmt`) `fn` pointers in (rvalue-promoted) `'static` data, the remaining hurdle is how to infer the type of the runtime data.\r\nThat is, `Debug::fmt` is really `<_ as Debug>::fmt` and that `_` is right now inferred because of `ArgumentV1::new`'s signature typing them together. If they're separate, we need something new.\r\n\r\nI propose using the `HList` pattern (`struct HCons<H, T>(H, T); struct HNil;` - so for 3 elements, of types `A`, `B` and `C` you'd have `HCons<A, HCons<B, HCons<C, HNil>>>`), with `#[repr(C)]`, which would give it a deterministic layout which matches that of an array, that is, these two:\r\n* `&'static HCons<fn(&A), HCons<fn(&B), HCons<fn(&C), HNil>>>`\r\n* `&'static [unsafe fn(*const Opaque); 3]`\r\n\r\nhave the same representation, and the latter can be unsized into a slice. This transformation from `HList` to array (and then slice) can be performed *on top* of a safe, rvalue-promoted `HCons`, which is a necessary requirement for moving the `fn` pointers into `'static` data at all.\r\n\r\nFor inference, we can simply insert some function calls to match up the types, e.g. to infer `B` we could do`fmt::unify_fn_with_data((list.1).0, &b)`, which would make`B` into `typeof b`.\r\n\r\nIt might actually be simpler to have a completely safe \"builder\" interface, which combines the `HList` of formatters with a `HList` of runtime references, unifying the types, but I'm a bit worried about compile-times due to all the trait dispatch - in any case, the impact should be measured.\r\n\r\n<!-- TRIAGEBOT_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"m-ou-se\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_END -->\r\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44343/timeline", "performed_via_github_app": null, "state_reason": null}