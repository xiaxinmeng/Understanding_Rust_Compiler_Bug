{"url": "https://api.github.com/repos/rust-lang/rust/issues/49920", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49920/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49920/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49920/events", "html_url": "https://github.com/rust-lang/rust/issues/49920", "id": 313918484, "node_id": "MDU6SXNzdWUzMTM5MTg0ODQ=", "number": 49920, "title": "Built-in #[derive(...)]s fail when generics don't implement trait, even when the generic isn't directly used", "user": {"login": "Osspial", "id": 16296823, "node_id": "MDQ6VXNlcjE2Mjk2ODIz", "avatar_url": "https://avatars.githubusercontent.com/u/16296823?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Osspial", "html_url": "https://github.com/Osspial", "followers_url": "https://api.github.com/users/Osspial/followers", "following_url": "https://api.github.com/users/Osspial/following{/other_user}", "gists_url": "https://api.github.com/users/Osspial/gists{/gist_id}", "starred_url": "https://api.github.com/users/Osspial/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Osspial/subscriptions", "organizations_url": "https://api.github.com/users/Osspial/orgs", "repos_url": "https://api.github.com/users/Osspial/repos", "events_url": "https://api.github.com/users/Osspial/events{/privacy}", "received_events_url": "https://api.github.com/users/Osspial/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-12T23:14:08Z", "updated_at": "2018-04-12T23:42:46Z", "closed_at": "2018-04-12T23:42:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Rust's built-in derives add a `where T: $trait` bound any time a generic type is included in the `struct`'s definition, even if the generic type isn't directly used and all of the struct's fields implement the trait.\r\n\r\nThis shouldn't happen. Instead, the derives should implement the traits when all of the struct's fields implement the trait, regardless of whether the generic parameter implements the trait or not. As an example, the following code should compile, but doesn't.\r\n\r\n\r\nhttps://play.rust-lang.org/?gist=9f13519f1d4a1a4414d60c03eecc203b&version=stable\r\n```rust\r\nuse std::marker::PhantomData;\r\n\r\n#[derive(Debug, Clone)]\r\nstruct Foo<T: Trait> {\r\n    a: T::Assoc\r\n}\r\n\r\n#[derive(Debug, Clone)]\r\nstruct Baz<T: Trait> {\r\n    a: PhantomData<T>\r\n}\r\n\r\ntrait Trait {\r\n    type Assoc;\r\n}\r\n\r\nstruct Bar;\r\nimpl Trait for Bar {\r\n    type Assoc = i32;\r\n}\r\n\r\nfn main() {\r\n    let f: Foo<Bar> = Foo {\r\n        a: 0\r\n    };\r\n    \r\n    println!(\"{:?}\", f);\r\n    let _y = f.clone();\r\n    \r\n    \r\n    let b: Baz<Bar> = Baz {\r\n        a: PhantomData\r\n    };\r\n    \r\n    println!(\"{:?}\", b);\r\n    let _z = b.clone();\r\n}\r\n```\r\n\r\n```\r\nerror[E0277]: `Bar` doesn't implement `std::fmt::Debug`\r\n  --> src/main.rs:27:22\r\n   |\r\n27 |     println!(\"{:?}\", f);\r\n   |                      ^ `Bar` cannot be formatted using `:?`; add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\r\n   |\r\n   = help: the trait `std::fmt::Debug` is not implemented for `Bar`\r\n   = note: required because of the requirements on the impl of `std::fmt::Debug` for `Foo<Bar>`\r\n   = note: required by `std::fmt::Debug::fmt`\r\n\r\nerror[E0599]: no method named `clone` found for type `Foo<Bar>` in the current scope\r\n  --> src/main.rs:28:16\r\n   |\r\n4  | struct Foo<T: Trait> {\r\n   | -------------------- method `clone` not found for this\r\n...\r\n28 |     let _y = f.clone();\r\n   |                ^^^^^\r\n   |\r\n   = note: the method `clone` exists but the following trait bounds were not satisfied:\r\n           `Foo<Bar> : std::clone::Clone`\r\n   = help: items from traits can only be used if the trait is implemented and in scope\r\n   = note: the following trait defines an item `clone`, perhaps you need to implement it:\r\n           candidate #1: `std::clone::Clone`\r\n\r\nerror[E0277]: `Bar` doesn't implement `std::fmt::Debug`\r\n  --> src/main.rs:35:22\r\n   |\r\n35 |     println!(\"{:?}\", b);\r\n   |                      ^ `Bar` cannot be formatted using `:?`; add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\r\n   |\r\n   = help: the trait `std::fmt::Debug` is not implemented for `Bar`\r\n   = note: required because of the requirements on the impl of `std::fmt::Debug` for `Baz<Bar>`\r\n   = note: required by `std::fmt::Debug::fmt`\r\n\r\nerror[E0599]: no method named `clone` found for type `Baz<Bar>` in the current scope\r\n  --> src/main.rs:36:16\r\n   |\r\n9  | struct Baz<T: Trait> {\r\n   | -------------------- method `clone` not found for this\r\n...\r\n36 |     let _z = b.clone();\r\n   |                ^^^^^\r\n   |\r\n   = note: the method `clone` exists but the following trait bounds were not satisfied:\r\n           `Baz<Bar> : std::clone::Clone`\r\n   = help: items from traits can only be used if the trait is implemented and in scope\r\n   = note: the following trait defines an item `clone`, perhaps you need to implement it:\r\n           candidate #1: `std::clone::Clone`\r\n\r\nerror: aborting due to 4 previous errors\r\n```", "closed_by": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49920/timeline", "performed_via_github_app": null, "state_reason": "completed"}