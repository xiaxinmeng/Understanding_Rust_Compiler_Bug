{"url": "https://api.github.com/repos/rust-lang/rust/issues/99262", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99262/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99262/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99262/events", "html_url": "https://github.com/rust-lang/rust/issues/99262", "id": 1305526238, "node_id": "I_kwDOAAsO6M5N0L_e", "number": 99262, "title": "Tracking Issue for `io_error_downcast`", "user": {"login": "NobodyXu", "id": 30436523, "node_id": "MDQ6VXNlcjMwNDM2NTIz", "avatar_url": "https://avatars.githubusercontent.com/u/30436523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NobodyXu", "html_url": "https://github.com/NobodyXu", "followers_url": "https://api.github.com/users/NobodyXu/followers", "following_url": "https://api.github.com/users/NobodyXu/following{/other_user}", "gists_url": "https://api.github.com/users/NobodyXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NobodyXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NobodyXu/subscriptions", "organizations_url": "https://api.github.com/users/NobodyXu/orgs", "repos_url": "https://api.github.com/users/NobodyXu/repos", "events_url": "https://api.github.com/users/NobodyXu/events{/privacy}", "received_events_url": "https://api.github.com/users/NobodyXu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 638321554, "node_id": "MDU6TGFiZWw2MzgzMjE1NTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/proposed-final-comment-period", "name": "proposed-final-comment-period", "color": "ededed", "default": false, "description": "Proposed to merge/close by relevant subteam, see T-<team> label. Will enter FCP once signed off."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2022-07-15T03:23:26Z", "updated_at": "2023-05-30T16:25:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Feature gate: `#![feature(io_error_downcast)]`\r\n\r\nThis is a tracking issue for new API `std::io::Error::downcast`.\r\n\r\nExisting APIs requires two separate calls to obtain the raw os error or the inner error and they both return `Option`.\r\n\r\nThus, users would have to first call `Error::get_ref` to check that we indeed has an inner error and checked that it [`is`](https://doc.rust-lang.org/std/error/trait.Error.html#method.is-2) the type we expected.\r\n\r\nUsers cannot use `std::io::Error::into_inner` becuase takes the error by value and returns `Option<Box<dyn Error + Send + Sync>>` instead of `Result<Box<dyn Error + Send + Sync>, Self>`.\r\n\r\nThey also cannot workaround this issue by calling `Error::raw_os_error`, since the `io::Error` can also be constructed using [`impl From<ErrorKind> for Error`](https://doc.rust-lang.org/std/io/struct.Error.html#impl-From%3CErrorKind%3E) or using other internal methods only accessible by the std library.\r\n\r\nThis new feature `io_error_downcast` solved this issue by providing new API `std::io::Error::downcast` to downcast the inner error easily without `unwrap` or `expect`.\r\n\r\n### Public API\r\n\r\n```rust\r\n// std::io::Error\r\n\r\nimpl Error {\r\n    fn downcast<E: std::error::Error + Send + Sync + 'static>(self) -> Result<Box<E>, Self>;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] API Change Proposal: https://github.com/rust-lang/libs-team/issues/57\r\n- [x] Implementation: #98387 \r\n- [ ] Final comment period (FCP)[^1]\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n- None yet.\r\n\r\n[^1]: https://std-dev-guide.rust-lang.org/feature-lifecycle/stabilization.html\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99262/timeline", "performed_via_github_app": null, "state_reason": null}