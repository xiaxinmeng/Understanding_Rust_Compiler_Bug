{"url": "https://api.github.com/repos/rust-lang/rust/issues/43491", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43491/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43491/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43491/events", "html_url": "https://github.com/rust-lang/rust/issues/43491", "id": 245807058, "node_id": "MDU6SXNzdWUyNDU4MDcwNTg=", "number": 43491, "title": "std::thread::LocalKeyState: Add fourth Initializing state", "user": {"login": "joshlf", "id": 1046063, "node_id": "MDQ6VXNlcjEwNDYwNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1046063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshlf", "html_url": "https://github.com/joshlf", "followers_url": "https://api.github.com/users/joshlf/followers", "following_url": "https://api.github.com/users/joshlf/following{/other_user}", "gists_url": "https://api.github.com/users/joshlf/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshlf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshlf/subscriptions", "organizations_url": "https://api.github.com/users/joshlf/orgs", "repos_url": "https://api.github.com/users/joshlf/repos", "events_url": "https://api.github.com/users/joshlf/events{/privacy}", "received_events_url": "https://api.github.com/users/joshlf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-26T18:07:57Z", "updated_at": "2017-09-07T20:56:21Z", "closed_at": "2017-09-07T20:56:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now, [`LocalKeyState`](https://doc.rust-lang.org/std/thread/enum.LocalKeyState.html) contains three states: `Uninitialized`, `Valid`, and `Destroyed`.\r\n\r\nUnfortunately, this is not enough to cover all cases. In particular, consider the following code (adapted from some code I wrote as part of writing a global allocator - to motivate that this is a real-world example):\r\n\r\n```rust\r\nfn local_or_global(foo: Foo) -> Bar {\r\n    match LOCAL.state() {\r\n        LocalKeyState::Uninitialized | LocalKeyState::Valid => LOCAL.with(|local| do_computation(foo, local)),\r\n        LocalKeyState::Destroyed => do_computation(foo, &GLOBAL),\r\n    }\r\n}\r\n```\r\n\r\nThe idea here is to ensure that the local key hasn't yet been destroyed - and if it has, to fall back on some global state instead. If the key is valid, then obviously this is fine. If the key is uninitialized, then `with` should perform initialization, which should also be fine...\r\n\r\nunless `local_or_global` is called from the initialization routine. This is the case for the allocator code I'm working on since initializing TLS requires performing allocations. In that case, you end up with infinite recursion and eventually a stack overflow.\r\n\r\nMy proposal is the following: add a fourth `Initializing` state. When `with` is first called and the key needs to be initialized, it is first moved into the `Initializing` state. When initialization completes, it is subsequently moved into the `Valid` state. This allows code that accesses the key to detect whether it's being called from inside the initializer, and behave appropriately in that case (in particular, by _not_ accessing the key and thus recursing the initialization).\r\n\r\nThe concrete issue I (along with my collaborator on this project, @ezrosent) have run into is that initializing TLS depends on allocation, which depends on TLS, which depends on... In general, this is a problem whenever a TLS key's initialization routine transitively depends on itself (either directly, or through an arbitrarily long cycle of other TLS key dependencies - for example, we've seen similar issues with `Destroyed` keys when using Crossbeam's [epoch-based memory reclamation](https://docs.rs/crossbeam/0.2.10/crossbeam/mem/epoch/index.html), which also uses TLS under the hood).\r\n\r\n## Alternatives\r\n\r\nIt might be tempting to think that just making sure you're in the `Valid` state is a sufficient (if sub-optimal) solution to this problem (and in fact, I thought the same thing for a while). Unfortunately, this solves a chicken-and-egg problem by just deciding that chickens can't exist. By only being willing to access a TLS key in the `Valid` state, you preclude ever calling code that will perform initialization, and thus you'll never move to the `Valid` state in the first place.", "closed_by": {"login": "joshlf", "id": 1046063, "node_id": "MDQ6VXNlcjEwNDYwNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1046063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshlf", "html_url": "https://github.com/joshlf", "followers_url": "https://api.github.com/users/joshlf/followers", "following_url": "https://api.github.com/users/joshlf/following{/other_user}", "gists_url": "https://api.github.com/users/joshlf/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshlf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshlf/subscriptions", "organizations_url": "https://api.github.com/users/joshlf/orgs", "repos_url": "https://api.github.com/users/joshlf/repos", "events_url": "https://api.github.com/users/joshlf/events{/privacy}", "received_events_url": "https://api.github.com/users/joshlf/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43491/timeline", "performed_via_github_app": null, "state_reason": "completed"}