{"url": "https://api.github.com/repos/rust-lang/rust/issues/109845", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109845/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109845/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109845/events", "html_url": "https://github.com/rust-lang/rust/issues/109845", "id": 1650679280, "node_id": "I_kwDOAAsO6M5iY13w", "number": 109845, "title": " Associated Type Equality Constraints Drop Trait Bounds", "user": {"login": "rrbutani", "id": 7833358, "node_id": "MDQ6VXNlcjc4MzMzNTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7833358?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rrbutani", "html_url": "https://github.com/rrbutani", "followers_url": "https://api.github.com/users/rrbutani/followers", "following_url": "https://api.github.com/users/rrbutani/following{/other_user}", "gists_url": "https://api.github.com/users/rrbutani/gists{/gist_id}", "starred_url": "https://api.github.com/users/rrbutani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rrbutani/subscriptions", "organizations_url": "https://api.github.com/users/rrbutani/orgs", "repos_url": "https://api.github.com/users/rrbutani/repos", "events_url": "https://api.github.com/users/rrbutani/events{/privacy}", "received_events_url": "https://api.github.com/users/rrbutani/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-04-01T22:02:06Z", "updated_at": "2023-04-05T17:23:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Apologies if this has been covered elsewhere, I wasn't able to find any issues or anything in the RFCs that addresses this specifically.\r\n\r\n## Issue\r\n\r\nGiven a trait with an associated type that has some trait bounds:\r\n```rust\r\ntrait Foo<T> {\r\n    type X: Clone;\r\n}\r\n\r\n// An implementation, as an example:\r\nimpl<T: Clone> Foo<T> for () { type X = T; }\r\n```\r\n\r\nWe can use this trait's associated type `X` (without constraining `X` to a particular type or adding bounds to it) while relying on `X: Clone`:\r\n```rust\r\nfn example4<A, Witness: Foo<A>>(a: &<Witness as Foo<A>>::X) -> <Witness as Foo<A>>::X {\r\n    a.clone()\r\n}\r\n```\r\n\r\nHowever if we are to bound `X` to a particular type (i.e. `Foo<_, X = A>`) we are no longer able to rely on `X: Clone`:\r\n```rust\r\nfn example1<A, Witness: Foo<A, X = A>>(a: &A) -> A {\r\n    a.clone() // errors\r\n}\r\n\r\n// Note that the issue is not that `rustc` cannot unify `A` with\r\n// `<Witness as Foo<A, X = A>>::X`; the following fail in the same way (and the\r\n// error messages in all of these name `A` specifically):\r\n//\r\n// (this also be verified using something like `fn same_ty<A>(_: &A, _: &A) {}`,\r\n// bounding both types with `Default` and passing `&<_ as Default>::default()`\r\n// in, etc.)\r\nfn example2<A, Witness: Foo<A, X = A>>(a: &<Witness as Foo<A>>::X) -> A {\r\n    a.clone() // errors\r\n}\r\n\r\nfn example3<A, Witness: Foo<A, X = A>>(a: &<Witness as Foo<A>>::X) -> <Witness as Foo<A>>::X {\r\n    a.clone() // errors\r\n}\r\n// Note that the only difference between ^ and `example4` is that ^ has `X = A`\r\n// in its bound on `Witness`.\r\n```\r\n\r\nNote that for all of the above, `A` is required to be `Clone` (when `Witness = ()`) in order for _uses_ of the functions (or of `(): Foo<A, X = A>`) to typecheck:\r\n```rust\r\n// All of these fail to compile as you'd expect:\r\nlet _ = example1::<NotClone, ()>;\r\nlet _ = example2::<NotClone, ()>;\r\nlet _ = example3::<NotClone, ()>;\r\n```\r\n\r\n([playground link](https://play.integer32.com/?version=stable&mode=debug&edition=2021&gist=a86ee6bbad38affaab221c616d8d230c))\r\n\r\n---\r\n\r\n(this particular example is minified from something less contrived; as written this _is_ fairly nonsensical since there's not much reason to ask for `Witness: Foo<X = T>` instead of just bounding `T` directly)\r\n\r\n## Misc\r\n\r\nPrior to Rust 1.49 (I have not bisected to verify but I think the change traces back to #72788 and #73905), functions like `example{1,2,3}` were required to bound `A: Clone` themselves so that `Foo<A, X = A>` would be well-formed ([godbolt link](https://rust4.godbolt.org/z/s1MEsefa3)). In 1.49 and up this check seems to be deferred to usages of the function.\r\n\r\nThis also observable in other ways; for example:\r\n```rust\r\nstruct NotClone;\r\n\r\n// is the concrete type we specify for the associated type checked for the\r\n// bounds on `X`?\r\nfn example5<W: Foo<NotClone, X = NotClone>>() { }\r\n// it seems not! (in 1.49 and up; in 1.48 and below this does error)\r\n```\r\n\r\nI'm not sure if the intent of the change was merely to shift requirements for associated types to callers of functions and to _still_ require authors of such functions to have to spell out bounds like `A: Clone` explicitly _OR_ if the intent actually was to have `A: Clone` be implied.\r\n\r\nI was expecting (or really, hoping for) the latter in which case I'd expect to be able to rely on `A: Clone` within the function bodies above.\r\n\r\nIn either case I think `example3` is particularly surprising; if this really is intended behavior I think it'd be nice to have the compiler communicate why things like `<Witness as Foo<A>>::X` don't have their trait bounds from `Witness` available when `A` is a ty param on a function (or maybe just for this to be documented?).\r\n\r\n---\r\n\r\nEdit: IIUC [this comment](https://github.com/rust-lang/rust/issues/78893#issuecomment-1199362452) suggests that this is intended behavior. It does still seem unintuitive/suboptimal that as a consequence, the bound (`A: Clone`) is required for these functions to typecheck but that the bound is _not_ available for the function body to rely on.\r\n\r\nThis issue is might just a duplicate of #78893 (the traits/`impl Trait` made me initially believe it wasn't but that's a bit of a red herring I think).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109845/timeline", "performed_via_github_app": null, "state_reason": null}