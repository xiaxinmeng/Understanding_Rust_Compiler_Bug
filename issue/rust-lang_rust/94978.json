{"url": "https://api.github.com/repos/rust-lang/rust/issues/94978", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94978/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94978/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94978/events", "html_url": "https://github.com/rust-lang/rust/issues/94978", "id": 1170293253, "node_id": "I_kwDOAAsO6M5FwUIF", "number": 94978, "title": "Tracking Issue for ```#[deprecated_safe]``` attribute", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 3537211959, "node_id": "LA_kwDOAAsO6M7S1ZI3", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-impl-incomplete", "name": "S-tracking-impl-incomplete", "color": "4682b4", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-15T21:37:12Z", "updated_at": "2022-08-10T17:28:04Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This is a tracking issue for the lang-team MCP \"Add #[deprecated_safe] attribute...\" (rust-lang/lang-team#147).\r\n\r\nThe feature gate for the issue is `#![feature(deprecated_safe)]`.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Public API\r\n\r\nApply ```#[deprecated_safe]``` to a pre-existing function or trait that is currently safe but needs to be marked unsafe, which is normally a breaking change. Marking the function or trait as unsafe and applying ```#[deprecated_safe]``` will cause a \"safeness deprecation\" warning to be emitted anywhere that a compiler error would have been, maintaining backwards compatibility. While this is unsound, the intended use is to address a pre-existing unsoundness in a backwards compatible fashion using deprecations.\r\n\r\n```rust\r\n#[deprecated_safe(since = \"TBD\", note = \"reason\")]\r\nunsafe fn previously_safe_fn() {}\r\n\r\n// the following is allowed without erroring, despite the lack of an unsafe block\r\n// warning here\r\npreviously_safe_fn();\r\n\r\nunsafe {\r\n    // no warning\r\n    previously_safe_fn();\r\n}\r\n\r\n// the following is allowed, despite the fn pointer being safe\r\n// warning here\r\nlet safe_fn_ptr: fn() = previously_safe_fn;\r\n\r\n// no warning\r\nlet unsafe_fn_ptr: unsafe fn() = previously_safe_fn;\r\n\r\n// the following is allowed, despite unsafe fn's not being soundly coercible to closures\r\n// warning here\r\nlet fn_impl: Box<dyn Fn()> = Box::new(previously_safe_fn);\r\n\r\n#[deprecated_safe(since = \"TBD\", note = \"reason\")]\r\nunsafe trait PreviouslySafeTrait {}\r\n\r\n// the following is allowed, despite the lack of unsafe on the impl block\r\n// warning here\r\nimpl PreviouslySafeTrait for u32 {}\r\n\r\n// no warning\r\nunsafe impl PreviouslySafeTrait for u64 {}\r\n\r\ntrait PreviouslySafeTraitFunction {\r\n    #[deprecated_safe(since = \"TBD\", note = \"reason\")]\r\n    unsafe fn previously_safe_fn();\r\n}\r\n\r\nimpl PreviouslySafeTraitFunction for u32 {\r\n    // the following is allowed, despite the lack of unsafe on the impl'd fn\r\n    // warning here\r\n    fn previously_safe_fn() {}\r\n}\r\n\r\nimpl PreviouslySafeTraitFunction for u64 {\r\n    // no warning\r\n    unsafe fn previously_safe_fn() {}\r\n}\r\n\r\n// (within libstd only)\r\n// the following will error if used from edition >= 2024 code without unsafe,\r\n// the deprecated_safe escape hatch no longer applies\r\n#[deprecated_safe(since = \"TBD\", note = \"reason\", unsafe_edition = \"2024\")]\r\nunsafe fn previously_safe_fn() {}\r\n```\r\n\r\n### Steps\r\n\r\n- [ ] Implement the MCP (cc rust-lang/lang-team#147)\r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n\r\n- [ ] Are call sites, fn() and Fn() coercions, and impl blocks the only places that would break when adding unsafe? Do other cases need to be handled?\r\n- [ ] If this supports becoming an error in a future edition, that won't be autofixable (I (skippy) assume), since an ```unsafe {}``` block couldn't be added automatically. Is a non-autofixable edition change like that acceptable?\r\n- [ ] Is it in fact appropriate to make this a publicly available stable attribute, rather than restricting its use to libstd? Libraries can make breaking changes, while rust cannot.\r\n\r\n### Implementation history\r\n\r\n* Proof of concept: https://github.com/skippy10110/rust/commits/rustc_deprecated_safe\r\n* #94982\r\n* #95025", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94978/timeline", "performed_via_github_app": null, "state_reason": null}