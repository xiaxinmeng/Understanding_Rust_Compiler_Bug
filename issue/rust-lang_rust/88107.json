{"url": "https://api.github.com/repos/rust-lang/rust/issues/88107", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88107/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88107/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88107/events", "html_url": "https://github.com/rust-lang/rust/issues/88107", "id": 972307203, "node_id": "MDU6SXNzdWU5NzIzMDcyMDM=", "number": 88107, "title": "improper_ctypes_definitions doesn't lint on non-FFI safe fn type construction", "user": {"login": "chc4", "id": 1669003, "node_id": "MDQ6VXNlcjE2NjkwMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1669003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chc4", "html_url": "https://github.com/chc4", "followers_url": "https://api.github.com/users/chc4/followers", "following_url": "https://api.github.com/users/chc4/following{/other_user}", "gists_url": "https://api.github.com/users/chc4/gists{/gist_id}", "starred_url": "https://api.github.com/users/chc4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chc4/subscriptions", "organizations_url": "https://api.github.com/users/chc4/orgs", "repos_url": "https://api.github.com/users/chc4/repos", "events_url": "https://api.github.com/users/chc4/events{/privacy}", "received_events_url": "https://api.github.com/users/chc4/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-08-17T05:09:16Z", "updated_at": "2021-08-17T05:12:52Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n\r\n```rust\r\n#![deny(improper_ctypes_definitions)]\r\npub extern \"C\" fn third(_a: usize, b: usize, c: usize) -> usize {\r\n    println!(\"arg 2 {} arg 3 {}\", b, c);\r\n    c\r\n}\r\n\r\n\r\nfn main() {\r\n    let f: extern \"C\" fn(usize, usize, usize)->usize = third;\r\n    let normal_third = f(1,2,3);\r\n    assert_eq!(normal_third, 3, \"normal_third\");\r\n    \r\n    // we know that third never uses the first argument, so let's just replace it\r\n    // it with a unit! the other two parameters should still be fine, right?\r\n    //\r\n    // (note that this doesn't give an improper_ctypes_definitions warning, because\r\n    // we don't have a *definition*, only an improper extern fn type :( )\r\n    let throw_away_f: extern \"C\" fn((), usize, usize)->usize =\r\n        unsafe { std::mem::transmute(third as extern \"C\" fn(_,_,_)->_) };\r\n    let throw_away_third = throw_away_f((),2,3);\r\n    // uh-oh! the zero-sized type was actually *removed* from our systemv calling\r\n    // convention entirely, shifting our registers over and making `c` junk!\r\n    assert_eq!(throw_away_third, 3, \"throw_away_third\");\r\n}\r\n```\r\n[Playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=55030237a20e0b249ad7d977a8f6f75f)\r\nThe current output is:\r\n\r\n```\r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `94536864439520`,\r\n right: `3`: throw_away_third', src/main.rs:23:5\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\nerror: `extern` fn uses type `()`, which is not FFI-safe\r\n17 |    let throw_away_f: extern \"C\" fn((), usize, usize)->usize =\r\n  |                                        ^^ not FFI-safe\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\nCurrently, the improper_ctypes_definitions lint will warn only for declarations of extern functions with non-FFI arguments (such as `pub extern \"C\" fn throw_away_third(_: (), b: usize, c: usize) -> usize { ... }`), but doesn't warn on just *using* the fn type itself, so it doesn't help in cases where you e.g. transmute a JIT function to an fn type and use it/include it in struct types itself. This kinda makes sense, in that the lint name is improper_ctypes_definitions, but my assumption when writing the code was that there was \"that function FFI type safety lint\" that would warn if I did something stupid without directly remembering the name.\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88107/timeline", "performed_via_github_app": null, "state_reason": null}