{"url": "https://api.github.com/repos/rust-lang/rust/issues/69904", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69904/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69904/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69904/events", "html_url": "https://github.com/rust-lang/rust/issues/69904", "id": 578952407, "node_id": "MDU6SXNzdWU1Nzg5NTI0MDc=", "number": 69904, "title": "Windows: Static libraries can't be linked as files by libtool/MinGW due to .lib extension", "user": {"login": "str4d", "id": 4993799, "node_id": "MDQ6VXNlcjQ5OTM3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/str4d", "html_url": "https://github.com/str4d", "followers_url": "https://api.github.com/users/str4d/followers", "following_url": "https://api.github.com/users/str4d/following{/other_user}", "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}", "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/str4d/subscriptions", "organizations_url": "https://api.github.com/users/str4d/orgs", "repos_url": "https://api.github.com/users/str4d/repos", "events_url": "https://api.github.com/users/str4d/events{/privacy}", "received_events_url": "https://api.github.com/users/str4d/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-11T01:27:59Z", "updated_at": "2020-04-12T00:31:02Z", "closed_at": "2020-04-12T00:31:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider a C++ project using common build system tooling (autoconf, automake, gcc, libtool, pkg-conf etc.), that wants to statically link in a Rust library (which it will interact with via a C FFI). The project wants to target both Unix and Windows, so leverages MinGW for compiling C++ on Windows.\r\n\r\nlibtool follows the MinGW/GCC convention of static libraries ending in `.a`, not the MSVC convention of ending in `.lib`. libtool does support linking libraries with `libfoo.a` and `foo.lib` naming patterns if the `-Lpath/to/foo/ -lfoo` option pattern is used. However, if the library file is passed directly as an argument (which is a **very** common pattern in automake build systems when linking subunits together), libtool only treats `.a` files as libraries; `.lib` files are treated as unknown options, and moved to earlier in the eventual linker command. This in turn causes obscure linker errors due to a reordering of the library arguments.\r\n\r\nThe root cause is that  `rustc` unconditionally generates static libraries with `.lib` extensions for all Windows compiler environments, instead of using `.lib` for MSVC environments and `.a` for MinGW environments. This behaviour was introduced in Rust 1.8.0 (previously `.a` was used unconditionally for all static libraries - #29508).\r\n\r\nPossible workarounds without changes to `rustc`:\r\n- Use the `-lfoo` option for linking.\r\n  - This could require significant refactoring of the C++ build system, as the Makefiles could not rely on the built-in support for detecting that the library has been built.\r\n- Rename `foo.lib` to `libfoo.a` after Rust compilation. \r\n  - This is awkward and hacky, and the same situation that MSVC users were in before their issue was addressed.\r\n\r\nPossible solutions:\r\n- Change the default extensions to match the compilation environment's conventions.\r\n  - This ensures that the output of `rustc` matches users' default expectations.\r\n  - This could cause regressions for projects that have already integrated workarounds into their build systems, but the fix would be to remove complexity from their projects.\r\n- Enable users to override the output filename.\r\n  - Similar to the `--out-dir` option for cargo, but changing the name of the artifact instead of the location.\r\n  - There's probably an open issue already for this, but I can't find one.\r\n- Clearly document this non-standard convention, and the recommended workaround(s).\r\n  - Partly why I opened this issue, so future me would have something to find in search results \ud83d\ude04\r\n\r\nThis issue is effectively a re-opening of #43749, as recommended in https://github.com/rust-lang/rust/issues/43749#issuecomment-503674740.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69904/timeline", "performed_via_github_app": null, "state_reason": "completed"}