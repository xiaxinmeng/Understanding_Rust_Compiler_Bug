{"url": "https://api.github.com/repos/rust-lang/rust/issues/27086", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/27086/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/27086/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/27086/events", "html_url": "https://github.com/rust-lang/rust/issues/27086", "id": 95669872, "node_id": "MDU6SXNzdWU5NTY2OTg3Mg==", "number": 27086, "title": "Semantics of closures and structs do not exactly correspond", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-07-17T14:41:03Z", "updated_at": "2017-01-23T20:48:09Z", "closed_at": "2017-01-23T20:48:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There are a few places where the semantics we enforce for closures could not be faithfully simulated by end-users. These omissions are accidental, but programs do rely on them, and removing them breaks reasonable looking programs. I identified these as part of a patch that exposed closures in a more accurate way. \n\nThe model that PR #27087 puts forward is that closures can be modeled as a structure like:\n\n``` rust\nstruct Closure<'l0...'li, T0...Tj, U0...Uk> {\n    upvar0: U0,\n    ...\n    upvark: Uk\n}\n```\n\nwhere 'l0...'li and T0...Tj are the lifetime and type parameters in scope on the function that defined the closure, and U0...Uk are type parameters representing the types of its upvars (borrowed, if appropriate). I'll not go into all the details here of why I chose this structure (it's explained in a comment in the code), but I do want to point out that clearly `'l0...'l1` and `T0...Tj` do not appear in the fields -- they are there so that when we are monormorphizing, we can easily access the \"in-scope\" substitutions from the enclosing fn, which may be needed for method calls and so forth.\n\nNow, because `'li` and `Ti` are unused, if a user were to write this, it would require a `PhantomData`. This would in turn make OIBIT consider those type parameters to represent reachable data, which might affect `Send` and so forth. However, the existing code only considered the types of a closure's upvars when computing OIBIT calculations, and I have preserved those semantics. This has a concrete impact if you have code like:\n\n``` rust\nfn foo<T:Default>() {\n    send(|| { let x = T::default(); ... })\n}\n```\n\nHere, the closure is required to be sendable. This is considered true because it doesn't close over any state. However, if this were a struct with phantom data, it would be considered false, because the struct would be considered to potentially reach data of type `T`, which is not `Send`.\n\nThere is a similar case in the outlives relation:\n\n``` rust\nimpl<'a> Foo<'a> {\n    fn method(&self) {\n        let x = || something_that_does_not_use_self();\n        bar(x); // requires that x: 'static\n    }\n}\n\nfn bar<T: 'static>(t: T) { }\n```\n\nHere, we have an early-bound region `'a` in-scope, and hence the type of `x` would correspond to `C<'a>` (there are no upvars and no type parameters). However, `bar` requires that `C<'a>: 'static`. This is currently considered to hold because there are no upvars. However, for a normal struct, this would require that `'a: 'static`, which is false.\n\nThis last point means that this closure can escape `'a`, since there is no actual reachable _data_ with that lifetime. (This is also true for regular fns and I think true for impls since they are permitted to have extra lifetime parameters.)\n\nAnyway, we need to consider whether and how to close these gaps -- perhaps by extending normal structs, perhaps by limiting closures. \n\ncc @rust-lang/lang \n", "closed_by": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/27086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/27086/timeline", "performed_via_github_app": null, "state_reason": "completed"}