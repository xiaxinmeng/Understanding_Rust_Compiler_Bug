{"url": "https://api.github.com/repos/rust-lang/rust/issues/75935", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75935/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75935/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75935/events", "html_url": "https://github.com/rust-lang/rust/issues/75935", "id": 686051840, "node_id": "MDU6SXNzdWU2ODYwNTE4NDA=", "number": 75935, "title": "slice::iter() does not preserve number of iterations information for optimizer causing unneeded bounds checks", "user": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}, {"id": 2238194189, "node_id": "MDU6TGFiZWwyMjM4MTk0MTg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-slice", "name": "A-slice", "color": "f7e101", "default": false, "description": "Area: [T]"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2020-08-26T06:34:34Z", "updated_at": "2021-02-04T07:47:26Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Godbolt link to the code below: https://rust.godbolt.org/z/aKf3Wq\r\n\r\n```rust\r\npub fn foo1(x: &[u32], y: &[u32]) -> u32 {\r\n    let mut sum = 0;\r\n    let chunk_size = y.len();\r\n    for (c, y) in y.iter().enumerate() {\r\n        for chunk in x.chunks_exact(chunk_size) {\r\n            sum += chunk[c] + y;\r\n        }\r\n    }\r\n    sum\r\n}\r\n```\r\n\r\nThis code has a bounds check for `chunk[c]` although `c < chunk_size` by construction.\r\n\r\nThe same code a bit more convoluted gets rid of the bounds check\r\n\r\n```rust\r\npub fn foo2(x: &[u32], y: &[u32]) -> u32 {\r\n    let mut sum = 0;\r\n    let chunk_size = y.len();\r\n    for c in 0..chunk_size {\r\n        let y = y[c];\r\n        for chunk in x.chunks_exact(chunk_size) {\r\n            sum += chunk[c] + y;\r\n        }\r\n    }\r\n    sum\r\n}\r\n```\r\n\r\nIt seems like the information that `0 <= c < y.len()` gets lost for the optimizer when going via `y.iter().enumerate()`. So this is unrelated to `chunks_exact()` specifically but I can't come up with an equivalent example without it.\r\n\r\n**edit:** As noticed in https://github.com/rust-lang/rust/issues/75935#issuecomment-680807329, this can be worked around by defining a custom slice iterator that does counting of elements instead of working with an end pointer.\r\n\r\nThe problem is that the `slice::iter()` works with an end pointer to know when the iteration can stop and keeps no information around for the optimizer that it's actually going to iterate exactly N times. Unclear to me how this information can be preserved without changing how the iterator works, which will probably have other negative effects.\r\n\r\n**edit2:**\r\n\r\nAs noticed in https://github.com/rust-lang/rust/pull/77822 this happens with C++/C too and can also simplified a lot on the Rust side\r\n\r\n```rust\r\npub fn foo(y: &[u32]) {\r\n    let mut x = 0;\r\n    for (c, _y) in y.iter().enumerate() {\r\n        assert!(c < y.len());\r\n        x = c;\r\n    }\r\n    assert!(x == y.len());\r\n}\r\n```\r\n\r\n```cpp\r\n#include <assert.h>\r\n#include <stdint.h>\r\n#include <stdlib.h>\r\n\r\n#include <vector>\r\n\r\nvoid foo1(const uint32_t *y, size_t y_len) {\r\n  const uint32_t *y_end = y + y_len;\r\n  size_t c = 0;\r\n  for (const uint32_t *y_iter = y; y_iter != y_end; y_iter++, c++) {\r\n    assert(c < y_len);\r\n  }\r\n  assert(c == y_len);\r\n}\r\n\r\nvoid foo2(const std::vector<uint32_t>& y) {\r\n    size_t c = 0;\r\n    for (auto y_iter: y) {\r\n        assert(c < y.size());\r\n        c++;\r\n    }\r\n    assert(c == y.size());\r\n}\r\n\r\nvoid foo3(const std::vector<uint32_t>& y) {\r\n    size_t c = 0;\r\n    for (auto y_iter = y.cbegin(); y_iter != y.cend(); y_iter++, c++) {\r\n        assert(c < y.size());\r\n    }\r\n    assert(c == y.size());\r\n}\r\n```\r\n\r\n**edit3**: This is now also reported to https://bugs.llvm.org/show_bug.cgi?id=48965", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75935/timeline", "performed_via_github_app": null, "state_reason": null}