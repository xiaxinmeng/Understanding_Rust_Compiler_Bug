{"url": "https://api.github.com/repos/rust-lang/rust/issues/43088", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43088/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43088/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43088/events", "html_url": "https://github.com/rust-lang/rust/issues/43088", "id": 240996099, "node_id": "MDU6SXNzdWUyNDA5OTYwOTk=", "number": 43088, "title": "incr. comp.: Access span information more carefully throughout the compiler.", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-07-06T15:29:32Z", "updated_at": "2020-01-31T22:52:34Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently span information is accessed and copied rather haphazardly throughout the compiler which introduces lots of \"false\" dependency edges, because the span information is then never used or just used for error reporting. A few examples are:\r\n- The code generating debuginfo for structs, enums, and unions fetches the `def_span` of the type in questions, just to throw it away again immediately.\r\n- Queries collect spans from all over for possible cycle error reporting. In many cases these would not have to be access otherwise.\r\n- MIR contains span information which is later threaded through to debuginfo, which forces us to have manual special casing for ICH computation depending on debuginfo being enabled or not.\r\n- Type inference seems to pre-collect span information for error reporting. This information will not be used unless an actual error occurs.\r\n\r\nI'm sure there are many other examples. Since spans are inherently unstable (adding a new-line somewhere will change all subsequent spans within the same file) this is a problem.\r\n\r\nOne possible solution would be to not store spans directly in the HIR and MIR (and other places) anymore but in a side-table that is part of the HIR map. Instead of a `Span` one would use and pass around a `SpanId` (which can just be a newtyped `HirId` or `NodeId`). Only when the `SpanId` is resolved to an actual `Span`, would we register a dependency on the thing the span originated from.\r\n\r\ncc @nikomatsakis ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43088/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43088/timeline", "performed_via_github_app": null, "state_reason": null}