{"url": "https://api.github.com/repos/rust-lang/rust/issues/85928", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85928/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85928/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85928/events", "html_url": "https://github.com/rust-lang/rust/issues/85928", "id": 909206020, "node_id": "MDU6SXNzdWU5MDkyMDYwMjA=", "number": 85928, "title": "Std::time::Instant should not be Send?", "user": {"login": "omerbenamram", "id": 2467993, "node_id": "MDQ6VXNlcjI0Njc5OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2467993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omerbenamram", "html_url": "https://github.com/omerbenamram", "followers_url": "https://api.github.com/users/omerbenamram/followers", "following_url": "https://api.github.com/users/omerbenamram/following{/other_user}", "gists_url": "https://api.github.com/users/omerbenamram/gists{/gist_id}", "starred_url": "https://api.github.com/users/omerbenamram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omerbenamram/subscriptions", "organizations_url": "https://api.github.com/users/omerbenamram/orgs", "repos_url": "https://api.github.com/users/omerbenamram/repos", "events_url": "https://api.github.com/users/omerbenamram/events{/privacy}", "received_events_url": "https://api.github.com/users/omerbenamram/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-06-02T07:28:55Z", "updated_at": "2021-06-02T08:10:06Z", "closed_at": "2021-06-02T08:10:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nHi,\r\n\r\nI'd like to preface that we're not entirely sure this is a \"bug\" - but rather a surprising behavior of rust.\r\nWe've been experiencing some panics in production with code that kept some `std::time::Instant` in a struct and updated it across threads (using `Arc<RwLock>>`).\r\n\r\nminimal reproducible code:\r\n\r\n```rust\r\nuse std::thread;\r\nuse std::{\r\n    sync::{Arc, RwLock},\r\n    time::Instant,\r\n};\r\nfn main() {\r\n    let shared_key = Arc::new(RwLock::new(Instant::now()));\r\n    let writer_key = shared_key.clone();\r\n    thread::spawn(move || loop {\r\n        *writer_key.write().unwrap() = Instant::now();\r\n    });\r\n    loop {\r\n        let _ = Instant::now() - *shared_key.read().unwrap();\r\n    }\r\n}\r\n```\r\n\r\nWill panic almost immediately (on linux):\r\n```\r\nthread 'main' panicked at 'supplied instant is later than self', library/std/src/time.rs:281:48\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n\r\nThe fix we've applied was using `saturating_duration` for now - but this raises a question regarding the underlying assumption was that the clock will retain monotonicity across threads, this is not the case however.\r\n[Rust docs](https://doc.rust-lang.org/std/time/struct.Instant.html) do not mention the threading issue directly.\r\n\r\n[This SO post ](https://stackoverflow.com/questions/64159779/rust-stdtimeinstant-panicked-at-supplied-instant-is-later-than-self) raised our suspicion regarding the multi-core issue.\r\n\r\nThe [documentation for linux](https://linux.die.net/man/3/clock_gettime) mentions:\r\n\r\n> The CLOCK_PROCESS_CPUTIME_ID and CLOCK_THREAD_CPUTIME_ID clocks are realized on many platforms using timers from the CPUs (TSC on i386, AR.ITC on Itanium). These registers may differ between CPUs and as a consequence these clocks may return bogus results if a process is migrated to another CPU.\r\n> \r\n> If the CPUs in an SMP system have different clock sources then there is no way to maintain a correlation between the timer registers since each CPU will run at a slightly different frequency. If that is the case then clock_getcpuclockid(0) will return ENOENT to signify this condition. The two clocks will then only be useful if it can be ensured that a process stays on a certain CPU.\r\n> \r\n\r\nIn this case - should `std::time::Instant` considered `Send`?  Since the underlying guarantee of monotonicity is not upheld across threads. Or should this just be a docs mention?\r\n\r\nThanks!", "closed_by": {"login": "omerbenamram", "id": 2467993, "node_id": "MDQ6VXNlcjI0Njc5OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2467993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omerbenamram", "html_url": "https://github.com/omerbenamram", "followers_url": "https://api.github.com/users/omerbenamram/followers", "following_url": "https://api.github.com/users/omerbenamram/following{/other_user}", "gists_url": "https://api.github.com/users/omerbenamram/gists{/gist_id}", "starred_url": "https://api.github.com/users/omerbenamram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omerbenamram/subscriptions", "organizations_url": "https://api.github.com/users/omerbenamram/orgs", "repos_url": "https://api.github.com/users/omerbenamram/repos", "events_url": "https://api.github.com/users/omerbenamram/events{/privacy}", "received_events_url": "https://api.github.com/users/omerbenamram/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85928/timeline", "performed_via_github_app": null, "state_reason": "completed"}