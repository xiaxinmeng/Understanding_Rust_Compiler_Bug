{"url": "https://api.github.com/repos/rust-lang/rust/issues/82505", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82505/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82505/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82505/events", "html_url": "https://github.com/rust-lang/rust/issues/82505", "id": 815984770, "node_id": "MDU6SXNzdWU4MTU5ODQ3NzA=", "number": 82505, "title": "\"error: unresolved import xxx\u201d when compiling with the #![no_std] flag", "user": {"login": "Rynibami", "id": 37777147, "node_id": "MDQ6VXNlcjM3Nzc3MTQ3", "avatar_url": "https://avatars.githubusercontent.com/u/37777147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rynibami", "html_url": "https://github.com/Rynibami", "followers_url": "https://api.github.com/users/Rynibami/followers", "following_url": "https://api.github.com/users/Rynibami/following{/other_user}", "gists_url": "https://api.github.com/users/Rynibami/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rynibami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rynibami/subscriptions", "organizations_url": "https://api.github.com/users/Rynibami/orgs", "repos_url": "https://api.github.com/users/Rynibami/repos", "events_url": "https://api.github.com/users/Rynibami/events{/privacy}", "received_events_url": "https://api.github.com/users/Rynibami/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-02-25T01:29:56Z", "updated_at": "2021-02-25T02:44:09Z", "closed_at": "2021-02-25T02:44:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Long story short: I tried to compile my code (as shown below) into machine code for an AVR Microcontroller (atmega2560), but I got an errors that should not be there: \u201cerror: unresolved import pins\u201d and \u201cno external crate pins\".\r\n\r\n```rust\r\n// main.rs\r\n#![no_std]\r\n#![no_main]\r\n\r\nuse core::panic::PanicInfo;\r\nuse pins;\r\n\r\nconst PORTB : Port = Port::new_from_index(0x23);\r\n\r\n#[no_mangle]\r\npub extern \"C\" fn main(_argc: isize, _argv: *const *const u8) -> ! {\r\n    PORTB.init(0b_1111_1111, 0b_1111_1111);\r\n    loop{}\r\n}\r\n\r\n\r\n#[panic_handler]\r\nfn handle_panic(_info: &PanicInfo) -> ! {\r\n    loop {}\r\n}\r\n```\r\n\r\n```rust\r\n// pins.rs\r\n#[repr(C)]\r\npub struct Port {\r\n    pin     : *mut u8,  // the input pin register\r\n    ddr     : *mut u8,  // the data director register\r\n    port    : *mut u8,  // the data register\r\n}\r\n\r\nimpl Port {\r\n\r\n    /// creates a new instance of port\r\n    pub const fn new(pin: u8, ddr: u8, port: u8) -> Port {\r\n        Port { \r\n            pin:    pin as *mut u8, \r\n            ddr:    ddr as *mut u8,\r\n            port:   port as *mut u8,\r\n        }\r\n    }\r\n\r\n    /// creates a new instance of port from a starting address\r\n    pub const fn new_from_index(pin: u8) -> Port {\r\n        Port { \r\n            pin:    (pin + 0) as *mut u8, \r\n            ddr:    (pin + 1) as *mut u8,\r\n            port:   (pin + 2) as *mut u8,\r\n        }\r\n    }\r\n\r\n    /// initialized the value of the port\r\n    pub fn init(&self, ddr: u8, port: u8) {\r\n        unsafe {\r\n            core::ptr::write_volatile(self.ddr, ddr);\r\n            core::ptr::write_volatile(self.port, port);\r\n        }\r\n    }\r\n    \r\n    #[inline(always)]\r\n    pub fn read_pin_raw(&self) -> u8 {\r\n        unsafe { core::ptr::read_volatile(self.pin) }\r\n    }\r\n\r\n    #[inline(always)]\r\n    pub fn read_ddr_raw(&self) -> u8 {\r\n        unsafe { core::ptr::read_volatile(self.ddr) }\r\n    }\r\n\r\n    #[inline(always)]\r\n    pub fn read_port_raw(&self) -> u8 {\r\n        unsafe { core::ptr::read_volatile(self.port) }\r\n    }\r\n\r\n    #[inline(always)]\r\n    pub fn read_port(&self) -> u8 {\r\n        let ddr = self.read_ddr_raw();\r\n        ddr & self.read_pin_raw()\r\n    }\r\n\r\n    #[inline(always)]\r\n    pub fn write_raw(&self, value: u8) {\r\n        unsafe { core::ptr::write_volatile(self.port, value) }\r\n    }\r\n\r\n    #[inline(always)]\r\n    pub fn write(&self, value: u8) {\r\n        let ddr = self.read_ddr_raw();\r\n        self.write_raw(value & ddr);\r\n    }\r\n}\r\n```\r\n\r\nI expected to see my file being imported so I could work with the pins. After looking for hours, I just removed the `#![no_std]` to see if that would change anything to my errors and they disappeared. I think the `#![no_std]` flag somehow corrupts the `use` keyword on non-pre-included modules.\r\n\r\n### Meta\r\n\r\nI could only check this bug in the current version (displayed below), because another bug of all newer versions prevented me from even being able to compile my code.\r\n\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.51.0-nightly (c2de47a9a 2021-01-06)\r\nbinary: rustc\r\ncommit-hash: c2de47a9aa4c9812884f341f1852e9c9610f5f7a\r\ncommit-date: 2021-01-06\r\nhost: x86_64-apple-darwin\r\nrelease: 1.51.0-nightly\r\n```\r\n\r\nI cannot add a backtrace, because I\u2019m cross compiling this small program and I\u2019m not that experienced to write my own backtrace.\r\n\r\n[project.zip](https://github.com/rust-lang/rust/files/6039932/project.zip)\r\n\r\n</details>\r\n", "closed_by": {"login": "Rynibami", "id": 37777147, "node_id": "MDQ6VXNlcjM3Nzc3MTQ3", "avatar_url": "https://avatars.githubusercontent.com/u/37777147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rynibami", "html_url": "https://github.com/Rynibami", "followers_url": "https://api.github.com/users/Rynibami/followers", "following_url": "https://api.github.com/users/Rynibami/following{/other_user}", "gists_url": "https://api.github.com/users/Rynibami/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rynibami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rynibami/subscriptions", "organizations_url": "https://api.github.com/users/Rynibami/orgs", "repos_url": "https://api.github.com/users/Rynibami/repos", "events_url": "https://api.github.com/users/Rynibami/events{/privacy}", "received_events_url": "https://api.github.com/users/Rynibami/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82505/timeline", "performed_via_github_app": null, "state_reason": "completed"}