{"url": "https://api.github.com/repos/rust-lang/rust/issues/68836", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68836/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68836/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68836/events", "html_url": "https://github.com/rust-lang/rust/issues/68836", "id": 560054435, "node_id": "MDU6SXNzdWU1NjAwNTQ0MzU=", "number": 68836, "title": "MBE (macro_rules!) pattern-matching is unnecessarily O(n) even in simple cases.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2020-02-05T00:01:02Z", "updated_at": "2022-10-23T12:54:37Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "There are some crates which do something like this (e.g. [`string_cache_codegen`](https://github.com/servo/string-cache/blob/af2c7707e797768660b3db90066b80218dbca6f7/string-cache-codegen/lib.rs#L271-L275)):\r\n```rust\r\nmacro_rules! foo {\r\n    (\"a\") => (A);\r\n    (\"b\") => (B);\r\n    (\"c\") => (C);\r\n    // ... etc. (maybe hundreds more)\r\n}\r\n```\r\n(@nnethercote came across this when profiling `html5ever`'s compilation)\r\n\r\nAlso, prefixing patterns with `@foo` to create \"internal rules\" is common.\r\n\r\nBut the current implementation (AFAICT) has to check each of the patterns in turn.\r\n\r\nInstead, we could build something like a decision tree ahead of time, from the constant (i.e. `$`-less) prefix of all arms, using maps for operators/idents/literals, to make the pattern-matching of the prefix amortize to being linear in the number of input tokens.\r\n\r\nWe could keep it simple by limiting the constant prefix to leaf tokens (no `(...)`, `[...]` or `{...}`).\r\n\r\nFor the example above, we'd pre-compute something like this:\r\n```rust\r\nDecisionTree::Match {\r\n    op: {},\r\n    ident: {},\r\n    literal: {\r\n        \"a\": DecisionTree::Done([0]),\r\n        \"b\": DecisionTree::Done([1]),\r\n        \"c\": DecisionTree::Done([2]),\r\n        // ...\r\n    },\r\n}\r\n```\r\n\r\nWhereas for something using `@foo` rules it could be:\r\n```rust\r\nDecisionTree::Match {\r\n    op: {\r\n        '@': DecisionTree::Match {\r\n            op: {},\r\n            ident: {\r\n                \"foo\": DecisionTree::Done([0, 1]),\r\n                \"bar\": DecisionTree::Done([2, 3, 4]),\r\n                \"baz\": DecisionTree::Done([5]),\r\n            },\r\n            literal: {},\r\n        }\r\n    },\r\n    ident: {},\r\n    literal: {},\r\n}\r\n```\r\n(where `DecisionTree::Done` indicates the arms to continue with)\r\n\r\ncc @rust-lang/compiler (this might need a design meeting?) ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68836/timeline", "performed_via_github_app": null, "state_reason": null}