{"url": "https://api.github.com/repos/rust-lang/rust/issues/58988", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58988/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58988/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58988/events", "html_url": "https://github.com/rust-lang/rust/issues/58988", "id": 418168743, "node_id": "MDU6SXNzdWU0MTgxNjg3NDM=", "number": 58988, "title": "Multiple applicable items in scope suggests wrong code for references to trait objects", "user": {"login": "hcpl", "id": 17436405, "node_id": "MDQ6VXNlcjE3NDM2NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/17436405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hcpl", "html_url": "https://github.com/hcpl", "followers_url": "https://api.github.com/users/hcpl/followers", "following_url": "https://api.github.com/users/hcpl/following{/other_user}", "gists_url": "https://api.github.com/users/hcpl/gists{/gist_id}", "starred_url": "https://api.github.com/users/hcpl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hcpl/subscriptions", "organizations_url": "https://api.github.com/users/hcpl/orgs", "repos_url": "https://api.github.com/users/hcpl/repos", "events_url": "https://api.github.com/users/hcpl/events{/privacy}", "received_events_url": "https://api.github.com/users/hcpl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-07T07:38:10Z", "updated_at": "2019-08-01T12:29:26Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Suggestions from E0034 prepend `&` to expressions as a string regardless of whether the result type-checks.\r\n\r\nExample:\r\n```rust\r\ntrait Foo { fn baz(&self) -> u8; }\r\ntrait Bar { fn baz(&self) -> u64; }\r\ntrait Quux: Foo + Bar {}\r\n\r\nstruct Spam;\r\n\r\nimpl Foo for Spam { fn baz(&self) -> u8 { 10 } }\r\nimpl Bar for Spam { fn baz(&self) -> u64 { 10000 } }\r\nimpl Quux for Spam {}\r\n\r\nfn main() {\r\n    let quux = &Spam as &dyn Quux;\r\n    quux.baz();\r\n    //Foo::baz(&quux); // what compiler suggests\r\n    //Foo::baz(quux); // correct suggestion\r\n    \r\n    (&Spam as &dyn Quux).baz();\r\n    //Foo::baz(&&Spam as &dyn Quux); // what compiler suggests\r\n    //Foo::baz(&Spam as &dyn Quux); // correct suggestion\r\n}\r\n```\r\n\r\nPlayground: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=97c044b74af4a3798f01b223ca868bd8.\r\n\r\n<details>\r\n<summary>Errors</summary>\r\n\r\n```\r\nerror[E0034]: multiple applicable items in scope\r\n  --> src/main.rs:13:10\r\n   |\r\n13 |     quux.baz();\r\n   |          ^^^ multiple `baz` found\r\n   |\r\nnote: candidate #1 is defined in the trait `Foo`\r\n  --> src/main.rs:1:13\r\n   |\r\n1  | trait Foo { fn baz(&self) -> u8; }\r\n   |             ^^^^^^^^^^^^^^^^^^^^\r\n   = help: to disambiguate the method call, write `Foo::baz(&quux)` instead\r\nnote: candidate #2 is defined in the trait `Bar`\r\n  --> src/main.rs:2:13\r\n   |\r\n2  | trait Bar { fn baz(&self) -> u64; }\r\n   |             ^^^^^^^^^^^^^^^^^^^^^\r\n   = help: to disambiguate the method call, write `Bar::baz(&quux)` instead\r\n\r\nerror[E0034]: multiple applicable items in scope\r\n  --> src/main.rs:17:26\r\n   |\r\n17 |     (&Spam as &dyn Quux).baz();\r\n   |                          ^^^ multiple `baz` found\r\n   |\r\nnote: candidate #1 is defined in the trait `Foo`\r\n  --> src/main.rs:1:13\r\n   |\r\n1  | trait Foo { fn baz(&self) -> u8; }\r\n   |             ^^^^^^^^^^^^^^^^^^^^\r\n   = help: to disambiguate the method call, write `Foo::baz(&&Spam as &Quux)` instead\r\nnote: candidate #2 is defined in the trait `Bar`\r\n  --> src/main.rs:2:13\r\n   |\r\n2  | trait Bar { fn baz(&self) -> u64; }\r\n   |             ^^^^^^^^^^^^^^^^^^^^^\r\n   = help: to disambiguate the method call, write `Bar::baz(&&Spam as &Quux)` instead\r\n```\r\n\r\n</details>\r\n</br>\r\n\r\nNotice how in the second case, the suggested code has `&&Spam as &Quux` instead of `&(&Spam as &Quux)` which is equivalent to the first case.\r\n\r\nApplying suggestions from these errors will produce new errors: \r\n\r\n<details>\r\n<summary>Errors</summary>\r\n\r\n```\r\nerror[E0277]: the trait bound `&dyn Quux: Foo` is not satisfied\r\n  --> src/main.rs:14:5\r\n   |\r\n14 |     Foo::baz(&quux); // what compiler suggests\r\n   |     ^^^^^^^^ the trait `Foo` is not implemented for `&dyn Quux`\r\n   |\r\nnote: required by `Foo::baz`\r\n  --> src/main.rs:1:13\r\n   |\r\n1  | trait Foo { fn baz(&self) -> u8; }\r\n   |             ^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror[E0277]: the trait bound `&Spam: Quux` is not satisfied\r\n  --> src/main.rs:18:14\r\n   |\r\n18 |     Foo::baz(&&Spam as &dyn Quux); // what compiler suggests\r\n   |              --^^^^\r\n   |              |\r\n   |              the trait `Quux` is not implemented for `&Spam`\r\n   |              help: consider removing 1 leading `&`-references\r\n   |\r\n   = help: the following implementations were found:\r\n             <Spam as Quux>\r\n   = note: required for the cast to the object type `dyn Quux`\r\n```\r\n</details>\r\n<br/>\r\n\r\nThe same thing happens for mutable references where `&mut` is prepended instead.\r\n\r\nReproducible on all stable Rust versions back to 1.16.0, beta and nightly.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58988/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58988/timeline", "performed_via_github_app": null, "state_reason": null}