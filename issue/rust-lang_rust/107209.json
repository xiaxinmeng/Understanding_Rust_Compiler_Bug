{"url": "https://api.github.com/repos/rust-lang/rust/issues/107209", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107209/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107209/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107209/events", "html_url": "https://github.com/rust-lang/rust/issues/107209", "id": 1552286192, "node_id": "I_kwDOAAsO6M5chgHw", "number": 107209, "title": "Trait bounds of `<[T; MYSIZE] as SomeTrait>::AssociatedType` are not deduplicated", "user": {"login": "Qqwy", "id": 5345745, "node_id": "MDQ6VXNlcjUzNDU3NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5345745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qqwy", "html_url": "https://github.com/Qqwy", "followers_url": "https://api.github.com/users/Qqwy/followers", "following_url": "https://api.github.com/users/Qqwy/following{/other_user}", "gists_url": "https://api.github.com/users/Qqwy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qqwy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qqwy/subscriptions", "organizations_url": "https://api.github.com/users/Qqwy/orgs", "repos_url": "https://api.github.com/users/Qqwy/repos", "events_url": "https://api.github.com/users/Qqwy/events{/privacy}", "received_events_url": "https://api.github.com/users/Qqwy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-01-22T21:10:47Z", "updated_at": "2023-01-26T19:13:21Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Original issue: https://github.com/rkyv/rkyv/issues/332\r\n\r\nI tried this code:\r\n~~_(I have not managed to make this example any more 'minimal' than this unfortunately)_~~ \r\nEDIT: See [second comment](https://github.com/rust-lang/rust/issues/107209#issuecomment-1399626243) for a more minimal example.\r\n\r\n```\r\n[package]\r\nname = \"array_traits_bug\"\r\nversion = \"0.1.0\"\r\nedition = \"2021\"\r\n\r\n[dependencies]\r\nrkyv = \"0.7.39\"\r\n```\r\n\r\n```rust\r\nuse rkyv::{Archive, Deserialize};\r\n\r\npub const MYSIZE: usize = 10;\r\n\r\n#[derive(Archive, Deserialize)]\r\npub enum Happy<K>\r\nwhere\r\n    K: rkyv::Archive,\r\n{\r\n    A([K; 10]),\r\n    B([K; 10]),\r\n}\r\n\r\n#[derive(Archive, Deserialize)]\r\npub enum Sad<K>\r\nwhere\r\n    K: rkyv::Archive,\r\n{\r\n    A([K; MYSIZE]),\r\n    B([K; MYSIZE]),\r\n}\r\n```\r\n\r\n[implementation of rkyv::{Archive, Deserialize} for [T; N]](https://github.com/rkyv/rkyv/blob/master/rkyv/src/impls/core/mod.rs#L128-L176)\r\n\r\nI expected this code to compile, with the enums 'Happy' and 'Sad' behaving in the same way.\r\n\r\nInstead, a compiler error occurs while deriving Deserialize for Sad.\r\n(Deriving for Happy works without problems however!)\r\n\r\n<details><summary>Backtrace</summary>\r\n\r\n\r\n```rust\r\nerror[E0284]: type annotations needed\r\n  --> src/main.rs:14:19\r\n   |\r\n14 | #[derive(Archive, Deserialize)]\r\n   |                   ^^^^^^^^^^^ cannot infer type\r\n   |\r\n   = note: cannot satisfy `<[K; 10] as Archive>::Archived == _`\r\n   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror[E0283]: type annotations needed: cannot satisfy `[K; 10]: Archive`\r\n  --> src/main.rs:14:19\r\n   |\r\n14 | #[derive(Archive, Deserialize)]\r\n   |                   ^^^^^^^^^^^\r\n   |\r\nnote: multiple `impl`s or `where` clauses satisfying `[K; 10]: Archive` found\r\n  --> src/main.rs:14:19\r\n   |\r\n14 | #[derive(Archive, Deserialize)]\r\n   |                   ^^^^^^^^^^^\r\n   = note: and another `impl` found in the `rkyv` crate:\r\n           - impl<T, N> Archive for [T; N]\r\n             where T: Archive;\r\nnote: required for `Sad<K>` to implement `Archive`\r\n  --> src/main.rs:14:10\r\n   |\r\n14 | #[derive(Archive, Deserialize)]\r\n   |          ^^^^^^^ unsatisfied trait bound introduced in this `derive` macro\r\n15 | pub enum Sad<K>\r\n   |          ^^^^^^\r\n   = note: this error originates in the derive macro `Deserialize` which comes from the expansion of the derive macro `Archive` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror[E0283]: type annotations needed\r\n  --> src/main.rs:14:19\r\n   |\r\n14 | #[derive(Archive, Deserialize)]\r\n   |                   ^^^^^^^^^^^ cannot infer type\r\n   |\r\nnote: multiple `impl`s or `where` clauses satisfying `_: Deserialize<[K; 10], __D>` found\r\n  --> src/main.rs:14:19\r\n   |\r\n14 | #[derive(Archive, Deserialize)]\r\n   |                   ^^^^^^^^^^^\r\n   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nSome errors have detailed explanations: E0283, E0284.\r\nFor more information about an error, try `rustc --explain E0283`.\r\n\r\n```\r\n\r\n</details>\r\n\r\nThis problem occurs both on stable and on nightly.\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.68.0-nightly (52372f9c7 2023-01-21)\r\nbinary: rustc\r\ncommit-hash: 52372f9c71d8ade4cb815524f179119656f0aa2e\r\ncommit-date: 2023-01-21\r\nhost: aarch64-apple-darwin\r\nrelease: 1.68.0-nightly\r\nLLVM version: 15.0.6\r\n```\r\n\r\n---\r\n\r\nIt seems like the compiler treats `[K; 10]` and `pub const MYSIZE: usize = 10; ... [K; MYSIZE]` differently when looking up trait implementations / deducing trait bounds.\r\n\r\nCuriously, the code compiles fine:\r\n- When a struct is used rather than an enum.\r\n- When an enum containing only a single variant is used. (e.g. `Sad` without `Sad::B`)\r\n- When `Sad::B` would not also contain an ArrayVec (e.g. replace `B([K; MYSIZE]),` by `B(usize)`)\r\n- When `Sad::B`'s ArrayVec would have a different size (e.g. replace `B([K; MYSIZE]),` by `B([K; MYSIZE + 1]),`\r\n\r\nThis makes me think that the compiler maybe realizes that `[K; 10]` is the same when it is reused in multiple enum variants but does not do the same deduplication for `[K; MYSIZE]`.\r\n\r\nI did not manage to make the minimal example any smaller. It might be the case that the bug only surfaces when multiple complex compiler features interact.\r\n Help in this regard is also greatly appreciated.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107209/timeline", "performed_via_github_app": null, "state_reason": null}