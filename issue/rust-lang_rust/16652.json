{"url": "https://api.github.com/repos/rust-lang/rust/issues/16652", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/16652/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/16652/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/16652/events", "html_url": "https://github.com/rust-lang/rust/issues/16652", "id": 40816823, "node_id": "MDU6SXNzdWU0MDgxNjgyMw==", "number": 16652, "title": "Unboxed closures with mutable reference parameter", "user": {"login": "cgaebel", "id": 128969, "node_id": "MDQ6VXNlcjEyODk2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/128969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgaebel", "html_url": "https://github.com/cgaebel", "followers_url": "https://api.github.com/users/cgaebel/followers", "following_url": "https://api.github.com/users/cgaebel/following{/other_user}", "gists_url": "https://api.github.com/users/cgaebel/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgaebel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgaebel/subscriptions", "organizations_url": "https://api.github.com/users/cgaebel/orgs", "repos_url": "https://api.github.com/users/cgaebel/repos", "events_url": "https://api.github.com/users/cgaebel/events{/privacy}", "received_events_url": "https://api.github.com/users/cgaebel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-08-21T15:32:52Z", "updated_at": "2014-10-16T22:28:56Z", "closed_at": "2014-10-16T22:28:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It is either very hard (I don't know how to do it) or impossible to create an unboxed closure that takes a mutable reference. Here are my attempts, with the resulting error messages inline:\n\n``` rust\n#![feature(unboxed_closures)]\n#![feature(overloaded_calls)]\n\n// test.rs:4:23: 4:31 error: missing lifetime specifier [E0106]\n// test.rs:4 fn doit<T, F: FnOnce<(&mut int,), T>>(f: F) -> T {\n//                                 ^~~~~~~~\n// error: aborting due to previous error\nfn doit<T, F: FnOnce<(&mut int,), T>>(f: F) -> T {\n  let x = 4;\n  f(&mut x,)\n}\n\nfn main() {\n  let r: int = doit(|: i: &mut int| i + 1);\n  println!(\"x = {}\", r);\n}\n\n/////////////////////////////////////////////////////////////////////////\n\n#![feature(unboxed_closures)]\n#![feature(overloaded_calls)]\n\nfn doit<'a, T, F: FnOnce<(&'a mut int,), T>>(f: F) -> T {\n  let x = 4;\n// test.rs:26:10: 26:11 error: `x` does not live long enough\n// test.rs:26   f(&mut x,)\n//                     ^\n// test.rs:24:57: 27:2 note: reference must be valid for the lifetime 'a as defined on the block at 24:56...\n// test.rs:24 fn doit<'a, T, F: FnOnce<(&'a mut int,), T>>(f: F) -> T {\n// test.rs:25   let x = 4;\n// test.rs:26   f(&mut x,)\n// test.rs:27 }\n// test.rs:24:57: 27:2 note: ...but borrowed value is only valid for the block at 24:56\n// test.rs:24 fn doit<'a, T, F: FnOnce<(&'a mut int,), T>>(f: F) -> T {\n// test.rs:25   let x = 4;\n// test.rs:26   f(&mut x,)\n// test.rs:27 }\n// error: aborting due to previous error\n  f(&mut x,)\n}\n\nfn main() {\n  let r: int = doit(|: i: &mut int| *i + 1);\n  println!(\"x = {}\", r);\n}\n```\n", "closed_by": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/16652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/16652/timeline", "performed_via_github_app": null, "state_reason": "completed"}