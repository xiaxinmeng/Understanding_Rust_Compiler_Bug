{"url": "https://api.github.com/repos/rust-lang/rust/issues/45402", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45402/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45402/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45402/events", "html_url": "https://github.com/rust-lang/rust/issues/45402", "id": 267071959, "node_id": "MDU6SXNzdWUyNjcwNzE5NTk=", "number": 45402, "title": "Rust compiler has unintuitive lifetime for returned mutable borrow in loops", "user": {"login": "kex103", "id": 3093240, "node_id": "MDQ6VXNlcjMwOTMyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3093240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kex103", "html_url": "https://github.com/kex103", "followers_url": "https://api.github.com/users/kex103/followers", "following_url": "https://api.github.com/users/kex103/following{/other_user}", "gists_url": "https://api.github.com/users/kex103/gists{/gist_id}", "starred_url": "https://api.github.com/users/kex103/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kex103/subscriptions", "organizations_url": "https://api.github.com/users/kex103/orgs", "repos_url": "https://api.github.com/users/kex103/repos", "events_url": "https://api.github.com/users/kex103/events{/privacy}", "received_events_url": "https://api.github.com/users/kex103/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-20T06:04:54Z", "updated_at": "2020-08-30T02:19:53Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Pardon if I have an incorrect view of how the borrow/lifetime system works.\r\n\r\nCompiler complains about multiple mutable borrows in a loop, if a mutable borrow can be returned from the function.\r\n\r\nConsider the following:\r\n\r\n```\r\nuse std::collections::VecDeque;\r\nstruct Something;\r\nstruct Struct1 {\r\n    list: VecDeque<usize>,\r\n    thing: Something,\r\n}\r\nimpl Struct1 {\r\n    fn get_mut(&mut self) -> &mut Something {\r\n        for _ in self.list.iter() {\r\n            let a = &mut self.thing;\r\n            if true {\r\n                return a;\r\n            }\r\n        }\r\n        panic!(\"hi\");\r\n    }\r\n}\r\n```\r\n\r\n\r\nI get the following compilation \r\n\r\n```\r\nerror[E0499]: cannot borrow `self.thing` as mutable more than once at a time\r\n  --> src/main.rs:20:26\r\n   |\r\n20 |             let a = &mut self.thing;\r\n   |                          ^^^^^^^^^^ mutable borrow starts here in previous iteration of loop\r\n...\r\n27 |     }\r\n   |     - mutable borrow ends here\r\n...\r\nerror: aborting due to previous error\r\n```\r\n\r\nIt is not expected to me that the lifetime of the mutable reference would clash. It seems that the only reason the lifetime of a is considered so long is because it can be returned. However, if it is being returned, I don't see why it should be considered a conflict, as it won't continue with the loop.\r\n\r\nI'm not familiar with the details of the compiler, but I would expect, and I would want, the compiler to end the lifetime of the mutable borrow at the end of the loop. Or at the end of containing braces if there are any.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45402/reactions", "total_count": 11, "+1": 11, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45402/timeline", "performed_via_github_app": null, "state_reason": null}