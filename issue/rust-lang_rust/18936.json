{"url": "https://api.github.com/repos/rust-lang/rust/issues/18936", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/18936/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/18936/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/18936/events", "html_url": "https://github.com/rust-lang/rust/issues/18936", "id": 48701175, "node_id": "MDU6SXNzdWU0ODcwMTE3NQ==", "number": 18936, "title": "[guide-task] Send and Sync are not properly described", "user": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-11-13T22:28:00Z", "updated_at": "2015-02-05T05:21:18Z", "closed_at": "2015-02-05T05:21:18Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "At the introduction of `spawn`:\n\n> The spawn function has a very simple type signature: fn spawn(f: proc(): Send). Because it accepts only procs, and procs contain only owned data, spawn can safely move the entire proc and all its associated state into an entirely different task for execution. Like any closure, the function passed to spawn may capture an environment that it carries across tasks.\n\nThis doesn't explain what `Send` means, and instead talks about a simplified concept of owning the state. Something like this would be more correct (with the old `proc` closures):\n\n> The spawn function has a very simple type signature: fn spawn(f: proc():Send). A `proc` is a closure that captures its environment by value, and the `Send` bound restricts it to only allow the capture of sendable types, that is data that is safe to transfer across threads. Because all captured state is sendable, the closure is as well, and spawn can safely move the entire proc and all its associated state into an entirely different task for execution. \n\nThen later in the `Arc` section, `Sync` is not mentioned at all. A possible introduction could look like this:\n\n> To tackle this issue, one can use an Atomically Reference Counted wrapper (Arc) as implemented in the sync library of Rust. With an Arc, the data will no longer be copied for each task. Instead, a single copy of the data exists that can be accessed through an Arc handle (Arc<T>). This handle is send- and clonable, which means you can make as many of them as necessary and then send them to different tasks. \n> \n> However, for a given type `T` you are only allowed to construct an `Arc<T>` if `T` fulfills the `Sync` bound. `Sync`is a build-in trait the expresses that a type is thread safe to access through an shared reference, that is a `T` should only implement `Sync` if having two `&T` in different threads that point to the same memory is safe. For the vast majority of types that are `Sync`, thread safety is given by simply not allowing any mutation through an shared reference, eg `u32` is `Share` because you can't mutate it through an `&u32`. \n> \n> (Remaining examples of read-only Arc usage)\n> \n> Rust also enable safe mutation of data that is shared between threads, by providing library types that implement `Sync` and do some kind of runtime checking to safely pass out mutable reference one thread at a time. One example of this is the `Mutex<T>` type, which can be used to make any type `T` thread safe to access by using locks. For example you could construct an `Arc<Mutex<u32>>` to have an integer that can be shared and mutated across threads.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/18936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/18936/timeline", "performed_via_github_app": null, "state_reason": "completed"}