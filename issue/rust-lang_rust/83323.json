{"url": "https://api.github.com/repos/rust-lang/rust/issues/83323", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83323/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83323/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83323/events", "html_url": "https://github.com/rust-lang/rust/issues/83323", "id": 836837057, "node_id": "MDU6SXNzdWU4MzY4MzcwNTc=", "number": 83323, "title": "ToSocketAddrs should be implemented for Iterator<Item=SocketAddr>", "user": {"login": "maxbla", "id": 13515803, "node_id": "MDQ6VXNlcjEzNTE1ODAz", "avatar_url": "https://avatars.githubusercontent.com/u/13515803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxbla", "html_url": "https://github.com/maxbla", "followers_url": "https://api.github.com/users/maxbla/followers", "following_url": "https://api.github.com/users/maxbla/following{/other_user}", "gists_url": "https://api.github.com/users/maxbla/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxbla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxbla/subscriptions", "organizations_url": "https://api.github.com/users/maxbla/orgs", "repos_url": "https://api.github.com/users/maxbla/repos", "events_url": "https://api.github.com/users/maxbla/events{/privacy}", "received_events_url": "https://api.github.com/users/maxbla/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-03-20T15:29:08Z", "updated_at": "2023-03-30T20:15:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`ToSocketAddrs` is used for functions like `UdpSocket::bind()` to abstract over \"objects which can be converted or resolved to one or more SocketAddr values.\" Yet it is not implemented for Iterators of `SocketAddr`s (the closest analog it is implemented for is `&[SocketAddr]`)\r\n\r\nThis makes trying to bind to a large range of ports allocate unnecessarily - 6 bytes per ipv4 SocketAddr or 18 bytes per ipv6 SocketAddr. This isn't much per socket, but it can add up for large port ranges. For example\r\n```rust\r\nlet localhost = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);\r\nlet socket_addrs = (0..=3000).map(|port| SocketAddrV6::new(localhost, port));\r\nlet socket_addrs:Vec<_> = socket_addrs.collect();  //<- unnecessary allocation of 54K\r\nlet udp_socket = UdpSocket::bind(socket_addrs)\r\n```\r\nIdeally, I could do something like\r\n```rust\r\nlet localhost = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);\r\nlet socket_addrs = (0..=3000).map(|port| SocketAddrV6::new(localhost, port));\r\n// No heap allocations, yay\r\nlet udp_socket = UdpSocket::bind(socket_addrs)\r\n```\r\nOf course users can always manually loop over their `SocketAddr`s, but this is the complexity `ToSocketAddrs` was created to solve.\r\n\r\n### How to fix it\r\n\r\nI'm not sure exactly. My first attempt at fixing it was adding\r\n```rust\r\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\r\nimpl<T> ToSocketAddrs for T\r\nwhere T: Iterator<Item=SocketAddr> + Clone,\r\n{\r\n    type Iter = T;\r\n    fn to_socket_addrs(&self) -> io::Result<Self::Iter> {\r\n        Ok(self.clone())\r\n    }\r\n}\r\n```\r\nwhich fails at compile time with\r\n```\r\nerror[E0119]: conflicting implementations of trait `net::addr::ToSocketAddrs` for type `(net::ip::IpAddr, u16)`:\r\n   --> library/std/src/net/addr.rs:897:1\r\n    |\r\n871 | / impl<T> ToSocketAddrs for T\r\n872 | | where T: Iterator<Item=SocketAddr> + Clone,\r\n873 | | {\r\n874 | |     type Iter = T;\r\n...   |\r\n877 | |     }\r\n878 | | }\r\n    | |_- first implementation here\r\n...\r\n897 |   impl ToSocketAddrs for (IpAddr, u16) {\r\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(net::ip::IpAddr, u16)`\r\n    |\r\n    = note: upstream crates may add a new impl of trait `core::iter::Iterator` for type `(net::ip::IpAddr, u16)` in future versions\r\n```\r\n(and many more similar warnings)\r\nThis seems a little silly - adding an implementation of Iterator for `(net::ip::IpAddr, u16)` both doesn't make sense and will cause rustc to not compile, so it couldn't be overlooked in testing, but maybe I'm missing something. Hopefully there's an escape hatch for internals to skirt orphaning rules.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83323/timeline", "performed_via_github_app": null, "state_reason": null}