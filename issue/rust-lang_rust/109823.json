{"url": "https://api.github.com/repos/rust-lang/rust/issues/109823", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109823/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109823/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109823/events", "html_url": "https://github.com/rust-lang/rust/issues/109823", "id": 1649966904, "node_id": "I_kwDOAAsO6M5iWH84", "number": 109823, "title": "ICE: 'Failed to extract DefId: local_def_id_to_hir_id' while converting Error using Try", "user": {"login": "Gaemilo", "id": 44179139, "node_id": "MDQ6VXNlcjQ0MTc5MTM5", "avatar_url": "https://avatars.githubusercontent.com/u/44179139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gaemilo", "html_url": "https://github.com/Gaemilo", "followers_url": "https://api.github.com/users/Gaemilo/followers", "following_url": "https://api.github.com/users/Gaemilo/following{/other_user}", "gists_url": "https://api.github.com/users/Gaemilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gaemilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gaemilo/subscriptions", "organizations_url": "https://api.github.com/users/Gaemilo/orgs", "repos_url": "https://api.github.com/users/Gaemilo/repos", "events_url": "https://api.github.com/users/Gaemilo/events{/privacy}", "received_events_url": "https://api.github.com/users/Gaemilo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-03-31T20:11:42Z", "updated_at": "2023-04-07T12:58:19Z", "closed_at": "2023-04-07T12:58:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\n// /error/error.rs\r\nuse std::{error::Error as StdError, fmt::Display};\r\nuse tokio_postgres::Error as TokioError;\r\nuse hyper::{Error as HyperError, http::Error as HttpError};\r\n\r\nuse super::errorkind::ErrorKind;\r\n\r\n#[derive(Debug)]\r\npub struct Error {\r\n    kind: ErrorKind,\r\n    source: Option<Box<dyn StdError + Send + Sync + 'static>>\r\n}\r\n\r\nimpl Error {\r\n    fn new(kind: ErrorKind) -> Self {\r\n        Self { kind, source: None }\r\n    }\r\n\r\n    fn with_source(kind: ErrorKind, source: Box<dyn StdError + Send + Sync + 'static>) -> Self {\r\n        Self { kind, source: Some(source) }\r\n    }\r\n}\r\n\r\nimpl Display for Error {\r\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\r\n        write!(f, \"{}.\", self.kind.get_message())?;\r\n        match &self.source {\r\n            Some(s) => write!(f, \" Cause: {}\", s.as_ref()),\r\n            None => Ok(())\r\n        }\r\n    }\r\n}\r\n\r\nimpl StdError for Error {\r\n    fn source(&self) -> Option<&(dyn StdError + 'static)> {\r\n        match &self.source {\r\n            Some(b) => Some(b.as_ref()),\r\n            None => None\r\n        }\r\n    }\r\n}\r\n\r\nimpl From<TokioError> for Error {\r\n    fn from(value: TokioError) -> Self {\r\n        Self::with_source(ErrorKind::Database, Box::new(value))\r\n    }\r\n}\r\n\r\nimpl From<HttpError> for Error {\r\n    fn from(value: HttpError) -> Self {\r\n        Self::with_source(ErrorKind::ProcessRequest, Box::new(value))\r\n    }\r\n}\r\n\r\nimpl From<HyperError> for Error {\r\n    fn from(value: HyperError) -> Self {\r\n        Self::with_source(ErrorKind::ProcessRequest, Box::new(value))\r\n    }\r\n}\r\n\r\n// main.rs\r\nuse std::net::SocketAddr;\r\nuse hyper::{service::{make_service_fn, service_fn}, Server};\r\nuse crate::error::error::Error;\r\n\r\n#[tokio::main]\r\nasync fn main() -> Result<(), Error> {\r\n    let make_service = make_service_fn(|_conn| async {\r\n        Ok::<_, Error>(service_fn(handle_request))\r\n    });\r\n\r\n    let address = SocketAddr::from(([127,0,0,1], 8080));\r\n    let server = Server::bind(&address).serve(make_service);\r\n    server.await?;\r\n\r\n    Ok(())\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.68.0 (2c8cc3432 2023-03-06)\r\nbinary: rustc\r\ncommit-hash: 2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74\r\ncommit-date: 2023-03-06\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.68.0\r\nLLVM version: 15.0.6\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'Failed to extract DefId: local_def_id_to_hir_id 9eaf6c8adafa23a2-83e16a67f7c192b4', compiler\\rustc_middle\\src\\dep_graph\\dep_node.rs:181:17\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0:     0x7ffa85b89d02 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h792a027c2747e99d\r\n   1:     0x7ffa85bc570b - core::fmt::write::h5d1fd4698cef7a98\r\n   2:     0x7ffa85b7cdfa - <std::io::IoSlice as core::fmt::Debug>::fmt::hba64fac32bc54252\r\n   3:     0x7ffa85b89a4b - std::sys::common::alloc::realloc_fallback::hfe62d187ace61bcd\r\n   4:     0x7ffa85b8d3f9 - std::panicking::default_hook::hc7b7ee9dc8a166a2\r\n   5:     0x7ffa85b8d07b - std::panicking::default_hook::hc7b7ee9dc8a166a2\r\n   6:     0x7ffa5a9dec34 - rustc_driver[6fce53b951639747]::describe_lints\r\n   7:     0x7ffa85b8dd5f - std::panicking::rust_panic_with_hook::h80ad08272951bba3\r\n   8:     0x7ffa85b8dabe - <std::panicking::begin_panic_handler::StrPanicPayload as core::panic::BoxMeUp>::get::h87fe0efc42413a8e\r\n   9:     0x7ffa85b8a9ff - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h792a027c2747e99d\r\n  10:     0x7ffa85b8d770 - rust_begin_unwind\r\n  11:     0x7ffa85bfb3d5 - core::panicking::panic_fmt::hce24276b766fe029\r\n  12:     0x7ffa5ae7de71 - rustc_metadata[9592ab1ec771b689]::fs::non_durable_rename\r\n  13:     0x7ffa591699c9 - <rustc_query_system[3591c893537378ab]::dep_graph::dep_node::DepNode<rustc_middle[484603f84bd5edf8]::dep_graph::dep_node::DepKind> as rustc_middle[484603f84bd5edf8]::dep_graph::dep_node::DepNodeExt>::extract_def_id\r\n  14:     0x7ffa5811732a - <&[rustc_span[c51a4e40c9e03e0c]::def_id::DefId] as rustc_serialize[24aa371669c7d619]::serialize::Decodable<rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheDecoder>>::decode\r\n  15:     0x7ffa597b3064 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  16:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  17:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  18:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  19:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  20:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  21:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  22:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  23:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  24:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  25:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  26:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  27:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  28:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  29:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  30:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  31:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  32:     0x7ffa597b3004 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  33:     0x7ffa596f76fc - <rustc_middle[484603f84bd5edf8]::ty::Visibility as rustc_privacy[7356e04eccd2b68]::VisibilityLike>::new_min\r\n  34:     0x7ffa5995dcab - <rustc_trait_selection[48a8fb49e3ee715f]::traits::fulfill::FulfillProcessor as rustc_data_structures[e9c5cab0f88c0c68]::obligation_forest::ObligationProcessor>::process_obligation\r\n  35:     0x7ffa59997b64 - rustc_trait_selection[48a8fb49e3ee715f]::traits::project::normalize_projection_type\r\n  36:     0x7ffa59958c8b - <rustc_trait_selection[48a8fb49e3ee715f]::traits::fulfill::FulfillmentContext as rustc_infer[1d2eee8e62f18ba3]::traits::engine::TraitEngine>::select_all_or_error\r\n  37:     0x7ffa59a74bcc - rustc_traits[e85158c3619595fd]::type_op::type_op_ascribe_user_type_with_span\r\n  38:     0x7ffa580f0e67 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_type_ir[197ea4a31556d302]::codec::TyEncoder>::encode_alloc_id\r\n  39:     0x7ffa5968fc4e - <rustc_middle[484603f84bd5edf8]::ty::Visibility as rustc_privacy[7356e04eccd2b68]::VisibilityLike>::new_min\r\n  40:     0x7ffa59ab6728 - rustc_traits[e85158c3619595fd]::type_op::type_op_ascribe_user_type_with_span\r\n  41:     0x7ffa59736df3 - <rustc_middle[484603f84bd5edf8]::ty::Visibility as rustc_privacy[7356e04eccd2b68]::VisibilityLike>::new_min\r\n  42:     0x7ffa597b826b - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_serialize[24aa371669c7d619]::serialize::Encoder>::emit_u32\r\n  43:     0x7ffa596e931e - <rustc_middle[484603f84bd5edf8]::ty::Visibility as rustc_privacy[7356e04eccd2b68]::VisibilityLike>::new_min\r\n  44:     0x7ffa59472cdd - <rustc_monomorphize[bb49dfff16a03b65]::collector::MirNeighborCollector as rustc_middle[484603f84bd5edf8]::mir::visit::Visitor>::visit_operand\r\n  45:     0x7ffa59469c05 - <rustc_monomorphize[bb49dfff16a03b65]::collector::MirNeighborCollector as rustc_middle[484603f84bd5edf8]::mir::visit::Visitor>::visit_operand\r\n  46:     0x7ffa5946a032 - <rustc_monomorphize[bb49dfff16a03b65]::collector::MirNeighborCollector as rustc_middle[484603f84bd5edf8]::mir::visit::Visitor>::visit_operand\r\n  47:     0x7ffa5946a032 - <rustc_monomorphize[bb49dfff16a03b65]::collector::MirNeighborCollector as rustc_middle[484603f84bd5edf8]::mir::visit::Visitor>::visit_operand\r\n  48:     0x7ffa5946a032 - <rustc_monomorphize[bb49dfff16a03b65]::collector::MirNeighborCollector as rustc_middle[484603f84bd5edf8]::mir::visit::Visitor>::visit_operand\r\n  49:     0x7ffa5946a032 - <rustc_monomorphize[bb49dfff16a03b65]::collector::MirNeighborCollector as rustc_middle[484603f84bd5edf8]::mir::visit::Visitor>::visit_operand\r\n  50:     0x7ffa5946a032 - <rustc_monomorphize[bb49dfff16a03b65]::collector::MirNeighborCollector as rustc_middle[484603f84bd5edf8]::mir::visit::Visitor>::visit_operand\r\n  51:     0x7ffa5946a032 - <rustc_monomorphize[bb49dfff16a03b65]::collector::MirNeighborCollector as rustc_middle[484603f84bd5edf8]::mir::visit::Visitor>::visit_operand\r\n  52:     0x7ffa5946a032 - <rustc_monomorphize[bb49dfff16a03b65]::collector::MirNeighborCollector as rustc_middle[484603f84bd5edf8]::mir::visit::Visitor>::visit_operand\r\n  53:     0x7ffa5946a032 - <rustc_monomorphize[bb49dfff16a03b65]::collector::MirNeighborCollector as rustc_middle[484603f84bd5edf8]::mir::visit::Visitor>::visit_operand\r\n  54:     0x7ffa57e6804b - <rustc_monomorphize[bb49dfff16a03b65]::collector::MirNeighborCollector as rustc_middle[484603f84bd5edf8]::mir::visit::Visitor>::visit_constant\r\n  55:     0x7ffa57e64871 - <rustc_mir_transform[447b65096884623e]::check_unsafety::UnusedUnsafeVisitor as rustc_hir[a0ba7d6a2d0a2d5c]::intravisit::Visitor>::visit_block\r\n  56:     0x7ffa57e6bc8c - rustc_monomorphize[bb49dfff16a03b65]::provide\r\n  57:     0x7ffa580fc9e0 - <rustc_query_impl[78e525705bed6840]::on_disk_cache::CacheEncoder as rustc_type_ir[197ea4a31556d302]::codec::TyEncoder>::encode_alloc_id\r\n  58:     0x7ffa5800edf8 - <core[ab957a7126758ba9]::option::Option<rustc_middle[484603f84bd5edf8]::middle::privacy::Level> as rustc_privacy[7356e04eccd2b68]::VisibilityLike>::new_min\r\n  59:     0x7ffa580a1764 - <rustc_query_impl[78e525705bed6840]::Queries as rustc_middle[484603f84bd5edf8]::ty::query::QueryEngine>::try_mark_green\r\n  60:     0x7ffa579f0f3e - rustc_codegen_llvm[d95b11a947b9fc6d]::llvm_::set_value_name\r\n  61:     0x7ffa57a320a3 - <rustc_codegen_llvm[d95b11a947b9fc6d]::LlvmCodegenBackend as rustc_codegen_ssa[2eac74408f11a017]::traits::backend::CodegenBackend>::codegen_crate\r\n  62:     0x7ffa57cdaaa0 - rustc_interface[8244ed7f36050a97]::proc_macro_decls::provide\r\n  63:     0x7ffa57cd1e72 - rustc_interface[8244ed7f36050a97]::passes::start_codegen\r\n  64:     0x7ffa57cd0efe - rustc_interface[8244ed7f36050a97]::passes::prepare_outputs\r\n  65:     0x7ffa57cc2e4c - <rustc_interface[8244ed7f36050a97]::queries::Queries>::ongoing_codegen\r\n  66:     0x7ffa57ade718 - rustc_driver[6fce53b951639747]::args::arg_expand_all\r\n  67:     0x7ffa57ac29dc - <rustc_data_structures[e9c5cab0f88c0c68]::temp_dir::MaybeTempDir>::new\r\n  68:     0x7ffa57acce0f - <rustc_data_structures[e9c5cab0f88c0c68]::temp_dir::MaybeTempDir>::new\r\n  69:     0x7ffa57acc5f3 - <rustc_data_structures[e9c5cab0f88c0c68]::temp_dir::MaybeTempDir>::new\r\n  70:     0x7ffa57ac42dd - <rustc_data_structures[e9c5cab0f88c0c68]::temp_dir::MaybeTempDir>::new\r\n  71:     0x7ffa85ba021c - std::sys::windows::thread::Thread::new::he1a8155b1a8cc29c\r\n  72:     0x7ffb0bcb26bd - BaseThreadInitThunk\r\n  73:     0x7ffb0da2a9f8 - RtlUserThreadStart\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.68.0 (2c8cc3432 2023-03-06) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: --crate-type bin -C embed-bitcode=no -C debuginfo=2 -C incremental=[REDACTED]\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [evaluate_obligation] evaluating trait selection obligation `hyper::server::conn::upgrades::UpgradeableConnection<hyper::server::tcp::addr_stream::AddrStream, hyper::service::util::ServiceFn<fn(http::request::Request<hyper::body::body::Body>) -> impl core::future::future::Future<Output = core::result::Result<http::response::Response<hyper::body::body::Body>, error::error::Error>> {handle_request}, hyper::body::body::Body>, hyper::common::exec::Exec>: core::marker::Send`\r\n#1 [codegen_select_candidate] computing candidate for `<hyper::server::server::Server<hyper::server::tcp::AddrIncoming, hyper::service::make::MakeServiceFn<[closure@src\\main.rs:40:40: 40:47]>> as core::future::into_future::IntoFuture>`\r\n#2 [resolve_instance] resolving instance `<hyper::server::server::Server<hyper::server::tcp::AddrIncoming, hyper::service::make::MakeServiceFn<[closure@src\\main.rs:40:40: 40:47]>> as core::future::into_future::IntoFuture>::into_future`\r\n#3 [collect_and_partition_mono_items] collect_and_partition_mono_items\r\nend of query stack\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109823/timeline", "performed_via_github_app": null, "state_reason": "completed"}