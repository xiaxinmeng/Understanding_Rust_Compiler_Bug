{"url": "https://api.github.com/repos/rust-lang/rust/issues/79617", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79617/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79617/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79617/events", "html_url": "https://github.com/rust-lang/rust/issues/79617", "id": 754845838, "node_id": "MDU6SXNzdWU3NTQ4NDU4Mzg=", "number": 79617, "title": "Some Rust functions still missing coverage (-Z instrument-coverage)", "user": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2483744621, "node_id": "MDU6TGFiZWwyNDgzNzQ0NjIx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-code-coverage", "name": "A-code-coverage", "color": "f7e101", "default": false, "description": "Area: Source-based code coverage (-Cinstrument-coverage)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-12-02T01:08:07Z", "updated_at": "2021-05-04T00:27:02Z", "closed_at": "2021-05-04T00:27:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "PR #79109 included improvements to the [Coverage Map Generation](https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs) to identify uncovered functions, and inject `Unreachable` code regions for them. \r\n\r\n`mapgen.rs` identifies the `Unreachable` functions by querying the `tcx` for the `DefId`s of all MIR, and subtracting the `DefId`s of all code-generated functions (per `tcx.collect_and_partition_mono_items`).\r\n\r\nThen `mapgen.rs` has to identify at least one `Instance`/`DefId` already code-generated and in the current `CoverageCx` to which to add the `Unreachable` function code regions. Code regions can only be added to the LLVM coverage map if associated with a known, code-generated, function; **_and_** the known function cannot be a generic function. There are a couple of other constraints that must be followed, as discussed in the `mapgen.rs` comments.\r\n\r\nSome functions are still missing coverage, for example, see the results for the range at:\r\nhttps://github.com/google/json5format/blob/920d8880ba2f39cd1cc405efb90aa3f91b22aba4/src/parser.rs#L22-L162\r\n\r\nI don't see how the documented constraints apply in these cases, but there certainly are unique characteristics that may contribute to the coverage loss.\r\n\r\nThe amount of code without coverage has been minimized overall, and it may not be a priority to resolve these remaining gaps; but if and when it becomes a priority, I recommend:\r\n\r\n1. Identify missing coverage _like the example below_ (there may be others in this and/or other code bases) and deduce the root cause of the missing coverage.\r\n2. Determine how to inject additional \"Unreachable\" coverage regions.\r\n\r\n* In the case below, most of the missing coverage is inside a `lazy_static! { ... }` block. Macros are likely to interfere with coverage analysis, but perhaps there are workarounds.\r\n* `exact_match()` is outside the `lazy_static!`, but only called from within the `lazy_static!`, which may (or may not) contribute to the lost coverage.\r\n* `matches_unquoted_property_name()` is also missing coverage, and is called from another function that has coverage (though according to that function's coverage, `matches_unquoted_property_name()` was never actually called during the test execution). I would have expected to find the `DefId` for the MIR for this function, and gotten coverage. Perhaps the function was inlined before the `InstrumentCoverage` pass? I'm really not sure at this point.\r\n\r\n# Example to reproduce the issue:\r\n\r\n(This is not MCVE, sorry, but it should be reproducible.)\r\n\r\nI tried this code (assumes the default compiler includes PR #79109):\r\n\r\n```shell\r\n$ cd $HOME\r\n$ git clone git@github.com:google/json5format.git\r\n$ cd json5format\r\n$ RUSTFLAGS=\"-Zinstrument-coverage\" cargo build --example formatjson5\r\n$ LLVM_PROFILE_FILE=\"formatjson5.profraw\" ./target/debug/examples/formatjson5 path_to_some.json # or json5 file\r\n$ llvm-profdata merge -sparse formatjson5.profraw -o formatjson5.profdata\r\n$ llvm-cov show --use-color --instr-profile=formatjson5.profdata target/debug/examples/formatjson5 --show-line-counts-or-regions  --Xdemangler=rustfilt --show-instantiations | less -R\r\n```\r\n\r\nI expected to see this happen: *Ideally, all functions would be covered*\r\n\r\nInstead, this happened: *Some functions are still missing coverage, for example, see the results for the range at:* https://github.com/google/json5format/blob/920d8880ba2f39cd1cc405efb90aa3f91b22aba4/src/parser.rs#L22-L162\r\n\r\n### Meta\r\n\r\nI'm logging this issue based on the current version of PR #79109, which I anticipate landing very soon, and I don't expect to resolve this issue in that PR. To run the test described above will require a Rust nightly distribution from early- to mid-December 2020 or later, after PR #79109 has landed in the nightly distro.\r\n", "closed_by": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79617/timeline", "performed_via_github_app": null, "state_reason": "completed"}