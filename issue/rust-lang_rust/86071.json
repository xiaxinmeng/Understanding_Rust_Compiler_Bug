{"url": "https://api.github.com/repos/rust-lang/rust/issues/86071", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86071/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86071/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86071/events", "html_url": "https://github.com/rust-lang/rust/issues/86071", "id": 912923857, "node_id": "MDU6SXNzdWU5MTI5MjM4NTc=", "number": 86071, "title": "Internal Compiler Error with neon-binding (https://github.com/neon-bindings/neon), Js-Rust Bindings", "user": {"login": "Phil-Pa", "id": 38789817, "node_id": "MDQ6VXNlcjM4Nzg5ODE3", "avatar_url": "https://avatars.githubusercontent.com/u/38789817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phil-Pa", "html_url": "https://github.com/Phil-Pa", "followers_url": "https://api.github.com/users/Phil-Pa/followers", "following_url": "https://api.github.com/users/Phil-Pa/following{/other_user}", "gists_url": "https://api.github.com/users/Phil-Pa/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phil-Pa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phil-Pa/subscriptions", "organizations_url": "https://api.github.com/users/Phil-Pa/orgs", "repos_url": "https://api.github.com/users/Phil-Pa/repos", "events_url": "https://api.github.com/users/Phil-Pa/events{/privacy}", "received_events_url": "https://api.github.com/users/Phil-Pa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-06-06T19:12:53Z", "updated_at": "2021-06-17T04:05:20Z", "closed_at": "2021-06-09T13:34:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### How to reproduce:\r\n- `npm init neon cpu-count`\r\n- `cd cpu-count`\r\n- copy the code below in `src/main.rs`\r\n\r\n### General Info\r\n\r\nI know that code might not make any sense. I just wanted to try if I could do some multithreading with JavaScript by calling rust code from JS. But nethertheless I reported the error, because it could be useful. And I got 2 backtraces and pasted it.\r\n\r\n### Code\r\n\r\n```Rust\r\nuse std::{os::unix::prelude::JoinHandleExt, thread::JoinHandle, time::Duration};\r\n\r\nuse neon::prelude::*;\r\n\r\nfn hello(mut cx: FunctionContext) -> JsResult<JsString> {\r\n    Ok(cx.string(\"hello node\"))\r\n}\r\n\r\nstatic mut global_handle: Option<JoinHandle<FnOnce(_)>> = None;\r\n\r\nfn start_thread(mut cx: FunctionContext) -> JsResult<JsNumber> {\r\n    let handle = std::thread::spawn(move || {\r\n        let mut i = 0u32;\r\n        loop {\r\n            std::thread::sleep(Duration::from_millis(300));\r\n            i += 1;\r\n            println!(\"{}\", i);\r\n        }\r\n    });\r\n    unsafe {\r\n        global_handle = Some(handle);\r\n    }\r\n    Ok(cx.number(1f64))\r\n}\r\n\r\n#[neon::main]\r\nfn main(mut cx: ModuleContext) -> NeonResult<()> {\r\n    cx.export_function(\"hello\", hello)?;\r\n    Ok(())\r\n}\r\n\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.54.0-nightly (b663c0f4f 2021-05-29)\r\nbinary: rustc\r\ncommit-hash: b663c0f4f6ff84a8c9df0f708e1f8d628330d973\r\ncommit-date: 2021-05-29\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.54.0-nightly\r\nLLVM version: 12.0.1\r\n\r\nrustc 1.52.1 (9bc8c42bb 2021-05-09)\r\nbinary: rustc\r\ncommit-hash: 9bc8c42bb2f19e745a63f3445f1ac248fb015e53\r\ncommit-date: 2021-05-09\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.52.1\r\nLLVM version: 12.0.0\r\n```\r\n\r\n```\r\n$ RUST_BACKTRACE=1 cargo build\r\n   Compiling cpu-count v0.1.0 (/home/phil/Documents/code/foo/cpu-count)\r\nwarning: unused import: `os::unix::prelude::JoinHandleExt`\r\n --> src/lib.rs:1:11\r\n  |\r\n1 | use std::{os::unix::prelude::JoinHandleExt, thread::JoinHandle, time::Duration};\r\n  |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(unused_imports)]` on by default\r\n\r\nwarning: trait objects without an explicit `dyn` are deprecated\r\n --> src/lib.rs:9:45\r\n  |\r\n9 | static mut global_handle: Option<JoinHandle<FnOnce(_)>> = None;\r\n  |                                             ^^^^^^^^^ help: use `dyn`: `dyn FnOnce(_)`\r\n  |\r\n  = note: `#[warn(bare_trait_objects)]` on by default\r\n  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\r\n  = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\r\n\r\nwarning: unnecessary `unsafe` block\r\n  --> src/lib.rs:20:5\r\n   |\r\n20 |     unsafe {\r\n   |     ^^^^^^ unnecessary `unsafe` block\r\n   |\r\n   = note: `#[warn(unused_unsafe)]` on by default\r\n\r\nwarning: static is never used: `global_handle`\r\n --> src/lib.rs:9:1\r\n  |\r\n9 | static mut global_handle: Option<JoinHandle<FnOnce(_)>> = None;\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(dead_code)]` on by default\r\n\r\nwarning: function is never used: `start_thread`\r\n  --> src/lib.rs:11:4\r\n   |\r\n11 | fn start_thread(mut cx: FunctionContext) -> JsResult<JsNumber> {\r\n   |    ^^^^^^^^^^^^\r\n\r\nwarning: static variable `global_handle` should have an upper case name\r\n --> src/lib.rs:9:12\r\n  |\r\n9 | static mut global_handle: Option<JoinHandle<FnOnce(_)>> = None;\r\n  |            ^^^^^^^^^^^^^ help: convert the identifier to upper case: `GLOBAL_HANDLE`\r\n  |\r\n  = note: `#[warn(non_upper_case_globals)]` on by default\r\n\r\nthread 'rustc' panicked at 'called `Result::unwrap()` on an `Err` value: ErrorReported', compiler/rustc_mir/src/monomorphize/collector.rs:884:84\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/panicking.rs:515:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/core/src/panicking.rs:92:14\r\n   2: core::result::unwrap_failed\r\n             at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/core/src/result.rs:1355:5\r\n   3: <rustc_mir::monomorphize::collector::MirNeighborCollector as rustc_middle::mir::visit::Visitor>::visit_terminator\r\n   4: rustc_mir::monomorphize::collector::collect_neighbours\r\n   5: rustc_mir::monomorphize::collector::collect_items_rec\r\n   6: rustc_mir::monomorphize::collector::collect_items_rec\r\n   7: rustc_mir::monomorphize::collector::collect_items_rec\r\n   8: rustc_mir::monomorphize::collector::collect_items_rec\r\n   9: rustc_mir::monomorphize::collector::collect_items_rec\r\n  10: rustc_mir::monomorphize::collector::collect_items_rec\r\n  11: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  12: rustc_mir::monomorphize::collector::collect_crate_mono_items\r\n  13: rustc_mir::monomorphize::partitioning::collect_and_partition_mono_items\r\n  14: rustc_query_impl::<impl rustc_query_system::query::config::QueryAccessors<rustc_query_impl::plumbing::QueryCtxt> for rustc_query_impl::queries::collect_and_partition_mono_items>::compute\r\n  15: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  16: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  17: rustc_data_structures::stack::ensure_sufficient_stack\r\n  18: rustc_query_system::query::plumbing::force_query_with_job\r\n  19: rustc_query_system::query::plumbing::get_query_impl\r\n  20: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::collect_and_partition_mono_items\r\n  21: rustc_codegen_ssa::base::codegen_crate\r\n  22: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate\r\n  23: rustc_interface::passes::QueryContext::enter\r\n  24: rustc_interface::queries::Queries::ongoing_codegen\r\n  25: rustc_span::with_session_globals\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.54.0-nightly (b663c0f4f 2021-05-29) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type cdylib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [collect_and_partition_mono_items] collect_and_partition_mono_items\r\nend of query stack\r\nwarning: 6 warnings emitted\r\n```\r\n\r\n### Error output\r\n\r\n\r\n```\r\nerror: internal compiler error: bad_placeholder_type\r\n --> src/lib.rs:9:52\r\n  |\r\n9 | static mut global_handle: Option<JoinHandle<FnOnce(_)>> = None;\r\n  |                                                    ^\r\n  |\r\n  = note: delayed at compiler/rustc_typeck/src/collect.rs:371:20\r\n\r\nerror: internal compiler error: TyKind::Error constructed but no error reported\r\n  |\r\n  = note: delayed at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler/rustc_trait_selection/src/opaque_types.rs:942:32\r\n\r\nerror: internal compiler error: TyKind::Error constructed but no error reported\r\n  |\r\n  = note: delayed at compiler/rustc_typeck/src/check/coercion.rs:154:49\r\n\r\nerror: internal compiler error: TyKind::Error constructed but no error reported\r\n  |\r\n  = note: delayed at compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs:653:60\r\n\r\nerror: internal compiler error: TyKind::Error constructed but no error reported\r\n  |\r\n  = note: delayed at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler/rustc_middle/src/ty/relate.rs:340:59\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n --> src/lib.rs:9:59\r\n  |\r\n9 | static mut global_handle: Option<JoinHandle<FnOnce(_)>> = None;\r\n  |                                                           ^^^^\r\n  |\r\n  = note: delayed at compiler/rustc_typeck/src/check/regionck.rs:402:31\r\n\r\nerror: internal compiler error: TyKind::Error constructed but no error reported\r\n  |\r\n  = note: delayed at compiler/rustc_typeck/src/check/expr.rs:879:22\r\n\r\nerror: internal compiler error: TyKind::Error constructed but no error reported\r\n  |\r\n  = note: delayed at compiler/rustc_typeck/src/check/fn_ctxt/checks.rs:714:27\r\n\r\nerror: internal compiler error: TyKind::Error constructed but no error reported\r\n  |\r\n  = note: delayed at compiler/rustc_infer/src/infer/sub.rs:124:31\r\n\r\nerror: internal compiler error: TyKind::Error constructed but no error reported\r\n  |\r\n  = note: delayed at compiler/rustc_typeck/src/check/coercion.rs:1269:42\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/lib.rs:11:64\r\n   |\r\n11 |   fn start_thread(mut cx: FunctionContext) -> JsResult<JsNumber> {\r\n   |  ________________________________________________________________^\r\n12 | |     let handle = std::thread::spawn(move || {\r\n13 | |         let mut i = 0u32;\r\n14 | |         loop {\r\n...  |\r\n23 | |     Ok(cx.number(1f64))\r\n24 | | }\r\n   | |_^\r\n   |\r\n   = note: delayed at compiler/rustc_typeck/src/check/regionck.rs:402:31\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/lib.rs:12:18\r\n   |\r\n12 |       let handle = std::thread::spawn(move || {\r\n   |  __________________^\r\n13 | |         let mut i = 0u32;\r\n14 | |         loop {\r\n15 | |             std::thread::sleep(Duration::from_millis(300));\r\n...  |\r\n18 | |         }\r\n19 | |     });\r\n   | |______^\r\n   |\r\n   = note: delayed at compiler/rustc_typeck/src/check/regionck.rs:402:31\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/lib.rs:12:18\r\n   |\r\n12 |     let handle = std::thread::spawn(move || {\r\n   |                  ^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: delayed at compiler/rustc_typeck/src/check/regionck.rs:402:31\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/lib.rs:12:37\r\n   |\r\n12 |       let handle = std::thread::spawn(move || {\r\n   |  _____________________________________^\r\n13 | |         let mut i = 0u32;\r\n14 | |         loop {\r\n15 | |             std::thread::sleep(Duration::from_millis(300));\r\n...  |\r\n18 | |         }\r\n19 | |     });\r\n   | |_____^\r\n   |\r\n   = note: delayed at compiler/rustc_typeck/src/check/regionck.rs:402:31\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/lib.rs:12:45\r\n   |\r\n12 |       let handle = std::thread::spawn(move || {\r\n   |  _____________________________________________^\r\n13 | |         let mut i = 0u32;\r\n14 | |         loop {\r\n15 | |             std::thread::sleep(Duration::from_millis(300));\r\n...  |\r\n18 | |         }\r\n19 | |     });\r\n   | |_____^\r\n   |\r\n   = note: delayed at compiler/rustc_typeck/src/check/regionck.rs:402:31\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/lib.rs:20:5\r\n   |\r\n20 | /     unsafe {\r\n21 | |         global_handle = Some(handle);\r\n22 | |     }\r\n   | |_____^\r\n   |\r\n   = note: delayed at compiler/rustc_typeck/src/check/regionck.rs:402:31\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/lib.rs:21:9\r\n   |\r\n21 |         global_handle = Some(handle);\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: delayed at compiler/rustc_typeck/src/check/regionck.rs:402:31\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/lib.rs:21:25\r\n   |\r\n21 |         global_handle = Some(handle);\r\n   |                         ^^^^^^^^^^^^\r\n   |\r\n   = note: delayed at compiler/rustc_typeck/src/check/regionck.rs:402:31\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/lib.rs:21:25\r\n   |\r\n21 |         global_handle = Some(handle);\r\n   |                         ^^^^\r\n   |\r\n   = note: delayed at compiler/rustc_typeck/src/check/regionck.rs:402:31\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/lib.rs:21:30\r\n   |\r\n21 |         global_handle = Some(handle);\r\n   |                              ^^^^^^\r\n   |\r\n   = note: delayed at compiler/rustc_typeck/src/check/regionck.rs:402:31\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/lib.rs:21:9\r\n   |\r\n21 |         global_handle = Some(handle);\r\n   |         ^^^^^^^^^^^^^\r\n   |\r\n   = note: delayed at compiler/rustc_typeck/src/check/regionck.rs:402:31\r\n\r\nerror: internal compiler error: TyKind::Error constructed but no error reported\r\n  |\r\n  = note: delayed at compiler/rustc_mir_build/src/build/mod.rs:777:18\r\n\r\nerror: internal compiler error: mir_const_qualif: MIR had errors\r\n --> src/lib.rs:9:1\r\n  |\r\n9 | static mut global_handle: Option<JoinHandle<FnOnce(_)>> = None;\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: delayed at compiler/rustc_mir/src/transform/mod.rs:236:18\r\n\r\nerror: internal compiler error: PromoteTemps: MIR had errors\r\n --> src/lib.rs:9:1\r\n  |\r\n9 | static mut global_handle: Option<JoinHandle<FnOnce(_)>> = None;\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: delayed at compiler/rustc_mir/src/transform/promote_consts.rs:51:22\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:15 ~ cpu_count[e981]::global_handle) (\"return type\"): bad type [type error]\r\n --> src/lib.rs:9:1\r\n  |\r\n9 | static mut global_handle: Option<JoinHandle<FnOnce(_)>> = None;\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: delayed at compiler/rustc_mir/src/borrow_check/type_check/mod.rs:252:27\r\n\r\nerror: internal compiler error: TyKind::Error constructed but no error reported\r\n  |\r\n  = note: delayed at compiler/rustc_mir/src/borrow_check/type_check/mod.rs:721:20\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:15 ~ cpu_count[e981]::global_handle) (LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: [type error], user_ty: None, source_info: SourceInfo { span: src/lib.rs:9:1: 9:64 (#0), scope: scope[0] } }): bad type [type error]\r\n --> src/lib.rs:9:1\r\n  |\r\n9 | static mut global_handle: Option<JoinHandle<FnOnce(_)>> = None;\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: delayed at compiler/rustc_mir/src/borrow_check/type_check/mod.rs:252:27\r\n\r\nerror: internal compiler error: PromoteTemps: MIR had errors\r\n  --> src/lib.rs:11:1\r\n   |\r\n11 | fn start_thread(mut cx: FunctionContext) -> JsResult<JsNumber> {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: delayed at compiler/rustc_mir/src/transform/promote_consts.rs:51:22\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:16 ~ cpu_count[e981]::start_thread) (\"return type\"): bad type [type error]\r\n  --> src/lib.rs:11:1\r\n   |\r\n11 | fn start_thread(mut cx: FunctionContext) -> JsResult<JsNumber> {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: delayed at compiler/rustc_mir/src/borrow_check/type_check/mod.rs:252:27\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:16 ~ cpu_count[e981]::start_thread) (LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: [type error], user_ty: None, source_info: SourceInfo { span: src/lib.rs:11:1: 11:63 (#0), scope: scope[0] } }): bad type [type error]\r\n  --> src/lib.rs:11:1\r\n   |\r\n11 | fn start_thread(mut cx: FunctionContext) -> JsResult<JsNumber> {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: delayed at compiler/rustc_mir/src/borrow_check/type_check/mod.rs:252:27\r\n\r\nerror: internal compiler error: PromoteTemps: MIR had errors\r\n  --> src/lib.rs:12:37\r\n   |\r\n12 |       let handle = std::thread::spawn(move || {\r\n   |  _____________________________________^\r\n13 | |         let mut i = 0u32;\r\n14 | |         loop {\r\n15 | |             std::thread::sleep(Duration::from_millis(300));\r\n...  |\r\n18 | |         }\r\n19 | |     });\r\n   | |_____^\r\n   |\r\n   = note: delayed at compiler/rustc_mir/src/transform/promote_consts.rs:51:22\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:17 ~ cpu_count[e981]::start_thread::{closure#0}) (\"return type\"): bad type [type error]\r\n  --> src/lib.rs:12:37\r\n   |\r\n12 |       let handle = std::thread::spawn(move || {\r\n   |  _____________________________________^\r\n13 | |         let mut i = 0u32;\r\n14 | |         loop {\r\n15 | |             std::thread::sleep(Duration::from_millis(300));\r\n...  |\r\n18 | |         }\r\n19 | |     });\r\n   | |_____^\r\n   |\r\n   = note: delayed at compiler/rustc_mir/src/borrow_check/type_check/mod.rs:252:27\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:17 ~ cpu_count[e981]::start_thread::{closure#0}) (LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: [type error], user_ty: None, source_info: SourceInfo { span: src/lib.rs:12:37: 19:6 (#0), scope: scope[0] } }): bad type [type error]\r\n  --> src/lib.rs:12:37\r\n   |\r\n12 |       let handle = std::thread::spawn(move || {\r\n   |  _____________________________________^\r\n13 | |         let mut i = 0u32;\r\n14 | |         loop {\r\n15 | |             std::thread::sleep(Duration::from_millis(300));\r\n...  |\r\n18 | |         }\r\n19 | |     });\r\n   | |_____^\r\n   |\r\n   = note: delayed at compiler/rustc_mir/src/borrow_check/type_check/mod.rs:252:27\r\n\r\nerror: internal compiler error: encountered ambiguity selecting `Binder(<std::sync::Arc<std::cell::UnsafeCell<std::option::Option<std::result::Result<dyn std::ops::FnOnce([type error]), std::boxed::Box<dyn std::any::Any + std::marker::Send>>>>> as std::ops::Drop>, [])` during codegen, presuming due to overflow or prior type error\r\n  |\r\n  = note: delayed at compiler/rustc_trait_selection/src/traits/codegen.rs:55:32\r\n\r\nthread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', compiler/rustc_errors/src/lib.rs:1021:13\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', compiler/rustc_errors/src/lib.rs:1021:13\r\nstack backtrace:\r\n   0:     0x7fa44800b060 - std::backtrace_rs::backtrace::libunwind::trace::ha3c9a071e276aa0f\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/../../backtrace/src/backtrace/libunwind.rs:90:5\r\n   1:     0x7fa44800b060 - std::backtrace_rs::backtrace::trace_unsynchronized::ha4cae02438775bee\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\r\n   2:     0x7fa44800b060 - std::sys_common::backtrace::_print_fmt::h7a4100df230ddc18\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/sys_common/backtrace.rs:67:5\r\n   3:     0x7fa44800b060 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h90c5a98ac3ece013\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/sys_common/backtrace.rs:46:22\r\n   4:     0x7fa448078a8c - core::fmt::write::h7aa6cd0067dca82a\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/core/src/fmt/mod.rs:1110:17\r\n   5:     0x7fa447ffc8e5 - std::io::Write::write_fmt::h2fe56180f3d20a2a\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/io/mod.rs:1588:15\r\n   6:     0x7fa44800eebb - std::sys_common::backtrace::_print::hfde54a51698eed27\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/sys_common/backtrace.rs:49:5\r\n   7:     0x7fa44800eebb - std::sys_common::backtrace::print::h2cdb1fdb4dae15b4\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/sys_common/backtrace.rs:36:9\r\n   8:     0x7fa44800eebb - std::panicking::default_hook::{{closure}}::h6b7f85bf6255ae64\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/panicking.rs:208:50\r\n   9:     0x7fa44800e991 - std::panicking::default_hook::h6033f351925c444f\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/panicking.rs:225:9\r\n  10:     0x7fa4487de72d - rustc_driver::report_ice::hedef9fb40338a23b\r\n  11:     0x7fa43ae25e73 - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::h3393e4f052033350\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/alloc/src/boxed.rs:1589:9\r\n  12:     0x7fa43ae23408 - proc_macro::bridge::client::<impl proc_macro::bridge::Bridge>::enter::{{closure}}::{{closure}}::h6c22bf08b3e8cdc8\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/proc_macro/src/bridge/client.rs:320:21\r\n  13:     0x7fa44800f6c6 - std::panicking::rust_panic_with_hook::hde05f051c0c95c4a\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/panicking.rs:626:17\r\n  14:     0x7fa44800f1a7 - std::panicking::begin_panic_handler::{{closure}}::h49a1ef32b3e38727\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/panicking.rs:519:13\r\n  15:     0x7fa44800b55c - std::sys_common::backtrace::__rust_end_short_backtrace::hed2471df08b67583\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/sys_common/backtrace.rs:141:18\r\n  16:     0x7fa44800f109 - rust_begin_unwind\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/panicking.rs:515:5\r\n  17:     0x7fa447fd7fcb - std::panicking::begin_panic_fmt::hf6913515f24c4986\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/panicking.rs:457:5\r\n  18:     0x7fa44ac4a629 - rustc_errors::HandlerInner::flush_delayed::h3322626edccdc88d\r\n  19:     0x7fa44ac490dd - <rustc_errors::HandlerInner as core::ops::drop::Drop>::drop::he175ba8469a915c4\r\n  20:     0x7fa44a2daf56 - core::ptr::drop_in_place<rustc_session::parse::ParseSess>::h5c63f86f5df3788a\r\n  21:     0x7fa44a2dd45e - <alloc::rc::Rc<T> as core::ops::drop::Drop>::drop::h11c57329750d41f3\r\n  22:     0x7fa44a2ede6d - core::ptr::drop_in_place<rustc_interface::interface::Compiler>::hb8a82cba31a9cf29\r\n  23:     0x7fa44a2e3798 - rustc_span::with_session_globals::h6569bbb8a4ea9d61\r\n  24:     0x7fa44a3078ff - std::sys_common::backtrace::__rust_begin_short_backtrace::h428dbdd434c4f112\r\n  25:     0x7fa44a2de7b5 - core::ops::function::FnOnce::call_once{{vtable.shim}}::hb7785b7f871527db\r\n  26:     0x7fa44801bbb7 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h79456d14677dd3c1\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/alloc/src/boxed.rs:1575:9\r\n  27:     0x7fa44801bbb7 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h5c40c73501d779c0\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/alloc/src/boxed.rs:1575:9\r\n  28:     0x7fa44801bbb7 - std::sys::unix::thread::Thread::new::thread_start::h55fc0fe77abc7cf7\r\n                               at /rustc/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/library/std/src/sys/unix/thread.rs:71:17\r\n  29:     0x7fa447f42609 - start_thread\r\n  30:     0x7fa447e56293 - clone\r\n  31:                0x0 - <unknown>\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.54.0-nightly (b663c0f4f 2021-05-29) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type cdylib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nthread panicked while panicking. aborting.\r\nerror: could not compile `cpu-count`\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "apiraino", "id": 6098822, "node_id": "MDQ6VXNlcjYwOTg4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6098822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apiraino", "html_url": "https://github.com/apiraino", "followers_url": "https://api.github.com/users/apiraino/followers", "following_url": "https://api.github.com/users/apiraino/following{/other_user}", "gists_url": "https://api.github.com/users/apiraino/gists{/gist_id}", "starred_url": "https://api.github.com/users/apiraino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apiraino/subscriptions", "organizations_url": "https://api.github.com/users/apiraino/orgs", "repos_url": "https://api.github.com/users/apiraino/repos", "events_url": "https://api.github.com/users/apiraino/events{/privacy}", "received_events_url": "https://api.github.com/users/apiraino/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86071/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86071/timeline", "performed_via_github_app": null, "state_reason": "completed"}