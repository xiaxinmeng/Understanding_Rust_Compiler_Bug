{"url": "https://api.github.com/repos/rust-lang/rust/issues/7353", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/7353/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/7353/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/7353/events", "html_url": "https://github.com/rust-lang/rust/issues/7353", "id": 15938106, "node_id": "MDU6SXNzdWUxNTkzODEwNg==", "number": 7353, "title": "Add a way to move values into closures passed to methods in `extra::arc`", "user": {"login": "mstewartgallus", "id": 4070335, "node_id": "MDQ6VXNlcjQwNzAzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4070335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstewartgallus", "html_url": "https://github.com/mstewartgallus", "followers_url": "https://api.github.com/users/mstewartgallus/followers", "following_url": "https://api.github.com/users/mstewartgallus/following{/other_user}", "gists_url": "https://api.github.com/users/mstewartgallus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstewartgallus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstewartgallus/subscriptions", "organizations_url": "https://api.github.com/users/mstewartgallus/orgs", "repos_url": "https://api.github.com/users/mstewartgallus/repos", "events_url": "https://api.github.com/users/mstewartgallus/events{/privacy}", "received_events_url": "https://api.github.com/users/mstewartgallus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-06-24T17:57:03Z", "updated_at": "2014-05-06T04:41:28Z", "closed_at": "2014-05-06T04:41:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As it stands it is not possible to move a value into the closures passed to the methods in `extra::arc`. This should possible be possible because most of these methods are only used once.\n\nThe usual way of handling this situation seems to be to add a `foo_with` method, so for example the extra method `extra::arc::RWARC::with_write` declared as `pub fn write_with<U, V>(&self, v: V, blk: &fn(v: V, x: &mut T) -> U) -> U` would be added under this scheme. However, due to the large number of methods on `RWARC` this approach would be really messy. Not only would there have to be the `RWARC::write_with` method added but there would also have to be the `MutexARC::access_with`, `MutexARC::access_cond_with`, `RWARC::write_cond_with`, `RWARC::read_with`, `RWARC::write_downgrade_with`, `RWWriteMode::write_with`, `RWWriteMode::write_cond_with`, and `RWReadMode::read_with` methods. This feels to complex, and ugly too me. Personally, I feel once functions would be really useful for just this sort of case.\n\nSome may argue that moving into closures passed to methods in `extra::arc` isn't really needed. However in order to tackle tough concurrency problems Rust needs to provide support for generic, and reusable concurrent data structures. And these data structures aren't safely possible without allowing one to move into these closure methods, or requiring a Copy bound on ones data. A prime example of this issue is the implementation of a concurrent hash map.\n\nThe simplest possible prototype for such a concurrent hash map might have the following dumb implementation.\n\n```\nuse std::hashmap;\nuse extra::arc;\n\npub struct HashMap<Key, Value> {\n   priv contents: arc::RWARC<hashmap::HashMap<Key, Value>>\n}\n```\n\nThe insert method can have the following implementation. Unfortunately, such a method requires a Copy bound on the key, and value types.\n\n```\n    pub fn insert(&self, key: Key, value: Value) -> bool {\n        do self.contents.write |hashmap| {\n            hashmap.insert(copy key, copy value)\n        }\n    }\n```\n\nAlternatively, one could use unsafe methods to implement `insert`. Personally, I think there should be a safe and elegant way to move data like the key, and value values into closures like these.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/7353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/7353/timeline", "performed_via_github_app": null, "state_reason": "completed"}