{"url": "https://api.github.com/repos/rust-lang/rust/issues/44052", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44052/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44052/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44052/events", "html_url": "https://github.com/rust-lang/rust/issues/44052", "id": 252135786, "node_id": "MDU6SXNzdWUyNTIxMzU3ODY=", "number": 44052, "title": "RFC: Merging the avr-rust fork upstream", "user": {"login": "dylanmckay", "id": 7722159, "node_id": "MDQ6VXNlcjc3MjIxNTk=", "avatar_url": "https://avatars.githubusercontent.com/u/7722159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylanmckay", "html_url": "https://github.com/dylanmckay", "followers_url": "https://api.github.com/users/dylanmckay/followers", "following_url": "https://api.github.com/users/dylanmckay/following{/other_user}", "gists_url": "https://api.github.com/users/dylanmckay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylanmckay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylanmckay/subscriptions", "organizations_url": "https://api.github.com/users/dylanmckay/orgs", "repos_url": "https://api.github.com/users/dylanmckay/repos", "events_url": "https://api.github.com/users/dylanmckay/events{/privacy}", "received_events_url": "https://api.github.com/users/dylanmckay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 372080667, "node_id": "MDU6TGFiZWwzNzIwODA2Njc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-core", "name": "T-core", "color": "bfd4f2", "default": false, "description": "Relevant to the core team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 880020421, "node_id": "MDU6TGFiZWw4ODAwMjA0MjE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-embedded", "name": "WG-embedded", "color": "c2e0c6", "default": false, "description": "Of interest to the embedded Working Group"}, {"id": 1884641928, "node_id": "MDU6TGFiZWwxODg0NjQxOTI4", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-AVR", "name": "O-AVR", "color": "6e6ec0", "default": false, "description": "Target: AVR processors (ATtiny, ATmega, etc.)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 89, "created_at": "2017-08-23T01:45:06Z", "updated_at": "2020-07-29T11:16:45Z", "closed_at": "2020-07-24T07:51:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello all,\r\n\r\nI would like to know the general opinions on merging the [avr-rust](https://github.com/avr-rust) fork into Rust proper.\r\n\r\nThe fork itself has became a lot more stable with less bugs in the recent months. It has also started attracting a number of people interested in using it.\r\n\r\nYou can find one of the more interesting projects using avr-rust on [GitHub](https://github.com/gergoerdi/rust-avr-chip8-avr).\r\n\r\n# Blockers\r\n\r\n## LLVM 5.0\r\n\r\n~Rust is currently on LLVM 4.0, which contains a working AVR backend, but there have been many bugfixes since then. We would need to wait for LLVM 5.0 to be supported (nearly finished: #43370) before we get a version of the AVR backend that has a few important bugs fixed.~\r\n\r\nThis is no longer a blocker. Upstream Rust is at LLVM 6.0 as of 2018-02-20.\r\n\r\n# Questions\r\n\r\n## Cherry-picking fixes\r\n\r\nIf AVR support was built into mainline, we'd need to be able to cherry-pick patches into Rust's LLVM fork. I don't imagine this would be much of a problem, as we already cherry-pick a number of important fixes into there.\r\n\r\nAll of the bugfixes cherry-picked into the avr-rust repository have already been upstreamed into LLVM trunk, which would continue to be the case if we merged the fork, as I am not a fan of the LLVM fork diverging too far from trunk.\r\n\r\nCherry-picking is necessary because of LLVM's 6-month release cycle.\r\n\r\n# Current issues in the AVR backend\r\n\r\nThere aren't any known bugs in the [avr-rust/rust](https://github.com/avr-rust/rust) repository - all of the known bugs are issues in the AVR LLVM backend; here are some of the more interesting/impactful ones.\r\n\r\n## `libcore` cannot be compiled without modification\r\n\r\nThere is a [milestone](https://github.com/avr-rust/rust/milestone/1) set up to track what bugs need to be fixed in order to get `libcore` compiling successfully without modification.\r\n\r\nThis hasn't been much of a problem for users so far, as [xargo](https://github.com/japaric/xargo) will transparently compile `libcore` on the fly when needed, and we can override libcore in [`Xargo.toml`](https://github.com/gergoerdi/rust-avr-chip8-avr/blob/master/Xargo.toml).\r\n\r\nI am unsure what the Rust team thinks of merging a target which can't use the stock libcore.\r\n\r\n## Any operations on function pointers other than 'call' access RAM, not program memory (avr-rust/rust#68)\r\n\r\nThis is a symptom of AVR being the very first in-tree LLVM backend for a Harvard architecture. LLVM currently assumes that all functions reside in \"the generic address space\", which corresponds to RAM. Because of this, if you attempt to load/store through a function pointer, it will access RAM instead of the program memory.\r\n\r\nGood news is that I have pending upstream LLVM patches to fix it ([D37052](https://reviews.llvm.org/D37052), [D37053](https://reviews.llvm.org/D37053), [D37054](https://reviews.llvm.org/D37054), [D37057](https://reviews.llvm.org/D37057)).\r\n\r\n## 32-bit shifts generate calls to a `compiler-rt` routine that doesn't exist (avr-llvm/llvm#163)\r\n\r\nBecause there aren't many (if any) targets that don't support 32-bit shifts natively, `libgcc` and `compiler-rt` do not have 32-bit versions of shift routine, even though LLVM still happily generates a call to it.\r\n\r\nThis causes an undefined symbol error whilst linking. This will only happen if you actually write code or use code that performs 32-bit shifts, as the linker is quite good at removing all dead code.\r\n\r\nNote that I've had one user hit the missing shift bug due to compiling in release mode, which promoted a multiplication to a shift as an \"optimisation\".\r\n\r\n# Actual changes to merge\r\n\r\nYou can find all AVR-specific differences by looking at [this diff](https://github.com/rust-lang/rust/compare/master...avr-rust:avr-support).\r\n\r\nNote that over half of that diff is just the README and Travis CI configuration - the actual code being upstreamed is very small; just some glue code to enable the AVR backend and a target specification.\r\n\r\nThis diff also conditionally disables parts of `libcore` for AVR - these fixes would not upstreamed, and are not strictly required as downstream users can use Xargo to compile a minified `libcore` for AVR).\r\n\r\n# Links\r\n\r\n[AVR-Rust on Gitter](https://gitter.im/avr-rust/Lobby)\r\n[AVR-Rust on GitHub](https://github.com/avr-rust)", "closed_by": {"login": "dylanmckay", "id": 7722159, "node_id": "MDQ6VXNlcjc3MjIxNTk=", "avatar_url": "https://avatars.githubusercontent.com/u/7722159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylanmckay", "html_url": "https://github.com/dylanmckay", "followers_url": "https://api.github.com/users/dylanmckay/followers", "following_url": "https://api.github.com/users/dylanmckay/following{/other_user}", "gists_url": "https://api.github.com/users/dylanmckay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylanmckay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylanmckay/subscriptions", "organizations_url": "https://api.github.com/users/dylanmckay/orgs", "repos_url": "https://api.github.com/users/dylanmckay/repos", "events_url": "https://api.github.com/users/dylanmckay/events{/privacy}", "received_events_url": "https://api.github.com/users/dylanmckay/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44052/reactions", "total_count": 234, "+1": 121, "-1": 0, "laugh": 0, "hooray": 54, "confused": 0, "heart": 47, "rocket": 0, "eyes": 12}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44052/timeline", "performed_via_github_app": null, "state_reason": "completed"}