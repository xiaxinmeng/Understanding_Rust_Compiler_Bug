{"url": "https://api.github.com/repos/rust-lang/rust/issues/84070", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84070/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84070/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84070/events", "html_url": "https://github.com/rust-lang/rust/issues/84070", "id": 855143461, "node_id": "MDU6SXNzdWU4NTUxNDM0NjE=", "number": 84070, "title": "Confusing lifetime error on `impl`s involving `self` and ADTs with lifetimes", "user": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-04-10T19:52:38Z", "updated_at": "2021-04-10T19:52:38Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n\r\n```rust\r\nstruct Struct<'a>(&'a ());\r\nstruct OtherStruct<'a>(&'a Struct<'a>);\r\ntrait Trait<'a> {\r\n    fn foo(&self, x: &str) -> OtherStruct<'a>;\r\n}\r\n\r\nimpl<'a> OtherStruct<'a> {\r\n    fn new(s: &'a Struct<'a>) -> OtherStruct<'a> {\r\n        OtherStruct(s)\r\n    }\r\n}\r\n\r\nimpl<'a> Trait<'a> for Struct<'a> {\r\n    fn foo(&self, x: &str) -> OtherStruct<'a> {\r\n        OtherStruct::new(self)\r\n    }\r\n}\r\n\r\nimpl<'a> Struct<'a> {\r\n    fn foo(&self, x: &str) -> OtherStruct<'a> {\r\n        OtherStruct::new(self)\r\n    }\r\n}\r\n```\r\n\r\n[The current output is](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=d4fa918aafa9b500cde9d2a0ccbcf16c):\r\n\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\r\n  --> src/lib.rs:15:9\r\n   |\r\n15 |         OtherStruct::new(self)\r\n   |         ^^^^^^^^^^^^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 14:12...\r\n  --> src/lib.rs:14:12\r\n   |\r\n14 |     fn foo(&self, x: &str) -> OtherStruct<'a> {\r\n   |            ^^^^^\r\nnote: ...so that reference does not outlive borrowed content\r\n  --> src/lib.rs:15:26\r\n   |\r\n15 |         OtherStruct::new(self)\r\n   |                          ^^^^\r\nnote: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 13:6...\r\n  --> src/lib.rs:13:6\r\n   |\r\n13 | impl<'a> Trait<'a> for Struct<'a> {\r\n   |      ^^\r\nnote: ...so that the expression is assignable\r\n  --> src/lib.rs:15:9\r\n   |\r\n15 |         OtherStruct::new(self)\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^\r\n   = note: expected `OtherStruct<'a>`\r\n              found `OtherStruct<'_>`\r\n\r\nerror[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\r\n  --> src/lib.rs:21:9\r\n   |\r\n21 |         OtherStruct::new(self)\r\n   |         ^^^^^^^^^^^^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 20:12...\r\n  --> src/lib.rs:20:12\r\n   |\r\n20 |     fn foo(&self, x: &str) -> OtherStruct<'a> {\r\n   |            ^^^^^\r\nnote: ...so that reference does not outlive borrowed content\r\n  --> src/lib.rs:21:26\r\n   |\r\n21 |         OtherStruct::new(self)\r\n   |                          ^^^^\r\nnote: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 19:6...\r\n  --> src/lib.rs:19:6\r\n   |\r\n19 | impl<'a> Struct<'a> {\r\n   |      ^^\r\nnote: ...so that the expression is assignable\r\n  --> src/lib.rs:21:9\r\n   |\r\n21 |         OtherStruct::new(self)\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^\r\n   = note: expected `OtherStruct<'a>`\r\n              found `OtherStruct<'_>`\r\n```\r\n\r\nThe output could be potentially simplified somewhat, but more importantly, we could relatively easily [suggest that `&self` should be changed to `&'a self`](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=231861fabcd6bbf66e9e10dea133b146). For the `trait` case it is slightly more complex because we somewhat defer to the trait being right, but in this case we should indeed suggest changing both the trait and the impl to be constrained by a lifetime.\r\n\r\n_https://twitter.com/KardOnIce/status/1380950591770345474_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84070/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84070/timeline", "performed_via_github_app": null, "state_reason": null}