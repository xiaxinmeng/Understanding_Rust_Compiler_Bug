{"url": "https://api.github.com/repos/rust-lang/rust/issues/79308", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79308/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79308/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79308/events", "html_url": "https://github.com/rust-lang/rust/issues/79308", "id": 748267733, "node_id": "MDU6SXNzdWU3NDgyNjc3MzM=", "number": 79308, "title": "Loop without side-effect is not eliminated. Leads to O(n) instead of O(1) runtime", "user": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-11-22T15:33:33Z", "updated_at": "2023-04-04T11:08:24Z", "closed_at": "2023-04-04T11:08:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Adding the follow method as part of a benchmark to library/alloc/benches/vec.rs\r\n\r\n```rust\r\n#[repr(transparent)]\r\npub struct Foo(usize);\r\n\r\n\r\n#[inline(never)]\r\npub fn vec_cast(input: Vec<Foo>) -> Vec<usize> {\r\n    input.into_iter().map(|e| unsafe { std::mem::transmute(e) }).collect()\r\n}\r\n```\r\n\r\nwhich exercises [this specialization in Vec](https://github.com/rust-lang/rust/blob/5d5ff84130da0d74c6ece368dbe821d8f83fa526/library/alloc/src/vec.rs#L2451-L2497)\r\n\r\nresults in the following assembly (extracted with objdump):\r\n\r\n```assembly\r\n0000000000086130 <collectionsbenches::vec::vec_cast>:\r\n   86130:\t48 8b 0e             \tmov    (%rsi),%rcx\r\n   86133:\t48 89 f8             \tmov    %rdi,%rax\r\n   86136:\t48 8b 56 08          \tmov    0x8(%rsi),%rdx\r\n   8613a:\t48 8b 7e 10          \tmov    0x10(%rsi),%rdi\r\n   8613e:\t48 89 ce             \tmov    %rcx,%rsi\r\n   86141:\t48 85 ff             \ttest   %rdi,%rdi\r\n   86144:\t74 10                \tje     86156 <collectionsbenches::vec::vec_cast+0x26>\r\n   86146:\t48 8d 34 f9          \tlea    (%rcx,%rdi,8),%rsi\r\n   8614a:\t48 c1 e7 03          \tshl    $0x3,%rdi\r\n   8614e:\t66 90                \txchg   %ax,%ax\r\n   86150:\t48 83 c7 f8          \tadd    $0xfffffffffffffff8,%rdi ; <= RDI unused from here onwards\r\n   86154:\t75 fa                \tjne    86150 <collectionsbenches::vec::vec_cast+0x20>\r\n   86156:\t48 29 ce             \tsub    %rcx,%rsi\r\n   86159:\t48 89 08             \tmov    %rcx,(%rax)\r\n   8615c:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\r\n   86160:\t48 c1 fe 03          \tsar    $0x3,%rsi\r\n   86164:\t48 89 70 10          \tmov    %rsi,0x10(%rax)\r\n   86168:\tc3                   \tretq   \r\n```\r\n\r\nThe ghidra decompile for the same function (comments are mine):\r\n\r\n```C\r\nvoid collectionsbenches::vec::vec_cast(long *param_1,long *param_2)\r\n\r\n{\r\n  long lVar1;\r\n  long lVar2;\r\n  long lVar3;\r\n  long lVar4;\r\n  \r\n  lVar1 = *param_2; // pointer\r\n  lVar2 = param_2[1]; // capacity\r\n  lVar4 = param_2[2]; // len\r\n  lVar3 = lVar1;\r\n  if (lVar4 != 0) {\r\n    lVar3 = lVar1 + lVar4 * 8; // end pointer of vec::IntoIter\r\n    lVar4 = lVar4 << 3; // len in bytes\r\n    do {\r\n      lVar4 = lVar4 + -8;\r\n    } while (lVar4 != 0); // <== lVar4 unused from here onwards\r\n  }\r\n  *param_1 = lVar1; // pointer\r\n  param_1[1] = lVar2; // capacity\r\n  param_1[2] = lVar3 - lVar1 >> 3; // len from pointer difference\r\n  return;\r\n}\r\n```\r\n\r\nNote the useless loop.\r\n\r\nThe number of loop iterations (or rather the pointer increments) is needed to calculate the new length of the output `Vec`. LLVM already manages to hoist `lVar3 = lVar1 + lVar4 * 8;` but then it fails to eliminate the now-useless loop.\r\n\r\nThe issue does not occur if one uses `input.into_iter().flat_map(|e| None).collect()` instead, which always results in length == 0.\r\n\r\nI tried several variations of the loop (e.g. replacing `try_fold` with a simple `while let Some() ...`) but it generally results in the same or worse assembly.\r\n\r\nNote: The assembly looks somewhat different if I [run this on godbolt](https://rust.godbolt.org/z/cv1zKM7jn) but the decrementing loop without side-effect is still there. I assume the differences are due to LTO or some other compiler settings.\r\n\r\nTested on commit a1a13b2bc4f 2020-11-21 22:46\r\n\r\n@rustbot modify labels: +I-slow", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79308/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79308/timeline", "performed_via_github_app": null, "state_reason": "completed"}