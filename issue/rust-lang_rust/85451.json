{"url": "https://api.github.com/repos/rust-lang/rust/issues/85451", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85451/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85451/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85451/events", "html_url": "https://github.com/rust-lang/rust/issues/85451", "id": 894832801, "node_id": "MDU6SXNzdWU4OTQ4MzI4MDE=", "number": 85451, "title": "Lifetime bound not accepted for wrapped associated type of a generic trait", "user": {"login": "edlanglois", "id": 3248120, "node_id": "MDQ6VXNlcjMyNDgxMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3248120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edlanglois", "html_url": "https://github.com/edlanglois", "followers_url": "https://api.github.com/users/edlanglois/followers", "following_url": "https://api.github.com/users/edlanglois/following{/other_user}", "gists_url": "https://api.github.com/users/edlanglois/gists{/gist_id}", "starred_url": "https://api.github.com/users/edlanglois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edlanglois/subscriptions", "organizations_url": "https://api.github.com/users/edlanglois/orgs", "repos_url": "https://api.github.com/users/edlanglois/repos", "events_url": "https://api.github.com/users/edlanglois/events{/privacy}", "received_events_url": "https://api.github.com/users/edlanglois/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-05-18T22:27:57Z", "updated_at": "2021-12-02T00:17:34Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "In (some?) situations where the compiler needs the lifetime bound `Something<T::Type>: 'a` where `T: Trait` and `Trait` is some trait with the associated type `Type`, it does not accept that bound given explicitly.\r\nThe error message instead asks for the bound `T::Type: 'a`, so that it can infer `Something<T::Type>: 'a`.\r\n\r\nUsing the suggested bound satisfies the compiler but may not always be possible. In particular, it is not possible when the structure of the lifetime bounds are dictated by a trait that is being implemented (example at the end).\r\n\r\nI tried this code:\r\n\r\n```rust\r\ntrait Trait {\r\n    type Type;\r\n}\r\n\r\nfn foo<'a, T, I>(_: I)\r\nwhere\r\n    T: Trait,\r\n    I: IntoIterator<Item = &'a Option<<T as Trait>::Type>>,\r\n    Option<<T as Trait>::Type>: 'a, // fails\r\n    // <T as Trait>::Type: 'a, // using this instead works\r\n{}\r\n\r\n```\r\n([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=dda2da724324db5f0f3c93b29a117f47))\r\n\r\nI expected to see this happen:\r\nIt compiles successfully. The necessary bound is `Option<<T as Trait>::Type>: 'a` and that is what it is given.\r\n\r\nInstead, this happened:\r\n```\r\nerror[E0309]: the associated type `<T as Trait>::Type` may not live long enough\r\n --> src/main.rs:8:21\r\n  |\r\n8 |     I: IntoIterator<Item = &'a Option<<T as Trait>::Type>>,\r\n  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = help: consider adding an explicit lifetime bound `<T as Trait>::Type: 'a`...\r\n  = note: ...so that the reference type `&'a Option<<T as Trait>::Type>` does not outlive the data it points at\r\n```\r\n\r\nNote that bounding the lifetime of `Option<..>` does work if the inner type is not an associated type:\r\n\r\n```rust\r\nfn foo_works<'a, T, I>(_s: I)\r\nwhere\r\n    I: IntoIterator<Item = &'a Option<T>>,\r\n    Option<T>: 'a,\r\n{}\r\n```\r\n\r\n### Meta\r\nOccurs on:\r\n* [Rust Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=dda2da724324db5f0f3c93b29a117f47) Stable 1.52.1; 2018 edition\r\n* Rust Playground 1.54.0-nightly (2021-05-17 3e99439f4dacc8ba0d2c)\r\n* My machine `rustc --version --verbose`:\r\n```\r\nrustc 1.52.1\r\nbinary: rustc\r\ncommit-hash: unknown\r\ncommit-date: unknown\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.52.1\r\nLLVM version: 11.1.0\r\n```\r\n\r\nNo backtrace is generated.\r\n\r\n### Larger Example\r\nIn which the lifetime bounds are fixed by a trait implementation so the bound suggested by the compiler cannot be applied.\r\n<details>\r\n\r\n```rust\r\npub trait Trait {\r\n    type Type;\r\n    \r\n    fn foo<'a, I>(&self, _: I)\r\n    where\r\n        I: IntoIterator<Item = &'a Self::Type>,\r\n        Self::Type: 'a;\r\n}\r\n\r\npub struct OptionWrapper<T>(T);\r\n\r\nimpl<T: Trait> Trait for OptionWrapper<T> {\r\n    type Type = Option<T::Type>;\r\n    \r\n    fn foo<'a, I>(&self, _: I)\r\n    where\r\n        I: IntoIterator<Item = &'a Self::Type>,\r\n        Self::Type: 'a,\r\n        // T::Type: 'a,  // Changes the interface for Trait::foo\r\n    {}\r\n}\r\n```\r\n([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=10fae988a960307b366bde1aefe019aa))\r\n\r\n</details>\r\n\r\nMore discussion here: <https://users.rust-lang.org/t/lifebound-bounds-for-an-iterator-of-generic-wrapped-associated-types/59967>\r\n\r\nApologies in advance if this is a duplicate. I haven't found other issues that to my understanding are the same but I don't have a good understanding of which lifetime inference issues might share a common cause. In any case, this is a simpler code example than I've seen in other lifetime inference issues.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85451/timeline", "performed_via_github_app": null, "state_reason": null}