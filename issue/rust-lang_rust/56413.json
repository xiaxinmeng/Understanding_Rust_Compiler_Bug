{"url": "https://api.github.com/repos/rust-lang/rust/issues/56413", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56413/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56413/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56413/events", "html_url": "https://github.com/rust-lang/rust/issues/56413", "id": 386472263, "node_id": "MDU6SXNzdWUzODY0NzIyNjM=", "number": 56413, "title": "Known deviations of macro paths and 2018 import paths from the \"uniform path\" model", "user": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-01T16:18:56Z", "updated_at": "2020-02-19T22:09:01Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\"Uniform path\" model for macros/imports means that if macro/import path compiles without errors, it's resolved in exactly same way as non-macro/import path.\r\n\r\n(Possible differences in resolution of macro/import paths and other paths are caused by the fact that macro/import paths are resolved early, when module structure of the crate is still in flux.)\r\n\r\nThere are two known deviations from this model.\r\nImport/macro resolution never sees local variables (`let x`) and generic parameters (`T` in `fn f<T>() { ... }`) - we don't have necessary infrastructure to do that during early resolution right now.\r\n\r\nThere's still some future-proofing in place turning imports referring to local variables and generic parameters into errors - https://github.com/rust-lang/rust/pull/55884/commits/22a13ef1584a06cd5b08c57b285925d5b4ebf0b6, but that future proofing has two holes.\r\n\r\nFirst, macro paths are not future-proofed:\r\n```rust\r\nmod T { // T1\r\n    pub macro mac() {}\r\n}\r\nfn f<T>() { // T2\r\n    T::mac!(); // Should be an error because T2 shadows T1, but it's not.\r\n}\r\n```\r\nTo fix this, expanded macros need to leave better traces for late resolution, so that positions of expanded macros relative to generic parameters are known.\r\n\r\n**UPDATE**: Fixed in https://github.com/rust-lang/rust/pull/56759 --> Second, future-proofing for non-renamed single-segment imports referring to generic parameters doesn't work due to an implementation issue:\r\n```rust\r\nfn self_import<T>() {\r\n    use T; // FIXME Should be an error, but future-proofing fails due to `use T` being \"self-confirming\"\r\n}\r\n```\r\nTo fix this we need to stop treating the import `use T;` as \"self-confirming\" during future-proofing resolution (similarly to how it's done for single-segment imports in https://github.com/rust-lang/rust/pull/56392). <--", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56413/timeline", "performed_via_github_app": null, "state_reason": null}