{"url": "https://api.github.com/repos/rust-lang/rust/issues/90696", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90696/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90696/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90696/events", "html_url": "https://github.com/rust-lang/rust/issues/90696", "id": 1047512598, "node_id": "I_kwDOAAsO6M4-b8YW", "number": 90696, "title": "Problem with GATs, async, and Send-bounds", "user": {"login": "JanBeh", "id": 76393822, "node_id": "MDQ6VXNlcjc2MzkzODIy", "avatar_url": "https://avatars.githubusercontent.com/u/76393822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanBeh", "html_url": "https://github.com/JanBeh", "followers_url": "https://api.github.com/users/JanBeh/followers", "following_url": "https://api.github.com/users/JanBeh/following{/other_user}", "gists_url": "https://api.github.com/users/JanBeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanBeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanBeh/subscriptions", "organizations_url": "https://api.github.com/users/JanBeh/orgs", "repos_url": "https://api.github.com/users/JanBeh/repos", "events_url": "https://api.github.com/users/JanBeh/events{/privacy}", "received_events_url": "https://api.github.com/users/JanBeh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 3307663436, "node_id": "MDU6TGFiZWwzMzA3NjYzNDM2", "url": "https://api.github.com/repos/rust-lang/rust/labels/GATs-triaged", "name": "GATs-triaged", "color": "e88000", "default": false, "description": "Issues using the `generic_associated_types` feature that have been triaged"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2021-11-08T14:22:20Z", "updated_at": "2023-06-09T05:03:45Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have experienced problems with `Send` bounds on GATs. The original code where the problem occurred uses the [`async-trait`](https://crates.io/crates/async-trait) crate and looks as follows:\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\n\r\nuse async_trait::async_trait;\r\nuse std::ops::Deref;\r\n\r\nasync fn some_async_task() {}\r\n\r\n#[async_trait]\r\ntrait Source {\r\n    type T;\r\n    type Wrapper<'a>: Deref<Target = Self::T> + Send\r\n    where\r\n        Self: 'a;\r\n    async fn retrieve(&mut self) -> Self::Wrapper<'_>;\r\n}\r\n\r\nstruct S {\r\n    state: i32,\r\n}\r\n\r\nimpl S {\r\n    fn new() -> Self {\r\n        S { state: 0 }\r\n    }\r\n}\r\n\r\n#[async_trait]\r\nimpl Source for S {\r\n    type T = i32;\r\n    type Wrapper<'a> = &'a Self::T;\r\n    async fn retrieve(&mut self) -> Self::Wrapper<'_> {\r\n        self.state += 1;\r\n        &self.state\r\n    }\r\n}\r\n\r\n#[async_trait]\r\ntrait User {\r\n    // After updating nightly rustc, this won't work anymore:\r\n    async fn process<'a, 'b, S>(\r\n        &'a self,\r\n        source: &'b mut S,\r\n    ) -> S::Wrapper<'b>\r\n    where\r\n        S: Source + Send,\r\n    {\r\n        let result = source.retrieve().await;\r\n        some_async_task().await;\r\n        result\r\n    }\r\n}\r\n\r\nstruct U {}\r\n\r\n#[async_trait]\r\nimpl User for U {}\r\n\r\n#[tokio::main]\r\nasync fn main() {\r\n    let mut s = S::new();\r\n    let u = U {};\r\n    let value: &i32 = u.process(&mut s).await;\r\n    println!(\"Result = {}\", value);\r\n}\r\n```\r\n\r\nUsing the Rust playground with Nightly version: 1.58.0-nightly (2021-11-07 46b8e7488eae11672219), I get:\r\n\r\n```text\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0311]: the parameter type `S` may not live long enough\r\n  --> src/main.rs:46:5\r\n   |\r\n40 |       async fn process<'a, 'b, S>(\r\n   |                                - help: consider adding an explicit lifetime bound...: `S: 'c`\r\n...\r\n46 | /     {\r\n47 | |         let result = source.retrieve().await;\r\n48 | |         some_async_task().await;\r\n49 | |         result\r\n50 | |     }\r\n   | |_____^ ...so that the type `S` will meet its required lifetime bounds\r\n\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nIf I follow the compiler's advice literally, then of course I'll get:\r\n\r\n```text\r\nerror[E0261]: use of undeclared lifetime name `'c`\r\n```\r\n\r\nIf I declare 'c as a lifetime parameter, then the compiler demands I should add a bound S: 'd, and so on.\r\n\r\nThis code worked with some earlier version of nightly Rust (without the `where Self: 'a` bound, and before `where Self: 'a` was required in the GAT). Unfortunately I do not remember which version that was (a few weeks ago).\r\n\r\nHowever, even before the update of rustc, I had difficulties to remove the `Send` bound from the GATs definition and to include a bound in another method that uses the GATs. This problem still persists and can be demonstrated with the following code:\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\n\r\nuse async_trait::async_trait;\r\nuse std::ops::Deref;\r\n\r\nasync fn some_async_task() {}\r\n\r\n#[async_trait]\r\ntrait Source {\r\n    type T;\r\n    // I removed the `Send` bound here:\r\n    type Wrapper<'a>: Deref<Target = Self::T>\r\n    where\r\n        Self: 'a;\r\n    async fn retrieve(&mut self) -> Self::Wrapper<'_>;\r\n}\r\n\r\nstruct S {\r\n    state: i32,\r\n}\r\n\r\nimpl S {\r\n    fn new() -> Self {\r\n        S { state: 0 }\r\n    }\r\n}\r\n\r\n#[async_trait]\r\nimpl Source for S {\r\n    type T = i32;\r\n    type Wrapper<'a> = &'a Self::T;\r\n    async fn retrieve(&mut self) -> Self::Wrapper<'_> {\r\n        self.state += 1;\r\n        &self.state\r\n    }\r\n}\r\n\r\n#[async_trait]\r\ntrait User {\r\n    async fn process<'a, 'b, S>(\r\n        &'a self,\r\n        source: &'b mut S,\r\n    ) -> S::Wrapper<'b>\r\n    where\r\n        S: Source + Send + 'static,\r\n        // And added it here:\r\n        <S as Source>::Wrapper<'b>: Send,\r\n    {\r\n        let result = source.retrieve().await;\r\n        some_async_task().await;\r\n        result\r\n    }\r\n}\r\n\r\nstruct U {}\r\n\r\n#[async_trait]\r\nimpl User for U {}\r\n\r\n#[tokio::main]\r\nasync fn main() {\r\n    let mut s = S::new();\r\n    let u = U {};\r\n    let value: &i32 = u.process(&mut s).await;\r\n    println!(\"Result = {}\", value);\r\n}\r\n```\r\n\r\nUsing again Rust playground with Nightly version: 1.58.0-nightly (2021-11-07 46b8e7488eae11672219), I get:\r\n\r\n```text\r\n   Compiling playground v0.0.1 (/playground)\r\nerror: implementation of `Send` is not general enough\r\n  --> src/main.rs:48:5\r\n   |\r\n48 | /     {\r\n49 | |         let result = source.retrieve().await;\r\n50 | |         some_async_task().await;\r\n51 | |         result\r\n52 | |     }\r\n   | |_____^ implementation of `Send` is not general enough\r\n   |\r\n   = note: `<S as Source>::Wrapper<'0>` must implement `Send`, for any lifetime `'0`...\r\n   = note: ...but `Send` is actually implemented for the type `<S as Source>::Wrapper<'b>`\r\n\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nIf I try to use a HRTB (`for<'z> <S as Source>::Wrapper<'z>: Send`), then I get:\r\n\r\n```text\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0277]: `<_ as Source>::Wrapper<'z>` cannot be sent between threads safely\r\n  --> src/main.rs:64:25\r\n   |\r\n64 |     let value: &i32 = u.process(&mut s).await;\r\n   |                         ^^^^^^^ `<_ as Source>::Wrapper<'z>` cannot be sent between threads safely\r\n   |\r\n   = help: the trait `for<'z> Send` is not implemented for `<_ as Source>::Wrapper<'z>`\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nI'm not sure if these problems are related, but there seem to be a link. There has been a discussion on the Rust users forum where [another smaller example](https://users.rust-lang.org/t/problem-with-gats-in-an-async-trait-after-updating-nightly-rust/66983/14?u=jbe) (without `async-trait` macros) was created:\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\nuse std::{future::Future, marker::PhantomData};\r\n\r\ntrait Trait {\r\n    type Associated<'a>: Send\r\n    where\r\n        Self: 'a;\r\n}\r\n\r\nfn future<'a, S: Trait + 'a, F>(f: F) -> F\r\nwhere\r\n    F: Future<Output = ()> + Send,\r\n{\r\n    f\r\n}\r\n\r\nfn foo<'a, S: Trait + 'a>() {\r\n    future::<'a, S, _>(async move {\r\n        let result: PhantomData<S::Associated<'a>> = PhantomData;\r\n        async {}.await;\r\n    });\r\n}\r\n```\r\n\r\nThis results (using the same compiler version) in:\r\n\r\n```text\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0311]: the parameter type `S` may not live long enough\r\n  --> src/lib.rs:18:5\r\n   |\r\n17 | fn foo<'a, S: Trait + 'a>() {\r\n   |            -- help: consider adding an explicit lifetime bound...: `S: 'b +`\r\n18 |     future::<'a, S, _>(async move {\r\n   |     ^^^^^^^^^^^^^^^^^^ ...so that the type `S` will meet its required lifetime bounds...\r\n   |\r\nnote: ...that is required by this bound\r\n  --> src/lib.rs:12:30\r\n   |\r\n12 |     F: Future<Output = ()> + Send,\r\n   |                              ^^^^\r\n\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nIf I replace `Send` with `SomeTrait` with `impl<T> SomeTrait for T {}`, the code will compile. We guessed the problem might be auto-trait related?\r\n\r\nSee also:\r\n\r\n* The previously mentioned [discussion on the Rust users forum](https://users.rust-lang.org/t/problem-with-gats-in-an-async-trait-after-updating-nightly-rust/66983)\r\n* #89970\r\n* #87479 ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90696/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90696/timeline", "performed_via_github_app": null, "state_reason": null}