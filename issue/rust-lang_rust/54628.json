{"url": "https://api.github.com/repos/rust-lang/rust/issues/54628", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54628/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54628/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54628/events", "html_url": "https://github.com/rust-lang/rust/issues/54628", "id": 364712427, "node_id": "MDU6SXNzdWUzNjQ3MTI0Mjc=", "number": 54628, "title": "Fastest way to initialize a vector is not documented", "user": {"login": "Shnatsel", "id": 291257, "node_id": "MDQ6VXNlcjI5MTI1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/291257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Shnatsel", "html_url": "https://github.com/Shnatsel", "followers_url": "https://api.github.com/users/Shnatsel/followers", "following_url": "https://api.github.com/users/Shnatsel/following{/other_user}", "gists_url": "https://api.github.com/users/Shnatsel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Shnatsel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Shnatsel/subscriptions", "organizations_url": "https://api.github.com/users/Shnatsel/orgs", "repos_url": "https://api.github.com/users/Shnatsel/repos", "events_url": "https://api.github.com/users/Shnatsel/events{/privacy}", "received_events_url": "https://api.github.com/users/Shnatsel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-09-28T01:55:07Z", "updated_at": "2019-05-20T13:42:58Z", "closed_at": "2018-10-27T01:27:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "There are at least thee distinct ways to create a zero-filled vector with a certain capacity:\r\n```rust\r\n// resize\r\nlet mut vec1 = Vec::with_capacity(len);\r\nvec1.resize(len, 0);\r\n// extend\r\nlet mut vec2 = Vec::with_capacity(len);\r\nvec2.extend(repeat(0).take(len))\r\n// vec! macro\r\nlet mut vec3 = vec![0; len];\r\n```\r\n\r\nDespite the latter being the most concise one, other solutions also show up in real-world code. The performance characteristics of these solutions are not obvious, and not documented - at least on the [Vec page in stdlib reference](https://doc.rust-lang.org/std/vec/struct.Vec.html).\r\n\r\nThis has led to an actual security vulnerability in Claxon crate, now known as RUSTSEC-2018-0004. On some malformed inputs contents of uninitialized memory would show up in the output. See [the original bug report](https://github.com/ruuda/claxon/issues/10) or the [security advisory](https://github.com/RustSec/advisory-db/pull/54/files) for more details.\r\n\r\nLike most binary format decoders, Claxon writes into a preallocated buffer. Memory unsafety that led to the vulnerability was introduced to speed up initialization of the vector. Initialization was originally performed like this: `buffer.extend(repeat(0).take(new_len - len))`, but was replaced with `unsafe { buffer.set_len(new_len); }` for performance (see [relevant commit](https://github.com/ruuda/claxon/commit/cfeb761dd4487aba62eee68faeb2d85a1d175916)).\r\n\r\nAnything that desugars into `RawVec::with_capacity_zeroed()` is dramatically more efficient than `.extend()`, at least on Linux. One public wrapper for this function is `vec!` macro. Replacing `vec::with_capacity(new_len); unsafe { buffer.set_len(new_len); }` with `vec![0; new_len];` created [no measurable performance difference](https://github.com/ruuda/claxon/commit/fec24678c7086aa4b2528bd7542f31d978b81b90) in Claxon, eliminating the need to unsafe code.\r\n\r\nI believe that clearly documenting that the `vec!` macro has special behavior when given 0 as argument and is dramatically more efficient than other means of initialization (at least on some platforms) would have prevented this vulnerability.", "closed_by": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54628/reactions", "total_count": 40, "+1": 40, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54628/timeline", "performed_via_github_app": null, "state_reason": "completed"}