{"url": "https://api.github.com/repos/rust-lang/rust/issues/38941", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38941/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38941/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38941/events", "html_url": "https://github.com/rust-lang/rust/issues/38941", "id": 199486322, "node_id": "MDU6SXNzdWUxOTk0ODYzMjI=", "number": 38941, "title": "Missed optimization: references from pointers aren't treated as noalias", "user": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 884691893, "node_id": "MDU6TGFiZWw4ODQ2OTE4OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-codegen", "name": "WG-codegen", "color": "c2e0c6", "default": false, "description": "Working Group: Codegen (Runtime perf and code size)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2017-01-09T06:37:07Z", "updated_at": "2018-11-05T00:03:06Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following code results in `x` being dereferenced twice:\r\n\r\n```rust\r\npub unsafe fn f(a: *mut i32, b: *mut i32, x: *const i32) {\r\n  *a = *x;\r\n  *b = *x;\r\n}\r\n```\r\n\r\nThat is to be expected. As far as I know, the Rust language spec doesn't give a way to mark unsafe raw pointers as `noalias`. It does, however, say that references are treated as `noalias`, so the following (correctly) optimizes out the extra dereference for both `foo` and `bar`:\r\n\r\n```rust\r\npub fn foo(a: &mut i32, b: &mut i32, x: &i32) {\r\n  *a = *x;\r\n  *b = *x;\r\n}\r\n\r\npub unsafe fn bar(a: *mut i32, b: *mut i32, x: *const i32) {\r\n  foo(&mut *a, &mut *b, &*x);\r\n}\r\n```\r\n\r\nHowever, if we change the code to the following:\r\n\r\n```rust\r\npub fn g(a: *mut i32, b: *mut i32, x: *const i32) {\r\n  let safe_a = unsafe { &mut *a };\r\n  let safe_b = unsafe { &mut *b };\r\n  let safe_x = unsafe { &*x };\r\n  *safe_a = *safe_x;\r\n  *safe_b = *safe_x;\r\n}\r\n```\r\n\r\nthen the extra dereference is *not* optimized out as it should be. For some reason, this optimization is missed in this situation. (note: I was comparing rustc 1.16.0-nightly (47c8d9fdc 2017-01-08) with flags `-C opt-level=s`)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38941/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38941/timeline", "performed_via_github_app": null, "state_reason": null}