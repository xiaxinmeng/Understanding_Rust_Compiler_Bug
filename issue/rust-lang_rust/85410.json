{"url": "https://api.github.com/repos/rust-lang/rust/issues/85410", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85410/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85410/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85410/events", "html_url": "https://github.com/rust-lang/rust/issues/85410", "id": 893272021, "node_id": "MDU6SXNzdWU4OTMyNzIwMjE=", "number": 85410, "title": "Tracking Issue for abstract namespaces in Unix domain sockets", "user": {"login": "mdaverde", "id": 1067001, "node_id": "MDQ6VXNlcjEwNjcwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1067001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdaverde", "html_url": "https://github.com/mdaverde", "followers_url": "https://api.github.com/users/mdaverde/followers", "following_url": "https://api.github.com/users/mdaverde/following{/other_user}", "gists_url": "https://api.github.com/users/mdaverde/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdaverde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdaverde/subscriptions", "organizations_url": "https://api.github.com/users/mdaverde/orgs", "repos_url": "https://api.github.com/users/mdaverde/repos", "events_url": "https://api.github.com/users/mdaverde/events{/privacy}", "received_events_url": "https://api.github.com/users/mdaverde/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 219670472, "node_id": "MDU6TGFiZWwyMTk2NzA0NzI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/final-comment-period", "name": "final-comment-period", "color": "1e76d9", "default": false, "description": "In the final comment period and will be merged soon unless new substantive objections are raised."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2021-05-17T12:17:31Z", "updated_at": "2023-03-18T14:50:05Z", "closed_at": "2023-03-18T14:50:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Feature gate: `#![feature(unix_socket_abstract)]`\r\n\r\nThis is a tracking issue for adding abstract namespace support for Unix domain sockets on Linux.\r\n\r\nTraditionally, Unix domain sockets (UDS) use a file to coordinate socket binding and connecting. On Linux, though, a specific extension exists to allow domain sockets to be created from a namespace which does not use the filesystem. With these changes, we extend Rust's UDS support to create sockets directly from a `SocketAddr` which can be itself used to create an abstract namespace.\r\n\r\n### More information\r\n\r\nPrevious discussion: #42048\r\nLinux man page: [unix(7)](https://man7.org/linux/man-pages/man7/unix.7.html)\r\n\r\n\r\n### Public API\r\n\r\n#### Non-platform specific additions\r\n\r\n`UnixListener::bind_addr(&SocketAddr) -> Result<UnixListener>`\r\n\r\n`UnixStream::connect_addr(&SocketAddr) -> Result<()>`\r\n\r\n`UnixDatagram::bind_addr(&SocketAddr) -> Result<UnixDatagram>`\r\n\r\n`UnixDatagram::connect_addr(&SocketAddr) -> Result<()>`\r\n\r\n`UnixDatagram::send_to_addr(&self, &[u8], &SocketAddr) -> Result<usize>`\r\n\r\n#### Platform-specific (Linux) additions\r\n\r\n`SocketAddrExt::from_abstract_name(&[u8]) -> Result<SocketAddr>`\r\n\r\n`SockerAddrExt::as_abstract_name(&self) -> Option<&[u8]>`\r\n\r\n#### Example \r\n\r\n```rust\r\n#![feature(unix_socket_abstract)]\r\nuse std::os::unix::net::{UnixListener, SocketAddr};\r\nuse std::os::linux::net::SocketAddrExt;\r\n\r\nfn main() -> std::io::Result<()> {\r\n    let addr = SocketAddr::from_abstract_namespace(b\"namespace\")?; // Linux only\r\n    let listener = match UnixListener::bind_addr(&addr) {\r\n        Ok(sock) => sock,\r\n        Err(err) => {\r\n            println!(\"Couldn't bind: {:?}\", err);\r\n            return Err(err);\r\n        }\r\n    };\r\n    Ok(())\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] Implementation: #85379\r\n- [x] Rework to use an extension trait: https://github.com/rust-lang/rust/pull/101967\r\n- [ ] Final commenting period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final commenting period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncommenting period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- None yet.\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85410/reactions", "total_count": 12, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 8, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85410/timeline", "performed_via_github_app": null, "state_reason": "completed"}