{"url": "https://api.github.com/repos/rust-lang/rust/issues/85213", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85213/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85213/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85213/events", "html_url": "https://github.com/rust-lang/rust/issues/85213", "id": 889659299, "node_id": "MDU6SXNzdWU4ODk2NTkyOTk=", "number": 85213, "title": "ICE: instrument-coverage on generator-storage-dead-unwind.rs", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-05-12T05:39:45Z", "updated_at": "2021-06-01T17:36:24Z", "closed_at": "2021-06-01T17:36:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\ncode from `./src/test/mir-opt/generator-storage-dead-unwind.rs`\r\n```Rust\r\n// ignore-wasm32-bare compiled with panic=abort by default\r\n\r\n// Test that we generate StorageDead on unwind paths for generators.\r\n//\r\n// Basic block and local names can safely change, but the StorageDead statements\r\n// should not go away.\r\n\r\n#![feature(generators, generator_trait)]\r\n\r\nstruct Foo(i32);\r\n\r\nimpl Drop for Foo {\r\n    fn drop(&mut self) {}\r\n}\r\n\r\nstruct Bar(i32);\r\n\r\nfn take<T>(_x: T) {}\r\n\r\n// EMIT_MIR generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir\r\nfn main() {\r\n    let _gen = || {\r\n        let a = Foo(5);\r\n        let b = Bar(6);\r\n        yield;\r\n        take(a);\r\n        take(b);\r\n    };\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.54.0-nightly (79e50bf77 2021-05-10)\r\nbinary: rustc\r\ncommit-hash: 79e50bf77928f374921a6bcafee3fcff1915f062\r\ncommit-date: 2021-05-10\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.54.0-nightly\r\nLLVM version: 12.0.1\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'No counters provided the source_hash for used function: Instance { def: DropGlue(DefId(2:2347 ~ core[ec89]::ptr::drop_in_place), Some([generator@./src/test/mir-opt/generator-storage-dead-unwind.rs:22:16: 28:6 {Foo, Bar, ()}])), substs: [[generator@./src/test/mir-opt/generator-storage-dead-unwind.rs:22:16: 28:6 {Foo, Bar, ()}]] }', compiler/rustc_codegen_ssa/src/coverageinfo/map.rs:147:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.54.0-nightly (79e50bf77 2021-05-10) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -Z instrument-coverage\r\n\r\nquery stack during panic:\r\nend of query stack\r\n```\r\n`RUST_BACKTRACE=full rustc ./src/test/mir-opt/generator-storage-dead-unwind.rs  -Zinstrument-coverage `\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'No counters provided the source_hash for used function: Instance { def: DropGlue(DefId(2:2347 ~ core[ec89]::ptr::drop_in_place), Some([generator@./src/test/mir-opt/generator-storage-dead-unwind.rs:22:16: 28:6 {Foo, Bar, ()}])), substs: [[generator@./src/test/mir-opt/generator-storage-dead-unwind.rs:22:16: 28:6 {Foo, Bar, ()}]] }', compiler/rustc_codegen_ssa/src/coverageinfo/map.rs:147:9\r\nstack backtrace:\r\n   0:     0x7f6b212fe2f0 - std::backtrace_rs::backtrace::libunwind::trace::hdcf4f90f85129e83\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/../../backtrace/src/backtrace/libunwind.rs:90:5\r\n   1:     0x7f6b212fe2f0 - std::backtrace_rs::backtrace::trace_unsynchronized::h2669e30cb82f6732\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\r\n   2:     0x7f6b212fe2f0 - std::sys_common::backtrace::_print_fmt::hfbda19e17f6db318\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/sys_common/backtrace.rs:67:5\r\n   3:     0x7f6b212fe2f0 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h1a8751bf59281272\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/sys_common/backtrace.rs:46:22\r\n   4:     0x7f6b2136c6ef - core::fmt::write::h7aa6cd0067dca82a\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/core/src/fmt/mod.rs:1094:17\r\n   5:     0x7f6b212efc05 - std::io::Write::write_fmt::hd7dd3a1df9b6befb\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/io/mod.rs:1584:15\r\n   6:     0x7f6b2130201b - std::sys_common::backtrace::_print::h551e9ec8a9fa8106\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/sys_common/backtrace.rs:49:5\r\n   7:     0x7f6b2130201b - std::sys_common::backtrace::print::ha4b1c5e95fa040b3\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/sys_common/backtrace.rs:36:9\r\n   8:     0x7f6b2130201b - std::panicking::default_hook::{{closure}}::h0b34c9ab7fb9f857\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/panicking.rs:208:50\r\n   9:     0x7f6b21301afd - std::panicking::default_hook::h3067e8318decd17a\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/panicking.rs:225:9\r\n  10:     0x7f6b21ac7aed - rustc_driver::report_ice::hfc42315e68be674c\r\n  11:     0x7f6b21302730 - std::panicking::rust_panic_with_hook::h81b8facc50f34daa\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/panicking.rs:595:17\r\n  12:     0x7f6b21302307 - std::panicking::begin_panic_handler::{{closure}}::ha376ab85d95a000e\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/panicking.rs:497:13\r\n  13:     0x7f6b212fe7ac - std::sys_common::backtrace::__rust_end_short_backtrace::h6795c8afdd1a77e6\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/sys_common/backtrace.rs:141:18\r\n  14:     0x7f6b21302269 - rust_begin_unwind\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/panicking.rs:493:5\r\n  15:     0x7f6b212cb23b - std::panicking::begin_panic_fmt::hf43a0025042538e2\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/panicking.rs:435:5\r\n  16:     0x7f6b22538450 - rustc_codegen_ssa::coverageinfo::map::FunctionCoverage::get_expressions_and_counter_regions::h2133bd5453e9e69b\r\n  17:     0x7f6b21beded5 - rustc_codegen_llvm::coverageinfo::mapgen::finalize::hc772659458050421\r\n  18:     0x7f6b22bb92cf - rustc_codegen_llvm::base::compile_codegen_unit::module_codegen::h4d829582356e3b8f\r\n  19:     0x7f6b23649dba - rustc_query_system::dep_graph::graph::DepGraph<K>::with_task::h63e00bf93ea2f024\r\n  20:     0x7f6b23666d32 - rustc_codegen_llvm::base::compile_codegen_unit::ha9dfc44b3624cfa3\r\n  21:     0x7f6b23646077 - rustc_codegen_ssa::base::codegen_crate::h66789e9899448d40\r\n  22:     0x7f6b23644b86 - <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate::h0ee8708217e97614\r\n  23:     0x7f6b235cd2cb - rustc_interface::passes::QueryContext::enter::h6f79efed27e7b642\r\n  24:     0x7f6b235d6db6 - rustc_interface::queries::Queries::ongoing_codegen::hfde280ae33444077\r\n  25:     0x7f6b23594b93 - rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter::h338ef067f4e62908\r\n  26:     0x7f6b23593b64 - rustc_span::with_source_map::ha9bd2637219a67ee\r\n  27:     0x7f6b23595b21 - rustc_interface::interface::create_compiler_and_run::hdbdae17b1d4b741f\r\n  28:     0x7f6b235af3e8 - scoped_tls::ScopedKey<T>::set::h8b11ff7379d3a1e7\r\n  29:     0x7f6b235af8eb - std::sys_common::backtrace::__rust_begin_short_backtrace::heda65a548bd4e2a1\r\n  30:     0x7f6b235b3225 - core::ops::function::FnOnce::call_once{{vtable.shim}}::h05ddc76e238daac0\r\n  31:     0x7f6b2130e587 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h3aa31cb6360b59d9\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/alloc/src/boxed.rs:1575:9\r\n  32:     0x7f6b2130e587 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h7719d3c7c5841461\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/alloc/src/boxed.rs:1575:9\r\n  33:     0x7f6b2130e587 - std::sys::unix::thread::Thread::new::thread_start::hfbe13ead469fd0bc\r\n                               at /rustc/79e50bf77928f374921a6bcafee3fcff1915f062/library/std/src/sys/unix/thread.rs:71:17\r\n  34:     0x7f6b21220299 - start_thread\r\n  35:     0x7f6b21135053 - clone\r\n  36:                0x0 - <unknown>\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.54.0-nightly (79e50bf77 2021-05-10) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -Z instrument-coverage\r\n\r\nquery stack during panic:\r\nend of query stack\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85213/timeline", "performed_via_github_app": null, "state_reason": "completed"}