{"url": "https://api.github.com/repos/rust-lang/rust/issues/32838", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32838/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32838/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32838/events", "html_url": "https://github.com/rust-lang/rust/issues/32838", "id": 147037803, "node_id": "MDU6SXNzdWUxNDcwMzc4MDM=", "number": 32838, "title": "Allocator traits and std::heap", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89436934, "node_id": "MDU6TGFiZWw4OTQzNjkzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-approved", "name": "B-RFC-approved", "color": "d304cb", "default": false, "description": "Approved by a merged RFC but not yet implemented."}, {"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}, {"id": 3537250192, "node_id": "LA_kwDOAAsO6M7S1ieQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-needs-summary", "name": "S-tracking-needs-summary", "color": "4682b4", "default": false, "description": "It's hard to tell what's been done and what hasn't! Someone should do some investigation."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 440, "created_at": "2016-04-08T20:56:09Z", "updated_at": "2023-06-16T14:01:56Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\ud83d\udce2  **This feature has a dedicated working group**, please direct comments and concerns to [the working group's repo](https://github.com/rust-lang/wg-allocators).\r\n\r\nThe remainder of this post is no longer an accurate summary of the current state; see that dedicated working group instead.\r\n\r\n<details>\r\n<summary>Old content</summary>\r\n\r\nOriginal Post:\r\n\r\n-----\r\n\r\nFCP proposal: https://github.com/rust-lang/rust/issues/32838#issuecomment-336957415\r\nFCP checkboxes: https://github.com/rust-lang/rust/issues/32838#issuecomment-336980230\r\n\r\n---\r\n\r\nTracking issue for rust-lang/rfcs#1398 and the `std::heap` module.\r\n\r\n- [x] land `struct Layout`, `trait Allocator`, and default implementations in `alloc` crate (https://github.com/rust-lang/rust/pull/42313)\r\n- [x] decide where parts should live (e.g. default impls has dependency on `alloc` crate, but `Layout`/`Allocator` _could_ be in `libcore`...) (https://github.com/rust-lang/rust/pull/42313)\r\n- [ ] fixme from source code: audit default implementations (in `Layout` for overflow errors, (potentially switching to overflowing_add and overflowing_mul as necessary).\r\n- [x] decide if `realloc_in_place` should be replaced with `grow_in_place` and `shrink_in_place` ([comment](https://github.com/rust-lang/rust/issues/32838#issuecomment-208141759)) (https://github.com/rust-lang/rust/pull/42313)\r\n- [ ] review arguments for/against associated error type (see subthread [here](https://github.com/rust-lang/rfcs/pull/1398#issuecomment-204561446))\r\n- [ ] determine what the requirements are on the alignment provided to `fn dealloc`. (See discussion on [allocator rfc](https://github.com/rust-lang/rfcs/pull/1398#issuecomment-198584430) and [global allocator rfc](https://github.com/rust-lang/rfcs/pull/1974#issuecomment-302789872) and  [trait `Alloc` PR](https://github.com/rust-lang/rust/pull/42313#issuecomment-306202489).)\r\n  * Is it required to deallocate with the exact `align` that you allocate with? [Concerns have been raised](https://github.com/rust-lang/rfcs/pull/1974#issuecomment-302789872) that allocators like jemalloc don't require this, and it's difficult to envision an allocator that does require this. ([more discussion](https://github.com/rust-lang/rfcs/pull/1398#issuecomment-198584430)). @ruuda and @rkruppe look like they've got the most thoughts so far on this.\r\n- [ ] should `AllocErr` be `Error` instead? ([comment](https://github.com/rust-lang/rust/pull/42313#discussion_r122580471))\r\n- [x] Is it required to deallocate with the *exact* size that you allocate with? With the `usable_size` business we may wish to allow, for example, that you if you allocate with `(size, align)` you must deallocate with a size somewhere in the range of `size...usable_size(size, align)`. It appears that jemalloc is totally ok with this (doesn't require you to deallocate with a *precise* `size` you allocate with) and this would also allow `Vec` to naturally take advantage of the excess capacity jemalloc gives it when it does an allocation. (although actually doing this is also somewhat orthogonal to this decision, we're just empowering `Vec`). So far @Gankro has most of the thoughts on this. (@alexcrichton believes this was settled in https://github.com/rust-lang/rust/pull/42313 due to the definition of \"fits\")\r\n- [ ] similar to previous question: Is it required to deallocate with the *exact* alignment that you allocated with? (See comment from [5 June 2017](https://github.com/rust-lang/rust/pull/42313#issuecomment-306202489))\r\n- [x] OSX/`alloc_system` is buggy on *huge* alignments (e.g.  an align of `1 << 32`) https://github.com/rust-lang/rust/issues/30170 #43217\r\n- [ ] should `Layout` provide a `fn stride(&self)` method? (See also https://github.com/rust-lang/rfcs/issues/1397, https://github.com/rust-lang/rust/issues/17027 )\r\n- [x] `Allocator::owns` as a method? https://github.com/rust-lang/rust/issues/44302\r\n\r\nState of `std::heap` after https://github.com/rust-lang/rust/pull/42313:\r\n\r\n```rust\r\npub struct Layout { /* ... */ }\r\n\r\nimpl Layout {\r\n    pub fn new<T>() -> Self;\r\n    pub fn for_value<T: ?Sized>(t: &T) -> Self;\r\n    pub fn array<T>(n: usize) -> Option<Self>;\r\n    pub fn from_size_align(size: usize, align: usize) -> Option<Layout>;\r\n    pub unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Layout;\r\n\r\n    pub fn size(&self) -> usize;\r\n    pub fn align(&self) -> usize;\r\n    pub fn align_to(&self, align: usize) -> Self;\r\n    pub fn padding_needed_for(&self, align: usize) -> usize;\r\n    pub fn repeat(&self, n: usize) -> Option<(Self, usize)>;\r\n    pub fn extend(&self, next: Self) -> Option<(Self, usize)>;\r\n    pub fn repeat_packed(&self, n: usize) -> Option<Self>;\r\n    pub fn extend_packed(&self, next: Self) -> Option<(Self, usize)>;\r\n}\r\n\r\npub enum AllocErr {\r\n    Exhausted { request: Layout },\r\n    Unsupported { details: &'static str },\r\n}\r\n\r\nimpl AllocErr {\r\n    pub fn invalid_input(details: &'static str) -> Self;\r\n    pub fn is_memory_exhausted(&self) -> bool;\r\n    pub fn is_request_unsupported(&self) -> bool;\r\n    pub fn description(&self) -> &str;\r\n}\r\n\r\npub struct CannotReallocInPlace;\r\n\r\npub struct Excess(pub *mut u8, pub usize);\r\n\r\npub unsafe trait Alloc {\r\n    // required\r\n    unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr>;\r\n    unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout);\r\n\r\n    // provided\r\n    fn oom(&mut self, _: AllocErr) -> !;\r\n    fn usable_size(&self, layout: &Layout) -> (usize, usize);\r\n    unsafe fn realloc(&mut self,\r\n                      ptr: *mut u8,\r\n                      layout: Layout,\r\n                      new_layout: Layout) -> Result<*mut u8, AllocErr>;\r\n    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr>;\r\n    unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr>;\r\n    unsafe fn realloc_excess(&mut self,\r\n                             ptr: *mut u8,\r\n                             layout: Layout,\r\n                             new_layout: Layout) -> Result<Excess, AllocErr>;\r\n    unsafe fn grow_in_place(&mut self,\r\n                            ptr: *mut u8,\r\n                            layout: Layout,\r\n                            new_layout: Layout) -> Result<(), CannotReallocInPlace>;\r\n    unsafe fn shrink_in_place(&mut self,\r\n                              ptr: *mut u8,\r\n                              layout: Layout,\r\n                              new_layout: Layout) -> Result<(), CannotReallocInPlace>;\r\n\r\n    // convenience\r\n    fn alloc_one<T>(&mut self) -> Result<Unique<T>, AllocErr>\r\n        where Self: Sized;\r\n    unsafe fn dealloc_one<T>(&mut self, ptr: Unique<T>)\r\n        where Self: Sized;\r\n    fn alloc_array<T>(&mut self, n: usize) -> Result<Unique<T>, AllocErr>\r\n        where Self: Sized;\r\n    unsafe fn realloc_array<T>(&mut self,\r\n                               ptr: Unique<T>,\r\n                               n_old: usize,\r\n                               n_new: usize) -> Result<Unique<T>, AllocErr>\r\n        where Self: Sized;\r\n    unsafe fn dealloc_array<T>(&mut self, ptr: Unique<T>, n: usize) -> Result<(), AllocErr>\r\n        where Self: Sized;\r\n}\r\n\r\n/// The global default allocator\r\npub struct Heap;\r\n\r\nimpl Alloc for Heap {\r\n    // ...\r\n}\r\n\r\nimpl<'a> Alloc for &'a Heap {\r\n    // ...\r\n}\r\n\r\n/// The \"system\" allocator\r\npub struct System;\r\n\r\nimpl Alloc for System {\r\n    // ...\r\n}\r\n\r\nimpl<'a> Alloc for &'a System {\r\n    // ...\r\n}\r\n```\r\n</details>", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32838/reactions", "total_count": 131, "+1": 74, "-1": 0, "laugh": 1, "hooray": 22, "confused": 0, "heart": 25, "rocket": 4, "eyes": 5}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32838/timeline", "performed_via_github_app": null, "state_reason": null}