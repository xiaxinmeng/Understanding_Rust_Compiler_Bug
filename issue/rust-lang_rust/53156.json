{"url": "https://api.github.com/repos/rust-lang/rust/issues/53156", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53156/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53156/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53156/events", "html_url": "https://github.com/rust-lang/rust/issues/53156", "id": 348309905, "node_id": "MDU6SXNzdWUzNDgzMDk5MDU=", "number": 53156, "title": "Unused trait bound with lifetime causes compile error", "user": {"login": "lo48576", "id": 1246590, "node_id": "MDQ6VXNlcjEyNDY1OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1246590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lo48576", "html_url": "https://github.com/lo48576", "followers_url": "https://api.github.com/users/lo48576/followers", "following_url": "https://api.github.com/users/lo48576/following{/other_user}", "gists_url": "https://api.github.com/users/lo48576/gists{/gist_id}", "starred_url": "https://api.github.com/users/lo48576/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lo48576/subscriptions", "organizations_url": "https://api.github.com/users/lo48576/orgs", "repos_url": "https://api.github.com/users/lo48576/repos", "events_url": "https://api.github.com/users/lo48576/events{/privacy}", "received_events_url": "https://api.github.com/users/lo48576/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-07T12:58:34Z", "updated_at": "2018-08-07T13:19:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Summary\r\n\r\n### What happens\r\n* Unused trait bound causes compile error.\r\n    + In non-(3c) case, `Into::<Arc<B>>::into()` is completely unused, but `&'a B: Into<Arc<B>>` causes compile error.\r\n    + I think this may be a compiler issue.\r\n* With either of these small modifications, they successfully compile.\r\n    + Changing `&a B: Into<Arc<B>>` to `for<'b> &'b B: Into<Arc<B>>`.\r\n    + Changing `&self` to `&'a self` (or `wrap: &OwnedWrap<B>` to `wrap: &'a OwnedWrap<B>`).\r\n\r\n### Expected behavior\r\n* Unused trait bound does not cause compile error.\r\n* With `where B: 'a + ToOwned + ?Sized, &'a B: Into<Arc<B>>`,\r\n  `let b: &B = owned.borrow();` successfully compiles.\r\n    + I think `let b: &B = owned.borrow();` does not require `b` to outlive lifetime of `&self` nor `'a`,\r\n      so it should not be error.\r\n    + `owned.borrow().into()` might be error though, but I think it is OK because `owned.borrow()` does not outlive `'a` but `Into<Arc<B>>` requires `'a &B`.\r\n\r\n## Meta\r\n* Compiler version: 1.28.0 (stable)\r\n\r\n## Code to reproduce\r\n\r\n### Simplified cases 1: in impl\r\nBasic code: https://play.rust-lang.org/?gist=40cb0fa71f3bd32091fbc3e144db2de1&version=stable&mode=debug&edition=2015\r\n\r\n* error\r\n    + [(1a-2a-3a)](https://play.rust-lang.org/?gist=40cb0fa71f3bd32091fbc3e144db2de1&version=stable&mode=debug&edition=2015)\r\n    + [(1a-2a-3c)](https://play.rust-lang.org/?gist=a84952cfc70e90b715c2fd988c289fe5&version=stable&mode=debug&edition=2015)\r\n* success\r\n    + [(1a-2b-3a)](https://play.rust-lang.org/?gist=8580e01db6f3376f46b091ba91e23334&version=stable&mode=debug&edition=2015)\r\n    + [(1a-2b-3b)](https://play.rust-lang.org/?gist=f0d26a7b0552e3409dc122d82adb37d7&version=stable&mode=debug&edition=2015)\r\n    + [(1a-2b-3c)](https://play.rust-lang.org/?gist=4a26d538074cb7f5d8b174718be5120d&version=stable&mode=debug&edition=2015)\r\n    + [(1b-2a-3a)](https://play.rust-lang.org/?gist=478d6a6871decf303d3a3ddc6d71a920&version=stable&mode=debug&edition=2015)\r\n    + [(1b-2a-3b)](https://play.rust-lang.org/?gist=ef3e72d0063a547e8f37a58f400c588a&version=stable&mode=debug&edition=2015)\r\n    + [(1b-2a-3c)](https://play.rust-lang.org/?gist=153ec65bf83f5a9b64f17d3f59eace95&version=stable&mode=debug&edition=2015)\r\n    + [(1b-2b-3a)](https://play.rust-lang.org/?gist=99f3bfc45e08f14bd9a48053a9a0329b&version=stable&mode=debug&edition=2015)\r\n    + [(1b-2b-3b)](https://play.rust-lang.org/?gist=88f575113591395593c1974378a4e2da&version=stable&mode=debug&edition=2015)\r\n    + [(1b-2b-3c)](https://play.rust-lang.org/?gist=d341d369cbd70b4003c28b16cb5b16fe&version=stable&mode=debug&edition=2015)\r\n* intermediate\r\n    + [(1a-2a-3b)](https://play.rust-lang.org/?gist=49512f2650dab965c3cb808c5f5adc5b&version=stable&mode=debug&edition=2015)\r\n        - Compiles without NLL, but fails to compile with NLL.\r\n        - I filed the difference as another issue. See #53151.\r\n\r\n```rust\r\n//#![feature(nll)]\r\n\r\nuse std::borrow::Borrow;\r\nuse std::sync::Arc;\r\n\r\nstruct OwnedWrap<B: ToOwned + ?Sized>(<B as ToOwned>::Owned);\r\n\r\nimpl<'a, B> OwnedWrap<B>\r\nwhere\r\n    B: 'a + ToOwned + ?Sized,\r\n    &'a B: Into<Arc<B>>, // (1a) does not compile.\r\n    //for<'b> &'b B: Into<Arc<B>>, // (1b) successfully compiles.\r\n{\r\n    pub fn to_arc(&self) -> Arc<B> { // (2a) does not compile.\r\n    //pub fn to_shared(&'a self) -> Arc<B> { // (2b) `successfully compiles.\r\n        let OwnedWrap(ref owned) = *self;\r\n        let b: &B = owned.borrow(); // (3a) does not compile.\r\n        //let _: &B = owned.borrow(); // (3b) error with NLL, compiles without NLL.\r\n\r\n        //owned.borrow().into() // (3c) What I want to do.\r\n        unimplemented!() // comment in when using 3c.\r\n    }\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nError for (1a-2a-3a) without NLL:\r\n```\r\n   Compiling playground v0.0.1 (file:///playground)\r\nerror[E0495]: cannot infer an appropriate lifetime for pattern due to conflicting requirements\r\n  --> src/main.rs:16:23\r\n   |\r\n16 |         let OwnedWrap(ref owned) = *self;\r\n   |                       ^^^^^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 14:5...\r\n  --> src/main.rs:14:5\r\n   |\r\n14 | /     pub fn to_arc(&self) -> Arc<B> { // (2a) does not compile.\r\n15 | |     //pub fn to_shared(&'a self) -> Arc<B> { // (2b) `successfully compiles.\r\n16 | |         let OwnedWrap(ref owned) = *self;\r\n17 | |         let b: &B = owned.borrow(); // (3a) does not compile.\r\n...  |\r\n21 | |         unimplemented!() // comment in when using 3c.\r\n22 | |     }\r\n   | |_____^\r\nnote: ...so that reference does not outlive borrowed content\r\n  --> src/main.rs:16:23\r\n   |\r\n16 |         let OwnedWrap(ref owned) = *self;\r\n   |                       ^^^^^^^^^\r\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 8:1...\r\n  --> src/main.rs:8:1\r\n   |\r\n8  | / impl<'a, B> OwnedWrap<B>\r\n9  | | where\r\n10 | |     B: 'a + ToOwned + ?Sized,\r\n11 | |     &'a B: Into<Arc<B>>, // (1a) does not compile.\r\n...  |\r\n22 | |     }\r\n23 | | }\r\n   | |_^\r\n   = note: ...so that the types are compatible:\r\n           expected std::marker::Sized\r\n              found std::marker::Sized\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0495`.\r\nerror: Could not compile `playground`.\r\n```\r\n\r\nError for (1a2a-3a) with NLL:\r\n```\r\n   Compiling playground v0.0.1 (file:///playground)\r\nwarning: unused variable: `b`\r\n  --> src/main.rs:17:13\r\n   |\r\n17 |         let b: &B = owned.borrow(); // (3a) does not compile.\r\n   |             ^ help: consider using `_b` instead\r\n   |\r\n   = note: #[warn(unused_variables)] on by default\r\n\r\nerror: unsatisfied lifetime constraints\r\n  --> src/main.rs:17:21\r\n   |\r\n8  | impl<'a, B> OwnedWrap<B>\r\n   |      -- lifetime `'a` defined here\r\n...\r\n14 |     pub fn to_arc(&self) -> Arc<B> { // (2a) does not compile.\r\n   |                   - let's call the lifetime of this reference `'1`\r\n...\r\n17 |         let b: &B = owned.borrow(); // (3a) does not compile.\r\n   |                     ^^^^^^^^^^^^^^ requires that `'1` must outlive `'a`\r\n\r\nerror: aborting due to previous error\r\n\r\nerror: Could not compile `playground`.\r\n```\r\n\r\n### Simplified cases 2: toplevel fn\r\nBasic code: https://play.rust-lang.org/?gist=649f1a00835b68d4b51ef4a78a5ac857&version=stable&mode=debug&edition=2015\r\n\r\n* error\r\n    + [(1a-2a-3a)](https://play.rust-lang.org/?gist=649f1a00835b68d4b51ef4a78a5ac857&version=stable&mode=debug&edition=2015)\r\n    + [(1a-2a-3c)](https://play.rust-lang.org/?gist=b78e9efa43378b31516f24d4a086c019&version=stable&mode=debug&edition=2015)\r\n* success\r\n    + [(1a-2b-3a)](https://play.rust-lang.org/?gist=3724d4a9dab3766058205d4d02c90551&version=stable&mode=debug&edition=2015)\r\n    + [(1a-2b-3b)](https://play.rust-lang.org/?gist=c5626d3ce41dd45ee9a054fad4742a8f&version=stable&mode=debug&edition=2015)\r\n    + [(1a-2b-3c)](https://play.rust-lang.org/?gist=9a29cee74978f19db85c47118d6923b5&version=stable&mode=debug&edition=2015)\r\n    + [(1b-2a-3a)](https://play.rust-lang.org/?gist=836f203fd40be5479ee88c5b3dda01b2&version=stable&mode=debug&edition=2015)\r\n    + [(1b-2a-3b)](https://play.rust-lang.org/?gist=a5b8399be501b3997a5374e263baba61&version=stable&mode=debug&edition=2015)\r\n    + [(1b-2a-3c)](https://play.rust-lang.org/?gist=24f32e715adc916c8e48128418e63225&version=stable&mode=debug&edition=2015)\r\n    + [(1b-2b-3a)](https://play.rust-lang.org/?gist=608735af16df8b30cde89797db546fd5&version=stable&mode=debug&edition=2015)\r\n    + [(1b-2b-3b)](https://play.rust-lang.org/?gist=51168e483c7a5fe6fe06db9ccbbc4a60&version=stable&mode=debug&edition=2015)\r\n    + [(1b-2b-3c)](https://play.rust-lang.org/?gist=e839d72c8906e64c13e5e3a2125b62e4&version=stable&mode=debug&edition=2015)\r\n* intermediate\r\n    + [(1a-2a-3b)](https://play.rust-lang.org/?gist=0ba71d2ee8ab9306953d3ebe02d9d11d&version=stable&mode=debug&edition=2015)\r\n        - Compiles without NLL, but fails to compile with NLL.\r\n        - I filed the difference as another issue. See #53151.\r\n\r\n```rust\r\n//#![feature(nll)]\r\n\r\nuse std::borrow::Borrow;\r\nuse std::sync::Arc;\r\n\r\nstruct OwnedWrap<B: ToOwned + ?Sized>(<B as ToOwned>::Owned);\r\n\r\nfn to_arc<'a, B>(wrap: &OwnedWrap<B>) -> Arc<B> // (2a) does not compile.\r\n//fn to_arc<'a, B>(wrap: &'a OwnedWrap<B>) -> Arc<B> // (2b) successfully compiles.\r\nwhere\r\n    B: 'a + ToOwned + ?Sized,\r\n    &'a B: Into<Arc<B>>, // (1a) does not compile.\r\n    //for<'b> &'b B: Into<Arc<B>>, // (1b) successfully compiles.\r\n{\r\n        let OwnedWrap(ref owned) = wrap;\r\n        let b: &B = owned.borrow(); // (3a) does not compile.\r\n        //let _: &B = owned.borrow(); // (3b) error with NLL, compiles without NLL.\r\n\r\n        //owned.borrow().into() // (3c) What I want to do.\r\n        unimplemented!() // comment out when using 3c.\r\n\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\n\r\n### FYI: What I've wanted to do\r\nThis code is more meaningful than simplified cases.\r\nhttps://play.rust-lang.org/?gist=2b304fda2af1102dff60b72b5681a945&version=nightly&mode=debug&edition=2015\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53156/timeline", "performed_via_github_app": null, "state_reason": null}