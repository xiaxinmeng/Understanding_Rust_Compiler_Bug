{"url": "https://api.github.com/repos/rust-lang/rust/issues/109236", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109236/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109236/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109236/events", "html_url": "https://github.com/rust-lang/rust/issues/109236", "id": 1628375835, "node_id": "I_kwDOAAsO6M5hDwsb", "number": 109236, "title": "`warn(semicolon_in_expressions_from_macros)` interacts poorly with macros invalid in expression context", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1659943986, "node_id": "MDU6TGFiZWwxNjU5OTQzOTg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-verbose", "name": "D-verbose", "color": "c9f7a3", "default": false, "description": "Too much output caused by a single piece of incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-16T22:18:54Z", "updated_at": "2023-03-30T13:36:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Code\r\n\r\n```Rust\r\n/*\r\n[package]\r\nedition = \"2021\"\r\n*/\r\n\r\nmacro_rules! statement {\r\n    () => {\r\n        ();\r\n        let _ = ();\r\n    };\r\n}\r\n\r\nfn main() {\r\n    let _ = statement!();\r\n}\r\n```\r\n\r\n\r\n### Current output\r\n\r\n```Shell\r\nerror: macro expansion ignores token `let` and any following\r\n  --> src\\main.rs:LL:CC\r\n   |\r\nLL |         let _ = ();\r\n   |         ^^^\r\n...\r\nLL |     let _ = statement!();\r\n   |             ------------ caused by the macro expansion here\r\n   |\r\n   = note: the usage of `statement!` is likely invalid in expression context\r\n\r\nwarning: trailing semicolon in macro used in expression position\r\n  --> src\\main.rs:LL:CC\r\n   |\r\nLL |         ();\r\n   |           ^\r\n...\r\nLL |     let _ = statement!();\r\n   |             ------------ in this macro invocation\r\n   |\r\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\r\n   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\r\n   = note: this warning originates in the macro `statement` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n```\r\n\r\n\r\n### Desired output\r\n\r\n```Shell\r\nerror: macro invalid in expression context\r\n  --> src\\main.rs:LL:CC\r\n   |\r\nLL |     let _ = statement!();\r\n   |             ------------ expression position macro expansion here\r\n   |\r\n  ::: src\\main.rs:LL:CC\r\n   |\r\nLL |         ();\r\n   |           - macro expands to a statement terminated here...\r\nLL |         let _ = ();\r\n   |         --- ... and continues producing further tokens\r\n   |\r\n   = note: macros expanding to statement(s) can only be used in statement position\r\n   = help: if the macro expansion should be an expression, try wrapping it in a block\r\n   |\r\nLL |     () => {{\r\n   |            +\r\n...\r\nLL |     }};\r\n   |      +\r\n```\r\n\r\n\r\n### Rationale and extra context\r\n\r\n(example desired are probably a bit overly verbose; I erred on the side of suggesting giving more information)\r\n\r\n[[rustexplorer]](https://www.rustexplorer.com/b#%2F*%0A%5Bpackage%5D%0Aedition%20%3D%20%222021%22%0A*%2F%0A%0Amacro_rules!%20statement%20%7B%0A%20%20%20%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20()%3B%0A%20%20%20%20%20%20%20%20let%20_%20%3D%20()%3B%0A%20%20%20%20%7D%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20_%20%3D%20statement!()%3B%0A%7D%0A)\r\n\r\n### Other cases\r\n\r\nInterestingly enough, the warning seems to only be emitted when the macro definition is local; just the error is shown if the macro is defined in an upstream crate. If we're rewording the local error, though, the external one should be reworded similarly, e.g.\r\n\r\n```Shell\r\nerror: macro invalid in expression context\r\n  --> src\\main.rs:LL:CC\r\n   |\r\nLL |     let _ = statement!();\r\n   |             ------------ expression position macro expansion here\r\n   |\r\n   = note: macro expands to one or more statements\r\n```\r\n\r\nFor the local single statement case, presented as an error:\r\n\r\n```Shell\r\nerror: macro invalid in expression context\r\n  --> src\\main.rs:LL:CC\r\n   |\r\nLL |     let _ = statement!();\r\n   |             ------------ expression position macro expansion here\r\n   |\r\n  ::: src\\main.rs:LL:CC\r\n   |\r\nLL |         ();\r\n   |           ^ this semicolon makes the expansion a statement\r\n   |\r\n   = note: macros expanding to statement(s) can only be used in statement position\r\n   = help: if the macro expansion should be an expression, remove the semicolon\r\n   |\r\nLL |         ()\r\n   |           ~\r\n   |\r\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\r\n   = note: `#[deny(semicolon_in_expressions_from_macros)]` on by default\r\n```\r\n\r\nNote also that the external single statement macro case *does not currently warn*. Reworded to fit this pattern,\r\n\r\n```Shell\r\nwarning: macro invalid in expression context\r\n  --> src\\main.rs:LL:CC\r\n   |\r\nLL |     let _ = statement!();\r\n   |             ------------ expression position macro expansion here\r\n   |\r\n   = note: macro expands to a single semicolon-terminated expression statement\r\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\r\n   = note: `#[warn(semicolon_in_expressions_from_external_macros)]` on by default\r\n\r\nerror: macro invalid in expression context\r\n  --> src\\main.rs:LL:CC\r\n   |\r\nLL |     let _ = statement!();\r\n   |             ------------ expression position macro expansion here\r\n   |\r\n   = note: macro expands to one or more statements\r\n   = note: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\r\n   = note: `#[forbid(semicolon_in_expressions_from_external_macros)]` enabled\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\n```\r\n$ rustc -Vv\r\nrustc 1.70.0-nightly (ab654863c 2023-03-15)\r\nbinary: rustc\r\ncommit-hash: ab654863c3d50482f260cf862647f1fe0ff5e010\r\ncommit-date: 2023-03-15\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.70.0-nightly\r\nLLVM version: 15.0.7\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109236/timeline", "performed_via_github_app": null, "state_reason": null}