{"url": "https://api.github.com/repos/rust-lang/rust/issues/44452", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44452/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44452/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44452/events", "html_url": "https://github.com/rust-lang/rust/issues/44452", "id": 256429406, "node_id": "MDU6SXNzdWUyNTY0Mjk0MDY=", "number": 44452, "title": "rustc -C opt-level=3 generates bad assembly code for `Vec` by default", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 29, "created_at": "2017-09-09T10:09:16Z", "updated_at": "2021-02-09T04:39:16Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Compiling the following C++ snippet with `clang++ -O3` and `g++ -O3` ([see here](https://godbolt.org/g/kHYXQ8)):\r\n\r\n```c++\r\n#include <vector>\r\n\r\nunsigned foo() {\r\n  std::vector<unsigned> a;\r\n  a.push_back(314);\r\n  return a[0];\r\n}\r\n```\r\n\r\ngenerates this assembly on x86_64:\r\n\r\n```asm\r\nfoo(): # @foo()\r\n  push rax\r\n  mov edi, 4\r\n  call operator new(unsigned long)\r\n  mov rdi, rax\r\n  call operator delete(void*)\r\n  mov eax, 314\r\n  pop rcx\r\n  ret\r\n```\r\n\r\n(note: clang generates perfect assembly even with [multiple push backs](https://godbolt.org/g/4ucchT), the only thing that seems to trip it is [a reallocation](https://godbolt.org/g/fhrLZm))\r\n\r\nThis snippet compiled with `rustc --C opt-level=3` ([see here](https://godbolt.org/g/5KyzyL)):\r\n\r\n```rust\r\npub fn foo() -> u32 {\r\n  let mut v: Vec<u32> = Vec::new();\r\n  v.push(0);\r\n  v[0]\r\n}\r\n```\r\n\r\ngenerates the following assembly:\r\n\r\n```asm\r\n<alloc::raw_vec::RawVec<T, A>>::double:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        push    r14\r\n        push    rbx\r\n        sub     rsp, 64\r\n        mov     r14, rdi\r\n        mov     rbx, qword ptr [r14 + 8]\r\n        test    rbx, rbx\r\n        je      .LBB0_6\r\n        lea     rsi, [4*rbx]\r\n        lea     rcx, [8*rbx]\r\n        mov     rdi, qword ptr [r14]\r\n        lea     r9, [rbp - 40]\r\n        mov     edx, 4\r\n        mov     r8d, 4\r\n        call    __rust_realloc@PLT\r\n        test    rax, rax\r\n        je      .LBB0_4\r\n        add     rbx, rbx\r\n        jmp     .LBB0_3\r\n.LBB0_6:\r\n        lea     rdx, [rbp - 40]\r\n        mov     edi, 16\r\n        mov     esi, 4\r\n        call    __rust_alloc@PLT\r\n        test    rax, rax\r\n        je      .LBB0_8\r\n        mov     ebx, 4\r\n.LBB0_3:\r\n        mov     qword ptr [r14], rax\r\n        mov     qword ptr [r14 + 8], rbx\r\n        add     rsp, 64\r\n        pop     rbx\r\n        pop     r14\r\n        pop     rbp\r\n        ret\r\n.LBB0_4:\r\n        mov     rax, qword ptr [rbp - 40]\r\n        movups  xmm0, xmmword ptr [rbp - 32]\r\n        movaps  xmmword ptr [rbp - 64], xmm0\r\n        mov     qword ptr [rbp - 40], rax\r\n        movaps  xmm0, xmmword ptr [rbp - 64]\r\n        jmp     .LBB0_5\r\n.LBB0_8:\r\n        movups  xmm0, xmmword ptr [rbp - 32]\r\n        movaps  xmmword ptr [rbp - 64], xmm0\r\n        movaps  xmm0, xmmword ptr [rbp - 64]\r\n        movaps  xmmword ptr [rbp - 80], xmm0\r\n        movaps  xmm0, xmmword ptr [rbp - 80]\r\n.LBB0_5:\r\n        movups  xmmword ptr [rbp - 32], xmm0\r\n        lea     rdi, [rbp - 40]\r\n        call    <alloc::heap::Heap as alloc::allocator::Alloc>::oom\r\ncore::ptr::drop_in_place:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        mov     rsi, qword ptr [rdi + 8]\r\n        test    rsi, rsi\r\n        je      .LBB1_1\r\n        mov     rdi, qword ptr [rdi]\r\n        shl     rsi, 2\r\n        mov     edx, 4\r\n        pop     rbp\r\n        jmp     __rust_dealloc@PLT\r\n.LBB1_1:\r\n        pop     rbp\r\n        ret\r\n<alloc::heap::Heap as alloc::allocator::Alloc>::oom:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        sub     rsp, 32\r\n        mov     rax, qword ptr [rdi + 16]\r\n        mov     qword ptr [rbp - 16], rax\r\n        movups  xmm0, xmmword ptr [rdi]\r\n        movaps  xmmword ptr [rbp - 32], xmm0\r\n        lea     rdi, [rbp - 32]\r\n        call    __rust_oom@PLT\r\n\r\nexample::foo:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        push    rbx\r\n        sub     rsp, 24\r\n        mov     qword ptr [rbp - 32], 4\r\n        xorps   xmm0, xmm0\r\n        movups  xmmword ptr [rbp - 24], xmm0\r\n        lea     rdi, [rbp - 32]\r\n        call    <alloc::raw_vec::RawVec<T, A>>::double\r\n        mov     rdi, qword ptr [rbp - 32]\r\n        mov     rax, qword ptr [rbp - 16]\r\n        mov     dword ptr [rdi + 4*rax], 0\r\n        inc     rax\r\n        mov     qword ptr [rbp - 16], rax\r\n        je      .LBB3_2\r\n        mov     ebx, dword ptr [rdi]\r\n        mov     rsi, qword ptr [rbp - 24]\r\n        test    rsi, rsi\r\n        je      .LBB3_6\r\n        shl     rsi, 2\r\n        mov     edx, 4\r\n        call    __rust_dealloc@PLT\r\n.LBB3_6:\r\n        mov     eax, ebx\r\n        add     rsp, 24\r\n        pop     rbx\r\n        pop     rbp\r\n        ret\r\n.LBB3_2:\r\n        lea     rdi, [rip + panic_bounds_check_loc.2]\r\n        xor     esi, esi\r\n        xor     edx, edx\r\n        call    core::panicking::panic_bounds_check@PLT\r\n        mov     rbx, rax\r\n        lea     rdi, [rbp - 32]\r\n        call    core::ptr::drop_in_place\r\n        mov     rdi, rbx\r\n        call    _Unwind_Resume@PLT\r\nGCC_except_table3:\r\n        .byte   255\r\n        .byte   155\r\n        .asciz  \"\\234\"\r\n        .byte   3\r\n        .byte   26\r\n        .long   .Ltmp29-.Lfunc_begin3\r\n        .long   .Ltmp32-.Ltmp29\r\n        .long   .Ltmp33-.Lfunc_begin3\r\n        .byte   0\r\n        .long   .Ltmp32-.Lfunc_begin3\r\n        .long   .Lfunc_end3-.Ltmp32\r\n        .long   0\r\n        .byte   0\r\nstr.1:\r\n        .ascii  \"/checkout/src/liballoc/vec.rs\"\r\npanic_bounds_check_loc.2:\r\n        .quad   str.1\r\n        .quad   29\r\n        .long   1555\r\n        .long   10\r\nDW.ref.rust_eh_personality:\r\n        .quad   rust_eh_personality\r\n```\r\n\r\nI've tried adding `-lto` and `-C panic=abort` to rustc without much luck. I've also tried replacing `[0]` with `unsafe { *v.get_unchecked(0) }` without any luck. The only thing that makes it generate good assembly is using `Vec::with_capacity(N)` ([see here](https://godbolt.org/g/uBwV5b)):\r\n\r\n```rust\r\npub fn foo() -> u32 {\r\n  let mut v: Vec<u32> = Vec::with_capacity(3);\r\n  v.push(7);\r\n  v.push(4);\r\n  v[1]\r\n}\r\n```\r\n\r\ngenerates\r\n\r\n```asm\r\nexample::foo:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        mov     eax, 4\r\n        pop     rbp\r\n        ret\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44452/reactions", "total_count": 3, "+1": 1, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44452/timeline", "performed_via_github_app": null, "state_reason": null}