{"url": "https://api.github.com/repos/rust-lang/rust/issues/30290", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/30290/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/30290/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/30290/events", "html_url": "https://github.com/rust-lang/rust/issues/30290", "id": 121309187, "node_id": "MDU6SXNzdWUxMjEzMDkxODc=", "number": 30290, "title": "ld symbols not found on c-style FFI union", "user": {"login": "daschl", "id": 29086, "node_id": "MDQ6VXNlcjI5MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/29086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daschl", "html_url": "https://github.com/daschl", "followers_url": "https://api.github.com/users/daschl/followers", "following_url": "https://api.github.com/users/daschl/following{/other_user}", "gists_url": "https://api.github.com/users/daschl/gists{/gist_id}", "starred_url": "https://api.github.com/users/daschl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daschl/subscriptions", "organizations_url": "https://api.github.com/users/daschl/orgs", "repos_url": "https://api.github.com/users/daschl/repos", "events_url": "https://api.github.com/users/daschl/events{/privacy}", "received_events_url": "https://api.github.com/users/daschl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-12-09T18:25:58Z", "updated_at": "2015-12-10T13:28:44Z", "closed_at": "2015-12-09T20:28:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi folks,\n\nmainly tested on 1.4.0, but I also tested nightly.\n\nthis may be a compiler bug, but I'm not sure. So here is what I know is going on. I have the following code which was generated by crabtw/bindgen and is intended to work over a union in a c library (part of the relevant code to not make it too noisy):\n\n``` rust\n#[repr(C)]\nstruct TopologyObjectAttributes {\n    _bindgen_data_: [u64; 5usize],\n}\n\nimpl TopologyObjectAttributes {\n    pub unsafe fn cache(&mut self) -> *mut TopologyObjectCacheAttributes {\n        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);\n        ::std::mem::transmute(raw.offset(0))\n    }\n    pub unsafe fn group(&mut self) -> *mut TopologyObjectGroupAttributes {\n        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);\n        ::std::mem::transmute(raw.offset(0))\n    }\n    pub unsafe fn pcidev(&mut self) -> *mut TopologyObjectPCIDevAttributes {\n        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);\n        ::std::mem::transmute(raw.offset(0))\n    }\n    pub unsafe fn bridge(&mut self) -> *mut TopologyObjectBridgeAttributes {\n        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);\n        ::std::mem::transmute(raw.offset(0))\n    }\n    pub unsafe fn osdev(&mut self) -> *mut TopologyObjectOSDevAttributes {\n        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);\n        ::std::mem::transmute(raw.offset(0))\n    }\n}\n\n#[repr(C)]\npub struct TopologyObjectCacheAttributes {\n    pub size: c_ulonglong,\n    pub depth: c_uint,\n    pub linesize: c_uint,\n    pub associativity: c_int,\n    pub _type: TopologyObjectCacheType,\n}\n\nimpl TopologyObjectCacheAttributes {\n    pub fn size(&self) -> u64 {\n        self.size\n    }\n\n    pub fn depth(&self) -> u32 {\n        self.depth\n    }\n}\n```\n\nI'm showing only the impl for the cache part, but the other union variants work exactly the same way. The struct fields are public in the cache one for testing purposes, of course ideally I only have the getters. Now I have some code which does its `unsafe` job to dereference the pointers and ultimately get to the members of the struct.\n\n``` rust\n    pub fn cache_attributes(&self) -> Option<&TopologyObjectCacheAttributes> {\n        let cache_ptr = unsafe { (*self.attr).cache() };\n        if cache_ptr.is_null() {\n            None\n        } else {\n            unsafe { Some(&*cache_ptr) }\n        }\n    }\n```\n\nThis is called like:\n\n``` rust\np.cache_attributes().unwrap().size();\n```\n\nNow here comes the important stuff. When I call it like this, the compiler fails on linking:\n\n```\nnote: ld: warning: directory not found for option '-L/Users/michael/rust/hwloc-rs/.rust/lib/x86_64-apple-darwin'\nld: warning: directory not found for option '-L/Users/michael/rust/hwloc-rs/lib/x86_64-apple-darwin'\nUndefined symbols for architecture x86_64:\n  \"topology_object::TopologyObjectCacheAttributes::size::h5726f74039bc15c7uMa\", referenced from:\n      main::hf733474fad67530eiaa in processor_cache.0.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n```\n\nBut when I change it to direct struct member access (not going through the getter) it works! So this compiles fine and runs as expected in my test code:\n\n``` rust\np.cache_attributes().unwrap().size;\n```\n\nI'm not an expert in rust so I have a hard time providing a smaller test case. If someone wants to run the code you can clone the repo and run the example (https://github.com/daschl/hwloc-rs/blob/master/examples/processor_cache.rs#L20) - `$ cargo run --example processor_cache`.\n\nJust make sure to have the hwloc library installed (1.11.1, from here https://www.open-mpi.org/software/hwloc/v1.11/), just plain configure, make, sudo make install.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/30290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/30290/timeline", "performed_via_github_app": null, "state_reason": "completed"}