{"url": "https://api.github.com/repos/rust-lang/rust/issues/26804", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/26804/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/26804/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/26804/events", "html_url": "https://github.com/rust-lang/rust/issues/26804", "id": 93127999, "node_id": "MDU6SXNzdWU5MzEyNzk5OQ==", "number": 26804, "title": "Confusing error messages when invariant type is involved", "user": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-07-05T17:26:43Z", "updated_at": "2020-06-11T19:04:17Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Playpen: http://is.gd/f1SPdn\n\n``` rust\n#[derive(Default)]\nstruct S<'a> {\n    c: RefCell<Option<Box<Sized + 'a>>>,    // Doesn't work\n    //c: RefCell<Option<Box<&'a Sized>>>,   // Works\n    //c: Option<Box<Sized + 'a>>,           // Also works\n}\n\nimpl <'a> S<'a> {\n    fn r(&'a self) -> &'a () {\n        panic!();\n    }\n}\n\nfn main() {\n    let s = S::default();\n    let r = s.r();\n}\n```\n\nGives this error:\n\n```\n<anon>:19:13: 19:14 error: `s` does not live long enough\n<anon>:19     let r = s.r();\n                      ^\n<anon>:17:11: 20:2 note: reference must be valid for the block at 17:10...\n<anon>:17 fn main() {\n<anon>:18     let s = S::default();\n<anon>:19     let r = s.r();\n<anon>:20 }\n<anon>:18:26: 20:2 note: ...but borrowed value is only valid for the block suffix following statement 0 at 18:25\n<anon>:18     let s = S::default();\n<anon>:19     let r = s.r();\n<anon>:20 }\n```\n\nThis is confusing, since the compiler seems to demand that `s` is valid in the line before it is declared (the only difference between the regions is that the first one includes the `fn main() {`). It is never mentioned that this is caused by `S` being invariant on `'a`, which disallows rustc to enlarge the lifetime to include the whole block.\n\nI think rustc should give a better error is this case (maybe something like `note: cannot extend lifetime of `s` since its type `S` is invariant with respect to `'a``).\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/26804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/26804/timeline", "performed_via_github_app": null, "state_reason": null}