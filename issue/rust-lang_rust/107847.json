{"url": "https://api.github.com/repos/rust-lang/rust/issues/107847", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107847/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107847/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107847/events", "html_url": "https://github.com/rust-lang/rust/issues/107847", "id": 1577826504, "node_id": "I_kwDOAAsO6M5eC7jI", "number": 107847, "title": "Inconsistant codegen for operation on arrays/slices", "user": {"login": "SadiinsoSnowfall", "id": 32017313, "node_id": "MDQ6VXNlcjMyMDE3MzEz", "avatar_url": "https://avatars.githubusercontent.com/u/32017313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SadiinsoSnowfall", "html_url": "https://github.com/SadiinsoSnowfall", "followers_url": "https://api.github.com/users/SadiinsoSnowfall/followers", "following_url": "https://api.github.com/users/SadiinsoSnowfall/following{/other_user}", "gists_url": "https://api.github.com/users/SadiinsoSnowfall/gists{/gist_id}", "starred_url": "https://api.github.com/users/SadiinsoSnowfall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SadiinsoSnowfall/subscriptions", "organizations_url": "https://api.github.com/users/SadiinsoSnowfall/orgs", "repos_url": "https://api.github.com/users/SadiinsoSnowfall/repos", "events_url": "https://api.github.com/users/SadiinsoSnowfall/events{/privacy}", "received_events_url": "https://api.github.com/users/SadiinsoSnowfall/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3425147156, "node_id": "LA_kwDOAAsO6M7MJ5kU", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-array", "name": "A-array", "color": "f7e101", "default": false, "description": "Area: [T; N]"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-02-09T12:42:11Z", "updated_at": "2023-05-15T07:01:52Z", "closed_at": "2023-05-15T07:01:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I had some weird performance jumps in one of my code and decided to investigate, I found out that rustc does some weird codegen for certain operations on arrays / slices depending on their size.\r\n\r\nLets consider the following functions :\r\n```rust\r\nfn array_index<const LEN: usize>(v: [u8; LEN]) -> bool {\r\n    for i in 0..LEN {\r\n        if v[i] != 0 {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    true\r\n}\r\n\r\nfn array_iter<const LEN: usize>(v: [u8; LEN]) -> bool {\r\n    for i in v.iter() {\r\n        if *i != 0 {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    true\r\n}\r\n\r\nfn array_iter_implicit<const LEN: usize>(v: [u8; LEN]) -> bool {\r\n    for i in v {\r\n        if i != 0 {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    true\r\n}\r\n\r\nfn slice_index<const LEN: usize>(v: &[u8; LEN]) -> bool {\r\n    for i in 0..v.len() {\r\n        if v[i] != 0 {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    true\r\n}\r\n\r\nfn slice_iter<const LEN: usize>(v: &[u8; LEN]) -> bool {\r\n    for i in v.iter() {\r\n        if *i != 0 {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    true\r\n}\r\n\r\nfn slice_iter_implicit<const LEN: usize>(v: &[u8; LEN]) -> bool {\r\n    for i in v{\r\n        if *i != 0 {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    true\r\n}\r\n```\r\n\r\n(compiler explorer link: https://godbolt.org/z/dsTchPvhG)\r\n\r\nEvery functions do the same thing: return true if all value in a given array are zero, or false otherwise.\r\nThere is two groups of functions: the one that takes its parameter by value, and the one that takes it by reference.\r\nIn each group, one function iterates on the array manually (with indexing), one uses the `iter()` function to create an iterator over the array, and one implicitly converts the array into an iterator.\r\n\r\nWe could expect every function to perform the same (or at least every function inside a group to perform the same) but it is not the case.\r\n\r\nHere are the result of benchmarking the functions for different sizes (measured on a 5900X using criterion on the latest nightly toolchain with the compile options `-C opt-level=3 -Z mir-opt-level=4 -C target-feature=+avx2`):\r\n\r\n| input size | array_index | array_iter | array_iter_implicit | slice_index | slice_iter | slice_iter_implicit |\r\n| --- | --- | --- | --- | --- | --- | --- |\r\n| **8**  | 0.4ns | 0.4ns | 0.4ns | 1.1ns | 1.1ns | 1.2ns\r\n| **16** | 3.4ns | 3.4ns | 3.4ns | 2.6ns | 2.6ns | 2.6ns\r\n| **32** | 13ns | 12.9ns | 6ns | 1.6ns | 1.6ns | 1.6ns\r\n| **64** | 24.5ns | 24.4ns | 39.6ns | 1.6ns | 1.6ns | 1.6ns\r\n| **128** | 74.6ns | 72.6ns | 80.6ns | 23.8ns | 27.5ns | 27.5ns\r\n| **256** | 136.6ns | 140.5ns | 164ns | 47.3ns | 47ns | 47ns\r\n| **512** | 290ns | 280ns | 300ns | 91.5ns | 109.6ns | 107.5ns\r\n| **1024** | 561ns | 569ns | 620ns | 163ns | 188ns | 182ns\r\n\r\nIf we add `#[inline(never)]` to every function, we get the following result:\r\n\r\n| input size | array_index | array_iter | array_iter_implicit | slice_index | slice_iter | slice_iter_implicit |\r\n| --- | --- | --- | --- | --- | --- | --- |\r\n| **8** | 1.6ns | 1.6ns | 3.1ns | 1.1ns | 1.1ns | 1.1ns\r\n| **16** | 8.7ns | 8.7ns | 11ns | 1.6ns | 1.6ns | 1.6ns\r\n| **32** | 13ns | 13ns | 20.1ns | 1.6ns | 1.6ns | 1.6ns\r\n| **64** | 24ns | 24ns | 37.8ns | 1.6ns | 1.6ns | 1.6ns\r\n| **128** | 68.2ns | 69.1ns | 76.7ns | 25.5ns | 26.5ns | 26.5ns\r\n| **256** | 130.1ns | 134.3ns | 166.9ns | 49.5ns | 49.8ns | 51.5ns\r\n| **512** | 283.1ns | 291.4ns | 305.2ns | 93.5ns | 108.5ns | 108.3ns\r\n| **1024** | 556.6ns | 567.3ns | 619.5ns | 172ns | 188.8ns | 188.7ns\r\n\r\n\r\nWe can see that most of the time, the functions in the same group perform the same, but there are some exceptions:\r\n* `array_iter_implicit` is consistently slower than other `array` functions\r\n* `slice_index` is faster than other `slice` functions most of the time\r\n\r\nThe `slice` functions are up to 3 times faster than the `array` functions, we can see using compiler explorer that rustc sometimes copies the whole array into the stack, which might explain the difference in performance, but this is still surprising.\r\n\r\nMy question is the following: why does rustc emit assembly code so different for the same operation depending on the size of the array and the way we iterate over it (even when only considering functions in one specific group) ? I would expect the final codegen to be consistant for all functions in the same group for the same array size.\r\n\r\n", "closed_by": {"login": "SadiinsoSnowfall", "id": 32017313, "node_id": "MDQ6VXNlcjMyMDE3MzEz", "avatar_url": "https://avatars.githubusercontent.com/u/32017313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SadiinsoSnowfall", "html_url": "https://github.com/SadiinsoSnowfall", "followers_url": "https://api.github.com/users/SadiinsoSnowfall/followers", "following_url": "https://api.github.com/users/SadiinsoSnowfall/following{/other_user}", "gists_url": "https://api.github.com/users/SadiinsoSnowfall/gists{/gist_id}", "starred_url": "https://api.github.com/users/SadiinsoSnowfall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SadiinsoSnowfall/subscriptions", "organizations_url": "https://api.github.com/users/SadiinsoSnowfall/orgs", "repos_url": "https://api.github.com/users/SadiinsoSnowfall/repos", "events_url": "https://api.github.com/users/SadiinsoSnowfall/events{/privacy}", "received_events_url": "https://api.github.com/users/SadiinsoSnowfall/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107847/timeline", "performed_via_github_app": null, "state_reason": "completed"}