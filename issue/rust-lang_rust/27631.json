{"url": "https://api.github.com/repos/rust-lang/rust/issues/27631", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/27631/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/27631/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/27631/events", "html_url": "https://github.com/rust-lang/rust/issues/27631", "id": 100005547, "node_id": "MDU6SXNzdWUxMDAwMDU1NDc=", "number": 27631, "title": "index out of range unexpected panic", "user": {"login": "tyoc213", "id": 506234, "node_id": "MDQ6VXNlcjUwNjIzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/506234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tyoc213", "html_url": "https://github.com/tyoc213", "followers_url": "https://api.github.com/users/tyoc213/followers", "following_url": "https://api.github.com/users/tyoc213/following{/other_user}", "gists_url": "https://api.github.com/users/tyoc213/gists{/gist_id}", "starred_url": "https://api.github.com/users/tyoc213/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tyoc213/subscriptions", "organizations_url": "https://api.github.com/users/tyoc213/orgs", "repos_url": "https://api.github.com/users/tyoc213/repos", "events_url": "https://api.github.com/users/tyoc213/events{/privacy}", "received_events_url": "https://api.github.com/users/tyoc213/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-08-10T08:21:12Z", "updated_at": "2016-05-24T21:27:02Z", "closed_at": "2016-05-24T21:27:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code (my little follow up learning rust and ogl)\n\n```\n#[macro_use]\nextern crate glium;\nextern crate num;\nextern crate image;\nextern crate nalgebra;\n\nuse std::io::Cursor;\n\n\nfn main() {\n    use glium::{DisplayBuild, Surface};\n    use nalgebra::*;\n    use num::traits::Float;\n    let display = glium::glutin::WindowBuilder::new().build_glium().unwrap();\n\n\n    let image = image::load(Cursor::new(&include_bytes!(\"/Users/tyoc213/Desktop/lala.png\")[..]),\n                            image::PNG).unwrap();\n    let texture = glium::texture::Texture2d::new(&display, image).unwrap();\n    let image2 = image::load(Cursor::new(&include_bytes!(\"/Users/tyoc213/Desktop/lala2.png\")[..]),\n                            image::PNG).unwrap();\n    let texture2 = glium::texture::Texture2d::new(&display, image2).unwrap();\n\n    #[derive(Copy, Clone)]\n    struct Vertex {\n        position: [f32; 2],\n        tex_coords: [f32; 2],\n    }\n\n    let indices = glium::index::NoIndices(glium::index::PrimitiveType::TrianglesList);\n\n    let vertex_shader_src = r#\"\n        #version 140\n\n        in vec2 position;\n        in vec2 tex_coords;\n        out vec2 v_tex_coords;\n        out float some;\n\n        uniform mat4 matrix;\n        uniform mat4 trans;\n        uniform mat4 vera;\n\n        void main() {\n            v_tex_coords = tex_coords;\n            some = matrix[0][0];\n            // gl_Position = matrix * vec4(position, 0.0, 1.0); // the other matrix\n            gl_Position = vera * trans * vec4(position, 0.0, 1.0);\n        }\n    \"#;\n\n    let fragment_shader_src = r#\"\n        #version 140\n\n        in float some;\n        in vec2 v_tex_coords;\n        out vec4 color;\n\n        uniform sampler2D tex;\n        uniform sampler2D tex2;\n\n        void main() {\n            if(v_tex_coords.y < 0.25){\n                vec4 color1 = texture(tex, v_tex_coords) * vec4(1.0, 0, 0, 1.0);;\n                vec4 color2 = texture(tex2, v_tex_coords); // * vec4(1.0, 0, 0, 1.0);;\n                color = mix(color1, color2, 0.8+some);\n            }else if(v_tex_coords.y < 0.5){\n                vec4 color1 = texture(tex, v_tex_coords) * vec4(1.0, 0, 0, 1.0);;\n                color = color1;\n            }else if(v_tex_coords.y < 0.75){\n                vec4 color2 = texture(tex2, v_tex_coords); // * vec4(1.0, 0, 0, 1.0);;\n                color = color2;\n            } else {\n                color = texture(tex2, vec2(v_tex_coords.x + sin(v_tex_coords.y * 60.0 + some * 2.0) / 30.0, 1.0 - v_tex_coords.y)) * vec4(0.7, 0.7, 1.0, 1.0);\n            }\n\n        }\n    \"#;\n\n    implement_vertex!(Vertex, position, tex_coords);\n\n    let vertex1 = Vertex { position: [-0.5, -0.5], tex_coords: [0.0, 0.0] };\n    let vertex2 = Vertex { position: [ 0.0,  0.5], tex_coords: [0.0, 1.0] };\n    let vertex3 = Vertex { position: [ 0.5, -0.25], tex_coords: [1.0, 0.0] };\n    let shape = vec![vertex1, vertex2, vertex3];\n\n    let vertex_buffer = glium::VertexBuffer::new(&display, &shape).unwrap();\n\n    let program = glium::Program::from_source(&display, vertex_shader_src, fragment_shader_src, None).unwrap();\n\n    let mut t = -0.5;\n\n    loop {\n        // we update `t`\n        t += 0.0002;\n        if t > 0.5 {\n            t = -0.5;\n        }\n\n        let mut target = display.draw();\n        target.clear_color(0.0, 0.0, 1.0, 1.0);\n\n        let mut thing: Mat4<f32> = nalgebra::one();\n        thing.m11 = t.cos();\n        thing.m12 = t.sin();\n        thing.m21 = -t.sin();\n        thing.m22 = t.cos();\n        let mut trot = Rot3::new(Vec3::new(0.0f64, 0.0,  <f64 as BaseFloat>::pi()));\n        println!(\"trot 1 {:?}\", trot);\n        trot.look_at(&Vec::new(1.2, 1.2, 1.2), &Vec3::new(0.0,0.0,1.0));\n        println!(\"trot 2 {:?}\", trot);\n        let uniforms = uniform! {\n            matrix: [\n                [t.cos(), t.sin(), 0.0, 0.0], // [1.0, 0.0, 0.0, 0.0],\n                [-t.sin(), t.cos(), 0.0, 0.0], // [0.0, 1.0, 0.0, 0.0],\n                [0.0, 0.0, 1.0, 0.0],\n                [ t , 0.0, 0.0, 1.0],\n            ],\n            tex: &texture,\n            tex2: &texture2,\n            trans: thing,\n            view: trot,\n        };\n\n        target.draw(&vertex_buffer, &indices, &program, &uniforms,\n                    &Default::default()).unwrap();\n        target.finish().unwrap();\n\n        for ev in display.poll_events() {\n            match ev {\n                glium::glutin::Event::Closed => return,\n                _ => ()\n            }\n        }\n    }\n}\n```\n\n```\n$ rustc --version --verbose\nrustc 1.2.0 (082e47636 2015-08-03)\nbinary: rustc\ncommit-hash: 082e4763615bdbe7b4dd3dfd6fc2210b7773edf5\ncommit-date: 2015-08-03\nhost: x86_64-apple-darwin\nrelease: 1.2.0\n```\n\nIt breaks the compiler. I get this\n\n```\nrc/main.rs:110:23: 110:46 error: this function takes 0 parameters but 3 parameters were supplied [E0061]\nsrc/main.rs:110         trot.look_at(&Vec::new(1.2, 1.2, 1.2), &Vec3::new(0.0,0.0,1.0));\n                                      ^~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:110:23: 110:46 help: run `rustc --explain E0061` to see a detailed explanation\nsrc/main.rs:110:22: 110:46 error: mismatched types:\n expected `&nalgebra::structs::vec::Vec3<f64>`,\n    found `&collections::vec::Vec<_>`\n(expected struct `nalgebra::structs::vec::Vec3`,\n    found struct `collections::vec::Vec`) [E0308]\nsrc/main.rs:110         trot.look_at(&Vec::new(1.2, 1.2, 1.2), &Vec3::new(0.0,0.0,1.0));\n                                     ^~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:110:22: 110:46 help: run `rustc --explain E0308` to see a detailed explanation\nerror: internal compiler error: unexpected panic\nnote: the compiler unexpectedly panicked. this is a bug.\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\nthread 'rustc' panicked at 'index out of bounds: the len is 146 but the index is 147', ../src/libcollections/vec.rs:1362\n\nstack backtrace:\n   1:        0x10cc4c7b5 - sys::backtrace::write::hf5ea20500b66cd24uns\n   2:        0x10cc55013 - panicking::on_panic::hbe02cb0d925cad49iGw\n   3:        0x10cc10dd2 - rt::unwind::begin_unwind_inner::h12ba0ba9dffdecc2uow\n   4:        0x10cc11b29 - rt::unwind::begin_unwind_fmt::hadf0dbf11d345ebfAnw\n   5:        0x10cc54b9c - rust_begin_unwind\n   6:        0x10cca8d95 - panicking::panic_fmt::h987a4890059dc6e0H8B\n   7:        0x10cca3515 - panicking::panic_bounds_check::hf900a758401f2ca8N7B\n   8:        0x10a0741ea - middle::infer::freshen::TypeFreshener<'a, 'tcx>.TypeFolder<'tcx>::fold_ty::hbd8e45b2c49f8e6fb5z\n   9:        0x10a075759 - middle::ty_fold::TypeFolder::fold_substs::h10425087199912035611\n  10:        0x109fdf669 - middle::traits::select::SelectionContext<'cx, 'tcx>::select::ha4cbca36867c39c7hkT\n  11:        0x10a0e7a08 - middle::traits::fulfill::FulfillmentContext<'tcx>::select::haa02db2d5e8207e379Q\n  12:        0x10a0e6cc1 - middle::traits::fulfill::FulfillmentContext<'tcx>::select_where_possible::h408c4cc97d8070edM8Q\n  13:        0x109c4c021 - check::FnCtxt<'a, 'tcx>::select_obligations_where_possible::h26aca0e1e77478dd7Ep\n  14:        0x109bdc4e1 - check::FnCtxt<'a, 'tcx>::resolve_type_vars_if_possible::h0780ac8e80e69b5a6Uo\n  15:        0x109ba227e - check::structurally_resolved_type::h0dce595f8068585dSxt\n  16:        0x109c27457 - check::callee::check_call::h256e0321ee60df0eL1l\n  17:        0x109c7eb20 - check::check_expr_with_unifier::h1015587448309277605\n  18:        0x109c568b6 - check::check_expr_with_unifier::h5311411268102988624\n  19:        0x109c2c576 - check::check_argument_types::he95ba5663be186cb89p\n  20:        0x109c2db94 - check::check_method_argument_types::h27c51671b6bc1cc6x7p\n  21:        0x109c59d0d - check::check_expr_with_unifier::check_method_call::h99e4ecef0bfb9a66MJq\n  22:        0x109c84163 - check::check_expr_with_unifier::h17134099806292258680\n  23:        0x109c94d58 - check::check_stmt::h3b6a8003dad3fd00bhs\n  24:        0x109c44a18 - check::check_block_with_expected::h6e216c80ce807e01mls\n  25:        0x109c592a4 - check::check_block_no_value::ha5efaef0c62f142enks\n  26:        0x109c6f006 - check::check_expr_with_unifier::h13136853694612127998\n  27:        0x109c44f22 - check::check_block_with_expected::h6e216c80ce807e01mls\n  28:        0x109c26c81 - check::check_fn::h8b46dfec97d603addXn\n  29:        0x109c3efe0 - check::check_bare_fn::h88c035244660e365WMn\n  30:        0x109c3cdc7 - check::check_item_body::h9873e3da412bca20ydo\n  31:        0x109c3ebe2 - check::check_item_types::h63240bfbe991be87tKn\n  32:        0x109cfccd9 - check_crate::h117ec0c1269afe619fD\n  33:        0x109538d16 - driver::phase_3_run_analysis_passes::closure.15766\n  34:        0x109537204 - middle::ty::with_ctxt::h14728011725879770170\n  35:        0x10953200a - driver::phase_3_run_analysis_passes::h16713467199444562124\n  36:        0x109515107 - driver::compile_input::hb6d2be5b0fa2247fTba\n  37:        0x1095f113f - run_compiler::h21d74b88eec3fe3bx7b\n  38:        0x1095ee9f3 - boxed::F.FnBox<A>::call_box::h1689969825914258414\n  39:        0x1095ee1b7 - rt::unwind::try::try_fn::h11273853850686318048\n  40:        0x10ccdfcc8 - rust_try_inner\n  41:        0x10ccdfcb5 - rust_try\n  42:        0x10cc3ec95 - rt::unwind::try::inner_try::h480e3107f6a4b5b9nkw\n  43:        0x1095ee3e8 - boxed::F.FnBox<A>::call_box::h888215220722514405\n  44:        0x10cc53a9d - sys::thread::Thread::new::thread_start::hdb3d925f69c5da4aHIv\n  45:     0x7fff8fc74267 - _pthread_body\n  46:     0x7fff8fc741e4 - _pthread_start\n\nCould not compile `ex1`.\n```\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/27631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/27631/timeline", "performed_via_github_app": null, "state_reason": "completed"}