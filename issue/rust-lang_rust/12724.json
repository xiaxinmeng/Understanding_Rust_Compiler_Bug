{"url": "https://api.github.com/repos/rust-lang/rust/issues/12724", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12724/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12724/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12724/events", "html_url": "https://github.com/rust-lang/rust/issues/12724", "id": 28852241, "node_id": "MDU6SXNzdWUyODg1MjI0MQ==", "number": 12724, "title": "RFC: Add RcMut<T> and GcMut<T> wrappers", "user": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2014-03-06T06:03:48Z", "updated_at": "2014-03-17T20:19:55Z", "closed_at": "2014-03-17T20:19:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Working with mutable shared state is currently a bit gross. The crazy `foo.borrow().borrow_mut().get().bar()` stuff will be gone with auto-deref (yay!), but there's still the issue that a type like `Rc<RefCell<T>>` is gross looking and offputting to newcomers. I think a reasonable solution would be the introduction of some lightweight wrappers:\n\n``` rust\npub struct RcMut<T> {\n    priv inner: Rc<RefCell<T>>\n}\n\nimpl<T> RcMut<T> {\n    pub fn new(t: T) -> RcMut<T> {\n        RcMut { inner: Rc::new(RefCell::new(t)) }\n    }\n\n    pub fn borrow<'a>(&'a self) -> cell::Ref<'a, T> {\n        self.inner.borrow().borrow()\n    }\n\n    ...\n}\n```\n\nIt's still deferring all of the heavy lifting to `Rc` and `RefCell` and should make downstream code cleaner at a pretty minimal cost.\n\nThoughts?\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12724/timeline", "performed_via_github_app": null, "state_reason": "completed"}