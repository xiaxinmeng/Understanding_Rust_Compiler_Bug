{"url": "https://api.github.com/repos/rust-lang/rust/issues/99616", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99616/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99616/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99616/events", "html_url": "https://github.com/rust-lang/rust/issues/99616", "id": 1315326285, "node_id": "I_kwDOAAsO6M5OZklN", "number": 99616, "title": "LGAT associated type bounds diagnostics are not great", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-07-22T19:00:17Z", "updated_at": "2022-07-22T21:20:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\nalong with any information you feel relevant to replicating the bug.\n\nIf you cannot produce a minimal reproduction case (something that would work in\nisolation), please provide the steps or even link to a repository that causes\nthe problematic output to occur.\n-->\n\nTested on nightly 2022-07-21.\n\nIllustrating as a edit-compile cycle:\n\n```rust\n#![feature(generic_associated_types)]\n\nuse core::future::Future;\n\ntrait Task {\n    type Output<'a>: 'a + Future<Output = ()>\n    where\n        Self: 'a;\n    fn call(&mut self) -> Self::Output<'_>;\n}\n\ntype DynTask = dyn Task<Output = Box<dyn Future<Output = ()>>>;\n```\n\n```\nerror[E0107]: missing generics for associated type `Task::Output`\n  --> src/lib.rs:12:25\n   |\n12 | type DynTask = dyn Task<Output = Box<dyn Future<Output = ()>>>;\n   |                         ^^^^^^ expected 1 lifetime argument\n   |\nnote: associated type defined here, with 1 lifetime parameter: `'a`\n  --> src/lib.rs:6:10\n   |\n6  |     type Output<'a>: 'a + Future<Output = ()>\n   |          ^^^^^^ --\nhelp: add missing lifetime argument\n   |\n12 | type DynTask = dyn Task<Output<'a> = Box<dyn Future<Output = ()>>>;\n   |                         ~~~~~~~~~~\n```\n\nApply the suggestion.\n\n```rust\ntype DynTask = dyn Task<Output<'a> = Box<dyn Future<Output = ()>>>;\n```\n\n```\nerror[E0261]: use of undeclared lifetime name `'a`\n  --> src/lib.rs:12:32\n   |\n12 | type DynTask = dyn Task<Output<'a> = Box<dyn Future<Output = ()>>>;\n   |                                ^^ undeclared lifetime\n   |\n   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\nhelp: consider making the bound lifetime-generic with a new `'a` lifetime\n   |\n12 | type DynTask = dyn for<'a> Task<Output<'a> = Box<dyn Future<Output = ()>>>;\n   |                    +++++++\nhelp: consider introducing lifetime `'a` here\n   |\n12 | type DynTask<'a> = dyn Task<Output<'a> = Box<dyn Future<Output = ()>>>;\n   |             ++++\n```\n\nThat looks wrong, let me try:\n\n```rust\ntype DynTask = dyn Task<for<'a> Output<'a> = Box<dyn Future<Output = ()>>>;\n```\n\n```\nerror: `for<...>` is not allowed on associated type bounds\n  --> src/lib.rs:12:25\n   |\n12 | type DynTask = dyn Task<for<'a> Output<'a> = Box<dyn Future<Output = ()>>>;\n   |                         ^^^^^^^^^^^^^^^^^^\n```\n\nOkay, let's do what the compiler suggested\n\n```rust\ntype DynTask = dyn for<'a> Task<Output<'a> = Box<dyn Future<Output = ()>>>;\n```\n\n```\nwarning: type alias `DynTask` is never used\n  --> src/lib.rs:12:6\n   |\n12 | type DynTask = dyn for<'a> Task<Output<'a> = Box<dyn Future<Output = ()>>>;\n   |      ^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\nwarning: `playground` (lib) generated 1 warning\n```\n\nSuccess! Time to use it...\n\n```\nerror[E0038]: the trait `Task` cannot be made into an object\n  --> src/lib.rs:14:18\n   |\n14 | fn takes(_: &mut DynTask) {}\n   |                  ^^^^^^^ `Task` cannot be made into an object\n   |\nnote: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n  --> src/lib.rs:6:10\n   |\n5  | trait Task {\n   |       ---- this trait cannot be made into an object...\n6  |     type Output<'a>: 'a + Future<Output = ()>\n   |          ^^^^^^ ...because it contains the generic associated type `Output`\n   = help: consider moving `Output` to another trait\n```\n\n\ud83d\ude43", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99616/timeline", "performed_via_github_app": null, "state_reason": null}