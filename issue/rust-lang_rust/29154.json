{"url": "https://api.github.com/repos/rust-lang/rust/issues/29154", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29154/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29154/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29154/events", "html_url": "https://github.com/rust-lang/rust/issues/29154", "id": 112058550, "node_id": "MDU6SXNzdWUxMTIwNTg1NTA=", "number": 29154, "title": "Floating point exception when debugging with lldb on Mac OS X", "user": {"login": "swgillespie", "id": 1871912, "node_id": "MDQ6VXNlcjE4NzE5MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1871912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swgillespie", "html_url": "https://github.com/swgillespie", "followers_url": "https://api.github.com/users/swgillespie/followers", "following_url": "https://api.github.com/users/swgillespie/following{/other_user}", "gists_url": "https://api.github.com/users/swgillespie/gists{/gist_id}", "starred_url": "https://api.github.com/users/swgillespie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swgillespie/subscriptions", "organizations_url": "https://api.github.com/users/swgillespie/orgs", "repos_url": "https://api.github.com/users/swgillespie/repos", "events_url": "https://api.github.com/users/swgillespie/events{/privacy}", "received_events_url": "https://api.github.com/users/swgillespie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123111, "node_id": "MDU6TGFiZWwxMjMxMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-macos", "name": "O-macos", "color": "6e6ec0", "default": false, "description": "Operating system: macOS"}, {"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2015-10-19T01:59:53Z", "updated_at": "2018-11-15T19:14:12Z", "closed_at": "2018-11-15T19:14:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here's an interesting issue I've encountered when debugging - `Option<char>` seems to trigger a floating point exception in LLDB.\n\nEnvironment details:\n- Mac OS X 10.10.5\n- rustc: `rustc 1.5.0-nightly (eafe106ef 2015-10-15)`\n- lldb: `lldb-330.0.44`\n\nRepro steps:\n- Create a file `dwarf.rs`, with the following contents:\n\n``` rust\nfn main() {\n    let c = thing_with_char('\\n');\n    println!(\"{:?}\", c);\n}\n\nfn thing_with_char(c: char) -> Option<char> {\n    thing_with_option_char(c)\n}\n\nfn thing_with_option_char(c: char) -> Option<char> {\n    Some(c)\n}\n```\n- Compile it with debug info:\n\n```\nrustc -g dwarf.rs -o dwarf\n```\n- Run `dwarf` and see it has the correct output:\n\n```\n$ ./dwarf\nSome('\\n')\n```\n- Run `dwarf` under LLDB, set a breakpoint on thing_with_char, start the program, and step once:\n\n```\n$ lldb ./dwarf\n(lldb) target create \"./dwarf\"\nCurrent executable set to './dwarf' (x86_64).\n(lldb) b thing_with_char\nBreakpoint 1: where = dwarf`dwarf::thing_with_char + 15 at dwarf.rs:7, address = 0x000000010000148f\n(lldb) r\nProcess 38743 launched: './dwarf' (x86_64)\nerror: need to add support for DW_TAG_base_type 'char' encoded with DW_ATE = 0x8, bit_size = 32\nProcess 38743 stopped\n* thread #1: tid = 0x15343, 0x000000010000148f dwarf`dwarf::thing_with_char(c=<unavailable>) + 15 at dwarf.rs:7, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x000000010000148f dwarf`dwarf::thing_with_char(c=<unavailable>) + 15 at dwarf.rs:7\n   4    }\n   5\n   6    fn thing_with_char(c: char) -> Option<char> {\n-> 7        thing_with_option_char(c)\n   8    }\n   9\n   10   fn thing_with_option_char(c: char) -> Option<char> {\n(lldb) n\nFloating point exception: 8\n```\n\nThe result is a floating point exception. The error message\n\n```\nerror: need to add support for DW_TAG_base_type 'char' encoded with DW_ATE = 0x8, bit_size = 32\n```\n\nmakes it sound like this is DWARF-related. Also, the Option<char> seems to be a crucial detail - this is what triggers the behavior in my program where I ran into this and also in this repro here.\n\nLLDB's stack trace:\n\n```\n* thread #9: tid = 0x15ee6, 0x0000000101e0c341 LLDB`ExtractBytesFromRegisters(lldb_private::ExecutionContext&, lldb_private::ClangASTType&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb::ByteOrder, std::__1::shared_ptr<lldb_private::DataBuffer>&, unsigned int, unsigned int&, unsigned int&, bool&) + 1279, stop reason = EXC_ARITHMETIC (code=EXC_I386_DIV, subcode=0x0)\n  * frame #0: 0x0000000101e0c341 LLDB`ExtractBytesFromRegisters(lldb_private::ExecutionContext&, lldb_private::ClangASTType&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb::ByteOrder, std::__1::shared_ptr<lldb_private::DataBuffer>&, unsigned int, unsigned int&, unsigned int&, bool&) + 1279\n    frame #1: 0x0000000101e0c055 LLDB`ExtractBytesFromRegisters(lldb_private::ExecutionContext&, lldb_private::ClangASTType&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb_private::DataExtractor const&, lldb::ByteOrder, std::__1::shared_ptr<lldb_private::DataBuffer>&, unsigned int, unsigned int&, unsigned int&, bool&) + 531\n    frame #2: 0x0000000101e0bb0a LLDB`ABISysV_x86_64::GetReturnValueObjectImpl(lldb_private::Thread&, lldb_private::ClangASTType&) const + 1166\n    frame #3: 0x0000000101d4ebac LLDB`lldb_private::ABI::GetReturnValueObject(lldb_private::Thread&, lldb_private::ClangASTType&, bool) const + 84\n    frame #4: 0x0000000101d9ad1a LLDB`lldb_private::ThreadPlanStepOut::CalculateReturnValue() + 202\n    frame #5: 0x0000000101d9abb7 LLDB`lldb_private::ThreadPlanStepOut::DoPlanExplainsStop(lldb_private::Event*) + 415\n    frame #6: 0x0000000101d96568 LLDB`lldb_private::ThreadPlan::PlanExplainsStop(lldb_private::Event*) + 40\n    frame #7: 0x0000000101d8f019 LLDB`lldb_private::Thread::ShouldStop(lldb_private::Event*) + 765\n    frame #8: 0x0000000101d94cc4 LLDB`lldb_private::ThreadList::ShouldStop(lldb_private::Event*) + 488\n    frame #9: 0x0000000101d66741 LLDB`lldb_private::Process::ShouldBroadcastEvent(lldb_private::Event*) + 379\n    frame #10: 0x0000000101d63d44 LLDB`lldb_private::Process::HandlePrivateEvent(std::__1::shared_ptr<lldb_private::Event>&) + 356\n    frame #11: 0x0000000101d66e81 LLDB`lldb_private::Process::RunPrivateStateThread() + 511\n    frame #12: 0x0000000101d66935 LLDB`lldb_private::Process::PrivateStateThread(void*) + 9\n    frame #13: 0x00007fff92d6605a libsystem_pthread.dylib`_pthread_body + 131\n    frame #14: 0x00007fff92d65fd7 libsystem_pthread.dylib`_pthread_start + 176\n    frame #15: 0x00007fff92d633ed libsystem_pthread.dylib`thread_start + 13\n```\n\nThis could very well be a bug in lldb - it does look like it's dividing by zero.\n", "closed_by": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29154/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29154/timeline", "performed_via_github_app": null, "state_reason": "completed"}