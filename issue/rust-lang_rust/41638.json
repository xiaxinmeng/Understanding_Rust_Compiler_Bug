{"url": "https://api.github.com/repos/rust-lang/rust/issues/41638", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41638/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41638/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41638/events", "html_url": "https://github.com/rust-lang/rust/issues/41638", "id": 225289342, "node_id": "MDU6SXNzdWUyMjUyODkzNDI=", "number": 41638, "title": "Compare tiny fixed-size arrays/strings without memcmp", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-04-29T22:23:31Z", "updated_at": "2020-09-12T19:22:25Z", "closed_at": "2018-12-22T15:13:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a performance enhancement request. This little benchmark program tests some strings equality:\r\n\r\n```\r\n#[inline(never)]\r\nfn test(data: &[u8]) -> usize {\r\n    data\r\n    .windows(3)\r\n    .filter(|w| w == b\"TAG\" || w == b\"TGA\" || w == b\"TAA\")\r\n    .count()\r\n}\r\n\r\nfn main() {\r\n    use std::fs::File;\r\n    use std::io::Read;\r\n\r\n    let mut data0 = String::new();\r\n    File::open(\"data.txt\").unwrap().read_to_string(&mut data0).unwrap();\r\n\r\n    println!(\"{}\", test(data0.repeat(300).as_bytes()));\r\n}\r\n```\r\n\r\n\r\n\r\nCompiling it with rustc 1.18.0-nightly (128aa262e 2017-04-28) with:\r\n-C opt-level=3 -C target-cpu=native\r\n\r\nIt gives the asm (note the callq memcmp):\r\n\r\n```\r\n_ZN18string_compare11_r4test17hdbbe6c71ed921549E:\r\n\tpushq\t%r15\r\n\tpushq\t%r14\r\n\tpushq\t%r12\r\n\tpushq\t%rsi\r\n\tpushq\t%rdi\r\n\tpushq\t%rbx\r\n\tsubq\t$40, %rsp\r\n\tmovq\t%rdx, %rdi\r\n\tmovq\t%rcx, %rbx\r\n\txorl\t%esi, %esi\r\n\tcmpq\t$3, %rdi\r\n\tjb\t.LBB3_11\r\n\tleaq\tbyte_str.4(%rip), %r14\r\n\tleaq\tbyte_str.6(%rip), %r15\r\n\tleaq\tbyte_str.8(%rip), %r12\r\n\t.p2align\t4, 0x90\r\n.LBB3_2:\r\n\taddq\t$-1, %rdi\r\n\tcmpq\t%rbx, %r14\r\n\tje\t.LBB3_9\r\n\tmovl\t$3, %r8d\r\n\tmovq\t%rbx, %rcx\r\n\tmovq\t%r14, %rdx\r\n\tcallq\tmemcmp\r\n\tcmpq\t%rbx, %r15\r\n\tje\t.LBB3_9\r\n\tmovl\t$1, %ecx\r\n\ttestl\t%eax, %eax\r\n\tje\t.LBB3_10\r\n\tmovl\t$3, %r8d\r\n\tmovq\t%rbx, %rcx\r\n\tmovq\t%r15, %rdx\r\n\tcallq\tmemcmp\r\n\ttestl\t%eax, %eax\r\n\tje\t.LBB3_9\r\n\tcmpq\t%rbx, %r12\r\n\tje\t.LBB3_9\r\n\tmovl\t$3, %r8d\r\n\tmovq\t%rbx, %rcx\r\n\tmovq\t%r12, %rdx\r\n\tcallq\tmemcmp\r\n\ttestl\t%eax, %eax\r\n\tje\t.LBB3_9\r\n\txorl\t%ecx, %ecx\r\n\tjmp\t.LBB3_10\r\n\t.p2align\t4, 0x90\r\n.LBB3_9:\r\n\tmovl\t$1, %ecx\r\n.LBB3_10:\r\n\taddq\t$1, %rbx\r\n\taddq\t%rcx, %rsi\r\n\tcmpq\t$2, %rdi\r\n\tja\t.LBB3_2\r\n.LBB3_11:\r\n\tmovq\t%rsi, %rax\r\n\taddq\t$40, %rsp\r\n\tpopq\t%rbx\r\n\tpopq\t%rdi\r\n\tpopq\t%rsi\r\n\tpopq\t%r12\r\n\tpopq\t%r14\r\n\tpopq\t%r15\r\n\tretq\r\n```\r\n\r\n\r\nIf I test the strings equality manually:\r\n\r\n```\r\n#[inline(never)]\r\nfn test(data: &[u8]) -> usize {\r\n    let eq = |s: &[_], t: &[_]| s[0] == t[0] && s[1] == t[1] && s[2] == t[2];\r\n\r\n    data\r\n    .windows(3)\r\n    .filter(|w| eq(w, b\"TAG\") || eq(w, b\"TGA\") || eq(w, b\"TAA\"))\r\n    .count()\r\n}\r\n\r\nfn main() {\r\n    use std::fs::File;\r\n    use std::io::Read;\r\n\r\n    let mut data0 = String::new();\r\n    File::open(\"data.txt\").unwrap().read_to_string(&mut data0).unwrap();\r\n\r\n    println!(\"{}\", test(data0.repeat(300).as_bytes()));\r\n}\r\n```\r\n\r\n\r\n\r\nThe generated asm is (the asm is shorter with -O, but the binary is equally fast):\r\n\r\n```\r\n_ZN17string_compare9_r4test17h3d7e8307be2946a5E:\r\n\tcmpq\t$3, %rdx\r\n\tjae\t.LBB3_2\r\n\txorl\t%eax, %eax\r\n\tretq\r\n.LBB3_2:\r\n\ttestb\t$1, %dl\r\n\tjne\t.LBB3_4\r\n\txorl\t%eax, %eax\r\n\tmovq\t%rcx, %r8\r\n\tmovq\t%rdx, %rcx\r\n\tcmpq\t$3, %rdx\r\n\tjne\t.LBB3_10\r\n\tjmp\t.LBB3_25\r\n.LBB3_4:\r\n\tleaq\t1(%rcx), %r8\r\n\tcmpb\t$84, (%rcx)\r\n\tjne\t.LBB3_8\r\n\tmovb\t(%r8), %al\r\n\tcmpb\t$65, %al\r\n\tje\t.LBB3_26\r\n\tcmpb\t$71, %al\r\n\tjne\t.LBB3_8\r\n\tmovb\t$1, %al\r\n\tcmpb\t$65, 2(%rcx)\r\n\tje\t.LBB3_9\r\n.LBB3_8:\r\n\txorl\t%eax, %eax\r\n.LBB3_9:\r\n\tleaq\t-1(%rdx), %rcx\r\n\tmovzbl\t%al, %eax\r\n\tcmpq\t$3, %rdx\r\n\tje\t.LBB3_25\r\n.LBB3_10:\r\n\taddq\t$3, %r8\r\n\tjmp\t.LBB3_12\r\n.LBB3_11:\r\n\tmovzbl\t(%r8), %eax\r\n\tcmpb\t$71, %al\r\n\tsete\t%r9b\r\n\tcmpb\t$65, %al\r\n\tsete\t%al\r\n\torb\t%r9b, %al\r\n\tjmp\t.LBB3_24\r\n\t.p2align\t4, 0x90\r\n.LBB3_12:\r\n\tcmpb\t$84, -3(%r8)\r\n\tjne\t.LBB3_18\r\n\tmovzbl\t-2(%r8), %edx\r\n\tcmpb\t$71, %dl\r\n\tje\t.LBB3_17\r\n\tcmpb\t$65, %dl\r\n\tjne\t.LBB3_18\r\n\tmovzbl\t-1(%r8), %edx\r\n\tcmpb\t$71, %dl\r\n\tsete\t%r9b\r\n\tcmpb\t$65, %dl\r\n\tsete\t%dl\r\n\torb\t%r9b, %dl\r\n\tjmp\t.LBB3_19\r\n.LBB3_17:\r\n\tmovb\t$1, %dl\r\n\tcmpb\t$65, -1(%r8)\r\n\tje\t.LBB3_19\r\n\t.p2align\t4, 0x90\r\n.LBB3_18:\r\n\txorl\t%edx, %edx\r\n.LBB3_19:\r\n\tmovzbl\t%dl, %edx\r\n\taddq\t%rax, %rdx\r\n\taddq\t$-2, %rcx\r\n\tcmpb\t$84, -2(%r8)\r\n\tjne\t.LBB3_23\r\n\tmovzbl\t-1(%r8), %eax\r\n\tcmpb\t$65, %al\r\n\tje\t.LBB3_11\r\n\tcmpb\t$71, %al\r\n\tjne\t.LBB3_23\r\n\tmovb\t$1, %al\r\n\tcmpb\t$65, (%r8)\r\n\tje\t.LBB3_24\r\n\t.p2align\t4, 0x90\r\n.LBB3_23:\r\n\txorl\t%eax, %eax\r\n.LBB3_24:\r\n\tmovzbl\t%al, %eax\r\n\taddq\t%rdx, %rax\r\n\taddq\t$2, %r8\r\n\tcmpq\t$3, %rcx\r\n\tjae\t.LBB3_12\r\n.LBB3_25:\r\n\tretq\r\n.LBB3_26:\r\n\tmovb\t2(%rcx), %al\r\n\tcmpb\t$71, %al\r\n\tsete\t%cl\r\n\tcmpb\t$65, %al\r\n\tsete\t%al\r\n\torb\t%cl, %al\r\n\tjmp\t.LBB3_9\r\n```\r\n\r\nWith my input file the first program with the callq memcmp runs in about 0.49 seconds, while the second in about 0.16 seconds.\r\n\r\nSo I suggest to introduce an optimization, to perform comparisons with very small fixed-size arrays without memcmp.", "closed_by": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41638/timeline", "performed_via_github_app": null, "state_reason": "completed"}