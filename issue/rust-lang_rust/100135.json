{"url": "https://api.github.com/repos/rust-lang/rust/issues/100135", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100135/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100135/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100135/events", "html_url": "https://github.com/rust-lang/rust/issues/100135", "id": 1328182505, "node_id": "I_kwDOAAsO6M5PKnTp", "number": 100135, "title": "GATs plus mutable reference causes rustc to improperly believe data escapes function", "user": {"login": "Aiden2207", "id": 57577488, "node_id": "MDQ6VXNlcjU3NTc3NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/57577488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aiden2207", "html_url": "https://github.com/Aiden2207", "followers_url": "https://api.github.com/users/Aiden2207/followers", "following_url": "https://api.github.com/users/Aiden2207/following{/other_user}", "gists_url": "https://api.github.com/users/Aiden2207/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aiden2207/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aiden2207/subscriptions", "organizations_url": "https://api.github.com/users/Aiden2207/orgs", "repos_url": "https://api.github.com/users/Aiden2207/repos", "events_url": "https://api.github.com/users/Aiden2207/events{/privacy}", "received_events_url": "https://api.github.com/users/Aiden2207/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-08-04T07:20:03Z", "updated_at": "2022-08-04T10:44:09Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\n\r\ntrait LendingIterator: Sized {\r\n    type Item<'a>\r\n    where\r\n        Self: 'a;\r\n    fn next(&mut self) -> Self::Item<'_>;\r\n}\r\nfn works<I: LendingIterator, F>(iter: I, f: F) -> bool\r\nwhere\r\n    F: FnMut(I::Item<'_>),\r\n{\r\n    let mut iter2 = Eat(iter, f);\r\n    let _next = iter2.any(|_| false);\r\n    true\r\n}\r\nfn fails<I: LendingIterator, F>(iter: &mut I, f: F) -> bool\r\nwhere\r\n    F: FnMut(I::Item<'_>),\r\n{\r\n    let mut iter2 = Eat(iter, f);\r\n    let _next = iter2.next();\r\n    true\r\n}\r\nimpl<I: LendingIterator> LendingIterator for &mut I {\r\n    type Item<'a> = I::Item<'a> where Self:'a;\r\n    fn next(&mut self) -> Self::Item<'_> {\r\n        (**self).next()\r\n    }\r\n}\r\n\r\nstruct Eat<I, F>(I, F);\r\nimpl<I: LendingIterator, F> Iterator for Eat<I, F>\r\nwhere\r\n    F: FnMut(I::Item<'_>),\r\n{\r\n    type Item = ();\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        None\r\n    }\r\n}\r\n\r\n```\r\n[Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=05ae5d1cfb5f8f2263aeb25e49864c43)\r\n\r\nI expected to see this happen: code successfully compiles.\r\n\r\nInstead, this happened: \r\n```\r\nerror[[E0521]](https://doc.rust-lang.org/nightly/error-index.html#E0521): borrowed data escapes outside of function\r\n  --> src/lib.rs:22:17\r\n   |\r\n17 | fn fails<I: LendingIterator, F>(iter: &mut I, f: F) -> bool\r\n   |                                 ----  - let's call the lifetime of this reference `'1`\r\n   |                                 |\r\n   |                                 `iter` is a reference that is only valid in the function body\r\n...\r\n22 |     let _next = iter2.next();\r\n   |                 ^^^^^^^^^^^^\r\n   |                 |\r\n   |                 `iter` escapes the function body here\r\n   |                 argument requires that `'1` must outlive `'static`\r\n   |\r\n   = note: requirement occurs because of a mutable reference to `Eat<&mut I, F>`\r\n   = note: mutable references are invariant over their type parameter\r\n   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\r\n\r\nFor more information about this error, try `rustc --explain E0521`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\nNote that removing the bound on `F` causes a successful compilation. Also,  removing the call to `next` lets things compile. The example probably can be minimized more.\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nPlayground version:\r\n```\r\n1.64.0-nightly\r\n\r\n(2022-08-03 1b57946a405d5b2a87e6\r\n```\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100135/timeline", "performed_via_github_app": null, "state_reason": null}