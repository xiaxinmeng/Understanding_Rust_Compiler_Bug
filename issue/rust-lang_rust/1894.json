{"url": "https://api.github.com/repos/rust-lang/rust/issues/1894", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/1894/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/1894/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/1894/events", "html_url": "https://github.com/rust-lang/rust/issues/1894", "id": 3364672, "node_id": "MDU6SXNzdWUzMzY0Njcy", "number": 1894, "title": "Last uses aren't moved into closures by default", "user": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-02-23T22:50:27Z", "updated_at": "2014-06-16T21:56:28Z", "closed_at": "2012-02-29T17:15:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This fails:\n\n```\nfn main() {                                                                                                                                                    \n    let x = ~1;                                                                                                                                                \n    let x_in_parent = ptr::addr_of(*x) as uint;                                                                                                                \n    let f = fn@() -> uint {                                                                                                                                    \n        ptr::addr_of(*x) as uint                                                                                                                               \n    };                                                                                                                                                         \n    let x_in_child = f();                                                                                                                                      \n    assert x_in_parent == x_in_child;                                                                                                                          \n} \n```\n\nRewriting it with a capture clause works:\n\n```\nfn main() {                                                                                                                                                    \n    let x = ~1;                                                                                                                                                \n    let x_in_parent = ptr::addr_of(*x) as uint;                                                                                                                \n    let f = fn@[move x]() -> uint {                                                                                                                                    \n        ptr::addr_of(*x) as uint                                                                                                                               \n    };                                                                                                                                                         \n    let x_in_child = f();                                                                                                                                      \n    assert x_in_parent == x_in_child;                                                                                                                          \n}      \n```\n\nThis is a bit surprising and makes spawn not do the expected thing when written with the convenient block closure syntax. For this reason core::task uses `fn~` closures with explicit capture clauses.\n", "closed_by": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/1894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/1894/timeline", "performed_via_github_app": null, "state_reason": "completed"}