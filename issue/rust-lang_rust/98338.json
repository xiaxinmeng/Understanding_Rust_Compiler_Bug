{"url": "https://api.github.com/repos/rust-lang/rust/issues/98338", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98338/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98338/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98338/events", "html_url": "https://github.com/rust-lang/rust/issues/98338", "id": 1278423038, "node_id": "I_kwDOAAsO6M5MMy_-", "number": 98338, "title": "Current handling of Unix close() can lead to silent data loss", "user": {"login": "jgoerzen", "id": 112925, "node_id": "MDQ6VXNlcjExMjkyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/112925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgoerzen", "html_url": "https://github.com/jgoerzen", "followers_url": "https://api.github.com/users/jgoerzen/followers", "following_url": "https://api.github.com/users/jgoerzen/following{/other_user}", "gists_url": "https://api.github.com/users/jgoerzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgoerzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgoerzen/subscriptions", "organizations_url": "https://api.github.com/users/jgoerzen/orgs", "repos_url": "https://api.github.com/users/jgoerzen/repos", "events_url": "https://api.github.com/users/jgoerzen/events{/privacy}", "received_events_url": "https://api.github.com/users/jgoerzen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2022-06-21T13:06:42Z", "updated_at": "2023-03-21T00:33:02Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "While working on #98209 , I went searching for where close() is called.  I found it in std/src/os/fd/owned.rs:\r\n\r\n```\r\nimpl Drop for OwnedFd {\r\n    #[inline]\r\n    fn drop(&mut self) {\r\n        unsafe {\r\n            // Note that errors are ignored when closing a file descriptor. The\r\n            // reason for this is that if an error occurs we don't actually know if\r\n            // the file descriptor was closed or not, and if we retried (for\r\n            // something like EINTR), we might close another valid file descriptor\r\n            // opened after we closed ours.\r\n            let _ = libc::close(self.fd);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe Linux close(2) manpage states:\r\n\r\n```\r\n       A  careful programmer will check the return value of close(), since it is quite possi\u2010\r\n       ble that errors on a previous write(2)  operation  are  reported  only  on  the  final\r\n       close()  that  releases  the open file description.  Failing to check the return value\r\n       when closing a file may lead to silent loss of data.  This can especially be  observed\r\n       with NFS and with disk quota.\r\n\r\n       Note,  however,  that  a  failure  return  should be used only for diagnostic purposes\r\n       (i.e., a warning to the application that there may still be I/O pending or  there  may\r\n       have been failed I/O) or remedial purposes (e.g., writing the file once more or creat\u2010\r\n       ing a backup).\r\n\r\n       Retrying the close() after a failure return is the wrong thing to do, since  this  may\r\n```\r\n\r\nAnyhow, checking the return value of close(2) is necessary in a number of cases.  But here we have a conundrum, because what can we possibly do with a failure of close(2) inside a Drop impl?\r\n\r\n1. Ignore it as now\r\n2. Panic\r\n3. More complex options (eg, allow the caller to register a close-failure callback with the underlying File/whatever object)\r\n\r\nThese all have their pros and cons.  But aren't we looking for something more like this?\r\n\r\n`fn close(self) -> io::Result<()>`\r\n\r\nIn fact, a `Close` trait could define this function and it could be implemented on files, pipes, sockets, etc.  \r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.56.1 (59eed8a2a 2021-11-01)\r\nbinary: rustc\r\ncommit-hash: 59eed8a2aac0230a8b53e89d4e99d55912ba6b35\r\ncommit-date: 2021-11-01\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.56.1\r\nLLVM version: 13.0.0\r\n```\r\n\r\n\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98338/timeline", "performed_via_github_app": null, "state_reason": null}