{"url": "https://api.github.com/repos/rust-lang/rust/issues/72147", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72147/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72147/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72147/events", "html_url": "https://github.com/rust-lang/rust/issues/72147", "id": 616844944, "node_id": "MDU6SXNzdWU2MTY4NDQ5NDQ=", "number": 72147, "title": "Suggest '_ lifetime when appropriate for dyn Trait", "user": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-12T17:51:24Z", "updated_at": "2020-06-12T02:00:23Z", "closed_at": "2020-06-12T02:00:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We already suggest restricting the lifetime of return position `impl Trait` to `'_` when `'static` is inferred, but [we don't do so for `Box<dyn Trait>`](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f784a8b13a73dcdcaa13d35a765f18d6).\r\n\r\nGiven\r\n\r\n```rust\r\nuse std::collections::HashMap;\r\nuse std::iter;\r\n\r\npub trait LocalVariables<E> {\r\n  fn lookup(&self, var: &str) -> Box<dyn Iterator<Item = &E>>;\r\n}\r\n\r\nstruct Foo<E> {\r\n  map: HashMap<String, E>,\r\n}\r\n\r\nimpl<E> LocalVariables<E> for Foo<E> {\r\n  fn lookup(&self, var: &str) -> Box<dyn Iterator<Item = &E>> {\r\n    Box::new(iter::once(self.map.get(var).unwrap()))\r\n  }\r\n}\r\nimpl<E> Foo<E> {\r\n  fn lookup(&self, var: &str) -> Box<dyn Iterator<Item = &E>> {\r\n    Box::new(iter::once(self.map.get(var).unwrap()))\r\n  }\r\n}\r\n```\r\n\r\n[we now produce](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f784a8b13a73dcdcaa13d35a765f18d6)\r\n\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\r\n  --> src/lib.rs:14:34\r\n   |\r\n14 |     Box::new(iter::once(self.map.get(var).unwrap()))\r\n   |                                  ^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 13:3...\r\n  --> src/lib.rs:13:3\r\n   |\r\n13 | /   fn lookup(&self, var: &str) -> Box<dyn Iterator<Item = &E>> {\r\n14 | |     Box::new(iter::once(self.map.get(var).unwrap()))\r\n15 | |   }\r\n   | |___^\r\nnote: ...so that reference does not outlive borrowed content\r\n  --> src/lib.rs:14:25\r\n   |\r\n14 |     Box::new(iter::once(self.map.get(var).unwrap()))\r\n   |                         ^^^^^^^^\r\n   = note: but, the lifetime must be valid for the static lifetime...\r\nnote: ...so that the expression is assignable\r\n  --> src/lib.rs:14:5\r\n   |\r\n14 |     Box::new(iter::once(self.map.get(var).unwrap()))\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = &E> + 'static)>`\r\n              found  `std::boxed::Box<dyn std::iter::Iterator<Item = &E>>`\r\n\r\nerror[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\r\n  --> src/lib.rs:19:34\r\n   |\r\n19 |     Box::new(iter::once(self.map.get(var).unwrap()))\r\n   |                                  ^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 18:3...\r\n  --> src/lib.rs:18:3\r\n   |\r\n18 | /   fn lookup(&self, var: &str) -> Box<dyn Iterator<Item = &E>> {\r\n19 | |     Box::new(iter::once(self.map.get(var).unwrap()))\r\n20 | |   }\r\n   | |___^\r\nnote: ...so that reference does not outlive borrowed content\r\n  --> src/lib.rs:19:25\r\n   |\r\n19 |     Box::new(iter::once(self.map.get(var).unwrap()))\r\n   |                         ^^^^^^^^\r\n   = note: but, the lifetime must be valid for the static lifetime...\r\nnote: ...so that the expression is assignable\r\n  --> src/lib.rs:19:5\r\n   |\r\n19 |     Box::new(iter::once(self.map.get(var).unwrap()))\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = &E> + 'static)>`\r\n              found  `std::boxed::Box<dyn std::iter::Iterator<Item = &E>>`\r\n```\r\n\r\n[and even worse, with `#![feature(nll)]`](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=d7af111b57e156584ed5726ac1c6cecd)\r\n\r\n```\r\nerror: lifetime may not live long enough\r\n  --> src/lib.rs:15:5\r\n   |\r\n14 |   fn lookup(&self, var: &str) -> Box<dyn Iterator<Item = &E>> {\r\n   |             - let's call the lifetime of this reference `'1`\r\n15 |     Box::new(iter::once(self.map.get(var).unwrap()))\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\r\n\r\nerror: lifetime may not live long enough\r\n  --> src/lib.rs:20:5\r\n   |\r\n19 |   fn lookup(&self, var: &str) -> Box<dyn Iterator<Item = &E>> {\r\n   |             - let's call the lifetime of this reference `'1`\r\n20 |     Box::new(iter::once(self.map.get(var).unwrap()))\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\r\n\r\n```\r\n\r\nbut it should suggest using `'_` in all these cases\r\n\r\n```rust\r\npub trait LocalVariables<E> {\r\n  fn lookup(&self, var: &str) -> Box<dyn Iterator<Item = &E> + '_>;\r\n}\r\n\r\nimpl<E> LocalVariables<E> for Foo<E> {\r\n  fn lookup(&self, var: &str) -> Box<dyn Iterator<Item = &E> + '_> {\r\n    Box::new(iter::once(self.map.get(var).unwrap()))\r\n  }\r\n}\r\nimpl<E> Foo<E> {\r\n  fn lookup(&self, var: &str) -> Box<dyn Iterator<Item = &E> + '_> {\r\n    Box::new(iter::once(self.map.get(var).unwrap()))\r\n  }\r\n}\r\n```", "closed_by": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72147/timeline", "performed_via_github_app": null, "state_reason": "completed"}