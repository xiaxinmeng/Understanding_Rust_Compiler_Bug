{"url": "https://api.github.com/repos/rust-lang/rust/issues/100284", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100284/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100284/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100284/events", "html_url": "https://github.com/rust-lang/rust/issues/100284", "id": 1332181285, "node_id": "I_kwDOAAsO6M5PZ3kl", "number": 100284, "title": "cargo fix --broken-code does not generate stubs for trait impls despite the error message containing the appropriate stubs", "user": {"login": "SoniEx2", "id": 1779619, "node_id": "MDQ6VXNlcjE3Nzk2MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1779619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SoniEx2", "html_url": "https://github.com/SoniEx2", "followers_url": "https://api.github.com/users/SoniEx2/followers", "following_url": "https://api.github.com/users/SoniEx2/following{/other_user}", "gists_url": "https://api.github.com/users/SoniEx2/gists{/gist_id}", "starred_url": "https://api.github.com/users/SoniEx2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SoniEx2/subscriptions", "organizations_url": "https://api.github.com/users/SoniEx2/orgs", "repos_url": "https://api.github.com/users/SoniEx2/repos", "events_url": "https://api.github.com/users/SoniEx2/events{/privacy}", "received_events_url": "https://api.github.com/users/SoniEx2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-08-08T17:34:38Z", "updated_at": "2022-08-09T11:52:11Z", "closed_at": "2022-08-09T05:29:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\n```text\r\n$ cargo fix --broken-code --allow-dirty\r\n    Checking datafu v0.1.0 (/home/soniex2/git/selfhosted/rust.datafu)\r\nwarning: failed to automatically apply fixes suggested by rustc to crate `datafu`\r\n\r\nafter fixes were automatically applied the compiler reported errors within these files:\r\n\r\n  * /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/macros/mod.rs\r\n  * src/vm/de.rs\r\n\r\nThis likely indicates a bug in either rustc or cargo itself,\r\nand we would appreciate a bug report! You're likely to see \r\na number of compiler warnings after this message which cargo\r\nattempted to fix but failed. If you could open an issue at\r\nhttps://github.com/rust-lang/rust/issues\r\nquoting the full output of this command we'd be very appreciative!\r\nNote that you may be able to make some more progress in the near-term\r\nfixing code with the `--broken-code` flag\r\n\r\nThe following errors were reported:\r\nerror[E0046]: not all trait items implemented, missing: `deserialize_any`, `deserialize_bool`, `deserialize_i8`, `deserialize_i16`, `deserialize_i32`, `deserialize_i64`, `deserialize_u8`, `deserialize_u16`, `deserialize_u32`, `deserialize_u64`, `deserialize_f32`, `deserialize_f64`, `deserialize_char`, `deserialize_str`, `deserialize_string`, `deserialize_bytes`, `deserialize_byte_buf`, `deserialize_option`, `deserialize_unit`, `deserialize_unit_struct`, `deserialize_newtype_struct`, `deserialize_seq`, `deserialize_tuple`, `deserialize_tuple_struct`, `deserialize_map`, `deserialize_struct`, `deserialize_enum`, `deserialize_identifier`, `deserialize_ignored_any`\r\n  --> src/vm/de.rs:18:1\r\n   |\r\n18 | / impl<'de, Der> serde::Deserializer<'de> for Deserializer<Der>\r\n19 | | where\r\n20 | |     Der: serde::Deserializer<'de>\r\n21 | | {\r\n22 | |     type Error = Der::Error;\r\n23 | | }\r\n   | |_^ missing `deserialize_any`, `deserialize_bool`, `deserialize_i8`, `deserialize_i16`, `deserialize_i32`, `deserialize_i64`, `deserialize_u8`, `deserialize_u16`, `deserialize_u32`, `deserialize_u64`, `deserialize_f32`, `deserialize_f64`, `deserialize_char`, `deserialize_str`, `deserialize_string`, `deserialize_bytes`, `deserialize_byte_buf`, `deserialize_option`, `deserialize_unit`, `deserialize_unit_struct`, `deserialize_newtype_struct`, `deserialize_seq`, `deserialize_tuple`, `deserialize_tuple_struct`, `deserialize_map`, `deserialize_struct`, `deserialize_enum`, `deserialize_identifier`, `deserialize_ignored_any` in implementation\r\n   |\r\n   = help: implement the missing item: `fn deserialize_any<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_bool<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_i8<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_i16<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_i32<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_i64<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_u8<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_u16<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_u32<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_u64<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_f32<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_f64<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_char<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_str<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_string<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_bytes<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_byte_buf<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_option<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_unit<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_unit_struct<V>(self, _: &'static str, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_newtype_struct<V>(self, _: &'static str, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_seq<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_tuple<V>(self, _: usize, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_tuple_struct<V>(self, _: &'static str, _: usize, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_map<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_struct<V>(self, _: &'static str, _: &'static [&'static str], _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_enum<V>(self, _: &'static str, _: &'static [&'static str], _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_identifier<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_ignored_any<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n\r\nwarning: unreachable expression\r\n  --> src/vm/de.rs:12:9\r\n   |\r\n12 | /         Self {\r\n13 | |             _der: todo!()\r\n   | |                   ------- any code following this expression is unreachable\r\n14 | |         }\r\n   | |_________^ unreachable expression\r\n   |\r\n   = note: `#[warn(unreachable_code)]` on by default\r\n\r\nerror: aborting due to previous error; 1 warning emitted\r\n\r\nFor more information about this error, try `rustc --explain E0046`.\r\nOriginal diagnostics will follow.\r\n\r\nerror[E0046]: not all trait items implemented, missing: `deserialize_any`, `deserialize_bool`, `deserialize_i8`, `deserialize_i16`, `deserialize_i32`, `deserialize_i64`, `deserialize_u8`, `deserialize_u16`, `deserialize_u32`, `deserialize_u64`, `deserialize_f32`, `deserialize_f64`, `deserialize_char`, `deserialize_str`, `deserialize_string`, `deserialize_bytes`, `deserialize_byte_buf`, `deserialize_option`, `deserialize_unit`, `deserialize_unit_struct`, `deserialize_newtype_struct`, `deserialize_seq`, `deserialize_tuple`, `deserialize_tuple_struct`, `deserialize_map`, `deserialize_struct`, `deserialize_enum`, `deserialize_identifier`, `deserialize_ignored_any`\r\n  --> src/vm/de.rs:18:1\r\n   |\r\n18 | / impl<'de, Der> serde::Deserializer<'de> for Deserializer<Der>\r\n19 | | where\r\n20 | |     Der: serde::Deserializer<'de>\r\n21 | | {\r\n22 | |     type Error = Der::Error;\r\n23 | | }\r\n   | |_^ missing `deserialize_any`, `deserialize_bool`, `deserialize_i8`, `deserialize_i16`, `deserialize_i32`, `deserialize_i64`, `deserialize_u8`, `deserialize_u16`, `deserialize_u32`, `deserialize_u64`, `deserialize_f32`, `deserialize_f64`, `deserialize_char`, `deserialize_str`, `deserialize_string`, `deserialize_bytes`, `deserialize_byte_buf`, `deserialize_option`, `deserialize_unit`, `deserialize_unit_struct`, `deserialize_newtype_struct`, `deserialize_seq`, `deserialize_tuple`, `deserialize_tuple_struct`, `deserialize_map`, `deserialize_struct`, `deserialize_enum`, `deserialize_identifier`, `deserialize_ignored_any` in implementation\r\n   |\r\n   = help: implement the missing item: `fn deserialize_any<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_bool<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_i8<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_i16<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_i32<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_i64<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_u8<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_u16<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_u32<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_u64<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_f32<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_f64<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_char<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_str<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_string<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_bytes<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_byte_buf<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_option<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_unit<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_unit_struct<V>(self, _: &'static str, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_newtype_struct<V>(self, _: &'static str, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_seq<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_tuple<V>(self, _: usize, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_tuple_struct<V>(self, _: &'static str, _: usize, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_map<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_struct<V>(self, _: &'static str, _: &'static [&'static str], _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_enum<V>(self, _: &'static str, _: &'static [&'static str], _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_identifier<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n   = help: implement the missing item: `fn deserialize_ignored_any<V>(self, _: V) -> Result<<V as Visitor<'de>>::Value, <Self as serde::Deserializer<'de>>::Error> where V: Visitor { todo!() }`\r\n\r\nwarning: unreachable expression\r\n  --> src/vm/de.rs:12:9\r\n   |\r\n12 | /         Self {\r\n13 | |             _der: todo!()\r\n   | |                   ------- any code following this expression is unreachable\r\n14 | |         }\r\n   | |_________^ unreachable expression\r\n   |\r\n   = note: `#[warn(unreachable_code)]` on by default\r\n\r\nFor more information about this error, try `rustc --explain E0046`.\r\nwarning: `datafu` (lib) generated 1 warning (1 duplicate)\r\nerror: could not compile `datafu` due to previous error; 1 warning emitted\r\nwarning: build failed, waiting for other jobs to finish...\r\nwarning: `datafu` (lib test) generated 1 warning\r\nerror: build failed\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\n$ rustc --version --verbose\r\nrustc 1.60.0 (7737e0b5c 2022-04-04)\r\nbinary: rustc\r\ncommit-hash: 7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c\r\ncommit-date: 2022-04-04\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.60.0\r\nLLVM version: 14.0.0\r\n```\r\n\r\n(this also applies to 1.62.1 but it doesn't suggest making a bug report for it)\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100284/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}