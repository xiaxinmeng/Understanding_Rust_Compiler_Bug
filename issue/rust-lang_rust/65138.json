{"url": "https://api.github.com/repos/rust-lang/rust/issues/65138", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65138/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65138/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65138/events", "html_url": "https://github.com/rust-lang/rust/issues/65138", "id": 503008207, "node_id": "MDU6SXNzdWU1MDMwMDgyMDc=", "number": 65138, "title": "SIGSEGV in LLVM", "user": {"login": "iankronquist", "id": 5192353, "node_id": "MDQ6VXNlcjUxOTIzNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5192353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iankronquist", "html_url": "https://github.com/iankronquist", "followers_url": "https://api.github.com/users/iankronquist/followers", "following_url": "https://api.github.com/users/iankronquist/following{/other_user}", "gists_url": "https://api.github.com/users/iankronquist/gists{/gist_id}", "starred_url": "https://api.github.com/users/iankronquist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iankronquist/subscriptions", "organizations_url": "https://api.github.com/users/iankronquist/orgs", "repos_url": "https://api.github.com/users/iankronquist/repos", "events_url": "https://api.github.com/users/iankronquist/events{/privacy}", "received_events_url": "https://api.github.com/users/iankronquist/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-05T19:53:54Z", "updated_at": "2019-10-09T19:33:26Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I was trying to compile some x86 early boot code and encountered a SIGSEGV in LLVM:\r\n```\r\n* thread #4, stop reason = EXC_BAD_ACCESS (code=1, address=0x18)\r\n  * frame #0: 0x00000001061cca13 librustc_codegen_llvm-llvm.dylib`(anonymous namespace)::MachineLICMBase::IsLoopInvariantInst(llvm::MachineInstr&) + 259\r\n    frame #1: 0x00000001061c85c3 librustc_codegen_llvm-llvm.dylib`(anonymous namespace)::MachineLICMBase::runOnMachineFunction(llvm::MachineFunction&) + 3827\r\n    frame #2: 0x00000001061bb9e9 librustc_codegen_llvm-llvm.dylib`llvm::MachineFunctionPass::runOnFunction(llvm::Function&) + 281\r\n    frame #3: 0x0000000106a4f798 librustc_codegen_llvm-llvm.dylib`llvm::FPPassManager::runOnFunction(llvm::Function&) + 808\r\n    frame #4: 0x0000000106a4faf3 librustc_codegen_llvm-llvm.dylib`llvm::FPPassManager::runOnModule(llvm::Module&) + 131\r\n    frame #5: 0x0000000106a4ff39 librustc_codegen_llvm-llvm.dylib`llvm::legacy::PassManagerImpl::run(llvm::Module&) + 857\r\n    frame #6: 0x0000000105187a82 librustc_codegen_llvm-llvm.dylib`LLVMRustWriteOutputFile + 562\r\n    frame #7: 0x000000010514d2b6 librustc_codegen_llvm-llvm.dylib`rustc_codegen_llvm::back::write::write_output_file::hbc571aa7d02fc516 (.llvm.673626991590052633) + 86\r\n    frame #8: 0x000000010509e4f9 librustc_codegen_llvm-llvm.dylib`rustc_codegen_llvm::back::write::codegen::_$u7b$$u7b$closure$u7d$$u7d$::hc9d89ef4b7f2ee38 (.llvm.113447327635721745) + 1225\r\n    frame #9: 0x000000010509a983 librustc_codegen_llvm-llvm.dylib`rustc::util::common::time_ext::h4b9d4c0b3d1fd8b0 + 163\r\n    frame #10: 0x000000010515084e librustc_codegen_llvm-llvm.dylib`rustc_codegen_llvm::back::write::codegen::h4e68325a1f78b6c4 + 3198\r\n    frame #11: 0x0000000105049a7f librustc_codegen_llvm-llvm.dylib`rustc_codegen_ssa::back::write::execute_work_item::h259f7cf32e76685c + 495\r\n    frame #12: 0x00000001050881f1 librustc_codegen_llvm-llvm.dylib`std::sys_common::backtrace::__rust_begin_short_backtrace::h78716bd57684f926 + 241\r\n    frame #13: 0x000000010505379b librustc_codegen_llvm-llvm.dylib`std::panicking::try::do_call::hfb19d5a4eb5b64d5 (.llvm.18289163052277610129) + 43\r\n    frame #14: 0x0000000102d3e45f libstd-3f46da93ba755ab0.dylib`__rust_maybe_catch_panic + 31\r\n    frame #15: 0x0000000105053ab6 librustc_codegen_llvm-llvm.dylib`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::hacde5084140c3890 + 134\r\n    frame #16: 0x0000000102d1068e libstd-3f46da93ba755ab0.dylib`_$LT$alloc..boxed..Box$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$A$GT$$GT$::call_once::h40bf035471a23543 + 62\r\n    frame #17: 0x0000000102d3d26e libstd-3f46da93ba755ab0.dylib`std::sys::unix::thread::Thread::new::thread_start::h112df5042d5a4204 + 142\r\n    frame #18: 0x00007fff7ca7d661 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #19: 0x00007fff7ca7d50d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #20: 0x00007fff7ca7cbf9 libsystem_pthread.dylib`thread_start + 13\r\n\r\n```\r\nIt looks like the assertion here would fail, if assertions were enabled in the LLVM rust was built with:\r\nhttps://elixir.bootlin.com/llvm/latest/source/llvm/lib/CodeGen/MachineLICM.cpp#L1043\r\n\r\nHere's my target specification:\r\n```json\r\n{\r\n  \"arch\": \"x86\",\r\n  \"cpu\": \"pentium4\",\r\n  \"crt-static-default\": true,\r\n  \"crt-static-respected\": true,\r\n  \"data-layout\": \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\",\r\n  \"dynamic-linking\": true,\r\n  \"eliminate-frame-pointer\": false,\r\n  \"env\": \"musl\",\r\n  \"executables\": true,\r\n  \"has-elf-tls\": true,\r\n  \"has-rpath\": true,\r\n  \"is-builtin\": true,\r\n  \"linker-flavor\": \"gcc\",\r\n  \"linker-is-gnu\": true,\r\n  \"llvm-target\": \"i686-unknown-linux-musl\",\r\n  \"max-atomic-width\": 64,\r\n  \"os\": \"none\",\r\n  \"position-independent-executables\": true,\r\n  \"post-link-objects-crt\": [\r\n    \"crtn.o\"\r\n  ],\r\n  \"pre-link-args\": {\r\n    \"gcc\": [\r\n      \"-Wl,--as-needed\",\r\n      \"-Wl,-z,noexecstack\",\r\n      \"-Wl,--eh-frame-hdr\",\r\n      \"-m32\",\r\n      \"-Wl,-melf_i386\"\r\n    ]\r\n  },\r\n  \"pre-link-args-crt\": {\r\n    \"gcc\": [\r\n      \"-nostdlib\"\r\n    ]\r\n  },\r\n  \"pre-link-objects-exe-crt\": [\r\n    \"crt1.o\",\r\n    \"crti.o\"\r\n  ],\r\n  \"relro-level\": \"full\",\r\n  \"stack-probes\": false,\r\n  \"target-c-int-width\": \"32\",\r\n  \"target-endian\": \"little\",\r\n  \"target-family\": \"none\",\r\n  \"target-pointer-width\": \"32\",\r\n  \"panic-strategy\": \"abort\",\r\n  \"features\": \"-mmx,-sse,+soft-float\",\r\n  \"vendor\": \"unknown\"\r\n}\r\n```\r\n\r\nHere is my minimal repro:\r\n```rust\r\n#![no_std]\r\n#![feature(asm)]\r\n#![feature(start)]\r\n#![feature(const_fn)]\r\n#![feature(lang_items)]\r\n#![crate_type = \"staticlib\"]\r\nuse core::panic::PanicInfo;\r\nuse core::fmt::Write;\r\nuse core::fmt;\r\n\r\nconst VGA_START: *mut u16 = 0xb8000 as *mut u16;\r\nconst VGA_ENTRY_COUNT: usize = 0x1000 / core::mem::size_of::<u16>();\r\n// Black on green.\r\nconst TEXT_COLOR: u16 = 0x200;\r\n\r\npub struct VgaConsole {\r\n    cursor: usize,\r\n}\r\npub const VGA_CONSOLE: VgaConsole = VgaConsole { cursor: 0 };\r\n\r\n\r\nimpl fmt::Write for VgaConsole {\r\n    fn write_str(&mut self, s: &str) -> Result<(), fmt::Error> {\r\n        for c in s.chars() {\r\n            // This has been heavily mangled to minimize the repro.\r\n            let vga_region = unsafe { core::slice::from_raw_parts_mut(VGA_START, VGA_ENTRY_COUNT) };\r\n            vga_region[self.cursor] = c as u16 | TEXT_COLOR;\r\n            self.cursor += 1;\r\n        }\r\n        Ok(())\r\n    }\r\n}\r\n\r\n\r\npub fn inw(port: u16) -> u16 {\r\n    let mut w: u16;\r\n    unsafe {\r\n        asm!(\"inw %dx, %ax\" : \"={ax}\"(w) : \"{dx}\"(port));\r\n    }\r\n    w\r\n}\r\n\r\n\r\npub const SECTOR_SIZE   :usize = 512;\r\npub struct Drive {\r\n    command_port: u16,\r\n    data_port: u16,\r\n    is_primary : bool,\r\n}\r\n\r\n// ATAPI implementation minimized for the repro\r\nimpl Drive {\r\n    pub fn identify(&self) {\r\n        // read model\r\n        let mut model: [u16; 256] = [0; 256];\r\n\r\n        for i in 0..model.len() {\r\n            model[i] = inw(self.data_port);\r\n            let _ = write!(VGA_CONSOLE, \"{:x}\", model[i]);\r\n        }\r\n    }\r\n}\r\n\r\nfn hang() -> ! {\r\n    loop {\r\n        unsafe {\r\n            asm!(\"cli; hlt;\");\r\n        }\r\n    }\r\n}\r\n\r\n#[no_mangle]\r\npub extern \"C\" fn rmain() {\r\n    let boot_disk = Drive { command_port: 0x3f0, data_port: 0x1f0, is_primary: true, };\r\n    boot_disk.identify();\r\n}\r\n\r\n#[panic_handler]\r\n#[no_mangle]\r\npub fn panic(info: &PanicInfo) -> ! {\r\n    hang();\r\n}\r\n\r\n\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65138/timeline", "performed_via_github_app": null, "state_reason": null}