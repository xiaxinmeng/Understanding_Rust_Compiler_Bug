{"url": "https://api.github.com/repos/rust-lang/rust/issues/8865", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/8865/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/8865/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/8865/events", "html_url": "https://github.com/rust-lang/rust/issues/8865", "id": 18759404, "node_id": "MDU6SXNzdWUxODc1OTQwNA==", "number": 8865, "title": "make -jN: unpack_snapshot's cleaning can interfere with libuv build products", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-08-29T21:46:39Z", "updated_at": "2013-09-26T22:35:03Z", "closed_at": "2013-09-01T01:40:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "On Mac OS X, when I run `time remake --trace -j8` from a clean checkout, three things can occur in parallel:\n1. Running `get-snapshot.py`, which is largely consumed by downloading the snapshot\n2. Building LLVM\n3. Building libuv and associated products, and copying them into place.\n\nIn particular, libmorestack.a is first built as part of libuv and then copied into \n  `x86_64-apple-darwin/stage0/lib/rustc/x86_64-apple-darwin/lib/libmorestack.a`\n\nBut part of what `get-snapshot.py` does is to clean out the target area of the unpacking before doing the current unpacking.  (I added that code for fixing #3225 .) \n\nAnd in a sequential build, this cleaning step usually happens before the libuv building steps; but for a parallel build, the steps can be reordered.\n\nThe reason the re-ordering matters is: It looks like the net that get-snapshot.py is a bit too broad, and it ends up deleting the `libmorestack.a` that it had copied over, among other things:\n\n```\nopening snapshot dl/rust-stage0-2013-08-14-e7b5729-macos-x86_64-f44aba76e9d7a9a28b8a6dd78f14576e7c84fbf3.tar.bz2\nremoving x86_64-apple-darwin/stage0/lib/rustc/x86_64-apple-darwin/lib/libmorestack.a\nremoving x86_64-apple-darwin/stage0/lib/rustc/x86_64-apple-darwin/lib/librustllvm.dylib\nremoving x86_64-apple-darwin/stage0/lib/rustc/x86_64-apple-darwin/lib/librustrt.dylib\nextracting rust-stage0/bin/rustc\nextracting rust-stage0/lib/libstd-6c65cf4b443341b1-0.8-pre.dylib\nextracting rust-stage0/lib/libextra-a7c050cfd46b2c9a-0.8-pre.dylib\nextracting rust-stage0/lib/librustc-d3cb8c2ccd84a7a7-0.8-pre.dylib\nextracting rust-stage0/lib/libsyntax-64629f7f0c6a9bc-0.8-pre.dylib\nextracting rust-stage0/lib/librustrt.dylib\nextracting rust-stage0/lib/librustllvm.dylib\n```\n\nSo, to fix this, either:\n1. get-snapshot.py could be restricted in what paths it deletes; it can't hard-code them, since it needs to match previous snapshot's SHA's, but there is potentially a simpler strategy we could adopt.  Or,\n2. The libuv (and perhaps also the llvm) builds could be forced to wait until the snapshot has been unpacked. Or at least the copies of their products into the target area.  Or,\n3. We could refactor the cleaning step as a separate action from grabbing the snapshot, and force that to run before all three of the above parallel actions.\n\nAnyway, I've become sort of the local make guru, so I'll see what I can do about this.  It probably only affects people who do `make -jK` for large/interesting K, and the problem often goes away on subsequent runs of make once the prior run's intermediate build products are in place.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/8865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/8865/timeline", "performed_via_github_app": null, "state_reason": "completed"}