{"url": "https://api.github.com/repos/rust-lang/rust/issues/40614", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/40614/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/40614/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/40614/events", "html_url": "https://github.com/rust-lang/rust/issues/40614", "id": 215115307, "node_id": "MDU6SXNzdWUyMTUxMTUzMDc=", "number": 40614, "title": "[incremental] remove unwanted `DepTrackingMap` methods", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-03-17T20:34:55Z", "updated_at": "2017-05-30T19:22:40Z", "closed_at": "2017-05-30T19:22:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the current model, it is common to start an incremental task T and have it read some nodes (R) and then write some values (W). This creates a dependency between R and W as shown:\r\n\r\n    R -> T -> W\r\n\r\nBut we are planning to migrate to a more \"on-demand\" model. In that case, the idea is that you don't \"start tasks\" that have side-effects, rather you \"demand things you want\". So the right way would be to \"demand\" W, which then (if not already computed) executes a task (via the `ty::queries` machinery). This task adopts the dep node W and reads whatever data it needs (the task starts with no context). This results then in a graph like this:\r\n\r\n    R -> W\r\n\r\nIn order to transition to this new beautiful vision, I've been searching for the right things to refactor. I think the right plan is to try and remove uses of the following `DepTrackingMap` methods (except for those that are within the `ty::queries` machinery itself):\r\n\r\n- `insert()`\r\n- `entry()`\r\n- `push()`\r\n\r\nIn [my incr-comp-memoize branch][branch], I've [got a commit][c] that renames those methods to `__insert__()` etc so as to easily identify all the places that they are called. I've gone through them and identified how I think each should be transitioned to a query, which is described below. \r\n\r\nOnce this is done, the next logical step is to move on to the other methods of `DepTrackingMap`, since eventually I would like the existence of those maps to be completely encapsulated behind queries.\r\n\r\n[branch]: https://github.com/nikomatsakis/rust/tree/incr-comp-memoize\r\n[c]: https://github.com/nikomatsakis/rust/commit/7c3d2f729de8e3597d91d0b85619afde814afcea\r\n\r\n[c2]: https://github.com/nikomatsakis/rust/commit/462e91a20a04bb8270060331a6c29515ba105355\r\n\r\n- [x] **custom coerce unsized kind**. This is being computed at the same time that coherence checks `CoerceUnsized` impls for errors. To handle this, I [made a `coerce_unsized_info` task that can be executed on **any** `CoerceUnsized` impl][c2] (and indeed **must** be executed on all of them). coherence invokes this task, but so does anything later that just wants to extract the kind. #40683\r\n- [x] **associated items**. This one is fairly easy. Right now, when we compute `AssociatedItem(X)`,  where `X` is some associated item, we do so by reading the **impl/trait that contains `X`**, and not `X` itself (this is important to avoid undue contamination; won't be needed under red-green system). Since we're reading the impl/trait, we currently wind up generating all the associated items in that impl/trait at the same time. We can just refactor this to extract the one we are interested in. It does mean \"O(N^2)\" work in some sense, but the `N` here is really quite small (i.e., for each item in an impl, we'll scan the list of items in the impl, so N is the average number of items in an impl or trait). #40668 \r\n- [x] **adt def**.  I'm not 100% sure what's going on here; we publish the adt-def for an item X, sometimes, with two def-ids (one for the constructor as well). Hopefully, we can fix this by either not doing that, or by having a request for the constructor just get redirected to the item that it is a constructor of. https://github.com/rust-lang/rust/pull/40696\r\n- [x] **monomorphic const eval**. I don't have a plan here yet, have to dig a bit more deeply.\r\n- [x] **inherent impls** https://github.com/rust-lang/rust/pull/40683 and...\r\n- [ ] ...**variances**. These two are a bit complex. They both fit the pattern where you kind of want to scrape a whole bunch of stuff to compute the final result. The naive dependencies here mean that if you're not careful you have each item (e.g. Variance(X) for all X) depending on the entire crate. This will be ok in the red-green system, since if they haven't actually changed we'll limit the damage, but in the current system it's a pain. To side-step this, I think we should adopt the following pattern:\r\n\r\n- have a single task that computes a global map (i.e., a map from each struct to its inherent impls, and a map from each struct to its variance).\r\n- when you request a specific item (e.g., `InherentImpls(S)` for some struct/enum S), we issue a query for the global map, but we use a `dep_graph.with_ignore()` to hide this dependency. This will avoid creating an edge from `* -> InherentImpls(X)`, but we have to make sure to insert the correct (more minimal) edges. How we do this depends on the case, but it basically is us inserting the right edge from \"first principles\" (this goes against our overall design, which aims to *observe* what the compiler does rather than dictate, but we'll refactor it eventually in the red-green system).\r\n\r\nIn the case of inherent impls, if `InherentImpls(S)` maps to a vector of impl def-ids `V`, we will create an edge `Hir(v) -> InherentImpls(S)` for each def-id `v` in `V`.\r\n\r\nIn the case of variances, the code already has some treatment where it figures out what are a minimal set of dependencies (documented in the variance README). We'll have to reproduce that. I have some other thoughts but no time to write them down just now; this is one of the more complicated cases, anyhow.\r\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/40614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/40614/timeline", "performed_via_github_app": null, "state_reason": "completed"}