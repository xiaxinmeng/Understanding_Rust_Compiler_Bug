{"url": "https://api.github.com/repos/rust-lang/rust/issues/60231", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60231/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60231/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60231/events", "html_url": "https://github.com/rust-lang/rust/issues/60231", "id": 436580016, "node_id": "MDU6SXNzdWU0MzY1ODAwMTY=", "number": 60231, "title": "Creating shared WebAssembly library", "user": {"login": "nomeata", "id": 148037, "node_id": "MDQ6VXNlcjE0ODAzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/148037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nomeata", "html_url": "https://github.com/nomeata", "followers_url": "https://api.github.com/users/nomeata/followers", "following_url": "https://api.github.com/users/nomeata/following{/other_user}", "gists_url": "https://api.github.com/users/nomeata/gists{/gist_id}", "starred_url": "https://api.github.com/users/nomeata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nomeata/subscriptions", "organizations_url": "https://api.github.com/users/nomeata/orgs", "repos_url": "https://api.github.com/users/nomeata/repos", "events_url": "https://api.github.com/users/nomeata/events{/privacy}", "received_events_url": "https://api.github.com/users/nomeata/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2019-04-24T09:05:30Z", "updated_at": "2022-07-14T16:05:10Z", "closed_at": "2020-07-09T13:03:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to build a shared WebAssembly library (in the sense of https://github.com/WebAssembly/tool-conventions/blob/master/DynamicLinking.md) from Rust.\r\n\r\nThe following looks promising:\r\n```\r\n#![no_main]\r\n#![feature(link_args)]\r\n#![allow(unused_attributes)]\r\n#![link_args = \"--import-memory\"]\r\n#![link_args = \"--shared\"]\r\n\r\n// no_std just to make the output smaller and easier to understand\r\n#![no_std]\r\n#![feature(lang_items)]\r\n#[lang = \"eh_personality\"] extern fn eh_personality() {}\r\nuse core::panic::PanicInfo;\r\n#[panic_handler]\r\nfn panic(_info: &PanicInfo) -> ! { loop {} }\r\n\r\n\r\n#[link(wasm_import_module = \"import\")]\r\nextern { pub fn foo(ptr : *const u8); }\r\n\r\n\r\n#[export_name = \"start\"]\r\npub unsafe fn start() {\r\n    foo(\"Hi\".as_ptr());\r\n}\r\n```\r\nIf  I compile this (using `--target wasm32-unknown-unknown`), I get the following code:\r\n```\r\n(module\r\n (type $0 (func (param i32)))\r\n (type $1 (func))\r\n (type $2 (func (param i32 i32) (result i32)))\r\n (import \"env\" \"memory\" (memory $0 0))\r\n (import \"env\" \"__indirect_function_table\" (table 0 anyfunc))\r\n (import \"env\" \"__stack_pointer\" (global $gimport$2 i32))\r\n (import \"env\" \"__memory_base\" (global $gimport$3 i32))\r\n (import \"env\" \"__table_base\" (global $gimport$4 i32))\r\n (import \"import\" \"foo\" (func $foo (param i32)))\r\n (global $global$0 i32 (i32.const 0))\r\n (data (get_global $gimport$3) \"\\01gdb_load_rust_pretty_printers.py\\00Hi\")\r\n (export \"__rustc_debug_gdb_scripts_section__\" (global $global$0))\r\n (export \"start\" (func $start))\r\n (func $__wasm_call_ctors (; 1 ;) (type $1)\r\n )\r\n (func $_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17hd1ab9e60453863b8E (; 2 ;) (type $2) (param $var$0 i32) (param $var$1 i32) (result i32)\r\n  (local $var$2 i32)\r\n  (local $var$3 i32)\r\n  (local $var$4 i32)\r\n  (local $var$5 i32)\r\n  (set_local $var$2\r\n   (get_global $gimport$2)\r\n  )\r\n  (set_local $var$3\r\n   (i32.const 16)\r\n  )\r\n  (set_local $var$4\r\n   (i32.sub\r\n    (get_local $var$2)\r\n    (get_local $var$3)\r\n   )\r\n  )\r\n  (i32.store offset=8\r\n   (get_local $var$4)\r\n   (get_local $var$0)\r\n  )\r\n  (i32.store offset=12\r\n   (get_local $var$4)\r\n   (get_local $var$1)\r\n  )\r\n  (set_local $var$5\r\n   (i32.load offset=8\r\n    (get_local $var$4)\r\n   )\r\n  )\r\n  (return\r\n   (get_local $var$5)\r\n  )\r\n )\r\n (func $start (; 3 ;) (type $1)\r\n  (local $var$0 i32)\r\n  (local $var$1 i32)\r\n  (local $var$2 i32)\r\n  (local $var$3 i32)\r\n  (set_local $var$0\r\n   (i32.const 34)\r\n  )\r\n  (set_local $var$1\r\n   (get_local $var$0)\r\n  )\r\n  (set_local $var$2\r\n   (i32.const 2)\r\n  )\r\n  (set_local $var$3\r\n   (call $_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17hd1ab9e60453863b8E\r\n    (get_local $var$1)\r\n    (get_local $var$2)\r\n   )\r\n  )\r\n  (call $foo\r\n   (get_local $var$3)\r\n  )\r\n  (return)\r\n )\r\n ;; custom section \"dylink\", size 5\r\n ;; custom section \".debug_info\", size 1748\r\n ;; custom section \".debug_macinfo\", size 2\r\n ;; custom section \".debug_pubtypes\", size 959\r\n ;; custom section \".debug_ranges\", size 32\r\n ;; custom section \".debug_abbrev\", size 401\r\n ;; custom section \".debug_line\", size 280\r\n ;; custom section \".debug_str\", size 1569\r\n ;; custom section \".debug_pubnames\", size 235\r\n ;; custom section \"producers\", size 79\r\n)\r\n```\r\n\r\nIt is very promising that this module imports `__stack_pointer` and `__memory_base`, and that it puts the static data (`\"\\01gdb_load_rust_pretty_printers.py\\00Hi\"`) at a position that is determined by the imported `__memory_base`.\r\n\r\nBut when the code actually references the `Hi` string, in function `start`, it simply uses an absolute pointer, without shifting it by `__memory_base`:\r\n\r\n```\r\n  (set_local $var$0\r\n   (i32.const 34)\r\n  )\r\n```\r\n\r\nso this does not seem to be working yet.\r\n\r\nIs there a flag I am using wrong? Or is this just not yet supported?\r\n\r\n```\r\n$ rustc --version\r\nrustc 1.35.0-nightly (3750348da 2019-04-08)\r\n```", "closed_by": {"login": "nomeata", "id": 148037, "node_id": "MDQ6VXNlcjE0ODAzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/148037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nomeata", "html_url": "https://github.com/nomeata", "followers_url": "https://api.github.com/users/nomeata/followers", "following_url": "https://api.github.com/users/nomeata/following{/other_user}", "gists_url": "https://api.github.com/users/nomeata/gists{/gist_id}", "starred_url": "https://api.github.com/users/nomeata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nomeata/subscriptions", "organizations_url": "https://api.github.com/users/nomeata/orgs", "repos_url": "https://api.github.com/users/nomeata/repos", "events_url": "https://api.github.com/users/nomeata/events{/privacy}", "received_events_url": "https://api.github.com/users/nomeata/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60231/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60231/timeline", "performed_via_github_app": null, "state_reason": "completed"}