{"url": "https://api.github.com/repos/rust-lang/rust/issues/48537", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48537/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48537/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48537/events", "html_url": "https://github.com/rust-lang/rust/issues/48537", "id": 300065450, "node_id": "MDU6SXNzdWUzMDAwNjU0NTA=", "number": 48537, "title": "\ud83d\udd2c introduce a canonical query for `evaluate_obligation`", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 693557542, "node_id": "MDU6TGFiZWw2OTM1NTc1NDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-traits", "name": "WG-traits", "color": "c2e0c6", "default": false, "description": "Working group: Traits, https://internals.rust-lang.org/t/announcing-traits-working-group/6804"}], "state": "closed", "locked": false, "assignee": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-02-25T21:56:54Z", "updated_at": "2018-04-27T06:30:27Z", "closed_at": "2018-04-27T06:30:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `evaluate_obligation` method of `SelectionContext` has the job of determining whether a given predicate **may hold**:\r\n\r\nhttps://github.com/rust-lang/rust/blob/322d7f7b97f1672bade31e1c43d5753e0e45a1a8/src/librustc/traits/select.rs#L622-L625\r\n\r\nBuilding on the work in https://github.com/rust-lang/rust/pull/48411, this seems like a clean place to introduce a [canonical trait query](https://paper.dropbox.com/doc/Trait-Queries-0QtnuiLiopx937XThEppj). The argument to this query would be canonicalized predicate, combined with an environment:\r\n\r\n```\r\ntype CanonicalPredicateGoal<'tcx> = &'tcx Canonical<ParamEnvAnd<'tcx, Predicate<'tcx>>>\r\n```\r\n\r\nThe query would be something like this:\r\n\r\n```rust\r\n[] fn evaluate_obligation(CanonicalPredicateGoal<'tcx>) -> traits::EvaluationResult\r\n```\r\n\r\nI expect this would follow the pattern introduced in #48411, where the query is not invoked **directly** by end-users. Rather, they invoke a wrapper method defined on the `At` type, [like `normalize` here](https://github.com/nikomatsakis/rust/blob/6c9582b16cbd84250a74bc83cd746ccf85ef3a0f/src/librustc/traits/query/normalize.rs#L28-L44). This method would canonicalize and invoke the underlying query.\r\n\r\nNote that I defined the query to return a `EvaluationResult`, where the current method returns a `bool` -- this would allow the same query to be shared for `evaluate_obligation_conservatively`. I suggest that we rename the `infcx.at().foo()` methods, actually, to be something like this:\r\n\r\n- `infcx.at(...).predicate_may_hold(predicate)` (what is today `evaluate_obligation`)\r\n- `infcx.at(...).predicate_must_hold(predicate)` (what is today `evaluate_obligation_conservatively`)\r\n\r\nBoth of these would return a boolean. \r\n\r\nAnyway, I will try to write up more comprehensive guidelines in the [rustc-guide](https://github.com/rust-lang-nursery/rustc-guide/) describing the pattern for trait queries, and link to them from here. \r\n\r\nIf you are interesting in this task, please feel free to ping me [on gitter](https://gitter.im/rust-lang/WG-traits) for more info!\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48537/timeline", "performed_via_github_app": null, "state_reason": "completed"}