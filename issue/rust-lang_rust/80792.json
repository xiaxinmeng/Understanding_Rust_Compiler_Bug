{"url": "https://api.github.com/repos/rust-lang/rust/issues/80792", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80792/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80792/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80792/events", "html_url": "https://github.com/rust-lang/rust/issues/80792", "id": 781513167, "node_id": "MDU6SXNzdWU3ODE1MTMxNjc=", "number": 80792, "title": "Add option to pass environment variables to rustc with a flag", "user": {"login": "dcbaker", "id": 1779595, "node_id": "MDQ6VXNlcjE3Nzk1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1779595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcbaker", "html_url": "https://github.com/dcbaker", "followers_url": "https://api.github.com/users/dcbaker/followers", "following_url": "https://api.github.com/users/dcbaker/following{/other_user}", "gists_url": "https://api.github.com/users/dcbaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcbaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcbaker/subscriptions", "organizations_url": "https://api.github.com/users/dcbaker/orgs", "repos_url": "https://api.github.com/users/dcbaker/repos", "events_url": "https://api.github.com/users/dcbaker/events{/privacy}", "received_events_url": "https://api.github.com/users/dcbaker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-01-07T18:19:47Z", "updated_at": "2021-01-07T21:11:32Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "See #78913 for more background.\r\n\r\nI'm a meson developer, working to make rust work better with meson. I know that cargo is the official build system for rust, but for me and the projects I work on cargo is unacceptable, we have a *massive* C/C++ codebase already using meson, with interest in migrating some (but not all) of our code to rust. Mostly things work fine, but one problem we do have is including generated code.\r\n\r\nCargo handles generated code by setting an `OUT_DIR` environment variable, this works for cargo because it has a number of unique design decisions compared to most build systems. For Cmake and meson and particular this is problematic because we generate a declarative build system which the user invokes, visual-studio, ninja, make, etc; so there are separate \"configure\" and \"build\" stages. For ninja in particular environment variables are problematic because it's made an explicit design choice not to support them. As such, we have no way to set environment variables at build time without resorting to something ugly like wrapping rustc in a script to proxy the variables.\r\n\r\nWhat would be nice is the ability to pass environment variables to rustc directly, much like `--cfg`, something like `--env \"OUT_DIR=/some/dir\"`. This would allow us to make `include()` work like cargo, but without needing to resort to wrapping rustc and making things slower than they need to be.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80792/reactions", "total_count": 4, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 4, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80792/timeline", "performed_via_github_app": null, "state_reason": null}