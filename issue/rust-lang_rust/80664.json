{"url": "https://api.github.com/repos/rust-lang/rust/issues/80664", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80664/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80664/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80664/events", "html_url": "https://github.com/rust-lang/rust/issues/80664", "id": 777721276, "node_id": "MDU6SXNzdWU3Nzc3MjEyNzY=", "number": 80664, "title": "ICE on rustdoc-json with re-export due to ID collision", "user": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}, {"id": 2682491374, "node_id": "MDU6TGFiZWwyNjgyNDkxMzc0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-rustdoc-json", "name": "A-rustdoc-json", "color": "f7e101", "default": false, "description": "Area: Rustdoc JSON backend"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2021-01-03T21:39:06Z", "updated_at": "2021-04-17T18:33:16Z", "closed_at": "2021-03-26T06:30:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\nmod inner {\r\n    pub struct Public;\r\n}\r\npub use inner::Public as Reexported;\r\n```\r\n\r\n\r\n### Meta\r\nInvoke with `rustdoc broke.rs --output-format json`\r\n\r\n`rustdoc --version --verbose`:\r\n```\r\nrustdoc 1.51.0-nightly (fde692739 2021-01-02)\r\nbinary: rustdoc\r\ncommit-hash: fde692739576089729885b7f79aa2232cb9778c5\r\ncommit-date: 2021-01-02\r\nhost: x86_64-apple-darwin\r\nrelease: 1.51.0-nightly\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'assertion failed: `(left == right)`\r\n  left: `Item { id: Id(\"0:4\"), crate_id: 0, name: Some(\"Reexported\"), source: Some(Span { filename: \"broke.rs\", begin: (2, 4), end: (2, 22) }), visibility: Public, docs: \"\", links: {}, attrs: [], deprecation: None, kind: Struct, inner: StructItem(Struct { struct_type: Unit, generics: Generics { params: [], where_predicates: [] }, fields_stripped: false, fields: [], impls: [Id(\"0:9\"), Id(\"0:10\"), Id(\"0:11\"), Id(\"0:13\"), Id(\"0:14\")] }) }`,\r\n right: `Item { id: Id(\"0:4\"), crate_id: 0, name: Some(\"Public\"), source: Some(Span { filename: \"broke.rs\", begin: (2, 4), end: (2, 22) }), visibility: Public, docs: \"\", links: {}, attrs: [], deprecation: None, kind: Struct, inner: StructItem(Struct { struct_type: Unit, generics: Generics { params: [], where_predicates: [] }, fields_stripped: false, fields: [], impls: [Id(\"0:9\"), Id(\"0:10\"), Id(\"0:11\"), Id(\"0:13\"), Id(\"0:14\")] }) }`', src/librustdoc/json/mod.rs:167:17\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nRUST_BACKTRACE=1 rustdoc broke.rs --output-format json\r\nthread 'rustc' panicked at 'assertion failed: `(left == right)`\r\n  left: `Item { id: Id(\"0:4\"), crate_id: 0, name: Some(\"Reexported\"), source: Some(Span { filename: \"broke.rs\", begin: (2, 4), end: (2, 22) }), visibility: Public, docs: \"\", links: {}, attrs: [], deprecation: None, kind: Struct, inner: StructItem(Struct { struct_type: Unit, generics: Generics { params: [], where_predicates: [] }, fields_stripped: false, fields: [], impls: [Id(\"0:9\"), Id(\"0:10\"), Id(\"0:11\"), Id(\"0:13\"), Id(\"0:14\")] }) }`,\r\n right: `Item { id: Id(\"0:4\"), crate_id: 0, name: Some(\"Public\"), source: Some(Span { filename: \"broke.rs\", begin: (2, 4), end: (2, 22) }), visibility: Public, docs: \"\", links: {}, attrs: [], deprecation: None, kind: Struct, inner: StructItem(Struct { struct_type: Unit, generics: Generics { params: [], where_predicates: [] }, fields_stripped: false, fields: [], impls: [Id(\"0:9\"), Id(\"0:10\"), Id(\"0:11\"), Id(\"0:13\"), Id(\"0:14\")] }) }`', src/librustdoc/json/mod.rs:167:17\r\nstack backtrace:\r\n   0: _rust_begin_unwind\r\n   1: core::panicking::panic_fmt\r\n   2: <rustdoc::json::JsonRenderer as rustdoc::formats::renderer::FormatRenderer>::item\r\n   3: rustdoc::formats::renderer::run_format\r\n   4: rustdoc::run_renderer\r\n   5: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n   6: rustc_interface::passes::QueryContext::enter\r\n   7: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n   8: rustc_span::with_source_map\r\n   9: rustc_interface::interface::create_compiler_and_run\r\n  10: rustdoc::main_options\r\n  11: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nerror: Unrecognized option: 'output-format'\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n### Working variants\r\n```rust\r\nmod inner { pub struct Public; }\r\nuse inner::Public as Reexported;\r\n```\r\n<details><summary>json</summary>\r\n\r\n```json\r\n{\r\n    \"root\": \"0:0\",\r\n    \"crate_version\": null,\r\n    \"includes_private\": false,\r\n    \"index\": {\r\n        \"0:0\": {\r\n            \"id\": \"0:0\",\r\n            \"inner\": {\r\n                \"is_crate\": true,\r\n                \"items\": []\r\n            },\r\n            \"kind\": \"module\",\r\n            \"name\": \"work1\",\r\n            \"visibility\": \"public\"\r\n        }\r\n    },\r\n    \"paths\": {\r\n        \"0:0\": {\r\n            \"crate_id\": 0,\r\n            \"path\": [\"work1\"],\r\n            \"kind\": \"module\"\r\n        }\r\n    },\r\n    \"external_crates\": {},\r\n    \"format_version\": 1\r\n}\r\n```\r\n\r\n</details>\r\n\r\n```rust\r\nmod inner { pub struct Public; }\r\npub use inner::Public;\r\n```\r\n<details><summary>json</summary>\r\n\r\n```json\r\n{\r\n    \"root\": \"0:0\",\r\n    \"crate_version\": null,\r\n    \"includes_private\": false,\r\n    \"index\": {\r\n        \"0:0\": {\r\n            \"id\": \"0:0\",\r\n            \"inner\": {\r\n                \"is_crate\": true,\r\n                \"items\": [\"0:4\"]\r\n            },\r\n            \"kind\": \"module\",\r\n            \"name\": \"work2\",\r\n            \"visibility\": \"public\"\r\n        },\r\n        \"0:4\": {\r\n            \"id\": \"0:4\",\r\n            \"inner\": {\r\n                \"struct_type\": \"unit\",\r\n                \"generics\": {\r\n                    \"params\": [],\r\n                    \"where_predicates\": []\r\n                },\r\n                \"fields_stripped\": false,\r\n                \"fields\": [],\r\n                \"impls\": [\"0:9\", \"0:10\", \"0:11\", \"0:13\", \"0:14\"]\r\n            },\r\n            \"kind\": \"struct\",\r\n            \"name\": \"Public\",\r\n            \"visibility\": \"public\"\r\n        }\r\n    },\r\n    \"paths\": {\r\n        \"0:4\": {\r\n            \"crate_id\": 0,\r\n            \"path\": [\"work2\", \"Public\"],\r\n            \"kind\": \"struct\"\r\n        },\r\n        \"0:0\": {\r\n            \"crate_id\": 0,\r\n            \"path\": [\"work2\"],\r\n            \"kind\": \"module\"\r\n        }\r\n    },\r\n    \"external_crates\": {},\r\n    \"format_version\": 1\r\n}\r\n```\r\n\r\n</details>\r\n\r\n```rust\r\npub mod inner { pub struct Public; }\r\npub use inner::Public as Reexported;\r\n```\r\n<details><summary>json</summary>\r\n\r\n```json\r\n{\r\n    \"root\": \"0:0\",\r\n    \"crate_version\": null,\r\n    \"includes_private\": false,\r\n    \"index\": {\r\n        \"0:6\": {\r\n            \"id\": \"0:6\",\r\n            \"inner\": {\r\n                \"span\": \"inner::Public\",\r\n                \"name\": \"Reexported\",\r\n                \"id\": \"0:4\",\r\n                \"glob\": false\r\n            },\r\n            \"kind\": \"import\",\r\n            \"name\": null,\r\n            \"visibility\": \"public\"\r\n        },\r\n        \"0:3\": {\r\n            \"id\": \"0:3\",\r\n            \"inner\": {\r\n                \"is_crate\": false,\r\n                \"items\": [\"0:4\"]\r\n            },\r\n            \"kind\": \"module\",\r\n            \"name\": \"inner\",\r\n            \"visibility\": \"public\"\r\n        },\r\n        \"0:0\": {\r\n            \"id\": \"0:0\",\r\n            \"inner\": {\r\n                \"is_crate\": true,\r\n                \"items\": [\"0:6\", \"0:3\"]\r\n            },\r\n            \"kind\": \"module\",\r\n            \"name\": \"work3\",\r\n            \"visibility\": \"public\"\r\n        },\r\n        \"0:4\": {\r\n            \"id\": \"0:4\",\r\n            \"inner\": {\r\n                \"struct_type\": \"unit\",\r\n                \"generics\": {\r\n                    \"params\": [],\r\n                    \"where_predicates\": []\r\n                },\r\n                \"fields_stripped\": false,\r\n                \"fields\": [],\r\n                \"impls\": [\"0:9\", \"0:10\", \"0:11\", \"0:13\", \"0:14\"]\r\n            },\r\n            \"kind\": \"struct\",\r\n            \"name\": \"Public\",\r\n            \"visibility\": \"public\"\r\n        }\r\n    },\r\n    \"paths\": {\r\n        \"0:4\": {\r\n            \"crate_id\": 0,\r\n            \"path\": [\"work3\", \"inner\", \"Public\"],\r\n            \"kind\": \"struct\"\r\n        },\r\n        \"0:3\": {\r\n            \"crate_id\": 0,\r\n            \"path\": [\"work3\", \"inner\"],\r\n            \"kind\": \"module\"\r\n        },\r\n        \"0:0\": {\r\n            \"crate_id\": 0,\r\n            \"path\": [\"work3\"],\r\n            \"kind\": \"module\"\r\n        }\r\n    },\r\n    \"external_crates\": {},\r\n    \"format_version\": 1\r\n}\r\n```\r\n\r\n</details>\r\n\r\n### Whats happening\r\n\r\nThe panic is here\r\nhttps://github.com/rust-lang/rust/blob/db69136369bc2baf3c2244b57e6541dc558d0f2c/src/librustdoc/json/mod.rs#L163-L169\r\n\r\n`inner::Public` is being added to the index when is shouldn't (I think), so when `Reexported` is added, the IDs colide, and we bail. \r\n\r\nI think the solution is that `inner::Public` should never have been added into the index.\r\n\r\n- Related comment: https://github.com/rust-lang/rust/pull/79751#issuecomment-740116224\r\n- [Zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/The.20duplication.20in.20json)\r\n- [bless scripts](https://gist.github.com/aDotInTheVoid/a67e18991e7b45a7fdc8980b0126e546)\r\n\r\n\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80664/timeline", "performed_via_github_app": null, "state_reason": "completed"}