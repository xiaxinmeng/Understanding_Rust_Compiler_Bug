{"url": "https://api.github.com/repos/rust-lang/rust/issues/87995", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87995/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87995/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87995/events", "html_url": "https://github.com/rust-lang/rust/issues/87995", "id": 969843738, "node_id": "MDU6SXNzdWU5Njk4NDM3Mzg=", "number": 87995, "title": "odd compiler error with assert_eq! in unusual corner case, possibly related to missing semicolon in macro definition", "user": {"login": "oconnor663", "id": 860932, "node_id": "MDQ6VXNlcjg2MDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/860932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oconnor663", "html_url": "https://github.com/oconnor663", "followers_url": "https://api.github.com/users/oconnor663/followers", "following_url": "https://api.github.com/users/oconnor663/following{/other_user}", "gists_url": "https://api.github.com/users/oconnor663/gists{/gist_id}", "starred_url": "https://api.github.com/users/oconnor663/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oconnor663/subscriptions", "organizations_url": "https://api.github.com/users/oconnor663/orgs", "repos_url": "https://api.github.com/users/oconnor663/repos", "events_url": "https://api.github.com/users/oconnor663/events{/privacy}", "received_events_url": "https://api.github.com/users/oconnor663/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-08-13T00:49:53Z", "updated_at": "2023-04-05T17:29:45Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Originally discussed in [this thread on r/rust](https://www.reddit.com/r/rust/comments/p0xgs2/hey_rustaceans_got_an_easy_question_ask_here/h8l247v/). Due to a quirk in how the `assert_eq!` macro is defined, I get a compiler error in code that I think should be compiling successfully. The error is related to an odd-looking-but-arguably-legal missing semicolon:\r\n\r\n```rust\r\nfn main() {\r\n    let foo = std::sync::Mutex::new(String::from(\"foo\"));\r\n    assert_eq!(foo.lock().unwrap().as_str(), \"foo\")  // no semicolon here\r\n}\r\n```\r\n\r\nNow I wouldn't normally write that line, but if I think about what it \"should\" do, I'd say `assert_eq!` is supposed to \"return\" `()`, so this should be legal. However, it's not legal. We get this compiler error ([playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ef98ae795144a04b90c407308895ff3e)):\r\n\r\n```\r\nerror[E0597]: `foo` does not live long enough\r\n  --> src/main.rs:17:16\r\n   |\r\n17 |     assert_eq!(foo.lock().unwrap().as_str(), \"foo\")\r\n   |                ^^^----------------\r\n   |                |\r\n   |                borrowed value does not live long enough\r\n   |                a temporary with access to the borrow is created here ...\r\n18 | }\r\n   | -\r\n   | |\r\n   | `foo` dropped here while still borrowed\r\n   | ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `MutexGuard`\r\n   |\r\nhelp: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\r\n   |\r\n47 |         };\r\n   |          ^\r\n```\r\n\r\nI don't fully understand all the machinery behind this error, but I believe what's happening is that the `assert_eq!` macro is using a clever trick with an internal `match` statement to extend the life of temporaries, and here that trick works a little _too well_. The temporaries get extended all the way to the end of the function, at which point the compiler is worried that they might outlive the local variable they borrow. Or something like that. Here's a slightly simplified version of `assert_eq!` that reproduces this behavior ([playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=b745f3ab5a1e9e204a61b684ebb92746)):\r\n\r\n```rust\r\nmacro_rules! assert_eq {\r\n    ($left:expr, $right:expr $(,)?) => {{\r\n        match (&$left, &$right) {  //           <-- here is the clever match trick\r\n            (left_val, right_val) => {\r\n                if !(*left_val == *right_val) {\r\n                    panic!(\"assertion failed\");\r\n                }\r\n            }\r\n        }\r\n    }};\r\n}\r\n```\r\n\r\nIt seems like this wacky corner case can be fixed. If we add a semicolon here in the macro, the error goes away ([playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=9e536a760b78707680e49df760fac0b5)):\r\n\r\n```rust\r\nmacro_rules! assert_eq {\r\n    ($left:expr, $right:expr $(,)?) => {{\r\n        match (&$left, &$right) {\r\n            (left_val, right_val) => {\r\n                if !(*left_val == *right_val) {\r\n                    panic!(\"assertion failed\");\r\n                }\r\n            }\r\n        };  //                                   <-- semicolon added here\r\n    }};\r\n}\r\n```\r\n\r\nAnyway, that seems to fix _this_ error. But I'm not good enough with macros to be able to predict whether it might cause weird corner cases elsewhere that I'm not thinking of. Folks who know better: Does this seem like a safe change? If so, is it desirable? If so, would it make sense to look for other macros using the same trick, to see if they might need similar fixes? (At a glance, `assert_ne!` and `assert_matches!` might.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87995/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87995/timeline", "performed_via_github_app": null, "state_reason": null}