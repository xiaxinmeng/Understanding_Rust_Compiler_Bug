{"url": "https://api.github.com/repos/rust-lang/rust/issues/101120", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101120/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101120/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101120/events", "html_url": "https://github.com/rust-lang/rust/issues/101120", "id": 1353312985, "node_id": "I_kwDOAAsO6M5QqerZ", "number": 101120, "title": "argument requires that [...] is borrowed for [...]", "user": {"login": "adaszko", "id": 165678, "node_id": "MDQ6VXNlcjE2NTY3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/165678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adaszko", "html_url": "https://github.com/adaszko", "followers_url": "https://api.github.com/users/adaszko/followers", "following_url": "https://api.github.com/users/adaszko/following{/other_user}", "gists_url": "https://api.github.com/users/adaszko/gists{/gist_id}", "starred_url": "https://api.github.com/users/adaszko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adaszko/subscriptions", "organizations_url": "https://api.github.com/users/adaszko/orgs", "repos_url": "https://api.github.com/users/adaszko/repos", "events_url": "https://api.github.com/users/adaszko/events{/privacy}", "received_events_url": "https://api.github.com/users/adaszko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-08-28T10:34:54Z", "updated_at": "2022-08-29T06:30:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi \ud83d\udc4b.  I was instructed to create an issue here at a [users.rust-lang.org post](https://users.rust-lang.org/t/incomplete-lifetimes-error-message/80281).\r\n\r\nGiven the following code: [Rust Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=use+std%3A%3Async%3A%3AArc%3B%0Ause+tokio%3A%3Async%3A%3ARwLock%3B%0A%0Astruct+Context+%7B%0A++++field%3A+Arc%3CRwLock%3C%28%29%3E%3E%2C%0A%7D%0A%0Afn+blocking_fn%28_guard%3A+%26mut+tokio%3A%3Async%3A%3ARwLockWriteGuard%3C%28%29%3E%29+%7B%7D%0A%0Aasync+fn+async_fn%28ctx%3A+Context%29+%7B%0A++++let+mut+field_guard%3A+tokio%3A%3Async%3A%3ARwLockWriteGuard%3C_%3E+%3D+ctx.field.write%28%29.await%3B%0A++++tokio%3A%3Atask%3A%3Aspawn_blocking%28move+%7C%7C+blocking_fn%28%26mut+field_guard%29%29.await%3B%0A%7D%0A%0Afn+main%28%29+%7B%7D%0A) (the \"Run\" button seems to be broken ATM though)\r\n\r\n```rust\r\nuse std::sync::Arc;\r\nuse tokio::sync::RwLock;\r\n\r\nstruct Context {\r\n    field: Arc<RwLock<()>>,\r\n}\r\n\r\nfn blocking_fn(_guard: &mut tokio::sync::RwLockWriteGuard<()>) {}\r\n\r\nasync fn async_fn(ctx: Context) {\r\n    let mut field_guard: tokio::sync::RwLockWriteGuard<_> = ctx.field.write().await;\r\n    tokio::task::spawn_blocking(move || blocking_fn(&mut field_guard)).await;\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0597]: `ctx.field` does not live long enough\r\n  --> src/main.rs:12:65\r\n   |\r\n12 |         let mut field_guard: tokio::sync::RwLockWriteGuard<_> = ctx.field.write().await;\r\n   |                                                                 ^^^^^^^^^^^^^^^^^------ argument requires that `ctx.field` is borrowed for `'static`\r\n   |                                                                 |\r\n   |                                                                 borrowed value does not live long enough\r\n...\r\n15 | }\r\n   | - `ctx.field` dropped here while still borrowed\r\n\r\nFor more information about this error, try `rustc --explain E0597`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nWhat is meant by **\"argument\"** in the error message above?  Is it the implicit `self` parameter to `ctx.field.write()`?  Or is it the closure argument to `spawn_blocking()` below?  The error message is ambiguous on that IMO.  If it's the former, could we have `self` in the error message for clarity?\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\nIf it's the `self`, then:\r\n```\r\nerror[E0597]: `ctx.field` does not live long enough\r\n  --> src/main.rs:12:65\r\n   |\r\n12 |         let mut field_guard: tokio::sync::RwLockWriteGuard<_> = ctx.field.write().await;\r\n   |                                                                 ^^^^^^^^^^^^^^^^^------ argument `self` requires that `ctx.field` is borrowed for `'static`\r\n   |                                                                 |\r\n   |                                                                 borrowed value does not live long enough\r\n...\r\n15 | }\r\n   | - `ctx.field` dropped here while still borrowed\r\n```\r\n\r\nIf it's the argument to `spawn_blocking()`, then:\r\n\r\n```\r\n12 |         let mut field_guard: tokio::sync::RwLockWriteGuard<_> = ctx.field.write().await;\r\n   |                                                                 ^^^^^^^^^^^^^^^^^------ `ctx.field` needs to be valid for `'static`\r\n18 |     fn_taking_closure(move || blocking_fn(&mut field_guard));\r\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument is required to be valid for `'static`\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\nEDIT: Since creating the issue, I've learned of [three-point error messages](https://github.com/nikomatsakis/nll-rfc/blob/master/0000-nonlexical-lifetimes.md#leveraging-intuition-framing-errors-in-terms-of-points) and that causally-linked error messages is a subject of ongoing research ([1](https://ethz.ch/content/dam/ethz/special-interest/infk/chair-program-method/pm/documents/Education/Theses/David_Blaser_BA_Report.pdf) so I've removed the related portions of the issue)).\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101120/timeline", "performed_via_github_app": null, "state_reason": null}