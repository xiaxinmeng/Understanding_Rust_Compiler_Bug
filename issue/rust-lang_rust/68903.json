{"url": "https://api.github.com/repos/rust-lang/rust/issues/68903", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68903/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68903/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68903/events", "html_url": "https://github.com/rust-lang/rust/issues/68903", "id": 561239305, "node_id": "MDU6SXNzdWU1NjEyMzkzMDU=", "number": 68903, "title": "Command causes subsequent ANSI codes to render incorrectly", "user": {"login": "vallentin", "id": 17464404, "node_id": "MDQ6VXNlcjE3NDY0NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/17464404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vallentin", "html_url": "https://github.com/vallentin", "followers_url": "https://api.github.com/users/vallentin/followers", "following_url": "https://api.github.com/users/vallentin/following{/other_user}", "gists_url": "https://api.github.com/users/vallentin/gists{/gist_id}", "starred_url": "https://api.github.com/users/vallentin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vallentin/subscriptions", "organizations_url": "https://api.github.com/users/vallentin/orgs", "repos_url": "https://api.github.com/users/vallentin/repos", "events_url": "https://api.github.com/users/vallentin/events{/privacy}", "received_events_url": "https://api.github.com/users/vallentin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-06T20:03:55Z", "updated_at": "2023-01-26T21:32:54Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm experiencing some odd behavior with ANSI codes and `std::process::Command`. The ANSI codes render differently after having executed a command.\r\n\r\n1. In Git Bash using `\\u{1b}[2m` (gray/dim) does not render at all, which is understanble as it might not be supported. However, after executing some command, then it renders correctly.\r\n2. On the other hand, in CMD and PowerShell, then after running some command, then the ANSI codes appear *literally* in the output. (Which is the actual issue.)\r\n\r\nThe command being executed seem to be important, as changing it either results in the issue being triggered or no change at all.\r\n\r\nBoth `spawn() + wait()` and `status()` behave the same. Whereas `output()` does not trigger the issue. So I'm assuming the command is somehow able to affect the inherited stdin/stdout/stderr, causing the issue to persist after the command has finished.\r\n\r\n## Git Bash\r\n\r\nIt's understandable that some ANSI code might not be supported by my terminal. But it's quite odd, that executing some command using `std::process::Command`, results in it rendering correctly after.\r\n\r\n![command-git-bash](https://user-images.githubusercontent.com/17464404/73971627-860c7a80-491f-11ea-89df-c51868826834.png)\r\n\r\n## CMD\r\n\r\nHowever, the real issue is in CMD (and PowerShell), where every ANSI code renders *literally* in the output, after having executed some command.\r\n\r\n![command-cmd](https://user-images.githubusercontent.com/17464404/73971636-89076b00-491f-11ea-9da1-8c44649a2470.png)\r\n\r\n## Minimal, Reproducible Example\r\n\r\nI also tried using the [clicolors-control](https://crates.io/crates/clicolors-control) crate to enable/disable ANSI colors. However the issue still persists, and I originally submitted the issue there earlier mitsuhiko/clicolors-control#15.\r\n\r\n```rust\r\nuse std::process::Command;\r\n\r\nfn main() {\r\n    println!(\"Foo \\u{1b}[36mBar\\u{1b}[0m Baz\"); // Cyan\r\n    println!(\"Foo \\u{1b}[2mBar\\u{1b}[0m Baz <- Not colored\"); // Dim\r\n    println!(\"Foo \\u{1b}[31mBar\\u{1b}[0m Baz\"); // Red\r\n    println!();\r\n\r\n    // ANSI codes render incorrectly if any of these commands are executed\r\n    Command::new(\"git\").arg(\"log\").status().unwrap();\r\n    // Command::new(\"git\").arg(\"diff\").status().unwrap();\r\n\r\n    // However, ANSI codes are not affected if any of these commands are executed\r\n    // Command::new(\"git\").arg(\"--version\").status().unwrap();\r\n    // Command::new(\"cargo\").arg(\"--version\").status().unwrap();\r\n    // Command::new(\"cargo\").arg(\"build\").status().unwrap();\r\n\r\n    println!();\r\n    println!(\"Foo \\u{1b}[36mBar\\u{1b}[0m Baz\"); // Cyan\r\n    println!(\"Foo \\u{1b}[2mBar\\u{1b}[0m Baz\"); // Dim\r\n    println!(\"Foo \\u{1b}[31mBar\\u{1b}[0m Baz\"); // Red\r\n    println!();\r\n}\r\n```\r\n\r\n## Python\r\n\r\nI thought it might be my terminal being weird. So I test the equivalent in Python, and it rendered correctly.\r\n\r\n![command-python](https://user-images.githubusercontent.com/17464404/73974074-00d79480-4924-11ea-98b9-f427d1cbd9ae.png)\r\n\r\n```python\r\nfrom subprocess import run\r\n\r\nprint(\"Foo \\u001b[36mBar\\u001b[0m Baz\") # Cyan\r\nprint(\"Foo \\u001b[2mBar\\u001b[0m Baz\") # Dim\r\nprint(\"Foo \\u001b[31mBar\\u001b[0m Baz\") # Red\r\nprint()\r\n\r\nrun([\"git\", \"log\"])\r\n\r\nprint()\r\nprint(\"Foo \\u001b[36mBar\\u001b[0m Baz\") # Cyan\r\nprint(\"Foo \\u001b[2mBar\\u001b[0m Baz\") # Dim\r\nprint(\"Foo \\u001b[31mBar\\u001b[0m Baz\") # Red\r\n```\r\n\r\n-----\r\n\r\nI've tested in both debug and release mode, as well as stable and nightly. The issue remains the same.\r\n\r\n```\r\n$ rustc --version --verbose\r\nrustc 1.41.0 (5e1a79984 2020-01-27)\r\nbinary: rustc\r\ncommit-hash: 5e1a799842ba6ed4a57e91f7ab9435947482f7d8\r\ncommit-date: 2020-01-27\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.41.0\r\nLLVM version: 9.0\r\n\r\n$ cargo --version --verbose\r\ncargo 1.41.0 (626f0f40e 2019-12-03)\r\nrelease: 1.41.0\r\ncommit-hash: 626f0f40efd32e6b3dbade50cd53fdfaa08446ba\r\ncommit-date: 2019-12-03\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68903/timeline", "performed_via_github_app": null, "state_reason": null}