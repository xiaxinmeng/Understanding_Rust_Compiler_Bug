{"url": "https://api.github.com/repos/rust-lang/rust/issues/105361", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105361/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105361/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105361/events", "html_url": "https://github.com/rust-lang/rust/issues/105361", "id": 1478770926, "node_id": "I_kwDOAAsO6M5YJEDu", "number": 105361, "title": "Trivially mergeable branches aren't getting merged in the assembly output after checked multiplication", "user": {"login": "dead-claudia", "id": 4483844, "node_id": "MDQ6VXNlcjQ0ODM4NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4483844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dead-claudia", "html_url": "https://github.com/dead-claudia", "followers_url": "https://api.github.com/users/dead-claudia/followers", "following_url": "https://api.github.com/users/dead-claudia/following{/other_user}", "gists_url": "https://api.github.com/users/dead-claudia/gists{/gist_id}", "starred_url": "https://api.github.com/users/dead-claudia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dead-claudia/subscriptions", "organizations_url": "https://api.github.com/users/dead-claudia/orgs", "repos_url": "https://api.github.com/users/dead-claudia/repos", "events_url": "https://api.github.com/users/dead-claudia/events{/privacy}", "received_events_url": "https://api.github.com/users/dead-claudia/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-12-06T10:34:02Z", "updated_at": "2022-12-06T14:23:54Z", "closed_at": "2022-12-06T14:23:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code: ([Compiler Explorer link](https://godbolt.org/z/5oG1McTP3))\r\n\r\n```rust\r\n#[inline]\r\npub fn parse_u32_digit(acc: u32, byte: u8) -> Option<u32> {\r\n    match acc.checked_mul(10) {\r\n        None => None,\r\n        Some(next) => match byte.checked_sub(b'0') {\r\n            None => None,\r\n            Some(v) => next.checked_add(v as u32),\r\n        },\r\n    }\r\n}\r\n\r\npub fn parse_u32(bytes: &[u8]) -> Option<u32> {\r\n    let mut result = 0u32;\r\n    for &byte in bytes {\r\n        match parse_u32_digit(result, byte) {\r\n            None => return None,\r\n            Some(next) => result = next,\r\n        };\r\n    }\r\n    return Some(result);\r\n}\r\n```\r\n\r\nIt spits out this LLVM IR: \r\n\r\n```llvm\r\ndefine { i32, i32 } @_ZN7example9parse_u3217h734a78966806ef36E(ptr noalias noundef nonnull readonly align 1 %bytes.0, i64 %bytes.1) unnamed_addr #0 !dbg !6 {\r\nstart:\r\n  %0 = getelementptr inbounds i8, ptr %bytes.0, i64 %bytes.1, !dbg !11\r\n  br label %bb2, !dbg !39\r\n\r\nbb2:                                              ; preds = %example::parse_u32_digit.exit, %start\r\n  %iter.sroa.5.0 = phi ptr [ %bytes.0, %start ], [ %4, %example::parse_u32_digit.exit ], !dbg !41\r\n  %result.0 = phi i32 [ 0, %start ], [ %9, %example::parse_u32_digit.exit ], !dbg !42\r\n  %_10.i = icmp eq ptr %iter.sroa.5.0, %0, !dbg !43\r\n  br i1 %_10.i, label %bb11, label %bb4, !dbg !43\r\n\r\nbb4:                                              ; preds = %bb2\r\n  %byte = load i8, ptr %iter.sroa.5.0, align 1, !dbg !49\r\n  %1 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %result.0, i32 10), !dbg !50\r\n  %2 = extractvalue { i32, i1 } %1, 1, !dbg !50\r\n  %3 = icmp ult i8 %byte, 48\r\n  %or.cond.i = select i1 %2, i1 true, i1 %3, !dbg !62\r\n  br i1 %or.cond.i, label %bb11, label %example::parse_u32_digit.exit, !dbg !62\r\n\r\nexample::parse_u32_digit.exit: ; preds = %bb4\r\n  %4 = getelementptr inbounds i8, ptr %iter.sroa.5.0, i64 1, !dbg !63\r\n  %5 = extractvalue { i32, i1 } %1, 0, !dbg !50\r\n  %6 = add i8 %byte, -48, !dbg !77\r\n  %_12.i = zext i8 %6 to i32, !dbg !84\r\n  %7 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %5, i32 %_12.i), !dbg !86\r\n  %8 = extractvalue { i32, i1 } %7, 1, !dbg !86\r\n  %9 = extractvalue { i32, i1 } %7, 0, !dbg !86\r\n  br i1 %8, label %bb11, label %bb2, !dbg !91\r\n\r\nbb11:                                             ; preds = %bb4, %example::parse_u32_digit.exit, %bb2\r\n  %.sroa.0.0 = phi i32 [ 1, %bb2 ], [ 0, %example::parse_u32_digit.exit ], [ 0, %bb4 ], !dbg !92\r\n  %10 = insertvalue { i32, i32 } undef, i32 %.sroa.0.0, 0, !dbg !93\r\n  %11 = insertvalue { i32, i32 } %10, i32 %result.0, 1, !dbg !93\r\n  ret { i32, i32 } %11, !dbg !93\r\n}\r\n\r\ndeclare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #1\r\n\r\ndeclare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #1\r\n\r\nattributes #0 = { nofree nosync nounwind nonlazybind uwtable \"probe-stack\"=\"__rust_probestack\" \"target-cpu\"=\"x86-64\" }\r\nattributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }\r\n```\r\n\r\nIf I remove all the `!dbg` bits, fix a name llc doesn't want to parse, and [plug it into llc 15.0.0](https://godbolt.org/z/eT9oTKonj) ([same output for llc trunk](https://godbolt.org/z/3Gdrr77re)) targeting x86-64, I get the following assembly (what I expected):\r\n\r\n```asm\r\nexample::parse_u32::h734a78966806ef36: # @example::parse_u32::h734a78966806ef36\r\n        xor     ecx, ecx\r\n        mov     r10d, 10\r\n        xor     eax, eax\r\n        xor     r8d, r8d\r\n.LBB0_1:                                # %bb2\r\n        mov     r9d, eax\r\n        cmp     rsi, rcx\r\n        je      .LBB0_2\r\n        mov     eax, r9d\r\n        mul     r10d\r\n        jo      .LBB0_6\r\n        movzx   edx, byte ptr [rdi + rcx]\r\n        cmp     dl, 48\r\n        jb      .LBB0_6\r\n        add     dl, -48\r\n        movzx   edx, dl\r\n        inc     rcx\r\n        add     eax, edx\r\n        jae     .LBB0_1\r\n        jmp     .LBB0_6\r\n.LBB0_2:\r\n        mov     r8d, 1\r\n.LBB0_6:                                # %bb11\r\n        mov     eax, r8d\r\n        mov     edx, r9d\r\n        ret\r\n```\r\n\r\nWhen I go through just `rustc` nightly, I get this assembly:\r\n\r\n```asm\r\nexample::parse_u32:\r\n        xor     ecx, ecx\r\n        mov     r10d, 10\r\n        xor     eax, eax\r\n        xor     r8d, r8d\r\n.LBB0_1:\r\n        mov     r9d, eax\r\n        cmp     rsi, rcx\r\n        je      .LBB0_2\r\n        mov     eax, r9d\r\n        mul     r10d\r\n        jo      .LBB0_6\r\n        movzx   edx, byte ptr [rdi + rcx]\r\n        cmp     dl, 48\r\n        jb      .LBB0_6\r\n        add     dl, -48\r\n        movzx   edx, dl\r\n        inc     rcx\r\n        add     eax, edx\r\n        jae     .LBB0_1\r\n.LBB0_6:\r\n        mov     eax, r8d\r\n        mov     edx, r9d\r\n        ret\r\n.LBB0_2:\r\n        mov     r8d, 1\r\n        mov     eax, r8d\r\n        mov     edx, r9d\r\n        ret\r\n```\r\n\r\nThe notable part about this is the last two branches, while they could trivially be merged, end up not merged for some reason.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.67.0-nightly (e1d819583 2022-12-05)\r\nbinary: rustc\r\ncommit-hash: e1d819583f0bf13b016b119c1c2c43e6d3979450\r\ncommit-date: 2022-12-05\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.67.0-nightly\r\nLLVM version: 15.0.4\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "dead-claudia", "id": 4483844, "node_id": "MDQ6VXNlcjQ0ODM4NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4483844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dead-claudia", "html_url": "https://github.com/dead-claudia", "followers_url": "https://api.github.com/users/dead-claudia/followers", "following_url": "https://api.github.com/users/dead-claudia/following{/other_user}", "gists_url": "https://api.github.com/users/dead-claudia/gists{/gist_id}", "starred_url": "https://api.github.com/users/dead-claudia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dead-claudia/subscriptions", "organizations_url": "https://api.github.com/users/dead-claudia/orgs", "repos_url": "https://api.github.com/users/dead-claudia/repos", "events_url": "https://api.github.com/users/dead-claudia/events{/privacy}", "received_events_url": "https://api.github.com/users/dead-claudia/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105361/timeline", "performed_via_github_app": null, "state_reason": "completed"}