{"url": "https://api.github.com/repos/rust-lang/rust/issues/45405", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45405/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45405/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45405/events", "html_url": "https://github.com/rust-lang/rust/issues/45405", "id": 267098937, "node_id": "MDU6SXNzdWUyNjcwOTg5Mzc=", "number": 45405, "title": "Add suggestion/explanation to error on trying to mutably borrow immutable reference", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-20T08:23:47Z", "updated_at": "2023-02-03T15:57:57Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\n    let mut mem_buffer : &[u8] = &b\"foo\"[..];\r\n    let mut reader = &mut mem_buffer as &std::io::Read;\r\n    let mut read_buffer = [0u8, 10];\r\n    reader.read(&mut read_buffer);\r\n```\r\n\r\nreports\r\n\r\n```\r\nerror[E0596]: cannot borrow immutable borrowed content `*reader` as mutable\r\n --> src/main.rs:5:5\r\n  |\r\n5 |     reader.read(&mut read_buffer);\r\n  |     ^^^^^^ cannot borrow as mutable\r\n```\r\n\r\nWhich is correct, but the fix is to modify the creation of the `reader` variable. While this case is easy, it's probably less so in the general case. Possible avenues of improvement:\r\n\r\n1. The easy way this error message can be improved is to mention that the type is `&T`, but should be `&mut T`.\r\n2. If there are explicit type annotations on the variable, a note should point to it\r\n3. If the variable's type is inferred, a note should point to its initializer and maybe even do some primitive checks that can lead the developer towards the solution.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45405/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45405/timeline", "performed_via_github_app": null, "state_reason": null}