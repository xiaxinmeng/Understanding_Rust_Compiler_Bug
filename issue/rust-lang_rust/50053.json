{"url": "https://api.github.com/repos/rust-lang/rust/issues/50053", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50053/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50053/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50053/events", "html_url": "https://github.com/rust-lang/rust/issues/50053", "id": 315462393, "node_id": "MDU6SXNzdWUzMTU0NjIzOTM=", "number": 50053, "title": "proc_macro::TokenStream: provide AST node kind hint", "user": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 632573348, "node_id": "MDU6TGFiZWw2MzI1NzMzNDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros-2.0", "name": "A-macros-2.0", "color": "f7e101", "default": false, "description": "Area: declarative macros 2.0, https://github.com/rust-lang/rust/issues/39412"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-04-18T12:40:52Z", "updated_at": "2018-05-22T20:21:23Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\n/// Enum representing AST nodes a #[proc_macro_attribute] may be applied to\r\n// Bikeshedding welcome\r\npub enum SyntaxNodeKind {\r\n    // when crates as macro inputs aren't pretty-printed as modules (#41430) \r\n    Crate,\r\n    Item, // could be module, function, impl, etc. `syn` can figure the rest out\r\n    Statement,\r\n    Expression, \r\n    ExternItem, // since item kinds are restricted in `extern {}`\r\n} \r\n\r\nimpl TokenStream {\r\n    /// If this token stream represents a valid syntax tree node, return its kind. \r\n    /// Returns `None` for raw tokens\r\n    // Alternately it could simply panic when not available because that would only happen in\r\n    // `#[proc_macro]` which should expect only raw tokens anyway\r\n    pub fn syntax_node_kind(&self) -> Option<SyntaxNodeKind> {}\r\n}\r\n```\r\n\r\nThis would be exclusively for `#[proc_macro_attribute]`s which parse their input as AST nodes:\r\n\r\n* attributes that only accept one kind could assert equality and error immediately instead of attempting to parse their expected kind (allowing them to emit a concise error message instead of \"expected [token] got [token]\") \r\n* attributes that accept multiple kinds won't have to guess at what node kind they should attempt to parse\r\n\r\ncc @alexcrichton @dtolnay @petrochenkov\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50053/timeline", "performed_via_github_app": null, "state_reason": null}