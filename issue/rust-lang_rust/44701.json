{"url": "https://api.github.com/repos/rust-lang/rust/issues/44701", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44701/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44701/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44701/events", "html_url": "https://github.com/rust-lang/rust/issues/44701", "id": 258832918, "node_id": "MDU6SXNzdWUyNTg4MzI5MTg=", "number": 44701, "title": "Missed code elimination with std::mem::replace/std::mem::swap", "user": {"login": "batonius", "id": 153945, "node_id": "MDQ6VXNlcjE1Mzk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/153945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/batonius", "html_url": "https://github.com/batonius", "followers_url": "https://api.github.com/users/batonius/followers", "following_url": "https://api.github.com/users/batonius/following{/other_user}", "gists_url": "https://api.github.com/users/batonius/gists{/gist_id}", "starred_url": "https://api.github.com/users/batonius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/batonius/subscriptions", "organizations_url": "https://api.github.com/users/batonius/orgs", "repos_url": "https://api.github.com/users/batonius/repos", "events_url": "https://api.github.com/users/batonius/events{/privacy}", "received_events_url": "https://api.github.com/users/batonius/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-19T14:04:11Z", "updated_at": "2017-09-21T14:52:36Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "**Edit:** As pointed out by @oyvindln, the problem appears to be a regression introduced in 1.20.\r\n\r\n**Demonstration:** https://godbolt.org/g/5uuzVL\r\n\r\n**Version:** rustc 1.22.0-nightly (277476c4f 2017-09-16) , -C opt-level=3 -C target-cpu=native\r\n\r\n**Code:** \r\n```rust \r\nuse std::rc::Rc;\r\nuse std::cell::RefCell;\r\n\r\npub struct Buffer {\r\n    buf: Vec<u8>,\r\n    pool: Rc<RefCell<Vec<Vec<u8>>>>,\r\n}\r\n\r\nimpl Drop for Buffer {\r\n    fn drop(&mut self) {\r\n        self.pool.borrow_mut()\r\n            .push(std::mem::replace(&mut self.buf, vec![]));        \r\n    }\r\n}\r\n```\r\n**Expected result:** An optimal code would move `self.buf` directly into `self.pool` and then reset `self.buf` in-place. An acceptable code would move`self.buf` into a temporary on the stack, move the temporary into `self.pool` and reset `self.buf` in-place.\r\n\r\n**Observed result:** \r\n1. Space for two `std::Vec<u8>`(each 24 bytes) is allocated on the stack, `-48(%rbp)` (A) and `-96(%rbp)` (B).\r\n2. `self.buf` is copied to A.\r\n3. `self.buf` is reset in-place.\r\n4. A is copied to B.\r\n5. B is copied to A.\r\n6. A is inserted into `self.pool`.\r\n\r\nSteps 4 and 5 is a completely unnecessary copying of 48 bytes and could be safely removed. Replacing `std::mem::replace` with an equivalent `std::mem::swap` call produces a slightly different code with the same basic problem.\r\n\r\n**Compiler output:**\r\n``` asm\r\n<example::Buffer as core::ops::drop::Drop>::drop:\r\n        pushq   %rbp\r\n        movq    %rsp, %rbp\r\n        pushq   %rbx\r\n        subq    $88, %rsp\r\n        movq    %rdi, %rax\r\n        movq    24(%rax), %rbx\r\n        cmpq    $0, 16(%rbx)\r\n        jne     .LBB6_6\r\n        leaq    16(%rbx), %rcx\r\n        movq    $-1, 16(%rbx)\r\n        leaq    24(%rbx), %rdi\r\n        movq    %rdi, -64(%rbp)\r\n        movq    %rcx, -56(%rbp)\r\n;2\r\n        movq    16(%rax), %rcx\r\n        movq    %rcx, -32(%rbp)\r\n        vmovups (%rax), %xmm0\r\n        vmovaps %xmm0, -48(%rbp)\r\n;3\r\n        movq    $1, (%rax)\r\n        vxorps  %xmm0, %xmm0, %xmm0\r\n        vmovups %xmm0, 8(%rax)\r\n;4\r\n        movq    -32(%rbp), %rax\r\n        movq    %rax, -80(%rbp)\r\n        vmovaps -48(%rbp), %xmm0\r\n        vmovaps %xmm0, -96(%rbp)\r\n;5\r\n        movq    -80(%rbp), %rax\r\n        movq    %rax, -32(%rbp)\r\n        vmovaps -96(%rbp), %xmm0\r\n        vmovaps %xmm0, -48(%rbp)\r\n;6\r\n        movq    40(%rbx), %rax\r\n        cmpq    32(%rbx), %rax\r\n        jne     .LBB6_4\r\n        callq   <alloc::raw_vec::RawVec<T, A>>::double\r\n        movq    40(%rbx), %rax\r\n.LBB6_4:\r\n        movq    24(%rbx), %rcx\r\n        leaq    (%rax,%rax,2), %rax\r\n        movq    -32(%rbp), %rdx\r\n        movq    %rdx, 16(%rcx,%rax,8)\r\n        vmovaps -48(%rbp), %xmm0\r\n        vmovups %xmm0, (%rcx,%rax,8)\r\n        incq    40(%rbx)\r\n        movq    $0, 16(%rbx)\r\n        addq    $88, %rsp\r\n        popq    %rbx\r\n        popq    %rbp\r\n        retq\r\n.LBB6_6:\r\n        callq   core::result::unwrap_failed\r\n        movq    %rax, %rbx\r\n        leaq    -48(%rbp), %rdi\r\n        callq   core::ptr::drop_in_place\r\n        leaq    -64(%rbp), %rdi\r\n        callq   core::ptr::drop_in_place\r\n        movq    %rbx, %rdi\r\n        callq   _Unwind_Resume@PLT\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44701/timeline", "performed_via_github_app": null, "state_reason": null}