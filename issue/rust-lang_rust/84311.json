{"url": "https://api.github.com/repos/rust-lang/rust/issues/84311", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84311/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84311/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84311/events", "html_url": "https://github.com/rust-lang/rust/issues/84311", "id": 860715317, "node_id": "MDU6SXNzdWU4NjA3MTUzMTc=", "number": 84311, "title": "`matches!(n, -1 | 1)` for signed NonZero suboptimal", "user": {"login": "Juici", "id": 19672035, "node_id": "MDQ6VXNlcjE5NjcyMDM1", "avatar_url": "https://avatars.githubusercontent.com/u/19672035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Juici", "html_url": "https://github.com/Juici", "followers_url": "https://api.github.com/users/Juici/followers", "following_url": "https://api.github.com/users/Juici/following{/other_user}", "gists_url": "https://api.github.com/users/Juici/gists{/gist_id}", "starred_url": "https://api.github.com/users/Juici/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Juici/subscriptions", "organizations_url": "https://api.github.com/users/Juici/orgs", "repos_url": "https://api.github.com/users/Juici/repos", "events_url": "https://api.github.com/users/Juici/events{/privacy}", "received_events_url": "https://api.github.com/users/Juici/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-04-18T17:17:14Z", "updated_at": "2021-04-19T04:14:06Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The code generated when comparing a signed non-zero type to `-1` or `1` varies wildly, and *appears* to generate suboptimal branching code.\r\n\r\n*A more in-depth analysis of the generated assembly can be found here: https://godbolt.org/z/qxzGrv9nn.*\r\n\r\n## Basic\r\n\r\nLooking at these two functions, one would expect them to generate the same assembly.\r\n\r\n```rust\r\npub fn is_one_1(len: NonZeroI32) -> bool {\r\n    matches!(len.get(), -1 | 1)\r\n}\r\n\r\npub fn is_one_2(len: NonZeroI32) -> bool {\r\n    len.get() == -1 || len.get() == 1\r\n}\r\n```\r\n\r\nHowever that is not the case, with `is_one_1` in fact branching as seen below. Whilst I have not run benchmarks to see if branching is more performant, one would expect it not to be.\r\n\r\n```asm\r\nexample::is_one_1:\r\n        cmp     edi, 1\r\n        je      .LBB0_3\r\n        cmp     edi, -1\r\n        jne     .LBB0_2\r\n.LBB0_3:\r\n        mov     al, 1\r\n        ret\r\n.LBB0_2:\r\n        xor     eax, eax\r\n        ret\r\n\r\nexample::is_one_2:\r\n        cmp     edi, -1\r\n        sete    cl\r\n        cmp     edi, 1\r\n        sete    al\r\n        or      al, cl\r\n        ret\r\n```\r\n\r\n## What if we include `0` in the comparison?\r\n\r\nSince `len` is a `NonZeroI32`, it is guaranteed that `len.get() != 0` otherwise it is undefined behaviour. This means that the function below should behave the same as `is_one_1`.\r\n\r\n```rust\r\npub fn is_one_3(len: NonZeroI32) -> bool {\r\n    matches!(len.get(), -1 | 0 | 1)\r\n}\r\n```\r\n\r\nIn fact the generated assembly for this is the smallest yet.\r\n\r\n```asm\r\nexample::is_one_3:\r\n        add     edi, 1\r\n        cmp     edi, 3\r\n        setb    al\r\n        ret\r\n```\r\n\r\nThis assembly is actually also generated when we include `0` in the comparison in the style of `is_one_2`.\r\n\r\n```rust\r\npub fn is_one_4(len: NonZeroI32) -> bool {\r\n    len.get() == -1 || len.get() == 0 || len.get() == 1\r\n}\r\n```\r\n\r\n```asm\r\nexample::is_one_4:\r\n        add     edi, 1\r\n        cmp     edi, 3\r\n        setb    al\r\n        ret\r\n```\r\n\r\n## Expected behaviour\r\n\r\nThe expected behaviour of the compiler would be to generate assembly that matches between the different implementations of this check.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84311/timeline", "performed_via_github_app": null, "state_reason": null}