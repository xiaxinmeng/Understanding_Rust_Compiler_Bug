{"url": "https://api.github.com/repos/rust-lang/rust/issues/16781", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/16781/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/16781/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/16781/events", "html_url": "https://github.com/rust-lang/rust/issues/16781", "id": 41254049, "node_id": "MDU6SXNzdWU0MTI1NDA0OQ==", "number": 16781, "title": "Ability to have *-pointers as arguments to MethodDefs", "user": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-08-27T06:57:47Z", "updated_at": "2014-08-31T15:16:03Z", "closed_at": "2014-08-31T15:16:03Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "[I'm trying to write a syntax extension](https://github.com/servo/servo/issues/3156) that works similar to `#[deriving(Encodable)]`, where a trait `JSTraceable` can be applied to types where all subfields implement that `JSTraceable`, such that calling `.trace()` will simply call `.trace()` on all subfields with the same arguments (there is no output to be treed up like with `Clone` and `PartialEq`)\n\nThe signature I want is the following:\n\n```\ntrait Traceable {\n    fn trace(&self, trc: *mut JSTracer);\n}\n```\n\nHowever, there's a problem here. Following the internal implementation, I need to supply a [`MethodDef`](http://doc.rust-lang.org/master/syntax/ext/deriving/generic/struct.MethodDef.html), which includes an argument list of [`Ty`](http://doc.rust-lang.org/master/syntax/ext/deriving/generic/ty/type.Ty.html)s\n\nHowever,`Ty` doesn't support `*`-pointers, so I will probably have to work around this with a second trait and some transmutes (which I'd rather not do)\n\nCould we get support for `*` pointers in `MethodDef`?\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/16781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/16781/timeline", "performed_via_github_app": null, "state_reason": "completed"}