{"url": "https://api.github.com/repos/rust-lang/rust/issues/39056", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/39056/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/39056/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/39056/events", "html_url": "https://github.com/rust-lang/rust/issues/39056", "id": 200779191, "node_id": "MDU6SXNzdWUyMDA3NzkxOTE=", "number": 39056, "title": "thumbv6m-none-eabi compiler builtin ABI bug", "user": {"login": "dnseitz", "id": 13179744, "node_id": "MDQ6VXNlcjEzMTc5NzQ0", "avatar_url": "https://avatars.githubusercontent.com/u/13179744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnseitz", "html_url": "https://github.com/dnseitz", "followers_url": "https://api.github.com/users/dnseitz/followers", "following_url": "https://api.github.com/users/dnseitz/following{/other_user}", "gists_url": "https://api.github.com/users/dnseitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnseitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnseitz/subscriptions", "organizations_url": "https://api.github.com/users/dnseitz/orgs", "repos_url": "https://api.github.com/users/dnseitz/repos", "events_url": "https://api.github.com/users/dnseitz/events{/privacy}", "received_events_url": "https://api.github.com/users/dnseitz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 55301954, "node_id": "MDU6TGFiZWw1NTMwMTk1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-Arm", "name": "O-Arm", "color": "6e6ec0", "default": false, "description": "Target: 32-bit Arm processors (armv6, armv7, thumb...), including 64-bit Arm in AArch32 state"}, {"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-01-14T04:15:49Z", "updated_at": "2017-06-17T14:28:31Z", "closed_at": "2017-06-17T14:28:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm helping to build a small operating system to run on Cortex-M0 processors. I'm compiling for the `thumbv6m-none-eabi` target. When using the compiler builtin function `__aeabi_lmul` it seems that the compiler is passing in the arguments to the wrong registers. For example, this piece of code:\r\n```rust\r\nfn do_mul(a: isize, b: isize) -> isize {\r\n  a * b\r\n}\r\n```\r\n\r\nGets compiled down to:\r\n\r\n```\r\n   0:   b580            push    {r7, lr}\r\n   2:   af00            add     r7, sp, #0\r\n   4:   b088            sub     sp, #32\r\n   6:   460a            mov     r2, r1\r\n   8:   4603            mov     r3, r0\r\n   a:   9004            str     r0, [sp, #16]\r\n   c:   9105            str     r1, [sp, #20]\r\n   e:   9203            str     r2, [sp, #12]\r\n  10:   9302            str     r3, [sp, #8]\r\n  12:   e7ff            b.n     14 <lmul_test::do_a_mul::hb8c09fc6501fea17+0x14>\r\n  14:   9804            ldr     r0, [sp, #16]\r\n  16:   9006            str     r0, [sp, #24]\r\n  18:   9805            ldr     r0, [sp, #20]\r\n  1a:   9007            str     r0, [sp, #28]\r\n  1c:   9906            ldr     r1, [sp, #24]\r\n  1e:   17c2            asrs    r2, r0, #31\r\n  20:   17cb            asrs    r3, r1, #31\r\n  22:   9001            str     r0, [sp, #4]\r\n  24:   4608            mov     r0, r1\r\n  26:   4611            mov     r1, r2\r\n  28:   9a01            ldr     r2, [sp, #4]\r\n  2a:   f7ff fffe       bl      0 <__aeabi_lmul>\r\n  ...\r\n```\r\n\r\nAccording the the [ARM ABI Documentation](http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042f/IHI0042F_aapcs.pdf) (Section 5.1.1.1), passing a 64bit value as an argument should store them in registers `r0` and `r1` or `r2` and `r3` as a pair. With the low bits being stored in `r0/2` and the high bits stored in `r1/3`. \r\n\r\nLooking at the dissasembled code, the first argument, which was initially stored in `r0` gets its low and high bits split into `r0` and `r3` respectively, not the expected `r0` and `r1`. The second argument also gets split into `r2` and `r1` for its low and high bits. So it appears that the high bits for the two values have been swapped.\r\n\r\nBecause the values are sign extended from 32 bits, this is only an issue if the signs of the two arguments differ. If they're the same the high bit registers will happen to be the same. But when the signs differ the function returns a wrong result in the `r1` register. This causes a panic if overflow checking is enabled.\r\n\r\nI've not noticed this issue anywhere else, but it could possibly be hidden around in some of the other compiler builtins.\r\n\r\nI've created a sample repo [here](https://github.com/dnseitz/rust-thumbv6m-abi-bug) that shows off the bug. You'll need an ARM toolchain to actually compile it down to a binary, but you should still be able to cross compile it into a static library. (the command I was using was `xargo build --target=thumbv6m-none-eabi`)\r\n\r\nVersion info:\r\n```\r\nlmul-test|master \u21d2 rustc --version --verbose \r\nrustc 1.16.0-nightly (47c8d9fdc 2017-01-08)\r\nbinary: rustc\r\ncommit-hash: 47c8d9fdcf2e6502cf4ca7d7f059fdc1a2810afa\r\ncommit-date: 2017-01-08\r\nhost: x86_64-apple-darwin\r\nrelease: 1.16.0-nightly\r\nLLVM version: 3.9\r\n```", "closed_by": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/39056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/39056/timeline", "performed_via_github_app": null, "state_reason": "completed"}