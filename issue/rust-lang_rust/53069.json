{"url": "https://api.github.com/repos/rust-lang/rust/issues/53069", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53069/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53069/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53069/events", "html_url": "https://github.com/rust-lang/rust/issues/53069", "id": 347640267, "node_id": "MDU6SXNzdWUzNDc2NDAyNjc=", "number": 53069, "title": "SIMD intrinsics often fail to inline", "user": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-04T18:49:31Z", "updated_at": "2018-08-27T14:31:43Z", "closed_at": "2018-08-27T14:31:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here's my code:\r\n\r\n    #[bench]\r\n    fn simd_paeth_1(bench: &mut Bencher) {\r\n        // pi\r\n        unsafe {\r\n            let a = [0x32, 0x43, 0xf6, 0xa8];\r\n            let b = [0x88, 0x5a, 0x30, 0x8d];\r\n            let c = [0x31, 0x31, 0x98, 0xa2];\r\n            let ba = x86::_mm_set_epi16(b[3], b[2], b[1], b[0], a[3], a[2], a[1], a[0]);\r\n            let cc = x86::_mm_set_epi16(c[3], c[2], c[1], c[0], c[3], c[2], c[1], c[0]);\r\n            let all_ones = x86::_mm_set1_epi16(-1);\r\n            bench.iter(|| {\r\n                test::black_box(a);\r\n                test::black_box(b);\r\n                test::black_box(c);\r\n                for i in 0..1000 {\r\n                    test::black_box(i);\r\n\r\n                    // Compute signed distances.\r\n                    let spapb = x86::_mm_sub_epi16(ba, cc);\r\n                    let spbpa = x86::_mm_shuffle_epi32(spapb, 0b01001110);    // swap dwords\r\n                    let spcpc = x86::_mm_add_epi16(spbpa, spapb);\r\n\r\n                    // Compute absolute distances.\r\n                    let papb = x86::_mm_abs_epi16(spapb);\r\n                    let pcpc = x86::_mm_abs_epi16(spcpc);\r\n                    let pbpa = x86::_mm_shuffle_epi32(papb, 0b01001110);\r\n\r\n                    // Compute minima.\r\n                    let min_bc = x86::_mm_min_epi16(papb, pcpc);\r\n                    let min_abc = x86::_mm_min_epi16(pbpa, min_bc);\r\n\r\n                    // Choose b or c.\r\n                    let pick_b_or_c = x86::_mm_cmpeq_epi16(papb, min_bc);\r\n                    let b = x86::_mm_slli_si128(ba, 4);\r\n                    let b_or_c = x86::_mm_blendv_epi8(b, cc, pick_b_or_c);\r\n\r\n                    // Choose a if necessary.\r\n                    let pick_a = x86::_mm_cmpeq_epi16(pbpa, min_abc);\r\n                    let result = x86::_mm_blendv_epi8(ba, b_or_c, pick_a);\r\n                    test::black_box(result);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\nNote that `mm_blendv_epi8` fails to inline, ruining performance.\r\n\r\nThis happens a lot and it makes using SIMD intrinsics *very* annoying. I have to start using inline asm.", "closed_by": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53069/timeline", "performed_via_github_app": null, "state_reason": "completed"}