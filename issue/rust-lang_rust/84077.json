{"url": "https://api.github.com/repos/rust-lang/rust/issues/84077", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84077/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84077/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84077/events", "html_url": "https://github.com/rust-lang/rust/issues/84077", "id": 855191045, "node_id": "MDU6SXNzdWU4NTUxOTEwNDU=", "number": 84077, "title": "wasm32-unknown-unknown results in out of bounds memory access", "user": {"login": "jiayihu", "id": 10067273, "node_id": "MDQ6VXNlcjEwMDY3Mjcz", "avatar_url": "https://avatars.githubusercontent.com/u/10067273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiayihu", "html_url": "https://github.com/jiayihu", "followers_url": "https://api.github.com/users/jiayihu/followers", "following_url": "https://api.github.com/users/jiayihu/following{/other_user}", "gists_url": "https://api.github.com/users/jiayihu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiayihu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiayihu/subscriptions", "organizations_url": "https://api.github.com/users/jiayihu/orgs", "repos_url": "https://api.github.com/users/jiayihu/repos", "events_url": "https://api.github.com/users/jiayihu/events{/privacy}", "received_events_url": "https://api.github.com/users/jiayihu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-04-11T01:01:46Z", "updated_at": "2021-04-11T13:19:54Z", "closed_at": "2021-04-11T13:19:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\n#![allow(non_snake_case)]\r\n\r\nfn init_array<const M: usize, const N: usize>(\r\n    m: usize,\r\n    n: usize,\r\n    A: &mut [[f32; N]; M],\r\n    r: &mut [f32; M],\r\n    p: &mut [f32; N],\r\n) {\r\n    for i in 0..n {\r\n        p[i] = (i % n) as f32 / n as f32;\r\n    }\r\n    for i in 0..m {\r\n        r[i] = (i % m) as f32 / m as f32;\r\n        for j in 0..n {\r\n            A[i][j] = (i * (j + 1) % m) as f32 / m as f32;\r\n        }\r\n    }\r\n}\r\n\r\nfn kernel_bicg<const M: usize, const N: usize>(\r\n    m: usize,\r\n    n: usize,\r\n    A: &[[f32; N]; M],\r\n    s: &mut [f32; N],\r\n    q: &mut [f32; M],\r\n    p: &[f32; N],\r\n    r: &[f32; M],\r\n) {\r\n    for i in 0..n {\r\n        s[i] = 0.0;\r\n    }\r\n    for i in 0..m {\r\n        q[i] = 0.0;\r\n        for j in 0..n {\r\n            s[j] = s[j] + r[i] * A[i][j];\r\n            q[i] = q[i] + A[i][j] * p[j];\r\n        }\r\n    }\r\n}\r\n\r\n#[no_mangle]\r\npub extern \"C\" fn bench() {\r\n    const M: usize = 1;\r\n    const N: usize = 1;\r\n\r\n    let mut A = [[0_f32; N]; M];\r\n    let mut s = [0_f32; N];\r\n    let mut q = [0_f32; M];\r\n    let mut p = [0_f32; N];\r\n    let mut r = [0_f32; M];\r\n\r\n    init_array(M, N, &mut A, &mut r, &mut p);\r\n    kernel_bicg(M, N, &A, &mut s, &mut q, &p, &r);\r\n}\r\n```\r\n\r\nHere is the wat file:\r\n\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```wat\r\n(module\r\n  (type $t0 (func))\r\n  (func $bench (type $t0)\r\n    (local $l0 i32) (local $l1 i32) (local $l2 i32) (local $l3 f32)\r\n    global.get $g0\r\n    i32.const 32\r\n    i32.sub\r\n    local.set $l0\r\n    i32.const 0\r\n    local.set $l1\r\n    block $B0\r\n      loop $L1\r\n        local.get $l1\r\n        i32.const 4\r\n        i32.eq\r\n        br_if $B0\r\n        local.get $l0\r\n        i32.const 28\r\n        i32.add\r\n        local.get $l1\r\n        i32.add\r\n        i32.const 0\r\n        i32.store\r\n        local.get $l1\r\n        i32.const 4\r\n        i32.add\r\n        local.set $l1\r\n        br $L1\r\n      end\r\n    end\r\n    i32.const 0\r\n    local.set $l1\r\n    local.get $l0\r\n    i32.load offset=28\r\n    local.set $l2\r\n    block $B2\r\n      loop $L3\r\n        local.get $l1\r\n        i32.const 4\r\n        i32.eq\r\n        br_if $B2\r\n        local.get $l0\r\n        i32.const 12\r\n        i32.add\r\n        local.get $l1\r\n        i32.add\r\n        local.get $l2\r\n        i32.store\r\n        local.get $l1\r\n        i32.const 4\r\n        i32.add\r\n        local.set $l1\r\n        br $L3\r\n      end\r\n    end\r\n    i32.const 0\r\n    local.set $l1\r\n    block $B4\r\n      loop $L5\r\n        local.get $l1\r\n        i32.const 4\r\n        i32.eq\r\n        br_if $B4\r\n        local.get $l0\r\n        i32.const 16\r\n        i32.add\r\n        local.get $l1\r\n        i32.add\r\n        i32.const 0\r\n        i32.store\r\n        local.get $l1\r\n        i32.const 4\r\n        i32.add\r\n        local.set $l1\r\n        br $L5\r\n      end\r\n    end\r\n    i32.const 0\r\n    local.set $l1\r\n    block $B6\r\n      loop $L7\r\n        local.get $l1\r\n        i32.const 4\r\n        i32.eq\r\n        br_if $B6\r\n        local.get $l0\r\n        i32.const 20\r\n        i32.add\r\n        local.get $l1\r\n        i32.add\r\n        i32.const 0\r\n        i32.store\r\n        local.get $l1\r\n        i32.const 4\r\n        i32.add\r\n        local.set $l1\r\n        br $L7\r\n      end\r\n    end\r\n    i32.const 0\r\n    local.set $l1\r\n    block $B8\r\n      loop $L9\r\n        local.get $l1\r\n        i32.const 4\r\n        i32.eq\r\n        br_if $B8\r\n        local.get $l0\r\n        i32.const 24\r\n        i32.add\r\n        local.get $l1\r\n        i32.add\r\n        i32.const 0\r\n        i32.store\r\n        local.get $l1\r\n        i32.const 4\r\n        i32.add\r\n        local.set $l1\r\n        br $L9\r\n      end\r\n    end\r\n    i32.const 0\r\n    local.set $l1\r\n    block $B10\r\n      loop $L11\r\n        local.get $l1\r\n        i32.const 4\r\n        i32.eq\r\n        br_if $B10\r\n        local.get $l0\r\n        i32.const 28\r\n        i32.add\r\n        local.get $l1\r\n        i32.add\r\n        i32.const 0\r\n        i32.store\r\n        local.get $l1\r\n        i32.const 4\r\n        i32.add\r\n        local.set $l1\r\n        br $L11\r\n      end\r\n    end\r\n    local.get $l0\r\n    i32.const 0\r\n    i32.store offset=28\r\n    local.get $l0\r\n    i32.const 0\r\n    i32.store offset=24\r\n    local.get $l0\r\n    i32.const 0\r\n    i32.store offset=12\r\n    local.get $l0\r\n    i32.const 0\r\n    i32.store offset=16\r\n    f32.const 0x0p+0 (;=0;)\r\n    local.set $l3\r\n    i32.const 1\r\n    local.set $l1\r\n    block $B12\r\n      loop $L13\r\n        local.get $l1\r\n        i32.const 1\r\n        i32.and\r\n        i32.eqz\r\n        br_if $B12\r\n        local.get $l0\r\n        f32.const 0x0p+0 (;=0;)\r\n        local.get $l3\r\n        f32.add\r\n        local.tee $l3\r\n        f32.store offset=20\r\n        local.get $l0\r\n        f32.const 0x0p+0 (;=0;)\r\n        local.get $l0\r\n        f32.load offset=16\r\n        f32.add\r\n        f32.store offset=16\r\n        i32.const 0\r\n        local.set $l1\r\n        br $L13\r\n      end\r\n    end)\r\n  (memory $memory 1)\r\n  (global $g0 (mut i32) (i32.const 16))\r\n  (global $__data_end i32 (i32.const 16))\r\n  (global $__heap_base i32 (i32.const 16))\r\n  (export \"memory\" (memory 0))\r\n  (export \"bench\" (func $bench))\r\n  (export \"__data_end\" (global 1))\r\n  (export \"__heap_base\" (global 2)))\r\n\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nHere is the output from running `wasm-interp wasm/bicg.wasm --run-all-exports --trace`\r\n\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n>>> running export \"bench\":\r\n#0.    0: V:0  | alloca 4\r\n#0.    8: V:4  | global.get $0\r\n#0.   16: V:5  | i32.const 32\r\n#0.   24: V:6  | i32.sub 16, 32\r\n#0.   28: V:5  | local.set $5, 4294967280\r\n#0.   36: V:4  | i32.const 0\r\n#0.   44: V:5  | local.set $4, 0\r\n#0.   52: V:4  | local.get $3\r\n#0.   60: V:5  | i32.const 4\r\n#0.   68: V:6  | i32.eq 0, 4\r\n#0.   72: V:5  | br_unless @88, 0\r\n#0.   88: V:4  | local.get $4\r\n#0.   96: V:5  | i32.const 28\r\n#0.  104: V:6  | i32.add 4294967280, 28\r\n#0.  108: V:5  | local.get $4\r\n#0.  116: V:6  | i32.add 12, 0\r\n#0.  120: V:5  | i32.const 0\r\n#0.  128: V:6  | i32.store $0:12+$0, 0\r\n#0.  140: V:4  | local.get $3\r\n#0.  148: V:5  | i32.const 4\r\n#0.  156: V:6  | i32.add 0, 4\r\n#0.  160: V:5  | local.set $4, 4\r\n#0.  168: V:4  | br @52\r\n#0.   52: V:4  | local.get $3\r\n#0.   60: V:5  | i32.const 4\r\n#0.   68: V:6  | i32.eq 4, 4\r\n#0.   72: V:5  | br_unless @88, 1\r\n#0.   80: V:4  | br @176\r\n#0.  176: V:4  | i32.const 0\r\n#0.  184: V:5  | local.set $4, 0\r\n#0.  192: V:4  | local.get $4\r\n#0.  200: V:5  | i32.load $0:4294967280+$28\r\nbench() => error: out of bounds memory access: access at 4294967308+4 >= max value 65536\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nFrom the wat file and the interpreter logs, there are several incorrect codes like `local.set $5, 4294967280`, `i32.add 4294967280, 28` (overflow), and `32.load $0:4294967280+$28`. Why are these illegal instructions generated?\r\n\r\nI expected to see this happen: no out of bounds errors.\r\n\r\nInstead, this happened: the resulting wasm file tries to access out of bounds memory from the value stack. I have tried with the parity/wasmi interpreter, wasm-interp and wasmtime.\r\n\r\nThe code is compiled with `cargo --build --release` and optimized using the following config. I also use the compiler flag `\"-C\", \"link-arg=-zstack-size=16\"`.\r\n\r\n```toml\r\n[profile.release]\r\nlto = true\r\nopt-level = \"z\"\r\n```\r\n\r\nThe issue is reproducible with pratically any file in https://github.com/jiayihu/polybench-rs/tree/master/wasm, which are wasm modules containing the Polybench functions.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose` (I have tried also with rustc 1.50.0 nightly, which I was using before updating to latest to test if anything changed):\r\n```\r\nrustc 1.53.0-nightly (07e0e2ec2 2021-03-24)\r\nbinary: rustc\r\ncommit-hash: 07e0e2ec268c140e607e1ac7f49f145612d0f597\r\ncommit-date: 2021-03-24\r\nhost: x86_64-apple-darwin\r\nrelease: 1.53.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n\r\n", "closed_by": {"login": "jiayihu", "id": 10067273, "node_id": "MDQ6VXNlcjEwMDY3Mjcz", "avatar_url": "https://avatars.githubusercontent.com/u/10067273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiayihu", "html_url": "https://github.com/jiayihu", "followers_url": "https://api.github.com/users/jiayihu/followers", "following_url": "https://api.github.com/users/jiayihu/following{/other_user}", "gists_url": "https://api.github.com/users/jiayihu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiayihu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiayihu/subscriptions", "organizations_url": "https://api.github.com/users/jiayihu/orgs", "repos_url": "https://api.github.com/users/jiayihu/repos", "events_url": "https://api.github.com/users/jiayihu/events{/privacy}", "received_events_url": "https://api.github.com/users/jiayihu/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84077/timeline", "performed_via_github_app": null, "state_reason": "completed"}