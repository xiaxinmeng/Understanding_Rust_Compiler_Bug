{"url": "https://api.github.com/repos/rust-lang/rust/issues/44025", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44025/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44025/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44025/events", "html_url": "https://github.com/rust-lang/rust/issues/44025", "id": 251807648, "node_id": "MDU6SXNzdWUyNTE4MDc2NDg=", "number": 44025, "title": "Avoid initialization checks when accessing thread locals", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 632886930, "node_id": "MDU6TGFiZWw2MzI4ODY5MzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-thread-locals", "name": "A-thread-locals", "color": "f7e101", "default": false, "description": "Area: Thread local storage (TLS)"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-08-22T00:47:51Z", "updated_at": "2021-05-03T18:41:49Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Thread locals are often slower than they need to be. For example, if we have:\r\n\r\n```rust\r\nthread_local! {\r\n    static FOO: i32 = 777;\r\n}\r\n```\r\n\r\nEvery access of the form `FOO.with(|foo| ...)` will first check whether `FOO` is initialized, and then initialize it if this is the first access. On some (most?) platforms we can statically initialize thread locals with a constant expression (in this case the constant expression is `777`).\r\n\r\nA check on every access can be fairly costly, and we should try to avoid checks whenever possible. It is possible to avoid them by using `#[thread_local]` instead of `thread_local!`, but that is an unstable feature without a clear stabilization plan...\r\n\r\nIn #17954 @alexcrichton said:\r\n\r\n> I do not think we should strive to stabilize `#[thread_local]`. It's incredibly not portable which makes it not too useful for most software. We should strive to improve `thread_local!`. The feature to implement is for the compiler to understand whether the initialization expression is a constant expression or not. If it's a constant expression then we can bypass the `None` storage and \"am I initialized checks\", making it equivalent to raw `#[thread_local]`\r\n\r\n@eddyb answered:\r\n\r\n> That's easy in the compiler but `thread_local!` is not implemented in the compiler.\r\n\r\n@arielb1 suggests:\r\n\r\n> ... But we could add an `eager_thread_local!` macro for that case.\r\n\r\n@alexcrichton adds:\r\n\r\n> As for how to implement a \"const expr detection\" in a macro I'm not entirely sure. We could either move the implementation into the compiler (which I'd prefer to avoid) or take @arielb1's suggestion of a new macro or a variant of the current macro's syntax.\r\n\r\n> For example we could \"perverse\" the meaning via: `thread_local!(const A: i32 = 3);` where `static` in the macro means \"lazily initialized, but any expression valid\" and `const` means \"must be a constant expression\". I don't think this is a good idea, but an example of what we might do.\r\n\r\nMy question after all that would be:\r\n\r\nCan we perhaps make the `thread_local!` macro expand to a special lang item that provides two implementations - one for the *lazy initialization case* and one for the *static initialization zero-checks case*? Then the compiler would choose one of them, depending on whether the initialization expression is a constant expression.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44025/timeline", "performed_via_github_app": null, "state_reason": null}