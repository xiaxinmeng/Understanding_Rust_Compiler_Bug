{"url": "https://api.github.com/repos/rust-lang/rust/issues/9077", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/9077/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/9077/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/9077/events", "html_url": "https://github.com/rust-lang/rust/issues/9077", "id": 19204758, "node_id": "MDU6SXNzdWUxOTIwNDc1OA==", "number": 9077, "title": "RFC: For custom string types, add ability to define newtyped unsized vectors once DST gets implemented", "user": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-09-09T15:49:45Z", "updated_at": "2014-01-06T07:00:55Z", "closed_at": "2014-01-06T07:00:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now, the DST proposal is still not implemented/decide upon. However, once it gets implemented I'd like to propose the following roadmap:\n1. Implement ability to declare newtypes of at least unsized vectors (syntax just arbitrary):  \n   \n   ```\n   struct vec<T>[T];\n   ```\n   \n   Those types would work the same way as a bare `[T]` works: They don't have a compile-time known size, and are specially represented by an slice or an owned pointer:  \n   \n   ```\n   let vec_slice: &'static vec<uint> = &'static vec[1, 2, 3];\n   let owned_vec: ~vec<i8>           = ~vec[4, 5, 6];\n   ```\n2. Remove `str` from the compiler and replace with an library type:\n   \n   ```\n   struct str[u8];\n   ```\n   \n   This would allow to clean up a lot of library types:\n   \n   ```\n   struct str_ascii[u8];\n   struct str_c[u8];\n   \n   struct str_utf16[u16]; // Servo seems to need utf16\n   ```\n3. Rewrite string library to share as much code with traits and generics as possibly for those types.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/9077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/9077/timeline", "performed_via_github_app": null, "state_reason": "completed"}