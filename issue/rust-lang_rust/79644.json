{"url": "https://api.github.com/repos/rust-lang/rust/issues/79644", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79644/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79644/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79644/events", "html_url": "https://github.com/rust-lang/rust/issues/79644", "id": 755557880, "node_id": "MDU6SXNzdWU3NTU1NTc4ODA=", "number": 79644, "title": "Compiler suggests restricting bound to only blanket impl for trait instead of just the trait", "user": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-12-02T19:40:16Z", "updated_at": "2023-04-15T06:11:55Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As with all diagnostics bugs, the title of this issue is almost completely unhelpful in understanding what I'm talking about, so let me show you some code.\r\n\r\n(If you want to cut to the chase [here's a playground that showcases the whole bug](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=b2ec330573cedee08e79773ae2872164)).\r\n\r\n## Bits and pieces\r\n\r\nThis code is incorrect:\r\n\r\n```rust\r\nimpl<S, M> Service for MagicService<S, M>\r\nwhere\r\n    S: Service,\r\n    M: Magician<()> + Clone + 'static,\r\n{\r\n    type Output = S::Output;\r\n    type Promise = MagicPromise<S::Promise, M>;\r\n\r\n    fn call(&self) -> Self::Promise {\r\n        MagicPromise {\r\n            magician: self.magician.clone(),\r\n            promise: self.service.call(),\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe bound on `M` should be `Magician<S::Output>`, but instead it's just `Magician<()>`.\r\n\r\nAs a result, `M` does *not* implement `Magician<S::Output>`, which causes `MagicPromise<S::Promise, M>` to *not* implement `Promise`, because its `impl Promise` has this bound:\r\n\r\n```rust\r\nimpl<P, M> Promise for MagicPromise<P, M>\r\nwhere\r\n    P: Promise,\r\n    M: Magician<P::Output>, // \ud83d\udc48 that bound\r\n{\r\n    type Output = <P as Promise>::Output;\r\n\r\n    fn poll(&self) -> Self::Output {\r\n        todo!()\r\n    }\r\n}\r\n```\r\n\r\nWhich then violates that bound in `Service`:\r\n\r\n```rust\r\ntrait Service {\r\n    type Output;\r\n    type Promise: Promise<Output = Self::Output>; // \ud83d\udc48 that bound\r\n\r\n    fn call(&self) -> Self::Promise;\r\n}\r\n```\r\n\r\nWhich causes the whole thing to come crashing down.\r\n\r\n## The full picture\r\n\r\nHere's a full reproducible example (and [here's the same playground link as before](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=b2ec330573cedee08e79773ae2872164)):\r\n\r\n```rust\r\n/// A magician performs on a `T`, by immutable reference\r\ntrait Magician<T> {\r\n    fn perform(&self, res: &T);\r\n}\r\n\r\n/// All `Fn` closures are magicians.\r\n///\r\n/// \ud83d\udca1 This is what gets the compiler confused. If we comment out this\r\n/// implementation, the diagnostic is no longer wrong.\r\nimpl<F, T> Magician<T> for F\r\nwhere\r\n    F: Fn(&T),\r\n{\r\n    fn perform(&self, res: &T) {\r\n        (self)(res)\r\n    }\r\n}\r\n\r\n/// Simple version of `Future`\r\ntrait Promise {\r\n    type Output;\r\n\r\n    fn poll(&self) -> Self::Output;\r\n}\r\n\r\n/// Simple version of tower's `Service`\r\ntrait Service {\r\n    type Output;\r\n    type Promise: Promise<Output = Self::Output>;\r\n\r\n    fn call(&self) -> Self::Promise;\r\n}\r\n\r\n/// A promise that would call `magician` on its result (if it wasn't a stub)\r\nstruct MagicPromise<P, M> {\r\n    magician: M,\r\n    promise: P,\r\n}\r\n\r\n/// I lied - a MagicPromise is only a promise is `P` is a Promise and\r\n/// `M` is a magician that works on this promise's output.\r\nimpl<P, M> Promise for MagicPromise<P, M>\r\nwhere\r\n    P: Promise,\r\n    M: Magician<P::Output>,\r\n{\r\n    type Output = <P as Promise>::Output;\r\n\r\n    fn poll(&self) -> Self::Output {\r\n        todo!() // don't need to implement it to show the bug\r\n    }\r\n}\r\n\r\n// A MagicService takes a Service and lets a magician perform on top of it!\r\nstruct MagicService<S, M> {\r\n    service: S,\r\n    magician: M,\r\n}\r\n\r\n// Here comes the problematic diagnostic\r\n\r\nimpl<S, M> Service for MagicService<S, M>\r\nwhere\r\n    S: Service,\r\n    // \u26d4 This is an incorrect bound, and triggers an incorrect diagnostic\r\n    M: Magician<()> + Clone + 'static,\r\n    // \u2705 This is the correct bound, the code compiles with it\r\n    // M: Magician<S::Output> + Clone + 'static,\r\n{\r\n    type Output = S::Output;\r\n    type Promise = MagicPromise<S::Promise, M>;\r\n\r\n    fn call(&self) -> Self::Promise {\r\n        MagicPromise {\r\n            magician: self.magician.clone(),\r\n            promise: self.service.call(),\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    println!(\"https://giphy.com/gifs/12NUbkX6p4xOO4\");\r\n}\r\n```\r\n\r\nIf we compile this with Rust 1.48, we get the following diagnostics:\r\n\r\n![image](https://user-images.githubusercontent.com/7998310/100920720-ce62dd80-34db-11eb-9280-1490bba3a660.png)\r\n\r\nI can sorta get what the compiler is getting at. Right now, the *only* type that implements `Magician<<S as Service>::Output>` is indeed `Fn<(&<S As Service>::Output)>`.\r\n\r\nBut we're defining a generic type, so there could possibly (in another crate..) be another type that does implement `Magician<<S as Service>::Output>` - the bound that we, in fact, want here.\r\n\r\nIf we comment out the blanket `impl Magician<T> for Fn(&T)`, we get this diagnostic instead:\r\n\r\n![image](https://user-images.githubusercontent.com/7998310/100920945-24378580-34dc-11eb-93bf-8ba8c38dcb80.png)\r\n\r\nWhich is what we want! ie. the compiler is not trying to be extra helpful.\r\n\r\n## What about nightly?\r\n\r\nIf we try the original code in Nightly (with the blanket impl), we get much of the same *but* there's an additional bit of information about where the bound comes from:\r\n\r\n![image](https://user-images.githubusercontent.com/7998310/100921106-63fe6d00-34dc-11eb-9599-2164df01b847.png)\r\n\r\n...and this is what finally allowed me to fix my bug, in this instance. Although, as you can imagine, the types were several orders of magnitude larger, so it was still not a fun time.\r\n\r\n## What should it do?\r\n\r\nThe suggestion may actually make sense in some scenarios? I think this particular diagnostic is just overshooting a tiny bit. The main issue that bothers me is that it's hiding the real issue.\r\n\r\nHonestly the diagnostic when there is no blanket impl for `Fn` is fairly solid on its own:\r\n\r\n```raw\r\nerror[E0277]: the trait bound `M: Magician<<S as Service>::Output>` is not satisfied\r\n  --> src\\main.rs:71:5\r\n   |\r\n29 |     type Promise: Promise<Output = Self::Output>;\r\n   |                           --------------------- required by this bound in `Service::Promise`\r\n...\r\n71 |     type Promise = MagicPromise<S::Promise, M>;\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Magician<<S as Service>::Output>` is not implemented for `M`\r\n   |\r\n   = note: required because of the requirements on the impl of `Promise` for `MagicPromise<<S as Service>::Promise, M>`     \r\nhelp: consider further restricting this bound\r\n   |\r\n66 |     M: Magician<()> + Clone + 'static + Magician<<S as Service>::Output>,\r\n   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nIt might be possible to combine the two by saying \"btw if `M` was just an `Fn(&T)` then the bound would also be satisfied - but everything's already generic so I would probably go for *just* the \"no blanket impl\" diagnostic.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n\r\n```\r\nrustc 1.48.0 (7eac88abb 2020-11-16)\r\nbinary: rustc\r\ncommit-hash: 7eac88abb2e57e752f3302f02be5f3ce3d7adfb4\r\ncommit-date: 2020-11-16\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.48.0\r\nLLVM version: 11.0\r\n```\r\n\r\n(but I witnessed it on `x86_64-unknown-linux-gnu` first)\r\n\r\n`cargo +nightly rustc -- --version --verbose`:\r\n\r\n```\r\n   Compiling trait-repro v0.1.0 (C:\\Users\\amos\\work\\trait-repro)\r\nrustc 1.50.0-nightly (da3846948 2020-11-21)\r\nbinary: rustc\r\ncommit-hash: da384694807172f0ca40eca2e49a11688aba6e93\r\ncommit-date: 2020-11-21\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.50.0-nightly\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.03s\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79644/timeline", "performed_via_github_app": null, "state_reason": null}