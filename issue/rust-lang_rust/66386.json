{"url": "https://api.github.com/repos/rust-lang/rust/issues/66386", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66386/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66386/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66386/events", "html_url": "https://github.com/rust-lang/rust/issues/66386", "id": 522480322, "node_id": "MDU6SXNzdWU1MjI0ODAzMjI=", "number": 66386, "title": "Confusing error message when manually implementing PartialEq with cyclic types and generics", "user": {"login": "nightmared", "id": 7265382, "node_id": "MDQ6VXNlcjcyNjUzODI=", "avatar_url": "https://avatars.githubusercontent.com/u/7265382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nightmared", "html_url": "https://github.com/nightmared", "followers_url": "https://api.github.com/users/nightmared/followers", "following_url": "https://api.github.com/users/nightmared/following{/other_user}", "gists_url": "https://api.github.com/users/nightmared/gists{/gist_id}", "starred_url": "https://api.github.com/users/nightmared/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nightmared/subscriptions", "organizations_url": "https://api.github.com/users/nightmared/orgs", "repos_url": "https://api.github.com/users/nightmared/repos", "events_url": "https://api.github.com/users/nightmared/events{/privacy}", "received_events_url": "https://api.github.com/users/nightmared/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-13T21:22:36Z", "updated_at": "2021-06-29T09:08:14Z", "closed_at": "2021-06-29T09:08:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nwhile trying to mix rust derive directives and my own implementation of PartialEq I ran into an error that I found quite unclear. I further reduced it to this snippet of code:\r\n\r\n```rust\r\n#[derive(PartialEq)]\r\nenum E<T> {\r\n    V1(OwnedE<T>),\r\n    V2(T)\r\n}\r\n\r\nstruct OwnedE<T>(Box<E<T>>);\r\n\r\nimpl<T> PartialEq for OwnedE<T> {\r\n    fn eq(&self, other: &Self) -> bool {\r\n        *self.0 == *other.0\r\n    }\r\n}\r\n```\r\n\r\nThis yields the following error about the implementation of PartialEq on `E<T>`\r\n```\r\n$ rustc test.rs -o test\r\nerror[E0369]: binary operation `==` cannot be applied to type `E<T>`\r\n  --> test.rs:11:17\r\n   |\r\n11 |         *self.0 == *other.0\r\n   |         ------- ^^ -------- E<T>\r\n   |         |\r\n   |         E<T>\r\n   |\r\n   = note: an implementation of `std::cmp::PartialEq` might be missing for `E<T>`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0369`.\r\n```\r\n\r\nThe correct code is the following (we must add a constraint `T: PartialEq`) :\r\n\r\n```rust\r\n#[derive(PartialEq)]\r\nenum E<T> {\r\n    V1(OwnedE<T>),\r\n    V2(T)\r\n}\r\n\r\nstruct OwnedE<T>(Box<E<T>>);\r\n\r\nimpl<T: PartialEq> PartialEq for OwnedE<T> {\r\n    fn eq(&self, other: &Self) -> bool {\r\n        *self.0 == *other.0\r\n    }\r\n}\r\n```\r\n\r\nEven though it is correct from a technical point of view (`OwnedE<T>: ?PartialEq`, the compiler error message is quite surprising: it makes it look like the issue stems form the PartialEq of `E<T>`, while the crux of the issue is the fact that `T` may not be comparable. The error message could be improved by adding a note like (a better one of course, my wording is quite terrible):\r\n```\r\nThe following implementations are available:\r\n- E<T> where T: std::cmp::PartialEq\r\nConsider adding constraints to reach one of these implementations.\r\n```\r\n\r\nI guess the best error message would be that one (but I can imagine that it's much harder to guess because of the cycle between the types (`E<T>` includes a variant of `OwnedE<T>` which in turn depend on `E<T>`)):\r\n```\r\nerror[E0369]: binary operation `==` cannot be applied to type `T`\r\n  --> test.rs:11:17\r\n   |\r\n11 |         *self.0 == *other.0\r\n   |         ------- ^^ -------- T\r\n   |         |\r\n   |         T\r\n   |\r\n   = note: `T` might need a bound for `std::cmp::PartialEq`'\r\n```\r\n\r\nThis error message is the one you get when there is no cycle, like so:\r\n\r\n```\r\n#[derive(PartialEq)]\r\nenum E<T> {\r\n    V1(OwnedE<T>),\r\n    V2(T)\r\n}\r\n\r\nstruct OwnedE<T>(Box<T>);\r\n\r\nimpl<T> PartialEq for OwnedE<T> {\r\n    fn eq(&self, other: &Self) -> bool {\r\n        *self.0 == *other.0\r\n\r\n    }\r\n}\r\n```\r\n\r\nAnyway, thanks for the relentless efforts in improving the compiler and its error messages !", "closed_by": {"login": "nightmared", "id": 7265382, "node_id": "MDQ6VXNlcjcyNjUzODI=", "avatar_url": "https://avatars.githubusercontent.com/u/7265382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nightmared", "html_url": "https://github.com/nightmared", "followers_url": "https://api.github.com/users/nightmared/followers", "following_url": "https://api.github.com/users/nightmared/following{/other_user}", "gists_url": "https://api.github.com/users/nightmared/gists{/gist_id}", "starred_url": "https://api.github.com/users/nightmared/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nightmared/subscriptions", "organizations_url": "https://api.github.com/users/nightmared/orgs", "repos_url": "https://api.github.com/users/nightmared/repos", "events_url": "https://api.github.com/users/nightmared/events{/privacy}", "received_events_url": "https://api.github.com/users/nightmared/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66386/timeline", "performed_via_github_app": null, "state_reason": "completed"}