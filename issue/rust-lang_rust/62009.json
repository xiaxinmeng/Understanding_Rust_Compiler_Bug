{"url": "https://api.github.com/repos/rust-lang/rust/issues/62009", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62009/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62009/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62009/events", "html_url": "https://github.com/rust-lang/rust/issues/62009", "id": 458925961, "node_id": "MDU6SXNzdWU0NTg5MjU5NjE=", "number": 62009, "title": "ICE when playing with async/await.", "user": {"login": "Accuratemiss", "id": 45167604, "node_id": "MDQ6VXNlcjQ1MTY3NjA0", "avatar_url": "https://avatars.githubusercontent.com/u/45167604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Accuratemiss", "html_url": "https://github.com/Accuratemiss", "followers_url": "https://api.github.com/users/Accuratemiss/followers", "following_url": "https://api.github.com/users/Accuratemiss/following{/other_user}", "gists_url": "https://api.github.com/users/Accuratemiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/Accuratemiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Accuratemiss/subscriptions", "organizations_url": "https://api.github.com/users/Accuratemiss/orgs", "repos_url": "https://api.github.com/users/Accuratemiss/repos", "events_url": "https://api.github.com/users/Accuratemiss/events{/privacy}", "received_events_url": "https://api.github.com/users/Accuratemiss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259720434, "node_id": "MDU6TGFiZWwxMjU5NzIwNDM0", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Polish", "name": "AsyncAwait-Polish", "color": "d4c5f9", "default": false, "description": "Async-await issues that are part of the \"polish\" area"}], "state": "closed", "locked": false, "assignee": {"login": "rustbot", "id": 47979223, "node_id": "MDQ6VXNlcjQ3OTc5MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47979223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustbot", "html_url": "https://github.com/rustbot", "followers_url": "https://api.github.com/users/rustbot/followers", "following_url": "https://api.github.com/users/rustbot/following{/other_user}", "gists_url": "https://api.github.com/users/rustbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustbot/subscriptions", "organizations_url": "https://api.github.com/users/rustbot/orgs", "repos_url": "https://api.github.com/users/rustbot/repos", "events_url": "https://api.github.com/users/rustbot/events{/privacy}", "received_events_url": "https://api.github.com/users/rustbot/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rustbot", "id": 47979223, "node_id": "MDQ6VXNlcjQ3OTc5MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47979223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustbot", "html_url": "https://github.com/rustbot", "followers_url": "https://api.github.com/users/rustbot/followers", "following_url": "https://api.github.com/users/rustbot/following{/other_user}", "gists_url": "https://api.github.com/users/rustbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustbot/subscriptions", "organizations_url": "https://api.github.com/users/rustbot/orgs", "repos_url": "https://api.github.com/users/rustbot/repos", "events_url": "https://api.github.com/users/rustbot/events{/privacy}", "received_events_url": "https://api.github.com/users/rustbot/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2019-06-20T23:04:48Z", "updated_at": "2019-06-26T17:44:58Z", "closed_at": "2019-06-26T17:44:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nI'm pretty new to rust and programming in general. I was trying (failing) to write some toy async code and I got this internal compiler error, the theme seems to be always report ICEs so here we go\r\nThis was from cargo:\r\n~~~~\r\nCompiling async v0.1.0 (/home/james/dev/async)\r\nerror[E0728]: `await` is only allowed inside `async` functions and blocks\r\n  --> src/main.rs:30:1\r\n   |\r\n26 |   fn main() -> () {\r\n   |      ---- this is not `async`\r\n...\r\n30 | / async{\r\n31 | |     let task1 = print_dur(1).await;\r\n32 | |     let task2 = print_dur(3).await;\r\n33 | |     // pool.run(task1);\r\n34 | | }.await\r\n   | |_______^ only allowed inside `async` functions and blocks\r\n\r\nwarning: unused import: `futures::executor::block_on`\r\n --> src/main.rs:7:5\r\n  |\r\n7 | use futures::executor::block_on;\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: #[warn(unused_imports)] on by default\r\n\r\nwarning: unused import: `tokio::timer`\r\n --> src/main.rs:9:5\r\n  |\r\n9 | use tokio::timer;\r\n  |     ^^^^^^^^^^^^\r\n\r\nwarning: unused import: `tokio::prelude::*`\r\n  --> src/main.rs:10:5\r\n   |\r\n10 | use tokio::prelude::*;\r\n   |     ^^^^^^^^^^^^^^^^^\r\n\r\nthread 'rustc' panicked at 'src/librustc/hir/map/hir_id_validator.rs:25: \r\nItemLocalIds not assigned densely in ::main[0]. Max ItemLocalId = 16, missing IDs = [\"[local_id: 2, node:unknown node (hir_id=HirId { owner: DefIndex(27), local_id: 2 })]\", \"[local_id: 3, node:unknown node (hir_id=HirId { owner: DefIndex(27), local_id: 3 })]\"]; seens IDs = [\"(HirId { owner: DefIndex(27), local_id: 0 } fn main (hir_id=HirId { owner: DefIndex(27), local_id: 0 }))\", \"(HirId { owner: DefIndex(27), local_id: 14 } block { let mut pool = <ThreadPool>::new().unwrap(); (/*ERROR*/) } (hir_id=HirId { owner: DefIndex(27), local_id: 14 }))\", \"(HirId { owner: DefIndex(27), local_id: 11 } expr <ThreadPool>::new().unwrap() (hir_id=HirId { owner: DefIndex(27), local_id: 11 }))\", \"(HirId { owner: DefIndex(27), local_id: 8 } path segment new (hir_id=HirId { owner: DefIndex(27), local_id: 8 }))\", \"(HirId { owner: DefIndex(27), local_id: 5 } path segment unwrap (hir_id=HirId { owner: DefIndex(27), local_id: 5 }))\", \"(HirId { owner: DefIndex(27), local_id: 16 } type () (hir_id=HirId { owner: DefIndex(27), local_id: 16 }))\", \"(HirId { owner: DefIndex(27), local_id: 13 } expr (/*ERROR*/) (hir_id=HirId { owner: DefIndex(27), local_id: 13 }))\", \"(HirId { owner: DefIndex(27), local_id: 10 } expr <ThreadPool>::new() (hir_id=HirId { owner: DefIndex(27), local_id: 10 }))\", \"(HirId { owner: DefIndex(27), local_id: 7 } type ThreadPool (hir_id=HirId { owner: DefIndex(27), local_id: 7 }))\", \"(HirId { owner: DefIndex(27), local_id: 4 } local mut pool (hir_id=HirId { owner: DefIndex(27), local_id: 4 }))\", \"(HirId { owner: DefIndex(27), local_id: 1 } local mut pool (hir_id=HirId { owner: DefIndex(27), local_id: 1 }))\", \"(HirId { owner: DefIndex(27), local_id: 15 } expr { let mut pool = <ThreadPool>::new().unwrap(); (/*ERROR*/) } (hir_id=HirId { owner: DefIndex(27), local_id: 15 }))\", \"(HirId { owner: DefIndex(27), local_id: 12 } stmt let mut pool = <ThreadPool>::new().unwrap(); (hir_id=HirId { owner: DefIndex(27), local_id: 12 }))\", \"(HirId { owner: DefIndex(27), local_id: 9 } expr <ThreadPool>::new (hir_id=HirId { owner: DefIndex(27), local_id: 9 }))\", \"(HirId { owner: DefIndex(27), local_id: 6 } path segment ThreadPool (hir_id=HirId { owner: DefIndex(27), local_id: 6 }))\"]', src/librustc/util/bug.rs:37:26\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:47\r\n   3: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:36\r\n   4: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:198\r\n   5: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:212\r\n   6: rustc::util::common::panic_hook\r\n   7: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:479\r\n   8: std::panicking::begin_panic\r\n   9: rustc::util::bug::opt_span_bug_fmt::{{closure}}\r\n  10: rustc::ty::context::tls::with_opt::{{closure}}\r\n  11: rustc::ty::context::tls::with_context_opt\r\n  12: rustc::ty::context::tls::with_opt\r\n  13: rustc::util::bug::opt_span_bug_fmt\r\n  14: rustc::util::bug::bug_fmt\r\n  15: rustc::hir::map::hir_id_validator::check_crate\r\n  16: rustc::util::common::time\r\n  17: rustc::hir::map::map_crate\r\n  18: rustc_interface::passes::create_global_ctxt::{{closure}}\r\n  19: rustc_data_structures::box_region::PinnedGenerator<I,A,R>::new\r\n  20: rustc_interface::passes::create_global_ctxt\r\n  21: rustc_interface::queries::Query<T>::compute\r\n  22: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::global_ctxt\r\n  23: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  24: std::thread::local::LocalKey<T>::with\r\n  25: scoped_tls::ScopedKey<T>::set\r\n  26: syntax::with_globals\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nquery stack during panic:\r\nend of query stack\r\nerror: aborting due to previous error\r\n\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.37.0-nightly (2fe7b3383 2019-06-19) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nerror: Could not compile `async`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n~~~~\r\n\r\nThe code I was trying was this code:\r\n\r\n~~~~rust\r\n#![feature(async_await)]\r\nextern crate runtime;\r\nuse futures::future;\r\nuse futures::executor::block_on;\r\nuse futures_executor::ThreadPool;\r\nuse tokio::timer;\r\nuse tokio::prelude::*;\r\n\r\nuse std::{ thread, time };\r\n\r\n\r\nasync fn print_dur(dur:u64) {\r\n    println!(\"starting\");\r\n    thread::sleep(time::Duration::from_secs(dur));\r\n    println!(\"{:?} done\", dur);\r\n}\r\n\r\nasync fn run_twice() {\r\n    let x = vec![print_dur(1), print_dur(5), print_dur(1)];\r\n    future::join_all(x);\r\n}\r\n\r\nfn main() -> () {\r\nlet mut pool = ThreadPool::new().unwrap();\r\n\r\n\r\nasync{\r\n    let task1 = print_dur(1).await;\r\n    let task2 = print_dur(3).await;\r\n    // pool.run(task1);\r\n}.await\r\n\r\n}\r\n~~~~\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\nThis issue has been assigned to @doctorn via [this comment](https://github.com/rust-lang/rust/issues/62009#issuecomment-504738919).\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"doctorn\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62009/timeline", "performed_via_github_app": null, "state_reason": "completed"}