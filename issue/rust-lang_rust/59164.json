{"url": "https://api.github.com/repos/rust-lang/rust/issues/59164", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59164/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59164/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59164/events", "html_url": "https://github.com/rust-lang/rust/issues/59164", "id": 420675838, "node_id": "MDU6SXNzdWU0MjA2NzU4Mzg=", "number": 59164, "title": "C runtime library is not linked on macOS", "user": {"login": "lwshang", "id": 13881324, "node_id": "MDQ6VXNlcjEzODgxMzI0", "avatar_url": "https://avatars.githubusercontent.com/u/13881324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lwshang", "html_url": "https://github.com/lwshang", "followers_url": "https://api.github.com/users/lwshang/followers", "following_url": "https://api.github.com/users/lwshang/following{/other_user}", "gists_url": "https://api.github.com/users/lwshang/gists{/gist_id}", "starred_url": "https://api.github.com/users/lwshang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lwshang/subscriptions", "organizations_url": "https://api.github.com/users/lwshang/orgs", "repos_url": "https://api.github.com/users/lwshang/repos", "events_url": "https://api.github.com/users/lwshang/events{/privacy}", "received_events_url": "https://api.github.com/users/lwshang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 123111, "node_id": "MDU6TGFiZWwxMjMxMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-macos", "name": "O-macos", "color": "6e6ec0", "default": false, "description": "Operating system: macOS"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-13T19:18:17Z", "updated_at": "2021-12-10T18:34:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Problem**\r\nrustc is not default to link C runtime library on macOS. I'm trying to write rust binding for a C library. That C library is shipped with my crate by a git submodule. The C library uses functionality provide by C runtime library. When I run `cargo test` without any special cargo configuration, it failed at linking stage because it cannot find the symbol  `__emutls_get_address` which is provided in C runtime library.\r\n\r\nThe bug doesn't happen on Linux. On Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-46-generic x86_64). With the help of nightly `rustc -Z print-link-args`, I found out that rustc on linux has a link arg `-lgcc_s` which resolve to `/usr/lib/gcc/x86_64-linux-gnu/7/libgcc_s.so`.\r\n\r\n\r\n**Steps**\r\n<!-- The steps to reproduce the bug. -->\r\n\r\n1. Get my repo\r\n```\r\n$ git clone git@github.com:lwshang/q-capi.git --single-branch --branch rustc-link\r\n$ cd q-capi\r\n$ git submodule update --init\r\n```\r\n2. disable my workaround in` .cargo/config`\r\n```\r\n$ mv .cargo .cargo.bk\r\n```\r\n3. Try to build the test executable\r\n```\r\n$ cargo test\r\n...\r\n  = note: Undefined symbols for architecture x86_64:\r\n            \"___emutls_get_address\", referenced from:\r\n                l004 in e.o\r\n...\r\n```\r\n\r\n\r\n**Possible Solution(s)**\r\n<!-- Not obligatory, but suggest a fix/reason for the bug, -->\r\n<!-- or ideas how to implement the addition or change -->\r\nCurrently, I have a workaround to separately add link-args in `.cargo/config` which specify the path to a C runtime library. But this is just a temporary solution, since the path is version sensitive, it will be different on different version of macOS with different version of Xcode.\r\n\r\nIf we compile a C program, the final link process always links a C runtime library. Depends on the compiler, different lib will be linked.\r\n\r\n1. If using macOS 10.14.3 system clang, it links `/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.0/lib/darwin/libclang_rt.osx.a`. (This is what I have in `.cargo/config`)\r\n\r\n2. If using brew gcc-8, there is a link arg\r\n`-lgcc_ext.10.5` which resolve to  `/usr/local/Cellar/gcc/8.3.0/lib/gcc/8/libgcc_ext.10.5.dylib`.\r\n\r\nIf rustc default to link the first one (`libclang_rt.osx.a`), the special setting in `.cargo/config` will be non-necessary.\r\n\r\n**meta**\r\n```\r\nrustc 1.33.0 (2aa4c46cf 2019-02-28)\r\nbinary: rustc\r\ncommit-hash: 2aa4c46cfdd726e97360c2734835aa3515e8c858\r\ncommit-date: 2019-02-28\r\nhost: x86_64-apple-darwin\r\nrelease: 1.33.0\r\nLLVM version: 8.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59164/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59164/timeline", "performed_via_github_app": null, "state_reason": null}