{"url": "https://api.github.com/repos/rust-lang/rust/issues/93884", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93884/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93884/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93884/events", "html_url": "https://github.com/rust-lang/rust/issues/93884", "id": 1131445059, "node_id": "I_kwDOAAsO6M5DcHtD", "number": 93884, "title": "Detect \"only written\" value for values only accumulated into but never otherwise read", "user": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-02-11T01:45:08Z", "updated_at": "2023-04-05T17:28:32Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Rust has a useful warning for values that only ever get written, but never read.\r\n\r\nHowever, if a value gets read as part of accumulating into it, that read will suppress the warning.\r\n\r\nSample code:\r\n\r\n```rust\r\nfn main() {\r\n    let mut total1 = 0;\r\n    let mut total2 = 0;\r\n    let mut max1 = 0;\r\n    let mut max2 = 0;\r\n    for i in 0..1000 {\r\n        total1 = total1 + i;\r\n        total2 += i;\r\n        max1 = std::cmp::max(max1, i);\r\n        if i > max2 {\r\n            max2 = i;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nLogically, all four variables are never usefully read. However, the Rust compiler only manages to flag `total2`, because the accumulation uses the `+=` operator.\r\n\r\nIt seems feasible to detect at least *simple* cases here:\r\n\r\nWe could assume operators like `+` don't have side effects, the way we currently assume OpAssign operators like `+=` don't have side effects, and detect cases where a value is only read to be accumulated back into the same value. This seems similar to the current logic that propagates unused-ness backwards from other unused things; `total1 = total1 + i` would only count as a use of `total1` if `total1` was otherwise used, meaning `total1 = total1 + i` has no net effect on whether `total1` is used.\r\n\r\nSimilarly, though it may be a bit more difficult, we could treat `std::cmp::max` and similar hand-rolled code as not constituting a use if they're just accumulating back into the same value.\r\n\r\nNote: this only seems worth doing if it costs almost nothing. I'm hoping that it may be possible as part of an existing pass without much added cost.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93884/timeline", "performed_via_github_app": null, "state_reason": null}