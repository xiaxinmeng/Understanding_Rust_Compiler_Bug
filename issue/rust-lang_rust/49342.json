{"url": "https://api.github.com/repos/rust-lang/rust/issues/49342", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49342/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49342/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49342/events", "html_url": "https://github.com/rust-lang/rust/issues/49342", "id": 308298694, "node_id": "MDU6SXNzdWUzMDgyOTg2OTQ=", "number": 49342, "title": "Windows: success of canonicalizing r\"\\\" depends on whether set_current_dir has been called", "user": {"login": "vitiral", "id": 5587659, "node_id": "MDQ6VXNlcjU1ODc2NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5587659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vitiral", "html_url": "https://github.com/vitiral", "followers_url": "https://api.github.com/users/vitiral/followers", "following_url": "https://api.github.com/users/vitiral/following{/other_user}", "gists_url": "https://api.github.com/users/vitiral/gists{/gist_id}", "starred_url": "https://api.github.com/users/vitiral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vitiral/subscriptions", "organizations_url": "https://api.github.com/users/vitiral/orgs", "repos_url": "https://api.github.com/users/vitiral/repos", "events_url": "https://api.github.com/users/vitiral/events{/privacy}", "received_events_url": "https://api.github.com/users/vitiral/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2018-03-24T21:02:57Z", "updated_at": "2023-03-19T09:48:29Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Problem: sometimes `Path::new(r\"\\\").canonicalize() fails\r\n\r\nNote: apparently this isn't _necessarily_ [against the spec](https://stackoverflow.com/a/151875/1036670) (a better link to the windows spec would be nice)\r\n\r\n> In Windows it's relative to what drive your current working directory is at the time. If your current directory is in the C drive then C:\\ would be the root. If the current directory is the D drive then D:\\ would be the root. There is no absolute root.\r\n\r\nRegardless of whether it is against the spec or not, I think basing the \"root location\" off of the `current_dir` is a best practice. At the very least, having `canonicalize(r\"\\\")` fail is unexpected.\r\n\r\n## Full Report\r\nI hit this problem during one of my tests for [path_abs](https://github.com/vitiral/path_abs). The way I handle it is thorny (and there is still a TODO hidden in there).\r\n\r\nThe below test _passes_ on windows (and linux obviously):\r\n```\r\n    if cfg!(windows) {\r\n        let result = Path::new(r\"\\\").canonicalize();\r\n        assert!(result.is_ok(), \"Should work before set_current_dir is called: {:?}\", result);\r\n    }\r\n    let tmp = tempdir::TempDir::new(\"ex\").unwrap();\r\n    let tmp = tmp.path();\r\n    let tmp_abs = PathArc::new(&tmp).canonicalize().unwrap();\r\n    env::set_current_dir(&tmp_abs).unwrap();\r\n    if cfg!(windows) {\r\n        let result = Path::new(r\"\\\").canonicalize();\r\n        assert!(result.is_err());\r\n        println!(\"Got ERR cananonicalizing root: {}\", result.unwrap_err());\r\n    }\\\r\n```\r\n\r\nThe way I handle this in `path_abs` is the following:\r\n- If the first component is `Root`\r\n- Get the `current_dir` and use it's root instead.\r\n\r\nThat code [is here](https://github.com/vitiral/path_abs/blob/e6b8b31a70f8e9d03bba3350b229fe9cb26feed6/src/arc.rs#L378) (it's messy and tied to resolving the absolute path in general).\r\n\r\n# Rust Info\r\nRunning in Windows Appveyor: https://ci.appveyor.com/project/vitiral/path-abs\r\n```\r\n  stable installed - rustc 1.24.1 (d3ae9a9e0 2018-02-27)\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49342/timeline", "performed_via_github_app": null, "state_reason": null}