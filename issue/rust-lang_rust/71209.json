{"url": "https://api.github.com/repos/rust-lang/rust/issues/71209", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71209/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71209/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71209/events", "html_url": "https://github.com/rust-lang/rust/issues/71209", "id": 601246892, "node_id": "MDU6SXNzdWU2MDEyNDY4OTI=", "number": 71209, "title": "Misleading error message originating from the fact that closure types are not inferred being polymorphic over lifetimes. (And related errors in need of improvement.)", "user": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}, {"id": 1624891239, "node_id": "MDU6TGFiZWwxNjI0ODkxMjM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-incorrect", "name": "D-incorrect", "color": "c9f7a3", "default": false, "description": "A diagnostic that is giving misleading or incorrect information"}, {"id": 1839565265, "node_id": "MDU6TGFiZWwxODM5NTY1MjY1", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-terse", "name": "D-terse", "color": "c9f7a3", "default": false, "description": "A diagnostic that doesn't give enough information about the problem at hand"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-16T16:58:08Z", "updated_at": "2020-04-17T21:40:18Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The following code produces an error message that doesn\u2019t at all explain the actual problem.\r\n```rust\r\nfn foo() -> &'static str {\r\n    let identity = |x| x;\r\n    let result = identity(\"result!\");\r\n    let local_string: String = \"local\".into();\r\n    let _ = identity(&local_string);\r\n    \r\n    result\r\n}\r\n\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=b38bbf2da51154080363926cbb21143d))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0515]: cannot return value referencing local variable `local_string`\r\n --> src/lib.rs:7:5\r\n  |\r\n5 |     let _ = identity(&local_string);\r\n  |                      ------------- `local_string` is borrowed here\r\n6 |     \r\n7 |     result\r\n  |     ^^^^^^ returns a value referencing data owned by the current function\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0515`.\r\nerror: could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n```\r\nIn particular looking at this statement \u2013 \u201creturns a value referencing data owned by the current function\u201d \u2013 that\u2019s just _not what is going on here_.\r\n\r\nWhat really is going on here (as far as I can tell) is that `identity` is inferred as some closure implementing `Fn(A) -> A` for `A` to be determined, then the first call `identity(\"result!\")` tells the type inference that `A` is `&'a str` for some `'a` to be determined, and finally `identity(&local_string)` already knows to apply unsized coercion and typechecks nailing `'a` down to the lifetime of `local_string`. This means `result` is an `&'a str` with that same lifetime.\r\n\r\nA bit less confusing of an error message but still suboptimal IMO is what you get when trying to use a closure truly polymorphically:\r\n```rust\r\nfn foo() {\r\n    let identity = |x| x;\r\n    identity(1u8);\r\n    identity(1u16);\r\n}\r\n\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=4277c8cc1d67fab42fdb8330756b4055))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:4:14\r\n  |\r\n4 |     identity(1u16);\r\n  |              ^^^^ expected `u8`, found `u16`\r\n  |\r\nhelp: change the type of the numeric literal from `u16` to `u8`\r\n  |\r\n4 |     identity(1u8);\r\n  |              ^^^\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n```\r\nI think this could be improved by a message explaining where the expected type `u8` comes from.\r\n\r\n<br></br><br></br>\r\n\r\nBack to the original example.. in my opinion it would be nice if the example would not error at all. After all the following _does_ work:\r\n```rust\r\nfn str_closure<F: Fn(&str) -> &str>(f: F) -> F { f }\r\n\r\nfn foo() -> &'static str {\r\n    let identity = str_closure(|x| x);\r\n    let result = identity(\"result!\");\r\n    let local_string: String = \"local\".into();\r\n    let _ = identity(&local_string);\r\n    \r\n    result\r\n}\r\n```\r\nHowever, this again doesn\u2019t work:\r\n```rust\r\nfn str_closure<F: Fn(&str) -> &str>(f: F) -> F { f }\r\n\r\nfn foo() -> &'static str {\r\n    let closure = |x| x;\r\n    let identity = str_closure(closure);\r\n    let result = identity(\"result!\");\r\n    let local_string: String = \"local\".into();\r\n    let _ = identity(&local_string);\r\n    \r\n    result\r\n}\r\n```\r\n\r\n<br></br><br></br>\r\n\r\nFinally, on the topic of _trying to get more polymorphism out of closures than they support_, I ran into this error message (which I could move into a separate issue if you guys think that it\u2019s completely unrelated):\r\n```rust\r\nfn f<A>() -> A { unimplemented!() }\r\nfn foo() {\r\n    let _ = f;\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e7a932c7d50e8e7638a57b2373cf9b35))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0282]: type annotations needed for `fn() -> A {f::<A>}`\r\n --> src/lib.rs:3:13\r\n  |\r\n3 |     let _ = f;\r\n  |         -   ^ cannot infer type for type parameter `A` declared on the function `f`\r\n  |         |\r\n  |         consider giving this pattern the explicit type `fn() -> A {f::<A>}`, where the type parameter `A` is specified\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0282`.\r\nerror: could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n```\r\nWhich is just weird, because: What is this `fn() -> A {f::<A>}` syntax supposed to mean?\r\n\r\n@rustbot modify labels to T-compiler, T-lang, A-diagnostics, D-incorrect, D-terse, D-papercut, C-bug, C-enhancement, A-closures, A-inference.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71209/timeline", "performed_via_github_app": null, "state_reason": null}