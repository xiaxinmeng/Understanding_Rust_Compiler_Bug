{"url": "https://api.github.com/repos/rust-lang/rust/issues/103547", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103547/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103547/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103547/events", "html_url": "https://github.com/rust-lang/rust/issues/103547", "id": 1423059565, "node_id": "I_kwDOAAsO6M5U0ipt", "number": 103547, "title": "Missing trait error for type (used as a type parameter) containing a trait object can have a broader span than expected", "user": {"login": "Imberflur", "id": 2002109, "node_id": "MDQ6VXNlcjIwMDIxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/2002109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Imberflur", "html_url": "https://github.com/Imberflur", "followers_url": "https://api.github.com/users/Imberflur/followers", "following_url": "https://api.github.com/users/Imberflur/following{/other_user}", "gists_url": "https://api.github.com/users/Imberflur/gists{/gist_id}", "starred_url": "https://api.github.com/users/Imberflur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Imberflur/subscriptions", "organizations_url": "https://api.github.com/users/Imberflur/orgs", "repos_url": "https://api.github.com/users/Imberflur/repos", "events_url": "https://api.github.com/users/Imberflur/events{/privacy}", "received_events_url": "https://api.github.com/users/Imberflur/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-10-25T20:44:57Z", "updated_at": "2022-10-25T20:44:57Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=7a574fab349d3be4d4574b12df5a9932\r\n\r\n```rust\r\nstruct TypeCombiner<A, B>(A, B);\r\n\r\ntrait MyTrait {\r\n    type Assoc;\r\n}\r\n\r\ntrait OtherTrait {}\r\n\r\nstruct A;\r\nstruct B;\r\nstruct C {\r\n    a: A,\r\n    b: B,\r\n}\r\n\r\nimpl MyTrait for A {\r\n    type Assoc = ();\r\n}\r\n\r\n// missing implementation for B\r\n\r\nimpl MyTrait for C {\r\n    // span for error output of missing MyTrait for the `Box<T>` type is taken\r\n    // from the whole `TypeCombiner<...>` when `T` is a trait object \r\n    type Assoc = TypeCombiner<\r\n        <A as MyTrait>::Assoc,\r\n        <Box<dyn OtherTrait> as MyTrait>::Assoc,\r\n    >;\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[[E0277]](https://doc.rust-lang.org/stable/error-index.html#E0277): the trait bound `Box<(dyn OtherTrait + 'static)>: MyTrait` is not satisfied\r\n  --> src/lib.rs:25:18\r\n   |\r\n25 |       type Assoc = TypeCombiner<\r\n   |  __________________^\r\n26 | |         <A as MyTrait>::Assoc,\r\n27 | |         <Box<dyn OtherTrait> as MyTrait>::Assoc,\r\n28 | |     >;\r\n   | |_____^ the trait `MyTrait` is not implemented for `Box<(dyn OtherTrait + 'static)>`\r\n   |\r\n   = help: the following other types implement trait `MyTrait`:\r\n             A\r\n             C\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\nerror[[E0277]](https://doc.rust-lang.org/stable/error-index.html#E0277): the trait bound `Box<(dyn OtherTrait + 'static)>: MyTrait` is not satisfied\r\n  --> src/lib.rs:27:9\r\n   |\r\n27 |         <Box<dyn OtherTrait> as MyTrait>::Assoc,\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `Box<(dyn OtherTrait + 'static)>: MyTrait`\r\n   |\r\n   = help: the following other types implement trait `MyTrait`:\r\n             A\r\n             C\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n\r\nNote that replacing `dyn OtherTrait` with a non trait object type like `u8` yields the desired error output. My first guess would be that this is related to expanding `dyn OtherTrait` to `(dyn OtherTrait + 'static)` (but this is just a random guess).\r\n\r\nIn my case, this causes error output in custom derive macro generated code to not point back to the original fields. Normally, the proc macro can give each type parameter the span info for the field it is derived from and then error output will show that field.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103547/timeline", "performed_via_github_app": null, "state_reason": null}