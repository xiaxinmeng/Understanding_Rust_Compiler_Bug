{"url": "https://api.github.com/repos/rust-lang/rust/issues/20854", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/20854/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/20854/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/20854/events", "html_url": "https://github.com/rust-lang/rust/issues/20854", "id": 53950570, "node_id": "MDU6SXNzdWU1Mzk1MDU3MA==", "number": 20854, "title": "[Docs] Add richer examples to the Guide to Strings", "user": {"login": "velvia", "id": 1062875, "node_id": "MDQ6VXNlcjEwNjI4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1062875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/velvia", "html_url": "https://github.com/velvia", "followers_url": "https://api.github.com/users/velvia/followers", "following_url": "https://api.github.com/users/velvia/following{/other_user}", "gists_url": "https://api.github.com/users/velvia/gists{/gist_id}", "starred_url": "https://api.github.com/users/velvia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/velvia/subscriptions", "organizations_url": "https://api.github.com/users/velvia/orgs", "repos_url": "https://api.github.com/users/velvia/repos", "events_url": "https://api.github.com/users/velvia/events{/privacy}", "received_events_url": "https://api.github.com/users/velvia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-10T07:50:57Z", "updated_at": "2015-01-21T22:34:37Z", "closed_at": "2015-01-21T22:34:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "As someone coming from dynamic as well as JVM languages, Rust strings were confusing.  The Strings guide has very helpful intro material, but soon I found myself stumbling on more sophisticated use cases.\n\nFor example, let's say I want a struct where a member stores a list of strings:\n\n``` rust\npub struct DataRecord {\n  pub name: String,\n  pub tags: Vec<&'static str>\n}\n```\n\nThe number of possible choices is bewildering.   Do I use `[String]`, `Vec<String>`, `[&str]`, etc. etc.?   Minimizing allocation is good, but structs are tricky because they might be kept around and bounced between multiple function calls before being disposed, or even kept in some other data structure.  Also, each string within the list might come from a constant or not.  Much more things to think about.\n\nAnyways, the suggestion would be to cover a few examples like this where you use Strings in structs, vecs, arrays etc and go over what are best practices and common scenarios.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/20854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/20854/timeline", "performed_via_github_app": null, "state_reason": "completed"}