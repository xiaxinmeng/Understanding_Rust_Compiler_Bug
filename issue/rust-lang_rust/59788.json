{"url": "https://api.github.com/repos/rust-lang/rust/issues/59788", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59788/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59788/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59788/events", "html_url": "https://github.com/rust-lang/rust/issues/59788", "id": 430216247, "node_id": "MDU6SXNzdWU0MzAyMTYyNDc=", "number": 59788, "title": "attribute to reserve None value on Option<enum>", "user": {"login": "npmccallum", "id": 288304, "node_id": "MDQ6VXNlcjI4ODMwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/288304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npmccallum", "html_url": "https://github.com/npmccallum", "followers_url": "https://api.github.com/users/npmccallum/followers", "following_url": "https://api.github.com/users/npmccallum/following{/other_user}", "gists_url": "https://api.github.com/users/npmccallum/gists{/gist_id}", "starred_url": "https://api.github.com/users/npmccallum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npmccallum/subscriptions", "organizations_url": "https://api.github.com/users/npmccallum/orgs", "repos_url": "https://api.github.com/users/npmccallum/repos", "events_url": "https://api.github.com/users/npmccallum/events{/privacy}", "received_events_url": "https://api.github.com/users/npmccallum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 1089771154, "node_id": "MDU6TGFiZWwxMDg5NzcxMTU0", "url": "https://api.github.com/repos/rust-lang/rust/labels/needs-rfc", "name": "needs-rfc", "color": "fceb9f", "default": false, "description": "This change is large or controversial enough that it should have an (e-)RFC accepted before doing it"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-08T01:11:09Z", "updated_at": "2019-04-10T14:34:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For example:\r\n\r\n```rust\r\n#[repr(u8)]\r\n#[reserved(0)]\r\nenum Foo {\r\n    Bar = 17,\r\n    Baz = 32,\r\n}\r\n\r\nfn main() {\r\n    assert_eq!(std::mem::size_of::<Option<Foo>>(), std::mem::size_of::<Foo>());\r\n\r\n    let foo: Option<Foo> = None;\r\n    let byte: u8 = std::mem::transmute(foo);\r\n    println!(\"{}\", byte); // Prints 0\r\n}\r\n```\r\n\r\nThis would be incredibly useful in FFI situations. Often there is an enum of values for which a particular value (usually zero) is reserved to represent \"none\" or \"invalid\" or \"empty\". This would make translation into idiomatic Rust both easy and safe.\r\n\r\nRust already optimizes `Option<enum>` this way. However, it always selects the highest used discriminant + 1 to represent `None` (this is likely undefined behavior). Having control over this value simply makes the behavior defined. It would also mean that the compiler could warn if there was any attempt to use the reserved value in an actual enumeration item.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59788/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59788/timeline", "performed_via_github_app": null, "state_reason": null}