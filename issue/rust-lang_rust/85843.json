{"url": "https://api.github.com/repos/rust-lang/rust/issues/85843", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85843/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85843/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85843/events", "html_url": "https://github.com/rust-lang/rust/issues/85843", "id": 906980598, "node_id": "MDU6SXNzdWU5MDY5ODA1OTg=", "number": 85843, "title": "Suggest borrowing from argument when return type is a borrow without an applicable lifetime", "user": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-05-31T02:29:41Z", "updated_at": "2021-05-31T02:29:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given:\r\n\r\n```rust\r\npub struct Super {\r\n    pub super_name: String,\r\n    pub real_name: String,\r\n    pub power: u16,\r\n}\r\n\r\npub struct Group {\r\n    pub name: String,\r\n    pub members: Vec<Super>,\r\n}\r\n\r\npub fn find_largest_group(groups: Vec<Group>) -> Option<&Group> {\r\n    groups\r\n        .iter()\r\n        .max_by(|&g1, &g2| g1.members.len().partial_cmp(&g2.members.len()).unwrap())\r\n}\r\n```\r\n\r\nwe currently display:\r\n\r\n```\r\nerror[E0106]: missing lifetime specifier\r\n --> src/solutions.rs:3:57\r\n  |\r\n3 | pub fn find_largest_group(groups: Vec<Group>) -> Option<&Group> {\r\n  |                                                         ^ expected named lifetime parameter\r\n  |\r\n  = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\r\nhelp: consider using the `'static` lifetime\r\n  |\r\n3 | pub fn find_largest_group(groups: Vec<Group>) -> Option<&'static Group> {\r\n  |                                                         ^^^^^^^^\r\n```\r\n\r\nSuggesting `'static` lifetimes is _usually_ not what we want to do, and certainly not as the _only_ suggestion.\r\n\r\nSomeone might try instead to write\r\n\r\n```rust\r\npub fn find_largest_group<'a>(groups: Vec<Group>) -> Option<&'a Group> {\r\n    groups\r\n        .iter()\r\n        .max_by(|&g1, &g2| g1.members.len().partial_cmp(&g2.members.len()).unwrap())\r\n}\r\n```\r\n\r\nwhich would display\r\n\r\n```\r\nerror[E0515]: cannot return value referencing function parameter `groups`\r\n  --> src/foo.rs:13:5\r\n   |\r\n13 |       groups\r\n   |       ^-----\r\n   |       |\r\n   |  _____`groups` is borrowed here\r\n   | |\r\n14 | |         .iter()\r\n15 | |         .max_by(|&g1, &g2| g1.members.len().partial_cmp(&g2.members.len()).unwrap())\r\n   | |____________________________________________________________________________________^ returns a value referencing data owned by the current function\r\n```\r\n\r\nIn both cases we should (somehow) suggest the user to borrow the argument:\r\n\r\n```rust\r\npub fn find_largest_group(groups: &Vec<Group>) -> Option<&Group> {\r\n    groups\r\n        .iter()\r\n        .max_by(|&g1, &g2| g1.members.len().partial_cmp(&g2.members.len()).unwrap())\r\n}\r\n```\r\n\r\nFor the first step, it might be difficult, we might have to do some analysis we are not currently doing to figure out from _which_ argument we should be borrowing from. For the second step we already know that `groups` is borrowed and something from it is being returned, which should make suggesting to change the argument straightforward.\r\n\r\n_Taken from https://blog.frankel.ch/start-rust/1/_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85843/timeline", "performed_via_github_app": null, "state_reason": null}