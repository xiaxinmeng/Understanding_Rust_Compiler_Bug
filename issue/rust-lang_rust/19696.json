{"url": "https://api.github.com/repos/rust-lang/rust/issues/19696", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19696/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19696/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19696/events", "html_url": "https://github.com/rust-lang/rust/issues/19696", "id": 51557010, "node_id": "MDU6SXNzdWU1MTU1NzAxMA==", "number": 19696, "title": "If slower than while in nested loops", "user": {"login": "paholg", "id": 4908217, "node_id": "MDQ6VXNlcjQ5MDgyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4908217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paholg", "html_url": "https://github.com/paholg", "followers_url": "https://api.github.com/users/paholg/followers", "following_url": "https://api.github.com/users/paholg/following{/other_user}", "gists_url": "https://api.github.com/users/paholg/gists{/gist_id}", "starred_url": "https://api.github.com/users/paholg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paholg/subscriptions", "organizations_url": "https://api.github.com/users/paholg/orgs", "repos_url": "https://api.github.com/users/paholg/repos", "events_url": "https://api.github.com/users/paholg/events{/privacy}", "received_events_url": "https://api.github.com/users/paholg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2014-12-10T13:18:18Z", "updated_at": "2015-01-20T10:43:12Z", "closed_at": "2015-01-20T10:42:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Inside of nested `for` loops, `if` statements can be substantially slower than `while` loops that do the same thing.\n\nHere is the simplest example that I could come up with (anything simpler, and the compiler gets rid of the loop completely). With a `while` loop, we have:\n\n```\nfn main() {\n    let mut v = [1i, 1, 1];\n    for _ in range(0u, 10000000000) {\n        for i in range(0u, 3) {\n            while v[i] > 0 { v[i] -= 1; }\n        }\n    }\n}\n```\n\nBulding with `cargo build --release` and running with `time` gives the output:\n\n```\n./target/release/test  11.39s user 0.00s system 100% cpu 11.390 total\n```\n\nReplacing the `while` loop with an `if` statement (which gives the same result, as the `while` only ever loops once):\n\n```\nfn main() {\n    let mut v = [1i, 1, 1];\n    for _ in range(0u, 10000000000) {\n        for i in range(0u, 3) {\n            if v[i] > 0 { v[i] -= 1; }\n        }\n    }\n}\n```\n\nBulding with `cargo build --release` and running with `time` gives the output:\n\n```\n./target/release/test  22.23s user 0.00s system 100% cpu 22.218 total\n```\n\nThere is clearly some optimization at play here for `while` loops that could potentially be applied to `if` statements as well.\n\nI first noticed this here: https://github.com/paholg/monte-carlo-test/blob/master/src/v1.rs in the `fix_periodic()` and `periodic_diff()` functions. I have since unwrapped the `for` loops which gave a substantial speed increase for the program (around 40-50%), which is potentially another issue, or potentially part of the same issue.\n\nAs it is a project that compares speed for similar C++ and Rust programs, I may as well mention that unwrapping the `for` loops in those functions also increased efficiency for the C++ code with g++ versions earlier than 4.8 and with clang++, and that with the unwrapped `for`, the Rust code is essentially the same speed as the C++ code.\n\nMy Rust version:\n\n```\nrustc 0.13.0-nightly (8bca470c5 2014-12-08 00:12:30 +0000)\nbinary: rustc\ncommit-hash: 8bca470c5acf13aa20022a2c462a89f72de721fc\ncommit-date: 2014-12-08 00:12:30 +0000\nhost: x86_64-unknown-linux-gnu\nrelease: 0.13.0-nightly\n```\n", "closed_by": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19696/timeline", "performed_via_github_app": null, "state_reason": "completed"}