{"url": "https://api.github.com/repos/rust-lang/rust/issues/41597", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41597/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41597/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41597/events", "html_url": "https://github.com/rust-lang/rust/issues/41597", "id": 224975272, "node_id": "MDU6SXNzdWUyMjQ5NzUyNzI=", "number": 41597, "title": "Specialization results in spurious mismatch type errors", "user": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-28T04:11:44Z", "updated_at": "2017-07-27T21:41:58Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "An upstream crate presents me with this API:\r\n\r\n```rust\r\ntrait Foo { }\r\n\r\ntrait Bar {\r\n    fn bar<F: Foo>(&self, f: F);\r\n}\r\n```\r\n\r\nThis is a fine API as far as it goes, but my problem is that I only care about one `Foo`, and I need `Bar` to be object safe. For my use case, this is the API I want:\r\n\r\n```rust\r\nstruct MyFoo;\r\n\r\nimpl Foo for MyFoo { }\r\n\r\ntrait MyBar {\r\n    fn my_bar(&self, f: MyFoo);\r\n}\r\n```\r\n\r\nBut I need to bridge `T: MyBar` to `T: Bar`. I have this solution, based on specialization, which I believe is correct:\r\n\r\n```rust\r\ntrait BarBridge<F: Foo> {\r\n    fn bridge(&self, f: F) -> F::Assoc;\r\n}\r\n\r\nstruct Bridge<T: MyBar>(T);\r\n\r\nimpl<T: MyBar> BarBridge<MyFoo> for Bridge<T> {\r\n    fn bridge(&self, f: MyFoo) -> bool {\r\n        self.0.my_bar(f)\r\n    }\r\n}\r\n\r\nimpl<T: MyBar, F: Foo> BarBridge<F> for Bridge<T> {\r\n    default fn bridge(&self, _: F) {\r\n        unreachable!()\r\n    }\r\n}\r\n\r\nimpl<T: MyBar> Bar for Bridge<T> {\r\n    fn bar<F: Foo>(&self, f: F) {\r\n        self.bridge(f)\r\n    }\r\n}\r\n```\r\n\r\nHowever this appears to greedily attempt to unify `F` with `MyFoo` because of the implementation of `BarBridge<MyFoo>` instead of recognizing the implementation of `forall<F: Foo> BarBridge<F>`.\r\n\r\ncc @nikomatsakis @aturon", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41597/timeline", "performed_via_github_app": null, "state_reason": null}