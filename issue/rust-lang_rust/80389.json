{"url": "https://api.github.com/repos/rust-lang/rust/issues/80389", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80389/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80389/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80389/events", "html_url": "https://github.com/rust-lang/rust/issues/80389", "id": 774930177, "node_id": "MDU6SXNzdWU3NzQ5MzAxNzc=", "number": 80389, "title": "Lifetime of input (key) to HashMap::get() gets entanged w/ that of its output (value)", "user": {"login": "zeenix", "id": 2027, "node_id": "MDQ6VXNlcjIwMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/2027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zeenix", "html_url": "https://github.com/zeenix", "followers_url": "https://api.github.com/users/zeenix/followers", "following_url": "https://api.github.com/users/zeenix/following{/other_user}", "gists_url": "https://api.github.com/users/zeenix/gists{/gist_id}", "starred_url": "https://api.github.com/users/zeenix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zeenix/subscriptions", "organizations_url": "https://api.github.com/users/zeenix/orgs", "repos_url": "https://api.github.com/users/zeenix/repos", "events_url": "https://api.github.com/users/zeenix/events{/privacy}", "received_events_url": "https://api.github.com/users/zeenix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-12-26T20:37:45Z", "updated_at": "2023-04-15T13:17:24Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nThe following code:\r\n\r\n```rust\r\nuse std::{borrow::Cow, collections::HashMap};\r\n\r\n#[derive(Debug)]\r\nstruct Message(String);\r\n\r\nimpl Message {\r\n    fn interface(&self) -> &str {\r\n        &self.0\r\n    }\r\n}\r\n\r\n#[derive(Debug)]\r\nstruct Proxy<'p>(Cow<'p, str>);\r\n\r\nimpl<'p> Proxy<'p> {\r\n    fn interface(&self) -> &str {\r\n        &self.0\r\n    }\r\n}\r\n\r\n#[derive(Hash, Eq, PartialEq)]\r\nstruct ProxyKey<'key>(Cow<'key, str>);\r\n\r\nimpl From<&Proxy<'_>> for ProxyKey<'_> {\r\n    fn from(proxy: &Proxy<'_>) -> Self {\r\n        ProxyKey(Cow::from(proxy.interface().to_owned()))\r\n    }\r\n}\r\n\r\nimpl<'key> From<&'key Message> for ProxyKey<'key> {\r\n    fn from(msg: &'key Message) -> Self {\r\n        ProxyKey(Cow::from(msg.interface()))\r\n    }\r\n}\r\n\r\nstruct ProxyGroup<'p> {\r\n    proxies: HashMap<ProxyKey<'static>, Proxy<'p>>,\r\n}\r\n\r\nimpl<'p> ProxyGroup<'p> {\r\n    pub fn new() -> Self {\r\n        Self {\r\n            proxies: HashMap::new(),\r\n        }\r\n    }\r\n\r\n    pub fn add<'a: 'p>(&mut self, proxy: Proxy<'a>) {\r\n        let key = ProxyKey::from(&proxy);\r\n        self.proxies.insert(key, proxy);\r\n    }\r\n\r\n    pub fn handle_next_signal(&self) {\r\n        let msg = Message(String::from(\"some.interface\"));\r\n\r\n        match self.get_proxy_for_msg(&msg) {\r\n            Some(_) => Self::consume_msg(msg),,\r\n            None => (),\r\n        }\r\n    }\r\n\r\n    fn get_proxy_for_msg<'a, 'b>(&'a self, msg: &'b Message) -> Option<&'a Proxy<'p>> \r\n    where\r\n        'p: 'a,\r\n    {\r\n        let key = ProxyKey::from(msg);\r\n\r\n        self.proxies.get(&key)\r\n    }\r\n\r\n    fn consume_msg(_msg: Message) {}\r\n}\r\n```\r\n\r\nWhich I (and devs I consulted on the Discord and IRC) think should compile. However, it doesn't and you get the following error:\r\n\r\n```\r\nerror[E0623]: lifetime mismatch\r\n  --> src/main.rs:67:9\r\n   |\r\n61 |     fn get_proxy_for_msg<'a, 'b>(&'a self, msg: &'b Message) -> Option<&'a Proxy<'p>> \r\n   |                                  --------       ----------- these two types are declared with different lifetimes...\r\n...\r\n67 |         self.proxies.get(&key)\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^ ...but data from `msg` flows into `self` here\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\ni-e for some reason the lifetime of the `key` get associated with lifetime of the `Proxy` value we get from the `HashMap::get` call. I think it's likely a compiler bug. Even it is not, it'd be great to get better diagnostics/error message from the compiler for this so I can tell what exactly is going wrong here.\r\n\r\n[Here](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=4ff71eafa906f51f8d45e8c9f59fa308) is the playground link for trying this out conveniently.\r\n\r\n**NB**: If I change the code to make use of iterator, it works:\r\n\r\n```rust\r\n    fn get_proxy_for_msg<'a, 'b>(&'a self, msg: &'b Message) -> Option<&'a Proxy<'p>>\r\n    where\r\n        'p: 'a,\r\n    {\r\n        let key = ProxyKey::from(msg);\r\n\r\n        self.proxies\r\n            .iter()\r\n            .find(|&(k, _)| &key == k)\r\n            .map(|(_, v)| v)\r\n    }\r\n```\r\n\r\n[Playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=958b8e29b7563369434e5618ebcafebb).\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.48.0 (7eac88abb 2020-11-16)\r\nbinary: rustc\r\ncommit-hash: 7eac88abb2e57e752f3302f02be5f3ce3d7adfb4\r\ncommit-date: 2020-11-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.48.0\r\nLLVM version: 11.0\r\n```\r\n\r\nReproducible on nightly (bb178237c 2020-12-25) as well.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80389/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80389/timeline", "performed_via_github_app": null, "state_reason": null}