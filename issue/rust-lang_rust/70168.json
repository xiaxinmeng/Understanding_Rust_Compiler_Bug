{"url": "https://api.github.com/repos/rust-lang/rust/issues/70168", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70168/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70168/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70168/events", "html_url": "https://github.com/rust-lang/rust/issues/70168", "id": 584741643, "node_id": "MDU6SXNzdWU1ODQ3NDE2NDM=", "number": 70168, "title": "Potential WF unsoundness: predicate_obligations doesn't check compute's return type.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-19T22:42:06Z", "updated_at": "2020-05-02T10:13:55Z", "closed_at": "2020-05-02T10:13:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`WfPredicates::compute` returns `false` if it can't make progress on an inference variable, and the original obligation should be retried later.\r\n*However*, `wf::predicate_obligations` doesn't check that return type and may (incorrectly) return no obligations.\r\n\r\nOn #70107 I suggested this:\r\n> Maybe it would be better to have a `struct NoProgress;` and `compute` return `Result<(), NoProgress>` instead of `bool`.\r\n\r\nI'm pretty sure now that it would've prevented this bug.\r\n\r\n<hr/>\r\n\r\nLooking at the users, only `wfcheck` uses this function, and only for the user-specified bounds, so it's possible inference variables are impossible to find (unless normalization introduces them, I guess?).\r\nIt might be fine to just create `WellFormed` obligation for the `ty::Infer` instead of bailing out (see below, this is the same as moving `return false` out of `WfPredicats::compute`)\r\n\r\n<hr/>\r\n\r\n~~Related, this looks wrong, or perhaps outdated?~~\r\nhttps://github.com/rust-lang/rust/blob/f4c675c476c18b1a11041193f2f59d695b126bc8/src/librustc_trait_selection/traits/wf.rs#L591\r\n\r\nIt's true that `ty::Infer` can't be found *as the first type* in the recursive call, but `compute` is a `loop`, and it uses `Ty::walk`.\r\n~~I'm amazed nobody has triggered this assert by e.g. causing an inference variable to be unified with `Vec<_>`, how is that possible?~~\r\n\r\n~~Maybe `ty::Infer` should only cause `return false` (i.e. `return Err(NoProgress)`) for `ty0`), not any of its descendants?~~\r\n\r\n(**EDIT**: Read the code more carefully and the check is `ty == ty0`, so while it's not an early like I would prefer, it does seem to only trigger on the root type)\r\n\r\nHowever, a few other things call `WfPredicats::compute` and it would be fine for them to create an obligation rather than erroring out, so maybe `wf::obligations` itself should do that check?\r\n\r\ncc @nikomatsakis @matthewjasper", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70168/timeline", "performed_via_github_app": null, "state_reason": "completed"}