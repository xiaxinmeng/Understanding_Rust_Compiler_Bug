{"url": "https://api.github.com/repos/rust-lang/rust/issues/89463", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89463/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89463/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89463/events", "html_url": "https://github.com/rust-lang/rust/issues/89463", "id": 1014026885, "node_id": "I_kwDOAAsO6M48cNKF", "number": 89463, "title": "thread sanitizer warnings using channel operations", "user": {"login": "tones111", "id": 828656, "node_id": "MDQ6VXNlcjgyODY1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/828656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tones111", "html_url": "https://github.com/tones111", "followers_url": "https://api.github.com/users/tones111/followers", "following_url": "https://api.github.com/users/tones111/following{/other_user}", "gists_url": "https://api.github.com/users/tones111/gists{/gist_id}", "starred_url": "https://api.github.com/users/tones111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tones111/subscriptions", "organizations_url": "https://api.github.com/users/tones111/orgs", "repos_url": "https://api.github.com/users/tones111/repos", "events_url": "https://api.github.com/users/tones111/events{/privacy}", "received_events_url": "https://api.github.com/users/tones111/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-10-02T11:53:00Z", "updated_at": "2021-10-02T20:54:36Z", "closed_at": "2021-10-02T20:05:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm integrating a rust library into a c++ binary (via c FFI) and began noticing some very strange behavior.  Compiling the c++ code with thread sanitizer indicates potential data races in the rust standard library.  I've created a reproducer that triggers the same tsan backtrace for the version we're using (1.39.0), but it also triggers warnings on nightly when building the rust side with thread sanitizer enabled (see Makefile).  The code can be found [here](https://github.com/tones111/cpp_ffi/tree/e0a81063a6a92287773546960accbf36f29df0cf) and run with ```make && ./main```\r\n\r\nI've further simplified the interaction by reproducing what I believe to be the same issue in safe Rust  (below).  Also below is the first tsan warning.  I see 2 to 4 warnings from the pure rust version depending on the run.\r\n\r\n```rust\r\nuse std::{\r\n    sync::mpsc::{channel, sync_channel, Sender, SyncSender},\r\n    thread,\r\n};\r\n\r\nfn main() {\r\n    let mut m = Model::new();\r\n    m.serve();\r\n\r\n    let s1 = m.new_sender();\r\n\r\n    // These also generate tsan warnings\r\n    //let s2 = m.new_sender();\r\n    //let t = thread::spawn(move || {\r\n    //    send_job1(&s2);\r\n    //    Model::delete_sender(s2);\r\n    //});\r\n\r\n    send_job1(&s1);\r\n    send_job2(&s1);\r\n\r\n    //let _ = t.join().unwrap();\r\n    Model::delete_sender(s1);\r\n\r\n    m.stop();\r\n    m.delete();\r\n}\r\n\r\n#[derive(Debug)]\r\nstruct Model {\r\n    tx: Option<SyncSender<Request>>,\r\n    iot: Option<thread::JoinHandle<()>>,\r\n}\r\n\r\n#[derive(Debug)]\r\nenum Request {\r\n    JOB1(),\r\n    JOB2(Sender<()>),\r\n    End(Sender<()>),\r\n    Stop,\r\n}\r\n\r\nimpl Model {\r\n    fn new() -> Self {\r\n        Model {\r\n            tx: None,\r\n            iot: None,\r\n        }\r\n    }\r\n\r\n    fn delete(self) {}\r\n\r\n    fn serve(&mut self) {\r\n        let (tx, rx) = sync_channel(5);\r\n        let mut iot_sender = Some(tx.clone());\r\n        self.tx = Some(tx);\r\n\r\n        self.iot = Some(thread::spawn(move || {\r\n            for job in rx.iter() {\r\n                match job {\r\n                    Request::JOB1() => {}\r\n                    Request::JOB2(tx) => {\r\n                        if let Some(iot_sender) = iot_sender.as_ref() {\r\n                            let _ = iot_sender.send(Request::End(tx));\r\n                        }\r\n                    }\r\n                    Request::End(tx) => {\r\n                        let _ = tx.send(());\r\n                    }\r\n                    Request::Stop => {\r\n                        iot_sender = None;\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n    }\r\n\r\n    fn stop(&mut self) {\r\n        if let Some(tx) = self.tx.as_ref() {\r\n            let _ = tx.send(Request::Stop);\r\n        }\r\n        self.tx.take();\r\n\r\n        if let Some(iot) = self.iot.take() {\r\n            iot.join().unwrap();\r\n        }\r\n    }\r\n\r\n    fn new_sender(&self) -> SyncSender<Request> {\r\n        self.tx.as_ref().unwrap().clone()\r\n    }\r\n\r\n    fn delete_sender(_sender: SyncSender<Request>) {}\r\n}\r\n\r\nfn send_job1(sender: &SyncSender<Request>) -> bool {\r\n    let mut status = false;\r\n    match sender.send(Request::JOB1()) {\r\n        Ok(_) => status = true,\r\n        Err(e) => println!(\"send err: {:?}\", e),\r\n    }\r\n    status\r\n}\r\n\r\nfn send_job2(sender: &SyncSender<Request>) -> bool {\r\n    let (tx, rx) = channel();\r\n    let mut status = false;\r\n    match sender.send(Request::JOB2(tx)) {\r\n        Ok(()) => match rx.recv() {\r\n            Ok(_) => status = true,\r\n            Err(e) => println!(\"error receiving response {}\", e),\r\n        },\r\n        Err(e) => println!(\"send err: {:?}\", e),\r\n    }\r\n    status\r\n}\r\n```\r\n\r\n### Meta\r\n$ uname -a\r\nLinux mobile 5.14.8-arch1-1 #1 SMP PREEMPT Sun, 26 Sep 2021 19:36:15 +0000 x86_64 GNU/Linux\r\n\r\n$ cargo +nightly --version --verbose\r\ncargo 1.57.0-nightly (d56b42c54 2021-09-27)\r\nrelease: 1.57.0\r\ncommit-hash: d56b42c549dbb7e7d0f712c51b39400260d114d4\r\ncommit-date: 2021-09-27\r\n\r\nfirst tsan warning...\r\n$ RUSTFLAGS=\"-Z sanitizer=thread\" cargo +nightly run\r\n```\r\nWARNING: ThreadSanitizer: data race (pid=9313)\r\n  Write of size 8 at 0x7b0800000020 by main thread:\r\n    #0 free /rustc/llvm/src/llvm-project/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp:714 (threads+0x1425a)\r\n    #1 <alloc::sync::Arc<T> as core::ops::drop::Drop>::drop /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/alloc/src/sync.rs:1626 (threads+0xd4565)\r\n    #2 core::ptr::drop_in_place<alloc::sync::Arc<std::sync::mpsc::blocking::Inner>> /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/core/src/ptr/mod.rs:188 (threads+0xd4565)\r\n    #3 core::ptr::drop_in_place<std::sync::mpsc::blocking::WaitToken> /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/core/src/ptr/mod.rs:188 (threads+0xd4565)\r\n    #4 std::sync::mpsc::blocking::WaitToken::wait /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/sync/mpsc/blocking.rs:70 (threads+0xd4565)\r\n    #5 std::sync::mpsc::Receiver<T>::recv /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/sync/mpsc/mod.rs:1158 (threads+0xa9664)\r\n    #6 threads::send_job2 /home/paul/src/threads/src/main.rs:109 (threads+0x9ee14)\r\n    #7 threads::main /home/paul/src/threads/src/main.rs:20 (threads+0x9e3b6)\r\n    #8 core::ops::function::FnOnce::call_once /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/core/src/ops/function.rs:227 (threads+0xacc8e)\r\n    #9 std::sys_common::backtrace::__rust_begin_short_backtrace /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/sys_common/backtrace.rs:125 (threads+0x9a231)\r\n    #10 std::rt::lang_start::{{closure}} /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/rt.rs:146 (threads+0xbfcde)\r\n    #11 core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/core/src/ops/function.rs:259 (threads+0xd5100)\r\n    #12 std::panicking::try::do_call /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/panicking.rs:403 (threads+0xd5100)\r\n    #13 std::panicking::try /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/panicking.rs:367 (threads+0xd5100)\r\n    #14 std::panic::catch_unwind /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/panic.rs:133 (threads+0xd5100)\r\n    #15 std::rt::lang_start_internal::{{closure}} /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/rt.rs:128 (threads+0xd5100)\r\n    #16 std::panicking::try::do_call /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/panicking.rs:403 (threads+0xd5100)\r\n    #17 std::panicking::try /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/panicking.rs:367 (threads+0xd5100)\r\n    #18 std::panic::catch_unwind /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/panic.rs:133 (threads+0xd5100)\r\n    #19 std::rt::lang_start_internal /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/rt.rs:128 (threads+0xd5100)\r\n    #20 main ??:? (threads+0x9f0c6)\r\n\r\n  Previous atomic write of size 8 at 0x7b0800000020 by thread T1:\r\n    #0 __tsan_atomic64_fetch_sub /rustc/llvm/src/llvm-project/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cpp:643 (threads+0x57d85)\r\n    #1 core::sync::atomic::atomic_sub /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/core/src/sync/atomic.rs:2406 (threads+0xbbd99)\r\n    #2 core::sync::atomic::AtomicUsize::fetch_sub /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/core/src/sync/atomic.rs:1774 (threads+0x927c9)\r\n    #3 <alloc::sync::Arc<T> as core::ops::drop::Drop>::drop /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/alloc/src/sync.rs:1591 (threads+0xb1433)\r\n    #4 core::ptr::drop_in_place<alloc::sync::Arc<std::sync::mpsc::blocking::Inner>> /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/core/src/ptr/mod.rs:188 (threads+0xafef1)\r\n    #5 core::ptr::drop_in_place<std::sync::mpsc::blocking::SignalToken> /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/core/src/ptr/mod.rs:188 (threads+0xaea11)\r\n    #6 std::sync::mpsc::oneshot::Packet<T>::send /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/sync/mpsc/oneshot.rs:111 (threads+0xa4aea)\r\n    #7 std::sync::mpsc::Sender<T>::send /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/sync/mpsc/mod.rs:805 (threads+0xa84e2)\r\n    #8 threads::Model::serve::{{closure}} /home/paul/src/threads/src/main.rs:68 (threads+0xb5033)\r\n    #9 std::sys_common::backtrace::__rust_begin_short_backtrace /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/sys_common/backtrace.rs:125 (threads+0x9a2d5)\r\n    #10 std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/thread/mod.rs:483 (threads+0xbb365)\r\n    #11 <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/core/src/panic/unwind_safe.rs:271 (threads+0xa7c45)\r\n    #12 std::panicking::try::do_call /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/panicking.rs:403 (threads+0xa1a47)\r\n    #13 __rust_try 3bw9yl3jylpgppbo:? (threads+0xa1e38)\r\n    #14 std::panicking::try /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/panicking.rs:367 (threads+0xa1939)\r\n    #15 std::panic::catch_unwind /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/panic.rs:133 (threads+0xbb765)\r\n    #16 std::thread::Builder::spawn_unchecked::{{closure}} /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/thread/mod.rs:482 (threads+0xbb0b3)\r\n    #17 core::ops::function::FnOnce::call_once{{vtable.shim}} /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/core/src/ops/function.rs:227 (threads+0xacb51)\r\n    #18 <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/alloc/src/boxed.rs:1638 (threads+0xd9da2)\r\n    #19 <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/alloc/src/boxed.rs:1638 (threads+0xd9da2)\r\n    #20 std::sys::unix::thread::Thread::new::thread_start /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/sys/unix/thread.rs:106 (threads+0xd9da2)\r\n\r\n  Thread T1 (tid=9319, running) created by main thread at:\r\n    #0 pthread_create /rustc/llvm/src/llvm-project/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp:977 (threads+0x150ad)\r\n    #1 std::sys::unix::thread::Thread::new /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/sys/unix/thread.rs:85 (threads+0xd9c24)\r\n    #2 std::thread::Builder::spawn /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/thread/mod.rs:388 (threads+0xbb3f7)\r\n    #3 std::thread::spawn /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/thread/mod.rs:630 (threads+0xba57a)\r\n    #4 threads::Model::serve /home/paul/src/threads/src/main.rs:58 (threads+0x9e6fe)\r\n    #5 threads::main /home/paul/src/threads/src/main.rs:8 (threads+0x9e343)\r\n    #6 core::ops::function::FnOnce::call_once /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/core/src/ops/function.rs:227 (threads+0xacc8e)\r\n    #7 std::sys_common::backtrace::__rust_begin_short_backtrace /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/sys_common/backtrace.rs:125 (threads+0x9a231)\r\n    #8 std::rt::lang_start::{{closure}} /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/std/src/rt.rs:146 (threads+0xbfcde)\r\n    #9 core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/core/src/ops/function.rs:259 (threads+0xd5100)\r\n    #10 std::panicking::try::do_call /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/panicking.rs:403 (threads+0xd5100)\r\n    #11 std::panicking::try /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/panicking.rs:367 (threads+0xd5100)\r\n    #12 std::panic::catch_unwind /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/panic.rs:133 (threads+0xd5100)\r\n    #13 std::rt::lang_start_internal::{{closure}} /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/rt.rs:128 (threads+0xd5100)\r\n    #14 std::panicking::try::do_call /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/panicking.rs:403 (threads+0xd5100)\r\n    #15 std::panicking::try /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/panicking.rs:367 (threads+0xd5100)\r\n    #16 std::panic::catch_unwind /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/panic.rs:133 (threads+0xd5100)\r\n    #17 std::rt::lang_start_internal /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2//library/std/src/rt.rs:128 (threads+0xd5100)\r\n    #18 main ??:? (threads+0x9f0c6)\r\n\r\nSUMMARY: ThreadSanitizer: data race /rustc/c02371c442f811878ab3a0f5a813402b6dfd45d2/library/alloc/src/sync.rs:1626 in <alloc::sync::Arc<T> as core::ops::drop::Drop>::drop\r\n```", "closed_by": {"login": "tones111", "id": 828656, "node_id": "MDQ6VXNlcjgyODY1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/828656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tones111", "html_url": "https://github.com/tones111", "followers_url": "https://api.github.com/users/tones111/followers", "following_url": "https://api.github.com/users/tones111/following{/other_user}", "gists_url": "https://api.github.com/users/tones111/gists{/gist_id}", "starred_url": "https://api.github.com/users/tones111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tones111/subscriptions", "organizations_url": "https://api.github.com/users/tones111/orgs", "repos_url": "https://api.github.com/users/tones111/repos", "events_url": "https://api.github.com/users/tones111/events{/privacy}", "received_events_url": "https://api.github.com/users/tones111/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89463/timeline", "performed_via_github_app": null, "state_reason": "completed"}