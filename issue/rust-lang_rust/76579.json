{"url": "https://api.github.com/repos/rust-lang/rust/issues/76579", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76579/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76579/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76579/events", "html_url": "https://github.com/rust-lang/rust/issues/76579", "id": 698286517, "node_id": "MDU6SXNzdWU2OTgyODY1MTc=", "number": 76579, "title": "Wishlist: MIR-level integer range analysis", "user": {"login": "moonheart08", "id": 7806367, "node_id": "MDQ6VXNlcjc4MDYzNjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7806367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moonheart08", "html_url": "https://github.com/moonheart08", "followers_url": "https://api.github.com/users/moonheart08/followers", "following_url": "https://api.github.com/users/moonheart08/following{/other_user}", "gists_url": "https://api.github.com/users/moonheart08/gists{/gist_id}", "starred_url": "https://api.github.com/users/moonheart08/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moonheart08/subscriptions", "organizations_url": "https://api.github.com/users/moonheart08/orgs", "repos_url": "https://api.github.com/users/moonheart08/repos", "events_url": "https://api.github.com/users/moonheart08/events{/privacy}", "received_events_url": "https://api.github.com/users/moonheart08/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-09-10T17:42:15Z", "updated_at": "2022-10-14T15:02:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a tracking issue for MIR-level integer range analysis.\r\nI'm very new to this, and there's no associated PR (yet!) nor RFC, so apologies in advance for any issues or mistakes.\r\n\r\n### Description\r\nIntegration of integer range analysis into the MIR will allow the compiler to, on a best effort basis, understand roughly the range of values any particular expression can take on. \r\n```rust\r\nlet x: u8 = ...; // VRange(0, 255)\r\nlet b = x / 2; // VRange(0, 127)\r\nassert!(b < 128); // Elideable, rustc understands b cannot be larger than 128.\r\n                  // Removal of assert can be done at a MIR level instead of by LLVM!\r\nlet c = b << 2; // VRange(0, 255). Could theoretically be recognized as VRange(0, 0) + VRange(4, 255) at the cost of extra complexity.\r\nassert!(c != 3); // Theoretically elidable, more complicated in practice, but plenty doable.\r\n```\r\n### Steps\r\n- [ ] Initial implementation (gated)\r\n### Unresolved Questions\r\n- How much should the compiler attempt to *do*? There is, theoretically, a very large number of situations it could recognize.\r\n- Should there be some way to access this best effort range data? It has it's uses, but the fact that this information is best-effort and not consistent would need special emphasis. Either way, an intrinsic in core would be helpful for writing unit tests.\r\n\r\n@oli-obk per request.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76579/timeline", "performed_via_github_app": null, "state_reason": null}