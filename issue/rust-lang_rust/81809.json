{"url": "https://api.github.com/repos/rust-lang/rust/issues/81809", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81809/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81809/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81809/events", "html_url": "https://github.com/rust-lang/rust/issues/81809", "id": 802518552, "node_id": "MDU6SXNzdWU4MDI1MTg1NTI=", "number": 81809, "title": "typecheck_ice when attempting to type check trait object with duplicate associated types", "user": {"login": "KenDJohnson", "id": 5758378, "node_id": "MDQ6VXNlcjU3NTgzNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KenDJohnson", "html_url": "https://github.com/KenDJohnson", "followers_url": "https://api.github.com/users/KenDJohnson/followers", "following_url": "https://api.github.com/users/KenDJohnson/following{/other_user}", "gists_url": "https://api.github.com/users/KenDJohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/KenDJohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KenDJohnson/subscriptions", "organizations_url": "https://api.github.com/users/KenDJohnson/orgs", "repos_url": "https://api.github.com/users/KenDJohnson/repos", "events_url": "https://api.github.com/users/KenDJohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/KenDJohnson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-02-05T22:33:19Z", "updated_at": "2021-09-06T05:28:31Z", "closed_at": "2021-09-06T05:28:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\nLink to [gist](https://gist.github.com/KenDJohnson/4c76f900e3eaa60f7f82466e1ba418bf)\r\n\r\n```Rust\r\nuse std::ops::Index;\r\n\r\npub trait Indexable {\r\n    type Index;\r\n}\r\nstruct Foo;\r\nstruct Bar;\r\nimpl Indexable for Foo { type Index = u8; }\r\nimpl Indexable for Bar { type Index = u16; }\r\n\r\npub trait Indexer<T: Indexable>: Index<T::Index, Output=T> {}\r\n\r\nstruct Store;\r\n\r\nimpl Index<u8> for Store {\r\n    type Output = Foo;\r\n    fn index(&self, _: u8) -> &Foo { panic!() }\r\n}\r\nimpl Index<u16> for Store {\r\n    type Output = Bar;\r\n    fn index(&self, _: u16) -> &Bar { panic!() }\r\n}\r\nimpl Indexer<Foo> for Store { }\r\nimpl Indexer<Bar> for Store { }\r\n\r\n// implies StoreIndex: Index<u8, Output=Foo> + Index<u16, Output=Bar>\r\ntrait StoreIndex: Indexer<Foo> + Indexer<Bar> {}\r\n\r\nimpl StoreIndex for Store {}\r\n\r\nstruct Collection {\r\n    stores: Vec<Store>,\r\n}\r\n\r\ntrait StoreCollection {\r\n    fn get_store(&self, _: usize) -> Option<&dyn StoreIndex>;\r\n}\r\n\r\nimpl StoreCollection for Collection {\r\n    //  Fails to compile:\r\n    //    expected:\r\n    //      Option<&dyn StoreIndex<Output = Bar, Output = Foo>\r\n    //    found:\r\n    //      Option<&Store>\r\n    /*\r\n    fn get_store(&self, i: usize) -> Option<&dyn StoreIndex> {\r\n        self.stores.get(i)\r\n    }\r\n    */\r\n\r\n    // ICE\r\n    fn get_store(&self, i: usize) -> Option<&dyn StoreIndex> {\r\n        if let Some(s) = self.stores.get(i) {\r\n            Some(s as &dyn StoreIndex)\r\n        } else {\r\n            None\r\n        }\r\n    }\r\n\r\n    // However, if the above is removed in favor of Indexing\r\n    // type checking succeeds and the type of `&self.stores[i]`\r\n    // is properly inferred\r\n    /*\r\n    fn get_store(&self, i: usize) -> Option<&dyn StoreIndex> {\r\n        if i < self.stores.len() {\r\n            Some(&self.stores[i])\r\n        } else {\r\n            None\r\n        }\r\n    }\r\n    */\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.49.0 (e1884a8e3 2020-12-29)\r\nbinary: rustc\r\ncommit-hash: e1884a8e3c3e813aada8254edfa120e85bf5ffca\r\ncommit-date: 2020-12-29\r\nhost: x86_64-apple-darwin\r\nrelease: 1.49.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: broken MIR in DefId(0:33 ~ typecheck_ice[8acc]::{impl#7}::get_store) (CanonicalUserTypeAnnotation { user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(&dyn StoreIndex<Output = Bar, Output = Foo>) }, span: src/main.rs:53:18: 53:38 (#0), inferred_ty: &dyn StoreIndex<Output = Bar, Output = Foo> }): bad user type (&dyn StoreIndex<Output = Bar, Output = Foo> = &dyn StoreIndex<Output = Bar, Output = Foo>): NoSolution\r\n  |\r\n  = note: delayed at compiler/rustc_mir/src/borrow_check/type_check/mod.rs:253:27\r\n\r\nthread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', compiler/rustc_errors/src/lib.rs:974:13\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.49.0 (e1884a8e3 2020-12-29) running on x86_64-apple-darwin\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nerror: could not compile `typecheck_ice`\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', compiler/rustc_errors/src/lib.rs:974:13\r\nstack backtrace:\r\n   0:        0x108a44934 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha0848bb2602b5d05\r\n   1:        0x108aad0c0 - core::fmt::write::h9f3ccac2ef682b93\r\n   2:        0x108a361f6 - std::io::Write::write_fmt::h0a47673aab280496\r\n   3:        0x108a495b9 - std::panicking::default_hook::{{closure}}::h850c6aaf5e80c2f5\r\n   4:        0x108a4927d - std::panicking::default_hook::h037801299da6e1c6\r\n   5:        0x10bf29413 - rustc_driver::report_ice::h0fe9f8647d245792\r\n   6:        0x108a49d9e - std::panicking::rust_panic_with_hook::h76436d4cf7a368ac\r\n   7:        0x108a498a5 - std::panicking::begin_panic_handler::{{closure}}::h516c76d70abf04f6\r\n   8:        0x108a44da8 - std::sys_common::backtrace::__rust_end_short_backtrace::h653290b4f930faed\r\n   9:        0x108a4980a - _rust_begin_unwind\r\n  10:        0x108ad0b0b - std::panicking::begin_panic_fmt::he778de6995efc6f5\r\n  11:        0x1104eae96 - rustc_errors::HandlerInner::flush_delayed::hdb4fff43f77edaab\r\n  12:        0x1104e700b - <rustc_errors::HandlerInner as core::ops::drop::Drop>::drop::hb7966f169f0d6c15\r\n  13:        0x10bf1c26a - core::ptr::drop_in_place::hf30dd4a15888f71a\r\n  14:        0x10bf1a666 - core::ptr::drop_in_place::hb8793afd37ab302e\r\n  15:        0x10bf1e918 - <alloc::rc::Rc<T> as core::ops::drop::Drop>::drop::hb604ec874b74dec0\r\n  16:        0x10bf339d2 - core::ptr::drop_in_place::hb2a870b8e6fe6c59\r\n  17:        0x10bf2c272 - rustc_span::with_source_map::h687022d7ebb49e8d\r\n  18:        0x10bf39ac1 - rustc_interface::interface::create_compiler_and_run::hea278ab322b44c40\r\n  19:        0x10bf2c96f - rustc_span::with_session_globals::h7023df1cf3c9e104\r\n  20:        0x10bf3e5b1 - std::sys_common::backtrace::__rust_begin_short_backtrace::hf0d8ecab3037d14f\r\n  21:        0x10bebfa28 - core::ops::function::FnOnce::call_once{{vtable.shim}}::hd9d084f81e0dfcf8\r\n  22:        0x108a581fd - std::sys::unix::thread::Thread::new::thread_start::hedb7cc0d930a8f40\r\n  23:     0x7fff20482950 - __pthread_start\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nI did my best to create a small example for this, and I think this is a minimal instance of the problem. Looks like there is an error when trying to type check a cast to `&dyn StoreIndex`, for which the super traits expand to `&dyn Index<u8, Output=Foo> + Index<u16, Output=Bar>` which the typechecker seems to have issue by considering both constraints on `Output` regardless of the `T` indexing type (as `StoreIndex<Output = Bar, Output = Foo>` which it considers unsolvable since `Bar != Foo`.\r\n\r\nThe other two cases here are interesting as well. When `get()` is used directly, type checking fails but there is no ICE, but when the `Vec<Store>` is indexed directly `&Store` is automatically cast to `&dyn StoreIndex` and compilation succeeds.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81809/timeline", "performed_via_github_app": null, "state_reason": "completed"}