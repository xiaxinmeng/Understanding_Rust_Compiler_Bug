{"url": "https://api.github.com/repos/rust-lang/rust/issues/111497", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111497/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111497/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111497/events", "html_url": "https://github.com/rust-lang/rust/issues/111497", "id": 1707089936, "node_id": "I_kwDOAAsO6M5lwCAQ", "number": 111497, "title": "`rustc` prints the same type as found and expected for function item whose signature includes references", "user": {"login": "domenicquirl", "id": 28535538, "node_id": "MDQ6VXNlcjI4NTM1NTM4", "avatar_url": "https://avatars.githubusercontent.com/u/28535538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domenicquirl", "html_url": "https://github.com/domenicquirl", "followers_url": "https://api.github.com/users/domenicquirl/followers", "following_url": "https://api.github.com/users/domenicquirl/following{/other_user}", "gists_url": "https://api.github.com/users/domenicquirl/gists{/gist_id}", "starred_url": "https://api.github.com/users/domenicquirl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domenicquirl/subscriptions", "organizations_url": "https://api.github.com/users/domenicquirl/orgs", "repos_url": "https://api.github.com/users/domenicquirl/repos", "events_url": "https://api.github.com/users/domenicquirl/events{/privacy}", "received_events_url": "https://api.github.com/users/domenicquirl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-05-12T07:19:08Z", "updated_at": "2023-05-12T07:46:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Code\r\n\r\n```Rust\r\n// Playground: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=a508fc33782b233da242b24a6931c14e\r\nuse std::collections::HashMap;\r\n\r\nstruct Inner;\r\nimpl Inner {\r\n    fn maybe_get(&self) -> Option<&String> {\r\n        None\r\n    }\r\n}\r\n\r\n#[derive(Default)]\r\nstruct Foo {\r\n    m: HashMap<String, Inner>\r\n}\r\n\r\nimpl Foo {\r\n    fn get<R>(&self, retrieve: impl FnMut(&Inner) -> Option<R>) -> Option<R> {\r\n        self.m.values().find_map(retrieve)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let f = Foo::default();\r\n    f.get(Inner::maybe_get);\r\n}\r\n```\r\n\r\n\r\n### Current output\r\n\r\n```Shell\r\n// Stable 1.69\r\nCompiling playground v0.0.1 (/playground)\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:23:5\r\n   |\r\n23 |     f.get(Inner::maybe_get);\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\r\n   |\r\n   = note: expected trait `for<'a> <for<'a> fn(&'a Inner) -> Option<&'a String> {Inner::maybe_get} as FnOnce<(&'a Inner,)>>`\r\n              found trait `for<'a> <for<'a> fn(&'a Inner) -> Option<&'a String> {Inner::maybe_get} as FnOnce<(&'a Inner,)>>`\r\nnote: the lifetime requirement is introduced here\r\n  --> src/main.rs:16:54\r\n   |\r\n16 |     fn get<R>(&self, retrieve: impl FnMut(&Inner) -> Option<R>) -> Option<R> {\r\n   |                                                      ^^^^^^^^^\r\n\r\n// Nightly 1.71.0 2023-05-11\r\nCompiling playground v0.0.1 (/playground)\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:23:5\r\n   |\r\n23 |     f.get(Inner::maybe_get);\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\r\n   |\r\n   = note: expected enum `Option<&String>`\r\n              found enum `Option<&String>`\r\nnote: the lifetime requirement is introduced here\r\n  --> src/main.rs:16:54\r\n   |\r\n16 |     fn get<R>(&self, retrieve: impl FnMut(&Inner) -> Option<R>) -> Option<R> {\r\n   |                                                      ^^^^^^^^^\r\n```\r\n\r\n\r\n### Desired output\r\n\r\nShould mention that the lifetimes of `self`, `retrieve` and `R` must match. \r\n\r\nThe code compiles if you write `get` as \r\n\r\n```Shell\r\n fn get<'a, R>(&'a self, retrieve: impl FnMut(&'a Inner) -> Option<R>) -> Option<R> \r\n        where R: 'a\r\n```\r\n\r\n\r\n### Rationale and extra context\r\n\r\n_No response_\r\n\r\n### Other cases\r\n\r\nThe original code compiles fine when invoked with a closure like `f.get(|_i| None::<&String>);` that does not relate input and output lifetimes.\r\n\r\nCalling `get` with a call to `maybe_get` as a closure (that _does_ relate the lifetimes) like `f.get(|i| i.maybe_get())` gives\r\n\r\n```Rust\r\nCompiling playground v0.0.1 (/playground)\r\nerror: lifetime may not live long enough\r\n  --> src/main.rs:25:15\r\n   |\r\n25 |     f.get(|i| i.maybe_get());\r\n   |            -- ^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\r\n   |            ||\r\n   |            |return type of closure is Option<&'2 String>\r\n   |            has type `&'1 Inner`\r\n```\r\n\r\nwhich I have mixed feelings about: on the one hand, you know from the error that the problem is the relation between the lifetimes. \r\nOn the other, you could write `maybe_get` as `fn maybe_get<'s>(&'s self) -> Option<&'s String>` and still get the same error, even though the lifetimes are now the same in the definition (the actual problem is that `get` doesn't know this about `R`). \r\n\r\nWriting `get` as \r\n\r\n```Rust\r\nfn get<'a, R>(&self, retrieve: impl FnMut(&'a Inner) -> Option<R>) -> Option<R> \r\n        where R: 'a\r\n```\r\n\r\n(note that the reference to `Inner` and `R` are constrained through `'a`, but not `self`) gives\r\n\r\n```Rust\r\nCompiling playground v0.0.1 (/playground)\r\nerror: lifetime may not live long enough\r\n  --> src/main.rs:19:9\r\n   |\r\n16 |     fn get<'a, R>(&self, retrieve: impl FnMut(&'a Inner) -> Option<R>) -> Option<R> \r\n   |            --     - let's call the lifetime of this reference `'1`\r\n   |            |\r\n   |            lifetime `'a` defined here\r\n...\r\n19 |         self.m.values().find_map(retrieve)\r\n   |         ^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'a\r\n```\r\nwhich is much more helpful in figuring out that one needs to bound `self`.\r\n\r\n\r\n\r\n### Anything else?\r\n\r\n_No response_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111497/timeline", "performed_via_github_app": null, "state_reason": null}