{"url": "https://api.github.com/repos/rust-lang/rust/issues/45371", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45371/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45371/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45371/events", "html_url": "https://github.com/rust-lang/rust/issues/45371", "id": 266607291, "node_id": "MDU6SXNzdWUyNjY2MDcyOTE=", "number": 45371, "title": "optimisation opportunity missed due to `assert!`", "user": {"login": "josephDunne", "id": 1827457, "node_id": "MDQ6VXNlcjE4Mjc0NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1827457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephDunne", "html_url": "https://github.com/josephDunne", "followers_url": "https://api.github.com/users/josephDunne/followers", "following_url": "https://api.github.com/users/josephDunne/following{/other_user}", "gists_url": "https://api.github.com/users/josephDunne/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephDunne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephDunne/subscriptions", "organizations_url": "https://api.github.com/users/josephDunne/orgs", "repos_url": "https://api.github.com/users/josephDunne/repos", "events_url": "https://api.github.com/users/josephDunne/events{/privacy}", "received_events_url": "https://api.github.com/users/josephDunne/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-10-18T19:05:38Z", "updated_at": "2023-04-05T17:36:50Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have noticed interesting behaviour regarding `assert!` which was unexpected. I am not sure if this is a LLVM or Rust issue.\r\n\r\nin the following code (See godbolt link below) I have a vec like structure `OwnedRegion`.\r\nI want to iterate over the region (implemented as `slice::IterMut`) and populate an array.\r\nI expect LLVM to do loop unrolling and loop vectorisation. If you place \r\nthe necessary `intrinsics::assume` to trick llvm into removing the bound check you do \r\nindeed get the optimisations. However I wanted to replace the `assume` with an `assert!`\r\nbut that removes the optimisation even if combined with an `assume`! What I think is happening\r\nis the bounds check is being reintroduced because the length check in the `assert!` is being moved into the for loop or elided completely because it duplicates the length check in the index operation. \r\n\r\nWhat should happen is the bounds check in the for loop should be lifted/elided because of the `assert!`\r\n\r\n```\r\nfn main() {\r\n    let mut region: OwnedRegion<usize> = test::black_box(OwnedRegion::empty());\r\n    let mut my_array: [usize; 128] = [0;128];\r\n\r\n    // !!! The following assert blocks the loop vectorization optimization !!!\r\n    // !!! remove the following line to enable Loop vectorization !!!\r\n    assert!(region.len > 128 );\r\n\r\n    // I know this assume is unsafe given that we created an empty OwnedRegion. \r\n    // I am only looking at the output assembly to see if optimization is run \r\n    unsafe {  assume(region.len() > 128) };\r\n    for i in 0..128 {\r\n       my_array[i] = region[i];\r\n    } \r\n    println!(\"{:?}\", &my_array[..32]);\r\n}\r\n```\r\n\r\nwith `assert!` and  `assume`:\r\n\r\ninner loops is:\r\n```asm\r\n  cmp r15, rcx\r\n  jbe .LBB6_5\r\n  lea rcx, [rax - 2]\r\n  mov rdx, qword ptr [rbx + 8*rax - 24]\r\n  mov qword ptr [rbp + 8*rax - 1152], rdx\r\n  cmp r15, rcx\r\n  jbe .LBB6_4\r\n  lea rcx, [rax - 1]\r\n  mov rdx, qword ptr [rbx + 8*rax - 16]\r\n  mov qword ptr [rbp + 8*rax - 1144], rdx\r\n  cmp r15, rcx\r\n  jbe .LBB6_8\r\n  mov rcx, qword ptr [rbx + 8*rax - 8]\r\n  mov qword ptr [rbp + 8*rax - 1136], rcx\r\n  cmp r15, rax\r\n  jbe .LBB6_10\r\n  add rsi, 4\r\n  mov rcx, qword ptr [rbx + 8*rax]\r\n  mov qword ptr [rbp + 8*rax - 1128], rcx\r\n```\r\nwhere LBB6_4, LBB6_5, LBB6_8, and LBB6_10 jump to `std::panic` \r\n\r\nwith just `assume`:\r\n\r\ninner loops is:\r\n```asm\r\n.LBB3_3:\r\n  movups xmm0, xmmword ptr [rbx + 8*rax]\r\n  movups xmm1, xmmword ptr [rbx + 8*rax + 16]\r\n  movups xmmword ptr [rbp + 8*rax - 1120], xmm0\r\n  movups xmmword ptr [rbp + 8*rax - 1104], xmm1\r\n  movups xmm0, xmmword ptr [rbx + 8*rax + 32]\r\n  movups xmm1, xmmword ptr [rbx + 8*rax + 48]\r\n  movups xmmword ptr [rbp + 8*rax - 1088], xmm0\r\n  movups xmmword ptr [rbp + 8*rax - 1072], xmm1\r\n  movups xmm0, xmmword ptr [rbx + 8*rax + 64]\r\n  movups xmm1, xmmword ptr [rbx + 8*rax + 80]\r\n  movups xmmword ptr [rbp + 8*rax - 1056], xmm0\r\n  movups xmmword ptr [rbp + 8*rax - 1040], xmm1\r\n  movups xmm0, xmmword ptr [rbx + 8*rax + 96]\r\n  movups xmm1, xmmword ptr [rbx + 8*rax + 112]\r\n  movups xmmword ptr [rbp + 8*rax - 1024], xmm0\r\n  movups xmmword ptr [rbp + 8*rax - 1008], xmm1\r\n  add rax, 16\r\n  cmp rax, 128\r\n  jne .LBB3_3\r\n```\r\n\r\nhere is a [godbolt link](https://rust.godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZSBnVAV2OUxAHIBSAJgGYwYbgFYAQgDNMAQwKtM0TADtMxPMgD6AB2nFpAWw2yCxBgEpRAEW4AGAIJ9Bw8VNnyI6Yqi3IA1hswAT0wdAmQECxFre0chUUkZOWIFBgRdTHRIywBqWwcBOJdE9zRkjTwlEwqGdXMrPNjnBLdkiAJMBgIshoKm1ySFCuQAG2YagDdMDT0lYExu%2B0wAD3biJWzkPXbs9s7ufjEG%2BzHMbM70EBAtE0uAZTTk9H3D44ZT88v9XV9VS4AFNKVVD6SyyaTPPInM4EC4gCpVJQ1ZAMS7SBgMZj6TAQ17vGGXbwokDcADsYjewwkpGyllUmCpNLpEgAsswCNSAJJKLBLTnc5asgik6wHSFvaGwtKpS6k8mYSnUgASaIQwpxDnsWmYACNocRmMgCNkAPIAdxU6AASphgHhUEp9gBhMCcNSzakAFRA2RdbuA%2B2wuTJeWyoey12I3vu6Se/EdHoDpBDYeGym9YzwAC9MEn7GHsgB6AvZAByqHa3o9CDwDGyX2IP2I2Sl2SUqA29reAEdmMp2LWJCQO%2BNdHhpEp2Nk8AA6TDTk3mjLW232qe1tAjtTjo2r7gANhsCYP0%2BToaL2SrNbX2WYSjGzGkw2y2swyGkUNNpzSkzrbOk2tTbJpGQftayIC9nzZICzGyS0KmAbVmAkKQm2qeQwIQU422IL5hlPQti1SGNsgADWNS1fwIf9AP1VNa1QCRYLGI1x3QZ8YLsP4OWyZQMWSWt9D/bU8GGQhAmve1hnErRUHRPAANOU1CAQID8PPQSqIU7JkhQvtTnA/cbDNC1lztB0D2yU1q3CHilEHNgOinJRNzHCdsQOM520IM5MEwfRa2SNF7Wo/TUDU4tP2kH51gqFzx0neydmrMDAi0OdwuyZlvlUa8VFA3RxMSzxvHCXxsggT9slQc1cgPI8bBg1idnbYTuSS05DN9eDDOyUSpAIPAsRPPMww0etG29AFt2BUEqKdPg9y62YLwDBoSWiDU7EGrQ8LjF1pE9b19oDBcTJtMynX2z0TtlfDHHiCpRJUeoRtDLVdQkdZUyUCAFopCQYIAWhOjNsyDF47HzfN/unb67vWu7XtyAQHqUJ7sSifD3uyT6eP0a5AggIGTtueVGNupH82Mpdzt3YNKaht6bmyaNHkuPyCaJ3NIcZqHvu9Gxud5qGxuyyNsimoEQTBfD8zVJH5YcBGYnsbbdudV14MOn1NdmE7aR0nGh2pq1aYdPbdeAa7%2BEDCmedDAhUtOD1dDmI19hyeIE0x0UVft5H%2BFR9GXv93GsB037eD3f7iZt5G91JylLhd4g3fB2Ww1vBhpCkdOGcZ1MjQjXJ%2BByGGI2nNFtBMIn1WF/M0QxLEICECuaw0O9hmGImLF9/3hcuD4QAYUT2EuCQvEMPRTW0XQCAYCAI2pGHvosfOgw2uXlaVja8jVy7Le1pb/Tjg36UFI2mxN0z7QPv1rdt%2Bn/fu8RHoqDHN7DMOmTGtlI73DSPlKSx1tlHQBicJDJ1dpgd2T9hZZxzh1OB9dQyF3DCYEuZcybTgrlXCMtc%2B4oNDI3TEChW4mGnO3Tu3czC9whkQ7Ig98TD1HhwEAE9gTTGkDPHQxB56/wIIvEwy9sGrwzqGRWW9d7bz3vjdWx8j6WxOnYBg1oJDzXEN7EUgZErXzNnfLWK0452zlijV%2BaN34h3zLjKuEc/pkxAfHL2Vg879zDP9eG0jd6qzkQY90F4jpKLjiowUGixBaJOroxcpsVzmw1vfIxj96FhhfmIN%2Bz1MZIxsQwAR/9AEx2yMDYxYCoLOKiK44WHiFYyJkT4naB8DoBOyI6YY9p3KBhaW0y%2Bp0aaxIaQ/CpX91gjDaf/ApRTAx6L6RbRpCZjHIMZreNWfllDtHQEIWu1TvGh2Ga0lQGgOH6DyVBf61JyyYXFgtKZF0ZkPxgiY3mSy5ErMqBkDZa9n41O2fvW5TTlSpBOv8lSUSzrTI1rMm6CyA5B0sZknZzYVROkVN6KUSAQBAtUAGMZZNl5UQrPHQBip7lQvzECy4qL/4ACpKWnOhLIeYni1rfN8b8uZgYuQ8idKDdp3Trm31ZZC5JDsnYmjZFqd2pcjEQzumYtJFiMmf1DLjCoPJsUKicjydMNRsyOIWh6QZjNzwljEJBESBBAYVA1cseC2RxhjlqjYBaZTrAHnERIqOEBqUx1RpyuFUimVHC2iy8FAyOUCjZFy7VPKQW9JuSGxJBroXmODn6oZVqli5IWvknF6atVZnmIUm6JSjT6oeYa4sxrTXDHNZalV1rlp2ukA6rNpTNH1FdevFtRpPU0ocT65YViUlfMDbI%2BpAq46EkuGGpYTpJ0gEtOOOYkb82rTjjGmJcaroJrLTsEVxoxWlMlc69UMrA7JthYqnGMV%2BRLDVQyOtSxvRzoXbMdyjpuUBl1VHZ1ib8zTsuA%2Bqlvb1UPo%2Bf6mI28fnxrZVVLQRJp2zrg5cF9cwPRhTjB%2Bm2kTjbRJvnErdMGd2OzSqKgg4rMG5DbT7aVCtZXpI/vhZVN673UgfU%2BpD87F2YDQ8u7Mn7C3FL3D%2Bndf6b0AeYwtL1ObQOMogxtKDBGTpzoQ3GZ9XGABik9ePtOw1fXD%2Bjx1JPwsR04%2B6yOHs9lRkUNHn50flQxrJ17VX2JA2J2DRIUOYE08CbT/GJlOKs7%2BsM/64QSajlJ1zPIwNDq8aO%2BRnAIUTo4ypx0anX3qeYF3XTPSN38ug4K4ze6D0Sss%2BE%2BofdT0woVYxpzywWPZHKG5tLcwMtdy/UJwLIn3Fk1kzvOL/SE3KZvYhjzXGuQjAzJMXzWG104dBZuhLAyiNFfMyVyjZXqOBtMWeuVKbL1Mec1HWlbH3PIbGxOUYEw32YewO14TJLgtidC4dvcEX703uixI4ddT4uJcDENzlqmOOebQ%2BNy7eApsYajaunRc3Y15cU/MoVu6SNmfIx7dbESKu0Z2/RwdSrau3pc%2B9zVp3OOvtBxdyb13oc2zu51h7oYQuAck8BknyxPsbwDX7BTi3BvJZvaEoHo3X3TewNlvl%2BG%2BeEahakvHqaCfpszcWoB7PH1k882L9rgD7vI9EzyQU4meTK4AVBN7rGPu9cVv1wzZPp1C9S8DrjPGocrpm7DvT82EfS4KzjqrDn4UPpN9myLyx2Mi9Q%2Bh99tPbsCdAab92DO9ePYN2yI3yxg9m7ZxbqLVvIPBsR/9gXqehTC7O%2BlrTru%2BPu95fpsFhfE1y/s/jq9SuNLHKNMdprTuK8%2Bar%2B07XraNue0Z9ke3afnsZ/b127I5v02c%2Bt/nsd%2BWkvwcFxGsv5OWuZd2h7nLeGBsy%2BR03vbNW29/xn7SxrpPmteZ34PxPw%2BguhiqZ82LP3D9KeL%2BG0vjuI%2BYDB2pzFwlzrwWz%2B0bzs1P0c3P0EUv2k273/0AKuy1zjwJSHy0WfzH3XwIHTwzWnxVznxky2W5yDWXwbwBx/xG3L0jyQIhxpzd3F1m093hyl3AJ3RPwvTPyD3wIT1VxzzDw12d1QFoMh2jwYIf0xxcS6yZ2wNwMzyNEIMt2ILkxHXsFxi%2BAqCJkTTQUAWSFiW9ElzFwo12BwJAAAmAn8G1FQFvUl3Znxkdh7jrhTBgUom0jNl4AMNALyxu2MI6FMPML8A0CsJsK8KUDsM5loScNQRcMAX0ECCMGID0ECG9HiEwxNVoF4AAA4pCj1xBHUDgMjsjNskZzwhAyiwALxMIjYu5qobVG5VAjQAJUA/AMJThWlvBbVXwiA1BMxZAzJYMBp9Asw%2BjVxyi4gSjiwxiKjkh9BUAfwCAqjBwailJlp0ZmpbIQpsgAAZVADoyYQ0EgYYgaUYsY/CeovhDZPQsyWGZQEuQMQo7IOhLbMMc8biXwNsU0JKK8EhLEa8BBXOW0SYdYBY2QSyU4TYRIDIICdYDmR2ffM2ecDKbiAwKqNGcSdo3wOoo0BY04FgVbICdEPyACcScCN4U4PARibwQYo4/oq8fUdYfCf4pBE1AkpuBQK4%2B0G4n6e5OOQo4lazRjIcPAJybIGwacacB46QuIhIpIh6HInIDkh0V%2BcrY/daXIJGLQN0AgYYJQDZPgXgWUYkfgdTNUXgXgakLNeI3QWU8QcU/gA0qIJ4uTTgMwUgYYLgEQTgUgMIzgGwL01ALgS0ZiTyVgScRwWgL0nA30l0103wEAfgfgacAATgABZMi9wUyRBaB%2BAbASQRB%2BASQSQ3SuAUyvSfS/TSAAzOAvSURBYoy/TXS4BYAkA0B8YRJVByBKBWytB2zIwlA8BgAEBtTAhSAJAzVVAUQIBtQuAKzWoCouAIzSBWysRKhjQ0SZyvSsAvhZhUwNzSB8BkhDQ6CURozSBlhXw2QOBOBFz4R5Q9yqh9ANzXTRJtQURIBXSqSzITzClAZNh6VAYTNnxLVAZHQBjAZUxJhdpLB%2BAayWAHI6BnyPSyy9yqz9ROhkBWwByhypJypcBCAhxwzqRUs2zUwmxwyzBIynzYz4zeBpwSRaBMibBeBaB8yRAkyMikzzT3TOBSzvSUKuAayQA6ynzSAmzEAQA8TxVOyIBuzey6Azz8BuiELizOBPS%2BLTyqzwzLJlJtJmIML%2BzBzhzKLozaFSA4yEzpwEyrLrKbKVLeLyz/SBLGAhLSB6yYyVLeBkKNKnK3LTLJhTAzIQAUygA%3D)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45371/timeline", "performed_via_github_app": null, "state_reason": null}