{"url": "https://api.github.com/repos/rust-lang/rust/issues/85612", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85612/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85612/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85612/events", "html_url": "https://github.com/rust-lang/rust/issues/85612", "id": 899103851, "node_id": "MDU6SXNzdWU4OTkxMDM4NTE=", "number": 85612, "title": "IP Utility Methods", "user": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-05-23T20:37:02Z", "updated_at": "2023-03-30T20:32:04Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This issue is split out of the larger discussion around stabilization of the `ip` feature (tracking issue: #27709). The focus of this issue is on the question of what utility methods Rust should provide for handling IPv4 and IPv6 addresses.\r\n\r\nFor discussion about the conversion methods (`to_ipv6_mapped`, `to_ipv6_compatible`, `to_ipv4`, `to_ipv4_mapped`) see #85609 IPv4-in-IPv6 Address Support.\r\n\r\nFor discussion about the IPv6 unicast methods (`is_unicast_link_local`, `is_unicast_link_local_strict`, `is_unicast_site_local`, `is_unicast_global`) see #85604 IPv6 Unicast Interface.\r\n\r\nSpecifically this issue concerns itself with the various special address utility methods:\r\n\r\n```rust\r\nimpl Ipv4Addr {\r\n    #[unstable]\r\n    fn is_benchmarking(&self) -> bool;\r\n    fn is_documentation(&self) -> bool;\r\n    #[unstable]\r\n    fn is_ietf_protocol_assignment(&self) -> bool;\r\n    #[unstable]\r\n    fn is_global(&self) -> bool;\r\n    fn is_private(&self) -> bool;\r\n    #[unstable]\r\n    fn is_reserved(&self) -> bool;\r\n    #[unstable]\r\n    fn is_shared(&self) -> bool;\r\n}\r\n\r\nimpl Ipv6Addr {\r\n    #[unstable]\r\n    fn is_documentation(&self) -> bool;\r\n    #[unstable]\r\n    fn is_global(&self) -> bool;\r\n}\r\n```\r\n\r\nAll of these excluding `is_global` currently correspond to various special addresses in the [IANA IPv4 Special-Purpose Address Registry](https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml) and [IANA IPv6 Special-Purpose Address Registry](https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml). \r\n\r\nNote that of these only `Ipv4Addr::is_documentation` and `is_private` are currently stable.\r\n\r\n## Open Problems\r\n\r\n### Semantics of utility methods\r\n\r\nWhat should the exact semantics of `is_global` be? The current documentation of [`Ipv4Addr::is_global`](https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_global) mentions the [IANA IPv4 Special-Purpose Address Registry](https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml) and follows it exactly, [`Ipv6Addr::is_global`](https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.is_global) does not (https://github.com/rust-lang/rust/pull/76098#discussion_r558690082). For IPv6 specifically, should IPv4-mapped addresses be considered global? Python does not (https://github.com/rust-lang/rust/pull/76098#issuecomment-760651861). Is there an official definition for which addresses are globally reachable? What would be the least surprising to users.\r\n\r\nThere is a similar question for all the other methods: should we strictly adhere to standards and the address registry, or for IPv6 addresses also consider IPv4-mapped addresses. Is it a problem if the IPv4 version and IPv6 version of a method have different definitions?\r\n\r\nUnresolved: Settle on the exact semantics of `is_global` and other methods. See also #85609 IPv4-in-IPv6 Address Support.\r\n\r\n### Which utility methods are useful\r\n\r\nWhich utility methods do we want to offer? Maybe offer the equivalent of `is_reserved`, `is_benchmarking` etc. for `Ipv6Addr` as well? Maybe not expose `is_ietf_protocol_assignment` (what would be a real-world use case for this other than computing `is_global`?) A lot of these methods are not offered by other languages, but .NET does have [IsIPv6Teredo](https://docs.microsoft.com/en-us/dotnet/api/system.net.ipaddress.isipv6teredo?view=net-5.0#System_Net_IPAddress_IsIPv6Teredo). `is_ipv4_mapped` and maybe `is_ipv4_compatible` could also be useful. \r\n\r\nUnresolved: Which utility methods should be stabilized. How do we determine if a method is useful enough to be added.\r\n\r\n### Methods on both `Ipv4Addr` and `Ipv6Addr`\r\n\r\nIf methods like `is_documentation` and `is_benchmarking` are added to both `Ipv4Addr` and `Ipv6Addr` they can also be implemented for `IpAddr`. Does this make sense semantically? Is the definition of `Ipv4Addr::is_documentation` equivalent to `Ipv6Addr::documentation`? Does a user ever needs to check in practice if they have an IPv4 documentation address or an IPv6 documentation address? It has been suggested that for these common methods on `IpAddr`, `Ipv4Addr` and `Ipv6Addr` there could be a trait.\r\n\r\nUnresolved: Which utility methods should be implemented for `IpAddr`.\r\n\r\n## Previous Discussion\r\n\r\n- stabilize the \"ip\" feature: [PR #66584](https://github.com/rust-lang/rust/pull/66584)\r\n- Stabilize the \"IP\" feature: [PR #76098](https://github.com/rust-lang/rust/pull/76098)\r\n- Stabilize the \"IP\" feature (continued from #76098): [PR #85585](https://github.com/rust-lang/rust/pull/85585)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85612/timeline", "performed_via_github_app": null, "state_reason": null}