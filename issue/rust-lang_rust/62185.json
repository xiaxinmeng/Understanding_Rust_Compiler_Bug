{"url": "https://api.github.com/repos/rust-lang/rust/issues/62185", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62185/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62185/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62185/events", "html_url": "https://github.com/rust-lang/rust/issues/62185", "id": 461607503, "node_id": "MDU6SXNzdWU0NjE2MDc1MDM=", "number": 62185, "title": "Self::call constrains lifetime covariance and/or inference unexpectedly under NLL", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-27T15:46:29Z", "updated_at": "2019-06-27T15:48:33Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Spawned off of #60914, namely the [regression][vc regression] of the version-compare crate\r\n\r\n[vc regression]: https://crater-reports.s3.amazonaws.com/pr-60914/try%23f45cc3094ee337acd688771b9234318046b0572d/gh/timvisee.version-compare/log.txt\r\n\r\nLook at this ([play](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=fd8854c0740e05659404819920bd0474)):\r\n\r\n```rust\r\nuse std::slice::Iter;\r\n\r\npub struct Version<'a> {\r\n    parts: Vec<&'a str>,\r\n}\r\n\r\nimpl<'a> Version<'a> {\r\n    pub fn compare(&self, other: &Version) {\r\n        Self::compare_iter(self.parts.iter(),  other.parts.iter())\r\n    }\r\n    \r\n    fn compare_iter(_: Iter<&'a str>, _: Iter<&'a str>) { }\r\n}\r\n```\r\n\r\nwe get an NLL migration error for it.\r\n * (The use of `Self::compare_iter` is important on line 9; if you replace that with `Version::compare_iter`, then NLL will accept the input.)\r\n * ((Likewise, the input is accepted if you get rid of the `'a`'s in the formal parameters to `fn compare_iter`, but that is perhaps less surprising.))\r\n\r\nWhy? I'm not sure; at first I thought it made sense, since I assumed that the call to `Self::compare_iter` would force the two arguments to have the same lifetime `'a` that is also attached to the `self` parameter.\r\n\r\nBut after reflecting on the matter further, I do not understand why we would not have a reborrow here that would allow the call to `compare_iter` to use a shorter lifetime that both inputs can satisfy.\r\n * (Or, wait: Is `std::slice::Iter<T>` not covariant with respect to `T`? I guess I'll need to check that.)\r\n\r\nAnyway, this is either a soundness fix of AST borrow-check (which would be great news), or it is an NLL-complete bug for MIR borrow-check.\r\n\r\nI just didn't want it to get lost in the shuffle of a blog post I am currently working on.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62185/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 1, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62185/timeline", "performed_via_github_app": null, "state_reason": null}