{"url": "https://api.github.com/repos/rust-lang/rust/issues/46345", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46345/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46345/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46345/events", "html_url": "https://github.com/rust-lang/rust/issues/46345", "id": 277533673, "node_id": "MDU6SXNzdWUyNzc1MzM2NzM=", "number": 46345, "title": "`thread::Builder::spawn` returns WouldBlock for EAGAIN", "user": {"login": "jethrogb", "id": 1132307, "node_id": "MDQ6VXNlcjExMzIzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1132307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jethrogb", "html_url": "https://github.com/jethrogb", "followers_url": "https://api.github.com/users/jethrogb/followers", "following_url": "https://api.github.com/users/jethrogb/following{/other_user}", "gists_url": "https://api.github.com/users/jethrogb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jethrogb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jethrogb/subscriptions", "organizations_url": "https://api.github.com/users/jethrogb/orgs", "repos_url": "https://api.github.com/users/jethrogb/repos", "events_url": "https://api.github.com/users/jethrogb/events{/privacy}", "received_events_url": "https://api.github.com/users/jethrogb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123110, "node_id": "MDU6TGFiZWwxMjMxMTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-linux", "name": "O-linux", "color": "6e6ec0", "default": false, "description": "Operating system: Linux"}, {"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-11-28T20:51:23Z", "updated_at": "2022-02-20T01:23:23Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When trying to launch a thread and the thread limit is reached or there is not enough virtual address space available for another thread, `thread::Builder::spawn` returns an `io::Error` of kind `WouldBlock`.\r\n\r\n```rust\r\nextern crate libc;\r\n\r\nfn main() {\r\n    unsafe {\r\n        libc::setrlimit(libc::RLIMIT_NPROC, &libc::rlimit { rlim_cur: 0, rlim_max: 0 });\r\n    }\r\n\r\n    let error = std::thread::Builder::new().spawn(|| unreachable!()).unwrap_err();\r\n\r\n    println!(\"I/O error kind {:?}: {:?}\", error.kind(), error);\r\n}\r\n```\r\n\r\nThis prints (on Linux):\r\n```\r\nI/O error kind WouldBlock: Error { repr: Os { code: 11, message: \"Resource temporarily unavailable\" } }\r\n```\r\n\r\n[WouldBlock means](https://doc.rust-lang.org/std/io/enum.ErrorKind.html#variant.WouldBlock):\r\n\r\n> The operation needs to block to complete, but the blocking operation was requested to not occur.\r\n\r\nThis doesn't make a lot of sense in the context of thread creation. Yes, if the create call were to block until the thread/virtual address space limit is no longer reached, this error interpretation would be correct, but I know of no threading API (Windows or Linux) with these semantics.\r\n\r\nThe source of the problem is that the POSIX errors `EAGAIN` and `EWOULDBLOCK` may be defined as the same error value, and Rust chose to always interpret that as `EWOULDBLOCK`. I'm not sure what course of action I'd suggest to clear up the confusion.\r\n\r\n(NB. On Windows, AFAICT there is no way to limit the number of threads, but when running out of virtual address space, `CreateThread` returns `ERROR_NOT_ENOUGH_MEMORY`, which gets decoded as kind `Other`)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46345/reactions", "total_count": 5, "+1": 2, "-1": 0, "laugh": 2, "hooray": 0, "confused": 0, "heart": 0, "rocket": 1, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46345/timeline", "performed_via_github_app": null, "state_reason": null}