{"url": "https://api.github.com/repos/rust-lang/rust/issues/110870", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110870/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110870/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110870/events", "html_url": "https://github.com/rust-lang/rust/issues/110870", "id": 1685851800, "node_id": "I_kwDOAAsO6M5kfA6Y", "number": 110870, "title": "Large amount of generated code for match statements with large arrays", "user": {"login": "alex", "id": 772, "node_id": "MDQ6VXNlcjc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex", "html_url": "https://github.com/alex", "followers_url": "https://api.github.com/users/alex/followers", "following_url": "https://api.github.com/users/alex/following{/other_user}", "gists_url": "https://api.github.com/users/alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex/subscriptions", "organizations_url": "https://api.github.com/users/alex/orgs", "repos_url": "https://api.github.com/users/alex/repos", "events_url": "https://api.github.com/users/alex/events{/privacy}", "received_events_url": "https://api.github.com/users/alex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}, {"id": 1976249039, "node_id": "MDU6TGFiZWwxOTc2MjQ5MDM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-patterns", "name": "A-patterns", "color": "f7e101", "default": false, "description": "Relating to patterns and pattern matching"}, {"id": 3425147156, "node_id": "LA_kwDOAAsO6M7MJ5kU", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-array", "name": "A-array", "color": "f7e101", "default": false, "description": "Area: [T; N]"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-04-26T22:59:39Z", "updated_at": "2023-04-30T23:14:57Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Consider the following code, which matches on a 64-element array:\r\n\r\n```rs\r\ntype T = [u8; 64];\r\n\r\nconst X: T = [0x06, 0x04, 0x88, 0x37, 0x89, 0x52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\npub fn f(x: &T) -> bool {\r\n    matches!(x, &X)\r\n}\r\n```\r\n\r\nWhen built with `rustc --crate-type=lib t.rs --emit=llvm-ir` this emits 64 basic blocks, each doing a comparison. At `-O`, the optimizer is able to reduce it to 64 single-byte loads, which are OR'd together. Finally, at `-C opt-level=3`, the optimizer is able to put the whole thing back together into a single `icmp ne <64 x i8>`.\r\n\r\nThe large number of basic blocks are visible in the MIR, which leads me to believe that all the optimizations here are being accomplished by LLVM.\r\n\r\nGenerating this large number of basic blocks is inefficient, and puts a lot of unnecessary pressure on LLVM to optimize things. It would be much better if either an integer comparison, or even a call to `memcmp`, was emitted, as it could simple be lowered as LLVM wished. This is how normal, non-match, comparisons with arrays of primitives are handled (see https://github.com/rust-lang/rust/blob/master/library/core/src/array/equality.rs#L146-L152 and https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/intrinsic.rs#L298-L336).\r\n\r\nThis whole thing is extracted and minimized from https://github.com/alex/rust-asn1/blob/main/src/object_identifier.rs#L5-L24, which is used in many match statements in https://github.com/pyca/cryptography/tree/main/src/rust", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110870/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110870/timeline", "performed_via_github_app": null, "state_reason": null}