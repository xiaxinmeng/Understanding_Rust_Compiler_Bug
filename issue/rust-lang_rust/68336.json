{"url": "https://api.github.com/repos/rust-lang/rust/issues/68336", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68336/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68336/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68336/events", "html_url": "https://github.com/rust-lang/rust/issues/68336", "id": 551745005, "node_id": "MDU6SXNzdWU1NTE3NDUwMDU=", "number": 68336, "title": "Support hiding specific stackframes from backtrace by marking on the original functions.", "user": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-18T09:22:56Z", "updated_at": "2020-01-19T18:07:53Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Recently `#[track_caller]` usages has landed on nightly channel, which is really great! However i want to request a little more here. Currently\r\n```rust\r\nfn main() {\r\n    panic!(\"foo\");\r\n}\r\n```\r\noutput is:\r\n```text\r\nthread 'main' panicked at 'foo', src/main.rs:2:5\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:77\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1057\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1426\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:204\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:224\r\n  10: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:472\r\n  11: std::panicking::begin_panic\r\n             at /rustc/689fca01c5a1eac2d240bf08aa728171a28f2285/src/libstd/panicking.rs:399\r\n  12: playground::main\r\n             at src/main.rs:2\r\n  13: std::rt::lang_start::{{closure}}\r\n             at /rustc/689fca01c5a1eac2d240bf08aa728171a28f2285/src/libstd/rt.rs:67\r\n  14: std::rt::lang_start_internal::{{closure}}\r\n             at src/libstd/rt.rs:52\r\n  15: std::panicking::try::do_call\r\n             at src/libstd/panicking.rs:305\r\n  16: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:86\r\n  17: std::panicking::try\r\n             at src/libstd/panicking.rs:281\r\n  18: std::panic::catch_unwind\r\n             at src/libstd/panic.rs:394\r\n  19: std::rt::lang_start_internal\r\n             at src/libstd/rt.rs:51\r\n  20: std::rt::lang_start\r\n             at /rustc/689fca01c5a1eac2d240bf08aa728171a28f2285/src/libstd/rt.rs:67\r\n  21: main\r\n  22: __libc_start_main\r\n```\r\nHowever, of the 22 stack frames, only 3 or 4 is meaningful to user. It would be great if rest of the  functions can be marked with a special attribute, and maybe marked somehow in the mangled symbol, then be excluded from the default display of backtrace.\r\n\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68336/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68336/timeline", "performed_via_github_app": null, "state_reason": null}