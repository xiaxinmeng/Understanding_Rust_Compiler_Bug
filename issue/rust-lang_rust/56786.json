{"url": "https://api.github.com/repos/rust-lang/rust/issues/56786", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56786/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56786/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56786/events", "html_url": "https://github.com/rust-lang/rust/issues/56786", "id": 390812841, "node_id": "MDU6SXNzdWUzOTA4MTI4NDE=", "number": 56786, "title": "utf-8 surrogate lossy conversion inconsistency", "user": {"login": "jnqnfe", "id": 33935229, "node_id": "MDQ6VXNlcjMzOTM1MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/33935229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnqnfe", "html_url": "https://github.com/jnqnfe", "followers_url": "https://api.github.com/users/jnqnfe/followers", "following_url": "https://api.github.com/users/jnqnfe/following{/other_user}", "gists_url": "https://api.github.com/users/jnqnfe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnqnfe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnqnfe/subscriptions", "organizations_url": "https://api.github.com/users/jnqnfe/orgs", "repos_url": "https://api.github.com/users/jnqnfe/repos", "events_url": "https://api.github.com/users/jnqnfe/events{/privacy}", "received_events_url": "https://api.github.com/users/jnqnfe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-13T18:54:07Z", "updated_at": "2018-12-28T18:32:11Z", "closed_at": "2018-12-28T18:32:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Lossy conversion of \"unpaired surrogate\" code points (U+D800 to U+DFFF) is inconsistent, resulting in three Unicode replacement characters on Unix, while only one on Windows.\r\n\r\n# Examples\r\n\r\nLet's take code point U+D800 as an example.\r\n\r\nRaw byte array:\r\n\r\n```rust\r\nlet bytes = [ 0xed, 0xa0, 0x80 ];\r\nlet string = String::from_utf8_lossy(&bytes[..]);\r\n\r\nassert_eq!(string, \"\ufffd\ufffd\ufffd\");\r\n```\r\n\r\nThis results in three because core's `run_utf8_validation` function returns a `Utf8Error` with `error_len` of `Some(1)` due to the byte sequence being outside of a valid range per the match block. The two \"continuation\" bytes are then assessed individually, each also resulting in the same.\r\n\r\nUnix OsStr:\r\n\r\n```rust\r\nuse std::ffi::OsStr;\r\nuse std::os::unix::ffi::OsStrExt;\r\n\r\nlet bytes = [ 0xed, 0xa0, 0x80 ];\r\nlet os_str = OsStr::from_bytes(&bytes[..]);\r\n\r\nassert_eq!(os_str.to_string_lossy(), \"\ufffd\ufffd\ufffd\");\r\n```\r\n\r\nThis goes through the same code paths as above.\r\n\r\nWindows OsStr:\r\n\r\n```rust\r\nuse std::ffi::OsString;\r\nuse std::os::windows::prelude::*;\r\n\r\nlet source = [ 0xD800 ];\r\nlet os_string = OsString::from_wide(&source[..]);\r\nlet os_str = os_string.as_os_str();\r\n\r\nassert_eq!(os_str.to_string_lossy(), \"\ufffd\");\r\n```\r\n\r\nThis goes through different code paths; it uses `std::sys_common::wtf8` code, specifically `Wtf8::to_string_lossy` is of interest, where it explicitly replaces the surrogate sequences with single Unicode replacement characters.\r\n\r\nOne reason why using one replacement character may have been chosen is because of efficient replacement in lossy conversion, since both the sequences to be replaced and the replacement character are three bytes, thus an in place replacement for the `self` consuming `Wtf8Buf::into_string_lossy` implementation.\r\n\r\n# Background\r\n\r\nOr how I ended up here...\r\n\r\nI am working on v2.0 of my command line argument parsing library `gong`. One of the new features is `OsStr` based parsing.\r\n\r\nMy updated test suite is failing on Windows with a short option set involving such byte sequences as above. I have determined that this is due to this inconsistency, and due to my solution combining lossy conversion with use of `std::str::from_utf8`.\r\n\r\nFyi: For `OsStr` based parsing, I lossily convert to `str`, use the `str` based parser, then convert the resulting \"items\", extracting portions of the original `OsStr` for data values. (Thus there is a one-to-one mapping between parser \"items\", e.g. known/unknown short option character, from the `str` parser result to the `OsStr` parser results). For short option sets, for correct extraction of in-same-arg data values, the number of bytes consumed from the original `OsStr` argument must be tracked, which requires discovering how many bytes a replacement character came from in the lossy conversion. For this I used `std::str::from_utf8` since the Windows `OsStr` is just UTF-8 with some extra permissible code points. However in this test the wrong string slice gets taken for the data value because this inconsistency causes the byte consumption tracking to go wrong.\r\n\r\nNote that my solution does not just stop and print an error on encountering a problem like an unknown short, it returns a detailed analysis to the caller for them to take action on.\r\n\r\nUntil such time as this gets fixed in `core`/`std`, I don't think there's any other good option for my library but to duplicate and modify a chunk of the relevant code to give a consistent count, or implement my own fixed Windows `OsStr` lossy converter :/\r\n\r\nedit: the latter is what I have done. you can see all the hacks necessary for OsStr support in the temporary 'temp' branch I pushed to check compilation of the feature on Windows.", "closed_by": {"login": "jnqnfe", "id": 33935229, "node_id": "MDQ6VXNlcjMzOTM1MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/33935229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnqnfe", "html_url": "https://github.com/jnqnfe", "followers_url": "https://api.github.com/users/jnqnfe/followers", "following_url": "https://api.github.com/users/jnqnfe/following{/other_user}", "gists_url": "https://api.github.com/users/jnqnfe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnqnfe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnqnfe/subscriptions", "organizations_url": "https://api.github.com/users/jnqnfe/orgs", "repos_url": "https://api.github.com/users/jnqnfe/repos", "events_url": "https://api.github.com/users/jnqnfe/events{/privacy}", "received_events_url": "https://api.github.com/users/jnqnfe/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56786/timeline", "performed_via_github_app": null, "state_reason": "completed"}