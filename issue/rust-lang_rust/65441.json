{"url": "https://api.github.com/repos/rust-lang/rust/issues/65441", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65441/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65441/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65441/events", "html_url": "https://github.com/rust-lang/rust/issues/65441", "id": 507368561, "node_id": "MDU6SXNzdWU1MDczNjg1NjE=", "number": 65441, "title": "catch_unwind incorrectly tries to stop ForceUnwinds", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-15T16:58:34Z", "updated_at": "2019-11-03T21:55:45Z", "closed_at": "2019-11-03T21:55:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "MWE: \r\n\r\n```rust\r\nuse std::os::unix::thread::JoinHandleExt;\r\nuse libc::pthread_cancel;\r\n\r\nstruct DropGuard;\r\nimpl Drop for DropGuard {\r\n    fn drop(&mut self) {\r\n        println!(\"unwinding foo\");\r\n    }\r\n}\r\n\r\nfn foo() {\r\n    let _x = DropGuard;\r\n    println!(\"thread started\");\r\n    std::thread::sleep(std::time::Duration::new(1, 0));\r\n    println!(\"thread finished\");\r\n}\r\n\r\nfn main() {\r\n    let handle0 = std::thread::spawn(foo);\r\n    std::thread::sleep(std::time::Duration::new(0, 10_000));\r\n    unsafe { \r\n        let x = pthread_cancel(handle0.as_pthread_t());\r\n        assert_eq!(x, 0);\r\n    }\r\n    handle0.join();\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=nightly&mode=release&edition=2018&gist=bfed948efb5de95c7f35317aa348533c))\r\n\r\nOutput:\r\n\r\n```\r\nthread started\r\nunwinding foo\r\n\r\n```\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nwarning: unused `std::result::Result` that must be used\r\n  --> src/main.rs:25:5\r\n   |\r\n25 |     handle0.join();\r\n   |     ^^^^^^^^^^^^^^^\r\n   |\r\n   = note: `#[warn(unused_must_use)]` on by default\r\n   = note: this `Result` may be an `Err` variant, which should be handled\r\n\r\n    Finished release [optimized] target(s) in 0.86s\r\n     Running `target/release/playground`\r\nFATAL: exception not rethrown\r\ntimeout: the monitored command dumped core\r\n/root/entrypoint.sh: line 8:     7 Aborted                 timeout --signal=KILL ${timeout} \"$@\"\r\n\r\n```\r\n\r\nAccording to the [Itanium ABI](https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html#base-framework):\r\n\r\n> * \"forced\" unwinding (such as caused by longjmp or thread termination).\r\n> [...]\r\n> During \"forced unwinding\", on the other hand, an external agent is driving the unwinding. For instance, this can be the longjmp routine. This external agent, not each personality routine, knows when to stop unwinding. The fact that a personality routine is not given a choice about whether unwinding will proceed is indicated by the _UA_FORCE_UNWIND flag.\r\n\r\nSo `catch_unwind` definitely needs to always catch Rust exceptions, and at the thread boundary it probably also want to catch foreign exceptions and abort since whatever that should do probably won't work. When not on a thread boundary, aborting on foreign exceptions might be a conservative step until a better solution is discussed (an alternative solution would be not to catch them and just let them escape, or to catch them and have the `Any` be some `ForeignPanic` type defined somewhere in `std::panic` that users can use to detect that a foreign exception was raised). What it probably shouldn't do is catch \"ForceUnwind\" otherwise `longjmp` might not work across it and threads will not be canceled, but... maybe the conservative thing to do would be for this to abort for the time being?", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65441/timeline", "performed_via_github_app": null, "state_reason": "completed"}