{"url": "https://api.github.com/repos/rust-lang/rust/issues/102595", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102595/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102595/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102595/events", "html_url": "https://github.com/rust-lang/rust/issues/102595", "id": 1393870646, "node_id": "I_kwDOAAsO6M5TFMc2", "number": 102595, "title": "Don't give \"no rules expected the token\" errors for macros that failed to parse", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-10-02T19:18:54Z", "updated_at": "2022-10-02T19:18:54Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Given the following code: <https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=293168337d6a7ce2c74a82461e536bad>\r\n\r\n```rust\r\nmacro_rules! foo {\r\n    ($t:type) => {};\r\n}\r\n\r\nfoo! { Option<bool> }\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror: invalid fragment specifier `type`\r\n --> src/lib.rs:2:6\r\n  |\r\n2 |     ($t:type) => {};\r\n  |      ^^^^^^^\r\n  |\r\n  = help: valid fragment specifiers are `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `lifetime`, `literal`, `path`, `meta`, `tt`, `item` and `vis`\r\n\r\nerror: no rules expected the token `<`\r\n --> src/lib.rs:5:14\r\n  |\r\n1 | macro_rules! foo {\r\n  | ---------------- when calling this macro\r\n...\r\n5 | foo! { Option<bool> }\r\n  |              ^ no rules expected this token in macro call\r\n\r\nerror: could not compile `playground` due to 2 previous errors\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\nerror: invalid fragment specifier `type`\r\n --> src/lib.rs:2:6\r\n  |\r\n2 |     ($t:type) => {};\r\n  |      ^^^^^^^\r\n  |\r\n  = help: valid fragment specifiers are `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `lifetime`, `literal`, `path`, `meta`, `tt`, `item` and `vis`\r\n\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nBecause telling me the call to the macro is invalid doesn't make much sense when that's impossible to fix without fixing the macro first.\r\n\r\n---\r\n\r\nNon-minimized mistake I made that inspired me to open this issue: <https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=aa7ce077f0b05e2af987f72539983e87>\r\n```rust\r\nmacro_rules! impl_for_optional_bool {\r\n    ($($t:type,)+) => {$(\r\n        unsafe impl IsZero for $t {\r\n            fn is_zero(&self) -> bool {\r\n                // SAFETY: This is *not* a stable layout guarantee, but\r\n                // inside `core` we're allowed to rely on the current rustc\r\n                // behaviour that options of bools will be one byte with\r\n                // no padding, so long as they're nested less than 254 deep.\r\n                let raw: u8 = unsafe { core::mem::transmute(*self) };\r\n                raw == 0\r\n            }\r\n        }\r\n    )+};\r\n}\r\n\r\nimpl_for_optional_bool! {\r\n    Option<bool>,\r\n    Option<Option<bool>>,\r\n    Option<Option<Option<bool>>>,\r\n    // Could go further, but not worth the trait lookup overhead\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102595/timeline", "performed_via_github_app": null, "state_reason": null}