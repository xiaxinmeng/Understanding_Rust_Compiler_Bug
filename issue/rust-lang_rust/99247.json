{"url": "https://api.github.com/repos/rust-lang/rust/issues/99247", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99247/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99247/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99247/events", "html_url": "https://github.com/rust-lang/rust/issues/99247", "id": 1304960290, "node_id": "I_kwDOAAsO6M5NyB0i", "number": 99247, "title": "Unintuitive behavior with inferred lifetimes for closures", "user": {"login": "Aegrithas", "id": 45152083, "node_id": "MDQ6VXNlcjQ1MTUyMDgz", "avatar_url": "https://avatars.githubusercontent.com/u/45152083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aegrithas", "html_url": "https://github.com/Aegrithas", "followers_url": "https://api.github.com/users/Aegrithas/followers", "following_url": "https://api.github.com/users/Aegrithas/following{/other_user}", "gists_url": "https://api.github.com/users/Aegrithas/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aegrithas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aegrithas/subscriptions", "organizations_url": "https://api.github.com/users/Aegrithas/orgs", "repos_url": "https://api.github.com/users/Aegrithas/repos", "events_url": "https://api.github.com/users/Aegrithas/events{/privacy}", "received_events_url": "https://api.github.com/users/Aegrithas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-07-14T15:38:45Z", "updated_at": "2023-04-15T11:04:01Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure this is a bug at all, but it's an unintuitive behavior, and I couldn't find any other issues about it, so I figured I would bring it to attention. I have a trait like so:\r\n```rust\r\ntrait MyFn<Params> {\r\n    \r\n    type Output;\r\n    \r\n    fn call(&mut self, params: Params) -> Self::Output;\r\n    \r\n}\r\n```\r\nAnd a macro to generate `impl`s up to a certain arity, like so:\r\n```rust\r\nimpl<P0, R, F: FnMut(P0,) -> R> MyFn<(P0,)> for F {\r\n    \r\n    type Output = R;\r\n    \r\n    fn call(&mut self, (p0,): (P0,)) -> R {\r\n        self(p0,)\r\n    }\r\n    \r\n} \r\n```\r\n(For an example of how this kind of \"custom Fn\" trait can be useful, see [bevy's systems](https://docs.rs/bevy/latest/bevy/prelude/struct.App.html#method.add_system).)\r\n\r\nIn my case, I would like to `Box` these `MyFn`s and use them dynamically, like so:\r\n```rust\r\n\r\nstruct FnBox {\r\n    \r\n    f: Option<Box<dyn for<'a> MyFn<(&'a u8,), Output = ()> + 'static>>\r\n    \r\n}\r\n\r\nimpl FnBox {\r\n    \r\n    fn new() -> Self {\r\n        Self { f: None }\r\n    }\r\n\r\n    fn set<F: for<'a> MyFn<(&'a u8,), Output = ()> + 'static>(&mut self, f: F) {\r\n        self.f = Some(Box::new(f));\r\n    }\r\n    \r\n    fn call(&mut self, b: &u8) {\r\n        if let Some(f) = self.f.as_mut() {\r\n            f.call((b,));\r\n        }\r\n    }\r\n    \r\n}\r\n```\r\n\r\nHowever, if I try to call `FnBox::set` with a closure, (i.e. `fb.set(|b| println!(\"{b}\"));`)\r\nI get this error:\r\n```\r\nerror: implementation of `FnOnce` is not general enough\r\n --> src/main.rs:5:8\r\n  |\r\n5 |     fb.set(|b| println!(\"{b}\"));\r\n  |        ^^^ implementation of `FnOnce` is not general enough\r\n  |\r\n  = note: closure with signature `fn(&'2 u8)` must implement `FnOnce<(&'1 u8,)>`, for any lifetime `'1`...\r\n  = note: ...but it actually implements `FnOnce<(&'2 u8,)>`, for some specific lifetime `'2`\r\n```\r\nwhich, if I'm reading it correctly, means that it's inferring `|b: &'2 u8| println!(\"{b}\")` when what I want is `for<'1> |b: &'1 u8| println!(\"{b}\")` (of course, I can't actually name `'1` or `'2` currently; I've got my eye on you, [closure lifetime binder](https://rust-lang.github.io/rfcs/3216-closure-lifetime-binder.html)).\r\n\r\nOf course, I want this code to work, but the actual point of this issue is that this is inconsistent with the behavior of the `Fn` traits: if I change the signature of `FnBox::set` to\r\n```rust\r\nfn set<F: for<'a> FnMut(&'a u8,) -> () + 'static>(&mut self, f: F)\r\n```\r\nthen the lifetime is inferred correctly and the code works exactly as expected (I don't even need to change any of the other code to match thanks to the `impl MyFn for F: FnMut`).\r\n\r\nLike I said at the beginning, I doubt this is a bug; it's probably more or less intended behavior, but I'm bringing it up to question whether it *should* be intended behavior.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99247/timeline", "performed_via_github_app": null, "state_reason": null}