{"url": "https://api.github.com/repos/rust-lang/rust/issues/51655", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51655/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51655/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51655/events", "html_url": "https://github.com/rust-lang/rust/issues/51655", "id": 333988521, "node_id": "MDU6SXNzdWUzMzM5ODg1MjE=", "number": 51655, "title": "internal compiler error: librustc_mir/hair/pattern/_match.rs:959: impossible case reached", "user": {"login": "koutheir", "id": 1145849, "node_id": "MDQ6VXNlcjExNDU4NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1145849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koutheir", "html_url": "https://github.com/koutheir", "followers_url": "https://api.github.com/users/koutheir/followers", "following_url": "https://api.github.com/users/koutheir/following{/other_user}", "gists_url": "https://api.github.com/users/koutheir/gists{/gist_id}", "starred_url": "https://api.github.com/users/koutheir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koutheir/subscriptions", "organizations_url": "https://api.github.com/users/koutheir/orgs", "repos_url": "https://api.github.com/users/koutheir/repos", "events_url": "https://api.github.com/users/koutheir/events{/privacy}", "received_events_url": "https://api.github.com/users/koutheir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-06-20T09:09:37Z", "updated_at": "2018-06-25T13:43:44Z", "closed_at": "2018-06-25T13:43:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```\r\nuse std::ffi::{OsStr, OsString};\r\nuse std::os::unix::ffi::{OsStrExt, OsStringExt};\r\nuse std::path::{Path, PathBuf};\r\nuse std::{env, fs};\r\n\r\nfn main() {\r\n    println!(\"# {}\", normalize_path(\"etc/././a/.//..//\").display());\r\n}\r\n\r\nconst PATH_DOT_: u8 = '.' as u8;\r\nconst PATH_SEPARATOR: u8 = '/' as u8;\r\nconst PATH_DOT: &[u8] = &[PATH_DOT_];\r\nconst PATH_DOT_DOT: &[u8] = &[PATH_DOT_, PATH_DOT_];\r\n\r\nfn normalize_path(path: impl AsRef<Path>) -> PathBuf {\r\n    let (existent_path, existent_len) = try_canonicalize(&path);\r\n    let buffer = if let Some(existent_path) = existent_path {\r\n        existent_path.into_os_string().into_vec()\r\n    } else if path.as_ref().is_absolute() {\r\n        vec![PATH_SEPARATOR]\r\n    } else {\r\n        let cur_dir = env::current_dir().unwrap_or_else(|_e| PathBuf::from(\"./\"));\r\n        cur_dir.into_os_string().into_vec()\r\n    };\r\n\r\n    let bytes = &path.as_ref().as_os_str().as_bytes()[existent_len..];\r\n    let buffer = bytes\r\n        .split(is_path_separator)\r\n        .fold(buffer, append_to_existing_path);\r\n\r\n    PathBuf::from(OsString::from_vec(buffer))\r\n}\r\n\r\nfn is_path_separator(e: &u8) -> bool {\r\n    *e == PATH_SEPARATOR\r\n}\r\n\r\nfn try_canonicalize(path: impl AsRef<Path>) -> (Option<PathBuf>, usize) {\r\n    let mut bytes = path.as_ref().as_os_str().as_bytes();\r\n    if bytes.is_empty() {\r\n        return (None, 0);\r\n    }\r\n\r\n    loop {\r\n        let sub_path = Path::new(OsStr::from_bytes(bytes));\r\n        if let Ok(r) = fs::canonicalize(sub_path) {\r\n            return (Some(r), bytes.len());\r\n        }\r\n\r\n        let mut iter = bytes.rsplitn(2, is_path_separator);\r\n        if let Some(_last) = iter.next() {\r\n            if let Some(prefix) = iter.next() {\r\n                bytes = prefix;\r\n            } else {\r\n                return (None, 0);\r\n            }\r\n        } else {\r\n            return (None, 0);\r\n        }\r\n    }\r\n}\r\n\r\nenum ParentPathAction {\r\n    CurrentDirectory,\r\n    TrimRight(usize),\r\n    AppendElement,\r\n}\r\n\r\nfn append_to_existing_path(mut path: Vec<u8>, element: &[u8]) -> Vec<u8> {\r\n    match element {\r\n        &[] | PATH_DOT => path,\r\n\r\n        PATH_DOT_DOT => {\r\n            let action = {\r\n                let mut iter = path.rsplitn(2, is_path_separator);\r\n                if let Some(parent) = iter.next() {\r\n                    if let Some(prefix) = iter.next() {\r\n                        if prefix.is_empty() {\r\n                            match parent {\r\n                                PATH_DOT | PATH_DOT_DOT => {\r\n                                    // \"/../..\" => \"/\"\r\n                                    ParentPathAction::TrimRight(parent.len())\r\n                                }\r\n\r\n                                _ => {\r\n                                    // \"/parent/..\" => \"/\"\r\n                                    ParentPathAction::TrimRight(parent.len())\r\n                                }\r\n                            }\r\n                        } else {\r\n                            match parent {\r\n                                PATH_DOT | PATH_DOT_DOT => {\r\n                                    // \"prefix/../..\" => \"prefix/../..\"\r\n                                    ParentPathAction::AppendElement\r\n                                }\r\n\r\n                                _ => {\r\n                                    // \"prefix/parent/..\" => \"prefix\"\r\n                                    ParentPathAction::TrimRight(parent.len() + 1)\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // \"parent/..\" => \"<current_dir>\"\r\n                        ParentPathAction::CurrentDirectory\r\n                    }\r\n                } else {\r\n                    // \"..\" => \"..\"\r\n                    ParentPathAction::AppendElement\r\n                }\r\n            };\r\n\r\n            match action {\r\n                ParentPathAction::CurrentDirectory => {\r\n                    let cur_dir = env::current_dir().unwrap_or_else(|_e| PathBuf::from(\".\"));\r\n                    cur_dir.into_os_string().into_vec()\r\n                }\r\n\r\n                ParentPathAction::TrimRight(trim) => {\r\n                    let new_len = path.len() - trim;\r\n                    path.truncate(new_len);\r\n                    path\r\n                }\r\n\r\n                ParentPathAction::AppendElement => {\r\n                    let path = PathBuf::from(OsString::from_vec(path));\r\n                    let element = Path::new(OsStr::from_bytes(element));\r\n                    path.join(element).into_os_string().into_vec()\r\n                }\r\n            }\r\n        }\r\n\r\n        _ => {\r\n            let path = PathBuf::from(OsString::from_vec(path));\r\n            let element = Path::new(OsStr::from_bytes(element));\r\n            path.join(element).into_os_string().into_vec()\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: compilation error or compilation success.\r\n\r\nInstead, this happened: compiler crashed into an impossible case.\r\n\r\n## Meta\r\n\r\n```\r\n$ rustc --version --verbose\r\nrustc 1.26.2 (594fb253c 2018-06-01)\r\nbinary: rustc\r\ncommit-hash: 594fb253c2b02b320c728391a425d028e6dc7a09\r\ncommit-date: 2018-06-01\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.26.2\r\nLLVM version: 6.0\r\n```\r\n\r\nBacktrace:\r\n```\r\nlibrustc_mir/hair/pattern/_match.rs:959: impossible case reached\r\n```\r\n\r\nError messages:\r\n```\r\n$ cargo build --verbose\r\n   Compiling paths v0.1.0 (file:///media/data/openjdk/126101-infrastructure/license-analyzer/paths)\r\n     Running `rustc --crate-name paths src/main.rs --crate-type bin --emit=dep-info,link -C debuginfo=2 -C metadata=6e46ca38d9a06af0 -C extra-filename=-6e46ca38d9a06af0 --out-dir /media/data/openjdk/126101-infrastructure/license-analyzer/paths/target/debug/deps -C incremental=/media/data/openjdk/126101-infrastructure/license-analyzer/paths/target/debug/incremental -L dependency=/media/data/openjdk/126101-infrastructure/license-analyzer/paths/target/debug/deps`\r\nerror: internal compiler error: librustc_mir/hair/pattern/_match.rs:959: impossible case reached\r\n\r\nthread 'rustc' panicked at 'Box<Any>', librustc_errors/lib.rs:543:9\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\nerror: aborting due to previous error\r\n\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.26.2 (594fb253c 2018-06-01) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nerror: Could not compile `paths`.\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustc --crate-name paths src/main.rs --crate-type bin --emit=dep-info,link -C debuginfo=2 -C metadata=6e46ca38d9a06af0 -C extra-filename=-6e46ca38d9a06af0 --out-dir <somewhere>/paths/target/debug/deps -C incremental=<somewhere>/paths/target/debug/incremental -L dependency=<somewhere>/paths/target/debug/deps` (exit code: 101)\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51655/timeline", "performed_via_github_app": null, "state_reason": "completed"}