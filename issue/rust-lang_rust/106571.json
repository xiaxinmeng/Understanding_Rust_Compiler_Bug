{"url": "https://api.github.com/repos/rust-lang/rust/issues/106571", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106571/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106571/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106571/events", "html_url": "https://github.com/rust-lang/rust/issues/106571", "id": 1524041574, "node_id": "I_kwDOAAsO6M5a1wdm", "number": 106571, "title": "Regression: duplicate messages appear in --error-format=json", "user": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/100", "html_url": "https://github.com/rust-lang/rust/milestone/100", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/100/labels", "id": 8740262, "node_id": "MI_kwDOAAsO6M4AhV2m", "number": 100, "title": "1.68.0", "description": null, "creator": {"login": "rustbot", "id": 47979223, "node_id": "MDQ6VXNlcjQ3OTc5MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47979223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustbot", "html_url": "https://github.com/rustbot", "followers_url": "https://api.github.com/users/rustbot/followers", "following_url": "https://api.github.com/users/rustbot/following{/other_user}", "gists_url": "https://api.github.com/users/rustbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustbot/subscriptions", "organizations_url": "https://api.github.com/users/rustbot/orgs", "repos_url": "https://api.github.com/users/rustbot/repos", "events_url": "https://api.github.com/users/rustbot/events{/privacy}", "received_events_url": "https://api.github.com/users/rustbot/received_events", "type": "User", "site_admin": false}, "open_issues": 2, "closed_issues": 925, "state": "closed", "created_at": "2022-12-09T21:27:37Z", "updated_at": "2023-03-30T00:08:30Z", "due_on": null, "closed_at": "2023-03-30T00:08:30Z"}, "comments": 2, "created_at": "2023-01-07T18:23:44Z", "updated_at": "2023-05-26T15:34:12Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "```toml\r\n# Cargo.toml\r\n\r\n[package]\r\nname = \"repro\"\r\nversion = \"0.0.0\"\r\nedition = \"2021\"\r\n\r\n[lib]\r\nproc-macro = true\r\n```\r\n\r\n```rust\r\n// src/main.rs\r\n\r\nrepro::repro!();\r\n\r\nfn main() {}\r\n```\r\n\r\n```rust\r\n// src/lib.rs\r\n\r\nuse proc_macro::{Delimiter, Group, Ident, Punct, Spacing, Span, TokenStream, TokenTree};\r\n\r\n#[proc_macro]\r\npub fn repro(_input: TokenStream) -> TokenStream {\r\n    TokenStream::from_iter([\r\n        // fn f<T: Sized>() {}\r\n        TokenTree::Ident(Ident::new(\"fn\", Span::call_site())),\r\n        TokenTree::Ident(Ident::new(\"f\", Span::call_site())),\r\n        TokenTree::Punct(Punct::new('<', Spacing::Alone)),\r\n        TokenTree::Ident(Ident::new(\"T\", Span::call_site())),\r\n        TokenTree::Punct(Punct::new(':', Spacing::Alone)),\r\n        TokenTree::Ident(Ident::new(\"Sized\", Span::call_site())),\r\n        TokenTree::Punct(Punct::new('>', Spacing::Alone)),\r\n        TokenTree::Group(Group::new(Delimiter::Parenthesis, TokenStream::new())),\r\n        TokenTree::Group(Group::new(Delimiter::Brace, TokenStream::new())),\r\n        // fn g() { f::<str>() }\r\n        TokenTree::Ident(Ident::new(\"fn\", Span::call_site())),\r\n        TokenTree::Ident(Ident::new(\"g\", Span::call_site())),\r\n        TokenTree::Group(Group::new(Delimiter::Parenthesis, TokenStream::new())),\r\n        TokenTree::Group(Group::new(\r\n            Delimiter::Brace,\r\n            TokenStream::from_iter([\r\n                TokenTree::Ident(Ident::new(\"f\", Span::call_site())),\r\n                TokenTree::Punct(Punct::new(':', Spacing::Joint)),\r\n                TokenTree::Punct(Punct::new(':', Spacing::Alone)),\r\n                TokenTree::Punct(Punct::new('<', Spacing::Alone)),\r\n                TokenTree::Ident(Ident::new(\"str\", Span::call_site())),\r\n                TokenTree::Punct(Punct::new('>', Spacing::Alone)),\r\n                TokenTree::Group(Group::new(Delimiter::Parenthesis, TokenStream::new())),\r\n            ]),\r\n        )),\r\n        // fn h() { f::<str>() }\r\n        TokenTree::Ident(Ident::new(\"fn\", Span::call_site())),\r\n        TokenTree::Ident(Ident::new(\"h\", Span::call_site())),\r\n        TokenTree::Group(Group::new(Delimiter::Parenthesis, TokenStream::new())),\r\n        TokenTree::Group(Group::new(\r\n            Delimiter::Brace,\r\n            TokenStream::from_iter([\r\n                TokenTree::Ident(Ident::new(\"f\", Span::call_site())),\r\n                TokenTree::Punct(Punct::new(':', Spacing::Joint)),\r\n                TokenTree::Punct(Punct::new(':', Spacing::Alone)),\r\n                TokenTree::Punct(Punct::new('<', Spacing::Alone)),\r\n                TokenTree::Ident(Ident::new(\"str\", Span::call_site())),\r\n                TokenTree::Punct(Punct::new('>', Spacing::Alone)),\r\n                TokenTree::Group(Group::new(Delimiter::Parenthesis, TokenStream::new())),\r\n            ]),\r\n        )),\r\n    ])\r\n}\r\n```\r\n\r\n```console\r\n$ cargo clean; cargo +nightly-2023-01-02 check --message-format=json\r\n{\"reason\":\"compiler-artifact\",\"package_id\":\"repro 0.0.0 (path+file:///git/repro)\",\"manifest_path\":\"/git/repro/Cargo.toml\",\"target\":{\"kind\":[\"proc-macro\"],\"crate_types\":[\"proc-macro\"],\"name\":\"repro\",\"src_path\":\"/git/repro/src/lib.rs\",\"edition\":\"2021\",\"doc\":true,\"doctest\":true,\"test\":true},\"profile\":{\"opt_level\":\"0\",\"debuginfo\":2,\"debug_assertions\":true,\"overflow_checks\":true,\"test\":false},\"features\":[],\"filenames\":[\"/git/repro/target/debug/deps/librepro-c697fecae630a328.rmeta\"],\"executable\":null,\"fresh\":false}\r\n{\"reason\":\"compiler-artifact\",\"package_id\":\"repro 0.0.0 (path+file:///git/repro)\",\"manifest_path\":\"/git/repro/Cargo.toml\",\"target\":{\"kind\":[\"proc-macro\"],\"crate_types\":[\"proc-macro\"],\"name\":\"repro\",\"src_path\":\"/git/repro/src/lib.rs\",\"edition\":\"2021\",\"doc\":true,\"doctest\":true,\"test\":true},\"profile\":{\"opt_level\":\"0\",\"debuginfo\":2,\"debug_assertions\":true,\"overflow_checks\":true,\"test\":false},\"features\":[],\"filenames\":[\"/git/repro/target/debug/deps/librepro-433aa5011bfe20c0.so\"],\"executable\":null,\"fresh\":false}\r\n{\"reason\":\"compiler-message\",\"package_id\":\"repro 0.0.0 (path+file:///git/repro)\",\"manifest_path\":\"/git/repro/Cargo.toml\",\"target\":{\"kind\":[\"bin\"],\"crate_types\":[\"bin\"],\"name\":\"repro\",\"src_path\":\"/git/repro/src/main.rs\",\"edition\":\"2021\",\"doc\":true,\"doctest\":false,\"test\":true},\"message\":{\"rendered\":\"error[E0277]: the size for values of type `str` cannot be known at compilation time\\n --> src/main.rs:3:1\\n  |\\n3 | repro::repro!();\\n  | ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\\n  |\\n  = help: the trait `Sized` is not implemented for `str`\\nnote: required by a bound in `f`\\n --> src/main.rs:3:1\\n  |\\n3 | repro::repro!();\\n  | ^^^^^^^^^^^^^^^ required by this bound in `f`\\n  = note: this error originates in the macro `repro::repro` (in Nightly builds, run with -Z macro-backtrace for more info)\\n\\n\",\"children\":[{\"children\":[],\"code\":null,\"level\":\"help\",\"message\":\"the trait `Sized` is not implemented for `str`\",\"rendered\":null,\"spans\":[]},{\"children\":[],\"code\":null,\"level\":\"note\",\"message\":\"required by a bound in `f`\",\"rendered\":null,\"spans\":[{\"byte_end\":31,\"byte_start\":16,\"column_end\":16,\"column_start\":1,\"expansion\":{\"def_site_span\":{\"byte_end\":167,\"byte_start\":119,\"column_end\":49,\"column_start\":1,\"expansion\":null,\"file_name\":\"/git/repro/src/lib.rs\",\"is_primary\":false,\"label\":null,\"line_end\":6,\"line_start\":6,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":49,\"highlight_start\":1,\"text\":\"pub fn repro(_input: TokenStream) -> TokenStream {\"}]},\"macro_decl_name\":\"repro::repro!\",\"span\":{\"byte_end\":31,\"byte_start\":16,\"column_end\":16,\"column_start\":1,\"expansion\":null,\"file_name\":\"src/main.rs\",\"is_primary\":false,\"label\":null,\"line_end\":3,\"line_start\":3,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":16,\"highlight_start\":1,\"text\":\"repro::repro!();\"}]}},\"file_name\":\"src/main.rs\",\"is_primary\":true,\"label\":\"required by this bound in `f`\",\"line_end\":3,\"line_start\":3,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":16,\"highlight_start\":1,\"text\":\"repro::repro!();\"}]}]}],\"code\":{\"code\":\"E0277\",\"explanation\":\"You tried to use a type which doesn't implement some trait in a place which\\nexpected that trait.\\n\\nErroneous code example:\\n\\n```compile_fail,E0277\\n// here we declare the Foo trait with a bar method\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n// we now declare a function which takes an object implementing the Foo trait\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar();\\n}\\n\\nfn main() {\\n    // we now call the method with the i32 type, which doesn't implement\\n    // the Foo trait\\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\\n}\\n```\\n\\nIn order to fix this error, verify that the type you're using does implement\\nthe trait. Example:\\n\\n```\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n// we implement the trait on the i32 type\\nimpl Foo for i32 {\\n    fn bar(&self) {}\\n}\\n\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar(); // we can now use this method since i32 implements the\\n               // Foo trait\\n}\\n\\nfn main() {\\n    some_func(5i32); // ok!\\n}\\n```\\n\\nOr in a generic context, an erroneous code example would look like:\\n\\n```compile_fail,E0277\\nfn some_func<T>(foo: T) {\\n    println!(\\\"{:?}\\\", foo); // error: the trait `core::fmt::Debug` is not\\n                           //        implemented for the type `T`\\n}\\n\\nfn main() {\\n    // We now call the method with the i32 type,\\n    // which *does* implement the Debug trait.\\n    some_func(5i32);\\n}\\n```\\n\\nNote that the error here is in the definition of the generic function. Although\\nwe only call it with a parameter that does implement `Debug`, the compiler\\nstill rejects the function. It must work with all possible input types. In\\norder to make this example compile, we need to restrict the generic type we're\\naccepting:\\n\\n```\\nuse std::fmt;\\n\\n// Restrict the input type to types that implement Debug.\\nfn some_func<T: fmt::Debug>(foo: T) {\\n    println!(\\\"{:?}\\\", foo);\\n}\\n\\nfn main() {\\n    // Calling the method is still fine, as i32 implements Debug.\\n    some_func(5i32);\\n\\n    // This would fail to compile now:\\n    // struct WithoutDebug;\\n    // some_func(WithoutDebug);\\n}\\n```\\n\\nRust only looks at the signature of the called function, as such it must\\nalready specify all requirements that will be used for every type parameter.\\n\"},\"level\":\"error\",\"message\":\"the size for values of type `str` cannot be known at compilation time\",\"spans\":[{\"byte_end\":31,\"byte_start\":16,\"column_end\":16,\"column_start\":1,\"expansion\":{\"def_site_span\":{\"byte_end\":167,\"byte_start\":119,\"column_end\":49,\"column_start\":1,\"expansion\":null,\"file_name\":\"/git/repro/src/lib.rs\",\"is_primary\":false,\"label\":null,\"line_end\":6,\"line_start\":6,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":49,\"highlight_start\":1,\"text\":\"pub fn repro(_input: TokenStream) -> TokenStream {\"}]},\"macro_decl_name\":\"repro::repro!\",\"span\":{\"byte_end\":31,\"byte_start\":16,\"column_end\":16,\"column_start\":1,\"expansion\":null,\"file_name\":\"src/main.rs\",\"is_primary\":false,\"label\":null,\"line_end\":3,\"line_start\":3,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":16,\"highlight_start\":1,\"text\":\"repro::repro!();\"}]}},\"file_name\":\"src/main.rs\",\"is_primary\":true,\"label\":\"doesn't have a size known at compile-time\",\"line_end\":3,\"line_start\":3,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":16,\"highlight_start\":1,\"text\":\"repro::repro!();\"}]}]}}\r\n{\"reason\":\"compiler-message\",\"package_id\":\"repro 0.0.0 (path+file:///git/repro)\",\"manifest_path\":\"/git/repro/Cargo.toml\",\"target\":{\"kind\":[\"bin\"],\"crate_types\":[\"bin\"],\"name\":\"repro\",\"src_path\":\"/git/repro/src/main.rs\",\"edition\":\"2021\",\"doc\":true,\"doctest\":false,\"test\":true},\"message\":{\"rendered\":\"error: aborting due to previous error\\n\\n\",\"children\":[],\"code\":null,\"level\":\"error\",\"message\":\"aborting due to previous error\",\"spans\":[]}}\r\n{\"reason\":\"compiler-message\",\"package_id\":\"repro 0.0.0 (path+file:///git/repro)\",\"manifest_path\":\"/git/repro/Cargo.toml\",\"target\":{\"kind\":[\"bin\"],\"crate_types\":[\"bin\"],\"name\":\"repro\",\"src_path\":\"/git/repro/src/main.rs\",\"edition\":\"2021\",\"doc\":true,\"doctest\":false,\"test\":true},\"message\":{\"rendered\":\"For more information about this error, try `rustc --explain E0277`.\\n\",\"children\":[],\"code\":null,\"level\":\"failure-note\",\"message\":\"For more information about this error, try `rustc --explain E0277`.\",\"spans\":[]}}\r\n{\"reason\":\"build-finished\",\"success\":false}\r\n```\r\n\r\n```console\r\n$ cargo clean; cargo +nightly-2023-01-03 check --message-format=json\r\n{\"reason\":\"compiler-artifact\",\"package_id\":\"repro 0.0.0 (path+file:///git/repro)\",\"manifest_path\":\"/git/repro/Cargo.toml\",\"target\":{\"kind\":[\"proc-macro\"],\"crate_types\":[\"proc-macro\"],\"name\":\"repro\",\"src_path\":\"/git/repro/src/lib.rs\",\"edition\":\"2021\",\"doc\":true,\"doctest\":true,\"test\":true},\"profile\":{\"opt_level\":\"0\",\"debuginfo\":2,\"debug_assertions\":true,\"overflow_checks\":true,\"test\":false},\"features\":[],\"filenames\":[\"/git/repro/target/debug/deps/librepro-c697fecae630a328.rmeta\"],\"executable\":null,\"fresh\":false}\r\n{\"reason\":\"compiler-artifact\",\"package_id\":\"repro 0.0.0 (path+file:///git/repro)\",\"manifest_path\":\"/git/repro/Cargo.toml\",\"target\":{\"kind\":[\"proc-macro\"],\"crate_types\":[\"proc-macro\"],\"name\":\"repro\",\"src_path\":\"/git/repro/src/lib.rs\",\"edition\":\"2021\",\"doc\":true,\"doctest\":true,\"test\":true},\"profile\":{\"opt_level\":\"0\",\"debuginfo\":2,\"debug_assertions\":true,\"overflow_checks\":true,\"test\":false},\"features\":[],\"filenames\":[\"/git/repro/target/debug/deps/librepro-433aa5011bfe20c0.so\"],\"executable\":null,\"fresh\":false}\r\n{\"reason\":\"compiler-message\",\"package_id\":\"repro 0.0.0 (path+file:///git/repro)\",\"manifest_path\":\"/git/repro/Cargo.toml\",\"target\":{\"kind\":[\"bin\"],\"crate_types\":[\"bin\"],\"name\":\"repro\",\"src_path\":\"/git/repro/src/main.rs\",\"edition\":\"2021\",\"doc\":true,\"doctest\":false,\"test\":true},\"message\":{\"rendered\":\"error[E0277]: the size for values of type `str` cannot be known at compilation time\\n --> src/main.rs:3:1\\n  |\\n3 | repro::repro!();\\n  | ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\\n  |\\n  = help: the trait `Sized` is not implemented for `str`\\nnote: required by a bound in `f`\\n --> src/main.rs:3:1\\n  |\\n3 | repro::repro!();\\n  | ^^^^^^^^^^^^^^^ required by this bound in `f`\\n  = note: this error originates in the macro `repro::repro` (in Nightly builds, run with -Z macro-backtrace for more info)\\n\\n\",\"children\":[{\"children\":[],\"code\":null,\"level\":\"help\",\"message\":\"the trait `Sized` is not implemented for `str`\",\"rendered\":null,\"spans\":[]},{\"children\":[],\"code\":null,\"level\":\"note\",\"message\":\"required by a bound in `f`\",\"rendered\":null,\"spans\":[{\"byte_end\":31,\"byte_start\":16,\"column_end\":16,\"column_start\":1,\"expansion\":{\"def_site_span\":{\"byte_end\":167,\"byte_start\":119,\"column_end\":49,\"column_start\":1,\"expansion\":null,\"file_name\":\"/git/repro/src/lib.rs\",\"is_primary\":false,\"label\":null,\"line_end\":6,\"line_start\":6,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":49,\"highlight_start\":1,\"text\":\"pub fn repro(_input: TokenStream) -> TokenStream {\"}]},\"macro_decl_name\":\"repro::repro!\",\"span\":{\"byte_end\":31,\"byte_start\":16,\"column_end\":16,\"column_start\":1,\"expansion\":null,\"file_name\":\"src/main.rs\",\"is_primary\":false,\"label\":null,\"line_end\":3,\"line_start\":3,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":16,\"highlight_start\":1,\"text\":\"repro::repro!();\"}]}},\"file_name\":\"src/main.rs\",\"is_primary\":true,\"label\":\"required by this bound in `f`\",\"line_end\":3,\"line_start\":3,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":16,\"highlight_start\":1,\"text\":\"repro::repro!();\"}]}]}],\"code\":{\"code\":\"E0277\",\"explanation\":\"You tried to use a type which doesn't implement some trait in a place which\\nexpected that trait.\\n\\nErroneous code example:\\n\\n```compile_fail,E0277\\n// here we declare the Foo trait with a bar method\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n// we now declare a function which takes an object implementing the Foo trait\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar();\\n}\\n\\nfn main() {\\n    // we now call the method with the i32 type, which doesn't implement\\n    // the Foo trait\\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\\n}\\n```\\n\\nIn order to fix this error, verify that the type you're using does implement\\nthe trait. Example:\\n\\n```\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n// we implement the trait on the i32 type\\nimpl Foo for i32 {\\n    fn bar(&self) {}\\n}\\n\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar(); // we can now use this method since i32 implements the\\n               // Foo trait\\n}\\n\\nfn main() {\\n    some_func(5i32); // ok!\\n}\\n```\\n\\nOr in a generic context, an erroneous code example would look like:\\n\\n```compile_fail,E0277\\nfn some_func<T>(foo: T) {\\n    println!(\\\"{:?}\\\", foo); // error: the trait `core::fmt::Debug` is not\\n                           //        implemented for the type `T`\\n}\\n\\nfn main() {\\n    // We now call the method with the i32 type,\\n    // which *does* implement the Debug trait.\\n    some_func(5i32);\\n}\\n```\\n\\nNote that the error here is in the definition of the generic function. Although\\nwe only call it with a parameter that does implement `Debug`, the compiler\\nstill rejects the function. It must work with all possible input types. In\\norder to make this example compile, we need to restrict the generic type we're\\naccepting:\\n\\n```\\nuse std::fmt;\\n\\n// Restrict the input type to types that implement Debug.\\nfn some_func<T: fmt::Debug>(foo: T) {\\n    println!(\\\"{:?}\\\", foo);\\n}\\n\\nfn main() {\\n    // Calling the method is still fine, as i32 implements Debug.\\n    some_func(5i32);\\n\\n    // This would fail to compile now:\\n    // struct WithoutDebug;\\n    // some_func(WithoutDebug);\\n}\\n```\\n\\nRust only looks at the signature of the called function, as such it must\\nalready specify all requirements that will be used for every type parameter.\\n\"},\"level\":\"error\",\"message\":\"the size for values of type `str` cannot be known at compilation time\",\"spans\":[{\"byte_end\":31,\"byte_start\":16,\"column_end\":16,\"column_start\":1,\"expansion\":{\"def_site_span\":{\"byte_end\":167,\"byte_start\":119,\"column_end\":49,\"column_start\":1,\"expansion\":null,\"file_name\":\"/git/repro/src/lib.rs\",\"is_primary\":false,\"label\":null,\"line_end\":6,\"line_start\":6,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":49,\"highlight_start\":1,\"text\":\"pub fn repro(_input: TokenStream) -> TokenStream {\"}]},\"macro_decl_name\":\"repro::repro!\",\"span\":{\"byte_end\":31,\"byte_start\":16,\"column_end\":16,\"column_start\":1,\"expansion\":null,\"file_name\":\"src/main.rs\",\"is_primary\":false,\"label\":null,\"line_end\":3,\"line_start\":3,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":16,\"highlight_start\":1,\"text\":\"repro::repro!();\"}]}},\"file_name\":\"src/main.rs\",\"is_primary\":true,\"label\":\"doesn't have a size known at compile-time\",\"line_end\":3,\"line_start\":3,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":16,\"highlight_start\":1,\"text\":\"repro::repro!();\"}]}]}}\r\n{\"reason\":\"compiler-message\",\"package_id\":\"repro 0.0.0 (path+file:///git/repro)\",\"manifest_path\":\"/git/repro/Cargo.toml\",\"target\":{\"kind\":[\"bin\"],\"crate_types\":[\"bin\"],\"name\":\"repro\",\"src_path\":\"/git/repro/src/main.rs\",\"edition\":\"2021\",\"doc\":true,\"doctest\":false,\"test\":true},\"message\":{\"rendered\":\"error[E0277]: the size for values of type `str` cannot be known at compilation time\\n --> src/main.rs:3:1\\n  |\\n3 | repro::repro!();\\n  | ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\\n  |\\n  = help: the trait `Sized` is not implemented for `str`\\nnote: required by a bound in `f`\\n --> src/main.rs:3:1\\n  |\\n3 | repro::repro!();\\n  | ^^^^^^^^^^^^^^^ required by this bound in `f`\\n  = note: this error originates in the macro `repro::repro` (in Nightly builds, run with -Z macro-backtrace for more info)\\n\\n\",\"children\":[{\"children\":[],\"code\":null,\"level\":\"help\",\"message\":\"the trait `Sized` is not implemented for `str`\",\"rendered\":null,\"spans\":[]},{\"children\":[],\"code\":null,\"level\":\"note\",\"message\":\"required by a bound in `f`\",\"rendered\":null,\"spans\":[{\"byte_end\":31,\"byte_start\":16,\"column_end\":16,\"column_start\":1,\"expansion\":{\"def_site_span\":{\"byte_end\":167,\"byte_start\":119,\"column_end\":49,\"column_start\":1,\"expansion\":null,\"file_name\":\"/git/repro/src/lib.rs\",\"is_primary\":false,\"label\":null,\"line_end\":6,\"line_start\":6,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":49,\"highlight_start\":1,\"text\":\"pub fn repro(_input: TokenStream) -> TokenStream {\"}]},\"macro_decl_name\":\"repro::repro!\",\"span\":{\"byte_end\":31,\"byte_start\":16,\"column_end\":16,\"column_start\":1,\"expansion\":null,\"file_name\":\"src/main.rs\",\"is_primary\":false,\"label\":null,\"line_end\":3,\"line_start\":3,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":16,\"highlight_start\":1,\"text\":\"repro::repro!();\"}]}},\"file_name\":\"src/main.rs\",\"is_primary\":true,\"label\":\"required by this bound in `f`\",\"line_end\":3,\"line_start\":3,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":16,\"highlight_start\":1,\"text\":\"repro::repro!();\"}]}]}],\"code\":{\"code\":\"E0277\",\"explanation\":\"You tried to use a type which doesn't implement some trait in a place which\\nexpected that trait.\\n\\nErroneous code example:\\n\\n```compile_fail,E0277\\n// here we declare the Foo trait with a bar method\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n// we now declare a function which takes an object implementing the Foo trait\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar();\\n}\\n\\nfn main() {\\n    // we now call the method with the i32 type, which doesn't implement\\n    // the Foo trait\\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\\n}\\n```\\n\\nIn order to fix this error, verify that the type you're using does implement\\nthe trait. Example:\\n\\n```\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n// we implement the trait on the i32 type\\nimpl Foo for i32 {\\n    fn bar(&self) {}\\n}\\n\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar(); // we can now use this method since i32 implements the\\n               // Foo trait\\n}\\n\\nfn main() {\\n    some_func(5i32); // ok!\\n}\\n```\\n\\nOr in a generic context, an erroneous code example would look like:\\n\\n```compile_fail,E0277\\nfn some_func<T>(foo: T) {\\n    println!(\\\"{:?}\\\", foo); // error: the trait `core::fmt::Debug` is not\\n                           //        implemented for the type `T`\\n}\\n\\nfn main() {\\n    // We now call the method with the i32 type,\\n    // which *does* implement the Debug trait.\\n    some_func(5i32);\\n}\\n```\\n\\nNote that the error here is in the definition of the generic function. Although\\nwe only call it with a parameter that does implement `Debug`, the compiler\\nstill rejects the function. It must work with all possible input types. In\\norder to make this example compile, we need to restrict the generic type we're\\naccepting:\\n\\n```\\nuse std::fmt;\\n\\n// Restrict the input type to types that implement Debug.\\nfn some_func<T: fmt::Debug>(foo: T) {\\n    println!(\\\"{:?}\\\", foo);\\n}\\n\\nfn main() {\\n    // Calling the method is still fine, as i32 implements Debug.\\n    some_func(5i32);\\n\\n    // This would fail to compile now:\\n    // struct WithoutDebug;\\n    // some_func(WithoutDebug);\\n}\\n```\\n\\nRust only looks at the signature of the called function, as such it must\\nalready specify all requirements that will be used for every type parameter.\\n\"},\"level\":\"error\",\"message\":\"the size for values of type `str` cannot be known at compilation time\",\"spans\":[{\"byte_end\":31,\"byte_start\":16,\"column_end\":16,\"column_start\":1,\"expansion\":{\"def_site_span\":{\"byte_end\":167,\"byte_start\":119,\"column_end\":49,\"column_start\":1,\"expansion\":null,\"file_name\":\"/git/repro/src/lib.rs\",\"is_primary\":false,\"label\":null,\"line_end\":6,\"line_start\":6,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":49,\"highlight_start\":1,\"text\":\"pub fn repro(_input: TokenStream) -> TokenStream {\"}]},\"macro_decl_name\":\"repro::repro!\",\"span\":{\"byte_end\":31,\"byte_start\":16,\"column_end\":16,\"column_start\":1,\"expansion\":null,\"file_name\":\"src/main.rs\",\"is_primary\":false,\"label\":null,\"line_end\":3,\"line_start\":3,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":16,\"highlight_start\":1,\"text\":\"repro::repro!();\"}]}},\"file_name\":\"src/main.rs\",\"is_primary\":true,\"label\":\"doesn't have a size known at compile-time\",\"line_end\":3,\"line_start\":3,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"text\":[{\"highlight_end\":16,\"highlight_start\":1,\"text\":\"repro::repro!();\"}]}]}}\r\n{\"reason\":\"compiler-message\",\"package_id\":\"repro 0.0.0 (path+file:///git/repro)\",\"manifest_path\":\"/git/repro/Cargo.toml\",\"target\":{\"kind\":[\"bin\"],\"crate_types\":[\"bin\"],\"name\":\"repro\",\"src_path\":\"/git/repro/src/main.rs\",\"edition\":\"2021\",\"doc\":true,\"doctest\":false,\"test\":true},\"message\":{\"rendered\":\"error: aborting due to 2 previous errors\\n\\n\",\"children\":[],\"code\":null,\"level\":\"error\",\"message\":\"aborting due to 2 previous errors\",\"spans\":[]}}\r\n{\"reason\":\"compiler-message\",\"package_id\":\"repro 0.0.0 (path+file:///git/repro)\",\"manifest_path\":\"/git/repro/Cargo.toml\",\"target\":{\"kind\":[\"bin\"],\"crate_types\":[\"bin\"],\"name\":\"repro\",\"src_path\":\"/git/repro/src/main.rs\",\"edition\":\"2021\",\"doc\":true,\"doctest\":false,\"test\":true},\"message\":{\"rendered\":\"For more information about this error, try `rustc --explain E0277`.\\n\",\"children\":[],\"code\":null,\"level\":\"failure-note\",\"message\":\"For more information about this error, try `rustc --explain E0277`.\",\"spans\":[]}}\r\n{\"reason\":\"build-finished\",\"success\":false}\r\n```\r\n\r\n(host: x86_64-unknown-linux-gnu)\r\n\r\nNotice that the first \"compiler-message\" (3rd JSON object) in the nightly-2023-01-02 output appears twice (3rd and 4th JSON object) in the nightly-2023-01-03 output. The duplicate lines are exactly identical.\r\n\r\nIf CARGO_INCREMENTAL=0 is set, the duplication does not occur.\r\n\r\nThe regression bisects to https://github.com/rust-lang/rust/pull/84762. @cjgillot @petrochenkov \r\n\r\nI am reporting this here instead of rust-lang/cargo because the description of that PR makes it sound like it was intended to be an internal refactor only with no user-facing consequence.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106571/timeline", "performed_via_github_app": null, "state_reason": null}