{"url": "https://api.github.com/repos/rust-lang/rust/issues/80083", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80083/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80083/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80083/events", "html_url": "https://github.com/rust-lang/rust/issues/80083", "id": 769124861, "node_id": "MDU6SXNzdWU3NjkxMjQ4NjE=", "number": 80083, "title": "Impl Trait forces unnecessary lifetime bounds", "user": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 3675472455, "node_id": "LA_kwDOAAsO6M7bE0JH", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-variance", "name": "A-variance", "color": "f7e101", "default": false, "description": "Area: Variance (https://doc.rust-lang.org/nomicon/subtyping.html)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-12-16T17:23:33Z", "updated_at": "2022-05-15T08:09:51Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems like impl Trait forces its own lifetime bound onto anything that it touches, even if that doesn't make sense.\r\n\r\n```rust\r\nstruct Never<T>(fn() -> T);\r\n\r\nimpl<T> Iterator for Never<T> {\r\n    type Item = T;\r\n    fn next(&mut self) -> Option<T> {\r\n        None\r\n    }\r\n}\r\n\r\nfn actual_type<T>(f: fn() -> T) -> Never<T> {\r\n    Never(f)\r\n}\r\n\r\nfn impl_trait<T>(f: fn() -> T) -> impl Iterator<Item = T> + 'static {\r\n    Never(f)\r\n}\r\n```\r\n\r\nHere I create an iterator like type that takes a function that produces T values. The implementation of the iterator doesn't really matter here. If I now create a function constructing that type, returning the actual type lets the borrow checker correctly understand that T doesn't require any lifetimes. However if I return impl Iterator instead, the compiler is apparently seeing that T is part of the impl Trait and therefore forces me to apply the same lifetime as the iterator itself to the elements T, even if that makes no sense. I'm guessing impl Trait is not properly respecting variance.\r\n\r\n```\r\nerror[E0310]: the parameter type `T` may not live long enough\r\n  --> src/lib.rs:14:35\r\n   |\r\n14 | fn impl_trait<T>(f: fn() -> T) -> impl Iterator<Item = T> + 'static {\r\n   |               -                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `Never<T>` will meet its required lifetime bounds\r\n   |               |\r\n   |               help: consider adding an explicit lifetime bound...: `T: 'static`\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\n[Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=8308bd1be7f75ae2aec884397801b4b1)\r\n\r\n@HeroicKatora mentioned that a similar problem happens with trait objects as well: [Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ce945e7487378ec680045fca77d0176e)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80083/timeline", "performed_via_github_app": null, "state_reason": null}