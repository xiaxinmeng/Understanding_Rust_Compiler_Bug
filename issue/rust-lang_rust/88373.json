{"url": "https://api.github.com/repos/rust-lang/rust/issues/88373", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88373/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88373/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88373/events", "html_url": "https://github.com/rust-lang/rust/issues/88373", "id": 980668308, "node_id": "MDU6SXNzdWU5ODA2NjgzMDg=", "number": 88373, "title": "Tracking Issue for tcplistener_into_incoming", "user": {"login": "piegamesde", "id": 14054505, "node_id": "MDQ6VXNlcjE0MDU0NTA1", "avatar_url": "https://avatars.githubusercontent.com/u/14054505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piegamesde", "html_url": "https://github.com/piegamesde", "followers_url": "https://api.github.com/users/piegamesde/followers", "following_url": "https://api.github.com/users/piegamesde/following{/other_user}", "gists_url": "https://api.github.com/users/piegamesde/gists{/gist_id}", "starred_url": "https://api.github.com/users/piegamesde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piegamesde/subscriptions", "organizations_url": "https://api.github.com/users/piegamesde/orgs", "repos_url": "https://api.github.com/users/piegamesde/repos", "events_url": "https://api.github.com/users/piegamesde/events{/privacy}", "received_events_url": "https://api.github.com/users/piegamesde/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-08-26T21:43:09Z", "updated_at": "2021-08-26T21:43:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\nFeature gate: `#![feature(tcplistener_into_incoming)]`\r\n\r\nThis is a tracking issue for #88339\r\n\r\nThe `TcpListener::incoming` method is really useful, however for some use cases the borrow it introduces is needlessly restricting. Thus, an owned variant is added.\r\n\r\n### Public API\r\n\r\n```rust\r\n// std::net\r\n\r\npub struct IntoIncoming;\r\n\r\nimpl Iterator<Item = io::Result<TcpStream>> for IntoIncoming;\r\n\r\nimpl TcpListener {\r\n    pub fn into_incoming(self) -> IntoIncoming;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: #88339\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- The `IntoIncoming` could provide methods that allow access to (or getting back) the `TcpListener`. I decided against it, but they could be added if there is a use case\r\n- IMO the `into_incoming` method should return an opaque `impl IntoIterator` so that `IntoIncoming` is not public API, but that would be inconsistent with the rest of `std`.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88373/timeline", "performed_via_github_app": null, "state_reason": null}