{"url": "https://api.github.com/repos/rust-lang/rust/issues/56952", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56952/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56952/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56952/events", "html_url": "https://github.com/rust-lang/rust/issues/56952", "id": 392160218, "node_id": "MDU6SXNzdWUzOTIxNjAyMTg=", "number": 56952, "title": "A type inference problem with struct fields and collect method", "user": {"login": "oligami", "id": 34646535, "node_id": "MDQ6VXNlcjM0NjQ2NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/34646535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oligami", "html_url": "https://github.com/oligami", "followers_url": "https://api.github.com/users/oligami/followers", "following_url": "https://api.github.com/users/oligami/following{/other_user}", "gists_url": "https://api.github.com/users/oligami/gists{/gist_id}", "starred_url": "https://api.github.com/users/oligami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oligami/subscriptions", "organizations_url": "https://api.github.com/users/oligami/orgs", "repos_url": "https://api.github.com/users/oligami/repos", "events_url": "https://api.github.com/users/oligami/events{/privacy}", "received_events_url": "https://api.github.com/users/oligami/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-18T13:38:08Z", "updated_at": "2022-03-22T10:48:29Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I found a type inference problem like below. You can check it in Rust Playground from link.\r\nIf it's possible, i would like to write code with less type annotation.\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=da38ac68e6aba30ab33c0ddc42ecdd3b\r\n\r\n```\r\n#![allow(unused)]\r\nstruct Foo {\r\n    vector: Vec<i32>,\r\n}\r\n\r\nfn main() {\r\n    let v1 = vec![1, 2, 3, 4];\r\n    \r\n    let v2 = v1.into_iter().map(|num| num + 1).collect();\r\n    \r\n    // enabling below code will require type annotation of v2 in above line.\r\n    // println!(\"v2 len: {}\", v2.len());\r\n    \r\n    let _foo = Foo {\r\n        vector: v2, // I thick compiler can determine type of v2 here.\r\n    };\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56952/timeline", "performed_via_github_app": null, "state_reason": null}