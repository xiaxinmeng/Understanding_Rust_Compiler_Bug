{"url": "https://api.github.com/repos/rust-lang/rust/issues/42633", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42633/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42633/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42633/events", "html_url": "https://github.com/rust-lang/rust/issues/42633", "id": 235593272, "node_id": "MDU6SXNzdWUyMzU1OTMyNzI=", "number": 42633, "title": "incr.comp.: Clarify compatibility of red/green evaluation and recovering from cycle errors", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-06-13T15:24:04Z", "updated_at": "2017-08-26T11:11:43Z", "closed_at": "2017-08-26T11:11:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I originally planned to describe the differences between the current query system and the future version that supports [red/green dependency tracking](https://github.com/rust-lang/rust/issues/42293) but while thinking about it, there's not too much of a difference when it comes to cycle errors:\r\n* The in-memory caches of the query system will not change in the future.\r\n* The [try_mark_green](https://gist.github.com/michaelwoerister/e278b4ad3eb88d61e19b7ab066c44b25#file-dep-graph-new-design-backup-rs-L196) step of red/green evaluation might `force` the evaluation of a query but that's no different from a regular query.\r\n* There's been talk about having to prevent the caching of intermediate results if those intermediate results arise from a query that turns out to be cyclic, because those intermediate results are \"tainted\". However, I don't see how one would get ahold of such an intermediate result (both in the current system and the future one) in the first place: If a query `A` starts a sub-query `B` and `B` starts a sub-sub-query `C`, which would invoke `A` again, then we would have to make sure that neither the results of `B` or `C` are cached. But since we are still in the middle of computing `B` and `C`, we don't have any result to cache anyway.\r\n\r\nThe main difference I see between the current query system and the red/green one is dependency tracking (and there the current system behaves a bit strangely, actually): When a query is started, a new `DepNode` is allocated and reads to that `DepNode` are registered as they occur. E.g., we let's say we have the following \"query trace\":\r\n```\r\nQueries execute in the order of their label:\r\n\r\n            1 <------------+\r\n            |              |\r\n    +-------+-------+      |\r\n    |       |       |      |\r\n    v       v       v      |\r\n    2       4   +-- 5 --+  |\r\n    |           |       |  |\r\n    v           v       v  |\r\n    3           6       7--+\r\n```\r\nThe dependency graph would look exactly like that, cycle and all.\r\n\r\nIn the red/green system, a `DepNode` would only be allocated after the successful evaluation of a query. Consequently, we would not end up with the dep-graph shown above. But we still want to record dependencies to those sub-queries because their result influenced what `1` evaluated to after recovering from the cycle. I propose to just merge all reads into the parent query when encountering a cycle error, effectively merging all reads into the root of the cycle. The dep-graph from above would then look like this:\r\n\r\n```\r\n            1\r\n            | \r\n    +-------+-------+\r\n    |       |       |\r\n    v       v       v\r\n    2       4       6\r\n    |\r\n    v\r\n    3\r\n```\r\nThere are no `DepNodes` for `5` and `7` (they never completed) but we don't lose the information that `6` has been read, which is important, because the result of `6` might also have caused a trace without cycle.\r\n\r\nI still think that recovering from cycle errors is dubious but at least the situation should not get worse with the new system.\r\n\r\nComments? @eddyb @nikomatsakis @rust-lang/compiler ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42633/timeline", "performed_via_github_app": null, "state_reason": "completed"}