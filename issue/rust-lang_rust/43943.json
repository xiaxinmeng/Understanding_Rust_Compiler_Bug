{"url": "https://api.github.com/repos/rust-lang/rust/issues/43943", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43943/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43943/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43943/events", "html_url": "https://github.com/rust-lang/rust/issues/43943", "id": 250998311, "node_id": "MDU6SXNzdWUyNTA5OTgzMTE=", "number": 43943, "title": "Type mismatch with generic parameter returns less than helpful errors", "user": {"login": "mqudsi", "id": 606923, "node_id": "MDQ6VXNlcjYwNjkyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/606923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mqudsi", "html_url": "https://github.com/mqudsi", "followers_url": "https://api.github.com/users/mqudsi/followers", "following_url": "https://api.github.com/users/mqudsi/following{/other_user}", "gists_url": "https://api.github.com/users/mqudsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mqudsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mqudsi/subscriptions", "organizations_url": "https://api.github.com/users/mqudsi/orgs", "repos_url": "https://api.github.com/users/mqudsi/repos", "events_url": "https://api.github.com/users/mqudsi/events{/privacy}", "received_events_url": "https://api.github.com/users/mqudsi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-17T16:19:00Z", "updated_at": "2020-01-22T19:07:04Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When a type does not match a generic parameter (I'm not sure if it's treated differently if it's because a generic constraint failed or because a previous usage dictated a particular variant of that generic), the resulting error message is not helpful because it seems to indicate that everything is OK.\r\n\r\nAs an example:\r\n\r\n```rust\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:80:23\r\n   |\r\n80 |             return Ok(response);\r\n   |                       ^^^^^^^^ expected type parameter, found struct `std::io::Cursor`\r\n   |\r\n   = note: expected type `tiny_http::Response<R>`\r\n              found type `tiny_http::Response<std::io::Cursor<std::vec::Vec<u8>>>`\r\n   = help: here are some functions which might fulfill your needs:\r\n           - .with_data(...)\r\n           - .with_header(...)\r\n           - .with_status_code(...)\r\n```\r\n\r\nthe method in question was declared as\r\n\r\n```rust\r\nfn send_email<R>(req: &mut Request) -> Result<Response<R>, String>\r\n    where R: std::io::Read\r\n```\r\n\r\nI believe the compiler message should at least indicate the constraints on `R`, because as it currently reads, `tiny_http::Response<std::io::Cursor<std::vec::Vec<u8>>>` _is_ a valid form of `tiny_http::Response<R>` for `R=std::io::Cursor<std::vec::Vec<u8>>`", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43943/timeline", "performed_via_github_app": null, "state_reason": null}