{"url": "https://api.github.com/repos/rust-lang/rust/issues/96750", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96750/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96750/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96750/events", "html_url": "https://github.com/rust-lang/rust/issues/96750", "id": 1227295271, "node_id": "I_kwDOAAsO6M5JJwon", "number": 96750, "title": "GAT with HRTB yields weird inference errors.", "user": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 5260993605, "node_id": "LA_kwDOAAsO6M8AAAABOZRkRQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/fixed-by-next-solver", "name": "fixed-by-next-solver", "color": "93CE7D", "default": false, "description": "Fixed by the next-generation trait solver, `-Ztrait-solver=next`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-05-06T00:17:35Z", "updated_at": "2023-03-13T16:37:25Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code: ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=c6770bcd61c964dafc6d39bf6f0baf60))\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\nuse std::marker::PhantomData;\r\n\r\ntrait AsyncFn<Arg> { type Output; }\r\ntrait RequestFamily { type Type<'a>; }\r\ntrait Service {}\r\n\r\nstruct MyFn;\r\nimpl AsyncFn<String> for MyFn { type Output = (); }\r\n\r\nimpl RequestFamily for String { type Type<'a> = String; }\r\n\r\nstruct ServiceFromAsyncFn<F, Req>(F, PhantomData<Req>);\r\n\r\nimpl<F, Req, O> Service for ServiceFromAsyncFn<F, Req>\r\nwhere\r\n    Req: RequestFamily,\r\n    F: AsyncFn<Req>,\r\n    F: for<'a> AsyncFn<Req::Type<'a>, Output = O>,\r\n{\r\n}\r\n\r\nfn assert_service() -> impl Service {\r\n    ServiceFromAsyncFn(MyFn, PhantomData)\r\n}\r\n```\r\nIt fails type inference with the following error:\r\n```rust\r\nerror[E0282]: type annotations needed\r\n  --> src/lib.rs:23:24\r\n   |\r\n23 | fn assert_service() -> impl Service {\r\n   |                        ^^^^^^^^^^^^ cannot infer type for type parameter `O`\r\n```\r\n\r\nThis is super weird because type paramters that don't appear in `Self` type of the impl are not expected to fail inference.\r\nSurprisingly, removing `O` makes it pass:\r\n```diff\r\n-impl<F, Req, O> Service for ServiceFromAsyncFn<F, Req>\r\n+impl<F, Req> Service for ServiceFromAsyncFn<F, Req>\r\n where\r\n     Req: RequestFamily,\r\n     F: AsyncFn<Req>,\r\n-    F: for<'a> AsyncFn<Req::Type<'a>, Output = O>,\r\n+    F: for<'a> AsyncFn<Req::Type<'a>>,\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nNightly version: 1.62.0-nightly\r\n\r\n(2022-05-03 e1b71feb592ba6480568)\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n\r\n@rustbot label F-generic_associated_types T-compiler A-traits A-inference A-lifetimes\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96750/timeline", "performed_via_github_app": null, "state_reason": null}