{"url": "https://api.github.com/repos/rust-lang/rust/issues/78045", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78045/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78045/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78045/events", "html_url": "https://github.com/rust-lang/rust/issues/78045", "id": 723734752, "node_id": "MDU6SXNzdWU3MjM3MzQ3NTI=", "number": 78045, "title": "Strange stack overflow", "user": {"login": "crone123", "id": 47423202, "node_id": "MDQ6VXNlcjQ3NDIzMjAy", "avatar_url": "https://avatars.githubusercontent.com/u/47423202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crone123", "html_url": "https://github.com/crone123", "followers_url": "https://api.github.com/users/crone123/followers", "following_url": "https://api.github.com/users/crone123/following{/other_user}", "gists_url": "https://api.github.com/users/crone123/gists{/gist_id}", "starred_url": "https://api.github.com/users/crone123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crone123/subscriptions", "organizations_url": "https://api.github.com/users/crone123/orgs", "repos_url": "https://api.github.com/users/crone123/repos", "events_url": "https://api.github.com/users/crone123/events{/privacy}", "received_events_url": "https://api.github.com/users/crone123/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-10-17T11:18:17Z", "updated_at": "2020-10-17T13:02:32Z", "closed_at": "2020-10-17T13:02:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse std::io::{Read,BufRead,BufReader};\r\npub trait StreamDigest\r\n{\r\n    fn update_data(&mut self, data: &[u8]);\r\n    fn finish(self) -> Vec<u8>;\r\n}\r\npub trait StreamHash: StreamDigest + Sized\r\n{\r\n    fn hash_stream<R: Read>(mut self, stream: R) -> Result<String, String>\r\n    {\r\n        println!(\"IN HASH STREAM !\");\r\n        let mut stream = BufReader::new(stream);\r\n        let mut buffer = [0u8;4*1024*1024];// Buffer of 4Mio\r\n        loop\r\n        {\r\n            println!(\"LOOP !\");\r\n            let count = match stream.read(&mut buffer)\r\n            {\r\n                Ok(n) => n,\r\n                Err(e) =>\r\n                {\r\n                    return Err(e.to_string());\r\n                }\r\n            };\r\n            if count == 0\r\n            {\r\n                println!(\"BREAK !\");\r\n                break;\r\n            }\r\n            println!(\"UPDATE !\");\r\n            self.update_data(&buffer[..count]);\r\n        }\r\n        println!(\"FINISH !\");\r\n        let v = self.finish();\r\n        let mut s = String::new();\r\n        for i in v\r\n        {\r\n            s.push_str(&format!(\"{:x}\", i));\r\n        }\r\n        Ok(s)\r\n    }\r\n}\r\n\r\nimpl<T: digest::Digest> StreamDigest for T\r\n{\r\n    fn update_data(&mut self, data: &[u8])\r\n    {\r\n        println!(\"StreamDigest update !\");\r\n        digest::Digest::update(self, data);\r\n    }\r\n    fn finish(self) -> Vec<u8>\r\n    {\r\n        println!(\"StreamDigest finish !\");\r\n        digest::Digest::finalize(self).to_vec()\r\n    }\r\n}\r\n\r\n\r\nimpl<T: StreamDigest + Sized> StreamHash for T {}\r\n\r\n\r\n#[test]\r\nfn test_sha3()\r\n{\r\n    println!(\"TEST SHA3 !\");\r\n    let sha3 = sha3::Sha3_224::default();\r\n    println!(\"CALL HASH STREAM\");\r\n    let hash = sha3.hash_stream(std::fs::File::open(\"reference_file.txt\").unwrap()).unwrap();\r\n    println!(\"{}\", hash);\r\n    assert_eq!(\"affa21aa40652080b2b8d2deb293fc4086a15d94f04df93df76bbf43\", &hash);\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen: Computing a sha3, display it, and assert_eq! the expected result.\r\n\r\nInstead, this happened: Stack overflow on the first line of stream_hash, unable get any line of this method to be run.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.49.0-nightly (e3051d8c2 2020-10-16)\r\nbinary: rustc\r\ncommit-hash: e3051d8c24467b54c81da9d9ad70a3e82e106ec1\r\ncommit-date: 2020-10-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.49.0-nightly\r\nLLVM version: 11.0\r\n\r\n```\r\n(Same problem on 1.47 nightly)\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nrunning 1 test\r\nTEST SHA3 !\r\nCALL HASH STREAM\r\n\r\nthread 'streamhash::test_sha3' has overflowed its stack\r\nfatal runtime error: stack overflow\r\nerror: test failed, to rerun pass '--bin arrs'\r\n\r\nCaused by:\r\n  process didn't exit successfully: `/home/valentin/git/arrs/target/debug/deps/arrs-dd66f5583bcd18f8 test_sha3 --nocapture` (signal: 6, SIGABRT: process abort signal)\r\n\r\n```\r\n\r\nWith gdb:\r\n```\r\nThread 8 \"streamhash::tes\" received signal SIGSEGV, Segmentation fault.\r\n[Switching to Thread 0x7ffff7bfc700 (LWP 227448)]\r\n0x000055555561d291 in __rust_probestack ()\r\n(gdb) bt\r\n#0  0x000055555561d291 in __rust_probestack ()\r\n#1  0x000055555556a1da in arrs::streamhash::StreamHash::hash_stream (self=..., stream=...) at src/streamhash/mod.rs:9\r\n#2  0x0000555555583f47 in arrs::streamhash::test_sha3 () at src/streamhash/mod.rs:72\r\n#3  0x000055555556e2fa in arrs::streamhash::test_sha3::{{closure}} () at src/streamhash/mod.rs:67\r\n#4  0x0000555555571bae in core::ops::function::FnOnce::call_once ()\r\n    at /home/valentin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:227\r\n#5  0x00005555555c6db3 in core::ops::function::FnOnce::call_once () at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/core/src/ops/function.rs:227\r\n#6  test::__rust_begin_short_backtrace () at library/test/src/lib.rs:516\r\n#7  0x00005555555c52aa in <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once ()\r\n    at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/alloc/src/boxed.rs:1042\r\n#8  <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once () at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/std/src/panic.rs:308\r\n#9  std::panicking::try::do_call () at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/std/src/panicking.rs:381\r\n#10 std::panicking::try () at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/std/src/panicking.rs:345\r\n#11 std::panic::catch_unwind () at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/std/src/panic.rs:382\r\n#12 test::run_test_in_process () at library/test/src/lib.rs:543\r\n#13 test::run_test::run_test_inner::{{closure}} () at library/test/src/lib.rs:449\r\n#14 0x000055555559f096 in std::sys_common::backtrace::__rust_begin_short_backtrace ()\r\n    at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/std/src/sys_common/backtrace.rs:125\r\n#15 0x00005555555a4155 in std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} () at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/std/src/thread/mod.rs:464\r\n#16 <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once () at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/std/src/panic.rs:308\r\n#17 std::panicking::try::do_call () at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/std/src/panicking.rs:381\r\n#18 std::panicking::try () at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/std/src/panicking.rs:345\r\n#19 std::panic::catch_unwind () at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/std/src/panic.rs:382\r\n#20 std::thread::Builder::spawn_unchecked::{{closure}} () at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/std/src/thread/mod.rs:463\r\n#21 core::ops::function::FnOnce::call_once{{vtable-shim}} () at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/core/src/ops/function.rs:227\r\n#22 0x00005555555fe6ea in <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once ()\r\n    at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/alloc/src/boxed.rs:1042\r\n#23 <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once () at /rustc/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library/alloc/src/boxed.rs:1042\r\n#24 std::sys::unix::thread::Thread::new::thread_start () at library/std/src/sys/unix/thread.rs:89\r\n#25 0x00007ffff7f4f609 in start_thread (arg=<optimized out>) at pthread_create.c:477\r\n#26 0x00007ffff7d21293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n(gdb) \r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n\r\nI was unable to create a minimal code that reproduce this issue, but I didn't see why this happen. I tried to implement a trait that automatically add a way to hash Read (for large files).\r\n\r\nAny idea?\r\nThank you :)", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78045/timeline", "performed_via_github_app": null, "state_reason": "completed"}