{"url": "https://api.github.com/repos/rust-lang/rust/issues/90032", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90032/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90032/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90032/events", "html_url": "https://github.com/rust-lang/rust/issues/90032", "id": 1029661792, "node_id": "I_kwDOAAsO6M49X2Rg", "number": 90032, "title": "Missed optimization for unused zero-initialized vectors", "user": {"login": "Herohtar", "id": 10427164, "node_id": "MDQ6VXNlcjEwNDI3MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/10427164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Herohtar", "html_url": "https://github.com/Herohtar", "followers_url": "https://api.github.com/users/Herohtar/followers", "following_url": "https://api.github.com/users/Herohtar/following{/other_user}", "gists_url": "https://api.github.com/users/Herohtar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Herohtar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Herohtar/subscriptions", "organizations_url": "https://api.github.com/users/Herohtar/orgs", "repos_url": "https://api.github.com/users/Herohtar/repos", "events_url": "https://api.github.com/users/Herohtar/events{/privacy}", "received_events_url": "https://api.github.com/users/Herohtar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-10-18T22:31:09Z", "updated_at": "2022-07-26T22:20:46Z", "closed_at": "2022-07-26T22:20:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Optimization doesn't seem to happen for unused zero-initialized vectors.\r\n\r\nIf I write a method that initializes a `Vec` with a non-zero value and call it a couple of times from `main()`, then when I build with `--release` (`-O3`) the compiler optimizes everything away into effectively a no-op:\r\n\r\n### Code\r\n```rust\r\nfn allocate() {\r\n    let _a = vec![1; 100];\r\n}\r\n\r\npub fn main() {\r\n    allocate();\r\n    allocate();\r\n}\r\n```\r\n\r\n### Output\r\n```text\r\nexample::main:\r\n        ret\r\n```\r\n[Godbolt link](https://godbolt.org/z/e9d94xWc5)\r\n\r\nHowever, if I instead initialize it with *zero*, the result is drastically different:\r\n\r\n### Code\r\n```rust\r\nfn allocate() {\r\n    let _a = vec![0; 100];\r\n}\r\n\r\npub fn main() {\r\n    allocate();\r\n    allocate();\r\n}\r\n```\r\n\r\n### Output\r\n```text\r\nexample::main:\r\n        push    rax\r\n        mov     edi, 400\r\n        mov     esi, 4\r\n        call    qword ptr [rip + __rust_alloc_zeroed@GOTPCREL]\r\n        test    rax, rax\r\n        je      .LBB0_2\r\n        mov     esi, 400\r\n        mov     edx, 4\r\n        mov     rdi, rax\r\n        call    qword ptr [rip + __rust_dealloc@GOTPCREL]\r\n        mov     edi, 400\r\n        mov     esi, 4\r\n        call    qword ptr [rip + __rust_alloc_zeroed@GOTPCREL]\r\n        test    rax, rax\r\n        je      .LBB0_2\r\n        mov     esi, 400\r\n        mov     edx, 4\r\n        mov     rdi, rax\r\n        pop     rax\r\n        jmp     qword ptr [rip + __rust_dealloc@GOTPCREL]\r\n.LBB0_2:\r\n        mov     edi, 400\r\n        mov     esi, 4\r\n        call    qword ptr [rip + alloc::alloc::handle_alloc_error@GOTPCREL]\r\n        ud2\r\n```\r\n\r\n[Godbolt link](https://godbolt.org/z/aaehMM3Wq)\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.57.0-nightly (4e89811b4 2021-10-16)\r\nbinary: rustc\r\ncommit-hash: 4e89811b46323f432544f9c4006e40d5e5d7663f\r\ncommit-date: 2021-10-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.57.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\nI tried out a few different `rustc` versions on Godbolt and it seems the behavior started in `1.18.0` -- before that, the zero-initialized code gets optimized away as well.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90032/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0, "rocket": 1, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90032/timeline", "performed_via_github_app": null, "state_reason": "completed"}