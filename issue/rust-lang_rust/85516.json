{"url": "https://api.github.com/repos/rust-lang/rust/issues/85516", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85516/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85516/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85516/events", "html_url": "https://github.com/rust-lang/rust/issues/85516", "id": 896981995, "node_id": "MDU6SXNzdWU4OTY5ODE5OTU=", "number": 85516, "title": "\"not general enough\" error points to the async spawn site as opposed to the offending code", "user": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-05-20T15:29:08Z", "updated_at": "2021-05-25T15:16:29Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code: \r\n\r\nPlayground: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=44a059128482832f4b01a5a4897fa08d\r\n(I'm sorry I couldn't minimize more)\r\n\r\n```rust\r\nuse anyhow::Result;\r\nuse futures::stream::{iter, StreamExt};\r\nuse std::collections::{BTreeMap, BTreeSet};\r\n\r\n#[derive(Debug, PartialEq, Eq)]\r\npub struct Change<'a> {\r\n    key: &'a String,\r\n}\r\n\r\n#[derive(Default)]\r\npub struct Processor {\r\n    data: BTreeMap<String, String>,\r\n    base_data: BTreeMap<String, String>,\r\n}\r\n\r\nimpl Processor {\r\n    async fn something_async(&self, s: &String) {}\r\n\r\n    async fn perform_scheduling(&mut self) {\r\n        let paired_data: Vec<(&String, &String, Option<&String>)> = self\r\n            .base_data\r\n            .iter()\r\n            .map(|(k, v)| (k, v, self.data.get(k)))\r\n            .collect();\r\n\r\n        let changes: Vec<Change> = paired_data\r\n            .iter()\r\n            .filter_map(|(k, v, d_v)| Some(vec![Change { key: k }]))\r\n            .flatten()\r\n            .collect();\r\n\r\n        // do non-mutable async work before we do mutable work later\r\n        let this: &Processor = &self;\r\n        let changes_stream = iter(changes)\r\n            .map(|ch| async move {\r\n                // immutable access to data\r\n                let v = this.data.get(ch.key);\r\n                this.something_async(ch.key).await;\r\n                ch.key.clone()\r\n            })\r\n            .buffer_unordered(10);\r\n\r\n        // then do mutations\r\n        let mutations: Vec<_> = changes_stream.collect().await;\r\n        for mutation in mutations {\r\n            self.data\r\n                .entry(mutation)\r\n                .or_default()\r\n                .make_ascii_uppercase();\r\n        }\r\n    }\r\n\r\n    pub async fn schedule(mut self) -> Result<()> {\r\n        loop {\r\n            self.perform_scheduling().await\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let runtime = tokio::runtime::Runtime::new().unwrap();\r\n\r\n    runtime.spawn(Processor::default().schedule());\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror: implementation of `FnOnce` is not general enough\r\n  --> src/main.rs:63:13\r\n   |\r\n63 |     runtime.spawn(Processor::default().schedule());\r\n   |             ^^^^^ implementation of `FnOnce` is not general enough\r\n   |\r\n   = note: closure with signature `fn(Change<'0>) -> impl futures::Future` must implement `FnOnce<(Change<'1>,)>`, for any two lifetimes `'0` and `'1`...\r\n   = note: ...but it actually implements `FnOnce<(Change<'_>,)>`\r\n```\r\n\r\nnote that Before 1.52.1 (in this case 1.50), the error message is worse:\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:62:13\r\n   |\r\n62 |     runtime.spawn(Processor::default().schedule());\r\n   |             ^^^^^ one type is more general than the other\r\n   |\r\n   = note: expected type `FnOnce<(Change<'_>,)>`\r\n              found type `FnOnce<(Change<'_>,)>`\r\n```\r\n\r\nNotes:\r\n\r\nWhen I first encountered this error (the 1.50 version), I didn't remember that fn-trait args are tuples, and I was convinced that I had NO tuples in my code as written, so couldn't find the error, even manually by reading the code.\r\n\r\nIn both error cases, the better 1.52 one and worse 1.50 version, I couldn't really figure out how to resolve, so I just moved the String clone (it wasn't a string at work, but thats a simple type I used as a placeholder) into the first iterator and out of the buffered stream iterator\r\n\r\nMy guess is that my fairly-spicy use of a immutable reborrow of self to resolve this lifetime issue: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=48dbe41cb31212353d874de4fb63d9e8 may have something to do with this. I *believe* this ownership error is because I am forced to use an `async move` block to move `ch` into the future, which also tries to move the `&mut self`?\r\n\r\nMy 2 questions are:\r\n1. can this error point to the correct site of the problem\r\n2. is there a way to resolve this error without moving the k clone into the first iterator\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85516/reactions", "total_count": 8, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85516/timeline", "performed_via_github_app": null, "state_reason": null}