{"url": "https://api.github.com/repos/rust-lang/rust/issues/102274", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102274/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102274/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102274/events", "html_url": "https://github.com/rust-lang/rust/issues/102274", "id": 1385107825, "node_id": "I_kwDOAAsO6M5SjxFx", "number": 102274, "title": "Function operating on arrays performs a lot worse for arrays of length 2", "user": {"login": "Canleskis", "id": 91223490, "node_id": "MDQ6VXNlcjkxMjIzNDkw", "avatar_url": "https://avatars.githubusercontent.com/u/91223490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Canleskis", "html_url": "https://github.com/Canleskis", "followers_url": "https://api.github.com/users/Canleskis/followers", "following_url": "https://api.github.com/users/Canleskis/following{/other_user}", "gists_url": "https://api.github.com/users/Canleskis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Canleskis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Canleskis/subscriptions", "organizations_url": "https://api.github.com/users/Canleskis/orgs", "repos_url": "https://api.github.com/users/Canleskis/repos", "events_url": "https://api.github.com/users/Canleskis/events{/privacy}", "received_events_url": "https://api.github.com/users/Canleskis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3425147156, "node_id": "LA_kwDOAAsO6M7MJ5kU", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-array", "name": "A-array", "color": "f7e101", "default": false, "description": "Area: [T; N]"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-09-25T17:41:02Z", "updated_at": "2023-03-07T05:26:56Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hello, after some [discussion](https://stackoverflow.com/questions/73839861/peculiar-performance-variance-with-small-arrays) on Stack Overflow, I was suggested to file an issue here.\r\n\r\nThe following function performs unexpectedly poorly with N = 2.\r\n```rust\r\nfn fold<const N: usize>(v: Vec<Array<N>>) -> Vec<Array<N>> {\r\n    let result = v.iter().map(|a1| {\r\n        v.iter().fold(Array::default(), |acc, a2| {\r\n            let d = *a2 - *a1;\r\n\r\n            acc + d\r\n        })\r\n    });\r\n\r\n    result.collect()\r\n}\r\n```\r\nArray is a simple wrapper implementing `Add` and `Sub` around an array of `f32`s. The results are the same without that wrapper.\r\n\r\nHere is a graph generated with criterion of the benchmark of that function:\r\n\r\n![xNzO9](https://user-images.githubusercontent.com/91223490/192156007-dfbae35d-8884-41ec-838f-cd80b5b0d472.png)\r\n\r\nSomeone on the Stack Overflow discussion suggested that this was because:\r\n*\"The shl, shr and or operations on rdx and rsi suggest that for N = 2 the two floats are stored in one 64 bit general purpose register, whereas in the other cases the value of a1 is persisted in N separate xmm registers\".*\r\nAnother user suggested that this wrong optimization was caused by opt-level=3, so on the LLVM side.\r\n\r\nHere is the [assembly code](https://rust.godbolt.org/z/9fbGjoPrx) where a user marked important areas.\r\n\r\nHere is a [repository](https://github.com/Canleskis/benchmark-array) of the full code for the benchmark.\r\n\r\nThis was observed both in stable and nightly.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102274/timeline", "performed_via_github_app": null, "state_reason": null}