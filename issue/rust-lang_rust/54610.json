{"url": "https://api.github.com/repos/rust-lang/rust/issues/54610", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54610/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54610/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54610/events", "html_url": "https://github.com/rust-lang/rust/issues/54610", "id": 364323428, "node_id": "MDU6SXNzdWUzNjQzMjM0Mjg=", "number": 54610, "title": "API user must import trait when API switches from Box<Trait> to impl Trait", "user": {"login": "hniksic", "id": 1078190, "node_id": "MDQ6VXNlcjEwNzgxOTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1078190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hniksic", "html_url": "https://github.com/hniksic", "followers_url": "https://api.github.com/users/hniksic/followers", "following_url": "https://api.github.com/users/hniksic/following{/other_user}", "gists_url": "https://api.github.com/users/hniksic/gists{/gist_id}", "starred_url": "https://api.github.com/users/hniksic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hniksic/subscriptions", "organizations_url": "https://api.github.com/users/hniksic/orgs", "repos_url": "https://api.github.com/users/hniksic/repos", "events_url": "https://api.github.com/users/hniksic/events{/privacy}", "received_events_url": "https://api.github.com/users/hniksic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-27T06:30:44Z", "updated_at": "2018-09-27T14:52:47Z", "closed_at": "2018-09-27T14:52:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While switching an API from returning `Box<Trait>` to returning `impl Trait` (it was using `Box` only to isolate the class implementing the trait), I noticed an incompatibility. The user of the API is now required to import the trait in order to call method defined by the trait, which slightly reduces the ergonomy of the API.\r\n\r\nTake this code, which compiles fine:\r\n\r\n```rust\r\nmod x {\r\n    use std::io::Write;\r\n\r\n    struct Opaque;\r\n\r\n    impl Write for Opaque {\r\n        fn write(&mut self, _: &[u8]) -> ::std::io::Result<usize> {\r\n            Ok(1)\r\n        }\r\n        fn flush(&mut self) -> ::std::io::Result<()> {\r\n            Ok(())\r\n        }\r\n    }\r\n\r\n    pub fn get_writer() -> Box<Write> {\r\n        Box::new(Opaque)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut writer = x::get_writer();\r\n    writer.write_all(b\"foo\").unwrap();\r\n}\r\n```\r\n\r\nNow, if we just change the return type from `Box<Write>` to `impl<Write>`, like this:\r\n\r\n```rust\r\nmod x {\r\n    use std::io::Write;\r\n\r\n    struct Opaque;\r\n\r\n    impl Write for Opaque {\r\n        fn write(&mut self, _: &[u8]) -> ::std::io::Result<usize> {\r\n            Ok(1)\r\n        }\r\n        fn flush(&mut self) -> ::std::io::Result<()> {\r\n            Ok(())\r\n        }\r\n    }\r\n\r\n    pub fn get_writer() -> impl Write {\r\n        Opaque\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut writer = x::get_writer();\r\n    writer.write_all(b\"foo\").unwrap();\r\n}\r\n```\r\n\r\nit no longer compiles:\r\n\r\n```\r\nrustc -O test2.rs \r\nerror[E0599]: no method named `write_all` found for type `impl std::io::Write` in the current scope\r\n  --> test2.rs:22:12\r\n   |\r\n22 |     writer.write_all(b\"foo\").unwrap();\r\n   |            ^^^^^^^^^\r\n   |\r\n   = help: items from traits can only be used if the trait is in scope\r\nhelp: the following trait is implemented but not in scope, perhaps add a `use` for it:\r\n   |\r\n1  | use std::io::Write;\r\n   |\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nWhile I can understand the problem, and know how to fix it on the caller side (just `use std::io::Write`), I am curious why the import was *not* required when returning a `Box`. Of course, switching the return is a backward incompatible change anyway (it would break code that explicitly typed `writer` as `Box<Write>`), but for simple usages it would be much nicer if the user could just call the method without explicitly importing the trait, as was possible previously.\r\n\r\nSo in this case switching from boxed return to `impl` return has slightly reduced the ergonomy of the API. Is there a way to prevent that?", "closed_by": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54610/timeline", "performed_via_github_app": null, "state_reason": "completed"}