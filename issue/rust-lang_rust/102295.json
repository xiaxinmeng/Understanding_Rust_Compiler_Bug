{"url": "https://api.github.com/repos/rust-lang/rust/issues/102295", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102295/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102295/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102295/events", "html_url": "https://github.com/rust-lang/rust/issues/102295", "id": 1385367054, "node_id": "I_kwDOAAsO6M5SkwYO", "number": 102295, "title": "Inlined function duplication across complex branches when `extern \"Rust\"` is used with LTO and `opt-level=\"s\"`", "user": {"login": "cr1901", "id": 6418027, "node_id": "MDQ6VXNlcjY0MTgwMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/6418027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cr1901", "html_url": "https://github.com/cr1901", "followers_url": "https://api.github.com/users/cr1901/followers", "following_url": "https://api.github.com/users/cr1901/following{/other_user}", "gists_url": "https://api.github.com/users/cr1901/gists{/gist_id}", "starred_url": "https://api.github.com/users/cr1901/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cr1901/subscriptions", "organizations_url": "https://api.github.com/users/cr1901/orgs", "repos_url": "https://api.github.com/users/cr1901/repos", "events_url": "https://api.github.com/users/cr1901/events{/privacy}", "received_events_url": "https://api.github.com/users/cr1901/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 55301954, "node_id": "MDU6TGFiZWw1NTMwMTk1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-Arm", "name": "O-Arm", "color": "6e6ec0", "default": false, "description": "Target: 32-bit Arm processors (armv6, armv7, thumb...), including 64-bit Arm in AArch32 state"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}, {"id": 2459791492, "node_id": "MDU6TGFiZWwyNDU5NzkxNDky", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lto", "name": "A-lto", "color": "f7e101", "default": false, "description": "Area: Link Time Optimization"}, {"id": 4434140250, "node_id": "LA_kwDOAAsO6M8AAAABCEucWg", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-msp430", "name": "O-msp430", "color": "6e6ec0", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-09-26T03:45:58Z", "updated_at": "2023-04-26T04:10:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Context\r\n\r\n**The example code I linked/described here is an MCVE. See Background For \"Real\" Applications section for details.**\r\n\r\n* Consider a Rust binary which calls a function `free(f)` within its `main()`. `free()` takes a closure `f` with a branch (`?`) as input, and in turn calls `f` and then a function called `release()`.\r\n* The Rust binary has a feature called `use-extern-cs`. When disabled, the body of both `free()` and `release()` are provided by an external crate called `critical`. When enabled, the `free()` function is provided by the main binary instead of `critical`, and _the `release()` function is marked as `extern \"Rust\"` in the main binary's source file._\r\n* Within the `critical` crate, the `release()` function may or may not be marked as `#[inline]`. This is controlled by the `critical/inline` feature.\r\n\r\n## Instructions\r\n\r\n1. If testing `msp430`, make sure the `msp430-elf-gcc` [toolchain](https://www.ti.com/tool/MSP430-GCC-OPENSOURCE) is installed. Optionally install [`just`](https://github.com/casey/just) for convenience.\r\n2. `git clone https://github.com/cr1901/msp430-size`. Use commit [b8ef905](https://github.com/cr1901/msp430-size/commit/b8ef9058596bf7cb2b1ea021aa2df1b76f44cc09) **specifically.**\r\n\r\n   Despite the name of the repo, this code works for `thumbv6m-none-eabi` as well; the behavior appears to be arch-agnostic.\r\n3. Make sure a nightly Rust toolchain is installed (for `-Zbuild-std=core`).\r\n4. Run the following command:\r\n    ```sh\r\n    cargo +nightly rustc --manifest-path=./test-cases/Cargo.toml --target=$TARGET --release -Zbuild-std=core --example=critical --features=$FEATURES -- --emit=obj=target/$TARGET/release/examples/critical.o,llvm-ir=target/$TARGET/release/examples/critical.ll,asm=target/$TARGET/release/examples/critical.s\r\n    ```\r\n\r\n    where:\r\n    * `$TARGET`: either `msp430-none-elf` or `thumbv6m-none-eabi`.\r\n    * `$FEATURES`: empty, `use-extern-cs`, `critical/inline`, or `use-extern-cs,critical/inline`\r\n5. Examine the output LLVM, assembly, and object/ELF files with `objdump` and look for a series of ten `nop`s once or multiple times. Each `nop` sled represents a call to `release`.\r\n\r\n## Expected Behavior\r\n\r\nThe body of `release` appears once for the single call to `free()`, regardless of which combinations of features are enabled (including none).\r\n\r\n## Actual Behavior\r\n\r\nThe body of `release` appears twice in the single call to `free()` for all combinations of features, except for `--features=critical/inline`.\r\n\r\n## Other Hints\r\n* Sometimes I don't need the `#[inline]` attribute to prevent `release`'s body from being duplicated. However, I could not translate this behavior well from my real application to MCVE. One way that I found works is to remove the `extern \"Rust\" fn release()` declaration, and paste the `critical::internal::release()` impl directly in the main source file.\r\n* The `extern \"Rust\"` declaration seems to prevent `#[inline]` hints from working at all. \r\n* If `rustc` decides to duplicate `release`, sometimes `rustc` will inline one call of `release` into `free`, but not the other.\r\n* `release` duplication appears in the LLVM files emitted by `rustc`.\r\n\r\n## Background For \"Real\" Applications\r\n\r\nThe embedded Rust community has started to standardize around a pluggable `critical-section` [crate](https://github.com/rust-embedded/critical-section). The `critical-section` crate by necessity marks some functions as `extern \"Rust\"` and defers to other crates to define them. Specifically, the `critical_section::free(f)` function takes a closure `f()` and calls in order (args omitted):\r\n\r\n1. `extern \"Rust\" acquire()`\r\n2. `f()`\r\n3. `extern \"Rust\" release()`\r\n\r\nThe crate doesn't define any new functionality for embedded Rust applications; it rather changes how existing functionality ([critical sections](https://en.wikipedia.org/wiki/Critical_section)) is implemented. _In principle, the crate should be drop-in to existing embedded Rust applications._\r\n\r\nWhen I transitioned [some](https://github.com/cr1901/AT2XT) embedded Rust code to use the `critical-section` crate, I noticed marked size increases in the `.text` section (1992 bytes => 2048+ bytes- no longer fits) due to new overhead from how `critical_section::free(f)` is inlined in my main application's functions. Specifically, _if the closure `f` to `critical_section::free(f)` has a sufficiently complex branch, `rustc` will duplicate the body of `release` across both sides of the branch, even when `lto=\"fat\"` and `opt-level=\"s\"`._\r\n\r\nCalling `critical_section::free()` is essential for sharing non-atomic data between interrupts/threads in a bare-metal application. To minimize interrupt latency/maximize the amount of work that can be done, **the size/speed overhead these calls should be kept as small as possible**. I don't understand why Rust is unable to inline calls to `critical_section::free(f)` without duplicating the body of `release` (_when `lto=\"fat\"` and `codegen-units=1` is enabled_), regardless of\r\nthe following scenarios:\r\n \r\n 1. `acquire()`, `release()`, and `free()` are all provided inline by the main binary.\r\n 2. `acquire()`, `release()`, and `free()` are all provided by the same crate (via `use` statements no `extern \"Rust\"`).\r\n 3. `free()` is provided by one crate (via `use`), `acquire()` and `release()` are provided by another (via `use`).\r\n 4. `free()` is provided by one crate (via `use`), `extern \"Rust\" acquire()` and `extern \"Rust\" release()` are provided by another crate.\r\n\r\nFor the MCVE the body of `release` is exaggerated; actual size difference will vary depending on application. From my own testing, real `thumbv6m-none-eabi` applications have the duplication, but on average are affected less than `msp430-none-elf`.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102295/reactions", "total_count": 8, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 8}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102295/timeline", "performed_via_github_app": null, "state_reason": null}