{"url": "https://api.github.com/repos/rust-lang/rust/issues/71861", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71861/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71861/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71861/events", "html_url": "https://github.com/rust-lang/rust/issues/71861", "id": 611501554, "node_id": "MDU6SXNzdWU2MTE1MDE1NTQ=", "number": 71861, "title": "vec macro into_boxed codegen regression", "user": {"login": "RustyYato", "id": 16103364, "node_id": "MDQ6VXNlcjE2MTAzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/16103364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RustyYato", "html_url": "https://github.com/RustyYato", "followers_url": "https://api.github.com/users/RustyYato/followers", "following_url": "https://api.github.com/users/RustyYato/following{/other_user}", "gists_url": "https://api.github.com/users/RustyYato/gists{/gist_id}", "starred_url": "https://api.github.com/users/RustyYato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RustyYato/subscriptions", "organizations_url": "https://api.github.com/users/RustyYato/orgs", "repos_url": "https://api.github.com/users/RustyYato/repos", "events_url": "https://api.github.com/users/RustyYato/events{/privacy}", "received_events_url": "https://api.github.com/users/RustyYato/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1791937891, "node_id": "MDU6TGFiZWwxNzkxOTM3ODkx", "url": "https://api.github.com/repos/rust-lang/rust/labels/ICEBreaker-Cleanup-Crew", "name": "ICEBreaker-Cleanup-Crew", "color": "74cc28", "default": false, "description": "Helping to \"clean up\" bugs with minimal examples and bisections"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-05-03T20:34:58Z", "updated_at": "2020-08-21T20:08:25Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a regression from stable 1.42.0 to the latest beta & nightly\r\n\r\nfound because of this: https://internals.rust-lang.org/t/more-efficient-boxed-slice-creation/12271\r\n\r\n```rust\r\npub fn bar2(n: usize) -> Box<[u32]> {\r\n    vec![0; n].into_boxed_slice()\r\n}\r\n```\r\n\r\nI think the regression happened because of a missed optimization to inline `alloc::raw_vec::RawVec<T,A>::allocate_in::{{closure}}`, so it generates unnecessary panic handlers\r\n\r\n[stable](https://rust.godbolt.org/z/uSaaEr)\r\n\r\n```asm\r\nalloc::raw_vec::RawVec<T,A>::allocate_in::{{closure}}:\r\n        push    rax\r\n        call    qword ptr [rip + alloc::raw_vec::capacity_overflow@GOTPCREL]\r\n        ud2\r\n\r\nexample::bar2:\r\n        push    r14\r\n        push    rbx\r\n        push    rax\r\n        mov     ecx, 4\r\n        mov     rax, rdi\r\n        mul     rcx\r\n        jo      .LBB1_5\r\n        mov     rbx, rdi\r\n        mov     r14, rax\r\n        test    rax, rax\r\n        je      .LBB1_4\r\n        mov     esi, 4\r\n        mov     rdi, r14\r\n        call    qword ptr [rip + __rust_alloc_zeroed@GOTPCREL]\r\n        test    rax, rax\r\n        je      .LBB1_6\r\n        mov     rcx, rax\r\n.LBB1_4:\r\n        mov     rax, rcx\r\n        mov     rdx, rbx\r\n        add     rsp, 8\r\n        pop     rbx\r\n        pop     r14\r\n        ret\r\n.LBB1_5:\r\n        call    alloc::raw_vec::RawVec<T,A>::allocate_in::{{closure}}\r\n        ud2\r\n.LBB1_6:\r\n        mov     esi, 4\r\n        mov     rdi, r14\r\n        call    qword ptr [rip + alloc::alloc::handle_alloc_error@GOTPCREL]\r\n        ud2\r\n```\r\n[nightly](https://rust.godbolt.org/z/KkhBH_)\r\n\r\n```asm\r\ncore::ptr::drop_in_place:\r\n        mov     rsi, qword ptr [rdi + 8]\r\n        test    rsi, rsi\r\n        je      .LBB0_2\r\n        shl     rsi, 2\r\n        test    rsi, rsi\r\n        je      .LBB0_2\r\n        mov     rdi, qword ptr [rdi]\r\n        mov     edx, 4\r\n        jmp     qword ptr [rip + __rust_dealloc@GOTPCREL]\r\n.LBB0_2:\r\n        ret\r\n\r\nalloc::raw_vec::RawVec<T,A>::allocate_in::{{closure}}:\r\n        push    rax\r\n        call    qword ptr [rip + alloc::raw_vec::capacity_overflow@GOTPCREL]\r\n        ud2\r\n\r\nalloc::raw_vec::RawVec<T,A>::allocate_in::{{closure}}:\r\n        push    rax\r\n        mov     rax, qword ptr [rdi]\r\n        mov     rsi, qword ptr [rdi + 8]\r\n        mov     rdi, rax\r\n        call    qword ptr [rip + alloc::alloc::handle_alloc_error@GOTPCREL]\r\n        ud2\r\n\r\nexample::bar2:\r\n        push    r15\r\n        push    r14\r\n        push    rbx\r\n        sub     rsp, 32\r\n        mov     ecx, 4\r\n        xor     esi, esi\r\n        mov     rax, rdi\r\n        mul     rcx\r\n        mov     rbx, rax\r\n        setno   al\r\n        jo      .LBB3_18\r\n        mov     r14, rdi\r\n        mov     sil, al\r\n        shl     rsi, 2\r\n        mov     qword ptr [rsp + 8], rbx\r\n        mov     qword ptr [rsp + 16], rsi\r\n        test    rbx, rbx\r\n        je      .LBB3_3\r\n        mov     rdi, rbx\r\n        call    qword ptr [rip + __rust_alloc_zeroed@GOTPCREL]\r\n        mov     rsi, rax\r\n.LBB3_3:\r\n        test    rsi, rsi\r\n        je      .LBB3_19\r\n        mov     rax, rbx\r\n        shr     rax, 2\r\n        mov     qword ptr [rsp + 8], rsi\r\n        mov     qword ptr [rsp + 16], rax\r\n        mov     qword ptr [rsp + 24], r14\r\n        cmp     rax, r14\r\n        je      .LBB3_15\r\n        jb      .LBB3_10\r\n        test    rbx, rbx\r\n        je      .LBB3_15\r\n        lea     r15, [4*r14]\r\n        cmp     rbx, r15\r\n        je      .LBB3_14\r\n        mov     edx, 4\r\n        mov     rdi, rsi\r\n        mov     rsi, rbx\r\n        test    r15, r15\r\n        je      .LBB3_9\r\n        mov     rcx, r15\r\n        call    qword ptr [rip + __rust_realloc@GOTPCREL]\r\n        test    rax, rax\r\n        je      .LBB3_16\r\n        mov     rsi, rax\r\n        mov     rbx, r15\r\n        jmp     .LBB3_14\r\n.LBB3_9:\r\n        call    qword ptr [rip + __rust_dealloc@GOTPCREL]\r\n        xor     ebx, ebx\r\n        mov     esi, 4\r\n.LBB3_14:\r\n        mov     qword ptr [rsp + 8], rsi\r\n        shr     rbx, 2\r\n        mov     qword ptr [rsp + 16], rbx\r\n.LBB3_15:\r\n        mov     rax, rsi\r\n        mov     rdx, r14\r\n        add     rsp, 32\r\n        pop     rbx\r\n        pop     r14\r\n        pop     r15\r\n        ret\r\n.LBB3_18:\r\n        call    alloc::raw_vec::RawVec<T,A>::allocate_in::{{closure}}\r\n        ud2\r\n.LBB3_19:\r\n        lea     rdi, [rsp + 8]\r\n        call    alloc::raw_vec::RawVec<T,A>::allocate_in::{{closure}}\r\n        ud2\r\n.LBB3_10:\r\n        lea     rdi, [rip + .L__unnamed_1]\r\n        lea     rdx, [rip + .L__unnamed_2]\r\n        mov     esi, 36\r\n        call    qword ptr [rip + core::panicking::panic@GOTPCREL]\r\n        ud2\r\n.LBB3_16:\r\n        mov     esi, 4\r\n        mov     rdi, r15\r\n        call    qword ptr [rip + alloc::alloc::handle_alloc_error@GOTPCREL]\r\n        ud2\r\n        mov     rbx, rax\r\n        lea     rdi, [rsp + 8]\r\n        call    core::ptr::drop_in_place\r\n        mov     rdi, rbx\r\n        call    _Unwind_Resume@PLT\r\n        ud2\r\n\r\n.L__unnamed_1:\r\n        .ascii  \"Tried to shrink to a larger capacity\"\r\n\r\n.L__unnamed_3:\r\n        .ascii  \"/rustc/f05a5240440b3eaef1684a7965860fab40301947/src/libcore/macros/mod.rs\"\r\n\r\n.L__unnamed_2:\r\n        .quad   .L__unnamed_3\r\n        .asciz  \"I\\000\\000\\000\\000\\000\\000\\000\\n\\000\\000\\000\\t\\000\\000\"\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71861/timeline", "performed_via_github_app": null, "state_reason": null}