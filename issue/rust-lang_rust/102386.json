{"url": "https://api.github.com/repos/rust-lang/rust/issues/102386", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102386/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102386/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102386/events", "html_url": "https://github.com/rust-lang/rust/issues/102386", "id": 1388657304, "node_id": "I_kwDOAAsO6M5SxTqY", "number": 102386, "title": "Consider adding `fmt::fmt_fn` or `fmt::from_fn` to the standard library", "user": {"login": "EFanZh", "id": 2160692, "node_id": "MDQ6VXNlcjIxNjA2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2160692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EFanZh", "html_url": "https://github.com/EFanZh", "followers_url": "https://api.github.com/users/EFanZh/followers", "following_url": "https://api.github.com/users/EFanZh/following{/other_user}", "gists_url": "https://api.github.com/users/EFanZh/gists{/gist_id}", "starred_url": "https://api.github.com/users/EFanZh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EFanZh/subscriptions", "organizations_url": "https://api.github.com/users/EFanZh/orgs", "repos_url": "https://api.github.com/users/EFanZh/repos", "events_url": "https://api.github.com/users/EFanZh/events{/privacy}", "received_events_url": "https://api.github.com/users/EFanZh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-09-28T03:15:21Z", "updated_at": "2022-09-29T04:42:01Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Similar to [`iter::from_fn`](https://doc.rust-lang.org/std/iter/fn.from_fn.html) and [`future::poll_fn`](https://doc.rust-lang.org/std/future/fn.poll_fn.html), I find it useful to have a `fmt::fmt_fn` or `fmt::from_fn` function that converts a function into a value that implements `Debug` and `Display`:\r\n\r\n```rust\r\nuse std::fmt::{self, Debug, Display, Formatter};\r\n\r\npub struct FmtFn<F>(F)\r\nwhere\r\n    F: ?Sized;\r\n\r\nimpl<F> Display for FmtFn<F>\r\nwhere\r\n    F: Fn(&mut Formatter) -> fmt::Result + ?Sized,\r\n{\r\n    fn fmt(&self, f: &mut Formatter) -> fmt::Result {\r\n        (self.0)(f)\r\n    }\r\n}\r\n\r\nimpl<F> Debug for FmtFn<F>\r\nwhere\r\n    F: Fn(&mut Formatter) -> fmt::Result + ?Sized,\r\n{\r\n    fn fmt(&self, f: &mut Formatter) -> fmt::Result {\r\n        (self.0)(f)\r\n    }\r\n}\r\n\r\npub fn fmt_fn<F>(f: F) -> FmtFn<F>\r\nwhere\r\n    F: Fn(&mut Formatter) -> fmt::Result,\r\n{\r\n    FmtFn(f)\r\n}\r\n\r\nfn main() {\r\n    assert_eq!(format!(\"{}\", fmt_fn(|f| f.write_str(\"abc\"))), \"abc\");\r\n    assert_eq!(format!(\"{:?}\", fmt_fn(|f| f.write_str(\"def\"))), \"def\");\r\n\r\n    let dst_fmt_fn: &FmtFn<dyn Fn(&mut Formatter) -> fmt::Result> = &fmt_fn(|f| f.write_str(\"ghi\"));\r\n\r\n    assert_eq!(format!(\"{}\", dst_fmt_fn), \"ghi\");\r\n}\r\n```\r\n\r\nOr maybe we can have two different functions: `display_fn` and `debug_fn`, where `display_fn` returns a value that implements `Display`, and `debug_fn` returns a value that implements `Debug`.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102386/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102386/timeline", "performed_via_github_app": null, "state_reason": null}