{"url": "https://api.github.com/repos/rust-lang/rust/issues/104224", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104224/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104224/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104224/events", "html_url": "https://github.com/rust-lang/rust/issues/104224", "id": 1443102509, "node_id": "I_kwDOAAsO6M5WA_8t", "number": 104224, "title": "Unclear unwind safety for `std::alloc::Allocator::{grow,shrink}`", "user": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-11-10T01:57:16Z", "updated_at": "2022-11-10T03:52:00Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Location\r\n\r\nhttps://doc.rust-lang.org/nightly/std/alloc/trait.Allocator.html\r\n\r\n### Summary\r\n\r\nThe documentation for the `grow()`, `grow_zeroed()`, and `shrink()` methods contains an implication that it is not unsound (though also not recommended) for these methods to panic.\r\n\r\n> Clients wishing to abort computation in response to an allocation error are encouraged to call the [`handle_alloc_error`](https://doc.rust-lang.org/nightly/alloc/alloc/fn.handle_alloc_error.html) function, rather than directly invoking `panic!` or similar.\r\n\r\nBut, it is important for the caller to handle outcomes correctly to avoid either leaking or accessing freed memory:\r\n\r\n> If this returns `Ok`, then ownership of the memory block referenced by `ptr` has been transferred to this allocator. The memory may or may not have been freed, and should be considered unusable.\r\n> \r\n> If this method returns `Err`, then ownership of the memory block has not been transferred to this allocator, and the contents of the memory block are unaltered.\r\n\r\nThus, I think that the documentation should also mention the caller's responsibility in case of unwind, i.e. if the call panics. I see two coherent possibilities:\r\n\r\n1. A panic is a bug in the allocator; the caller must make no assumptions, and thus must not touch `ptr` further (potentially leaking an allocation).\r\n2. A panic is a way of signaling allocation failure; it should be treated similarly to `Err`, and `ptr` is still valid. Therefore, unwinding should leave the owner of `ptr` in a valid state, and deallocate `ptr` on drop.\r\n\r\nIn either case, I think the documentation should explicitly describe unwind considerations.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104224/timeline", "performed_via_github_app": null, "state_reason": null}