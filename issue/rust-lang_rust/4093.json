{"url": "https://api.github.com/repos/rust-lang/rust/issues/4093", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/4093/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/4093/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/4093/events", "html_url": "https://github.com/rust-lang/rust/issues/4093", "id": 8929600, "node_id": "MDU6SXNzdWU4OTI5NjAw", "number": 4093, "title": "Allow closures to mutate their upvars", "user": {"login": "rntz", "id": 16143, "node_id": "MDQ6VXNlcjE2MTQz", "avatar_url": "https://avatars.githubusercontent.com/u/16143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rntz", "html_url": "https://github.com/rntz", "followers_url": "https://api.github.com/users/rntz/followers", "following_url": "https://api.github.com/users/rntz/following{/other_user}", "gists_url": "https://api.github.com/users/rntz/gists{/gist_id}", "starred_url": "https://api.github.com/users/rntz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rntz/subscriptions", "organizations_url": "https://api.github.com/users/rntz/orgs", "repos_url": "https://api.github.com/users/rntz/repos", "events_url": "https://api.github.com/users/rntz/events{/privacy}", "received_events_url": "https://api.github.com/users/rntz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2012-12-02T21:28:43Z", "updated_at": "2014-06-05T17:31:41Z", "closed_at": "2014-06-05T17:31:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Rust does not permit the following code:\n\n```\npure fn generate_nats_from(x_: uint) -> pure fn@() -> uint {\n  let mut x = x_;\n  || { x += 1; x }\n}\n```\n\nIt is disallowed for two reasons:\n1. You cannot implicitly capture a mutable variable, you need a capture clause.\n2. You cannot assign to captured mutable variables from heap closures.\n\nThese restrictions appear to primarily have historical motivations: originally, local variables were all mutable and were captured by _copying_ their values at the time the closure was created.\n\nHowever, it is often convenient to create a \"stateful\" heap closure, which maintains some hidden local state that may change between calls to it. The most natural way to do this is to allow heap closures to capture mutable variables by _reference_.\n\nIf we allowed this, then `generate_nats_from(0)` would return a function `f` such that the first call to `f` returned 1, the second 2, the third 3, etc. This is very similar to a python-style generator, albeit written explicitly instead of with `yield`.\n\nTo achieve this currently in rust, we must explicitly allocate a mutable managed pointer, like so:\n\n```\nfn generate_nats_from(x_: uint) -> fn@() -> uint {\n  let x = @mut x_;\n  || { *x += 1; *x }\n}\n```\n\nNotice that I had to drop the `pure` annotation on the returned function, because it mutates an @-pointer. However, the function _is_ notionally pure: it mutates nothing visible to its caller, only its own internal state.\n\nIt also makes the code uglier, and in principle less efficient, to do it this way. I say \"in principle less efficient\" because the code given allocates a separate GC'd box for `x`, when it could instead become part of the environment of the closure we return. Actually implementing this optimization, however, might be difficult.\n\nMostly I want this feature because it makes writing stateful closures nicer, and it makes writing _pure_ stateful closures _possible_.\n\nFor examples of code that could benefit from this, see https://github.com/rntz/rust-sandbox/blob/master/stream.rs , in particular https://github.com/rntz/rust-sandbox/blob/905de30e5a7af8422ea3604b90f6443745bf6233/stream.rs#L30 and https://github.com/rntz/rust-sandbox/blob/905de30e5a7af8422ea3604b90f6443745bf6233/stream.rs#L101 .\n\nNote in particular that the only thing keeping most of the functions in that module, and the definition of the `Stream` type itself, from being pure is this issue. As far as I can tell, lazy streams of this sort are doomed to second-class citizenship in the Rust purity system as long as this is not permitted.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/4093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/4093/timeline", "performed_via_github_app": null, "state_reason": "completed"}