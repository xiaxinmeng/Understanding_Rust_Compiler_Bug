{"url": "https://api.github.com/repos/rust-lang/rust/issues/2387", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/2387/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/2387/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/2387/events", "html_url": "https://github.com/rust-lang/rust/issues/2387", "id": 4595354, "node_id": "MDU6SXNzdWU0NTk1MzU0", "number": 2387, "title": "RFC: flexible syntax for macro invocations", "user": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235146, "node_id": "MDU6TGFiZWwyMzUxNDY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-syntaxext", "name": "A-syntaxext", "color": "f7e101", "default": false, "description": "Area: Syntax extensions"}, {"id": 235777, "node_id": "MDU6TGFiZWwyMzU3Nzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-grammar", "name": "A-grammar", "color": "f7e101", "default": false, "description": "Area: The grammar of Rust"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/7", "html_url": "https://github.com/rust-lang/rust/milestone/7", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/7/labels", "id": 85273, "node_id": "MDk6TWlsZXN0b25lODUyNzM=", "number": 7, "title": "0.4", "description": "", "creator": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 179, "state": "closed", "created_at": "2012-02-16T22:09:25Z", "updated_at": "2013-03-20T22:05:40Z", "due_on": "2012-09-14T07:00:00Z", "closed_at": "2012-10-06T05:46:41Z"}, "comments": 13, "created_at": "2012-05-15T23:21:40Z", "updated_at": "2014-06-16T21:56:20Z", "closed_at": "2012-08-01T19:17:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, macro invocations piggyback off an existing syntactic form, the array literal. We'd like more flexibility.\n# Macro invocation syntax\n\nThe proposed invocation syntax will extend the grammar roughly as follows (the exact syntax for identifying an invocation will be decided later. However, they will need to be distinguished from function invocations at parse-time.):\n\n``` C\nExpr ::= ... | Identifier \"{\" Balanced* \"}\"\nBalanced ::= \"(\" Balanced* \")\" | \"[\" Balanced* \"]\" | \"{\" Balanced* \"}\" | AnyOtherToken\n```\n## Parsing macro invocations\n\nThe tricky part is having macros consume `Balanced`s in a useful way. An example invocation to an example macro:\n\n``` ruby\nmy_let {\n    x := 4*7;\n    y := str::len(\"(-:\") + 18;\n    x + (y*x)\n}\n```\n\nHere's how we'd like to define `my_let` (`rep()` is like Macro by Example's `...`): \n\n``` ruby\npat_macro {\n    my_let { /*BNF-like notation here*/ \n         rep(var=Identifier \":=\" val=Expr \";\") body=Expr\n    }\n    => /* transcribe this, with interpolation of `var`, `body`, and `val`*/\n    { |rep(var)| body } (rep(val))\n    /* like ((lambda (var ...) body) val ...) */\n}\n```\n## Proposed implementation\n\nI believe that this can be implemented in a minimally-invasive way. `pat_macro` will be a syntax extension which takes a BNF-like notation for the invocation parser on the inside of the `<macro_name>{}`, and a `Balanced` on the right side of the `=>`. (The only reason not to parse it as an Expression is that rustc has no data structure for incomplete ASTs.) (It would be friendly to also parse it as an expression, using dummy values for interpolated syntax, to check that it will parse correctly.)\n\nAt macro expansion time, the `Balanced` will need to be parsed (well, **re**-parsed) according the the grammar of the macro. We can do this by building a lexer that takes a `Balanced` instead of a string as input. The parser will interpret the macro's BNF-like pattern, delegating to the Rust parser for things like `Identifier` and `Expr`.\n\nThere are two ways for the shim lexer to deal with interpolated syntax. The bad one is to pretty-print the interpolated ASTs and re-lex them before sending them to the parser again. The better one is to use special tokens to hand the parser pre-parsed ASTs for it to return immediately.\n# Possible extensions\n## Syntax for lexer-skipping syntax extensions\n\nIf we remove `#` from ordinary macro invocation syntax, we can use it to provide quotation for _un-lexed_ syntax. Delimiters would work in a Perl-like fashion:\n\n``` C\n#regex(\\w+\\s*) //parens inside must match\n#regex|\\\\w+\\\\s*| //backslashes escape delimiter\n```\n## String-examining/lexer-skipping macros\n\n``` ruby\npat_macro {\n    fmt { format=StringContents(\"%\" spec=Letter | percent=\"%%\" | literal=NegativeCharClass(\"%\")) \",\" rep(arg=Expr, \",\") }\n    => /* ??? */\n}\nfmt{\"Look at this number: %u\", 18u}\n```\n\nMaking macros look inside strings should be fairly simple, but most practical applications will probably require lots more power from the macro system.\n## Invocations at non-expression position\n\nWhat if we want macros to generate non-expressions (especially items, types)? It seems like we need a separate invocation form for every nonterminal we want to extend. Fortunately, expressions cover a lot of the interesting territory.\n", "closed_by": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/2387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/2387/timeline", "performed_via_github_app": null, "state_reason": "completed"}