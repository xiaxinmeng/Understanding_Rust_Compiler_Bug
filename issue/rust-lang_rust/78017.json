{"url": "https://api.github.com/repos/rust-lang/rust/issues/78017", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78017/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78017/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78017/events", "html_url": "https://github.com/rust-lang/rust/issues/78017", "id": 723298453, "node_id": "MDU6SXNzdWU3MjMyOTg0NTM=", "number": 78017, "title": "thread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 43", "user": {"login": "int3rsys", "id": 22496238, "node_id": "MDQ6VXNlcjIyNDk2MjM4", "avatar_url": "https://avatars.githubusercontent.com/u/22496238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/int3rsys", "html_url": "https://github.com/int3rsys", "followers_url": "https://api.github.com/users/int3rsys/followers", "following_url": "https://api.github.com/users/int3rsys/following{/other_user}", "gists_url": "https://api.github.com/users/int3rsys/gists{/gist_id}", "starred_url": "https://api.github.com/users/int3rsys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/int3rsys/subscriptions", "organizations_url": "https://api.github.com/users/int3rsys/orgs", "repos_url": "https://api.github.com/users/int3rsys/repos", "events_url": "https://api.github.com/users/int3rsys/events{/privacy}", "received_events_url": "https://api.github.com/users/int3rsys/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-10-16T14:58:17Z", "updated_at": "2020-10-19T12:44:13Z", "closed_at": "2020-10-19T12:44:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Code\r\n\r\n```Rust\r\nuse std::io::{Read, Write};\r\nuse std::fmt::Debug;\r\nuse std::io::{stdout,stdin, BufRead};\r\nuse arrayvec::ArrayString;\r\nuse std::vec::Vec;\r\nuse std::convert::TryInto;\r\n\r\nstruct VM {\r\n    r: [u32;16],\r\n    pc: u32,\r\n    mem: Vec<u8>,\r\n}\r\n\r\nimpl VM{\r\n\r\n    fn check_instr(&mut self)-> bool{\r\n        self.pc += 1;\r\n        let idx = self.pc as usize;\r\n        match self.mem[idx]{\r\n            0x00 => {\r\n                self.r[self.mem[idx+1] as usize] ^= self.r[self.mem[idx+2] as usize];\r\n                self.pc += 3;\r\n                return false;\r\n            }, //xor det_reg,src_reg\r\n            0x01 => {\r\n                self.r[self.mem[idx+1] as usize] &= self.r[self.mem[idx+2] as usize];\r\n                self.pc += 3;\r\n                return false;\r\n            },\r\n            0x02 => {\r\n                self.r[self.mem[idx+1] as usize] |= self.r[self.mem[idx+2] as usize];\r\n                self.pc += 3;\r\n                return false;\r\n            },\r\n            // MOV dst_reg, std_reg\r\n            0x11 =>{\r\n                let idx = self.pc as usize;\r\n                let data = self.mem[idx+1];\r\n                self.mem[idx+2].clone_from(&data);\r\n                self.pc += 6;\r\n                return false;\r\n            },\r\n            // MOV dst_reg, imm32\r\n            0x10 =>{\r\n                let idx = self.pc as usize;\r\n                let data = self.mem[idx+1] as u32;\r\n                self.r[self.mem[idx+2] as usize].clone_from(&data);\r\n                self.pc += 3;\r\n                return false;\r\n            },\r\n            0xff =>{\r\n                return true;\r\n            }\r\n            _ => return false,\r\n        }\r\n        println!(\"Should never get here!\");\r\n        return true;\r\n    }\r\n\r\n    fn check(&mut self, key: &[u8;16]) -> bool{\r\n        key.chunks_exact(4)\r\n            .take(4)\r\n            .zip(&mut self.r[..4])\r\n            .for_each(|(chunk,slot)| * slot = u32::from_le_bytes(chunk.try_into().unwrap()));\r\n\r\n        let mut end = false;\r\n\r\n        while !end {\r\n            end = self.check_instr();\r\n        }\r\n        return self.r[0] == 0;\r\n    }\r\n}\r\n\r\nfn main() {\r\n    const MAX_SIZE: u64 = 256;\r\n    let key_valid = false;\r\n    let mut key = [0;16];\r\n\r\n    println!(\"Hello there\\nPlease enter your key: \");\r\n    let _ = stdout().flush();\r\n    if let Err(_) = stdin().read_exact(&mut key){\r\n        println!(\"Bad user input!\");\r\n    }\r\n\r\n    // let mut vm = VM::new();\r\n    // let key_valid = vm.check(key);\r\n\r\n    if (key_valid){\r\n        println!(\"Yup.\");\r\n    }else{\r\n        println!(\"Nope.\");\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.45.0 (5c1f21c3b 2020-07-13)\r\nbinary: rustc\r\ncommit-hash: 5c1f21c3b82297671ad3ae1e8c942d2ca92e84f2\r\ncommit-date: 2020-07-13\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.45.0\r\nLLVM version: 10.0\r\n\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 43', /rustc/5c1f21c3b82297671ad3ae1e8c942d2ca92e84f2/src/librustc_query_system/dep_graph/serialized.rs:42:23\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:78\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1076\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1537\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:198\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:218\r\n  10: rustc_driver::report_ice\r\n  11: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:490\r\n  12: rust_begin_unwind\r\n             at src/libstd/panicking.rs:388\r\n  13: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:101\r\n  14: core::panicking::panic_bounds_check\r\n             at src/libcore/panicking.rs:73\r\n  15: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n  16: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_green_and_read\r\n  17: rustc_data_structures::stack::ensure_sufficient_stack\r\n  18: rustc_query_system::query::plumbing::get_query_impl\r\n  19: rustc_passes::entry::find_entry_point\r\n  20: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  21: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  22: rustc_interface::passes::analysis\r\n  23: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::analysis>::compute\r\n  24: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  25: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  26: rustc_query_system::query::plumbing::get_query_impl\r\n  27: rustc_middle::ty::context::tls::enter_global\r\n  28: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  29: rustc_ast::attr::with_globals\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.45.0 (5c1f21c3b 2020-07-13) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [entry_fn] looking up the entry function of a crate\r\n#1 [analysis] running analysis passes on this crate\r\nend of query stack\r\nthread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 46', /rustc/5c1f21c3b82297671ad3ae1e8c942d2ca92e84f2/src/librustc_query_system/dep_graph/serialized.rs:42:23\r\nstack backtrace:\r\n0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:78\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1076\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1537\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:198\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:218\r\n  10: rustc_driver::report_ice\r\n  11: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:490\r\n  12: rust_begin_unwind\r\n             at src/libstd/panicking.rs:388\r\n  13: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:101\r\n  14: core::panicking::panic_bounds_check\r\n             at src/libcore/panicking.rs:73\r\n  15: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n  16: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_green_and_read\r\n  17: rustc_query_system::query::plumbing::ensure_query_impl\r\n  18: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  19: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  20: rustc_interface::passes::analysis\r\n  21: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::analysis>::compute\r\n  22: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  23: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  24: rustc_query_system::query::plumbing::get_query_impl\r\n  25: rustc_middle::ty::context::tls::enter_global\r\n  26: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  27: rustc_ast::attr::with_globals\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.45.0 (5c1f21c3b 2020-07-13) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [analysis] running analysis passes on this crate\r\nend of query stack\r\nwarning: 4 warnings emitted\r\n\r\nerror: could not compile `VM`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\nProcess finished with exit code 101\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack trace is included above\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "int3rsys", "id": 22496238, "node_id": "MDQ6VXNlcjIyNDk2MjM4", "avatar_url": "https://avatars.githubusercontent.com/u/22496238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/int3rsys", "html_url": "https://github.com/int3rsys", "followers_url": "https://api.github.com/users/int3rsys/followers", "following_url": "https://api.github.com/users/int3rsys/following{/other_user}", "gists_url": "https://api.github.com/users/int3rsys/gists{/gist_id}", "starred_url": "https://api.github.com/users/int3rsys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/int3rsys/subscriptions", "organizations_url": "https://api.github.com/users/int3rsys/orgs", "repos_url": "https://api.github.com/users/int3rsys/repos", "events_url": "https://api.github.com/users/int3rsys/events{/privacy}", "received_events_url": "https://api.github.com/users/int3rsys/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78017/timeline", "performed_via_github_app": null, "state_reason": "completed"}