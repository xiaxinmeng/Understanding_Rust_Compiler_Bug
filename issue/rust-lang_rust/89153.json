{"url": "https://api.github.com/repos/rust-lang/rust/issues/89153", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89153/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89153/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89153/events", "html_url": "https://github.com/rust-lang/rust/issues/89153", "id": 1002910124, "node_id": "I_kwDOAAsO6M47xzGs", "number": 89153, "title": "Confusing trait bound error with impl parameter", "user": {"login": "afetisov", "id": 12111996, "node_id": "MDQ6VXNlcjEyMTExOTk2", "avatar_url": "https://avatars.githubusercontent.com/u/12111996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afetisov", "html_url": "https://github.com/afetisov", "followers_url": "https://api.github.com/users/afetisov/followers", "following_url": "https://api.github.com/users/afetisov/following{/other_user}", "gists_url": "https://api.github.com/users/afetisov/gists{/gist_id}", "starred_url": "https://api.github.com/users/afetisov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afetisov/subscriptions", "organizations_url": "https://api.github.com/users/afetisov/orgs", "repos_url": "https://api.github.com/users/afetisov/repos", "events_url": "https://api.github.com/users/afetisov/events{/privacy}", "received_events_url": "https://api.github.com/users/afetisov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-09-21T17:21:55Z", "updated_at": "2021-09-21T17:21:55Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven [the following code](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20bar()%20-%3E%20anyhow%3A%3AResult%3C()%3E%20%7B%0A%20%20%20%20if%20true%20%7B%0A%20%20%20%20%20%20%20%20Err(String%3A%3Anew().into())%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20baz(String%3A%3Anew())%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20baz(e%3A%20impl%20Into%3Canyhow%3A%3AError%3E)%20-%3E%20anyhow%3A%3AResult%3C()%3E%20%7B%0A%20%20%20%20Err(e.into())%0A%7D%0A%0A):\r\n```rust\r\nfn bar() -> anyhow::Result<()> {\r\n    if true {\r\n        Err(String::new().into())\r\n    } else {\r\n        baz(String::new())\r\n    }\r\n}\r\n\r\nfn baz(e: impl Into<anyhow::Error>) -> anyhow::Result<()> {\r\n    Err(e.into())\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0277]: the trait bound `String: std::error::Error` is not satisfied\r\n --> src/lib.rs:3:27\r\n  |\r\n3 |         Err(String::new().into())\r\n  |                           ^^^^ the trait `std::error::Error` is not implemented for `String`\r\n  |\r\n  = note: required because of the requirements on the impl of `From<String>` for `anyhow::Error`\r\n  = note: required because of the requirements on the impl of `Into<anyhow::Error>` for `String`\r\n\r\nerror[E0277]: the trait bound `String: From<String>` is not satisfied\r\n --> src/lib.rs:5:13\r\n  |\r\n5 |         baz(String::new())\r\n  |             ^^^^^^^^^^^^^\r\n  |             |\r\n  |             expected an implementor of trait `From<String>`\r\n  |             help: consider borrowing here: `&String::new()`\r\n...\r\n9 | fn baz(e: impl Into<anyhow::Error>) -> anyhow::Result<()> {\r\n  |                ------------------- required by this bound in `baz`\r\n  |\r\n  = note: required because of the requirements on the impl of `From<String>` for `anyhow::Error`\r\n  = note: required because of the requirements on the impl of `Into<anyhow::Error>` for `String`\r\n```\r\n\r\nOn the surface the two error cases look very similar. The first error message is correct and works as expected. The second one is very confusing: it claims that `String: From<String>` is not satisfied, while it's always provided by the blanket impl, and it is unclear why the compiler would search for `String: From<String>` at all, given that `anyhow` provides only two conversion impls:\r\n\r\n```rust\r\nimpl<E> From<E> for Error where\r\n    E: StdError + Send + Sync + 'static, { /* ... */ }\r\n\r\nimpl From<Error> for Box<dyn StdError + Send + Sync + 'static> { /* ... */ }\r\n```\r\n\r\nneither of which could possibly lead to `String: From<String>`.\r\n\r\nThe suggested fix `consider borrowing here: &String::new()` also doesn't make any sense.\r\n\r\nThe error reproduces on the current stable `rustc 1.55`, nightly `rustc 1.57.0-nightly (e4828d5b7 2021-09-16)` and beta compiler toolchains.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89153/timeline", "performed_via_github_app": null, "state_reason": null}