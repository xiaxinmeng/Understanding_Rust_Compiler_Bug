{"url": "https://api.github.com/repos/rust-lang/rust/issues/61001", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61001/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61001/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61001/events", "html_url": "https://github.com/rust-lang/rust/issues/61001", "id": 446515006, "node_id": "MDU6SXNzdWU0NDY1MTUwMDY=", "number": 61001, "title": "Doc comments can be passed to macros as literals", "user": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36956, "node_id": "MDU6TGFiZWwzNjk1Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-frontend", "name": "A-frontend", "color": "f7e101", "default": false, "description": "Area: frontend (errors, parsing and HIR)"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-21T09:33:51Z", "updated_at": "2019-05-24T06:51:05Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Doc comments are the only tokens that cannot be passed to macros precisely, they are converted into a `#[doc = \"text\"]` form instead, which is a pretty big hack.\r\nThis conversion may change escaping in the text irrecoverably and can also change semantics in corner cases (e.g. `doc` starts going through name resolution).\r\nAlso, this is the single reason why doc comments may need a conversion at all (https://github.com/rust-lang/rust/issues/60935).\r\n\r\nLexically doc comments are raw string literals with weird quotes (`/**` + `*/` and `///` + `\\n`).\r\nSyntactically they certainly can be interpreted as attribute literals, similarly to how strings or integers are expression literals, and how `!` would be a type literal if it wasn't a punctuation lexically.\r\nWe can use this intuition for fixing the situation with passing doc comments to macros.\r\n\r\n#### Declarative macros\r\n\r\nThe recently introduced `literal` matcher can start matching doc comments.\r\n\r\n```rust\r\nmacro m($doc: literal) {\r\n    $doc\r\n    struct S;\r\n}\r\n\r\nm!(/** text */);\r\n```\r\n\r\nI don't think there are going to be any implementation issues with that.\r\n\r\n#### Proc macros\r\n\r\nWe cannot add a new variant to `TokenTree` backward compatibly, but the content of `TokenTree::Literal` is only available through `to_string()` and is open for additions.\r\n\r\nSo, `literal.to_string()` can start returning things like `/// Text`.\r\nOf course, `syn` and friends must be ready to get a result like this from stringifying a literal token.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61001/timeline", "performed_via_github_app": null, "state_reason": null}