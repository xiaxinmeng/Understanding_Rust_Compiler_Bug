{"url": "https://api.github.com/repos/rust-lang/rust/issues/95055", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95055/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95055/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95055/events", "html_url": "https://github.com/rust-lang/rust/issues/95055", "id": 1172923440, "node_id": "I_kwDOAAsO6M5F6WQw", "number": 95055, "title": "Confusing error from an incorrect `return;` in `async` block", "user": {"login": "spaarmann", "id": 7349758, "node_id": "MDQ6VXNlcjczNDk3NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7349758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spaarmann", "html_url": "https://github.com/spaarmann", "followers_url": "https://api.github.com/users/spaarmann/followers", "following_url": "https://api.github.com/users/spaarmann/following{/other_user}", "gists_url": "https://api.github.com/users/spaarmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/spaarmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spaarmann/subscriptions", "organizations_url": "https://api.github.com/users/spaarmann/orgs", "repos_url": "https://api.github.com/users/spaarmann/repos", "events_url": "https://api.github.com/users/spaarmann/events{/privacy}", "received_events_url": "https://api.github.com/users/spaarmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-03-17T21:10:54Z", "updated_at": "2022-03-18T08:41:19Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nThis code compiles without errors:\r\n```rust\r\nasync fn foo() -> Result<(), Box<dyn std::error::Error>> {\r\n    async {\r\n        Err(anyhow!(\"oh no\"))?;\r\n        Ok(())\r\n    }.await\r\n}\r\n```\r\nAdding a `return;` in the middle of the `async` block makes this code wrong\r\n```rust\r\nasync fn foo() -> Result<(), Box<dyn std::error::Error>> {\r\n    async {\r\n        Err(anyhow!(\"oh no\"))?;\r\n        return;\r\n        Ok(())\r\n    }.await\r\n}\r\n```\r\nand `rustc` correctly produces an error. [Playground link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=8efbb96b159cc8c48359d0457d9ffcce)\r\nHowever, the error is very confusing:\r\n\r\n```\r\nerror[E0277]: the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `FromResidual`)\r\n  --> src/lib.rs:27:30\r\n   |\r\n26 |       async {\r\n   |  ___________-\r\n27 | |         Err(anyhow!(\"oh no\"))?;\r\n   | |                              ^ cannot use the `?` operator in an async block that returns `()`\r\n28 | |         return;\r\n29 | |         Ok(())\r\n30 | |     }.await\r\n   | |_____- this function should return `Result` or `Option` to accept `?`\r\n   |\r\n   = help: the trait `FromResidual<Result<Infallible, anyhow::Error>>` is not implemented for `()`\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:29:9\r\n   |\r\n29 |         Ok(())\r\n   |         ^^^^^^ expected `()`, found enum `Result`\r\n   |\r\n   = note: expected type `()`\r\n              found enum `Result<(), _>`\r\nnote: return type inferred to be `()` here\r\n  --> src/lib.rs:27:9\r\n   |\r\n27 |         Err(anyhow!(\"oh no\"))?;\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:26:5\r\n   |\r\n26 | /     async {\r\n27 | |         Err(anyhow!(\"oh no\"))?;\r\n28 | |         return;\r\n29 | |         Ok(())\r\n30 | |     }.await\r\n   | |___________^ expected enum `Result`, found `()`\r\n   |\r\n   = note:   expected enum `Result<(), Box<(dyn std::error::Error + 'static)>>`\r\n           found unit type `()`\r\nhelp: try adding an expression at the end of the block\r\n   |\r\n30 ~     }.await;\r\n31 +     Ok(())\r\n   |\r\n```\r\nIt simultaneously complains in the first error that the `?` is invalid because the async block returns `()` and then in the next error it says that it inferred the return type to *be* `()` because of that `?`.\r\n\r\nIdeally the compiler could figure out based on the return type of the function that the `return;` is the problem here, but at the very least it would be good to not point at the `Err(...)?` line as the reason for the return type being inferred as `()`.\r\n\r\nTested on stable 1.59 and nightly 1.61 (2022-03-16).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95055/timeline", "performed_via_github_app": null, "state_reason": null}