{"url": "https://api.github.com/repos/rust-lang/rust/issues/107645", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107645/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107645/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107645/events", "html_url": "https://github.com/rust-lang/rust/issues/107645", "id": 1570279246, "node_id": "I_kwDOAAsO6M5dmI9O", "number": 107645, "title": "TAIT defining scope options", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 638321554, "node_id": "MDU6TGFiZWw2MzgzMjE1NTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/proposed-final-comment-period", "name": "proposed-final-comment-period", "color": "ededed", "default": false, "description": "Proposed to merge/close by relevant subteam, see T-<team> label. Will enter FCP once signed off."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 1472502130, "node_id": "MDU6TGFiZWwxNDcyNTAyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-type_alias_impl_trait", "name": "F-type_alias_impl_trait", "color": "f9c0cc", "default": false, "description": "`#[feature(type_alias_impl_trait)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 97, "created_at": "2023-02-03T18:35:06Z", "updated_at": "2023-06-10T04:08:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "during the stabilization of TAITs (type alias impl trait) in https://github.com/rust-lang/rust/issues/63063#issuecomment-1386064436 a concern was raised: it's not obvious for the compiler (and IDEs), which items' bodies are allowed to register hidden types for TAITs. For RPIT (return position impl trait) it was obvious: the body of the function in whose return type the `impl Trait` was in. For TAITs the status quo is point 1 in the list of options below. This may require some interesting module juggling to avoid cycle errors that can occur due to revealing the hidden type to prove `Send` or `Sync` bounds, and that revealing again looking at the item to look for things registering the hidden type ([see example](https://github.com/rust-lang/rust/blob/master/tests/ui/type-alias-impl-trait/auto-trait-leakage3.rs) and [passing example](https://github.com/rust-lang/rust/blob/master/tests/ui/type-alias-impl-trait/auto-trait-leakage.rs)).\r\n\r\nThe possible schemes we know about currently are:\r\n\r\n1. any item that is (recursively) within the parent of the TAIT is allowed to register the hidden type\r\n2. any item that follows the rules of 1. and additionally has the TAIT in its signature or `where` bounds is allowed to register the hidden type. this change has a prospective impl at\r\n    * https://github.com/rust-lang/rust/pull/107073\r\n    * not much wiggle room for changing things after stabilization, as any change can quickly leed to then-stable code to have cycle errors\r\n3. same as 2. but not permitting `where` bounds to register hidden types\r\n4. any item in the defining scope can register hidden types, but we error out if the TAIT is not mentioned in the signature or `where` bounds\r\n    * https://github.com/rust-lang/rust/pull/107809\r\n    * similar to 2., but since we still look at all functions in the defining scope, there's no change in cycle errors to 1.\r\n    * forward compatible with choosing 2. or 1. later\r\n5. same as 4. but not permitting `where` bounds to register hidden types\r\n    * forward compatible with choosing 4. later\r\n\r\nRuled out schemes:\r\n\r\n6. any item that follows the rules of 1. and has a `#[defines(NameOfTheTypeAlias)]` attribute is allowed to register the hidden type\r\n    * probably undesirable due to the verbosity in \"obvious\" cases (like using a TAIT in function return position)\r\n7. only allow explicitly registering hidden types with a magic libcore function that syntactically mentions the TAIT by its path. This will still require looking at the body, but we don't need to typecheck the body, just do name resolution on it.\r\n    * this option is just listed for completeness, it's the worst option :)\r\n\r\nI am nominating this issue for T-lang to discuss which options they prefer.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107645/timeline", "performed_via_github_app": null, "state_reason": null}