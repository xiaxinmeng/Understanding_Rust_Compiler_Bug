{"url": "https://api.github.com/repos/rust-lang/rust/issues/41690", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41690/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41690/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41690/events", "html_url": "https://github.com/rust-lang/rust/issues/41690", "id": 225577563, "node_id": "MDU6SXNzdWUyMjU1Nzc1NjM=", "number": 41690, "title": "confusing error message saying variable must be valid for anonymous lifetime that it appears to live long enough for", "user": {"login": "dbaron", "id": 248721, "node_id": "MDQ6VXNlcjI0ODcyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/248721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbaron", "html_url": "https://github.com/dbaron", "followers_url": "https://api.github.com/users/dbaron/followers", "following_url": "https://api.github.com/users/dbaron/following{/other_user}", "gists_url": "https://api.github.com/users/dbaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbaron/subscriptions", "organizations_url": "https://api.github.com/users/dbaron/orgs", "repos_url": "https://api.github.com/users/dbaron/repos", "events_url": "https://api.github.com/users/dbaron/events{/privacy}", "received_events_url": "https://api.github.com/users/dbaron/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-02T02:52:10Z", "updated_at": "2023-06-05T12:33:10Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I initially [raised this on twitter](https://twitter.com/davidbaron/status/856772994294788097) without a reduced testcase, and @SimonSapin [suggested I file an issue](https://twitter.com/SimonSapin/status/856795953851805696) because the error message could be improved.\r\n\r\nA reasonably-reduced testcase for this error is the following code:\r\n\r\n```rust\r\npub struct IrcServer {\r\n    options: String,\r\n}\r\n\r\nimpl IrcServer {\r\n    fn new() -> IrcServer {\r\n        IrcServer { options: String::from(\"test\") }\r\n    }\r\n\r\n    fn options(&self) -> &String {\r\n        &self.options\r\n    }\r\n}\r\n\r\npub fn main_loop_iteration(server: IrcServer, irc_state: &mut IRCState) {\r\n    let options = server.options();\r\n    handle_bot_command(&server, options, irc_state)\r\n}\r\n\r\nfn handle_bot_command<'opts>(server: &IrcServer,\r\n                             options: &'opts String,\r\n                             irc_state: &mut IRCState<'opts>) {\r\n}\r\n\r\npub struct IRCState<'opts> {\r\n    options: &'opts String,\r\n}\r\n\r\nimpl<'opts> IRCState<'opts> {\r\n    fn new(options_: &'opts String) -> IRCState<'opts> {\r\n        IRCState { options: options_ }\r\n    }\r\n}\r\n```\r\n\r\nwhich, when compiled with `rustc --crate-type lib lib.rs` gives the following error:\r\n\r\n```\r\nerror: `server` does not live long enough\r\n  --> lib.rs:16:19\r\n   |\r\n16 |     let options = server.options();\r\n   |                   ^^^^^^ does not live long enough\r\n17 |     handle_bot_command(&server, options, irc_state)\r\n18 | }\r\n   | - borrowed value only lives until here\r\n   |\r\nnote: borrowed value must be valid for the anonymous lifetime #2 defined on the body at 15:72...\r\n  --> lib.rs:15:73\r\n   |\r\n15 |   pub fn main_loop_iteration(server: IrcServer, irc_state: &mut IRCState) {\r\n   |  _________________________________________________________________________^ starting here...\r\n16 | |     let options = server.options();\r\n17 | |     handle_bot_command(&server, options, irc_state)\r\n18 | | }\r\n   | |_^ ...ending here\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nThis error is particularly confusing because it looks like the borrowed value *is* valid for the anonymous lifetime being pointed to; the \"borrowed value only lives until here\" points to the same point as the \"...ending here\".\r\n\r\nThe way to fix the code is with lifetime parameters and passing `options` in from the caller, i.e., to change the code to be:\r\n\r\n```rust\r\npub struct IrcServer {\r\n    options: String,\r\n}\r\n\r\nimpl IrcServer {\r\n    fn new() -> IrcServer {\r\n        IrcServer { options: String::from(\"test\") }\r\n    }\r\n\r\n    fn options(&self) -> &String {\r\n        &self.options\r\n    }\r\n}\r\n\r\npub fn main_loop_iteration<'opts>(server: IrcServer,\r\n                                  options: &'opts String,\r\n                                  irc_state: &mut IRCState<'opts>) {\r\n    handle_bot_command(&server, options, irc_state)\r\n}\r\n\r\nfn handle_bot_command<'opts>(server: &IrcServer,\r\n                             options: &'opts String,\r\n                             irc_state: &mut IRCState<'opts>) {\r\n}\r\n\r\npub struct IRCState<'opts> {\r\n    options: &'opts String,\r\n}\r\n\r\nimpl<'opts> IRCState<'opts> {\r\n    fn new(options_: &'opts String) -> IRCState<'opts> {\r\n        IRCState { options: options_ }\r\n    }\r\n}\r\n```\r\n\r\nbut it required stepping away from the problem for a bit and coming back to it later to recognize that.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41690/timeline", "performed_via_github_app": null, "state_reason": null}