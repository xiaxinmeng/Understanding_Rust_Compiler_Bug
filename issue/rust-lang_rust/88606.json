{"url": "https://api.github.com/repos/rust-lang/rust/issues/88606", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88606/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88606/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88606/events", "html_url": "https://github.com/rust-lang/rust/issues/88606", "id": 987458859, "node_id": "MDU6SXNzdWU5ODc0NTg4NTk=", "number": 88606, "title": "[lib] Prefer `core::hint::unreachable_unchecked` over `core::unreachable` macro", "user": {"login": "BastiDood", "id": 39114273, "node_id": "MDQ6VXNlcjM5MTE0Mjcz", "avatar_url": "https://avatars.githubusercontent.com/u/39114273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BastiDood", "html_url": "https://github.com/BastiDood", "followers_url": "https://api.github.com/users/BastiDood/followers", "following_url": "https://api.github.com/users/BastiDood/following{/other_user}", "gists_url": "https://api.github.com/users/BastiDood/gists{/gist_id}", "starred_url": "https://api.github.com/users/BastiDood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BastiDood/subscriptions", "organizations_url": "https://api.github.com/users/BastiDood/orgs", "repos_url": "https://api.github.com/users/BastiDood/repos", "events_url": "https://api.github.com/users/BastiDood/events{/privacy}", "received_events_url": "https://api.github.com/users/BastiDood/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-09-03T06:54:16Z", "updated_at": "2021-09-04T09:16:09Z", "closed_at": "2021-09-04T09:16:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "At the moment, many of the core assertions in the standard library make use of the `unreachable` macro, which is simply an indirection for `panic`. This is totally fine, but I would like to begin an initiative on upgrading some of these invocations as `core::hint::unreachable_unchecked` so that we may (at least) give the compiler a chance to optimize the code better.\r\n\r\nBelow is a _non-exhaustive_ list of possible candidates. I will be editing the issue as more candidates are introduced and as certain examples are marked 100% safe or not.\r\n\r\n# Merged\r\nNone so far.\r\n\r\n# Definitely Safe\r\nThis is the perfect candidate for `core::hint::unreachable_unchecked` since it is apparent that `self` is now the `Cow::Owned` variant.\r\nhttps://github.com/rust-lang/rust/blob/97f2698484c2d668b2f356a6c2252e5f08472234/library/alloc/src/borrow.rs#L275-L287\r\n\r\n# Possible Candidates\r\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/core/src/lazy.rs#L52-L64\r\n\r\nhttps://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library/std/src/lazy.rs#L121-L130\r\n\r\nhttps://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library/std/src/lazy.rs#L152-L158\r\n\r\nhttps://github.com/rust-lang/rust/blob/17f30e5451f581d753899d2f628e5be354df33cd/library/std/src/sys/sgx/abi/mod.rs#L51-L52\r\n\r\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sync/mpsc/oneshot.rs#L105-L106\r\n\r\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sync/mpsc/oneshot.rs#L170-L173\r\n\r\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sync/mpsc/oneshot.rs#L188-L190\r\n\r\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sync/mpsc/oneshot.rs#L251-L252\r\n\r\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sync/mpsc/oneshot.rs#L278-L281\r\n\r\nhttps://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library/std/src/sys/sgx/mutex.rs#L113-L118\r\n\r\nhttps://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library/core/src/iter/traits/iterator.rs#L3444-L3449\r\n\r\nhttps://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library/std/src/sys/sgx/rwlock.rs#L134-L139\r\n\r\nhttps://github.com/rust-lang/rust/blob/a49e38e672c60da788360e088f00ad12353e3913/library/core/src/iter/adapters/zip.rs#L182-L186\r\n\r\nhttps://github.com/rust-lang/rust/blob/a49e38e672c60da788360e088f00ad12353e3913/library/core/src/iter/adapters/zip.rs#L219-L224\r\n\r\nhttps://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library/std/src/sync/mpsc/stream.rs#L429-L444\r\n\r\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sync/mpsc/shared.rs#L338-L343\r\n\r\nhttps://github.com/rust-lang/rust/blob/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library/std/src/sys/unix/kernel_copy.rs#L201-L207\r\n\r\nhttps://github.com/rust-lang/rust/blob/2ad56d5c9031636c1509f4417e88099a49405b4e/library/std/src/path.rs#L912\r\n\r\nhttps://github.com/rust-lang/rust/blob/a49e38e672c60da788360e088f00ad12353e3913/library/std/src/net/ip.rs#L1679-L1684\r\n\r\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/alloc/src/collections/btree/split.rs#L49-L56\r\n\r\nhttps://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library/alloc/src/collections/btree/map.rs#L184-L187\r\n\r\nhttps://github.com/rust-lang/rust/blob/23461b210f1b0a121592a18fc4fb666106006668/library/alloc/src/collections/btree/node.rs#L1222\r\n\r\nhttps://github.com/rust-lang/rust/blob/23461b210f1b0a121592a18fc4fb666106006668/library/alloc/src/collections/btree/node.rs#L1424-L1439\r\n\r\nhttps://github.com/rust-lang/rust/blob/23461b210f1b0a121592a18fc4fb666106006668/library/alloc/src/collections/btree/node.rs#L1487-L1503\r\n\r\nhttps://github.com/rust-lang/rust/blob/23461b210f1b0a121592a18fc4fb666106006668/library/alloc/src/collections/btree/node.rs#L1599-L1609\r\n\r\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sync/mpsc/sync.rs#L111-L114\r\n\r\nhttps://github.com/rust-lang/rust/blob/607d6b00d4e0e0475b8de9d0c870b7126fdcdf6b/library/std/src/sync/mpsc/mod.rs#L828\r\n\r\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sync/mpsc/sync.rs#L243\r\n\r\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sync/mpsc/sync.rs#L328-L342\r\n\r\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sync/mpsc/sync.rs#L378-L382\r\n\r\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sync/mpsc/sync.rs#L402-L409\r\n\r\nhttps://github.com/rust-lang/rust/blob/607d6b00d4e0e0475b8de9d0c870b7126fdcdf6b/library/std/src/sync/mpsc/mod.rs#L1157-L1176\r\n\r\n# Must Remain `unreachable`\r\nNone so far.\r\n\r\n# Action\r\nI would love to send in a PR that resolves this issue! However, I do need some help and guidance from the library maintainers to ensure that undefined behavior is 110% avoided. Feedback on which parts are safe **regardless of platform/architecture/hardware** is much appreciated.\r\n\r\nAs mentioned earlier, I will be editing this issue as more people chime in. Thanks!", "closed_by": {"login": "BastiDood", "id": 39114273, "node_id": "MDQ6VXNlcjM5MTE0Mjcz", "avatar_url": "https://avatars.githubusercontent.com/u/39114273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BastiDood", "html_url": "https://github.com/BastiDood", "followers_url": "https://api.github.com/users/BastiDood/followers", "following_url": "https://api.github.com/users/BastiDood/following{/other_user}", "gists_url": "https://api.github.com/users/BastiDood/gists{/gist_id}", "starred_url": "https://api.github.com/users/BastiDood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BastiDood/subscriptions", "organizations_url": "https://api.github.com/users/BastiDood/orgs", "repos_url": "https://api.github.com/users/BastiDood/repos", "events_url": "https://api.github.com/users/BastiDood/events{/privacy}", "received_events_url": "https://api.github.com/users/BastiDood/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88606/timeline", "performed_via_github_app": null, "state_reason": "completed"}