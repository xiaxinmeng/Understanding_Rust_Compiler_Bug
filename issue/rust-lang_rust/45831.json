{"url": "https://api.github.com/repos/rust-lang/rust/issues/45831", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45831/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45831/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45831/events", "html_url": "https://github.com/rust-lang/rust/issues/45831", "id": 271833703, "node_id": "MDU6SXNzdWUyNzE4MzM3MDM=", "number": 45831, "title": "Does inlining work through the __rust_alloc symbol?", "user": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2017-11-07T13:37:08Z", "updated_at": "2017-11-25T08:38:54Z", "closed_at": "2017-11-25T08:38:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/rust-lang/rust/blob/1.21.0/src/liballoc_system/lib.rs#L24-L26 defines a `MIN_ALLOC` constant with this comment:\r\n\r\n```\r\n// The minimum alignment guaranteed by the architecture. This value is used to\r\n// add fast paths for low alignment values. In practice, the alignment is a\r\n// constant at the call site and the branch will be optimized out.\r\n```\r\n\r\nHowever, `System.alloc()` and friends are typically not used directly but from `std::heap::Heap.alloc()` and through symbols like:\r\n\r\n```rust\r\nextern \"Rust\" {\r\n    fn __rust_alloc(size: usize, align: usize, err: *mut u8) -> *mut u8;\r\n}\r\n```\r\n\r\nThis indirection allows `#[global_allocator]` to change which allocator `Heap` uses. Doesn\u2019t it also prevent inlining, constant-propagation of the alignment value, and elimination of the branch on comparing with `MIN_ALIGN`? Or can (Thin)LTO \u201csee through\u201d that indirection?\r\n\r\nIf the branch is *not* eliminated that\u2019s probably OK, its cost is probably small compared to the total cost of performing allocation. But if the second sentence of that comment is wrong we might want to remove it.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45831/timeline", "performed_via_github_app": null, "state_reason": "completed"}