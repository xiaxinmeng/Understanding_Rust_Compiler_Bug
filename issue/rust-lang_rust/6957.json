{"url": "https://api.github.com/repos/rust-lang/rust/issues/6957", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/6957/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/6957/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/6957/events", "html_url": "https://github.com/rust-lang/rust/issues/6957", "id": 15194816, "node_id": "MDU6SXNzdWUxNTE5NDgxNg==", "number": 6957, "title": "Systematic testing of our concurrency primitives", "user": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 120005, "node_id": "MDU6TGFiZWwxMjAwMDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-testsuite", "name": "A-testsuite", "color": "f7e101", "default": false, "description": "Area: The testsuite used to check the correctness of rustc"}, {"id": 234876, "node_id": "MDU6TGFiZWwyMzQ4NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-hard", "name": "E-hard", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Hard / a lot"}, {"id": 9695584, "node_id": "MDU6TGFiZWw5Njk1NTg0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-concurrency", "name": "A-concurrency", "color": "f7e101", "default": false, "description": "Area: Concurrency related issues."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-06-05T21:30:17Z", "updated_at": "2015-01-19T20:40:47Z", "closed_at": "2015-01-19T20:40:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@brson and I were talking about different strategies for verifying our concurrency primitives (task spawn/scheduling, pipes, arcs), specifically wondering if the technique I work on during my \"day job\" (i.e. grad student) could be applied.\n\nIn short, **systematic testing** means exploring the state space of possible test executions that can result from different thread interleavings. This depends on a notion of _decision points_, which are code locations where the testing framework \"should try\" to force threads to interleave in different ways. The set of decision points defines an _execution tree_ which represents the state space (size = {number of threads}^{number of decision points}). If there is a bug in some branches of the tree, but not others, that bug is a race condition.\n\nThough my research focuses on kernel-level testing, a colleague of mine at CMU has developed a tool for doing the same thing on userspace programs, called dBug (http://www.cs.cmu.edu/~jsimsa/dbug/). It uses LD_PRELOAD to interpose on library calls, such as pthread operations and file I/O.\n\nThere are two points which need consideration before introducing dBug and Rust to each other:\n- Threads vs tasks. dBug doesn't have a notion of userspace thread scheduling, and I think it would be quite difficult to model that and have any userspace systematic tester be able to force a single \"rust_sched_loop\" thread to switch to an arbitrary task. (This is essentially the problem that my research on doing it in kernel-space, is for!) But, lacking this functionality in the meantime, we could still configure rust to spawn each new task on a new scheduler of its own. This would sacrifice the ability to test the thread-rescheduling code within schedulers, but make it easier to test stuff at higher levels, such as pipes.\n- One of the final things Jiri (dBug's developer) is working on for his thesis is a domain-specific modelling language for expressing how concurrency primitives behave, so that dBug can understand their semantics (e.g., cond_wait puts a thread to sleep until a cond_signal on the same cvar). We might be able to use this to model pipes themselves, enabling coarser-grained testing of stuff that's implemented on top of pipes (e.g. linked task failure, RWARCs).\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/6957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/6957/timeline", "performed_via_github_app": null, "state_reason": "completed"}