{"url": "https://api.github.com/repos/rust-lang/rust/issues/97361", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97361/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97361/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97361/events", "html_url": "https://github.com/rust-lang/rust/issues/97361", "id": 1246780114, "node_id": "I_kwDOAAsO6M5KUFrS", "number": 97361, "title": "UX bug: apparent Cargo output (from `rustc`) tells me to use a flag that doesn't exist in Cargo, `-Z macro-backtrace`.", "user": {"login": "nathan-at-least", "id": 4369700, "node_id": "MDQ6VXNlcjQzNjk3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4369700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathan-at-least", "html_url": "https://github.com/nathan-at-least", "followers_url": "https://api.github.com/users/nathan-at-least/followers", "following_url": "https://api.github.com/users/nathan-at-least/following{/other_user}", "gists_url": "https://api.github.com/users/nathan-at-least/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathan-at-least/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathan-at-least/subscriptions", "organizations_url": "https://api.github.com/users/nathan-at-least/orgs", "repos_url": "https://api.github.com/users/nathan-at-least/repos", "events_url": "https://api.github.com/users/nathan-at-least/events{/privacy}", "received_events_url": "https://api.github.com/users/nathan-at-least/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-05-22T15:14:44Z", "updated_at": "2023-04-02T22:39:27Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Problem\r\n\r\nWhen I run a build command, Cargo appears to tell me I can add `-Z backtrace` on nightly for more diagnostics. When I try that, it says this is an unknown option.\r\n\r\n### Steps\r\n\r\n1. I'm writing my first (terrible, messy, proof of concept) proc macro which generates test code. I don't believe my project specific details are relevant for the most part, but they might be, so I describe those in the Notes section below. I believe for this bug the only relevant part is the `= note:` line.\r\n\r\n```\r\n$ RUSTFLAGS='--cfg procmacro2_semver_exempt' cargo build --tests                                                                                       \r\n   Compiling use-file-tests v0.1.0 (/home/user/hack/use-file-tests)                                                                                    \r\nerror: SourceFile { path: \"<parsed string 1>\", is_real: false } is not a real file.         \r\n --> src/lib.rs:3:1                                                                                                                                    \r\n  |                                                                                                                                                    \r\n3 | #[file_tests(\"my-test-dir\")]                                                                                                                       \r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                                                       \r\n  |                                                                                                                                                    \r\n  = note: this error originates in the attribute macro `file_tests` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n                                                                                                                                                       \r\nerror: could not compile `use-file-tests` due to previous error\r\n```\r\n\r\n2. Seeing the `note:`, attempt to do exactly what it says:\r\n\r\n```\r\n$ RUSTFLAGS='--cfg procmacro2_semver_exempt' cargo +nightly -Z macro-backtrace build --tests            \r\nerror: unknown `-Z` flag specified: macro-backtrace\r\n```\r\n\r\n3. Get confused, and check the help, observing no `macro-backtrace` flag appears:\r\n\r\n```\r\n$ RUSTFLAGS='--cfg procmacro2_semver_exempt' cargo +nightly -Z help\r\n\r\nAvailable unstable (nightly-only) flags:\r\n\r\n    -Z allow-features          -- Allow *only* the listed unstable features\r\n    -Z avoid-dev-deps          -- Avoid installing dev-dependencies if possible\r\n    -Z binary-dep-depinfo      -- Track changes to dependency artifacts\r\n    -Z bindeps                 -- Allow Cargo packages to depend on bin, cdylib, and staticlib crates, and use the artifacts built by those crates\r\n    -Z build-std               -- Enable Cargo to compile the standard library itself as part of a crate graph compilation\r\n    -Z build-std-features      -- Configure features enabled for the standard library itself when building the standard library\r\n    -Z config-include          -- Enable the `include` key in config files\r\n    -Z credential-process      -- Add a config setting to fetch registry authentication tokens by calling an external process\r\n    -Z check-cfg               -- Specify scope of compile-time checking of `cfg` names/values\r\n    -Z doctest-in-workspace    -- Compile doctests with paths relative to the workspace root\r\n    -Z doctest-xcompile        -- Compile and run doctests for non-host target using runner config\r\n    -Z dual-proc-macros        -- Build proc-macros for both the host and the target\r\n    -Z minimal-versions        -- Resolve minimal dependency versions instead of maximum\r\n    -Z mtime-on-use            -- Configure Cargo to update the mtime of used files\r\n    -Z multitarget             -- Allow passing multiple `--target` flags to the cargo subcommand selected\r\n    -Z no-index-update         -- Do not update the registry index even if the cache is outdated\r\n    -Z panic-abort-tests       -- Enable support to run tests with -Cpanic=abort\r\n    -Z host-config             -- Enable the [host] section in the .cargo/config.toml file\r\n    -Z http-registry           -- Support HTTP-based crate registries\r\n    -Z target-applies-to-host  -- Enable the `target-applies-to-host` key in the .cargo/config.toml file\r\n    -Z rustdoc-map             -- Allow passing external documentation mappings to rustdoc\r\n    -Z terminal-width          -- Provide a terminal width to rustc for error truncation\r\n    -Z unstable-options        -- Allow the usage of unstable options\r\n    -Z rustdoc-scrape-examples -- Allow rustdoc to scrape examples from reverse-dependencies for documentation\r\n\r\nRun with 'cargo -Z [FLAG] [SUBCOMMAND]'\r\n\r\nUnstable flags are only available on the nightly channel of Cargo, but this is the `stable` channel.\r\nSee https://doc.rust-lang.org/book/appendix-07-nightly-rust.html for more information about Rust release channels.\r\n\r\nSee https://doc.rust-lang.org/nightly/cargo/reference/unstable.html for more information about these flags.\r\n```\r\n\r\n### Possible Solution(s)\r\n\r\nI searched [Cargo open issues for `macro-backtrace`](https://github.com/rust-lang/cargo/issues?q=is%3Aissue+is%3Aopen+macro-backtrace) (as well as closed issues), and based on titles, this was the only potentially relevant ticket:\r\n\r\n- https://github.com/rust-lang/cargo/issues/6049\r\n\r\nA quick skim of that ticket makes it sound like Cargo is explicitly reifying `rustc` flags, so one explanation for this UX bug is that `rustc` emits the `note:` line, and it *does* provide that flag, but `cargo` doesn't parse/support it.\r\n\r\nI just realized that while writing this, and verified:\r\n\r\n```\r\n$ rustc +nightly -Z help | grep macro\r\n    -Z                            debug-macros=val -- emit line numbers debug info inside macros (default: no)\r\n    -Z                        dual-proc-macros=val -- load proc macros for both target and host, but only link to the target (default: no)\r\n    -Z                         macro-backtrace=val -- show macro backtraces (default: no)\r\n    -Z                    proc-macro-backtrace=val -- show backtraces for panics during proc-macro execution (default: no)\r\n    -Z                              span-debug=val -- forward proc_macro::Span's `Debug` impl to `Span`\r\n    -Z                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\r\n\r\n$ rustc +nightly --version\r\nrustc 1.63.0-nightly (9257f5aad 2022-05-21)\r\n```\r\n\r\nSo now it does seem like this hypothesis is correct. In that case, the solution is obvious: ensure `cargo` supports any flag that `rustc` instructs users to use. This would be the best UX.\r\n\r\nAn alternative solution: modify `rustc` to help users (like me, who almost never invoke `rustc` directly and aren't very aware of the `cargo` / `rustc` boundary) so that for every flag or configuration `rustc` suggests which `cargo` does not support, the error note explains this is a `rustc` feature, not a `cargo` feature. For example, maybe this note would be changed to:\r\n\r\n```\r\n  = note: this error originates in the attribute macro `file_tests` (in Nightly builds, run rustc directly (not cargo) with -Z macro-backtrace for more info)\r\n```\r\n\r\n### Notes\r\n\r\nMy usage of Cargo may be rarer or incorrect for this project. I wrote all of this before realizing the likely issue is that `rustc` is suggesting a flag which `cargo` does not support in the Solutions section above.\r\n\r\nHere are details I believe are most relevant:\r\n\r\n- I'm writing a proc-macro crate called `file-tests`. It is a standalone crate (not in a workspace).\r\n- I'm manually testing it with a crate called `use-file-tests` in a sibling directory, also outside of a workspace. I am still using relative path dependency: `[dependencies.file-tests] \\n path = \"../../file-tests` (I've never done this before outside of a workspace.)\r\n- I have been doing development and build on Cargo stable, so if there any build state cache bugs when adding `+nightly` after builds, they may be relevant. This also may be more relevant since the two crates aren't in a shared workspace?\r\n- The funky `RUSTFLAGS='--cfg procmacro2_semver_exempt'` is specific to [`proc-macro2`](https://docs.rs/proc-macro2/1.0.39/proc_macro2/#unstable-features) crate which I'm using for source file tracking.\r\n- The error message `error: SourceFile { path: \"<parsed string 1>\", is_real: false } is not a real file.` is generated by code in `test-files` because I require poking the FS around the test mod source file.\r\n\r\n\r\n### Version\r\n\r\n```text\r\n$ cargo version --verbose\r\ncargo 1.61.0 (a028ae4 2022-04-29)\r\nrelease: 1.61.0\r\ncommit-hash: a028ae42fc1376571de836be702e840ca8e060c2\r\ncommit-date: 2022-04-29\r\nhost: x86_64-unknown-linux-gnu\r\nlibgit2: 1.4.2 (sys:0.14.2 vendored)\r\nlibcurl: 7.80.0-DEV (sys:0.4.51+curl-7.80.0 vendored ssl:OpenSSL/1.1.1m)\r\nos: Debian 11 (bullseye) [64-bit]\r\n\r\n$ cargo +nightly version --verbose\r\ncargo 1.63.0-nightly (a4c1cd0eb 2022-05-18)\r\nrelease: 1.63.0-nightly\r\ncommit-hash: a4c1cd0eb6b18082a7e693f5a665548fe1534be4\r\ncommit-date: 2022-05-18\r\nhost: x86_64-unknown-linux-gnu\r\nlibgit2: 1.4.2 (sys:0.14.2 vendored)\r\nlibcurl: 7.80.0-DEV (sys:0.4.51+curl-7.80.0 vendored ssl:OpenSSL/1.1.1n)\r\nos: Debian 11 (bullseye) [64-bit]\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97361/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97361/timeline", "performed_via_github_app": null, "state_reason": null}