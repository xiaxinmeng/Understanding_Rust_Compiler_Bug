{"url": "https://api.github.com/repos/rust-lang/rust/issues/111214", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111214/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111214/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111214/events", "html_url": "https://github.com/rust-lang/rust/issues/111214", "id": 1696557965, "node_id": "I_kwDOAAsO6M5lH2uN", "number": 111214, "title": "llvm error: cfi: `Assertion 'cast<DISubprogram>(Scope)->describes(&MF->getFunction())' failed.`", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4574755208, "node_id": "LA_kwDOAAsO6M8AAAABEK05iA", "url": "https://api.github.com/repos/rust-lang/rust/labels/PG-exploit-mitigations", "name": "PG-exploit-mitigations", "color": "c2e0c6", "default": false, "description": "Project group: exploit mitigations"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-05-04T19:12:17Z", "updated_at": "2023-05-13T09:58:07Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\nbuilt my rustc with llvm debug assertions and `rustc treereduce.out -Clto -Zsanitizer=cfi -Copt-level=1 -Cdebuginfo=2`\r\n```rust\r\nuse std::collections::HashMap;\r\n\r\nfn copy<T: Copy>(&x: &T) -> T {\r\n    x\r\n}\r\n\r\nfn main() {\r\n    let arr = [(1, 1), (2, 2), (3, 3)];\r\n\r\n    let m1: HashMap<_, _> = arr.iter().map(copy).collect();\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen: *explanation*\r\n\r\nInstead, this happened: *explanation*\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\neac35583d2ffb5ed9e564dee0822c9a244058ee0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nwarning: unused variable: `m1`\r\n  --> treereduce.out:10:9\r\n   |\r\n10 |     let m1: HashMap<_, _> = arr.iter().map(copy).collect();\r\n   |         ^^ help: if this is intentional, prefix it with an underscore: `_m1`\r\n   |\r\n   = note: `#[warn(unused_variables)]` on by default\r\n\r\n!dbg attachment points at wrong subprogram for function\r\n!1642 = distinct !DISubprogram(name: \"reserve_rehash<(i32, i32), alloc::alloc::Global, hashbrown::map::make_hasher::{closure_env#0}<i32, i32, i32, std::collections::hash::map::RandomState>>\", linkageName: \"_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h66542d3b647441f2E\", scope: !1542, file: !818, line: 673, type: !1643, scopeLine: 673, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !62, templateParams: !1676, retainedNodes: !1671)\r\nptr @\"_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h66542d3b647441f2E\"\r\n  invoke void @_ZN4core9panicking5panic17he5f7c6779e1d5164E(ptr noalias noundef nonnull readonly align 1 %577, i64 noundef %578, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %579) #66\r\n          to label %580 unwind label %551, !dbg !3554\r\n!3554 = !DILocation(line: 0, scope: !1756)\r\n!1756 = distinct !DILexicalBlock(scope: !1754, file: !818, line: 1429, column: 36)\r\n!1726 = distinct !DISubprogram(name: \"resize_inner<alloc::alloc::Global>\", linkageName: \"_ZN9hashbrown3raw22RawTableInner$LT$A$GT$12resize_inner17hba10e3325cc12a41E\", scope: !774, file: !818, line: 1419, type: !1727, scopeLine: 1419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !62, templateParams: !633, retainedNodes: !1729)\r\nconflicting debug info for argument\r\n  call void @llvm.dbg.value(metadata ptr %0, metadata !2787, metadata !DIExpression()), !dbg !3661\r\n!1673 = !DILocalVariable(name: \"additional\", arg: 2, scope: !1642, file: !818, line: 675, type: !9)\r\n!2787 = !DILocalVariable(name: \"table\", arg: 2, scope: !2782, file: !818, line: 682, type: !822)\r\nconflicting debug info for argument\r\n  call void @llvm.dbg.value(metadata i64 %548, metadata !2788, metadata !DIExpression()), !dbg !3661\r\n!1674 = !DILocalVariable(name: \"hasher\", arg: 3, scope: !1642, file: !818, line: 676, type: !179)\r\n!2788 = !DILocalVariable(name: \"index\", arg: 3, scope: !2782, file: !818, line: 682, type: !9)\r\n!dbg attachment points at wrong subprogram for function\r\n!1642 = distinct !DISubprogram(name: \"reserve_rehash<(i32, i32), alloc::alloc::Global, hashbrown::map::make_hasher::{closure_env#0}<i32, i32, i32, std::collections::hash::map::RandomState>>\", linkageName: \"_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h66542d3b647441f2E\", scope: !1542, file: !818, line: 673, type: !1643, scopeLine: 673, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !62, templateParams: !1676, retainedNodes: !1671)\r\nptr @\"_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h66542d3b647441f2E\"\r\n  invoke void @_ZN4core9panicking5panic17he5f7c6779e1d5164E(ptr noalias noundef nonnull readonly align 1 @anon.263e188e0c7062297bf76a7be6bcc7e2.28, i64 noundef 47, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @anon.263e188e0c7062297bf76a7be6bcc7e2.29) #66\r\n          to label %584 unwind label %558, !dbg !3551\r\n!3551 = !DILocation(line: 0, scope: !1757)\r\n!1757 = distinct !DILexicalBlock(scope: !1755, file: !818, line: 1429, column: 36)\r\n!1727 = distinct !DISubprogram(name: \"resize_inner<alloc::alloc::Global>\", linkageName: \"_ZN9hashbrown3raw22RawTableInner$LT$A$GT$12resize_inner17hba10e3325cc12a41E\", scope: !774, file: !818, line: 1419, type: !1728, scopeLine: 1419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !62, templateParams: !633, retainedNodes: !1730)\r\nrustc: /home/matthias/vcs/github/rust_debug_assertions/src/llvm-project/llvm/lib/CodeGen/LexicalScopes.cpp:178: llvm::LexicalScope *llvm::LexicalScopes::getOrCreateRegularScope(const llvm::DILocalScope *): Assertion `cast<DISubprogram>(Scope)->describes(&MF->getFunction())' failed.\r\n[2]    3928429 IOT instruction  RUSTFLAGS=\"\" ~/.rustup/toolchains/local-debug-assertions/bin/rustc  -Clto\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111214/timeline", "performed_via_github_app": null, "state_reason": null}