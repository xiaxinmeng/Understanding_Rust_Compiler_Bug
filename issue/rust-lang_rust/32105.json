{"url": "https://api.github.com/repos/rust-lang/rust/issues/32105", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32105/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32105/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32105/events", "html_url": "https://github.com/rust-lang/rust/issues/32105", "id": 139094079, "node_id": "MDU6SXNzdWUxMzkwOTQwNzk=", "number": 32105, "title": "[MIR] Reconsider invoked function return value strategy", "user": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 36, "created_at": "2016-03-07T21:07:51Z", "updated_at": "2016-04-16T10:29:16Z", "closed_at": "2016-04-16T10:29:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently in MIR function calls look like this:\n\n```\ndestination = function(...) -> [...]\n```\n\nwhere destination is a lvalue of some sort. However this assignment is a little bit troublesome where under-the-covers we need to copy the return value and zero-fill the arguments after the call finishes.\n\nLLVM has two kind of cals `invoke` and `call`. `call` is a regular instruction, whereas `invoke` is a basic block terminator. There\u2019s no problem with the `call` instruction, because we can always produce a bunch of post-call code after `call` and then simply `br` into the destination block. `invoke`, however, does not give us that kind of freedom and we must branch into something right after the call. (remember, we still must to copy the return value and zero-fill the arguments!).\n\nPreviously we used to generate an intermediate block and translate the copy into that, but [it is problematic](https://github.com/nagisa/rust/blob/432460a6fc92e8baecbc4fa175345e78232fe2ed/src/librustc_trans/trans/mir/block.rs#L178) and gets even more-so with zeroing considered. Lately we\u2019ve moved to translating drops/copies straight into the target block (the `at_start` approach) \u2013 it turns out this is wrong in its current form, because the target block can easily have [more than one predecessor](http://is.gd/jL1N4T)!\n\nThe options considered and not considered are:\n- Pre-trans pass to add empty blocks for all invokes like that and just use `at_start` approach;\n  1. this is pretty clean in a sense that it is fully contained within trans and we get to see whole mirmap so we can do the transformation (something that\u2019s not possible generating blocks during trans);\n  2. lets us keep the `at_start` approach which is the cleanest one I\u2019ve thought up so far; but\n  3. generating blocks _correctly_ would be not-really-trivial.\n- @nikomatsakis had proposed having function return value as an rvalue which must appear inside the first statement in target block. I.e. something like\n  \n  ```\n  bb1: function(...) -> [bb2]\n  bb2: destination = funcret\n  ```\n  \n  This seems pretty clean, and we could also zero-out arguments as a part of `funcret`, but there\u2019s a few issues with this approach that come to mind:\n  1. funcret cannot be removed as part of optimisations (special case in optimisation passes);\n  2. we\u2019d have to somehow carry the state around trans?\n\nThat\u2019s all my thoughts so far. This is pretty important to get fixed, because it causes llvm assertions for some code.\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32105/timeline", "performed_via_github_app": null, "state_reason": "completed"}