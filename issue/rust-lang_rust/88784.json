{"url": "https://api.github.com/repos/rust-lang/rust/issues/88784", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88784/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88784/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88784/events", "html_url": "https://github.com/rust-lang/rust/issues/88784", "id": 992410333, "node_id": "MDU6SXNzdWU5OTI0MTAzMzM=", "number": 88784, "title": "[aarch64] Running unit tests with codegen-units=1 triggers errors when optimizing with vectorization", "user": {"login": "gbionescu", "id": 81714, "node_id": "MDQ6VXNlcjgxNzE0", "avatar_url": "https://avatars.githubusercontent.com/u/81714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gbionescu", "html_url": "https://github.com/gbionescu", "followers_url": "https://api.github.com/users/gbionescu/followers", "following_url": "https://api.github.com/users/gbionescu/following{/other_user}", "gists_url": "https://api.github.com/users/gbionescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/gbionescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gbionescu/subscriptions", "organizations_url": "https://api.github.com/users/gbionescu/orgs", "repos_url": "https://api.github.com/users/gbionescu/repos", "events_url": "https://api.github.com/users/gbionescu/events{/privacy}", "received_events_url": "https://api.github.com/users/gbionescu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-09-09T16:24:17Z", "updated_at": "2021-09-09T16:27:03Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "When adding `codegen-units=1` in the [firecracker](https://github.com/firecracker-microvm/firecracker) project we saw that some unit tests started failing on `aarch64` with rust 1.52.1.\r\n\r\nUpon further investigation, we identified [this loop](https://github.com/firecracker-microvm/firecracker/blob/main/src/arch/src/aarch64/regs.rs#L352) behaving differently depending on different compiler flags - details below.\r\n\r\n# Steps to reproduce\r\n\r\n1. Check out the branch that enables codegen-units=1 from https://github.com/gc-plp/firecracker/tree/codegen: `git clone -b codegen https://github.com/gc-plp/firecracker`\r\n2. Run `sudo ./tools/devtool shell -p` to launch a debug shell - firecracker uses a container to build binaries.\r\n3. To trigger the unit test failure, run `RUST_TEST_THREADS=1 RUST_BACKTRACE=1 RUSTFLAGS=\"-D warnings -C link-arg=-lgcc -C link-arg=-lfdt \" cargo test --release --target aarch64-unknown-linux-musl  --all --no-fail-fast` in the newly launched shell. This command is the verbose version of what is being executed in the integration test suite [here](https://github.com/firecracker-microvm/firecracker/blob/main/tests/integration_tests/build/test_unittests.py#L20).\r\n4. `vstate::vcpu::aarch64::tests::test_vcpu_save_restore_state` will hang.\r\n5. Run only that test that's hanging: `RUST_TEST_THREADS=1 RUST_BACKTRACE=1 RUSTFLAGS=\"-D warnings -C link-arg=-lgcc -C link-arg=-lfdt \" cargo test --release --target aarch64-unknown-linux-musl  --all --no-fail-fast -- vstate::vcpu::aarch64::tests::test_vcpu_save_restore_state`\r\n6. Will trigger: `process didn't exit successfully: `/firecracker/build/cargo_target/aarch64-unknown-linux-musl/release/deps/vmm-7a653c7da8c736da 'vstate::vcpu::aarch64::tests::test_vcpu_save_restore_state'` (signal: 11, SIGSEGV: invalid memory reference)` \r\n\r\nExpected result is to have the unit test pass as it happens without `codegen-units=1`.\r\n\r\n## Additional details\r\n\r\n### When the test fails, a coredump file is generated, showing that:\r\n```\r\nProgram terminated with signal SIGSEGV, Segmentation fault.\r\n#0  0x0000000000532630 in arch::aarch64::regs::save_core_registers ()\r\n``` \r\n\r\n### Adding `opt-level = 0` in Cargo.toml and rerunning, the test will pass:\r\n```\r\nrunning 1 test\r\ntest vstate::vcpu::aarch64::tests::test_vcpu_save_restore_state ... ok\r\n```\r\n\r\n### Adding `opt-level = 1` in Cargo.toml and rerunning will fail:\r\n```\r\ntest vstate::vcpu::aarch64::tests::test_vcpu_save_restore_state ... FAILED\r\n\r\nfailures:\r\n\r\n---- vstate::vcpu::aarch64::tests::test_vcpu_save_restore_state stdout ----\r\nthread 'main' panicked at 'Cannot save state of vcpu: SaveState(GetCoreRegister(Error(2), \"FP_VREG0\"))', src/vmm/src/vstate/vcpu/aarch64.rs:292:39\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/9bc8c42bb2f19e745a63f3445f1ac248fb015e53/library/std/src/panicking.rs:493:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/9bc8c42bb2f19e745a63f3445f1ac248fb015e53/library/core/src/panicking.rs:92:14\r\n   2: core::option::expect_none_failed\r\n             at /rustc/9bc8c42bb2f19e745a63f3445f1ac248fb015e53/library/core/src/option.rs:1329:5\r\n   3: vmm::vstate::vcpu::aarch64::tests::test_vcpu_save_restore_state\r\n   4: core::ops::function::FnOnce::call_once\r\n             at /rustc/9bc8c42bb2f19e745a63f3445f1ac248fb015e53/library/core/src/ops/function.rs:227:5\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n### Adding `opt-level = \"s\"` in Cargo.toml and rerunning will fail:\r\n```\r\nCaused by:\r\n  process didn't exit successfully: `/firecracker/build/cargo_target/aarch64-unknown-linux-musl/release/deps/vmm-47892dfea4706667 'vstate::vcpu::aarch64::tests::test_vcpu_save_restore_state'` (signal: 11, SIGSEGV: invalid memory reference)\r\n```\r\n\r\n### Adding `opt-level = \"z\"` in Cargo.toml and rerunning will pass:\r\n```\r\nrunning 1 test\r\ntest vstate::vcpu::aarch64::tests::test_vcpu_save_restore_state ... ok\r\n```\r\n\r\n### Adding `println!(\"{}\", i);` at line 353 in `./src/arch/src/aarch64/regs.rs` will:\r\n- with opt-level=1 it passes\r\n- with opt-level=3 it fails\r\n\r\n### Adding `println!(\"{:x}\", id);` at line 354 in `./src/arch/src/aarch64/regs.rs` will:\r\n- With opt-level=1 the test fails: \r\n`6040000000100054 6040000000100058 604000000010005c 6040000000100060 6040000000100064 6040000000100068 604000000010006c 6040000000100070 6040000000100074 6040000000100078 604000000010007c 6040000000100080 6040000000100084 6040000000100088 604000000010008c 6040000000100090 6040000000100094 6040000000100098 604000000010009c 60400000001000a0 60400000001000a4 60400000001000a8 60400000001000ac 60400000001000b0 60400000001000b4 60400000001000b8 60400000001000bc 60400000001000c0 60400000001000c4 60400000001000c8 60400000001000cc 60400000001000d0 60400000001000d4`\r\n\r\n- With opt-level=0 the test passes: \r\n`6040000000100054 6040000000100058 604000000010005c 6040000000100060 6040000000100064 6040000000100068 604000000010006c 6040000000100070 6040000000100074 6040000000100078 604000000010007c 6040000000100080 6040000000100084 6040000000100088 604000000010008c 6040000000100090 6040000000100094 6040000000100098 604000000010009c 60400000001000a0 60400000001000a4 60400000001000a8 60400000001000ac 60400000001000b0 60400000001000b4 60400000001000b8 60400000001000bc 60400000001000c0 60400000001000c4 60400000001000c8 60400000001000cc 60400000001000d0`\r\n\r\nNotice the extra `60400000001000d4` printed with opt-level=1.\r\n\r\n### Upgrading to Rust 1.54 will make the test pass\r\n\r\n***\r\n\r\nQuestions:\r\n- Could this be an LLVM issue? The MIR representation doesn't seem to change a lot when instrumenting the loop with the extra print statements. Both rust 1.52.1 and 1.54 seem to use LLVM 12, so there shouldn't be major differences, right?\r\n- Any idea if someone has stumbled upon this before?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88784/timeline", "performed_via_github_app": null, "state_reason": null}