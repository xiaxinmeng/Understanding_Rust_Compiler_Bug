{"url": "https://api.github.com/repos/rust-lang/rust/issues/3166", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3166/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3166/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3166/events", "html_url": "https://github.com/rust-lang/rust/issues/3166", "id": 6136284, "node_id": "MDU6SXNzdWU2MTM2Mjg0", "number": 3166, "title": "Borrowed pointers inside enums", "user": {"login": "Emm", "id": 33265, "node_id": "MDQ6VXNlcjMzMjY1", "avatar_url": "https://avatars.githubusercontent.com/u/33265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emm", "html_url": "https://github.com/Emm", "followers_url": "https://api.github.com/users/Emm/followers", "following_url": "https://api.github.com/users/Emm/following{/other_user}", "gists_url": "https://api.github.com/users/Emm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emm/subscriptions", "organizations_url": "https://api.github.com/users/Emm/orgs", "repos_url": "https://api.github.com/users/Emm/repos", "events_url": "https://api.github.com/users/Emm/events{/privacy}", "received_events_url": "https://api.github.com/users/Emm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2012-08-09T20:06:29Z", "updated_at": "2012-08-12T05:07:28Z", "closed_at": "2012-08-09T20:34:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code fails with:\n\n```\nargparse.rs:31:24: 34:21 error: mismatched types: expected `core::option::option<&str>` but found `core::option::option<&selfstr>` (reference with lifetime &self as defined on the block at 21:45 does not necessarily outlive reference with lifetime & as defined on the block at 21:45)\nargparse.rs:31                 banner: match self.banner {\nargparse.rs:32                         none => { none }\nargparse.rs:33                         some(value) => { some(value) }\nargparse.rs:34                     },\nerror: aborting due to previous error\n```\n\n``` rust\nmod argparse {\n    use std;\n\n    import std::map;\n    import either::{either, left, right};\n\n    struct Flag {\n        name: &str;\n        desc: &str;\n        short_name: option<&str>;\n        max_count: uint;\n        banner: option<&str>;\n        mut value: uint;\n    }\n\n    fn flag(name: &str, desc: &str) \u27f6\u2000 Flag {\n        Flag { name: name, desc: desc, short_name: none, max_count: 1, banner: none, value: 0 }\n    }\n\n    impl Flag {\n        fn short_name(self, s: &str) \u27f6\u2000 Flag {\n            let new_banner : option<&str> = match self.banner {\n                    none =>\u2000 { none }\n                    some(value) =>\u2000 { some(value) }\n                };\n            Flag {\n                name: self.name,\n                desc: self.desc,\n                short_name: some(s),\n                max_count: self.max_count,\n                banner: match self.banner {\n                        none =>\u2000 { none }\n                        some(value) =>\u2000 { some(value) }\n                    },\n                value: self.value\n            }\n        }\n    }\n}\n\nfn main () {\n    let f : argparse::Flag = argparse::flag(&\"flag\", &\"My flag\");\n}\n```\n\nI would expect it to compile, given that the lifetime of the value inside the option will be the same as the lifetime of the other fields.\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3166/timeline", "performed_via_github_app": null, "state_reason": "completed"}