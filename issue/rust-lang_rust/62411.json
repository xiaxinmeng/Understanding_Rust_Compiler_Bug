{"url": "https://api.github.com/repos/rust-lang/rust/issues/62411", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62411/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62411/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62411/events", "html_url": "https://github.com/rust-lang/rust/issues/62411", "id": 464650229, "node_id": "MDU6SXNzdWU0NjQ2NTAyMjk=", "number": 62411, "title": "Tracking issue for `indirect_structural_match` compatibility lint", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630636017, "node_id": "MDU6TGFiZWw2MzA2MzYwMTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-future-compatibility", "name": "C-future-compatibility", "color": "f5f1fd", "default": false, "description": "Category: future compatibility lints"}, {"id": 1622913351, "node_id": "MDU6TGFiZWwxNjIyOTEzMzUx", "url": "https://api.github.com/repos/rust-lang/rust/labels/lang-team-202x-edition", "name": "lang-team-202x-edition", "color": "fcbff6", "default": false, "description": "Something we may consider if we do another edition"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-07-05T13:50:10Z", "updated_at": "2022-03-30T12:14:24Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This is the **summary issue** for the `indirect_structural_match` future-compatibility warning and other related errors. The goal of this page is describe why this change was made and how you can fix\r\ncode that is affected by it. It also provides a place to ask questions or register a complaint if you feel the change should not be made. For more information on the policy around future-compatibility warnings, see our [breaking change policy guidelines][guidelines].\r\n\r\n[guidelines]: https://github.com/rust-lang/rfcs/blob/master/text/1589-rustc-bug-fix-procedure.md\r\n\r\n#### What is this lint about\r\n\r\nUses of a `const` item in a pattern are currently supposed to not rely on whether the semantics of matching a pattern are based on \"structural equality\" (i.e. unfolding the value of the `const` item into the pattern) or \"semantic equality\" (calling `PartialEq::eq`). See [RFC 1445][] for more discussion on this point.\r\n\r\n[RFC 1445]: https://github.com/rust-lang/rfcs/blob/master/text/1445-restrict-constants-in-patterns.md\r\n\r\nFor example, we currently reject the following code, because it could be used to detect which of the two semantics are used for matching patterns ([play](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=297e5f1e82bf4077413766902e08b1cf)):\r\n\r\n```rust\r\n// I am equal to anyone who shares my sum!\r\nstruct Plus(i32, i32);\r\n\r\nimpl PartialEq for Plus {\r\n    fn eq(&self, other: &Self) -> bool {\r\n        self.0 + self.1 == other.0 + other.1\r\n    }\r\n}\r\n\r\nimpl Eq for Plus { }\r\n\r\nconst ONE_PLUS_TWO: Plus = Plus(1, 2);\r\n\r\nfn main() {\r\n    if let ONE_PLUS_TWO = Plus(3, 0) {\r\n        println!(\"semantic!\");\r\n    } else {\r\n        println!(\"structural!\");\r\n    }\r\n}\r\n```\r\n\r\nHowever, the code to enforce adherence to RFC 1445 missed some cases. The compiler incorrectly accepted the following variant of the above code ([play](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=f0991c98397c0859741b2c7e7b947f56)):\r\n\r\n```rust\r\nconst ONE_PLUS_TWO: & &Plus = & &Plus(1, 2);\r\n\r\nfn main() {\r\n    if let ONE_PLUS_TWO = & &Plus(3, 0) {\r\n        println!(\"semantic!\");\r\n    } else {\r\n        println!(\"structural!\");\r\n    }\r\n}\r\n```\r\n\r\nSince we have not yet decided how to resolve this problem for the long term, it is best to alert users that they are using a corner of the language that was not completely specified. (To be clear: The compiler will use either semantic *or* structural equality, and its choice will not introduce unsoundness; but it may yield very *surprising* behavior for the user, depending on how they have implemented `PartialEq`.)\r\n\r\n#### How to fix this warning/error\r\n\r\nHere are three options:\r\n\r\n##### 1. Change const item itself\r\n\r\nChange the `const` item referenced in the pattern to use only types that derive `PartialEq` and `Eq`.\r\n\r\nIn our running example, that would correspond to changing the code to use `derive` instead of explicit `impl`: \r\n\r\n```rust\r\n// I am equal to anyone who shares my sum!\r\nstruct Plus(i32, i32);\r\n\r\nimpl PartialEq for Plus {\r\n    fn eq(&self, other: &Self) -> bool {\r\n        self.0 + self.1 == other.0 + other.1\r\n    }\r\n}\r\n\r\nimpl Eq for Plus { }\r\n```\r\n\r\nbecomes: \r\n\r\n```rust\r\n// I am no longer equal to all who share my sum!\r\n#[derive(PartialEq, Eq)]\r\nstruct Plus(i32, i32);\r\n```\r\n\r\nOf course, in this particular example, this is a non-semantics preserving change for the program at large, since presumably the original designer *wanted* the previous semantics for `PartialEq`. The main reason we point it out (and in fact, point it out first) is that in many cases, switching to `#[derive(PartialEq, Eq)]` will be both correct and the simplest fix.\r\n\r\n##### 2. Change pattern to call `==` explicitly\r\n\r\nIf semantic equality is desired, change the pattern to bind the input to a variable and call the `==` operator (this may require switching from `if let` to `match` until let_chains are stabilized).\r\n\r\nIn our running example (adapted slightly to use `match`):\r\n\r\n```rust\r\n    match & &Plus(3, 0) {\r\n        ONE_PLUS_TWO => println!(\"semantic!\"),\r\n        _ => println!(\"structural!\"),\r\n    }\r\n```\r\n\r\nbecomes:\r\n\r\n```rust\r\n    match & &Plus(3, 0) {\r\n        sum if sum == ONE_PLUS_TWO => println!(\"semantic!\"),\r\n        _ => println!(\"structural!\"),\r\n    }\r\n```\r\n\r\n\r\n##### 3. Change pattern to inline structural form\r\n  \r\nIf structural equality is desired, inline the right-hand side of the const as an explicit pattern.\r\n\r\nIn our running example (adapted slightly to use `match`):\r\n\r\n```rust\r\n    match & &Plus(3, 0) {\r\n        ONE_PLUS_TWO => println!(\"semantic!\"),\r\n        _ => println!(\"structural!\"),\r\n    }\r\n```\r\n\r\nbecomes:\r\n\r\n```rust\r\n    match & &Plus(3, 0) {\r\n        & &Plus(1, 2) => println!(\"semantic!\"),\r\n        _ => println!(\"structural!\"),\r\n    }\r\n```\r\n\r\n#### When will this warning become a hard error?\r\n                    \r\nAt the beginning of each 6-week release cycle, the Rust compiler team will review the set of outstanding future compatibility warnings and nominate some of them for **Final Comment Period**. Toward the end of the cycle, we will review any comments and make a final determination whether to convert the warning into a hard error or remove it entirely.\r\n\r\n#### Current status\r\n\r\n * [x] PR #62339 implements the lint as warn by default (in a slightly broken fashion)\r\n * [x] PR #62623 changes the lint to be allow by default to work around a bug\r\n * [x] PR #70743 returns the lint to warn by default\r\n * [ ] PR ? makes lint deny by default\r\n * [ ] PR ? makes lint a hard error.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62411/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62411/timeline", "performed_via_github_app": null, "state_reason": null}