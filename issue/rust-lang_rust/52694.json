{"url": "https://api.github.com/repos/rust-lang/rust/issues/52694", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52694/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52694/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52694/events", "html_url": "https://github.com/rust-lang/rust/issues/52694", "id": 344396810, "node_id": "MDU6SXNzdWUzNDQzOTY4MTA=", "number": 52694, "title": "Miscompilation while working on PR #50882", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2018-07-25T11:03:49Z", "updated_at": "2019-02-14T00:42:10Z", "closed_at": "2019-02-14T00:42:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "(Moving this to a separate issue because PR #50882 is already full of noise)\r\nReduced STR:\r\n- Take current rust master\r\n- Apply the following patch:\r\n```diff\r\ndiff --git a/src/liballoc/alloc.rs b/src/liballoc/alloc.rs\r\nindex 84bd275..4df7730 100644\r\n--- a/src/liballoc/alloc.rs\r\n+++ b/src/liballoc/alloc.rs\r\n@@ -172,7 +172,7 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\r\n     // We do not allocate for Box<T> when T is ZST, so deallocation is also not necessary.\r\n     if size != 0 {\r\n         let layout = Layout::from_size_align_unchecked(size, align);\r\n-        dealloc(ptr as *mut u8, layout);\r\n+        Global.dealloc(NonNull::new_unchecked(ptr).cast(), layout);\r\n     }\r\n }\r\n \r\n```\r\n- Compile rust against the *system* llvm (5 or 6)\r\n- Run libstd tests (`x.py test src/libstd --stage 1`)\r\n\r\nWhat happens then is that `sync::once::tests::wait_for_force_to_finish` fails with:\r\n```\r\nthread '<unnamed>' panicked at 'assertion failed: t1.join().is_ok()', libstd/sync/once.rs:582:9\r\n```\r\n\r\nThe disassembly for `wait_for_force_to_finish` only contains *one* call to `std::thread::JoinHandle::join`, instead of the expected two when the code is not miscompiled. That call is followed by a test that jumps to a panic when the result of `JoinHandle::join` is ... `Ok(())`:\r\n\r\n```asm\r\n   93371:       e8 aa fd 07 00          callq  113120 <_ZN41_$LT$std..thread..JoinHandle$LT$T$GT$$GT\r\n$4join17h0fb3b129ec2e38aeE>\r\n   93376:       48 89 c3                mov    %rax,%rbx\r\n   93379:       49 89 d7                mov    %rdx,%r15\r\n   9337c:       48 85 db                test   %rbx,%rbx\r\n   9337f:       74 1b                   je     9339c <_ZN3std4sync4once5tests24wait_for_force_to_fin\r\nish17h6199051fcaa3ff6aE+0x21c>\r\n```\r\n\r\nThat `JoinHandle::join` returns a `Result<(), Box<Any>>`, and `Ok(())` is represented as `(0, whatever)`. The destination of that jump is the panic code.\r\n\r\nAt some point, I'm not entirely sure with what state of the tree, it was even better. The error was:\r\n```\r\nthread '<unnamed>' panicked at 'assertion failed: t2.join().is_ok()', libstd/sync/once.rs:583:9\r\n```\r\n\r\nAnd there were two calls to `std::thread::JoinHandle::join`, as expected, but they didn't have the same result handling:\r\n```asm\r\n   93c79:       e8 32 c5 07 00          callq  1101b0 <_ZN41_$LT$std..thread..JoinHandle$LT$T$GT$$GT$4join17hc6e7f9bb7d72483aE>\r\n   93c7e:       48 89 c3                mov    %rax,%rbx\r\n   93c81:       49 89 d7                mov    %rdx,%r15\r\n   93c84:       48 85 db                test   %rbx,%rbx\r\n   93c87:       75 5e                   jne    93ce7 <_ZN3std4sync4once5tests24wait_for_force_to_finish17h13c0ef8dd5eb6a3aE+0x267>\r\n(snip)\r\n   93c9f:       e8 0c c5 07 00          callq  1101b0 <_ZN41_$LT$std..thread..JoinHandle$LT$T$GT$$GT$4join17hc6e7f9bb7d72483aE>\r\n   93ca4:       48 89 c3                mov    %rax,%rbx\r\n   93ca7:       49 89 d7                mov    %rdx,%r15\r\n   93caa:       48 85 db                test   %rbx,%rbx\r\n   93cad:       74 1b                   je     93cca <_ZN3std4sync4once5tests24wait_for_force_to_finish17h13c0ef8dd5eb6a3aE+0x24a>\r\n```\r\nThe destination of both jumps is panic code. The first jump, corresponding to `t1.join().is_ok()` is correct, and the second, corresponding to `t2.join().is_ok()` is broken, thus the test failure.\r\n\r\nEven better: this doesn't happen when compiling with the bundled llvm. It also doesn't happen when extracting the test from libstd and compiling with a faulty compiler. It seems the fact that it's part of libstd, and that most of libstd is compiled along the test, plays a role.\r\n\r\nI'm trying to get the corresponding mir and llvm-ir.", "closed_by": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52694/timeline", "performed_via_github_app": null, "state_reason": "completed"}