{"url": "https://api.github.com/repos/rust-lang/rust/issues/112569", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112569/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112569/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112569/events", "html_url": "https://github.com/rust-lang/rust/issues/112569", "id": 1753625954, "node_id": "I_kwDOAAsO6M5ohjVi", "number": 112569, "title": "`async_fn_in_trait` and `return_type_notation` cause awkward awaits", "user": {"login": "djkoloski", "id": 7554649, "node_id": "MDQ6VXNlcjc1NTQ2NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/7554649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djkoloski", "html_url": "https://github.com/djkoloski", "followers_url": "https://api.github.com/users/djkoloski/followers", "following_url": "https://api.github.com/users/djkoloski/following{/other_user}", "gists_url": "https://api.github.com/users/djkoloski/gists{/gist_id}", "starred_url": "https://api.github.com/users/djkoloski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djkoloski/subscriptions", "organizations_url": "https://api.github.com/users/djkoloski/orgs", "repos_url": "https://api.github.com/users/djkoloski/repos", "events_url": "https://api.github.com/users/djkoloski/events{/privacy}", "received_events_url": "https://api.github.com/users/djkoloski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-06-12T21:30:25Z", "updated_at": "2023-06-13T01:53:36Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**This bug is not exclusively related to the unstable `async_fn_in_trait` and `return_type_notation`, but the ergonomics of these features is an important contributing factor.**\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#![feature(\r\n    async_fn_in_trait,\r\n    return_type_notation,\r\n)]\r\n\r\nuse tokio::task::{JoinHandle, spawn};\r\n\r\ntrait Foo: Send {\r\n    async fn bar(&self) -> i32;\r\n}\r\n\r\nfn thing(factory: impl Foo<bar(): Send> + 'static) -> JoinHandle<i32> {\r\n    spawn(async move { factory.bar().await })\r\n}\r\n```\r\n\r\nAnd got this error message:\r\n\r\n```rust\r\nerror: future cannot be sent between threads safely\r\n   --> src/lib.rs:13:11\r\n    |\r\n13  |     spawn(async move { factory.bar().await })\r\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\r\n    |\r\nnote: future is not `Send` as this value is used across an await\r\n   --> src/lib.rs:13:38\r\n    |\r\n13  |     spawn(async move { factory.bar().await })\r\n    |                        -------       ^^^^^ - `factory` is later dropped here\r\n    |                        |             |\r\n    |                        |             await occurs here, with `factory` maybe used later\r\n    |                        has type `&impl Foo<bar() : Send> + 'static` which is not `Send`\r\nhelp: consider moving this into a `let` binding to create a shorter lived borrow\r\n   --> src/lib.rs:13:24\r\n    |\r\n13  |     spawn(async move { factory.bar().await })\r\n    |                        ^^^^^^^^^^^^^\r\nnote: required by a bound in `tokio::spawn`\r\n   --> /usr/local/google/home/dkoloski/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.28.2/src/task/spawn.rs:163:21\r\n    |\r\n161 |     pub fn spawn<T>(future: T) -> JoinHandle<T::Output>\r\n    |            ----- required by a bound in this function\r\n162 |     where\r\n163 |         T: Future + Send + 'static,\r\n    |                     ^^^^ required by this bound in `spawn`\r\nhelp: consider further restricting this bound\r\n    |\r\n12  | fn thing(factory: impl Foo<bar(): Send> + 'static + std::marker::Sync) -> JoinHandle<i32> {\r\n    |                                                   +++++++++++++++++++\r\n```\r\n\r\nFirst things first, this diagnostic is 100% correct. Making either of these changes fixes the issue. However, this is a very annoying problem that will probably get worse as these features stabilize.\r\n\r\nThe root of the issue is that the `impl Foo<..> + 'static` parameter is opaque and so conservatively does not implement `Sync`. That's the fix suggested second in the diagnostic. We really don't need it to impl `Sync` so it doesn't make sense to do this.\r\n\r\nThe reason why it does need to implement `Sync` is because a reference to it is being held across an await point. However, I didn't make this reference - my argument was auto-ref'd to call `bar()` and that temporary is living until the end of the statement (and thus across an await point). I don't think this behavior makes sense, and so it may make sense to change it in the next edition.\r\n\r\nYou can reproduce this behavior without any nightly or unstable features with the following code:\r\n\r\n```rust\r\nuse std::{cell::Cell, future::Future};\r\nuse tokio::task::{JoinHandle, spawn};\r\n\r\nstruct Foo(Cell<i32>);\r\n\r\nimpl Foo {\r\n    fn bar(&self) -> impl Future<Output = i32> + '_ + Send {\r\n        async { 10 }\r\n    }\r\n}\r\n\r\nfn thing(factory: Foo) -> JoinHandle<i32> {\r\n    spawn(async move { factory.bar().await })\r\n}\r\n```\r\n\r\nBut it's not quite as interesting.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.72.0-nightly (37998ab50 2023-06-11)\r\nbinary: rustc\r\ncommit-hash: 37998ab508d5d9fa0d465d7b535dc673087dda8f\r\ncommit-date: 2023-06-11\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.72.0-nightly\r\nLLVM version: 16.0.5\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112569/timeline", "performed_via_github_app": null, "state_reason": null}