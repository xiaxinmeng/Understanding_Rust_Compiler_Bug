{"url": "https://api.github.com/repos/rust-lang/rust/issues/57525", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57525/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57525/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57525/events", "html_url": "https://github.com/rust-lang/rust/issues/57525", "id": 398424775, "node_id": "MDU6SXNzdWUzOTg0MjQ3NzU=", "number": 57525, "title": "rustdoc support for per-argument documentation", "user": {"login": "kvark", "id": 107301, "node_id": "MDQ6VXNlcjEwNzMwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/107301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvark", "html_url": "https://github.com/kvark", "followers_url": "https://api.github.com/users/kvark/followers", "following_url": "https://api.github.com/users/kvark/following{/other_user}", "gists_url": "https://api.github.com/users/kvark/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvark/subscriptions", "organizations_url": "https://api.github.com/users/kvark/orgs", "repos_url": "https://api.github.com/users/kvark/repos", "events_url": "https://api.github.com/users/kvark/events{/privacy}", "received_events_url": "https://api.github.com/users/kvark/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 234948, "node_id": "MDU6TGFiZWwyMzQ5NDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-attributes", "name": "A-attributes", "color": "f7e101", "default": false, "description": "Area: #[attributes(..)]"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2019-01-11T19:37:54Z", "updated_at": "2023-01-12T16:59:34Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It appears to me that this pattern of documenting function arguments has become an informal standard:\r\n```rust\r\n    /// Supplies a new frame to WebRender.\r\n    ///\r\n    /// Non-blocking, it notifies a worker process which processes the display list.\r\n    ///\r\n    /// Note: Scrolling doesn't require an own Frame.\r\n    ///\r\n    /// Arguments:\r\n    ///\r\n    /// * `document_id`: Target Document ID.\r\n    /// * `epoch`: The unique Frame ID, monotonically increasing.\r\n    /// * `background`: The background color of this pipeline.\r\n    /// * `viewport_size`: The size of the viewport for this frame.\r\n    /// * `pipeline_id`: The ID of the pipeline that is supplying this display list.\r\n    /// * `content_size`: The total screen space size of this display list's display items.\r\n    /// * `display_list`: The root Display list used in this frame.\r\n    /// * `preserve_frame_state`: If a previous frame exists which matches this pipeline\r\n    ///                           id, this setting determines if frame state (such as scrolling\r\n    ///                           position) should be preserved for this new display list.\r\n    pub fn set_display_list(\r\n        &mut self,\r\n        epoch: Epoch,\r\n        background: Option<ColorF>,\r\n        viewport_size: LayoutSize,\r\n        (pipeline_id, content_size, display_list): (PipelineId, LayoutSize, BuiltDisplayList),\r\n        preserve_frame_state: bool,\r\n) {...}\r\n```\r\n\r\nIt's quite sub-optimal currently for a number of reasons:\r\n  - have to repeat argument names\r\n  - separate block of argument docs versus arguments themselves\r\n  - just a lot of noise\r\n\r\nSo not only it's not exactly most convenient, it's also easy to get the docs de-synchronized from the code (notice the `document_id` above ^). It would be much better if we could do this instead:\r\n```rust\r\n    /// Supplies a new frame to WebRender.\r\n    ///\r\n    /// Non-blocking, it notifies a worker process which processes the display list.\r\n    ///\r\n    /// Note: Scrolling doesn't require an own Frame.\r\n    pub fn set_display_list(\r\n        &mut self,\r\n        /// Unique Frame ID, monotonically increasing.\r\n        epoch: Epoch,\r\n        /// Background color of this pipeline.\r\n        background: Option<ColorF>,\r\n        /// Size of the viewport for this frame.\r\n        viewport_size: LayoutSize,\r\n        /// The ID of the pipeline that is supplying this display list,\r\n        /// the total screen space size of this display list's display items,\r\n        /// and the root Display list used in this frame.\r\n        (pipeline_id, content_size, display_list): (PipelineId, LayoutSize, BuiltDisplayList),\r\n        /// If a previous frame exists which matches this pipeline id,\r\n        /// this setting determines if frame state (such as scrolling position)\r\n        /// should be preserved for this new display list.\r\n        preserve_frame_state: bool,\r\n) {...}\r\n```\r\n\r\nDoes that sound remotely possible? With an assumption that the latter case would produce near-identical documentation to the former.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57525/reactions", "total_count": 168, "+1": 133, "-1": 3, "laugh": 0, "hooray": 0, "confused": 0, "heart": 26, "rocket": 0, "eyes": 6}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57525/timeline", "performed_via_github_app": null, "state_reason": null}