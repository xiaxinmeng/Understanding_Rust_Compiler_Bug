{"url": "https://api.github.com/repos/rust-lang/rust/issues/69099", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69099/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69099/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69099/events", "html_url": "https://github.com/rust-lang/rust/issues/69099", "id": 564091110, "node_id": "MDU6SXNzdWU1NjQwOTExMTA=", "number": 69099, "title": "Tracking Issue for `std::cell::{Ref, RefMut}::leak`", "user": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-12T15:50:11Z", "updated_at": "2022-11-15T11:36:58Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#68712 adds methods to convert `RefCell` guards `Ref`/`RefMut` into references with the lifetime of the underlying cell.\r\n\r\nThe feature gate for the issue is `#![feature(cell_leak)]`.\r\n\r\n### Unresolved Questions\r\n\r\n- [ ] Should similar methods be provided for `MutexGuard` and  `RwLockReadGuard`/`RwLockWriteGuard`?\r\n- [ ] Should `unsafe` methods be added to forcefully revert a leak?\r\n- [ ] For `undo_leak`, would it make more sense not to return a reference (i.e., separate this from `get_mut`)?\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69099/reactions", "total_count": 18, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 3, "eyes": 7}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69099/timeline", "performed_via_github_app": null, "state_reason": null}