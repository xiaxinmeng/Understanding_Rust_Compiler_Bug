{"url": "https://api.github.com/repos/rust-lang/rust/issues/54753", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54753/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54753/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54753/events", "html_url": "https://github.com/rust-lang/rust/issues/54753", "id": 365928008, "node_id": "MDU6SXNzdWUzNjU5MjgwMDg=", "number": 54753, "title": "Insufficiently clear explanation of E0310", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-02T14:34:55Z", "updated_at": "2023-01-05T21:59:14Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following program ([Playground](https://play.rust-lang.org/?gist=38c9aaff864faffb6c50e4fcdbb5f148&version=stable&mode=debug&edition=2015)):\r\n\r\n```rust\r\npub struct Foo<T>(T, &'static str);\r\n\r\npub trait Bar {\r\n    fn baz(self) -> Box<dyn Baz>;\r\n}\r\n\r\npub struct Bazzzz<T>(T, &'static str);\r\n\r\npub trait Baz {}\r\nimpl<T> Baz for Bazzzz<T> {}\r\n\r\nimpl<T> Bar for Foo<T> {\r\n    fn baz(self) -> Box<dyn Baz> {\r\n        Box::new(Bazzzz(self.0, self.1))\r\n    }\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nerrors with\r\n\r\n```\r\nerror[E0310]: the parameter type `T` may not live long enough\r\n  --> src/main.rs:14:9\r\n   |\r\n12 | impl<T> Bar for Foo<T> {\r\n   |      - help: consider adding an explicit lifetime bound `T: 'static`...\r\n13 |     fn baz(self) -> Box<dyn Baz> {\r\n14 |         Box::new(Bazzzz(self.0, self.1))\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\nnote: ...so that the type `Bazzzz<T>` will meet its required lifetime bounds\r\n  --> src/main.rs:14:9\r\n   |\r\n14 |         Box::new(Bazzzz(self.0, self.1))\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0310`.\r\nerror: Could not compile `playground`.\r\n```\r\n\r\nFrom reading the explanation of `E0310`, which only mentions the situation in which `T` is used behind a static reference, e.g., `foo: &'static T`, I really had no idea what was going on. It seems that other people have had similar issues with this (e.g. https://stackoverflow.com/questions/40053550/the-compiler-suggests-i-add-a-static-lifetime-because-the-parameter-type-may-no ).\r\n\r\nThe explanation of E0310 should be improved to make it more clear why `T: 'static` is necessary, and what alternatives are there. \r\n\r\nWhat confused me most is that `T` was not used in any reference type of the example above, but it was only used behind a reference in the example of the error message explanation.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54753/timeline", "performed_via_github_app": null, "state_reason": null}