{"url": "https://api.github.com/repos/rust-lang/rust/issues/56965", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56965/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56965/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56965/events", "html_url": "https://github.com/rust-lang/rust/issues/56965", "id": 392374961, "node_id": "MDU6SXNzdWUzOTIzNzQ5NjE=", "number": 56965, "title": "Docs: std::alloc::set_alloc_error_hook clarifications", "user": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-18T23:11:31Z", "updated_at": "2018-12-27T16:39:55Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In using this function I am wondering a few things:\r\n\r\n- What happens if I oom while handling an oom? Is the oom handler called again? Does the process immediately abort (ala panic)?\r\n\r\n- Does triggering oom remove the custom oom handler? The presence of `take_alloc_error_hook` makes it seem like that may the case, but it is not. It looks like the custom handler stays in place through its invocation. Docs would be better to mention that it's possible to oom recursively and invoke your oom handler recursively.\r\n\r\n- Is OOM the only time that memory allocation fails? The document doesn't mention \"out of memory\", but the situation this handles is commonly called \"OOM\". The docs would better mention \"out of memory\" and whether there is a distinction between allocation failure types.\r\n\r\n- Does `take_alloc_error_hook` restore the default error hook?\r\n\r\nAre the answers to these questions known and intended? Please add them to the docs.\r\n\r\nHere are some harder questions:\r\n\r\nCan I and should I try to recover from an oom? The oom handling mechanism calls abort after calling the oom handler, but what if I panic in the handler?\r\n\r\nI could empty my caches or otherwise mess with the allocator, panic, catch the panic, and try to continue. Is that a valid and intended use case?\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56965/timeline", "performed_via_github_app": null, "state_reason": null}