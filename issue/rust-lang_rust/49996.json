{"url": "https://api.github.com/repos/rust-lang/rust/issues/49996", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49996/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49996/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49996/events", "html_url": "https://github.com/rust-lang/rust/issues/49996", "id": 314597734, "node_id": "MDU6SXNzdWUzMTQ1OTc3MzQ=", "number": 49996, "title": "Surprising type inference on method call without explicit turbo-fish", "user": {"login": "RSSchermer", "id": 3153509, "node_id": "MDQ6VXNlcjMxNTM1MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3153509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RSSchermer", "html_url": "https://github.com/RSSchermer", "followers_url": "https://api.github.com/users/RSSchermer/followers", "following_url": "https://api.github.com/users/RSSchermer/following{/other_user}", "gists_url": "https://api.github.com/users/RSSchermer/gists{/gist_id}", "starred_url": "https://api.github.com/users/RSSchermer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RSSchermer/subscriptions", "organizations_url": "https://api.github.com/users/RSSchermer/orgs", "repos_url": "https://api.github.com/users/RSSchermer/repos", "events_url": "https://api.github.com/users/RSSchermer/events{/privacy}", "received_events_url": "https://api.github.com/users/RSSchermer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-04-16T10:51:07Z", "updated_at": "2018-08-27T16:06:18Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Please excuse the lack of specificity in the title, it reflects my lack of understanding what is going on here.\r\n\r\nHere's a distilled example of what I'm going for:\r\n\r\n```rust\r\ntrait FooMut {\r\n    type Baz: 'static;\r\n\r\n    fn bar<'a, I>(self, iterator: &'a I) where for <'b> &'b I: IntoIterator<Item= &'b &'a Self::Baz>;\r\n}\r\n\r\nstruct DelegatingFooMut<T> where T: FooMut {\r\n    delegate: T\r\n}\r\n\r\nimpl<T> FooMut for DelegatingFooMut<T> where T: FooMut {\r\n    type Baz = DelegatingBaz<T::Baz>;\r\n\r\n    fn bar<'a, I>(self, collection: &'a I) where for <'b> &'b I: IntoIterator<Item= &'b &'a Self::Baz> {\r\n        let collection = collection.into_iter().map(|b| &b.delegate);\r\n\r\n        self.delegate.bar(&collection)\r\n    }\r\n}\r\n\r\nstruct DelegatingBaz<T> {\r\n    delegate: T\r\n}\r\n```\r\n([Play](https://play.rust-lang.org/?gist=3428bfa4fc81db0b73aaa66e76db7d5e&version=nightly))\r\n\r\nThis fails to compile (on stable and nightly) with:\r\n\r\n```\r\nerror[E0271]: type mismatch resolving `for<'b> <&'b I as std::iter::IntoIterator>::Item == &'b &<T as FooMut>::Baz`\r\n  --> src/main.rs:17:23\r\n   |\r\n17 |         self.delegate.bar(&collection)\r\n   |                       ^^^ expected struct `DelegatingBaz`, found associated type\r\n   |\r\n   = note: expected type `&&'a DelegatingBaz<<T as FooMut>::Baz>`\r\n              found type `&&<T as FooMut>::Baz`\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:17:27\r\n   |\r\n17 |         self.delegate.bar(&collection)\r\n   |                           ^^^^^^^^^^^ expected type parameter, found struct `std::iter::Map`\r\n   |\r\n   = note: expected type `&I`\r\n              found type `&std::iter::Map<<&I as std::iter::IntoIterator>::IntoIter, [closure@src/main.rs:15:53: 15:68]>`\r\n```\r\n\r\nI played around a bit and found that changing the `bar` implementation to the following does compile:\r\n\r\n```rust\r\nfn bar<'a, I>(self, collection: &'a I) where for <'b> &'b I: IntoIterator<Item= &'b &'a Self::Baz> {\r\n    let collection: Vec<&<T as FooMut>::Baz> = collection.into_iter().map(|b| &b.delegate).collect();\r\n\r\n    self.delegate.bar::<Vec<&<T as FooMut>::Baz>>(&collection)\r\n}\r\n```\r\n([Play](https://play.rust-lang.org/?gist=a2027c40f0fa2f0c07256d0e45328543&version=nightly))\r\n\r\nBut only with the turbo-fish on the call to `self.delegate.bar`; if I remove the turbo-fish it once again fails to compile:\r\n\r\n```rust\r\nfn bar<'a, I>(self, collection: &'a I) where for <'b> &'b I: IntoIterator<Item= &'b &'a Self::Baz> {\r\n    let collection: Vec<&<T as FooMut>::Baz> = collection.into_iter().map(|b| &b.delegate).collect();\r\n\r\n    self.delegate.bar(&collection)\r\n}\r\n```\r\n([Play](https://play.rust-lang.org/?gist=d5bd0f6256af3c82dd4973be19269045&version=nightly))\r\n\r\nThis surprised me. From the error it seems like the compiler infers the type-parameter on the call to the delegate to be the same as the type parameter on the outer (delegating) method. I am not completely sure if this is a bug or intended behavior. If this isn't a bug I was hoping someone would perhaps be able to give me some insight into the what and why and a possible work-around. \r\n\r\nWhile collecting into a  `Vec` works as a workaround for now, I would really like to avoid having to allocate. I'm assuming that I might be able to make the original example work if I can work out a type for a turbo-fish there, but `std::iter::Map` seems to take the concrete type of its closure as a type parameter and I cannot figure out how to represent that in the turbo-fish type (if that's possible at all). ", "closed_by": {"login": "RSSchermer", "id": 3153509, "node_id": "MDQ6VXNlcjMxNTM1MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3153509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RSSchermer", "html_url": "https://github.com/RSSchermer", "followers_url": "https://api.github.com/users/RSSchermer/followers", "following_url": "https://api.github.com/users/RSSchermer/following{/other_user}", "gists_url": "https://api.github.com/users/RSSchermer/gists{/gist_id}", "starred_url": "https://api.github.com/users/RSSchermer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RSSchermer/subscriptions", "organizations_url": "https://api.github.com/users/RSSchermer/orgs", "repos_url": "https://api.github.com/users/RSSchermer/repos", "events_url": "https://api.github.com/users/RSSchermer/events{/privacy}", "received_events_url": "https://api.github.com/users/RSSchermer/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49996/timeline", "performed_via_github_app": null, "state_reason": null}