{"url": "https://api.github.com/repos/rust-lang/rust/issues/82471", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82471/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82471/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82471/events", "html_url": "https://github.com/rust-lang/rust/issues/82471", "id": 815317512, "node_id": "MDU6SXNzdWU4MTUzMTc1MTI=", "number": 82471, "title": "str::splitn(N, ' ') is slower than it ought to be", "user": {"login": "jeffsmith82", "id": 1884943, "node_id": "MDQ6VXNlcjE4ODQ5NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1884943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeffsmith82", "html_url": "https://github.com/jeffsmith82", "followers_url": "https://api.github.com/users/jeffsmith82/followers", "following_url": "https://api.github.com/users/jeffsmith82/following{/other_user}", "gists_url": "https://api.github.com/users/jeffsmith82/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeffsmith82/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeffsmith82/subscriptions", "organizations_url": "https://api.github.com/users/jeffsmith82/orgs", "repos_url": "https://api.github.com/users/jeffsmith82/repos", "events_url": "https://api.github.com/users/jeffsmith82/events{/privacy}", "received_events_url": "https://api.github.com/users/jeffsmith82/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 2238196890, "node_id": "MDU6TGFiZWwyMjM4MTk2ODkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-str", "name": "A-str", "color": "f7e101", "default": false, "description": "Area: str and String"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-02-24T10:01:00Z", "updated_at": "2022-02-08T20:03:07Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I wrote a small benchmark and was surprised at how much slower it was using str::splitn rather than using bytes directly. \r\n\r\nsplitn\r\nTime elapsed in parse_response() is: 2.290853462s\r\n\r\nas bytes\r\nTime elapsed in parse_response() is: 661.947666ms\r\n\r\nIs it possible to do something similar to https://github.com/rust-lang/rust/issues/46693 where if splitting on a single byte.\r\n\r\nhttps://users.rust-lang.org/t/performance-comparison/56041/2\r\n\r\n```\r\nuse std::time::{Duration, Instant};\r\nfn main() {\r\n    let response = String::from(\"HTTP/1.1 418 I'm a teapot\\r\\n\");\r\n    let mut res: (&str, &str, &str) = (\"\", \"\", \"\");\r\n    let start = Instant::now();\r\n    for _ in 0..100_000_000 {\r\n        res = match parse_http(&response) {\r\n            Ok(data) => data,\r\n            Err(_) => {\r\n                continue;\r\n            }\r\n        };\r\n    }\r\n    let duration = start.elapsed();\r\n\r\n    println!(\"version:{}\\ncode:{}\\ndescription:{}\\n\", res.0, res.1, res.2);\r\n    println!(\"Time elapsed in parse_response() is: {:?}\", duration);\r\n    \r\n    let start2 = Instant::now();\r\n    for _ in 0..100_000_000 {\r\n        res = match parse_http2(&response) {\r\n            Ok(data) => data,\r\n            Err(_) => {\r\n                continue;\r\n            }\r\n        };\r\n    }\r\n    let duration2 = start2.elapsed();\r\n\r\n    println!(\"version:{}\\ncode:{}\\ndescription:{}\\n\", res.0, res.1, res.2);\r\n    println!(\"Time elapsed in parse_response() is: {:?}\", duration2);\r\n}\r\n\r\nfn parse_http(s: &str) -> Result<(&str, &str, &str), &str> {\r\n    let mut parts = s.splitn(3, ' ');\r\n    let version = parts.next().ok_or(\"No Version\")?;\r\n    let code = parts.next().ok_or(\"No status code\")?;\r\n    let description = parts.next().ok_or(\"No description\")?;\r\n    Ok((version, code, description))\r\n}\r\n\r\nfn parse_http2(s: &str) -> Result<(&str, &str, &str), &str> {\r\n    let mut bytes = s.as_bytes().iter();\r\n    let i = bytes.position(|b| *b == b' ').ok_or(\"No Version\")?;\r\n    let j = bytes.position(|b| *b == b' ').ok_or(\"No status code\")? + i + 1;\r\n\r\n    let version = &s[..i];\r\n    let code = &s[(i + 1)..j];\r\n    let description = &s[(j + 1)..];\r\n    Ok((version, code, description))\r\n}\r\n```\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82471/timeline", "performed_via_github_app": null, "state_reason": null}