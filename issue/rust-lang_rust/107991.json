{"url": "https://api.github.com/repos/rust-lang/rust/issues/107991", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107991/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107991/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107991/events", "html_url": "https://github.com/rust-lang/rust/issues/107991", "id": 1582206672, "node_id": "I_kwDOAAsO6M5eTo7Q", "number": 107991, "title": "rustc panicked with a simple code ", "user": {"login": "NMAGZ", "id": 3396983, "node_id": "MDQ6VXNlcjMzOTY5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/3396983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NMAGZ", "html_url": "https://github.com/NMAGZ", "followers_url": "https://api.github.com/users/NMAGZ/followers", "following_url": "https://api.github.com/users/NMAGZ/following{/other_user}", "gists_url": "https://api.github.com/users/NMAGZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/NMAGZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NMAGZ/subscriptions", "organizations_url": "https://api.github.com/users/NMAGZ/orgs", "repos_url": "https://api.github.com/users/NMAGZ/repos", "events_url": "https://api.github.com/users/NMAGZ/events{/privacy}", "received_events_url": "https://api.github.com/users/NMAGZ/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3921860029, "node_id": "LA_kwDOAAsO6M7pwtW9", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-has-mcve", "name": "S-has-mcve", "color": "862eff", "default": false, "description": "A Minimal Complete and Verifiable Example has been found for this issue"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2023-02-13T11:52:43Z", "updated_at": "2023-03-17T23:56:59Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\nmod bytes_num {\r\n    use std::{error::Error, time::Duration};\r\n\r\n    const NANOSECOND_CHARS: &[char] = &['n', 's'];\r\n    const MICROSECOND_CHARS: &[char] = &['u', 's'];\r\n    const MICROSECOND_GREEK_CHARS: &[char] = &['\u03bc', 's'];\r\n    const MILLISECOND_CHARS: &[char] = &['m', 's'];\r\n    const SECOND_CHARS: &[char] = &['s'];\r\n    const MINUTE_CHARS: &[char] = &['m'];\r\n    const HOUR_CHARS: &[char] = &['h'];\r\n\r\n    const NANOSECOND: u64 = 1;\r\n    const MICROSECOND: u64 = NANOSECOND * 1000;\r\n    const MILLISECOND: u64 = MICROSECOND * 1000;\r\n    const SECOND: u64 = MILLISECOND * 1000;\r\n    const MINUTE: u64 = SECOND * 60;\r\n    const HOUR: u64 = MINUTE * 60;\r\n\r\n    pub(crate) fn foo(bar: &str) -> Result<Duration, Box<dyn Error>> {\r\n        let u = ['s'].as_slice();\r\n        let unit = match u {\r\n            NANOSECOND_CHARS => NANOSECOND,\r\n            MICROSECOND_CHARS => MICROSECOND,\r\n            MICROSECOND_GREEK_CHARS => MICROSECOND,\r\n            MILLISECOND_CHARS => MILLISECOND,\r\n            SECOND_CHARS => SECOND,\r\n            MINUTE_CHARS => MINUTE,\r\n            HOUR_CHARS => HOUR,\r\n            _ => return Err(From::from(format!(\"Unknown Unit '{:?}' in '{}'\", u, bar))),\r\n        };\r\n\r\n        Ok(Duration::from_secs(1))\r\n    }\r\n}\r\n\r\nmod duration {\r\n    use std::error::Error;\r\n\r\n    const BYTE_CHARS: &[char] = &['b'];\r\n\r\n    const KILOBYTES_CHARS: &[char] = &['k', 'b'];\r\n    const KIBIBYTES_CHARS: &[char] = &['k', 'i', 'b'];\r\n    const KIBIBYTES_SHORT: &[char] = &['k'];\r\n    const MEGABYTES_CHARS: &[char] = &['m', 'b'];\r\n    const MEBIBYTES_CHARS: &[char] = &['m', 'i', 'b'];\r\n    const MEBIBYTES_SHORT: &[char] = &['m'];\r\n    const GIGABYTES_CHARS: &[char] = &['g', 'b'];\r\n    const GIBIBYTES_CHARS: &[char] = &['g', 'i', 'b'];\r\n    const GIBIBYTES_SHORT: &[char] = &['g'];\r\n\r\n    const BYTES: u64 = 1;\r\n    const KILOBYTES: u64 = BYTES * 1000;\r\n    const KIBIBYTES: u64 = BYTES * 1024;\r\n    const MEGABYTES: u64 = KILOBYTES * 1000;\r\n    const MEBIBYTES: u64 = KIBIBYTES * 1024;\r\n    const GIGABYTES: u64 = MEGABYTES * 1000;\r\n    const GIBIBYTES: u64 = MEBIBYTES * 1024;\r\n\r\n    pub(crate) fn baz(qux: &str) -> Result<u64, Box<dyn Error>> {\r\n        let u = ['b'].as_slice();\r\n        let unit = match u {\r\n            BYTE_CHARS => BYTES,\r\n            KILOBYTES_CHARS => KILOBYTES,\r\n            KIBIBYTES_CHARS | KIBIBYTES_SHORT => KIBIBYTES,\r\n            MEGABYTES_CHARS => MEGABYTES,\r\n            MEBIBYTES_CHARS | MEBIBYTES_SHORT => MEBIBYTES,\r\n            GIGABYTES_CHARS => GIGABYTES,\r\n            GIBIBYTES_CHARS | GIBIBYTES_SHORT => GIBIBYTES,\r\n            _ => return Err(From::from(format!(\"Unknown unit '{:?}' in '{}'\", u, qux))),\r\n        };\r\n\r\n        Ok(1)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    println!(\"Hello world\");\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.67.1 (d5a82bbd2 2023-02-07)\r\nbinary: rustc\r\ncommit-hash: d5a82bbd26e1ad8b7401f6a718a9c57c96905483\r\ncommit-date: 2023-02-07\r\nhost: aarch64-apple-darwin\r\nrelease: 1.67.1\r\nLLVM version: 15.0.6\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'forcing query with already existing `DepNode`\r\n- query-key: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst }, value: Val(ByRef { alloc: ConstAllocation { .. }, offset: Size(0 bytes) }, &[char]) }\r\n- dep-node: deref_mir_constant(6c0d3808aaf7532e-5e094c413a0202f3)', /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/compiler/rustc_query_system/src/dep_graph/graph.rs:316:9\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\n> RUST_BACKTRACE=1 cargo build\r\n   Compiling demo v0.1.0 (/Users/zipper/Rust/magz/demo)\r\nthread 'rustc' panicked at 'forcing query with already existing `DepNode`\r\n- query-key: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst }, value: Val(ByRef { alloc: ConstAllocation { .. }, offset: Size(0 bytes) }, &[char]) }\r\n- dep-node: deref_mir_constant(6c0d3808aaf7532e-5e094c413a0202f3)', /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/compiler/rustc_query_system/src/dep_graph/graph.rs:316:9\r\nstack backtrace:\r\n   0: _rust_begin_unwind\r\n   1: core::panicking::panic_fmt\r\n   2: <rustc_query_system::dep_graph::graph::DepGraph<rustc_middle::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle::ty::context::TyCtxt, rustc_middle::ty::ParamEnvAnd<rustc_middle::mir::ConstantKind>, rustc_middle::mir::ConstantKind>\r\n   3: rustc_query_system::query::plumbing::get_query::<rustc_query_impl::queries::deref_mir_constant, rustc_query_impl::plumbing::QueryCtxt>\r\n   4: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::deref_mir_constant\r\n   5: <rustc_mir_build::thir::pattern::const_to_pat::ConstToPat>::recur\r\n   6: <rustc_mir_build::thir::pattern::const_to_pat::ConstToPat>::to_pat\r\n   7: <rustc_mir_build::thir::pattern::PatCtxt>::const_to_pat\r\n   8: <rustc_mir_build::thir::pattern::PatCtxt>::lower_path\r\n   9: <rustc_mir_build::thir::pattern::PatCtxt>::lower_pattern\r\n  10: <rustc_mir_build::thir::pattern::PatCtxt>::lower_pattern\r\n  11: <rustc_mir_build::thir::pattern::check_match::MatchVisitor>::lower_pattern\r\n  12: <alloc::vec::Vec<rustc_mir_build::thir::pattern::usefulness::MatchArm> as alloc::vec::spec_from_iter::SpecFromIter<rustc_mir_build::thir::pattern::usefulness::MatchArm, core::iter::adapters::map::Map<core::slice::iter::Iter<rustc_hir::hir::Arm>, <rustc_mir_build::thir::pattern::check_match::MatchVisitor>::check_match::{closure#0}>>>::from_iter\r\n  13: <rustc_mir_build::thir::pattern::check_match::MatchVisitor as rustc_hir::intravisit::Visitor>::visit_expr\r\n  14: <rustc_mir_build::thir::pattern::check_match::MatchVisitor as rustc_hir::intravisit::Visitor>::visit_local\r\n  15: rustc_hir::intravisit::walk_expr::<rustc_mir_build::thir::pattern::check_match::MatchVisitor>\r\n  16: <rustc_mir_build::thir::pattern::check_match::MatchVisitor as rustc_hir::intravisit::Visitor>::visit_expr\r\n  17: rustc_mir_build::thir::pattern::check_match::check_match\r\n  18: <rustc_query_system::dep_graph::graph::DepGraph<rustc_middle::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle::ty::context::TyCtxt, rustc_span::def_id::DefId, ()>\r\n  19: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::plumbing::QueryCtxt, rustc_query_system::query::caches::DefaultCache<rustc_span::def_id::DefId, ()>>\r\n  20: rustc_query_system::query::plumbing::get_query::<rustc_query_impl::queries::check_match, rustc_query_impl::plumbing::QueryCtxt>\r\n  21: rustc_data_structures::sync::par_for_each_in::<&[rustc_span::def_id::LocalDefId], <rustc_middle::hir::map::Map>::par_body_owners<rustc_interface::passes::analysis::{closure#1}::{closure#0}::{closure#0}::{closure#0}>::{closure#0}>\r\n  22: <rustc_session::session::Session>::time::<(), rustc_interface::passes::analysis::{closure#1}::{closure#0}::{closure#0}>\r\n  23: <rustc_session::session::Session>::time::<(), rustc_interface::passes::analysis::{closure#1}>\r\n  24: rustc_interface::passes::analysis\r\n  25: <rustc_query_system::dep_graph::graph::DepGraph<rustc_middle::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle::ty::context::TyCtxt, (), core::result::Result<(), rustc_errors::ErrorGuaranteed>>\r\n  26: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::plumbing::QueryCtxt, rustc_query_system::query::caches::DefaultCache<(), core::result::Result<(), rustc_errors::ErrorGuaranteed>>>\r\n  27: rustc_query_system::query::plumbing::get_query::<rustc_query_impl::queries::analysis, rustc_query_impl::plumbing::QueryCtxt>\r\n  28: <rustc_interface::passes::QueryContext>::enter::<rustc_driver::run_compiler::{closure#1}::{closure#2}::{closure#2}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>\r\n  29: rustc_span::with_source_map::<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#0}::{closure#0}>\r\n  30: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.67.1 (d5a82bbd2 2023-02-07) running on aarch64-apple-darwin\r\n\r\nnote: compiler flags: --crate-type bin -C embed-bitcode=no -C split-debuginfo=unpacked -C debuginfo=2 -C incremental=[REDACTED]\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [deref_mir_constant] dereferencing MIR constant\r\n#1 [check_match] match-checking `duration::baz`\r\n#2 [analysis] running analysis passes on this crate\r\nend of query stack\r\nwarning: unused variable: `unit`\r\n  --> src/main.rs:21:13\r\n   |\r\n21 |         let unit = match u {\r\n   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_unit`\r\n   |\r\n   = note: `#[warn(unused_variables)]` on by default\r\n\r\nwarning: unused variable: `unit`\r\n  --> src/main.rs:61:13\r\n   |\r\n61 |         let unit = match u {\r\n   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_unit`\r\n\r\nwarning: `demo` (bin \"demo\") generated 2 warnings\r\nerror: could not compile `demo`; 2 warnings emitted\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107991/timeline", "performed_via_github_app": null, "state_reason": null}