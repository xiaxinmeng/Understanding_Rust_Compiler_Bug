{"url": "https://api.github.com/repos/rust-lang/rust/issues/56530", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56530/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56530/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56530/events", "html_url": "https://github.com/rust-lang/rust/issues/56530", "id": 387607900, "node_id": "MDU6SXNzdWUzODc2MDc5MDA=", "number": 56530, "title": "Nightly not honoring -z stack-size", "user": {"login": "liamcurry", "id": 77758, "node_id": "MDQ6VXNlcjc3NzU4", "avatar_url": "https://avatars.githubusercontent.com/u/77758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liamcurry", "html_url": "https://github.com/liamcurry", "followers_url": "https://api.github.com/users/liamcurry/followers", "following_url": "https://api.github.com/users/liamcurry/following{/other_user}", "gists_url": "https://api.github.com/users/liamcurry/gists{/gist_id}", "starred_url": "https://api.github.com/users/liamcurry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liamcurry/subscriptions", "organizations_url": "https://api.github.com/users/liamcurry/orgs", "repos_url": "https://api.github.com/users/liamcurry/repos", "events_url": "https://api.github.com/users/liamcurry/events{/privacy}", "received_events_url": "https://api.github.com/users/liamcurry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-05T06:10:53Z", "updated_at": "2023-04-05T17:37:04Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hi there! I'm noticing that on nightly using `-z stack-size` doesn't seem to affect the stack size, or at least not in the way I've been using it. Below are some example commands from my project.\r\n\r\nUsing stable:\r\n\r\n```sh\r\n$ cargo +stable --version\r\ncargo 1.30.0 (a1a4ad372 2018-11-02)\r\n$ RUSTFLAGS=\"-C link-args=-zstack-size=48000\" cargo +stable build --release --target=wasm32-unknown-unknown -vv -p hello_bare\r\n   Compiling hello_bare v0.1.0 (C:\\Users\\sagan\\Documents\\sagan-software\\rust-eos\\examples\\hello_bare)\r\n     Running `rustc --crate-name hello_bare 'examples\\hello_bare\\src\\lib.rs' --color always --crate-type cdylib --emit=dep-info,link -C opt-level=s -C panic=abort -C lto -C metadata=673de3ef755438ae --out-dir 'C:\\Users\\sagan\\Documents\\sagan-software\\rust-eos\\target\\wasm32-unknown-unknown\\release\\deps' --target wasm32-unknown-unknown -L 'dependency=C:\\Users\\sagan\\Documents\\sagan-software\\rust-eos\\target\\wasm32-unknown-unknown\\release\\deps' -L 'dependency=C:\\Users\\sagan\\Documents\\sagan-software\\rust-eos\\target\\release\\deps' -C link-args=-zstack-size=48000`\r\n    Finished release [optimized] target(s) in 0.67s\r\n$ wasm2wat target/wasm32-unknown-unknown/release/hello_bare.wasm -o target/wasm32-unknown-unknown/release/hello_bare.wat --generate-names\r\n$ tail target/wasm32-unknown-unknown/release/hello_bare.wat\r\n  (global $g0 (mut i32) (i32.const 48000))\r\n  (global $__heap_base i32 (i32.const 48004))\r\n  (global $__data_end i32 (i32.const 48004))\r\n  (export \"memory\" (memory 0))\r\n  (export \"__indirect_function_table\" (table 0))\r\n  (export \"__heap_base\" (global 1))\r\n  (export \"__data_end\" (global 2))\r\n  (export \"apply\" (func $apply))\r\n  (export \"rust_eh_personality\" (func $rust_eh_personality))\r\n  (data (i32.const 48000) \"Hi, \"))\r\n```\r\n\r\nUsing nightly:\r\n\r\n```sh\r\n$ cargo +nightly --version\r\ncargo 1.32.0-nightly (b3d0b2e54 2018-11-15)\r\n$ RUSTFLAGS=\"-C link-args=-zstack-size=48000\" cargo +nightly build --release --target=wasm32-unknown-unknown -vv -p hello_bare\r\n   Compiling hello_bare v0.1.0 (C:\\Users\\sagan\\Documents\\sagan-software\\rust-eos\\examples\\hello_bare)\r\n     Running `rustc --crate-name hello_bare 'examples\\hello_bare\\src\\lib.rs' --color always --crate-type cdylib --emit=dep-info,link -C opt-level=s -C panic=abort -C lto -C metadata=673de3ef755438ae --out-dir 'C:\\Users\\sagan\\Documents\\sagan-software\\rust-eos\\target\\wasm32-unknown-unknown\\release\\deps' --target wasm32-unknown-unknown -L 'dependency=C:\\Users\\sagan\\Documents\\sagan-software\\rust-eos\\target\\wasm32-unknown-unknown\\release\\deps' -L 'dependency=C:\\Users\\sagan\\Documents\\sagan-software\\rust-eos\\target\\release\\deps' -C link-args=-zstack-size=48000`\r\n    Finished release [optimized] target(s) in 0.59s\r\n$ wasm2wat target/wasm32-unknown-unknown/release/hello_bare.wasm -o target/wasm32-unknown-unknown/release/hello_bare.wat --generate-names\r\n$ tail target/wasm32-unknown-unknown/release/hello_bare.wat\r\n  (memory $memory 17)\r\n  (global $g0 (mut i32) (i32.const 1048576))\r\n  (global $__heap_base i32 (i32.const 1048580))\r\n  (global $__data_end i32 (i32.const 1048580))\r\n  (export \"memory\" (memory 0))\r\n  (export \"__indirect_function_table\" (table 0))\r\n  (export \"__heap_base\" (global 1))\r\n  (export \"__data_end\" (global 2))\r\n  (export \"apply\" (func $apply))\r\n  (data (i32.const 1048576) \"Hi, \"))\r\n```\r\n\r\nFor my application it's crucial that data segments are included within the first 64KiB which is why I've reduced the stack size to 48. Is there a workaround or am I missing something? Thanks.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56530/timeline", "performed_via_github_app": null, "state_reason": null}