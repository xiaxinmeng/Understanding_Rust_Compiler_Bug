{"url": "https://api.github.com/repos/rust-lang/rust/issues/74456", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74456/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74456/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74456/events", "html_url": "https://github.com/rust-lang/rust/issues/74456", "id": 659592085, "node_id": "MDU6SXNzdWU2NTk1OTIwODU=", "number": 74456, "title": "Exponential growth in compile time, memory usage for obligation evaluation", "user": {"login": "syntacticsugarglider", "id": 25019299, "node_id": "MDQ6VXNlcjI1MDE5Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/25019299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syntacticsugarglider", "html_url": "https://github.com/syntacticsugarglider", "followers_url": "https://api.github.com/users/syntacticsugarglider/followers", "following_url": "https://api.github.com/users/syntacticsugarglider/following{/other_user}", "gists_url": "https://api.github.com/users/syntacticsugarglider/gists{/gist_id}", "starred_url": "https://api.github.com/users/syntacticsugarglider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syntacticsugarglider/subscriptions", "organizations_url": "https://api.github.com/users/syntacticsugarglider/orgs", "repos_url": "https://api.github.com/users/syntacticsugarglider/repos", "events_url": "https://api.github.com/users/syntacticsugarglider/events{/privacy}", "received_events_url": "https://api.github.com/users/syntacticsugarglider/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 630799571, "node_id": "MDU6TGFiZWw2MzA3OTk1NzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compilemem", "name": "I-compilemem", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to memory usage during compilation."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}, {"id": 1791937891, "node_id": "MDU6TGFiZWwxNzkxOTM3ODkx", "url": "https://api.github.com/repos/rust-lang/rust/labels/ICEBreaker-Cleanup-Crew", "name": "ICEBreaker-Cleanup-Crew", "color": "74cc28", "default": false, "description": "Helping to \"clean up\" bugs with minimal examples and bisections"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-17T20:05:23Z", "updated_at": "2021-03-09T05:18:17Z", "closed_at": "2021-03-09T05:18:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The source provided [here](https://github.com/syntacticsugarglider/self-profile-ice-repro), also used for reproduction of the previously filed #73593, takes an unexpectedly long time to compile and consumes substantial memory, growing exponentially as seemingly trivial complexity is added to the source. For example, uncommenting [this](https://github.com/syntacticsugarglider/self-profile-ice-repro/blob/master/src/main.rs#L16) line results in rustc crashing due to OOM killer on my system.\r\n\r\nI apologize for the lack of MCVE but my attempts to investigate this have been stymied by my lack of understanding of the relevant portions of the compiler. [This](https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/debugging.20rustc.20OOM) zulip thread contains the discussion of investigation so far, but the concise overview is that through use of `massif` and `perf` I've narrowed the performance issues (both compile time and compile memory) down to the `obligations` Vec used [here](https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src/librustc_trait_selection/traits/select/mod.rs#L2053) in rustc and, more specifically, [the subsequent retain call](https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src/librustc_trait_selection/traits/select/mod.rs#L2090) for deduplication. Over half the CPU time for a full build of this crate is spent computing the Hash of `ObligationCauseCode` in those `insert` calls.\r\n\r\nIdentifying this hot path as the problem is informative but insufficient to allow me to minimize this. The most granular causative information I have is from the output of `-Zself-profile`, which suggests that the time spent is in evaluate_obligation (as is clear from the above information as well) for queries such as\r\n```\r\nCanonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, def_id: None }, value: Binder(TraitPredicate(<Item as __DERIVE_PROTOCOL_Id::__protocol::Unravel<protocol_mve_transport::Transport<std::boxed::Box<dyn CloneSpawn>, std::convert::Infallible, std::convert::Infallible, Item>>>)) } }\r\n```\r\nThe unifying theme among the queries that consume the vast majority of the total CPU time is that they're all root-level evaluations of predication on the `Unravel` trait, and there doesn't appear to be a way to achieve further granularity with `-Zself-profile` such that I could establish what resultant predicates are being produced that in turn would result in the voluminous contents of that `obligations` Vec, whatever they might be. I'm not sure if the issue here is a failure/missed opportunity in deduplication, an accumulation of a huge number of predicates before deduplication such that a single iteration consumes all this time (`perf` records using sampling so I don't know whether many small calls or fewer more time-consuming calls are being made), or something else entirely.\r\n\r\nFor profiling I'm using a locally built stage 1 rustc on `x86_64-unknown-linux-gnu` from commit `8aa18cbdc5d4bc33bd61e2d9a4b643d87f5d21de` though this issue occurs on current stable etc. as well.\r\n", "closed_by": {"login": "syntacticsugarglider", "id": 25019299, "node_id": "MDQ6VXNlcjI1MDE5Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/25019299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syntacticsugarglider", "html_url": "https://github.com/syntacticsugarglider", "followers_url": "https://api.github.com/users/syntacticsugarglider/followers", "following_url": "https://api.github.com/users/syntacticsugarglider/following{/other_user}", "gists_url": "https://api.github.com/users/syntacticsugarglider/gists{/gist_id}", "starred_url": "https://api.github.com/users/syntacticsugarglider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syntacticsugarglider/subscriptions", "organizations_url": "https://api.github.com/users/syntacticsugarglider/orgs", "repos_url": "https://api.github.com/users/syntacticsugarglider/repos", "events_url": "https://api.github.com/users/syntacticsugarglider/events{/privacy}", "received_events_url": "https://api.github.com/users/syntacticsugarglider/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74456/timeline", "performed_via_github_app": null, "state_reason": "completed"}