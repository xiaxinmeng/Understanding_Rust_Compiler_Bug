{"url": "https://api.github.com/repos/rust-lang/rust/issues/57189", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57189/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57189/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57189/events", "html_url": "https://github.com/rust-lang/rust/issues/57189", "id": 394760804, "node_id": "MDU6SXNzdWUzOTQ3NjA4MDQ=", "number": 57189, "title": "\"expected &&str, found &&str\" and missing context", "user": {"login": "AaronKutch", "id": 32419308, "node_id": "MDQ6VXNlcjMyNDE5MzA4", "avatar_url": "https://avatars.githubusercontent.com/u/32419308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AaronKutch", "html_url": "https://github.com/AaronKutch", "followers_url": "https://api.github.com/users/AaronKutch/followers", "following_url": "https://api.github.com/users/AaronKutch/following{/other_user}", "gists_url": "https://api.github.com/users/AaronKutch/gists{/gist_id}", "starred_url": "https://api.github.com/users/AaronKutch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AaronKutch/subscriptions", "organizations_url": "https://api.github.com/users/AaronKutch/orgs", "repos_url": "https://api.github.com/users/AaronKutch/repos", "events_url": "https://api.github.com/users/AaronKutch/events{/privacy}", "received_events_url": "https://api.github.com/users/AaronKutch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-29T04:44:19Z", "updated_at": "2020-11-21T20:24:38Z", "closed_at": "2020-11-21T20:24:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Edit: there is a simpler example I found below in the comments\r\n\r\nI was trying to solve a lifetime issue another Rustacean had on the [Reddit question thread](https://www.reddit.com/r/rust/comments/a9476e/hey_rustaceans_got_an_easy_question_ask_here/) and found this:\r\n```\r\nuse std::collections::HashMap;\r\nuse std::thread;\r\n\r\nfn get_chunks(string: &str, num: usize) -> Vec<&str> {Vec::new()}\r\n\r\npub fn count_words(string: &str)\r\n                   -> HashMap<&str,usize> {HashMap::new()}\r\n\r\npub fn count_words_parallel(string: &str, threads: usize)\r\n                            -> HashMap<&str,usize> {\r\n    let result = HashMap::new();\r\n    let chunks = get_chunks(string.clone(), threads);\r\n    let mut handles = Vec::with_capacity(chunks.len());\r\n\r\n    for chunk in chunks {\r\n        handles.push(thread::spawn(|| {\r\n            count_words(&chunk)\r\n        }));\r\n    }\r\n\r\n    for handle in handles {\r\n        if let Ok(counts) = handle.join() {\r\n            for (word, count) in counts {\r\n                match result.get(word) {\r\n                    Some(original) => result.insert(word, original + count),\r\n                    None => result.insert(word, count)\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n```\r\nwhich triggers this gem (on `rustc 1.44.0-nightly (6dee5f112 2020-04-06)`):\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\r\n  --> src\\main.rs:12:36\r\n   |\r\n12 |     let chunks = get_chunks(string.clone(), threads);\r\n   |                                    ^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the function body at 9:1...\r\n  --> src\\main.rs:9:1\r\n   |\r\n9  | / pub fn count_words_parallel(string: &str, threads: usize)\r\n10 | |                             -> HashMap<&str,usize> {\r\n11 | |     let result = HashMap::new();\r\n12 | |     let chunks = get_chunks(string.clone(), threads);\r\n...  |\r\n32 | |     return result;\r\n33 | | }\r\n   | |_^\r\nnote: ...so that the types are compatible\r\n  --> src\\main.rs:12:36\r\n   |\r\n12 |     let chunks = get_chunks(string.clone(), threads);\r\n   |                                    ^^^^^\r\n   = note: expected  `&&str`\r\n              found  `&&str`\r\n   = note: but, the lifetime must be valid for the static lifetime...\r\nnote: ...so that the type `std::collections::HashMap<&str, usize>` will meet its required lifetime bounds\r\n  --> src\\main.rs:16:22\r\n   |\r\n16 |         handles.push(thread::spawn(|| {\r\n   |                      ^^^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\nbesides the title, there are other problems with the error reporting that happens with and without that `clone`:\r\n\r\nJust to make sure I am interpreting the problem as a whole right, is the lifetime of the `&str` passed to `count_words_parallel` getting elided along until it gets into the new threads via `&chunk`? The lifetimes of the new threads are `'static` which means that lifetime all the way back at the `&str` must also be `'static` or alternatively something has to happen along the way to split up lifetimes (which I was trying to do above via `clone`ing).\r\n\r\nThe important point is that I had to work through all the lifetimes myself by prompting the compiler through other errors (in which it will give more info) to figure out what was what. Hindsight of course is 20/20 and now I can see the flow of this particular error message, this is what _I think_ it is trying to tell me:\r\n\r\n`note: first, the lifetime cannot outlive the anonymous lifetime` \"the lifetime\" refers to the hashmap at the end of the lifetime elision chain mentioned at the _end_ of the error.\r\n\r\n`but, the lifetime must be valid for the static lifetime` I actually don't know what the first \"lifetime\" is but the \"static lifetime\" must be the thread spawning closure which is never pointed to (via the really helpful ascii lines and arrows).\r\n\r\n`so that the type std::collections::HashMap<&str, usize> will meet its required lifetime bounds` \"required\" as in required by the lifetime of the thread spawning closure that was indirectly mentioned _above_ this part of the error. \"bounds\" as in `'static`\r\n\r\n The biggest problem I have always had with Rustc's error system when I get stuck is that a key piece of information is being withheld from me, and I believe it would help at this point to be more verbose and have redundancy to the wording. Perhaps have an error format that, for each lifetime involved, describes the where and what of the relevant variables and their lifetimes (saying stuff like \"variable x has lifetime # 3, beginning and ending here\"), and only after that describes what and how lifetimes collide (saying stuff like \"this variable (having lifetime # 3) outlives this other variable (having lifetime # 2) via scoping or closures or whatnot at this place\").", "closed_by": {"login": "AaronKutch", "id": 32419308, "node_id": "MDQ6VXNlcjMyNDE5MzA4", "avatar_url": "https://avatars.githubusercontent.com/u/32419308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AaronKutch", "html_url": "https://github.com/AaronKutch", "followers_url": "https://api.github.com/users/AaronKutch/followers", "following_url": "https://api.github.com/users/AaronKutch/following{/other_user}", "gists_url": "https://api.github.com/users/AaronKutch/gists{/gist_id}", "starred_url": "https://api.github.com/users/AaronKutch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AaronKutch/subscriptions", "organizations_url": "https://api.github.com/users/AaronKutch/orgs", "repos_url": "https://api.github.com/users/AaronKutch/repos", "events_url": "https://api.github.com/users/AaronKutch/events{/privacy}", "received_events_url": "https://api.github.com/users/AaronKutch/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57189/timeline", "performed_via_github_app": null, "state_reason": "completed"}