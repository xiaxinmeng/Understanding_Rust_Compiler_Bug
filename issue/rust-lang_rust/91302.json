{"url": "https://api.github.com/repos/rust-lang/rust/issues/91302", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91302/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91302/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91302/events", "html_url": "https://github.com/rust-lang/rust/issues/91302", "id": 1065132480, "node_id": "I_kwDOAAsO6M4_fKHA", "number": 91302, "title": "Consider re-tuning the lifetime elision rules for trait objects", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 1622913351, "node_id": "MDU6TGFiZWwxNjIyOTEzMzUx", "url": "https://api.github.com/repos/rust-lang/rust/labels/lang-team-202x-edition", "name": "lang-team-202x-edition", "color": "fcbff6", "default": false, "description": "Something we may consider if we do another edition"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-11-27T22:30:41Z", "updated_at": "2021-12-20T21:19:15Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The lifetime elision rules for functions are willing to fail sometimes, and that's good because `-> &i32` defaulting to `-> &'static i32` would not be what people generally want, and having the error say \"hey, what lifetime did you mean?\" is way better than getting borrowck errors about \"that's not `'static`\".\r\n\r\nIt might be worth taking inspiration from that to improve the elision rules for `dyn Trait`, as lints for now and possibly as hard changes in a future edition.\r\n\r\nFor example, `impl dyn Trait` is currently `impl dyn Trait + 'static`, but it's not clear that's good.  It might be better to require that the user write `impl dyn Trait + '_` or `impl dyn Trait + 'static` to say which they want.  Inspired by this thread: https://users.rust-lang.org/t/why-do-associated-functions-in-impl-dyn-trait-require-static-lifetime/67548/2?u=scottmcm\r\n\r\nSimilarly, the `+ 'static` default applies even inside a struct with a lifetime.  For example, https://github.com/rust-lang/rust/issues/91292 had\r\n```rust\r\npub struct SectionMut<'a> {\r\n    data: &'a mut Option<Box<dyn SectionData>>,\r\n}\r\n```\r\nwhere the implicit `+ 'static` is more restrictive than needed because it's behind the `&'a` -- but being in the `Box` hides that from elision.\r\n\r\nI don't have any concrete proposal here right now, but I figured I'd open this as a place to track it.\r\n\r\n---\r\n\r\nOther examples (feel free to edit this post to add more down here):\r\n- https://users.rust-lang.org/t/how-to-derive-debug-for-struct-with-a-dyn-trait/69086/3?u=scottmcm\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91302/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91302/timeline", "performed_via_github_app": null, "state_reason": null}