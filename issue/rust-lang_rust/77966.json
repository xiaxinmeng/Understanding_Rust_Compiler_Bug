{"url": "https://api.github.com/repos/rust-lang/rust/issues/77966", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77966/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77966/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77966/events", "html_url": "https://github.com/rust-lang/rust/issues/77966", "id": 722216169, "node_id": "MDU6SXNzdWU3MjIyMTYxNjk=", "number": 77966, "title": "No \"multiple applicable items in scope\" error when calling `fmt` inside a `Display` or `Debug` impl", "user": {"login": "benediktwerner", "id": 19309705, "node_id": "MDQ6VXNlcjE5MzA5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/19309705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benediktwerner", "html_url": "https://github.com/benediktwerner", "followers_url": "https://api.github.com/users/benediktwerner/followers", "following_url": "https://api.github.com/users/benediktwerner/following{/other_user}", "gists_url": "https://api.github.com/users/benediktwerner/gists{/gist_id}", "starred_url": "https://api.github.com/users/benediktwerner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benediktwerner/subscriptions", "organizations_url": "https://api.github.com/users/benediktwerner/orgs", "repos_url": "https://api.github.com/users/benediktwerner/repos", "events_url": "https://api.github.com/users/benediktwerner/events{/privacy}", "received_events_url": "https://api.github.com/users/benediktwerner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-10-15T10:41:43Z", "updated_at": "2021-01-27T16:45:48Z", "closed_at": "2021-01-27T16:07:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\nstruct S(Box<dyn std::error::Error>);\r\n\r\nimpl std::fmt::Display for S {\r\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\r\n        self.0.fmt(f)\r\n    }\r\n}\r\n```\r\n\r\nI would expect this code to cause a \"multiple applicable items in scope\" compiler error since `self.0` in the impl has two `fmt` methods, one from `Debug` and one from `Display` (both required for `Error`). However, this code compiles perfectly fine and selects `Display::fmt`. When implementing `Debug` the `Debug::fmt` method is chosen instead, as can be seen in [this playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=50692c04a71a6958b701a6e68e5b1b32).\r\n\r\nThis behavior does not occur when using generics instead of a trait object, when the unused trait is brought into scope by a `use`-declaration, or when trying to replicate the same behavior with custom traits. So the following all trigger the \"multiple applicable items in scope\" error:\r\n\r\n```rust\r\n// No trait objects\r\nstruct S<T>(T);\r\n\r\nimpl<T: std::error::Error> std::fmt::Display for S<T> {\r\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\r\n        self.0.fmt(f)\r\n    }\r\n}\r\n```\r\n```rust\r\n// Bring Debug into scope\r\nuse std::fmt::Debug;\r\n\r\nstruct S(Box<dyn std::error::Error>);\r\n\r\nimpl Display for S {\r\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\r\n        self.0.fmt(f)\r\n    }\r\n}\r\n```\r\n```rust\r\n// Same setup but with custom traits\r\ntrait A { fn f(&self); }\r\ntrait B { fn f(&self); }\r\n\r\ntrait C: A + B {}\r\n\r\nstruct S(Box<dyn C>);\r\n\r\nimpl A for S {\r\n    fn f(&self) {\r\n        self.0.f();\r\n    }\r\n}\r\n```\r\n\r\nI also wasn't able to replicate this with custom traits by placing the traits in another crate or in separate modules, no matter if I used complete paths or `use`-declarations. Adding a `&mut Formatter<'_>` parameter or a return type to the methods also doesn't make a difference.\r\n\r\nHowever, the error is again absent when replacing `Error` with a custom trait depending on `Display` and another trait with the same method or when using other std-lib traits like `Read`:\r\n\r\n```rust\r\ntrait LikeDisplay { fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result; }\r\n\r\ntrait T: LikeDisplay + std::fmt::Display {}\r\n\r\nstruct S(Box<dyn T>);\r\n\r\nimpl std::fmt::Display for S {\r\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\r\n        self.0.fmt(f)\r\n    }\r\n}\r\n```\r\n```rust\r\ntrait LikeRead { fn read(&mut self, buf: &mut [u8]) -> std::io::Result<usize>; }\r\n\r\ntrait T: LikeRead + std::io::Read {}\r\n\r\nstruct S(Box<dyn T>);\r\n\r\nimpl std::io::Read for S {\r\n    fn read(&mut self, buf: &mut [u8]) -> std::io::Result<usize> {\r\n        self.0.read(buf)\r\n    }\r\n}\r\n```\r\n\r\nHowever even in this case, only the implementation for `Display` or `Read` is ok. When implementing `LikeDisplay` or `LikeRead` instead it produces the error again.\r\n\r\nThe behavior also seems to be the same on nightly, 1.46, and 1.47.\r\n\r\nIt's not quite clear to me what exactly causes the issue but at least it only seems to happen when std-lib types are involved.", "closed_by": {"login": "benediktwerner", "id": 19309705, "node_id": "MDQ6VXNlcjE5MzA5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/19309705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benediktwerner", "html_url": "https://github.com/benediktwerner", "followers_url": "https://api.github.com/users/benediktwerner/followers", "following_url": "https://api.github.com/users/benediktwerner/following{/other_user}", "gists_url": "https://api.github.com/users/benediktwerner/gists{/gist_id}", "starred_url": "https://api.github.com/users/benediktwerner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benediktwerner/subscriptions", "organizations_url": "https://api.github.com/users/benediktwerner/orgs", "repos_url": "https://api.github.com/users/benediktwerner/repos", "events_url": "https://api.github.com/users/benediktwerner/events{/privacy}", "received_events_url": "https://api.github.com/users/benediktwerner/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77966/timeline", "performed_via_github_app": null, "state_reason": "completed"}