{"url": "https://api.github.com/repos/rust-lang/rust/issues/36590", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/36590/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/36590/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/36590/events", "html_url": "https://github.com/rust-lang/rust/issues/36590", "id": 177922285, "node_id": "MDU6SXNzdWUxNzc5MjIyODU=", "number": 36590, "title": "Performance regression in nightly", "user": {"login": "sga001", "id": 495660, "node_id": "MDQ6VXNlcjQ5NTY2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/495660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sga001", "html_url": "https://github.com/sga001", "followers_url": "https://api.github.com/users/sga001/followers", "following_url": "https://api.github.com/users/sga001/following{/other_user}", "gists_url": "https://api.github.com/users/sga001/gists{/gist_id}", "starred_url": "https://api.github.com/users/sga001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sga001/subscriptions", "organizations_url": "https://api.github.com/users/sga001/orgs", "repos_url": "https://api.github.com/users/sga001/repos", "events_url": "https://api.github.com/users/sga001/events{/privacy}", "received_events_url": "https://api.github.com/users/sga001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-19T23:11:53Z", "updated_at": "2016-11-18T03:32:06Z", "closed_at": "2016-11-18T03:32:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\n\nI noticed that my application's microbenchmarks experienced a 5X (5 ms to 28 ms) performance degradation when I switched from rustc 1.13.0-nightly (5531c314a 2016-09-12) to rustc 1.13.0-nightly (6ffdda1ba 2016-09-14). When I switch back to the prior rustc, it works fine again. The issue is still present in the latest version of nightly: rustc 1.14.0-nightly (9c31d76e9 2016-10-03).\n\nUnfortunately, I cannot share my microbenchmarks at the moment because it depends on a fairly large C++ library (I use FFI). I will try to get a toy example as soon as possible.\n\nIn the meantime, here's what my microbenchmark does. It is using the criterion crate to measure performance.\n\n``` rust\n#![feature(test)]\nextern crate criterion;\nextern crate test;\nextern crate rand;\nextern crate libc;\n\nuse criterion::Bencher;\nuse rand::Rng;\nuse rand::ChaChaRng;\nuse libc;\nuse std::slice;\n\n#[test]\nfn bench_function_name() {\n    fn bench_function_name(b: &mut Bencher) {\n        let mut rng = ChaChaRng::new_unseeded();\n        let mut x = [0u8; 1024];\n        rng.fill_bytes(&mut x);\n\n       // Below is what actually measures performance\n       b.iter(|| { test::black_box(some_function(&x[..])); });\n    }\n\n    let mut criterion = criterion::Criterion::default();\n    criterion.bench_function(\"bench_function_name\", bench_function_name);\n}\n\nstruct Answer<'a> {\n  pub answer: &'a mut [u8],\n}\n\nimpl <'a> Drop for Answer<'a> {\n    fn drop(&mut self) {\n        unsafe { cpp_buffer_free(self.answer.as_mut_ptr() as *mut libc::c_void); }\n    }\n}\n\npub fn some_function<'a>(query: &'a [u8]) -> Answer<'a> {\n    let mut a_len: u64 = 0;\n\n    let answer: &'a mut [u8] = unsafe {\n        let ptr = some_cpp_function(query.as_ptr(), query_len() as u64, &mut a_len); \n        slice::from_raw_parts_mut(ptr as *mut u8, a_len as usize)\n    };\n\n    Answer { answer: answer }\n}\n\nextern \"C\" {\n    fn some_cpp_function(q: *const libc::uint8_t, \n        q_len: libc::uint64_t, \n        a_len: *mut libc::uint64_t) \n        -> *mut libc::uint8_t;\n\n    fn cpp_buffer_free(buffer: *mut libc::c_void); // this frees memory\n}\n```\n\nIn C++ land, this function takes the query (byte vector), does stuff to it, and returns an answer (a pointer to a byte vector). Once my app is done with the answer it calls a cpp function to garbage collect the byte vector pointer.\n\nI run this code by invoking: `cargo bench -- --test bench_function_name`\n\nGiven the big difference in performance (from 5ms to 28ms), my guess is that the issue affects either: ~~the test or criterion crates~~, the libraries required to build and link against C/C++ (cmake, FFI, libc), or the way I'm using the Drop trait.\n\nTo link the library my build.rs has the lines:\n\n``` rust\nlet dst = cmake::Config::new(\"../lib_folder\")\n                         .define(\"CMAKE_BUILD_TYPE\", \"Release\")\n                         .build();\n\nprintln!(\"cargo:rustc-link-search=native={}/directory_of_lib\", dst.display());\nprintln!(\"cargo:rustc-link-lib=static=lib_name\");\n```\n\nAny thoughts? I'm happy to provide as much information as I can.\n", "closed_by": {"login": "sga001", "id": 495660, "node_id": "MDQ6VXNlcjQ5NTY2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/495660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sga001", "html_url": "https://github.com/sga001", "followers_url": "https://api.github.com/users/sga001/followers", "following_url": "https://api.github.com/users/sga001/following{/other_user}", "gists_url": "https://api.github.com/users/sga001/gists{/gist_id}", "starred_url": "https://api.github.com/users/sga001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sga001/subscriptions", "organizations_url": "https://api.github.com/users/sga001/orgs", "repos_url": "https://api.github.com/users/sga001/repos", "events_url": "https://api.github.com/users/sga001/events{/privacy}", "received_events_url": "https://api.github.com/users/sga001/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/36590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/36590/timeline", "performed_via_github_app": null, "state_reason": "completed"}