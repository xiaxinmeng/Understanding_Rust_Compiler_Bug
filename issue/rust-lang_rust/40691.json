{"url": "https://api.github.com/repos/rust-lang/rust/issues/40691", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/40691/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/40691/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/40691/events", "html_url": "https://github.com/rust-lang/rust/issues/40691", "id": 215595115, "node_id": "MDU6SXNzdWUyMTU1OTUxMTU=", "number": 40691, "title": "Unergonomic pub(in path) error message", "user": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-21T00:29:03Z", "updated_at": "2017-03-21T08:46:54Z", "closed_at": "2017-03-21T08:46:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The pub(in path) error message is very unergonomic when it comes to paths that don't exist, or don't exist yet. Take this example, its how the error was intented:\r\n\r\n```rust\r\npub mod baa {}\r\npub mod boo {\r\n\tpub (in baa) fn foo() {}\r\n}\r\n```\r\ngives an error \"visibilities can only be restricted to ancestor modules\". Now take this example:\r\n\r\n```rust\r\npub mod boo {\r\n\tpub (in baa) fn foo() {}\r\n}\r\npub mod baa {}\r\n```\r\n\r\nThis gives an error \"cannot find module `baa` in the crate root\".\r\n\r\nAnd this code:\r\n\r\n```rust\r\npub mod boo {\r\n\tpub (in baa::baa) fn foo() {}\r\n}\r\n```\r\neven gives an error \"failed to resolve. Maybe a missing `extern crate baa;`?\".\r\n\r\nWhat should happen instead is that in the second and third case, it should output an error similar to the first one. As it seems to not know about modules declared after the code yet (see second case), adding a note to the existing error is not enough, as clearly an error \"cannot find module `baa` in the crate root\" is misleading in this case. So unless it can be taught to know modules declared after the current code, I'd suggest to have an error similar to the first case in all three cases.", "closed_by": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/40691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/40691/timeline", "performed_via_github_app": null, "state_reason": "completed"}