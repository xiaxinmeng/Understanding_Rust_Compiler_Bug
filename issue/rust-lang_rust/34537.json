{"url": "https://api.github.com/repos/rust-lang/rust/issues/34537", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/34537/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/34537/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/34537/events", "html_url": "https://github.com/rust-lang/rust/issues/34537", "id": 162798003, "node_id": "MDU6SXNzdWUxNjI3OTgwMDM=", "number": 34537, "title": "Tracking issue for `private_in_public` compatibility lint.", "user": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 630636017, "node_id": "MDU6TGFiZWw2MzA2MzYwMTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-future-compatibility", "name": "C-future-compatibility", "color": "f5f1fd", "default": false, "description": "Category: future compatibility lints"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 52, "created_at": "2016-06-28T22:01:41Z", "updated_at": "2023-04-17T17:17:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#### What is this lint about\r\n\r\n[RFC 136](https://github.com/rust-lang/rfcs/blob/master/text/0136-no-privates-in-public.md) describes rules for using private types and traits in interfaces of public items. The main idea is that an entity restricted to some module cannot be used outside of that module. Private items are considered restricted to the module they are defined in, `pub` items are considered unrestricted and being accessible for all the universe of crates, [RFC 1422](https://github.com/rust-lang/rfcs/pull/1422) describes some more fine-grained restrictions. Note that the restrictions are determined entirely by item's declarations and don't require any reexport traversal and reachability analysis. \"Used\" means different things for different entities, for example private modules simply can't be named outside of their module, private types can't be named and additionally values of their type cannot be obtained outside of their module, etc. To enforce these rules more visible entities cannot contain less visible entities in their interfaces. Consider, for example, this function:\r\n\r\n```\r\nmod m {\r\n    struct S;\r\n    pub fn f() -> S { S } // ERROR\r\n}\r\n```\r\n\r\nIf this were allowed, then values of private type `S` could leave its module.\r\n\r\nDespite the RFC being accepted these rules were not completely enforced until https://github.com/rust-lang/rust/pull/29973 fixed most of the missing cases. Some more missing cases were covered later by PRs https://github.com/rust-lang/rust/pull/32674 and https://github.com/rust-lang/rust/pull/31362. For backward compatibility the new errors were reported as warnings (lints). Now it's time to retire these warnings and turn them into hard errors, which they are supposed to be.\r\n\r\nThis issue also tracks another very similar lint, `pub_use_of_private_extern_crate`, checking for a specific \"private-in-public\" situation.\r\n\r\n#### How to fix this warning/error\r\n\r\nIf you _really_ want to use some private unnameable type or trait in a public interface, for example to emulate [sealed traits](https://internals.rust-lang.org/t/pre-rfc-sealed-traits/3108), then there's a universal workaround - make the item public, but put it into a private inner module.\r\n\r\n```\r\nmod m {\r\n    mod detail {\r\n        pub trait Float {}\r\n        impl Float for f32 {}\r\n        impl Float for f64 {}\r\n    }\r\n    pub fn multiply_by_2<T: detail::Float>(arg: T) { .... } // OK\r\n}\r\n```\r\n\r\nThe trait `Float` is public from the private-in-public checker's point of view, because it uses only local reasoning, however `Float` is unnameable from outside of `m` and effectively private, because it isn't actually reexported from `m` despite being potentially reexportable.\r\nYou'll also have to manually document what kind of mystery set of arguments your public function `multiply_by_2` accepts, because unnameable traits are effectively private for rustdoc.\r\n#### Current status\r\n- [x] https://github.com/rust-lang/rust/pull/29973 introduces the `private_in_public` lint as warn-by-default\r\n- [x] https://github.com/rust-lang/rust/pull/34206 makes the `private_in_public` lint deny-by-default\r\n- [x] https://github.com/rust-lang/rust/pull/36270 makes the `private_in_public` lint warn-by-default again due to [relatively large](https://internals.rust-lang.org/t/regression-report-stable-2016-08-16-vs-beta-2016-08-26/3930/8) amount of breakage\r\n- [ ] PR ? makes the `private_in_public` lint deny-by-default\r\n- [ ] PR ? makes the `private_in_public` lint a hard error\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/34537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/34537/timeline", "performed_via_github_app": null, "state_reason": null}