{"url": "https://api.github.com/repos/rust-lang/rust/issues/50043", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50043/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50043/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50043/events", "html_url": "https://github.com/rust-lang/rust/issues/50043", "id": 315348817, "node_id": "MDU6SXNzdWUzMTUzNDg4MTc=", "number": 50043, "title": "Detect recursive instantiation of generic functions", "user": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1839565265, "node_id": "MDU6TGFiZWwxODM5NTY1MjY1", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-terse", "name": "D-terse", "color": "c9f7a3", "default": false, "description": "A diagnostic that doesn't give enough information about the problem at hand"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-18T06:36:42Z", "updated_at": "2022-11-11T04:33:05Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "#### We currently have a quite helpful diagnostic for unconditionally recursive functions:\r\n\r\n```rust\r\npub fn recur() {\r\n    recur();\r\n}\r\n```\r\n\r\n```\r\nwarning: function cannot return without recurring\r\n --> src/main.rs:1:1\r\n  |\r\n1 | pub fn recur() {\r\n  | ^^^^^^^^^^^^^^ cannot return without recurring\r\n2 |     recur();\r\n  |     ------- recursive call site\r\n  |\r\n  = note: #[warn(unconditional_recursion)] on by default\r\n  = help: a `loop` may express intention better if this is on purpose\r\n```\r\n\r\n#### And infinitely sized recursive types:\r\n\r\n```rust\r\npub struct S {\r\n    s: S,\r\n}\r\n```\r\n\r\n```\r\nerror[E0072]: recursive type `S` has infinite size\r\n --> src/main.rs:1:1\r\n  |\r\n1 | pub struct S {\r\n  | ^^^^^^^^^^^^ recursive type has infinite size\r\n2 |     s: S,\r\n  |     ---- recursive without indirection\r\n  |\r\n  = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `S` representable\r\n```\r\n\r\n#### But no good error for infinite instantiation of generic functions.\r\n\r\nThe following is minimized from @LPGhatguy's syntax tree library ([original playground](https://play.rust-lang.org/?gist=c21ebe815e8cc00680bfd85d51ce8d0d)).\r\n\r\n```rust\r\ntrait Serializer {\r\n    type Associated;\r\n    fn leaf() -> Self::Associated { unimplemented!() }\r\n}\r\n\r\npub enum Expression {\r\n    Leaf,\r\n    Node(Box<Expression>),\r\n}\r\n\r\nfn print<S: Serializer>(e: Expression) {\r\n    match e {\r\n        Expression::Leaf => drop(S::leaf()),\r\n        Expression::Node(e) => print::<Wrapper<S>>(*e),\r\n    }\r\n}\r\n\r\nuse std::marker::PhantomData as Wrapper;\r\nimpl<S: Serializer> Serializer for Wrapper<S> {\r\n    type Associated = S::Associated;\r\n}\r\n\r\nenum Json {}\r\nimpl Serializer for Json {\r\n    type Associated = ();\r\n}\r\n\r\nfn main() {\r\n    print::<Json>(Expression::Leaf);\r\n}\r\n```\r\n\r\nHere the instantiation of `print::<Json>` requires instantiating `print::<Wrapper<Json>>` which calls `print::<Wrapper<Wrapper<Json>>` which calls `print::<Wrapper<Wrapper<Wrapper<Json>>>`... (The use case in this example is noteworthy because it is conceptually sensible; the trouble happens only when combined with Rust's approach of monomorphizing generic functions. [Analogous code in Swift](https://iswift.org/playground?XO5tjo&v=4) where generics are not monomorphized does not hit the same overflow.)\r\n\r\nAs of rustc 1.27.0-nightly we get an unhelpful message with a recommendation that can't work. It would be better to detect this pattern of a generic function generating a tower of recursive instantiations.\r\n\r\n```\r\nerror[E0275]: overflow evaluating the requirement `<Json as Serializer>::Associated`\r\n  |\r\n  = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\r\n\r\nerror: aborting due to previous error\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50043/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50043/timeline", "performed_via_github_app": null, "state_reason": null}