{"url": "https://api.github.com/repos/rust-lang/rust/issues/74725", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74725/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74725/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74725/events", "html_url": "https://github.com/rust-lang/rust/issues/74725", "id": 665356914, "node_id": "MDU6SXNzdWU2NjUzNTY5MTQ=", "number": 74725, "title": "NaN checking for result function failed", "user": {"login": "Zaryob", "id": 22801690, "node_id": "MDQ6VXNlcjIyODAxNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/22801690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zaryob", "html_url": "https://github.com/Zaryob", "followers_url": "https://api.github.com/users/Zaryob/followers", "following_url": "https://api.github.com/users/Zaryob/following{/other_user}", "gists_url": "https://api.github.com/users/Zaryob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zaryob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zaryob/subscriptions", "organizations_url": "https://api.github.com/users/Zaryob/orgs", "repos_url": "https://api.github.com/users/Zaryob/repos", "events_url": "https://api.github.com/users/Zaryob/events{/privacy}", "received_events_url": "https://api.github.com/users/Zaryob/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-24T19:00:06Z", "updated_at": "2020-07-24T19:47:52Z", "closed_at": "2020-07-24T19:47:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I trying to create a mathematical expression library. I wrote that function in  `lib.rs`:\r\n\r\n```rust\r\n\r\npub fn limit(reachment: f64, function: &dyn Fn(f64) -> f64) -> f64 {\r\n    function(reachment)\r\n}\r\n\r\n```\r\n\r\nIn theory whether there is not limit at `reachment` it needs to return NaN.\r\n\r\nI write a test to check that issue:\r\n\r\n```rust\r\n#[cfg(test)]\r\nmod tests {\r\n    use limit::limit;\r\n    use core::f64::NAN;\r\n\r\n    pub fn simple_function_one(x: f64) -> f64 {\r\n        x / x\r\n    }\r\n\r\n    #[test]\r\n    fn test_sf1_zerotest() {\r\n        assert_eq!(limit(0.0, &simple_function_one), NAN);\r\n    }\r\n```\r\n\r\nWhen I started `cargo test` command it gives that failture:\r\n```\r\ntest tests::test_sf1_zerotest ... FAILED\r\n\r\nfailures:\r\n\r\n---- tests::test_sf1_zerotest stdout ----\r\nthread 'tests::test_sf1_zerotest' panicked at 'assertion failed: `(left == right)`\r\n  left: `NaN`,\r\n right: `NaN`', limit/tests/test.rs:29:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\n\r\nfailures:\r\n    tests::test_sf1_zerotest\r\n\r\ntest result: FAILED. 2 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.45.0 (5c1f21c3b 2020-07-13)\r\nbinary: rustc\r\ncommit-hash: 5c1f21c3b82297671ad3ae1e8c942d2ca92e84f2\r\ncommit-date: 2020-07-13\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.45.0\r\nLLVM version: 10.0\r\n\r\n```\r\n\r\n`cargo --version --verbose`\r\n```\r\ncargo 1.45.0 (744bd1fbb 2020-06-15)\r\nrelease: 1.45.0\r\ncommit-hash: 744bd1fbb666f33b20b09d5bacc5047957c8ed42\r\ncommit-date: 2020-06-15\r\n```\r\n\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nwarning: function is never used: `simple_function_two`\r\n  --> limit/tests/test.rs:10:12\r\n   |\r\n10 |     pub fn simple_function_two(x: f64) -> f64 {\r\n   |            ^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: `#[warn(dead_code)]` on by default\r\n\r\nwarning: 1 warning emitted\r\n\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.09s\r\n     Running target/debug/deps/derivative-406fa269dbb62fe0\r\n\r\nrunning 0 tests\r\n\r\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n     Running target/debug/deps/mtd_test-ad4d1838a0370202\r\n\r\nrunning 0 tests\r\n\r\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n     Running target/debug/deps/simple_otd_test-6d002bde59911887\r\n\r\nrunning 6 tests\r\ntest simple_otd_tests::test_sf1_1 ... ok\r\ntest simple_otd_tests::test_sf1_2 ... ok\r\ntest simple_otd_tests::test_sf1_zerotest ... ok\r\ntest simple_otd_tests::test_sf2_2 ... ok\r\ntest simple_otd_tests::test_sf2_zerotest ... ok\r\ntest simple_otd_tests::test_sf2_1 ... ok\r\n\r\ntest result: ok. 6 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n     Running target/debug/deps/integral-7af9a0aa4242f899\r\n\r\nrunning 1 test\r\ntest tests::it_works ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n     Running target/debug/deps/limit-a55dacd3e564f507\r\n\r\nrunning 0 tests\r\n\r\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n     Running target/debug/deps/test-72247c6600249bbd\r\n\r\nrunning 3 tests\r\ntest tests::test_sf1_1 ... ok\r\ntest tests::test_sf1_2 ... ok\r\ntest tests::test_sf1_zerotest ... FAILED\r\n\r\nfailures:\r\n\r\n---- tests::test_sf1_zerotest stdout ----\r\nthread 'tests::test_sf1_zerotest' panicked at 'assertion failed: `(left == right)`\r\n  left: `NaN`,\r\n right: `NaN`', limit/tests/test.rs:29:9\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:78\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1076\r\n   5: std::io::Write::write_fmt\r\n             at /rustc/5c1f21c3b82297671ad3ae1e8c942d2ca92e84f2/src/libstd/io/mod.rs:1537\r\n   6: std::io::impls::<impl std::io::Write for alloc::boxed::Box<W>>::write_fmt\r\n             at src/libstd/io/impls.rs:176\r\n   7: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   8: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   9: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:198\r\n  10: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:215\r\n  11: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:486\r\n  12: rust_begin_unwind\r\n             at src/libstd/panicking.rs:388\r\n  13: std::panicking::begin_panic_fmt\r\n             at src/libstd/panicking.rs:342\r\n  14: test::tests::test_sf1_zerotest\r\n             at limit/tests/test.rs:29\r\n  15: test::tests::test_sf1_zerotest::{{closure}}\r\n             at limit/tests/test.rs:28\r\n  16: core::ops::function::FnOnce::call_once\r\n             at /rustc/5c1f21c3b82297671ad3ae1e8c942d2ca92e84f2/src/libcore/ops/function.rs:232\r\n  17: <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once\r\n             at /rustc/5c1f21c3b82297671ad3ae1e8c942d2ca92e84f2/src/liballoc/boxed.rs:1076\r\n  18: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n             at /rustc/5c1f21c3b82297671ad3ae1e8c942d2ca92e84f2/src/libstd/panic.rs:318\r\n  19: std::panicking::try::do_call\r\n             at /rustc/5c1f21c3b82297671ad3ae1e8c942d2ca92e84f2/src/libstd/panicking.rs:297\r\n  20: std::panicking::try\r\n             at /rustc/5c1f21c3b82297671ad3ae1e8c942d2ca92e84f2/src/libstd/panicking.rs:274\r\n  21: std::panic::catch_unwind\r\n             at /rustc/5c1f21c3b82297671ad3ae1e8c942d2ca92e84f2/src/libstd/panic.rs:394\r\n  22: test::run_test_in_process\r\n             at src/libtest/lib.rs:541\r\n  23: test::run_test::run_test_inner::{{closure}}\r\n             at src/libtest/lib.rs:450\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\n\r\nfailures:\r\n    tests::test_sf1_zerotest\r\n\r\ntest result: FAILED. 2 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\nerror: test failed, to rerun pass '-p limit --test test'\r\n\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74725/timeline", "performed_via_github_app": null, "state_reason": "completed"}