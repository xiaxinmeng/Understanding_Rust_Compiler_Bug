{"url": "https://api.github.com/repos/rust-lang/rust/issues/4512", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/4512/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/4512/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/4512/events", "html_url": "https://github.com/rust-lang/rust/issues/4512", "id": 10035996, "node_id": "MDU6SXNzdWUxMDAzNTk5Ng==", "number": 4512, "title": "Segfault without using `unsafe` in this program extracted from the test suite", "user": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 120005, "node_id": "MDU6TGFiZWwxMjAwMDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-testsuite", "name": "A-testsuite", "color": "f7e101", "default": false, "description": "Area: The testsuite used to check the correctness of rustc"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/9", "html_url": "https://github.com/rust-lang/rust/milestone/9", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/9/labels", "id": 194126, "node_id": "MDk6TWlsZXN0b25lMTk0MTI2", "number": 9, "title": "0.6", "description": "", "creator": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 203, "state": "closed", "created_at": "2012-10-11T18:15:24Z", "updated_at": "2015-01-21T01:43:22Z", "due_on": "2013-03-25T07:00:00Z", "closed_at": "2013-04-02T18:27:52Z"}, "comments": 2, "created_at": "2013-01-16T21:19:33Z", "updated_at": "2013-03-20T22:02:33Z", "closed_at": "2013-03-20T22:02:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've extracted (a.k.a. added lots of `use` statements) the following program from the test module in std::flatpipes. It compiles, but segfaults when run and doesn't use the unsafe keyword anywhere. Haven't reduced it yet.\n\n```\nextern mod std;\n\nuse std::net;\nuse std::net::tcp::TcpSocketBuf;\nuse std::cell;\nuse std::uv;\nuse std::flatpipes::{Unflattener, Flattener, FlatPort, FlatChan};\nuse std::flatpipes::bytepipes::{ReaderBytePort, WriterByteChan};\nuse std::flatpipes::pod;\n\ntype ReaderPortFactory<U: Unflattener<int>> =\n    ~fn(TcpSocketBuf) -> FlatPort<int, U, ReaderBytePort<TcpSocketBuf>>;\ntype WriterChanFactory<F: Flattener<int>> =\n    ~fn(TcpSocketBuf) -> FlatChan<int, F, WriterByteChan<TcpSocketBuf>>;\n\nfn main() {\n    test_pod_tcp_stream();\n}\n\nfn test_pod_tcp_stream() {\n    fn reader_port(buf: TcpSocketBuf\n                  ) -> pod::ReaderPort<int, TcpSocketBuf> {\n        pod::reader_port(move buf)\n    }\n    fn writer_chan(buf: TcpSocketBuf\n                  ) -> pod::WriterChan<int, TcpSocketBuf> {\n        pod::writer_chan(move buf)\n    }\n    test_some_tcp_stream(reader_port, writer_chan, 9666);\n}\n\nfn test_some_tcp_stream<U: Unflattener<int>, F: Flattener<int>>(\n    reader_port: ReaderPortFactory<U>,\n    writer_chan: WriterChanFactory<F>,\n    port: uint) {\n\n    use net::tcp;\n    use net::ip;\n    use cell::Cell;\n    use net::tcp::TcpSocket;\n\n    // Indicate to the client task that the server is listening\n    let (begin_connect_port, begin_connect_chan) = pipes::stream();\n    // The connection is sent from the server task to the receiver task\n    // to handle the connection\n    let (accept_port, accept_chan) = pipes::stream();\n    // The main task will wait until the test is over to proceed\n    let (finish_port, finish_chan) = pipes::stream();\n\n    let addr = ip::v4::parse_addr(\"127.0.0.1\");\n    let iotask = uv::global_loop::get();\n\n    let begin_connect_chan = Cell(move begin_connect_chan);\n    let accept_chan = Cell(move accept_chan);\n\n    // The server task\n    do task::spawn |copy addr, move begin_connect_chan,\n                    move accept_chan| {\n        let begin_connect_chan = begin_connect_chan.take();\n        let accept_chan = accept_chan.take();\n        let listen_res = do tcp::listen(\n            copy addr, port, 128, iotask,\n            |move begin_connect_chan, _kill_ch| {\n                // Tell the sender to initiate the connection\n                debug!(\"listening\");\n                begin_connect_chan.send(())\n            }) |move accept_chan, new_conn, kill_ch| {\n\n            // Incoming connection. Send it to the receiver task to accept\n            let (res_port, res_chan) = pipes::stream();\n            accept_chan.send((move new_conn, move res_chan));\n            // Wait until the connection is accepted\n            res_port.recv();\n\n            // Stop listening\n            kill_ch.send(None)\n        };\n\n        assert listen_res.is_ok();\n    }\n\n    // Client task\n    do task::spawn |copy addr, move begin_connect_port,\n                    move writer_chan| {\n\n        // Wait for the server to start listening\n        begin_connect_port.recv();\n\n        debug!(\"connecting\");\n        let connect_result = tcp::connect(copy addr, port, iotask);\n        assert connect_result.is_ok();\n        let sock = result::unwrap(move connect_result);\n        let socket_buf: tcp::TcpSocketBuf = tcp::socket_buf(move sock);\n\n        // TcpSocketBuf is a Writer!\n        let chan = writer_chan(move socket_buf);\n\n        for int::range(0, 10) |i| {\n            debug!(\"sending %?\", i);\n            chan.send(i)\n        }\n    }\n\n    // Reciever task\n    do task::spawn |move accept_port, move finish_chan,\n                    move reader_port| {\n\n        // Wait for a connection\n        let (conn, res_chan) = accept_port.recv();\n\n        debug!(\"accepting connection\");\n        let accept_result = tcp::accept(conn);\n        debug!(\"accepted\");\n        assert accept_result.is_ok();\n        let sock = result::unwrap(move accept_result);\n        res_chan.send(());\n\n        let socket_buf: tcp::TcpSocketBuf = tcp::socket_buf(move sock);\n\n        // TcpSocketBuf is a Reader!\n        let port = reader_port(move socket_buf);\n\n        for int::range(0, 10) |i| {\n            let j = port.recv();\n            debug!(\"receieved %?\", j);\n            assert i == j;\n        }\n\n        // The test is over!\n        finish_chan.send(());\n    }\n\n    finish_port.recv();\n}\n```\n", "closed_by": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/4512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/4512/timeline", "performed_via_github_app": null, "state_reason": "completed"}