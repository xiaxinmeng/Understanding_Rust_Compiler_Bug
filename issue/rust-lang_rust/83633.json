{"url": "https://api.github.com/repos/rust-lang/rust/issues/83633", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83633/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83633/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83633/events", "html_url": "https://github.com/rust-lang/rust/issues/83633", "id": 843093960, "node_id": "MDU6SXNzdWU4NDMwOTM5NjA=", "number": 83633, "title": "SIGSEGV in rust nightly 2021-01-07 (rustc 1.51.0-nightly) ", "user": {"login": "vlisivka", "id": 4396623, "node_id": "MDQ6VXNlcjQzOTY2MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4396623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlisivka", "html_url": "https://github.com/vlisivka", "followers_url": "https://api.github.com/users/vlisivka/followers", "following_url": "https://api.github.com/users/vlisivka/following{/other_user}", "gists_url": "https://api.github.com/users/vlisivka/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlisivka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlisivka/subscriptions", "organizations_url": "https://api.github.com/users/vlisivka/orgs", "repos_url": "https://api.github.com/users/vlisivka/repos", "events_url": "https://api.github.com/users/vlisivka/events{/privacy}", "received_events_url": "https://api.github.com/users/vlisivka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1884641928, "node_id": "MDU6TGFiZWwxODg0NjQxOTI4", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-AVR", "name": "O-AVR", "color": "6e6ec0", "default": false, "description": "Target: AVR processors (ATtiny, ATmega, etc.)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-03-29T08:02:26Z", "updated_at": "2022-05-09T17:23:30Z", "closed_at": "2022-05-09T17:23:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Code for AVR target. Code compiled on Fedora 33. Code reduced by `comby-reducer`. \r\n\r\n[rapt-reduced.tar.gz](https://github.com/rust-lang/rust/files/6220133/rapt-reduced.tar.gz)\r\n\r\nProgram requires nightly 2021-01-07. I cannot use newer version of rustc to check, because of _unrelated_ bug in llvm for AVR target(`LLVM ERROR: Not supported instr: <MCInst 296 <MCOperand Reg:1> <MCOperand Imm:15> <MCOperand Reg:39>`).\r\n\r\n### Code\r\n\r\n```Rust\r\n#![no_std]\r\n#![no_main]\r\nuse arduino_uno::prelude::*;\r\nuse arduino_uno::Serial;\r\nuse atmega328p_hal::port::mode;\r\nuse atmega328p_hal::port::Pin;\r\nuse avr_hal_generic::usart::{Usart, UsartOps};\r\nuse avr_std_stub as _;\r\nmod line_buffer;\r\nuse line_buffer::LineBuffer;\r\nmod atoi;\r\nuse atoi::atoi_u8;\r\nconst MAX_BUF_LEN: usize = 128;\r\nstatic mut LINE_BUFFER: [u8; MAX_BUF_LEN] = [0; MAX_BUF_LEN];\r\nenum PinState {\r\n    InputFloating(Pin<mode::Input<mode::Floating>>),\r\n    InputAnalog(Pin<mode::Input<mode::PullUp>>),\r\n    Output(Pin<mode::Output>),\r\n    TriState(Pin<mode::TriState>),\r\n}\r\nfn error<USART, PD0, PD1, CLOCK>(serial: &mut Usart<USART, PD0, PD1, CLOCK>, message: &str) where    USART: UsartOps<PD0, PD1>, {}\r\n#[arduino_uno::entry]\r\nfn main() -> ! {\r\n    let peripherals = arduino_uno::Peripherals::take().unwrap();\r\n    let mut pins = arduino_uno::Pins::new(peripherals.PORTB, peripherals.PORTC, peripherals.PORTD);\r\n    let serial_rx = pins.d0;\r\n    let serial_tx = pins.d1.into_output(&mut pins.ddr);\r\n    let mut serial = Serial::new(peripherals.USART0, serial_rx, serial_tx, 115200.into_baudrate());\r\n    let mut line_buffer = unsafe { LineBuffer::new(&mut LINE_BUFFER) };\r\n    let mut pin_state = [\r\n        PinState::TriState(pins.d3.into_tri_state(&pins.ddr).downgrade()),\r\n        PinState::TriState(pins.d4.into_tri_state(&pins.ddr).downgrade()),\r\n        PinState::TriState(pins.d5.into_tri_state(&pins.ddr).downgrade()),\r\n        PinState::TriState(pins.d6.into_tri_state(&pins.ddr).downgrade()),\r\n        PinState::TriState(pins.d7.into_tri_state(&pins.ddr).downgrade()),\r\n        PinState::TriState(pins.d8.into_tri_state(&pins.ddr).downgrade()),\r\n        PinState::TriState(pins.d9.into_tri_state(&pins.ddr).downgrade()),\r\n        PinState::TriState(pins.d10.into_tri_state(&pins.ddr).downgrade()),\r\n        PinState::TriState(pins.d11.into_tri_state(&pins.ddr).downgrade()),\r\n        PinState::TriState(pins.d12.into_tri_state(&pins.ddr).downgrade()),\r\n        PinState::TriState(pins.d13.into_tri_state(&pins.ddr).downgrade()),\r\n    ];\r\n    loop {\r\n        ufmt::uwrite!(&mut serial, \"\\x1B[1mrapt>\\x1B[0m \").void_unwrap();\r\n        if line_buffer.read_line(&mut serial) > 0 {\r\n            for command in line_buffer.words() {\r\n                match command {\r\n                    [b'r', tail @ ..] => {\r\n                        match atoi_u8(tail) {\r\n                            Some(pin_number) if (pin_number as usize) < pin_state.len() => {\r\n                                match &pin_state[pin_number as usize] {\r\n                                    PinState::InputFloating(pin) => {\r\n                                        ufmt::uwrite!(serial, \"p{}={}\\r\\n\", pin_number, pin.is_high().unwrap()).void_unwrap();\r\n                                    }\r\n                                    PinState::InputAnalog(pin) => {\r\n                                        ufmt::uwrite!(serial, \"p{}={}\\r\\n\", pin_number, pin.is_high().unwrap() ).void_unwrap();\r\n                                    }\r\n                                    PinState::TriState(pin) => {\r\n                                        ufmt::uwrite!(serial, \"p{}={}\\r\\n\", pin_number, pin.is_high().unwrap()).void_unwrap();\r\n                                    }\r\n                                    _ => {}\r\n                                }\r\n                            }\r\n                            _ => {}\r\n                        }\r\n                    }\r\n                    [b'w', tail @ .., val] => {\r\n                        match atoi_u8(tail) {\r\n                            Some(pin_number) if (pin_number as usize) < pin_state.len() => {\r\n                                match &mut pin_state[pin_number as usize] {\r\n                                    PinState::Output(ref mut pin) => {\r\n                                        let v = match val {\r\n                                            b'l' | b'L' => false,\r\n                                            b'h' | b'H' =>true,\r\n                                            _ => {\r\n                                                continue;\r\n                                            }\r\n                                        };\r\n                                        ufmt::uwrite!(serial, \"p{}={}\\r\\n\", pin_number, v).void_unwrap();\r\n                                    }\r\n                                    PinState::TriState(ref mut pin) => {\r\n                                        let v = match val {\r\n                                            b'l' | b'L' => {\r\n                                                pin.set_low().expect(\"\");\r\n                                                false\r\n                                            }\r\n                                            b'h' | b'H' => {\r\n                                                pin.set_high().expect(\"\");\r\n                                                true\r\n                                            }\r\n                                            _ => {\r\n                                                continue;\r\n                                            }\r\n                                        };\r\n                                        ufmt::uwrite!(serial, \"p{}={}\\r\\n\", pin_number, v).void_unwrap();\r\n                                    }\r\n                                    _ => {}\r\n                                }\r\n                            }\r\n                            _ => {}\r\n                        }\r\n                    }\r\n                    _ => error(&mut serial, \"\"),\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.51.0-nightly (c2de47a9a 2021-01-06)\r\nbinary: rustc\r\ncommit-hash: c2de47a9aa4c9812884f341f1852e9c9610f5f7a\r\ncommit-date: 2021-01-06\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.51.0-nightly\r\n\r\n```\r\n\r\n### Error output\r\n\r\n```\r\n  process didn't exit successfully: `rustc --crate-name rapt --edition=2018 src/main.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C opt-level=s -C panic=abort -C lto -C codegen-units=1 -C debuginfo=2 -C metadata=874b614425088d6c -C extra-filename=-874b614425088d6c --out-dir /home/vlisivka/workspace/rapt/target/avr-atmega328p/release/deps --target /home/vlisivka/workspace/rapt/avr-atmega328p.json -L dependency=/home/vlisivka/workspace/rapt/target/avr-atmega328p/release/deps -L dependency=/home/vlisivka/workspace/rapt/target/release/deps --extern arduino_uno=/home/vlisivka/workspace/rapt/target/avr-atmega328p/release/deps/libarduino_uno-2a2559e92b4f8b94.rlib --extern atmega328p_hal=/home/vlisivka/workspace/rapt/target/avr-atmega328p/release/deps/libatmega328p_hal-9252c4cc0359dc4c.rlib --extern avr_hal_generic=/home/vlisivka/workspace/rapt/target/avr-atmega328p/release/deps/libavr_hal_generic-8b1481097f48b6ab.rlib --extern avr_std_stub=/home/vlisivka/workspace/rapt/target/avr-atmega328p/release/deps/libavr_std_stub-9b4b6bb91705909d.rlib --extern 'noprelude:compiler_builtins=/home/vlisivka/workspace/rapt/target/avr-atmega328p/release/deps/libcompiler_builtins-6ac0a51c4b9ecfe7.rlib' --extern 'noprelude:core=/home/vlisivka/workspace/rapt/target/avr-atmega328p/release/deps/libcore-627006de141c21fe.rlib' --extern nb=/home/vlisivka/workspace/rapt/target/avr-atmega328p/release/deps/libnb-949e9a646194f61f.rlib --extern ufmt=/home/vlisivka/workspace/rapt/target/avr-atmega328p/release/deps/libufmt-e2008be75bc74481.rlib -Z unstable-options` (signal: 11, SIGSEGV: invalid memory reference)\r\n\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83633/timeline", "performed_via_github_app": null, "state_reason": "completed"}