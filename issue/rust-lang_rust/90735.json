{"url": "https://api.github.com/repos/rust-lang/rust/issues/90735", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90735/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90735/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90735/events", "html_url": "https://github.com/rust-lang/rust/issues/90735", "id": 1048909959, "node_id": "I_kwDOAAsO6M4-hRiH", "number": 90735, "title": "Confusing diagnostic for iterators lifetimes with `Drop` and `chain()`", "user": {"login": "bnjbvr", "id": 1180019, "node_id": "MDQ6VXNlcjExODAwMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1180019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjbvr", "html_url": "https://github.com/bnjbvr", "followers_url": "https://api.github.com/users/bnjbvr/followers", "following_url": "https://api.github.com/users/bnjbvr/following{/other_user}", "gists_url": "https://api.github.com/users/bnjbvr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjbvr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjbvr/subscriptions", "organizations_url": "https://api.github.com/users/bnjbvr/orgs", "repos_url": "https://api.github.com/users/bnjbvr/repos", "events_url": "https://api.github.com/users/bnjbvr/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjbvr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-11-09T18:01:04Z", "updated_at": "2021-11-09T18:01:04Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=26f878711564a5bff2c0da3be4de81af\r\n\r\nThere are two things that I consider to be error output bugs, but that can be probably be discussed:\r\n\r\n## `IntoIterator` exists for `&Type` but not `Type`\r\n\r\nThe first one was that an earlier version of this code didn't use `into_iter()` at line 18, because I thought that it would compile properly without it. After all, the promise is that `for x in X` is the same as `for x in X.into_iter()`, right? But in that case, `&itertools::GroupBy` (note leading borrow) has `IntoIterator`, not `itertools::GroupBy` itself.\r\n\r\nThe compiler output for that error is the following:\r\n\r\n```\r\nerror[E0277]: `itertools::GroupBy<i32, std::slice::Iter<'_, Val>, [closure@src/main.rs:18:46: 18:61]>` is not an iterator\r\n   --> src/main.rs:18:26\r\n    |\r\n18  |     for (_key, chunk) in vec.iter().group_by(|val| val.x % 2){\r\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `itertools::GroupBy<i32, std::slice::Iter<'_, Val>, [closure@src/main.rs:18:46: 18:61]>` is not an iterator\r\n    |\r\n    = help: the trait `Iterator` is not implemented for `itertools::GroupBy<i32, std::slice::Iter<'_, Val>, [closure@src/main.rs:18:46: 18:61]>`\r\n    = note: required because of the requirements on the impl of `IntoIterator` for `itertools::GroupBy<i32, std::slice::Iter<'_, Val>, [closure@src/main.rs:18:46: 18:61]>`\r\nnote: required by `into_iter`\r\n```\r\n\r\nIt would be ideal if it could suggest to use `&vec.iter().group_by(...)` instead, and maybe give fewer details about the error message itself.\r\n\r\n## Lifetime error is confusing\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0597]: `val_start` does not live long enough\r\n  --> src/main.rs:21:36\r\n   |\r\n21 |         let iter = std::iter::once(&val_start)\r\n   |                                    ^^^^^^^^^^ borrowed value does not live long enough\r\n...\r\n25 |     }\r\n   |     -\r\n   |     |\r\n   |     `val_start` dropped here while still borrowed\r\n   |     borrow might be used here, when `chunk` is dropped and runs the `Drop` code for type `Group`\r\n   |\r\n   = note: values in a scope are dropped in the opposite order they are defined\r\n```\r\n\r\nWhile I understand, after discussing this with others, that this is probably correct, the error message is quite confusing: I think that it _could_ mention that the lifetime of the borrow value is induced by the lifetime of the `iter` value, itself induced by the `chain()` calls which will take the overall longer lifetime.\r\n\r\nAlso, the relationship to `Drop` is really not obvious, in particular, and has me gotten quite confused (but it makes sense: it could be that the `itertools::Group` passed to `chain` actually stored something within its own struct fields using inner mutability, and thus that the `itertools::Group` would need to do something with it in its `Drop` implementation). I wonder if we could hint anything useful in that particular case, like `\"chunk\" could store a reference to \"&val_start\"` at line 22.\r\n\r\ncc @estebank ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90735/timeline", "performed_via_github_app": null, "state_reason": null}