{"url": "https://api.github.com/repos/rust-lang/rust/issues/50994", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50994/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50994/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50994/events", "html_url": "https://github.com/rust-lang/rust/issues/50994", "id": 325643865, "node_id": "MDU6SXNzdWUzMjU2NDM4NjU=", "number": 50994, "title": "Performance of helloworld5000 could be improved", "user": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-05-23T10:26:46Z", "updated_at": "2020-03-14T20:10:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`helloworld5000` is the name I've given to the benchmark that is `helloworld` with the `println!(\"Hello world\");` repeated 5,000 times. It's an interesting stress test for the compiler.\r\n\r\nOn my machine, a debug build takes 4.5 seconds and an opt build takes 62(!) seconds.\r\n\r\nIn the debug build, execution time is dominated by `take_and_reset_data`. Cachegrind measures these instruction counts:\r\n```\r\n28,047,781,500  PROGRAM TOTALS\r\n\r\n7,501,239,976  /home/njn/moz/rust0/src/libcore/slice/mod.rs:rustc::infer::region_constraints::RegionConstraintCollector::take_and_reset_data\r\n5,625,275,003  /home/njn/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.9.3/src/snapshot_vec.rs:rustc::infer::region_constraints::RegionConstraintCollector::take_and_reset_data\r\n```\r\nThe `reset_unifications` call within `take_and_reset_data` is the expensive part. It all boils down to `set_all` within the `ena` crate:\r\n```\r\n            .      pub fn set_all(&mut self, mut new_elems: impl FnMut(usize) -> D::Value) {\r\n      185,003          if !self.in_snapshot() {\r\n            .              for (slot, index) in self.values.iter_mut().zip(0..) {\r\n5,625,090,000                  *slot = new_elems(index);\r\n            .              }\r\n            .          } else {\r\n            .              for i in 0..self.values.len() {\r\n            .                  self.set(i, new_elems(i));\r\n            .              }\r\n            .          }\r\n            .      }\r\n```\r\nand iterator code (called from `set_all`):\r\n```\r\n            .      fn next(&mut self) -> Option<$elem> {\r\n            .          // could be implemented with slices, but this avoids bounds checks\r\n            .          unsafe {\r\n            .              if mem::size_of::<T>() != 0 {\r\n    1,067,186                  assume(!self.ptr.is_null());\r\n       20,013                  assume(!self.end.is_null());\r\n            .              }\r\n7,621,400,804              if self.ptr == self.end {\r\n            .                  None\r\n            .              } else {\r\n            .                  Some($mkref!(self.ptr.post_inc()))\r\n            .              }\r\n            .          }\r\n            .      }\r\n```\r\nI did some measurement and found that, in the vast majority of cases, `reset_unification` is a no-op -- it overwrites the the unification table with the same values that it already has. I wonder if we could do better somehow. It's a shame we have to keep the unbound variables around rather than just clearing them like we do with the other data in `take_and_reset_data`. I know that this is an extreme example, but profiles indicate that `reset_unifications` is somewhat hot on more normal programs too. @nikomatsakis, any ideas?\r\n\r\nIn the opt builds, these are the top functions according to Cachegrind:\r\n```\r\n555,228,191,235  PROGRAM TOTALS\r\n\r\n87,515,336,354  /home/njn/moz/rust0/src/llvm/include/llvm/ADT/SmallPtrSet.h:llvm::PointerMayBeCaptured(llvm::Value const*, llvm::CaptureTracker*)\r\n41,641,142,772  /home/njn/moz/rust0/src/llvm/lib/Analysis/CaptureTracking.cpp:llvm::PointerMayBeCaptured(llvm::Value const*, llvm::CaptureTracker*) [/home/njn/moz/rust0/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/codegen-backends/librustc_codegen_llvm-llvm.so]\r\n35,396,524,596  /home/njn/moz/rust0/src/llvm/include/llvm/ADT/DenseMap.h:llvm::SmallDenseMap<llvm::Instruction const*, unsigned int, 32u, llvm::DenseMapInfo<llvm::Instruction const*>, llvm::detail::DenseMapPair<llvm::Instruction const*, unsigned int> >::grow(unsigned int) [/home/njn/moz/rust0/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/codegen-backends/librustc_codegen_llvm-llvm.so]\r\n33,096,763,980  /home/njn/moz/rust0/src/llvm/lib/IR/Attributes.cpp:llvm::AttributeList::getAttributes(unsigned int) const [/home/njn/moz/rust0/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/codegen-backends/librustc_codegen_llvm-llvm.so]\r\n30,008,031,294  /home/njn/moz/rust0/src/llvm/include/llvm/ADT/DenseMap.h:llvm::OrderedBasicBlock::comesBefore(llvm::Instruction const*, llvm::Instruction const*)\r\n29,931,802,152  /home/njn/moz/rust0/src/llvm/lib/IR/Attributes.cpp:llvm::AttributeList::hasAttribute(unsigned int, llvm::Attribute::AttrKind) const [/home/njn/moz/rust0/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/codegen-backends/librustc_codegen_llvm-llvm.so]\r\n```\r\nThat's a lot of time in `PointerMayBeCaptured`.\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50994/timeline", "performed_via_github_app": null, "state_reason": null}