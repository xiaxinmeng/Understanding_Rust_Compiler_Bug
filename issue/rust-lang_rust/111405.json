{"url": "https://api.github.com/repos/rust-lang/rust/issues/111405", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111405/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111405/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111405/events", "html_url": "https://github.com/rust-lang/rust/issues/111405", "id": 1702669697, "node_id": "I_kwDOAAsO6M5lfK2B", "number": 111405, "title": "Floating point modulo producing incorrect compuations", "user": {"login": "Gip-Gip", "id": 13601205, "node_id": "MDQ6VXNlcjEzNjAxMjA1", "avatar_url": "https://avatars.githubusercontent.com/u/13601205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gip-Gip", "html_url": "https://github.com/Gip-Gip", "followers_url": "https://api.github.com/users/Gip-Gip/followers", "following_url": "https://api.github.com/users/Gip-Gip/following{/other_user}", "gists_url": "https://api.github.com/users/Gip-Gip/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gip-Gip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gip-Gip/subscriptions", "organizations_url": "https://api.github.com/users/Gip-Gip/orgs", "repos_url": "https://api.github.com/users/Gip-Gip/repos", "events_url": "https://api.github.com/users/Gip-Gip/events{/privacy}", "received_events_url": "https://api.github.com/users/Gip-Gip/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2139259423, "node_id": "MDU6TGFiZWwyMTM5MjU5NDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-floating-point", "name": "A-floating-point", "color": "f7e101", "default": false, "description": "Area: Floating point numbers and arithmetic"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2023-05-09T19:53:58Z", "updated_at": "2023-05-11T07:18:40Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nfn ieee_mod(a: f32, b: f32) -> f32 {\r\n  a - (a / b).round() * b\r\n}\r\n\r\nfn libc_mod(a: f32, b: f32) -> f32 {\r\n  a % b\r\n}\r\n\r\n\r\nfn main() {\r\n    let x = 1.5 * 3.14;\r\n    let y = 0.5 * 3.14;\r\n    \r\n    assert_eq!(ieee_mod(x, y), libc_mod(x, y));\r\n}\r\n```\r\n\r\nI expected the assert to pass.\r\n\r\nInstead, this happened:\r\n```\r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `0.0`,\r\n right: `1.5699999`', bug.rs:14:5\r\n```\r\n\r\n### Meta\r\n\r\nThis is most likely due to division being rounded, but mod not. This caused a bug in a sin table function I was writing.\r\n\r\nThis is standard libc behavior but it is still not correct and can cause bugs where none are expected.\r\n\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.69.0 (84c898d65 2023-04-16)\r\nbinary: rustc\r\ncommit-hash: 84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc\r\ncommit-date: 2023-04-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.69.0\r\nLLVM version: 15.0.7\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/panicking.rs:579:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/core/src/panicking.rs:64:14\r\n   2: core::panicking::assert_failed_inner\r\n   3: core::panicking::assert_failed\r\n   4: bug::main\r\n   5: core::ops::function::FnOnce::call_once\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111405/timeline", "performed_via_github_app": null, "state_reason": null}