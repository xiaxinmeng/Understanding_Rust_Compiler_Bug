{"url": "https://api.github.com/repos/rust-lang/rust/issues/92753", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92753/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92753/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92753/events", "html_url": "https://github.com/rust-lang/rust/issues/92753", "id": 1098601683, "node_id": "I_kwDOAAsO6M5Be1TT", "number": 92753, "title": "using auto_traits and negative_impls, compiler seems failing to find matching implementation", "user": {"login": "djdisodo", "id": 17721656, "node_id": "MDQ6VXNlcjE3NzIxNjU2", "avatar_url": "https://avatars.githubusercontent.com/u/17721656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djdisodo", "html_url": "https://github.com/djdisodo", "followers_url": "https://api.github.com/users/djdisodo/followers", "following_url": "https://api.github.com/users/djdisodo/following{/other_user}", "gists_url": "https://api.github.com/users/djdisodo/gists{/gist_id}", "starred_url": "https://api.github.com/users/djdisodo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djdisodo/subscriptions", "organizations_url": "https://api.github.com/users/djdisodo/orgs", "repos_url": "https://api.github.com/users/djdisodo/repos", "events_url": "https://api.github.com/users/djdisodo/events{/privacy}", "received_events_url": "https://api.github.com/users/djdisodo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1967303144, "node_id": "MDU6TGFiZWwxOTY3MzAzMTQ0", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-negative_impls", "name": "F-negative_impls", "color": "f9c0cc", "default": false, "description": "#![feature(negative_impls)]"}, {"id": 2543602342, "node_id": "MDU6TGFiZWwyNTQzNjAyMzQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-auto_traits", "name": "F-auto_traits", "color": "f9c0cc", "default": false, "description": "`#![feature(auto_traits)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-01-11T03:10:51Z", "updated_at": "2022-09-08T18:38:05Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#![feature(negative_impls, auto_traits)]\r\n\r\nuse std::num::ParseIntError;\r\n\r\nauto trait NotEqual {}\r\n\r\nimpl<T> !NotEqual for (T, T) {}\r\n\r\nstruct Error;\r\nstruct Error2<T>(T);\r\n\r\nimpl From<ParseIntError> for Error {\r\n    fn from(_: ParseIntError) -> Self {\r\n        Error\r\n    }\r\n}\r\n\r\n\r\nimpl<T: From<U>, U> From<U> for Error2<T> where (U, Error2<T>): NotEqual {\r\n    fn from(from: U) -> Self {\r\n        Error2(T::from(from))\r\n    }\r\n}\r\n\r\n//this doesn't compile\r\nfn a() -> Result<(), Error2<Error>> {\r\n    let a: u8 = \"999\".parse()?;\r\n    Ok(())\r\n}\r\n\r\n//this doesn't compile\r\nfn b() -> Result<(), Error2<Error>> {\r\n    let a = \"999\".parse::<u8>()?;\r\n    Ok(())\r\n}\r\n\r\n//this compiles\r\nfn c() -> Result<(), Error> {\r\n    let a = \"999\".parse::<u8>()?;\r\n    Ok(())\r\n}\r\n\r\n//this doesn't compiles\r\nfn d() {\r\n    let err = \"999\".parse::<u8>().unwrap_err();\r\n    let err2 = Error2::<Error>::from(err);\r\n}\r\n\r\n//this compiles\r\nfn e() {\r\n    let err = \"999\".parse::<u8>().unwrap_err();\r\n    let err2 = <Error2 as From<ParseIntError>>::from(err);\r\n}\r\n\r\n\r\nfn f<T, U>(t: T, u: U) where (T, U): NotEqual {}\r\n\r\n\r\n//this doesn't compile\r\nfn g() {\r\n    f(1u8, 1i8);\r\n}\r\n\r\n//this compiles\r\nfn h() {\r\n    f::<u8, i8>(1u8, 1i8);\r\n}\r\n\r\n\r\n\r\nfn main() {\r\n}\r\n```\r\n\r\nI expected this code to compile\r\n\r\nbut it doesn't \r\n\r\nerror message:\r\n```\r\nerror[E0271]: type mismatch resolving `<u8 as FromStr>::Err == Error2<Error>`\r\n  --> src/main.rs:27:23\r\n   |\r\n27 |     let a: u8 = \"999\".parse()?;\r\n   |                       ^^^^^ expected struct `ParseIntError`, found struct `Error2`\r\n   |\r\n   = note: expected struct `ParseIntError`\r\n              found struct `Error2<Error>`\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:46:38\r\n   |\r\n46 |     let err2 = Error2::<Error>::from(err);\r\n   |                                      ^^^ expected struct `Error2`, found struct `ParseIntError`\r\n   |\r\n   = note: expected struct `Error2<Error>`\r\n              found struct `ParseIntError`\r\n\r\nerror[E0107]: missing generics for struct `Error2`\r\n  --> src/main.rs:52:17\r\n   |\r\n52 |     let err2 = <Error2 as From<ParseIntError>>::from(err);\r\n   |                 ^^^^^^ expected 1 generic argument\r\n   |\r\nnote: struct defined here, with 1 generic parameter: `T`\r\n  --> src/main.rs:10:8\r\n   |\r\n10 | struct Error2<T>(T);\r\n   |        ^^^^^^ -\r\nhelp: add missing generic argument\r\n   |\r\n52 |     let err2 = <Error2<T> as From<ParseIntError>>::from(err);\r\n   |                 ~~~~~~~~~\r\n\r\nerror[E0277]: the trait bound `(_, _): NotEqual` is not satisfied\r\n  --> src/main.rs:61:5\r\n   |\r\n61 |     f(1u8, 1i8);\r\n   |     ^ the trait `NotEqual` is not implemented for `(_, _)`\r\n   |\r\nnote: required by a bound in `f`\r\n  --> src/main.rs:56:38\r\n   |\r\n56 | fn f<T, U>(t: T, u: U) where (T, U): NotEqual {}\r\n   |                                      ^^^^^^^^ required by this bound in `f`\r\n```\r\n\r\ni'm linking to rust playground so you can't quote out some code except for the code you are going to test\r\n\r\n[rust playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=9a94d24a922820e90ff420f3cf35d362)\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.59.0-nightly (db9d361a4 2021-11-28)\r\nbinary: rustc\r\ncommit-hash: db9d361a4731ca0bb48533fab6297a8fea75696f\r\ncommit-date: 2021-11-28\r\nhost: x86_64-pc-windows-gnu\r\nrelease: 1.59.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\ntested on rust playground(2022-01-09 092e1c9d23158d81be27) too\r\n\r\nused feature auto_traits(#13231) and negative_impls(#68318), might be related to\r\n\r\n(compile error, doesn't have backtrace)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92753/timeline", "performed_via_github_app": null, "state_reason": null}