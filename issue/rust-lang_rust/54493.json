{"url": "https://api.github.com/repos/rust-lang/rust/issues/54493", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54493/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54493/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54493/events", "html_url": "https://github.com/rust-lang/rust/issues/54493", "id": 362904351, "node_id": "MDU6SXNzdWUzNjI5MDQzNTE=", "number": 54493, "title": "try_replace, try_swap in RefCell (code included)", "user": {"login": "Phlosioneer", "id": 4657718, "node_id": "MDQ6VXNlcjQ2NTc3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4657718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phlosioneer", "html_url": "https://github.com/Phlosioneer", "followers_url": "https://api.github.com/users/Phlosioneer/followers", "following_url": "https://api.github.com/users/Phlosioneer/following{/other_user}", "gists_url": "https://api.github.com/users/Phlosioneer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phlosioneer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phlosioneer/subscriptions", "organizations_url": "https://api.github.com/users/Phlosioneer/orgs", "repos_url": "https://api.github.com/users/Phlosioneer/repos", "events_url": "https://api.github.com/users/Phlosioneer/events{/privacy}", "received_events_url": "https://api.github.com/users/Phlosioneer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-23T01:24:09Z", "updated_at": "2018-09-23T03:16:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Every method has a non-panicking variant except for `replace` and `swap`. It would be fairly simple to add them, leveraging the `try_borrow_mut` method; here's the code:\r\n```rust\r\n/// An error returned by [`RefCell::try_replace`](struct.RefCell.html#method.try_replace).\r\npub struct ReplaceError { _private: () }\r\n\r\n/// An error returned by [`RefCell::try_swap`](struct.RefCell.html#method.try_swap).\r\npub struct SwapError { _private: () }\r\n\r\n/// Replaces the wrapped value with a new one, returning the old value,\r\n/// without deinitializing either one, or an error if the value is currently\r\n/// borrowed.\r\n///\r\n/// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).\r\n///\r\n/// This is the non-panicking variant of [`replace`](#method.replace)\r\n#[inline]\r\n#[unstable(feature = \"try_replace_swap\")]\r\npub fn try_replace(&self, t: T) -> Result<T, ReplaceError> {\r\n    match self.try_borrow_mut() {\r\n        Ok(mut b) => Ok(mem::replace(&mut *b, t)),\r\n        Err(_) => Err(ReplaceError { _private: () })\r\n    }\r\n}\r\n\r\n\r\n/// Swaps the wrapped value of `self` with the wrapped value of `other`,\r\n/// without deinitializing either one. Returns an error if either value is\r\n/// currently borrowed.\r\n///\r\n/// This function corresponds to [`std::mem::swap`](../mem/fn.swap.html).\r\n///\r\n/// This is the non-panicking variant of [`swap`](#method.swap)\r\n#[inline]\r\n#[unstable(feature = \"try_replace_swap\")]\r\npub fn try_swap(&self, other: &Self) -> Result<(), SwapError> {\r\n    match (self.try_borrow_mut(), other.try_borrow_mut()) {\r\n        (Ok(mut s), Ok(mut o)) => {\r\n            mem::swap(&mut *s, &mut *o);\r\n            Ok(())\r\n        },\r\n        _ => Err(SwapError { _private: () })\r\n    }\r\n}\r\n```\r\n\r\nI currently don't have the ability to clone the repo, test, etc. right now. I'm also bad at making examples, so those need to be added. \ud83d\ude0f \r\n\r\nSo I've made this issue. If / when I have time, I will probably try to make a PR for this myself, if no one's done it yet. However, that might be months...", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54493/timeline", "performed_via_github_app": null, "state_reason": null}