{"url": "https://api.github.com/repos/rust-lang/rust/issues/15802", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/15802/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/15802/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/15802/events", "html_url": "https://github.com/rust-lang/rust/issues/15802", "id": 38227184, "node_id": "MDU6SXNzdWUzODIyNzE4NA==", "number": 15802, "title": "IO timeout usability improvements", "user": {"login": "carllerche", "id": 6180, "node_id": "MDQ6VXNlcjYxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carllerche", "html_url": "https://github.com/carllerche", "followers_url": "https://api.github.com/users/carllerche/followers", "following_url": "https://api.github.com/users/carllerche/following{/other_user}", "gists_url": "https://api.github.com/users/carllerche/gists{/gist_id}", "starred_url": "https://api.github.com/users/carllerche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carllerche/subscriptions", "organizations_url": "https://api.github.com/users/carllerche/orgs", "repos_url": "https://api.github.com/users/carllerche/repos", "events_url": "https://api.github.com/users/carllerche/events{/privacy}", "received_events_url": "https://api.github.com/users/carllerche/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2014-07-19T05:46:17Z", "updated_at": "2015-02-16T20:50:33Z", "closed_at": "2015-02-16T20:50:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The current timeout API on the various stream implementations behaves as a deadline vs. a timeout setting. I propose the following.\n- Rename `set_timeout` -> `set_deadline`. (as well as the read and write variants).\n- Move `set_deadline` to a trait (for example: `ReadDeadline` and `WriteDeadline`)\n- Provide `TimedReader` and `TimedWriter` that operate as follows:\n\n``` rust\n/// Various network related helpers\n\nuse std::io::{Reader, Writer, IoResult};\nuse std::io::net::unix::UnixStream;\nuse util::Duration;\n\npub trait ReadDeadline {\n    fn set_read_deadline(&mut self, timeout_ms: Option<u64>);\n}\n\nimpl ReadDeadline for UnixStream {\n    fn set_read_deadline(&mut self, timeout_ms: Option<u64>) {\n        self.set_read_timeout(timeout_ms);\n    }\n}\n\npub trait WriteDeadline {\n    fn set_write_deadline(&mut self, timeout_ms: Option<u64>);\n}\n\nimpl WriteDeadline for UnixStream {\n    fn set_write_deadline(&mut self, timeout_ms: Option<u64>) {\n        self.set_write_timeout(timeout_ms);\n    }\n}\n\npub struct TimedReader<R> {\n    reader: R,\n    timeout_ms: u64\n}\n\nimpl<R: Reader + ReadDeadline> TimedReader<R> {\n    pub fn new(reader: R, timeout_ms: u64) -> TimedReader<R> {\n        TimedReader {\n            reader: reader,\n            timeout_ms: timeout_ms\n        }\n    }\n}\n\nimpl<R: Reader + ReadDeadline> Reader for TimedReader<R> {\n    fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n        self.reader.set_read_deadline(Some(self.timeout_ms));\n        self.reader.read(buf)\n    }\n}\n\npub struct TimedWriter<W> {\n    writer: W,\n    timeout_ms: u64\n}\n\nimpl<W: Writer + WriteDeadline> TimedWriter<W> {\n    pub fn new(writer: W, timeout_ms: u64) -> TimedWriter<W> {\n        TimedWriter {\n            writer: writer,\n            timeout_ms: timeout_ms\n        }\n    }\n}\n\nimpl<W: Writer + WriteDeadline> Writer for TimedWriter<W> {\n    fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n        self.writer.set_write_deadline(Some(self.timeout_ms));\n        self.writer.write(buf)\n    }\n}\n```\n\ncc @alexcrichton \n", "closed_by": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/15802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/15802/timeline", "performed_via_github_app": null, "state_reason": "completed"}