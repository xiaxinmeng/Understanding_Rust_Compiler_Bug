{"url": "https://api.github.com/repos/rust-lang/rust/issues/57307", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57307/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57307/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57307/events", "html_url": "https://github.com/rust-lang/rust/issues/57307", "id": 395667590, "node_id": "MDU6SXNzdWUzOTU2Njc1OTA=", "number": 57307, "title": "Can you make \"somestr\".trim_matches(char::is_ascii_punctuation) compile too ? it compiles with char::is_numeric", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-03T17:53:00Z", "updated_at": "2020-12-08T16:38:37Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "this works:\r\n```rust\r\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\"); //ok\r\n```\r\nbut this doesn't:\r\n```rust\r\nassert_eq!(\r\n        \".,\\\"foo1bar\\\".,';\".trim_matches(char::is_ascii_punctuation),\r\n        \"foo1bar\"\r\n    ); //XXX fail\r\n    // expected signature of `fn(char) -> _`\r\n    // found signature of `for<'r> fn(&'r char) -> _`\r\n    //   = note: required because of the requirements on the impl of `std::str::pattern::Pattern<'_>` for `for<'r> fn(&'r char) -> bool {std::char::methods::<impl char>::is_ascii_punctuation}`\r\n```\r\n\r\nsig for [is_numeric](https://github.com/rust-lang/rust/blob/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f/src/libcore/char/methods.rs#L737) is:\r\n```rust\r\npub fn is_numeric(self) -> bool\r\n```\r\nAnd for [is_ascii_punctuation](https://github.com/rust-lang/rust/blob/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f/src/libcore/char/methods.rs#L1276) is:\r\n```rust\r\npub fn is_ascii_punctuation(&self) -> bool\r\n```\r\n\r\nSo in order to make that work, I've had to do this:\r\n```rust\r\npub trait Man {\r\n    fn manual_is_ascii_punctuation(self) -> bool;\r\n}\r\n\r\nimpl Man for char {\r\n#[inline]\r\n    fn manual_is_ascii_punctuation(self) -> bool {\r\n        self.is_ascii() && (self as u8).is_ascii_punctuation()\r\n    }\r\n}\r\nfn main() {\r\nassert_eq!(\r\n        \".,\\\"foo1bar\\\".,';\".trim_matches(char::manual_is_ascii_punctuation),\r\n        \"foo1bar\"\r\n    ); //works because the func sig matches\r\n}\r\n```\r\n\r\nFull code ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=755046954fcc672185f40cc2c1c0ff8a)):\r\n```rust\r\n#![allow(unused)]\r\n\r\npub trait Man {\r\n    fn manual_is_ascii_punctuation(self) -> bool;\r\n}\r\n\r\nimpl Man for char {\r\n#[inline]\r\n    fn manual_is_ascii_punctuation(self) -> bool {\r\n        self.is_ascii() && (self as u8).is_ascii_punctuation()\r\n    }\r\n}\r\n\r\nfn main() {\r\n    assert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\r\n    assert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\"); //ok\r\n    assert_eq!(\r\n        \".,\\\"foo1bar\\\".,';\".trim_matches(char::manual_is_ascii_punctuation),\r\n        \"foo1bar\"\r\n    ); //works because the func sig matches\r\n    assert_eq!(\r\n        \".,\\\"foo1bar\\\".,';\".trim_matches(char::is_ascii_punctuation),\r\n        \"foo1bar\"\r\n    ); //XXX fail\r\n    // expected signature of `fn(char) -> _`\r\n    // found signature of `for<'r> fn(&'r char) -> _`\r\n    //   = note: required because of the requirements on the impl of `std::str::pattern::Pattern<'_>` for `for<'r> fn(&'r char) -> bool {std::char::methods::<impl char>::is_ascii_punctuation}`\r\n\r\n    assert_eq!(\"\\\"123foo1bar\\\"\".trim_matches(|x| x == '\"'), \"123foo1bar\"); //ok\r\n\r\n    let x: &[_] = &['1', '2'];\r\n    assert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\r\n}\r\n\r\n```\r\n\r\n```rust\r\nCompiling playground v0.0.1 (/playground)\r\nerror[E0631]: type mismatch in function arguments\r\n  --> src/main.rs:22:29\r\n   |\r\n22 |         \".,\\\"foo1bar\\\".,';\".trim_matches(char::is_ascii_punctuation),\r\n   |                             ^^^^^^^^^^^^\r\n   |                             |\r\n   |                             expected signature of `fn(char) -> _`\r\n   |                             found signature of `for<'r> fn(&'r char) -> _`\r\n   |\r\n   = note: required because of the requirements on the impl of `std::str::pattern::Pattern<'_>` for `for<'r> fn(&'r char) -> bool {std::char::methods::<impl char>::is_ascii_punctuation}`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0631`.\r\nerror: Could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57307/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 1, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57307/timeline", "performed_via_github_app": null, "state_reason": null}