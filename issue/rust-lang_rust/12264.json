{"url": "https://api.github.com/repos/rust-lang/rust/issues/12264", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12264/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12264/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12264/events", "html_url": "https://github.com/rust-lang/rust/issues/12264", "id": 27606398, "node_id": "MDU6SXNzdWUyNzYwNjM5OA==", "number": 12264, "title": "Fix quote macros (e.g. quote_pat) and make a test that we can un-ignore-test", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-02-14T16:19:12Z", "updated_at": "2017-01-03T20:42:28Z", "closed_at": "2017-01-03T20:42:27Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The `#[feature(quote)]` offers a collection of macros like `quote_expr!` for turning inline code into AST's.  Unfortunately, `quote_pat!` broken at some point (the interface to `parse_pat` seems like it probably changed), but we failed to notice because the test for quote macros was xfailed in 9c185101 (circa October 2013).\n\nThe test was xfailed because the test itself makes use of IO features (to pretty-print the results and then compare the pretty-print outputs), but this was not robust and according to @alexcrichton we were getting spurious failures.\n\nAnyway, there are at least two action items for this ticket:\n1. Make some new version of the tests that we can un-ignore.  I would be happy with e.g. one file that just invokes the macros without checking the correctness of their results, and a second file (perhaps the current ignored one) that both invokes the macros and checks their outputs.\n2. Fix `quote_pat!` and any other `quote_foo!` macros that have broken in the meantime.\n\n---\n\nHere is some sample code illustrating the issue.  (Sorry about the length; we could also do more to ease using these macros.  :)  )\n\nWhen attempting to compile the code below, I get the following error from `rustc`\n\n```\n% rustc --version\nrustc 0.10-pre (58eeb07 2014-02-12 14:51:48 -0800)\nhost: x86_64-apple-darwin\n%  rustc /tmp/qp.rs\n/tmp/qp.rs:15:15: 15:41 error: this function takes 0 parameters but 1 parameter was supplied\n/tmp/qp.rs:15     let pat = quote_pat!(fake, Some(_));\n                            ^~~~~~~~~~~~~~~~~~~~~~~~~~\nnote: in expansion of quote_pat!\n/tmp/qp.rs:15:15: 15:41 note: expansion site\nerror: aborting due to previous error\n% \n```\n\nHere's the aforementioned `/tmp/qp.rs`:\n\n``` rust\n#[feature(quote)];\n#[feature(managed_boxes)];\n#[feature(macro_rules)];\n\nextern mod syntax;\n\nuse syntax::ast;\nuse syntax::codemap;\nuse syntax::parse;\nuse syntax::parse::token;\nuse syntax::print::pprust;\n\nfn main() {\n    let fake = (); // fake context\n    let pat = quote_pat!(fake, Some(_));\n    println!(\"pat: {:?}\", pat);\n}\n\ntrait QuoteCtxt {\n    fn parse_sess(&self) -> @syntax::parse::ParseSess;\n    fn cfg(&self) -> ast::CrateConfig;\n    fn call_site(&self) -> codemap::Span;\n    fn ident_of(&self, st: &str) -> ast::Ident;\n}\n\nimpl QuoteCtxt for () {\n    fn parse_sess(&self)         -> @syntax::parse::ParseSess { parse::new_parse_sess() }\n    fn cfg(&self)                -> ast::CrateConfig          { ~[] }\n    fn call_site(&self)          -> codemap::Span             { codemap::DUMMY_SP }\n    fn ident_of(&self, st: &str) -> ast::Ident                { token::str_to_ident(st) }\n}\n\ntrait SyntaxToStr {\n    fn get_interner(&self) -> @token::IdentInterner { token::get_ident_interner() }\n    fn get_to_str() -> fn (_: &Self, intr: @token::IdentInterner) -> ~str;\n    fn to_str(&self) -> ~str { SyntaxToStr::get_to_str()(self, self.get_interner()) }\n}\n\nmacro_rules! impl_stx_to_str {\n    ($Type:path, $func:path) => {\n        impl SyntaxToStr for $Type {\n            fn get_to_str() -> fn (_: &$Type, intr: @token::IdentInterner) -> ~str {\n                $func\n            }\n        }\n    }\n}\n\nimpl_stx_to_str!(ast::Ty,       pprust::ty_to_str)\nimpl_stx_to_str!(ast::Pat,      pprust::pat_to_str)\nimpl_stx_to_str!(ast::Expr,     pprust::expr_to_str)\nimpl_stx_to_str!(ast::Stmt,     pprust::stmt_to_str)\nimpl_stx_to_str!(ast::Item,     pprust::item_to_str)\nimpl_stx_to_str!(ast::Generics, pprust::generics_to_str)\nimpl_stx_to_str!(ast::Path,     pprust::path_to_str)\n```\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12264/timeline", "performed_via_github_app": null, "state_reason": "completed"}