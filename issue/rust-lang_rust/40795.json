{"url": "https://api.github.com/repos/rust-lang/rust/issues/40795", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/40795/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/40795/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/40795/events", "html_url": "https://github.com/rust-lang/rust/issues/40795", "id": 216791411, "node_id": "MDU6SXNzdWUyMTY3OTE0MTE=", "number": 40795, "title": "Mac lldb debuginfo behavior differs based on abs/rel input source path (?!)", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 120005, "node_id": "MDU6TGFiZWwxMjAwMDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-testsuite", "name": "A-testsuite", "color": "f7e101", "default": false, "description": "Area: The testsuite used to check the correctness of rustc"}, {"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-03-24T13:50:56Z", "updated_at": "2022-06-20T14:32:23Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I am observing varying behavior on my Mac depending on whether the input source files to `rustc` are denoted via an absolute source path or a relative one.\r\n\r\nThe test where I am seeing varying behavior is the `cross-crate-spans.rs` debuginfo test: https://github.com/rust-lang/rust/blob/master/src/test/debuginfo/cross-crate-spans.rs\r\n\r\nIn a nutshell: when I need to make a breakpoint for a line in the auxiliary crate (the `auxiliary/cross_crate_spans.rs` in the test in question), I am seeing the breakpoint get hit twice (as expected) when I use a relative paths, but the breakpoint gets hit only once when I use absolute paths to compile the same input files.\r\n\r\n----\r\n\r\nI have made a shell script to establish the context for the problem:\r\n\r\n```sh\r\nset -e\r\n# set -x\r\n\r\nRUSTC=rustc\r\n\r\n# We'll set up and run the test in an isolated directory just to be safe.\r\n\r\n# (Note: needs to be an absolute path for the rest of the script to make sense...)\r\nWORKING_DIR=/tmp/work\r\nmkdir -p $WORKING_DIR\r\ncd $WORKING_DIR\r\n\r\n# The behavior we observe will vary depending on the value of\r\n# `$SRC_DIR`. The bad behavior seems to arise whenever SRC_DIR is an\r\n# absolute directory (i.e. whenever it leads with the '/' character.)\r\n\r\ncase $1 in\r\n     abs) SRC1_DIR=$WORKING_DIR/abs/source ; echo \"Aux in absolute source path: $SRC1_DIR\" ;;\r\n     rel) SRC1_DIR=rel/source ; echo \"Aux in relative source path: $SRC1_DIR\" ;;\r\n     *) echo \"You need to pass 'abs' or 'rel' as first input to script.\"; exit 1;\r\nesac\r\n\r\ncase $2 in\r\n     abs) SRC2_DIR=$WORKING_DIR/abs/source ; echo \"Main in absolute source path: $SRC2_DIR\" ;;\r\n     # (switching to the below fixes things on my host system.)\r\n     rel) SRC2_DIR=rel/source ; echo \"Main in relative source path: $SRC2_DIR\" ;;\r\n     *) echo \"You need to pass 'abs' or 'rel' as second input to script.\"; exit 1;\r\nesac\r\n\r\nmkdir -p $SRC1_DIR\r\nmkdir -p $SRC2_DIR\r\n\r\n# (I renamed the aux file because the dash/underscore differentiating\r\n# convention drove me crazy. However, I have observed that reproducing\r\n# tne bug *also* is sensitive to maintaining the specific filename\r\n# `cross-crate-spans.rs` for the main file. Perhaps there is something\r\n# with how we pun dash and underscore when inferring crate names from\r\n# file names?)\r\n\r\nAUX_FILE=$SRC1_DIR/aux.rs\r\nMAIN_FILE=$SRC2_DIR/cross-crate-spans.rs\r\n\r\n# Move the files into the source area. (You don't have to use `curl`;\r\n# you can just copy it from your own repository...)\r\n\r\ncurl -s -o $AUX_FILE -O https://raw.githubusercontent.com/rust-lang/rust/8b1941a7831d715e36a414668a0b23146ff9cc2c/src/test/debuginfo/auxiliary/cross_crate_spans.rs\r\ncurl -s -o $MAIN_FILE -O https://raw.githubusercontent.com/rust-lang/rust/8b1941a7831d715e36a414668a0b23146ff9cc2c/src/test/debuginfo/cross-crate-spans.rs\r\n\r\nLIB_DIR=$WORKING_DIR/libs\r\n\r\nmkdir -p $LIB_DIR\r\n\r\nMAIN_BIN=cross-crate-spans\r\n\r\n# (Show how the compiler is being invoked in each case.)\r\nset -x\r\n\r\n$RUSTC -C opt-level=0 -g $AUX_FILE --crate-name cross_crate_spans --out-dir $LIB_DIR\r\n$RUSTC -C opt-level=0 -g $MAIN_FILE -L $LIB_DIR -C prefer-dynamic -C rpath -o $MAIN_BIN\r\n# $RUSTC -C opt-level=0 -g $MAIN_FILE -L $LIB_DIR -o $MAIN_BIN\r\n\r\nlldb $MAIN_BIN\r\n```\r\n\r\n----\r\n\r\nAfter invoking the above script (e.g. via `sh /tmp/script abs abs`), you then interact with `lldb` to finish reproducing the bug.\r\n\r\n```\r\n% rm -rf /tmp/work/ && sh /tmp/script rel rel\r\nAux in relative source path: rel/source\r\nMain in relative source path: rel/source\r\n+ rustc -C opt-level=0 -g rel/source/aux.rs --crate-name cross_crate_spans --out-dir /tmp/work/libs\r\n+ rustc -C opt-level=0 -g rel/source/cross-crate-spans.rs -L /tmp/work/libs -C prefer-dynamic -C rpath -o cross-crate-spans\r\n+ lldb cross-crate-spans\r\n(lldb) target create \"cross-crate-spans\"\r\nCurrent executable set to 'cross-crate-spans' (x86_64).\r\n(lldb) b aux.rs:24\r\nBreakpoint 1: 2 locations.\r\n(lldb) r\r\nProcess 4893 launched: '/private/tmp/work/cross-crate-spans' (x86_64)\r\nProcess 4893 stopped\r\n* thread #1: tid = 0xad2057, 0x0000000100000c43 cross-crate-spans`cross_crate_spans::generic_function<u32>(val=17) + 115 at aux.rs:24, queue = 'com.apple.main-thread', stop reason = breakpoint 1.2\r\n    frame #0: 0x0000000100000c43 cross-crate-spans`cross_crate_spans::generic_function<u32>(val=17) + 115 at aux.rs:24\r\n   21  \t    let result = (val.clone(), val.clone());\r\n   22  \t    let a_variable: u32 = 123456789;\r\n   23  \t    let another_variable: f64 = 123456789.5;\r\n-> 24  \t    zzz();\r\n   25  \t    result\r\n   26  \t}\r\n   27  \t\r\n(lldb) c\r\nProcess 4893 resuming\r\nProcess 4893 stopped\r\n* thread #1: tid = 0xad2057, 0x0000000100000b4f cross-crate-spans`cross_crate_spans::generic_function<i16>(val=1212) + 127 at aux.rs:24, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\r\n    frame #0: 0x0000000100000b4f cross-crate-spans`cross_crate_spans::generic_function<i16>(val=1212) + 127 at aux.rs:24\r\n   21  \t    let result = (val.clone(), val.clone());\r\n   22  \t    let a_variable: u32 = 123456789;\r\n   23  \t    let another_variable: f64 = 123456789.5;\r\n-> 24  \t    zzz();\r\n   25  \t    result\r\n   26  \t}\r\n   27  \t\r\n(lldb) c\r\nProcess 4893 resuming\r\n(lldb) Process 4893 exited with status = 0 (0x00000000) \r\n(lldb) q\r\n% rm -rf /tmp/work/ && sh /tmp/script rel abs\r\nAux in relative source path: rel/source\r\nMain in absolute source path: /tmp/work/abs/source\r\n+ rustc -C opt-level=0 -g rel/source/aux.rs --crate-name cross_crate_spans --out-dir /tmp/work/libs\r\n+ rustc -C opt-level=0 -g /tmp/work/abs/source/cross-crate-spans.rs -L /tmp/work/libs -C prefer-dynamic -C rpath -o cross-crate-spans\r\n+ lldb cross-crate-spans\r\n(lldb) target create \"cross-crate-spans\"\r\nCurrent executable set to 'cross-crate-spans' (x86_64).\r\n(lldb) b aux.rs:24\r\nBreakpoint 1: 2 locations.\r\n(lldb) r\r\nProcess 4913 launched: '/private/tmp/work/cross-crate-spans' (x86_64)\r\nProcess 4913 stopped\r\n* thread #1: tid = 0xad20ff, 0x0000000100000c43 cross-crate-spans`cross_crate_spans::generic_function<u32>(val=17) + 115 at aux.rs:24, queue = 'com.apple.main-thread', stop reason = breakpoint 1.2\r\n    frame #0: 0x0000000100000c43 cross-crate-spans`cross_crate_spans::generic_function<u32>(val=17) + 115 at aux.rs:24\r\n   21  \t    let result = (val.clone(), val.clone());\r\n   22  \t    let a_variable: u32 = 123456789;\r\n   23  \t    let another_variable: f64 = 123456789.5;\r\n-> 24  \t    zzz();\r\n   25  \t    result\r\n   26  \t}\r\n   27  \t\r\n(lldb) c\r\nProcess 4913 resuming\r\nProcess 4913 stopped\r\n* thread #1: tid = 0xad20ff, 0x0000000100000b4f cross-crate-spans`cross_crate_spans::generic_function<i16>(val=1212) + 127 at aux.rs:24, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\r\n    frame #0: 0x0000000100000b4f cross-crate-spans`cross_crate_spans::generic_function<i16>(val=1212) + 127 at aux.rs:24\r\n   21  \t    let result = (val.clone(), val.clone());\r\n   22  \t    let a_variable: u32 = 123456789;\r\n   23  \t    let another_variable: f64 = 123456789.5;\r\n-> 24  \t    zzz();\r\n   25  \t    result\r\n   26  \t}\r\n   27  \t\r\n(lldb) c\r\nProcess 4913 resuming\r\n(lldb) Process 4913 exited with status = 0 (0x00000000) \r\n(lldb) q\r\n% rm -rf /tmp/work/ && sh /tmp/script abs rel\r\nAux in absolute source path: /tmp/work/abs/source\r\nMain in relative source path: rel/source\r\n+ rustc -C opt-level=0 -g /tmp/work/abs/source/aux.rs --crate-name cross_crate_spans --out-dir /tmp/work/libs\r\n+ rustc -C opt-level=0 -g rel/source/cross-crate-spans.rs -L /tmp/work/libs -C prefer-dynamic -C rpath -o cross-crate-spans\r\n+ lldb cross-crate-spans\r\n(lldb) target create \"cross-crate-spans\"\r\nCurrent executable set to 'cross-crate-spans' (x86_64).\r\n(lldb) b aux.rs:24\r\nBreakpoint 1: 2 locations.\r\n(lldb) r\r\nProcess 4933 launched: '/private/tmp/work/cross-crate-spans' (x86_64)\r\nProcess 4933 stopped\r\n* thread #1: tid = 0xad2163, 0x0000000100000c43 cross-crate-spans`cross_crate_spans::generic_function<u32>(val=17) + 115 at aux.rs:24, queue = 'com.apple.main-thread', stop reason = breakpoint 1.2\r\n    frame #0: 0x0000000100000c43 cross-crate-spans`cross_crate_spans::generic_function<u32>(val=17) + 115 at aux.rs:24\r\n   21  \t    let result = (val.clone(), val.clone());\r\n   22  \t    let a_variable: u32 = 123456789;\r\n   23  \t    let another_variable: f64 = 123456789.5;\r\n-> 24  \t    zzz();\r\n   25  \t    result\r\n   26  \t}\r\n   27  \t\r\n(lldb) c\r\nProcess 4933 resuming\r\nProcess 4933 stopped\r\n* thread #1: tid = 0xad2163, 0x0000000100000b4f cross-crate-spans`cross_crate_spans::generic_function<i16>(val=1212) + 127 at aux.rs:24, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\r\n    frame #0: 0x0000000100000b4f cross-crate-spans`cross_crate_spans::generic_function<i16>(val=1212) + 127 at aux.rs:24\r\n   21  \t    let result = (val.clone(), val.clone());\r\n   22  \t    let a_variable: u32 = 123456789;\r\n   23  \t    let another_variable: f64 = 123456789.5;\r\n-> 24  \t    zzz();\r\n   25  \t    result\r\n   26  \t}\r\n   27  \t\r\n(lldb) c\r\nProcess 4933 resuming\r\n(lldb) Process 4933 exited with status = 0 (0x00000000) \r\n(lldb) q\r\n% rm -rf /tmp/work/ && sh /tmp/script abs abs\r\nAux in absolute source path: /tmp/work/abs/source\r\nMain in absolute source path: /tmp/work/abs/source\r\n+ rustc -C opt-level=0 -g /tmp/work/abs/source/aux.rs --crate-name cross_crate_spans --out-dir /tmp/work/libs\r\n+ rustc -C opt-level=0 -g /tmp/work/abs/source/cross-crate-spans.rs -L /tmp/work/libs -C prefer-dynamic -C rpath -o cross-crate-spans\r\n+ lldb cross-crate-spans\r\n(lldb) target create \"cross-crate-spans\"\r\nCurrent executable set to 'cross-crate-spans' (x86_64).\r\n(lldb) b aux.rs:24\r\nBreakpoint 1: 2 locations.\r\n(lldb) r\r\nProcess 4955 launched: '/private/tmp/work/cross-crate-spans' (x86_64)\r\nProcess 4955 stopped\r\n* thread #1: tid = 0xad21fe, 0x0000000100000c43 cross-crate-spans`cross_crate_spans::generic_function<u32>(val=17) + 115 at aux.rs:24, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\r\n    frame #0: 0x0000000100000c43 cross-crate-spans`cross_crate_spans::generic_function<u32>(val=17) + 115 at aux.rs:24\r\n   21  \t    let result = (val.clone(), val.clone());\r\n   22  \t    let a_variable: u32 = 123456789;\r\n   23  \t    let another_variable: f64 = 123456789.5;\r\n-> 24  \t    zzz();\r\n   25  \t    result\r\n   26  \t}\r\n   27  \t\r\n(lldb) c\r\nProcess 4955 resuming\r\n(lldb) Process 4955 exited with status = 0 (0x00000000) \r\n(lldb) q\r\n% \r\n```\r\n\r\nThe transcript above shows that the number of times we hit the breakpoint varies depending on how the source file path was provided.\r\n\r\n----\r\n\r\nThe results are as follows when you vary the absolute/relative nature of each of the two source inputs in the script. (For some period of time, I thought I was observing that problem occurred just based on the main input, but by the time I firmed up the script above, I no longer was seeing that: I had to pass both the aux and the main input as absolute paths in order to reproduce the bug.)\r\n\r\n| Aux Input  | Main Input | Breakpoint Hit Count | Expected Result?\r\n| --- | --- | --- | --- |\r\n| rel | rel | 2 | (good)\r\n| rel | abs | 2 | (good)\r\n| abs | rel | 2 | (good)\r\n| abs | abs | 1 | *bad*\r\n\r\n----\r\n\r\nOne more observation: By chance, I decided while looking into this to also try varying the input file names. This led to a new bit of data: reproducing the bug requires the main file keep the source `cross-crate-spans.rs` (and do not pass a `--crate-name` argument to it).\r\n * If you rename it to `main.rs` (and do not otherwise muck with its crate name), the bug will not reproduce.\r\n * If you rename it to `main.rs` but also pass `--crate-name cross_crate_spans` (the crate name derived from \"cross-crate-spans.rs\") when compiling `main.rs`, then the bug *will* reproduce.\r\n * This leads me to wonder: Is the real bug here that we are blithely allowing multiple crates with the same name to be linked together, and even treating it like a scenario that needs to be part to our *test suite*?\r\n----\r\n\r\nMy `lldb` reports that it is version `lldb-360.1.70`, and my Xcode (according to `xcodebuild`) is Xcode 8.2.1, Build version 8C1002.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/40795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/40795/timeline", "performed_via_github_app": null, "state_reason": null}