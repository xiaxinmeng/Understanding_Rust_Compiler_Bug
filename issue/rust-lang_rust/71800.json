{"url": "https://api.github.com/repos/rust-lang/rust/issues/71800", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71800/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71800/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71800/events", "html_url": "https://github.com/rust-lang/rust/issues/71800", "id": 611172214, "node_id": "MDU6SXNzdWU2MTExNzIyMTQ=", "number": 71800, "title": "Make const_err a future-incompatibility lint and eventually a hard error", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630636017, "node_id": "MDU6TGFiZWw2MzA2MzYwMTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-future-compatibility", "name": "C-future-compatibility", "color": "f5f1fd", "default": false, "description": "Category: future compatibility lints"}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2020-05-02T12:07:05Z", "updated_at": "2022-10-07T23:59:19Z", "closed_at": "2022-10-07T23:59:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, when Miri raises an error while evaluating a `const`, that does *not* lead to a hard compiler error (`sess.struct_err` or so). Instead, the `const_err` lint is emitted (and there are a bunch of exceptions I keep forgetting... promoteds and `static` each get their own treatment). Then later consumers of consts have to remember to `struct_err` when they query for the value of the const (and they do that with inconsistent messages and some might even forget to do it), usually without any actual details so if you `allow(const_err)` the error makes no sense... in a word, it's a mess (and so is the code backing this).\r\n\r\nCan we clean that up? I think we should try. IMO the long-term goal should be to just make errors when evaluating a const hard errors, so we can have that error-reporting code once in `librustc_mir/const_eval` and not worry about it everywhere else in the compiler. Right now, it's a deny-by-default lint, for backwards compatibility.\r\n\r\nTo make this slightly more complicated, we also [evaluate consts that the program does not actually use](https://github.com/rust-lang/rust/blob/master/src/librustc_lint/builtin.rs#L1161-L1188), so we can tell library crate authors when their consts are wrong. Inside the const-eval engine, these look like normal const-eval queries, so if we switch to a hard error, that would be a hard error, too. We have to decide what to do about that.\r\n\r\n### Option 1: treat unused consts like used consts whenever we can\r\n\r\nThe easiest way forward would be to say that an eventual hard error for CTFE failures in unused consts is fine. Then we can just make the current `const_err` lint reporting into a future-incompatibility lint (maybe clean it up a little, and clean up the way that we error when we truly need the const value). Later, we can experiment with making it a hard error, and at that point everything would become simple and uniform and beautiful. (Promoteds would still only lint as the user did not ask for const-evaluation, but at least behavior wouldn't depend on context any more: const/static *always* hard-error [which currently const only does for some callers], and promoteds *never* do. Okay maybe it's not beautiful but it is better.)\r\n\r\nNote that this matches what we already do for `static`. However, unlike `static`, `const` can exist in generic contexts (as associated consts), and those we cannot evaluate and thus not lint or error for. So, \"top-level\" `const` would behave differently from associated consts in terms of error reporting. (That is already the case, but currently the difference is a deny-by-default lint that can be allow'ed away.) There is no technical *need* to hard-error on CTFE failures in unused consts, but then one could say the same about unused statics and we *do* already hard-error there (and I don't remember anyone ever complaining about that).  So my personal preference would be to hard-error for failing consts as often as we can.\r\n\r\n### Option 2: keep just linting for unused consts\r\n\r\nAlternatively, maybe we don't want to hard-error when a const that is not used fails to evaluate (consistently with how we *cannot* produce a hard error when an assoc const fails to evaluate as we cannot even check that). Arguably we should then downgrade such messages to warn-by-default.\r\n\r\nIn this case we should probably find a way for the caller to inform the const-eval engine whether they truly need the result of the query or not (almost always they do need it, except for that lint), and then use that to control our lint level... but how can we do that without duplicating errors or work? Currently it is deduplicated because the query only runs once, and it always emits a lint, and then the caller potentially additionally emits a hard error but pointing at the span where the const actually gets used. But this is bad, it means that with `allow(const_err)` none of the relevant error details are shown even when we do get a hard error.\r\n\r\n### Backwards compatibility concerns\r\n\r\nA potential concern here might be that if we make CTFE errors hard errors, we have to be careful with making the Miri engine raise more CTFE errors (like, improved UB checking). But that is *already* the case: when raise more CTFE errors, the consts affected by it go from having a value to not having one, and cannot be used any more. So I don't think the proposal here creates any new backcompat issues.\r\n\r\nCc @rust-lang/wg-const-eval @rust-lang/lang ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71800/reactions", "total_count": 4, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71800/timeline", "performed_via_github_app": null, "state_reason": "completed"}