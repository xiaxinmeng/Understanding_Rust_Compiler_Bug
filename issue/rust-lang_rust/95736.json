{"url": "https://api.github.com/repos/rust-lang/rust/issues/95736", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95736/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95736/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95736/events", "html_url": "https://github.com/rust-lang/rust/issues/95736", "id": 1194864940, "node_id": "I_kwDOAAsO6M5HODEs", "number": 95736, "title": "rust-src does not include workspace Cargo.toml", "user": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2022-04-06T16:48:24Z", "updated_at": "2022-10-10T21:24:21Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `rust-src` component that gets installed by Rustup to `~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust` includes a `Cargo.lock` that spans the standard library crates, but does not include a corresponding `Cargo.toml` (essentially [this `Cargo.toml`](https://github.com/rust-lang/rust/blob/master/Cargo.toml)).\r\n\r\nCargo's `-Zbuild-std` feature makes this work anyway by [constructing a virtual workspace for the standard library](https://github.com/rust-lang/cargo/blob/e2e2dddebe66dfc1403a312653557e332445308b/src/cargo/core/compiler/standard_lib.rs#L57-L78), but this doesn't work for editors that want to provide users with completion and analysis all the way into `std`/`alloc`/`core`. They end up running `cargo metadata` directly in the various standard library crates (`library/std` for example) ([IntelliJ](https://github.com/intellij-rust/intellij-rust/blob/25e0cf8e4fc74e525d08113344bdbcc15e2f6929/src/main/kotlin/org/rust/cargo/project/workspace/StandardLibrary.kt#L205-L224), [rust-analyzer](https://github.com/rust-analyzer/rust-analyzer/blob/c96481e25f08d1565cb9b3cac89323216e6f8d7f/crates/project_model/src/sysroot.rs#L77-L92)). However, since there's no workspace-level `Cargo.toml` next to the `Cargo.lock`, they do not pick up on the locked versions at all, and instead use whatever the _latest_ versions of the standard library's dependencies are. This in turn means that go-to-definition and similar mechanisms do not go to the actual versions used by the standard library the user is actually using.\r\n\r\nIn chatting to @Mark-Simulacrum about this, I _think_ the editors are arguably doing the right thing here by running `cargo metadata` inside the individual crates (like std), and Cargo is doing the right thing not looking at the `Cargo.lock` since there isn't a workspace there. And it feels like the right thing to do is to synthesize a workspace `Cargo.toml` for inclusion with `rust-src`. But if we explicitly won't (or can't) include a `Cargo.toml` in `rust-src`'s root, we have a couple of options:\r\n\r\n - We could maybe special-case Cargo to recognize when it's run on a crate from within the standard library.\r\n - `cargo metadata` could have something like `--with-lockfile Cargo.lock` so that you can run it in arbitrary places on disk while pointing to (for example) a checked out repositories `Cargo.lock`.\r\n - We could change Cargo to always include std + deps in everyone's `Cargo.lock` as some kind of special dep kind.\r\n - We could create `cargo metadata --include-std`.\r\n\r\nAll of these feel brittle to one extent or another though, and it's not clear that they are sufficient for what editors may need (cc @matklad), so I think we should push for including `Cargo.toml` if we can.\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.59.0 (9d1b2106e 2022-02-23)\r\nbinary: rustc\r\ncommit-hash: 9d1b2106e23b1abd32fce1f17267604a5102f57a\r\ncommit-date: 2022-02-23\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.59.0\r\nLLVM version: 13.0.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95736/reactions", "total_count": 3, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95736/timeline", "performed_via_github_app": null, "state_reason": null}