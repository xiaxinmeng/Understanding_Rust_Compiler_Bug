{"url": "https://api.github.com/repos/rust-lang/rust/issues/37679", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37679/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37679/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37679/events", "html_url": "https://github.com/rust-lang/rust/issues/37679", "id": 188410576, "node_id": "MDU6SXNzdWUxODg0MTA1NzY=", "number": 37679, "title": "Parse doc-comments on macro variants and render them in Rustdoc", "user": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-11-10T03:16:38Z", "updated_at": "2019-08-12T08:26:32Z", "closed_at": "2017-04-01T05:55:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I wanted to do something like the following to document how my macro behaves when invoked in different ways:\r\n\r\n```rust\r\nmacro_rules! foo {\r\n    /// Does a thing\r\n    ($bar:expr) => ();\r\n    /// Does a different thing\r\n   ($baz:expr = $qux:expr) => ();\r\n}\r\n```\r\n\r\nHowever, I was disappointed to find that it is not accepted by the parser as valid, even though regular comments are accepted in this position. But since regular comments are not rendered by Rustdoc, this doesn't really help me.\r\n\r\nI think this would be really helpful in documenting behavior of macros, which is already difficult enough. However, I'm not sure how this needs to be approached and how big of a change it would be:\r\n\r\nIf the parser can be taught to treat doc-comments in this position as regular comments and Rustdoc can be taught to recognize them as doc-comments and render them in documentation, this wouldn't require any amendment to the grammar.\r\n\r\nOtherwise, if we need to amend the language grammar to allow attributes on macro variants (and thus continue to expand doc-comments as normal), then this would obviously need an RFC and discussion. However, this could also allow other interesting attributes on macros, like `#[doc(hidden)]` for hiding macro variants that are primarily implementation details, or `#[cfg(...)]` for conditionally enabling macro variants.\r\n\r\nI guess I can just use regular comments and ask the user to click the source link in the documentation for more details, or just use different macros altogether (I may end up doing that anyway as it might be better in my case, but still). However, I would consider these to be stopgap measures at best, IMO, especially since making this proposal work would be a nice win for documenation ergonomics.", "closed_by": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37679/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37679/timeline", "performed_via_github_app": null, "state_reason": "completed"}