{"url": "https://api.github.com/repos/rust-lang/rust/issues/69415", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69415/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69415/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69415/events", "html_url": "https://github.com/rust-lang/rust/issues/69415", "id": 569578172, "node_id": "MDU6SXNzdWU1Njk1NzgxNzI=", "number": 69415, "title": "ICE -Zsave-analysis  feature-gate-associated_type_bounds.rs", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 632580625, "node_id": "MDU6TGFiZWw2MzI1ODA2MjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-save-analysis", "name": "A-save-analysis", "color": "f7e101", "default": false, "description": "Area: saving results of analyses such as inference and borrowck results to a file."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-23T23:29:42Z", "updated_at": "2020-05-23T21:21:37Z", "closed_at": "2020-05-23T21:21:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n`rustc src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs -Zsave-analysis`\r\n\r\n```rust\r\n#![feature(untagged_unions)]\r\n\r\ntrait Tr1 { type As1: Copy; }\r\ntrait Tr2 { type As2: Copy; }\r\n\r\nstruct S1;\r\n#[derive(Copy, Clone)]\r\nstruct S2;\r\nimpl Tr1 for S1 { type As1 = S2; }\r\n\r\ntrait _Tr3 {\r\n    type A: Iterator<Item: Copy>;\r\n    //~^ ERROR associated type bounds are unstable\r\n\r\n    type B: Iterator<Item: 'static>;\r\n    //~^ ERROR associated type bounds are unstable\r\n}\r\n\r\nstruct _St1<T: Tr1<As1: Tr2>> {\r\n//~^ ERROR associated type bounds are unstable\r\n    outest: T,\r\n    outer: T::As1,\r\n    inner: <T::As1 as Tr2>::As2,\r\n}\r\n\r\nenum _En1<T: Tr1<As1: Tr2>> {\r\n//~^ ERROR associated type bounds are unstable\r\n    Outest(T),\r\n    Outer(T::As1),\r\n    Inner(<T::As1 as Tr2>::As2),\r\n}\r\n\r\nunion _Un1<T: Tr1<As1: Tr2>> {\r\n//~^ ERROR associated type bounds are unstable\r\n    outest: std::mem::ManuallyDrop<T>,\r\n    outer: T::As1,\r\n    inner: <T::As1 as Tr2>::As2,\r\n}\r\n\r\ntype _TaWhere1<T> where T: Iterator<Item: Copy> = T;\r\n//~^ ERROR associated type bounds are unstable\r\n\r\nfn _apit(_: impl Tr1<As1: Copy>) {}\r\n//~^ ERROR associated type bounds are unstable\r\nfn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\r\n//~^ ERROR associated type bounds are unstable\r\n\r\nfn _rpit() -> impl Tr1<As1: Copy> { S1 }\r\n//~^ ERROR associated type bounds are unstable\r\n\r\nfn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\r\n//~^ ERROR associated type bounds are unstable\r\n\r\nconst _cdef: impl Tr1<As1: Copy> = S1;\r\n//~^ ERROR associated type bounds are unstable\r\n//~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\r\n// FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\r\n// const _cdef_dyn: &dyn Tr1<As1: Copy> = &S1;\r\n\r\nstatic _sdef: impl Tr1<As1: Copy> = S1;\r\n//~^ ERROR associated type bounds are unstable\r\n//~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\r\n// FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\r\n// static _sdef_dyn: &dyn Tr1<As1: Copy> = &S1;\r\n\r\nfn main() {\r\n    let _: impl Tr1<As1: Copy> = S1;\r\n    //~^ ERROR associated type bounds are unstable\r\n    //~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\r\n    // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\r\n    // let _: &dyn Tr1<As1: Copy> = &S1;\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.43.0-nightly (436494b8f 2020-02-22)\r\nbinary: rustc\r\ncommit-hash: 436494b8f8008b600d64b3951f63c2bb0ea81673\r\ncommit-date: 2020-02-22\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.43.0-nightly\r\nLLVM version: 9.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror[E0658]: associated type bounds are unstable\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:12:22\r\n   |\r\n12 |     type A: Iterator<Item: Copy>;\r\n   |                      ^^^^^^^^^^\r\n   |\r\n   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\r\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\r\n\r\nerror[E0658]: associated type bounds are unstable\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:15:22\r\n   |\r\n15 |     type B: Iterator<Item: 'static>;\r\n   |                      ^^^^^^^^^^^^^\r\n   |\r\n   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\r\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\r\n\r\nerror[E0658]: associated type bounds are unstable\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:19:20\r\n   |\r\n19 | struct _St1<T: Tr1<As1: Tr2>> {\r\n   |                    ^^^^^^^^\r\n   |\r\n   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\r\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\r\n\r\nerror[E0658]: associated type bounds are unstable\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:26:18\r\n   |\r\n26 | enum _En1<T: Tr1<As1: Tr2>> {\r\n   |                  ^^^^^^^^\r\n   |\r\n   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\r\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\r\n\r\nerror[E0658]: associated type bounds are unstable\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:33:19\r\n   |\r\n33 | union _Un1<T: Tr1<As1: Tr2>> {\r\n   |                   ^^^^^^^^\r\n   |\r\n   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\r\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\r\n\r\nerror[E0658]: associated type bounds are unstable\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:40:37\r\n   |\r\n40 | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\r\n   |                                     ^^^^^^^^^^\r\n   |\r\n   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\r\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\r\n\r\nerror[E0658]: associated type bounds are unstable\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:43:22\r\n   |\r\n43 | fn _apit(_: impl Tr1<As1: Copy>) {}\r\n   |                      ^^^^^^^^^\r\n   |\r\n   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\r\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\r\n\r\nerror[E0658]: associated type bounds are unstable\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:45:26\r\n   |\r\n45 | fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\r\n   |                          ^^^^^^^^^\r\n   |\r\n   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\r\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\r\n\r\nerror[E0658]: associated type bounds are unstable\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:48:24\r\n   |\r\n48 | fn _rpit() -> impl Tr1<As1: Copy> { S1 }\r\n   |                        ^^^^^^^^^\r\n   |\r\n   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\r\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\r\n\r\nerror[E0658]: associated type bounds are unstable\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:51:31\r\n   |\r\n51 | fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\r\n   |                               ^^^^^^^^^\r\n   |\r\n   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\r\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\r\n\r\nerror[E0658]: associated type bounds are unstable\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:54:23\r\n   |\r\n54 | const _cdef: impl Tr1<As1: Copy> = S1;\r\n   |                       ^^^^^^^^^\r\n   |\r\n   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\r\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\r\n\r\nerror[E0658]: associated type bounds are unstable\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:60:24\r\n   |\r\n60 | static _sdef: impl Tr1<As1: Copy> = S1;\r\n   |                        ^^^^^^^^^\r\n   |\r\n   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\r\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\r\n\r\nerror[E0658]: associated type bounds are unstable\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:67:21\r\n   |\r\n67 |     let _: impl Tr1<As1: Copy> = S1;\r\n   |                     ^^^^^^^^^\r\n   |\r\n   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\r\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\r\n\r\nerror[E0562]: `impl Trait` not allowed outside of function and inherent method return types\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:54:14\r\n   |\r\n54 | const _cdef: impl Tr1<As1: Copy> = S1;\r\n   |              ^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\r\n\r\nerror[E0562]: `impl Trait` not allowed outside of function and inherent method return types\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:60:15\r\n   |\r\n60 | static _sdef: impl Tr1<As1: Copy> = S1;\r\n   |               ^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\r\n\r\nerror[E0562]: `impl Trait` not allowed outside of function and inherent method return types\r\n  --> src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs:67:12\r\n   |\r\n67 |     let _: impl Tr1<As1: Copy> = S1;\r\n   |            ^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\r\n\r\nerror: internal compiler error: src/librustc/hir/map/mod.rs:564: couldn't find hir id HirId { owner: DefIndex(0), local_id: 4294967040 } in the HIR map\r\n\r\nthread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:881:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.43.0-nightly (436494b8f 2020-02-22) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -Z save-analysis\r\n\r\nerror: aborting due to 17 previous errors\r\n\r\nSome errors have detailed explanations: E0562, E0658.\r\nFor more information about an error, try `rustc --explain E0562`.\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nerror: internal compiler error: src/librustc/hir/map/mod.rs:564: couldn't find hir id HirId { owner: DefIndex(0), local_id: 4294967040 } in the HIR map\r\n\r\nthread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:881:9\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/libunwind.rs:86\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:78\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1052\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1428\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:204\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:224\r\n  10: rustc_driver::report_ice\r\n  11: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:474\r\n  12: std::panicking::begin_panic\r\n  13: rustc_errors::HandlerInner::bug\r\n  14: rustc_errors::Handler::bug\r\n  15: rustc::util::bug::opt_span_bug_fmt::{{closure}}\r\n  16: rustc::ty::context::tls::with_opt::{{closure}}\r\n  17: rustc::ty::context::tls::with_opt\r\n  18: rustc::util::bug::opt_span_bug_fmt\r\n  19: rustc::util::bug::bug_fmt\r\n  20: rustc::hir::map::Map::get::{{closure}}\r\n  21: rustc::hir::map::Map::get\r\n  22: rustc_save_analysis::SaveContext::get_path_res\r\n  23: rustc_save_analysis::SaveContext::get_path_segment_data_with_id\r\n  24: rustc_save_analysis::dump_visitor::DumpVisitor::process_path\r\n  25: <rustc_save_analysis::dump_visitor::DumpVisitor as syntax::visit::Visitor>::visit_ty\r\n  26: rustc_save_analysis::dump_visitor::DumpVisitor::process_static_or_const_item\r\n  27: <rustc_save_analysis::dump_visitor::DumpVisitor as syntax::visit::Visitor>::visit_mod\r\n  28: rustc::dep_graph::graph::DepGraph::with_ignore\r\n  29: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  30: rustc::ty::context::tls::enter_global\r\n  31: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.43.0-nightly (436494b8f 2020-02-22) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -Z save-analysis\r\n\r\nquery stack during panic:\r\nend of query stack\r\nerror: aborting due to 17 previous errors\r\n\r\nSome errors have detailed explanations: E0562, E0658.\r\nFor more information about an error, try `rustc --explain E0562`.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69415/timeline", "performed_via_github_app": null, "state_reason": "completed"}