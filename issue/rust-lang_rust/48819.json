{"url": "https://api.github.com/repos/rust-lang/rust/issues/48819", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48819/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48819/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48819/events", "html_url": "https://github.com/rust-lang/rust/issues/48819", "id": 303119093, "node_id": "MDU6SXNzdWUzMDMxMTkwOTM=", "number": 48819, "title": "From<u32> for Ipv4Addr is not performed in network byte order", "user": {"login": "VilleHallivuori", "id": 37148292, "node_id": "MDQ6VXNlcjM3MTQ4Mjky", "avatar_url": "https://avatars.githubusercontent.com/u/37148292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VilleHallivuori", "html_url": "https://github.com/VilleHallivuori", "followers_url": "https://api.github.com/users/VilleHallivuori/followers", "following_url": "https://api.github.com/users/VilleHallivuori/following{/other_user}", "gists_url": "https://api.github.com/users/VilleHallivuori/gists{/gist_id}", "starred_url": "https://api.github.com/users/VilleHallivuori/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VilleHallivuori/subscriptions", "organizations_url": "https://api.github.com/users/VilleHallivuori/orgs", "repos_url": "https://api.github.com/users/VilleHallivuori/repos", "events_url": "https://api.github.com/users/VilleHallivuori/events{/privacy}", "received_events_url": "https://api.github.com/users/VilleHallivuori/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-03-07T14:27:34Z", "updated_at": "2018-04-01T14:07:26Z", "closed_at": "2018-04-01T14:07:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Documentation for u32 -> Ipv4Addr conversion (https://doc.rust-lang.org/1.21.0/std/net/struct.Ipv4Addr.html) and recent bug discussion (https://github.com/rust-lang/rust/issues/40118) claim that conversion is performed in network byte order. This is clearly not the cases.\r\n\r\nFor example IP address 10.11.12.13 in IP header would be hex bytes 0x0a 0x0b 0x0c 0x0d and Inter CPU (little endian) would interpret this value as u32 0x0d0c0b0a. Conversion to Ipv4Addr results with current library implementation IP address 13.12.11.10.\r\n\r\nThe problem is clear from the fact that implementation (https://doc.rust-lang.org/1.21.0/src/std/net/ip.rs.html#745-747) does not contain conditional code based on endianness and operates using shift operations. Hence it can only work on a processor that is natively in network byte order. Current implementation is:\r\n\r\n```rust\r\n#[stable(feature = \"ip_u32\", since = \"1.1.0\")]\r\nimpl From<u32> for Ipv4Addr {\r\n    /// It performs the conversion in network order (big-endian).\r\n    fn from(ip: u32) -> Ipv4Addr {\r\n        Ipv4Addr::new((ip >> 24) as u8, (ip >> 16) as u8, (ip >> 8) as u8, ip as u8)\r\n    }\r\n}\r\n```\r\n\r\nConversion without conditional code would only be possible if code would cast u32 to u8[4] (not sure if that is possible in Rust... on C that would work), not using arithmetic operations on u32 where host byte order comes into play.\r\n\r\nA suitable fix might be along the lines of (I am assuming Rust compiler optimises htonl away.. if not, more optimal approach would just be to make conversion trait itself conditional on host byte order):\r\n\r\n```rust\r\n#[cfg(target_endian = \"little\")]\r\nfn htonl(val : u32) -> u32 {\r\n    let o3 = (val >> 24) as u8;\r\n    let o2 = (val >> 16) as u8;\r\n    let o1 = (val >> 8)  as u8;\r\n    let o0 =  val        as u8;\r\n    ((o0 as u32) << 24 | (o1 as u32) << 16 | (o2 as u32) << 8 | (o3 as u32))\r\n}\r\n\r\n#[cfg(target_endian = \"big\")]\r\nfn htonl(val : u32) -> u32 {\r\n    val\r\n}\r\n\r\n#[cfg(target_endian = \"little\")]\r\n#[test]\r\nfn test_htonl() {\r\n    assert_eq!(0x12345678, htonl(0x78563412));\r\n}\r\n\r\nimpl From<u32> for Ipv4Addr {\r\n    /// It performs the conversion in network order (big-endian).\r\n    fn from(ip_hb: u32) -> Ipv4Addr {\r\n        let ip = htonl(ip_hb);\r\n        Ipv4Addr::new((ip >> 24) as u8, (ip >> 16) as u8, (ip >> 8) as u8, ip as u8)\r\n    }\r\n}\r\n```\r\n\r\nFixing the issue in code (instead of just fixing the documentation) does have down side. If any code writes IP addresses in hex in host byte order (that is a convenient way to do it), fixing this breaks such code.", "closed_by": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48819/timeline", "performed_via_github_app": null, "state_reason": "completed"}