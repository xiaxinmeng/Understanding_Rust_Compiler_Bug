{"url": "https://api.github.com/repos/rust-lang/rust/issues/14527", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/14527/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/14527/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/14527/events", "html_url": "https://github.com/rust-lang/rust/issues/14527", "id": 34602736, "node_id": "MDU6SXNzdWUzNDYwMjczNg==", "number": 14527, "title": "replace the implementation of inline functions", "user": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-05-29T23:08:21Z", "updated_at": "2022-07-19T03:01:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Rust's implementation of `#[inline]` functions is far from ideal. It's a major contributor to both slow compile times and bloated binaries.\n\nThere are an enormous number of `#[inline]` functions in the standard libraries, and most have far more than one layer of inner `#[inline]` function calls. The work to convert these functions to LLVM IR, optimize and translate to machine code is duplicated for every single crate. The `inline` pass is not used at `--opt-level=0` and `--opt-level=1`, so the result is wasted time and duplicated code without any benefits.\n\nIt is possible to implement `#[inline]` functions without duplicating the work of converting to LLVM IR and optimizing. The compiler can also _entirely_ avoid any duplicated function bodies when the optimization level is not high enough for `inline`, the function is used as a function pointer or it is above the threshold.\n\nBefore compiling all of the functions in a library crate, Rust should create an LLVM module with all of the externally reachable inline functions in the crate. It will run the optimization passes on this LLVM module before continuing to compile, and it end up stored as metadata in the `rlib` or dynamic library in the bytecode format.\n\nThe compiler will then continue on with the compilation of the _other_ functions in the crate. The work to generate optimized LLVM IR from the externally reachable `#[inline]` is already complete and can be reused. These functions will _not_ be marked internal, because other crates will be able to call through to these.\n\nNow, when Rust is compiling another crate, it can start by fetching the LLVM bytecode for the required inline functions. These functions will be marked `available_externally` and use the original symbol from the source library, so that if inlining does not occur there will be _no duplicate code_. At `--opt-level=0` and `--opt-level=1`, it can simply generate an external call immediately and ignore the bytecode blob.\n\nIt would also be possible to leverage this for instantiations of generic functions, by making the instantiations already done by the library available externally as LLVM bytecode blobs in the metadata.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/14527/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/14527/timeline", "performed_via_github_app": null, "state_reason": null}