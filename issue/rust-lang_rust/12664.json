{"url": "https://api.github.com/repos/rust-lang/rust/issues/12664", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12664/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12664/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12664/events", "html_url": "https://github.com/rust-lang/rust/issues/12664", "id": 28596908, "node_id": "MDU6SXNzdWUyODU5NjkwOA==", "number": 12664, "title": "Matching against a `u8` with char literal", "user": {"login": "Valloric", "id": 919444, "node_id": "MDQ6VXNlcjkxOTQ0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/919444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Valloric", "html_url": "https://github.com/Valloric", "followers_url": "https://api.github.com/users/Valloric/followers", "following_url": "https://api.github.com/users/Valloric/following{/other_user}", "gists_url": "https://api.github.com/users/Valloric/gists{/gist_id}", "starred_url": "https://api.github.com/users/Valloric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Valloric/subscriptions", "organizations_url": "https://api.github.com/users/Valloric/orgs", "repos_url": "https://api.github.com/users/Valloric/repos", "events_url": "https://api.github.com/users/Valloric/events{/privacy}", "received_events_url": "https://api.github.com/users/Valloric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2014-03-03T03:25:27Z", "updated_at": "2020-05-13T07:33:40Z", "closed_at": "2014-03-03T03:37:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Boiled down, here's the problem I have:\n\n``` rust\nlet f: u8 = '\\n' as u8;\nlet b: u8 = match f { \n  '\\n' => 1, \n   _ => 2\n};\n```\n\nI'm parsing some binary data and a `u8` value in some cases _might_ be an ASCII char. I'd love to be able to match against these with char literals, but the compiler complains. My actual code is more complicated and involves matching `['\\\\', 'x', c1, c2, ..]` (and similar patterns) against a `&[u8]` slice.\n\nPossible solutions might involve something like allowing casts in the pattern (`'\\n' as u8 => ...`). A more generic solution might be to just have a macro that takes a char literal and returns a `u8`. So something like `foo!('\\n')` would expand to `10`.\n\nEither that, or string literals \u00e0 la C++11: `u8'\\n'`.\n", "closed_by": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12664/timeline", "performed_via_github_app": null, "state_reason": "completed"}