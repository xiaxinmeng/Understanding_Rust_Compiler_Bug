{"url": "https://api.github.com/repos/rust-lang/rust/issues/109293", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109293/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109293/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109293/events", "html_url": "https://github.com/rust-lang/rust/issues/109293", "id": 1630198916, "node_id": "I_kwDOAAsO6M5hKtyE", "number": 109293, "title": "Missed optimization opportunity on checking integer bounds", "user": {"login": "EFanZh", "id": 2160692, "node_id": "MDQ6VXNlcjIxNjA2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2160692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EFanZh", "html_url": "https://github.com/EFanZh", "followers_url": "https://api.github.com/users/EFanZh/followers", "following_url": "https://api.github.com/users/EFanZh/following{/other_user}", "gists_url": "https://api.github.com/users/EFanZh/gists{/gist_id}", "starred_url": "https://api.github.com/users/EFanZh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EFanZh/subscriptions", "organizations_url": "https://api.github.com/users/EFanZh/orgs", "repos_url": "https://api.github.com/users/EFanZh/repos", "events_url": "https://api.github.com/users/EFanZh/events{/privacy}", "received_events_url": "https://api.github.com/users/EFanZh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-03-18T06:33:41Z", "updated_at": "2023-05-22T04:42:16Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\n\r\nExample 1:\r\n\r\n```rust\r\npub fn foo(n: usize, s: &[u32]) {\r\n    assert!(n <= 40);\r\n\r\n    for _ in s {\r\n        std::hint::black_box(());\r\n    }\r\n\r\n    for i in 0..n {\r\n        assert!(i < 40); // Not optimized.\r\n    }\r\n}\r\n```\r\n\r\nExample 2:\r\n\r\n```rust\r\npub fn foo(n: usize) {\r\n    assert!(n <= 40);\r\n\r\n    for i in 0..n {\r\n        assert!(i < 40); // Not optimized.\r\n\r\n        if i % 2 == 0 {\r\n            std::hint::black_box(());\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: With `-C opt-level=3` option, `assert!(i < 40);` gets optimized away.\r\n\r\nInstead, this happened: The generated assembly still contains codes for `i < 40` assertion failure. See <https://godbolt.org/z/de6WcGc16> and <https://godbolt.org/z/e4GYrfTEq>.\r\n\r\nFor the first example. If I comment the `black_box`, the compiler will be able to do the optimization:\r\n\r\n```rust\r\npub fn foo(n: usize, s: &[u32]) {\r\n    assert!(n <= 40);\r\n\r\n    for _ in s {\r\n        // std::hint::black_box(());\r\n    }\r\n\r\n    for i in 0..n {\r\n        assert!(i < 40);\r\n    }\r\n}\r\n```\r\n\r\nFor the second example, If I change the condition of the `if` statement to `true`, the compiler will be able to do the optimization:\r\n\r\n```rust\r\npub fn foo(n: usize) {\r\n    assert!(n <= 40);\r\n\r\n    for i in 0..n {\r\n        assert!(i < 40);\r\n\r\n        if true {\r\n            std::hint::black_box(());\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n\r\n```\r\nrustc 1.70.0-nightly (171693274 2023-03-14)\r\nbinary: rustc\r\ncommit-hash: 1716932743a7b3705cbf0c34db0c4e070ed1930d\r\ncommit-date: 2023-03-14\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.70.0-nightly\r\nLLVM version: 15.0.7\r\nCompiler returned: 0\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109293/timeline", "performed_via_github_app": null, "state_reason": null}