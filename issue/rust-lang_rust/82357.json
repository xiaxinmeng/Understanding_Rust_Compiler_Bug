{"url": "https://api.github.com/repos/rust-lang/rust/issues/82357", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82357/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82357/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82357/events", "html_url": "https://github.com/rust-lang/rust/issues/82357", "id": 812767578, "node_id": "MDU6SXNzdWU4MTI3Njc1Nzg=", "number": 82357, "title": "Using a type alias for dyn Trait somehow imports the whole Trait, but also not really", "user": {"login": "SoniEx2", "id": 1779619, "node_id": "MDQ6VXNlcjE3Nzk2MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1779619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SoniEx2", "html_url": "https://github.com/SoniEx2", "followers_url": "https://api.github.com/users/SoniEx2/followers", "following_url": "https://api.github.com/users/SoniEx2/following{/other_user}", "gists_url": "https://api.github.com/users/SoniEx2/gists{/gist_id}", "starred_url": "https://api.github.com/users/SoniEx2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SoniEx2/subscriptions", "organizations_url": "https://api.github.com/users/SoniEx2/orgs", "repos_url": "https://api.github.com/users/SoniEx2/repos", "events_url": "https://api.github.com/users/SoniEx2/events{/privacy}", "received_events_url": "https://api.github.com/users/SoniEx2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-02-21T04:15:41Z", "updated_at": "2021-02-24T02:54:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\ntrait Foo {\r\n    fn f(&self) {print!(\"2\");}\r\n}\r\n\r\nimpl<'a> dyn Foo + 'a {\r\n    fn f(&self) {print!(\"1\");}\r\n}\r\n\r\nimpl Foo for bool {\r\n}\r\n\r\ntype Bar = dyn Foo;\r\n\r\nmod bar {\r\n    pub fn bar() {\r\n        crate::Bar::f(&true as &crate::Bar);\r\n    }\r\n}\r\n\r\nfn main() {\r\n    bar::bar();\r\n}\r\n```\r\n\r\nI expected to see this happen: Should've printed 1, as the trait is not in scope, so the inherent impl on the type should be used instead of the trait impl. And yet the trait impl isn't used either.\r\n\r\nInstead, this happened: The following error happens:\r\n\r\n```\r\nerror[E0034]: multiple applicable items in scope\r\n  --> src/main.rs:17:21\r\n   |\r\n17 |         crate::Bar::f(&true as &crate::Bar);\r\n   |         ------------^\r\n   |         |           |\r\n   |         |           multiple `f` found\r\n   |         help: disambiguate the associated function for candidate #2: `Foo::f`\r\n   |\r\nnote: candidate #1 is defined in an impl for the type `(dyn Foo + 'a)`\r\n  --> src/main.rs:6:5\r\n   |\r\n6  |     fn f(&self) {print!(\"1\");}\r\n   |     ^^^^^^^^^^^\r\nnote: candidate #2 is defined in the trait `Foo`\r\n  --> src/main.rs:2:5\r\n   |\r\n2  |     fn f(&self) {print!(\"2\");}\r\n   |     ^^^^^^^^^^^\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nUh how do you enable --version --verbose on the playground?\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82357/timeline", "performed_via_github_app": null, "state_reason": null}