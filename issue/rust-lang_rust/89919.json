{"url": "https://api.github.com/repos/rust-lang/rust/issues/89919", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89919/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89919/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89919/events", "html_url": "https://github.com/rust-lang/rust/issues/89919", "id": 1027641637, "node_id": "I_kwDOAAsO6M49QJEl", "number": 89919, "title": "Consider dynamically link to `libgcc_s` when targeting `windows-gnu`", "user": {"login": "Berrysoft", "id": 37586447, "node_id": "MDQ6VXNlcjM3NTg2NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/37586447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Berrysoft", "html_url": "https://github.com/Berrysoft", "followers_url": "https://api.github.com/users/Berrysoft/followers", "following_url": "https://api.github.com/users/Berrysoft/following{/other_user}", "gists_url": "https://api.github.com/users/Berrysoft/gists{/gist_id}", "starred_url": "https://api.github.com/users/Berrysoft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Berrysoft/subscriptions", "organizations_url": "https://api.github.com/users/Berrysoft/orgs", "repos_url": "https://api.github.com/users/Berrysoft/repos", "events_url": "https://api.github.com/users/Berrysoft/events{/privacy}", "received_events_url": "https://api.github.com/users/Berrysoft/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-10-15T17:15:32Z", "updated_at": "2023-03-21T17:55:36Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "## Description\r\n\r\nRust now choose to statically link to `libgcc_eh` and `libpthread` when no `-C prefer-dynamic` is specified:\r\nhttps://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/compiler/rustc_target/src/spec/windows_gnu_base.rs#L50-L58\r\n\r\nIt is because that some software end users may not have MinGW64 runtimes installed, and it may be complicated for developers to bundle the MinGW64 runtime. However, this case should have been correctly handled with `-C target-feature=+crt-static`.\r\n\r\n## Pros\r\n\r\n**Smaller binary size:** We could simply link with the system MinGW64 runtime, and it will help reduce some of the binary size. The distributed binary will also benifit from newer MinGW64 runtime without recompiling.\r\n\r\n**No sidebacks when using `crt-static`:** MinGW64 doesn't statically link to `msvcrt` due to license restrictions. Therefore the modification here won't make difference when using `crt-static`. It should perform as usual, and simply bundle the MinGW64 runtime.\r\n\r\n**Future exception safety:** I've noticed the [in design](https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md) feature for future exception safety. Then it needs the rust binary to dynamically link to the MinGW64 runtime.\r\n\r\n**Behavior consistence:** Most other targets only link to the unwind runtime statically when feature `crt-static` is on. We could set it on as default in the `windows-gnu` target, but leave the choice to the developers.\r\n\r\n## Cons\r\n\r\n**MISC breaking:** Some crates may assume the original behavior, although I haven't found one.\r\n\r\n## Other notes\r\nNot only the `windows_gnu_base.rs` should be modified, `library/unwind/src/lib.rs` should also be modified to properly deal with `crt-static` feature. Also, it should be investigated that where to link `libpthread` statically.\r\n\r\nI came to this idea when developing with Rust and GTK. GTK depends on a lot of other libraries, for example, harfbuzz, which itself is written by C++ and links to `libgcc_s`. Therefore I needn't statically link to `libgcc_eh`, because anyway I need to ship the binaries with a `libgcc`. However, I couldn't find a switch to turn it off. I couldn't use `-C prefer-dynamic`, because I don't want to dynamically link to `libstd-xxxxxxx`, which only increases the final binaries size. In addition, some crates, for example, [hyper](https://github.com/hyperium/hyper), blocks the `prefer-dynamic` build, because of its (maybe wrongly written) `crate-type`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89919/timeline", "performed_via_github_app": null, "state_reason": null}