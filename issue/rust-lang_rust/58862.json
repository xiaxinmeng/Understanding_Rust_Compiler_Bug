{"url": "https://api.github.com/repos/rust-lang/rust/issues/58862", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58862/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58862/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58862/events", "html_url": "https://github.com/rust-lang/rust/issues/58862", "id": 416315505, "node_id": "MDU6SXNzdWU0MTYzMTU1MDU=", "number": 58862, "title": "sys::unix::fs::canonicalize can lead to undefined-ish behavior on Android", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 25141820, "node_id": "MDU6TGFiZWwyNTE0MTgyMA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-android", "name": "O-android", "color": "6e6ec0", "default": false, "description": "Operating system: Android"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-01T23:09:34Z", "updated_at": "2020-07-11T13:19:38Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Its code is:\r\n```pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {\r\n    let path = CString::new(p.as_os_str().as_bytes())?;\r\n    let buf;\r\n    unsafe {\r\n        let r = libc::realpath(path.as_ptr(), ptr::null_mut());\r\n        if r.is_null() {\r\n            return Err(io::Error::last_os_error())\r\n        }\r\n        buf = CStr::from_ptr(r).to_bytes().to_vec();\r\n        libc::free(r as *mut _);\r\n    }\r\n    Ok(PathBuf::from(OsString::from_vec(buf)))\r\n}\r\n```\r\n\r\nThe problem comes from the pair of calls `libc::realpath`, `libc::free`. Under normal conditions, `libc::realpath` calls `malloc`, `libc::free` corresponds to `free` and everyone lives happily every after.\r\n\r\nNow, funky things are funky. Say you have a binary that makes `malloc` and `free` be jemalloc. From rust, `libc::malloc` and `libc::free` then point to jemalloc. But here's the catch: libc's `malloc` is not necessarily jemalloc's. That is, while on e.g. Linux, when you have such a setup, libc will happily use jemalloc's `malloc`/`free` for its allocations (as long as it's not built with -Bsymbolic or -Bsymbolic-functions), that's not the case on Android: IIRC, libc is linked in such a way that all its \"internal\" function calls stay internal (that is, it's built with -Bsymbolic). So when `realpath` calls `malloc`, it calls libc's not jemalloc's. And then `canonicalize` calls `libc::free` with the resulting pointer, which is jemalloc's. Kaboom.\r\n\r\nYes, there is `__malloc_hook` and friends, which would solve the problem if they existed on Android. (Well, they do now, but they don't on Android versions < 9 (and apparently 7 for IoT if I'm to believe tags in the bionic repository).\r\n\r\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1531887 is a real issue that results from this, although it doesn't involve `-Bsymbolic`, but some subtle dynamic linking setup where rust code is in libxul.so, which depends on libmozglue.so, which provides `malloc`/`free` as jemalloc's, for use by libxul, but all native Android code still ends up using libc's `malloc`/`free`.\r\n\r\nFor this particular case, it's possible to pass an appropriately-sized buffer to realpath instead of `null`, which makes it allocate on its own (https://pubs.opengroup.org/onlinepubs/009696799/functions/realpath.html says PATH_MAX ; the only system I know that doesn't use those limits is Hurd). For the more general case, it almost feels like there should be an overridable `GlobalAlloc` for the non-rust system allocator.\r\n\r\nCc: @SimonSapin ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58862/timeline", "performed_via_github_app": null, "state_reason": null}