{"url": "https://api.github.com/repos/rust-lang/rust/issues/107947", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107947/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107947/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107947/events", "html_url": "https://github.com/rust-lang/rust/issues/107947", "id": 1581155751, "node_id": "I_kwDOAAsO6M5ePoWn", "number": 107947, "title": "More confident const UB warnings where applicable", "user": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-02-12T07:28:15Z", "updated_at": "2023-02-12T07:28:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Code\r\n\r\n\r\nHere we have a small example of something that is wildly UB and, as I understand it, is almost certainly going to remain UB because if we permitted it, it would probably cause many other problems for all of our enum-based niche optimizations ([Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=afcf73b12eb718533927f47ebab450b4)):\r\n\r\n```Rust\r\n#![feature(const_ptr_write)]\r\n#![feature(const_mut_refs)]\r\n#![feature(const_maybe_uninit_as_mut_ptr)]\r\nuse std::mem::{self, MaybeUninit};\r\nuse std::ptr::write_bytes;\r\n\r\npub struct MyStruct {\r\n    pub some_bits: Bitpattern,\r\n}\r\n\r\npub enum Bitpattern {\r\n    Invalid,\r\n    Valid,\r\n}\r\n\r\npub static INVALID: MyStruct = unsafe {\r\n    let mut u = MaybeUninit::uninit();\r\n    let bytes = mem::size_of::<MyStruct>();\r\n\r\n    write_bytes(u.as_mut_ptr() as *mut u8 as *mut u8, 0xA5, bytes);\r\n    u.assume_init()\r\n};\r\n```\r\n\r\n\r\n### Current output\r\n\r\n```Shell\r\nerror[E0080]: it is undefined behavior to use this value\r\n  --> src/lib.rs:16:1\r\n   |\r\n16 | pub static INVALID: MyStruct = unsafe {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .some_bits.<enum-tag>: encountered 0xa5, but expected a valid enum tag\r\n   |\r\n   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\r\n   = note: the raw bytes of the constant (size: 1, align: 1) {\r\n               a5                                              \u2502 .\r\n           }\r\n\r\nFor more information about this error, try `rustc --explain E0080`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n\r\n### Desired output\r\n\r\n```Shell\r\nerror[E0080]: it is undefined behavior to evaluate this value\r\n  --> src/lib.rs:16:1\r\n   |\r\n16 | pub static INVALID: MyStruct = unsafe {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .some_bits.<enum-tag>: encountered 0xa5, but expected a valid enum tag\r\n   |\r\n   = note: a `const` or `static` evaluating to invalid values generates an arbitrary result\r\n   = note: running a program that includes invalid `const` or `static` values can lead to undefined behavior\r\n\r\nFor more information about this error, try `rustc --explain E0080`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n\r\n### Rationale and extra context\r\n\r\nI believe this is justified by the accepted [Rust RFC 3016: Const UB](https://rust-lang.github.io/rfcs/3016-const-ub.html). It is confusing to invite discourse if we only expect to give one response. We could defer this warning until the invalid `const` or `static` is used in the program in any way, but that seems unnecessary since we are already generating a compilation error for this case.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107947/timeline", "performed_via_github_app": null, "state_reason": null}