{"url": "https://api.github.com/repos/rust-lang/rust/issues/19260", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19260/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19260/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19260/events", "html_url": "https://github.com/rust-lang/rust/issues/19260", "id": 49851313, "node_id": "MDU6SXNzdWU0OTg1MTMxMw==", "number": 19260, "title": "Stabilization metabug: 1.0-alpha", "user": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37977651, "node_id": "MDU6TGFiZWwzNzk3NzY1MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/metabug", "name": "metabug", "color": "5319e7", "default": false, "description": "Issues about issues themselves (\"bugs about bugs\")"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2014-11-24T02:41:48Z", "updated_at": "2015-01-08T19:29:15Z", "closed_at": "2015-01-08T19:29:15Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is a tracking metabug for stabilization of both APIs and gated features.\n## API stabilization for `libstd`\n### First pass stabilization/reform\n\nFor simpler/mostly stable APIs (core types, iterators), stabilization is mostly a matter of aligning with conventions and deprecating marginal methods and takes place directly under the supervision of the core team. For deeper redesign, RFCs are needed. Where applicable, the list below points to the relevant RFC. \n\nMost APIs with a chechmark are still `#unstable`, either due to developing conventions, lack of language features (e.g. unboxed closures), or some other problem. We plan to do a rapid second pass closer to the 1.0.0 beta.\n\n(You can track the following list [quantitatively](http://static.rust-lang.org/doc/master/std/stability.html), though the fact that trait impls count exaggerates the amount of `#[experimental]` items.)\n\n**Items are marked complete when a PR/RFC has been posted** -- this is just tracking the design work.\n- [x] `any` - #15936 \n- [x] `ascii` (see [RFC](https://github.com/rust-lang/rfcs/pull/486))\n- [x] `bitflags` (see [RFC](https://github.com/rust-lang/rfcs/pull/509))\n- [x] `bool` - #15936\n- [x] `borrow` (see [RFC](https://github.com/rust-lang/rfcs/pull/235))\n- [x] `boxed` - #15591\n- [x] `c_str` (see [RFC](https://github.com/rust-lang/rfcs/pull/494))\n- [x] `c_vec` (see [RFC](https://github.com/rust-lang/rfcs/pull/494))\n- [x] `cell` - #15591\n- [x] `char` - #18603\n- [x] `clone` - #15135\n- [x] `cmp` - #15797 (see [RFC](https://github.com/rust-lang/rfcs/pull/439))\n- [x] `collections` (see [RFC](https://github.com/rust-lang/rfcs/pull/235))\n- [x] `comm` - #15286\n- [x] `default` - #15797\n- [x] `dynamic_lib` (`#[unstable]`)\n- [x] `error` (see [RFC](https://github.com/rust-lang/rfcs/pull/201))\n- [x] `f32`, `f64` (see [RFC](https://github.com/rust-lang/rfcs/pull/369))\n- [x] `finally` (`#[unstable]`)\n- [x] `fmt` (see [RFC](https://github.com/rust-lang/rfcs/pull/380))\n- [x] `hash` - #19673\n- [x] `i8`, `i16`, `i32`, `i64`, `int` (see [RFC](https://github.com/rust-lang/rfcs/pull/369))\n- [x] `intrinsics` (`#[unstable]`)\n- [x] `io` (see [RFC](https://github.com/rust-lang/rfcs/pull/517))\n- [x] `iter` - #19176\n- [x] `kinds` (punted to second pass)\n- [x] `thread_local` (see [RFC](https://github.com/rust-lang/rfcs/pull/461))\n- [x] `macros` (punted to second pass)\n- [x] `mem` - #14392\n- [x] `num` (see [RFC](https://github.com/rust-lang/rfcs/pull/369))\n- [x] `ops` (see [RFC](https://github.com/rust-lang/rfcs/pull/439))\n- [x] `option` - #16664\n- [x] `os` (see [RFC](https://github.com/rust-lang/rfcs/pull/517))\n- [x] `path` (see [RFC](https://github.com/rust-lang/rfcs/pull/474))\n- [x] `prelude` (see [RFC](https://github.com/rust-lang/rfcs/pull/503))\n- [x] `rand` (`#[unstable]`)\n- [x] `raw` (`#[unstable]`)\n- [x] `rc` - #15797\n- [x] `result` - #16664\n- [x] `rt` (`#[unstable]`)\n- [x] `simd` (`#[unstable]`)\n- [x] `slice` - #16332\n- [x] `str` - #19741, (see [RFC](https://github.com/rust-lang/rfcs/pull/528))\n- [x] `string` - #17438\n- [x] `sync` - #19274\n- [x] `task` (see [RFC](https://github.com/rust-lang/rfcs/pull/230))\n- [x] `time` (punted to third pass)\n- [x] `tuple` - (likely to be deprecated before 1.0), #15936\n- [x] `u8`, `u16`, `u32`, `u64`, `uint` (see [RFC](https://github.com/rust-lang/rfcs/pull/369))\n- [x] `unit` - #15936\n- [x] `vec` - #17029\n### Second pass stabilization: for alpha\n\nThe second pass is about actually moving APIs to `#[stable]` status; it may involve a bit of minor shuffling, but any major design work should have already taken place. In many cases APIs were blocked on language features (like unboxed closures) before moving to this status.\n- [x] ~~`any`~~ (`#[unstable` for alpha)\n- [x] ~~`ascii`~~ (`#[unstable]` for alpha)\n- [x] ~~`bitflags`~~ (see [RFC](https://github.com/rust-lang/rfcs/blob/master/text/0509-collections-reform-part-2.md))\n- [x] `bool` - acrichto #20006\n- [x] ~~`borrow`~~ (`#[unstable]` for alpha)\n- [x] `boxed` - acrichto #20420\n- [x] `c_str` - acrichto #20507\n- [x] `c_vec` - acrichto #20507\n- [x] `cell` - aturon #20066 -- `std` module mistakenly left experimental\n- [x] `char` - huonw #20395\n- [x] `clone` - aturon #20070\n- [x] `cmp` - aturon #20065\n- [x] `collections` - aturon / @Gankro #20356\n- [x] `comm` - acrichto #20273\n- [x] `default` - acrichto #19902\n- [x] ~~`dynamic_lib`~~ (`#[unstable]`)\n- [x] `error` - aturon #20647\n- [x] `f32`, `f64` - aturon (note: already stable; the `num::Float`/`FloatMath` traits are the problem point)\n- [x] ~~`finally`~~ (`#[unstable]`)\n- [ ] `fmt` - acrichto\n- [x] `hash` - acrichto #20654\n- [x] `i8`, `i16`, `i32`, `i64`, `int` - aturon #20062\n- [x] ~~`intrinsics`~~ (`#[unstable]` for alpha)\n- [x] ~~`io`~~ (`#[unstable]` for alpha)\n- [x] `iter` - aturon #20560\n- [x] `kinds` - aturon/nrc, flatten to `markers` #20607\n- [x] `macros` - acrichto #20657\n- [x] `mem` - acrichto #19902\n- [x] `num` - aturon/huonw #20573\n- [x] `ops` - aturon #20560\n- [x] `option` - acrichto #19849\n- [x] ~~`os`~~ (`#[unstable]` for alpha)\n- [x] ~~`path`~~ (`#[unstable]` for alpha)\n- [x] `prelude` - acrichto #20157\n- [x] `ptr` - acrichto #20042\n- [x] ~~`rand`~~ (`#[unstable]` for alpha)\n- [x] ~~`raw`~~ (`#[unstable]` for alpha)\n- [x] `rc` - aturon (complete from pass 1)\n- [x] `result` - acrichto #19961\n- [x] ~~`rt`~~ (`#[unstable]`)\n- [x] ~~`simd`~~ (`#[unstable]`)\n- [x] `slice` - aturon #20061, #20560\n- [x] `str` - acrichto #19741 / kimundi #20058\n- [x] `string` - acrichto #20306\n- [x] `sync` - acrichto #19661, #20315\n- [x] `task` (`#[deprecated]`)\n- [x] `thread` - aturon #20615\n- [x] `thread_local` - acrichto #20354\n- [x] ~~`thunk`~~ (`#[unstable]`)\n- [x] `tuple` - acrichto #20006\n- [x] `u8`, `u16`, `u32`, `u64`, `uint` - aturon #20062\n- [x] `unit` - acrichto #20006\n- [x] `vec` - aturon #20061\n### RFCs for reform\n\nThe following RFCs tackle deeper API redesigns:\n#### Accepted\n- [Error interoperation](https://github.com/rust-lang/rfcs/pull/201)\n- [Runtime reform](https://github.com/rust-lang/rfcs/pull/230)\n- [Collections reform](https://github.com/rust-lang/rfcs/pull/235) \n- [Numerics reform](https://github.com/rust-lang/rfcs/pull/369)\n- [Formatting stabilization](https://github.com/rust-lang/rfcs/pull/380) \n- [cmp/ops reform](https://github.com/rust-lang/rfcs/pull/439)\n- [Path reform](https://github.com/rust-lang/rfcs/pull/474)\n- [Thread-local storage reform](https://github.com/rust-lang/rfcs/pull/461)\n- [Split `Show`](https://github.com/rust-lang/rfcs/pull/504)\n- [Prelude stabilization](https://github.com/rust-lang/rfcs/pull/503)\n- [Collections reform part 2](https://github.com/rust-lang/rfcs/pull/509)\n- [Macro reform](https://github.com/rust-lang/rfcs/pull/453)\n- [c_str, c_vec reform](https://github.com/rust-lang/rfcs/pull/494)\n#### Pending\n- [io and os reform](https://github.com/rust-lang/rfcs/pull/517/)\n## Non-`std` crates\n\nSee https://github.com/rust-lang/rust/issues/18585#issuecomment-61560798\n### Just need `#[experimental]`\n\nWe will ship these crates, but will they will participate in `#![staged_api]`\nand will not be accessible in the stable channel.\n- [x] alloc\n- [x] arena\n- [x] collections\n- [x] core\n- [x] flate\n- [x] fmt_macros\n- [x] graphviz\n- [x] rand\n- [x] rbml\n- [x] rustc\n- [x] rustc_back\n- [x] rustc_llvm\n- [x] rustc_trans\n- [x] rustdoc\n- [x] syntax\n- [x] unicode\n### Need `Cargo.toml` and a publishing strategy\n\nThese crates will all be distributed, but participate in `#![staged_api]`. This\nmeans they will not be accessible in the stable channel's standard\ndistribution, but they will all be available through crates.io.\n- [x] getopts - https://github.com/rust-lang/getopts\n- [x] libc - #20606\n- [x] log - https://github.com/rust-lang/log\n- [x] regex - https://github.com/rust-lang/regex\n- [x] regex_macros - https://github.com/rust-lang/regex\n- [x] term - https://github.com/rust-lang/term\n### Need cooperation with the standard library due to compiler internals\n- [x] serialize - #19755, https://github.com/rust-lang/rustc-serialize\n- [x] test - #20603\n### Removed or to remove\n- [x] green - #18967\n- [x] native - #18967\n- [x] rustrt - #19654\n- [x] sync - #19255\n- [x] time - #18858\n## Feature stabilization\n### Ungating\n- [x] Globs\n- [x] Tuple indexing ([RFC](https://github.com/rust-lang/rfcs/pull/450)), #19472\n- [x] Struct variants ([RFC](https://github.com/rust-lang/rfcs/pull/418)), #18994\n- [x] `if let`/`while let` ([RFC](https://github.com/rust-lang/rfcs/pull/450)), #19472\n- [x] Macros\n- [x] Associated types\n- [x] Default type parameters\n### Removal\n- [x] Slicing syntax: should be removed in favor of [`ops` reform](https://github.com/rust-lang/rfcs/pull/439)\n## CLI Tooling\n- [ ] command line flags - #19051, #19900\n", "closed_by": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19260/timeline", "performed_via_github_app": null, "state_reason": "completed"}