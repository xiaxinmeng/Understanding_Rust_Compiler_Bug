{"url": "https://api.github.com/repos/rust-lang/rust/issues/55497", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55497/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55497/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55497/events", "html_url": "https://github.com/rust-lang/rust/issues/55497", "id": 375321935, "node_id": "MDU6SXNzdWUzNzUzMjE5MzU=", "number": 55497, "title": "Possible bug when trying to implement hylomorphisms in Rust", "user": {"login": "vmchale", "id": 13259982, "node_id": "MDQ6VXNlcjEzMjU5OTgy", "avatar_url": "https://avatars.githubusercontent.com/u/13259982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmchale", "html_url": "https://github.com/vmchale", "followers_url": "https://api.github.com/users/vmchale/followers", "following_url": "https://api.github.com/users/vmchale/following{/other_user}", "gists_url": "https://api.github.com/users/vmchale/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmchale/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmchale/subscriptions", "organizations_url": "https://api.github.com/users/vmchale/orgs", "repos_url": "https://api.github.com/users/vmchale/repos", "events_url": "https://api.github.com/users/vmchale/events{/privacy}", "received_events_url": "https://api.github.com/users/vmchale/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-30T05:00:13Z", "updated_at": "2019-01-27T15:58:37Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "When I try to compile\r\n\r\n```\r\nenum ListF<S, T> {\r\n    Cons(S, T),\r\n    Nil,\r\n}\r\n\r\nfn map<F, S, T0, T1>(f: F, x: ListF<S, T0>) -> ListF<S, T1>\r\nwhere\r\n    F: Fn(T0) -> T1,\r\n{\r\n    match x {\r\n        ListF::Nil => ListF::Nil,\r\n        ListF::Cons(y, ys) => ListF::Cons(y, f(ys)),\r\n    }\r\n}\r\n\r\nfn hylo<F0, F1, S, T0, T1>(f: F0, g: F1, x: T1) -> T0\r\nwhere\r\n    F0: Fn(ListF<S, T0>) -> T0,\r\n    F1: Fn(T1) -> ListF<S, T1>,\r\n{\r\n    f(map(|a| hylo(|b| f(b), |c| g(c), a), g(x)))\r\n}\r\n\r\nfn alg(xs: ListF<i64, i64>) -> i64 {\r\n    match xs {\r\n        ListF::Nil => 0,\r\n        ListF::Cons(y, ys) => y + ys,\r\n    }\r\n}\r\n\r\nfn coalg(x: i64) -> ListF<i64, i64> {\r\n    match x {\r\n        0 => ListF::Nil,\r\n        y => ListF::Cons(y, y - 1),\r\n    }\r\n}\r\n\r\nfn sum_to(x: i64) -> i64 {\r\n    hylo(|x0| alg(x0), |x1| coalg(x1), x)\r\n}\r\n\r\nfn main() {\r\n    println!(\"sum of first 200 integers: {}\", sum_to(200));\r\n}\r\n```\r\n\r\nI get the following error:\r\n\r\n```\r\nerror: reached the type-length limit while instantiating `map::<[closure@src/main.rs:21:11: 21:42 f:&[closure@src/main.rs:...`\r\n  --> src/main.rs:6:1\r\n   |\r\n6  | / fn map<F, S, T0, T1>(f: F, x: ListF<S, T0>) -> ListF<S, T1>\r\n7  | | where\r\n8  | |     F: Fn(T0) -> T1,\r\n9  | | {\r\n...  |\r\n13 | |     }\r\n14 | | }\r\n   | |_^\r\n   |\r\n   = note: consider adding a `#![type_length_limit=\"2097152\"]` attribute to your crate\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nSomewhat curiously, if I comment out the `println!` to yield\r\n\r\n```\r\nenum ListF<S, T> {\r\n    Cons(S, T),\r\n    Nil,\r\n}\r\n\r\nfn map<F, S, T0, T1>(f: F, x: ListF<S, T0>) -> ListF<S, T1>\r\nwhere\r\n    F: Fn(T0) -> T1,\r\n{\r\n    match x {\r\n        ListF::Nil => ListF::Nil,\r\n        ListF::Cons(y, ys) => ListF::Cons(y, f(ys)),\r\n    }\r\n}\r\n\r\nfn hylo<F0, F1, S, T0, T1>(f: F0, g: F1, x: T1) -> T0\r\nwhere\r\n    F0: Fn(ListF<S, T0>) -> T0,\r\n    F1: Fn(T1) -> ListF<S, T1>,\r\n{\r\n    f(map(|a| hylo(|b| f(b), |c| g(c), a), g(x)))\r\n}\r\n\r\nfn alg(xs: ListF<i64, i64>) -> i64 {\r\n    match xs {\r\n        ListF::Nil => 0,\r\n        ListF::Cons(y, ys) => y + ys,\r\n    }\r\n}\r\n\r\nfn coalg(x: i64) -> ListF<i64, i64> {\r\n    match x {\r\n        0 => ListF::Nil,\r\n        y => ListF::Cons(y, y - 1),\r\n    }\r\n}\r\n\r\nfn sum_to(x: i64) -> i64 {\r\n    hylo(|x0| alg(x0), |x1| coalg(x1), x)\r\n}\r\n\r\nfn main() {\r\n    // println!(\"sum of first 200 integers: {}\", sum_to(200));\r\n}\r\n```\r\n\r\nThen it compiles just fine, with only warnings about unused functions. \r\n\r\nThe hint to increase the type length limit does not work; I bumped it several times and all that happened (as far as I can tell) is that it made compile times longer. ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55497/timeline", "performed_via_github_app": null, "state_reason": null}