{"url": "https://api.github.com/repos/rust-lang/rust/issues/94428", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94428/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94428/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94428/events", "html_url": "https://github.com/rust-lang/rust/issues/94428", "id": 1153328258, "node_id": "I_kwDOAAsO6M5EvmSC", "number": 94428, "title": "Make sure our handling of partially initialized values is compatible with LLVM", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 5226679137, "node_id": "LA_kwDOAAsO6M8AAAABN4jLYQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-opsem", "name": "T-opsem", "color": "bfd4f2", "default": false, "description": "Relevant to the opsem team"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-02-27T17:19:51Z", "updated_at": "2023-04-09T03:47:47Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The intent is for types like `MaybeUninit<u64>` to support dealing with partially initialized data: e.g., if we have a `(u32, u16)` (and assuming for a second we could rely on its layout), it should be sound to transmute that to `MaybeUninit<u64>` and back *even though* the padding between the two tuple fields might be uninitialized. Code like https://github.com/rust-lang/rust/pull/94212 relies on this.\r\n\r\nThe thing is, we are compiling `MaybeUninit<u64>` to `i64` for LLVM -- `MaybeUninit` is `repr(transparent)`. This was required to avoid codegen regressions when `MaybeUninit` started to be used in some hot data copying loops inside libcore. So, for this all to work out, we better be sure that `i64` correctly preserves partially initialized data.\r\n\r\nLLVM has two kinds of \"uninit\" data, `undef` and `poison`.\r\n\r\n- `undef` is per-bit and precisely preserved in all `iN` types, so we should be fine here.\r\n- `poison`, however, is per-value: when loading an `i64` and any of its bytes is `poison`, the entire result is `poison`. That is exactly *not* what we want for `MaybeUninit<u64>`. However, at least in current LLVM, `poison` is only created in very few situations (such as \"nowrap\" arithmetic that overflows), and AFAIK none of them can happen in a UB-free Rust program -- so, basically \"uninit\" in Rust only ever corresponds to `undef` in LLVM, never to `poison`. (But I might have missed places where LLVM generates `posion`.)\r\n\r\nSo I think *right now* we are good. However, LLVM is slowly moving away from `undef` and towards `posion`, since `undef` is seriously ill-behaved in many ways. And if that ever means that \"uninit\" in Rust could correspond to LLVM `poison`, then we have a problem here -- we have to keep monitoring this situation, and it might be good for us to be involved in the relevant LLVM discussions here as well to make sure they are aware of this problem.\r\n\r\nSimilarly, as we evolve the MIR semantics we have to make sure that no UB-free program can generate `poison` after compilation to LLVM.\r\n\r\nA very elegant solution to this issue would be for LLVM to adopt the [\"byte type\" proposal](https://lists.llvm.org/pipermail/llvm-dev/2021-June/150883.html), however, so far my impression is the LLVM community is not convinced they need such a type. With a byte type, `MaybeUninit<u64>` could be easily compiled to `b64` in LLVM, and a byte type *would* preserve `poison` precisely, so we'd be all good.\r\n\r\nI am mostly opening this so we have some place to track the current situation, and to make sure everyone agrees on what the main concerns are here -- and to get input from folks with more LLVM experience in case I got some of this wrong.\r\nCc @rust-lang/wg-unsafe-code-guidelines @rust-lang/wg-llvm", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94428/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94428/timeline", "performed_via_github_app": null, "state_reason": null}