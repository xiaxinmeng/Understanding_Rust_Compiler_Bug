{"url": "https://api.github.com/repos/rust-lang/rust/issues/72396", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72396/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72396/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72396/events", "html_url": "https://github.com/rust-lang/rust/issues/72396", "id": 622058410, "node_id": "MDU6SXNzdWU2MjIwNTg0MTA=", "number": 72396, "title": "Perform validation in const_eval_raw, return valtree from const_eval and decouple MIR-embedded consts from the rest", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}, {"id": 2823748714, "node_id": "MDU6TGFiZWwyODIzNzQ4NzE0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-valtree", "name": "A-valtree", "color": "f7e101", "default": false, "description": "Things about value trees or fixed by value trees"}], "state": "open", "locked": false, "assignee": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 24, "created_at": "2020-05-20T20:19:35Z", "updated_at": "2021-03-15T12:54:05Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now, we have two \"const_eval\" queries: `const_eval_raw` is internal and returns a \"by-reference\" constant (`MPlaceTy`) pointing to some global allocation in `tcx.alloc_map`. And `const_eval` is the entry point supposed to be used by the rest of the compiler, and it returns a `ty::Const`, representing some constants of some types \"by-value\".\r\n\r\nBeyond the by-ref to by-val conversion, `const_eval` also performs validation of the constant to make sure it matches its type. The fact that `const_eval_raw` does *not* do that is a constant source of concern for me, e.g. we have some `delay_span_bug` in that query that basically rely on validation happening eventually and I think some of those might actually be \"exploitable\" ICEs.\r\n\r\nFurthermore, \"validated or not\" as a question seems separate from \"by-val or by-ref\". By-val representation is appropriate for many uses of `const` (in particular around array lengths and pattern matching), but AFAIK never makes any sense for `static`. We currently force statics to go through `ty::Const` which seems odd. In fact, in the context of https://github.com/rust-lang/const-eval/issues/42 and https://github.com/rust-lang/rust/issues/70889, we determined that pattern matching and const generics likely want a different, even more higher-level representation of const values than what we currently have for `ty::Const`.\r\n\r\nSo I propose we perform validation in `const_eval_raw` (whose name should be changed then... maybe `const_eval_ref`?). Then all these `delay_span_bug` issues disappear. But the query should still return an `MPlaceTy`. The idea is that this is the query used for `static` and other clients (like Miri) that can handle constants of any type and only care about their value at the byte level.\r\n\r\nThen we can have a second query which, like current `const_eval` (new name maybe `const_eval_val`?), returns `ty::Const`. This would *only* be used for things like array lengths, pattern matching, const generics -- things which need a more \"structured\" view of consts than `MPlaceTy` provides. I think this would be a great place to put some check that \"all allocations reachable from a const are read-only\" (as [proposed here](https://github.com/rust-lang/const-eval/issues/11#issuecomment-622081404)). Also, my hypothesis is that this query should only ever be called on \"structural match\" types -- maybe we can assert that? Long-term, this could become the \"integer tree\" representation @eddyb proposed.\r\n\r\nThe main technical hurdle is that we have to avoid query cycles. That's why validation was split out into a separate pass in the first place. We can achieve that by stopping validation when we hit a `GlobalAlloc::Static(DefId)` allocation. I think that is reasonable -- we already stop there if the `DefId` is in a different crate, so we cannot rely on this for soundness anyway.\r\n\r\n@rust-lang/wg-const-eval does this all make sense?\r\n\r\nI think if this works it quite be a really nice cleanup, and I would finally be much less bothered by the existence of two queries and two different representations of consts. :D Some time ago I thought we could kill `ty::Const`and use by-ref consts for everything, and I think @oli-obk even tried that and it went nowhere. But \"by-ref\" just seemed like *the* canonical representations of consts, and we ended up with ugly hack where whether we are in a static affects how we convert `MPlaceTy` into `ty::Const`... ugh. Now I finally understand what that is the case: we have two different kinds of consumers of consts in the compiler, with different needs, and they should use different queries with different return types. Some are happy with `MPlaceTy`, others require a more high-level view. I feel like we finally found the right structure to represent this. :D\r\n\r\n[Here's that design worked out a bit more](https://hackmd.io/Qvrj_eOFTkCHZrhJ7f1ItA).", "closed_by": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72396/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72396/timeline", "performed_via_github_app": null, "state_reason": null}