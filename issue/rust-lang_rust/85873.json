{"url": "https://api.github.com/repos/rust-lang/rust/issues/85873", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85873/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85873/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85873/events", "html_url": "https://github.com/rust-lang/rust/issues/85873", "id": 907767076, "node_id": "MDU6SXNzdWU5MDc3NjcwNzY=", "number": 85873, "title": "TrustedRandomAccess optimization for Zip containing vec::IntoIter is unsound with how specialization currently behaves around HRTB fn pointers", "user": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}, {"id": 1966877457, "node_id": "MDU6TGFiZWwxOTY2ODc3NDU3", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-critical", "name": "P-critical", "color": "eb6420", "default": false, "description": "Critical priority"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2021-06-01T00:09:36Z", "updated_at": "2021-07-29T02:51:16Z", "closed_at": "2021-07-29T02:51:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Related to #85863, which now includes a high-level description covering both #85863 and #85873. _[This issue is not a duplicate because both issues can be fixed independently in different ways.]_\r\n\r\n```rust\r\nuse std::{iter::Zip, marker::PhantomData, vec};\r\n\r\nstruct MyStruct<T>(PhantomData<T>);\r\nimpl<T> Clone for MyStruct<T> {\r\n    fn clone(&self) -> Self {\r\n        Self(PhantomData)\r\n    }\r\n}\r\nimpl Copy for MyStruct<fn(&())> {}\r\n\r\n#[allow(clippy::type_complexity)]\r\nfn main() {\r\n    let i: vec::IntoIter<MyStruct<fn(&())>> = vec![MyStruct::<fn(&())>(PhantomData)].into_iter();\r\n    let mut y = [Some(&42)];\r\n    let mut z = i.zip(y.iter_mut());\r\n    let r1 = z.next().unwrap().1;\r\n    let mut z: Zip<vec::IntoIter<MyStruct<fn(&'static ())>>, _> = z;\r\n    let r2 = z.next().unwrap().1;\r\n    let elt = r1.as_ref().unwrap();\r\n    dbg!(elt);\r\n    *r2 = None;\r\n    dbg!(elt);\r\n}\r\n```\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 1.10s\r\n     Running `target/debug/playground`\r\n[src/main.rs:20] elt = 42\r\n[src/main.rs:22] elt = timeout: the monitored command dumped core\r\n/playground/tools/entrypoint.sh: line 11:     8 Segmentation fault      timeout --signal=KILL ${timeout} \"$@\"\r\n```\r\n([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=3fe632a24ae62688020e62c83e7a2b0c))\r\n\r\n@rustbot label T-libs-impl, T-compiler, A-specialization, A-iterators, A-typesystem, A-lifetimes, A-traits, regression-from-stable-to-stable\r\n~~someone please add the unsound label~~ thanks\r\n\r\n## Explanation\r\n\r\n`Zip` uses an optimization if both contained iterators implement `TrustedRandomAccess`. There\u2019s an impl\r\n```rust\r\nimpl<T> TrustedRandomAccess for IntoIter<T>\r\nwhere\r\n    T: Copy, \r\n```\r\nfor both `vec::IntoIter` and `vec_deque::IntoIter` that depend on `Copy`. This way, unsound specialization is possible. This can be turned into _actual_ ill-behaved programs at runtime similar as in #85863, relying on covariance of `IntoIter` and `Zip`. This way, the `ZipImpl` implementation is switched out and this way the `Zip` iterator gets into an illegal state resulting in violation of the contract of `TrustedRandomAccess` by calling `.next()` on the `IterMut` iterator after the first item was already read via `__iterator_get_unchecked`. The best immediate fix is probably to remove those two `TrustedRandomAccess` implementations for `IntoIter`; they\u2019re an optimization only, anyway. This distinguishes this issue clearly from #85863 because for the `FusedIterator` trait, the specialization is quite directly part of the API, whereas this issue is only about a soundness regression from a performance optimization that can easily be reverted.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85873/timeline", "performed_via_github_app": null, "state_reason": "completed"}