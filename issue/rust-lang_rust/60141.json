{"url": "https://api.github.com/repos/rust-lang/rust/issues/60141", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60141/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60141/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60141/events", "html_url": "https://github.com/rust-lang/rust/issues/60141", "id": 435423929, "node_id": "MDU6SXNzdWU0MzU0MjM5Mjk=", "number": 60141, "title": "very bad codegen for thread_local! on OSX", "user": {"login": "mtak-", "id": 6643140, "node_id": "MDQ6VXNlcjY2NDMxNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6643140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mtak-", "html_url": "https://github.com/mtak-", "followers_url": "https://api.github.com/users/mtak-/followers", "following_url": "https://api.github.com/users/mtak-/following{/other_user}", "gists_url": "https://api.github.com/users/mtak-/gists{/gist_id}", "starred_url": "https://api.github.com/users/mtak-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mtak-/subscriptions", "organizations_url": "https://api.github.com/users/mtak-/orgs", "repos_url": "https://api.github.com/users/mtak-/repos", "events_url": "https://api.github.com/users/mtak-/events{/privacy}", "received_events_url": "https://api.github.com/users/mtak-/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 123111, "node_id": "MDU6TGFiZWwxMjMxMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-macos", "name": "O-macos", "color": "6e6ec0", "default": false, "description": "Operating system: macOS"}, {"id": 632886930, "node_id": "MDU6TGFiZWw2MzI4ODY5MzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-thread-locals", "name": "A-thread-locals", "color": "f7e101", "default": false, "description": "Area: Thread local storage (TLS)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-20T17:59:48Z", "updated_at": "2019-06-20T18:20:39Z", "closed_at": "2019-06-20T05:43:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This sample code demonstrates the problem.\r\n[godbolt](https://rust.godbolt.org/z/qZ-sFY) link (macos on left/top).\r\n\r\n```rust\r\n#[allow(improper_ctypes)]\r\n\r\ntype T = String;\r\n\r\nthread_local!{\r\n    static X: T = unsafe { init() };\r\n}\r\n\r\nextern \"C\" {\r\n    #[inline(never)]\r\n    #[cold]\r\n    fn init() -> T;\r\n}\r\n\r\npub fn get() -> T {\r\n    X.with(|x| x.clone())\r\n}\r\n```\r\n\r\n<details> \r\n  <summary>asm</summary>\r\n\r\n```asm\r\nexample::get:\r\n  pushq %rbp\r\n  movq %rsp, %rbp\r\n  pushq %r14\r\n  pushq %rbx\r\n  subq $64, %rsp\r\n  movq %rdi, %r14\r\n  movq example::X::__getit::__KEY@TLVP(%rip), %rdi\r\n  callq *(%rdi)\r\n  cmpb $0, 25(%rax)\r\n  jne LBB3_9\r\n  movq example::X::__getit::__KEY@TLVP(%rip), %rdi\r\n  callq *(%rdi)\r\n  cmpb $0, 24(%rax)\r\n  jne LBB3_3\r\n  movq example::X::__getit::__KEY@TLVP(%rip), %rdi\r\n  callq *(%rdi)\r\n  movq %rax, %rbx\r\n  leaq std::thread::local::fast::destroy_value(%rip), %rsi\r\n  movq %rax, %rdi\r\n  callq std::sys::unix::fast_thread_local::register_dtor\r\n  movb $1, 24(%rbx)\r\nLBB3_3:\r\n  movq example::X::__getit::__KEY@TLVP(%rip), %rdi\r\n  callq *(%rdi)\r\n  cmpq $0, (%rax)\r\n  je LBB3_4\r\nLBB3_7:\r\n  movq example::X::__getit::__KEY@TLVP(%rip), %rdi\r\n  callq *(%rdi)\r\n  leaq -40(%rbp), %rdi\r\n  movq %rax, %rsi\r\n  callq <alloc::string::String as core::clone::Clone>::clone\r\n  movq -40(%rbp), %rax\r\n  vmovups -32(%rbp), %xmm0\r\n  vmovaps %xmm0, -80(%rbp)\r\n  testq %rax, %rax\r\n  je LBB3_9\r\n  movq %rax, (%r14)\r\n  vmovaps -80(%rbp), %xmm0\r\n  vmovups %xmm0, 8(%r14)\r\n  movq %r14, %rax\r\n  addq $64, %rsp\r\n  popq %rbx\r\n  popq %r14\r\n  popq %rbp\r\n  retq\r\nLBB3_4:\r\n  leaq -40(%rbp), %rdi\r\n  callq _init\r\n  vmovups -40(%rbp), %xmm0\r\n  vmovaps %xmm0, -64(%rbp)\r\n  movq -24(%rbp), %rcx\r\n  movq example::X::__getit::__KEY@TLVP(%rip), %rdi\r\n  callq *(%rdi)\r\n  movq (%rax), %rdi\r\n  movq 8(%rax), %rsi\r\n  vmovaps -64(%rbp), %xmm0\r\n  vmovups %xmm0, (%rax)\r\n  movq %rcx, 16(%rax)\r\n  testq %rdi, %rdi\r\n  je LBB3_7\r\n  testq %rsi, %rsi\r\n  je LBB3_7\r\n  movl $1, %edx\r\n  callq ___rust_dealloc\r\n  jmp LBB3_7\r\nLBB3_9:\r\n  callq core::result::unwrap_failed\r\n```\r\n\r\n</details>\r\n\r\nThe asm demonstrates that even when the value has been initialized, and the destructor registered, but not yet running, the thread local pointer gets looked up (`callq *(%rdi)`) four times!!! On linux that lookup only occurs once.\r\n\r\nOne potential fix is to insert a `read_volatile` inside of [`__getit()`](https://github.com/rust-lang/rust/blob/0d1732212fb5f6c6653a776a0ce46bc73ce77ebb/src/libstd/thread/local.rs#L162).\r\n\r\n```rust\r\nlet key = &__KEY;\r\n// make platform specific version of this\r\nlet key = $crate::ptr::read_volatile(&key);\r\nkey.get()\r\n```\r\n\r\nWhich improves the asm to the following:\r\n\r\n<details> \r\n  <summary>asm</summary>\r\n\r\n```asm\r\n__ZN17thread_local_test17thread_local_test3get17h69984f7e963f5a1bE:\r\n\tpushq\t%rbp\r\n\tmovq\t%rsp, %rbp\r\n\tpushq\t%r14\r\n\tpushq\t%rbx\r\n\tsubq\t$48, %rsp\r\n\tmovq\t%rdi, %r14\r\n\tmovq\t__ZN17thread_local_test17thread_local_test3get1X7__getit5__KEY17h1886c2e600469f01E@TLVP(%rip), %rdi\r\n\tcallq\t*(%rdi)\r\n\tmovq\t%rax, -48(%rbp)\r\n\tmovq\t-48(%rbp), %rbx\r\n\tcmpb\t$0, 25(%rbx)\r\n\tjne\tLBB10_9\r\n\tcmpb\t$0, 24(%rbx)\r\n\tjne\tLBB10_3\r\n\tleaq\t__ZN3std6thread5local4fast13destroy_value17hbc43def25f86e32eE(%rip), %rsi\r\n\tmovq\t%rbx, %rdi\r\n\tcallq\t__ZN3std3sys4unix17fast_thread_local13register_dtor17ha35ff2a0753ab802E\r\n\tmovb\t$1, 24(%rbx)\r\nLBB10_3:\r\n\tcmpq\t$0, (%rbx)\r\n\tje\tLBB10_4\r\nLBB10_7:\r\n\tleaq\t-48(%rbp), %rdi\r\n\tmovq\t%rbx, %rsi\r\n\tcallq\t__ZN60_$LT$alloc..string..String$u20$as$u20$core..clone..Clone$GT$5clone17h9234dcb674122143E\r\n\tmovq\t-48(%rbp), %rax\r\n\tvmovups\t-40(%rbp), %xmm0\r\n\tvmovaps\t%xmm0, -64(%rbp)\r\n\ttestq\t%rax, %rax\r\n\tje\tLBB10_9\r\n\tmovq\t%rax, (%r14)\r\n\tvmovaps\t-64(%rbp), %xmm0\r\n\tvmovups\t%xmm0, 8(%r14)\r\n\taddq\t$48, %rsp\r\n\tpopq\t%rbx\r\n\tpopq\t%r14\r\n\tpopq\t%rbp\r\n\tretq\r\nLBB10_4:\r\n\tleaq\t-48(%rbp), %rdi\r\n\tcallq\t__ZN17thread_local_test17thread_local_test4init17h2e4a5dfd2802b210E\r\n\tvmovaps\t-48(%rbp), %xmm0\r\n\tmovq\t-32(%rbp), %rax\r\n\tmovq\t(%rbx), %rdi\r\n\tmovq\t8(%rbx), %rsi\r\n\tvmovups\t%xmm0, (%rbx)\r\n\tmovq\t%rax, 16(%rbx)\r\n\ttestq\t%rdi, %rdi\r\n\tje\tLBB10_7\r\n\ttestq\t%rsi, %rsi\r\n\tje\tLBB10_7\r\n\tmovl\t$1, %edx\r\n\tcallq\t___rust_dealloc\r\n\tjmp\tLBB10_7\r\nLBB10_9:\r\n\tcallq\t__ZN4core6result13unwrap_failed17h6ad7be40c736aa06E\r\n```\r\n</details>\r\n\r\nBenchmark\r\n```rust\r\n    #[inline(never)]\r\n    #[cold]\r\n    fn init() -> String {\r\n        String::from(\"hello world\")\r\n    }\r\n\r\n    #[bench]\r\n    fn thread_local(b: &mut Bencher) {\r\n        const ITER_COUNT: usize = 1_000_000;\r\n        thread_local! {\r\n            static X: String = init();\r\n        }\r\n        X.with(|_| {});\r\n        b.iter(|| {\r\n            for _ in 0..ITER_COUNT {\r\n                X.with(|x| {\r\n                    test::black_box(x);\r\n                })\r\n            }\r\n        })\r\n    }\r\n```\r\n\r\nResults\r\n```\r\ncurrent       ... bench:   7,128,388 ns/iter\r\nread_volatile ... bench:   2,085,139 ns/iter (+/- 204,564)\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60141/timeline", "performed_via_github_app": null, "state_reason": "completed"}