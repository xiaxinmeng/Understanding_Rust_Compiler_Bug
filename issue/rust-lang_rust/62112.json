{"url": "https://api.github.com/repos/rust-lang/rust/issues/62112", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62112/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62112/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62112/events", "html_url": "https://github.com/rust-lang/rust/issues/62112", "id": 460303573, "node_id": "MDU6SXNzdWU0NjAzMDM1NzM=", "number": 62112, "title": "\"use of moved value\" diagnostic could suggest reborrow when passing `&mut` to `&mut`", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-25T09:10:34Z", "updated_at": "2020-06-26T06:11:02Z", "closed_at": "2020-06-26T06:11:02Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Spawned off of #45142\r\n\r\nConsider the following code ([play](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=f7bb96b5960bb3a6fdaa0c207038f954)):\r\n\r\n```rust\r\n\r\n\r\nstruct Events<R>(R);\r\n\r\nstruct Other;\r\n\r\npub trait Trait<T> { \r\n    fn handle(value: T) -> Self;\r\n}\r\n\r\n// Blanket impl. (If you comment this out, compiler figures out that it\r\n// is passing an `&mut` to a method that must be expecting an `&mut`,\r\n// and injects an auto-reborrow.)\r\nimpl<T, U> Trait<U> for T where T: From<U> {\r\n    fn handle(_: U) -> Self { unimplemented!() }\r\n}\r\n\r\nimpl<'a, R> Trait<&'a mut Events<R>> for Other {\r\n    fn handle(_: &'a mut Events<R>) -> Self { unimplemented!() }\r\n}\r\n\r\nfn this_compiles<'a, R>(value: &'a mut Events<R>) {\r\n    for _ in 0..3 {\r\n        Other::handle(&mut *value);\r\n    }\r\n}\r\n\r\nfn this_does_not<'a, R>(value: &'a mut Events<R>) {\r\n    for _ in 0..3 {\r\n        Other::handle(      value);\r\n    }\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nToday, this yields the diagnostic:\r\n\r\n```\r\nerror[E0382]: use of moved value: `value`\r\n  --> src/main.rs:30:29\r\n   |\r\n28 | fn this_does_not<'a, R>(value: &'a mut Events<R>) {\r\n   |                         ----- move occurs because `value` has type `&mut Events<R>`, which does not implement the `Copy` trait\r\n29 |     for _ in 0..3 {\r\n30 |         Other::handle(      value);\r\n   |                             ^^^^^ value moved here, in previous iteration of loop\r\n```\r\n\r\nWe could do better. For example, the diagnostic could additionally say: \r\n\r\n```\r\nconsider writing `Other::handle(&mut *value)` to create a fresh reborrow of `value`.\r\n```\r\n\r\n----\r\n\r\nBackground:\r\n\r\nThe compiler tries hard to auto-inject `&mut`-reborrows when it makes sense; as a way to create a fresh `&mut` reference to pass into the method invocation, and avoid moving the pre-existing `&mut` reference.\r\n\r\nBut there are times, often involving generic code, when it cannot automatically inject a reborrow. (After all, there are cases where the intent *is* to move the borrow into some place whose dynamic extent outlives that of the method invocation itself; and the static analysis cannot tell if this was the case at the point where it is deciding whether to insert an `&mut`-reborrow or not.)\r\n\r\nThis can lead to a diagnostic for the user telling them that they have a used of a moved value.\r\n\r\nBut new-comers to Rust do not always know about the option of putting in a `&mut`-reborrow themselves.\r\n\r\nOur diagnostics could help them here. Even though we choose to not attempt to auto-inject the auto-reborrow in the compiler itself, our diagnostics have enough information about the method signature and the invocation to suggest to the user that they write out the `&mut *value` themselves.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62112/timeline", "performed_via_github_app": null, "state_reason": "completed"}