{"url": "https://api.github.com/repos/rust-lang/rust/issues/16242", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/16242/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/16242/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/16242/events", "html_url": "https://github.com/rust-lang/rust/issues/16242", "id": 39417488, "node_id": "MDU6SXNzdWUzOTQxNzQ4OA==", "number": 16242, "title": "Allow destructors to be run directly on a memory location, so it is not impossible to handle location-dependent values", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-08-04T12:52:58Z", "updated_at": "2015-01-27T21:01:11Z", "closed_at": "2015-01-27T16:44:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, the only way for a library to run a destructor on a value is to let it fall out of scope while on the stack, that is, types wrapping raw pointers (like `Vec` and `Rc`) have to call `ptr::read` and let the resulting value drop to destroy their contents. This moves values in memory, and thus makes it literally impossible to use `Vec` or `Rc` (or any other library defined container type) for types with destructors that depend on the location of the value in memory.\n\nThis could be avoid we had a `destroy_directly(&mut T)` intrinsic that destroyed that memory location, and so what is currently written `ptr::read(x)` (or `drop(ptr::read(x))`) would be written `destroy_directly(&mut *x)` and (for types with `Drop` impls) effectively be just calling `(&mut *x).drop()`.\n\ne.g. https://github.com/rust-lang/rust/blob/795f6ae829ab1bfd72394a5da9096e2717ec0f62/src/libcollections/vec.rs#L1539 (there's a variety of other `ptr::read`s for a similar purpose in this file, and in other low-level code).\n\nAs a real-world example, putting a series of [`std::comm::Handle`](http://doc.rust-lang.org/master/std/comm/struct.Handle.html) into a preallocated `Vec` (to satisfy the requirement that they must not move in memory after calling `.add`) will still break, because the destructors [asserts that the memory address is the same as it was](https://github.com/rust-lang/rust/blob/795f6ae829ab1bfd72394a5da9096e2717ec0f62/src/libsync/comm/select.rs#L279) and thus `Vec` moving things in memory upsets it. The value being location dependent is bad, but it seems very reasonable to just destroy things in place to allow it to mostly work (it's probably more efficient too, since I believe LLVM can't optimise away the `memcpy` out of the `Vec` in all situations).\n\n(NB. one can currently work-around this by `box`-ing everything, because the compiler-magic of the `Box` type means its destructor destroys things in-place.)\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/16242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/16242/timeline", "performed_via_github_app": null, "state_reason": "completed"}