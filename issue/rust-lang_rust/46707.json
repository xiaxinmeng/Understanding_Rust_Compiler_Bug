{"url": "https://api.github.com/repos/rust-lang/rust/issues/46707", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46707/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46707/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46707/events", "html_url": "https://github.com/rust-lang/rust/issues/46707", "id": 281620749, "node_id": "MDU6SXNzdWUyODE2MjA3NDk=", "number": 46707, "title": "If specialization is involved, associated types are not evaluated even on last crate.", "user": {"login": "kdy1", "id": 29931815, "node_id": "MDQ6VXNlcjI5OTMxODE1", "avatar_url": "https://avatars.githubusercontent.com/u/29931815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdy1", "html_url": "https://github.com/kdy1", "followers_url": "https://api.github.com/users/kdy1/followers", "following_url": "https://api.github.com/users/kdy1/following{/other_user}", "gists_url": "https://api.github.com/users/kdy1/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdy1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdy1/subscriptions", "organizations_url": "https://api.github.com/users/kdy1/orgs", "repos_url": "https://api.github.com/users/kdy1/repos", "events_url": "https://api.github.com/users/kdy1/events{/privacy}", "received_events_url": "https://api.github.com/users/kdy1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-13T04:20:10Z", "updated_at": "2019-09-15T19:55:44Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As current specialization does not support returning `default type XX` from default method (so it can be specialized separately), I used a trick to do this.\r\n\r\nPlayground: https://play.rust-lang.org/?gist=d4bbcd09ae0cd3044d2da9879fc489a0&version=nightly\r\n\r\nIt compiles, and I expected it to work, but I noticed that it doesn't work because associated type isn't evaluated.\r\n\r\n\r\n\r\n```sh\r\nerror[E0369]: binary operation `==` cannot be applied to type `<<{integer} as Specializer>::Specialized as SpecialzedTrait>::Out`\r\n  --> src/main.rs:72:5\r\n   |\r\n72 |     assert_eq!(1.op(), (1, 2).op());\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: an implementation of `std::cmp::PartialEq` might be missing for `<<{integer} as Specializer>::Specialized as SpecialzedTrait>::Out`\r\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\r\n\r\nerror[E0277]: the trait bound `<<{integer} as Specializer>::Specialized as SpecialzedTrait>::Out: std::fmt::Debug` is not satisfied\r\n  --> src/main.rs:72:5\r\n   |\r\n72 |     assert_eq!(1.op(), (1, 2).op());\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<{integer} as Specializer>::Specialized as SpecialzedTrait>::Out` cannot be formatted using `:?`; if it is defined in your crate, add `#[derive(Debug)]` or manually implement it\r\n   |\r\n   = help: the trait `std::fmt::Debug` is not implemented for `<<{integer} as Specializer>::Specialized as SpecialzedTrait>::Out`\r\n   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&<<{integer} as Specializer>::Specialized as SpecialzedTrait>::Out`\r\n   = note: required by `std::fmt::Debug::fmt`\r\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\r\n\r\nerror[E0277]: the trait bound `{integer}: std::cmp::PartialEq<<<{integer} as Specializer>::Specialized as SpecialzedTrait>::Out>` is not satisfied\r\n  --> src/main.rs:73:5\r\n   |\r\n73 |     assert_eq!((1, 2).op(), 1.op());\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't compare `{integer}` with `<<{integer} as Specializer>::Specialized as SpecialzedTrait>::Out`\r\n   |\r\n   = help: the trait `std::cmp::PartialEq<<<{integer} as Specializer>::Specialized as SpecialzedTrait>::Out>` is not implemented for `{integer}`\r\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\r\n\r\nerror[E0277]: the trait bound `<<{integer} as Specializer>::Specialized as SpecialzedTrait>::Out: std::fmt::Debug` is not satisfied\r\n  --> src/main.rs:73:5\r\n   |\r\n73 |     assert_eq!((1, 2).op(), 1.op());\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<{integer} as Specializer>::Specialized as SpecialzedTrait>::Out` cannot be formatted using `:?`; if it is defined in your crate, add `#[derive(Debug)]` or manually implement it\r\n   |\r\n   = help: the trait `std::fmt::Debug` is not implemented for `<<{integer} as Specializer>::Specialized as SpecialzedTrait>::Out`\r\n   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&<<{integer} as Specializer>::Specialized as SpecialzedTrait>::Out`\r\n   = note: required by `std::fmt::Debug::fmt`\r\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\r\n\r\nerror: aborting due to 4 previous errors\r\n\r\nerror: Could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\nI assume it's not evaluated because rustc thinks it *can* be specialized. But it can't be, because\r\n  - it's last crate\r\n  - it's not public\r\n\r\nTo make it not specializable, I tried auto trait like https://play.rust-lang.org/?gist=d4bbcd09ae0cd3044d2da9879fc489a0&version=nightly , but it doesn't work because `impl<A, B> !NotTuple for (A, B) {}` implies `!NotTuple` for any struct with `(A, B)`.\r\n\r\n```sh\r\nerror[E0277]: the trait bound `T: NotTuple` is not satisfied\r\n  --> src\\main.rs:80:9\r\n   |\r\n80 | impl<T> AssertAll for T {}\r\n   |         ^^^^^^^^^ the trait `NotTuple` is not implemented for `T`\r\n   |\r\n   = help: consider adding a `where T: NotTuple` bound\r\n   = note: required because of the requirements on the impl of `Specializer` for `T`\r\n   = note: required because of the requirements on the impl of `MyTrait` for `T`\r\n\r\nerror: aborting due to previous error\r\n\r\nerror: Could not compile `issue`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n\r\n```\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46707/timeline", "performed_via_github_app": null, "state_reason": null}