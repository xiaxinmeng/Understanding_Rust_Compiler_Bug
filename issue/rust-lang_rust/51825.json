{"url": "https://api.github.com/repos/rust-lang/rust/issues/51825", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51825/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51825/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51825/events", "html_url": "https://github.com/rust-lang/rust/issues/51825", "id": 336000054, "node_id": "MDU6SXNzdWUzMzYwMDAwNTQ=", "number": 51825, "title": "Lint warnings for \"unused #[must_use]\" should be emitted even if typeck fails.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-26T21:37:07Z", "updated_at": "2020-03-08T16:30:20Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "In a situation like this (feel free to suggest less contrived examples):\r\n```rust\r\n#[must_use]\r\nstruct Foo<T> {\r\n    text: String,\r\n    children: Vec<T>,\r\n}\r\n\r\nimpl<T> Foo<T> {\r\n    fn combine(mut self, other: Self) -> Self {\r\n        self.text.push_str(&other.text);\r\n        self.children.extend(other.children);\r\n        self\r\n    }\r\n}\r\n\r\nfn text<T>(text: impl Into<String>) -> Foo<T> {\r\n    Foo {\r\n        text: text.into(),\r\n        children: vec![],\r\n    }\r\n}\r\n\r\nfn bar<T>(mut foo: Foo<T>) -> Foo<T> {\r\n    if foo.text.is_empty() {\r\n        // Incomplete/incorrect code, #[must_use] should warn.\r\n        // However, we already have a type inference error.\r\n        text(\"bar\");\r\n        // Correct code:\r\n        foo = text(\"bar\").combine(foo);\r\n    }\r\n    foo\r\n}\r\n```\r\nBecause of the type-checking error caused by an uninferrable `T`, the `#[must_use]` lint never gets to run. But the fact that the return value isn't used is, in this case, quite relevant to the error.\r\n\r\nIf the `#[must_use]` lint is moved to typeck, it could run even on incomplete inference. Alternatively, the lint could stay independent, but somehow always run, even if typeck errored. The `test(\"bar\")` expression would need to have the type `Foo<_>` with the `_` being a `TyError`.\r\n\r\ncc @nikomatsakis @Manishearth ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51825/timeline", "performed_via_github_app": null, "state_reason": null}