{"url": "https://api.github.com/repos/rust-lang/rust/issues/43380", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43380/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43380/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43380/events", "html_url": "https://github.com/rust-lang/rust/issues/43380", "id": 244579485, "node_id": "MDU6SXNzdWUyNDQ1Nzk0ODU=", "number": 43380, "title": "`cannot relate bound region` when using `impl Trait`", "user": {"login": "lawliet89", "id": 983101, "node_id": "MDQ6VXNlcjk4MzEwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/983101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lawliet89", "html_url": "https://github.com/lawliet89", "followers_url": "https://api.github.com/users/lawliet89/followers", "following_url": "https://api.github.com/users/lawliet89/following{/other_user}", "gists_url": "https://api.github.com/users/lawliet89/gists{/gist_id}", "starred_url": "https://api.github.com/users/lawliet89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lawliet89/subscriptions", "organizations_url": "https://api.github.com/users/lawliet89/orgs", "repos_url": "https://api.github.com/users/lawliet89/repos", "events_url": "https://api.github.com/users/lawliet89/events{/privacy}", "received_events_url": "https://api.github.com/users/lawliet89/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-21T06:50:23Z", "updated_at": "2018-01-08T05:22:16Z", "closed_at": "2018-01-08T05:22:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I changed a signature of a function from returning a struct that implementing some trait `Responder`  to `impl Responder`, the compiler panicked. The panic stack trace is at the end of the post.\r\n\r\nCode that works:\r\n\r\n```toml\r\n[package]\r\nname = \"rustc-crash\"\r\nversion = \"0.1.0\"\r\n\r\n[dependencies]\r\nrocket = \"0.3\"\r\nrocket_codegen = \"0.3\"\r\n\r\n```\r\n\r\n```rust\r\n#![feature(plugin, custom_derive, conservative_impl_trait)]\r\n#![plugin(rocket_codegen)]\r\nextern crate rocket;\r\n\r\nuse rocket::State;\r\nuse rocket::response::Responder;\r\n\r\nstruct SomeState;\r\n\r\n/// This is OK\r\n#[get(\"/one\")]\r\nfn test_one() -> &'static str {\r\n    \"Hello world\"\r\n}\r\n\r\n/// This panics\r\n#[get(\"/\")]\r\nfn test_two(state: State<SomeState>) -> &'static str{\r\n    \"Hello world\"\r\n}\r\n\r\nfn main() {\r\n    rocket::ignite()\r\n        .mount(\r\n            \"/\",\r\n            routes![test_one, test_two],\r\n        )\r\n        .manage(SomeState)\r\n        .launch();\r\n}\r\n```\r\n\r\nCode that panics:\r\n\r\n```rust\r\n#![feature(plugin, custom_derive, conservative_impl_trait)]\r\n#![plugin(rocket_codegen)]\r\nextern crate rocket;\r\n\r\nuse rocket::State;\r\nuse rocket::response::Responder;\r\n\r\nstruct SomeState;\r\n\r\n/// This is OK\r\n#[get(\"/one\")]\r\nfn test_one<'r>() -> impl Responder<'r> {\r\n    \"Hello world\"\r\n}\r\n\r\n/// This panics\r\n#[get(\"/\")]\r\nfn test_two(state: State<SomeState>) -> impl Responder {\r\n    \"Hello world\"\r\n}\r\n\r\nfn main() {\r\n    rocket::ignite()\r\n        .mount(\r\n            \"/\",\r\n            routes![test_one, test_two],\r\n        )\r\n        .manage(SomeState)\r\n        .launch();\r\n}\r\n```\r\n\r\n## More information\r\n\r\nRocket.rs routes are any functions that returns something that implements the [`Responder` trait](https://api.rocket.rs/rocket/response/trait.Responder.html). The codegen plugin will wire the routes up via wrapper functions.\r\n\r\nConsider the snippet of [`cargo expand`](https://gist.github.com/lawliet89/790b63b7e43f7548e49ed0b7bf46f321) for the code above:\r\n\r\n```rust\r\n#[allow(unreachable_code)]\r\nfn rocket_route_fn_test_one<'_b>(\r\n    __req: &'_b ::rocket::Request,\r\n    __data: ::rocket::Data,\r\n) -> ::rocket::handler::Outcome<'_b> {\r\n    let responder = test_one();\r\n    ::rocket::handler::Outcome::from(__req, responder)\r\n}\r\n/// Rocket code generated static route information structure.\r\n#[allow(non_upper_case_globals)]\r\n#[rocket_route_info]\r\npub static static_rocket_route_info_for_test_one: ::rocket::StaticRouteInfo =\r\n    ::rocket::StaticRouteInfo {\r\n        method: ::rocket::http::Method::Get,\r\n        path: \"/one\",\r\n        handler: rocket_route_fn_test_one,\r\n        format: None,\r\n        rank: None,\r\n    };\r\n/// This is OK\r\n#[rocket_route(static_rocket_route_info_for_test_one)]\r\nfn test_one<'r>() -> impl Responder<'r> {\r\n    \"Hello world\"\r\n}\r\n```\r\n\r\nI suspect this might be because of the generated line `::rocket::handler::Outcome::from(__req, responder)`, which has [this](https://api.rocket.rs/rocket/handler/type.Outcome.html#method.from) signature.\r\n\r\nApologies that I don't know any more of rustc's internals to offer any more information.\r\n\r\nEDIT:\r\nIf I change the signature to `fn test_two<'r>(state: State<'r, SomeState>) -> impl Responder<'r>`, the code will compile.\r\n\r\nThis might be a duplicate of https://github.com/rust-lang/rust/issues/39872. Please feel free to close this if they are the same.\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\nrustc 1.20.0-nightly (ae98ebfcb 2017-07-20)\r\nbinary: rustc\r\ncommit-hash: ae98ebfcb9ad5a5384fd229a6ee91315b02ca969\r\ncommit-date: 2017-07-20\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.20.0-nightly\r\nLLVM version: 4.0\r\n\r\nBacktrace:\r\n\r\n```\r\n$ RUST_BACKTRACE=1 cargo test\r\n   Compiling rustc-crash v0.1.0 (file:///home/yongwen/work/scratch/rustc-crash)\r\nerror: internal compiler error: /checkout/src/librustc/infer/region_inference/mod.rs:706: cannot relate bound region: ReLateBound(DebruijnIndex { depth: 2 }, BrAnon(0)) <= '_#26r\r\n  --> src/main.rs:17:1\r\n   |\r\n17 | #[get(\"/\")]\r\n   | ^^^^^^^^^^^\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.20.0-nightly (ae98ebfcb 2017-07-20) running on x86_64-unknown-linux-gnu\r\n\r\nnote: run with `RUST_BACKTRACE=1` for a backtrace\r\n\r\nthread 'rustc' panicked at 'Box<Any>', /checkout/src/librustc_errors/lib.rs:437:8\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace\r\n             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::_print\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:71\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:60\r\n             at /checkout/src/libstd/panicking.rs:380\r\n   3: std::panicking::default_hook\r\n             at /checkout/src/libstd/panicking.rs:390\r\n   4: std::panicking::rust_panic_with_hook\r\n             at /checkout/src/libstd/panicking.rs:611\r\n   5: std::panicking::begin_panic_new\r\n   6: rustc_errors::Handler::span_bug\r\n   7: rustc::session::opt_span_bug_fmt::{{closure}}\r\n   8: rustc::session::opt_span_bug_fmt\r\n   9: rustc::session::span_bug_fmt\r\n  10: rustc::infer::region_inference::RegionVarBindings::make_subregion\r\n  11: rustc::infer::region_inference::RegionVarBindings::make_eqregion\r\n  12: rustc::ty::relate::relate_substs::{{closure}}\r\n  13: <<core::result::Result<V, E> as core::iter::traits::FromIterator<core::result::Result<A, E>>>::from_iter::Adapter<Iter, E> as core::iter::iterator::Iterator>::next\r\n  14: <core::result::Result<V, E> as core::iter::traits::FromIterator<core::result::Result<A, E>>>::from_iter\r\n  15: <core::result::Result<T, E> as rustc::ty::context::InternIteratorElement<T, R>>::intern_with\r\n  16: rustc::infer::at::At::sub_exp\r\n  17: rustc::traits::select::SelectionContext::match_projection\r\n  18: rustc::traits::select::SelectionContext::match_projection_obligation_against_definition_bounds\r\n  19: rustc::traits::select::SelectionContext::candidate_from_obligation_no_cache\r\n  20: rustc::dep_graph::graph::DepGraph::with_anon_task\r\n  21: rustc::traits::select::SelectionContext::candidate_from_obligation\r\n  22: rustc::traits::select::SelectionContext::select\r\n  23: <rustc::traits::fulfill::FulfillProcessor<'a, 'b, 'gcx, 'tcx> as rustc_data_structures::obligation_forest::ObligationProcessor>::process_obligation\r\n  24: rustc::traits::fulfill::FulfillmentContext::select\r\n  25: rustc::traits::fulfill::FulfillmentContext::select_where_possible\r\n  26: rustc_typeck::check::FnCtxt::select_obligations_where_possible\r\n  27: rustc_typeck::check::FnCtxt::check_argument_types\r\n  28: rustc_typeck::check::callee::<impl rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx>>::confirm_builtin_call\r\n  29: rustc_typeck::check::FnCtxt::check_expr_kind\r\n  30: rustc_typeck::check::FnCtxt::check_expr_with_expectation_and_lvalue_pref\r\n  31: rustc_typeck::check::FnCtxt::check_block_with_expected::{{closure}}\r\n  32: rustc_typeck::check::FnCtxt::check_block_with_expected\r\n  33: rustc_typeck::check::FnCtxt::check_expr_kind\r\n  34: rustc_typeck::check::FnCtxt::check_expr_with_expectation_and_lvalue_pref\r\n  35: rustc_typeck::check::FnCtxt::check_return_expr\r\n  36: rustc_typeck::check::check_fn\r\n  37: rustc_typeck::check::typeck_tables_of::{{closure}}\r\n  38: rustc_typeck::check::typeck_tables_of\r\n  39: rustc::dep_graph::graph::DepGraph::with_task\r\n  40: rustc::ty::maps::<impl rustc::ty::maps::queries::typeck_tables_of<'tcx>>::try_get\r\n  41: rustc::ty::maps::TyCtxtAt::typeck_tables_of\r\n  42: rustc::ty::maps::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::typeck_tables_of\r\n  43: rustc_typeck::check::typeck_item_bodies\r\n  44: rustc::dep_graph::graph::DepGraph::with_task\r\n  45: rustc::ty::maps::<impl rustc::ty::maps::queries::typeck_item_bodies<'tcx>>::try_get\r\n  46: rustc::ty::maps::TyCtxtAt::typeck_item_bodies\r\n  47: rustc::ty::maps::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::typeck_item_bodies\r\n  48: rustc_typeck::check_crate\r\n  49: rustc_driver::driver::phase_3_run_analysis_passes::{{closure}}\r\n  50: rustc_driver::driver::phase_3_run_analysis_passes\r\n  51: rustc_driver::driver::compile_input\r\n  52: rustc_driver::run_compiler\r\n\r\nerror: Could not compile `rustc-crash`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n```", "closed_by": {"login": "lawliet89", "id": 983101, "node_id": "MDQ6VXNlcjk4MzEwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/983101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lawliet89", "html_url": "https://github.com/lawliet89", "followers_url": "https://api.github.com/users/lawliet89/followers", "following_url": "https://api.github.com/users/lawliet89/following{/other_user}", "gists_url": "https://api.github.com/users/lawliet89/gists{/gist_id}", "starred_url": "https://api.github.com/users/lawliet89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lawliet89/subscriptions", "organizations_url": "https://api.github.com/users/lawliet89/orgs", "repos_url": "https://api.github.com/users/lawliet89/repos", "events_url": "https://api.github.com/users/lawliet89/events{/privacy}", "received_events_url": "https://api.github.com/users/lawliet89/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43380/timeline", "performed_via_github_app": null, "state_reason": "completed"}