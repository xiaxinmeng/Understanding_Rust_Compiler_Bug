{"url": "https://api.github.com/repos/rust-lang/rust/issues/112488", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112488/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112488/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112488/events", "html_url": "https://github.com/rust-lang/rust/issues/112488", "id": 1750930723, "node_id": "I_kwDOAAsO6M5oXRUj", "number": 112488, "title": "`std::env::args` panics on rustc >= 1.69.0 in `armv7-unknown-linux-gnueabihf` with uClibc", "user": {"login": "daniestevez", "id": 15093841, "node_id": "MDQ6VXNlcjE1MDkzODQx", "avatar_url": "https://avatars.githubusercontent.com/u/15093841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniestevez", "html_url": "https://github.com/daniestevez", "followers_url": "https://api.github.com/users/daniestevez/followers", "following_url": "https://api.github.com/users/daniestevez/following{/other_user}", "gists_url": "https://api.github.com/users/daniestevez/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniestevez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniestevez/subscriptions", "organizations_url": "https://api.github.com/users/daniestevez/orgs", "repos_url": "https://api.github.com/users/daniestevez/repos", "events_url": "https://api.github.com/users/daniestevez/events{/privacy}", "received_events_url": "https://api.github.com/users/daniestevez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2023-06-10T11:30:10Z", "updated_at": "2023-06-12T16:02:43Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I'm building Rust code for an embedded armv7 system that uses uClibc. I'm using the target `armv7-unknown-linux-gnueabihf`. Maybe I should use the tier 3 target [`armv7-unknown-linux-uclibceabihf`](https://doc.rust-lang.org/nightly/rustc/platform-support/armv7-unknown-linux-uclibceabihf.html), but `armv7-unknown-linux-gnueabihf` works well besides the problem I'm reporting here.\r\n\r\nApparently, `std::env::args` handling with `armv7-unknown-linux-gnueabihf` and uClibc is broken, but it is broken in a worse way starting in rustc 1.69.0. I'm testing the following code:\r\n\r\n```rust\r\nfn main() {\r\n    println!(\"calling std::env::args_os()\");\r\n    let _ = std::env::args_os();\r\n    println!(\"call succeeded\");\r\n    println!(\"std::env::args() = {:?}\", std::env::args().collect::<Vec<_>>());\r\n}\r\n```\r\n\r\nWith rustc 1.68.2 or lower, `std::env::args` always returns an empty iterator regardless of the number of arguments that are used to run the program.\r\n\r\n```\r\n# RUST_BACKTRACE=1 ./test-args 0 1 2\r\ncalling std::env::args_os()\r\ncall succeeded\r\nstd::env::args() = []\r\n```\r\n\r\nHowever, starting with rustc 1.69.0, even calling `std::env::arg_os` panics.\r\n\r\n```\r\n# RUST_BACKTRACE=1 ./test-args 0 1 2\r\ncalling std::env::args_os()\r\nthread 'main' panicked at 'capacity overflow', library/alloc/src/raw_vec.rs:525:5\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/panicking.rs:579:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/core/src/panicking.rs:64:14\r\n   2: alloc::raw_vec::capacity_overflow\r\n             at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/alloc/src/raw_vec.rs:525:5\r\n   3: alloc::raw_vec::RawVec<T,A>::allocate_in\r\n   4: alloc::raw_vec::RawVec<T,A>::with_capacity_in\r\n             at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/alloc/src/raw_vec.rs:131:9\r\n   5: alloc::vec::Vec<T,A>::with_capacity_in\r\n             at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/alloc/src/vec/mod.rs:676:20\r\n   6: alloc::vec::Vec<T>::with_capacity\r\n             at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/alloc/src/vec/mod.rs:483:9\r\n   7: std::sys::unix::args::imp::clone\r\n             at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/sys/unix/args.rs:145:28\r\n   8: std::sys::unix::args::imp::args\r\n             at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/sys/unix/args.rs:130:22\r\n   9: std::sys::unix::args::args\r\n             at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/sys/unix/args.rs:19:5\r\n  10: std::env::args_os\r\n             at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/env.rs:799:21\r\n  11: test_args::main\r\n             at /project/src/main.rs:3:13\r\n  12: core::ops::function::FnOnce::call_once\r\n             at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/core/src/ops/function.rs:250:5\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\nI think the difference is cause by https://github.com/rust-lang/rust/commit/e97203c3f893893611818997bbeb0116ded2605f. I haven't done more debugging, but this leads me to believe that somehow the atomic variable `ARGC` ends up having a negative value. Before this change, the range `(0..argc)` would be empty, causing an empty iterator to be returned always, while after this change, `Vec::with_capacity(argc as usize)` will panic because `argc as usize` will be a huge number.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112488/timeline", "performed_via_github_app": null, "state_reason": null}