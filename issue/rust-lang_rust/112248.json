{"url": "https://api.github.com/repos/rust-lang/rust/issues/112248", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112248/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112248/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112248/events", "html_url": "https://github.com/rust-lang/rust/issues/112248", "id": 1739679611, "node_id": "I_kwDOAAsO6M5nsWd7", "number": 112248, "title": "Type inference fails with `adt_const_params` and `const_generic_exprs` for associated types", "user": {"login": "Tehforsch", "id": 4614215, "node_id": "MDQ6VXNlcjQ2MTQyMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4614215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tehforsch", "html_url": "https://github.com/Tehforsch", "followers_url": "https://api.github.com/users/Tehforsch/followers", "following_url": "https://api.github.com/users/Tehforsch/following{/other_user}", "gists_url": "https://api.github.com/users/Tehforsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tehforsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tehforsch/subscriptions", "organizations_url": "https://api.github.com/users/Tehforsch/orgs", "repos_url": "https://api.github.com/users/Tehforsch/repos", "events_url": "https://api.github.com/users/Tehforsch/events{/privacy}", "received_events_url": "https://api.github.com/users/Tehforsch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}, {"id": 3313407404, "node_id": "MDU6TGFiZWwzMzEzNDA3NDA0", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-adt_const_params", "name": "F-adt_const_params", "color": "f9c0cc", "default": false, "description": "`#![feature(adt_const_params)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-06-03T16:57:59Z", "updated_at": "2023-06-04T03:30:04Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nSorry for the long example, but it is the shortest that I could come up with that reproduces the bug:\r\n\r\n```rust\r\n#![allow(incomplete_features)]\r\n#![feature(generic_const_exprs, adt_const_params)]\r\n\r\nuse std::{marker::ConstParamTy, ops::Add};\r\n\r\n#[derive(ConstParamTy, PartialEq, Eq)]\r\npub struct Value(i32);\r\n\r\n#[derive(Clone, Copy)]\r\npub struct MyType<const D: Value>;\r\n\r\nimpl Value {\r\n    pub const fn add(self, other: Self) -> Self {\r\n        Self(self.0 + other.0)\r\n    }\r\n}\r\n\r\nimpl<const DL: Value, const DR: Value> std::ops::Add<MyType<DR>> for MyType<DL>\r\nwhere\r\n    MyType<{ DL.add(DR) }>:,\r\n{\r\n    type Output = MyType<{ DL.add(DR) }>;\r\n\r\n    fn add(self, _: MyType<DR>) -> Self::Output {\r\n        MyType\r\n    }\r\n}\r\n\r\npub type One = MyType<{ Value(1) }>;\r\npub type Two = MyType<{ Value(2) }>;\r\n\r\nfn foo(one: One) -> <One as Add<Two>>::Output {\r\n    let two = one + one;\r\n    one + two\r\n}\r\n\r\nfn foo_annotated(one: One) -> <One as Add<Two>>::Output {\r\n    let two: Two = one + one;\r\n    one + two\r\n}\r\n```\r\n\r\nI expected both `foo` and `foo_annotated` to compile, but only `foo_annotated` compiles. `foo` fails to compile with:\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:36:5\r\n   |\r\n36 |     one + two\r\n   |     ^^^^^^^^^ expected `Value(2)`, found `{const expr}`\r\n   |\r\n   = note: expected constant `Value(2)`\r\n              found constant `{const expr}`\r\n```\r\n\r\n`foo` compiles correctly if any of the following changes are made:\r\n1. `Value` is replaced by an `i32` everywhere (which removes the dependency on `adt_const_params`)\r\n2. The return type of `foo` is specified directly as `MyType { Value(3) }`\r\n3. A different, simpler expression is used:\r\n```\r\nfn foo(one: One) -> <One as Add<One>>::Output {\r\n    one + one\r\n}\r\n```\r\n\r\nI didn't find anything in my search through the issues, so I hope this isn't a duplicate.\r\nTotally not a critical bug but it would be nice if the compiler could infer the type of the expression correctly. Currently, any expression involving more than a few inferred types seems to require an annotation.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.72.0-nightly (dd5d7c729 2023-06-02)\r\nbinary: rustc\r\ncommit-hash: dd5d7c729d4e8a59708df64002e09dbcbc4005ba\r\ncommit-date: 2023-06-02\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.72.0-nightly\r\nLLVM version: 16.0.4\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nCompiling comptest v0.1.0 (/home/toni/projects/comptest)\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:36:5\r\n   |\r\n36 |     one + two\r\n   |     ^^^^^^^^^ expected `Value(2)`, found `{const expr}`\r\n   |\r\n   = note: expected constant `Value(2)`\r\n              found constant `{const expr}`\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `comptest` (bin \"main\") due to previous error\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112248/timeline", "performed_via_github_app": null, "state_reason": null}