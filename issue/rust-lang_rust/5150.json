{"url": "https://api.github.com/repos/rust-lang/rust/issues/5150", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/5150/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/5150/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/5150/events", "html_url": "https://github.com/rust-lang/rust/issues/5150", "id": 11476779, "node_id": "MDU6SXNzdWUxMTQ3Njc3OQ==", "number": 5150, "title": "RFC: Slab allocator library for sendable data structures with circular links", "user": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-02-27T21:54:35Z", "updated_at": "2013-04-10T17:24:52Z", "closed_at": "2013-04-10T17:24:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Stop me if you've heard this before.\n\nIt is currently a problem that you cannot implement any data structure with circular/backwards/parent pointers and have its type be sendable. I believe `dlist` is the only circularly-linked data structure we have, and it uses @-pointers, but someday we will need grown-up data structures too.\n\nMotivating example: Let's say I'm writing a multithreaded proxy server that wants to share an LRU cache among its threads (using an `RWARC`). Nodes in the LRU will be on a binary search tree, for quick lookup by-key, and also on a linked list of access recency, for quick eviction. So we need backward-pointers all over the place, but can't use & or @.\n\nWhat if we replaced pointers with indexes into a slab of memory? Instead of `Option<@Node>` for a possibly-null pointer, the data structure programmer would use `Option<uint>`. The slab library would basically replace the dynamic allocator (but could only allocate for one type, of course).\n\nThe slab library would be implemented like this:\n\n```\nstruct Slab<T> {\n    mem: ~[SlabSlot<T>],\n    freeslots: ~[uint],\n}\nstruct SlabSlot<T> {\n    generation: uint,  // for checking use-after-free\n    data: Option<T>,\n}\nstruct SlabPtr {\n    generation: uint,  // check against above\n    index: uint,\n}\n\nfn allocate(&mut Slab<T>) -> SlabPtr  // O(1)\nfn free(&mut Slab<T>, SlabPtr)        // O(1)\nfn get(&a/Slab<T>, SlabPtr) -> &a/T   // O(1), might fail\nfn set(&mut Slab<T>, SlabPtr, T)      // O(1), might fail\n```\n\nThen, for example, my LRU could be implemented as:\n\n```\nstruct LRU<T> {\n    nodes: Slab<LRUNode<T>>,\n    key_root:         Option<SlabPtr>,\n    access_list_head: Option<SlabPtr>,\n    access_list_tail: Option<SlabPtr>,\n}\nstruct LRUNode<T> {\n    data: T\n    key_tree_parent:  Option<SlabPtr>,\n    key_tree_left:    Option<SlabPtr>,\n    key_tree_right:   Option<SlabPtr>,\n    access_list_prev: Option<SlabPtr>,\n    access_list_next: Option<SlabPtr>,\n}\n```\n\nThis makes programming the data structure a lot less pretty/easy, but I think it's important to have a rich collection of data structures that can be shared (whether mutably or immutably) among tasks while also providing good runtime guarantees.\n\nNotable downsides:\n- In a sense this is just a \"virtual machine\" for a \"language\" with unsafe pointers, since the slab library needs to dynamically check for invalid/use-after-free accesses. I consider this analogous to the way we use literally `unsafe` code to implement other sorts of data structures -- an unfortunate but necessary sacrifice.\n- The slab library cannot support any form of compaction, since it has no control over where the user stores its \"pointers\", so a slab's memory footprint will be forever as big as the maximum number of elements ever allocated at once. This doesn't necessarily mean it _leaks_ memory (allocating always checks the freelist first), but it might make it weird if you e.g. have a bunch of persistent data structures that you shuffle all of your elements between.\n", "closed_by": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/5150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/5150/timeline", "performed_via_github_app": null, "state_reason": "completed"}