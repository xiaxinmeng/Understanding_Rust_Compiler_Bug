{"url": "https://api.github.com/repos/rust-lang/rust/issues/101209", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101209/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101209/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101209/events", "html_url": "https://github.com/rust-lang/rust/issues/101209", "id": 1356066611, "node_id": "I_kwDOAAsO6M5Q0-8z", "number": 101209, "title": "`x86_64-unknown-none` uses code-model kernel but statically linking code to high address results in \"relocation R_X86_64_32 out of range\"", "user": {"login": "phip1611", "id": 5737016, "node_id": "MDQ6VXNlcjU3MzcwMTY=", "avatar_url": "https://avatars.githubusercontent.com/u/5737016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phip1611", "html_url": "https://github.com/phip1611", "followers_url": "https://api.github.com/users/phip1611/followers", "following_url": "https://api.github.com/users/phip1611/following{/other_user}", "gists_url": "https://api.github.com/users/phip1611/gists{/gist_id}", "starred_url": "https://api.github.com/users/phip1611/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phip1611/subscriptions", "organizations_url": "https://api.github.com/users/phip1611/orgs", "repos_url": "https://api.github.com/users/phip1611/repos", "events_url": "https://api.github.com/users/phip1611/events{/privacy}", "received_events_url": "https://api.github.com/users/phip1611/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-08-30T17:08:02Z", "updated_at": "2022-09-06T19:09:09Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I'm developing a kernel with Rust and wanted to use the built-in `x86_64-unknown-none` compiler target. This target uses the [\"kernel\" code model](https://github.com/rust-lang/rust/blob/1.63.0/compiler/rustc_target/src/spec/x86_64_unknown_none.rs#L30) of the System V ABI. However, when I link the code statically (`-C relocation-model=static`) to `0xffffffff88000000`, i.e., in the range specified by the kernel code model in System V ABI, Rust says \"relocation R_X86_64_32 out of range\".\r\n\r\n~In https://github.com/rust-lang/rust/issues/70992 I found that the problem perhaps is the way libcore was pre-compiled.  [Since Rust 1.62](https://github.com/rust-lang/rust/pull/95705/) `x86_64-unknown-none` is a Tier 2 target which means that libcore is pre-compiled and delivered via Rustup. If I switch back from the built-in compiler target and compile libcore with the `build-std` functionality of Cargo, it doesn't work either.~\r\n\r\n~**UPDATE** When I use `build-std` to cross-compile the libcore with `RUSTFLAGS=\"-C code-model=kernel\" cargo build`, it builds. But right know the object file contains no code. This could be another error on my side, however.~\r\n\r\n~So I guess here is a bug. If the target is intended to be used with the kernel code-model, it should also be allowed to link to such an address.~\r\n\r\n~**UPDATE 2** When I use the built-in target `x86_64-unknown-none` but invoke the build with `RUSTFLAGS=\"-C code-model=kernel\" cargo build` then it works too. However.. is this intended? Is it a bug?~\r\n\r\nI figured out that if I invoke Cargo with `\"RUSTFLAGS=-C code-model=kernel -C link-arg=-Tlink.ld -C relocation-model=static\" cargo build`, the code is linked to the right position in the upper half of the address space. The build succeeeds. However, if I specify those options in `.cargo/config.toml`, it doesn't work. **Is this how it is supposed to work?** Shouldn't it work out of the box?\r\n\r\nI created a repository that shows a working example with the \"workaround\": https://github.com/phip1611/rust-kernel-x86_64-static-link-code-model-kernel\r\n\r\n### Meta\r\nI'm using 1.65.0-nightly.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101209/timeline", "performed_via_github_app": null, "state_reason": null}