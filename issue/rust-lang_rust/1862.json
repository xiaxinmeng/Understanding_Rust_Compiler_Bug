{"url": "https://api.github.com/repos/rust-lang/rust/issues/1862", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/1862/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/1862/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/1862/events", "html_url": "https://github.com/rust-lang/rust/issues/1862", "id": 3263174, "node_id": "MDU6SXNzdWUzMjYzMTc0", "number": 1862, "title": "rustc should support compiling C code", "user": {"login": "thoughtpolice", "id": 3416, "node_id": "MDQ6VXNlcjM0MTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thoughtpolice", "html_url": "https://github.com/thoughtpolice", "followers_url": "https://api.github.com/users/thoughtpolice/followers", "following_url": "https://api.github.com/users/thoughtpolice/following{/other_user}", "gists_url": "https://api.github.com/users/thoughtpolice/gists{/gist_id}", "starred_url": "https://api.github.com/users/thoughtpolice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thoughtpolice/subscriptions", "organizations_url": "https://api.github.com/users/thoughtpolice/orgs", "repos_url": "https://api.github.com/users/thoughtpolice/repos", "events_url": "https://api.github.com/users/thoughtpolice/events{/privacy}", "received_events_url": "https://api.github.com/users/thoughtpolice/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36956, "node_id": "MDU6TGFiZWwzNjk1Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-frontend", "name": "A-frontend", "color": "f7e101", "default": false, "description": "Area: frontend (errors, parsing and HIR)"}, {"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2012-02-17T04:57:05Z", "updated_at": "2014-05-15T11:05:08Z", "closed_at": "2013-05-13T15:04:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The metaticket is #1850.\n\nSummary: rustc should provide some external means of compiling C files as part of a crate, and referring to it later. Two possible options are:\n\n1) Just make `rustc` accept `.c` files and compile them appropriately.\n\n2) Add an `external` attribute that describes a set of `.c` files and other options that a crate depends on.\n\nI am a fan of 2, particularly because I think it could go well with `#[cfg]` and it means the rustc driver doesn't have to do stuff like throw options at the C compiler or something.\n\nSo I have `foo.rc`, that has some modules, but I can say:\n\n```\n#[external(c_src=\"foo.cc ...\",\n                 cc_opts=\"-DOMG_HAX\")]\n\n#[cfg(target_os = \"win32\")]\n#[external(cc_opts=\"-DPLATFORM_WIN32\")]\n...\n```\n\nThis makes it easy to compile a lot of C code directly inline with the crate. rustc just handles it in the backend. I feel this is the right approach since `rustc` may also be aware of other necessary flags, like if you should compile the `.c` files with `-fPIC` or not.\n\nFurthermore, according to @brson in #1850, native modules do not strictly have to refer to shared libraries, and instead can use `nolink` as an attribute. I haven't tried, but perhaps right now it might look like:\n\n```\n#[nolink]\nnative mod glue {\n  fn c_foo_bar(baz: *u8, quux: uint);\n}\n```\n\nwhere `c_foo_bar` is the externally visible symbol name, that refers to part of the C code you're compiling. Alternatively the module declaration could have some other attribute; I'm not sure if `nolink` seems to make a lot of sense considering this is a clear use case, but it's not a huge deal here.\n\nThoughts?\n", "closed_by": {"login": "metajack", "id": 28357, "node_id": "MDQ6VXNlcjI4MzU3", "avatar_url": "https://avatars.githubusercontent.com/u/28357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/metajack", "html_url": "https://github.com/metajack", "followers_url": "https://api.github.com/users/metajack/followers", "following_url": "https://api.github.com/users/metajack/following{/other_user}", "gists_url": "https://api.github.com/users/metajack/gists{/gist_id}", "starred_url": "https://api.github.com/users/metajack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/metajack/subscriptions", "organizations_url": "https://api.github.com/users/metajack/orgs", "repos_url": "https://api.github.com/users/metajack/repos", "events_url": "https://api.github.com/users/metajack/events{/privacy}", "received_events_url": "https://api.github.com/users/metajack/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/1862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/1862/timeline", "performed_via_github_app": null, "state_reason": "completed"}