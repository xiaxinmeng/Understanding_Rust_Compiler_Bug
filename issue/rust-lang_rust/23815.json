{"url": "https://api.github.com/repos/rust-lang/rust/issues/23815", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/23815/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/23815/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/23815/events", "html_url": "https://github.com/rust-lang/rust/issues/23815", "id": 64983530, "node_id": "MDU6SXNzdWU2NDk4MzUzMA==", "number": 23815, "title": "read_to_end unintuitive performance.", "user": {"login": "blackbeam", "id": 155883, "node_id": "MDQ6VXNlcjE1NTg4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/155883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blackbeam", "html_url": "https://github.com/blackbeam", "followers_url": "https://api.github.com/users/blackbeam/followers", "following_url": "https://api.github.com/users/blackbeam/following{/other_user}", "gists_url": "https://api.github.com/users/blackbeam/gists{/gist_id}", "starred_url": "https://api.github.com/users/blackbeam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blackbeam/subscriptions", "organizations_url": "https://api.github.com/users/blackbeam/orgs", "repos_url": "https://api.github.com/users/blackbeam/repos", "events_url": "https://api.github.com/users/blackbeam/events{/privacy}", "received_events_url": "https://api.github.com/users/blackbeam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-03-28T20:25:26Z", "updated_at": "2015-03-29T22:39:53Z", "closed_at": "2015-03-29T22:39:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Performance problem in `read_to_end` was uncovered with PR #23668.\nThe reason is that in case of data to read equals vec's capacity, `read_to_end` anyway will reserve (and with #23668 will initialize) another 64KB in vec just to read nothing to it because of lack of any other way to get a EOF hint from `Read` implementor.\n\nSimple illustration:\n\n``` rust\n#![feature(test)]\nextern crate test;\nuse std::io::Read;\n\n#[bench]\nfn read_to_end_1024_to_1024(b: &mut test::Bencher) {\n    let buf = [1u8; 1024];\n    let mut src = &buf[..];\n    let mut dst = Vec::with_capacity(1024);\n    b.iter(|| {\n        test::black_box(src.read_to_end(&mut dst))\n    });\n}\n\n#[bench]\nfn read_to_end_1024_to_1025(b: &mut test::Bencher) {\n    let buf = [1u8; 1024];\n    let mut src = &buf[..];\n    let mut dst = Vec::with_capacity(1025);\n    b.iter(|| {\n        test::black_box(src.read_to_end(&mut dst))\n    });\n}\n```\n\nResult:\n\n``` rust\n// Opt 0\nrunning 2 tests\ntest read_to_end_1024_to_1024 ... bench:   9033646 ns/iter (+/- 456609)\ntest read_to_end_1024_to_1025 ... bench:       488 ns/iter (+/- 24)\n\n// Opt 3\nrunning 2 tests\ntest read_to_end_1024_to_1024 ... bench:    105434 ns/iter (+/- 3655)\ntest read_to_end_1024_to_1025 ... bench:        13 ns/iter (+/- 1)\n```\n\n**Edit:**\nSame with no initialization:\n\n``` rust\n// Opt 0\nrunning 2 tests\ntest read_to_end_1024_to_1024 ... bench:       375 ns/iter (+/- 8)\ntest read_to_end_1024_to_1025 ... bench:       387 ns/iter (+/- 16)\n\n// Opt 3\nrunning 2 tests\ntest read_to_end_1024_to_1024 ... bench:        16 ns/iter (+/- 1)\ntest read_to_end_1024_to_1025 ... bench:        16 ns/iter (+/- 1)\n```\n", "closed_by": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/23815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/23815/timeline", "performed_via_github_app": null, "state_reason": "completed"}