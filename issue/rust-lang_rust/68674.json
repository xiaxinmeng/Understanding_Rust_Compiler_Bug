{"url": "https://api.github.com/repos/rust-lang/rust/issues/68674", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68674/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68674/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68674/events", "html_url": "https://github.com/rust-lang/rust/issues/68674", "id": 557597115, "node_id": "MDU6SXNzdWU1NTc1OTcxMTU=", "number": 68674, "title": "RUST_BACKTRACE=1 incorrectly reports _main as the name of the symbol before _main in the binary", "user": {"login": "roy-work", "id": 53838718, "node_id": "MDQ6VXNlcjUzODM4NzE4", "avatar_url": "https://avatars.githubusercontent.com/u/53838718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roy-work", "html_url": "https://github.com/roy-work", "followers_url": "https://api.github.com/users/roy-work/followers", "following_url": "https://api.github.com/users/roy-work/following{/other_user}", "gists_url": "https://api.github.com/users/roy-work/gists{/gist_id}", "starred_url": "https://api.github.com/users/roy-work/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roy-work/subscriptions", "organizations_url": "https://api.github.com/users/roy-work/orgs", "repos_url": "https://api.github.com/users/roy-work/repos", "events_url": "https://api.github.com/users/roy-work/events{/privacy}", "received_events_url": "https://api.github.com/users/roy-work/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-30T16:10:59Z", "updated_at": "2020-05-14T14:54:46Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The last / earliest frame in a `RUST_BACKTRACE=1` output is named incorrectly; it appears the correct name should be `_main` or `main`, but the symbol I get is always whatever symbol precedes `_main` in the actual binary.\r\n\r\nNote that I'm referring to the low-level entrypoint of the binary, not the `fn main()` that the user writes. That `fn main()` also appears in the trace, in the correct place and named correctly, but it is not the last frame, as several other frames precede it, which is the Rust runtime setting itself up. \r\n\r\nFor example, if I run my current project with `RUST_BACKTRACE=1`, it panics.\r\n\r\n(the actual cause of the panic is my fault; this bug is only about the output that `RUST_BACKTRACE` emits after that crash)\r\n\r\nWe get<sup>1</sup>:\r\n```\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: NamedSubprocessError { subprocess_name: \"ssh\", error: Failed(1) }', src/libcore/result.rs:1165:5\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:77\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:61\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1028\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1412\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:65\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:50\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:188\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:205\r\n  10: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:464\r\n  11: std::panicking::continue_panic_fmt\r\n             at src/libstd/panicking.rs:373\r\n  12: rust_begin_unwind\r\n             at src/libstd/panicking.rs:302\r\n  13: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:139\r\n  14: core::result::unwrap_failed\r\n             at src/libcore/result.rs:1165\r\n  15: core::result::Result<T,E>::unwrap\r\n             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libcore/result.rs:933\r\n  16: project_name::main\r\n             at [snip]/src/main.rs:139\r\n  17: std::rt::lang_start::{{closure}}\r\n             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libstd/rt.rs:61\r\n  18: std::rt::lang_start_internal::{{closure}}\r\n             at src/libstd/rt.rs:48\r\n  19: std::panicking::try::do_call\r\n             at src/libstd/panicking.rs:287\r\n  20: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:78\r\n  21: std::panicking::try\r\n             at src/libstd/panicking.rs:265\r\n  22: std::panic::catch_unwind\r\n             at src/libstd/panic.rs:396\r\n  23: std::rt::lang_start_internal\r\n             at src/libstd/rt.rs:47\r\n  24: std::rt::lang_start\r\n             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libstd/rt.rs:61\r\n  25: <project_name::_IMPL_DESERIALIZE_FOR_NameOfAStructThatImpsDeserialize::<impl serde::de::Deserialize for project_name::NameOfAStructThatImpsDeserialize>::deserialize::__Visitor as serde::de::Visitor>::expecting\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\nNote these frames in particular:\r\n```\r\n  16: project_name::main\r\n             at [snip]/src/main.rs:139\r\n  17: std::rt::lang_start::{{closure}}\r\n             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libstd/rt.rs:61\r\n  24: std::rt::lang_start\r\n             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libstd/rt.rs:61\r\n  25: <project_name::_IMPL_DESERIALIZE_FOR_NameOfAStructThatImpsDeserialize::<impl serde::de::Deserialize for project_name::NameOfAStructThatImpsDeserialize>::deserialize::__Visitor as serde::de::Visitor>::expecting\r\n```\r\nThat is, my `fn main()` is being called by `lang_start`; that's expected. `lang_start` is being called by \u2026 a serde derive? That's not expected.\r\n\r\nIf I run this in `lldb`, and put a breakpoint: `(lldb) b core::panicking::panic_fmt`, and then it pauses. `lldb` does not appear confused about where we are, and shows this frame as:\r\n```\r\n(lldb) up\r\nframe #12: 0x000000010000cb02 project-name`std::rt::lang_start::he84252c74d1ae0a2(main=(project-name`project_name::main::hf1a57fdc1eddf2ac at main.rs:53), argc=13, argv=0x00007ffeefbff078) at rt.rs:61:4\r\n(lldb) up\r\nframe #13: 0x000000010000a832 project-name`main + 34\r\n```\r\n\r\nSo, LLDB seems to think that frame is `main` (and that's a C name, not a Rust name). Reasonable if it is the entrypoint to the binary.\r\n\r\nAnd if we do some disassesmbly:\r\n```\r\n(lldb) disassemble --frame\r\nproject-name`main:\r\n    0x10000a810 <+0>:  pushq  %rbp\r\n    0x10000a811 <+1>:  movq   %rsp, %rbp\r\n    0x10000a814 <+4>:  subq   $0x10, %rsp\r\n    0x10000a818 <+8>:  movslq %edi, %rax\r\n    0x10000a81b <+11>: leaq   -0x6112(%rip), %rdi       ; project_name::main::hf1a57fdc1eddf2ac at main.rs:53\r\n    0x10000a822 <+18>: movq   %rsi, -0x8(%rbp)\r\n    0x10000a826 <+22>: movq   %rax, %rsi\r\n    0x10000a829 <+25>: movq   -0x8(%rbp), %rdx\r\n    0x10000a82d <+29>: callq  0x10000cac0               ; std::rt::lang_start::he84252c74d1ae0a2 at rt.rs:58\r\n->  0x10000a832 <+34>: addq   $0x10, %rsp\r\n    0x10000a836 <+38>: popq   %rbp\r\n    0x10000a837 <+39>: retq\r\n```\r\nThis is sort of what I expect for an entrypoint: we load the address of my `fn main`, and call into `lang_start`; this is definitely a binary entrypoint.\r\n\r\nHere, we're suspecting that `RUST_BACKTRACE=1` is just choosing some other symbol name for the frame. If we disassemble more of the binary:\r\n\r\n```\r\n__ZN207_$LT$project_name.._IMPL_DESERIALIZE_FOR_NameOfAStructThatImpsDeserialize..$LT$impl$u20$serde..de..Deserialize$u20$for$u20$project_name..NameOfAStructThatImpsDeserialize$GT$..deserialize..__Visitor$u20$as$u20$serde..de..Visitor$GT$9expecting17he4cce3311b14248cE:\r\n000000010000a7d0        pushq   %rbp\r\n000000010000a7d1        movq    %rsp, %rbp\r\n000000010000a7d4        subq    $0x20, %rsp\r\n000000010000a7d8        leaq    0x47555f(%rip), %rax\r\n000000010000a7df        movq    %rdi, -0x10(%rbp)\r\n000000010000a7e3        movq    %rsi, -0x8(%rbp)\r\n000000010000a7e7        movq    -0x8(%rbp), %rdi\r\n000000010000a7eb        movq    %rax, %rsi\r\n000000010000a7ee        movl    $0x19, %edx\r\n000000010000a7f3        callq   __ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17h68360bed214ad6ccE ## _$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$::write_str::h68360bed214ad6cc\r\n000000010000a7f8        movb    %al, -0x11(%rbp)\r\n000000010000a7fb        movb    -0x11(%rbp), %al\r\n000000010000a7fe        andb    $0x1, %al\r\n000000010000a800        movzbl  %al, %eax\r\n000000010000a803        addq    $0x20, %rsp\r\n000000010000a807        popq    %rbp\r\n000000010000a808        retq\r\n000000010000a809        nopl    (%rax)\r\n_main:\r\n000000010000a810        pushq   %rbp\r\n000000010000a811        movq    %rsp, %rbp\r\n000000010000a814        subq    $0x10, %rsp\r\n000000010000a818        movslq  %edi, %rax\r\n000000010000a81b        leaq    __ZN14project_name4main17hf1a57fdc1eddf2acE(%rip), %rdi ## project_name::main::hf1a57fdc1eddf2ac\r\n000000010000a822        movq    %rsi, -0x8(%rbp)\r\n000000010000a826        movq    %rax, %rsi\r\n000000010000a829        movq    -0x8(%rbp), %rdx\r\n000000010000a82d        callq   __ZN3std2rt10lang_start17he84252c74d1ae0a2E ## std::rt::lang_start::he84252c74d1ae0a2\r\n000000010000a832        addq    $0x10, %rsp\r\n000000010000a836        popq    %rbp\r\n000000010000a837        retq\r\n000000010000a838        nop\r\n000000010000a839        nop\r\n000000010000a83a        nop\r\n000000010000a83b        nop\r\n000000010000a83c        nop\r\n```\r\n\r\nHere, we can see that the weird symbol that `RUST_BACKTRACE=1` outputs does sort of correlate with the entrypoint: it's the symbol immediately before `_main` (`main` in LLDB). So, if `RUST_BACKTRACE=1` is ignoring non-Rust symbols when it figures out what to print\u2026 then that would explain why that frame is wrong.\r\n\r\nA minimal example suffices as well:\r\n```rust\r\nuse std::io;\r\n\r\nfn main() {\r\n    Err(io::Error::new(io::ErrorKind::InvalidData, \"error\")).unwrap()\r\n}\r\n```\r\n\r\nAnd a minimal `Cargo.toml`:\r\n```toml\r\n[package]\r\nname = \"the_crate_name\"\r\nversion = \"0.0.1\"\r\nedition = \"2018\"\r\n```\r\n\r\n```\r\n\u00bb RUST_BACKTRACE=1 cargo run\r\n   Compiling the_crate_name v0.0.1 (/Users/roy/code/random/bt2)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 1.19s\r\n     Running `target/debug/the_crate_name`\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Custom { kind: InvalidData, error: \"error\" }', src/libcore/result.rs:1165:5\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:77\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:61\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1028\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1412\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:65\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:50\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:188\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:205\r\n  10: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:464\r\n  11: std::panicking::continue_panic_fmt\r\n             at src/libstd/panicking.rs:373\r\n  12: rust_begin_unwind\r\n             at src/libstd/panicking.rs:302\r\n  13: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:139\r\n  14: core::result::unwrap_failed\r\n             at src/libcore/result.rs:1165\r\n  15: core::result::Result<T,E>::unwrap\r\n             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libcore/result.rs:933\r\n  16: the_crate_name::main\r\n             at src/main.rs:4\r\n  17: std::rt::lang_start::{{closure}}\r\n             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libstd/rt.rs:61\r\n  18: std::rt::lang_start_internal::{{closure}}\r\n             at src/libstd/rt.rs:48\r\n  19: std::panicking::try::do_call\r\n             at src/libstd/panicking.rs:287\r\n  20: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:78\r\n  21: std::panicking::try\r\n             at src/libstd/panicking.rs:265\r\n  22: std::panic::catch_unwind\r\n             at src/libstd/panic.rs:396\r\n  23: std::rt::lang_start_internal\r\n             at src/libstd/rt.rs:47\r\n  24: std::rt::lang_start\r\n             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libstd/rt.rs:61\r\n  25: the_crate_name::main\r\n```\r\n\r\nAgain, `the_crate_name::main` in the last frame (frame 21) should perhaps read `main` or `_main`: it's not `the_crate_name::main` that's running there; `the_crate_name::main` is really frame 12. In a minimal example, we have very few symbols to choose from.\r\n\r\nAgain, the disassembly shows that `_main` is preceded by the symbol being output, here, `the_crate_name::main`:\r\n\r\n<details>\r\n  <summary>Click to expand disassembly</summary>\r\n<pre><code>__ZN14the_crate_name4main17h445f977752289da6E:\r\n0000000100001cb0        pushq   %rbp\r\n0000000100001cb1        movq    %rsp, %rbp\r\n0000000100001cb4        subq    $0x30, %rsp\r\n0000000100001cb8        leaq    0x1f55c(%rip), %rax\r\n0000000100001cbf        movb    $0xc, -0x1(%rbp)\r\n0000000100001cc3        leaq    -0x18(%rbp), %rdi\r\n0000000100001cc7        movzbl  -0x1(%rbp), %esi\r\n0000000100001ccb        movq    %rax, %rdx\r\n0000000100001cce        movl    $0x5, %ecx\r\n0000000100001cd3        callq   __ZN3std2io5error5Error3new17h7ad5cd9b8a04b0efE ## std::io::error::Error::new:\r\n:h7ad5cd9b8a04b0ef\r\n0000000100001cd8        movq    -0x18(%rbp), %rax\r\n0000000100001cdc        movq    %rax, -0x28(%rbp)\r\n0000000100001ce0        movq    -0x10(%rbp), %rax\r\n0000000100001ce4        movq    %rax, -0x20(%rbp)\r\n0000000100001ce8        leaq    -0x28(%rbp), %rdi\r\n0000000100001cec        callq   __ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h9094cf16ad18ae1eE ## core::resu\r\nlt::Result$LT$T$C$E$GT$::unwrap::h9094cf16ad18ae1e\r\n0000000100001cf1        addq    $0x30, %rsp\r\n0000000100001cf5        popq    %rbp\r\n0000000100001cf6        retq\r\n0000000100001cf7        nopw    (%rax,%rax)\r\n_main:\r\n0000000100001d00        pushq   %rbp\r\n0000000100001d01        movq    %rsp, %rbp\r\n0000000100001d04        subq    $0x10, %rsp\r\n0000000100001d08        movslq  %edi, %rax\r\n0000000100001d0b        leaq    __ZN14the_crate_name4main17h445f977752289da6E(%rip), %rdi ## the_crate_name::main::h445f977752289da6\r\n0000000100001d12        movq    %rsi, -0x8(%rbp)\r\n0000000100001d16        movq    %rax, %rsi\r\n0000000100001d19        movq    -0x8(%rbp), %rdx\r\n0000000100001d1d        callq   __ZN3std2rt10lang_start17hc62f9e31cf02e7fdE ## std::rt::lang_start::hc62f9e31cf02e7fd\r\n0000000100001d22        addq    $0x10, %rsp\r\n0000000100001d26        popq    %rbp\r\n0000000100001d27        retq\r\n0000000100001d28        nop\r\n0000000100001d29        nop\r\n0000000100001d2a        nop\r\n0000000100001d2b        nop\r\n</code></pre>\r\n</details>\r\n\r\n**OS:** OS X Mojave\r\n**`rustc --version`:** `rustc 1.40.0 (73528e339 2019-12-16)`\r\n\r\n<sub><sup>1</sup>I've changed symbol names to remove the actual name of the project, as it relates to my employment. In the mangled symbol names, I have not updated the character counts, so they're not correct mangle-ings anymore.</sub>", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68674/timeline", "performed_via_github_app": null, "state_reason": null}