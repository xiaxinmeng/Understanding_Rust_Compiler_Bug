{"url": "https://api.github.com/repos/rust-lang/rust/issues/82814", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82814/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82814/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82814/events", "html_url": "https://github.com/rust-lang/rust/issues/82814", "id": 823383429, "node_id": "MDU6SXNzdWU4MjMzODM0Mjk=", "number": 82814, "title": "Tracking Issue for const `Result` methods", "user": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 268744493, "node_id": "MDU6TGFiZWwyNjg3NDQ0OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-fn", "name": "A-const-fn", "color": "f7e101", "default": false, "description": "Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2021-03-05T20:16:53Z", "updated_at": "2023-04-20T20:28:54Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Feature gate: `#![feature(const_result)]`\r\n\r\nThis is a tracking issue for making a number of `Result` methods `const fn`.\r\n\r\n### Public API\r\n\r\nNB: Many of these methods will need `~const Drop`. They're omitted here for brevity.\r\n\r\n```rust\r\nimpl<T, E> Result<T, E> {\r\n    pub const fn ok(self) -> Option<T>;\r\n    pub const fn err(self) -> Option<E>;\r\n    pub const fn as_mut(&mut self) -> Result<&mut T, &mut E>;\r\n    pub const fn map<U, F>(self, op: F) -> Result<U, E>\r\n        where F: const FnOnce(T) -> U;\r\n    pub const fn map_or<U, F>(self, default: U, f: F) -> U\r\n        where F: const FnOnce(T) -> U;\r\n    pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U\r\n        where\r\n            D: const FnOnce(E) -> U,\r\n            F: const FnOnce(T) -> U;\r\n    pub const fn map_err<F, O>(self, op: O) -> Result<T, F>\r\n        where O: const FnOnce(E) -> F;\r\n    pub const fn and<U>(self, res: Result<U, E>) -> Result<U, E>;\r\n    pub const fn and_then<U, F>(self, op: F) -> Result<U, E>\r\n        where F: const FnOnce(T) -> Result<U, E>;\r\n    pub const fn or<F>(self, res: Result<T, F>) -> Result<T, F>;\r\n    pub const fn or_else<F, O>(self, op: O) -> Result<T, F>\r\n        where O: const FnOnce(E) -> Result<T, F>;\r\n    pub const fn unwrap_or(self, default: T) -> T;\r\n    pub const fn unwrap_or_else<F>(self, op: F) -> T\r\n        where F: const FnOnce(E) -> T;\r\n    pub const unsafe fn unwrap_unchecked(self) -> T;\r\n    pub const unsafe fn unwrap_err_unchecked(self) -> E;\r\n}\r\n\r\nimpl<T, E> Result<&T, E> {\r\n    pub const fn copied(self) -> Result<T, E>\r\n        where T: const Copy;\r\n    pub const fn cloned(self) -> Result<T, E>\r\n        where T: const Clone;\r\n}\r\n\r\nimpl<T, E> Result<&mut T, E> {\r\n    pub const fn copied(self) -> Result<T, E>\r\n        where T: const Copy;\r\n    pub const fn cloned(self) -> Result<T, E>\r\n        where T: const Clone;\r\n}\r\n\r\nimpl<T, E> Result<T, E> where E: const Debug {\r\n    pub const fn expect(self, msg: &str) -> T;\r\n    pub const fn unwrap(self) -> T;\r\n}\r\n\r\nimpl<T, E> Result<T, E> where T: const Debug {\r\n    pub const fn expect_err(self, msg: &str) -> E;\r\n    pub const fn unwrap_err(self) -> E;\r\n}\r\n\r\nimpl<T, E> Result<T, E> where T: const Default {\r\n    pub const fn unwrap_or_default(self) -> T;\r\n}\r\n\r\nimpl<T, E> Result<T, E> where T: const Deref {\r\n    pub const fn as_deref(&self) -> Result<&<T as Deref>::Target, &E>;\r\n}\r\n\r\nimpl<T, E> Result<T, E> where T: const DerefMut {\r\n    pub const fn as_deref_mut(&mut self) -> Result<&mut <T as Deref>::Target, &mut E>;\r\n}\r\n\r\nimpl<T, E> Result<Option<T>, E> {\r\n    pub const fn transpose(self) -> Option<Result<T, E>>;\r\n}\r\n```\r\n\r\n### Blockers\r\n\r\n- [ ] #67792 (`const_trait_impl`)\r\n  - `ok`\r\n  - `err`\r\n  - `map`\r\n  - `map_or`\r\n  - `map_or_else`\r\n  - `map_err`\r\n  - `and`\r\n  - `and_then`\r\n  - `or`\r\n  - `or`\r\n  - `or_else`\r\n  - `unwrap`\r\n  - `unwrap_or`\r\n  - `unwrap_or_else`\r\n  - `expect`\r\n  - `expect_err`\r\n  - `copied`\r\n  - `cloned`\r\n  - `as_deref`\r\n  - [ ] and #57349 (`const_mut_refs`)\r\n    - `as_deref_mut`\r\n- [ ] #73255 (`const_precise_live_drops`)\r\n  - `transpose`\r\n  - `unwrap_unchecked\r\n  - `unwrap_err_unchecked`\r\n  - likely many others\r\n\r\n### Status\r\n\r\n- Implementation\r\n  - [x] `ok` #92385\r\n  - [x] `err` #92385\r\n  - [x] `as_mut` #89977\r\n  - [ ] `map`\r\n  - [ ] `map_or`\r\n  - [ ] `map_or_else`\r\n  - [ ] `map_err`\r\n  - [x] `and` #92385\r\n  - [ ] `and_then`\r\n  - [x] `or` #92385\r\n  - [ ] `or_else`\r\n  - [x] `unwrap_or` #92385\r\n  - [ ] `unwrap_or_else`\r\n  - [ ] `expect`\r\n  - [ ] `unwrap`\r\n  - [ ] `expect_err`\r\n  - [ ] `unwrap_err`\r\n  - [ ] `unwrap_or_default`\r\n  - [ ] `as_deref`\r\n  - [ ] `as_deref_mut`\r\n  - [x] `transpose` #82130\r\n- Final commenting period (FCP)\r\n  - [ ] `ok`\r\n  - [ ] `err`\r\n  - [ ] `as_mut`\r\n  - [ ] `map`\r\n  - [ ] `map_or`\r\n  - [ ] `map_or_else`\r\n  - [ ] `map_err`\r\n  - [ ] `and`\r\n  - [ ] `and_then`\r\n  - [ ] `or`\r\n  - [ ] `or_else`\r\n  - [ ] `unwrap_or`\r\n  - [ ] `unwrap_or_else`\r\n  - [ ] `expect`\r\n  - [ ] `unwrap`\r\n  - [ ] `expect_err`\r\n  - [ ] `unwrap_err`\r\n  - [ ] `unwrap_or_default`\r\n  - [ ] `as_deref`\r\n  - [ ] `as_deref_mut`\r\n  - [ ] `transpose`\r\n- Stabilization PR\r\n  - [ ] `ok`\r\n  - [ ] `err`\r\n  - [ ] `as_mut`\r\n  - [ ] `map`\r\n  - [ ] `map_or`\r\n  - [ ] `map_or_else`\r\n  - [ ] `map_err`\r\n  - [ ] `and`\r\n  - [ ] `and_then`\r\n  - [ ] `or`\r\n  - [ ] `or_else`\r\n  - [ ] `unwrap_or`\r\n  - [ ] `unwrap_or_else`\r\n  - [ ] `expect`\r\n  - [ ] `unwrap`\r\n  - [ ] `expect_err`\r\n  - [ ] `unwrap_err`\r\n  - [ ] `unwrap_or_default`\r\n  - [ ] `as_deref`\r\n  - [ ] `as_deref_mut`\r\n  - [ ] `transpose`\r\n\r\n### Unresolved Questions\r\n\r\n- None yet.\r\n\r\n---\r\n\r\nSee also #57563.\r\n\r\nEdit: Please ping @jhpratt if you're submitting a PR that changes any of the above! I'd like to keep the checkboxes up-to-date.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82814/reactions", "total_count": 7, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 7, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82814/timeline", "performed_via_github_app": null, "state_reason": null}