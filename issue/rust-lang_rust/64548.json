{"url": "https://api.github.com/repos/rust-lang/rust/issues/64548", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/64548/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/64548/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/64548/events", "html_url": "https://github.com/rust-lang/rust/issues/64548", "id": 494626327, "node_id": "MDU6SXNzdWU0OTQ2MjYzMjc=", "number": 64548, "title": "Incorrect compiler hint for complicated type handler", "user": {"login": "olegnn", "id": 6822848, "node_id": "MDQ6VXNlcjY4MjI4NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/6822848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olegnn", "html_url": "https://github.com/olegnn", "followers_url": "https://api.github.com/users/olegnn/followers", "following_url": "https://api.github.com/users/olegnn/following{/other_user}", "gists_url": "https://api.github.com/users/olegnn/gists{/gist_id}", "starred_url": "https://api.github.com/users/olegnn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olegnn/subscriptions", "organizations_url": "https://api.github.com/users/olegnn/orgs", "repos_url": "https://api.github.com/users/olegnn/repos", "events_url": "https://api.github.com/users/olegnn/events{/privacy}", "received_events_url": "https://api.github.com/users/olegnn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-17T13:31:42Z", "updated_at": "2020-12-28T23:50:11Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was trying to implement custom macro parser but fall into strange issue.\r\nHaving following code \r\n```rust\r\nuse proc_macro2::TokenStream;\r\nuse quote::quote;\r\nuse syn::parse::{Parse, ParseStream, Peek};\r\nuse syn::token::Token;\r\n\r\n#[derive(Debug)]\r\nstruct ParseType {\r\n    pub tokens: TokenStream,\r\n}\r\n\r\nmod custom {\r\n    syn::custom_punctuation!(Arrow, ==>);\r\n}\r\n\r\nfn parse_until<T: Token>(\r\n    input: ParseStream,\r\n    ending_tokens: &[&impl Peek<Token = T>],\r\n) -> syn::Result<TokenStream> {\r\n    let mut tokens = TokenStream::new();\r\n    while !input.is_empty() && !ending_tokens.into_iter().any(|token| input.peek(token)) {\r\n        let next: proc_macro2::TokenTree = input.parse()?;\r\n        tokens.extend(Some(next));\r\n    }\r\n    Ok(tokens)\r\n}\r\n\r\nimpl Parse for ParseType {\r\n    fn parse(input: ParseStream) -> syn::Result<Self> {\r\n        Ok(ParseType {\r\n            tokens: parse_until(input, &[&custom::Arrow])?,\r\n        })\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let result: syn::Result<ParseType> =\r\n        syn::parse2(quote! { { Ok::<usize, usize>(1) } ==> to the moon });\r\n    println!(\"Parsed: {:?}\", result.unwrap());\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=2c82d10c7efb412abe2400793eb510e6))\r\n\r\nI got an error\r\n\r\n```\r\nerror[E0277]: expected a `std::ops::Fn<(syn::lookahead::TokenMarker,)>` closure, found `impl Peek<Token = T>`\r\n  --> src/main.rs:20:77\r\n   |\r\n20 |     while !input.is_empty() && !ending_tokens.into_iter().any(|token| input.peek(token)) {\r\n   |                                                                             ^^^^ expected an `Fn<(syn::lookahead::TokenMarker,)>` closure, found `impl Peek<Token = T>`\r\n   |\r\n   = help: the trait `std::ops::Fn<(syn::lookahead::TokenMarker,)>` is not implemented for `impl Peek<Token = T>`\r\n   = help: consider adding a `where impl Peek<Token = T>: std::ops::Fn<(syn::lookahead::TokenMarker,)>` bound\r\n   = note: required because of the requirements on the impl of `std::ops::FnOnce<(syn::lookahead::TokenMarker,)>` for `&impl Peek<Token = T>`\r\n   = note: required because of the requirements on the impl of `syn::lookahead::Peek` for `&&impl Peek<Token = T>`\r\n```\r\n\r\nSo I added ```where impl Peek<Token = T>: std::ops::Fn<(syn::lookahead::TokenMarker,)>``` to the code and then situation became worse:\r\n```\r\nerror[E0603]: module `lookahead` is private\r\n  --> src/main.rs:18:78\r\n   |\r\n18 | ) -> syn::Result<TokenStream> where impl Peek<Token = T>: std::ops::Fn<(syn::lookahead::TokenMarker,)> {\r\n   |                                                                              ^^^^^^^^^\r\n\r\nerror[E0562]: `impl Trait` not allowed outside of function and inherent method return types\r\n  --> src/main.rs:18:37\r\n   |\r\n18 | ) -> syn::Result<TokenStream> where impl Peek<Token = T>: std::ops::Fn<(syn::lookahead::TokenMarker,)> {\r\n   |                                     ^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\r\n  --> src/main.rs:18:59\r\n   |\r\n18 | ) -> syn::Result<TokenStream> where impl Peek<Token = T>: std::ops::Fn<(syn::lookahead::TokenMarker,)> {\r\n   |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\r\n```\r\n\r\nFor the first of them it's ok [for me at least] that compiler can't understand which module is private, however the second and the third make me very confused, because this's the code generated by compiler itself.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/64548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/64548/timeline", "performed_via_github_app": null, "state_reason": null}