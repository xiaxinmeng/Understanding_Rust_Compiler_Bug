{"url": "https://api.github.com/repos/rust-lang/rust/issues/9230", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/9230/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/9230/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/9230/events", "html_url": "https://github.com/rust-lang/rust/issues/9230", "id": 19560497, "node_id": "MDU6SXNzdWUxOTU2MDQ5Nw==", "number": 9230, "title": "Custom Data Types with Enumerated Values", "user": {"login": "jesseray", "id": 774497, "node_id": "MDQ6VXNlcjc3NDQ5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/774497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesseray", "html_url": "https://github.com/jesseray", "followers_url": "https://api.github.com/users/jesseray/followers", "following_url": "https://api.github.com/users/jesseray/following{/other_user}", "gists_url": "https://api.github.com/users/jesseray/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesseray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesseray/subscriptions", "organizations_url": "https://api.github.com/users/jesseray/orgs", "repos_url": "https://api.github.com/users/jesseray/repos", "events_url": "https://api.github.com/users/jesseray/events{/privacy}", "received_events_url": "https://api.github.com/users/jesseray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-09-16T16:13:13Z", "updated_at": "2013-09-16T16:15:21Z", "closed_at": "2013-09-16T16:15:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Haskell (using GHC), you can write\n\n```\ndata Tanks = 0 | 1 | 2 | 3 | 4\n```\n\nto define a new data type called Tanks that can have the value 0 or 1 or 2 or 3 or 4. When you define a variable of type Tanks, you must define it as having one of the values enumerated in the data type definition. If you try to use a value that is not enumerated in the data type definition, such as 5,\n\n```\nhearts :: Tanks\nhearts = 5\n```\n\nthe compiler will abandon compilation and display an error message that says (in essence) that the value is not acceptable.\n\nBy defining new data types that accept the enumerated values and no others, module developers can prevent other programmers from abusing their modules because the abuses will cause compiler errors. In this way, module developers increase the chances that, if the code compiles, the code works correctly.\n\nRust does not support this without workarounds.\n\nA programmer could try to use an Enum, but these enumerate constructors with valid Rust identifiers, not values. As such, the programmer would need to define constructors to use as placeholders for each of the values they want enumerated. That would fill their modules with boilerplate code and make them unpleasant for other programmers to use. Hence, I do not consider this workaround viable.\n\nThe programmer could use a Struct with a private field and a Setter method which prevents the field from being given a value that the module developer does not want. This workaround involves much less boilerplate and the module remains pleasant for other programmers to work with. Hence, I do consider this workaround viable. Even so, when compared with the Haskell approach, it strikes me as avoidably ugly, because Haskell does not require any boilerplate code at all.\n\nCan the Rust language and compiler be extended to allow programmers to define new data types that can have only the values enumerated by the programmer, but without boilerplate code?\n", "closed_by": {"login": "jesseray", "id": 774497, "node_id": "MDQ6VXNlcjc3NDQ5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/774497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesseray", "html_url": "https://github.com/jesseray", "followers_url": "https://api.github.com/users/jesseray/followers", "following_url": "https://api.github.com/users/jesseray/following{/other_user}", "gists_url": "https://api.github.com/users/jesseray/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesseray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesseray/subscriptions", "organizations_url": "https://api.github.com/users/jesseray/orgs", "repos_url": "https://api.github.com/users/jesseray/repos", "events_url": "https://api.github.com/users/jesseray/events{/privacy}", "received_events_url": "https://api.github.com/users/jesseray/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/9230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/9230/timeline", "performed_via_github_app": null, "state_reason": "completed"}