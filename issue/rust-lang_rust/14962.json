{"url": "https://api.github.com/repos/rust-lang/rust/issues/14962", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/14962/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/14962/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/14962/events", "html_url": "https://github.com/rust-lang/rust/issues/14962", "id": 35867072, "node_id": "MDU6SXNzdWUzNTg2NzA3Mg==", "number": 14962, "title": "rustc's analyses have different order of eval for `asm!` than what trans emits.", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-06-17T08:18:01Z", "updated_at": "2020-05-24T13:29:39Z", "closed_at": "2020-05-24T13:29:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The main work items remaining here is the incorrect linting of the following example ([play](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=0c709eb813cc872e824b1ec56f95c50c)):\r\n\r\n```rust\r\n#![feature(asm)]\r\n\r\n#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\r\nfn main() {\r\n    #![warn(unused_assignments)]\r\n    let mut x: isize = 0;\r\n    let y: isize = 1;\r\n    let mut z: isize;\r\n\r\n    unsafe {\r\n        asm!(\"mov ($1), $0\"\r\n             // Is dead_assignment going to complain about z=2 here ...\r\n             : \"=r\"(*{z=2; &mut x})\r\n             // ... or this z=3 here?\r\n             : \"r\"(&{z=3; y}));\r\n    }\r\n\r\n    // Whichever one it complains about should be the *opposite*\r\n    // of what we observe getting assigned here.\r\n    assert_eq!((x,y,z), (1,1,3));\r\n}\r\n```\r\n\r\nI probably should make sure that the other examples have been turned into tests.\r\n\r\nOriginal bug report follows\r\n\r\n----\r\n\r\nWhile making test cases for  #14873 and investigating how rustc currently models the control flow of `asm!` (and eventually filing #14936), I discovered something peculiar: trans emits code that evaluates the output expressions first, and then the input expressions (as illustrated in the test case for `=r` on #14936), but every rustc analysis that I looked at (`liveness`, `expr_use_visitor`, etc) treats `asm!` as if the input expressions are evaluated first, and then the output expressions.\r\n\r\nHere is an illustrative test case: with some comments to try to clarify what is happening in the various cases\r\n\r\n``` rust\r\n#![feature(asm)]\r\n\r\n// turning off this lint to avoid distractions from incorrect internal\r\n// analyses.  I will turn it back on in individual cases below to\r\n// illustrate where rustc's analyses are going wrong today.\r\n#![allow(dead_assignment)]\r\n\r\n#[cfg(target_arch = \"x86\")]\r\n#[cfg(target_arch = \"x86_64\")]\r\nfn main() {\r\n    // (All the test cases are listed here.  All but but the first are\r\n    // no-ops unless enabled via a corresponding `--cfg` option.)\r\n    overwrite_in_both();\r\n    overwrite_in_both_with_liveness();\r\n    augment_in_output();\r\n    augment_in_input();\r\n    crash_and_burn();\r\n    return;\r\n\r\n    fn overwrite_in_both() {\r\n        let mut x: int = 0;\r\n        let y: int = 1;\r\n        let mut z: int;\r\n\r\n        unsafe {\r\n            asm!(\"mov ($1), $0\"\r\n                 // Which happens first, the output exprs...\r\n                 : \"=r\"(*{z=2; &mut x})\r\n                 // ... or the input exprs?\r\n                 : \"r\"(&{z=3; y}));\r\n        }\r\n\r\n        assert_eq!((x,y,z), (1,1,3)); // I.e., should `z` be `2` ?\r\n    }\r\n\r\n    // Well, let us assume that the above behavior is what we actually want.\r\n    // (If nothing else, it gives us left-to-right order of evaluation\r\n    //  on the expressions fed into `asm!`)\r\n\r\n    #[cfg(not(overwrite_in_both_with_liveness))]\r\n    fn overwrite_in_both_with_liveness() { }\r\n    #[cfg(overwrite_in_both_with_liveness)]\r\n    fn overwrite_in_both_with_liveness() {\r\n        #![deny(dead_assignment)]\r\n        let mut x: int = 0;\r\n        let y: int = 1;\r\n        let mut z: int;\r\n\r\n        unsafe {\r\n            asm!(\"mov ($1), $0\"\r\n                 // Is dead_assignment going to complain about z=2 here ...\r\n                 : \"=r\"(*{z=2; &mut x})\r\n                 // ... or this z=3 here?\r\n                 : \"r\"(&{z=3; y}));\r\n        }\r\n\r\n        // Whichever one it complains about should be the *opposite*\r\n        // of what we observe getting assigned here.\r\n        assert_eq!((x,y,z), (1,1,3));\r\n    }\r\n\r\n\r\n\r\n    #[cfg(not(augment_in_input))]\r\n    fn augment_in_input() { }\r\n    #[cfg(augment_in_input)]\r\n    fn augment_in_input() {\r\n        let mut x: int = 0;\r\n        let y: int = 1;\r\n        let mut z: int;\r\n\r\n        unsafe {\r\n            asm!(\"mov ($1), $0\"\r\n                 // Under the above assumption, this should work, since ...\r\n                 : \"=r\"(*{z=2; &mut x})\r\n                 // ... we assign 2 above and then add 3 here, yielding 5.\r\n                 : \"r\"(&{z+=3; y}));\r\n        }\r\n        assert_eq!((x,y,z), (1,1,5));\r\n    }\r\n\r\n    #[cfg(not(augment_in_output))]\r\n    fn augment_in_output() { }\r\n    #[cfg(augment_in_output)]\r\n    fn augment_in_output() {\r\n        let mut x: int = 0;\r\n        let y: int = 1;\r\n        let mut z: int;\r\n\r\n        unsafe {\r\n            asm!(\"mov ($1), $0\"\r\n                 // Under the above assumption, should not compile, since ...\r\n                 : \"=r\"(*{println!(\"z: {}\", z); z+= 2; &mut x})\r\n                 // ... we read z above, before it is assigned a value here.\r\n                 : \"r\"(&{z=3; y}));\r\n        }\r\n        assert_eq!((x,y,z), (1,1,-314159)); // (deliberate chosen; expect fail)\r\n    }\r\n\r\n    #[cfg(not(crash_and_burn))]\r\n    fn crash_and_burn() { }\r\n    #[cfg(crash_and_burn)]\r\n    fn crash_and_burn() {\r\n        let mut x: int = 0;\r\n        let y: int = 1;\r\n        let mut z: &int;\r\n\r\n        unsafe {\r\n            asm!(\"mov ($1), $0\"\r\n                 // Under the above assumption, should not compile, since ...\r\n                 : \"=r\"(*{println!(\"*z: {}\", *z); &mut x})\r\n                 // ... we read z above, before it is assigned a value here.\r\n                 : \"r\"(&{z=&y; y}));\r\n        }\r\n        assert_eq!((x,y,*z), (1,1,-314159)); // (deliberate chosen; expect fail)\r\n    }\r\n\r\n}\r\n\r\n#[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"))]\r\npub fn main() {}\r\n```\r\n\r\nTranscript of various runs on above code:\r\n\r\n```\r\n% rustc --version\r\nrustc 0.11.0-pre (79fca99 2014-06-17 04:46:26 +0000)\r\nhost: x86_64-apple-darwin\r\n% rustc  ~/Dev/Rust/asm-flow.rs && ./asm-flow \r\n% rustc  ~/Dev/Rust/asm-flow.rs --cfg overwrite_in_both_with_liveness && ./asm-flow \r\n/Users/fklock/Dev/Rust/asm-flow.rs:54:26: 54:27 error: value assigned to `z` is never read\r\n/Users/fklock/Dev/Rust/asm-flow.rs:54                  : \"r\"(&{z=3; y}));\r\n                                                               ^\r\nnote: in expansion of asm!\r\n/Users/fklock/Dev/Rust/asm-flow.rs:50:13: 54:36 note: expansion site\r\n/Users/fklock/Dev/Rust/asm-flow.rs:44:17: 44:32 note: lint level defined here\r\n/Users/fklock/Dev/Rust/asm-flow.rs:44         #![deny(dead_assignment)]\r\n                                                      ^~~~~~~~~~~~~~~\r\n/Users/fklock/Dev/Rust/asm-flow.rs:54:26: 54:27 error: value assigned to `z` is never read\r\n/Users/fklock/Dev/Rust/asm-flow.rs:54                  : \"r\"(&{z=3; y}));\r\n                                                               ^\r\nnote: in expansion of asm!\r\n/Users/fklock/Dev/Rust/asm-flow.rs:50:13: 54:36 note: expansion site\r\n/Users/fklock/Dev/Rust/asm-flow.rs:44:17: 44:32 note: lint level defined here\r\n/Users/fklock/Dev/Rust/asm-flow.rs:44         #![deny(dead_assignment)]\r\n                                                      ^~~~~~~~~~~~~~~\r\nerror: aborting due to 2 previous errors\r\n% rustc  ~/Dev/Rust/asm-flow.rs --cfg augment_in_input && ./asm-flow \r\n/Users/fklock/Dev/Rust/asm-flow.rs:77:26: 77:30 error: use of possibly uninitialized variable: `z`\r\n/Users/fklock/Dev/Rust/asm-flow.rs:77                  : \"r\"(&{z+=3; y}));\r\n                                                               ^~~~\r\nnote: in expansion of asm!\r\n/Users/fklock/Dev/Rust/asm-flow.rs:73:13: 77:37 note: expansion site\r\nerror: aborting due to previous error\r\n% rustc  ~/Dev/Rust/asm-flow.rs --cfg augment_in_output && ./asm-flow \r\nz: 0\r\ntask '<main>' failed at 'assertion failed: `(left == right) && (right == left)` (left: `(1, 1, 3)`, right: `(1, 1, -314159)`)', /Users/fklock/Dev/Rust/asm-flow.rs:97\r\n% rustc  ~/Dev/Rust/asm-flow.rs --cfg crash_and_burn && ./asm-flow \r\nSegmentation fault: 11\r\n% \r\n```\r\n\r\nNotes on the above transcript:\r\n- The first run is just establishing our existing semantics as implemented by `trans`: we evaluate output expressions first, then input expressions.  Thus the `assert_eq` in `overwrite_in_both` passes \r\n- The second run establishes that the liveness analysis is incorrectly thinking that we will evaluate the input expressions first, and then the output expressions; that is why it is complaining that the assignment `z=3` is unused, even though it is the other assignment `z=2` that should be flagged as a dead_assignment.\r\n- The third run establishes a case where the compiler outright errors (rather than lint warns), again due to an incorrect model of the order of evaluation.\r\n- The fourth run points out how the analysis is not catching a read from uninitialized memory (since we print out a value for the `println!(\"z: {}, z)`; but it is not printing `z: 3` as the compiler might think it should; it is instead printing `z: 0`)\r\n- The fifth run is just driving the point home about the danger here.  Yes, this is a crash inside an unsafe block, but the expressions that caused the crash were unrelated to the asm block; they were due to an attempt to dereference an `&int` before it has been initialized.\r\n", "closed_by": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/14962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/14962/timeline", "performed_via_github_app": null, "state_reason": "completed"}