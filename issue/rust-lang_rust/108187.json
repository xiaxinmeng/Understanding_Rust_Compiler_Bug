{"url": "https://api.github.com/repos/rust-lang/rust/issues/108187", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108187/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108187/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108187/events", "html_url": "https://github.com/rust-lang/rust/issues/108187", "id": 1589937889, "node_id": "I_kwDOAAsO6M5exIbh", "number": 108187, "title": "SIMD path never taken in simple vectorized loop", "user": {"login": "linkmauve", "id": 7755816, "node_id": "MDQ6VXNlcjc3NTU4MTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7755816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linkmauve", "html_url": "https://github.com/linkmauve", "followers_url": "https://api.github.com/users/linkmauve/followers", "following_url": "https://api.github.com/users/linkmauve/following{/other_user}", "gists_url": "https://api.github.com/users/linkmauve/gists{/gist_id}", "starred_url": "https://api.github.com/users/linkmauve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linkmauve/subscriptions", "organizations_url": "https://api.github.com/users/linkmauve/orgs", "repos_url": "https://api.github.com/users/linkmauve/repos", "events_url": "https://api.github.com/users/linkmauve/events{/privacy}", "received_events_url": "https://api.github.com/users/linkmauve/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 5223725825, "node_id": "LA_kwDOAAsO6M8AAAABN1u7AQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-utovectorization", "name": "A-utovectorization", "color": "AF085D", "default": false, "description": "Issue related to autovectorization, which can impact perf or code size."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2023-02-17T20:44:29Z", "updated_at": "2023-04-05T17:33:00Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#[inline(never)]\r\nfn decrypt(data: &mut [u8], key: [u8; 4096]) {\r\n    for i in 0..data.len() {\r\n        data[i] ^= key[i % 4096];\r\n    }\r\n}\r\n\r\nfn main() {\r\n    // Generate 128\u00a0MiB of data\r\n    let mut data = vec![1; 128 * 1024 * 1024];\r\n    let key = [2; 4096];\r\n    decrypt(&mut data, key);\r\n    assert_eq!(data[1234567], 3);\r\n}\r\n```\r\n\r\nI expected to see this happen: the loop gets vectorized, and spends all of its time in the vectorized path, working through 32\u00a0bytes per iteration instead of one.\r\n\r\nInstead, this happened: the loop did get vectorized, but the initial check of the size seems to get miscompiled (tested on both amd64 and AArch64) into jumping right into the non-SIMD path.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.69.0-nightly (9a7cc6c32 2023-02-16)\r\nbinary: rustc\r\ncommit-hash: 9a7cc6c32f1a690f86827e4724bcda85e506ef35\r\ncommit-date: 2023-02-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.69.0-nightly\r\nLLVM version: 15.0.7\r\n```\r\nAlso tested on:\r\n```\r\nrustc 1.67.1 (d5a82bbd2 2023-02-07) (Arch Linux rust 1:1.67.1-1)\r\nbinary: rustc\r\ncommit-hash: d5a82bbd26e1ad8b7401f6a718a9c57c96905483\r\ncommit-date: 2023-02-07\r\nhost: aarch64-unknown-linux-gnu\r\nrelease: 1.67.1\r\nLLVM version: 15.0.7\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Generated AArch64 assembly</summary>\r\n<p>\r\n\r\n```\r\n0000000000006634 <test::decrypt>:\r\n    6634:\tb4000621 \tcbz\tx1, 66f8 <test::decrypt+0xc4>\r\n    6638:\t92820008 \tmov\tx8, #0xffffffffffffefff    \t// #-4097\r\n    663c:\t8b080028 \tadd\tx8, x1, x8\r\n    6640:\tb13fe51f \tcmn\tx8, #0xff9\r\n    6644:\t54000062 \tb.cs\t6650 <test::decrypt+0x1c>  // b.hs, b.nlast\r\n    6648:\taa1f03e8 \tmov\tx8, xzr\r\n    664c:\t14000022 \tb\t66d4 <test::decrypt+0xa0>\r\n    6650:\tf100803f \tcmp\tx1, #0x20\r\n    6654:\t54000062 \tb.cs\t6660 <test::decrypt+0x2c>  // b.hs, b.nlast\r\n    6658:\taa1f03e8 \tmov\tx8, xzr\r\n    665c:\t14000012 \tb\t66a4 <test::decrypt+0x70>\r\n    6660:\t927be828 \tand\tx8, x1, #0xffffffffffffffe0\r\n    6664:\t91004049 \tadd\tx9, x2, #0x10\r\n    6668:\t9100400a \tadd\tx10, x0, #0x10\r\n    666c:\taa0803eb \tmov\tx11, x8\r\n    6670:\tad7f8520 \tldp\tq0, q1, [x9, #-16]\r\n    6674:\t91008129 \tadd\tx9, x9, #0x20\r\n    6678:\tf100816b \tsubs\tx11, x11, #0x20\r\n    667c:\tad7f8d42 \tldp\tq2, q3, [x10, #-16]\r\n    6680:\t6e201c40 \teor\tv0.16b, v2.16b, v0.16b\r\n    6684:\t6e211c61 \teor\tv1.16b, v3.16b, v1.16b\r\n    6688:\tad3f8540 \tstp\tq0, q1, [x10, #-16]\r\n    668c:\t9100814a \tadd\tx10, x10, #0x20\r\n    6690:\t54ffff01 \tb.ne\t6670 <test::decrypt+0x3c>  // b.any\r\n    6694:\teb01011f \tcmp\tx8, x1\r\n    6698:\t54000300 \tb.eq\t66f8 <test::decrypt+0xc4>  // b.none\r\n    669c:\tf27d043f \ttst\tx1, #0x18\r\n    66a0:\t540001a0 \tb.eq\t66d4 <test::decrypt+0xa0>  // b.none\r\n    66a4:\taa0803e9 \tmov\tx9, x8\r\n    66a8:\t927df028 \tand\tx8, x1, #0xfffffffffffffff8\r\n    66ac:\t927d212a \tand\tx10, x9, #0xff8\r\n    66b0:\tfc696800 \tldr\td0, [x0, x9]\r\n    66b4:\tfc6a6841 \tldr\td1, [x2, x10]\r\n    66b8:\t2e211c00 \teor\tv0.8b, v0.8b, v1.8b\r\n    66bc:\tfc296800 \tstr\td0, [x0, x9]\r\n    66c0:\t91002129 \tadd\tx9, x9, #0x8\r\n    66c4:\teb09011f \tcmp\tx8, x9\r\n    66c8:\t54ffff21 \tb.ne\t66ac <test::decrypt+0x78>  // b.any\r\n    66cc:\teb01011f \tcmp\tx8, x1\r\n    66d0:\t54000140 \tb.eq\t66f8 <test::decrypt+0xc4>  // b.none\r\n    66d4:\t92402d09 \tand\tx9, x8, #0xfff\r\n    66d8:\t3868680a \tldrb\tw10, [x0, x8]\r\n    66dc:\t9100050b \tadd\tx11, x8, #0x1\r\n    66e0:\teb0b003f \tcmp\tx1, x11\r\n    66e4:\t38696849 \tldrb\tw9, [x2, x9]\r\n    66e8:\t4a090149 \teor\tw9, w10, w9\r\n    66ec:\t38286809 \tstrb\tw9, [x0, x8]\r\n    66f0:\taa0b03e8 \tmov\tx8, x11\r\n    66f4:\t54ffff01 \tb.ne\t66d4 <test::decrypt+0xa0>  // b.any\r\n    66f8:\td65f03c0 \tret\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nEdit: without the `#[inline(never)]`, the loop doesn\u2019t even get vectorized at all.\r\n\r\nEdit 2: here is the result in godbolt: https://godbolt.org/z/9TcqvPhz3\r\n\r\nI\u2019ve tested using both `-C target-cpu=native` on a Kaby Lake and without, in both cases I end up with some SIMD being emitted but it\u2019s always jumped over to what should only be used for the tail of the data.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108187/timeline", "performed_via_github_app": null, "state_reason": null}