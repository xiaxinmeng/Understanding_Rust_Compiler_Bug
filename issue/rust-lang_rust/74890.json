{"url": "https://api.github.com/repos/rust-lang/rust/issues/74890", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74890/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74890/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74890/events", "html_url": "https://github.com/rust-lang/rust/issues/74890", "id": 667377276, "node_id": "MDU6SXNzdWU2NjczNzcyNzY=", "number": 74890, "title": "Incremental build panic running `cargo test`", "user": {"login": "sethp", "id": 241129, "node_id": "MDQ6VXNlcjI0MTEyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/241129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sethp", "html_url": "https://github.com/sethp", "followers_url": "https://api.github.com/users/sethp/followers", "following_url": "https://api.github.com/users/sethp/following{/other_user}", "gists_url": "https://api.github.com/users/sethp/gists{/gist_id}", "starred_url": "https://api.github.com/users/sethp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sethp/subscriptions", "organizations_url": "https://api.github.com/users/sethp/orgs", "repos_url": "https://api.github.com/users/sethp/repos", "events_url": "https://api.github.com/users/sethp/events{/privacy}", "received_events_url": "https://api.github.com/users/sethp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-07-28T21:07:49Z", "updated_at": "2020-11-12T18:04:38Z", "closed_at": "2020-11-12T18:04:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\nI don't think it's specific to any code per se, but I'm seeing this just after modifying a (now) 245 line file and hitting \"run test\" in vscode, maybe at about the same time I hotkey'd \"save\"? See below for more info.\r\n\r\nThis issue looks very similar to #73967 and maybe #73108. I suspect all three could be addressed by adopting a strategy as described in https://github.com/rust-lang/cargo/issues/6529.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.44.1 (c7087fe00 2020-06-17)\r\nbinary: rustc\r\ncommit-hash: c7087fe00d2ba919df1d813c040a5d47e43b0fe7\r\ncommit-date: 2020-06-17\r\nhost: x86_64-apple-darwin\r\nrelease: 1.44.1\r\nLLVM version: 9.0\r\n```\r\n\r\n`rustup upgrade` did make the error \"go away,\" I believe this is just because it invalidated the cache.\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'index out of bounds: the len is 245 but the index is 246', src/librustc_middle/ty/query/on_disk_cache.rs:583:18\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n   1: core::fmt::write\r\n   2: std::io::Write::write_fmt\r\n   3: std::panicking::default_hook::{{closure}}\r\n   4: std::panicking::default_hook\r\n   5: rustc_driver::report_ice\r\n   6: std::panicking::rust_panic_with_hook\r\n   7: rust_begin_unwind\r\n   8: core::panicking::panic_fmt\r\n   9: core::panicking::panic_bounds_check\r\n  10: <rustc_middle::ty::query::on_disk_cache::CacheDecoder as serialize::serialize::SpecializedDecoder<rustc_span::span_encoding::Span>>::specialized_decode\r\n  11: <rustc_middle::mir::SourceInfo as serialize::serialize::Decodable>::decode\r\n  12: <rustc_middle::mir::Statement as serialize::serialize::Decodable>::decode\r\n  13: serialize::serialize::Decoder::read_seq\r\n  14: <rustc_middle::mir::BasicBlockData as serialize::serialize::Decodable>::decode\r\n  15: serialize::serialize::Decoder::read_seq\r\n  16: <rustc_middle::mir::Body as serialize::serialize::Decodable>::decode::{{closure}}\r\n  17: rustc_middle::ty::query::on_disk_cache::OnDiskCache::try_load_query_result\r\n  18: rustc_query_system::query::plumbing::get_query\r\n  19: rustc_middle::ty::<impl rustc_middle::ty::context::TyCtxt>::instance_mir\r\n  20: rustc_mir::monomorphize::collector::collect_items_rec\r\n  21: rustc_mir::monomorphize::collector::collect_items_rec\r\n  22: rustc_mir::monomorphize::collector::collect_crate_mono_items\r\n  23: rustc_mir::monomorphize::partitioning::collect_and_partition_mono_items\r\n  24: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::collect_and_partition_mono_items>::compute\r\n  25: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  26: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  27: rustc_query_system::query::plumbing::get_query\r\n  28: rustc_codegen_ssa::base::codegen_crate\r\n  29: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate\r\n  30: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  31: rustc_interface::passes::start_codegen\r\n  32: rustc_middle::ty::context::tls::enter_global\r\n  33: rustc_interface::queries::Queries::ongoing_codegen\r\n  34: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  35: scoped_tls::ScopedKey<T>::set\r\n  36: rustc_ast::attr::with_globals\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n### Reproducibility and Theory\r\n\r\nSo far I've reduced the state down to this project: [out-of-bounds.tar.gz](https://github.com/rust-lang/rust/files/4990994/out-of-bounds.tar.gz). `tar xvzf out-of-bounds.tar.gz; cd out-of-bounds; cargo test` has so far reproduced the error 100% of the time for me, but it's highly sensitive to the fingerprint mechanism so changes to anything in there produces a project that builds just fine.\r\n\r\nHere's what I think is happening:\r\n\r\n1. `cargo test` kicks off an incremental compile, and starts checking fingerprints. \r\n2. In order to build the dependency graph, it runs a \"query\" to determine \r\n3. As part of executing that query, it loads a cached incremental compilation unit for `tests/config.rs` that is out of sync with the current file (it refers to a point in time where the file was a few lines longer), which panics\r\n\r\nSince this appears to be happening in the \"check what work to do\" phase, `rustc` never produces a new artifact that's in sync with the current state of the file, and either `cargo clean` or forcing a full rebuild is necessary to get back into sync.\r\n\r\nThe two questions I haven't gotten a good idea about are:\r\n\r\n1. How does `rustc` determine the last incremental build is valid to run queries against? It seems that in this case, it should prefer to look through the new file than treat the last session as the file is indeed changed.\r\n2. What did I do to get the compiler into this state in the first place? Some details that I suspect may be relevant:\r\n    - I hit the \"run test\" inline helper in vscode, at about the same time as making other edits and re-saving the file\r\n    - I have vscode configured to format on save, which does something to modify the file either just before or just after saving\r\n    - I'm running on HFS on macOS, so my mtime timestamps are no more granular than 1 second apart \r\n\r\n\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"tgnottingham\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74890/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74890/timeline", "performed_via_github_app": null, "state_reason": "completed"}