{"url": "https://api.github.com/repos/rust-lang/rust/issues/39255", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/39255/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/39255/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/39255/events", "html_url": "https://github.com/rust-lang/rust/issues/39255", "id": 202582055, "node_id": "MDU6SXNzdWUyMDI1ODIwNTU=", "number": 39255, "title": "Confusing type-deduction of integer literals in generic contexts", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-01-23T16:27:20Z", "updated_at": "2020-05-02T12:07:41Z", "closed_at": "2020-05-02T12:07:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The way in which the types of integer literals are deduced in generic contexts is confusing. For example, the following:\r\n\r\n```rust\r\ntrait Int {}\r\nimpl Int for i16 {}\r\nimpl Int for i32 {}\r\ntrait UInt {}\r\nimpl UInt for u16 {}\r\nimpl UInt for u32 {}\r\n\r\nfn foo<T: Int>(x: T) { println!(\"size: {}\", std::mem::size_of::<T>()); }\r\nfn bar<T: UInt>(x: T) { println!(\"size: {}\", std::mem::size_of::<T>()); }\r\n\r\nfn main() {\r\n  foo(10);\r\n  bar(10);\r\n}\r\n```\r\n\r\nworks for `foo` but fails for `bar`. Weirder is that uncommenting the  `impl UInt for u16 {}` makes it work. \r\n\r\nIMO both cases should either work or fail (I would prefer work).\r\n\r\nThe error messages is: \r\n\r\n```shell\r\nerror[E0277]: the trait bound `i32: UInt` is not satisfied\r\n  --> <anon>:13:3\r\n   |\r\n13 |   bar(10);\r\n   |   ^^^ the trait `UInt` is not implemented for `i32`\r\n   |\r\n   = note: required by `bar`\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nI interpret from this that rustc is only trying with `i32` (for whatever reason) even though the code does not contain any explicit mention of `i32` _anywhere_. Still, removing one of the impls of `UInt` makes the program type-check, so rustc is able to deduce unsigned integer types in some situations.  \r\n\r\nEDIT: After going through the book without any luck, I found the following in the Rust language reference:\r\n\r\n```quote\r\nThe type of an unsuffixed integer literal is determined by type inference:\r\n\r\n- 1. If an integer type can be uniquely determined from the surrounding program context, the unsuffixed integer literal has that type.\r\n\r\n- 2. If the program context under-constrains the type, it defaults to the signed 32-bit integer i32.\r\n\r\n- 3. If the program context over-constrains the type, it is considered a static type error.\r\n```\r\n\r\nI guess that removing the `impl UInt for u16 {}` switches from rule 2 to rule 1, explaining the behavior.", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/39255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/39255/timeline", "performed_via_github_app": null, "state_reason": "completed"}