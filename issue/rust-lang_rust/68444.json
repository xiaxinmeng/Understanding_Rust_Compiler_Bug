{"url": "https://api.github.com/repos/rust-lang/rust/issues/68444", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68444/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68444/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68444/events", "html_url": "https://github.com/rust-lang/rust/issues/68444", "id": 553273222, "node_id": "MDU6SXNzdWU1NTMyNzMyMjI=", "number": 68444, "title": "_mm256_setr_epi8 and _mm256_set_epi8 intrinsics have incorrect argument order", "user": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-22T02:39:30Z", "updated_at": "2020-01-22T03:12:25Z", "closed_at": "2020-01-22T03:12:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Edit: It seems that my confusion stemmed from `e00` being first. According to Intel's documentation, `e31` should come first. A similar intrinsic, `_mm_setr_epi8`, has the correct argument ordering.\r\n\r\n----\r\n\r\n~~It seems that `_mm256_setr_epi8` is simply initializing the vector whereas `_mm256_set_epi8` is reversing the vector. These behaviors should be opposite of one another.~~\r\n\r\nBelow is the code to reproduce this. You can check it out at https://godbolt.org/z/Z5cKaS.\r\n\r\n```rust\r\nuse std::arch::x86_64::{__m256i, _mm256_setr_epi8, _mm256_set_epi8};\r\n\r\n// This should reverse `bytes` into a `__m256i`,\r\n// but instead reads them in order.\r\n#[target_feature(enable = \"avx\")]\r\npub unsafe fn reverse(bytes: &[i8; 32]) -> __m256i {\r\n    macro_rules! indices {\r\n        ($($i:expr,)+) => {\r\n            _mm256_setr_epi8($(bytes[$i]),+)\r\n        }\r\n    }\r\n    indices! {\r\n        00, 01, 02, 03, 04, 05, 06, 07,\r\n        08, 09, 10, 11, 12, 13, 14, 15,\r\n        16, 17, 18, 19, 20, 21, 22, 23,\r\n        24, 25, 26, 27, 28, 29, 30, 31,\r\n    }\r\n}\r\n\r\n// This should initialize the `__m256i` from `bytes`\r\n// but instead reverses them.\r\n#[target_feature(enable = \"avx\")]\r\npub unsafe fn init(bytes: &[i8; 32]) -> __m256i {\r\n    macro_rules! indices {\r\n        ($($i:expr,)+) => {\r\n            _mm256_set_epi8($(bytes[$i]),+)\r\n        }\r\n    }\r\n    indices! {\r\n        00, 01, 02, 03, 04, 05, 06, 07,\r\n        08, 09, 10, 11, 12, 13, 14, 15,\r\n        16, 17, 18, 19, 20, 21, 22, 23,\r\n        24, 25, 26, 27, 28, 29, 30, 31,\r\n    }\r\n}\r\n```\r\n\r\nThis produces the opposite expected assembly:\r\n\r\n```asm\r\nexample::reverse:\r\n        mov     rax, rdi\r\n        vmovups ymm0, ymmword ptr [rsi]\r\n        vmovaps ymmword ptr [rdi], ymm0\r\n        vzeroupper\r\n        ret\r\n\r\n.LCPI1_0:\r\n        .byte   15\r\n        .byte   14\r\n        .byte   13\r\n        .byte   12\r\n        .byte   11\r\n        .byte   10\r\n        .byte   9\r\n        .byte   8\r\n        .byte   7\r\n        .byte   6\r\n        .byte   5\r\n        .byte   4\r\n        .byte   3\r\n        .byte   2\r\n        .byte   1\r\n        .byte   0\r\nexample::init:\r\n        mov     rax, rdi\r\n        vmovdqu xmm0, xmmword ptr [rsi]\r\n        vmovdqu xmm1, xmmword ptr [rsi + 16]\r\n        vmovdqa xmm2, xmmword ptr [rip + .LCPI1_0]\r\n        vpshufb xmm1, xmm1, xmm2\r\n        vpshufb xmm0, xmm0, xmm2\r\n        vmovdqa xmmword ptr [rdi + 16], xmm0\r\n        vmovdqa xmmword ptr [rdi], xmm1\r\n        ret\r\n```", "closed_by": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68444/timeline", "performed_via_github_app": null, "state_reason": "completed"}