{"url": "https://api.github.com/repos/rust-lang/rust/issues/64130", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/64130/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/64130/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/64130/events", "html_url": "https://github.com/rust-lang/rust/issues/64130", "id": 488729577, "node_id": "MDU6SXNzdWU0ODg3Mjk1Nzc=", "number": 64130, "title": "non-send futures error at point of use, but could cite point of definition in some cases", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259720434, "node_id": "MDU6TGFiZWwxMjU5NzIwNDM0", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Polish", "name": "AsyncAwait-Polish", "color": "d4c5f9", "default": false, "description": "Async-await issues that are part of the \"polish\" area"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "closed", "locked": false, "assignee": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2019-09-03T17:24:39Z", "updated_at": "2019-12-17T18:27:58Z", "closed_at": "2019-12-17T18:27:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider this example ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=5f67107e3c9fb3e10aafd83295b3fbf4)):\r\n\r\n```rust\r\n#![feature(async_await)]\r\n\r\nuse std::sync::Mutex;\r\n\r\nfn is_send<T: Send>(t: T) {\r\n    \r\n}\r\n\r\nasync fn foo() {\r\n  bar(&Mutex::new(22)).await;\r\n}\r\n\r\nasync fn bar(x: &Mutex<u32>) {\r\n  let g = x.lock().unwrap();\r\n  baz().await;\r\n}\r\n\r\nasync fn baz() {\r\n    \r\n}\r\n\r\nfn main() {\r\n    is_send(foo());\r\n} \r\n```\r\n\r\nThis program is in error because `bar()` is holding a mutex guard (which is not `Send`) live across the `baz().await` call. The error however is rather opaque:\r\n\r\n```\r\nerror[E0277]: `std::sync::MutexGuard<'_, u32>` cannot be sent between threads safely\r\n  --> src/main.rs:23:5\r\n   |\r\n23 |     is_send(foo());\r\n   |     ^^^^^^^ `std::sync::MutexGuard<'_, u32>` cannot be sent between threads safely\r\n   |\r\n   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard<'_, u32>`\r\n   = note: required because it appears within the type `for<'r, 's> {&'r std::sync::Mutex<u32>, std::sync::MutexGuard<'s, u32>, impl std::future::Future, ()}`\r\n   = note: required because it appears within the type `[static generator@src/main.rs:13:30: 16:2 x:&std::sync::Mutex<u32> for<'r, 's> {&'r std::sync::Mutex<u32>, std::sync::MutexGuard<'s, u32>, impl std::future::Future, ()}]`\r\n   = note: required because it appears within the type `std::future::GenFuture<[static generator@src/main.rs:13:30: 16:2 x:&std::sync::Mutex<u32> for<'r, 's> {&'r std::sync::Mutex<u32>, std::sync::MutexGuard<'s, u32>, impl std::future::Future, ()}]>`\r\n   = note: required because it appears within the type `impl std::future::Future`\r\n   = note: required because it appears within the type `impl std::future::Future`\r\n   = note: required because it appears within the type `for<'r> {impl std::future::Future, ()}`\r\n   = note: required because it appears within the type `[static generator@src/main.rs:9:16: 11:2 for<'r> {impl std::future::Future, ()}]`\r\n   = note: required because it appears within the type `std::future::GenFuture<[static generator@src/main.rs:9:16: 11:2 for<'r> {impl std::future::Future, ()}]>`\r\n   = note: required because it appears within the type `impl std::future::Future`\r\n   = note: required because it appears within the type `impl std::future::Future`\r\nnote: required by `is_send`\r\n  --> src/main.rs:5:1\r\n   |\r\n5  | fn is_send<T: Send>(t: T) {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nWhen discussing this error, [@cramertj suggested](https://internals.rust-lang.org/t/how-often-do-you-want-non-send-futures/10360/8?u=nikomatsakis) that we might look for patterns like this and try to offer a customized error. They sketched out\r\n\r\n```\r\nerror[E0277]: `foo()` cannot be sent between threads\r\nnote: the `is_send` function requires `T: Send`:\r\n  --> src/main.rs:5:1\r\n   |\r\n5  | fn is_send<T: Send>(t: T) {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^\r\nbut in this invocation, the `foo()` is not `Send`\r\n  --> src/main.rs:23:5\r\n   |\r\n23 |     is_send(foo());\r\n   |             ^^^^^\r\nbecause it is of type `impl Future<Output = ()>`\r\nwhich contains an `std::sync::MutexGuard<'_, u32>`\r\nnote: pass `--full-error-type-info` for more information\r\n```\r\n\r\nSomething along these lines could be a big improvement!\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"davidtwco\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/64130/reactions", "total_count": 15, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 15, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/64130/timeline", "performed_via_github_app": null, "state_reason": "completed"}