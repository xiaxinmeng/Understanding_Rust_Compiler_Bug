{"url": "https://api.github.com/repos/rust-lang/rust/issues/63758", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63758/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63758/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63758/events", "html_url": "https://github.com/rust-lang/rust/issues/63758", "id": 483077965, "node_id": "MDU6SXNzdWU0ODMwNzc5NjU=", "number": 63758, "title": "Implementation of Ord for integers is suboptimal", "user": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 289259951, "node_id": "MDU6TGFiZWwyODkyNTk5NTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-help-wanted", "name": "E-help-wanted", "color": "02E10C", "default": false, "description": "Call for participation: Help is requested to fix this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-20T20:55:11Z", "updated_at": "2019-08-22T21:51:18Z", "closed_at": "2019-08-22T21:51:18Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The current implementation of `Ord::cmp` for integral types results in less than optimal code. Currently the implementation looks something like this:\r\n\r\n```rust                \r\nfn cmp(&self, other: &$t) -> Ordering {\r\n    if *self == *other { Equal }\r\n    else if *self < *other { Less }\r\n    else { Greater }\r\n}\r\n```\r\n\r\nThis results in the following IR:\r\n\r\n```llvm\r\n  %2 = icmp eq i64 %0, %1\r\n  %3 = icmp ult i64 %0, %1\r\n  %..i = select i1 %3, i8 -1, i8 1\r\n  %_0.0.i = select i1 %2, i8 0, i8 %..i\r\n  ret i8 %_0.0.i\r\n```\r\n\r\nwhich, on x86, becomes\r\n\r\n```asm\r\n\tcmpq\t%rsi, %rdi\r\n\tsetae\t%al\r\n\tcmpq\t%rsi, %rdi\r\n\tje\t.LBB0_1\r\n\taddb\t%al, %al\r\n\taddb\t$-1, %al\r\n        ; exit (retq)\r\n    .LBB0_1:\r\n\txorl\t%eax, %eax\r\n        ; exit (retq)\r\n```\r\n\r\nwhere the critical path looks like this (courtesy of `llvm-mca -mcpu=broadwell`):\r\n\r\n```\r\n              Instruction                                 Dependency Information\r\n +----< 0.    cmpq\t%rsi, %rdi\r\n +----> 1.    setae\t%al                               ## REGISTER dependency:  %flags\r\n |      2.    cmpq\t%rsi, %rdi\r\n |      3.    je\t.LBB0_1\r\n +----> 4.    addb\t%al, %al                          ## REGISTER dependency:  %al\r\n +----> 5.    addb\t$-1, %al                          ## REGISTER dependency:  %al\r\n |      6.    ; exit\r\n |      7.    xorl\t%eax, %eax\r\n |      8.    ; exit\r\n |\r\n |    < loop carried > \r\n |\r\n +----> 2.    cmpq\t%rsi, %rdi                        ## RESOURCE interference:  BWPort1 [ probability: 25% ]\r\n```\r\n\r\n---\r\n\r\nif the implementation instead was:\r\n\r\n```rust\r\n    if a < b {\r\n        std::cmp::Ordering::Less\r\n    } else if a > b {\r\n        std::cmp::Ordering::Greater\r\n    } else {\r\n        std::cmp::Ordering::Equal\r\n    }\r\n```\r\n\r\nthe IR would become\r\n\r\n```llvm\r\n  %0 = icmp ult i64 %a, %b\r\n  %1 = icmp ugt i64 %a, %b\r\n  %. = zext i1 %1 to i8\r\n  %_0.0 = select i1 %0, i8 -1, i8 %.\r\n  ret i8 %_0.0\r\n```\r\n\r\nwhich in turn would compile down to\r\n\r\n```asm\r\n\tmovb\t$-1, %al\r\n\tcmpq\t%rsi, %rdi\r\n\tseta\t%cl\r\n\tjb\t.LBB1_2\r\n\tmovl\t%ecx, %eax\r\n    .LBB1_2:\r\n        ; exit (retq)\r\n```\r\n\r\nfor which the critical path (as expected) only becomes visible on a 2nd iteration:\r\n\r\n```\r\n              Instruction                                 Dependency Information\r\n +----< 2.    seta\t%cl\r\n |\r\n |    < loop carried > \r\n |\r\n |      0.    movb\t$-1, %al\r\n +----> 1.    cmpq\t%rsi, %rdi                        ## RESOURCE interference:  BWPort6 [ probability: 97% ]\r\n +----> 2.    seta\t%cl                               ## REGISTER dependency:  %flags\r\n |      3.    jb\t.LBB1_2\r\n +----> 4.    movl\t%ecx, %eax                        ## REGISTER dependency:  %cl\r\n```\r\n\r\nllvm-mca reports that the reciprocal throughput for the improved version is 1.5 or lower (getting as low as 1.3 on znver1; lower is better for reciprocal throughput) for various x86 architectures whereas the old code always exceeds 2.0, reaching 3.0 on `core2`.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63758/timeline", "performed_via_github_app": null, "state_reason": "completed"}