{"url": "https://api.github.com/repos/rust-lang/rust/issues/82398", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82398/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82398/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82398/events", "html_url": "https://github.com/rust-lang/rust/issues/82398", "id": 813432405, "node_id": "MDU6SXNzdWU4MTM0MzI0MDU=", "number": 82398, "title": "Correctly expanded macro_rules! still throws error", "user": {"login": "Ofenhed", "id": 780644, "node_id": "MDQ6VXNlcjc4MDY0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/780644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ofenhed", "html_url": "https://github.com/Ofenhed", "followers_url": "https://api.github.com/users/Ofenhed/followers", "following_url": "https://api.github.com/users/Ofenhed/following{/other_user}", "gists_url": "https://api.github.com/users/Ofenhed/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ofenhed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ofenhed/subscriptions", "organizations_url": "https://api.github.com/users/Ofenhed/orgs", "repos_url": "https://api.github.com/users/Ofenhed/repos", "events_url": "https://api.github.com/users/Ofenhed/events{/privacy}", "received_events_url": "https://api.github.com/users/Ofenhed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-02-22T11:54:57Z", "updated_at": "2022-07-02T14:05:49Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\nmacro_rules! parse {\r\n  ($var:expr => $varname:ident: $type:ty) => {\r\n    let $varname: $type = $var.parse().map_err(|x| std::io::Error::new(std::io::ErrorKind::Other, x))?;\r\n  };\r\n  (($($args:tt)+) $(,)?) => {\r\n    parse!($($args)+)\r\n  };\r\n  (($($args:tt)+), $($rest:tt)+) => {\r\n    parse!($($args)+);\r\n    parse!($($rest)+)\r\n  };\r\n  () => {};\r\n}\r\nfn main() -> std::io::Result<()> {\r\n    let var1 = \"50\";\r\n    let var2 = \"60\";\r\n    trace_macros!(true);\r\n    parse!((var1 => newvar1: u8), (var2 => newvar2: u8)); // Doesn't work\r\n    //parse!(var1 => newvar1: u8); // Works\r\n    //parse!(var2 => newvar2: u8); // Works\r\n    println!(\"{}\", newvar1);\r\n    Ok(())\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.50.0 (cb75ad5db 2021-02-10)\r\nbinary: rustc\r\ncommit-hash: cb75ad5db02783e8b0222fee363c5f63f7e2cf5b\r\ncommit-date: 2021-02-10\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.50.0\r\n```\r\nAlso ran in [rust playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=e872016d67d9d69a1f1f0c156c0cf5e8) with versions:\r\n```\r\n1.50.0\r\n1.52.0-nightly (2021-02-14 5fa22fe6f821ac3801d0)\n1.62.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change\r\n  --> src/main.rs:17:5\r\n   |\r\n17 |     trace_macros!(true);\r\n   |     ^^^^^^^^^^^^\r\n   |\r\n   = note: see issue #29598 <https://github.com/rust-lang/rust/issues/29598> for more information\r\n   = help: add `#![feature(trace_macros)]` to the crate attributes to enable\r\n\r\nerror: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\r\n  --> src/main.rs:18:18\r\n   |\r\n18 |     parse!((var1 => newvar1: u8), (var2 => newvar2: u8));\r\n   |                  ^^ expected one of 8 possible tokens\r\n\r\nerror: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\r\n  --> src/main.rs:18:41\r\n   |\r\n18 |     parse!((var1 => newvar1: u8), (var2 => newvar2: u8));\r\n   |                                         ^^ expected one of 8 possible tokens\r\n\r\nnote: trace_macro\r\n  --> src/main.rs:21:5\r\n   |\r\n21 |     println!(\"{}\", newvar1);\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: expanding `println! { \"{}\", newvar1 }`\r\n   = note: to `{ $crate :: io :: _print($crate :: format_args_nl ! (\"{}\", newvar1)) ; }`\r\n\r\nnote: trace_macro\r\n  --> src/main.rs:18:5\r\n   |\r\n18 |     parse!((var1 => newvar1: u8), (var2 => newvar2: u8));\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: expanding `parse! { (var1 => newvar1 : u8), (var2 => newvar2 : u8) }`\r\n   = note: to `parse ! (var1 => newvar1 : u8) ; parse ! ((var2 => newvar2 : u8))`\r\n   = note: expanding `parse! { var1 => newvar1 : u8 }`\r\n   = note: to `let newvar1 : u8 = var1 . parse() .\r\n           map_err(| x | std :: io :: Error :: new(std :: io :: ErrorKind :: Other, x)) ?\r\n           ;`\r\n   = note: expanding `parse! { (var2 => newvar2 : u8) }`\r\n   = note: to `parse ! (var2 => newvar2 : u8)`\r\n   = note: expanding `parse! { var2 => newvar2 : u8 }`\r\n   = note: to `let newvar2 : u8 = var2 . parse() .\r\n           map_err(| x | std :: io :: Error :: new(std :: io :: ErrorKind :: Other, x)) ?\r\n           ;`\r\n\r\nerror: aborting due to 3 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0658`.\r\nerror: could not compile `playground`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\nNote that the `trace_macros!` macro shows the correct output of the macro, yet the compilation fails.\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nNo compiler crash; no additional information.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82398/timeline", "performed_via_github_app": null, "state_reason": null}