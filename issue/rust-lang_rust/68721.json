{"url": "https://api.github.com/repos/rust-lang/rust/issues/68721", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68721/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68721/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68721/events", "html_url": "https://github.com/rust-lang/rust/issues/68721", "id": 558447467, "node_id": "MDU6SXNzdWU1NTg0NDc0Njc=", "number": 68721, "title": "static mut bindings don't raise unused_mut diagnostic", "user": {"login": "Arnavion", "id": 1096010, "node_id": "MDQ6VXNlcjEwOTYwMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1096010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arnavion", "html_url": "https://github.com/Arnavion", "followers_url": "https://api.github.com/users/Arnavion/followers", "following_url": "https://api.github.com/users/Arnavion/following{/other_user}", "gists_url": "https://api.github.com/users/Arnavion/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arnavion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arnavion/subscriptions", "organizations_url": "https://api.github.com/users/Arnavion/orgs", "repos_url": "https://api.github.com/users/Arnavion/repos", "events_url": "https://api.github.com/users/Arnavion/events{/privacy}", "received_events_url": "https://api.github.com/users/Arnavion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-01T00:46:07Z", "updated_at": "2020-02-01T00:51:13Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "```rust\r\n#[deny(unused_mut)]\r\npub unsafe fn foo() {\r\n    static mut X: std::sync::Once = std::sync::Once::new();\r\n    X.call_once(|| { /**/ });\r\n}\r\n```\r\n\r\n... [compiles fine.](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=eb6b3a8bd59dee6e53161934988de3e7) Using `let mut X` does fail as expected.\r\n\r\nI can imagine it would be hard to do this for module-scoped `static`s since the mutable access could occur in any scope the value is visible to, but could it be done for function-scoped ones at least?\r\n\r\n---\r\n\r\nI discovered this in a crate with a bunch of function-scoped `Once`s, and just happened to notice some of them had been created with `static mut` and others with just `static`, indicating the `mut` was unnecessary even though the compiler didn't complain.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68721/timeline", "performed_via_github_app": null, "state_reason": null}