{"url": "https://api.github.com/repos/rust-lang/rust/issues/80481", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80481/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80481/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80481/events", "html_url": "https://github.com/rust-lang/rust/issues/80481", "id": 776030412, "node_id": "MDU6SXNzdWU3NzYwMzA0MTI=", "number": 80481, "title": "Rustdoc should not show impls with a `where` clause that is always false", "user": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-12-29T18:28:20Z", "updated_at": "2022-10-05T02:42:23Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "`pin_project_lite` generates code that looks like this:\r\n\r\n```rust\r\n        impl <'__pin> ::pin_project_lite::__private::Unpin for Sleep<> where\r\n         __Origin<'__pin>: ::pin_project_lite::__private::Unpin {\r\n        }\r\n```\r\n\r\n<details><summary>Full output of <code>cargo expand</code></summary>\r\n\r\n```\r\n#![feature(prelude_import)]\r\n#[prelude_import]\r\nuse std::prelude::v1::*;\r\n#[macro_use]\r\nextern crate std;\r\nuse pin_project_lite::pin_project;\r\n\r\nstruct TimerEntry {\r\n}\r\n\r\n\r\n// The link between the `Sleep` instance and the timer that drives it.\r\n#[doc = r\" Future returned by [`sleep`](sleep) and\"]\r\n#[doc = r\" [`sleep_until`](sleep_until).\"]\r\n#[must_use = \"futures do nothing unless you `.await` or poll them\"]\r\npub struct Sleep {\r\n    deadline: std::time::Duration,\r\n    entry: TimerEntry,\r\n}\r\n#[automatically_derived]\r\n#[allow(unused_qualifications)]\r\nimpl ::core::fmt::Debug for Sleep {\r\n    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\r\n        match *self {\r\n            Sleep { deadline: ref __self_0_0, entry: ref __self_0_1 } => {\r\n                let mut debug_trait_builder = f.debug_struct(\"Sleep\");\r\n                let _ =\r\n                    debug_trait_builder.field(\"deadline\", &&(*__self_0_0));\r\n                let _ = debug_trait_builder.field(\"entry\", &&(*__self_0_1));\r\n                debug_trait_builder.finish()\r\n            }\r\n        }\r\n    }\r\n}\r\n#[allow(explicit_outlives_requirements)]\r\n#[allow(single_use_lifetimes)]\r\n#[allow(clippy :: redundant_pub_crate)]\r\n#[allow(clippy :: used_underscore_binding)]\r\nconst _: () =\r\n    {\r\n        #[allow(dead_code)]\r\n        #[allow(single_use_lifetimes)]\r\n        #[allow(clippy :: mut_mut)]\r\n        #[allow(clippy :: redundant_pub_crate)]\r\n        #[allow(clippy :: type_repetition_in_bounds)]\r\n        pub(crate) struct Projection<'__pin> where Sleep<>: '__pin {\r\n            deadline: &'__pin mut (std::time::Duration),\r\n            entry: ::pin_project_lite::__private::Pin<&'__pin mut (TimerEntry)>,\r\n        }\r\n        #[allow(dead_code)]\r\n        #[allow(single_use_lifetimes)]\r\n        #[allow(clippy :: mut_mut)]\r\n        #[allow(clippy :: redundant_pub_crate)]\r\n        #[allow(clippy :: type_repetition_in_bounds)]\r\n        pub(crate) struct ProjectionRef<'__pin> where Sleep<>: '__pin {\r\n            deadline: &'__pin (std::time::Duration),\r\n            entry: ::pin_project_lite::__private::Pin<&'__pin (TimerEntry)>,\r\n        }\r\n        impl Sleep<> {\r\n            pub(crate) fn project<'__pin>(self:\r\n                                              ::pin_project_lite::__private::Pin<&'__pin mut Self>)\r\n             -> Projection<'__pin> {\r\n                unsafe {\r\n                    let Self { deadline, entry } = self.get_unchecked_mut();\r\n                    Projection{deadline: deadline,\r\n                               entry:\r\n                                   ::pin_project_lite::__private::Pin::new_unchecked(entry),}\r\n                }\r\n            }\r\n            pub(crate) fn project_ref<'__pin>(self:\r\n                                                  ::pin_project_lite::__private::Pin<&'__pin Self>)\r\n             -> ProjectionRef<'__pin> {\r\n                unsafe {\r\n                    let Self { deadline, entry } = self.get_ref();\r\n                    ProjectionRef{deadline: deadline,\r\n                                  entry:\r\n                                      ::pin_project_lite::__private::Pin::new_unchecked(entry),}\r\n                }\r\n            }\r\n        }\r\n        #[allow(non_snake_case)]\r\n        pub struct __Origin<'__pin> {\r\n            __dummy_lifetime: ::pin_project_lite::__private::PhantomData<&'__pin ()>,\r\n            deadline: ::pin_project_lite::__private::AlwaysUnpin<std::time::Duration>,\r\n            entry: TimerEntry,\r\n        }\r\n        impl <'__pin> ::pin_project_lite::__private::Unpin for Sleep<> where\r\n         __Origin<'__pin>: ::pin_project_lite::__private::Unpin {\r\n        }\r\n        trait MustNotImplDrop { }\r\n        #[allow(clippy :: drop_bounds, drop_bounds)]\r\n        impl <T: ::pin_project_lite::__private::Drop> MustNotImplDrop for T {\r\n        }\r\n        impl MustNotImplDrop for Sleep<> { }\r\n        #[forbid(safe_packed_borrows)]\r\n        fn __assert_not_repr_packed(this: &Sleep<>) {\r\n            let _ = &this.deadline;\r\n            let _ = &this.entry;\r\n        }\r\n    };\r\n```\r\n\r\n</details>\r\n\r\nRustdoc in turn generates documentation like this:\r\n```rust\r\nimpl<'__pin> Unpin for Sleep where\r\n    __Origin<'__pin>: Unpin, \r\n```\r\n![image](https://user-images.githubusercontent.com/23638587/103305582-813e3280-49d9-11eb-9a20-a157c73e9c1d.png)\r\n\r\nThis is really unfortunate, because `__Origin` does not in fact implement `Unpin`. Rustdoc shouldn't show trait implementations that can never be applied.\r\n\r\n_Originally posted by @jyn514 in https://github.com/tokio-rs/tokio/issues/3330#issuecomment-751940935_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80481/timeline", "performed_via_github_app": null, "state_reason": null}