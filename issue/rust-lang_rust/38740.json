{"url": "https://api.github.com/repos/rust-lang/rust/issues/38740", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38740/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38740/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38740/events", "html_url": "https://github.com/rust-lang/rust/issues/38740", "id": 198230575, "node_id": "MDU6SXNzdWUxOTgyMzA1NzU=", "number": 38740, "title": "rustdoc doesn't emit section header in certain conditions", "user": {"login": "whitequark", "id": 54771, "node_id": "MDQ6VXNlcjU0Nzcx", "avatar_url": "https://avatars.githubusercontent.com/u/54771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitequark", "html_url": "https://github.com/whitequark", "followers_url": "https://api.github.com/users/whitequark/followers", "following_url": "https://api.github.com/users/whitequark/following{/other_user}", "gists_url": "https://api.github.com/users/whitequark/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitequark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitequark/subscriptions", "organizations_url": "https://api.github.com/users/whitequark/orgs", "repos_url": "https://api.github.com/users/whitequark/repos", "events_url": "https://api.github.com/users/whitequark/events{/privacy}", "received_events_url": "https://api.github.com/users/whitequark/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-31T12:27:43Z", "updated_at": "2017-05-14T14:59:51Z", "closed_at": "2017-05-14T14:59:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Consider this doc comment:\r\n\r\n    //! Access to networking hardware.\r\n    //!\r\n    //! The `phy` module deals with the *network devices*. It provides a trait\r\n    //! for transmitting and receiving frames, [Device](trait.Device.html),\r\n    //! as well as an implementations of that trait that uses the host OS,\r\n    //! [RawSocket](struct.RawSocket.html) and [TapInterface](struct.TapInterface.html).\r\n    //!\r\n    //! It also provides the _middleware interfaces_ [Tracer](struct.Tracer.html) and\r\n    //! [FaultInjector](struct.FaultInjector.html), to facilitate debugging.\r\n    //!\r\n    //! # Examples\r\n    //!\r\n    //! An implementation of the [Device](trait.Device.html) trait for a simple hardware\r\n    //! Ethernet controller could look as follows:\r\n    //!\r\n    /*!\r\n    ```rust\r\n    use std::slice;\r\n    use smoltcp::Error;\r\n    use smoltcp::phy::Device;\r\n\r\n    const MTU: usize = 1536;\r\n    const TX_BUFFERS: [*mut u8; 2] = [0x10000000 as *mut u8, 0x10001000 as *mut u8];\r\n    const RX_BUFFERS: [*mut u8; 2] = [0x10002000 as *mut u8, 0x10003000 as *mut u8];\r\n\r\n    fn rx_full() -> bool {\r\n        /* platform-specific code to check if an incoming packet has arrived */\r\n        false\r\n    }\r\n\r\n    fn rx_setup(buf: *mut u8) {\r\n        /* platform-specific code to receive a packet into a buffer */\r\n    }\r\n\r\n    fn tx_empty() -> bool {\r\n        /* platform-specific code to check if the outgoing packet was sent */\r\n        false\r\n    }\r\n\r\n    fn tx_setup(buf: *const u8) {\r\n        /* platform-specific code to send a buffer with a packet */\r\n    }\r\n\r\n    struct EthernetDevice {\r\n        tx_next:    usize,\r\n        rx_next:    usize\r\n    }\r\n\r\n    impl Device for EthernetDevice {\r\n        type RxBuffer = &'static [u8];\r\n        type TxBuffer = EthernetTxBuffer;\r\n\r\n        fn mtu(&self) -> usize { MTU }\r\n\r\n        fn receive(&mut self) -> Result<Self::RxBuffer, Error> {\r\n            if rx_full() {\r\n                let index = self.rx_next;\r\n                self.rx_next = (self.rx_next + 1) % RX_BUFFERS.len();\r\n                rx_setup(RX_BUFFERS[self.rx_next]);\r\n                Ok(unsafe { slice::from_raw_parts(RX_BUFFERS[index], MTU) })\r\n            } else {\r\n                Err(Error::Exhausted)\r\n            }\r\n        }\r\n\r\n        fn transmit(&mut self, length: usize) -> Result<Self::TxBuffer, Error> {\r\n            if tx_empty() {\r\n                let index = self.tx_next;\r\n                self.tx_next = (self.tx_next + 1) % TX_BUFFERS.len();\r\n                Ok(EthernetTxBuffer {\r\n                    buffer: unsafe { slice::from_raw_parts_mut(TX_BUFFERS[index], length) },\r\n                    length: length,\r\n                })\r\n            } else {\r\n                Err(Error::Exhausted)\r\n            }\r\n        }\r\n    }\r\n\r\n    struct EthernetTxBuffer {\r\n        buffer: &'static mut [u8],\r\n        length: usize\r\n    }\r\n\r\n    impl AsRef<[u8]> for EthernetTxBuffer {\r\n        fn as_ref(&self) -> &[u8] { &self.buffer[..self.length] }\r\n    }\r\n\r\n    impl AsMut<[u8]> for EthernetTxBuffer {\r\n        fn as_mut(&mut self) -> &mut [u8] { &mut self.buffer[..self.length] }\r\n    }\r\n\r\n    impl Drop for EthernetTxBuffer {\r\n        fn drop(&mut self) {\r\n            tx_setup(self.buffer.as_ptr())\r\n        }\r\n    }\r\n    ```\r\n    */\r\n\r\nFor some reason the `# Example` is rendered as-is. It is related to the code snippet, in some way I was unable to determine.", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38740/timeline", "performed_via_github_app": null, "state_reason": "completed"}