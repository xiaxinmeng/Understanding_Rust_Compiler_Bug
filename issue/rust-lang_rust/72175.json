{"url": "https://api.github.com/repos/rust-lang/rust/issues/72175", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72175/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72175/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72175/events", "html_url": "https://github.com/rust-lang/rust/issues/72175", "id": 617727666, "node_id": "MDU6SXNzdWU2MTc3Mjc2NjY=", "number": 72175, "title": "Document FromRawFd unsafety", "user": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2020-05-13T20:18:49Z", "updated_at": "2022-03-03T14:52:52Z", "closed_at": "2022-03-03T14:52:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently the documentation of FromRawFd uses vague language:\r\n\r\n>This function is also unsafe as the primitives currently returned have the contract that they are the sole owner of the file descriptor they are wrapping. Usage of this function could accidentally allow violating this contract which can cause memory unsafety in code that relies on it being true.\r\n\r\nWhat kind of memory safety issues is this quote referring to?\r\n\r\nUsing the nix crate it is not hard to write FromRawFd using only safe code:\r\n\r\n```rust\r\nuse nix::{\r\n    fcntl::{open, OFlag},\r\n    sys::stat::Mode,\r\n    unistd::dup2,\r\n};\r\nuse std::{\r\n    fs::{self, File},\r\n    io::Read,\r\n    os::unix::io::AsRawFd,\r\n};\r\n\r\nfn main() {\r\n    fs::write(\"a\", \"a\").unwrap();\r\n    fs::write(\"b\", \"b\").unwrap();\r\n\r\n    let mut a = File::open(\"a\").unwrap();\r\n    let b = open(\"b\", OFlag::O_RDONLY, Mode::empty()).unwrap();\r\n\r\n    dup2(b, a.as_raw_fd()).unwrap();\r\n\r\n    let mut a_contents = String::new();\r\n    a.read_to_string(&mut a_contents).unwrap();\r\n\r\n    assert!(a_contents == \"b\");\r\n}\r\n```\r\n\r\nThis is the simplest way but you can also use `close` on the returned file descriptor and then call `File::open` again to create two `File`s with the same underlying file descriptor.\r\n\r\nWhat about performing the various `fcntl` operation on the value returned by `as_raw_fd`? Can these also cause memory unsafety? Must all methods operating on file descriptors in nix be marked unsafe because `as_raw_fd` is a safe function?\r\n\r\nGiven the current state of the `AsRawFd` and the existence of other safe crates which allow manipulating the returned file descriptor, there should be very good reasons to keep `from_raw_fd` unsafe and these should be documented. Otherwise `from_raw_fd` should be made safe with a clear warning that odd (but not unsafe) things might happen if the assumptions about ownership are violated.", "closed_by": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72175/timeline", "performed_via_github_app": null, "state_reason": "completed"}