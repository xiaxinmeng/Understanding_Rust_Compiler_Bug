{"url": "https://api.github.com/repos/rust-lang/rust/issues/61434", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61434/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61434/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61434/events", "html_url": "https://github.com/rust-lang/rust/issues/61434", "id": 451106694, "node_id": "MDU6SXNzdWU0NTExMDY2OTQ=", "number": 61434, "title": "Incorrect elimination of `loop {}`", "user": {"login": "ksqsf", "id": 23358293, "node_id": "MDQ6VXNlcjIzMzU4Mjkz", "avatar_url": "https://avatars.githubusercontent.com/u/23358293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksqsf", "html_url": "https://github.com/ksqsf", "followers_url": "https://api.github.com/users/ksqsf/followers", "following_url": "https://api.github.com/users/ksqsf/following{/other_user}", "gists_url": "https://api.github.com/users/ksqsf/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksqsf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksqsf/subscriptions", "organizations_url": "https://api.github.com/users/ksqsf/orgs", "repos_url": "https://api.github.com/users/ksqsf/repos", "events_url": "https://api.github.com/users/ksqsf/events{/privacy}", "received_events_url": "https://api.github.com/users/ksqsf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-01T17:20:26Z", "updated_at": "2019-06-01T18:09:24Z", "closed_at": "2019-06-01T17:48:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It's observed that the following program (compile with optimizations) results in an illegal instruction exception, but does not crash when compiled without optimizations.\r\n\r\n```rust\r\nfn work() { // no `-> !` here\r\n    loop{}\r\n}\r\n\r\nfn main() {\r\n    work();\r\n    println!(\"test\")\r\n}\r\n```\r\n\r\nLLVM IR:\r\n\r\n```\r\n; playground::main\r\n; Function Attrs: norecurse noreturn nounwind nonlazybind readnone uwtable\r\ndefine internal void @_ZN10playground4main17h13d813b46f0ec3d7E() unnamed_addr #2 {\r\nstart:\r\n  unreachable\r\n}\r\n```\r\n\r\nI'm not sure how this can happen given loop's semantics. In no way should an optimization eliminate the loop altogether. My guess: LLVM or rustc substitutes `unreachable` for the body of `work`, but later `work` is inlined into `main`.\r\n\r\nI understand it's better to use `-> !` explicitly, but this code compiles cleanly without any warnings and errors. Rust's typing rules cannot rule out such programs?", "closed_by": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61434/timeline", "performed_via_github_app": null, "state_reason": "completed"}