{"url": "https://api.github.com/repos/rust-lang/rust/issues/103073", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103073/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103073/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103073/events", "html_url": "https://github.com/rust-lang/rust/issues/103073", "id": 1409966765, "node_id": "I_kwDOAAsO6M5UCmKt", "number": 103073, "title": "Weird Match Statement Codegen With Byte Strings", "user": {"login": "SE2Dev", "id": 5873790, "node_id": "MDQ6VXNlcjU4NzM3OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5873790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SE2Dev", "html_url": "https://github.com/SE2Dev", "followers_url": "https://api.github.com/users/SE2Dev/followers", "following_url": "https://api.github.com/users/SE2Dev/following{/other_user}", "gists_url": "https://api.github.com/users/SE2Dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/SE2Dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SE2Dev/subscriptions", "organizations_url": "https://api.github.com/users/SE2Dev/orgs", "repos_url": "https://api.github.com/users/SE2Dev/repos", "events_url": "https://api.github.com/users/SE2Dev/events{/privacy}", "received_events_url": "https://api.github.com/users/SE2Dev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-10-14T23:35:08Z", "updated_at": "2022-11-11T05:36:25Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nIt seems that with the following snippet of code results in some rather strange codegen:\r\n\r\n```rust\r\npub enum MyEnum {\r\n    A,\r\n    B,\r\n    C,\r\n    D,\r\n}\r\n\r\nimpl MyEnum {\r\n    pub fn try_from_matched(value: [u8; 4]) -> Result<Self, ()> {\r\n        match &value {\r\n            b\"ABCD\" => Ok(Self::A),\r\n            b\"EFGH\" => Ok(Self::B),\r\n            b\"IJKL\" => Ok(Self::C),\r\n            b\"MNOP\" => Ok(Self::D),\r\n            _ => Err(()),\r\n        }\r\n    }    \r\n}\r\n```\r\n\r\nThe following is produced with `-C opt-level=2`:\r\n\r\n```asm\r\nexample::MyEnum::try_from_matched:\r\n        lea     edx, [rdi - 65]\r\n        rol     dl, 6\r\n        cmp     dl, 3\r\n        ja      .LBB0_1\r\n        mov     ecx, edi\r\n        shr     ecx, 8\r\n        mov     eax, edi\r\n        shr     eax, 16\r\n        shr     edi, 24\r\n        movzx   edx, dl\r\n        lea     rsi, [rip + .LJTI0_0]\r\n        movsxd  rdx, dword ptr [rsi + 4*rdx]\r\n        add     rdx, rsi\r\n        jmp     rdx\r\n.LBB0_3:\r\n        xor     cl, 66\r\n        xor     al, 67\r\n        or      al, cl\r\n        xor     dil, 68\r\n        or      dil, al\r\n        setne   al\r\n        shl     al, 2\r\n        ret\r\n.LBB0_1:\r\n        mov     al, 4\r\n        ret\r\n.LBB0_4:\r\n        xor     cl, 70\r\n        xor     al, 71\r\n        or      al, cl\r\n        xor     dil, 72\r\n        xor     ecx, ecx\r\n        or      dil, al\r\n        setne   cl\r\n        lea     eax, [rcx + 2*rcx]\r\n        add     eax, 1\r\n        ret\r\n.LBB0_5:\r\n        xor     cl, 74\r\n        xor     al, 75\r\n        or      al, cl\r\n        xor     dil, 76\r\n        or      dil, al\r\n        setne   al\r\n        add     al, al\r\n        add     al, 2\r\n        ret\r\n.LBB0_6:\r\n        xor     cl, 78\r\n        xor     al, 79\r\n        or      al, cl\r\n        xor     dil, 80\r\n        or      dil, al\r\n        sete    cl\r\n        mov     al, 4\r\n        sub     al, cl\r\n        ret\r\n.LJTI0_0:\r\n        .long   .LBB0_3-.LJTI0_0\r\n        .long   .LBB0_4-.LJTI0_0\r\n        .long   .LBB0_5-.LJTI0_0\r\n        .long   .LBB0_6-.LJTI0_0\r\n```\r\n\r\nI would expect something like this to be produced instead (specifically with optimizations enabled):\r\n\r\n```asm\r\nexample::MyEnum::try_from_matched:\r\n        cmp     edi, 1145258561\r\n        je      .LBB0_1\r\n        cmp     edi, 1280002633\r\n        je      .LBB0_5\r\n        cmp     edi, 1212630597\r\n        jne     .LBB0_7\r\n        mov     al, 1\r\n        ret\r\n.LBB0_1:\r\n        xor     eax, eax\r\n        ret\r\n.LBB0_5:\r\n        mov     al, 2\r\n        ret\r\n.LBB0_7:\r\n        cmp     edi, 1347374669\r\n        sete    cl\r\n        mov     al, 4\r\n        sub     al, cl\r\n        ret\r\n```\r\n\r\nAn example is available here: https://rust.godbolt.org/z/EEKr43rP8\r\n\r\nFor what it's worth, at `-C opt-level=0` it becomes apparent that the `if/else` version uses `PartialEq` while the `match` version doesn't. I suspect that this is resulting in the optimizations for the two examples being processed differently.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\n1.64.0 (also affects nightly and others)\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103073/timeline", "performed_via_github_app": null, "state_reason": null}