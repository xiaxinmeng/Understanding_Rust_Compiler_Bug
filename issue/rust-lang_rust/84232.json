{"url": "https://api.github.com/repos/rust-lang/rust/issues/84232", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84232/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84232/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84232/events", "html_url": "https://github.com/rust-lang/rust/issues/84232", "id": 859306441, "node_id": "MDU6SXNzdWU4NTkzMDY0NDE=", "number": 84232, "title": "Audit all UNTRACKED options", "user": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234876, "node_id": "MDU6TGFiZWwyMzQ4NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-hard", "name": "E-hard", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Hard / a lot"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 5226909857, "node_id": "LA_kwDOAAsO6M8AAAABN4xQoQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-cli", "name": "A-cli", "color": "f7e101", "default": false, "description": "Area: Command line interface to the compiler."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-04-15T22:46:49Z", "updated_at": "2023-03-05T01:37:01Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I know of several bugs due to untracked options that should be tracked (e.g. https://github.com/rust-lang/rust/issues/66955, https://github.com/rust-lang/rust/issues/84225). Maybe we should go through all the untracked options and make sure they should actually be untracked?\r\n\r\n<details><summary>All untracked options</summary>\r\n\r\n```\r\n$ grep '\\[UNTRACKED\\]' compiler/rustc_session/src/options.rs    ($opt_name:ident, $opt_expr:expr, $sub_hashes:expr, [UNTRACKED]) => {{}};\r\n// [UNTRACKED]\r\n        describe_lints: bool [UNTRACKED],\r\n        search_paths: Vec<SearchPath> [UNTRACKED],\r\n        maybe_sysroot: Option<PathBuf> [UNTRACKED],\r\n        error_format: ErrorOutputType [UNTRACKED],\r\n        incremental: Option<PathBuf> [UNTRACKED],\r\n        prints: Vec<PrintRequest> [UNTRACKED],\r\n        borrowck_mode: BorrowckMode [UNTRACKED],\r\n        externs: Externs [UNTRACKED],\r\n        extern_dep_specs: ExternDepSpecs [UNTRACKED],\r\n        cli_forced_codegen_units: Option<usize> [UNTRACKED],\r\n        cli_forced_thinlto_off: bool [UNTRACKED],\r\n        remap_path_prefix: Vec<(PathBuf, PathBuf)> [UNTRACKED],\r\n        json_unused_externs: bool [UNTRACKED],\r\n        pretty: Option<PpMode> [UNTRACKED],\r\n    ar: String = (String::new(), parse_string, [UNTRACKED],\r\n    codegen_units: Option<usize> = (None, parse_opt_number, [UNTRACKED],\r\n    default_linker_libraries: bool = (false, parse_bool, [UNTRACKED],\r\n    extra_filename: String = (String::new(), parse_string, [UNTRACKED],\r\n    incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\r\n    link_arg: (/* redirected to link_args */) = ((), parse_string_push, [UNTRACKED],\r\n    link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\r\n    link_dead_code: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\r\n    link_self_contained: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\r\n    linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\r\n    linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\r\n    no_stack_check: bool = (false, parse_no_flag, [UNTRACKED],\r\n    remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\r\n    rpath: bool = (false, parse_bool, [UNTRACKED],\r\n    save_temps: bool = (false, parse_bool, [UNTRACKED],\r\n    ast_json: bool = (false, parse_bool, [UNTRACKED],\r\n    ast_json_noexpand: bool = (false, parse_bool, [UNTRACKED],\r\n    borrowck: String = (\"migrate\".to_string(), parse_string, [UNTRACKED],\r\n    deduplicate_diagnostics: bool = (true, parse_bool, [UNTRACKED],\r\n    dep_tasks: bool = (false, parse_bool, [UNTRACKED],\r\n    dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\r\n    dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],\r\n    dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\r\n    dump_mir_dataflow: bool = (false, parse_bool, [UNTRACKED],\r\n    dump_mir_dir: String = (\"mir_dump\".to_string(), parse_string, [UNTRACKED],\r\n    dump_mir_exclude_pass_number: bool = (false, parse_bool, [UNTRACKED],\r\n    dump_mir_graphviz: bool = (false, parse_bool, [UNTRACKED],\r\n    dump_mir_spanview: Option<MirSpanview> = (None, parse_mir_spanview, [UNTRACKED],\r\n    emit_future_incompat_report: bool = (false, parse_bool, [UNTRACKED],\r\n    emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\r\n    graphviz_dark_mode: bool = (false, parse_bool, [UNTRACKED],\r\n    graphviz_font: String = (\"Courier, monospace\".to_string(), parse_string, [UNTRACKED],\r\n    hir_stats: bool = (false, parse_bool, [UNTRACKED],\r\n    identify_regions: bool = (false, parse_bool, [UNTRACKED],\r\n    incremental_ignore_spans: bool = (false, parse_bool, [UNTRACKED],\r\n    incremental_info: bool = (false, parse_bool, [UNTRACKED],\r\n    incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\r\n    input_stats: bool = (false, parse_bool, [UNTRACKED],\r\n    keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\r\n    link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\r\n    llvm_time_trace: bool = (false, parse_bool, [UNTRACKED],\r\n    ls: bool = (false, parse_bool, [UNTRACKED],\r\n    macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\r\n    meta_stats: bool = (false, parse_bool, [UNTRACKED],\r\n    nll_facts: bool = (false, parse_bool, [UNTRACKED],\r\n    nll_facts_dir: String = (\"nll-facts\".to_string(), parse_string, [UNTRACKED],\r\n    no_analysis: bool = (false, parse_no_flag, [UNTRACKED],\r\n    no_interleave_lints: bool = (false, parse_no_flag, [UNTRACKED],\r\n    no_leak_check: bool = (false, parse_no_flag, [UNTRACKED],\r\n    no_parallel_llvm: bool = (false, parse_no_flag, [UNTRACKED],\r\n    parse_only: bool = (false, parse_bool, [UNTRACKED],\r\n    perf_stats: bool = (false, parse_bool, [UNTRACKED],\r\n    pre_link_arg: (/* redirected to pre_link_args */) = ((), parse_string_push, [UNTRACKED],\r\n    pre_link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\r\n    print_link_args: bool = (false, parse_bool, [UNTRACKED],\r\n    print_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\r\n    print_mono_items: Option<String> = (None, parse_opt_string, [UNTRACKED],\r\n    print_type_sizes: bool = (false, parse_bool, [UNTRACKED],\r\n    proc_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\r\n    query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\r\n    query_stats: bool = (false, parse_bool, [UNTRACKED],\r\n    save_analysis: bool = (false, parse_bool, [UNTRACKED],\r\n        parse_switch_with_opt_path, [UNTRACKED],\r\n    self_profile_events: Option<Vec<String>> = (None, parse_opt_comma_list, [UNTRACKED],\r\n    span_debug: bool = (false, parse_bool, [UNTRACKED],\r\n    span_free_formats: bool = (false, parse_bool, [UNTRACKED],\r\n    strip: Strip = (Strip::None, parse_strip, [UNTRACKED],\r\n    split_dwarf_inlining: bool = (true, parse_bool, [UNTRACKED],\r\n    terminal_width: Option<usize> = (None, parse_opt_number, [UNTRACKED],\r\n    threads: usize = (1, parse_threads, [UNTRACKED],\r\n    time: bool = (false, parse_bool, [UNTRACKED],\r\n    time_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\r\n    time_passes: bool = (false, parse_bool, [UNTRACKED],\r\n    trace_macros: bool = (false, parse_bool, [UNTRACKED],\r\n    trim_diagnostic_paths: bool = (true, parse_bool, [UNTRACKED],\r\n    ui_testing: bool = (false, parse_bool, [UNTRACKED],\r\n    unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],\r\n    unstable_options: bool = (false, parse_bool, [UNTRACKED],\r\n    validate_mir: bool = (false, parse_bool, [UNTRACKED],\r\n    verbose: bool = (false, parse_bool, [UNTRACKED],\r\n```\r\n\r\n</details>\r\n\r\ncc @Aaron1011 ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84232/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84232/timeline", "performed_via_github_app": null, "state_reason": null}