{"url": "https://api.github.com/repos/rust-lang/rust/issues/69897", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69897/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69897/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69897/events", "html_url": "https://github.com/rust-lang/rust/issues/69897", "id": 578836463, "node_id": "MDU6SXNzdWU1Nzg4MzY0NjM=", "number": 69897, "title": "Meta-Macros fail at usage", "user": {"login": "Kixiron", "id": 25047011, "node_id": "MDQ6VXNlcjI1MDQ3MDEx", "avatar_url": "https://avatars.githubusercontent.com/u/25047011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kixiron", "html_url": "https://github.com/Kixiron", "followers_url": "https://api.github.com/users/Kixiron/followers", "following_url": "https://api.github.com/users/Kixiron/following{/other_user}", "gists_url": "https://api.github.com/users/Kixiron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kixiron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kixiron/subscriptions", "organizations_url": "https://api.github.com/users/Kixiron/orgs", "repos_url": "https://api.github.com/users/Kixiron/repos", "events_url": "https://api.github.com/users/Kixiron/events{/privacy}", "received_events_url": "https://api.github.com/users/Kixiron/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-10T20:18:05Z", "updated_at": "2020-03-10T23:56:51Z", "closed_at": "2020-03-10T23:56:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "When creating meta-macros (macros that generate macros) using the following code:\r\n\r\n```rust\r\nmacro_rules! generate_tuple_expansion {\r\n    (($dollar:tt, $others:ident) $(($field:literal, $ident:ident)),*) => {\r\n        generate_tuple_expansion! {\r\n            @inner ($dollar, $others) [] [] [] $( ($field, $ident) )*\r\n        }\r\n    };\r\n\r\n    (@inner ($dollar:tt, $others:ident) [$($finished:tt)*] [$($match:tt)*] [$($access:tt)*] ($field:literal, $ident:ident) $(($rest_fields:literal, $rest_idents:ident))*) => {\r\n        generate_tuple_expansion! {\r\n            @inner ($dollar, $others)\r\n            [\r\n                $( $finished )*\r\n                // ($variant:path, $tuple:expr, <rest of accesses>, <next access = $N:ty>) => {\r\n                //      $variant(<accesses = $tuple.N>)\r\n                // };\r\n                ($dollar variant:path, $dollar tuple:expr, $( $match )* $dollar $ident:ty) => {\r\n                    $dollar variant($( $access )* $dollar tuple . $field)\r\n                };\r\n            ]\r\n            [ $( $match )* $dollar $ident:ty, ]\r\n            [ $( $access )* $dollar tuple . $field, ]\r\n            $( ($rest_fields, $rest_idents) )*\r\n        }\r\n    };\r\n\r\n    (@inner ($dollar:tt, $others:ident) [$($finished:tt)*] [$($match:tt)*] [$($access:tt)*]) => {\r\n        generate_tuple_expansion! {\r\n            @finish\r\n            $( $finished )*\r\n            // ($variant:path, $tuple:expr, $($others:ty),*) => {\r\n            //      compile_error!(\"Only enum tuple variants of up to 32 elements are supported\");\r\n            // };\r\n            ($dollar variant:path, $dollar tuple:expr, $dollar( $dollar$others:ty),*) => {\r\n                compile_error!(\"Only enum tuple variants of up to 32 elements are supported\");\r\n            };\r\n        }\r\n    };\r\n\r\n    (@finish $($finished:tt)*) => {\r\n        #[doc(hidden)]\r\n        #[macro_export]\r\n        macro_rules! __expand_tuple {\r\n            $( $finished )*\r\n        }\r\n    };\r\n}\r\n```\r\n\r\nThe output is a valid Rust macro and compiles perfectly. However, when attempting to call the generated macro (`__expand_tuple!`), multiple errors are emitted, such as `error: unknown macro variable tuple` and `error: expected expression, found .`. Inspecting the generated macro with `trace_macros!` reveals that the generated macro is valid and working, as re-pasting it into code as a normal macro succeeds.\r\n\r\n### Meta\r\n\r\nAffects latest Stable, Beta and Nightly.  \r\n[Playground Link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=411b2dc88f1ffc7016ec5044d080fba4)\r\n[Gist Link](https://gist.github.com/rust-play/411b2dc88f1ffc7016ec5044d080fba4)\r\n\r\n<details>\r\n<summary>trace_macros! Output + Backtrace</summary>\r\n<p>\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror: unknown macro variable `tuple`\r\n  --> src/main.rs:23:37\r\n   |\r\n23 |               [ $( $access )* $dollar tuple . $field, ]\r\n   |  _____________________________________^\r\n24 | |             $( ($rest_fields, $rest_idents) )*\r\n25 | |         }\r\n26 | |     };\r\n...  |\r\n51 | | generate_tuple_expansion! {\r\n52 | |     ($, others)\r\n   | |_____^ unknown macro variable\r\n...\r\n73 |       println!(\"{:?}\", __expand_tuple!(Test::Tuple, tuple, i32, i32, i32));\r\n   |                        -------------------------------------------------- in this macro invocation\r\n\r\nerror: expected expression, found `.`\r\n  --> src/main.rs:23:43\r\n   |\r\n23 |             [ $( $access )* $dollar tuple . $field, ]\r\n   |                                           ^ expected expression\r\n...\r\n73 |     println!(\"{:?}\", __expand_tuple!(Test::Tuple, tuple, i32, i32, i32));\r\n   |                      -------------------------------------------------- in this macro invocation\r\n\r\nerror: unknown macro variable `tuple`\r\n  --> src/main.rs:23:37\r\n   |\r\n23 |               [ $( $access )* $dollar tuple . $field, ]\r\n   |  _____________________________________^\r\n24 | |             $( ($rest_fields, $rest_idents) )*\r\n25 | |         }\r\n26 | |     };\r\n...  |\r\n51 | | generate_tuple_expansion! {\r\n52 | |     ($, others)\r\n   | |_____^ unknown macro variable\r\n...\r\n73 |       println!(\"{:?}\", __expand_tuple!(Test::Tuple, tuple, i32, i32, i32));\r\n   |                        -------------------------------------------------- in this macro invocation\r\n\r\nnote: trace_macro\r\n  --> src/main.rs:51:1\r\n   |\r\n51 | / generate_tuple_expansion! {\r\n52 | |     ($, others)\r\n53 | |     (0, a), (1, b), (2, c), (3, d)\r\n54 | |     /*\r\n...  |\r\n62 | |     */\r\n63 | | }\r\n   | |_^\r\n   |\r\n   = note: expanding `generate_tuple_expansion! { ($, others) (0, a), (1, b), (2, c), (3, d) }`\r\n   = note: to `generate_tuple_expansion !\r\n           { @ inner ($, others) [] [] [] (0, a) (1, b) (2, c) (3, d) }`\r\n   = note: expanding `generate_tuple_expansion! { @ inner ($, others) [] [] [] (0, a) (1, b) (2, c) (3, d) }`\r\n   = note: to `generate_tuple_expansion !\r\n           {\r\n               @ inner ($, others)\r\n               [($ variant : path, $ tuple : expr, $ a : ty) =>\r\n                { $ variant ($ tuple . 0) } ;] [$ a : ty,] [$ tuple . 0,] (1, b) (2, c)\r\n               (3, d)\r\n           }`\r\n   = note: expanding `generate_tuple_expansion! { @ inner ($, others)\r\n           [($ variant : path, $ tuple : expr, $ a : ty) => { $ variant ($ tuple . 0) }\r\n            ;] [$ a : ty,] [$ tuple . 0,] (1, b) (2, c) (3, d) }`\r\n   = note: to `generate_tuple_expansion !\r\n           {\r\n               @ inner ($, others)\r\n               [($ variant : path, $ tuple : expr, $ a : ty) =>\r\n                { $ variant ($ tuple . 0) } ;\r\n                ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty) =>\r\n                { $ variant ($ tuple . 0, $ tuple . 1) } ;] [$ a : ty, $ b : ty,]\r\n               [$ tuple . 0, $ tuple . 1,] (2, c) (3, d)\r\n           }`\r\n   = note: expanding `generate_tuple_expansion! { @ inner ($, others)\r\n           [($ variant : path, $ tuple : expr, $ a : ty) => { $ variant ($ tuple . 0) } ;\r\n            ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty) =>\r\n            { $ variant ($ tuple . 0, $ tuple . 1) } ;] [$ a : ty, $ b : ty,]\r\n           [$ tuple . 0, $ tuple . 1,] (2, c) (3, d) }`\r\n   = note: to `generate_tuple_expansion !\r\n           {\r\n               @ inner ($, others)\r\n               [($ variant : path, $ tuple : expr, $ a : ty) =>\r\n                { $ variant ($ tuple . 0) } ;\r\n                ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty) =>\r\n                { $ variant ($ tuple . 0, $ tuple . 1) } ;\r\n                ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty, $ c : ty) =>\r\n                { $ variant ($ tuple . 0, $ tuple . 1, $ tuple . 2) } ;]\r\n               [$ a : ty, $ b : ty, $ c : ty,] [$ tuple . 0, $ tuple . 1, $ tuple . 2,]\r\n               (3, d)\r\n           }`\r\n   = note: expanding `generate_tuple_expansion! { @ inner ($, others)\r\n           [($ variant : path, $ tuple : expr, $ a : ty) => { $ variant ($ tuple . 0) } ;\r\n            ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty) =>\r\n            { $ variant ($ tuple . 0, $ tuple . 1) } ;\r\n            ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty, $ c : ty) =>\r\n            { $ variant ($ tuple . 0, $ tuple . 1, $ tuple . 2) } ;]\r\n           [$ a : ty, $ b : ty, $ c : ty,] [$ tuple . 0, $ tuple . 1, $ tuple . 2,]\r\n           (3, d) }`\r\n   = note: to `generate_tuple_expansion !\r\n           {\r\n               @ inner ($, others)\r\n               [($ variant : path, $ tuple : expr, $ a : ty) =>\r\n                { $ variant ($ tuple . 0) } ;\r\n                ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty) =>\r\n                { $ variant ($ tuple . 0, $ tuple . 1) } ;\r\n                ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty, $ c : ty) =>\r\n                { $ variant ($ tuple . 0, $ tuple . 1, $ tuple . 2) } ;\r\n                ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty, $ c : ty, $ d :\r\n                 ty) =>\r\n                { $ variant ($ tuple . 0, $ tuple . 1, $ tuple . 2, $ tuple . 3) } ;]\r\n               [$ a : ty, $ b : ty, $ c : ty, $ d : ty,]\r\n               [$ tuple . 0, $ tuple . 1, $ tuple . 2, $ tuple . 3,]\r\n           }`\r\n   = note: expanding `generate_tuple_expansion! { @ inner ($, others)\r\n           [($ variant : path, $ tuple : expr, $ a : ty) => { $ variant ($ tuple . 0) } ;\r\n            ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty) =>\r\n            { $ variant ($ tuple . 0, $ tuple . 1) } ;\r\n            ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty, $ c : ty) =>\r\n            { $ variant ($ tuple . 0, $ tuple . 1, $ tuple . 2) } ;\r\n            ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty, $ c : ty, $ d : ty) =>\r\n            { $ variant ($ tuple . 0, $ tuple . 1, $ tuple . 2, $ tuple . 3) } ;]\r\n           [$ a : ty, $ b : ty, $ c : ty, $ d : ty,]\r\n           [$ tuple . 0, $ tuple . 1, $ tuple . 2, $ tuple . 3,] }`\r\n   = note: to `generate_tuple_expansion !\r\n           {\r\n               @ finish ($ variant : path, $ tuple : expr, $ a : ty) =>\r\n               { $ variant ($ tuple . 0) } ;\r\n               ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty) =>\r\n               { $ variant ($ tuple . 0, $ tuple . 1) } ;\r\n               ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty, $ c : ty) =>\r\n               { $ variant ($ tuple . 0, $ tuple . 1, $ tuple . 2) } ;\r\n               ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty, $ c : ty, $ d : ty)\r\n               => { $ variant ($ tuple . 0, $ tuple . 1, $ tuple . 2, $ tuple . 3) } ;\r\n               ($ variant : path, $ tuple : expr, $ ($ others : ty), *) =>\r\n               {\r\n                   compile_error !\r\n                   (\"Only enum tuple variants of up to 32 elements are supported\") ;\r\n               } ;\r\n           }`\r\n   = note: expanding `generate_tuple_expansion! { @ finish ($ variant : path, $ tuple : expr, $ a : ty) =>\r\n           { $ variant ($ tuple . 0) } ;\r\n           ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty) =>\r\n           { $ variant ($ tuple . 0, $ tuple . 1) } ;\r\n           ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty, $ c : ty) =>\r\n           { $ variant ($ tuple . 0, $ tuple . 1, $ tuple . 2) } ;\r\n           ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty, $ c : ty, $ d : ty) =>\r\n           { $ variant ($ tuple . 0, $ tuple . 1, $ tuple . 2, $ tuple . 3) } ;\r\n           ($ variant : path, $ tuple : expr, $ ($ others : ty), *) =>\r\n           {\r\n               compile_error !\r\n               (\"Only enum tuple variants of up to 32 elements are supported\") ;\r\n           } ; }`\r\n   = note: to `# [doc (hidden)] # [macro_export] macro_rules ! __expand_tuple\r\n           {\r\n               ($ variant : path, $ tuple : expr, $ a : ty) =>\r\n               { $ variant ($ tuple . 0) } ;\r\n               ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty) =>\r\n               { $ variant ($ tuple . 0, $ tuple . 1) } ;\r\n               ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty, $ c : ty) =>\r\n               { $ variant ($ tuple . 0, $ tuple . 1, $ tuple . 2) } ;\r\n               ($ variant : path, $ tuple : expr, $ a : ty, $ b : ty, $ c : ty, $ d : ty)\r\n               => { $ variant ($ tuple . 0, $ tuple . 1, $ tuple . 2, $ tuple . 3) } ;\r\n               ($ variant : path, $ tuple : expr, $ ($ others : ty), *) =>\r\n               {\r\n                   compile_error !\r\n                   (\"Only enum tuple variants of up to 32 elements are supported\") ;\r\n               } ;\r\n           }`\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "Kixiron", "id": 25047011, "node_id": "MDQ6VXNlcjI1MDQ3MDEx", "avatar_url": "https://avatars.githubusercontent.com/u/25047011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kixiron", "html_url": "https://github.com/Kixiron", "followers_url": "https://api.github.com/users/Kixiron/followers", "following_url": "https://api.github.com/users/Kixiron/following{/other_user}", "gists_url": "https://api.github.com/users/Kixiron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kixiron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kixiron/subscriptions", "organizations_url": "https://api.github.com/users/Kixiron/orgs", "repos_url": "https://api.github.com/users/Kixiron/repos", "events_url": "https://api.github.com/users/Kixiron/events{/privacy}", "received_events_url": "https://api.github.com/users/Kixiron/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69897/timeline", "performed_via_github_app": null, "state_reason": "completed"}