{"url": "https://api.github.com/repos/rust-lang/rust/issues/90767", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90767/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90767/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90767/events", "html_url": "https://github.com/rust-lang/rust/issues/90767", "id": 1050115298, "node_id": "I_kwDOAAsO6M4-l3zi", "number": 90767, "title": "Support filtering out dependency source code from coverage counters", "user": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 2483744621, "node_id": "MDU6TGFiZWwyNDgzNzQ0NjIx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-code-coverage", "name": "A-code-coverage", "color": "f7e101", "default": false, "description": "Area: Source-based code coverage (-Cinstrument-coverage)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-11-10T17:36:20Z", "updated_at": "2023-04-26T02:57:14Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Related to https://github.com/rust-lang/rust/issues/84943\r\n\r\n> Sometimes it\u2019s useful to only instrument certain files or functions.  \r\n\r\nThis is also true for code not in your crate but a dependency.  Some dependencies may create a large amount of coverage counters, on a closed source project I tried it on syn and serde took up the majority of the counters. Most people testing a crate aren't looking to get coverage of their dependencies as well so it makes sense to not instrument crates that aren't in the project workspace. Plus it should lead to faster run time and faster parsing of coverage reports - though for most projects I'd expect this to be negligible \r\n\r\nCan ignore below, I feel that even with half sized hash the chance of hash collisions on ascii strings from mangled function names is probably negligibly low :thinking: \r\n\r\nIt's also worth noting that for function hashes llvm coverage uses a truncated MD5 hash (so 64 bits instead of 128 bits). These hashes are used to create a hashmap of records and if i recall correctly in the profdata implementation last I checked it doesn't check for hash collisions so the more records the greater the chance of coverage data being lost or erroneously linked to a source location due to hash collisions. I'm not sure of the relative risk of this (I'd have to sample a variety of crates to figure this out), but reducing the number of records would mitigate the potential risk here as well. EDIT: I'm actually very curious about the hash collision impact myself so will update if I find anything out :thinking:  ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90767/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90767/timeline", "performed_via_github_app": null, "state_reason": null}