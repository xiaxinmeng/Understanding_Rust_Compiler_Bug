{"url": "https://api.github.com/repos/rust-lang/rust/issues/10068", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/10068/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/10068/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/10068/events", "html_url": "https://github.com/rust-lang/rust/issues/10068", "id": 21584667, "node_id": "MDU6SXNzdWUyMTU4NDY2Nw==", "number": 10068, "title": "Pretty formating", "user": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-10-25T11:35:47Z", "updated_at": "2015-04-02T07:38:47Z", "closed_at": "2015-04-02T07:38:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be helpful for debugging to have a string formatting \"style\" that is for `\"{:?}\"` what `extra::json::Json::to_pretty_str` is to `extra::json::Json::to_str`. That is, it does the same (uses introspection to dump the content of various data structures) but adds newlines and indentation as appropriate for readability.\n\nThis pretty formatting would be used by `assert_eq!()`.\n\nFor example, I am writing tests like this for Selector parsing in Servo:\n\n```\n    assert_eq!(parse(\"e.foo #bar\"), Some(~[Selector{\n        compound_selectors: CompoundSelector {\n            simple_selectors: ~[LocalNameSelector(~\"e\"),\n                                ClassSelector(~\"foo\")],\n            next: Some((~CompoundSelector {\n                simple_selectors: ~[IDSelector(~\"baz\")],\n                next: None,\n            }, Descendant)),\n        },\n        pseudo_element: None,\n        specificity: specificity(1, 1, 1),\n    }]))\n```\n\nAt the moment, a failing test gives this output:\n\n```\ntask '<unnamed>' failed at 'assertion failed: `(left == right) && (right ==\n left)` (left: `Some(~[selectors::Selector{compound_selectors: selectors::C\nompoundSelector{simple_selectors: ~[IDSelector(~\"bar\")], next: Some((~selec\ntors::CompoundSelector{simple_selectors: ~[LocalNameSelector(~\"e\"), ClassSe\nlector(~\"foo\")], next: None}, Descendant))}, pseudo_element: None, specific\nity: 1049601u32}])`, right: `Some(~[selectors::Selector{compound_selectors:\n selectors::CompoundSelector{simple_selectors: ~[LocalNameSelector(~\"e\"), C\nlassSelector(~\"foo\")], next: Some((~selectors::CompoundSelector{simple_sele\nctors: ~[IDSelector(~\"bar\")], next: None}, Descendant))}, pseudo_element: N\none, specificity: 1049601u32}])`)', /home/simon/projects/servo/src/componen\nts/style/selectors.rs:550\n```\n\nNot exactly easy to read. Ideally, the output should be closer to this:\n\n```\ntask '<unnamed>' failed at 'assertion failed: `(left == right) && (right == left)`\nleft: `Some(~[\n    selectors::Selector{\n        compound_selectors: selectors::CompoundSelector{\n            simple_selectors: ~[\n                IDSelector(~\"bar\")\n            ],\n            next: Some((\n                ~selectors::CompoundSelector{\n                    simple_selectors: ~[\n                        LocalNameSelector(~\"e\"),\n                        ClassSelector(~\"foo\")\n                    ],\n                    next: None\n                },\n                Descendant\n            ))\n        },\n        pseudo_element: None,\n        specificity: 1049601u32\n    }\n])`,\nright: `Some(~[\n    selectors::Selector{\n        compound_selectors: selectors::CompoundSelector{\n            simple_selectors: ~[\n                LocalNameSelector(~\"e\"),\n                ClassSelector(~\"foo\")\n            ],\n            next: Some((\n                ~selectors::CompoundSelector{\n                    simple_selectors: ~[\n                        IDSelector(~\"bar\")\n                    ],\n                    next: None\n                },\n                Descendant\n            ))\n        },\n        pseudo_element: None,\n        specificity: 1049601u32\n    }\n])`'\n/home/simon/projects/servo/src/components/style/selectors.rs:550\n```\n\nSee also Python\u2019s `pprint` module: http://docs.python.org/3/library/pprint.html\nhttp://hg.python.org/cpython/file/3.3/Lib/pprint.py\n", "closed_by": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/10068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/10068/timeline", "performed_via_github_app": null, "state_reason": "completed"}