{"url": "https://api.github.com/repos/rust-lang/rust/issues/93959", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93959/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93959/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93959/events", "html_url": "https://github.com/rust-lang/rust/issues/93959", "id": 1135466579, "node_id": "I_kwDOAAsO6M5DrdhT", "number": 93959, "title": "Tracking Issue for extending null() and null_mut() to non-Sized thin pointers", "user": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89436934, "node_id": "MDU6TGFiZWw4OTQzNjkzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-approved", "name": "B-RFC-approved", "color": "d304cb", "default": false, "description": "Approved by a merged RFC but not yet implemented."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-02-13T08:31:12Z", "updated_at": "2022-05-26T00:50:09Z", "closed_at": "2022-05-25T16:39:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Feature gate: maybe none? There\u2019s no obvious way to use `#[unstable]` for this kind of library change.\r\n\r\nThis is a tracking issue for extending `ptr::null`, `ptr::null_mut`, ~and `NonNull::dangling`~ to work with any thin pointers. This change was accepted as part of [RFC 2580 Pointer Metadata](https://rust-lang.github.io/rfcs/2580-ptr-meta.html).\r\n\r\nAs of Rust 1.58:\r\n* These functions can only return pointer to `T: Sized` types. (This bound is implied by the lack of `T: ?Sized` pseudo-bound in their respective signature.)\r\n* [`extern` types](https://github.com/rust-lang/rust/issues/43467) are the only kind of types that are not `Sized` but pointers to them are still \u201cthin\u201d. (As opposed to pointers to slices or trait objects, that are \u201cwide\u201d and store a length or a vtable pointer as [pointer metadata](https://rust-lang.github.io/rfcs/2580-ptr-meta.html).)\r\n\r\nSo this description could be rephrased as extending `ptr::null`, `ptr::null_mut`, and ~`NonNull::dangling`~ to `extern` types. However future language proposals could potentially add new kinds of `!Sized` types whose pointers are thin. This change should then apply to such types too.\r\n\r\n### Motivation\r\n\r\nThese functions deliberately do not support slices or trait objects. What length or vtable would be used in the new pointers? More generally, their implementation is only obvious for thin pointers. That is, when pointer metadata is zero-size, such as for `Sized` types.\r\n\r\nHowever `extern` types add an intermediate kind of type that is `!Sized` but still still has thin pointers. The new `Pointee` trait from the Pointer Metadata RFC allows expressing more precise bounds within the trait system. That same RFC proposed the change tracked here and was accepted, but that change is not implemented yet so it [remains an open question](https://github.com/rust-lang/rust/issues/43467#issuecomment-1034059907) for `extern` types.\r\n\r\n### Public API\r\n\r\nThese existing stable APIs of `core::ptr` / `std::ptr`:\r\n\r\n```rust\r\npub const fn null<T>() -> *const T {\u2026}\r\npub const fn null_mut<T>() -> *mut T {\u2026}\r\n```\r\n\r\nShould be changed to \r\n\r\n```rust\r\npub const fn null<T: ?Sized + Thin>() -> *const T {\u2026}\r\npub const fn null_mut<T: ?Sized + Thin>() -> *mut T {\u2026}\r\n```\r\n\r\n\u2026 where `Thin` is an existing trait alias:\r\n\r\n```rust\r\npub trait Thin = Pointee<Metadata = ()>;\r\npub trait Pointee {\r\n    type Metadata: Copy + Send + Sync + Ord + Hash + Unpin;\r\n}\r\n```\r\n\r\nIn 1.58, `Pointee` and `Thin` are both unstable and tracked at https://github.com/rust-lang/rust/issues/81513. `Pointee` is automatically implemented for all types. For `Sized` and `extern` types, `Metadata` is `()`. So `Sized` implies `Thin`.\r\n\r\nBecause `Sized` implies `Thin`, this proposed change to the signatures of stable functions should be backward-compatible.\r\n\r\nHaving an unstable trait involved in a bound of a stable function is unusual but not unprecedented. (For example `Pattern` in `str::find`.)\r\n\r\n\r\n### Steps / History\r\n\r\n- [ ] Implementation: #...\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR (?)\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Implementation strategy ~and related language change~\r\n\r\n~`null`, `null_mut`, and `dangling` are implemented by converting an integer (zero or `align_of()`) to a raw pointer with the `as` operator. In Rust 1.58, `as` only allows such a conversion if the target type is a pointer to a `Sized` type. The obvious way to implement this proposed extension of `null` and friends would be to make the same extension to `as`. However this change in language semantics is not part of an accepted RFC. It should be approved by the language team, perhaps with its own RFC.~\r\n\r\n~To summarize, the proposed language change is:~\r\n\r\n> ~Cast expressions `integer as *const T` and `integer as *mut T` would change from being legal only if `T: Sized`, to being legal only if `T: ?Sized + Thin`.~\r\n\r\nUpdate: `ptr::from_raw_parts` could be used instead of `as`.\r\n\r\n### Unresolved Questions\r\n\r\n- ~Is the language change to the `as` operator described above desirable?~\r\n- ~Should it separately go through the RFC process?~\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93959/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93959/timeline", "performed_via_github_app": null, "state_reason": "completed"}