{"url": "https://api.github.com/repos/rust-lang/rust/issues/110708", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110708/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110708/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110708/events", "html_url": "https://github.com/rust-lang/rust/issues/110708", "id": 1679806135, "node_id": "I_kwDOAAsO6M5kH863", "number": 110708, "title": "Consider documenting that (parts of?) stdlib must not be used before/after main", "user": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 3471277129, "node_id": "LA_kwDOAAsO6M7O53xJ", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-libs-nominated", "name": "I-libs-nominated", "color": "e10c02", "default": false, "description": "Indicates that an issue has been nominated for discussion during a libs team meeting."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2023-04-23T01:13:37Z", "updated_at": "2023-05-31T21:23:35Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "All existing standard library documentation implicitly assumes that the APIs are being used between the start of a Rust `main` and end of `main`.\r\n\r\nFor example [`std::thread::current`](https://doc.rust-lang.org/1.69.0/std/thread/fn.current.html) does not document any indication that the function would panic. **It does not need to document that**, because the function _cannot_ panic, as long as the call occurs within the duration of `main`.\r\n\r\nHowever it's possible to observe a panic like this:\r\n\r\n```rust\r\nextern \"C\" fn get_thread() {\r\n    let _ = std::panic::catch_unwind(std::thread::current);\r\n}\r\n\r\nfn main() {\r\n    unsafe { libc::atexit(get_thread) };\r\n}\r\n```\r\n\r\n```console\r\nthread '<unnamed>' panicked at 'use of std::thread::current() is not possible after the thread's local data has been destroyed', library/std/src/thread/mod.rs:733:5\r\nstack backtrace:\r\n   5: core::option::Option<T>::expect\r\n             at /rustc/90743e7298aca107ddaa0c202a4d3604e29bfeb6/library/core/src/option.rs:741:21\r\n   6: std::thread::current\r\n             at /rustc/90743e7298aca107ddaa0c202a4d3604e29bfeb6/library/std/src/thread/mod.rs:733:5\r\n   7: core::ops::function::FnOnce::call_once\r\n             at /rustc/90743e7298aca107ddaa0c202a4d3604e29bfeb6/library/core/src/ops/function.rs:251:5\r\n  11: std::panic::catch_unwind\r\n             at /rustc/90743e7298aca107ddaa0c202a4d3604e29bfeb6/library/std/src/panic.rs:137:14\r\n  12: playground::get_thread\r\n             at ./[src/main.rs:2](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021#):13\r\n  14: exit\r\n  15: __libc_start_main\r\n  16: _start\r\n```\r\n\r\n(Related PR and discussion: https://github.com/rust-lang/rust/pull/107216)\r\n\r\nIn general using the standard library from an `atexit` callback, or before `main` through a static constructor, is UB: according to https://github.com/rust-lang/rust/pull/107216#issuecomment-1400038633 _\"we can't really guarantee anything specific happens [...]; at least not in a cross-platform way.\"_\r\n\r\nIs this worth calling out centrally as a caveat to all other documentation of the standard library? At the top level of the whole `std` crate (it would perhaps be more prominent than it deserves), at the module level, or in the Reference? Certainly for `std::thread`, `std::io`, `std::fs`, the expectation users need to have is that nothing in there will work outside of `main`.\r\n\r\nAre there APIs it makes sense to carve out as being permissible outside of `main`? Stuff like `Cell`, `ManuallyDrop`, `MaybeUninit`, `NonNull`, etc. We'd maybe need to do research into how constructors and atexit are being used in the wild. For example the `inventory` crate relies on `AtomicPtr`, `UnsafeCell`, and `Option` to be usable before `main`: https://github.com/dtolnay/inventory/blob/508cb5918640d05414b0c49843d1c26088df6713/src/lib.rs#L191. It seems obvious that those things should work but there isn't documentation which guarantees it. I assume that makes the `inventory` crate technically unsound as written.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110708/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110708/timeline", "performed_via_github_app": null, "state_reason": null}