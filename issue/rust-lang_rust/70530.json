{"url": "https://api.github.com/repos/rust-lang/rust/issues/70530", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70530/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70530/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70530/events", "html_url": "https://github.com/rust-lang/rust/issues/70530", "id": 589768081, "node_id": "MDU6SXNzdWU1ODk3NjgwODE=", "number": 70530, "title": "Tracking Issue for {BTreeMap,BTreeSet}::extract_if", "user": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2020-03-29T11:10:35Z", "updated_at": "2023-06-16T07:30:48Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a tracking issue for the Implementation of a `extract_if` method on `BTreeMap` and `BTreeSet`, similar to the one in LinkedList and in Vec (#43244).\r\nThe feature gate for the issue is `#![feature(btree_extract_if)]` (previously `btree_drain_filter`)\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also uses as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n\r\n- [x] Implement suboptimally, relying on an `Ord` bound: efficient for simple and common cases, but falling back on a coarse restart after complicated removals.\r\n- [x] ~~Possibly adjust the underlying tree representation (using `Cell`s).~~\r\n- [x] Implement all cases without relying on an `Ord` bound, tracking every adjustment\r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n- Do we want the `Ord` bound on `drain_filter` (that is currently not required)?\r\n- Do we need to implement some post-panic guarantees beyond memory leaks, like the undocumented guarantees that `Vec::drain_filter` and `LinkedList::drain_filter` provide, as I tried to discuss in #67290?\r\n- The unstable book seems abandoned - [the other drain_filter is listed](https://doc.rust-lang.org/unstable-book/library-features/drain-filter.html) but generated from somewhere.\r\n\r\n### Implementation history\r\n- Remove the `Ord` bound on `DrainFilter` (not on `drain_filter`) (#70843)\r\n- Keep track of position when deleting from a `BTreeMap` (#70795)\r\n- Initial suboptimal implementation (#68770)\r\n- Related attempt to implement `drain` and `retain` (#66747)\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70530/reactions", "total_count": 17, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 17, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70530/timeline", "performed_via_github_app": null, "state_reason": null}