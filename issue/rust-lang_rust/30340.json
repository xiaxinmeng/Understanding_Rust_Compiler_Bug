{"url": "https://api.github.com/repos/rust-lang/rust/issues/30340", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/30340/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/30340/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/30340/events", "html_url": "https://github.com/rust-lang/rust/issues/30340", "id": 121786458, "node_id": "MDU6SXNzdWUxMjE3ODY0NTg=", "number": 30340, "title": "Potential optimization: eager nulling of Weak references", "user": {"login": "glaebhoerl", "id": 1216629, "node_id": "MDQ6VXNlcjEyMTY2Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1216629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glaebhoerl", "html_url": "https://github.com/glaebhoerl", "followers_url": "https://api.github.com/users/glaebhoerl/followers", "following_url": "https://api.github.com/users/glaebhoerl/following{/other_user}", "gists_url": "https://api.github.com/users/glaebhoerl/gists{/gist_id}", "starred_url": "https://api.github.com/users/glaebhoerl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glaebhoerl/subscriptions", "organizations_url": "https://api.github.com/users/glaebhoerl/orgs", "repos_url": "https://api.github.com/users/glaebhoerl/repos", "events_url": "https://api.github.com/users/glaebhoerl/events{/privacy}", "received_events_url": "https://api.github.com/users/glaebhoerl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-11T20:33:00Z", "updated_at": "2019-12-25T17:13:08Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[Apparently](https://www.mikeash.com/pyblog/friday-qa-2015-12-11-swift-weak-references.html) Swift does this:\n\n> When a weak reference is loaded, the runtime checks the target's state. If the target is a zombie, then it zeroes the weak reference, decrements the weak reference count, and returns nil.\n\nIn our world, this would mean `Weak` would store a `Cell`, which would be `set` to null in `upgrade()` if the strong count was found to be zero. This could allow the allocation to be freed earlier than it otherwise would be. I'm not sure if it would be a significant pessimization in any other respects?\n\n(I just checked what other operations are available on `Weak` - this could also potentially be done in `clone()`.)\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/30340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/30340/timeline", "performed_via_github_app": null, "state_reason": null}