{"url": "https://api.github.com/repos/rust-lang/rust/issues/12593", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12593/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12593/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12593/events", "html_url": "https://github.com/rust-lang/rust/issues/12593", "id": 28397777, "node_id": "MDU6SXNzdWUyODM5Nzc3Nw==", "number": 12593, "title": "Iterators in the std library should implement Eq where possible", "user": {"login": "Valloric", "id": 919444, "node_id": "MDQ6VXNlcjkxOTQ0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/919444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Valloric", "html_url": "https://github.com/Valloric", "followers_url": "https://api.github.com/users/Valloric/followers", "following_url": "https://api.github.com/users/Valloric/following{/other_user}", "gists_url": "https://api.github.com/users/Valloric/gists{/gist_id}", "starred_url": "https://api.github.com/users/Valloric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Valloric/subscriptions", "organizations_url": "https://api.github.com/users/Valloric/orgs", "repos_url": "https://api.github.com/users/Valloric/repos", "events_url": "https://api.github.com/users/Valloric/events{/privacy}", "received_events_url": "https://api.github.com/users/Valloric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2014-02-27T06:48:23Z", "updated_at": "2014-09-26T05:02:33Z", "closed_at": "2014-09-26T01:54:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[Per discussion with @huonw on `#rust`.]\n\nI've written a function `apply` like so:\n\n``` rust\ntype ParseState<'a> = Enumerate< Chars<'a> >;\n\nstruct ParseResult<'a> {\n  value: Option< uint >,  // something more complicated in actual code\n  parse_state: ParseState<'a>\n}\n\nfn apply<'a>( &self, parse_state: ParseState<'a> ) -> Option< ParseResult<'a> >\n```\n\nThe idea is to parse the input and also return an iterator that's correctly advanced. I'm writing a test for this and Iterators not implementing Eq is making this more difficult than it needs to be.\n", "closed_by": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12593/timeline", "performed_via_github_app": null, "state_reason": "completed"}