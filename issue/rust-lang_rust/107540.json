{"url": "https://api.github.com/repos/rust-lang/rust/issues/107540", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107540/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107540/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107540/events", "html_url": "https://github.com/rust-lang/rust/issues/107540", "id": 1565191448, "node_id": "I_kwDOAAsO6M5dSu0Y", "number": 107540, "title": "Tracking Issue for BTreeMap cursors", "user": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2023-02-01T00:15:22Z", "updated_at": "2023-06-14T02:34:14Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Feature gate: `#![feature(btree_cursors)]`\r\n\r\nACP: https://github.com/rust-lang/libs-team/issues/141\r\n\r\nThis is a tracking issue for the `Cursor` and `CursorMut` types for `BTreeMap`.\r\n\r\nA Cursor is like an iterator, except that it can freely seek back-and-forth, and can safely mutate the tree during iteration. This is because the lifetime of its yielded references is tied to its own lifetime, instead of just the underlying tree. A cursor either points to an element in the tree, or to a \"ghost\" non-element that is logically located after the last element and before the first element.\r\n\r\n### Public API\r\n\r\n```rust\r\nimpl<K, V> BTreeMap<K, V> {\r\n    fn lower_bound<Q>(&self, bound: Bound<&Q>) -> Cursor<'_, K, V>\r\n    where\r\n        K: Borrow<Q> + Ord,\r\n        Q: Ord;\r\n    fn lower_bound_mut<Q>(&mut self, bound: Bound<&Q>) -> CursorMut<'_, K, V>\r\n    where\r\n        K: Borrow<Q> + Ord,\r\n        Q: Ord;\r\n    fn upper_bound<Q>(&self, bound: Bound<&Q>) -> Cursor<'_, K, V>\r\n    where\r\n        K: Borrow<Q> + Ord,\r\n        Q: Ord;\r\n    fn upper_bound_mut<Q>(&mut self, bound: Bound<&Q>) -> CursorMut<'_, K, V>\r\n    where\r\n        K: Borrow<Q> + Ord,\r\n        Q: Ord;\r\n}\r\n\r\nstruct Cursor<'a, K: 'a, V: 'a>;\r\n\r\nimpl<'a, K, V> Cursor<'a, K, V> {\r\n    fn move_next(&mut self);\r\n    fn move_prev(&mut self);\r\n\r\n    fn key(&self) -> Option<&'a K>;\r\n    fn value(&self) -> Option<&'a V>;\r\n    fn key_value(&self) -> Option<(&'a K, &'a V)>;\r\n\r\n    fn peek_next(&self) -> Option<(&'a K, &'a V)>;\r\n    fn peek_prev(&self) -> Option<(&'a K, &'a V)>;\r\n}\r\n\r\nstruct CursorMut<'a, K: 'a, V: 'a>;\r\n\r\nimpl<'a, K, V> CursorMut<'a, K, V> {\r\n    fn move_next(&mut self);\r\n    fn move_prev(&mut self);\r\n\r\n    fn key(&self) -> Option<&K>;\r\n    fn value(&self) -> Option<&V>;\r\n    fn value_mut(&mut self) -> Option<&mut V>;\r\n    fn key_value(&self) -> Option<(&K, &V)>;\r\n    fn key_value_mut(&self) -> Option<(&K, &mut V)>;\r\n\r\n    unsafe fn key_mut_unchecked(&mut self) -> Option<&mut K>;\r\n\r\n    fn peek_next(&self) -> Option<(&K, &V)>;\r\n    fn peek_prev(&self) -> Option<(&K, &V)>;\r\n\r\n    fn as_cursor(&self) -> Cursor<'_, K, V>;\r\n\r\n    fn insert_after(&mut self, key: K, value: V);\r\n    fn insert_before(&mut self, key: K, value: V);\r\n\r\n    unsafe fn insert_after_unchecked(&mut self, key: K, value: V);\r\n    unsafe fn insert_before_unchecked(&mut self, key: K, value: V);\r\n\r\n    fn remove_current(&mut self) -> Option<(K, V)>;\r\n    fn remove_current_and_move_back(&mut self) -> Option<(K, V)>;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: #105641\r\n- [ ] Final comment period (FCP)[^1]\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- None yet.\r\n\r\n[^1]: https://std-dev-guide.rust-lang.org/feature-lifecycle/stabilization.html\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107540/timeline", "performed_via_github_app": null, "state_reason": null}