{"url": "https://api.github.com/repos/rust-lang/rust/issues/49745", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49745/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49745/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49745/events", "html_url": "https://github.com/rust-lang/rust/issues/49745", "id": 312100669, "node_id": "MDU6SXNzdWUzMTIxMDA2Njk=", "number": 49745, "title": "Confusing lifetime on HashMap's Entry::get", "user": {"login": "Phlosioneer", "id": 4657718, "node_id": "MDQ6VXNlcjQ2NTc3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4657718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phlosioneer", "html_url": "https://github.com/Phlosioneer", "followers_url": "https://api.github.com/users/Phlosioneer/followers", "following_url": "https://api.github.com/users/Phlosioneer/following{/other_user}", "gists_url": "https://api.github.com/users/Phlosioneer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phlosioneer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phlosioneer/subscriptions", "organizations_url": "https://api.github.com/users/Phlosioneer/orgs", "repos_url": "https://api.github.com/users/Phlosioneer/repos", "events_url": "https://api.github.com/users/Phlosioneer/events{/privacy}", "received_events_url": "https://api.github.com/users/Phlosioneer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-06T20:03:49Z", "updated_at": "2018-06-03T06:13:03Z", "closed_at": "2018-06-03T06:13:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The lifetime on the [`get()`](https://doc.rust-lang.org/std/collections/hash_map/struct.OccupiedEntry.html#method.get) method's return value is bound to the lifetime of `Entry`. This is intended, as far as I can tell; however, the `into_mut` method allows the `Entry` to be converted into a reference bound to the `HashMap`'s lifetime. But there is no way to get an _immutable_ reference bound to the `HashMap`'s lifetime.\r\n\r\nThis issue originally arose from [this reddit thread](https://www.reddit.com/r/rust/comments/8a5swr/why_does_hashmaps_entryoccupied_have_get_mut_and/dwxffja/). A minimal usecase example is:\r\n\r\n```\r\nfn get_symbol<'a>(symbols: &'a mut HashMap<u32, String>, id: u32) -> &'a str {\r\n    match symbols.entry(id) {\r\n        Entry::Occupied(e) => e.get().to_string(), // BAD! Should be e.into_mut().\r\n        Entry::Vacant(e) => {\r\n            // <snipped bookkeeping>...\r\n            let new_symbol = \"foobar\".to_string();\r\n            e.insert(new_symbol).as_str()\r\n        }\r\n    }\r\n}\r\n```\r\n[Playground](https://play.rust-lang.org/?gist=12357511c761792681f4b51f679ae593&version=nightly)\r\n\r\nFrom my understanding, it should be safe to add an `into_ref(self) -> &'a V` method to fill this hole. It would be implemented as:\r\n```\r\npub fn into_mut(self) -> &'a mut V {\r\n    self.elem.into_refs().1\r\n}\r\n```\r\nbecause the underlying structure `FullBucket` already supports an `into_refs()` method (with the same safety reasoning as `into_mut_refs()`.)\r\n\r\nIt may also be useful to have an `into_key(self) -> &'a K` method. It should be just as safe (and would use basically the same implementation).\r\n\r\nThis was previously opened as an issue (#39099) but was self-closed when the poster found the `into_mut()` workaround.\r\n\r\nI'd be happy to open a PR for this, but I want to make sure I'm not missing anything obvious here.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49745/timeline", "performed_via_github_app": null, "state_reason": "completed"}