{"url": "https://api.github.com/repos/rust-lang/rust/issues/99035", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99035/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99035/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99035/events", "html_url": "https://github.com/rust-lang/rust/issues/99035", "id": 1298341816, "node_id": "I_kwDOAAsO6M5NYx-4", "number": 99035, "title": "`$$crate` unexpectedly fails to defer which crate `$crate` refers to", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2022-07-08T01:18:18Z", "updated_at": "2022-08-08T00:43:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\n`$$` was stabilized in #95860 for 1.63. (reverted in #99435; now requires feature gate again.)\n\r\nI tried this code:\r\n\r\n```rust\r\n// lib.rs\r\npub const WHICH: &str = \"lib.rs\";\r\n\r\n#[macro_export]\r\nmacro_rules! define_which_macro {\r\n    () => {\r\n        macro_rules! which {\r\n            () => {\r\n                $$crate::WHICH\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\n// main.rs\r\nuse lib::define_which_macro;\r\n\r\npub const WHICH: &str = \"main.rs\";\r\n\r\ndefine_which_macro!();\r\n\r\nfn main() {\r\n    dbg!(which!());\r\n}\r\n```\r\n\r\n#### I expected to see this happen:\r\n\r\nMy intuitive expectation comes from expanding the macros as following:\r\n\r\n```rust\r\ndefine_which_macro!();\r\nfn main() {\r\n    dbg!(which!());\r\n}\r\n// =====>\r\nmacro_rules! which {\r\n    () => {\r\n        $crate::WHICH\r\n    }\r\n}\r\nfn main() {\r\n    dbg!(which!());\r\n}\r\n// =====>\r\nfn main() {\r\n    dbg!(crate::WHICH);\r\n}\r\n```\r\n\r\n`lib` provides a macro whose expansion is specified to contain `$$ crate`; this seemingly should behave as writing `$crate` in the crate where the macro is expanded; i.e., `main.rs` should be printed.\r\n\r\n#### Instead, this happened:\r\n\r\n`lib.rs` is printed: the `$crate` in the expansion of `which!()` refers to `lib`.\r\n\r\nThis likely happens because the `$crate` compound identifier token refers to the crate indicated by the `crate` token's span, as indicated by the following example printing `main.rs`:\r\n\r\n```rust\r\n// lib.rs\r\n#[macro_export]\r\nmacro_rules! define_which_macro {\r\n    ($krate:tt) => {\r\n        macro_rules! which {\r\n            () => {\r\n                $$$krate::WHICH\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\n// main.rs\r\ndefine_which_macro!(crate);\r\nfn main() {\r\n    dbg!(which!());\r\n}\r\n```\r\n\r\nand the following printing `lib.rs`:\r\n\r\n```rust\r\n// lib.rs\r\n#[macro_export]\r\nmacro_rules! define_which_macro {\r\n    ($d:tt) => {\r\n        macro_rules! which {\r\n            () => {\r\n                $d crate::WHICH\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\n// main.rs\r\ndefine_which_macro!($);\r\nfn main() {\r\n    dbg!(which!());\r\n}\r\n```\r\n\r\n### Desired behavior\r\n\r\nThis seems *difficult* to resolve. The *stated purpose* of `$$` is to make writing macro-expanded-macros significantly more tractable than the previous `[$dollar:tt]` pattern defining a manual binder expanding to `$`. As such, it's fairly clearly the *intent* that writing `$$crate` should allow you to expand to a macro using `$crate` to refer to *its* defining crate, not the root macro's crate. (If you *want* the root macro's crate, you can already use just `$crate` just fine.)\r\n\r\nEven though `$$` is unstable, though, refining this behavior might be edge-case breaking, as you could already observe the current behavior of `$crate`'s crate choice by using a manual `$dollar:tt` binder to get a `$` into the expanded output.\r\n\r\nI have three concepts for how to make `$$crate` work as is likely intended:\r\n\r\n#### `$crate` uses the `$` token's crate\r\n\r\n... and `$$`'s expanded `$`'s crate gets set to the crate which expanded it, not the crate of either input `$`.[^1]\r\n\r\n[^1]: I have no idea what span the expanded `$` gets currently. The \"correct\" choice is probably to take the span of the second input `$` as-is.\r\n\r\nThis changes the behavior of `$dollar $krate` to refer to `$dollar`'s crate rather than `$krate`'s crate.\r\n\r\n#### `$crate` uses the \"gluing\" crate\r\n\r\nWhen the `$crate` token is glued into a single ident token, it gets its crate set to the crate def which did the gluing.\r\n\r\nThis changes the behavior of the `$dollar $krate` to refer to the gluing crate rather than `$krate`'s crate.\r\n\r\n##### Wait, which is the \"gluing\" crate then?\r\n\r\nThere's two options here:\r\n\r\n- The crate for the `macro_rules!` name's token. This means that using a known name like in the original example would make `$$crate` behave the same as `$crate`, but would make most macro-defining-macros which take the name of the macro to define (or glue based on an input token using `paste!`, which respects the span of the first used binder) work as expected and produce a `$crate` referring to the crate which provided the name of the newly-defined macro. This also gives an easily predictable answer to what crate is referred to when multiple levels of macro indirection are involved.\r\n- The crate the macro name is registered into the namespace of. It is the author's opinion that ***this is the most useful option***, as any other macro involved can insert a normal `$crate` token to refer to their namespace, and cannot refer to the crate any defined items end up in unless using a properly escaped `$$crate` refers to that crate.\r\n\r\n#### Really kludge it just for `$$`\r\n\r\n`$$` expands into a token that behaves like `$` *except for* the fact that `$crate` behaves like one of the previous two solutions when using a `$$`-created `$`.\r\n\r\nThis avoids changing the behavior of `$dollar $krate`, but makes `$dollar $krate` behave differently from `$$ $krate`.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.64.0-nightly (27eb6d701 2022-07-04)\r\nbinary: rustc\r\ncommit-hash: 27eb6d7018e397cf98d51c205e3576951d766323\r\ncommit-date: 2022-07-04\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.64.0-nightly\r\nLLVM version: 14.0.6\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99035/timeline", "performed_via_github_app": null, "state_reason": null}