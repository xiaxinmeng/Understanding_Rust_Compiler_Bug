{"url": "https://api.github.com/repos/rust-lang/rust/issues/112548", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112548/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112548/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112548/events", "html_url": "https://github.com/rust-lang/rust/issues/112548", "id": 1752431758, "node_id": "I_kwDOAAsO6M5oc_yO", "number": 112548, "title": "Miscompilation on aarch64-apple-darwin (likely a calling convention bug)", "user": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 123111, "node_id": "MDU6TGFiZWwxMjMxMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-macos", "name": "O-macos", "color": "6e6ec0", "default": false, "description": "Operating system: macOS"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3940166907, "node_id": "LA_kwDOAAsO6M7q2iz7", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-AArch64", "name": "O-AArch64", "color": "6e6ec0", "default": false, "description": "Armv8-A or later processors in AArch64 mode"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-06-12T10:33:04Z", "updated_at": "2023-06-15T12:00:47Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Fuzzer generated code:\r\n\r\n```rust\r\n#![feature(const_hash)]\r\nextern crate core;\r\nuse core::ptr;\r\n\r\nuse std::collections::hash_map::DefaultHasher;\r\nuse std::hash::{Hash, Hasher};\r\n\r\nstatic mut H: DefaultHasher = DefaultHasher::new();\r\n\r\npub fn fn10() {\r\n    let mut _11 = 0;\r\n    let mut _29 = 0;\r\n    let p = core::ptr::addr_of_mut!(_29);\r\n    unsafe { fn14(_11, p) };\r\n}\r\n\r\npub unsafe fn fn14(mut _2: isize, mut _3: *mut isize) {\r\n    let r = core::ptr::addr_of_mut!(_2);\r\n    *r = fn15(r, _3);\r\n    fn18();\r\n}\r\npub unsafe fn fn15(mut _2: *mut isize, mut _3: *mut isize) -> isize {\r\n    let mut _4: *mut isize = ptr::null_mut();\r\n    let mut _7: *mut *mut isize = ptr::null_mut();\r\n    let mut _13: *mut isize = ptr::null_mut();\r\n    let mut _16: *mut isize = ptr::null_mut();\r\n\r\n    let mut _9: ((bool, i128), (f32, i128), [u128; 8], u32) = ((false, 0), (0., 0), [0; 8], 0);\r\n    _4 = core::ptr::addr_of_mut!((*_3));\r\n    fn16();\r\n    'bb1: loop {\r\n        let ret = *_4;\r\n        _7 = core::ptr::addr_of_mut!(_2);\r\n        _9.3 = 3178558635_u32 % 2879763616_u32;\r\n        _9.0 = (false, 1);\r\n        'bb3: loop {\r\n            (*_7) = core::ptr::addr_of_mut!((*_2));\r\n            _16 = core::ptr::addr_of_mut!((*_2));\r\n            match _9.0 .1 {\r\n                0 => continue 'bb1,\r\n                1 => 'bb5: loop {\r\n                    _4 = _2;\r\n                    _9.2 = [279331277471898888451578203748788445758_u128; 8];\r\n                    _7 = core::ptr::addr_of_mut!(_13);\r\n                    loop {\r\n                        _9.1 = (0., 2);\r\n                        (*_16) = f64::NEG_INFINITY as isize;\r\n                        match _9.1 .1 {\r\n                            0 => continue 'bb5,\r\n                            2 => {\r\n                                _16 = core::ptr::addr_of_mut!((*_4));\r\n                                match _9.3 {\r\n                                    0 => continue 'bb5,\r\n                                    _ => return ret,\r\n                                }\r\n                            }\r\n                            _ => continue 'bb3,\r\n                        }\r\n                    }\r\n                },\r\n                _ => continue 'bb3,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npub fn fn16() {\r\n    let mut _23 = [1849_i16; 7];\r\n    _23[2] = 13917_i16;\r\n    let _32 = _23;\r\n    unsafe {\r\n        0.hash(&mut H);\r\n        _32.hash(&mut H);\r\n    }\r\n}\r\n\r\npub fn fn18() {\r\n    let mut _8: [i16; 8] = [0; 8];\r\n    let _5 = -10_i128;\r\n    let _9 = [(-1414_i16); 7];\r\n    unsafe {\r\n        _9[0].hash(&mut H);\r\n        _8.hash(&mut H);\r\n        1_i128.hash(&mut H);\r\n    }\r\n}\r\n\r\npub fn main() {\r\n    fn10();\r\n    unsafe {\r\n        println!(\"hash: {}\", H.finish());\r\n    }\r\n}\r\n```\r\n\r\nThis should output `15917201677548574216`: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=a51ce49127180037639732b4a990ddbe.\r\n\r\nBut on `-Zmir-opt-level=0 -Copt-level>=1` it prints something different. `-Zmir-opt-level>=1` masks the bug.\r\n```\r\n% rustc -Zmir-opt-level=0 -Copt-level=0 repro.rs && ./repro\r\nhash: 15917201677548574216\r\n% rustc -Zmir-opt-level=0 -Copt-level=1 repro.rs && ./repro\r\nhash: 2617855399195014552\r\n```\r\n\r\nThis is only reproducible on `aarch64-apple-darwin`, but not on `x86_64-apple-darwin` or `aarch64-unknown-linux-gnu`. The reproducer is very sensitive to small changes. For instance, changing the length of `_23` in `fn16` to `8` prevents the bug. For these reasons I suspect it's an Apple Silicon specific calling convention bug leading to some stack corruption. ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112548/timeline", "performed_via_github_app": null, "state_reason": null}