{"url": "https://api.github.com/repos/rust-lang/rust/issues/40353", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/40353/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/40353/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/40353/events", "html_url": "https://github.com/rust-lang/rust/issues/40353", "id": 212654326, "node_id": "MDU6SXNzdWUyMTI2NTQzMjY=", "number": 40353, "title": "type checker takes O(~1.5^recursion_limit) time to reject simple-ish code", "user": {"login": "comex", "id": 47517, "node_id": "MDQ6VXNlcjQ3NTE3", "avatar_url": "https://avatars.githubusercontent.com/u/47517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/comex", "html_url": "https://github.com/comex", "followers_url": "https://api.github.com/users/comex/followers", "following_url": "https://api.github.com/users/comex/following{/other_user}", "gists_url": "https://api.github.com/users/comex/gists{/gist_id}", "starred_url": "https://api.github.com/users/comex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/comex/subscriptions", "organizations_url": "https://api.github.com/users/comex/orgs", "repos_url": "https://api.github.com/users/comex/repos", "events_url": "https://api.github.com/users/comex/events{/privacy}", "received_events_url": "https://api.github.com/users/comex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-03-08T06:57:52Z", "updated_at": "2020-01-31T22:54:38Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Found when trying to port my old type system Brainfuck interpreter to use associated types.  Reduced case:\r\n\r\n```rust\r\n#![recursion_limit=\"10\"]\r\nuse std::marker::PhantomData;\r\n\r\nstruct Nil;\r\nstruct Cons<A, B>(PhantomData<A>, PhantomData<B>);\r\nstruct BFPlus;\r\n\r\ntrait BF {\r\n    type NewState: ?Sized;\r\n}\r\n\r\n// +\r\nimpl<U, OtherInsns, NewState>\r\n    BF for (U, Cons<BFPlus, OtherInsns>)\r\n    where (U, OtherInsns): BF<NewState=NewState> {\r\n    type NewState = ();\r\n}\r\n\r\nfn main() {\r\n    let insns = Nil;\r\n    let state = Nil;\r\n\r\n\r\n    fn print_bf<State, Insns, NewState>(state: State, insns: Insns)\r\n        where (State, Insns): BF<NewState=NewState> {\r\n    }\r\n    print_bf(state, insns);\r\n}\r\n```\r\n\r\n I don't really understand what's going on, but as written, rustc outputs:\r\n```\r\nerror[E0275]: overflow evaluating the requirement `<(_, _) as BF>::NewState`\r\n  --> xx-iloop.rs:27:5\r\n   |\r\n27 |     print_bf(state, insns);\r\n   |     ^^^^^^^^\r\n   |\r\n   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\r\n   = note: required because of the requirements on the impl of `BF` for `(_, Cons<BFPlus, _>)`\r\n   = note: required because of the requirements on the impl of `BF` for `(_, Cons<BFPlus, Cons<BFPlus, _>>)`\r\n   = note: required because of the requirements on the impl of `BF` for `(_, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, _>>>)`\r\n   = note: required because of the requirements on the impl of `BF` for `(_, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, _>>>>)`\r\n   = note: required because of the requirements on the impl of `BF` for `(_, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, _>>>>>)`\r\n   = note: required because of the requirements on the impl of `BF` for `(_, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, _>>>>>>)`\r\n   = note: required because of the requirements on the impl of `BF` for `(_, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, _>>>>>>>)`\r\n   = note: required because of the requirements on the impl of `BF` for `(_, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, _>>>>>>>>)`\r\n   = note: required because of the requirements on the impl of `BF` for `(_, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, _>>>>>>>>>)`\r\n   = note: required because of the requirements on the impl of `BF` for `(_, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, Cons<BFPlus, _>>>>>>>>>>)`\r\n   = note: required by `main::print_bf`\r\n```\r\n\r\nHowever, increasing the recursion_limit dramatically increases the time it takes to report the error.\r\n\r\nNote that writing the impl more normally as\r\n```rust\r\nimpl<U, OtherInsns>\r\n    BF for (U, Cons<BFPlus, OtherInsns>)\r\n    where (U, OtherInsns): BF {\r\n    type NewState = <(U, OtherInsns) as BF>::NewState;\r\n}\r\n```\r\nfails instantly even with a high recursion limit.  But I don't see why it should fail at all: the impl is sane enough, implementing `BF` for a larger type based on its implementation for a smaller type.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/40353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/40353/timeline", "performed_via_github_app": null, "state_reason": null}