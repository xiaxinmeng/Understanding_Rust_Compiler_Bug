{"url": "https://api.github.com/repos/rust-lang/rust/issues/49923", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49923/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49923/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49923/events", "html_url": "https://github.com/rust-lang/rust/issues/49923", "id": 314024460, "node_id": "MDU6SXNzdWUzMTQwMjQ0NjA=", "number": 49923, "title": "Type inference fails to infer lifetimes.", "user": {"login": "gdox", "id": 11503891, "node_id": "MDQ6VXNlcjExNTAzODkx", "avatar_url": "https://avatars.githubusercontent.com/u/11503891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gdox", "html_url": "https://github.com/gdox", "followers_url": "https://api.github.com/users/gdox/followers", "following_url": "https://api.github.com/users/gdox/following{/other_user}", "gists_url": "https://api.github.com/users/gdox/gists{/gist_id}", "starred_url": "https://api.github.com/users/gdox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gdox/subscriptions", "organizations_url": "https://api.github.com/users/gdox/orgs", "repos_url": "https://api.github.com/users/gdox/repos", "events_url": "https://api.github.com/users/gdox/events{/privacy}", "received_events_url": "https://api.github.com/users/gdox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-13T09:00:29Z", "updated_at": "2021-12-29T04:47:41Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "## Short summary\r\n\r\nWhen I partially specify the `&mut` type of a `Fn` trait argument, my code compiles. If I let the compiler find it out, it fails. I cannot see a single, language-wise, reason why it should fail.\r\n\r\n## Details\r\n\r\nIf I try the following code:\r\n```\r\nfn set(t : &mut usize) {}\r\nfn reset(t : &mut usize) {}\r\n\r\nfn main() {\r\n    let vec : Vec<&Fn(_)> = vec![&set, &reset];\r\n    let mut t = 0;\r\n    for f in vec {\r\n        f(&mut t);\r\n    }\r\n}\r\n```\r\n\r\nThen it fails to compile with the message:\r\n```\r\nerror[E0597]: `t` does not live long enough\r\n  --> src/main.rs:14:16\r\n   |\r\n14 |         f(&mut t);\r\n   |                ^ borrowed value doeerror[E0597]: `t` does not live long enough\r\n15 |     }\r\n16 | }\r\n   | - `t` dropped here while still borrowed\r\n   |\r\n   = note: values in a scope are dropped in the opposite order they are created\r\n```\r\n\r\nHowever, if I replace the underscore with `&mut _`, everything works fine.\r\n\r\nI assumed that, in functions, an underscore should be strictly better for type interference than everything else, especially in this case where the borrow checker can just insert `&mut` itself. Apparently this is not the case, and I have no idea why. \r\n\r\n## Meta\r\n\r\n```\r\n$ rustc --version --verbose\r\nrustc 1.25.0 (84203cac6 2018-03-25)\r\nbinary: rustc\r\ncommit-hash: 84203cac67e65ca8640b8392348411098c856985\r\ncommit-date: 2018-03-25\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.25.0\r\nLLVM version: 6.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49923/timeline", "performed_via_github_app": null, "state_reason": null}