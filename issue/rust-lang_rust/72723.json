{"url": "https://api.github.com/repos/rust-lang/rust/issues/72723", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72723/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72723/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72723/events", "html_url": "https://github.com/rust-lang/rust/issues/72723", "id": 626980310, "node_id": "MDU6SXNzdWU2MjY5ODAzMTA=", "number": 72723, "title": "segfault with -C lto with rustc 1.43.0, 1.44.0 on s390x", "user": {"login": "mwhudson", "id": 672022, "node_id": "MDQ6VXNlcjY3MjAyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/672022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwhudson", "html_url": "https://github.com/mwhudson", "followers_url": "https://api.github.com/users/mwhudson/followers", "following_url": "https://api.github.com/users/mwhudson/following{/other_user}", "gists_url": "https://api.github.com/users/mwhudson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwhudson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwhudson/subscriptions", "organizations_url": "https://api.github.com/users/mwhudson/orgs", "repos_url": "https://api.github.com/users/mwhudson/repos", "events_url": "https://api.github.com/users/mwhudson/events{/privacy}", "received_events_url": "https://api.github.com/users/mwhudson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 896260695, "node_id": "MDU6TGFiZWw4OTYyNjA2OTU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-SystemZ", "name": "O-SystemZ", "color": "6e6ec0", "default": false, "description": "Target: SystemZ processors (s390x)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-29T04:00:36Z", "updated_at": "2020-06-23T07:36:08Z", "closed_at": "2020-06-23T07:36:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm updating rustc and cargo on Ubuntu. The build of cargo 0.44.1 on s390x with rustc 1.43.0 fails: \r\n\r\nhttps://launchpad.net/~mwhudson/+archive/ubuntu/rust-stuff/+build/19366472\r\n\r\nOne of the failing tests runs this command:\r\n\r\n```\r\nrustc --crate-name test src/main.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C opt-level=3 -C lto -C metadata=7394e033338f9890 -C extra-filename=-7394e033338f9890 --out-dir /build/cargo-IGXegx/cargo-0.44.1/target/s390x-unknown-linux-gnu/cit/t263/foo/target/release/deps -L dependency=/build/cargo-IGXegx/cargo-0.44.1/target/s390x-unknown-linux-gnu/cit/t263/foo/target/release/deps\r\n```\r\n\r\nI expected to see this happen: not a segfault\r\n\r\nInstead, this happened: \"Segmentation fault (core dumped)\"\r\n\r\nThe backtrace from gdb is this:\r\n\r\n```\r\n(gdb) bt\r\n#0  memcpy () at ../sysdeps/s390/memcpy-z900.S:191\r\n#1  0x000003fff599b0d4 in core::intrinsics::copy_nonoverlapping (src=0x1 <error: Cannot access memory at address 0x1>, dst=<optimized out>, count=16)\r\n    at /usr/src/rustc-1.43.0/src/libcore/intrinsics.rs:1999\r\n#2  core::slice::<impl [T]>::copy_from_slice (self=..., src=...) at /usr/src/rustc-1.43.0/src/libcore/slice/mod.rs:2280\r\n#3  <alloc::vec::Vec<T> as alloc::vec::SpecExtend<&T,core::slice::Iter<T>>>::spec_extend (self=0x3fff06b31f8, iterator=...) at /usr/src/rustc-1.43.0/src/liballoc/vec.rs:2124\r\n#4  <alloc::vec::Vec<T> as core::iter::traits::collect::Extend<&T>>::extend (self=0x3fff06b31f8, iter=...) at /usr/src/rustc-1.43.0/src/liballoc/vec.rs:2265\r\n#5  <&str as std::ffi::c_str::CString::new::SpecIntoVec>::into_vec (self=...) at src/libstd/ffi/c_str.rs:346\r\n#6  0x000003fff67be9de in std::ffi::c_str::CString::new (t=...) at /usr/src/rustc-1.43.0/src/libstd/ffi/c_str.rs:351\r\n#7  rustc_codegen_llvm::back::lto::fat_lto (cgcx=0x3fff06b3910, diag_handler=0x3fff06b3310, symbol_white_list=..., modules=..., cached_modules=..., serialized_modules=...)\r\n    at src/librustc_codegen_llvm/back/lto.rs:270\r\n#8  rustc_codegen_llvm::back::lto::run_fat (cgcx=0x3fff06b3910, modules=..., cached_modules=...) at src/librustc_codegen_llvm/back/lto.rs:147\r\n#9  0x000003fff6639dac in <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::write::WriteBackendMethods>::run_fat_lto (cgcx=0x3fff06b3910, modules=..., cached_modules=...)\r\n    at src/librustc_codegen_llvm/lib.rs:141\r\n#10 rustc_codegen_ssa::back::write::generate_lto_work (cgcx=0x3fff06b3910, needs_fat_lto=..., needs_thin_lto=..., import_only_modules=...)\r\n    at /usr/src/rustc-1.43.0/src/librustc_codegen_ssa/back/write.rs:284\r\n#11 0x000003fff67a5f1c in rustc_codegen_ssa::back::write::start_executing_work::{{closure}} () at /usr/src/rustc-1.43.0/src/librustc_codegen_ssa/back/write.rs:1304\r\n#12 std::sys_common::backtrace::__rust_begin_short_backtrace (f=...) at /usr/src/rustc-1.43.0/src/libstd/sys_common/backtrace.rs:130\r\n#13 0x000003fff67009f8 in std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} () at /usr/src/rustc-1.43.0/src/libstd/thread/mod.rs:475\r\n#14 <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once (self=..., _args=<optimized out>) at /usr/src/rustc-1.43.0/src/libstd/panic.rs:318\r\n#15 std::panicking::try::do_call (data=0x3fff06b4648 \"\") at /usr/src/rustc-1.43.0/src/libstd/panicking.rs:303\r\n#16 0x000003fff59a1938 in __rust_try () from /lib/s390x-linux-gnu/libstd-388f52bec4c8e58e.so\r\n#17 0x000003fff59a1822 in __rust_maybe_catch_panic (f=<optimized out>, data=<optimized out>, data_ptr=0x3fff06b4638, vtable_ptr=0x3fff06b4640) at src/libpanic_unwind/lib.rs:86\r\n#18 0x000003fff6621e4a in std::panicking::try (f=...) at /usr/src/rustc-1.43.0/src/libstd/panicking.rs:281\r\n#19 std::panic::catch_unwind (f=...) at /usr/src/rustc-1.43.0/src/libstd/panic.rs:394\r\n#20 std::thread::Builder::spawn_unchecked::{{closure}} () at /usr/src/rustc-1.43.0/src/libstd/thread/mod.rs:474\r\n#21 core::ops::function::FnOnce::call_once{{vtable-shim}} () at /usr/src/rustc-1.43.0/src/libcore/ops/function.rs:232\r\n#22 0x000003fff5956028 in <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once (self=..., args=<optimized out>) at /usr/src/rustc-1.43.0/src/liballoc/boxed.rs:1017\r\n#23 0x000003fff596d428 in <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once (self=0x3ffec6f6ec0, args=<optimized out>) at /usr/src/rustc-1.43.0/src/liballoc/boxed.rs:1017\r\n#24 std::sys_common::thread::start_thread (main=<optimized out>) at src/libstd/sys_common/thread.rs:13\r\n#25 std::sys::unix::thread::Thread::new::thread_start (main=0x3ffec6f6ec0) at src/libstd/sys/unix/thread.rs:80\r\n#26 0x000003fff55099f6 in start_thread (arg=0x3fff06b5900) at pthread_create.c:477\r\n#27 0x000003fff58067e6 in thread_start () at ../sysdeps/unix/sysv/linux/s390/s390-64/clone.S:65\r\n```\r\n\r\nsrc=0x1 in `#1  0x000003fff599b0d4 in core::intrinsics::copy_nonoverlapping (src=0x1 <error: Cannot access memory at address 0x1>, dst=<optimized out>, count=16)` sure looks bad.\r\n\r\nI don't have a lot of time to dig into this now, will be able to get back to it and run more tests Tuesday NZ time if there's anything I can run that would be useful.", "closed_by": {"login": "mwhudson", "id": 672022, "node_id": "MDQ6VXNlcjY3MjAyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/672022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwhudson", "html_url": "https://github.com/mwhudson", "followers_url": "https://api.github.com/users/mwhudson/followers", "following_url": "https://api.github.com/users/mwhudson/following{/other_user}", "gists_url": "https://api.github.com/users/mwhudson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwhudson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwhudson/subscriptions", "organizations_url": "https://api.github.com/users/mwhudson/orgs", "repos_url": "https://api.github.com/users/mwhudson/repos", "events_url": "https://api.github.com/users/mwhudson/events{/privacy}", "received_events_url": "https://api.github.com/users/mwhudson/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72723/timeline", "performed_via_github_app": null, "state_reason": "completed"}