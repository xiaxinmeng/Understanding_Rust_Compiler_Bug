{"url": "https://api.github.com/repos/rust-lang/rust/issues/63622", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63622/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63622/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63622/events", "html_url": "https://github.com/rust-lang/rust/issues/63622", "id": 481388671, "node_id": "MDU6SXNzdWU0ODEzODg2NzE=", "number": 63622, "title": "Short-circuit behavior and order in expressions results in 15x performance difference?", "user": {"login": "adamdrake", "id": 867423, "node_id": "MDQ6VXNlcjg2NzQyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/867423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamdrake", "html_url": "https://github.com/adamdrake", "followers_url": "https://api.github.com/users/adamdrake/followers", "following_url": "https://api.github.com/users/adamdrake/following{/other_user}", "gists_url": "https://api.github.com/users/adamdrake/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamdrake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamdrake/subscriptions", "organizations_url": "https://api.github.com/users/adamdrake/orgs", "repos_url": "https://api.github.com/users/adamdrake/repos", "events_url": "https://api.github.com/users/adamdrake/events{/privacy}", "received_events_url": "https://api.github.com/users/adamdrake/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-16T00:11:43Z", "updated_at": "2019-08-16T00:22:26Z", "closed_at": "2019-08-16T00:22:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have just started playing with Rust again via Project Euler Problem 4 and I noticed some interesting short-circuit behavior in expressions.  In the two functions below, `v2()` is approximately 15 times faster than `v1()` just due to the ordering in the `if`.  It's great that there is a short-circuit option and accompanying speedup, but is it expected that developers will be mindful of the ordering required to achieve it?\r\n\r\nThis reminds me of the old days of struct packing.\r\n\r\nPlease advise if this is working as intended or is an issue.\r\n\r\nTo test, just run `cargo bench`.\r\n\r\n```rust\r\n#![allow(unused)]\r\n#![feature(test)]\r\nextern crate test;\r\nuse test::Bencher;\r\n\r\nfn is_palindromic_v1(i: i32) -> bool {\r\n    return i.to_string().chars().rev().collect::<String>() == i.to_string();\r\n}\r\n\r\n// v1, naive attempt: multiply three-digit numbers until palindrome is found, keep it, go until the end\r\nfn v1() -> i32 {\r\n    let mut res = 0;\r\n    for i in 100..=999 {\r\n        for j in 100..=999 {\r\n            let prod = i * j;\r\n            if is_palindromic_v1(prod) && prod > res {  // <-- function evaluation first\r\n                res = prod;\r\n            }\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\n// v2, same as v1 but with && order swapped\r\nfn v2() -> i32 {\r\n    let mut res = 0;\r\n    for i in 100..=999 {\r\n        for j in 100..=999 {\r\n            let prod = i * j;\r\n            if prod > res && is_palindromic_v1(prod) {  // <-- swapped here and ~15x faster\r\n                res = prod;\r\n            }\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nmod benchmarks {\r\n    use super::*;\r\n    \r\n    #[bench]\r\n    fn bench_v1(b: &mut Bencher) {\r\n        b.iter(|| v1())\r\n    }\r\n    \r\n    #[bench]\r\n    fn bench_v2(b: &mut Bencher) {\r\n        b.iter(|| v2())\r\n    }\r\n}\r\n```\r\n", "closed_by": {"login": "adamdrake", "id": 867423, "node_id": "MDQ6VXNlcjg2NzQyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/867423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamdrake", "html_url": "https://github.com/adamdrake", "followers_url": "https://api.github.com/users/adamdrake/followers", "following_url": "https://api.github.com/users/adamdrake/following{/other_user}", "gists_url": "https://api.github.com/users/adamdrake/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamdrake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamdrake/subscriptions", "organizations_url": "https://api.github.com/users/adamdrake/orgs", "repos_url": "https://api.github.com/users/adamdrake/repos", "events_url": "https://api.github.com/users/adamdrake/events{/privacy}", "received_events_url": "https://api.github.com/users/adamdrake/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63622/timeline", "performed_via_github_app": null, "state_reason": "completed"}