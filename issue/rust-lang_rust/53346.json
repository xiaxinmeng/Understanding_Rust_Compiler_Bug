{"url": "https://api.github.com/repos/rust-lang/rust/issues/53346", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53346/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53346/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53346/events", "html_url": "https://github.com/rust-lang/rust/issues/53346", "id": 350418164, "node_id": "MDU6SXNzdWUzNTA0MTgxNjQ=", "number": 53346, "title": "repr(simd) is unsound in C FFI", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472557610, "node_id": "MDU6TGFiZWwxNDcyNTU3NjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-simd_ffi", "name": "F-simd_ffi", "color": "f9c0cc", "default": false, "description": "`#![feature(simd_ffi)]`"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-08-14T13:01:58Z", "updated_at": "2022-04-15T04:14:42Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This supersedes https://github.com/rust-lang/rust/issues/44367 - after https://github.com/rust-lang/rust/pull/47743 the unsoundness has been restricted to C FFI. The Rust ABI for vector types currently passes all types by memory. \r\n\r\nThere are sadly many C libraries that use vector types in their ABIs, some of which are pretty much \"fundamental\" like some of the short-vector math libraries: `libmvec`, SVML, etc. \r\n\r\nAs a summary of the previous issue, currently, the behavior of calling `bar`, `the following snippet of Rust code is _sometimes_ undefined:\r\n\r\n```rust\r\n#![feature(repr_simd, simd_ffi)]\r\n\r\n#[repr(simd)]\r\nstruct F32x8(f32, f32, f32, f32, f32, f32, f32, f32);\r\nimpl F32x8 { fn splat(x: f32) -> Self { F32x8(x, x, x, x, x, x, x, x) } }\r\n\r\n#[allow(improper_ctypes)]\r\nextern \"C\" {\r\n    fn foo(x: F32x8) -> F32x8;\r\n}\r\n\r\nfn main() {\r\n    unsafe { \r\n        foo(F32x8::splat(0.));  // UB ?\r\n    }\r\n}\r\n```\r\n\r\nWhen both the Rust program and the C library exposing foo are compiled with the same set of target-features such that their ABIs match, then the program above will work as expected.\r\n\r\nWhen the C library is compiled with say AVX2, but the Rust program is compiled with SSE4.2, then Rust will try to pass the F32x8 in two 128-bit wide vector registers to C, while the C code only expects a single 256-bit wide vector. A similar problem occurs in the opposite case.\r\n\r\ncc @rkruppe @parched @alexcrichton @eddyb - did I correctly represent the problem ?\r\n\r\n---\r\n\r\nA potential solution discussed in  https://github.com/rust-lang/rust/issues/44367 would be to completely forbid vector types in FFI functions that do not specify their vector ABI:\r\n\r\n```rust\r\nextern \"C\" {\r\n    extern \"vector-256\" fn foo(x: F32x8) -> F32x8;\r\n    extern \"vector-128\" fn bar(x: F32x8) -> F32x8;\r\n    // fn baz(x: F32x8) -> F32x8; // ERROR: repr(simd) in C-FFI with unspecified vector ABI\r\n}\r\n\r\nlet x = F32x8::splat(0.);\r\nfoo(x); // x is passed in a single 256-bit wide register\r\nbar(x); // x is passed in two 128-bit wide registers\r\n```\r\n\r\nIf the C library linked does not expose the specified ABIs for `foo` and `bar`, the program would fail to link, preventing undefined behavior.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53346/timeline", "performed_via_github_app": null, "state_reason": null}