{"url": "https://api.github.com/repos/rust-lang/rust/issues/15657", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/15657/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/15657/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/15657/events", "html_url": "https://github.com/rust-lang/rust/issues/15657", "id": 37766399, "node_id": "MDU6SXNzdWUzNzc2NjM5OQ==", "number": 15657, "title": "in `impl A for B`, report trait/impl sig inconsistency before method/body inconsistency", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-07-14T08:08:22Z", "updated_at": "2014-10-03T21:12:19Z", "closed_at": "2014-10-03T21:12:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "How often have you seen a message like:\n\n> error: mismatched types: expected `()` but found `int` (expected () but found int)\n\nwhen writing an impl, and responded (with some head-scratching): \"Nonsense!  This trait's method definitely returns an int, not unit!\" ... only to then read further down the compiler output and see:\n\n> error: method `foo` has an incompatible type for trait: expected int but found ()\n\nI know it happens to me a lot.\n\n---\n\nSample code to illustrate this:\n\n``` rust\n#![crate_type=\"lib\"]\ntrait A {\n    fn foo(self) -> int;\n}\nstruct B;\nimpl A for B {\n    fn foo(self) {\n        if 0i == 1i {\n            return 3i;\n        }\n        *4i; // (insert an arbitary number of ill-typed expressions here.)\n        3i\n    }\n}\n```\n\nwhich yields the transcript:\n\n```\n% DYLD_LIBRARY_PATH=./objdir-dbgopt/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib ./objdir-dbgopt/x86_64-apple-darwin/stage2/bin/rustc /tmp/g.rs \n/tmp/g.rs:9:20: 9:22 error: mismatched types: expected `()` but found `int` (expected () but found int)\n/tmp/g.rs:9             return 3i;\n                               ^~\n/tmp/g.rs:11:9: 11:12 error: type `int` cannot be dereferenced\n/tmp/g.rs:11         *4i; // (insert an arbitary number of ill-typed expressions here.)\n                     ^~~\n/tmp/g.rs:12:9: 12:11 error: mismatched types: expected `()` but found `int` (expected () but found int)\n/tmp/g.rs:12         3i\n                     ^~\n/tmp/g.rs:7:5: 13:6 error: method `foo` has an incompatible type for trait: expected int but found ()\n/tmp/g.rs:7     fn foo(self) {\n/tmp/g.rs:8         if 0i == 1i {\n/tmp/g.rs:9             return 3i;\n/tmp/g.rs:10         }\n/tmp/g.rs:11         *4i; // (insert an arbitary number of ill-typed expressions here.)\n/tmp/g.rs:12         3i\n             ...\nerror: aborting due to 4 previous errors\n```\n\nAs noted in the program comment, there can be an arbitrary number of type errors before one sees the report of the signature mismatch between the trait and its impl.\n\n---\n\nIn principle there is no \"100% right\" ordering here between these messages, because there are scenarios where the right response to this message is to revise the trait definition (so that its method signature is changed to match the one in the impl you are writing).\n\nBut I believe that in most cases, the trait definition has been worked out long ahead of time (and is often fixed/unchangeable), while the impl itself is under active development, and therefore it would be more helpful to the user if in the final error report, the mismatches between the trait and its impl(s) are reported before the error when attempting to type-check the body of the impl itself.\n\n---\n\n(I am not super familiar with the code that drives these checks; it could be that fixing this is as simple as reordering a few statements.)\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/15657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/15657/timeline", "performed_via_github_app": null, "state_reason": "completed"}