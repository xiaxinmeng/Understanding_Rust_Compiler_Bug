{"url": "https://api.github.com/repos/rust-lang/rust/issues/66993", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66993/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66993/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66993/events", "html_url": "https://github.com/rust-lang/rust/issues/66993", "id": 532146118, "node_id": "MDU6SXNzdWU1MzIxNDYxMTg=", "number": 66993, "title": "Optimize for the range of resulting values from the euclidean remainder of a signed integer", "user": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-03T17:28:44Z", "updated_at": "2021-05-16T20:45:52Z", "closed_at": "2021-05-16T20:45:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Is it possible to give the compiler knowledge that the euclidean remainder of a signed integer is always positive? Specifically, 0 \u2264 rem \u2264 x for `value.rem_euclid(x)`. This already appears to be the case for both regular modulo and the euclidean remainder of signed integers. Right now, it's necessary to add a branch that isn't optimized away.\r\n\r\nWith an unsigned integer:\r\n\r\n```rust\r\npub fn rem(value: u8) -> u8 {\r\n    match value.rem_euclid(7) {\r\n        remainder @ 0..=6 => remainder,\r\n        _ => unreachable!(),\r\n    }\r\n}\r\n```\r\n<sup>[godbolt](https://godbolt.org/z/d8EJEY)</sup>\r\n\r\nresults in the following assembly\r\n\r\n```asm\r\nexample::rem:\r\n        movzx   eax, dil\r\n        lea     ecx, [rax + 8*rax]\r\n        lea     ecx, [rax + 4*rcx]\r\n        shr     ecx, 8\r\n        mov     edx, eax\r\n        sub     dl, cl\r\n        shr     dl\r\n        add     dl, cl\r\n        shr     dl, 2\r\n        movzx   ecx, dl\r\n        lea     edx, [8*rcx]\r\n        sub     edx, ecx\r\n        sub     al, dl\r\n        ret\r\n```\r\n\r\nWith a signed integer:\r\n\r\n```rust\r\npub fn rem(value: i8) -> i8 {\r\n    match value.rem_euclid(7) {\r\n        remainder @ 0..=6 => remainder,\r\n        _ => unreachable!(),\r\n    }\r\n}\r\n```\r\n<sup>[godbolt](https://godbolt.org/z/f7ZGAe)</sup>\r\n\r\nresults in the following assembly\r\n\r\n```asm\r\n<T as core::any::Any>::type_id:\r\n        movabs  rax, 1229646359891580772\r\n        ret\r\n\r\nstd::panicking::begin_panic:\r\n        sub     rsp, 24\r\n        lea     rax, [rip + .L__unnamed_3]\r\n        mov     qword ptr [rsp + 8], rax\r\n        mov     qword ptr [rsp + 16], 40\r\n        lea     rsi, [rip + .L__unnamed_1]\r\n        lea     rcx, [rip + .L__unnamed_4]\r\n        lea     rdi, [rsp + 8]\r\n        xor     edx, edx\r\n        call    qword ptr [rip + std::panicking::rust_panic_with_hook@GOTPCREL]\r\n        ud2\r\n\r\ncore::ptr::real_drop_in_place:\r\n        ret\r\n\r\n<std::panicking::begin_panic::PanicPayload<A> as core::panic::BoxMeUp>::get:\r\n        push    rax\r\n        cmp     qword ptr [rdi], 0\r\n        je      .LBB3_1\r\n        mov     rax, rdi\r\n        lea     rdx, [rip + .L__unnamed_2]\r\n        pop     rcx\r\n        ret\r\n.LBB3_1:\r\n        call    qword ptr [rip + std::process::abort@GOTPCREL]\r\n        ud2\r\n\r\n<std::panicking::begin_panic::PanicPayload<A> as core::panic::BoxMeUp>::take_box:\r\n        push    r14\r\n        push    rbx\r\n        push    rax\r\n        mov     rbx, qword ptr [rdi]\r\n        mov     r14, qword ptr [rdi + 8]\r\n        mov     qword ptr [rdi], 0\r\n        test    rbx, rbx\r\n        je      .LBB4_3\r\n        mov     edi, 16\r\n        mov     esi, 8\r\n        call    qword ptr [rip + __rust_alloc@GOTPCREL]\r\n        test    rax, rax\r\n        je      .LBB4_4\r\n        mov     qword ptr [rax], rbx\r\n        mov     qword ptr [rax + 8], r14\r\n        lea     rdx, [rip + .L__unnamed_2]\r\n        add     rsp, 8\r\n        pop     rbx\r\n        pop     r14\r\n        ret\r\n.LBB4_3:\r\n        call    qword ptr [rip + std::process::abort@GOTPCREL]\r\n        ud2\r\n.LBB4_4:\r\n        mov     edi, 16\r\n        mov     esi, 8\r\n        call    qword ptr [rip + alloc::alloc::handle_alloc_error@GOTPCREL]\r\n        ud2\r\n\r\nexample::rem:\r\n        push    rax\r\n        movsx   eax, dil\r\n        imul    eax, eax, -109\r\n        shr     eax, 8\r\n        add     al, dil\r\n        mov     ecx, eax\r\n        shr     cl, 7\r\n        sar     al, 2\r\n        add     al, cl\r\n        movzx   eax, al\r\n        lea     ecx, [8*rax]\r\n        sub     ecx, eax\r\n        sub     dil, cl\r\n        lea     eax, [rdi + 7]\r\n        test    dil, dil\r\n        movzx   ecx, dil\r\n        movzx   eax, al\r\n        cmovns  eax, ecx\r\n        cmp     al, 6\r\n        ja      .LBB5_2\r\n        pop     rcx\r\n        ret\r\n.LBB5_2:\r\n        call    std::panicking::begin_panic\r\n        ud2\r\n\r\n.L__unnamed_1:\r\n        .quad   core::ptr::real_drop_in_place\r\n        .quad   16\r\n        .quad   8\r\n        .quad   <std::panicking::begin_panic::PanicPayload<A> as core::panic::BoxMeUp>::take_box\r\n        .quad   <std::panicking::begin_panic::PanicPayload<A> as core::panic::BoxMeUp>::get\r\n\r\n.L__unnamed_2:\r\n        .quad   core::ptr::real_drop_in_place\r\n        .quad   16\r\n        .quad   8\r\n        .quad   <T as core::any::Any>::type_id\r\n\r\n.L__unnamed_5:\r\n        .ascii  \"./example.rs\"\r\n\r\n.L__unnamed_4:\r\n        .quad   .L__unnamed_5\r\n        .asciz  \"\\f\\000\\000\\000\\000\\000\\000\\000\\004\\000\\000\\000\\016\\000\\000\"\r\n\r\n.L__unnamed_3:\r\n        .ascii  \"internal error: entered unreachable code\"\r\n```", "closed_by": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66993/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66993/timeline", "performed_via_github_app": null, "state_reason": "completed"}