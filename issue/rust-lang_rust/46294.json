{"url": "https://api.github.com/repos/rust-lang/rust/issues/46294", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46294/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46294/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46294/events", "html_url": "https://github.com/rust-lang/rust/issues/46294", "id": 276879188, "node_id": "MDU6SXNzdWUyNzY4NzkxODg=", "number": 46294, "title": "Wasm: #[no_mangle] for root level items in leaf crates", "user": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-27T01:52:56Z", "updated_at": "2018-06-30T18:39:53Z", "closed_at": "2018-06-30T18:39:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "All the inline usages of Rust in js that I have seen have this `#[no_mangle]` attribute added to each function.\r\n\r\nE.g. see [this example](https://github.com/killercup/wasm-experiments/tree/eb698eaa23f0676d63bfd3521e34c600316b5a20#easy-as-1-2-3) by @killercup , or [this](https://github.com/browserify/rustify/tree/632701d92a5a510da9cd344e3e4179e3f66cd542#usage) one by browserify.\r\n\r\nI haven't coded any hybrid js+wasm yet, but to me it seems that having to specify the `#[no_mangle]` attribute in order to access wasm module exports via the [`exports` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/exports) at their original name is a bit of a boilerplate.\r\n\r\nSo I wonder: can't we add a mode to rustc that allows you to omit the attribute?\r\n\r\nSpecifically, I would propose that there should be a `-Z root-no-mangle` (eventually -C) flag for rustc which automatically adds a `#[no_mangle]` attribute to any function marked `pub` that is in the root of the crate.\r\n\r\nThis flag could be added by cargo to the leaf crate, at least in cases where it compiles actual inline Rust. I'm not so sure about larger codebases that are not inlined.\r\n\r\nA few points:\r\n\r\n* If Rust wants to become the \"systems language of the web\", the `#[no_mangle]` attribute stands in the way.\r\n* The Rust mangling system was designed with \"Rust being used by Rust\" in mind. For this, the system is perfect. It keeps the crates outside of each other's way. The only ones to spoil the fun are those native dependencies. Now \"Rust being used by Javascript\" is a novel use case and I think it deserves the adjustment in mangling patterns.\r\n* Yes, this might cause weird linker errors, e.g. if you include a native C library and it defines a symbol of the same name, but I think this error will be experienced later on, and also, everything should be pure Rust xD.\r\n* One can also think of scenarios where there is no leaf crate but instead js is using various functions from crates on crates.io directly. I think in these cases, there is no leaf crate and thus the flag won't be passed to any crate.\r\n* Possibly one can extend this feature to work on modules as well, aka levelling up the entire public API of the leaf crate by one level. I don't know much about wasm yet to tell whether this makes any sense.\r\n\r\ncc @alexcrichton ", "closed_by": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46294/timeline", "performed_via_github_app": null, "state_reason": "completed"}