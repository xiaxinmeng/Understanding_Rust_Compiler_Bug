{"url": "https://api.github.com/repos/rust-lang/rust/issues/95719", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95719/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95719/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95719/events", "html_url": "https://github.com/rust-lang/rust/issues/95719", "id": 1193971546, "node_id": "I_kwDOAAsO6M5HKo9a", "number": 95719, "title": "Unexpected \"the parameter type X may not live long enough\" error in asynchronous functions", "user": {"login": "wvwwvwwv", "id": 38215215, "node_id": "MDQ6VXNlcjM4MjE1MjE1", "avatar_url": "https://avatars.githubusercontent.com/u/38215215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wvwwvwwv", "html_url": "https://github.com/wvwwvwwv", "followers_url": "https://api.github.com/users/wvwwvwwv/followers", "following_url": "https://api.github.com/users/wvwwvwwv/following{/other_user}", "gists_url": "https://api.github.com/users/wvwwvwwv/gists{/gist_id}", "starred_url": "https://api.github.com/users/wvwwvwwv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wvwwvwwv/subscriptions", "organizations_url": "https://api.github.com/users/wvwwvwwv/orgs", "repos_url": "https://api.github.com/users/wvwwvwwv/repos", "events_url": "https://api.github.com/users/wvwwvwwv/events{/privacy}", "received_events_url": "https://api.github.com/users/wvwwvwwv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-04-06T03:51:07Z", "updated_at": "2022-06-05T06:43:27Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nWhen a `Future` is wrapped in an `async` block or an `async` function, some of its traits are lost, e.g., Send, thus causing various issues.\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#![feature(associated_type_bounds, generic_associated_types, type_alias_impl_trait)]\r\n\r\nuse std::future::Future;\r\n\r\npub trait Get: Send + Sync {\r\n    type Ret<'a>: Future<Output = usize> + Send + 'a\r\n    where\r\n        Self: 'a;\r\n    fn get<'a>(&'a self) -> Self::Ret<'a>\r\n    where\r\n        Self: 'a;\r\n}\r\n\r\nimpl Get for usize {\r\n    type Ret<'a>\r\n    where\r\n        Self: 'a,\r\n    = impl Future<Output = usize> + Send + 'a;\r\n\r\n    fn get<'a>(&'a self) -> Self::Ret<'a>\r\n    where\r\n        Self: 'a,\r\n    {\r\n        async move { *self }\r\n    }\r\n}\r\n\r\nfn is_send<R, F: Future<Output = R> + Send>(_f: &F) -> bool {\r\n    true\r\n}\r\n\r\nasync fn wrap<G: Get>(g: &G) -> usize {\r\n    let fut = g.get();\r\n    assert!(is_send(&fut));\r\n    fut.await\r\n}\r\n\r\nasync fn wrap_wrap<G: Get>(g: &G) -> usize {\r\n    let fut = wrap(g);\r\n    // Error: the parameter type `G` may not live long enough.\r\n    assert!(is_send(&fut));\r\n    fut.await\r\n}\r\n```\r\n\r\nI expected to see no compiler errors: the returned `Future` from `async fn wrap` should be `Send`, because `g.get()` is `Send` and `async fn wrap` only wraps the code in an asynchronous code block.\r\n\r\nInstead, this happened: the returned `Future` from `async fn wrap` is not anymore `Send`. Note that the error manifests differently if another lifetime bounds are involved in the trait - `lifetime bound not satisfied` when asserting `is_send(&fut)`. It's even strange to see `lifetime bounds` or `may not live long enough` errors when checking the `Send` bound.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.59.0 (9d1b2106e 2022-02-23)\r\nbinary: rustc\r\ncommit-hash: 9d1b2106e23b1abd32fce1f17267604a5102f57a\r\ncommit-date: 2022-02-23\r\nhost: aarch64-apple-darwin\r\nrelease: 1.59.0\r\nLLVM version: 13.0.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Error</summary>\r\n<p>\r\n\r\n```\r\nerror[E0311]: the parameter type `G` may not live long enough\r\n   --> tests/test.rs:687:17\r\n    |\r\n684 |     async fn wrap_wrap<G: Get>(g: &G) -> usize {\r\n    |                        -- help: consider adding an explicit lifetime bound...: `G: 'a +`\r\n...\r\n687 |         assert!(is_send(&fut));\r\n    |                 ^^^^^^^ ...so that the type `G` will meet its required lifetime bounds...\r\n    |\r\nnote: ...that is required by this bound\r\n   --> tests/test.rs:674:43\r\n    |\r\n674 |     fn is_send<R, F: Future<Output = R> + Send>(_f: &F) -> bool {\r\n    |                                           ^^^^\r\n\r\nerror: could not compile `async-trait` due to previous error\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95719/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95719/timeline", "performed_via_github_app": null, "state_reason": null}