{"url": "https://api.github.com/repos/rust-lang/rust/issues/110288", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110288/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110288/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110288/events", "html_url": "https://github.com/rust-lang/rust/issues/110288", "id": 1666607017, "node_id": "I_kwDOAAsO6M5jVmep", "number": 110288, "title": "stop adding dropck outlives requirements for `[T; 0]`", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 638321554, "node_id": "MDU6TGFiZWw2MzgzMjE1NTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/proposed-final-comment-period", "name": "proposed-final-comment-period", "color": "ededed", "default": false, "description": "Proposed to merge/close by relevant subteam, see T-<team> label. Will enter FCP once signed off."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2023-04-13T15:02:26Z", "updated_at": "2023-05-08T14:55:49Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`[T; 0]` currently doesn't need drop glue by itself but still adds liveness requirements for `T` when used in a more complex value which already needs drop.\r\n\r\nThis behavior is identitical to `PhantomData`, which also does not need drop glue by itself but adds liveness requirements when used in values who do. I do not propose to change anything about `PhantomData` with this issue.\r\n\r\n## Example\r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=1a66a3d15163184ba832763c11862ce1)\r\n\r\n```rust\r\nstruct PrintOnDrop<'s>(&'s str);\r\nimpl<'s> Drop for PrintOnDrop<'s> {\r\n    fn drop(&mut self) {\r\n        println!(\"{}\", self.0);\r\n    }\r\n}\r\n\r\nfn to_array_zero<T>(_: T) -> [T; 0] {\r\n    []\r\n}\r\n\r\npub fn array_zero_by_itself() {\r\n    let mut x = [];\r\n    {\r\n        let s = String::from(\"temporary\");\r\n        let p = PrintOnDrop(&s);\r\n        x = to_array_zero(p)\r\n    }\r\n    // implicitly dropping `x` here, no drop glue needed,\r\n    // so ignoring outlives requirements. NO ERROR\r\n}\r\n\r\npub fn array_zero_in_tuple() {\r\n    let mut x = ([], String::new());\r\n    {\r\n        let s = String::from(\"temporary\");\r\n        let p = PrintOnDrop(&s);\r\n        x.0 = to_array_zero(p)\r\n    }\r\n    // implicitly dropping `x` here, drop glue needed to drop the `String`,\r\n    // adding outlives requirements for the zero array. ERROR\r\n}\r\n```\r\n\r\nThis behavior is confusing. I propose that we don't add any dropck outlives requirements for arrays of length zero. This allows strictly more code to compile, it may however result in unsoundness if people rely on this behavior to guarantee errors.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110288/timeline", "performed_via_github_app": null, "state_reason": null}