{"url": "https://api.github.com/repos/rust-lang/rust/issues/36082", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/36082/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/36082/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/36082/events", "html_url": "https://github.com/rust-lang/rust/issues/36082", "id": 173664778, "node_id": "MDU6SXNzdWUxNzM2NjQ3Nzg=", "number": 36082, "title": "Dubious region behaviour affected by `&_` annotations", "user": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-28T20:07:26Z", "updated_at": "2017-01-26T20:33:05Z", "closed_at": "2017-01-26T20:33:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Meta\n\n```\n$ rustc -V\nrustc 1.13.0-dev (528c6f3ed 2016-08-25)\n```\n## STR\n\nThis code compiles and runs successfully\n\n``` Rust\nuse std::cell::RefCell;\n\nfn main() {\n    let r = 0;\n    let x = RefCell::new((&r,));\n\n    let val = x.borrow().0;\n    println!(\"{}\", val);\n\n    x.borrow_mut();\n}\n```\n\nBut adding a `&_` type annotation causes a double borrow panic:\n\n``` Rust\nuse std::cell::RefCell;\n\nfn main() {\n    let r = 0;\n    let x = RefCell::new((&r,));\n\n    let val: &_ = x.borrow().0;\n    println!(\"{}\", val);\n\n    x.borrow_mut();\n}\n```\n## Notes\n\n\"Specification-wise\", the type annotation changing the code behaviour is rather dubious. The root cause is [this gem of a function](https://github.com/rust-lang/rust/blob/6fd13fad9349a4c36a61a6f2766406cff7bcee8a/src/librustc/middle/region.rs#L984).\n\nThe behaviour is actually documented in the code:\n\n``` Rust\n    // Rule B. `let x: &[...] = [foo().x]`. The rvalue `[foo().x]`\n    // would have an extended lifetime, but not `foo()`.\n```\n\nThat \"common case\" does not apply in today's Rust, of course.\n\nOf course, changing this now would be a [breaking-change], but we are landing a similar significant change by @KiChjang (#36029). I will post my take of the rules on a rust-memory-model issue, because @ubsan nicely asked me to (maybe that should be on the RFCs repo instead?).\n\ncc @nrc @pnkfelix @ubsan\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/36082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/36082/timeline", "performed_via_github_app": null, "state_reason": "completed"}