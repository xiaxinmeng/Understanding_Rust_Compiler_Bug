{"url": "https://api.github.com/repos/rust-lang/rust/issues/98918", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98918/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98918/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98918/events", "html_url": "https://github.com/rust-lang/rust/issues/98918", "id": 1293985616, "node_id": "I_kwDOAAsO6M5NIKdQ", "number": 98918, "title": "Missing \"path statement drops value\"", "user": {"login": "andrzejtp", "id": 46742173, "node_id": "MDQ6VXNlcjQ2NzQyMTcz", "avatar_url": "https://avatars.githubusercontent.com/u/46742173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrzejtp", "html_url": "https://github.com/andrzejtp", "followers_url": "https://api.github.com/users/andrzejtp/followers", "following_url": "https://api.github.com/users/andrzejtp/following{/other_user}", "gists_url": "https://api.github.com/users/andrzejtp/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrzejtp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrzejtp/subscriptions", "organizations_url": "https://api.github.com/users/andrzejtp/orgs", "repos_url": "https://api.github.com/users/andrzejtp/repos", "events_url": "https://api.github.com/users/andrzejtp/events{/privacy}", "received_events_url": "https://api.github.com/users/andrzejtp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-07-05T08:45:34Z", "updated_at": "2022-07-05T08:45:34Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Given the following code: \r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=ee9151221000d9d30a653aa00bd14d47\r\n\r\n```rust\r\ntruct Test {\r\n}\r\n\r\nfn test(some_t: Test) {\r\n    || {loop {\r\n        some_t;\r\n    }};\r\n}\r\n\r\nfn main() {\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0382]: use of moved value: `some_t`\r\n --> src/main.rs:6:9\r\n  |\r\n6 |         some_t;\r\n  |         ^^^^^^ value moved here, in previous iteration of loop\r\n  |\r\n  = note: move occurs because `some_t` has type `Test`, which does not implement the `Copy` trait\r\n```\r\n\r\nThe note does not explain well why the move occurs. It instead explains why in subsequent iterations of the loop the move cannot be performed: because the value is already moved in the first iteration. But there's no clue why the move wanted to occur (and occured) in the first iteration. The (unstated) reason is that `some_t;` is a _path statement_.\r\n\r\nReading `rustc --explain E0382` output does not provide any hints, either.\r\n\r\nThe problem is even more cryptic when using vscode (likely a pretty common case): the message is shortened to:\r\n\r\n```\r\nuse of moved value: `some_t`\r\nmove occurs because `some_t` has type `Test`, which does not implement the `Copy` trait\r\n```\r\n\r\nOnly when the closure is reduced to a `loop` without the closure, like this:\r\n```rust\r\nfn test(some_t: Test) {\r\n    loop {\r\n        some_t;\r\n    };\r\n}\r\n```\r\n\r\nis the message given by vscode the same as when issuing `cargo c` from command line (and mentions the move in the first iteration).\r\n\r\nIn any case (commandline or vscode) the messages given by the compiler (or RustAnalyzer) do not point to the root cause. But they could, as demonstrated by the code below:\r\n\r\n```rust\r\nuse std::sync::mpsc;\r\n\r\nstruct Job;\r\n\r\nfn test(job: Job) {\r\n    job;\r\n}\r\n\r\nfn new(receiver: mpsc::Receiver<Job>) {\r\n    receiver;\r\n}\r\n\r\nfn main() {\r\n}\r\n```\r\n\r\nfor which `cargo c` issues (among others) the following:\r\n\r\n```\r\nwarning: path statement with no effect\r\n --> src/main.rs:6:5\r\n  |\r\n6 |     job;\r\n  |     ^^^^\r\n  |\r\n  = note: `#[warn(path_statements)]` on by default\r\n\r\nwarning: path statement drops value\r\n  --> src/main.rs:10:5\r\n   |\r\n10 |     receiver;\r\n   |     ^^^^^^^^^ help: use `drop` to clarify the intent: `drop(receiver);`\r\n```\r\n\r\nIn the `test` function the `job;` is a _path statement with no effect_. Interestingly enough, in the `new` function in the same situation we are told that _path statement drops value_. The side question is why in these two functions (`test` and `new`) the compiler messages are different. And the point is that this last message (\"path statement drops value\") likely indicates the real cause of the move occuring in the first loop iteration in the original problem - but it was not suggested by the compiler message there.\r\n\r\nIdeally the \"path statement drops value\" should be produced by the compiler for the original problem.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98918/timeline", "performed_via_github_app": null, "state_reason": null}