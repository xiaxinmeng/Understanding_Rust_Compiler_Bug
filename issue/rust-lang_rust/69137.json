{"url": "https://api.github.com/repos/rust-lang/rust/issues/69137", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69137/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69137/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69137/events", "html_url": "https://github.com/rust-lang/rust/issues/69137", "id": 564812364, "node_id": "MDU6SXNzdWU1NjQ4MTIzNjQ=", "number": 69137, "title": "The \"type_alias_impl_trait\" feature has problems handling lifetime parameters.", "user": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472502130, "node_id": "MDU6TGFiZWwxNDcyNTAyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-type_alias_impl_trait", "name": "F-type_alias_impl_trait", "color": "f9c0cc", "default": false, "description": "`#[feature(type_alias_impl_trait)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-13T16:42:25Z", "updated_at": "2021-06-29T21:25:32Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI was starting with this function (which does compile on nightly):\r\n```rust\r\n#![feature(unboxed_closures)]\r\n#![feature(type_alias_impl_trait)]\r\nfn curry<'a, A: 'a, B, C, F: Fn(A, B) -> C> (f: &'a F)\r\n    -> impl Fn<(A,), Output = impl FnOnce(B) -> C + 'a> + 'a\r\n{\r\n    move |a| move |b| f(a,b)\r\n}\r\n```\r\nand wanted to give a name to its return type.\r\nThe straightforward approach seems to be _(please correct me if the \"right\" way to do this is different)_:\r\n```rust\r\n#![feature(unboxed_closures)]\r\n#![feature(type_alias_impl_trait)]\r\ntype Curried<'a, A: 'a, B, C, F: Fn(A, B) -> C>\r\n = impl Fn<(A,), Output = impl FnOnce(B) -> C + 'a> + 'a;\r\n\r\nfn curry<'a, A: 'a, B, C, F: Fn(A, B) -> C> (f: &'a F)\r\n    -> Curried<'a, A, B, C, F>\r\n{\r\n    move |a| move |b| f(a,b)\r\n}\r\n```\r\nBut the compiler is currently unhappy with the lifetimes. I'm getting the following.\r\n```\r\nerror: cannot infer an appropriate lifetime\r\n  --> src/main.rs:11:5\r\n   |\r\n6  |  = impl Fn<(A,), Output = impl FnOnce(B) -> C + 'a> + 'a;\r\n   |                           ------------------------ this return type evaluates to the `'static` lifetime...\r\n...\r\n11 |     move |a| move |b| f(a,b)\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^ ...but this borrow...\r\n   |\r\nnote: ...can't outlive the lifetime `'a` as defined on the function body at 8:10\r\n  --> src/main.rs:8:10\r\n   |\r\n8  | fn curry<'a, A: 'a, B, C, F: Fn(A, B) -> C> (f: &'a F)\r\n   |          ^^\r\nhelp: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 8:10\r\n   |\r\n9  |     -> Curried<'a, A, B, C, F> + '_\r\n   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: cannot infer an appropriate lifetime\r\n  --> src/main.rs:11:14\r\n   |\r\n6  |  = impl Fn<(A,), Output = impl FnOnce(B) -> C + 'a> + 'a;\r\n   |                           ------------------------ this return type evaluates to the `'static` lifetime...\r\n...\r\n11 |     move |a| move |b| f(a,b)\r\n   |              ^^^^^^^^^^^^^^^ ...but this borrow...\r\n   |\r\nnote: ...can't outlive the lifetime `'a` as defined on the function body at 8:10\r\n  --> src/main.rs:8:10\r\n   |\r\n8  | fn curry<'a, A: 'a, B, C, F: Fn(A, B) -> C> (f: &'a F)\r\n   |          ^^\r\nhelp: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 8:10\r\n   |\r\n9  |     -> Curried<'a, A, B, C, F> + '_\r\n   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to 2 previous errors\r\n```\r\n\r\nIt works without the lifetimes (i.e. after removing parametrization over 'a and replacing all occurrences of 'a with 'static), like this:\r\n```rust\r\n#![feature(unboxed_closures)]\r\n#![feature(type_alias_impl_trait)]\r\ntype Curried<A: 'static, B, C, F: Fn(A, B) -> C>\r\n = impl Fn<(A,), Output = impl FnOnce(B) -> C + 'static> + 'static;\r\n\r\nfn curry<A: 'static, B, C, F: Fn(A, B) -> C> (f: &'static F)\r\n    -> Curried<A, B, C, F>\r\n{\r\n    move |a| move |b| f(a,b)\r\n}\r\n\r\nuse std::ops::Add;\r\nfn main() {\r\n    let x = curry(&i32::add)(1)(2);\r\n    println!(\"{}\", x); // prints \"3\"\r\n}\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\nCurrent behavior only since #67844 was fixed (after `nightly-2020-02-14`). Before that, this code triggered an ICE.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69137/timeline", "performed_via_github_app": null, "state_reason": null}