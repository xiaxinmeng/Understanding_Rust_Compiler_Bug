{"url": "https://api.github.com/repos/rust-lang/rust/issues/30112", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/30112/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/30112/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/30112/events", "html_url": "https://github.com/rust-lang/rust/issues/30112", "id": 119487965, "node_id": "MDU6SXNzdWUxMTk0ODc5NjU=", "number": 30112, "title": "Bounds checking should be eliminated in obvious case", "user": {"login": "Geal", "id": 119296, "node_id": "MDQ6VXNlcjExOTI5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/119296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geal", "html_url": "https://github.com/Geal", "followers_url": "https://api.github.com/users/Geal/followers", "following_url": "https://api.github.com/users/Geal/following{/other_user}", "gists_url": "https://api.github.com/users/Geal/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geal/subscriptions", "organizations_url": "https://api.github.com/users/Geal/orgs", "repos_url": "https://api.github.com/users/Geal/repos", "events_url": "https://api.github.com/users/Geal/events{/privacy}", "received_events_url": "https://api.github.com/users/Geal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2015-11-30T13:05:06Z", "updated_at": "2022-07-23T06:40:56Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\n\nFollowing the benchmarks comparing the nom and chomp parser combinator libraries, I investigated the performance difference and found something interesting: in code that is nearly equivalent, rustc generates a lot more stuff with nom than chomp, and keeps bounds check where the parsers make sure no error should happen.\n\nFor the comparison, here are some code examples, in nom:\n\n``` rust\nnamed!(message_header_value, chain!(\n        take_while1!(is_horizontal_space) ~\n  data: take_while1!(not_line_ending)     ~\n  line_ending,\n  || data));\n```\n\nin chomp:\n\n``` rust\nfn message_header_line(i: Input<u8>) -> U8Result<&[u8]> {\n    parse!{i;\n                   take_while1(is_horizontal_space);\n        let line = take_till(is_end_of_line);\n                   end_of_line();\n\n        ret line\n    }   \n}\n```\n\n(we could change `take_while1!(not_line_ending)` to a `take_till!(is_end_of_line)` and it would achieve the same code).\n\nOnce the macros are processed, it gives the following code in nom: https://gist.github.com/Geal/fa3740cf45530d123023\n\nchomp uses the same approach, with iterators, in its version of `take_while1` and take_till`: https://github.com/m4rw3r/chomp/blob/master/src/parsers.rs#L208-L253\n\nNow, the interesting thing is the assembly generated by rustc ( 1.5.0-dev (ea2dabf6b 2015-10-21), but the version from yesterday has the same issues). Here is the nom version: http://dev.unhandledexpression.com/nom_http.pdf\nAnd the chomp version: http://dev.unhandledexpression.com/chomp_http.pdf\n\nWe can see that nom's code is a lot more complex:\n- large blocks of code calling nom's `Err` destructor (it is expected, but I'd like to improve that as well)\n- 4 bounds checks are still present, while they do not appear in chomp\n\nI would like to know if there is a way to improve code generation. If the issue is in rustc, I can provide as many test cases as you need. If it is in nom, I'm open to any ideas ;)\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/30112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/30112/timeline", "performed_via_github_app": null, "state_reason": null}