{"url": "https://api.github.com/repos/rust-lang/rust/issues/77425", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77425/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77425/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77425/events", "html_url": "https://github.com/rust-lang/rust/issues/77425", "id": 713167896, "node_id": "MDU6SXNzdWU3MTMxNjc4OTY=", "number": 77425, "title": "Way to disable const_item_mutation lint for one specific const", "user": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-10-01T20:38:49Z", "updated_at": "2020-10-02T00:34:54Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The lint added in Rust 1.48 by #75573 warns on anything that looks like mutation of a `const`, such as `CONST.field = some_val` or `VEC.push(0)`.\r\n\r\nHowever, there is at least one compelling reason that a library would want one of its `const` items *with a `Drop` impl* to not trigger that new lint in downstream code. See https://github.com/rust-lang/rust/pull/77251#issuecomment-699580052. We use `CFG.field = some_val` to expose safe global configuration of a library in a way that deliberately strongly triggers \"okay I am writing to a global (though safely)\" neurons, which an alternative like `::set_whatever(...)` does not.\r\n\r\n#77251 weakens the lint to avoid triggering on expressions resembling `CONST.field = some_val` when there is a Drop impl on CONST, though still triggering on `VEC.push(0)` i.e. when a const with a Drop impl is used as a `&mut self` receiver.\r\n\r\nHowever, this compromise is likely to hit false negatives that reduce the overall usefulness of the const item mutation lint. We would rather have a (likely attribute-based) way to disable the lint at the granularity of specific const items only. Something substantially equivalent to:\r\n\r\n```rust\r\n#[const_mutation_allowed]\r\npub const CFG: $t = $v;\r\n```\r\n\r\nAn actual such attribute still requires more design work, since there are similar lints that we are interested in creating/uplifting in the future (e.g. const items with interior mutability) which also will need granular opt outs, and it may not be ideal to introduce a single-purpose new opt-out attribute for each one of them.\r\n\r\n@Aaron1011 ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77425/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77425/timeline", "performed_via_github_app": null, "state_reason": null}