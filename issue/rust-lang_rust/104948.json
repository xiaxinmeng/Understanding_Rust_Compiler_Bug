{"url": "https://api.github.com/repos/rust-lang/rust/issues/104948", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104948/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104948/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104948/events", "html_url": "https://github.com/rust-lang/rust/issues/104948", "id": 1465222401, "node_id": "I_kwDOAAsO6M5XVYUB", "number": 104948, "title": "rustc suggests syntactically invalid fixes with proc macros", "user": {"login": "EnokiUN", "id": 77694265, "node_id": "MDQ6VXNlcjc3Njk0MjY1", "avatar_url": "https://avatars.githubusercontent.com/u/77694265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EnokiUN", "html_url": "https://github.com/EnokiUN", "followers_url": "https://api.github.com/users/EnokiUN/followers", "following_url": "https://api.github.com/users/EnokiUN/following{/other_user}", "gists_url": "https://api.github.com/users/EnokiUN/gists{/gist_id}", "starred_url": "https://api.github.com/users/EnokiUN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EnokiUN/subscriptions", "organizations_url": "https://api.github.com/users/EnokiUN/orgs", "repos_url": "https://api.github.com/users/EnokiUN/repos", "events_url": "https://api.github.com/users/EnokiUN/events{/privacy}", "received_events_url": "https://api.github.com/users/EnokiUN/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}, {"id": 2079070889, "node_id": "MDU6TGFiZWwyMDc5MDcwODg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-proc-macros", "name": "A-proc-macros", "color": "f7e101", "default": false, "description": "Area: Procedural macros"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-11-26T18:17:02Z", "updated_at": "2023-04-17T16:30:48Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Given the following code: [link to playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=354005ee91b3abdfa7158e3cb705955a)\r\n\r\n```rust\r\n// An example case where rustc suggests borrowing (adding a `&`) with a proc macro.\r\nuse serde::Deserialize;\r\n\r\n#[derive(Deserialize)]\r\nstruct Foo;\r\n\r\n#[derive(Deserialize)]\r\nstruct Bar<'a> {\r\n    #[serde(flatten)]\r\n    foo: &'a Foo,\r\n}\r\n\r\nfn main() { }\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0277]](https://doc.rust-lang.org/stable/error-index.html#E0277): the trait bound `&Foo: Deserialize<'_>` is not satisfied\r\n --> src/main.rs:8:5\r\n  |\r\n8 |     #[serde(flatten)]\r\n  |     ^ the trait `Deserialize<'_>` is not implemented for `&Foo`\r\n  |\r\nhelp: consider borrowing here\r\n  |\r\n8 |     &#[serde(flatten)]\r\n  |     +\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nIdeally the output should not suggest code that is outright syntactically invalid, especially considering how adding a borrow *anywhere* in the `Bar` struct declaration does not fix this issue, I do however understand how in the case of the macro being expanded borrowing *may* do something.\r\n\r\nI however am not quite sure myself and would love if someone could actually explain the intricacies of why to me.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104948/timeline", "performed_via_github_app": null, "state_reason": null}