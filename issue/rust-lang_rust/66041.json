{"url": "https://api.github.com/repos/rust-lang/rust/issues/66041", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66041/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66041/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66041/events", "html_url": "https://github.com/rust-lang/rust/issues/66041", "id": 516547839, "node_id": "MDU6SXNzdWU1MTY1NDc4Mzk=", "number": 66041, "title": "Specializations and negative traits are resolved in a wrong way.", "user": {"login": "wdanilo", "id": 1623053, "node_id": "MDQ6VXNlcjE2MjMwNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1623053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdanilo", "html_url": "https://github.com/wdanilo", "followers_url": "https://api.github.com/users/wdanilo/followers", "following_url": "https://api.github.com/users/wdanilo/following{/other_user}", "gists_url": "https://api.github.com/users/wdanilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdanilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdanilo/subscriptions", "organizations_url": "https://api.github.com/users/wdanilo/orgs", "repos_url": "https://api.github.com/users/wdanilo/repos", "events_url": "https://api.github.com/users/wdanilo/events{/privacy}", "received_events_url": "https://api.github.com/users/wdanilo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-02T09:32:30Z", "updated_at": "2019-11-02T12:23:05Z", "closed_at": "2019-11-02T12:23:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, consider the following code:\r\n\r\n```rust\r\n#![feature(specialization)]\r\n#![feature(optin_builtin_traits)]\r\n\r\nuse std::ops::Deref;\r\nuse std::ops::DerefMut;\r\n\r\n// =================\r\n// === WithLabel ===\r\n// =================\r\n\r\nstruct WithLabel<T>(String, T);\r\n\r\nauto trait IsNotWithLabel {}\r\nimpl<T> !IsNotWithLabel for WithLabel<T> {}\r\n\r\npub trait HasLabel {\r\n    fn label(&self) -> &String;\r\n}\r\n\r\nimpl<T> HasLabel for WithLabel<T> {\r\n    fn label(&self) -> &String { \r\n        &self.0\r\n    }\r\n}\r\n\r\nimpl<T> HasLabel for T\r\nwhere T: Deref + IsNotWithLabel, <Self as Deref>::Target : HasLabel {\r\n    default fn label(&self) -> &String { \r\n        self.deref().label() \r\n    }\r\n}\r\n\r\nimpl<T> Deref for WithLabel<T> {\r\n    type Target = T;\r\n    fn deref(&self) -> &Self::Target {\r\n        &self.1\r\n    }\r\n}\r\n\r\n// ==============\r\n// === WithID ===\r\n// ==============\r\n\r\nstruct WithID<T>(i32, T);\r\n\r\npub trait HasID {\r\n    fn id(&self) -> &i32;\r\n}\r\n\r\nimpl<T> HasID for WithID<T> {\r\n    fn id(&self) -> &i32 { \r\n        &self.0\r\n    }\r\n}\r\n\r\nauto trait IsNotWithID {}\r\nimpl<T> !IsNotWithID for WithID<T> {}\r\n\r\nimpl<T> HasID for T\r\nwhere T: Deref + IsNotWithID, <Self as Deref>::Target : HasID {\r\n    default fn id(&self) -> &i32 { \r\n        self.deref().id() \r\n    }\r\n}\r\n\r\nimpl<T> Deref for WithID<T> {\r\n    type Target = T;\r\n    fn deref(&self) -> &Self::Target {\r\n        &self.1\r\n    }\r\n}\r\n\r\n// =============\r\n// === Usage ===\r\n// =============\r\n\r\nstruct A(i32);\r\n\r\ntype X = WithLabel<WithID<A>>;\r\n\r\nfn test<T: HasID + HasLabel> (t: T) {\r\n    println!(\"{:?}\", t.label());\r\n    println!(\"{:?}\", t.id());\r\n}\r\n\r\nfn main() {\r\n    let v1 = WithLabel(\"label1\".to_string(), WithID(0, A(1)));\r\n    // test(v1); // THIS DOES NOT COMPILE\r\n}\r\n```\r\n\r\nEverything compiles fine, but the last line (commented out). The error is:\r\n```rust\r\nerror[E0277]: the trait bound `WithID<A>: IsNotWithID` is not satisfied in `WithLabel<WithID<A>>`\r\n  --> src/main.rs:88:10\r\n   |\r\n81 | fn test<T: HasID + HasLabel> (t: T) {\r\n   |    ----    ----- required by this bound in `test`\r\n...\r\n88 |     test(v1);\r\n   |          ^^ within `WithLabel<WithID<A>>`, the trait `IsNotWithID` is not implemented for `WithID<A>`\r\n   |\r\n   = help: the following implementations were found:\r\n             <WithID<T> as IsNotWithID>\r\n   = note: required because it appears within the type `WithLabel<WithID<A>>`\r\n   = note: required because of the requirements on the impl of `HasID` for `WithLabel<WithID<A>>`\r\n```\r\n\r\nAnd this is not correct. The type of `v1` is `WithLabel<WithID<A>>`. When passing it to `test` we must prove that `WithLabel<WithID<A>> : HasID + HasLabel`. Let's start with `HasID`:\r\n\r\n- The `impl<T> HasID for WithID<T>` is obviously not matched.\r\n- The `impl<T> HasID for T` is matched, including it's constraints: `T: Deref + IsNotWithID`, and `<Self as Deref>::Target : HasID`, because `Target` resolves to `WithID<A>` and there is only 1 instance that matches `WithID<A>: HasID`. \r\n\r\nThe constraint `WithLabel<WithID<A>> : HasLabel` is simple to be checked \u2013 only the `impl<T> HasLabel for WithLabel<T>` is matched here.\r\n\r\n", "closed_by": {"login": "wdanilo", "id": 1623053, "node_id": "MDQ6VXNlcjE2MjMwNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1623053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdanilo", "html_url": "https://github.com/wdanilo", "followers_url": "https://api.github.com/users/wdanilo/followers", "following_url": "https://api.github.com/users/wdanilo/following{/other_user}", "gists_url": "https://api.github.com/users/wdanilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdanilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdanilo/subscriptions", "organizations_url": "https://api.github.com/users/wdanilo/orgs", "repos_url": "https://api.github.com/users/wdanilo/repos", "events_url": "https://api.github.com/users/wdanilo/events{/privacy}", "received_events_url": "https://api.github.com/users/wdanilo/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66041/timeline", "performed_via_github_app": null, "state_reason": "completed"}