{"url": "https://api.github.com/repos/rust-lang/rust/issues/14149", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/14149/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/14149/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/14149/events", "html_url": "https://github.com/rust-lang/rust/issues/14149", "id": 33332086, "node_id": "MDU6SXNzdWUzMzMzMjA4Ng==", "number": 14149, "title": "rustc has trouble inlining inside a Bencher closure", "user": {"login": "SiegeLord", "id": 480550, "node_id": "MDQ6VXNlcjQ4MDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/480550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLord", "html_url": "https://github.com/SiegeLord", "followers_url": "https://api.github.com/users/SiegeLord/followers", "following_url": "https://api.github.com/users/SiegeLord/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLord/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLord/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLord/orgs", "repos_url": "https://api.github.com/users/SiegeLord/repos", "events_url": "https://api.github.com/users/SiegeLord/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLord/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-05-12T18:09:49Z", "updated_at": "2016-01-05T12:38:26Z", "closed_at": "2016-01-05T12:37:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider this code:\n\n``` rust\n#![crate_type=\"lib\"]\n#![crate_id=\"test\"]\n\nextern crate test;\nextern crate rand;\n\nuse test::Bencher;\nuse rand::{weak_rng, Rng};\n\nuse std::cell::Cell;\n\nfn bug(a: &Vector)\n{\n    for _ in range(0, 100)\n    {\n        let m = Multiplier::new(a, a);\n        for i in range(0u, 10)\n        {\n            unsafe\n            {\n                a.unsafe_set(i, m.unsafe_get(i));\n            }\n        }\n    }\n\n    let mut sum = 0f32;\n    for i in range(0u, 10)\n    {\n        unsafe\n        {\n            sum += a.unsafe_get(i);\n        }\n    }\n    assert!(sum != 96.0);\n}\n\n#[bench]\nfn vec_speed_vec1(bh: &mut Bencher) {\n    let mut rng = weak_rng();\n\n    let a = &Vector::new(rng.gen_vec(10).slice(0, 10));\n\n    bh.iter(|| {\n        bug(a)\n    })\n}\n\n#[bench]\nfn vec_speed_vec2(bh: &mut Bencher) {\n    let mut rng = weak_rng();\n\n    let a = &Vector::new(rng.gen_vec(10).slice(0, 10));\n\n    bh.iter(|| {\n        for _ in range(0, 100)\n        {\n            let m = Multiplier::new(a, a);\n            for i in range(0u, 10)\n            {\n                unsafe\n                {\n                    a.unsafe_set(i, m.unsafe_get(i));\n                }\n            }\n        }\n\n        let mut sum = 0f32;\n        for i in range(0u, 10)\n        {\n            unsafe\n            {\n                sum += a.unsafe_get(i);\n            }\n        }\n        assert!(sum != 96.0);\n    })\n}\n\npub trait VectorGet\n{\n    unsafe fn unsafe_get(&self, idx: uint) -> f32;\n}\n\npub trait VectorSet\n{\n    unsafe fn unsafe_set(&self, idx: uint, val: f32);\n}\n\npub struct Vector\n{\n    data: Vec<Cell<f32>>\n}\n\nimpl Vector\n{\n    pub fn new(data: &[f32]) -> Vector\n    {\n        Vector{ data: data.iter().map(|&v| Cell::new(v)).collect() }\n    }\n}\n\nimpl<'l>\nVectorGet for\n&'l Vector\n{\n    unsafe fn unsafe_get(&self, idx: uint) -> f32\n    {\n        (*self.data.as_slice().unsafe_ref(idx)).get()\n    }\n}\n\nimpl<'l>\nContainer for\n&'l Vector\n{\n    fn len(&self) -> uint\n    {\n        self.data.len()\n    }\n}\n\nimpl<'l>\nVectorSet for\nVector\n{\n    unsafe fn unsafe_set(&self, idx: uint, val: f32)\n    {\n        self.data.as_slice().unsafe_ref(idx).set(val);\n    }\n}\n\nimpl<'l>\nContainer for\nVector\n{\n    fn len(&self) -> uint\n    {\n        self.data.len()\n    }\n}\n\npub struct Multiplier<TA, TB>\n{\n    a: TA,\n    b: TB,\n}\n\nimpl<TA: Container,\n     TB: Container>\nMultiplier<TA, TB>\n{\n    pub fn new(a: TA, b: TB) -> Multiplier<TA, TB>\n    {\n        assert!(a.len() == b.len());\n        Multiplier{ a: a, b: b }\n    }\n}\n\nimpl<'l,\n     TA: VectorGet + Container,\n     TB: VectorGet + Container>\nVectorGet for\nMultiplier<TA, TB>\n{\n    unsafe fn unsafe_get(&self, idx: uint) -> f32\n    {\n        self.a.unsafe_get(idx) * self.b.unsafe_get(idx)\n    }\n}\n\nimpl<'l,\n     TA: Container,\n     TB: Container>\nContainer for Multiplier<TA, TB>\n{\n    fn len(&self) -> uint\n    {\n        self.a.len()\n    }\n}\n```\n\nCompiling and running it gives the following result:\n\n```\n$ rustc test.rs --test --opt-level 3\n$ ./test --bench\n\nrunning 2 tests\ntest vec_speed_vec1 ... bench:       498 ns/iter (+/- 17)\ntest vec_speed_vec2 ... bench:      1386 ns/iter (+/- 313)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 2 measured\n```\n\nNote that the only difference between the two tests is that one has the Bencher closure contents hoisted out into a separate function. This speed difference is a regression since at least January 2014.\n", "closed_by": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/14149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/14149/timeline", "performed_via_github_app": null, "state_reason": "completed"}