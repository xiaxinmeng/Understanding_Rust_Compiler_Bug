{"url": "https://api.github.com/repos/rust-lang/rust/issues/76938", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76938/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76938/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76938/events", "html_url": "https://github.com/rust-lang/rust/issues/76938", "id": 704992375, "node_id": "MDU6SXNzdWU3MDQ5OTIzNzU=", "number": 76938, "title": "Superfluous errors for missing lifetime in async function argument", "user": {"login": "djc", "id": 158471, "node_id": "MDQ6VXNlcjE1ODQ3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/158471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djc", "html_url": "https://github.com/djc", "followers_url": "https://api.github.com/users/djc/followers", "following_url": "https://api.github.com/users/djc/following{/other_user}", "gists_url": "https://api.github.com/users/djc/gists{/gist_id}", "starred_url": "https://api.github.com/users/djc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djc/subscriptions", "organizations_url": "https://api.github.com/users/djc/orgs", "repos_url": "https://api.github.com/users/djc/repos", "events_url": "https://api.github.com/users/djc/events{/privacy}", "received_events_url": "https://api.github.com/users/djc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}, {"id": 1659943986, "node_id": "MDU6TGFiZWwxNjU5OTQzOTg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-verbose", "name": "D-verbose", "color": "c9f7a3", "default": false, "description": "Too much output caused by a single piece of incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-09-19T20:21:49Z", "updated_at": "2020-09-22T17:15:13Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the example below (which is a little convoluted -- sorry, I already spent quite a bit reducing it), I'm getting what amounts to three compiler errors. But, when I fix the cause of the first error by applying the suggested fix, the other two errors go away. It feels like the compiler could be smarter about this and only throw the first diagnostic.\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse futures::stream::FuturesUnordered;\r\nuse http::Response;\r\nuse hyper::body::Body;\r\n\r\npub(crate) mod name {\r\n    use super::*;\r\n    pub(crate) async fn handler(cx: Context) -> Result<Response<Body>, ()> {\r\n        let app = &cx.app;\r\n        let name = cx.s();\r\n        let query = cx.query();\r\n        call(app, name, query).await\r\n    }\r\n    pub(crate) async fn call(app: &App, name: &str, query: Query) -> Result<Response<Body>, ()> {\r\n        let stream = FuturesUnordered::new();\r\n        stream.push(async move { Ok::<_, serde_json::Error>(format!(\"{}\", true).into_bytes()) });\r\n        Ok(Response::builder().body(Body::wrap_stream(stream)).unwrap())\r\n    }\r\n}\r\n\r\nstruct Context {\r\n    app: App,\r\n    s: String,\r\n}\r\n\r\nstruct App {}\r\n\r\nimpl Context {\r\n    fn s(&self) -> &str {\r\n        &self.s\r\n    }\r\n    fn query(&self) -> Query {\r\n        Query { s: &self.s }\r\n    }\r\n}\r\n\r\nstruct Query<'a> {\r\n    s: &'a str,\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=401f7f6a59adff29e8183d36973b9d08).)\r\n\r\nThis is the compiler output I got:\r\n\r\n```rust\r\nerror[E0726]: implicit elided lifetime not allowed here\r\n  --> src/lib.rs:16:16\r\n   |\r\n16 |         query: Query,\r\n   |                ^^^^^- help: indicate the anonymous lifetime: `<'_>`\r\n\r\nerror[E0597]: `cx` does not live long enough\r\n  --> src/lib.rs:10:21\r\n   |\r\n10 |         let query = cx.query();\r\n   |                     ^^--------\r\n   |                     |\r\n   |                     borrowed value does not live long enough\r\n   |                     argument requires that `cx` is borrowed for `'static`\r\n11 |         call(app, name, query).await\r\n12 |     }\r\n   |     - `cx` dropped here while still borrowed\r\n\r\nerror[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\r\n  --> src/lib.rs:17:10\r\n   |\r\n17 |     ) -> Result<Response<Body>, ()> {\r\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\nnote: hidden type `impl futures::Future` captures lifetime smaller than the function body\r\n  --> src/lib.rs:17:10\r\n   |\r\n17 |     ) -> Result<Response<Body>, ()> {\r\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nI expected to see this happen: it would be nice if I only got the first error (E0726). It seems like the compiler is substituting some placeholder lifetime in place of the missing lifetime which is making things worse, causing the two other errors. It seems reasonable to replace missing lifetimes with `'_` instead (especially if that's the suggested fix anyway) instead, which would make the other errors go away and makes it easier to focus on the actual problem. For this particular case, I also find the second and third error highly opaque and not very actionable.\r\n\r\n### Meta\r\n\r\nThe same thing happens on both current stable (1.46.0) and latest nightly (rustc 1.48.0-nightly bbc677480 2020-09-18).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76938/timeline", "performed_via_github_app": null, "state_reason": null}