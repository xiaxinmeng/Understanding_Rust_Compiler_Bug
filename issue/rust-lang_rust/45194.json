{"url": "https://api.github.com/repos/rust-lang/rust/issues/45194", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45194/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45194/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45194/events", "html_url": "https://github.com/rust-lang/rust/issues/45194", "id": 264445509, "node_id": "MDU6SXNzdWUyNjQ0NDU1MDk=", "number": 45194, "title": "Allow group capture, choice and optional arguments", "user": {"login": "uzytkownik", "id": 5706, "node_id": "MDQ6VXNlcjU3MDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uzytkownik", "html_url": "https://github.com/uzytkownik", "followers_url": "https://api.github.com/users/uzytkownik/followers", "following_url": "https://api.github.com/users/uzytkownik/following{/other_user}", "gists_url": "https://api.github.com/users/uzytkownik/gists{/gist_id}", "starred_url": "https://api.github.com/users/uzytkownik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uzytkownik/subscriptions", "organizations_url": "https://api.github.com/users/uzytkownik/orgs", "repos_url": "https://api.github.com/users/uzytkownik/repos", "events_url": "https://api.github.com/users/uzytkownik/events{/privacy}", "received_events_url": "https://api.github.com/users/uzytkownik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-11T03:26:44Z", "updated_at": "2017-10-11T16:59:17Z", "closed_at": "2017-10-11T16:59:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently I'm trying to parse following macro structure in Rust\r\n\r\n```\r\n<top>      ::= <prefix> <suffix>\r\n<prefix>   ::= \u03b5 | <map> | <map>, <prefix>\r\n<map>      ::= <token> \"=>\" <token>\r\n<suffix>   ::= \u03b5 | \":\" <metadata>\r\n<metadata> ::= ...\r\n```\r\nCurrently I'm doing (simplified):\r\n```\r\nmacro_rules! top {\r\n    ($a:ident => $b:ident, $(tail:tt)*) => {\r\n        proc_map!($a => $b);\r\n        top!($(tail)*)\r\n    };\r\n    ($a:ident => $b:ident($c:ident), $(tail:tt)*) => {\r\n        proc_map!($a => $b($c));\r\n        top!($(tail)*)\r\n    };\r\n    ($a:ident => $b:ident: $(tail:tt)*) => {\r\n        proc_map!($a => $b);\r\n        suffix!($(tail)*)\r\n    };\r\n    ($a:ident => $b:ident($c:ident): $(tail:tt)*) => {\r\n        proc_map!($a => $b($c));\r\n        suffix!($(tail)*)\r\n    };\r\n    (: $(tail:tt)*) => {\r\n        suffix!($(tail)*)\r\n    };\r\n    ($a:ident => $b:ident) => {\r\n        proc_map!($a => $b);\r\n    };\r\n    ($a:ident => $b:ident($c:ident)) => {\r\n        proc_map!($a => $b($c));\r\n        s\r\n    () => {};\r\n}\r\n```\r\n\r\nThis has several disadvantages such as code repetition and exponential explosion of potential options. For more complex DSL it creates a spaghetti code. It could potentially be simplified - for example using this made up syntax:\r\n\r\n```\r\nmacro_rules! top {\r\n    ($a:ident => $b:ident$(($c:ident))? $suff:($|((,) | (:)) $($tail:tt)*)?) => {\r\n        proc_map!($a => $b$(($c))*);\r\n        $(top_hlp!($suff));\r\n    };\r\n    (: $(tail:tt)*) => {\r\n        suffix!($($tail)*);\r\n    };\r\n    () => {};\r\n}\r\n\r\nmacro_rules! top_hlp {\r\n    (, $($tail:tt)*) => {top!($($tail)*)};\r\n    (: $($tail:tt)*) => {suffix!($($tail)*)};\r\n}\r\n```\r\n\r\nI've added following changes:\r\n\r\n- `$(pattern)?` - analogous to `$(pattern)*` and `$(pattern)+` except it matches 0 or 1 time (analogous to regular expressions)\r\n- `$name:(pattern)` - `$name` captures all token trees captured by pattern to be passed somewhere else to avoid copy and pasting\r\n- `$|((pattern1) | (pattern2) | ...)` captures either of those patterns (choice). If `pattern1`/`pattern2` have any name tokens it behaves analogically to optional group. So if full pattern is `$|((type $typ:ty) | (expr $ex:expr))` and the expansion is `$($typ)*` then it will expand to passed type if the first branch was taken or to nothing if second was taken\r\n\r\nWhile none of those options allows macros to do more they would simplify the writing of them.\r\n\r\nI'm not insisting on particular syntax and probably someone more familiar with Rust internals/language design could come up with better ones.", "closed_by": {"login": "uzytkownik", "id": 5706, "node_id": "MDQ6VXNlcjU3MDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uzytkownik", "html_url": "https://github.com/uzytkownik", "followers_url": "https://api.github.com/users/uzytkownik/followers", "following_url": "https://api.github.com/users/uzytkownik/following{/other_user}", "gists_url": "https://api.github.com/users/uzytkownik/gists{/gist_id}", "starred_url": "https://api.github.com/users/uzytkownik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uzytkownik/subscriptions", "organizations_url": "https://api.github.com/users/uzytkownik/orgs", "repos_url": "https://api.github.com/users/uzytkownik/repos", "events_url": "https://api.github.com/users/uzytkownik/events{/privacy}", "received_events_url": "https://api.github.com/users/uzytkownik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45194/timeline", "performed_via_github_app": null, "state_reason": "completed"}