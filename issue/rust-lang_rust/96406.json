{"url": "https://api.github.com/repos/rust-lang/rust/issues/96406", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96406/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96406/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96406/events", "html_url": "https://github.com/rust-lang/rust/issues/96406", "id": 1215050765, "node_id": "I_kwDOAAsO6M5IbDQN", "number": 96406, "title": "TAIT: hidden type cannot be another opaque type from the same scope", "user": {"login": "Dirbaio", "id": 1247578, "node_id": "MDQ6VXNlcjEyNDc1Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1247578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dirbaio", "html_url": "https://github.com/Dirbaio", "followers_url": "https://api.github.com/users/Dirbaio/followers", "following_url": "https://api.github.com/users/Dirbaio/following{/other_user}", "gists_url": "https://api.github.com/users/Dirbaio/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dirbaio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dirbaio/subscriptions", "organizations_url": "https://api.github.com/users/Dirbaio/orgs", "repos_url": "https://api.github.com/users/Dirbaio/repos", "events_url": "https://api.github.com/users/Dirbaio/events{/privacy}", "received_events_url": "https://api.github.com/users/Dirbaio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 1472502130, "node_id": "MDU6TGFiZWwxNDcyNTAyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-type_alias_impl_trait", "name": "F-type_alias_impl_trait", "color": "f9c0cc", "default": false, "description": "`#[feature(type_alias_impl_trait)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-04-25T21:12:44Z", "updated_at": "2023-04-05T17:28:34Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I wanted to write a function that statically allocates an `async fn` future: [playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=c94b09d28daffb9b2a3d44d97c754a74)\r\n\r\n```rust\r\nfn task(arg: Foo) -> &'static mut impl Future {\r\n    async fn task_inner(arg: Foo) {\r\n        // code\r\n    }\r\n\r\n    type Fut = impl Future;\r\n    static mut FUT: MaybeUninit<Fut> = MaybeUninit::uninit();\r\n    unsafe { FUT.write(task_inner(arg)) }\r\n}\r\n```\r\n\r\nThis fails with the following error:\r\n\r\n```\r\nerror: opaque type's hidden type cannot be another opaque type from the same scope\r\n  [--> src/lib.rs:8:47\r\n](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)   |\r\n8  |   fn task(arg: Foo) -> &'static mut impl Future {\r\n   |  _______________________________________________^\r\n9  | |     async fn task_inner(arg: Foo) {\r\n10 | |         // code\r\n11 | |     }\r\n...  |\r\n15 | |     unsafe { FUT.write(task_inner(arg)) }\r\n16 | | }\r\n   | |_^ one of the two opaque types used here has to be outside its defining scope\r\n   |\r\nnote: opaque type whose hidden type is being assigned\r\n  [--> src/lib.rs:8:35\r\n](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)   |\r\n8  | fn task(arg: Foo) -> &'static mut impl Future {\r\n   |                                   ^^^^^^^^^^^\r\nnote: opaque type being used as hidden type\r\n  [--> src/lib.rs:13:16\r\n](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)   |\r\n13 |     type Fut = impl Future;\r\n   |                ^^^^^^^^^^^\r\n```\r\n\r\nOne workaround is to move the `Fut` to the top level, but that's undesirable because it makes the entire file to be the defining scope, which interferes with other code.\r\n\r\nA better workaround suggested by @oli-obk is to wrap the inner future in a \"dumb\" wrapper, so that the types are no longer equal (the RPIT can't be another opaque type itself, but it can still contain one): [playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=b99429198d4e559c57401fd9bfeea301)\r\n\r\n```rust\r\nstruct FutureWrapper<F>(F);\r\nimpl<F: Future> Future for FutureWrapper<F> {\r\n    type Output = F::Output;\r\n    fn poll(\r\n        self: Pin<&mut Self>,\r\n        cx: &mut std::task::Context<'_>,\r\n    ) -> std::task::Poll<Self::Output> {\r\n        unsafe { Pin::new_unchecked(&mut self.get_unchecked_mut().0) }.poll(cx)\r\n    }\r\n}\r\n\r\nfn task(arg: Foo) -> &'static mut impl Future {\r\n    async fn task_inner(arg: Foo) {\r\n        // code\r\n    }\r\n\r\n    type Fut = impl Future;\r\n    static mut FUT: MaybeUninit<FutureWrapper<Fut>> = MaybeUninit::uninit();\r\n    unsafe { FUT.write(FutureWrapper(task_inner(arg))) }\r\n}\r\n```\r\n\r\nFirst, it would be interesting to see if these \"nested opaque types\" can be allowed in some cases such as this one.\r\n\r\n> @oli-obk we could possibly allow your case (which has an obvious order of which opaque type should be the hidden type of the other one, or just by equating their hidden types)\r\n> The fixes to just allow it are likely not complex in implementation, but require quite some design work to make sure we don't paint ourselves into a corner\r\n> We could just put it behind a feature gate tho\r\n\r\nSecond, it would be helpful if the diagnostic suggested the \"wrapper\" workaround. It would've saved me a lot of time at least :) \r\n\r\nSee also: [Zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/hidden.20type.20cannot.20be.20another.20opaque.20type.20from.20the.20same.20scop)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96406/timeline", "performed_via_github_app": null, "state_reason": null}