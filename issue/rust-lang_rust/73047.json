{"url": "https://api.github.com/repos/rust-lang/rust/issues/73047", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73047/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73047/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73047/events", "html_url": "https://github.com/rust-lang/rust/issues/73047", "id": 632080459, "node_id": "MDU6SXNzdWU2MzIwODA0NTk=", "number": 73047, "title": "rlibs retain reference to proc-macro dependencies - possibly unnecessary?", "user": {"login": "adetaylor", "id": 145740, "node_id": "MDQ6VXNlcjE0NTc0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/145740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adetaylor", "html_url": "https://github.com/adetaylor", "followers_url": "https://api.github.com/users/adetaylor/followers", "following_url": "https://api.github.com/users/adetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/adetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/adetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adetaylor/subscriptions", "organizations_url": "https://api.github.com/users/adetaylor/orgs", "repos_url": "https://api.github.com/users/adetaylor/repos", "events_url": "https://api.github.com/users/adetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/adetaylor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-06T00:17:20Z", "updated_at": "2020-06-10T16:16:48Z", "closed_at": "2020-06-10T16:16:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Summary\r\n\r\nIf a Rust `.rlib` project depends on a procedural macro crate, then the produced `rlib` will forever depend on the crate containing the proc macro, as shown by `rustc -Z ls <path to rlib>`. When creating downstream binaries, e.g. executables or staticlibs, `rustc` will require the location of the proc-macro to be provided as an `-Ldependency` argument.\r\n\r\nI don't believe that the downstream `rustc` _necessarily_ needs to know about the proc-macro. I have two bits of evidence:\r\n\r\n* Sometimes the proc-macro is a different architecture from the binary (e.g. host vs target), so it obviously can't be used _as part of_ the final binary.\r\n* Using a linker directly it's possible to link an `rlib` into a functional executable without providing the location of the proc-macro on which it depends.\r\n\r\n### Why this might matter\r\n\r\nPerhaps there's an opportunity for some dependency tree pruning here? The procedural macro would obviously be needed for initial compilation of the `rlib`, but may not be needed for downstream builds which depend on that `rlib`.\r\n\r\nI can't think of a circumstance when this would allow more parallelism, but perhaps in some cases of pipelined compilation (https://github.com/rust-lang/cargo/pull/6883) there might be some kind of saving?\r\n\r\nAnd even if not, if these dependencies can be removed, it's presumably just fewer crates for `rustc` to search through and analyze so might marginally speed those downstream `rustc` invocations.\r\n\r\nUnless of course the proc-macro _is_ sometimes required by the linker steps, e.g. if LTO is enabled. In which case ignore this issue.\r\n\r\n### Test case\r\n\r\nSee https://github.com/adetaylor/repro-unexpected-macro-dependency.\r\n\r\nThis contains three ways of building the same code, in the `clientc` directory:\r\n\r\n* [`build-ok-1.sh`](https://github.com/adetaylor/repro-unexpected-macro-dependency/blob/master/clientc/build-ok-1.sh): this uses `clang` (or specifically `lld`) to link the rlibs directly into the final C executable. This is unsupported, but works. The linker command has no reference to the procedural macro, proving that it isn't necessary in the final linking step.\r\n* [`build-ok-2.sh`](https://github.com/adetaylor/repro-unexpected-macro-dependency/blob/master/clientc/build-ok-2.sh): this uses `rustc` to make all the Rust code into a `staticlib` then links that into the C executable. In this case, `rustc` needs to be told the location of the procedural macro.\r\n* [`build-fails.sh`](https://github.com/adetaylor/repro-unexpected-macro-dependency/blob/master/clientc/build-fails.sh): this also uses `rustc` to make all the Rust code into a `staticlib` then links that into the C executable. In this case, the `rustc` invocation isn't given the location of the macro, so building the `staticlib` fails.\r\n\r\nIn each case, we're building the final executable for ARM (Android), whilst the macro is built for the host OS (in my case x64). This of course proves that no part of the macro is actually linked into the final binary.\r\n\r\nThe dependency chain is thus:\r\n\r\n`[C executable] -> <staticlib_crate, omitted in build-ok-1.sh> -> [rlib_crate] -> [macro_crate]`\r\n\r\nUnfortunately, this means for the scripts to work, you'll need a cross-compiling clang toolchain. I used one from a handy copy of Chromium, but you can alter the scripts to point to an Android NDK or similar.\r\n\r\n`rustc 1.45.0-nightly (fa51f810e 2020-04-29)`", "closed_by": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73047/timeline", "performed_via_github_app": null, "state_reason": "completed"}