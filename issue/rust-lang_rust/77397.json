{"url": "https://api.github.com/repos/rust-lang/rust/issues/77397", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77397/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77397/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77397/events", "html_url": "https://github.com/rust-lang/rust/issues/77397", "id": 712778856, "node_id": "MDU6SXNzdWU3MTI3Nzg4NTY=", "number": 77397, "title": "[ER] Int::RANGE constants", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-10-01T12:05:28Z", "updated_at": "2020-10-02T20:19:15Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This is a small enhancement request, that (as it usually happens) I am not sure about, but I like it.\r\n\r\nLike u32::BITS I'd like another constant for all Rust integral numbers XX (i8, u8, i16, u16, etc):\r\n\r\n```rust\r\nXX::RANGE: RangeInclusive<XX> = XX::MIN ..= XX::MAX;\r\n```\r\n\r\nSo you can write:\r\n\r\n```rust\r\nfor i in u8::RANGE { ... }\r\n```\r\n\r\nThat's shorter, is more DRY and avoids mistakes like (that is forgetting that a signed number doesn't start at zero, and missing the last number of the range):\r\n\r\n```rust\r\nfor i in 0 ..= i8::MAX {}\r\nfor i in i8::MIN .. i8::MAX {}\r\n```\r\n\r\nI think this could be useful now, but it will become even more handy if/when Rust adds ranged integers as in Ada, see:\r\n\r\nhttps://en.wikibooks.org/wiki/Ada_Programming/Attributes/%27Range\r\n\r\n~~I think it's better not to define char::RANGE.~~", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77397/timeline", "performed_via_github_app": null, "state_reason": null}