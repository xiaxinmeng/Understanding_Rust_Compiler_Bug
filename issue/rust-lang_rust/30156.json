{"url": "https://api.github.com/repos/rust-lang/rust/issues/30156", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/30156/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/30156/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/30156/events", "html_url": "https://github.com/rust-lang/rust/issues/30156", "id": 119844599, "node_id": "MDU6SXNzdWUxMTk4NDQ1OTk=", "number": 30156, "title": "String, From and Box<Error> interoperation could be better.", "user": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-02T01:08:19Z", "updated_at": "2016-01-13T20:34:04Z", "closed_at": "2016-01-13T20:34:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There's an implementation of `From` that allows the conversion of a `String` to a `Box<Error + Send + Sync>`, but it doesn't quite work when just using `Box<Error>`.\n## Code\n\n``` rust\nuse std::error::Error;\n\nfn main() {\n    // Ok.\n    let e1: Box<Error + Send + Sync> = From::from(\"hello\".to_string());\n    let e2: Box<Error> = e1;\n\n    // Not ok.\n    let e3: Box<Error> = From::from(\"hello\".to_string());\n\n    println!(\"{:?} {:?}\", e2, e3);\n}\n```\n## Compiler Output\n\n```\nmichael: ~ $ rustc -V\nrustc 1.6.0-nightly (9303055f3 2015-11-19)\n\nmichael: ~ $ rustc test.rs \ntest.rs:9:26: 9:36 error: the trait `std::error::Error` is not implemented for the type `collections::string::String` [E0277]\ntest.rs:9     let e3: Box<Error> = From::from(\"hello\".to_string());\n                                   ^~~~~~~~~~\ntest.rs:9:26: 9:36 help: run `rustc --explain E0277` to see a detailed explanation\ntest.rs:9:26: 9:36 note: required by `core::convert::From::from`\nerror: aborting due to previous error\n```\n\nThe (perhaps subtle) error message is due to the compiler attempting to use the general `From<E: Error>` implementation for `Box<Error>`.\n## Solutions and Workarounds\n\nI was trying to return string errors from a function returning `Result<_, Box<Error>>` and ended up writing the following:\n\n``` rust\nfn string_error<T>(s: String) -> Result<T, Box<Error>> {\n    let err: Box<Error + Send + Sync> = From::from(s);\n    Err(err as Box<Error>)\n}\n```\n\nThis works well, but is really just boilerplate and not obviously suited to inclusion in any crate or library. Other solutions I thought of include:\n- Adding `impl From<String> for Box<Error>` to the standard library for cases like this.\n- Altering the semantics for trait-resolution on types that parametrise over multiple traits. From what I've read, we don't yet have semantics for general additions of traits, only built-in ones. See [E0225](http://doc.rust-lang.org/error-index.html#E0225).\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/30156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/30156/timeline", "performed_via_github_app": null, "state_reason": "completed"}