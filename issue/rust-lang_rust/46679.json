{"url": "https://api.github.com/repos/rust-lang/rust/issues/46679", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46679/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46679/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46679/events", "html_url": "https://github.com/rust-lang/rust/issues/46679", "id": 281330153, "node_id": "MDU6SXNzdWUyODEzMzAxNTM=", "number": 46679, "title": "sparc issue when calling C++ functions which returns >16bytes structure", "user": {"login": "psumbera", "id": 4249116, "node_id": "MDQ6VXNlcjQyNDkxMTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4249116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psumbera", "html_url": "https://github.com/psumbera", "followers_url": "https://api.github.com/users/psumbera/followers", "following_url": "https://api.github.com/users/psumbera/following{/other_user}", "gists_url": "https://api.github.com/users/psumbera/gists{/gist_id}", "starred_url": "https://api.github.com/users/psumbera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psumbera/subscriptions", "organizations_url": "https://api.github.com/users/psumbera/orgs", "repos_url": "https://api.github.com/users/psumbera/repos", "events_url": "https://api.github.com/users/psumbera/events{/privacy}", "received_events_url": "https://api.github.com/users/psumbera/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 632899563, "node_id": "MDU6TGFiZWw2MzI4OTk1NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-SPARC", "name": "O-SPARC", "color": "6e6ec0", "default": false, "description": "Target: SPARC processors"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-12-12T10:23:17Z", "updated_at": "2018-01-23T19:57:00Z", "closed_at": "2018-01-23T19:57:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have an issue with rust (now version 1.22.1) on Solaris sparc (64bit). On intel I don't see it. I originally see it as part of Firefox build (https://bugzilla.mozilla.org/show_bug.cgi?id=1413887)\r\n\r\nI now believe it's rustc issue (though it could be still issue with clang-sys). Any help would be greatly appreciated.\r\n\r\n```\r\nmkdir -p test-clang/src\r\ncat > test-clang/Cargo.toml <<EOF\r\n[package]\r\nname = \"test-clang\"\r\nversion = \"0.1.0\"\r\nauthors = [\"Petr Sumbera <petr.sumbera@oracle.com>\"]\r\n\r\n[dependencies]\r\nclang-sys = \"0.21.1\"\r\nlibc = \"0.2.14\"\r\nEOF\r\n\r\ncat > test-clang/src/main.rs <<EOF\r\nextern crate libc;\r\nuse libc::{c_char};\r\nextern crate clang_sys;\r\nuse clang_sys::*;\r\n\r\nfn main() {\r\n    unsafe {\r\n      let index = clang_createIndex(0, 0);\r\n      let tu = clang_createTranslationUnit(index, \"tests/header.h\".as_ptr() as *const c_char);\r\n      println!(\"tu is: {:p}\", tu);\r\n      clang_getTranslationUnitCursor(tu);\r\n     }\r\n}\r\nEOF\r\n\r\ncd test-clang\r\nLIBCLANG_PATH=/usr/lib/64 cargo build\r\nLIBCLANG_PATH=/usr/lib/64 cargo run\r\n\r\n```\r\nRun output looks like:\r\n\r\n```\r\nLIBCLANG_PATH=/usr/lib/64 cargo run\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\r\n     Running `target/debug/test-clang`\r\ntu is: 0x0\r\nSegmentation Fault (core dumped)\r\n```\r\n\r\nStack:\r\n\r\n```\r\ntest-clang:core> $C\r\nffffffff7fffe0d1 libclang.so.5.0`clang_getTranslationUnitCursor+0x44(ffffffff7fffeb20, 0, 0, 1, 1001f4800, ffffffff7c604438)\r\nffffffff7fffe1e1 test_clang::main::h39d0f3581df1cb39+0xfc(ffffffff7fffeac8, 100071bc8, 10, 1001f4800, 0, 0)\r\nffffffff7fffe351 std::sys_common::backtrace::__rust_begin_short_backtrace::h6a22156fb88cf7c0+4(100071f34, 0, bc00, ffffffff7c227948, ffffffff7c226000, 0)\r\nffffffff7fffe401 std::panicking::try::do_call::h10d3852066fc0682+8(ffffffff7fffee50, 0, 1, 0, 0, 0)\r\nffffffff7fffe4b1 __rust_maybe_catch_panic+0x14(1000b93ec, ffffffff7fffee88, ffffffff7fffeef0, ffffffff7fffeea8, 1001f4800, 0)\r\nffffffff7fffe591 std::rt::lang_start::h6e897821881fc078+0x458(ffffffff7fffeea8, 10020dec8, 1, 1, 1, 10022e440)\r\nffffffff7fffe701 main+0x48(8, ffffffff7ffff088, 1001f4800, 1, ffffffff7ffff088, 1)\r\nffffffff7fffe7c1 _start+0x64(0, 0, 0, 0, 0, 0)\r\n```\r\n\r\nWith tracing:\r\n```\r\n$ apptrace -o log ./target/debug/test-clang\r\ntu is: 0x0\r\n\r\napptrace: ./target/debug/test-clang: Segmentation Fault(Core dump)\r\n\r\ntu is: 0x0\r\nSegmentation Fault (core dumped)\r\n\r\n$ grep clang_ log\r\n-> test-clang -> libclang.so.5:clang_createIndex(0x0, 0x0, 0x2) ** NR\r\n-> test-clang -> libclang.so.5:clang_createTranslationUnit(0x100230f40, 0x1000577b4, 0xe) ** NR\r\n-> test-clang -> libclang.so.5:clang_getTranslationUnitCursor(0xffffffff7fffeea0, 0x0, 0x0) ** NR\r\n```\r\n\r\nNote that clang_getTranslationUnitCursor **isn't** called with 'tu' set to **0**.\r\n\r\nI have find out that the issue seems to be with the size of CXCursor structure which is returned:\r\n\r\n`CXCursor clang_getTranslationUnitCursor(CXTranslationUnit TU);`\r\n\r\nCXCursor is 32 bytes long. But if I tell clang-sys it's 16 bytes everything is perfect (when it's 17 bytes or more it causes the trouble):\r\n\r\n```\r\ndiff --git a/src/lib.rs b/src/lib.rs\r\nindex b750b9d..05aaa88 100644\r\n--- a/src/lib.rs\r\n+++ b/src/lib.rs\r\n@@ -1103,9 +1103,10 @@ default!(CXCompletionResult);\r\n #[derive(Copy, Clone, Debug)]\r\n #[repr(C)]\r\n pub struct CXCursor {\r\n-    pub kind: CXCursorKind,\r\n-    pub xdata: c_int,\r\n-    pub data: [*const c_void; 3],\r\n+    pub x1: [u8; 16],\r\n+//    pub kind: CXCursorKind,\r\n+//    pub xdata: c_int,\r\n+//    pub data: [*const c_void; 3],\r\n }\r\n```\r\n\r\nFollowing is disassembly when CXCursor is pretended to be just 16 bytes:\r\n\r\n```\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x58:  stx       %o0, [%fp + 0x7b7]\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x5c:  ldx       [%fp + 0x7bf], %o0\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x60:  call      +0x18553c     <PLT=libclang.so.5.0`clang_createTranslationUnit>\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x64:  ldx       [%fp + 0x7b7], %o1\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x68:  ba        +0x8          <_ZN10test_clang4main17heae3a929f5bb6356E+0x70>\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x6c:  stx       %o0, [%fp + 0x7d7]   // (*)\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x70:  call      +0x18554c     <PLT=libclang.so.5.0`clang_getTranslationUnitCursor>\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x74:  ldx       [%fp + 0x7d7], %o0   // corectly sets what was returned from clang_createTranslationUnit (*)\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x78:  stx       %o1, [%fp + 0x7f7]\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x7c:  stx       %o0, [%fp + 0x7ef]\r\n```\r\n\r\nAnd now with 17 bytes:\r\n\r\n```\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x58:  stx       %o0, [%fp + 0x7bf]\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x5c:  ldx       [%fp + 0x7c7], %o0\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x60:  call      +0x18553c     <PLT:clang_createTranslationUnit>\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x64:  ldx       [%fp + 0x7bf], %o1\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x68:  ba        +0x8          <_ZN10test_clang4main17heae3a929f5bb6356E+0x70>\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x6c:  stx       %o0, [%fp + 0x7df]\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x70:  ldx       [%fp + 0x7df], %o1\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x74:  call      +0x185548     <PLT:clang_getTranslationUnitCursor>\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x78:  add       %fp, 0x7e7, %o0\r\n_ZN10test_clang4main17heae3a929f5bb6356E+0x7c:  ba        +0x8          <_ZN10test_clang4main17heae3a929f5bb6356E+0x84>\r\n\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46679/timeline", "performed_via_github_app": null, "state_reason": "completed"}