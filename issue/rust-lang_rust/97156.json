{"url": "https://api.github.com/repos/rust-lang/rust/issues/97156", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97156/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97156/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97156/events", "html_url": "https://github.com/rust-lang/rust/issues/97156", "id": 1240600801, "node_id": "I_kwDOAAsO6M5J8hDh", "number": 97156, "title": "`TypeId` exposes equality-by-subtyping vs normal-form-syntactic-equality unsoundness.", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2022-05-18T22:18:24Z", "updated_at": "2023-06-10T18:11:00Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "EDIT by @BoxyUwU \r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=26bb0a79a4d10d40ed0fd03b96b36acf)\r\n```rust\r\ntype One = for<'a> fn(&'a (), &'a ());\r\ntype Two = for<'a, 'b> fn(&'a (), &'b ());\r\n\r\nmod my_api {\r\n    use std::any::Any;\r\n    use std::marker::PhantomData;\r\n\r\n    pub struct Foo<T: 'static> {\r\n        a: &'static dyn Any,\r\n        _p: PhantomData<*mut T>, // invariant, the type of the `dyn Any`\r\n    }\r\n    \r\n    impl<T: 'static> Foo<T> {\r\n        pub fn deref(&self) -> &'static T {\r\n            match self.a.downcast_ref::<T>() {\r\n                None => unsafe { std::hint::unreachable_unchecked() },\r\n                Some(a) => a,\r\n            }\r\n        }\r\n        \r\n        pub fn new(a: T) -> Foo<T> {\r\n           Foo::<T> {\r\n                a: Box::leak(Box::new(a)),\r\n                _p: PhantomData,\r\n            } \r\n        }\r\n    }\r\n}\r\n\r\nuse my_api::*;\r\n\r\nfn main() {\r\n    let foo = Foo::<One>::new((|_, _| ()) as One);\r\n    foo.deref();\r\n    let foo: Foo<Two> = foo;\r\n    foo.deref();\r\n}\r\n```\r\nhas UB from hitting the `unreachable_unchecked` because `TypeId::of::<One>()` is not the same as `TypeId::of::<Two>()` despite them being considered the same types by the type checker. Originally this was thought to be a nightly-only issue with `feature(generic_const_exprs)` but actually the weird behaviour of `TypeId`  can be seen on stable and result in crashes or UB in unsafe code.\r\n\r\noriginal description follows below:\r\n\r\n---\r\n\r\n```rust\r\n#![feature(const_type_id, generic_const_exprs)]\r\n\r\nuse std::any::TypeId;\r\n// `One` and `Two` are currently considered equal types, as both\r\n// `One <: Two` and `One :> Two` holds.\r\ntype One = for<'a> fn(&'a (), &'a ());\r\ntype Two = for<'a, 'b> fn(&'a (), &'b ());\r\ntrait AssocCt {\r\n    const ASSOC: usize;\r\n}\r\nconst fn to_usize<T: 'static>() -> usize {\r\n    const WHAT_A_TYPE: TypeId = TypeId::of::<One>();\r\n    match TypeId::of::<T>() {\r\n        WHAT_A_TYPE => 0,\r\n        _ => 1000,\r\n    } \r\n}\r\nimpl<T: 'static> AssocCt for T {\r\n    const ASSOC: usize = to_usize::<T>();\r\n}\r\n\r\ntrait WithAssoc<U> {\r\n    type Assoc;\r\n}\r\nimpl<T: 'static> WithAssoc<()> for T where [(); <T as AssocCt>::ASSOC]: {\r\n    type Assoc = [u8; <T as AssocCt>::ASSOC];\r\n}\r\n\r\nfn generic<T: 'static, U>(x: <T as WithAssoc<U>>::Assoc) -> <T as WithAssoc<U>>::Assoc\r\nwhere\r\n    [(); <T as AssocCt>::ASSOC]:,\r\n    T: WithAssoc<U>,\r\n{\r\n    x\r\n}\r\n\r\n\r\nfn unsound<T>(x: <One as WithAssoc<T>>::Assoc) -> <Two as WithAssoc<T>>::Assoc\r\nwhere\r\n    One: WithAssoc<T>,\r\n{\r\n    let x: <Two as WithAssoc<T>>::Assoc = generic::<One, T>(x);\r\n    x\r\n}\r\n\r\nfn main() {\r\n    println!(\"{:?}\", unsound::<()>([]));\r\n}\r\n```\r\n`TypeId` being different for types which are considered equal types allows us to take change the value of a projection by switching between the equal types in its substs and observing that change by looking at their `TypeId`. This is possible as switching between equal types is allowed even in invariant positions.\r\n\r\nThis means that stabilizing `const TypeId::of` and allowing constants to flow into the type system, e.g. some minimal version of `feature(generic_const_exprs)`, will be currently unsound.\r\n\r\nI have no idea on how to fix this. I don't expect that we're able to convert higher ranked types to some canonical representation. Ah well, cc @rust-lang/project-const-generics @nikomatsakis", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97156/reactions", "total_count": 12, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 6, "heart": 0, "rocket": 0, "eyes": 6}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97156/timeline", "performed_via_github_app": null, "state_reason": null}