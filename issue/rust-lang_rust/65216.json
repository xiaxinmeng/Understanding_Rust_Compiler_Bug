{"url": "https://api.github.com/repos/rust-lang/rust/issues/65216", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65216/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65216/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65216/events", "html_url": "https://github.com/rust-lang/rust/issues/65216", "id": 504217142, "node_id": "MDU6SXNzdWU1MDQyMTcxNDI=", "number": 65216, "title": "Confusing MaybeUninit documentation", "user": {"login": "DutchGhost", "id": 25501014, "node_id": "MDQ6VXNlcjI1NTAxMDE0", "avatar_url": "https://avatars.githubusercontent.com/u/25501014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DutchGhost", "html_url": "https://github.com/DutchGhost", "followers_url": "https://api.github.com/users/DutchGhost/followers", "following_url": "https://api.github.com/users/DutchGhost/following{/other_user}", "gists_url": "https://api.github.com/users/DutchGhost/gists{/gist_id}", "starred_url": "https://api.github.com/users/DutchGhost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DutchGhost/subscriptions", "organizations_url": "https://api.github.com/users/DutchGhost/orgs", "repos_url": "https://api.github.com/users/DutchGhost/repos", "events_url": "https://api.github.com/users/DutchGhost/events{/privacy}", "received_events_url": "https://api.github.com/users/DutchGhost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-08T18:53:50Z", "updated_at": "2022-09-21T00:13:05Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The [as_ptr](https://doc.rust-lang.org/std/mem/union.MaybeUninit.html#method.as_ptr]) method on a `MaybeUninit<T>` perhaps could use some better wording, or at least an example.\r\n\r\nThe docs say: \"Writing to memory that this pointer (non-transitively) points to is undefined behavior (except inside an UnsafeCell<T>).\"\r\n\r\nIts unclear whether that means `&MaybeUninit<UnsafeCell<T>> -> *const UnsafeCell<T> -> *mut T` is okey, or that `&UnsafeCell<MaybeUninit<T>> -> *mut MaybeUninit<T> -> *mut T` is okey, if the resulting mutable pointer is written to.\r\n\r\nPerhaps adding a little example of which of the two is okey, (or perhaps both) would help.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65216/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65216/timeline", "performed_via_github_app": null, "state_reason": null}