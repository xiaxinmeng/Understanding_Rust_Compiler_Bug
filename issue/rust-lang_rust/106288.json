{"url": "https://api.github.com/repos/rust-lang/rust/issues/106288", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106288/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106288/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106288/events", "html_url": "https://github.com/rust-lang/rust/issues/106288", "id": 1514536822, "node_id": "I_kwDOAAsO6M5aRf92", "number": 106288, "title": "`slice::Iter::fold` optimizes poorly for some niche optimized types.", "user": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2022-12-30T13:48:38Z", "updated_at": "2023-04-05T17:32:51Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rs\r\npub fn fold_val(s: &[i32]) -> Option<i32> {\r\n    s.iter().fold(None, |_, i| Some(*i))\r\n}\r\n\r\npub fn fold_ptr(s: &[i32]) -> Option<*const i32> {\r\n    s.iter().fold(None, |_, i| Some(<*const i32>::from(i)))\r\n}\r\n\r\npub fn fold_nonnull(s: &[i32]) -> Option<std::ptr::NonNull<i32>> {\r\n    s.iter().fold(None, |_, i| Some(From::from(i)))\r\n}\r\n\r\npub fn fold_ref(s: &[i32]) -> Option<&i32> {\r\n    s.iter().fold(None, |_, i| Some(i))\r\n}\r\n```\r\n(nevermind the fact that these could obviously just use `slice::back`)\r\n(godbolt link: https://rust.godbolt.org/z/6fjzo4faW )\r\n\r\nI expected that all of these functions produce more or less similar assembly, as all of them just need to peel the last loop iteration to be able to optimize away the whole loop body. Indeed, the first two functions optimize just fine:\r\n\r\n```asm\r\nexample::fold_val:\r\n        test    rsi, rsi\r\n        je      .LBB0_1\r\n        mov     edx, dword ptr [rdi + 4*rsi - 4]\r\n        mov     eax, 1\r\n        ret\r\n.LBB0_1:\r\n        xor     eax, eax\r\n        ret\r\n\r\nexample::fold_ptr:\r\n        xor     eax, eax\r\n        test    rsi, rsi\r\n        setne   al\r\n        lea     rdx, [rdi + 4*rsi]\r\n        add     rdx, -4\r\n        ret\r\n```\r\n\r\nThe `fold_{nonnull,ref}` functions however don't optimize away the loop:\r\n\r\n```asm\r\nexample::fold_nonnull:\r\n        movabs  r8, 4611686018427387903\r\n        and     r8, rsi\r\n        lea     ecx, [rsi + 1]\r\n        and     rcx, 7\r\n        je      .LBB2_1\r\n        xor     r9d, r9d\r\n        mov     rdx, rdi\r\n.LBB2_3:\r\n        mov     rax, r9\r\n        mov     r9, rdx\r\n        add     rdx, 4\r\n        dec     rcx\r\n        jne     .LBB2_3\r\n        cmp     r8, 7\r\n        jae     .LBB2_5\r\n        jmp     .LBB2_7\r\n.LBB2_1:\r\n        mov     rdx, rdi\r\n        cmp     r8, 7\r\n        jb      .LBB2_7\r\n.LBB2_5:\r\n        lea     rcx, [rdi + 4*rsi]\r\n        add     rdx, -8\r\n.LBB2_6:\r\n        lea     rax, [rdx + 32]\r\n        add     rdx, 36\r\n        cmp     rdx, rcx\r\n        mov     rdx, rax\r\n        jne     .LBB2_6\r\n.LBB2_7:\r\n        ret\r\n\r\nexample::fold_ref:\r\n        movabs  r8, 4611686018427387903\r\n        and     r8, rsi\r\n        lea     ecx, [rsi + 1]\r\n        and     rcx, 7\r\n        je      .LBB3_1\r\n        xor     r9d, r9d\r\n        mov     rdx, rdi\r\n.LBB3_3:\r\n        mov     rax, r9\r\n        mov     r9, rdx\r\n        add     rdx, 4\r\n        dec     rcx\r\n        jne     .LBB3_3\r\n        cmp     r8, 7\r\n        jae     .LBB3_5\r\n        jmp     .LBB3_7\r\n.LBB3_1:\r\n        mov     rdx, rdi\r\n        cmp     r8, 7\r\n        jb      .LBB3_7\r\n.LBB3_5:\r\n        lea     rcx, [rdi + 4*rsi]\r\n        add     rdx, -8\r\n.LBB3_6:\r\n        lea     rax, [rdx + 32]\r\n        add     rdx, 36\r\n        cmp     rdx, rcx\r\n        mov     rdx, rax\r\n        jne     .LBB3_6\r\n.LBB3_7:\r\n        ret\r\n```\r\n\r\nI'm assuming this somehow has to do with `NonNull` and `&T` having the null niche value, as I don't see any other reason for the differences between `*const T` and `NonNull<T>`. It doesn't seem to be happening with all niche optimized types though, as functions like these do optimize away the loop:\r\n```rs\r\n\r\npub fn fold_bool(s: &[bool]) -> Option<bool> {\r\n    s.iter().fold(None, |_, i| Some(*i))\r\n}\r\n\r\npub fn fold_nz(s: &[NonZeroUsize]) -> Option<NonZeroUsize> {\r\n    s.iter().fold(None, |_, i| Some(*i))\r\n}\r\n```\r\nThis is using nightly rustc on godbolt, which currently is:\r\n```\r\nrustc 1.68.0-nightly (ad8ae0504 2022-12-29)\r\nbinary: rustc\r\ncommit-hash: ad8ae0504c54bc2bd8306abfcfe8546c1bb16a49\r\ncommit-date: 2022-12-29\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.68.0-nightly\r\nLLVM version: 15.0.6\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106288/timeline", "performed_via_github_app": null, "state_reason": null}