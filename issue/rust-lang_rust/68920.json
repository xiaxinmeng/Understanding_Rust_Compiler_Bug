{"url": "https://api.github.com/repos/rust-lang/rust/issues/68920", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68920/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68920/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68920/events", "html_url": "https://github.com/rust-lang/rust/issues/68920", "id": 561476154, "node_id": "MDU6SXNzdWU1NjE0NzYxNTQ=", "number": 68920, "title": "Cannot find a way to create a const array using a trait with associated const", "user": {"login": "crusty-dave", "id": 41089818, "node_id": "MDQ6VXNlcjQxMDg5ODE4", "avatar_url": "https://avatars.githubusercontent.com/u/41089818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusty-dave", "html_url": "https://github.com/crusty-dave", "followers_url": "https://api.github.com/users/crusty-dave/followers", "following_url": "https://api.github.com/users/crusty-dave/following{/other_user}", "gists_url": "https://api.github.com/users/crusty-dave/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusty-dave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusty-dave/subscriptions", "organizations_url": "https://api.github.com/users/crusty-dave/orgs", "repos_url": "https://api.github.com/users/crusty-dave/repos", "events_url": "https://api.github.com/users/crusty-dave/events{/privacy}", "received_events_url": "https://api.github.com/users/crusty-dave/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-07T07:50:08Z", "updated_at": "2020-02-07T10:34:36Z", "closed_at": "2020-02-07T10:34:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to get something like the following code to work, but it seems that associated consts cannot currently do it.  The intent here is to be able to define each element of an array as a unique const.  Individually creating structs to do it (like **struct Count** shown in the example) is **not** what I want.\r\n\r\n```\r\nconst TAG_START: &[u8] = b\"start\";\r\nconst TAG_COUNT: &[u8] = b\"count\";\r\nconst TAG_IPV4: &[u8] = b\"ipv4\";\r\nconst TAG_IPV6: &[u8] = b\"ipv6\";\r\nconst TAG_DOMAIN: &[u8] = b\"domain\";\r\n\r\n#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Clone, Hash)]\r\npub enum ParseType {\r\n    Start,\r\n    Count,\r\n    Ipv4Address,\r\n    Ipv6Address,\r\n    Domain,\r\n}\r\n\r\ntrait ParseTrait<T> {\r\n    const TYPE: T;\r\n    const TAG: &'static [u8; 16];\r\n    const MAX: usize;\r\n\r\n    fn fetch_tag_as_string(&self) -> String {\r\n        String::from_utf8_lossy(Self::TAG).to_string()\r\n    }\r\n\r\n    fn fetch_tag() -> &'static [u8; 16] where Self: Sized {\r\n        Self::TAG\r\n    }\r\n\r\n    fn fetch_max() -> usize where Self: Sized {\r\n        Self::MAX\r\n    }\r\n}\r\n\r\nstruct Count;\r\n\r\nimpl ParseTrait<ParseType> for Count {\r\n    const TYPE: ParseType = ParseType::Count;\r\n    const TAG: &'static [u8; 16] = TAG_COUNT;\r\n    const MAX: usize = 1;\r\n}\r\n\r\n// What I want here is a const array that can be used to initialize another collection like a HashMap\r\nconst PARSE_LIST: [dyn ParseTrait<ParseType> + 'static] = [\r\n    {const TYPE: ParseType = ParseType::Count; const TAG: &'static [u8] = TAG_COUNT; const MAX: usize = 1;},\r\n    {const TYPE: ParseType = ParseType::Start; const TAG: &'static [u8] = TAG_START; const MAX: usize = 1;},\r\n    {const TYPE: ParseType = ParseType::Ipv4Address; const TAG: &'static [u8] = TAG_IPV4; const MAX: usize = 1;},\r\n    {const TYPE: ParseType = ParseType::Ipv6Address; const TAG: &'static [u8] = TAG_IPV6; const MAX: usize = 1;},\r\n    {const TYPE: ParseType = ParseType::Comain; const TAG: &'static [u8] = TAG_DOMAIN; const MAX: usize = 1;},\r\n];\r\n\r\n\r\nfn main() {\r\n}\r\n```\r\n\r\nThe above yields the following errors in the Rust Playground:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0277]: the size for values of type `[(dyn ParseTrait<ParseType> + 'static)]` cannot be known at compilation time\r\n  --> src/lib.rs:43:19\r\n   |\r\n43 | const PARSE_LIST: [dyn ParseTrait<ParseType> + 'static] = [\r\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\r\n   |\r\n   = help: the trait `std::marker::Sized` is not implemented for `[(dyn ParseTrait<ParseType> + 'static)]`\r\n   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\r\n\r\nerror[E0277]: the size for values of type `(dyn ParseTrait<ParseType> + 'static)` cannot be known at compilation time\r\n  --> src/lib.rs:43:19\r\n   |\r\n43 | const PARSE_LIST: [dyn ParseTrait<ParseType> + 'static] = [\r\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\r\n   |\r\n   = help: the trait `std::marker::Sized` is not implemented for `(dyn ParseTrait<ParseType> + 'static)`\r\n   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\r\n   = note: slice and array elements must have `Sized` type\r\n\r\nerror[E0038]: the trait `ParseTrait` cannot be made into an object\r\n  --> src/lib.rs:43:19\r\n   |\r\n16 | trait ParseTrait<T> {\r\n   |       ---------- this trait cannot be made into an object...\r\n17 |     const TYPE: T;\r\n   |           ---- ...because it contains this associated `const`\r\n18 |     const TAG: &'static [u8; 16];\r\n   |           --- ...because it contains this associated `const`\r\n19 |     const MAX: usize;\r\n   |           --- ...because it contains this associated `const`\r\n...\r\n43 | const PARSE_LIST: [dyn ParseTrait<ParseType> + 'static] = [\r\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ParseTrait` cannot be made into an object\r\n   |\r\n   = help: consider moving `TYPE` to another trait\r\n   = help: consider moving `TAG` to another trait\r\n   = help: consider moving `MAX` to another trait\r\n\r\nerror: aborting due to 3 previous errors\r\n\r\nSome errors have detailed explanations: E0038, E0277.\r\nFor more information about an error, try `rustc --explain E0038`.\r\nerror: could not compile `playground`.\r\n```\r\n\r\nThis is a pattern that I like to use for building parsers, I am hoping that there is some way to work around it - without the use of macros.\r\n\r\n\r\nTIA,\r\n-Dave\r\n", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68920/timeline", "performed_via_github_app": null, "state_reason": "completed"}