{"url": "https://api.github.com/repos/rust-lang/rust/issues/92280", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92280/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92280/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92280/events", "html_url": "https://github.com/rust-lang/rust/issues/92280", "id": 1088652984, "node_id": "I_kwDOAAsO6M5A44a4", "number": 92280, "title": "GAT: `Self: 'a` bound cannot be added for types which store a generic T that is further constrained by the `impl`", "user": {"login": "kahomayo", "id": 74737340, "node_id": "MDQ6VXNlcjc0NzM3MzQw", "avatar_url": "https://avatars.githubusercontent.com/u/74737340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kahomayo", "html_url": "https://github.com/kahomayo", "followers_url": "https://api.github.com/users/kahomayo/followers", "following_url": "https://api.github.com/users/kahomayo/following{/other_user}", "gists_url": "https://api.github.com/users/kahomayo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kahomayo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kahomayo/subscriptions", "organizations_url": "https://api.github.com/users/kahomayo/orgs", "repos_url": "https://api.github.com/users/kahomayo/repos", "events_url": "https://api.github.com/users/kahomayo/events{/privacy}", "received_events_url": "https://api.github.com/users/kahomayo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-12-25T20:34:40Z", "updated_at": "2022-01-16T20:27:49Z", "closed_at": "2022-01-16T20:27:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nWithin an `impl<T: Trait1> Trait2 for Struct<T::Foo>`, a GAT bound of `Self: 'a` does not compile, asking me to add an explicit `T::Foo: 'a` bound.\r\n\r\n[Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=76128161fa550519c3bb3f4f8fd2e744)\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\n#![allow(non_camel_case_types)]\r\n\r\ntrait HasAssoc {\r\n    type Assoc;\r\n}\r\n\r\ntrait Iterate<S: HasAssoc> {\r\n    type Iter<'a> where Self: 'a;\r\n    fn iter<'a>(&'a self) -> Self::Iter<'a>;\r\n}\r\n\r\nstruct KeySegment_Broken<T>{ key: T }\r\nimpl<S: HasAssoc> Iterate<S> for KeySegment_Broken<S::Assoc> {\r\n    type Iter<'a> where Self: 'a = ();\r\n    fn iter<'a>(&'a self) -> Self::Iter<'a> {\r\n        todo!()\r\n    }\r\n}\r\n```\r\n\r\nThis code results in two errors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror: `impl` associated type signature for `Iter` doesn't match `trait` associated type signature\r\n  --> src/lib.rs:17:5\r\n   |\r\n9  |     type Iter<'a> where Self: 'a;\r\n   |     ----------------------------- expected\r\n...\r\n17 |     type Iter<'a> where Self: 'a = ();\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found\r\n\r\nerror[E0309]: the associated type `<S as HasAssoc>::Assoc` may not live long enough\r\n  --> src/lib.rs:17:36\r\n   |\r\n17 |     type Iter<'a> where Self: 'a = ();\r\n   |                                 -  ^^ ...so that the type `KeySegment_Broken<<S as HasAssoc>::Assoc>` will meet its required lifetime bounds\r\n   |                                 |\r\n   |                                 help: consider adding a where clause: `, <S as HasAssoc>::Assoc: 'a`\r\n\r\n```\r\n\r\nI believe that the `E0309` error is a bug, as since `key` is known in this `impl` to be `S::String`, `S::String` must outlive `Self` and the suggested bound should thus already be implied by `Self: 'a`. Applying the suggested fix removes this error, but obviously cannot compile (as the GAT impl now has a stricter `where` than in the `trait` declaration). The first error seems incorrect too, as there is no visible difference between the highlighted lines other than `= ()`:\r\n\r\n```rust\r\nstruct KeySegment_SuggestedFix<T>{ key: T }\r\nimpl<S: HasAssoc> Iterate<S> for KeySegment_SuggestedFix<S::Assoc> {\r\n    // error: `impl` associated type signature for `Iter` doesn't match `trait` associated type signature\r\n    type Iter<'a>\r\n    where\r\n        Self: 'a,\r\n        S::Assoc: 'a\r\n    = ();\r\n    \r\n    fn iter<'a>(&'a self) -> Self::Iter<'a> {\r\n        todo!()\r\n    }\r\n}\r\n```\r\n\r\nAdding the type bound on the `struct` declaration avoids these errors, but is less generic.\r\n\r\n```rust\r\nstruct KeySegment<S: OnceTypeSystem> { key: S::String }\r\nimpl<S: OnceTypeSystem> PathSegment<S> for KeySegment<S> {\r\n    type Iter<'a> where Self: 'a = ();\r\n    fn iter<'a>(&'a self) -> Self::Iter<'a> {\r\n        todo!()\r\n    }\r\n}\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.59.0-nightly (475b00aa4 2021-12-24)\r\nbinary: rustc\r\ncommit-hash: 475b00aa4037461b506539a06d15ca6091b461a7\r\ncommit-date: 2021-12-24\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.59.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\nI have also encountered this bug on `1.59.0-nightly (e100ec5bc 2021-12-21)`.\r\n\r\n</details>\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92280/timeline", "performed_via_github_app": null, "state_reason": "completed"}