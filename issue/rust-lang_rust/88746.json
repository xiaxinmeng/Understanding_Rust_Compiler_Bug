{"url": "https://api.github.com/repos/rust-lang/rust/issues/88746", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88746/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88746/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88746/events", "html_url": "https://github.com/rust-lang/rust/issues/88746", "id": 991189744, "node_id": "MDU6SXNzdWU5OTExODk3NDQ=", "number": 88746, "title": "std::ptr::read double free the nonCopy type value", "user": {"login": "NightfallDM", "id": 49024532, "node_id": "MDQ6VXNlcjQ5MDI0NTMy", "avatar_url": "https://avatars.githubusercontent.com/u/49024532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NightfallDM", "html_url": "https://github.com/NightfallDM", "followers_url": "https://api.github.com/users/NightfallDM/followers", "following_url": "https://api.github.com/users/NightfallDM/following{/other_user}", "gists_url": "https://api.github.com/users/NightfallDM/gists{/gist_id}", "starred_url": "https://api.github.com/users/NightfallDM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NightfallDM/subscriptions", "organizations_url": "https://api.github.com/users/NightfallDM/orgs", "repos_url": "https://api.github.com/users/NightfallDM/repos", "events_url": "https://api.github.com/users/NightfallDM/events{/privacy}", "received_events_url": "https://api.github.com/users/NightfallDM/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-09-08T14:14:16Z", "updated_at": "2021-09-08T14:38:03Z", "closed_at": "2021-09-08T14:20:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#![allow(unused)]\r\nfn main() {\r\nuse std::mem::ManuallyDrop;\r\nlet x = String::from(\"xxx\");\r\nlet y = &x as *const String;\r\n\r\nunsafe {\r\n    assert_eq!(std::ptr::read(y), \"xxx\".to_string());\r\n    }\r\n    // {\r\n    //     let _ = ManuallyDrop::new(x);\r\n    // }\r\n}\r\n```\r\n### There are a few question to talk about the title.\r\n1.    The std::ptr::read return a new value (T) from a const raw ptr (*const T). in general the perv value which have the ownship should not legal anymore, because if the old value and new value both legal, threre will direct have two owners of the same resource, So the std lib DOC write   \"read creates a bitwise copy of T, regardless of whether T is Copy. If T is not Copy, using both the returned value and the value at *src can violate memory safety. Note that assigning to *src counts as a use because it will attempt to drop the value at *src.\"\r\n     It means we should not access the old vaule, but the old value still alive, in this time(the read func return T), the two owners value happend, the code above show this issue. When the old value which do not impl Copy trait (in our case: String), the std::ptr::read will return another String, The old is also alive, So when end of the main func, the two String ptr to the same addr(own the same mem resource) will be drop twice, So the compiler abort and detected the double free.\r\n    As you can see, i do not use the *src, So i do not violate the suggestion gived by the DOC, but i still get a double free abort.\r\n\r\n2.  There are two method to away from this question, One is just like the annoted above. After call the std::ptr::read method, It's better to \"forget\" the old value at once.\r\n     Another way is to add the code to std lib\r\n```rust\r\n#[inline]\r\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\r\n#[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\r\npub const unsafe fn read<T>(src: *const T) -> T {\r\n    // We are calling the intrinsics directly to avoid function calls in the generated code\r\n    // as `intrinsics::copy_nonoverlapping` is a wrapper function.\r\n    extern \"rust-intrinsic\" {\r\n        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\r\n        fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\r\n    }\r\n\r\n    let mut tmp = MaybeUninit::<T>::uninit();\r\n    // SAFETY: the caller must guarantee that `src` is valid for reads.\r\n    // `src` cannot overlap `tmp` because `tmp` was just allocated on\r\n    // the stack as a separate allocated object.\r\n    //\r\n    // Also, since we just wrote a valid value into `tmp`, it is guaranteed\r\n    // to be properly initialized.\r\n    unsafe {\r\n        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\r\n        intrinsics::forget(src);\r\n        tmp.assume_init()\r\n    }\r\n}\r\n```\r\n\r\n3.    The basic reason cause this issue is the std::ptr::read start to read the nonCopy type value(like String), it just copy the stack part of the String to the new value, So the new value ptr to the same resource of the old value, at this time we should think that, the old value should be \"forgot\" by the compiler to move the ownship of this resource to the new value.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nI just use the rust playground to test the code\r\nstable version 1.54.0\r\nDEBUG\r\n2018 edition\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\nStandard Error\r\nCompiling playground v0.0.1 (/playground)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 1.92s\r\n     Running `target/debug/playground`\r\nfree(): double free detected in tcache 2\r\ntimeout: the monitored command dumped core\r\n/playground/tools/entrypoint.sh: line 11:     7 Aborted                 timeout --signal=KILL ${timeout} \"$@\"\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88746/timeline", "performed_via_github_app": null, "state_reason": "completed"}