{"url": "https://api.github.com/repos/rust-lang/rust/issues/55773", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55773/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55773/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55773/events", "html_url": "https://github.com/rust-lang/rust/issues/55773", "id": 378494750, "node_id": "MDU6SXNzdWUzNzg0OTQ3NTA=", "number": 55773, "title": "Combine 32-bit and 64-bit code", "user": {"login": "phil-opp", "id": 1131315, "node_id": "MDQ6VXNlcjExMzEzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1131315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phil-opp", "html_url": "https://github.com/phil-opp", "followers_url": "https://api.github.com/users/phil-opp/followers", "following_url": "https://api.github.com/users/phil-opp/following{/other_user}", "gists_url": "https://api.github.com/users/phil-opp/gists{/gist_id}", "starred_url": "https://api.github.com/users/phil-opp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phil-opp/subscriptions", "organizations_url": "https://api.github.com/users/phil-opp/orgs", "repos_url": "https://api.github.com/users/phil-opp/repos", "events_url": "https://api.github.com/users/phil-opp/events{/privacy}", "received_events_url": "https://api.github.com/users/phil-opp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-07T22:22:37Z", "updated_at": "2018-11-13T11:02:25Z", "closed_at": "2018-11-10T17:44:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to write a x86 bootloader in Rust, that initializes the CPU from 16-bit real mode to 32-bit protected mode to 64-bit long mode. This means that I have to combine code for the different modes in a single executable. I'm currently using global_asm for the 16-bit and 32-bit code (together with the `.code16` and `.code32` inline assembly flags), but I would like to port the 32-bit stage to Rust.\r\n\r\nSo I would like to link 32-bit Rust code with 64-bit Rust code. My approach was to create a `protected_mode` sub-crate that is compiled through a build script and later linked in. The question is how I can link the two crates with different targets together. I tried the following approaches:\r\n\r\n- Adding `extern crate protected_mode` to the parent crate and passing the protected_mode rlib as `--extern` argument to rustc. This errors because the targets don't match.\r\n- Passing the rlib to the linker without adding extern crate: This works, but only if I keep the sub-crate very simple. As soon as I try to use the formatting system or anything that might panic, I get linker errors about undefined symbols: <details>\r\n    ```\r\n  = note: rust-lld: error: undefined symbol: core::fmt::num::_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$::fmt::hb0a0361a2e8dea8a\r\n          >>> referenced by protected_mode.9viz2vjs-cgu.7\r\n          >>>               protected_mode-90beb11cf4901381.protected_mode.9viz2vjs-cgu.7.rcgu.o:(stage_3) in archive protected_mode/target/i686-bootloader/release/libprotected_mode.rlib\r\n          \r\n          rust-lld: error: undefined symbol: core::fmt::write::h2819bacac5a4927b\r\n          >>> referenced by protected_mode.9viz2vjs-cgu.7\r\n          >>>               protected_mode-90beb11cf4901381.protected_mode.9viz2vjs-cgu.7.rcgu.o:(stage_3) in archive protected_mode/target/i686-bootloader/release/libprotected_mode.rlib\r\n          \r\n          rust-lld: error: undefined symbol: core::panicking::panic_bounds_check::h6267e601085674a8\r\n          >>> referenced by protected_mode.9viz2vjs-cgu.1\r\n          >>>               protected_mode-90beb11cf4901381.protected_mode.9viz2vjs-cgu.1.rcgu.o:(core::fmt::Write::write_char::h6daa05da5e25b944) in archive protected_mode/target/i686-bootloader/release/libprotected_mode.rlib\r\n          \r\n          rust-lld: error: undefined symbol: core::fmt::write::h2819bacac5a4927b\r\n          >>> referenced by protected_mode.9viz2vjs-cgu.2\r\n          >>>               protected_mode-90beb11cf4901381.protected_mode.9viz2vjs-cgu.2.rcgu.o:(_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$_$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_fmt::h6d6f1028afbd8582) in archive protected_mode/target/i686-bootloader/release/libprotected_mode.rlib\r\n          \r\n          rust-lld: error: undefined symbol: core::panicking::panic_bounds_check::h6267e601085674a8\r\n          >>> referenced by protected_mode.9viz2vjs-cgu.2\r\n          >>>               protected_mode-90beb11cf4901381.protected_mode.9viz2vjs-cgu.2.rcgu.o:(_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$_$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::hcc7ec8903b08bf8c) in archive protected_mode/target/i686-bootloader/release/libprotected_mode.rlib\r\n    ```\r\n</details>\r\n\r\n- Compiling the sub-crate as staticlib. This throws linker errors about duplicate `rust_begin_unwind` and `rust_eh_personality` symbols, since they are defined in both the staticlib and the executable. I tried to rename them, but it seems like these names are hardcoded internally.\r\n\r\nIs there any other way to combine 32-bit and 64-bit code?", "closed_by": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55773/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55773/timeline", "performed_via_github_app": null, "state_reason": "completed"}