{"url": "https://api.github.com/repos/rust-lang/rust/issues/13756", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/13756/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/13756/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/13756/events", "html_url": "https://github.com/rust-lang/rust/issues/13756", "id": 32257158, "node_id": "MDU6SXNzdWUzMjI1NzE1OA==", "number": 13756, "title": "EnumSet with more variants than bits in uint silently corrupts data", "user": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-04-25T18:50:21Z", "updated_at": "2014-11-07T15:21:40Z", "closed_at": "2014-11-07T15:21:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Test case:\n\n``` rust\nextern crate collections;\nuse collections::enum_set::{EnumSet, CLike};\nuse std::cast;\n\n#[repr(uint)]\nenum Foo {\n    V00, V01, V02, V03, V04, V05, V06, V07, V08, V09,\n    V10, V11, V12, V13, V14, V15, V16, V17, V18, V19,\n    V20, V21, V22, V23, V24, V25, V26, V27, V28, V29,\n    V30, V31, V32, V33, V34, V35, V36, V37, V38, V39,\n    V40, V41, V42, V43, V44, V45, V46, V47, V48, V49,\n    V50, V51, V52, V53, V54, V55, V56, V57, V58, V59,\n    V60, V61, V62, V63, V64, V65, V66, V67, V68, V69,\n}\n\nimpl CLike for Foo {\n    fn to_uint(&self) -> uint {\n        *self as uint\n    }\n\n    fn from_uint(v: uint) -> Foo {\n        unsafe { cast::transmute(v) }\n    }\n}\n\nfn main() {\n    let mut set: EnumSet<Foo> = EnumSet::empty();\n    set.add(V63);\n    set.add(V64);\n    set.add(V65);\n    println!(\"{:?}\", set.iter().collect::<~[Foo]>())\n}\n```\n\nExpected result, in decreasing order of preference: `~[V63, V64, V65]`, compile-time failure, or run-time failure.\n\nActual result with rustc eea4909 on a 64 bit system: `~[V00, V01, V63]`\n\nUse case: Servo currently handles CSS declarations in order, later ones overwriting earlier ones. I\u2019d like instead to process declarations in reverse order, and skip those for properties for which we already have a value. \"Already have a value\" would be stored in an EnumSet with one variant for every CSS property. There are a few hundreds of them. (The enum is automatically generated.) (Values can not be `Option`s, because they\u2019re initialized to the inherited or initial value rather than `None`.)\n\nPossible fixes:\n1. To at least avoid silently corrupting data, have [the `bit` function](https://github.com/mozilla/rust/blob/a28a701d648d88ed63f575fa1efed47f5cbb81ca/src/libcollections/enum_set.rs#L34-L36) assert (non-disablable) that `e.to_uint() < (size_of<uint>() * 8)`\n2. Do 1., and also add a `BigEnumSet` type that uses `Vec<uint>` or `~[uint]` internally for storage rather than just a single `uint`.\n3. Change `EnumSet` to decide at run-time to use `~[uint]` or a single `uint` for storage, like `collections::bitv::Bitv` does.\n4. Like 3., but decide **at compile-time** what kind of storage to use. (Since the generic `EnumSet` is being monomorphized anyway.) I don\u2019t know if this is possible.\n\n3 or 4 might need the `CLike` trait to gain a `max_value` associated function (or something), which would ideally be based on introspection rather than leaving the counting to the user.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/13756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/13756/timeline", "performed_via_github_app": null, "state_reason": "completed"}