{"url": "https://api.github.com/repos/rust-lang/rust/issues/60271", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60271/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60271/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60271/events", "html_url": "https://github.com/rust-lang/rust/issues/60271", "id": 437285054, "node_id": "MDU6SXNzdWU0MzcyODUwNTQ=", "number": 60271, "title": "Inconsistent parameter name \"capacity\"", "user": {"login": "mgeier", "id": 705404, "node_id": "MDQ6VXNlcjcwNTQwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/705404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgeier", "html_url": "https://github.com/mgeier", "followers_url": "https://api.github.com/users/mgeier/followers", "following_url": "https://api.github.com/users/mgeier/following{/other_user}", "gists_url": "https://api.github.com/users/mgeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgeier/subscriptions", "organizations_url": "https://api.github.com/users/mgeier/orgs", "repos_url": "https://api.github.com/users/mgeier/repos", "events_url": "https://api.github.com/users/mgeier/events{/privacy}", "received_events_url": "https://api.github.com/users/mgeier/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-25T16:15:33Z", "updated_at": "2019-04-27T16:58:14Z", "closed_at": "2019-04-27T16:58:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been told that parameter names are not part of the API, so this might not matter at all (except to pedantic people like me):\r\n\r\nI've found 17 functions with the name `with_capacity()`: https://doc.rust-lang.org/stable/std/index.html?search=with_capacity\r\n\r\nMost of them use `capacity` as parameter name:\r\n\r\n1. https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.with_capacity\r\n1. https://doc.rust-lang.org/std/vec/struct.Vec.html#method.with_capacity\r\n1. https://doc.rust-lang.org/alloc/string/struct.String.html#method.with_capacity\r\n1. https://doc.rust-lang.org/std/string/struct.String.html#method.with_capacity\r\n1. https://doc.rust-lang.org/alloc/collections/binary_heap/struct.BinaryHeap.html#method.with_capacity\r\n1. https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.with_capacity\r\n1. https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.with_capacity\r\n1. https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.with_capacity_and_hasher\r\n1. https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.with_capacity\r\n1. https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.with_capacity_and_hasher\r\n1. https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.with_capacity\r\n1. https://doc.rust-lang.org/std/ffi/struct.OsString.html#method.with_capacity\r\n\r\nSome functions, however, use `cap` as argument name:\r\n\r\n1. https://doc.rust-lang.org/std/io/struct.LineWriter.html#method.with_capacity\r\n1. https://doc.rust-lang.org/std/io/struct.BufWriter.html#method.with_capacity\r\n1. https://doc.rust-lang.org/std/io/struct.BufReader.html#method.with_capacity\r\n\r\nOthers are using `n`:\r\n\r\n1. https://doc.rust-lang.org/alloc/collections/vec_deque/struct.VecDeque.html#method.with_capacity\r\n1. https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.with_capacity\r\n\r\nWouldn't it make sense to call all of them `capacity`?\r\n\r\nDoes anyone care about such things?\r\n\r\nIf yes, we could play the same game with `swap()` and probably with other common functions.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60271/timeline", "performed_via_github_app": null, "state_reason": "completed"}