{"url": "https://api.github.com/repos/rust-lang/rust/issues/98094", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98094/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98094/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98094/events", "html_url": "https://github.com/rust-lang/rust/issues/98094", "id": 1270695374, "node_id": "I_kwDOAAsO6M5LvUXO", "number": 98094, "title": "inline assembly accepts invalid assembly, changing it", "user": {"login": "TDecking", "id": 15847799, "node_id": "MDQ6VXNlcjE1ODQ3Nzk5", "avatar_url": "https://avatars.githubusercontent.com/u/15847799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TDecking", "html_url": "https://github.com/TDecking", "followers_url": "https://api.github.com/users/TDecking/followers", "following_url": "https://api.github.com/users/TDecking/following{/other_user}", "gists_url": "https://api.github.com/users/TDecking/gists{/gist_id}", "starred_url": "https://api.github.com/users/TDecking/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TDecking/subscriptions", "organizations_url": "https://api.github.com/users/TDecking/orgs", "repos_url": "https://api.github.com/users/TDecking/repos", "events_url": "https://api.github.com/users/TDecking/events{/privacy}", "received_events_url": "https://api.github.com/users/TDecking/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-06-14T11:59:59Z", "updated_at": "2023-02-08T02:44:44Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nThe following code\r\n\r\n```rust\r\npub unsafe fn lea_sub(x: usize) -> usize {\r\n    use std::arch::asm;\r\n\r\n    let y: usize;\r\n\r\n    asm!(\r\n        \"xor rax, rax\",\r\n        \"lea rax, [rax - 8 * rdx]\",\r\n        in(\"rdx\") x,\r\n        out(\"rax\") y,\r\n    );\r\n\r\n    y\r\n}\r\n```\r\n\r\ncreates the following assembly\r\n\r\n```asm\r\nexample::lea_sub:\r\n        push    rax\r\n        mov     rdx, rdi\r\n\r\n        xor     rax, rax\r\n        lea     rax, [rax + 8*rdx]\r\n\r\n        mov     qword ptr [rsp], rax\r\n        mov     rax, qword ptr [rsp]\r\n        pop     rcx\r\n        ret\r\n\r\n__rustc_debug_gdb_scripts_section__:\r\n        .asciz  \"\\001gdb_load_rust_pretty_printers.py\"\r\n```\r\n\r\nNote that `[rax - 8 * rdx]` turned into `[rax + 8*rdx]`. The former version is illegal, since registers can only be added, not subtracted when calculating an address. Given that gcc rejects a similar attempt with its inline assembly, as well as the general confusion anyone uninitiated to the specifics of `lea` might get, I highly doubt that this behaviour is intentional.\r\n\r\n### Meta\r\n\r\nGodbolt printed the same assembly for rustc versions 1.59, 1.60, 1.61, beta and nightly.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98094/timeline", "performed_via_github_app": null, "state_reason": null}