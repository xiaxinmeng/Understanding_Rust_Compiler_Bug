{"url": "https://api.github.com/repos/rust-lang/rust/issues/45235", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45235/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45235/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45235/events", "html_url": "https://github.com/rust-lang/rust/issues/45235", "id": 264964732, "node_id": "MDU6SXNzdWUyNjQ5NjQ3MzI=", "number": 45235, "title": "Implement std::ops::*Assign traits for slices", "user": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-10-12T14:32:41Z", "updated_at": "2017-11-14T08:10:27Z", "closed_at": "2017-11-14T08:10:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Quite often I need to xor two slices, but I can't write `buf1 ^= buf2;` as `BitXorAssign` is not implemented for `&[u8]` and it's quite an unpleasant papercut for me. I couldn't find a good reason why it was not done, so I would like to suggest to add generic implementations of `ops::*Assign` traits.\r\n\r\nIt can be done as follows:\r\n<details>\r\n  <summary>Click to expand</summary>\r\n\r\n```Rust\r\nmacro_rules! impl_assign_trait {\r\n    ($trait:ident, $method:ident) => {\r\n        impl<'a, T, Rhs> $trait<&'a [Rhs]> for [T]\r\n            where T: $trait<Rhs>, Rhs: Copy\r\n        {\r\n            fn $method(&mut self, rhs: &[Rhs]) {\r\n                for (a, b) in self.iter_mut().zip(rhs) {\r\n                    a.$method(*b);\r\n                }\r\n            }\r\n        }\r\n\r\n        impl<T> $trait<T> for [T] where T: $trait + Copy {\r\n            fn $method(&mut self, rhs: T) {\r\n                for v in self.iter_mut() {\r\n                    v.$method(rhs);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nimpl_assign_trait!(AddAssign, add_assign);\r\nimpl_assign_trait!(BitAndAssign, bitand_assign);\r\nimpl_assign_trait!(BitOrAssign, bitor_assign);\r\nimpl_assign_trait!(BitXorAssign, bitxor_assign);\r\nimpl_assign_trait!(DivAssign, div_assign);\r\nimpl_assign_trait!(MulAssign, mul_assign);\r\nimpl_assign_trait!(RemAssign, rem_assign);\r\nimpl_assign_trait!(SubAssign, sub_assign);\r\n\r\nimpl<T, Rhs> ShrAssign<Rhs> for [T] where T: ShrAssign<Rhs>, Rhs: Copy {\r\n    fn shr_assign(&mut self, rhs: Rhs) {\r\n        for v in self.iter_mut() {\r\n            v.shr_assign(rhs);\r\n        }\r\n    }\r\n}\r\n\r\nimpl<T, Rhs> ShlAssign<Rhs> for [T] where T: ShlAssign<Rhs>, Rhs: Copy {\r\n    fn shl_assign(&mut self, rhs: Rhs) {\r\n        for v in self.iter_mut() {\r\n            v.shl_assign(rhs);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n</details>\r\n\r\nI am not sure about second impl in the macro, but I guess in some cases it could be convenient to write `buf += 4;` instead of an explicit loop.\r\n\r\nI can create PR if there is no arguments against this addition.", "closed_by": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45235/timeline", "performed_via_github_app": null, "state_reason": "completed"}