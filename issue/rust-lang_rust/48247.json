{"url": "https://api.github.com/repos/rust-lang/rust/issues/48247", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48247/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48247/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48247/events", "html_url": "https://github.com/rust-lang/rust/issues/48247", "id": 297624971, "node_id": "MDU6SXNzdWUyOTc2MjQ5NzE=", "number": 48247, "title": "Incremental causes significant regression in clean compile time for winapi", "user": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-02-15T22:49:06Z", "updated_at": "2020-05-14T17:26:35Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Doing `cargo rustc --features everything -- -Ztime-passes` with `winapi` `0.3`.\r\n\r\ntl;dr clean incremental is dramatically slower than clean normal, for minimal gains in rebuild times.\r\n\r\nTimes taken using `rustc 1.28.0-nightly (b68432d56 2018-06-12)`\r\n\r\nClean incremental: 34.68s\r\nRebuild incremental: 19.59s\r\nClean normal: 23.48s\r\nRebuild normal: 22.73s\r\n\r\nA clean incremental build\r\n```\r\n   Compiling winapi v0.3.5 (file:///C:/Users/Peter/Code/winapi-rs)\r\n  time: 0.894; rss: 113MB       parsing\r\n  time: 0.000; rss: 113MB       garbage collect incremental cache directory\r\n  time: 0.000; rss: 113MB       recursion limit\r\n  time: 0.000; rss: 113MB       crate injection\r\n  time: 0.000; rss: 113MB       background load prev dep-graph\r\n  time: 0.000; rss: 113MB       plugin loading\r\n  time: 0.000; rss: 113MB       plugin registration\r\n    time: 2.900; rss: 436MB     expand crate\r\n    time: 0.000; rss: 436MB     check unused macros\r\n  time: 2.901; rss: 436MB       expansion\r\n  time: 0.000; rss: 436MB       maybe building test harness\r\n  time: 0.026; rss: 436MB       maybe creating a macro crate\r\n  time: 0.077; rss: 436MB       creating allocators\r\n  time: 0.088; rss: 436MB       AST validation\r\n  time: 0.367; rss: 475MB       name resolution\r\n  time: 0.111; rss: 475MB       complete gated feature checking\r\n  time: 0.000; rss: 475MB       blocked while dep-graph loading finishes\r\n  time: 0.474; rss: 607MB       lowering ast -> hir\r\n  time: 0.135; rss: 607MB       early lint checks\r\n  time: 0.682; rss: 634MB       indexing hir\r\n  time: 0.000; rss: 383MB       load query result cache\r\n  time: 0.000; rss: 383MB       looking for entry point\r\n  time: 0.003; rss: 383MB       looking for plugin registrar\r\n  time: 0.044; rss: 383MB       loop checking\r\n  time: 0.051; rss: 395MB       attribute checking\r\n  time: 0.143; rss: 402MB       stability checking\r\n  time: 1.316; rss: 580MB       type collecting\r\n  time: 0.017; rss: 580MB       outlives testing\r\n  time: 0.050; rss: 584MB       impl wf inference\r\n  time: 0.780; rss: 626MB       coherence checking\r\n  time: 0.016; rss: 626MB       variance testing\r\n  time: 2.214; rss: 842MB       wf checking\r\n  time: 1.902; rss: 958MB       item-types checking\r\n  time: 2.327; rss: 1045MB      item-bodies checking\r\n  time: 0.848; rss: 1105MB      rvalue promotion\r\n  time: 1.125; rss: 1120MB      privacy checking\r\n  time: 0.081; rss: 1120MB      intrinsic checking\r\n  time: 0.269; rss: 1129MB      match checking\r\n  time: 0.076; rss: 1129MB      liveness checking\r\n  time: 4.956; rss: 1414MB      borrow checking\r\n  time: 0.239; rss: 1434MB      MIR borrow checking\r\n  time: 0.000; rss: 1434MB      dumping chalk-like clauses\r\n  time: 0.037; rss: 1434MB      MIR effect checking\r\n  time: 0.284; rss: 1436MB      death checking\r\n  time: 0.000; rss: 1436MB      unused lib feature checking\r\n  time: 3.860; rss: 1597MB      lint checking\r\n  time: 0.000; rss: 1597MB      resolving dependency formats\r\n      time: 0.030; rss: 1615MB  monomorphization collection\r\n      time: 0.000; rss: 1615MB  codegen unit partitioning\r\n    time: 3.419; rss: 1687MB    write metadata\r\n    time: 0.000; rss: 1688MB    codegen to LLVM IR\r\n    time: 0.000; rss: 1688MB    assert dep graph\r\n    time: 0.000; rss: 1688MB    llvm function passes [1y16o1qfye96o7m0]\r\n    time: 0.000; rss: 1688MB    llvm module passes [1y16o1qfye96o7m0]\r\n    time: 0.001; rss: 1690MB    codegen passes [1y16o1qfye96o7m0]\r\n  time: 0.006; rss: 1690MB      LLVM passes\r\n            time: 0.017; rss: 1696MB    encode_query_results for rustc::ty::queries::type_of\r\n            time: 0.030; rss: 1699MB    encode_query_results for rustc::ty::queries::generics_of\r\n            time: 0.008; rss: 1701MB    encode_query_results for rustc::ty::queries::predicates_of\r\n            time: 0.006; rss: 1702MB    encode_query_results for rustc::ty::queries::used_trait_imports\r\n            time: 0.101; rss: 1707MB    encode_query_results for rustc::ty::queries::typeck_tables_of\r\n            time: 0.000; rss: 1707MB    encode_query_results for rustc::ty::queries::codegen_fulfill_obligation\r\n            time: 0.290; rss: 1722MB    encode_query_results for rustc::ty::queries::optimized_mir\r\n            time: 0.003; rss: 1723MB    encode_query_results for rustc::ty::queries::unsafety_check_result\r\n            time: 0.008; rss: 1724MB    encode_query_results for rustc::ty::queries::borrowck\r\n            time: 0.003; rss: 1725MB    encode_query_results for rustc::ty::queries::mir_borrowck\r\n            time: 0.009; rss: 1726MB    encode_query_results for rustc::ty::queries::mir_const_qualif\r\n            time: 0.000; rss: 1726MB    encode_query_results for rustc::ty::queries::def_symbol_name\r\n            time: 0.002; rss: 1726MB    encode_query_results for rustc::ty::queries::const_is_rvalue_promotable_to_static\r\n            time: 0.000; rss: 1726MB    encode_query_results for rustc::ty::queries::symbol_name\r\n            time: 0.002; rss: 1727MB    encode_query_results for rustc::ty::queries::check_match\r\n            time: 0.001; rss: 1727MB    encode_query_results for rustc::ty::queries::codegen_fn_attrs\r\n            time: 0.003; rss: 1728MB    encode_query_results for rustc::ty::queries::specialization_graph_of\r\n          time: 0.494; rss: 1729MB      encode query results\r\n        time: 0.690; rss: 1758MB        serialize query result cache\r\n      time: 0.843; rss: 1692MB  persist query result cache\r\n          time: 0.117; rss: 1866MB      getting serialized graph\r\n          time: 0.448; rss: 2007MB      encoding serialized graph\r\n        time: 0.587; rss: 1834MB        encode dep-graph\r\n      time: 0.949; rss: 1692MB  persist dep-graph\r\n    time: 1.792; rss: 1692MB    serialize dep graph\r\n  time: 5.218; rss: 1692MB      codegen\r\n  time: 0.001; rss: 659MB       serialize work products\r\n  time: 0.064; rss: 659MB       linking\r\n    Finished dev [unoptimized + debuginfo] target(s) in 34.68s\r\n```\r\nA clean non-incremental build (`CARGO_INCREMENTAL` set to `0`)\r\n```\r\n   Compiling winapi v0.3.5 (file:///C:/Users/Peter/Code/winapi-rs)\r\n  time: 0.548; rss: 113MB       parsing\r\n  time: 0.000; rss: 113MB       recursion limit\r\n  time: 0.000; rss: 113MB       crate injection\r\n  time: 0.000; rss: 113MB       plugin loading\r\n  time: 0.000; rss: 113MB       plugin registration\r\n    time: 2.845; rss: 436MB     expand crate\r\n    time: 0.000; rss: 436MB     check unused macros\r\n  time: 2.846; rss: 436MB       expansion\r\n  time: 0.000; rss: 436MB       maybe building test harness\r\n  time: 0.028; rss: 436MB       maybe creating a macro crate\r\n  time: 0.078; rss: 436MB       creating allocators\r\n  time: 0.088; rss: 436MB       AST validation\r\n  time: 0.369; rss: 474MB       name resolution\r\n  time: 0.111; rss: 474MB       complete gated feature checking\r\n  time: 0.463; rss: 607MB       lowering ast -> hir\r\n  time: 0.135; rss: 607MB       early lint checks\r\n  time: 0.485; rss: 609MB       indexing hir\r\n  time: 0.000; rss: 357MB       load query result cache\r\n  time: 0.000; rss: 357MB       looking for entry point\r\n  time: 0.003; rss: 357MB       looking for plugin registrar\r\n  time: 0.041; rss: 358MB       loop checking\r\n  time: 0.050; rss: 360MB       attribute checking\r\n  time: 0.124; rss: 363MB       stability checking\r\n  time: 0.580; rss: 427MB       type collecting\r\n  time: 0.016; rss: 427MB       outlives testing\r\n  time: 0.026; rss: 429MB       impl wf inference\r\n  time: 0.538; rss: 463MB       coherence checking\r\n  time: 0.015; rss: 463MB       variance testing\r\n  time: 1.321; rss: 603MB       wf checking\r\n  time: 1.459; rss: 668MB       item-types checking\r\n  time: 1.934; rss: 745MB       item-bodies checking\r\n  time: 0.521; rss: 784MB       rvalue promotion\r\n  time: 0.897; rss: 790MB       privacy checking\r\n  time: 0.062; rss: 790MB       intrinsic checking\r\n  time: 0.157; rss: 793MB       match checking\r\n  time: 0.072; rss: 793MB       liveness checking\r\n  time: 3.158; rss: 946MB       borrow checking\r\n  time: 0.058; rss: 961MB       MIR borrow checking\r\n  time: 0.000; rss: 961MB       dumping chalk-like clauses\r\n  time: 0.025; rss: 961MB       MIR effect checking\r\n  time: 0.247; rss: 962MB       death checking\r\n  time: 0.000; rss: 962MB       unused lib feature checking\r\n  time: 2.830; rss: 1011MB      lint checking\r\n  time: 0.000; rss: 1011MB      resolving dependency formats\r\n      time: 0.013; rss: 1024MB  monomorphization collection\r\n      time: 0.000; rss: 1024MB  codegen unit partitioning\r\n    time: 2.493; rss: 1068MB    write metadata\r\n    time: 0.000; rss: 1068MB    codegen to LLVM IR\r\n    time: 0.000; rss: 1069MB    assert dep graph\r\n    time: 0.000; rss: 1069MB    serialize dep graph\r\n    time: 0.000; rss: 1069MB    llvm function passes [winapi0]\r\n  time: 2.499; rss: 1069MB      codegen\r\n    time: 0.000; rss: 1069MB    llvm module passes [winapi0]\r\n    time: 0.002; rss: 1056MB    codegen passes [winapi0]\r\n  time: 0.006; rss: 1052MB      LLVM passes\r\n  time: 0.000; rss: 190MB       serialize work products\r\n  time: 0.066; rss: 190MB       linking\r\n    Finished dev [unoptimized + debuginfo] target(s) in 23.48s\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48247/timeline", "performed_via_github_app": null, "state_reason": null}