{"url": "https://api.github.com/repos/rust-lang/rust/issues/78260", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78260/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78260/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78260/events", "html_url": "https://github.com/rust-lang/rust/issues/78260", "id": 727917026, "node_id": "MDU6SXNzdWU3Mjc5MTcwMjY=", "number": 78260, "title": "AVR: Interrupt code not protecting registers in subroutine call", "user": {"login": "drmorr0", "id": 3268445, "node_id": "MDQ6VXNlcjMyNjg0NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3268445?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drmorr0", "html_url": "https://github.com/drmorr0", "followers_url": "https://api.github.com/users/drmorr0/followers", "following_url": "https://api.github.com/users/drmorr0/following{/other_user}", "gists_url": "https://api.github.com/users/drmorr0/gists{/gist_id}", "starred_url": "https://api.github.com/users/drmorr0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drmorr0/subscriptions", "organizations_url": "https://api.github.com/users/drmorr0/orgs", "repos_url": "https://api.github.com/users/drmorr0/repos", "events_url": "https://api.github.com/users/drmorr0/events{/privacy}", "received_events_url": "https://api.github.com/users/drmorr0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1884641928, "node_id": "MDU6TGFiZWwxODg0NjQxOTI4", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-AVR", "name": "O-AVR", "color": "6e6ec0", "default": false, "description": "Target: AVR processors (ATtiny, ATmega, etc.)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-10-23T05:08:52Z", "updated_at": "2022-05-14T16:23:33Z", "closed_at": "2022-05-14T16:23:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Description\r\n\r\nI have a small AVR library that sets a timer interrupt and then calls a subroutine from the interrupt handler; the subroutine is not inlined.  In the generated assembly code, registers used by the subroutine are not ever PUSHed onto the stack, which leads to data corruption.\r\n\r\nI generated a small example of this behaviour in [this repo](https://github.com/drmorr0/minimal-rustc-bug); the `main` loop just does some setup and then writes some dummy data to registers 26 and 27.  When the interrupt fires, the `Executor::push` function overwrites the values in these registers, leading to data corruption.  This is a toy example of a problem I discovered in [real code](https://github.com/drmorr0/rustybot/tree/async).  I am able to reproduce the behaviour with the 2020-10-23 nightly build.\r\n\r\nThere are a couple related bugs (#77541, #75504) that have been filed about interrupt handling on AVR.  I'm not too sure if this is a duplicate of one of them.  It doesn't _seem_ like it's quite the same thing, though.\r\n\r\nThe full source code and assembler output can be found in the linked repository, but the relevant sections are below.\r\n\r\n## Rust Source Excerpt\r\n\r\n```\r\nstruct Executor {\r\n    data: Vec<u8, U8>,\r\n}\r\n\r\nimpl Executor {\r\n    // If this function gets inlined it seems to work correctly, so force it not to inline\r\n    #[inline(never)]\r\n    fn push(&mut self, value: u8) {\r\n        // The problem happens here!  After this code runs, the data in R26/R27 in the main loop is incorrect.\r\n        self.data.push(value);   \r\n    }\r\n}\r\n\r\nstruct Handler {}\r\n\r\nimpl Handler {\r\n    unsafe fn call(&mut self) {\r\n        if let Some(executor) = EXECUTOR.as_mut() {\r\n            if executor.data.len() == 0 {\r\n                executor.push(123);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<...>\r\n\r\n#[avr_device::interrupt(atmega328p)]\r\nunsafe fn TIMER0_COMPB() {\r\n    TIMER0_CMPB_ITERS += 1;\r\n    if TIMER0_CMPB_ITERS > 10 {\r\n        if let Some(mut handler) = HANDLER.take() {\r\n            handler.call();\r\n        }\r\n    }\r\n}\r\n\r\n#[arduino_uno::entry]\r\nfn main() -> ! {\r\n    let board = arduino_uno::Peripherals::take().unwrap();\r\n    init_timers(&board.TC0);\r\n    unsafe {\r\n        EXECUTOR = Some(Executor { data: Vec::new() });\r\n        HANDLER = Some(Handler {});\r\n        avr_device::interrupt::enable();\r\n    }\r\n    loop {\r\n        unsafe {\r\n            llvm_asm!(\"ldi r26, 0xBE\");  // Just some dummy values to show that these registers get corrupted\r\n            llvm_asm!(\"ldi r27, 0xEF\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Generated Assembly Excerpt\r\n\r\n```\r\n000000a6 <_ZN12minimal_test8Executor4push17h8e34dc0e39a0b388E>:\r\n  a6:\ta0 91 0d 01 \tlds\tr26, 0x010D\t; 0x80010d <_ZN12minimal_test8EXECUTOR17h8c844b993ba4ae4bE+0x9>\r\n  aa:\tb0 91 0e 01 \tlds\tr27, 0x010E\t; 0x80010e <_ZN12minimal_test8EXECUTOR17h8c844b993ba4ae4bE+0xa>\r\n  ae:\t88 e0       \tldi\tr24, 0x08\t; 8\r\n  b0:\t90 e0       \tldi\tr25, 0x00\t; 0\r\n  b2:\ta8 17       \tcp\tr26, r24\r\n  b4:\tb9 07       \tcpc\tr27, r25\r\n  b6:\t68 f4       \tbrcc\t.+26     \t; 0xd2 <_ZN12minimal_test8Executor4push17h8e34dc0e39a0b388E+0x2c>\r\n  b8:\tab 5f       \tsubi\tr26, 0xFB\t; 251\r\n  ba:\tbe 4f       \tsbci\tr27, 0xFE\t; 254\r\n  bc:\t8b e7       \tldi\tr24, 0x7B\t; 123\r\n  be:\t8c 93       \tst\tX, r24\r\n  c0:\t80 91 0d 01 \tlds\tr24, 0x010D\t; 0x80010d <_ZN12minimal_test8EXECUTOR17h8c844b993ba4ae4bE+0x9>\r\n  c4:\t90 91 0e 01 \tlds\tr25, 0x010E\t; 0x80010e <_ZN12minimal_test8EXECUTOR17h8c844b993ba4ae4bE+0xa>\r\n  c8:\t01 96       \tadiw\tr24, 0x01\t; 1\r\n  ca:\t90 93 0e 01 \tsts\t0x010E, r25\t; 0x80010e <_ZN12minimal_test8EXECUTOR17h8c844b993ba4ae4bE+0xa>\r\n  ce:\t80 93 0d 01 \tsts\t0x010D, r24\t; 0x80010d <_ZN12minimal_test8EXECUTOR17h8c844b993ba4ae4bE+0x9>\r\n  d2:\t08 95       \tret\r\n\r\n000000d4 <__vector_15>:\r\n  d4:\t0f 92       \tpush\tr0\r\n  d6:\t1f 92       \tpush\tr1\r\n  d8:\t0f b6       \tin\tr0, 0x3f\t; 63\r\n  da:\t0f 92       \tpush\tr0\r\n  dc:\t00 24       \teor\tr0, r0\r\n  de:\t2f 93       \tpush\tr18\r\n  e0:\t3f 93       \tpush\tr19\r\n  e2:\t4f 93       \tpush\tr20\r\n  e4:\t5f 93       \tpush\tr21\r\n  e6:\t6f 93       \tpush\tr22\r\n  e8:\t7f 93       \tpush\tr23\r\n  ea:\t8f 93       \tpush\tr24\r\n  ec:\t9f 93       \tpush\tr25\r\n  ee:\tef 93       \tpush\tr30\r\n  f0:\tff 93       \tpush\tr31\r\n<...>\r\n 15a:\t0e 94 53 00 \tcall\t0xa6\t; 0xa6 <_ZN12minimal_test8Executor4push17h8e34dc0e39a0b388E>\r\n 15e:\tff 91       \tpop\tr31\r\n 160:\tef 91       \tpop\tr30\r\n 162:\t9f 91       \tpop\tr25\r\n 164:\t8f 91       \tpop\tr24\r\n 166:\t7f 91       \tpop\tr23\r\n 168:\t6f 91       \tpop\tr22\r\n 16a:\t5f 91       \tpop\tr21\r\n 16c:\t4f 91       \tpop\tr20\r\n 16e:\t3f 91       \tpop\tr19\r\n 170:\t2f 91       \tpop\tr18\r\n 172:\t0f 90       \tpop\tr0\r\n 174:\t0f be       \tout\t0x3f, r0\t; 63\r\n 176:\t1f 90       \tpop\tr1\r\n 178:\t0f 90       \tpop\tr0\r\n 17a:\t18 95       \treti\r\n\r\n0000017c <main>:\r\n 17c:\t8f b7       \tin\tr24, 0x3f\t; 63\r\n 17e:\tf8 94       \tcli\r\n 180:\t90 91 10 01 \tlds\tr25, 0x0110\t; 0x800110 <DEVICE_PERIPHERALS>\r\n 184:\t90 30       \tcpi\tr25, 0x00\t; 0\r\n 186:\t11 f0       \tbreq\t.+4      \t; 0x18c <main+0x10>\r\n 188:\t90 e0       \tldi\tr25, 0x00\t; 0\r\n 18a:\t03 c0       \trjmp\t.+6      \t; 0x192 <main+0x16>\r\n 18c:\t91 e0       \tldi\tr25, 0x01\t; 1\r\n 18e:\t90 93 10 01 \tsts\t0x0110, r25\t; 0x800110 <DEVICE_PERIPHERALS>\r\n 192:\t88 23       \tand\tr24, r24\r\n 194:\t0a f4       \tbrpl\t.+2      \t; 0x198 <main+0x1c>\r\n 196:\t78 94       \tsei\r\n 198:\t90 30       \tcpi\tr25, 0x00\t; 0\r\n 19a:\tb9 f0       \tbreq\t.+46     \t; 0x1ca <main+0x4e>\r\n 19c:\t83 e0       \tldi\tr24, 0x03\t; 3\r\n 19e:\t85 bd       \tout\t0x25, r24\t; 37\r\n 1a0:\t80 e0       \tldi\tr24, 0x00\t; 0\r\n 1a2:\t86 bd       \tout\t0x26, r24\t; 38\r\n 1a4:\t94 e0       \tldi\tr25, 0x04\t; 4\r\n 1a6:\t90 93 6e 00 \tsts\t0x006E, r25\t; 0x80006e <__DATA_REGION_ORIGIN__+0xe>\r\n 1aa:\t88 bd       \tout\t0x28, r24\t; 40\r\n 1ac:\t80 e0       \tldi\tr24, 0x00\t; 0\r\n 1ae:\t90 e0       \tldi\tr25, 0x00\t; 0\r\n 1b0:\t90 93 0e 01 \tsts\t0x010E, r25\t; 0x80010e <_ZN12minimal_test8EXECUTOR17h8c844b993ba4ae4bE+0xa>\r\n 1b4:\t80 93 0d 01 \tsts\t0x010D, r24\t; 0x80010d <_ZN12minimal_test8EXECUTOR17h8c844b993ba4ae4bE+0x9>\r\n 1b8:\t81 e0       \tldi\tr24, 0x01\t; 1\r\n 1ba:\t80 93 04 01 \tsts\t0x0104, r24\t; 0x800104 <_ZN12minimal_test8EXECUTOR17h8c844b993ba4ae4bE>\r\n 1be:\t80 93 0f 01 \tsts\t0x010F, r24\t; 0x80010f <_ZN12minimal_test7HANDLER17had98c5749f3a28e5E.0.0>\r\n 1c2:\t78 94       \tsei\r\n 1c4:\tae eb       \tldi\tr26, 0xBE\t; 190\r\n 1c6:\tbf ee       \tldi\tr27, 0xEF\t; 239\r\n 1c8:\tfd cf       \trjmp\t.-6      \t; 0x1c4 <main+0x48>\r\n 1ca:\t0e 94 e9 00 \tcall\t0x1d2\t; 0x1d2 <_ZN4core9panicking5panic17h5960cdf61677fa1bE>\r\n 1ce:\t0e 94 f2 00 \tcall\t0x1e4\t; 0x1e4 <abort>\r\n```", "closed_by": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78260/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78260/timeline", "performed_via_github_app": null, "state_reason": "completed"}