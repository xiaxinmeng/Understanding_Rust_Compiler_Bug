{"url": "https://api.github.com/repos/rust-lang/rust/issues/71462", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71462/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71462/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71462/events", "html_url": "https://github.com/rust-lang/rust/issues/71462", "id": 605466609, "node_id": "MDU6SXNzdWU2MDU0NjY2MDk=", "number": 71462, "title": "`for<'a> Send` is distinct from `Send`?", "user": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-23T11:46:10Z", "updated_at": "2020-10-07T21:11:14Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This code fails to compile with a pretty strange error:\r\n\r\n```rust\r\nuse std::future::Future;\r\nuse std::pin::Pin;\r\nuse std::io::Read;\r\n\r\ntrait Service<R> {\r\n    type Response;\r\n    type Error;\r\n    type Future: Future<Output = Result<Self::Response, Self::Error>>;\r\n    \r\n    fn call(&mut self, req: R) -> Self::Future;\r\n}\r\n\r\nstruct BorrowerService<S> {\r\n    service: Option<S>,\r\n}\r\n\r\nimpl<S> Service<Box<dyn Read + Sync + Send>> for BorrowerService<S>\r\nwhere\r\n    for<'b> S: Service<&'b (dyn Read + 'static + Sync + Send), Response = i32, Error = ()> + 'static + Send,\r\n    for<'b> <S as Service<&'b (dyn Read + 'static + Sync + Send)>>::Future: Send,\r\n{\r\n    type Response = i32;\r\n    type Error = ();\r\n    type Future = Pin<Box<dyn Future<Output = Result<i32, ()>> + Send>>;\r\n    \r\n    fn call(&mut self, req: Box<dyn Read + Sync + Send>) -> Self::Future {\r\n        let mut service = self.service.take().unwrap();\r\n        Box::pin(async move {\r\n            service.call(&req).await\r\n        })\r\n    }\r\n}\r\n```\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:28:9\r\n   |\r\n28 | /         Box::pin(async move {\r\n29 | |             service.call(&req).await\r\n30 | |         })\r\n   | |__________^ one type is more general than the other\r\n   |\r\n   = note: expected type `std::marker::Send`\r\n              found type `for<'b> std::marker::Send`\r\n```\r\n\r\nThe use of the trait object appears to be important - if I replace that with e.g. `String`, it compiles just fine:\r\n\r\n```rust\r\nuse std::future::Future;\r\nuse std::pin::Pin;\r\n\r\ntrait Service<R> {\r\n    type Response;\r\n    type Error;\r\n    type Future: Future<Output = Result<Self::Response, Self::Error>>;\r\n    \r\n    fn call(&mut self, req: R) -> Self::Future;\r\n}\r\n\r\nstruct BorrowerService<S> {\r\n    service: Option<S>,\r\n}\r\n\r\nimpl<S> Service<Box<String>> for BorrowerService<S>\r\nwhere\r\n    for<'b> S: Service<&'b String, Response = i32, Error = ()> + 'static + Send,\r\n    for<'b> <S as Service<&'b String>>::Future: Send,\r\n{\r\n    type Response = i32;\r\n    type Error = ();\r\n    type Future = Pin<Box<dyn Future<Output = Result<i32, ()>> + Send>>;\r\n    \r\n    fn call(&mut self, req: Box<String>) -> Self::Future {\r\n        let mut service = self.service.take().unwrap();\r\n        Box::pin(async move {\r\n            service.call(&req).await\r\n        })\r\n    }\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71462/timeline", "performed_via_github_app": null, "state_reason": null}