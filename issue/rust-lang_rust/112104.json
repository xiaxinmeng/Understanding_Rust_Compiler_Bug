{"url": "https://api.github.com/repos/rust-lang/rust/issues/112104", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112104/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112104/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112104/events", "html_url": "https://github.com/rust-lang/rust/issues/112104", "id": 1732216444, "node_id": "I_kwDOAAsO6M5nP4Z8", "number": 112104, "title": "Bogus suggestion on I::Item vs &I::Item mismatch", "user": {"login": "bugaevc", "id": 10091584, "node_id": "MDQ6VXNlcjEwMDkxNTg0", "avatar_url": "https://avatars.githubusercontent.com/u/10091584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugaevc", "html_url": "https://github.com/bugaevc", "followers_url": "https://api.github.com/users/bugaevc/followers", "following_url": "https://api.github.com/users/bugaevc/following{/other_user}", "gists_url": "https://api.github.com/users/bugaevc/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugaevc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugaevc/subscriptions", "organizations_url": "https://api.github.com/users/bugaevc/orgs", "repos_url": "https://api.github.com/users/bugaevc/repos", "events_url": "https://api.github.com/users/bugaevc/events{/privacy}", "received_events_url": "https://api.github.com/users/bugaevc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2023-05-30T12:58:53Z", "updated_at": "2023-05-30T16:07:28Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Code\n\n```Rust\nfn foo<I: Iterator>(mut iter: I, value: &I::Item) where I::Item: Eq + Debug {\r\n    assert_eq!(iter.next(), Some(value));\r\n}\n```\n\n\n### Current output\n\n```Shell\nerror[E0308]: mismatched types\r\n --> src/lib.rs:4:5\r\n  |\r\n4 |     assert_eq!(iter.next(), Some(value));\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<<I as Iterator>::Item>`, found `Option<&<I as Iterator>::Item>`\r\n  |\r\n  = note: expected enum `Option<<I as Iterator>::Item>`\r\n             found enum `Option<&<I as Iterator>::Item>`\r\n  = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\r\nhelp: consider constraining the associated type `<I as Iterator>::Item` to `&<I as Iterator>::Item`\r\n  |\r\n3 | fn foo<I: Iterator<Item = &<I as Iterator>::Item>>(mut iter: I, value: &I::Item) where I::Item: Eq + Debug {\r\n  |                   +++++++++++++++++++++++++++++++\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\n```\n\n\n### Desired output\n\n```Shell\nerror: cannot compare Option<I::Item> to Option<&I::Item>\r\n --> src/lib.rs:4:5\r\n  |\r\n4 |     assert_eq!(iter.next(), Some(value));\r\n\r\nhelp: consider using `.as_ref()` to convert `Option<I::Item>` to `Option<&I::Item>`:\r\n  |\r\n4 |     assert_eq!(iter.next().as_ref(), Some(value));\r\n  |                           +++++++++\n```\n\n\n### Rationale and extra context\n\n`Item = &Item` obviously wouldn't work, the compiler should not suggest that. The proper fix here is to convert the first `Option<I::Item>` to an `Option<&I::Item>` by calling `.as_ref()` on it.\n\n### Other cases\n\n_No response_\n\n### Anything else?\n\nThis is reduced from a real example where I was trying to check that the iterator emits the expected series of items:\r\n\r\n```rust\r\nfn assert_collect<I: IntoIterator>(iter: I, expected_items: &[I::Item]) where I::Item: Eq + Debug {\r\n    let mut iter = iter.into_iter();\r\n    for item in expected_items {\r\n        assert_eq!(iter.next(), Some(item));\r\n    }\r\n    assert_eq!(iter.next(), None);\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112104/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 2, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112104/timeline", "performed_via_github_app": null, "state_reason": null}