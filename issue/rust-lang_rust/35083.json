{"url": "https://api.github.com/repos/rust-lang/rust/issues/35083", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/35083/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/35083/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/35083/events", "html_url": "https://github.com/rust-lang/rust/issues/35083", "id": 168048028, "node_id": "MDU6SXNzdWUxNjgwNDgwMjg=", "number": 35083, "title": "`{Result,Option}::expect()` hurt the readability of Rust code", "user": {"login": "liigo", "id": 346530, "node_id": "MDQ6VXNlcjM0NjUzMA==", "avatar_url": "https://avatars.githubusercontent.com/u/346530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liigo", "html_url": "https://github.com/liigo", "followers_url": "https://api.github.com/users/liigo/followers", "following_url": "https://api.github.com/users/liigo/following{/other_user}", "gists_url": "https://api.github.com/users/liigo/gists{/gist_id}", "starred_url": "https://api.github.com/users/liigo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liigo/subscriptions", "organizations_url": "https://api.github.com/users/liigo/orgs", "repos_url": "https://api.github.com/users/liigo/repos", "events_url": "https://api.github.com/users/liigo/events{/privacy}", "received_events_url": "https://api.github.com/users/liigo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-07-28T09:10:39Z", "updated_at": "2022-01-04T03:23:50Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Some bad smell code samples in tree:\n\nin RawVec::with_capacity():\n\n``` rust\ncap.checked_mul(elem_size).expect(\"capacity overflow\");\n```\n\nIt maybe read as the author expect that capacity overflows.\n\nin BTreeMap Index impl:\n\n``` rust\nself.get(key).expect(\"no entry found for key\")\n```\n\nIt maybe read as the author expect that no entry found for key.\n\nin Rc tests:\n\n``` rust\nRc::downgrade(&a)::upgrade().expect(\"upgrade of live rc failed\");\n```\n\nIt maybe read as the author expect ...(something)... failed?\n\nin MIR:\n\n``` rust\nself.terminator.as_ref().expect(\"invalid terminator state\")\n```\n\nIt maybe read as the author expect an invalid terminator state?\n\nNow in Rust community, `expect` is widely used. There are too many samples to list all of them here.\n\n---\n\nThese code are quite **counter intuitive**, they **hurt the readability** of Rust code.\n\nThe root source of all confusing come from the meaning of the 'msg' arg of [`expect()`](https://doc.rust-lang.org/nightly/std/result/enum.Result.html#method.expect).\n\nCurrently, it is interpreted as 'the error message on unexpected state'.\n\nIf we could change it to 'the message expounds expected behavior', that would be great.\n\nAnd that will improve the readability significantly:\n\n``` rust\n.expect(\"no capacity overflow\");            // old: expect(\"capacity overflow\")\n.expect(\"at least found an entry for key\"); // old: expect(\"no entry found for key\")\n.expect(\"upgrade of live rc successfully\"); // old: expect(\"upgrade of live rc failed\")\n.expect(\"valid terminator state\");          // old: expect(\"invalid terminator state\")\n```\n\n(The implementation of expect() requires to be changed slightly.)\n\n---\n\nBut, is this a BREAKING-CHANGE?\n\nYes, and No.\n\nThe meaning of an arg of a stable method changed significantly, this IS a breaking-change. But the code logic don't change, program's behavior is not touched. What really changes is just the panic message.\n\nIf we do this change, all `expect()` caller side code should be reviewed carefully, almost all msg arg strings should be edited. Now i must admit honestly, that is a BIG breaking-change!\n\nIf we treat this as a **soundness issue** like [RFC 1214](https://github.com/rust-lang/rfcs/pull/1214), we can and we should fix it, whatever it's breaking-change or not.\n\nMaybe the easiest way is create another `expect2()` (or any creative name), and deprecated the current `expect()`?\n\nWhat do you think about this, Rustaceans?\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/35083/reactions", "total_count": 12, "+1": 10, "-1": 2, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/35083/timeline", "performed_via_github_app": null, "state_reason": null}