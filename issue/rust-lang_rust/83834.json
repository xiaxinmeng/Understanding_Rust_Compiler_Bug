{"url": "https://api.github.com/repos/rust-lang/rust/issues/83834", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83834/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83834/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83834/events", "html_url": "https://github.com/rust-lang/rust/issues/83834", "id": 849782121, "node_id": "MDU6SXNzdWU4NDk3ODIxMjE=", "number": 83834, "title": "False positive for unstable_name_collisions lint", "user": {"login": "coolreader18", "id": 33094578, "node_id": "MDQ6VXNlcjMzMDk0NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/33094578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coolreader18", "html_url": "https://github.com/coolreader18", "followers_url": "https://api.github.com/users/coolreader18/followers", "following_url": "https://api.github.com/users/coolreader18/following{/other_user}", "gists_url": "https://api.github.com/users/coolreader18/gists{/gist_id}", "starred_url": "https://api.github.com/users/coolreader18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coolreader18/subscriptions", "organizations_url": "https://api.github.com/users/coolreader18/orgs", "repos_url": "https://api.github.com/users/coolreader18/repos", "events_url": "https://api.github.com/users/coolreader18/events{/privacy}", "received_events_url": "https://api.github.com/users/coolreader18/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-04-04T02:32:01Z", "updated_at": "2021-04-04T18:29:35Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Cargo.toml:\r\n```toml\r\n[package]\r\nname = \"playground\"\r\nversion = \"0.1.0\"\r\nedition = \"2018\"\r\n\r\n[dependencies]\r\nlexical-core = \"0.7\"\r\n```\r\nlib.rs:\r\n```rust\r\nfn link_lexical_core() {\r\n    let _ = lexical_core::get_inf_string();\r\n}\r\n\r\nfn huh() {\r\n    let _x = 1u32 >> 32.wrapping_sub(1usize) as u32;\r\n}\r\n```\r\non `cargo c`:\r\n```\r\nwarning: a method with this name may be added to the standard library in the future\r\n --> src/lib.rs:6:25\r\n  |\r\n6 |     let _x = 1u32 >> 32.wrapping_sub(1usize) as u32;\r\n  |                         ^^^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(unstable_name_collisions)]` on by default\r\n  = warning: once this method is added to the standard library, the ambiguity may cause an error or change in behavior!\r\n  = note: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\r\n  = help: call with fully qualified syntax `lexical_core::Integer::wrapping_sub(...)` to keep using the current method\r\n\r\nerror[E0689]: can't call method `wrapping_sub` on ambiguous numeric type `{integer}`\r\n --> src/lib.rs:6:25\r\n  |\r\n6 |     let _x = 1u32 >> 32.wrapping_sub(1usize) as u32;\r\n  |                         ^^^^^^^^^^^^\r\n  |\r\nhelp: you must specify a concrete type for this numeric value, like `i32`\r\n  |\r\n6 |     let _x = 1u32 >> 32_i32.wrapping_sub(1usize) as u32;\r\n  |                      ^^^^^^\r\n\r\nerror: aborting due to previous error; 1 warning emitted\r\n```\r\nFixing the original error by adding a suffix to the integer literal gets rid of the unstable_name_collisions warning as well. This doesn't give the unstable_name_collisions warning:\r\n```rust\r\nfn link_lexical_core() {\r\n    let _ = lexical_core::get_inf_string();\r\n}\r\n\r\nfn huh() {\r\n    let _x = 1u32 >> 32usize.wrapping_sub(1usize) as u32;\r\n}\r\n```\r\nMaybe rustc is noticing that `Integer` is implemented for exactly the same set of types that a bare integer literal could be? And it assumes that since that method wasn't fully resolved, that it's an unstable method, and doesn't check that it's already stable? ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83834/timeline", "performed_via_github_app": null, "state_reason": null}