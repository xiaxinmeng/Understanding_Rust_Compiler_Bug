{"url": "https://api.github.com/repos/rust-lang/rust/issues/51179", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51179/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51179/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51179/events", "html_url": "https://github.com/rust-lang/rust/issues/51179", "id": 327396229, "node_id": "MDU6SXNzdWUzMjczOTYyMjk=", "number": 51179, "title": "libcore: add defaults for empty iterators", "user": {"login": "bergus", "id": 1146478, "node_id": "MDQ6VXNlcjExNDY0Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1146478?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bergus", "html_url": "https://github.com/bergus", "followers_url": "https://api.github.com/users/bergus/followers", "following_url": "https://api.github.com/users/bergus/following{/other_user}", "gists_url": "https://api.github.com/users/bergus/gists{/gist_id}", "starred_url": "https://api.github.com/users/bergus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bergus/subscriptions", "organizations_url": "https://api.github.com/users/bergus/orgs", "repos_url": "https://api.github.com/users/bergus/repos", "events_url": "https://api.github.com/users/bergus/events{/privacy}", "received_events_url": "https://api.github.com/users/bergus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-05-29T16:26:04Z", "updated_at": "2019-12-26T16:54:38Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I'm looking for a way to create empty iterators.\r\n\r\nI have a few places in my application where I keep an iterator around as part of a data structure, and will advance that from time to time. After a few rounds, I will reset the iterator to start from the beginning again. (The iterator is supposed to point into the data structure, so [I got some problems](https://users.rust-lang.org/t/struct-containing-reference-to-own-field/1894/2) with implementing that design even though the data is never dropped, but let's ignore that here).\r\nTo initialise my structure, I want to create an empty iterator, i.e. one that has no elements left and will only yield `None`.\r\n```rs\r\npub struct X;\r\npub struct Example {\r\n   iterator: Once<X>\r\n}\r\nimpl Example {\r\n  pub fn reset(&mut self) {\r\n    self.iterator = once(X);\r\n  }\r\n}\r\n\r\nlet mut e = Example {\r\n  iterator: ??? // how to create a consumed Once?\r\n};\r\ne.iterator.next(); // should yield None\r\ne.reset();\r\ne.iterator.next(); // will yield Option(X)\r\ne.iterator.next(); // will yield None\r\n```\r\nIn this particular case, I can use `option::IntoIter` directly instead of `Once` and write\r\n```rs\r\npub struct Example {\r\n   iterator: option::IntoIter<X>\r\n}\r\nimpl Example {\r\n  pub fn reset(&mut self) {\r\n    self.iterator = Some(X).into_iter();\r\n  }\r\n}\r\nlet mut e = Example {\r\n  iterator: None.into_iter()\r\n};\r\n```\r\nbut that doesn't express my intent as well as using `Once`. Also, given that in my actual code the iterator type is generic, I would need an additional method `get_init` next to `get_reset` in my trait. I'd rather have my trait say that the iterator type needs to implement `Default`, and the default value should be an instance of the iterator that doesn't yield anything.\r\n\r\nMy suggestion: **Have all builtin iterators implement `Default`**.\r\n\r\nFor example,\r\n```rs\r\nimpl<A> Default for Item<A> {\r\n  #[inline]\r\n  fn default() -> Item<A> { Item { opt: None } }\r\n}\r\nimpl<A> Default for Iter<A> {\r\n  fn default() -> Iter<A> { Iter { inner: default() } }\r\n}\r\nimpl<A> Default for IterMut<A> {\r\n  fn default() -> IterMut<A> { IterMut { inner: default() } }\r\n}\r\nimpl<A> Default for IntoIter<A> {\r\n  fn default() -> IntoIter<A> { IntoIter { inner: default() } }\r\n}\r\nimpl<T> Default for Once<T> {\r\n  fn default() -> Once<T> { Once { inner: default() } }\r\n}\r\n// (not sure whether all of these could simply be derived)\r\n```\r\nDoes this need to go through the RFC process? Should I simply create a pull request?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51179/timeline", "performed_via_github_app": null, "state_reason": null}