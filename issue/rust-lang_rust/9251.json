{"url": "https://api.github.com/repos/rust-lang/rust/issues/9251", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/9251/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/9251/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/9251/events", "html_url": "https://github.com/rust-lang/rust/issues/9251", "id": 19598170, "node_id": "MDU6SXNzdWUxOTU5ODE3MA==", "number": 9251, "title": "Clarify use of `unsafe` in extra::arc", "user": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2013-09-17T06:58:48Z", "updated_at": "2014-02-18T19:26:45Z", "closed_at": "2014-02-18T19:26:45Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`extra::arc::MutexArc` contains two sets of methods to access the Arc's wrapped object. `unsafe_access` and `unsafe_access_cond` are tagged unsafe as \"it is possible to construct a circular reference among multiple Arcs by mutating the underlying data. This creates potential for deadlock, but worse, this will guarantee a memory leak of all involved Arcs.\" There are also `access` and `access_cond` methods defined when the inner type is freezable as that guarantees the type can't contain a `MutexArc`. However, it's still trivially easy to deadlock using the safe methods:\n\n``` rust\nextern mod extra;\n\nuse extra::arc::MutexArc;\n\nfn main() {\n    let arc1 = MutexArc::new(());\n    let arc2 = arc1.clone();\n\n    do arc1.access |_| {\n        do arc2.access |_| {\n        }\n    }\n}\n```\n\nIt seems that the consensus in #2821 was that possibility of deadlock is inherently unsafe, so should `access` and `access_cond` be removed?\n\ncc @bblum \n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/9251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/9251/timeline", "performed_via_github_app": null, "state_reason": "completed"}