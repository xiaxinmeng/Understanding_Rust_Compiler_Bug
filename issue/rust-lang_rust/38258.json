{"url": "https://api.github.com/repos/rust-lang/rust/issues/38258", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38258/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38258/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38258/events", "html_url": "https://github.com/rust-lang/rust/issues/38258", "id": 194519558, "node_id": "MDU6SXNzdWUxOTQ1MTk1NTg=", "number": 38258, "title": "issues with ABIs and struct return types", "user": {"login": "vvuk", "id": 194965, "node_id": "MDQ6VXNlcjE5NDk2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/194965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvuk", "html_url": "https://github.com/vvuk", "followers_url": "https://api.github.com/users/vvuk/followers", "following_url": "https://api.github.com/users/vvuk/following{/other_user}", "gists_url": "https://api.github.com/users/vvuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvuk/subscriptions", "organizations_url": "https://api.github.com/users/vvuk/orgs", "repos_url": "https://api.github.com/users/vvuk/repos", "events_url": "https://api.github.com/users/vvuk/events{/privacy}", "received_events_url": "https://api.github.com/users/vvuk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-12-09T05:53:09Z", "updated_at": "2019-02-03T14:45:59Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With the MSVC x64 ABI, structs are returned in RAX if and only if they are <= 8 bytes in size, *and are effectively a POD type*.  See https://msdn.microsoft.com/en-us/library/7572ztz4.aspx . Unfortunately, I can't figure out how to tell Rust this.  In C++, `sk_sp<T>` has a user-defined constructor, destructor, etc.  In Rust, I couldn't figure out any way to do this.  It's defined as..\r\n```\r\n    #[repr(C)]\r\n    #[derive(Debug, Copy, Clone)]\r\n    pub struct sk_sp<T> {\r\n        pub ptr: *mut T,\r\n    }\r\n```\r\n\r\nThis causes segfaults because the C++ calling convention isn't upheld.  A temporary workaround is to just add another dummy field, making this type bigger than 8 bytes.  This happens to work in this case since this type is only ever used as a smart pointer return type; params are passed as basic `T*`.\r\n\r\nIs there any way to tell `rustc` to treat this type as non-POD when giving it to LLVM?  If not, can such a mechanism be added?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38258/timeline", "performed_via_github_app": null, "state_reason": null}