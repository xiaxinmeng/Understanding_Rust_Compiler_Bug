{"url": "https://api.github.com/repos/rust-lang/rust/issues/93367", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93367/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93367/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93367/events", "html_url": "https://github.com/rust-lang/rust/issues/93367", "id": 1115984664, "node_id": "I_kwDOAAsO6M5ChJMY", "number": 93367, "title": "Tracking Issue for sound builtin auto trait impls", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 630636017, "node_id": "MDU6TGFiZWw2MzA2MzYwMTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-future-compatibility", "name": "C-future-compatibility", "color": "f5f1fd", "default": false, "description": "Category: future compatibility lints"}, {"id": 3771326768, "node_id": "LA_kwDOAAsO6M7gyeEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-auto-traits", "name": "A-auto-traits", "color": "f7e101", "default": false, "description": "Area: auto traits (`auto trait Send`)"}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2022-01-27T09:38:42Z", "updated_at": "2023-05-08T06:50:45Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is the **summary issue** for the `SUSPICIOUS_AUTO_TRAIT_IMPLS` future-compatibility warning. The goal of this page is to describe why this lint was added and how you can fix code that is affected by it. It also provides a place to ask questions\r\nor register a complaint if you feel the change should not be made. For more information on the policy around future-compatibility warnings, see our [breaking change policy guidelines](https://github.com/rust-lang/rfcs/blob/master/text/1122-language-semver.md).\r\n\r\n### What is the warning for?\r\n\r\nRust has some special traits, called either \"auto traits\" or  \"traits with a default impl\", which are automatically implemented for your types under certain conditions. The most notable examples for this are the traits `Send` and `Sync`. A type implements these trait automatically if all its fields also implement this trait. This means that types like `struct MyData { data: Vec<String> }` automatically implement `Send` without the user having to think about it.\r\n\r\nThere are some cases where the builtin impls are not enough. For traits like `Send`, `Sync` and `Unpin` these builtin impls can [even be unsound](https://github.com/rust-lang/rust/issues/41622) when **implementing** abstractions using unsafe code. Because of this, it is allowed to also manually implement these traits, disabling the builtin impl for your type in the process.\r\n\r\nThe way we currently disable builtin impls has some quite subtle bugs, causing unsoundness: https://github.com/rust-lang/rust/issues/84857. This unsoundness is luckily quite difficult to exploit, but can be triggered under the following conditions:\r\n- There exists an explicit specialized impl of an auto trait which has a stronger `where`-clauses than the type definition. We consider an impl to be \"specialized\" here if the generic arguments of the `Self` type of the impl are not simply unique generic parameters.  `impl Trait for X` is specialized if `X` is `Vec<i32>`, `HashMap<String, V>` or even `HashMap<T, T>` and not specialized for `Vec<T>` or `HashMap<K, V>`. \r\n- The builtin impl for the self type of that explicit impl applies for at least one concrete type rejected by the `where`-clauses of the explicit impl\r\n\r\n[EXAMPLE](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=06a3450783bf408d6639aae27fe4e42f)\r\n\r\nTo fix this unsoundness, we intend to simplify the rules for builtin auto trait implementations. Right now, we only discard the builtin implementation if an explicit impl applies to the given type while ignoring `where`-clauses of that explicit impl. This will be changed to just always discard the builtin impl once at least one explicit impl for that type exists.\r\n\r\nAs this can cause types to stop implementing auto traits if a specialized impl for that type exists, we now warn again specialized impls if builtin impls could apply for your type. If the builtin impl would definitely not apply for your type, this change will not affect you, and we therefore try to not emit a warning in these cases.\r\n\r\n### When will this change take effect?\r\n\r\nAfter a [crater run](https://github.com/rust-lang/crater#crater) detected that our intended change to make builtin auto trait impls sound causes [some breakage](https://github.com/rust-lang/rust/pull/85048#issuecomment-1017877458) in the wider ecosystem.\r\n\r\nWe are currently searching for ways to lessen the impact by modifying the implementation to be more similar to the current situation, while still being sound. If that is not possible, we will introduce this change after the future compatibility lint has been on stable for long enough to reduce the impact of landing this change and if there are existing workarounds for breakage caused by the new rules.\r\n\r\nSome of the cases which broke need either marker traits (#29864) or negative impls (#68318) affecting coherence to get back the old behavior. Both of these are currently not too far away from stabilization, so this will probably remain as a future compatibility warning until one of these ends up getting stabilized.\r\n\r\n### How to fix this?\r\n\r\nThis depends on why the explicit impl has been added in the first place. If you do not want the builtin impl to apply, you may add a field to your type which definitely does not implement the given auto trait. You may also be able to remove the explicit impl entirely, if that case is already currently covered by the builtin impl. For anything else, please report your case here so that we know about the issue and are able to extend this section.\r\n\r\n**If your code triggered this lint, please tell us about it in this issue so we may take it into consideration when deciding on how to proceed.**", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93367/timeline", "performed_via_github_app": null, "state_reason": null}