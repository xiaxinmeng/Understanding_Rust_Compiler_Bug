{"url": "https://api.github.com/repos/rust-lang/rust/issues/20106", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/20106/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/20106/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/20106/events", "html_url": "https://github.com/rust-lang/rust/issues/20106", "id": 52591779, "node_id": "MDU6SXNzdWU1MjU5MTc3OQ==", "number": 20106, "title": "Inline assembly register reuse weirdness", "user": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-12-21T10:25:40Z", "updated_at": "2014-12-21T11:27:46Z", "closed_at": "2014-12-21T11:27:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm not sure whether this is a bug or whether it's just my own ignorance when it comes to writing inline assembly but I'm having issues passing rust values into assembly code. I'm using Linux x86_64 and I've written a simple program that calls the exit syscall with the value 23\n\n```\n#![feature(asm)]\n\nfn main() {\n  unsafe {\n    asm!(\n      \"\n      mov $$60, %rax\n      mov $$23, %rdi\n      syscall\n      \"\n      :\n      :\n      : \"%rax\", \"%rdi\"\n    );\n  }\n}\n```\n\nThis program works fine, I can rustc exit.rs; ./exit; echo $? and get 23. Now I want to make the asm code interface with rust. So I pass the 23 in from rust rather than hardcoding it in the assembly.\n\n```\n#![feature(asm)]\n\nfn main() {\n  unsafe {\n    asm!(\n      \"\n      mov $$60, %rax\n      mov $0, %rdi\n      syscall\n      \"\n      :\n      : \"r\"(23)\n      : \"%rax\", \"%rdi\"\n    );\n  }\n}\n```\n\nOnce again, this works. Now I try to pass 23 in using a variable.\n\n```\n#![feature(asm)]\n\nfn main() {\n  let x = 23i;\n  unsafe {\n    asm!(\n      \"\n      mov $$60, %rax\n      mov $0, %rdi\n      syscall\n      \"\n      :\n      : \"r\"(x)\n      : \"%rax\", \"%rdi\"\n    );\n  }\n}\n```\n\nAnd this breaks. It exits with 60 rather than 23. Looking at the generated assembly shows why:\n\n```\nmovq    $23, (%rsp)\nmovq    (%rsp), %rax\n#APP\n\nmovq    $60, %rax\nmovq    %rax, %rdi\nsyscall\n```\n\nThe compiler tries to save 23 into `%rax` but then `%rax` gets overwritten by 60 in the inline assembly. So is this a compiler bug? Or I am supposed to specifically tell rustc not to use `%rax` for for `x`? If it's useful, the LLVM IR for the failing code is:\n\n```\n; ModuleID = 'exit.0.rs'\ntarget datalayout = \"e-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: uwtable\ndefine internal void @_ZN4main20h2dd3717eeddb6da6eaaE() unnamed_addr #0 {\nentry-block:\n  %x = alloca i64\n  store i64 23, i64* %x\n  %0 = load i64* %x\n  call void asm \"\\0A      mov $$60, %rax\\0A      mov $0, %rdi\\0A      syscall\\0A      \", \"r,~{%rax},~{%rdi},~{dirflag},~{fpsr},~{flags}\"(i64 %0), !srcloc !0\n  ret void\n}\n\ndefine i64 @main(i64, i8**) unnamed_addr #1 {\ntop:\n  %2 = call i64 @_ZN2rt10lang_start20h6ebacfb5a732c9b9PfyE(i8* bitcast (void ()* @_ZN4main20h2dd3717eeddb6da6eaaE to i8*), i64 %0, i8** %1)\n  ret i64 %2\n}\n\ndeclare i64 @_ZN2rt10lang_start20h6ebacfb5a732c9b9PfyE(i8*, i64, i8**) unnamed_addr #1\n\nattributes #0 = { uwtable \"split-stack\" }\nattributes #1 = { \"split-stack\" }\n\n!0 = metadata !{i32 21}\n```\n", "closed_by": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/20106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/20106/timeline", "performed_via_github_app": null, "state_reason": "completed"}