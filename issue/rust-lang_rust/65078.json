{"url": "https://api.github.com/repos/rust-lang/rust/issues/65078", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65078/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65078/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65078/events", "html_url": "https://github.com/rust-lang/rust/issues/65078", "id": 502359725, "node_id": "MDU6SXNzdWU1MDIzNTk3MjU=", "number": 65078, "title": "Bounds on associated types prevent a trait from being object-safe", "user": {"login": "RustyYato", "id": 16103364, "node_id": "MDQ6VXNlcjE2MTAzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/16103364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RustyYato", "html_url": "https://github.com/RustyYato", "followers_url": "https://api.github.com/users/RustyYato/followers", "following_url": "https://api.github.com/users/RustyYato/following{/other_user}", "gists_url": "https://api.github.com/users/RustyYato/gists{/gist_id}", "starred_url": "https://api.github.com/users/RustyYato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RustyYato/subscriptions", "organizations_url": "https://api.github.com/users/RustyYato/orgs", "repos_url": "https://api.github.com/users/RustyYato/repos", "events_url": "https://api.github.com/users/RustyYato/events{/privacy}", "received_events_url": "https://api.github.com/users/RustyYato/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-04T00:13:57Z", "updated_at": "2020-09-19T17:11:25Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=b33e91b1b5bbcc0de0a646cf9622f74c)\r\n\r\n```rust\r\ntrait Foo {\r\n    type Bar: Other<Self::Bar>;\r\n}\r\n\r\nimpl dyn Foo<Bar = ()> {}\r\n\r\ntrait Other<T> {}\r\n\r\nimpl<T> Other<T> for T {}\r\n```\r\n\r\nDoesn't compile with the error,\r\n\r\n```\r\nerror[E0038]: the trait `Foo` cannot be made into an object\r\n --> src/lib.rs:5:6\r\n  |\r\n5 | impl dyn Foo<Bar = ()> {}\r\n  |      ^^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\r\n  |\r\n  = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\r\n```\r\n\r\nBut this doesn't make sense, because `Self` (being the type erased thing in `dyn Foo`) is never referenced in *any* bound. `Self::Bar` is referenced, but this should be fine in a object-safe trait because all associated types have to be specified to use the object safe trait (i.e. I can't do `dyn Foo` in this case). This can be seen in `Iterator` which is object safe, a\r\n\r\nI think this should work and allow these sorts of bounds.\r\n\r\nNote that moving the bound to a function is perfectly fine as [seen here](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=b58a544d26d330a36ec1f6d101c64a31), but not on associated types or the trait itself.\r\n\r\nI think this may be related to #27675", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65078/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65078/timeline", "performed_via_github_app": null, "state_reason": null}