{"url": "https://api.github.com/repos/rust-lang/rust/issues/92813", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92813/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92813/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92813/events", "html_url": "https://github.com/rust-lang/rust/issues/92813", "id": 1100402842, "node_id": "I_kwDOAAsO6M5BltCa", "number": 92813, "title": "rustc paniced: DefId::expect_local ", "user": {"login": "dvdsk", "id": 11743287, "node_id": "MDQ6VXNlcjExNzQzMjg3", "avatar_url": "https://avatars.githubusercontent.com/u/11743287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvdsk", "html_url": "https://github.com/dvdsk", "followers_url": "https://api.github.com/users/dvdsk/followers", "following_url": "https://api.github.com/users/dvdsk/following{/other_user}", "gists_url": "https://api.github.com/users/dvdsk/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvdsk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvdsk/subscriptions", "organizations_url": "https://api.github.com/users/dvdsk/orgs", "repos_url": "https://api.github.com/users/dvdsk/repos", "events_url": "https://api.github.com/users/dvdsk/events{/privacy}", "received_events_url": "https://api.github.com/users/dvdsk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-01-12T14:24:00Z", "updated_at": "2022-01-13T10:24:07Z", "closed_at": "2022-01-13T10:24:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\nI ran into a compiler panic while playing around with [try streams](https://docs.rs/futures/latest/futures/stream/trait.TryStream.html) and `dyn`.\r\n\r\nI can only reproduce the example by keeping some code in a seperate libary. I have not removed a dependency on the `futures` (0.3.19) as that would mean moving alot of traits into the example. I set up a repo to easily replicate this example [here](https://github.com/dvdsk/rust-issue-92813). \r\n\r\n### Code\r\n\r\n```Rust\r\n// client/src/main.rs\r\nuse futures::{Stream, stream};\r\n\r\npub fn main() {}\r\n\r\nstruct State (Option<Box<dyn Stream<Item = Result<lib::P, lib::E>>>>);\r\n\r\nfn stream() {\r\n    Box::pin(stream::unfold(State(None), move |state| async move {\r\n        let stream = lib::unpack_stream().await.unwrap();\r\n        let stream = Box::new(stream);\r\n        state.0 = Some(stream);\r\n        Some(((), state))\r\n    }))\r\n}\r\n```\r\nwith as separate lib\r\n```rust\r\n// lib/src/lib.rs\r\nuse futures::{stream, StreamExt, TryStream, TryStreamExt};\r\n\r\n#[derive(Debug)]\r\npub enum E {\r\n    Empty,\r\n}\r\npub struct P;\r\n\r\npub async fn unpack_stream() -> Result<impl TryStream<Ok = P, Error = E>, E> {\r\n    let state = ();\r\n\r\n    let stream = stream::try_unfold(state, state_machine);\r\n    // this is needed as try_next needs Pin<TryStream> an TryStream is\r\n    // not implemented for Pin<TryStream>\r\n    Ok(stream.into_stream().boxed())\r\n}\r\n\r\nasync fn state_machine(_: ()) -> Result<Option<(P, ())>, E> {\r\n    Ok(None)\r\n}\r\n\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.57.0 (f1edd0429 2021-11-29)\r\nbinary: rustc\r\ncommit-hash: f1edd0429582dd29cccacaf50fd134b05593bd9c\r\ncommit-date: 2021-11-29\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.57.0\r\nLLVM version: 13.0.0\r\n\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'DefId::expect_local: `DefId(33:20 ~ lib[5f99]::unpack_stream::{opaque#0}::{opaque#0})`\r\n isn't local', /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/compiler/rustc_span/src/def_id.rs:234:43\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/std/src/panicking.rs:517:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/panicking.rs:100:14\r\n   2: rustc_middle::ty::error::<impl rustc_middle::ty::context::TyCtxt>::suggest_constraining_opaque_associated_ty\r\npe\r\n   3: rustc_middle::ty::error::<impl rustc_middle::ty::context::TyCtxt>::note_and_explain_type_err\r\n   4: rustc_infer::infer::error_reporting::<impl rustc_infer::infer::InferCtxt>::note_type_err\r\n   5: <rustc_infer::infer::InferCtxt as rustc_trait_selection::traits::error_reporting::InferCtxtPrivExt>::report_\r\nprojection_error\r\n   6: <rustc_infer::infer::InferCtxt as rustc_trait_selection::traits::error_reporting::InferCtxtExt>::report_fulf\r\nillment_errors\r\n   7: rustc_typeck::check::fn_ctxt::checks::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_argument_types\r\n   8: rustc_typeck::check::callee::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::confirm_builtin_call\r\n   9: rustc_typeck::check::callee::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_call\r\n  10: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_kind\r\n  11: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  12: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_kind\r\n  13: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  14: rustc_typeck::check::fn_ctxt::checks::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_stmt\r\n  15: rustc_typeck::check::fn_ctxt::checks::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_block_with_expected\r\n  16: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  17: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_return_expr\r\n  18: rustc_typeck::check::check::check_fn\r\n  19: rustc_typeck::check::closure::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_closure\r\n  20: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_kind\r\n  21: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  22: rustc_typeck::check::fn_ctxt::checks::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_argument_types\r\n  23: rustc_typeck::check::callee::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::confirm_builtin_call\r\n  24: rustc_typeck::check::callee::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_call\r\n  25: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_kind\r\n  26: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  27: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_return_expr\r\n  28: rustc_typeck::check::check::check_fn\r\n  29: rustc_typeck::check::closure::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_closure\r\n  30: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_kind\r\n  31: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  32: rustc_typeck::check::fn_ctxt::checks::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_argument_types\r\n  33: rustc_typeck::check::callee::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::confirm_builtin_call\r\n  34: rustc_typeck::check::callee::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_call\r\n  35: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_kind\r\n  36: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  37: rustc_typeck::check::fn_ctxt::checks::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_argument_types\r\n  38: rustc_typeck::check::callee::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::confirm_builtin_call\r\n  39: rustc_typeck::check::callee::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_call\r\n  40: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_kind\r\n  41: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  42: rustc_typeck::check::fn_ctxt::checks::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_block_with_expected\r\n  43: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  44: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_return_expr\r\n  45: rustc_typeck::check::check::check_fn\r\n  46: rustc_infer::infer::InferCtxtBuilder::enter\r\n  47: rustc_typeck::check::typeck\r\n  48: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  49: rustc_data_structures::stack::ensure_sufficient_stack\r\n  50: rustc_query_system::query::plumbing::try_execute_query\r\n  51: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::typeck\r\n  52: rustc_typeck::check::typeck\r\n  53: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  54: rustc_data_structures::stack::ensure_sufficient_stack\r\n  55: rustc_query_system::query::plumbing::try_execute_query\r\n  56: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::typeck\r\n  57: <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  58: rustc_data_structures::sync::par_for_each_in\r\n  59: rustc_typeck::check::typeck_item_bodies\r\n  60: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  61: rustc_data_structures::stack::ensure_sufficient_stack\r\n  62: rustc_query_system::query::plumbing::try_execute_query\r\n  63: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::typeck_item_bodies\r\n  64: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  65: rustc_typeck::check_crate\r\n  66: rustc_interface::passes::analysis\r\n  67: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  68: rustc_data_structures::stack::ensure_sufficient_stack\r\n  69: rustc_query_system::query::plumbing::try_execute_query\r\n  70: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\r\n  71: rustc_interface::passes::QueryContext::enter\r\n  72: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  73: rustc_span::with_source_map\r\n  74: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "dvdsk", "id": 11743287, "node_id": "MDQ6VXNlcjExNzQzMjg3", "avatar_url": "https://avatars.githubusercontent.com/u/11743287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvdsk", "html_url": "https://github.com/dvdsk", "followers_url": "https://api.github.com/users/dvdsk/followers", "following_url": "https://api.github.com/users/dvdsk/following{/other_user}", "gists_url": "https://api.github.com/users/dvdsk/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvdsk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvdsk/subscriptions", "organizations_url": "https://api.github.com/users/dvdsk/orgs", "repos_url": "https://api.github.com/users/dvdsk/repos", "events_url": "https://api.github.com/users/dvdsk/events{/privacy}", "received_events_url": "https://api.github.com/users/dvdsk/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92813/timeline", "performed_via_github_app": null, "state_reason": "completed"}