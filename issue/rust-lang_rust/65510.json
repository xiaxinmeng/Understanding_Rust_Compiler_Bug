{"url": "https://api.github.com/repos/rust-lang/rust/issues/65510", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65510/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65510/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65510/events", "html_url": "https://github.com/rust-lang/rust/issues/65510", "id": 508659578, "node_id": "MDU6SXNzdWU1MDg2NTk1Nzg=", "number": 65510, "title": "Quadratic slowdown for lookup of bounds on associated types.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-10-17T18:54:23Z", "updated_at": "2020-09-24T23:40:34Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "There are two factors here, which we've spotted combined in the wild:\r\n1. we hoist all `type X: ...;` bounds to the trait-level, i.e.:\r\n    ```rust\r\n    trait Trait {\r\n        type X: A + B;\r\n        type Y: C + D;\r\n    }\r\n    ```\r\n    is sugar for:\r\n    ```rust\r\n    trait Trait\r\n    where\r\n        Self::X: A,\r\n        Self::X: B,\r\n        Self::Y: C,\r\n        Self::Y: D,\r\n    {\r\n        type X;\r\n        type Y;\r\n    }\r\n    ```\r\n    * I doubt we can do much about this, perhaps group/index the bounds?\r\n2. lookup of `<_ as Foo>::X: Bar` in `Foo`'s `where` clauses appears to be quadratic\r\n    * this wouldn't have a noticeable impact without 1.\r\n    * probably easier to fix, I would've assumed it was already linear\r\n\r\n<hr/>\r\n\r\nAnd here's our stress test - apologies for the macro, but it takes *a lot* to push it into multiple seconds (the version in the wild had more sophisticated, and actually useful, macros):\r\n```rust\r\nmacro_rules! stress {\r\n    (type $name:ident: $($i:expr,)*) => {\r\n        type $name: $(From<[(); $i]> + Into<[(); $i]> +)*;\r\n    };\r\n    (fn $($underscore:tt)*) => {\r\n        const _: () = {\r\n            $({fn _f<T: Trait>() {\r\n                #[derive(Copy, Clone)]\r\n                struct Foo<X>(X);\r\n                let $underscore = Foo(T::X::default()).clone();\r\n            }})*\r\n        };\r\n    };\r\n}\r\n\r\ntrait Trait {\r\n    type X: Copy + Default;\r\n\r\n    // The bounds would normally be on many separate\r\n    // associated types, but that makes no difference.\r\n    stress!(type _Unused:\r\n        00, 01, 02, 03, 04, 05, 06, 07, 08, 09,\r\n        10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\r\n\r\n        // Uncomment to (almost) quadruple compile time:\r\n        //20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\r\n        //30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\r\n\r\n        // Add more to raise the total time to minutes.\r\n    );\r\n}\r\n\r\nstress!(fn\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n);\r\n```\r\n\r\nUsing `-Zself-profile` and `summarize`, we get this (times are total \"self\" times):\r\n\r\n| Query | 20 (`00`-`19`) | 40 (`00`-`39`) | Slowdown |\r\n|---|---|---|---|\r\n| `type_op_prove_predicate` | 2.52s | 9.17s | 3.64x |\r\n| `typeck_tables_of` | 1.78s | 5.83s | 3.28x |\r\n| `check_item_well_formed` | 1.43s | 4.47s | 3.13x |\r\n\r\ncc @rust-lang/wg-traits", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65510/reactions", "total_count": 4, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 2}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65510/timeline", "performed_via_github_app": null, "state_reason": null}