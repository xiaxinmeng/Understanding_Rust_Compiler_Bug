{"url": "https://api.github.com/repos/rust-lang/rust/issues/65256", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65256/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65256/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65256/events", "html_url": "https://github.com/rust-lang/rust/issues/65256", "id": 504973823, "node_id": "MDU6SXNzdWU1MDQ5NzM4MjM=", "number": 65256, "title": "Verify trait impls\u2019 signatures before checking object safety", "user": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-10T01:09:45Z", "updated_at": "2020-06-11T17:35:09Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Given a code like this:\r\n\r\n```rust\r\nmod obj_unsafe {\r\n    pub trait Serialize {\r\n        fn serialize<T>(&self, t: T);\r\n    }\r\n}\r\n\r\nmod obj_safe {\r\n    pub trait Serialize {\r\n        fn serialize(&self);\r\n    }\r\n}\r\n\r\ntrait DoSomething {\r\n    fn foo(&self) -> Box<dyn obj_safe::Serialize>;\r\n}\r\n\r\nimpl DoSomething for () {\r\n    fn foo(&self) -> Box<dyn obj_unsafe::Serialize> {\r\n        unimplemented!()\r\n    }\r\n}\r\n```\r\n\r\nWe emit an error like this:\r\n\r\n```\r\nerror[E0038]: the trait `obj_unsafe::Serialize` cannot be made into an object\r\n  --> src/lib.rs:18:5\r\n   |\r\n18 |     fn foo(&self) -> Box<dyn obj_unsafe::Serialize> {\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `obj_unsafe::Serialize` cannot be made into an object\r\n   |\r\n   = note: method `serialize` has generic type parameters\r\n```\r\n\r\n---\r\n\r\nThis error is something that was encountered by someone who read documentation and saw they needed to implement a method returning `Box<dyn Serialize>`, An obvious assumption is that this refers to `serde::Serialize`, so that\u2019s what they specified in their return type when implementing `DoSomething`.\r\n\r\nThe error they got does not point them at the problem at all. Sure, `Serialize` from serde is not object safe, but that is irrelevant, because they are trying to make an object of an entirely wrong trait in the first place.\r\n\r\nInstead we should be emitting `error[E0053]: method `foo` has an incompatible type for trait` first.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65256/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65256/timeline", "performed_via_github_app": null, "state_reason": null}