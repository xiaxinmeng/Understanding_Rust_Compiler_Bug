{"url": "https://api.github.com/repos/rust-lang/rust/issues/99402", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99402/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99402/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99402/events", "html_url": "https://github.com/rust-lang/rust/issues/99402", "id": 1307485530, "node_id": "I_kwDOAAsO6M5N7qVa", "number": 99402, "title": "ICE with doc comment on for loop", "user": {"login": "kayabaNerve", "id": 25259837, "node_id": "MDQ6VXNlcjI1MjU5ODM3", "avatar_url": "https://avatars.githubusercontent.com/u/25259837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kayabaNerve", "html_url": "https://github.com/kayabaNerve", "followers_url": "https://api.github.com/users/kayabaNerve/followers", "following_url": "https://api.github.com/users/kayabaNerve/following{/other_user}", "gists_url": "https://api.github.com/users/kayabaNerve/gists{/gist_id}", "starred_url": "https://api.github.com/users/kayabaNerve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kayabaNerve/subscriptions", "organizations_url": "https://api.github.com/users/kayabaNerve/orgs", "repos_url": "https://api.github.com/users/kayabaNerve/repos", "events_url": "https://api.github.com/users/kayabaNerve/events{/privacy}", "received_events_url": "https://api.github.com/users/kayabaNerve/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-07-18T06:52:27Z", "updated_at": "2023-03-03T13:32:03Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\n#![cfg_attr(not(feature = \"std\"), no_std)]\r\n\r\nuse ink_lang as ink;\r\n\r\n#[ink::contract(env = serai_extension::SeraiEnvironment)]\r\nmod multisig {\r\n  use scale::Encode;\r\n\r\n  use ink_storage::{traits::SpreadAllocate, Mapping};\r\n  use ink_env::{hash::Blake2x256, hash_encoded};\r\n\r\n  /// A contract which tracks the current multisig keys.\r\n  #[ink(storage)]\r\n  #[derive(SpreadAllocate)]\r\n  pub struct Multisig {\r\n    /// Validator set currently holding the multisig.\r\n    validator_set: [u8; 32],\r\n    /// Mapping from a curve's index to the multisig's current public key for it.\r\n    // This is a mapping due to ink's eager loading. Considering we're right now only considering\r\n    // secp256k1 and Ed25519, it may be notably more efficient to use a Vec here.\r\n    keys: Mapping<u8, Vec<u8>>,\r\n    /// Voter + Keys -> Voted already or not\r\n    voted: Mapping<(AccountId, [u8; 32]), ()>,\r\n    /// Validator Set + Keys -> Vote Count\r\n    votes: Mapping<([u8; 32], [u8; 32]), u16>,\r\n  }\r\n\r\n  /// Event emitted when a new set of multisig keys is voted on. Only for the first vote on a set\r\n  // of keys will they be present in this event.\r\n  #[ink(event)]\r\n  pub struct Vote {\r\n    /// Validator who issued the vote.\r\n    #[ink(topic)]\r\n    validator: AccountId,\r\n    /// Validator set for which keys are being generated.\r\n    #[ink(topic)]\r\n    validator_set: [u8; 32],\r\n    /// Hash of the keys voted on.\r\n    #[ink(topic)]\r\n    hash: [u8; 32],\r\n    /// Keys voted on.\r\n    keys: Option<Vec<Vec<u8>>>,\r\n  }\r\n\r\n  /// Event emitted when the new keys are fully generated for all curves, having been fully voted\r\n  /// on.\r\n  #[ink(event)]\r\n  pub struct KeyGen {\r\n    #[ink(topic)]\r\n    hash: [u8; 32],\r\n  }\r\n\r\n  /// The Multisig error types.\r\n  #[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\r\n  #[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\r\n  pub enum Error {\r\n    /// Returned if a curve index doesn't have a key registered for it.\r\n    NonExistentCurve,\r\n    /// Returned if a non-validator is voting.\r\n    NotValidator,\r\n    /// Returned if this validator set already generated keys.\r\n    AlreadyGeneratedKeys,\r\n    /// Returned if this validator has already voted for these keys.\r\n    AlreadyVoted,\r\n  }\r\n\r\n  /// The Multisig result type.\r\n  pub type Result<T> = core::result::Result<T, Error>;\r\n\r\n  impl Multisig {\r\n    /// Deploys the Multisig contract.\r\n    #[ink(constructor)]\r\n    pub fn new() -> Self {\r\n      ink_lang::utils::initialize_contract(|_| {})\r\n    }\r\n\r\n    /// Validator set currently holding the multisig.\r\n    #[ink(message)]\r\n    pub fn validator_set(&self) -> [u8; 32] {\r\n      self.validator_set\r\n    }\r\n\r\n    /// Returns the key currently in-use for a given curve ID. This is then bound to a given chain\r\n    /// by applying a personalized additive offset, as done by the processor. Each chain then has\r\n    /// its own way of receiving funds to these keys, leaving this not for usage by wallets, nor\r\n    /// the processor which is expected to track events for this information. This is really solely\r\n    /// for debugging purposes.\r\n    #[ink(message)]\r\n    pub fn key(&self, curve: u8) -> Result<Vec<u8>> {\r\n      self.keys.get(curve).ok_or(Error::NonExistentCurve)\r\n    }\r\n\r\n    // TODO: voted\r\n    // TODO: votes\r\n\r\n    fn hash<T: Encode>(value: &T) -> [u8; 32] {\r\n      let mut output = [0; 32];\r\n      hash_encoded::<Blake2x256, _>(value, &mut output);\r\n      output\r\n    }\r\n\r\n    /// Vote for a given set of keys.\r\n    #[ink(message)]\r\n    pub fn vote(&mut self, keys: Vec<Vec<u8>>) -> Result<()> {\r\n      if keys.len() > 256 {\r\n        Err(Error::NonExistentCurve)?;\r\n      }\r\n\r\n      let validator = self.env().caller();\r\n      if !self.env().extension().is_active_validator(&validator) {\r\n        Err(Error::NotValidator)?;\r\n      }\r\n\r\n      let validator_set = self.env().extension().validator_set_id();\r\n      if self.validator_set == validator_set {\r\n        Err(Error::AlreadyGeneratedKeys)?;\r\n      }\r\n\r\n      let keys_hash = Self::hash(&keys);\r\n      if self.voted.get((validator, keys_hash)).is_some() {\r\n        Err(Error::AlreadyVoted)?;\r\n      }\r\n      self.voted.insert((validator, keys_hash), &());\r\n\r\n      let votes = if let Some(votes) = self.votes.get((validator_set, keys_hash)) {\r\n        self.env().emit_event(Vote { validator, validator_set, hash: keys_hash, keys: None });\r\n        votes + 1\r\n      } else {\r\n        self.env().emit_event(Vote {\r\n          validator,\r\n          validator_set,\r\n          hash: keys_hash,\r\n          keys: Some(keys.clone()),\r\n        });\r\n        1\r\n      };\r\n      // We could skip writing this if we've reached consensus, yet best to keep our ducks in a row\r\n      self.votes.insert((validator_set, keys_hash), &votes);\r\n\r\n      // If we've reached consensus, action this.\r\n      if votes == self.env().extension().active_validators_len() {\r\n        self.validator_set = validator_set;\r\n        for (k, key) in keys.iter().enumerate() {\r\n          self.keys.insert(u8::try_from(k).unwrap(), key);\r\n        }\r\n        self.env().emit_event(KeyGen { hash: keys_hash });\r\n      }\r\n\r\n      Ok(())\r\n    }\r\n  }\r\n\r\n  #[cfg(test)]\r\n  mod tests {\r\n    use std::sync::Mutex;\r\n\r\n    use lazy_static::lazy_static;\r\n\r\n    use ink_env::{\r\n      hash::{CryptoHash, Blake2x256},\r\n      AccountId,\r\n      topics::PrefixedValue,\r\n    };\r\n    use ink_lang as ink;\r\n\r\n    use serai_extension::{test_validators, test_register};\r\n\r\n    use super::*;\r\n\r\n    type Event = <Multisig as ::ink_lang::reflect::ContractEventBase>::Type;\r\n\r\n    lazy_static! {\r\n      static ref keys: Vec<Vec<u8>> = vec![vec![0, 1], vec![2, 3]];\r\n    }\r\n\r\n    fn hash_prefixed<T: scale::Encode>(prefixed: PrefixedValue<T>) -> [u8; 32] {\r\n      let encoded = prefixed.encode();\r\n      let mut hash = [0; 32];\r\n      if encoded.len() < 32 {\r\n        hash[.. encoded.len()].copy_from_slice(&encoded);\r\n      } else {\r\n        Blake2x256::hash(&encoded, &mut hash);\r\n      }\r\n      hash\r\n    }\r\n\r\n    fn assert_vote(\r\n      event: &ink_env::test::EmittedEvent,\r\n      expected_validator: AccountId,\r\n      expected_validator_set: [u8; 32],\r\n      expected_keys: Option<()>,\r\n    ) {\r\n      let mut expected_hash = [0; 32];\r\n      ink_env::hash_encoded::<Blake2x256, _>(&*keys, &mut expected_hash);\r\n\r\n      let decoded_event = <Event as scale::Decode>::decode(&mut &event.data[..])\r\n        .expect(\"encountered invalid contract event data buffer\");\r\n\r\n      if let Event::Vote(Vote { validator, validator_set, hash, keys: actual_keys }) = decoded_event\r\n      {\r\n        assert_eq!(validator, expected_validator);\r\n        assert_eq!(validator_set, expected_validator_set);\r\n        assert_eq!(hash, expected_hash);\r\n        assert_eq!(actual_keys.as_ref(), expected_keys.map(|_| &*keys));\r\n      } else {\r\n        panic!(\"invalid Vote event\")\r\n      }\r\n\r\n      let expected_topics = vec![\r\n        hash_prefixed(PrefixedValue { prefix: b\"\", value: b\"Multisig::Vote\" }),\r\n        hash_prefixed(PrefixedValue {\r\n          prefix: b\"Multisig::Vote::validator\",\r\n          value: &expected_validator,\r\n        }),\r\n        hash_prefixed(PrefixedValue {\r\n          prefix: b\"Multisig::Vote::validator_set\",\r\n          value: &expected_validator_set,\r\n        }),\r\n        hash_prefixed(PrefixedValue { prefix: b\"Multisig::Vote::hash\", value: &expected_hash }),\r\n      ];\r\n\r\n      for (n, (actual_topic, expected_topic)) in\r\n        event.topics.iter().zip(expected_topics).enumerate()\r\n      {\r\n        assert_eq!(actual_topic, &expected_topic, \"encountered invalid topic at {}\", n);\r\n      }\r\n    }\r\n\r\n    /// The default constructor does its job.\r\n    #[ink::test]\r\n    fn new() {\r\n      let multisig = Multisig::new();\r\n      assert_eq!(multisig.validator_set(), [0; 32]);\r\n    }\r\n\r\n    /// Non-existent curves error accordingly.\r\n    #[ink::test]\r\n    fn non_existent_curve() {\r\n      assert_eq!(Multisig::new().key(0), Err(Error::NonExistentCurve));\r\n    }\r\n\r\n    #[ink::test]\r\n    fn success() {\r\n      test_register();\r\n      let mut multisig = Multisig::new().try_lock().unwrap();\r\n\r\n      /// Test voting on keys works without issue, emitting the keys for the first vote\r\n      for (i, validator) in test_validators().iter().enumerate() {\r\n        ink_env::test::set_caller::<ink_env::DefaultEnvironment>(test_validators()[i]);\r\n        multisig.vote(keys.clone()).unwrap();\r\n\r\n        let emitted_events = ink_env::test::recorded_events().collect::<Vec<_>>();\r\n        assert_eq!(emitted_events.len(), i + 1);\r\n        assert_vote(\r\n          &emitted_events[i],\r\n          AccountId::from([2; 32]),\r\n          [0xff; 32],\r\n          // Only the first event for this hash should have the keys\r\n          Some(()).filter(|_| i == 0),\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAbsolutely not minimal, sorry, yet the relevant section is the doc comment on the for loop. This is not an ICE when I remove one of the slashes.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.64.0-nightly (c2f428d2f 2022-07-14)\r\nbinary: rustc\r\ncommit-hash: c2f428d2f3340a0e7d995f4726223db91b93704c\r\ncommit-date: 2022-07-14\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.64.0-nightly\r\nLLVM version: 14.0.6\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nwarning: unused doc comment\r\n   --> contracts/multisig/lib.rs:247:7\r\n    |\r\n247 |         /// Test voting on keys works without issue, emitting the keys for the first vote\r\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n248 | /       for (i, validator) in test_validators().iter().enumerate() {\r\n249 | |         ink_env::test::set_caller::<ink_env::DefaultEnvironment>(test_validators()[i]);\r\n250 | |         multisig.vote(keys.clone()).unwrap();\r\n251 | |\r\n...   |\r\n260 | |         );\r\n261 | |       }\r\n    | |_______- rustdoc does not generate documentation for expressions\r\n    |\r\n    = note: `#[warn(unused_doc_comments)]` on by default\r\n    = help: use `//` for a plain comment\r\n\r\nthread 'rustc' panicked at 'internal error: entered unreachable code: in literal form when lowering mac args eq: Lit { token: Lit { kind: Str, symbol: \" Test voting on keys works without issue, emitting the keys for the first vote\", suffix: None }, kind: Str(\" Test voting on keys works without issue, emitting the keys for the first vote\", Cooked), span: contracts/multisig/lib.rs:247:7: 247:88 (#0) }', compiler/rustc_ast_lowering/src/lib.rs:914:17\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.64.0-nightly (c2f428d2f 2022-07-14) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [hir_crate] get the crate HIR\r\n#1 [entry_fn] looking up the entry function of a crate\r\n#2 [analysis] running analysis passes on this crate\r\nend of query stack\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0:     0x7fb68e4a2950 - std::backtrace_rs::backtrace::libunwind::trace::heeafe1f1ea6b4c2f\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\r\n   1:     0x7fb68e4a2950 - std::backtrace_rs::backtrace::trace_unsynchronized::hf08684e78cd6c167\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\r\n   2:     0x7fb68e4a2950 - std::sys_common::backtrace::_print_fmt::had9e99c2c8763a1e\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/sys_common/backtrace.rs:66:5\r\n   3:     0x7fb68e4a2950 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h1b4c432d2a1e6303\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/sys_common/backtrace.rs:45:22\r\n   4:     0x7fb68e4fbf2c - core::fmt::write::h87085de871a99231\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/core/src/fmt/mod.rs:1198:17\r\n   5:     0x7fb68e494015 - std::io::Write::write_fmt::h7635d2f423aa55dc\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/io/mod.rs:1672:15\r\n   6:     0x7fb68e4a55e1 - std::sys_common::backtrace::_print::hc003bc1c22b7967b\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/sys_common/backtrace.rs:48:5\r\n   7:     0x7fb68e4a55e1 - std::sys_common::backtrace::print::h1baa1ab7758e52b0\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/sys_common/backtrace.rs:35:9\r\n   8:     0x7fb68e4a55e1 - std::panicking::default_hook::{{closure}}::he2f5e84c6ab77817\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/panicking.rs:295:22\r\n   9:     0x7fb68e4a52b3 - std::panicking::default_hook::h3f96069db270c68f\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/panicking.rs:314:9\r\n  10:     0x7fb68ed49de4 - rustc_driver[1ce26eb46f30f4d]::DEFAULT_HOOK::{closure#0}::{closure#0}\r\n  11:     0x7fb68e4a5db6 - std::panicking::rust_panic_with_hook::hed0c1597bbc695a6\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/panicking.rs:702:17\r\n  12:     0x7fb68e4a5c07 - std::panicking::begin_panic_handler::{{closure}}::h0fc9e6b3154da131\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/panicking.rs:588:13\r\n  13:     0x7fb68e4a2e34 - std::sys_common::backtrace::__rust_end_short_backtrace::hb9c2240a67931ff9\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/sys_common/backtrace.rs:138:18\r\n  14:     0x7fb68e4a5932 - rust_begin_unwind\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/panicking.rs:584:5\r\n  15:     0x7fb68e469c33 - core::panicking::panic_fmt::h6bda1b0556b509cd\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/core/src/panicking.rs:142:14\r\n  16:     0x7fb6902a91eb - <smallvec[4d025086d3446119]::SmallVec<[rustc_ast[f9ddef6e3c579104]::ast::Attribute; 8usize]> as core[32c218dbf3427c26]::iter::traits::collect::Extend<rustc_ast[f9ddef6e3c579104]::ast::Attribute>>::extend::<core[32c218dbf3427c26]::iter::adapters::map::Map<core[32c218dbf3427c26]::slice::iter::Iter<rustc_ast[f9ddef6e3c579104]::ast::Attribute>, <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_attrs::{closure#0}>>\r\n  17:     0x7fb6902d1c1e - <rustc_hir[d9bcc83df3a1d79d]::Arena>::alloc_from_iter::<rustc_ast[f9ddef6e3c579104]::ast::Attribute, rustc_arena[aa933f22bd0e4ed]::IsNotCopy, core[32c218dbf3427c26]::iter::adapters::map::Map<core[32c218dbf3427c26]::slice::iter::Iter<rustc_ast[f9ddef6e3c579104]::ast::Attribute>, <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_attrs::{closure#0}>>\r\n  18:     0x7fb6902780e4 - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::expr\r\n  19:     0x7fb69111de78 - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_expr_for\r\n  20:     0x7fb690271b64 - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_expr_mut\r\n  21:     0x7fb69026d9fe - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_block_noalloc\r\n  22:     0x7fb690270c1d - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_expr_mut\r\n  23:     0x7fb69026d9fe - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_block_noalloc\r\n  24:     0x7fb690270c1d - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_expr_mut\r\n  25:     0x7fb69026e1d2 - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_block_noalloc\r\n  26:     0x7fb690270c1d - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_expr_mut\r\n  27:     0x7fb69026d9fe - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_block_noalloc\r\n  28:     0x7fb690270c1d - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_expr_mut\r\n  29:     0x7fb69111b5e1 - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_expr_closure\r\n  30:     0x7fb69027170c - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_expr_mut\r\n  31:     0x7fb69027044d - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_expr_mut\r\n  32:     0x7fb690270770 - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_expr_mut\r\n  33:     0x7fb69026dfa7 - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_block_noalloc\r\n  34:     0x7fb69027f9d4 - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_maybe_async_body\r\n  35:     0x7fb6902797fa - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::lower_item_kind\r\n  36:     0x7fb69029bb59 - <rustc_ast_lowering[3f3b0ef9be439d1a]::LoweringContext>::with_hir_id_owner::<<rustc_ast_lowering[3f3b0ef9be439d1a]::item::ItemLowerer>::with_lctx<<rustc_ast_lowering[3f3b0ef9be439d1a]::item::ItemLowerer>::lower_item::{closure#0}>::{closure#0}>\r\n  37:     0x7fb6902acffd - <rustc_ast_lowering[3f3b0ef9be439d1a]::item::ItemLowerer>::lower_node\r\n  38:     0x7fb690289278 - rustc_ast_lowering[3f3b0ef9be439d1a]::lower_to_hir\r\n  39:     0x7fb691413bec - <rustc_query_system[688aca7ce0d190ff]::dep_graph::graph::DepGraph<rustc_middle[d660d6fda8399c61]::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle[d660d6fda8399c61]::ty::context::TyCtxt, (), rustc_hir[d9bcc83df3a1d79d]::hir::Crate>\r\n  40:     0x7fb69147ef02 - rustc_query_system[688aca7ce0d190ff]::query::plumbing::try_execute_query::<rustc_query_impl[e840a35d18f93fd8]::plumbing::QueryCtxt, rustc_query_system[688aca7ce0d190ff]::query::caches::ArenaCache<(), rustc_hir[d9bcc83df3a1d79d]::hir::Crate>>\r\n  41:     0x7fb68f75a12f - rustc_query_system[688aca7ce0d190ff]::query::plumbing::force_query::<rustc_query_impl[e840a35d18f93fd8]::queries::hir_crate, rustc_query_impl[e840a35d18f93fd8]::plumbing::QueryCtxt>\r\n  42:     0x7fb68f7367a6 - rustc_query_impl[e840a35d18f93fd8]::query_callbacks::hir_crate::force_from_dep_node\r\n  43:     0x7fb690ddf7f1 - <rustc_middle[d660d6fda8399c61]::ty::context::TyCtxt as rustc_query_system[688aca7ce0d190ff]::dep_graph::DepContext>::try_force_from_dep_node\r\n  44:     0x7fb69088b316 - <rustc_query_system[688aca7ce0d190ff]::dep_graph::graph::DepGraph<rustc_middle[d660d6fda8399c61]::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl[e840a35d18f93fd8]::plumbing::QueryCtxt>\r\n  45:     0x7fb69088ab96 - <rustc_query_system[688aca7ce0d190ff]::dep_graph::graph::DepGraph<rustc_middle[d660d6fda8399c61]::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl[e840a35d18f93fd8]::plumbing::QueryCtxt>\r\n  46:     0x7fb69088a420 - <rustc_query_system[688aca7ce0d190ff]::dep_graph::graph::DepGraph<rustc_middle[d660d6fda8399c61]::dep_graph::dep_node::DepKind>>::try_mark_green::<rustc_query_impl[e840a35d18f93fd8]::plumbing::QueryCtxt>\r\n  47:     0x7fb6914d8cbc - rustc_query_system[688aca7ce0d190ff]::query::plumbing::try_load_from_disk_and_cache_in_memory::<rustc_query_impl[e840a35d18f93fd8]::plumbing::QueryCtxt, (), core[32c218dbf3427c26]::option::Option<(rustc_span[717885ec7c6cd182]::def_id::DefId, rustc_session[4ac326324d613686]::config::EntryFnType)>>\r\n  48:     0x7fb6914ac124 - rustc_query_system[688aca7ce0d190ff]::query::plumbing::try_execute_query::<rustc_query_impl[e840a35d18f93fd8]::plumbing::QueryCtxt, rustc_query_system[688aca7ce0d190ff]::query::caches::DefaultCache<(), core[32c218dbf3427c26]::option::Option<(rustc_span[717885ec7c6cd182]::def_id::DefId, rustc_session[4ac326324d613686]::config::EntryFnType)>>>\r\n  49:     0x7fb69150a9c0 - rustc_query_system[688aca7ce0d190ff]::query::plumbing::get_query::<rustc_query_impl[e840a35d18f93fd8]::queries::entry_fn, rustc_query_impl[e840a35d18f93fd8]::plumbing::QueryCtxt>\r\n  50:     0x7fb6914564d2 - <rustc_query_impl[e840a35d18f93fd8]::Queries as rustc_middle[d660d6fda8399c61]::ty::query::QueryEngine>::entry_fn\r\n  51:     0x7fb690f5608d - <rustc_session[4ac326324d613686]::session::Session>::time::<core[32c218dbf3427c26]::option::Option<(rustc_span[717885ec7c6cd182]::def_id::DefId, rustc_session[4ac326324d613686]::config::EntryFnType)>, rustc_interface[694c7ab70a1d38bc]::passes::analysis::{closure#0}::{closure#0}::{closure#0}>\r\n  52:     0x7fb690f59a60 - <rustc_session[4ac326324d613686]::session::Session>::time::<(), rustc_interface[694c7ab70a1d38bc]::passes::analysis::{closure#0}>\r\n  53:     0x7fb690f44e4e - rustc_interface[694c7ab70a1d38bc]::passes::analysis\r\n  54:     0x7fb69141206c - <rustc_query_system[688aca7ce0d190ff]::dep_graph::graph::DepGraph<rustc_middle[d660d6fda8399c61]::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle[d660d6fda8399c61]::ty::context::TyCtxt, (), core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>>\r\n  55:     0x7fb6914acd1b - rustc_query_system[688aca7ce0d190ff]::query::plumbing::try_execute_query::<rustc_query_impl[e840a35d18f93fd8]::plumbing::QueryCtxt, rustc_query_system[688aca7ce0d190ff]::query::caches::DefaultCache<(), core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>>>\r\n  56:     0x7fb69150a74e - rustc_query_system[688aca7ce0d190ff]::query::plumbing::get_query::<rustc_query_impl[e840a35d18f93fd8]::queries::analysis, rustc_query_impl[e840a35d18f93fd8]::plumbing::QueryCtxt>\r\n  57:     0x7fb690f2841e - <rustc_interface[694c7ab70a1d38bc]::passes::QueryContext>::enter::<rustc_driver[1ce26eb46f30f4d]::run_compiler::{closure#1}::{closure#2}::{closure#3}, core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>>\r\n  58:     0x7fb690f0c09e - <rustc_interface[694c7ab70a1d38bc]::interface::Compiler>::enter::<rustc_driver[1ce26eb46f30f4d]::run_compiler::{closure#1}::{closure#2}, core[32c218dbf3427c26]::result::Result<core[32c218dbf3427c26]::option::Option<rustc_interface[694c7ab70a1d38bc]::queries::Linker>, rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>>\r\n  59:     0x7fb690f081ff - rustc_span[717885ec7c6cd182]::with_source_map::<core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>, rustc_interface[694c7ab70a1d38bc]::interface::create_compiler_and_run<core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>, rustc_driver[1ce26eb46f30f4d]::run_compiler::{closure#1}>::{closure#1}>\r\n  60:     0x7fb690f244b0 - rustc_interface[694c7ab70a1d38bc]::interface::create_compiler_and_run::<core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>, rustc_driver[1ce26eb46f30f4d]::run_compiler::{closure#1}>\r\n  61:     0x7fb690f385b2 - <scoped_tls[f235d80db834c386]::ScopedKey<rustc_span[717885ec7c6cd182]::SessionGlobals>>::set::<rustc_interface[694c7ab70a1d38bc]::interface::run_compiler<core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>, rustc_driver[1ce26eb46f30f4d]::run_compiler::{closure#1}>::{closure#0}, core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>>\r\n  62:     0x7fb690f0a78f - std[167b23ae759531ff]::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface[694c7ab70a1d38bc]::util::run_in_thread_pool_with_globals<rustc_interface[694c7ab70a1d38bc]::interface::run_compiler<core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>, rustc_driver[1ce26eb46f30f4d]::run_compiler::{closure#1}>::{closure#0}, core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>>::{closure#0}, core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>>\r\n  63:     0x7fb690f24909 - <<std[167b23ae759531ff]::thread::Builder>::spawn_unchecked_<rustc_interface[694c7ab70a1d38bc]::util::run_in_thread_pool_with_globals<rustc_interface[694c7ab70a1d38bc]::interface::run_compiler<core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>, rustc_driver[1ce26eb46f30f4d]::run_compiler::{closure#1}>::{closure#0}, core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>>::{closure#0}, core[32c218dbf3427c26]::result::Result<(), rustc_errors[3b3e5bcd1e9c2834]::ErrorGuaranteed>>::{closure#1} as core[32c218dbf3427c26]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\r\n  64:     0x7fb68e4af803 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h86b1834fb0da834b\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/alloc/src/boxed.rs:1934:9\r\n  65:     0x7fb68e4af803 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h124d05192aaf60e0\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/alloc/src/boxed.rs:1934:9\r\n  66:     0x7fb68e4af803 - std::sys::unix::thread::Thread::new::thread_start::h01e8d05fb6e030ea\r\n                               at /rustc/c2f428d2f3340a0e7d995f4726223db91b93704c/library/std/src/sys/unix/thread.rs:108:17\r\n  67:     0x7fb68e08c54d - <unknown>\r\n  68:     0x7fb68e111874 - clone\r\n  69:                0x0 - <unknown>\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99402/timeline", "performed_via_github_app": null, "state_reason": null}