{"url": "https://api.github.com/repos/rust-lang/rust/issues/101925", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101925/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101925/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101925/events", "html_url": "https://github.com/rust-lang/rust/issues/101925", "id": 1376629108, "node_id": "I_kwDOAAsO6M5SDbF0", "number": 101925, "title": "Inferred closure argument lifetime is too specific; we should suggest annotating the type to use the more general lifetime", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-09-17T01:39:34Z", "updated_at": "2022-09-17T01:42:52Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "... also the diagnostic repeats for different lifetimes unhelpfully; it appears to be identical until very close inspection.\r\n\r\nGiven the following code: [[playground]](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=2e75228ef27080e0ed5fe1c8f760819c)\r\n\r\n```rust\r\nuse std::fmt;\r\n\r\npub struct Test;\r\n\r\nimpl Test {\r\n    fn render_impl(&self, _: &mut impl fmt::Write) -> fmt::Result {\r\n        Ok(())\r\n    }\r\n\r\n    pub fn render(&self) -> impl '_ + fmt::Display {\r\n        struct Display<F>(F);\r\n        impl<F> fmt::Display for Display<F>\r\n        where\r\n            F: Fn(&mut fmt::Formatter<'_>) -> fmt::Result,\r\n        {\r\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\r\n                (self.0)(f)\r\n            }\r\n        }\r\n\r\n        // okay:\r\n        // Display(move |f: &mut fmt::Formatter<'_>| self.render_impl(f))\r\n        // not okay:\r\n        Display(move |f| self.render_impl(f))\r\n    }\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror: implementation of `FnOnce` is not general enough\r\n  --> src/lib.rs:24:9\r\n   |\r\n24 |         Display(move |f| self.render_impl(f))\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\r\n   |\r\n   = note: closure with signature `fn(&'2 mut Formatter<'_>) -> Result<(), std::fmt::Error>` must implement `FnOnce<(&'1 mut Formatter<'_>,)>`, for any lifetime `'1`...\r\n   = note: ...but it actually implements `FnOnce<(&'2 mut Formatter<'_>,)>`, for some specific lifetime `'2`\r\n\r\nerror: implementation of `FnOnce` is not general enough\r\n  --> src/lib.rs:24:9\r\n   |\r\n24 |         Display(move |f| self.render_impl(f))\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\r\n   |\r\n   = note: closure with signature `fn(&mut Formatter<'2>) -> Result<(), std::fmt::Error>` must implement `FnOnce<(&mut Formatter<'1>,)>`, for any lifetime `'1`...\r\n   = note: ...but it actually implements `FnOnce<(&mut Formatter<'2>,)>`, for some specific lifetime `'2`\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:24:9\r\n   |\r\n24 |         Display(move |f| self.render_impl(f))\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\r\n   |\r\n   = note: expected trait `for<'r, 's> Fn<(&'r mut Formatter<'s>,)>`\r\n              found trait `Fn<(&mut Formatter<'_>,)>`\r\nnote: this closure does not fulfill the lifetime requirements\r\n  --> src/lib.rs:24:17\r\n   |\r\n24 |         Display(move |f| self.render_impl(f))\r\n   |                 ^^^^^^^^\r\n```\r\n\r\nIdeally the output should look like:\r\n\r\n```\r\nerror: closure is not general enough\r\n  --> src/lib.rs:24:17\r\n   |\r\n24 |         Display(move |f| self.render_impl(f))\r\n   |                 ^^^^^^^^ closure is not general enough\r\n   |\r\n   = note: closure with signature `fn(&mut Formatter<'_>) -> _` must implement `Fn(&'1 mut Formatter<'2>) -> _`, for any lifetimes `'1`, `'2`...\r\n   = note: ...but it actually implements `Fn(&'3 mut Formatter<'4>) -> _`, for some specific lifetimes `'3`, `'4`\r\nhelp: try annotating the closure argument type\r\n  --> src/lib.rs:24:17\r\n   |\r\n24 |         Display(move |f: &mut Formatter<'_>| self.render_impl(f))\r\n   |                        ++++++++++++++++++++\r\n```\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101925/timeline", "performed_via_github_app": null, "state_reason": null}