{"url": "https://api.github.com/repos/rust-lang/rust/issues/101207", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101207/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101207/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101207/events", "html_url": "https://github.com/rust-lang/rust/issues/101207", "id": 1355902161, "node_id": "I_kwDOAAsO6M5Q0WzR", "number": 101207, "title": "Allow empty override of a provided trait method for documentation purposes", "user": {"login": "mqudsi", "id": 606923, "node_id": "MDQ6VXNlcjYwNjkyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/606923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mqudsi", "html_url": "https://github.com/mqudsi", "followers_url": "https://api.github.com/users/mqudsi/followers", "following_url": "https://api.github.com/users/mqudsi/following{/other_user}", "gists_url": "https://api.github.com/users/mqudsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mqudsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mqudsi/subscriptions", "organizations_url": "https://api.github.com/users/mqudsi/orgs", "repos_url": "https://api.github.com/users/mqudsi/repos", "events_url": "https://api.github.com/users/mqudsi/events{/privacy}", "received_events_url": "https://api.github.com/users/mqudsi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 372080667, "node_id": "MDU6TGFiZWwzNzIwODA2Njc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-core", "name": "T-core", "color": "bfd4f2", "default": false, "description": "Relevant to the core team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-08-30T14:57:01Z", "updated_at": "2022-08-30T15:47:03Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I believe it should be possible for an implementation to override a provided trait method without providing a body, for the sole purpose of overriding its documentation in a forwards-compatible, maintenance-free manner.\r\n\r\nGiven the following trait which has one required method and one automatically provided method:\r\n\r\n```rust\r\ntrait Awaitable {\r\n    /// The type returned by [`wait()`] and co. in case of success.\r\n    type T;\r\n    /// The type returned by [`wait()`] and co. in case of failure.\r\n    type Error;\r\n\r\n    /// Does a generic wait on thingy and returns the status of the wait as a result.\r\n    fn wait(&self) -> Result<Self::T, Self::Error>;\r\n\r\n    /// Does a generic wait on thingy and returns the status of the wait as a boolean.\r\n    ///\r\n    /// Can be overridden by implementations that have an optimized alternative to internally calling `wait()`.\r\n    fn try_wait(&self) -> bool {\r\n        match self.wait() {\r\n            Ok(_) => true,\r\n            Err(_) => false,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAn implementation currently can provide its own version of `Awaitable::wait()` and override the documentation _of that one method_ to be specific to its implementation:\r\n\r\n```rust\r\nstruct Foo {}\r\n\r\nimpl Awaitable for Foo {\r\n    type T = ();\r\n    type Error = core::convert::Infallible;\r\n\r\n    /// Waits for the `Foo` widget to become available and then attempts to bamboozle the\r\n    /// phalange, reporting the outcome of the operation.\r\n    fn wait(&self) -> Result<Self::T, Self::Error>;\r\n}\r\n```\r\n\r\nIt is opting into the default behavior of `try_wait()` because it does not want/need to override the impl, but this means that while the rustdoc page for `Foo` contains the customized documentation for `wait()` that is specific to this implementation, on that same page the documentation for `try_wait()` will default to the generic text from the original `Awaitable` trait. In order to customize the text for `try_wait()` as well, the developer must copy-and-paste the default provided implementation from `awaitable.rs` to `foo.rs` and then provide their own documentation.\r\n\r\nI am proposing that it should be possible to provide a \"stub\" implementation for already-provided trait methods that continues to inherit the implementation from the trait definition, but allows the developer to override its documentation, like so:\r\n\r\n```rust\r\nstruct Foo {}\r\n\r\nimpl Awaitable for Foo {\r\n    type T = ();\r\n    type Error = core::convert::Infallible;\r\n\r\n    /// Waits for the `Foo` widget to become available and then attempts to bamboozle the\r\n    /// phalange, reporting the outcome of the operation including the specific error in\r\n    /// case of failure.\r\n    fn wait(&self) -> Result<(), Infallible>;\r\n\r\n    /// Waits for the `Foo` widget to become available and then attempts to bamboozle the\r\n    /// phalange, reporting only the success/failure status of the outcome.\r\n    fn try_wait(&self) -> bool;\r\n}\r\n```\r\n\r\nUnlike with copying-and-pasting the *current* default implementation of `try_wait` from `awaitable.rs`, with this approach the developer would be \"tracking\" the upstream behavior. If the default implementation changes - perhaps to fix a bug or improve performance - the implementation of `Foo::try_wait()` would change accordingly, just like it would if the method were not overridden at all.\r\n\r\nAdditionally, the docs for the provided method should reflect the types as typed-out in the stub - just like `Foo::wait()` will be shown with a return type of `Result<(), Infallible>` instead of `Result<Self::T, Self::Error>`, it should be possible to override the types displayed on the docs page for the \"partially overridden\" or \"declaration-only override\" of the provided method `Foo::try_wait()` as well.\r\n\r\n@rustbot label -C-bug +C-feature-request +T-rustdoc +T-core +A-traits", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101207/timeline", "performed_via_github_app": null, "state_reason": null}