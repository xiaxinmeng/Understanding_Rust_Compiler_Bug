{"url": "https://api.github.com/repos/rust-lang/rust/issues/50107", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50107/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50107/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50107/events", "html_url": "https://github.com/rust-lang/rust/issues/50107", "id": 316217107, "node_id": "MDU6SXNzdWUzMTYyMTcxMDc=", "number": 50107, "title": "Infering default generic arguments through traits", "user": {"login": "Ekleog", "id": 411447, "node_id": "MDQ6VXNlcjQxMTQ0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ekleog", "html_url": "https://github.com/Ekleog", "followers_url": "https://api.github.com/users/Ekleog/followers", "following_url": "https://api.github.com/users/Ekleog/following{/other_user}", "gists_url": "https://api.github.com/users/Ekleog/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ekleog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ekleog/subscriptions", "organizations_url": "https://api.github.com/users/Ekleog/orgs", "repos_url": "https://api.github.com/users/Ekleog/repos", "events_url": "https://api.github.com/users/Ekleog/events{/privacy}", "received_events_url": "https://api.github.com/users/Ekleog/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-20T10:37:56Z", "updated_at": "2022-03-22T07:49:31Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I've recently come across an issue of type inference that can be summed up like this:\r\n```rust\r\ntrait Trait {\r\n    type A;\r\n    type B;\r\n}\r\n\r\nenum Foo<A, B> { A(A), B(B) }\r\nimpl<A, B> Trait for Foo<A, B> { type A = A; type B = B; }\r\n\r\nenum Many<A, B, T1 = Foo<A, B>, T2 = Foo<A, B>, T3 = Foo<A, B>>\r\nwhere T1: Trait<A = A, B = B>,\r\n      T2: Trait<A = A, B = B>,\r\n      T3: Trait<A = A, B = B>,\r\n{\r\n    M1(T1), M2(T2), M3(T3)\r\n}\r\n\r\nfn main() {\r\n    let x = match 3 {\r\n        1 => Many::M1(Foo::A(3u8)),\r\n        _ => Many::M2(Foo::B(3u16)),\r\n    };\r\n}\r\n```\r\nreturns\r\n```\r\nerror[E0282]: type annotations needed\r\n  --> src/main.rs:19:14\r\n   |\r\n18 |     let x = match 3 {\r\n   |         - consider giving `x` a type\r\n19 |         1 => Many::M1(Foo::A(3u8)),\r\n   |              ^^^^^^^^ cannot infer type for `T3`\r\n```\r\n[(playground)](https://play.rust-lang.org/?gist=88969ae93b3e5dd680b32e4178690bdb&version=stable)\r\n\r\nI would have thought rustc could be able to infer the type for `T3` as `Foo<u8, u16>`, through this procedure:\r\n1. the match arms return `Many<'a, 'b, 't1, 't2, 't3>` with `'t1 = Foo<u8, 'b1>` and `'t2 = Foo<'a2, u16>`\r\n2. The `where` clause says `'t1: Trait<'a, 'b>`, and we only have `'t1:\u00a0Trait<u8, 'b1>`, so we can unify and get `'a = u8` and `'b = 'b1`\r\n3. The `where` clause also says `'t2: Trait<'a, 'b>`, and we only have `'t2: Trait<'a2, u16>`, so we can unify and get `'a = 'a2` and `'b = u16`\r\n4. So currently we are at the match arms return `Many<u8, u16, Foo<u8, u16>, Foo<u8, u16>, 't3>`\r\n5. Applying the default for `'t3` gives `'t3 = Foo<u8, u16>`, which is what I'm hoping for\r\n\r\nIn the meantime, would you happen to know of a way to do what I'm trying to do? Ideally it'd be a variadic enum, but not being able to figure out a way to do it I just decided to have a cap on the number of variants, and hit this bug. If this could not be a solution based on auto-generating a rust file for all possible numbers of variants it'd be even better, but\u2026", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50107/timeline", "performed_via_github_app": null, "state_reason": null}