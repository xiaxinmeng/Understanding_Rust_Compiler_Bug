{"url": "https://api.github.com/repos/rust-lang/rust/issues/78433", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78433/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78433/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78433/events", "html_url": "https://github.com/rust-lang/rust/issues/78433", "id": 730238497, "node_id": "MDU6SXNzdWU3MzAyMzg0OTc=", "number": 78433, "title": "Tracking Issue for improving `min_const_generics` test coverage", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2237029335, "node_id": "MDU6TGFiZWwyMjM3MDI5MzM1", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-min_const_generics", "name": "F-min_const_generics", "color": "f9c0cc", "default": false, "description": "Minimal const generics MVP"}, {"id": 2345042521, "node_id": "MDU6TGFiZWwyMzQ1MDQyNTIx", "url": "https://api.github.com/repos/rust-lang/rust/labels/const-generics-blocking", "name": "const-generics-blocking", "color": "3f5dca", "default": false, "description": "An issue blocking the stabilisation of `min_const_generics`"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-10-27T08:41:54Z", "updated_at": "2020-11-13T18:09:11Z", "closed_at": "2020-11-13T18:09:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a tracking issue for improving the test coverage of `feature(min_const_generics)`.\r\nWe collected a collection of interesting test cases in [a hackmd](https://hackmd.io/WnFmN4MjRCqAjGmYfYcu2A) and\r\nnow have to design these tests and add them to the test suite.\r\n\r\n## Topics\r\n\r\nFor more info about these topics you can also look at the above hackmd which elaborates a bit more for some of them\r\n\r\n- [x] rustdoc\r\nOne interested fairly self-contained topic is probably rustdoc. We pretty much want tests for values 7, params N, associated consts fn test() -> [u8; Type::ASSOC] and more complex expressions (ConstKind::Unevaluated) 3 + 4 in different positions, like ret + arg impl trait, async fn ret + impl position, type alias, and defined inside of macros. Probably also nice to test reexports and usage of associated consts defined in a different crate. Consider also adding one test for a constant which contains a lot of weird stuff, like struct definitions and so on to see how that looks\r\n\r\n- [ ] default values for const parameters should error (claimed by @ethanboxx)\r\nI think this only needs one test which tries to use something like const N: usize = 23 and const N = 27: usize to check that the error is at least somewhat readable\r\n\r\n- [x] ordering of const parameters (only after types)\r\n@JulianKnodt already added quite a few tests for that, so this is probably already good enough. At least I can't think of anything missing here\r\n\r\n- [x] supertraits + dyn type upcasting with supertraits (claimed by @hameerabbasi, added in #78478)\r\nThis requires some knowledge about how all of this should work but is probably quite interesting to think about.\r\n\r\n- [x] trait methods trait Foo<const C> { fn bar<const D>() }\r\nI think that's already fairly well tested thanks to the interaction with type dependent paths, at least I can't think of anything specific we are still missing here\r\n\r\n- [x] associated type bounds\r\nhopefully one run-pass and one or two compile fail tests are enough here\r\n\r\n- [x] invalid bool and char bit-pattern (claimed by @JulianKnodt)\r\nA test which tries to for example use 7 as a bool and 0xFF as a char\r\n\r\n- [x] macros (claimed by @JulianKnodt, added in #78912)\r\nhopefully fairly self-contained, try defining a #[macro_export] macro inside of a const (which can be inside of async fn or impl trait or a repeat expression)\r\n\r\n---\r\n\r\nI think these are the more self-contained topics, for everything else it's probably easiest for someone - I expect and want this to be me - to just spend a few hours mixing stuff until it either breaks or there is a high confidence that it does not break.", "closed_by": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78433/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78433/timeline", "performed_via_github_app": null, "state_reason": "completed"}