{"url": "https://api.github.com/repos/rust-lang/rust/issues/73820", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73820/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73820/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73820/events", "html_url": "https://github.com/rust-lang/rust/issues/73820", "id": 646793107, "node_id": "MDU6SXNzdWU2NDY3OTMxMDc=", "number": 73820, "title": "Please add support for Intel CET", "user": {"login": "xnox", "id": 19779, "node_id": "MDQ6VXNlcjE5Nzc5", "avatar_url": "https://avatars.githubusercontent.com/u/19779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xnox", "html_url": "https://github.com/xnox", "followers_url": "https://api.github.com/users/xnox/followers", "following_url": "https://api.github.com/users/xnox/following{/other_user}", "gists_url": "https://api.github.com/users/xnox/gists{/gist_id}", "starred_url": "https://api.github.com/users/xnox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xnox/subscriptions", "organizations_url": "https://api.github.com/users/xnox/orgs", "repos_url": "https://api.github.com/users/xnox/repos", "events_url": "https://api.github.com/users/xnox/events{/privacy}", "received_events_url": "https://api.github.com/users/xnox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-06-27T23:49:35Z", "updated_at": "2022-02-22T18:10:11Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "https://www.linuxplumbersconf.org/event/2/contributions/147/attachments/72/83/CET-LPC-2018.pdf\r\n\r\nWhen compiling C binaries with `-fcf-protection` the binaries are generated with Indirect Branch Tracking (IBT) Shadow Stack (SHSTK) features, and are thus CET enabled.\r\n\r\nI cannot find a way for rustc compiler to generate binaries with the gnu properties declared on the ELF binary, but also have the right `endbranch` instructions emitted.\r\n\r\n```\r\n$ cat empty.c \r\nvoid main(){}\r\n$ cat empty.rs \r\nfn main(){}\r\n$ gcc -fcf-protection -o gcc-c empty.c\r\n$ clang -fcf-protection -o clang-c empty.c\r\n$ rustc  -o rustc empty.rs\r\n$ readelf -a gcc-c | grep feature:\r\n      Properties: x86 feature: IBT, SHSTK\r\n$ readelf -a clang-c | grep feature:\r\n      Properties: x86 feature: IBT, SHSTK\r\n$ readelf -a rustc | grep feature:\r\n$ echo $?\r\n1\r\n```\r\n\r\nTrying to set CFLAGS/LDFLAGS/RUSTFLAGS did not make rustc compiler generate CET enabled binaries, thus I am assuming that rustc does not have support for CET.\r\n\r\nI looked through the available codegen options and also did not find a way to generate CET enabled binaries.\r\n\r\nPlease add support for rustc to generate CET enabled binaries, when toolchain has support for it. Or please document how to make rustc do so, because gcc / LLVM and linkers have support for it.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73820/timeline", "performed_via_github_app": null, "state_reason": null}