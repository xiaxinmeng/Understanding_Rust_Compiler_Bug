{"url": "https://api.github.com/repos/rust-lang/rust/issues/98357", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98357/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98357/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98357/events", "html_url": "https://github.com/rust-lang/rust/issues/98357", "id": 1279091844, "node_id": "I_kwDOAAsO6M5MPWSE", "number": 98357, "title": "Adding non-divergent core::ops overload breaks type inference and default integer type preference ", "user": {"login": "mqudsi", "id": 606923, "node_id": "MDQ6VXNlcjYwNjkyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/606923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mqudsi", "html_url": "https://github.com/mqudsi", "followers_url": "https://api.github.com/users/mqudsi/followers", "following_url": "https://api.github.com/users/mqudsi/following{/other_user}", "gists_url": "https://api.github.com/users/mqudsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mqudsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mqudsi/subscriptions", "organizations_url": "https://api.github.com/users/mqudsi/orgs", "repos_url": "https://api.github.com/users/mqudsi/repos", "events_url": "https://api.github.com/users/mqudsi/events{/privacy}", "received_events_url": "https://api.github.com/users/mqudsi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 372080667, "node_id": "MDU6TGFiZWwzNzIwODA2Njc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-core", "name": "T-core", "color": "bfd4f2", "default": false, "description": "Relevant to the core team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-06-21T21:07:22Z", "updated_at": "2022-07-18T21:37:29Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This code compiles fine:\r\n\r\n```rust\r\nuse core::ops::Mul;\r\n\r\n#[derive(Debug)]\r\nstruct Foo(i32);\r\n\r\nimpl Mul<Foo> for i32 {\r\n    type Output = Foo;\r\n\r\n    fn mul(self, other: Foo) -> Self::Output {\r\n        Foo(self * other.0)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let prod1 = 7 * Foo(6);\r\n    assert_eq!(prod1.0, 42);\r\n}\r\n```\r\n\r\nAdding an `impl Mul<Foo> for i8` (or any other integer type) breaks the type inference happening on the first line of `main()` ([playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=151c1b1ebfe59adf755f3f0f328c6da5)):\r\n\r\n```rust\r\nuse core::ops::Mul;\r\n\r\n#[derive(Debug)]\r\nstruct Foo(i32);\r\n\r\nimpl Mul<Foo> for i32 {\r\n    type Output = Foo;\r\n\r\n    fn mul(self, other: Foo) -> Self::Output {\r\n        Foo(self * other.0)\r\n    }\r\n}\r\n\r\nimpl Mul<Foo> for i8 {\r\n    type Output = Foo;\r\n    \r\n    fn mul(self, other: Foo) -> Self::Output {\r\n        Foo(self as i32 * other.0)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let prod1 = 7 * Foo(6);\r\n    assert_eq!(prod1.0, 42);\r\n}\r\n```\r\n\r\nThe stable (1.61.0) compiler [gives a better message](https://github.com/rust-lang/rust/issues/98404) about what's really happening here as compared to the beta or nightly (1.62.0, 1.63.0) versions. Stable prints this:\r\n\r\n```\r\nerror[[E0282]](https://doc.rust-lang.org/stable/error-index.html#E0282): type annotations needed\r\n  --> src/main.rs:24:16\r\n   |\r\n23 |     let prod1 = 7 * Foo(6);\r\n   |         ----- consider giving `prod1` a type\r\n24 |     assert_eq!(prod1.0, 42);\r\n   |                ^^^^^ cannot infer type\r\n   |\r\n   = note: type must be known at this point\r\n\r\nerror[[E0283]](https://doc.rust-lang.org/stable/error-index.html#E0283): type annotations needed\r\n  --> src/main.rs:23:19\r\n   |\r\n23 |     let prod1 = 7 * Foo(6);\r\n   |                   ^ cannot infer type for type `{integer}`\r\n   |\r\nnote: multiple `impl`s satisfying `{integer}: Mul<Foo>` found\r\n  --> src/main.rs:6:1\r\n   |\r\n6  | impl Mul<Foo> for i32 {\r\n   | ^^^^^^^^^^^^^^^^^^^^^\r\n...\r\n14 | impl Mul<Foo> for i8 {\r\n   | ^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nThe outputs of all the `Mul` impl blocks are non-diverging and produce `Foo` for all inputs. Theoretically, specifying `let prod1: Foo = ...` instead of `let prod1 = ...` would do nothing to ameliorate the situation (since either i8 or i32 impl could satisfy the code as written, even with the additional type constraint). However, simply supplying the `prod1: Foo` type specifier fixes the inference and lets rust's default integer preference succeed: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=bf76c0fa2edf27dc656a7bc07ecaab12\r\n\r\nNote that this _doesn't_ happen for the commutative equivalent (`Foo * numeric` rather than `numeric * Foo`) with the correct `Mul` impls in place.\r\n\r\nrust seems to know that the output is `Foo` in all cases, because the following emits an error with the correct type:\r\n\r\n```\r\nfn main() {\r\n    let mut prod1 = 7 * Foo(6);\r\n    prod1 = ();\r\n    //assert_eq!(prod1.0, 42);\r\n}\r\n```\r\n\r\n```\r\nerror[[E0271]](https://doc.rust-lang.org/nightly/error-index.html#E0271): type mismatch resolving `<i32 as Mul<Foo>>::Output == ()`\r\n  --> src/main.rs:39:23\r\n   |\r\n39 |     let mut prod1 = 7 * Foo(6);\r\n   |                       ^ type mismatch resolving `<i32 as Mul<Foo>>::Output == ()`\r\n   |\r\nnote: expected this to be `Foo`\r\n  --> src/main.rs:23:19\r\n   |\r\n23 |     type Output = Foo;\r\n   |                   ^^^\r\n```\r\n\r\nSo there's no reason why `: Foo` needs to be specified explicitly.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`: \r\n```\r\n2022-06-20 5750a6aa2777382bf421\r\n```\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98357/timeline", "performed_via_github_app": null, "state_reason": null}