{"url": "https://api.github.com/repos/rust-lang/rust/issues/63952", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63952/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63952/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63952/events", "html_url": "https://github.com/rust-lang/rust/issues/63952", "id": 485908814, "node_id": "MDU6SXNzdWU0ODU5MDg4MTQ=", "number": 63952, "title": "rustc diverges on large dangling integer slice", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-27T16:21:57Z", "updated_at": "2020-02-18T20:51:41Z", "closed_at": "2020-02-18T20:51:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I wanted to test our handling of slices that are \"too big\" (bigger than the largest possible allocation), so I wrote:\r\n```rust\r\nuse std::usize;\r\n\r\n#[repr(C)]\r\n#[derive(Copy, Clone)]\r\nstruct SliceRepr {\r\n    ptr: *const u8,\r\n    len: usize,\r\n}\r\n\r\nunion SliceTransmute {\r\n    repr: SliceRepr,\r\n    slice: &'static [u8],\r\n}\r\n\r\n// bad slice: length too big to even exist anywhere\r\nconst SLICE_WAY_TOO_LONG: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: usize::MAX } }.slice};\r\n```\r\nI expected an ICE or so, but I got a timeout. On nightly, here's what a stacktrace looks like:\r\n```\r\n#0  0x00007fe68caece57 in rustc_mir::interpret::visitor::ValueVisitor::walk_value () at src/librustc_mir/interpret/visitor.rs:223\r\n#1  0x00007fe68caec7b1 in rustc_mir::interpret::visitor::ValueVisitor::visit_value () at src/librustc_mir/interpret/visitor.rs:138\r\n#2  rustc_mir::interpret::visitor::ValueVisitor::visit_field () at src/librustc_mir/interpret/visitor.rs:170\r\n#3  rustc_mir::interpret::visitor::ValueVisitor::walk_aggregate () at src/librustc_mir/interpret/visitor.rs:219\r\n#4  0x00007fe68caedb0e in <rustc_mir::interpret::intern::InternVisitor as rustc_mir::interpret::visitor::ValueVisitor<rustc_mir::const_eval::CompileTimeInterpreter>>::visit_aggregate () at src/librustc_mir/interpret/intern.rs:136\r\n#5  rustc_mir::interpret::visitor::ValueVisitor::walk_value () at src/librustc_mir/interpret/visitor.rs:326\r\n#6  0x00007fe68c71b1de in rustc_mir::interpret::visitor::ValueVisitor::visit_value () at src/librustc_mir/interpret/visitor.rs:138\r\n#7  rustc_mir::interpret::intern::intern_const_alloc_recursive () at src/librustc_mir/interpret/intern.rs:284\r\n#8  0x00007fe68c5493b1 in rustc_mir::const_eval::eval_body_using_ecx () at src/librustc_mir/const_eval.rs:161\r\n#9  rustc_mir::const_eval::const_eval_raw_provider::{{closure}} () at src/librustc_mir/const_eval.rs:658\r\n#10 core::result::Result<T,E>::and_then () at /home/r/src/rust/rustc.2/src/libcore/result.rs:691\r\n#11 rustc_mir::const_eval::const_eval_raw_provider () at src/librustc_mir/const_eval.rs:657\r\n```\r\n@oli-obk looks like the interning could do with a fast path for integer slices similar to what validation does? And maybe it could also check that the reference is dereferencable before walking it, that would avoid finding out later that we are going to produce an error anyway.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63952/timeline", "performed_via_github_app": null, "state_reason": "completed"}