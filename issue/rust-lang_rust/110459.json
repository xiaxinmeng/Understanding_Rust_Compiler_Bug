{"url": "https://api.github.com/repos/rust-lang/rust/issues/110459", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110459/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110459/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110459/events", "html_url": "https://github.com/rust-lang/rust/issues/110459", "id": 1671566431, "node_id": "I_kwDOAAsO6M5johRf", "number": 110459, "title": "Pessimization on clearing LSB when unpacking enum", "user": {"login": "NicholasGorski", "id": 6093293, "node_id": "MDQ6VXNlcjYwOTMyOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6093293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NicholasGorski", "html_url": "https://github.com/NicholasGorski", "followers_url": "https://api.github.com/users/NicholasGorski/followers", "following_url": "https://api.github.com/users/NicholasGorski/following{/other_user}", "gists_url": "https://api.github.com/users/NicholasGorski/gists{/gist_id}", "starred_url": "https://api.github.com/users/NicholasGorski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NicholasGorski/subscriptions", "organizations_url": "https://api.github.com/users/NicholasGorski/orgs", "repos_url": "https://api.github.com/users/NicholasGorski/repos", "events_url": "https://api.github.com/users/NicholasGorski/events{/privacy}", "received_events_url": "https://api.github.com/users/NicholasGorski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-04-17T16:32:40Z", "updated_at": "2023-04-20T16:12:19Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I have code that unpacks an enum into one of two variants depending on the LSB, clearing the LSB for the variant data:\r\n\r\n```rust\r\npub enum Foo {\r\n    First(u32),\r\n    Second(u32),\r\n}\r\n\r\nfn make_assumption(value: u32) {\r\n    if value % 4 != 0 {\r\n        unsafe { std::hint::unreachable_unchecked(); }\r\n    }\r\n}\r\n\r\nfn make_first(value: u32) -> Foo {\r\n    //make_assumption(value);\r\n    Foo::First(value)\r\n}\r\n\r\nfn make_second(value: u32) -> Foo {\r\n    //make_assumption(value);\r\n    Foo::Second(value)\r\n}\r\n\r\npub fn unpack_foo(packed: u32) -> Foo {\r\n    if packed & 0b1 == 0 {\r\n        make_first(packed)\r\n    } else {\r\n        make_second(packed & !0b1)\r\n    }\r\n}\r\n```\r\n\r\nWhen compiled as written in 1.68 ([godbolt](https://rust.godbolt.org/z/n8EG76oz4)) and 1.69 (beta at time of writing; [godbolt](https://rust.godbolt.org/z/jxnrhhEnY)), the result is:\r\n\r\n```\r\nexample::unpack_foo:\r\n        mov     eax, edi\r\n        and     eax, 1\r\n        and     edi, -2\r\n        mov     edx, edi\r\n        ret\r\n```\r\n\r\nHowever, if the lines with `make_assumption` are uncommented ([1.68 godbolt](https://rust.godbolt.org/z/n55vb7b3W), [1.69 godbolt](https://rust.godbolt.org/z/j8z33Kxd3)) then the result is:\r\n\r\n```\r\nexample::unpack_foo:\r\n        mov     edx, edi\r\n        and     edx, -4\r\n        mov     eax, edi\r\n        and     eax, 1\r\n        cmove   edx, edi\r\n        ret\r\n```\r\n\r\nWhich is slightly worse. It seems that the assumption of the two lower bits being clear causes the mask to become wider unnecessarily, just because it can. (In the original code, this came from a debug-checked hint to the optimizer.)\r\n\r\nOn nightly, a conditional move is always used. The only difference between the assumption being absent ([godbolt](https://rust.godbolt.org/z/Kr39KK9sW)) or present ([godbolt](https://rust.godbolt.org/z/qW5bb96df)) is the mask value.\r\n\r\nStrangely, if `make_first` and `make_second` are inlined then nightly will avoid the conditional move with the assumption absent, like in 1.68 and beta. ([godbolt](https://rust.godbolt.org/z/PGxPzczos))\r\n\r\n---\r\n\r\nFor now I have removed the unreachable_unchecked to retain the smaller code. Let me know if this belongs directly to LLVM, but my entry point is Rust.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110459/timeline", "performed_via_github_app": null, "state_reason": null}