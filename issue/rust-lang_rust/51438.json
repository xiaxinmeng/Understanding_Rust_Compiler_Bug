{"url": "https://api.github.com/repos/rust-lang/rust/issues/51438", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51438/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51438/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51438/events", "html_url": "https://github.com/rust-lang/rust/issues/51438", "id": 330723712, "node_id": "MDU6SXNzdWUzMzA3MjM3MTI=", "number": 51438, "title": "[feature]  Implement `Borrow` for `Rc<Box<T>>` (or in a generic transitive manner)", "user": {"login": "cipriancraciun", "id": 29785, "node_id": "MDQ6VXNlcjI5Nzg1", "avatar_url": "https://avatars.githubusercontent.com/u/29785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cipriancraciun", "html_url": "https://github.com/cipriancraciun", "followers_url": "https://api.github.com/users/cipriancraciun/followers", "following_url": "https://api.github.com/users/cipriancraciun/following{/other_user}", "gists_url": "https://api.github.com/users/cipriancraciun/gists{/gist_id}", "starred_url": "https://api.github.com/users/cipriancraciun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cipriancraciun/subscriptions", "organizations_url": "https://api.github.com/users/cipriancraciun/orgs", "repos_url": "https://api.github.com/users/cipriancraciun/repos", "events_url": "https://api.github.com/users/cipriancraciun/events{/privacy}", "received_events_url": "https://api.github.com/users/cipriancraciun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-08T16:27:30Z", "updated_at": "2018-06-10T14:42:19Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Currently `Borrow` is implemented for both `Rc` and `Box` individually, however sometimes one uses `Rc<Box<T>>` and needs it to have `Borrow` implemented.\r\n\r\nMy concrete use-case is the following:  I'm using `Rc<Box<str>>` as the backing value of symbols in a Scheme interpreter, and I need to have a `HashMap<Rc<Box<str>>, Value>` be addressable for any `&str`.  However the compiler complains that it can't borrow an `str` from `Rc<Box<str>>`.  Unfortunately one can't implement `Borrow` for those as both are part of `std`, and thus \"external\" from the developer's crate.\r\n\r\nTherefore my feature request is to implement `Borrow` at least for a few useful combinations of `Rc`, `Arc`, `Box`, and `T` and `Borrow<T>` (so that one could use `Rc<Box<String>>` and still have it `Borrow<str>`.\r\n\r\n----\r\n\r\nGeneralizing upon that, perhaps a \"transitive\" `Borrow` implementation might help cover all these cases, say for a depth up to 4 or 5.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51438/timeline", "performed_via_github_app": null, "state_reason": null}