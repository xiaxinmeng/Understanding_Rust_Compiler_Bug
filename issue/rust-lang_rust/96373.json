{"url": "https://api.github.com/repos/rust-lang/rust/issues/96373", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96373/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96373/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96373/events", "html_url": "https://github.com/rust-lang/rust/issues/96373", "id": 1213812869, "node_id": "I_kwDOAAsO6M5IWVCF", "number": 96373, "title": "Tracking Issue for experimental `yeet` expressions (`feature(yeet_expr)`)", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2022-04-25T00:21:02Z", "updated_at": "2023-01-29T00:03:10Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nNOTE: For library features, please use the \"Library Tracking Issue\" template instead.\r\n\r\nThank you for creating a tracking issue! \ud83d\udcdc Tracking issues are for tracking a\r\nfeature from implementation to stabilisation. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nThis is a tracking issue for *experimenting* with the [\"throw expression\" idea from RFC#0243](https://rust-lang.github.io/rfcs/0243-trait-based-exception-handling.html#throw-and-throws).\r\nThe feature gate for the issue is `#![feature(yeet_expr)]`.\r\n\r\n[Per the lang process](https://lang-team.rust-lang.org/how_to/propose.html), this cannot go further than experimenting without an approved RFC -- and will certainly not stabilize under the name `yeet`.  Please try this out and give experience reports, but be aware that it may well change drastically or be removed entirely.\r\n\r\nCurrently the primary purpose of the feature is to ensure that redesigns of the `Try` trait (#84277) are compatible with potentially doing this in the future, and secondarily to experiment with whether this is worth having *as an expression*, or whether it should be removed in favour of a pure-library approach.\r\n\r\nBecause the `do yeet` syntax is explicitly temporary, do not expect various ecosystem tools to support it, especially not those which have stability promises.\r\n\r\nLang initiative: https://github.com/rust-lang/lang-team/issues/160\r\nTracking issue for standard library additions: #96374\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [ ] Implement the RFC (cc @rust-lang/XXX -- can anyone write up mentoring\r\n      instructions?)\r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\n- [ ] Is this even worth having syntax for?\r\n- [ ] What's the right keyword for it? `yeet` is used for now to avoid priming any particular choice.\r\n- [ ] How should this work semantically?\r\n\r\n### Implementation history\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n\r\n- #96376\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96373/reactions", "total_count": 152, "+1": 37, "-1": 37, "laugh": 51, "hooray": 0, "confused": 6, "heart": 1, "rocket": 17, "eyes": 3}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96373/timeline", "performed_via_github_app": null, "state_reason": null}