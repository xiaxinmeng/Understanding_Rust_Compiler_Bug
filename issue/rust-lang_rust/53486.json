{"url": "https://api.github.com/repos/rust-lang/rust/issues/53486", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53486/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53486/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53486/events", "html_url": "https://github.com/rust-lang/rust/issues/53486", "id": 351885815, "node_id": "MDU6SXNzdWUzNTE4ODU4MTU=", "number": 53486, "title": "rustup component rust-src should be used to load cross-crate sources.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2018-08-19T08:44:56Z", "updated_at": "2020-04-03T04:18:35Z", "closed_at": "2020-04-03T04:18:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "If I take this arbitrary example (that supports cross-crate spans, via `tcx.def_span(...)`):\r\n```rust\r\nstruct Foo;\r\nimpl Extend<()> for Foo {\r\n    fn extend(&mut self, _: impl IntoIterator<Item = ()>) {}\r\n}\r\nfn main() {}\r\n```\r\n\r\nand compiling it with a local rustc build, I get this error (note the `libcore` snippet):\r\n(**NB**: if that snippet disappears, find other `tcx.def_span(...)`-using diagnostics and replace the test)\r\n```rust\r\nerror[E0643]: method `extend` has incompatible signature for trait\r\n   --> xcrate-span.rs:3:29\r\n    |\r\n3   |     fn extend(&mut self, _: impl IntoIterator<Item = ()>) {}\r\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected generic parameter, found `impl Trait`\r\n    |\r\n   ::: /home/eddy/Projects/rust-2/src/libcore/iter/traits.rs:355:15\r\n    |\r\n355 |     fn extend<T: IntoIterator<Item=A>>(&mut self, iter: T);\r\n    |               - declaration in trait here\r\n```\r\nbut if try with `rustup`-provided `rustc`, I only get this shorter error:\r\n```rust\r\nerror[E0643]: method `extend` has incompatible signature for trait\r\n   --> xcrate-spans.rs:3:29\r\n    |\r\n3   |     fn extend(&mut self, _: impl IntoIterator<Item = ()>) {}\r\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected generic parameter, found `impl Trait`\r\n```\r\n\r\nBut `$(rustc --print=sysroot)/lib/rustlib/src/rust/src/libcore/iter/traits.rs` *does exist*, because I have the `rust-src` component enabled (it's enabled by default, which makes it likely to exist for most users), so it should be possible *in theory*, to teach rustc to look up certain paths relative to `lib/rustlib/src/rust` inside the sysroot, if it exists.\r\n\r\nRunning this:\r\n```sh\r\nstrings $(rustc --print=sysroot)/lib/rustlib/*/lib/libcore-*.rlib | rg 'iter/traits\\.rs'\r\n```\r\nshows that `/checkout/src/libcore/iter/traits.rs` and `libcore/iter/traits.rs` both exist in the `rlib`, and I assume the former is the one that it tries to load - we can even test this:\r\n```sh\r\n# Let's live a little...\r\nsudo ln -s $(rustc --print=sysroot)/lib/rustlib/src/rust /checkout\r\n```\r\nTrying the test again, we now get:\r\n```rust\r\nerror[E0643]: method `extend` has incompatible signature for trait\r\n   --> xcrate-spans.rs:3:29\r\n    |\r\n3   |     fn extend(&mut self, _: impl IntoIterator<Item = ()>) {}\r\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected generic parameter, found `impl Trait`\r\n    |\r\n   ::: /checkout/src/libcore/iter/traits.rs:355:15\r\n    |\r\n355 |     fn extend<T: IntoIterator<Item=A>>(&mut self, iter: T);\r\n    |               - declaration in trait here\r\n```\r\n\r\nSo it's definitely compatible, the hash check passes and whatnot, we just need to rename `/checkout` to something artificial like `$rust`, I'm guessing.\r\n\r\n```sh\r\n# ... but also clean up afterwards.\r\nsudo rm /checkout\r\n```\r\n\r\ncc @alexcrichton @rust-lang/dev-tools @rust-lang/compiler ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53486/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53486/timeline", "performed_via_github_app": null, "state_reason": "completed"}