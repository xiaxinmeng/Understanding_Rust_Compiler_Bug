{"url": "https://api.github.com/repos/rust-lang/rust/issues/92454", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92454/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92454/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92454/events", "html_url": "https://github.com/rust-lang/rust/issues/92454", "id": 1091528350, "node_id": "I_kwDOAAsO6M5BD2ae", "number": 92454, "title": "Surprising diagnostics about using const value in match pattern", "user": {"login": "djc", "id": 158471, "node_id": "MDQ6VXNlcjE1ODQ3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/158471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djc", "html_url": "https://github.com/djc", "followers_url": "https://api.github.com/users/djc/followers", "following_url": "https://api.github.com/users/djc/following{/other_user}", "gists_url": "https://api.github.com/users/djc/gists{/gist_id}", "starred_url": "https://api.github.com/users/djc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djc/subscriptions", "organizations_url": "https://api.github.com/users/djc/orgs", "repos_url": "https://api.github.com/users/djc/repos", "events_url": "https://api.github.com/users/djc/events{/privacy}", "received_events_url": "https://api.github.com/users/djc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-12-31T11:06:47Z", "updated_at": "2022-04-20T17:39:36Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=48f1fc4c175b1e42b9e4e97d5412c053):\r\n\r\n```rust\r\nuse std::borrow::Cow;\r\n\r\nfn main() {\r\n    let foo = Foo { inner: \"foo\".into() };\r\n    println!(\"{}\", match foo {\r\n        FOO => \"match\",\r\n        _ => \"no\"\r\n    });\r\n}\r\n\r\n#[derive(PartialEq, Eq)]\r\nstruct Foo {\r\n    inner: Cow<'static, str>,\r\n}\r\n\r\nconst FOO: Foo = Foo { inner: Cow::Borrowed(\"foo\") };\r\n```\r\n\r\nThe current output is:\r\n\r\n```rust\r\nerror: to use a constant of type `Cow` in a pattern, `Cow` must be annotated with `#[derive(PartialEq, Eq)]`\r\n --> src/main.rs:6:9\r\n  |\r\n6 |         FOO => \"match\",\r\n  |         ^^^\r\n```\r\n\r\nSurprisingly to me at least, using a custom `PartialEq` implementation still results in the same issue ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=103ed753194b4eb0204ff034aaed73e9)):\r\n\r\n```rust\r\nstruct Foo {\r\n    inner: Cow<'static, str>,\r\n}\r\n\r\nimpl PartialEq for Foo {\r\n    fn eq(&self, other: &Self) -> bool {\r\n        self.inner.as_ref() == other.inner.as_ref()\r\n    }\r\n}\r\n\r\nimpl Eq for Foo {}\r\n```\r\n\r\nThis seems pretty unclear:\r\n\r\n* Why is the compiler telling me I should derive `PartialEq` for `Cow` when I'm comparing matching against `Foo`?\r\n* Why is the compiler telling me to derive `PartialEq` instead of having a custom impl?\r\n\r\nI don't know exactly what kind of contract `match` depends on, but I would have thought any kind of `PartialEq` impl (that is, even non-const) would be enough here.\r\n\r\nOriginal issue here: https://github.com/open-telemetry/opentelemetry-rust/issues/685. This also links to a potential fix in https://github.com/sfackler/rust-postgres/commit/05a0643cc02e95a9c10ae7936e8941cbdb62e07f (involving adding another layer of indirection), but I'd really like to understand why that is even necessary.\r\n\r\n(To be clear: the diagnostic is unclear here, but maybe there's an actual compiler problem here, too?)\r\n\r\ncc @estebank ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92454/timeline", "performed_via_github_app": null, "state_reason": null}