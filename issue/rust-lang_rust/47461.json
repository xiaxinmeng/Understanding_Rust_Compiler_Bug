{"url": "https://api.github.com/repos/rust-lang/rust/issues/47461", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47461/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47461/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47461/events", "html_url": "https://github.com/rust-lang/rust/issues/47461", "id": 288673242, "node_id": "MDU6SXNzdWUyODg2NzMyNDI=", "number": 47461, "title": "Inconsistent inlineing of Iterator Adaptors - Missed Optimizations", "user": {"login": "jonasbb", "id": 273459, "node_id": "MDQ6VXNlcjI3MzQ1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/273459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonasbb", "html_url": "https://github.com/jonasbb", "followers_url": "https://api.github.com/users/jonasbb/followers", "following_url": "https://api.github.com/users/jonasbb/following{/other_user}", "gists_url": "https://api.github.com/users/jonasbb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonasbb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonasbb/subscriptions", "organizations_url": "https://api.github.com/users/jonasbb/orgs", "repos_url": "https://api.github.com/users/jonasbb/repos", "events_url": "https://api.github.com/users/jonasbb/events{/privacy}", "received_events_url": "https://api.github.com/users/jonasbb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-01-15T17:48:40Z", "updated_at": "2022-05-15T16:10:15Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While profiling some rust code of me, I noticed that the following pattern does not optimize well:\r\n\r\n```rust\r\nvec![1,2,3,4]\r\n    .into_iter()\r\n    .map(|v| ...)\r\n    .skip_while(|v| ...)\r\n```\r\n\r\n`skip_while` is implemented using `find` and `find` is implemented using `try_fold`. The functions `SkipWhile::next()` and `Iterator::find()` use the `#[inline]` annotation. The function `Map::try_fold()` does not. This means that `Map::try_fold()` will not be inlined.\r\n\r\nI started looking at the source code and inlineing of iterators seems to follow no rule. I could not find any bug reports related to this.\r\n\r\n* [`Filter::try_fold` is inline](https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src/libcore/iter/mod.rs#L1396)\r\n* [`Enumerate::try_fold` is inline](https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src/libcore/iter/mod.rs#L1633)\r\n* [`Rev::try_fold` is not inline](https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src/libcore/iter/mod.rs#L427)\r\n\r\nSome iterators like [`Cloned`](https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src/libcore/iter/mod.rs#L515) do not have any function marked as inline. Not even `next()` is marked as inline.\r\n\r\nThe [PR introducing `try_fold`](https://github.com/rust-lang/rust/pull/45595) does not give justification why some `try_fold`s are inline and some are not.\r\n\r\nThe methods `len` and `is_empty` of `ExactSizeIterator`'s are also not marked as inlineable, even though they are always implemented as pass-through to the underlying iterator.\r\n\r\nIf desired I can prepare a pull request to mark those functions as inlineable. Is there a list of functions for the iterator traits (e.g., Iterator, ExactSizeIterator) which should be inline/not be inline?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47461/timeline", "performed_via_github_app": null, "state_reason": null}