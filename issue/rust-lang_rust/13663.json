{"url": "https://api.github.com/repos/rust-lang/rust/issues/13663", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/13663/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/13663/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/13663/events", "html_url": "https://github.com/rust-lang/rust/issues/13663", "id": 31912145, "node_id": "MDU6SXNzdWUzMTkxMjE0NQ==", "number": 13663, "title": "Seed RNGs with a uniform type", "user": {"login": "SiegeLord", "id": 480550, "node_id": "MDQ6VXNlcjQ4MDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/480550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLord", "html_url": "https://github.com/SiegeLord", "followers_url": "https://api.github.com/users/SiegeLord/followers", "following_url": "https://api.github.com/users/SiegeLord/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLord/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLord/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLord/orgs", "repos_url": "https://api.github.com/users/SiegeLord/repos", "events_url": "https://api.github.com/users/SiegeLord/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLord/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2014-04-21T18:09:11Z", "updated_at": "2015-11-05T09:43:54Z", "closed_at": "2015-11-05T09:43:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I think it would be convenient to have a uniform way to reseed all RNGs. Currently, each RNG could potentially use (and often does so in practice) a different seed type for the `SeedableRng` trait implementation. I propose that trait to have the following two methods (and an associated function) added:\n\n``` rust\n/// Number of bits needed to completely reseed the generator\nfn get_seed_size(&self) -> uint;\n\n/// Reseeds the RNG using an array of u64's, padded with 0's if needed.\n/// If more data is given than could be used, it is first reduced using a hash.\nfn reseed(&mut self, &[u64]);\nfn from_seed(&[u64]) -> Self;\n```\n\nThe current methods could either be removed, or renamed to `reseed_exact` etc. It currently appears that some RNGs already do something similar to what the proposed functions do, while others (e.g. `XorShiftRng`) require the complete state.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/13663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/13663/timeline", "performed_via_github_app": null, "state_reason": "completed"}