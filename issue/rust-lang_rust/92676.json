{"url": "https://api.github.com/repos/rust-lang/rust/issues/92676", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92676/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92676/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92676/events", "html_url": "https://github.com/rust-lang/rust/issues/92676", "id": 1097002220, "node_id": "I_kwDOAAsO6M5BYuzs", "number": 92676, "title": "Thread local storage link issue with Rust/wasm-ld/Emscripten", "user": {"login": "gregbuchholz", "id": 89703236, "node_id": "MDQ6VXNlcjg5NzAzMjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89703236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gregbuchholz", "html_url": "https://github.com/gregbuchholz", "followers_url": "https://api.github.com/users/gregbuchholz/followers", "following_url": "https://api.github.com/users/gregbuchholz/following{/other_user}", "gists_url": "https://api.github.com/users/gregbuchholz/gists{/gist_id}", "starred_url": "https://api.github.com/users/gregbuchholz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gregbuchholz/subscriptions", "organizations_url": "https://api.github.com/users/gregbuchholz/orgs", "repos_url": "https://api.github.com/users/gregbuchholz/repos", "events_url": "https://api.github.com/users/gregbuchholz/events{/privacy}", "received_events_url": "https://api.github.com/users/gregbuchholz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-01-08T18:21:33Z", "updated_at": "2022-01-30T00:21:50Z", "closed_at": "2022-01-30T00:21:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to narrow down the cause of a problem which occurs when trying to enable threads on a Rust program compiling to the `wasm32-unknown-emscripten` target.  A simple example:\r\n\r\n```Rust\r\nuse std::cell::Cell;\r\nuse std::thread;\r\n\r\nthread_local! { static VAR1: Cell<i32> = Cell::new(11111); }\r\n\r\nfn xs() {\r\n    for _ in 0 .. 10 { println!(\"X\"); }\r\n    println!(\"VAR1 in thread: {}\",VAR1.with(|v| {v.get()}));\r\n}\r\n\r\nfn main() {\r\n\r\n    println!(\"VAR1 in main before: {}\",VAR1.with(|v| {v.get()}));\r\n\r\n    let t1 = thread::spawn(xs);\r\n    VAR1.with(|v| {v.set(22222)});\r\n    println!(\"VAR1 in main after: {}\",VAR1.with(|v| {v.get()}));\r\n\r\n    t1.join().unwrap();\r\n}\r\n```\r\n...which compiles, but fails with a `wasm-ld` linker error shown below.  I have a small github [repository](https://github.com/gregbuchholz/thread_local_storage) with the source files and the capture of the error messages. I've extracted the failing `wasm-ld` command that yields the error, an placed it in the file [linker_command.sh](https://github.com/gregbuchholz/thread_local_storage/blob/main/linker_command.sh), which I've tried to ensure you can use without having to deal with Rust (or even have Rust installed).  All of the compiled [object files are included](https://github.com/gregbuchholz/thread_local_storage/tree/main/target/wasm32-unknown-emscripten/debug/deps) in the repository.  The [error](https://github.com/gregbuchholz/thread_local_storage/blob/main/error.txt) can be seen in the snippet below, with additional information provided by the `--verbose` option.  (Before running the script, you will have to set a couple of variable at the top of the script to point to your installation of emsdk and wasm-ld)\r\n\r\n    <snip a lot of \"Processing\" lines>\r\n\r\n    lld: -- createOutputSegments\r\n    lld: -- createSyntheticSections\r\n    lld: -- layoutMemory\r\n    lld: mem: global base = 1024\r\n    lld: mem: .tdata          offset=1024     size=72       align=2\r\n    lld: mem: .rodata         offset=1104     size=41484    align=4\r\n    lld: mem: .data           offset=42592    size=348      align=3\r\n    lld: mem: .bss            offset=42944    size=3184     align=4\r\n    lld: mem: __wasm_init_memory_flag offset=46128    size=4        align=4\r\n    lld: mem: static data = 45108\r\n    lld: mem: stack size  = 5242880\r\n    lld: mem: stack base  = 46144\r\n    lld: mem: stack top   = 5289024\r\n    lld: mem: heap base   = 5289024\r\n    lld: mem: total pages = 256\r\n    lld: mem: max pages   = 256\r\n    lld: -- createSyntheticSectionsPostLayout\r\n    lld: -- populateProducers\r\n    lld: -- calculateImports\r\n    lld: -- scanRelocations\r\n    lld: error: /home/greg/rust-examples/tls/target/wasm32-unknown-emscripten/debug/deps/Example.1b0wam0nd5eghoka.rcgu.o: \r\n        relocation R_WASM_MEMORY_ADDR_TLS_SLEB cannot be used against non-TLS symbol `Example::VAR1::__getit::__KEY::h9fd2473e7b8be3ac`\r\n    \r\n    <snip more errors of the same nature>\r\n\r\n    lld: -- finalizeIndirectFunctionTable\r\n    lld: -- populateTargetFeatures\r\n    lld: -- createSyntheticInitFunctions\r\n    lld: -- assignIndexes\r\n    lld: -- calculateInitFunctions\r\n\r\n...note the lack of a `.tbss` section reported above, but there is a `.tdata` and a `.bss` section.  The error message indicates that the symbols in question are not marked as thread local storage, but when using `wasm-objdump`, it seems like there are signs that the symbols are a part of thread local storage.  With the `-x` option (raw output in [dump-x.txt](https://github.com/gregbuchholz/thread_local_storage/blob/main/other/dump-x.txt) and [dump-x_rustfilt.txt](https://github.com/gregbuchholz/thread_local_storage/blob/main/other/dump-x_rustfilt.txt)):  \r\n\r\n    $ wasm-objdump -x ./target/wasm32-unknown-emscripten/debug/deps/Example.1b0wam0nd5eghoka.rcgu.o | rustfilt\r\n\r\n    Data[14]:\r\n    <snip>\r\n     - segment[13] <.tbss.Example::VAR1::__getit::__KEY> memory=0 size=12 - init i32=156\r\n      - 000009c: 0000 0000 0000 0000 0000 0000            ............\r\n    <snip>\r\n    Custom:\r\n     - name: \"linking\"\r\n      - symbol table [count=52]\r\n    <snip>\r\n       - 37: D <Example::VAR1::__getit::__KEY> segment=13 offset=0 size=12 [ binding=local vis=default ]\r\n    <snip>\r\n      - segment info [count=14]\r\n       - 0: .rodata..L__unnamed_8 p2align=0 [ ]\r\n       - 1: .rodata..L__unnamed_2 p2align=2 [ ]\r\n       - 2: .rodata..L__unnamed_3 p2align=2 [ ]\r\n       - 3: .rodata..L__unnamed_9 p2align=0 [ ]\r\n       - 4: .rodata..L__unnamed_10 p2align=0 [ ]\r\n       - 5: .rodata..L__unnamed_4 p2align=2 [ ]\r\n       - 6: .rodata..L__unnamed_1 p2align=2 [ ]\r\n       - 7: .rodata..L__unnamed_11 p2align=0 [ ]\r\n       - 8: .rodata..L__unnamed_5 p2align=2 [ ]\r\n       - 9: .rodata..L__unnamed_12 p2align=0 [ ]\r\n       - 10: .rodata..L__unnamed_6 p2align=2 [ ]\r\n       - 11: .rodata..L__unnamed_13 p2align=0 [ ]\r\n       - 12: .rodata..L__unnamed_7 p2align=2 [ ]\r\n       - 13: .tbss.Example::VAR1::__getit::__KEY p2align=2 [ TLS ]\r\n    Custom:\r\n     - name: \"reloc.CODE\"\r\n      - relocations for section: 5 (Code) [70]\r\n    <snip>\r\n       - R_WASM_MEMORY_ADDR_TLS_SLEB offset=0x000816(file=0x000e9a) symbol=37 <Example::VAR1::__getit::__KEY>\r\n    <snip>\r\n\r\n     - name: \"reloc..debug_info\"\r\n      - relocations for section: 8 (.debug_info) [242]\r\n     <snip>\r\n       - R_WASM_MEMORY_ADDR_I32 offset=0x000043(file=0x003910) symbol=37 <Example::VAR1::__getit::__KEY>\r\n\r\n...you will notice segment 13 has both .tbss and [TLS] mentioned and with `wasm-objdump -d -r` ([dump-d.txt](./other/dump-d.txt) and [dump-d_rustfilt.txt](./other/dump-d_rustfilt.txt)):\r\n\r\n    $ wasm-objdump -d -r ./target/wasm32-unknown-emscripten/debug/deps/Example.1b0wam0nd5eghoka.rcgu.o | rustfilt\r\n\r\n    <snip>\r\n    000e99: 41 9c 81 80 80 00          | i32.const 156\r\n              000e9a: R_WASM_MEMORY_ADDR_TLS_SLEB 37 <Example::VAR1::__getit::__KEY>\r\n    000e9f: 21 00                      | local.set 0\r\n    000ea1: 23 81 80 80 80 00          | global.get 1 <env.__tls_base>\r\n              000ea2: R_WASM_GLOBAL_INDEX_LEB 18 <env.__tls_base>\r\n\r\n(where the files ending in [rustfilt](https://github.com/luser/rustfilt) have been passed through the rust name demangler).\r\n\r\nThe `wasm-ld` error message comes from `scanRelocations` function in [Relocations.cpp](https://github.com/llvm/llvm-project/blob/304d30bc594bf99bba9ee780007ac78755a9ff7a/lld/wasm/Relocations.cpp#L120-L123) at line #120.  \r\n![](https://github.com/gregbuchholz/thread_local_storage/blob/main/images/sym_isTLS.jpg)\r\n\r\nThat function uses the [isTLS()](https://github.com/llvm/llvm-project/blob/2899e8de67aae052e6c93b95a2fd152c86e0aefc/lld/wasm/Symbols.cpp#L213) method, which uses `WASM_SYMBOL_TLS`. There are only a select few places where that flag appears:\r\n\r\n    /emsdk/llvm/git/src$ find . -type f \\( -name \"*.h\" -o -name \"*.cpp\" \\) -exec grep -H  WASM_SYMBOL_TLS {} \\;\r\n      ./lld/wasm/Symbols.cpp:bool Symbol::isTLS() const { return flags & WASM_SYMBOL_TLS; }\r\n      ./lld/wasm/InputFiles.cpp:      flags |= WASM_SYMBOL_TLS;\r\n      ./llvm/include/llvm/BinaryFormat/Wasm.h:const unsigned WASM_SYMBOL_TLS = 0x100;\r\n      ./llvm/include/llvm/MC/MCSymbolWasm.h:  bool isTLS() const { return getFlags() & wasm::WASM_SYMBOL_TLS; }\r\n      ./llvm/include/llvm/MC/MCSymbolWasm.h:    modifyFlags(wasm::WASM_SYMBOL_TLS, wasm::WASM_SYMBOL_TLS);\r\n      ./llvm/lib/MC/WasmObjectWriter.cpp:      Flags |= wasm::WASM_SYMBOL_TLS;\r\n\r\n...the one from [InputFiles.cpp](https://github.com/llvm/llvm-project/blob/main/lld/wasm/InputFiles.cpp) is part of the [ObjFile::createDefined](https://github.com/llvm/llvm-project/blob/1eb5b6e85045d22720f177a02aaf7097930e4b4f/lld/wasm/InputFiles.cpp#L581-L587) method which has the following:\r\n\r\n```C\r\n      case WASM_SYMBOL_TYPE_DATA: {\r\n        InputChunk *seg = segments[sym.Info.DataRef.Segment];\r\n        auto offset = sym.Info.DataRef.Offset;\r\n        auto size = sym.Info.DataRef.Size;\r\n        if (seg->implicitTLS) {\r\n          flags |= WASM_SYMBOL_TLS;\r\n    }\r\n```\r\n...and when you look at where `seg->implicitTLS` gets [set](https://github.com/llvm/llvm-project/blob/1eb5b6e85045d22720f177a02aaf7097930e4b4f/lld/wasm/InputFiles.cpp#L478-L485):\r\n\r\n```C\r\n    // Older object files did not include WASM_SEG_FLAG_TLS and instead\r\n    // relied on the naming convention.  To maintain compat with such objects\r\n    // we still imply the TLS flag based on the name of the segment.\r\n    if (!seg->isTLS() &&\r\n        (seg->name.startswith(\".tdata\") || seg->name.startswith(\".tbss\"))) {\r\n      seg->flags |= WASM_SEG_FLAG_TLS;\r\n      seg->implicitTLS = true;\r\n    }\r\n```\r\n...but when stepping through the code with the debugger, I see that `seg->isTLS()` appears to be [true for the segment](https://github.com/gregbuchholz/thread_local_storage/blob/main/images/seg.isTLS_after.jpg) that the `Example::VAR1::__getit::__KEY::h9fd2473e7b8be3ac` symbol is in, so it doesn't set the implicitTLS flag, and thus presumably wouldn't set the `flags |= WASM_SYMBOL_TLS;` and therefore isTLS() wouldn't ever be true on the symbol itself, and you always would get the linker error in Relocations.cpp.  The \"flags\" for that symbol are 2 as can be seen from the screenshot above.  But the \"always failing\" assumption must be false, since Emscripten can work with thread local data, as shown by this [C program](https://github.com/gregbuchholz/thread_local_storage/tree/main/src/c_example), which does essentially the same thing as the Rust program, and uses both `.tdata` and `.tbss` sections without issue (see the [example assembly](https://github.com/gregbuchholz/thread_local_storage/blob/main/src/c_example/example.s) below) (build by using `make wasm` in that directory (and see the other targets)).\r\n\r\n        .type\tvariable1,@object               # @variable1\r\n        .section\t.tdata.variable1,\"T\",@\r\n        .globl\tvariable1\r\n        .p2align\t2\r\n    variable1:\r\n        .int32\t1                               # 0x1\r\n        .size\tvariable1, 4\r\n\r\n        .type\tvariable2,@object               # @variable2\r\n        .section\t.tbss.variable2,\"T\",@\r\n        .globl\tvariable2\r\n        .p2align\t2\r\n    variable2:\r\n        .int32\t0                               # 0x0\r\n        .size\tvariable2, 4\r\n\r\n...*and* the fact that there are other symbols that are marked as \"R_WASM_MEMORY_ADDR_TLS_SLEB\" in the rust originated object file, but that don't report linking problems.  From the '-x' wasm-objdump file:\r\n\r\n       - 17: D <__THREW__> [ undefined binding=global vis=default ]\r\n       <snip>\r\n        Custom:\r\n         - name: \"reloc.CODE\"\r\n          - relocations for section: 5 (Code) [70]\r\n           - R_WASM_MEMORY_ADDR_TLS_SLEB offset=0x0006c5(file=0x000d49) symbol=17 <__THREW__>\r\n\r\nI thought it might be related to the [this issue](https://github.com/emscripten-core/emscripten/pull/14982#issuecomment-909735685) which sounds like there was a problem because the debug symbols weren't part of the thread local storage, but the same link error occurs when building without debugging symbols. (The object files for the `--release` build are [here](https://github.com/gregbuchholz/thread_local_storage/tree/main/target/wasm32-unknown-emscripten/release/deps) as well). \r\n\r\nAnyone have thoughts on a good place to start diving into this issue more? Would it be more productive to try and determine why the --verbose output of wasm-ld doesn't have the .tbss section listed?  Maybe start looking into MIR?  If there is another more appropriate place to ask about this issue, please let me know.  It seems like it may be sort of a cross-cutting issue.  I did find the following comment interesting in [rustc_codegen_llvm/src/consts.rs](https://github.com/rust-lang/rust/blob/66f64a441a05cee8d5d701477b43ed851f778f3a/compiler/rustc_codegen_llvm/src/consts.rs#L285-L290)\r\n\r\n```Rust\r\n        // Thread-local statics in some other crate need to *always* be linked\r\n        // against in a thread-local fashion, so we need to be sure to apply the\r\n        // thread-local attribute locally if it was present remotely. If we\r\n        // don't do this then linker errors can be generated where the linker\r\n        // complains that one object files has a thread local version of the\r\n        // symbol and another one doesn't.\r\n        if fn_attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL) {\r\n            llvm::set_thread_local_mode(g, self.tls_model);\r\n        }\r\n```\r\n...only because it mentions thread local storage and link errors, so that might just be a red herring. \r\n\r\nThe versions of the various programs:\r\n\r\n    $ wasm-ld --version\r\n    LLD 14.0.0\r\n\r\n    $ wasm-objdump --version\r\n    1.0.25\r\n\r\n    $ emcc -v\r\n    emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 3.1.1-git (f8b200a67ebaae3cfdf26600d05a5ab90f14557b)\r\n    clang version 14.0.0 (https://github.com/llvm/llvm-project.git eec312ee7f97638508679169cbf4b5183d0b1112)\r\n    Target: wasm32-unknown-emscripten\r\n    Thread model: posix\r\n    InstalledDir: /home/greg/Extras/emsdk/llvm/git/build_main_64/bin\r\n\r\n    $ rustc +nightly --version\r\n    rustc 1.59.0-nightly (e012a191d 2022-01-06)\r\n\r\n...although I've tried with earlier emscripten 2.0.34 and 3.0.0, along with earlier versions of stable and nightly rust, all with the same results.\r\n\r\nTo generate the object files from the rust source, compile the stub:\r\n\r\n    cd src\r\n    em++ -c gxx_personality_v0_stub.cpp -pthread\r\n\r\n...and then invoke the command:\r\n\r\n    cargo +nightly build --target=wasm32-unknown-emscripten -Z build-std=panic_abort,std\r\n\r\n(If anyone is interested stepping through wasm-ld, there is also a vscode [launch configuration file](https://github.com/gregbuchholz/thread_local_storage/blob/main/other/launch.json) in the repository that will help with setting the arguments to lld, but you'll need to edit it to reflect the location the object files on your computer.)\r\n", "closed_by": {"login": "gregbuchholz", "id": 89703236, "node_id": "MDQ6VXNlcjg5NzAzMjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89703236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gregbuchholz", "html_url": "https://github.com/gregbuchholz", "followers_url": "https://api.github.com/users/gregbuchholz/followers", "following_url": "https://api.github.com/users/gregbuchholz/following{/other_user}", "gists_url": "https://api.github.com/users/gregbuchholz/gists{/gist_id}", "starred_url": "https://api.github.com/users/gregbuchholz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gregbuchholz/subscriptions", "organizations_url": "https://api.github.com/users/gregbuchholz/orgs", "repos_url": "https://api.github.com/users/gregbuchholz/repos", "events_url": "https://api.github.com/users/gregbuchholz/events{/privacy}", "received_events_url": "https://api.github.com/users/gregbuchholz/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92676/timeline", "performed_via_github_app": null, "state_reason": "completed"}