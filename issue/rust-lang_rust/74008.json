{"url": "https://api.github.com/repos/rust-lang/rust/issues/74008", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74008/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74008/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74008/events", "html_url": "https://github.com/rust-lang/rust/issues/74008", "id": 650730863, "node_id": "MDU6SXNzdWU2NTA3MzA4NjM=", "number": 74008, "title": "Improving error messages for associated constants", "user": {"login": "e2-71828", "id": 26780705, "node_id": "MDQ6VXNlcjI2NzgwNzA1", "avatar_url": "https://avatars.githubusercontent.com/u/26780705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/e2-71828", "html_url": "https://github.com/e2-71828", "followers_url": "https://api.github.com/users/e2-71828/followers", "following_url": "https://api.github.com/users/e2-71828/following{/other_user}", "gists_url": "https://api.github.com/users/e2-71828/gists{/gist_id}", "starred_url": "https://api.github.com/users/e2-71828/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/e2-71828/subscriptions", "organizations_url": "https://api.github.com/users/e2-71828/orgs", "repos_url": "https://api.github.com/users/e2-71828/repos", "events_url": "https://api.github.com/users/e2-71828/events{/privacy}", "received_events_url": "https://api.github.com/users/e2-71828/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-03T18:52:52Z", "updated_at": "2020-07-03T19:02:29Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "When there's an error in an associated constant, the default error message doesn't contain enough context for me to find the actual problem. Is there any way to get rustc to say what the values of the type parameters were when the error occurred?\r\n\r\nAs a somewhat contrived example, consider the code below. The errors are quite legitimate, because page4 has been declared with a header type too big for the page, but there's no indication in the error as to the root cause, which is that an incompatible type parameter was specified.\r\n\r\nIdeally, the error message would include either the monomorphized type parameters that were in effect when the error was discovered or the line of code that triggered the erroneous code to be generated.\r\n\r\n```rust\r\nuse std::mem;\r\nuse std::marker::PhantomData;\r\n\r\nconst PAGE_SIZE:usize = 4096;\r\n\r\nstruct Page<Head, Rec> {\r\n    #[allow(dead_code)]\r\n    bytes: [u8;PAGE_SIZE],\r\n    head:PhantomData<Head>,\r\n    rec:PhantomData<Rec>\r\n}\r\n\r\nimpl<Head,Rec> Page<Head,Rec> {\r\n    const PAYLOAD_SIZE:usize = PAGE_SIZE - mem::size_of::<Head>();\r\n    const CAPACITY:usize = Self::PAYLOAD_SIZE / mem::size_of::<Rec>();\r\n    \r\n    fn get_capacity(&self)->usize { Self::CAPACITY }\r\n    fn new()-> Self { Page{ bytes: [0u8; PAGE_SIZE], head:PhantomData, rec:PhantomData }}\r\n}\r\n\r\nfn main() {\r\n    let page1:Page<usize,usize> = Page::new();\r\n    println!(\"Page 1 capacity: {:?}\", page1.get_capacity());\r\n\r\n    let page2:Page<usize,[usize;200]> = Page::new();\r\n    println!(\"Page 2 capacity: {:?}\", page2.get_capacity());\r\n    \r\n    let page3:Page<usize,[usize;800]> = Page::new();\r\n    println!(\"Page 3 capacity: {:?}\", page3.get_capacity());\r\n    \r\n    let page4:Page<[usize;600], usize> = Page::new();\r\n    println!(\"Page 4 capacity: {:?}\", page4.get_capacity());\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=50c2b0bf9eeb5e48e541e5717f67fd27))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror: any use of this value will cause an error\r\n  --> src/main.rs:14:32\r\n   |\r\n14 |     const PAYLOAD_SIZE:usize = PAGE_SIZE - mem::size_of::<Head>();\r\n   |     ---------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\r\n   |                                |\r\n   |                                attempt to subtract with overflow\r\n   |\r\n   = note: `#[deny(const_err)]` on by default\r\n\r\nerror: any use of this value will cause an error\r\n  --> src/main.rs:15:28\r\n   |\r\n15 |     const CAPACITY:usize = Self::PAYLOAD_SIZE / mem::size_of::<Rec>();\r\n   |     -----------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\r\n   |                            |\r\n   |                            referenced constant has errors\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nerror: could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74008/timeline", "performed_via_github_app": null, "state_reason": null}