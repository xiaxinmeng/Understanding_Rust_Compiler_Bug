{"url": "https://api.github.com/repos/rust-lang/rust/issues/52460", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52460/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52460/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52460/events", "html_url": "https://github.com/rust-lang/rust/issues/52460", "id": 341980643, "node_id": "MDU6SXNzdWUzNDE5ODA2NDM=", "number": 52460, "title": "experiment with \"inverting\" liveness to improve perf of html5ever", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}, {"id": 867466241, "node_id": "MDU6TGFiZWw4Njc0NjYyNDE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-performant", "name": "NLL-performant", "color": "f799ea", "default": false, "description": "Working towards the \"performance is good\" goal"}], "state": "closed", "locked": false, "assignee": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/54", "html_url": "https://github.com/rust-lang/rust/milestone/54", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/54/labels", "id": 3463305, "node_id": "MDk6TWlsZXN0b25lMzQ2MzMwNQ==", "number": 54, "title": "Rust 2018 RC", "description": "See https://internals.rust-lang.org/t/rust-2018-the-home-stretch/7810", "creator": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 64, "state": "closed", "created_at": "2018-06-29T18:51:29Z", "updated_at": "2020-06-16T05:11:03Z", "due_on": "2018-09-13T07:00:00Z", "closed_at": "2018-11-16T11:06:58Z"}, "comments": 1, "created_at": "2018-07-17T15:52:49Z", "updated_at": "2018-08-28T13:12:31Z", "closed_at": "2018-08-28T13:12:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "html5ever profiles are dominated by code that \"applies\" the result of computing liveness. In thinking over how this code works, it seems like it might be better to \"invert\". Currently what happens is this:\r\n\r\n- The `util/liveness` code computes, for each point in the CFG, the set of live variables at each point\r\n  - but we want to distinguish two kinds of liveness: live because it will be used, and live because it will be dropped\r\n  - so actually we run the analysis twice \r\n  - these results are stored as a bitset of variables per program point\r\n- Then the NLL typeck code goes over each program point. For each point, it looks at each live variable at that point, and identifies the regions within that variable's type. Those regions are set to be live at that point.\r\n  - these results are stored as a bitset of program points per region\r\n\r\nYou can see here the mismatch: in the first case, we store a bitset of variables per point, and in the later, a bitset of points per region. This results in a lot of \"conversion\" instructions.\r\n\r\nI was thinking that it might be more efficient to do the liveness in an inverted sense. Instead of re-using the `util/liveness` code, we would do the following:\r\n\r\n- Do one pass over the CFG to create an index mapping each variable to the points where it is referenced (this ought to be roughly an O(n) walk).\r\n- For each variable V whose type T contains regions:\r\n  - We would walk **backward** from each use to find the defs that dominate them.\r\n  - Each block that we visit is a place where V is live, so we can accumulate those blocks into a sparse bit set. \r\n    - Depending on how we organize the index of uses above, we can make this particularly efficient I imagine, since we should be able to cheaply answer the question \"is V defined anywhere in this basic block\".\r\n    - We can also handle the drop-live vs use-live distinction as part of this walk in a relatively straightforward fashion I imagine. When we are walking backwards from a drop, we mark points as drop-live and stop at any use *or* definition (since, from that point back, the value is either use-live or not live at all). \r\n- Once we are done we should have a bit set of points where V is live and a bit set of drop-live points.\r\n  - We then iterate over region R in the type of T and merge that live-set into its value.\r\n  - Similarly for the drop-live points, but only over the relevant regions.\r\n\r\nThis isn't fundamentally different but it has a few potential advantages:\r\n\r\n- We enumerate the regions in the type of each variable ONCE -- and when we do it, we have the full set of live points in hand\r\n- We don't have to do two liveness computations or deal with the somewhat messy job of stitching them back together\r\n\r\nOne complication I remember now is that for drop-live we also do need the results of initialization at each point. That could be a bit of a pain to reconcile, have to think about it.\r\n\r\nAll in all, not an easy change, but maybe a good one.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52460/timeline", "performed_via_github_app": null, "state_reason": "completed"}