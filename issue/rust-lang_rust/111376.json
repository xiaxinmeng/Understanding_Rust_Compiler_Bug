{"url": "https://api.github.com/repos/rust-lang/rust/issues/111376", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111376/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111376/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111376/events", "html_url": "https://github.com/rust-lang/rust/issues/111376", "id": 1701118823, "node_id": "I_kwDOAAsO6M5lZQNn", "number": 111376, "title": "Moving structs with Copy fields into closures causes surprising behavior", "user": {"login": "alexblanck", "id": 685344, "node_id": "MDQ6VXNlcjY4NTM0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/685344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexblanck", "html_url": "https://github.com/alexblanck", "followers_url": "https://api.github.com/users/alexblanck/followers", "following_url": "https://api.github.com/users/alexblanck/following{/other_user}", "gists_url": "https://api.github.com/users/alexblanck/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexblanck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexblanck/subscriptions", "organizations_url": "https://api.github.com/users/alexblanck/orgs", "repos_url": "https://api.github.com/users/alexblanck/repos", "events_url": "https://api.github.com/users/alexblanck/events{/privacy}", "received_events_url": "https://api.github.com/users/alexblanck/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-05-09T00:27:33Z", "updated_at": "2023-05-15T23:39:39Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I noticed some counterintuitive behavior related to partial moves of Copy struct fields (ex: u64 fields) into closures.\r\n\r\n## Minimal Reproducible Example\r\n\r\n```rust\r\n#[derive(Debug)]\r\nstruct Statistics {\r\n    calls: u64,\r\n    successes: u64,\r\n}\r\n\r\nfn main() {\r\n    let mut statistics = Statistics {\r\n        calls: 0,\r\n        successes: 0,\r\n    };\r\n    \r\n    let mut generator = move || {\r\n        statistics.calls += 1;\r\n    };\r\n    \r\n    generator();\r\n    statistics.successes += 1;\r\n\r\n    println!(\"{statistics:?}\");\r\n}\r\n```\r\n\r\nThis code compiles and prints\r\n```\r\nStatistics { calls: 0, successes: 1 }\r\n```\r\n\r\n[Playground Link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=c4180fa1795ad2b77b0c0aa28aeaf37a)\r\n\r\n## What I Expected\r\n\r\nI would have expected a `borrow of partially moved value: 'statistics'` error at the `println!`, since the closure takes ownership of the `statistics.calls` field and then the field is later read by the print call.\r\n\r\nThe actual behavior, where the updates to `statistics.calls` have no observable effect, looks just like a silent copy of the whole struct. This surprised me. When I wrote the code, I expected either a compiler error or an output of `Statistics { calls: 1, successes: 1 }`.\r\n\r\n## Investigation\r\n\r\nI experimented a bit with the types of the fields within the struct, and I do get the compiler error I expect if `Statistics.calls` is a non-Copy type like `Vec`.\r\n\r\nI didn't know about partial moves when I wrote the initial code. I expected the whole struct to move into the closure. It's still surprising to me that partial moves can create this type of \"silent copy\" behavior depending on the type of the struct's fields.\r\n\r\nI did find a similar issue titled [Move closure copies :Copy variables silently](https://github.com/rust-lang/rust/issues/63220), but the code that I wrote is not covered by the \"unused variable\" warning added in response to that issue.\r\n\r\n## Solution\r\n\r\nI'm new to Rust so I'm not sure this is a bug, but it's still confusing behavior. Perhaps, like the other issue I linked, there is room for a lint or warning here. Something that warned me that the closure's modification of `statistics.calls` had no effect would be helpful, for example.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111376/timeline", "performed_via_github_app": null, "state_reason": null}