{"url": "https://api.github.com/repos/rust-lang/rust/issues/94256", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94256/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94256/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94256/events", "html_url": "https://github.com/rust-lang/rust/issues/94256", "id": 1146895779, "node_id": "I_kwDOAAsO6M5EXD2j", "number": 94256, "title": "[ER] slice::partial_sort ?", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-02-22T13:12:35Z", "updated_at": "2022-02-23T15:02:46Z", "closed_at": "2022-02-23T15:02:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Rust code that uses Itertools I see code like\r\n\r\ndata.sorted().rev().take(3)...\r\n\r\nOr more generally I see sorting + take. In such cases when the number of items to take is small it's better to use a faster algorithm that sorts only those few items. This is the partialSort() of the D language stdlib:\r\n\r\nhttps://dlang.org/phobos/std_algorithm_sorting.html#partialSort\r\n\r\nCurrently in Rust this could be done efficiently using select_nth_unstable() followed by sort() of just the first items.", "closed_by": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94256/timeline", "performed_via_github_app": null, "state_reason": "completed"}