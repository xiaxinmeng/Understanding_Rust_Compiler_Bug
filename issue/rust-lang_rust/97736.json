{"url": "https://api.github.com/repos/rust-lang/rust/issues/97736", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97736/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97736/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97736/events", "html_url": "https://github.com/rust-lang/rust/issues/97736", "id": 1260861216, "node_id": "I_kwDOAAsO6M5LJzcg", "number": 97736, "title": "False unconstrained type error and unresolved lifetime", "user": {"login": "jquesada2016", "id": 54370171, "node_id": "MDQ6VXNlcjU0MzcwMTcx", "avatar_url": "https://avatars.githubusercontent.com/u/54370171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jquesada2016", "html_url": "https://github.com/jquesada2016", "followers_url": "https://api.github.com/users/jquesada2016/followers", "following_url": "https://api.github.com/users/jquesada2016/following{/other_user}", "gists_url": "https://api.github.com/users/jquesada2016/gists{/gist_id}", "starred_url": "https://api.github.com/users/jquesada2016/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jquesada2016/subscriptions", "organizations_url": "https://api.github.com/users/jquesada2016/orgs", "repos_url": "https://api.github.com/users/jquesada2016/repos", "events_url": "https://api.github.com/users/jquesada2016/events{/privacy}", "received_events_url": "https://api.github.com/users/jquesada2016/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-06-04T18:18:09Z", "updated_at": "2022-06-04T21:35:00Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nSorry about the title, but I'm not sure how else to describe it.\r\n\r\nTaken the following code:\r\n\r\n```rust\r\nstruct IterRef<T>(T);\r\n\r\nimpl<'a, T, Item, IntoIter> IntoIterator for IterRef<T>\r\nwhere\r\n    &'a T: IntoIterator<Item = Item, IntoIter = IntoIter>,\r\n    IntoIter: Iterator<Item = Item>,\r\n{\r\n    type Item = Item;\r\n    type IntoIter = IntoIter;\r\n\r\n    fn into_iter(self) -> Self::IntoIter {\r\n        let t = &self.0;\r\n\r\n        t.into_iter()\r\n    }\r\n}\r\n```\r\n\r\nBoth `Iter` and `IntoIter` generic parameters result in a \"not constrained\" error. However, If I do the following instead:\r\n\r\n```rust\r\nimpl<T, Item, IntoIter> IntoIterator for IterRef<T>\r\nwhere\r\n    for<'a> &'a T: IntoIterator<Item = Item, IntoIter = IntoIter>,\r\n    IntoIter: Iterator<Item = Item>,\r\n{\r\n    type Item = Item;\r\n    type IntoIter = IntoIter;\r\n\r\n    fn into_iter(self) -> Self::IntoIter {\r\n        let t = &self.0;\r\n\r\n        t.into_iter()\r\n    }\r\n}\r\n```\r\n\r\nThen this error goes away, but I then get another error.\r\n\r\nIf we add a test to the code, such as the following:\r\n```rust\r\nfn _test() {\r\n    let v = vec![1, 2, 3];\r\n    let iter_ref = IterRef(v);\r\n\r\n    for i in iter_ref {\r\n        println!(\"{i}\")\r\n    }\r\n}\r\n```\r\n\r\nThen I get an error saying `Ref<T>` does not implement `IntoIterator`, which it does, as confirmed by a help message below the error. The full error is:\r\n\r\n```\r\n    Checking frappe-tea v0.0.0 (/home/joseprogdp/dev/rust/crates/frappe-tea/frappe-tea)\r\nerror[E0277]: the trait bound `reactive::IterRef<std::vec::Vec<{integer}>>: std::iter::IntoIterator` is not satisfied\r\n   --> src/reactive.rs:420:14\r\n    |\r\n420 |     for i in iter_ref {\r\n    |              ^^^^^^^^ the trait `std::iter::IntoIterator` is not implemented for `reactive::IterRef<std::vec::Vec<{integer}>>`\r\n    |\r\n    = help: the trait `std::iter::IntoIterator` is implemented for `reactive::IterRef<T>`\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `frappe-tea` due to previous error\r\n[Finished running. Exit status: 101]\r\n```\r\n\r\nWe can confirm this is true by doing the following slight modification:\r\n```rust\r\nimpl<'a, T, Item, IntoIter> IntoIterator for &'a IterRef<T>\r\nwhere\r\n    &'a T: IntoIterator<Item = Item, IntoIter = IntoIter>,\r\n    IntoIter: Iterator<Item = Item>,\r\n{\r\n    type Item = Item;\r\n    type IntoIter = IntoIter;\r\n\r\n    fn into_iter(self) -> Self::IntoIter {\r\n        let t = &self.0;\r\n\r\n        t.into_iter()\r\n    }\r\n}\r\n\r\nfn _test() {\r\n    let v = vec![1, 2, 3];\r\n    let iter_ref = IterRef(v);\r\n\r\n    for i in &iter_ref {\r\n        println!(\"{i}\")\r\n    }\r\n}\r\n```\r\n\r\nTo recap these modifications, what we did is:\r\n1. Reintroduce a `'a` lifetime which previously created an unconstrained type error\r\n2. added the `'a` lifetime to `Ref<T>`\r\n3. changed from `... in iter_ref` to `... in &iter_ref` to match back up with the original trait impl\r\n\r\nI expected both\r\n```rust\r\nimpl<'a, T, Item, IntoIter> IntoIterator for IterRef<T>\r\nwhere\r\n    &'a T: IntoIterator<Item = Item, IntoIter = IntoIter>,\r\n    IntoIter: Iterator<Item = Item>,\r\n{\r\n  /* ... */\r\n}\r\n```\r\n\r\nand\r\n\r\n```rust\r\nimpl<T, Item, IntoIter> IntoIterator for IterRef<T>\r\nwhere\r\n    for<'a> &'a T: IntoIterator<Item = Item, IntoIter = IntoIter>,\r\n    IntoIter: Iterator<Item = Item>,\r\n{\r\n  /* ... */\r\n}\r\n```\r\n\r\nto work, and not just the \r\n```rust\r\nimpl<'a, T, Item, IntoIter> IntoIterator for &'a IterRef<T>\r\nwhere\r\n    &'a T: IntoIterator<Item = Item, IntoIter = IntoIter>,\r\n    IntoIter: Iterator<Item = Item>,\r\n{\r\n  /* ... */\r\n}\r\n```\r\n\r\nto be the only variation to work.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n\r\n```\r\nrustc 1.63.0-nightly (a6b8c6954 2022-06-03)\r\nbinary: rustc\r\ncommit-hash: a6b8c6954829669a5c4fa320c3e6132edf04fcfc\r\ncommit-date: 2022-06-03\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.63.0-nightly\r\nLLVM version: 14.0.4\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nerror[E0207]: the type parameter `Item` is not constrained by the impl trait, self type, or predicates\r\n   --> src/reactive.rs:401:13\r\n    |\r\n401 | impl<'a, T, Item, IntoIter> IntoIterator for IterRef<T>\r\n    |             ^^^^ unconstrained type parameter\r\n\r\nerror[E0207]: the type parameter `IntoIter` is not constrained by the impl trait, self type, or predicates\r\n   --> src/reactive.rs:401:19\r\n    |\r\n401 | impl<'a, T, Item, IntoIter> IntoIterator for IterRef<T>\r\n    |                   ^^^^^^^^ unconstrained type parameter\r\n\r\nFor more information about this error, try `rustc --explain E0207`.\r\nerror: could not compile `frappe-tea` due to 2 previous errors\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n### Disclaimer\r\nI apologize if I filled out the bug report incorrectly. I am legally blind and might have misplaced a backtick somewhere! :P", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97736/timeline", "performed_via_github_app": null, "state_reason": null}