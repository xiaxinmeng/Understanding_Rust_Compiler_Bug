{"url": "https://api.github.com/repos/rust-lang/rust/issues/81322", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81322/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81322/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81322/events", "html_url": "https://github.com/rust-lang/rust/issues/81322", "id": 792725509, "node_id": "MDU6SXNzdWU3OTI3MjU1MDk=", "number": 81322, "title": "Tracking Issue for `result_swap`", "user": {"login": "gymore-io", "id": 76853528, "node_id": "MDQ6VXNlcjc2ODUzNTI4", "avatar_url": "https://avatars.githubusercontent.com/u/76853528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gymore-io", "html_url": "https://github.com/gymore-io", "followers_url": "https://api.github.com/users/gymore-io/followers", "following_url": "https://api.github.com/users/gymore-io/following{/other_user}", "gists_url": "https://api.github.com/users/gymore-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/gymore-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gymore-io/subscriptions", "organizations_url": "https://api.github.com/users/gymore-io/orgs", "repos_url": "https://api.github.com/users/gymore-io/repos", "events_url": "https://api.github.com/users/gymore-io/events{/privacy}", "received_events_url": "https://api.github.com/users/gymore-io/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2238600090, "node_id": "MDU6TGFiZWwyMjM4NjAwMDkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-result-option", "name": "A-result-option", "color": "f7e101", "default": false, "description": "Area: Result and Option combinators"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-01-24T05:31:52Z", "updated_at": "2021-01-24T16:02:42Z", "closed_at": "2021-01-24T16:02:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Feature gate: `#![feature(result_swap)]`\r\n\r\nThis is a tracking issue for `result_swap`\r\n\r\nI propose the addition of a `swap` method for the `Result` type that would basically turn an `Ok` into an `Err` and the other way around.\r\n\r\n### Motivation\r\n\r\nThis would obviously allow more straightforward code when one need to propagate the success type of a function as an error.\r\n\r\n```rust\r\nfn my_function(vec: &mut Vec<u8>) -> Result<usize, usize> {\r\n    // The value should not be found in the given vector.\r\n    let b = vec.binary_search(&10).swap()?;\r\n    vec.insert(b, 10);\r\n\r\n    Ok(b)\r\n}\r\n```\r\n\r\nUsed with the `Result` constructors that are present on `Option`, this method also can come in handy.\r\n\r\n```rust\r\nfn expect_none(o: Option<u8>) -> Result<(), u8> {\r\n    o.ok_or(()).swap()\r\n}\r\n```\r\n\r\nNote that this second case could also be fixed with something like `err_or` (being discussed here #80190).\r\n\r\n### Steps\r\n\r\n- [x] Initial implementation (PR #81323)\r\n- - [x] Write tests\r\n- [ ] Adjust documentation\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- The name `swap` may be confused with the already-used semantic of `mem::swap` or `slice::swap` which both have a slightly different meaning. The alternative I had for this matter was the name `not` (the function basically inverts the meaning of the `Result`) but I think it makes it even more confusing.\r\n- Do we want an `Option::swap` equivalent that would map `Some(old_value)` to `None` and `None` to `Some(new_value)` where `new_value` is a parameter of `Option::swap`? Such a function would probably require a `Option::swap_with` counterpart that takes a `FnOnce() -> T`.", "closed_by": {"login": "gymore-io", "id": 76853528, "node_id": "MDQ6VXNlcjc2ODUzNTI4", "avatar_url": "https://avatars.githubusercontent.com/u/76853528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gymore-io", "html_url": "https://github.com/gymore-io", "followers_url": "https://api.github.com/users/gymore-io/followers", "following_url": "https://api.github.com/users/gymore-io/following{/other_user}", "gists_url": "https://api.github.com/users/gymore-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/gymore-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gymore-io/subscriptions", "organizations_url": "https://api.github.com/users/gymore-io/orgs", "repos_url": "https://api.github.com/users/gymore-io/repos", "events_url": "https://api.github.com/users/gymore-io/events{/privacy}", "received_events_url": "https://api.github.com/users/gymore-io/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81322/timeline", "performed_via_github_app": null, "state_reason": "completed"}