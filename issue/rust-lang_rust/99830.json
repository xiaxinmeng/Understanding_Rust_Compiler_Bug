{"url": "https://api.github.com/repos/rust-lang/rust/issues/99830", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99830/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99830/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99830/events", "html_url": "https://github.com/rust-lang/rust/issues/99830", "id": 1320199281, "node_id": "I_kwDOAAsO6M5OsKRx", "number": 99830, "title": "Misoptimization around asm mul+div", "user": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2022-07-27T22:49:38Z", "updated_at": "2022-08-12T19:01:00Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "While trying some inline assembly in my solutions to an online math puzzle site (without spoiling which one), I ran into a case that gets the right answer in debug mode or `opt-level = 1`, but fails at `opt-level = 2` or higher. I've extracted as much as I could to make this stand alone.\r\n\r\n```toml\r\n[package]\r\nname = \"mul_bug\"\r\nversion = \"0.1.0\"\r\nedition = \"2021\"\r\n\r\n[dependencies]\r\nprimal-sieve = \"0.3.2\"\r\n\r\n[profile.release]\r\nopt-level = 2 # 1 is OK\r\n```\r\n\r\n```rust\r\nuse primal_sieve::Primes;\r\nuse std::ops::{Add, MulAssign};\r\n\r\nfn main() {\r\n    assert_eq!(solve(4), 650);\r\n    assert_eq!(solve(100), 202_476_099);\r\n    assert_eq!(solve(100_000), 403_221_585);\r\n}\r\n\r\nfn solve(n: u32) -> u32 {\r\n    let mut product = Mod(1);\r\n    // Changing to a regular `for` loop suppresses the bug.\r\n    // for p in Primes::all().take_while(|&p| p < n as usize) {\r\n    Primes::all().take_while(|&p| p < n as usize).for_each(|p| {\r\n        let p = p as u32;\r\n\r\n        let mut k = n / p;\r\n        let mut pp = p;\r\n        while let Some(x) = pp.checked_mul(p) {\r\n            pp = x;\r\n            k += n / pp;\r\n        }\r\n\r\n        product *= Mod(p).pow(2 * k) + Mod(1);\r\n    });\r\n    // }\r\n    product.0\r\n}\r\n\r\n#[derive(Clone, Copy)]\r\nstruct Mod(u32);\r\n\r\nimpl Mod {\r\n    const MOD: u32 = 10u32.pow(9) + 9;\r\n}\r\n\r\nimpl Add for Mod {\r\n    type Output = Mod;\r\n\r\n    fn add(mut self, rhs: Mod) -> Mod {\r\n        if rhs.0 != 0 {\r\n            let neg_rhs = Self::MOD - rhs.0;\r\n            if self.0 < neg_rhs {\r\n                self.0 += rhs.0;\r\n            } else {\r\n                self.0 -= neg_rhs;\r\n            }\r\n        }\r\n        self\r\n    }\r\n}\r\n\r\nimpl MulAssign for Mod {\r\n    fn mul_assign(&mut self, rhs: Mod) {\r\n        // Adding this up-casting implementation and the `assert_eq` supresses the bug.\r\n        // let x = (u64::from(self.0) * u64::from(rhs.0) % u64::from(Self::MOD)) as u32;\r\n        unsafe {\r\n            core::arch::asm!(\r\n                \"mul edx\",\r\n                \"div {:e}\",\r\n                in(reg) Self::MOD,\r\n                inout(\"eax\") rhs.0 => _,\r\n                inout(\"edx\") self.0,\r\n                options(pure, nomem, nostack),\r\n            );\r\n        }\r\n        // assert_eq!(self.0, x);\r\n    }\r\n}\r\n\r\nimpl Mod {\r\n    fn pow(self, mut exp: u32) -> Self {\r\n        if exp == 0 {\r\n            return Mod(1);\r\n        }\r\n        if self.0 < 2 {\r\n            return self;\r\n        }\r\n\r\n        let mut base = self;\r\n        while exp & 1 == 0 {\r\n            base *= base;\r\n            exp >>= 1;\r\n        }\r\n        let mut acc = base;\r\n        exp >>= 1;\r\n        while exp != 0 {\r\n            base *= base;\r\n            if exp & 1 == 1 {\r\n                acc *= base;\r\n            }\r\n            exp >>= 1;\r\n        }\r\n        acc\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: the 3 assertions in `main` should pass.\r\n\r\nInstead, this happened: the first assertion fails.\r\n\r\n```\r\n$ cargo +nightly run --release\r\n[...]\r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `654705331`,\r\n right: `650`', src/main.rs:5:5\r\n```\r\n\r\nAs noted in the code comments, it works if I change the `for_each` to a regular `for` loop. It also works if I add an assertion in my `MulAssign` comparing the `asm!` result to a `u64` computation. Furthermore, `n = 4` only needs primes `[2, 3]`, but it works if I hard-code that instead of using primal.\r\n\r\n### Meta\r\n\r\nThis failure is reproducible on both i686 and x86_64, from 1.59.0 (which stabilized `asm!`) through nightly.\r\n\r\nThe bad `left` value is consistent from run to run, but different between versions -- 1.59.0 gets `0` instead.\r\n\r\n```\r\n$ rustc +1.59.0 -Vv\r\nrustc 1.59.0 (9d1b2106e 2022-02-23)\r\nbinary: rustc\r\ncommit-hash: 9d1b2106e23b1abd32fce1f17267604a5102f57a\r\ncommit-date: 2022-02-23\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.59.0\r\nLLVM version: 13.0.0\r\n\r\n$ rustc +nightly -Vv\r\nrustc 1.64.0-nightly (4d6d601c8 2022-07-26)\r\nbinary: rustc\r\ncommit-hash: 4d6d601c8a83284d6b23c253a3e2a060fd197316\r\ncommit-date: 2022-07-26\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.64.0-nightly\r\nLLVM version: 14.0.6\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99830/timeline", "performed_via_github_app": null, "state_reason": null}