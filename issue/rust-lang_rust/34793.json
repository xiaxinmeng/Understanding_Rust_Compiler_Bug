{"url": "https://api.github.com/repos/rust-lang/rust/issues/34793", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/34793/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/34793/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/34793/events", "html_url": "https://github.com/rust-lang/rust/issues/34793", "id": 165180842, "node_id": "MDU6SXNzdWUxNjUxODA4NDI=", "number": 34793, "title": "trans: Avoid using weak_odr linkage for closures.", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-07-12T21:06:21Z", "updated_at": "2016-08-01T11:47:50Z", "closed_at": "2016-08-01T11:47:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "At the moment, all closures get weak_odr linkage, since that allows for easily avoiding symbol conflicts between copies of the same closure in different crates -- something that can happen when a function containing a closure is inlined into another crate.\nOne problem though with this approach is that the mingw toolchain [does not allow for more than 2^15 weak symbols](https://github.com/rust-lang/rust/pull/33890#issuecomment-226465416) within one binary. Unfortunately, there are codebases out there run into this limit, e.g. https://github.com/servo/servo/pull/12393#issuecomment-232042971.\n\nSo, if we want to keep supporting mingw, we need to find a way to avoid symbol conflicts for closures without using weak linkage.\n\nFor monomorphizations of generic functions the same issue exists but in that case it has been easier to solve because we could just instantiate them within each codegen unit with \"internal\" linkage, thus avoiding any conflicts. For closures this is currently not possible because the cross-crate inlining infrastructure does not allow for inlining a closure on demand. \n\nI see a few possible solutions, each with its own set of disadvantages:\n1. Extend the inlining-infrastructure to better support closures. Then we could handle closures just the same as monomorphizations. The downside is that this would mean an investment into code that will become obsolete once non-MIR-trans is removed.\n2. Always force MIR-trans for closures from extern crates, then we don't need to inline them. The downside is that MIR-trans might not be ready for that yet and that it's kind of a strange and inconsistent behavior. \n3. Make sure that the symbol-hash of a closure contains the crate-id of the instantiating crate, thus avoid cross-crate conflicts. The downside is that this makes symbol naming more complicated again, i.e. one can't just call `instance.symbol_name()` and get a nicely predictable result anymore.\n4. Store the set of exported closure instances in crate metadata and never locally instantiate closures that already exist somewhere. The downside is that it means more stuff in metadata.\n5. Drop support for mingw `:P`\n\ncc @rust-lang/compiler \n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/34793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/34793/timeline", "performed_via_github_app": null, "state_reason": "completed"}