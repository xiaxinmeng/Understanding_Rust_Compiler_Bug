{"url": "https://api.github.com/repos/rust-lang/rust/issues/31844", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/31844/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/31844/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/31844/events", "html_url": "https://github.com/rust-lang/rust/issues/31844", "id": 135807289, "node_id": "MDU6SXNzdWUxMzU4MDcyODk=", "number": 31844, "title": "Tracking issue for specialization (RFC 1210)", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 89436934, "node_id": "MDU6TGFiZWw4OTQzNjkzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-approved", "name": "B-RFC-approved", "color": "d304cb", "default": false, "description": "Approved by a merged RFC but not yet implemented."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}, {"id": 433146169, "node_id": "MDU6TGFiZWw0MzMxNDYxNjk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-implemented", "name": "B-RFC-implemented", "color": "d304cb", "default": false, "description": "Approved by a merged RFC and implemented."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 1472579062, "node_id": "MDU6TGFiZWwxNDcyNTc5MDYy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-specialization", "name": "F-specialization", "color": "f9c0cc", "default": false, "description": "`#![feature(specialization)]`"}, {"id": 3537216018, "node_id": "LA_kwDOAAsO6M7S1aIS", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-design-concerns", "name": "S-tracking-design-concerns", "color": "4682b4", "default": false, "description": "Blocking design concerns"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 306, "created_at": "2016-02-23T17:35:55Z", "updated_at": "2023-05-13T20:48:06Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a tracking issue for specialization (rust-lang/rfcs#1210).\r\n\r\nMajor implementation steps:\r\n- [x] Land https://github.com/rust-lang/rust/pull/30652 =)\r\n- [ ] Restrictions around lifetime dispatch (currently a **soundness hole**)\r\n- [ ] `default impl` (https://github.com/rust-lang/rust/issues/37653)\r\n- [ ] Integration with associated consts\r\n- [ ] Bounds not always properly enforced (https://github.com/rust-lang/rust/issues/33017)\r\n- [ ] Should we permit empty impls if parent has no `default` members? https://github.com/rust-lang/rust/issues/48444\r\n- [ ] implement \"always applicable\" impls https://github.com/rust-lang/rust/issues/48538\r\n- [ ] describe and test the precise cycle conditions around creating the specialization graph (see e.g. [this comment](https://github.com/rust-lang/rust/pull/70535#discussion_r401685535), which noted that we have some very careful logic here today)\r\n\r\nUnresolved questions from the RFC:\r\n- Should associated type be specializable at all?\r\n- When should projection reveal a `default type`? Never during typeck? Or when monomorphic?\r\n- Should default trait items be considered `default` (i.e. specializable)?\r\n- Should we have `default impl` (where all items are `default`) or `partial impl` (where `default` is opt-in); see https://github.com/rust-lang/rust/issues/37653#issuecomment-616116577 for some relevant examples of where `default impl` is limiting.\r\n- How should we deal with lifetime dispatchability?\r\n\r\nNote that the `specialization` feature as implemented currently is *unsound*, which means that it can cause Undefined Behavior without `unsafe` code. [`min_specialization` avoids most of the pitfalls](https://github.com/rust-lang/rust/pull/68970).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/31844/reactions", "total_count": 551, "+1": 346, "-1": 0, "laugh": 1, "hooray": 11, "confused": 0, "heart": 82, "rocket": 49, "eyes": 62}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/31844/timeline", "performed_via_github_app": null, "state_reason": null}