{"url": "https://api.github.com/repos/rust-lang/rust/issues/64413", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/64413/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/64413/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/64413/events", "html_url": "https://github.com/rust-lang/rust/issues/64413", "id": 493028714, "node_id": "MDU6SXNzdWU0OTMwMjg3MTQ=", "number": 64413, "title": "io::Stderr should be line-buffered by default, not unbuffered", "user": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-12T21:03:30Z", "updated_at": "2020-09-22T11:12:59Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`std::io::stderr` does no buffering at all by default, which means that a Rust program that uses the most obvious way to print error messages (`eprintln!`) will make individual `write` syscalls not only for each call to the macro, but for each subcomponent of the formatted string:\r\n\r\n```plain\r\n$ cat test.rs\r\nfn main() {\r\n  eprint!(\"partial \");\r\n  eprintln!(\"line\");\r\n  eprintln!(\"a one and a two and a {} and a {}\", 3, 4.0);\r\n}\r\n$ rustc test.rs\r\n$ strace -e trace=write sh -c 'exec ./test 2> /dev/null'\r\nwrite(2, \"partial \", 8)                 = 8\r\nwrite(2, \"line\\n\", 5)                   = 5\r\nwrite(2, \"a one and a two and a \", 22)  = 22\r\nwrite(2, \"3\", 1)                        = 1\r\nwrite(2, \" and a \", 7)                  = 7\r\nwrite(2, \"4\", 1)                        = 1\r\nwrite(2, \"\\n\", 1)                       = 1\r\n```\r\n\r\nThis behavior is undesirable in any context where multiple programs might be emitting error messages to the same terminal, logfile, or whatever at the same time (for instance, `make -j`) because partial lines from different programs can get mixed up with each other.   If stderr instead buffered up a full line and wrote it to the OS all at once, then different programs' output could only get mixed together on a line-by-line basis, which is usually much less confusing for a person reading the logs.\r\n\r\nThis behavior is also troublesome for programs that incrementally parse stderr output; for instance, it may be the reason why emacs' compilation-mode occasionally doesn't detect all of the diagnostics in `cargo build` output (I don't know if there's an existing bug report for this).\r\n\r\n(There is a strong case for having `eprint!` flush out the partial line that it generates, but that could be handled inside of `eprint!`.)\r\n\r\n(This is closely related to, but not the same as, #60673, which is about stdout.  Block buffering is _not_ normally appropriate for `stderr`, even when writing to a file.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/64413/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/64413/timeline", "performed_via_github_app": null, "state_reason": null}