{"url": "https://api.github.com/repos/rust-lang/rust/issues/12358", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12358/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12358/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12358/events", "html_url": "https://github.com/rust-lang/rust/issues/12358", "id": 27766072, "node_id": "MDU6SXNzdWUyNzc2NjA3Mg==", "number": 12358, "title": "[RFC] Proposal for infix `.` associated/'static' method syntax", "user": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2014-02-18T02:58:22Z", "updated_at": "2014-03-16T23:30:25Z", "closed_at": "2014-03-16T23:30:25Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "#### Background\n\nIssues #6894 and #8888.\n\npnkfelix's blog post: http://blog.pnkfx.org/blog/2013/04/22/designing-syntax-for-associated-items-in-rust/\n\nnmatsakis's blog posts: http://www.smallcultfollowing.com/babysteps/blog/2013/04/02/associated-items/ and http://www.smallcultfollowing.com/babysteps/blog/2013/04/03/associated-items-continued/\n#### Proposal\n\nUse dot syntax for associated items. We use a type before the dot to define which implementation to call and a path to a function (via traits) after the dot to define the fully qualified name of the method. E.g.,\n\n```\nTrait T1 {\n    fn f() -> Self;\n}\n\nTrait T2 {\n    fn f() -> Self;\n}\n\nfn g1<X: T1 + T2>() -> X {\n    X.T1::f()    \n}\n```\n#### Rationale\n\nUse :: paths to indicate the name of an item only, i.e., the fully qualified name.\nUse . paths to specify the implementation of the item called.\n\nThis intuition applies equally to regular methods and 'static' methods.\n#### Syntax\n\n(Just looking at methods for now)\n\nregular methods:\n\n```\ne ::= e.name(...) | ...\n```\n\nNote that we're using the dynamic type of e, whereas for static methods we use the static type.\n\nstatic methods:\n\n```\ne ::= T.name(...) | ...\n```\n\nwhere:\n\n```\nT ::= [the usual type syntax]\nname ::= (mod '::')* (T '::')? name_lit [i.e., usual path syntax]\n```\n#### Shorthands\n\nIf a name is un-ambiguous, it does not need qualification (this gives backwards compatability for non-static methods). This also gives a nice syntax for the common use case - the `T::size_of()` example is common, which here would be `T.size_of()` E.g.,\n\n```\nfn g2<X: T1>() -> X {\n    X.f()    \n}\n```\n\nIf the implementing type is unambiguous (e.g., from the return type) then the target is optional (this gives backwards compatability with static methods). E.g, \n\n```\nfn g3<X: T1 + T2>() -> X {\n    T1::f()    \n}\n```\n\nBy applying both shorthands, the following is allowed, which I don't like - it seems too magical. But I think it is not, so I could live with it.\n\n```\nfn g4<X: T1>() -> X {\n    f()    \n}\n```\n\n(Personally, I do not like inference relying on the return type so would be happy to see it go and thus avoid the 'magical' example. But that would break backwards compatibility and it is just a personal preference, let's ignore this possibility for now).\n#### Generalising to associated items\n\n(note: this section is post-1.0 stuff)\n\nIf traits can declare types, etc. as well as just methods we should be able to refer to them in same way, e.g., \n\n```\nTrait Graph {\n    type Node;\n}\n\nfn g1<X: Graph>(n: X.Graph::Node) {\n    ...\n}\n\nfn g2<X: Graph>(n: X.Node) {\n    ...\n}\n```\n\nNote that this needs a _lot_ more thinking about wrt semantics and especially inheritance (see literature on virtual types, virtual classes).\n#### Issues\n\nAccessing functions from struct impls not in traits - I don't think this is an issue since you wouldn't use a struct as a bound on a type parameter.\n\ngrep-ability - not great because of the shorthands you can not grep to find all uses. But that is the price of shorthands. A semantic tool like DXR would still find everything.\n\nDo we allow `.` in types? I can't think of a use. If so (perhaps associated types using this proposed syntax is an example) we would require wrapping the type in parentheses or something.\n#### Hat-tips\n\nbjz for the idea of using .\nnmatsakis/pcwalton for the `T::<for X>::f()` syntax of which this is a variation.\npnkfelix/nmatsakis for the explanations\n", "closed_by": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12358/timeline", "performed_via_github_app": null, "state_reason": "completed"}