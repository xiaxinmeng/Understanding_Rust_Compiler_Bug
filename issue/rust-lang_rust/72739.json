{"url": "https://api.github.com/repos/rust-lang/rust/issues/72739", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72739/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72739/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72739/events", "html_url": "https://github.com/rust-lang/rust/issues/72739", "id": 627347626, "node_id": "MDU6SXNzdWU2MjczNDc2MjY=", "number": 72739, "title": "catch_unwind doesn't catch panics from thread spawned inside the closure", "user": {"login": "mhoseinzadeh", "id": 15790645, "node_id": "MDQ6VXNlcjE1NzkwNjQ1", "avatar_url": "https://avatars.githubusercontent.com/u/15790645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mhoseinzadeh", "html_url": "https://github.com/mhoseinzadeh", "followers_url": "https://api.github.com/users/mhoseinzadeh/followers", "following_url": "https://api.github.com/users/mhoseinzadeh/following{/other_user}", "gists_url": "https://api.github.com/users/mhoseinzadeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mhoseinzadeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mhoseinzadeh/subscriptions", "organizations_url": "https://api.github.com/users/mhoseinzadeh/orgs", "repos_url": "https://api.github.com/users/mhoseinzadeh/repos", "events_url": "https://api.github.com/users/mhoseinzadeh/events{/privacy}", "received_events_url": "https://api.github.com/users/mhoseinzadeh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-29T15:22:08Z", "updated_at": "2020-05-29T20:56:59Z", "closed_at": "2020-05-29T15:30:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Although the following example is poorly implemented, it would be nice if Rust disallowed `thread::spawn` from inside a `catch_unwind` because logically it might be impossible to catch the panic, unless the thread joins the main thread inside the closure.\r\n\r\n```rust\r\nfn thread_inside_catch_unwind() {\r\n    std::panic::catch_unwind(|| {\r\n        std::thread::spawn(|| {\r\n            std::thread::sleep(std::time::Duration::from_secs(1));\r\n            panic!()\r\n        })\r\n    }).unwrap();\r\n}\r\n```", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72739/timeline", "performed_via_github_app": null, "state_reason": "completed"}