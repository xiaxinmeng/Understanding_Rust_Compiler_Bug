{"url": "https://api.github.com/repos/rust-lang/rust/issues/73131", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73131/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73131/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73131/events", "html_url": "https://github.com/rust-lang/rust/issues/73131", "id": 634572793, "node_id": "MDU6SXNzdWU2MzQ1NzI3OTM=", "number": 73131, "title": "Tracking Issue for std::process error handling", "user": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2020-06-08T12:38:15Z", "updated_at": "2023-01-03T21:09:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue! \ud83d\udcdc Tracking issues are for tracking a\r\nfeature from implementation to stabilisation. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nHi.  This is a tracking issue for various error handling awkwardnesses in `std::process`.  It seemed useful to gather them together here.  I hope you consider this helpful.  I don't think this needs an RFC but I can make an RFC if people feel that would be best.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also uses as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Relevant RFCs and proposals:\r\n\r\n - https://github.com/rust-lang/rfcs/pull/3362 is a proposal to add a new methods to `Command` and a new `SubprocessError` type\r\n\r\n### Platform-independent issues\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [ ] #70186 request for `#[must_use]` on `std::process::Child` (first cut in #81452)\r\n- [ ] #73127 request for `#[must_use]` on `std::process::ExitStatus` (first cut in #81452)\r\n- [ ] #73126 request for less hazardous version of `output()`\r\n- [ ] #73125 request for affordance to make `Result` from `ExitStatus`\r\n\r\n### Unix issues relating to `ExitStatusExt`\r\n\r\n- [x] #73128 request for `std::os::unix::process::ExitStatusExt` `into_raw`\r\n- [x] #73129 request for `std::os::unix::process::ExitStatusExt` `.coredumped()` method", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73131/timeline", "performed_via_github_app": null, "state_reason": null}