{"url": "https://api.github.com/repos/rust-lang/rust/issues/44756", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44756/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44756/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44756/events", "html_url": "https://github.com/rust-lang/rust/issues/44756", "id": 259612425, "node_id": "MDU6SXNzdWUyNTk2MTI0MjU=", "number": 44756, "title": "Weird behavior with function pointers and type inference", "user": {"login": "alekratz", "id": 4924936, "node_id": "MDQ6VXNlcjQ5MjQ5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4924936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alekratz", "html_url": "https://github.com/alekratz", "followers_url": "https://api.github.com/users/alekratz/followers", "following_url": "https://api.github.com/users/alekratz/following{/other_user}", "gists_url": "https://api.github.com/users/alekratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/alekratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alekratz/subscriptions", "organizations_url": "https://api.github.com/users/alekratz/orgs", "repos_url": "https://api.github.com/users/alekratz/repos", "events_url": "https://api.github.com/users/alekratz/events{/privacy}", "received_events_url": "https://api.github.com/users/alekratz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-21T19:52:48Z", "updated_at": "2017-09-21T20:45:12Z", "closed_at": "2017-09-21T20:10:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been using `std::collections::HashMap` for using some arbitrary key type to map to function pointer values. A minimal example:\r\n\r\n```rust\r\nuse std::collections::HashMap;\r\nfn foo(arg: usize) {\r\n    println!(\"you called foo with {}\", arg);\r\n}\r\nfn bar(arg: usize) {\r\n    println!(\"you called bar with {}\", arg);\r\n}\r\nfn baz(arg: usize) {\r\n    println!(\"you called baz with {}\", arg);\r\n}\r\nfn main() {\r\n    let mut funs = HashMap::new();\r\n    funs.insert(\"foo\", foo as fn(usize));  // A\r\n    funs.insert(\"bar\", bar);\r\n    funs.insert(\"baz\", baz);\r\n    funs[\"bar\"](333);\r\n}\r\n```\r\n\r\nNote the explicit cast on the line marked A. If you remove the explicit cast, compilation fails with:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> main.rs:18:24\r\n   |\r\n18 |     funs.insert(\"bar\", bar);\r\n   |                        ^^^ expected fn item, found a different fn item\r\n   |\r\n   = note: expected type `fn(usize) {foo}`\r\n              found type `fn(usize) {bar}`\r\n\r\n(and also an error about baz; omitted for brevity)\r\n```\r\n\r\nYou can always rectify this with setting the explicit type (e.g. `let mut funs: HashMap<&'static str, fn(usize)> = HashMap::new();`) but this isn't an option when using macros that construct hashmaps, like `hashmap!` from the `maplit` crate; I have to fall back to using an explicit cast to nudge the type inference in the right direction.\r\n\r\n**My main question is, is this expected behavior, or is it a bug?**", "closed_by": {"login": "alekratz", "id": 4924936, "node_id": "MDQ6VXNlcjQ5MjQ5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4924936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alekratz", "html_url": "https://github.com/alekratz", "followers_url": "https://api.github.com/users/alekratz/followers", "following_url": "https://api.github.com/users/alekratz/following{/other_user}", "gists_url": "https://api.github.com/users/alekratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/alekratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alekratz/subscriptions", "organizations_url": "https://api.github.com/users/alekratz/orgs", "repos_url": "https://api.github.com/users/alekratz/repos", "events_url": "https://api.github.com/users/alekratz/events{/privacy}", "received_events_url": "https://api.github.com/users/alekratz/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44756/timeline", "performed_via_github_app": null, "state_reason": "completed"}