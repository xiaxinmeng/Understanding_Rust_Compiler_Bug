{"url": "https://api.github.com/repos/rust-lang/rust/issues/103968", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103968/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103968/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103968/events", "html_url": "https://github.com/rust-lang/rust/issues/103968", "id": 1436152023, "node_id": "I_kwDOAAsO6M5VmfDX", "number": 103968, "title": "multi impl for PartialEq", "user": {"login": "alexsunrise", "id": 10117397, "node_id": "MDQ6VXNlcjEwMTE3Mzk3", "avatar_url": "https://avatars.githubusercontent.com/u/10117397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexsunrise", "html_url": "https://github.com/alexsunrise", "followers_url": "https://api.github.com/users/alexsunrise/followers", "following_url": "https://api.github.com/users/alexsunrise/following{/other_user}", "gists_url": "https://api.github.com/users/alexsunrise/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexsunrise/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexsunrise/subscriptions", "organizations_url": "https://api.github.com/users/alexsunrise/orgs", "repos_url": "https://api.github.com/users/alexsunrise/repos", "events_url": "https://api.github.com/users/alexsunrise/events{/privacy}", "received_events_url": "https://api.github.com/users/alexsunrise/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2352122097, "node_id": "MDU6TGFiZWwyMzUyMTIyMDk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-discussion", "name": "C-discussion", "color": "f5f1fd", "default": false, "description": "Category: Discussion or questions that doesn't represent real issues."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-11-04T14:22:35Z", "updated_at": "2023-04-26T15:59:48Z", "closed_at": "2023-04-26T15:59:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nWhen I add some rust code in suricata, it has conflict with multi impl derive PartialEq for u8.\r\nThe error message like this.\r\n```\r\nerror[E0283]: type annotations needed\r\n   --> src/http2/detect.rs:629:41\r\n    |\r\n629 |     if direction == Direction::ToServer.into() {\r\n    |                  --                     ^^^^\r\n    |                  |\r\n    |                  type must be known at this point\r\n    |\r\n    = note: multiple `impl`s satisfying `u8: PartialEq<_>` found in the following crates: `core`, `serde_json`:\r\n            - impl PartialEq for u8;\r\n            - impl PartialEq<serde_json::Value> for u8;\r\nhelp: try using a fully qualified path to specify the expected types\r\n    |\r\n629 |     if direction == <core::Direction as std::convert::Into<T>>::into(Direction::ToServer) {\r\n    |                     +++++++++++++++++++++++++++++++++++++++++++++++++                   ~\r\n```\r\n\r\nIn suricata, enum defined like this.\r\n\r\n```\r\n#[repr(C)]\r\n#[derive(Debug, PartialEq, Eq, Clone, Copy)]\r\npub enum Direction {\r\n    ToServer = 0x04,\r\n    ToClient = 0x08,\r\n}\r\n\r\nimpl Default for Direction {\r\n    fn default() -> Self { Direction::ToServer }\r\n}\r\n\r\nimpl std::fmt::Display for Direction {\r\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\r\n        match self {\r\n            Self::ToServer => write!(f, \"toserver\"),\r\n            Self::ToClient => write!(f, \"toclient\"),\r\n        }\r\n    }\r\n}\r\n\r\nimpl From<u8> for Direction {\r\n    fn from(d: u8) -> Self {\r\n        if d & (DIR_TOSERVER | DIR_TOCLIENT) == (DIR_TOSERVER | DIR_TOCLIENT) {\r\n            debug_validate_fail!(\"Both directions are set\");\r\n            Direction::ToServer\r\n        } else if d & DIR_TOSERVER != 0 {\r\n            Direction::ToServer\r\n        } else if d & DIR_TOCLIENT != 0 {\r\n            Direction::ToClient\r\n        } else {\r\n            debug_validate_fail!(\"Unknown direction!!\");\r\n            Direction::ToServer\r\n        }\r\n    }\r\n}\r\n\r\nimpl From<Direction> for u8 {\r\n    fn from(d: Direction) -> u8 {\r\n        d as u8\r\n    }\r\n}\r\n```\r\n\r\nand I use `serde_json` for parse json, but this library also impl derive `PartialEq<serde_json::Value>` for u8.\r\n\r\n```\r\n#[cfg(feature = \"raw_value\")]\r\npub use crate::raw::{to_raw_value, RawValue};\r\n\r\n/// Represents any valid JSON value.\r\n///\r\n/// See the [`serde_json::value` module documentation](self) for usage examples.\r\n#[derive(Clone, Eq, PartialEq)]\r\npub enum Value {\r\n    /// Represents a JSON null value.\r\n    ///\r\n    /// ` ` `\r\n    /// # use serde_json::json;\r\n    /// #\r\n    /// let v = json!(null);\r\n    /// ` ` `\r\n    Null,\r\n\r\n    /// Represents a JSON boolean.\r\n    ///\r\n    /// ` ` `\r\n    /// # use serde_json::json;\r\n    /// #\r\n    /// let v = json!(true);\r\n    /// ` ` `\r\n    Bool(bool),\r\n\r\n    /// Represents a JSON number, whether integer or floating point.\r\n    ///\r\n    /// ` ` `\r\n    /// # use serde_json::json;\r\n    /// #\r\n    /// let v = json!(12.5);\r\n    /// ` ` `\r\n    Number(Number),\r\n\r\n    /// Represents a JSON string.\r\n    ///\r\n    /// ` ` `\r\n    /// # use serde_json::json;\r\n    /// #\r\n    /// let v = json!(\"a string\");\r\n    /// ` ` `\r\n    String(String),\r\n\r\n    /// Represents a JSON array.\r\n    ///\r\n    /// ` ` `\r\n    /// # use serde_json::json;\r\n    /// #\r\n    /// let v = json!([\"an\", \"array\"]);\r\n    /// ` ` `\r\n    Array(Vec<Value>),\r\n\r\n    /// Represents a JSON object.\r\n    ///\r\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\r\n    /// feature of serde_json to use IndexMap instead, which preserves\r\n    /// entries in the order they are inserted into the map. In particular, this\r\n    /// allows JSON data to be deserialized into a Value and serialized to a\r\n    /// string while retaining the order of map keys in the input.\r\n    ///\r\n    /// ` ` `\r\n    /// # use serde_json::json;\r\n    /// #\r\n    /// let v = json!({ \"an\": \"object\" });\r\n    /// ` ` `\r\n    Object(Map<String, Value>),\r\n}\r\n```\r\n\r\n So, how can I do in this scense? thanks a lot.", "closed_by": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103968/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}