{"url": "https://api.github.com/repos/rust-lang/rust/issues/65452", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65452/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65452/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65452/events", "html_url": "https://github.com/rust-lang/rust/issues/65452", "id": 507516477, "node_id": "MDU6SXNzdWU1MDc1MTY0Nzc=", "number": 65452, "title": "Inline assembly with tied operands of different sizes", "user": {"login": "ahomescu", "id": 443157, "node_id": "MDQ6VXNlcjQ0MzE1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/443157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahomescu", "html_url": "https://github.com/ahomescu", "followers_url": "https://api.github.com/users/ahomescu/followers", "following_url": "https://api.github.com/users/ahomescu/following{/other_user}", "gists_url": "https://api.github.com/users/ahomescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahomescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahomescu/subscriptions", "organizations_url": "https://api.github.com/users/ahomescu/orgs", "repos_url": "https://api.github.com/users/ahomescu/repos", "events_url": "https://api.github.com/users/ahomescu/events{/privacy}", "received_events_url": "https://api.github.com/users/ahomescu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-15T22:34:28Z", "updated_at": "2020-05-23T00:28:07Z", "closed_at": "2020-05-23T00:28:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When transpiling (or manually translating) the following C code from `/usr/include/bits/select.h`:\r\n```C\r\n# define __FD_ZERO(fdsp) \\\r\n  do {\t\t\t\t\t\t\t\t\t      \\\r\n    int __d0, __d1;\t\t\t\t\t\t\t      \\\r\n    __asm__ __volatile__ (\"cld; rep; \" __FD_ZERO_STOS\t\t\t      \\\r\n\t\t\t  : \"=c\" (__d0), \"=D\" (__d1)\t\t\t      \\\r\n\t\t\t  : \"a\" (0), \"0\" (sizeof (fd_set)\t\t      \\\r\n\t\t\t\t\t  / sizeof (__fd_mask)),\t      \\\r\n\t\t\t    \"1\" (&__FDS_BITS (fdsp)[0])\t\t\t      \\\r\n\t\t\t  : \"memory\");\t\t\t\t\t      \\\r\n  } while (0)\r\n```\r\ninto Rust, we get approximately the following code (manually rewritten to make it cleaner):\r\n```Rust\r\n    let mut x: u32 = 0;\r\n    let mut y: u32;\r\n    let mut z: u32;\r\n    unsafe {\r\n        asm!(\"cld; rep stosb\"\r\n             : \"={di}\"(y), \"={cx}\"(z)\r\n             : \"{al}\"(42), \"0\"(&mut x), \"1\"(4)\r\n             : \"memory\"\r\n             : \"volatile\"\r\n             );\r\n    }\r\n```\r\nthe resulting Rust inline assembly works fine in release mode, but crashes in debug mode.\r\n[Link to Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=e6d2440cd802f89eb2ad6d441dca37ed)\r\n\r\nThe issue here is that the `\"0\"(&mut x)` input operand is tied to the same register as the `\"={di}\"(y)` output operand, but they have different types and sizes (`&mut u32` vs `u32`). LLVM assigns both operands to the `edi` register in debug mode (which is wrong) but to `rdi` in release mode (which is the expected assignment).\r\n\r\ngcc and clang compile the original C code correctly because they extend both operands to the larger size in the front end ([link to clang code](https://github.com/llvm/llvm-project/blob/master/clang/lib/CodeGen/CGStmt.cpp#L2050)). The equivalent correct Rust code would be something like\r\n```Rust\r\n    unsafe {\r\n        let y64: u64;\r\n        asm!(\"cld; rep stosb\"\r\n             : \"={di}\"(y64), \"={cx}\"(z)\r\n             : \"{al}\"(42), \"0\"(&mut x), \"1\"(4)\r\n             : \"memory\"\r\n             : \"volatile\"\r\n             );\r\n        y = y64 as u32;\r\n    }\r\n```\r\n\r\nShould rustc expect to never see this input (I think it's LLVM UB), or replicate clang's behavior? If it's the latter, I could implement that myself and submit a PR, but I'm trying to get some feedback before writing any code.", "closed_by": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65452/timeline", "performed_via_github_app": null, "state_reason": "completed"}