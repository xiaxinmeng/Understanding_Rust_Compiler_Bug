{"url": "https://api.github.com/repos/rust-lang/rust/issues/87353", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87353/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87353/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87353/events", "html_url": "https://github.com/rust-lang/rust/issues/87353", "id": 949948241, "node_id": "MDU6SXNzdWU5NDk5NDgyNDE=", "number": 87353, "title": "this \"cannot infer an appropriate lifetime\" diagnostic doesn't communicate anything", "user": {"login": "jbr", "id": 13301, "node_id": "MDQ6VXNlcjEzMzAx", "avatar_url": "https://avatars.githubusercontent.com/u/13301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbr", "html_url": "https://github.com/jbr", "followers_url": "https://api.github.com/users/jbr/followers", "following_url": "https://api.github.com/users/jbr/following{/other_user}", "gists_url": "https://api.github.com/users/jbr/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbr/subscriptions", "organizations_url": "https://api.github.com/users/jbr/orgs", "repos_url": "https://api.github.com/users/jbr/repos", "events_url": "https://api.github.com/users/jbr/events{/privacy}", "received_events_url": "https://api.github.com/users/jbr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1659943986, "node_id": "MDU6TGFiZWwxNjU5OTQzOTg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-verbose", "name": "D-verbose", "color": "c9f7a3", "default": false, "description": "Too much output caused by a single piece of incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-07-21T17:36:51Z", "updated_at": "2021-07-22T19:20:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code: [:crab: playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=08a1749e6882de4441e9dca1e0ac94e2)\r\n\r\n```rust\r\nuse async_lock::{Semaphore, SemaphoreGuardArc};\r\nuse futures_lite::{ready, Stream};\r\nuse pin_project_lite::pin_project;\r\nuse std::{\r\n    future::Future,\r\n    pin::Pin,\r\n    sync::Arc,\r\n    task::{Context, Poll},\r\n};\r\n\r\npin_project! {\r\n    pub struct SemaphoreLimitedStream<'a, S> {\r\n        #[pin]\r\n        stream: S,\r\n        semaphore: Arc<Semaphore>,\r\n        future: Option<Pin<Box<dyn Future<Output = SemaphoreGuardArc> + Send + 'a>>>\r\n    }\r\n}\r\n\r\nimpl<S> Stream for SemaphoreLimitedStream<'_, S>\r\nwhere\r\n    S: Stream,\r\n{\r\n    type Item = (S::Item, SemaphoreGuardArc);\r\n\r\n    fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\r\n        let this = self.project();\r\n\r\n        let guard = loop {\r\n            if let Some(waiting_for_semaphore) = *this.future {\r\n                break ready!(waiting_for_semaphore.as_mut().poll(cx));\r\n            } else {\r\n                self.future = Some(Box::pin(this.semaphore.acquire_arc()));\r\n            };\r\n        };\r\n\r\n        this.stream\r\n            .poll_next(cx)\r\n            .map(|item| item.map(|item| (item, guard)))\r\n    }\r\n}\r\n\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\n   Compiling trillium-server-common v0.1.2 (/Users/jbr/code/trillium/server-common)\r\nerror[E0495]: cannot infer an appropriate lifetime for lifetime parameter '__pin in function call due to conflicting requirements\r\n  --> server-common/src/semaphore_limited_stream.rs:27:25\r\n   |\r\n27 |         let this = self.project();\r\n   |                         ^^^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 26:28...\r\n  --> server-common/src/semaphore_limited_stream.rs:26:28\r\n   |\r\n26 |     fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\r\n   |                            ^^^^^^^^^\r\nnote: ...so that the types are compatible\r\n  --> server-common/src/semaphore_limited_stream.rs:27:25\r\n   |\r\n27 |         let this = self.project();\r\n   |                         ^^^^^^^\r\n   = note: expected `Pin<&mut SemaphoreLimitedStream<'_, S>>`\r\n              found `Pin<&mut SemaphoreLimitedStream<'_, S>>`\r\nnote: but, the lifetime must be valid for the lifetime `'_` as defined on the impl at 20:43...\r\n  --> server-common/src/semaphore_limited_stream.rs:20:43\r\n   |\r\n20 | impl<S> Stream for SemaphoreLimitedStream<'_, S>\r\n   |                                           ^^\r\nnote: ...so that the expression is assignable\r\n  --> server-common/src/semaphore_limited_stream.rs:33:31\r\n   |\r\n33 |                 self.future = Some(Box::pin(this.semaphore.acquire_arc()));\r\n   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   = note: expected `Option<Pin<Box<dyn Future<Output = SemaphoreGuardArc> + Send>>>`\r\n              found `Option<Pin<Box<dyn Future<Output = SemaphoreGuardArc> + Send>>>`\r\n\r\nFor more information about this error, try `rustc --explain E0495`.\r\nerror: could not compile `trillium-server-common` due to previous error\r\n```\r\n\r\n---\r\n\r\nI'm trying to report more of these when I run into them, so here's one! In this case, the error happily makes sense and this was an interim state, but if I were learning rust this would be very confusing because the \"expected\" and \"found\" are identical.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87353/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87353/timeline", "performed_via_github_app": null, "state_reason": null}