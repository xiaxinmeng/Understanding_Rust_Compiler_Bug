{"url": "https://api.github.com/repos/rust-lang/rust/issues/106697", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106697/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106697/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106697/events", "html_url": "https://github.com/rust-lang/rust/issues/106697", "id": 1528181145, "node_id": "I_kwDOAAsO6M5bFjGZ", "number": 106697, "title": "Rustdoc JSON 2023 Roadmap", "user": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 2682491374, "node_id": "MDU6TGFiZWwyNjgyNDkxMzc0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-rustdoc-json", "name": "A-rustdoc-json", "color": "f7e101", "default": false, "description": "Area: Rustdoc JSON backend"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-01-11T00:08:50Z", "updated_at": "2023-01-19T10:25:09Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "## Foreign ID Lookup\r\n\r\nThis need's it's own issue at some point, but for [the zulip chat](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/Rustdoc.20JSON.3A.20Include.20All.20Foreign.20Items.3F) is the best resource.\r\n\r\nThe problem we want to solve is that if I have an `Id` from one crate's json, but the Id is for a foreign type, then it won't be present in `index`, only `paths`. If you want to see the `Item`, you need to find the json for the crate that this `Id` is from. The problem is that in this JSON you need to use a different ID. To find the ID in the crate the item is local to, you need to find the path for the item from `paths`, and then look that up the the json for the crate the item's from.\r\n\r\nThis is cumbersome, slow, and unreliable [^unreliable].\r\n\r\nIdealy you should be able to just use the Id from one JSON in another. I'm not sure if this is possible, or if we'll need some translation scheme, potentially spiting Id's into two fields (crate id, and item id). How exactly this will work needs further design work.\r\n\r\n[^unreliable]: Especialy when the `path` isn't present in the public docs.\r\n\r\n## Correctness.\r\n\r\nRustdoc JSON should never emit wrong, or invalid data (duh). There is still work to do on this, in particular:\r\n\r\n- [ ] #106378\r\n- [ ] #106435\r\n\r\nOnce these are fixed, we should:\r\n\r\n- [ ] Do a crater run with `jsondoclint` on the output running automaticly.\r\n\r\n## Performance\r\n\r\nRustdoc JSON has had essentially no performance work done to it [^syscall]. Theirs probably alot of low hanging fruit.\r\nThe first thing to make this feasable is\r\n\r\n- [ ] Add suport in rustc-perf (https://github.com/rust-lang/rustc-perf/pull/1512).\r\n\r\nOnce this lands and we can use `@ bors try @ rust-timer queue`, we can actually make some changes. It's hard to know what actually matters without data, but some ideas to explore:\r\n\r\n- [ ] Don't allocate a `String` for each `Id`\r\n- [ ] Don't use the default hasher when building `index`, but use one of the good ones without HashDos migrations (probably rustc's fxhash)\r\n- [ ] Be more clever about cloning items before inserting them into the index, by using the entry api\r\n- [ ] Avoid allocating a `PathBuf` in `Span`.\r\n\r\n[^syscall]: Except for fixing an issue where a syscall was being done for every single key, punctuation and value in JSON.\r\n\r\n## Internal Improvements\r\n\r\n- [ ] Think about how to avoid hitting the recursion limit for more compex types ([eg](https://github.com/obi1kenobi/cargo-semver-checks/issues/108))\r\n- [ ] Ensure we don't lose a FORMAT_VERSION bump to git race conditions. [#94591](https://github.com/rust-lang/rust/issues/94591)\r\n- [ ] Switch away from jsonpath_lib for jsondocck, as it can't do complex predicated, which is annoyed ([issue](https://github.com/freestrings/jsonpath/issues/91))\r\n- [ ] Add suport for using variable to create jsonpath query in jsondocck. Would be usefull for $.index[$$some_id$$].inner.something, although the syntax for interpolation here needs work.\r\n- [ ] Writeup docs for the testing settup, [#100515](https://github.com/rust-lang/rust/issues/100515)\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106697/reactions", "total_count": 5, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 5, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106697/timeline", "performed_via_github_app": null, "state_reason": null}