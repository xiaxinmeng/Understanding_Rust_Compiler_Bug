{"url": "https://api.github.com/repos/rust-lang/rust/issues/97889", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97889/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97889/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97889/events", "html_url": "https://github.com/rust-lang/rust/issues/97889", "id": 1265103954, "node_id": "I_kwDOAAsO6M5LZ_RS", "number": 97889, "title": "Tracking Issue for `unix_sigpipe`", "user": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-06-08T17:57:12Z", "updated_at": "2023-03-16T15:14:27Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The feature gate for the issue is `#![feature(unix_sigpipe)]`.\r\nIt enables a new `fn main()` attribute `#[unix_sigpipe = \"...\"]`.\r\n\r\n### Usage\r\n\r\nAny simple Rust program that writes a sizeable amount of data to stdout will panic if its output is limited via pipes.\r\n\r\n```rust\r\nfn main() {\r\n    loop {\r\n        println!(\"hello world\");\r\n    }\r\n}\r\n```\r\n```bash\r\n% ./main | head -n 1\r\nhello world\r\nthread 'main' panicked at 'failed printing to stdout: Broken pipe (os error 32)', library/std/src/io/stdio.rs:1016:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrac\r\n```\r\n\r\nTo prevent panicking we can use the new attribute:\r\n\r\n```rust\r\n#![feature(unix_sigpipe)]\r\n\r\n#[unix_sigpipe = \"sig_dfl\"]\r\nfn main() {\r\n    loop {\r\n        println!(\"hello world\");\r\n    }\r\n}\r\n```\r\n```bash\r\n% ./main | head -n 1\r\nhello world\r\n```\r\n\r\n\r\n#### More Info\r\n\r\nPlease refer to the [unstable book section](https://doc.rust-lang.org/nightly/unstable-book/language-features/unix-sigpipe.html) for more details. In short:\r\n\r\n| `#[unix_sigpipe = \"...\"]` |   Behaviour\r\n|---------------------------|------------------\r\n| `sig_ign`                 | Set `SIGPIPE` handler to `SIG_IGN` before invoking `fn main()`. Default behaviour since 2014.\r\n| `sig_dfl`                 | Set `SIGPIPE` handler to `SIG_DFL` before invoking `fn main()`.\r\n| `inherit`                 | Leave `SIGPIPE` handler untounched before entering `fn main()`.\r\n\r\nThe problem with the current `SIGPIPE` code in libstd as well as several other aspects of this problem is discussed extensively at these places:\r\n* https://github.com/rust-lang/rust/issues/62569\r\n* https://github.com/rust-lang/rust/issues/46016\r\n* https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Proposal.3A.20First.20step.20towards.20solving.20the.20SIGPIPE.20problem\r\n\r\n\r\n### Naming convention\r\n\r\nThe naming follows the convention used by [`#![windows_subsystem = \"windows|console\"]`](https://doc.rust-lang.org/reference/runtime.html#the-windows_subsystem-attribute) where the values `\"windows\"` and `\"console\"` have the same names as the actual [linker flags](https://docs.microsoft.com/en-us/cpp/build/reference/subsystem-specify-subsystem?view=msvc-170): `/SUBSYSTEM:WINDOWS` and `/SUBSYSTEM:CONSOLE`.\r\n\r\nThe names `sig_ign` and `sig_dfl` comes from the signal handler names `SIG_IGN` and `SIG_DFL`.\r\n\r\n\r\n### Steps\r\n\r\n- [x] Implement the feature:\r\n    - https://github.com/rust-lang/rust/pull/97802\r\n    - https://github.com/rust-lang/miri/pull/2532\r\n    - https://github.com/rust-lang/rust/pull/101077 (made `sigpipe::DEFAULT` distinct)\r\n    - https://github.com/rust-lang/rust/pull/102110 (improved [diagnostics](https://github.com/rust-lang/rust/pull/102110/commits/b17ec43637276773cd331844896fe7071de2475c))\r\n    - https://github.com/rust-lang/rust/pull/106092\r\n    - https://github.com/rust-lang/rust/pull/108980\r\n- [ ] Use the attribute in a broad set of non-test-case places to learn how it works in practice.\r\n    - [x] `#[unix_sigpipe = \"sig_dfl\"]`\r\n        - https://github.com/rust-lang/rust/pull/102587\r\n        - https://github.com/rust-lang/rust/pull/103495\r\n    - [ ] `#[unix_sigpipe = \"sig_ign\"]`\r\n    - [ ] `#[unix_sigpipe = \"inherit\"]`\r\n- [x] Remove `rustc_driver::set_sigpipe_handler()`\r\n    - https://github.com/rust-lang/rust/pull/103536\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions That Blocks Stabilisation \r\n\r\n* [ ] Does this have any impact on defining a stable ABI? Probably not, since we only change the ABI of `fn lang_start()`. And a stable Rust ABI is not even close (see https://github.com/rust-lang/rfcs/issues/600).\r\n\r\n### Unresolved Questions That Does Not Block Stabilisation \r\n\r\nBecause these questions can be resolved incrementally after stabilization.\r\n\r\n* [ ] What is the long-term plan with regards to changing the default behaviour with regards to ignoring `SIGPIPE`, if we want to do it at all?\r\n    - https://github.com/rust-lang/rust/issues/62569\r\n* [ ] Can and should we alter the BrokenPipe error message and make it suggest to use the new attribute?\r\n    * Groundwork: https://github.com/rust-lang/rust/pull/108980\r\n* [ ] Can we write the code in a way that allows `lto` to remove the _signal stub code completely? With a `bool` it works (see https://github.com/rust-lang/rust/pull/97802#discussion_r893965842), but with the current `u8` we might need to do some tweaks.\r\n\r\n### Resolved Questions\r\n\r\n* [x] We don't want to change to a `-Z unix_sigpipe` flag instead, see https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Proposal.3A.20First.20step.20towards.20solving.20the.20SIGPIPE.20problem/near/285499895, at least not initially.\r\n* [x] Should we only have the third `sigpipe: u8` argument to `fn lang_start()` on Unix platform via `cfg`? </br> **Answer:** No, this is not allowed, see top level comment in https://github.com/rust-lang/rust/blob/master/src/tools/tidy/src/pal.rs\r\n* [x] Should we stabilize `sig_dfl` or is `inherit` and `sig_ign` sufficient? </br> **Answer:** There are noteworthy examples of real projects that has opted to use `SIG_DFL` to solve the `BrokenPipe` problem. Notably [rustc itself](https://github.com/rust-lang/rust/blob/b11bf65e4aaa125952b6479a63f36e9e83efc32c/compiler/rustc_driver/src/lib.rs#L445). So if we don't stabilize `sig_dfl`, such projects can't make use of our new attribute. Therefore, we also need to stabilize `sig_dfl`.\r\n* [x] Should the attribute go on fn main() or on the top-level module (#![unix_sigpipe=\"...\"])? <br/> **Answer:** It makes a lot of semantic sense to have the attribute on fn `main()`, because it is a way to configure what the Rust runtime should do before `fn main()` is invoked. For libraries, no entry point code that modifies `SIGPIPE` is generated, so allowing the attribute in these situations does not make much sense. See https://github.com/rust-lang/rust/pull/101077#issuecomment-1242972299 for small-scale discussion.\r\n\r\n\r\nDisclaimer: I have taken the liberty to mark some questions resolved that I find unlikely to be controversial. If you would like me to create a proper discussion ticket for any of the resolved or unresolved questions, please let me know!\r\n\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation. They are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions. A tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature. Instead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n@rustbot label +T-libs", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97889/reactions", "total_count": 5, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 5, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97889/timeline", "performed_via_github_app": null, "state_reason": null}