{"url": "https://api.github.com/repos/rust-lang/rust/issues/106936", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106936/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106936/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106936/events", "html_url": "https://github.com/rust-lang/rust/issues/106936", "id": 1534886510, "node_id": "I_kwDOAAsO6M5bfIJu", "number": 106936, "title": "Limited constant propagation on Enum tag when Box is involved ", "user": {"login": "douglas-raillard-arm", "id": 23336875, "node_id": "MDQ6VXNlcjIzMzM2ODc1", "avatar_url": "https://avatars.githubusercontent.com/u/23336875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/douglas-raillard-arm", "html_url": "https://github.com/douglas-raillard-arm", "followers_url": "https://api.github.com/users/douglas-raillard-arm/followers", "following_url": "https://api.github.com/users/douglas-raillard-arm/following{/other_user}", "gists_url": "https://api.github.com/users/douglas-raillard-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/douglas-raillard-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/douglas-raillard-arm/subscriptions", "organizations_url": "https://api.github.com/users/douglas-raillard-arm/orgs", "repos_url": "https://api.github.com/users/douglas-raillard-arm/repos", "events_url": "https://api.github.com/users/douglas-raillard-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/douglas-raillard-arm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 5229520689, "node_id": "LA_kwDOAAsO6M8AAAABN7QnMQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-prop", "name": "A-const-prop", "color": "f7e101", "default": false, "description": "Area: Constant Propagation"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-01-16T12:53:49Z", "updated_at": "2023-04-05T17:32:55Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Experiments done on https://godbolt.org/ with the nightly toolchain and flags `-C opt-level=3 --edition=2021`. Also reproducible with rustc 1.66. Results seem to be the same on both x86_64 and aarch64. \r\n\r\n* rustc 1.66:\r\n```\r\nrustc 1.66.0 (69f9c33d7 2022-12-12)\r\nbinary: rustc\r\ncommit-hash: 69f9c33d71c871fc16ac445211281c6e7a340943\r\ncommit-date: 2022-12-12\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.66.0\r\nLLVM version: 15.0.2\r\nCompiler returned: 0\r\n```\r\n\r\n* rustc nightly:\r\n```\r\nrustc 1.68.0-nightly (0b90256ad 2023-01-13)\r\nbinary: rustc\r\ncommit-hash: 0b90256ada21c6a81b4c18f2c7a23151ab5fc232\r\ncommit-date: 2023-01-13\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.68.0-nightly\r\nLLVM version: 15.0.6\r\nCompiler returned: 0\r\n```\r\n\r\nThe expected generated code is something like:\r\n```asm\r\nexample::foo:\r\n        mov     eax, 94\r\n        ret\r\n```\r\n\r\nIn this code, rustc/LLVM fails to see through the 2 levels of `match` required to compute the return value of 94 at compile time when `MyEnum` has a `MyEnum::B` variant containing a Box: \r\n\r\n```rust\r\npub enum MyEnum {\r\n    A(u32),\r\n    // Uncommenting that will wreak the generated code\r\n    // B(Box<MyEnum>)\r\n}\r\n\r\npub fn foo() -> u32 {\r\n    let x = MyEnum::A(87);\r\n\r\n    let y = {\r\n        let y1 = MyEnum::A(4);\r\n        let y2 = MyEnum::A(3);\r\n\r\n        match (y1, y2) {\r\n            (MyEnum::A(x), MyEnum::A(y)) => MyEnum::A(x + y),\r\n            _ => panic!()\r\n        }\r\n    };\r\n    let y = MyEnum::A(7);\r\n\r\n    match (x, y) {\r\n        (MyEnum::A(x), MyEnum::A(y)) => x + y,\r\n        _ => panic!(),\r\n    }\r\n}\r\n```\r\n\r\nThis does not break if `Enum::B(Box<u32>)` is used, but breaks again for `Box<MyEnum>` or `Box<S>` with `S` being a newtype struct:\r\n```rust\r\n\r\npub struct S(u32);\r\nimpl Drop for S {\r\n    #[inline(never)]\r\n    fn drop(&mut self) {\r\n        println!(\"hello\");\r\n    }\r\n}\r\n```\r\n\r\nSo it looks like whenever there is Box<T> variant with T containing a non-inlineable drop (either because of side effect or because it's recursive), the optim breaks.\r\n\r\nAlso, even worse, using an alias in `foo` such as `type MyEnum2 = MyEnum;` makes the optim break as well for `MyEnum::B(Box<u32>)`, which is a regression compared to the non-aliased use, i.e.:\r\n```rust\r\npub enum MyEnum {\r\n    A(u32),\r\n    // Box of a !Drop type optimized fine in previous example, but breaks here when a `type MyEnum2 = MyEnum;` in `foo()`\r\n    B(Box<u32>)\r\n}\r\n\r\npub fn foo() -> u32 {\r\n    // Rewrite the function to use `MyEnum` instead of the alias and the generated code is good. Use the alias such as in this example and the optim breaks.\r\n    type MyEnum2 = MyEnum;\r\n\r\n    let x = MyEnum2::A(87);\r\n\r\n    let y = {\r\n        let y1 = MyEnum2::A(4);\r\n        let y2 = MyEnum2::A(3);\r\n\r\n        match (y1, y2) {\r\n            (MyEnum2::A(x), MyEnum2::A(y)) => MyEnum2::A(x + y),\r\n            _ => panic!()\r\n        }\r\n    };\r\n    let y = MyEnum2::A(7);\r\n\r\n    match (x, y) {\r\n        (MyEnum2::A(x), MyEnum2::A(y)) => x + y,\r\n        _ => panic!(),\r\n    }\r\n}\r\n```\r\n\r\nNote that in all these examples, rustc/LLVM is able to \"see through\" the leaf level of match, i.e. it will optimize `y1 + y2` into `MyEnum::A(7)`, but then it won't do the same for the outer layer `x + y`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106936/timeline", "performed_via_github_app": null, "state_reason": null}