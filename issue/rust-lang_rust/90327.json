{"url": "https://api.github.com/repos/rust-lang/rust/issues/90327", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90327/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90327/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90327/events", "html_url": "https://github.com/rust-lang/rust/issues/90327", "id": 1036763338, "node_id": "I_kwDOAAsO6M49y8DK", "number": 90327, "title": "feature(generic_const_exprs) / cycle detected when building an abstract representation for the const argument", "user": {"login": "mamrhein", "id": 15983147, "node_id": "MDQ6VXNlcjE1OTgzMTQ3", "avatar_url": "https://avatars.githubusercontent.com/u/15983147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mamrhein", "html_url": "https://github.com/mamrhein", "followers_url": "https://api.github.com/users/mamrhein/followers", "following_url": "https://api.github.com/users/mamrhein/following{/other_user}", "gists_url": "https://api.github.com/users/mamrhein/gists{/gist_id}", "starred_url": "https://api.github.com/users/mamrhein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mamrhein/subscriptions", "organizations_url": "https://api.github.com/users/mamrhein/orgs", "repos_url": "https://api.github.com/users/mamrhein/repos", "events_url": "https://api.github.com/users/mamrhein/events{/privacy}", "received_events_url": "https://api.github.com/users/mamrhein/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}, {"id": 5226739262, "node_id": "LA_kwDOAAsO6M8AAAABN4m2Pg", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-incomplete-features", "name": "requires-incomplete-features", "color": "76dcde", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-10-26T21:36:04Z", "updated_at": "2023-03-04T23:32:55Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "It's not possible to implement the trait PartialEq with RHS set to a type with a constant parameter for the type of that parameter.\r\n\r\nI tried this code (condensed from a more elaborate code base):\r\n\r\n```rust\r\n#![allow(incomplete_features)]\r\n#![feature(generic_const_exprs)]\r\n#![feature(associated_type_bounds)]\r\n\r\npub trait True {}\r\npub struct PrecLimitCheck<const CHECK: bool> {}\r\nimpl True for PrecLimitCheck<true> {}\r\n\r\npub const MAX_PREC: u8 = 9;\r\n\r\n#[derive(Copy, Clone)]\r\npub struct Decimal<const P: u8>\r\nwhere\r\n    PrecLimitCheck<{ P <= MAX_PREC }>: True,\r\n{\r\n    coeff: i128,\r\n}\r\n\r\nimpl<const P: u8, const Q: u8> PartialEq<Decimal<Q>> for Decimal<P>\r\nwhere\r\n    PrecLimitCheck<{ P <= MAX_PREC }>: True,\r\n    PrecLimitCheck<{ Q <= MAX_PREC }>: True,\r\n{\r\n    fn eq(&self, other: &Decimal<Q>) -> bool {\r\n        // real impl is different!\r\n        self.coeff == other.coeff\r\n    }\r\n}\r\n\r\nimpl<const P: u8> PartialEq<u8> for Decimal<P>\r\nwhere\r\n    PrecLimitCheck<{ P <= MAX_PREC }>: True,\r\n{\r\n    fn eq(&self, other: &u8) -> bool {\r\n        // real impl is different!\r\n        self.coeff == *other as i128\r\n    }\r\n}\r\n\r\nimpl<const P: u8> PartialEq<Decimal<P>> for u8\r\nwhere\r\n    PrecLimitCheck<{ P <= MAX_PREC }>: True,\r\n{\r\n    fn eq(&self, other: &Decimal<P>) -> bool {\r\n        // real impl is different!\r\n        *self as i128 == (*other).coeff\r\n    }\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nI expected to see this happen: compiles without error.\r\n\r\nInstead, the compiler gave the following error message:\r\n``` \r\nerror[E0391]: cycle detected when building an abstract representation for the const argument <impl at src/main.rs:42:1: 50:2>::{constant#0}\r\n  --> src/main.rs:44:20\r\n   |\r\n44 |     PrecLimitCheck<{ P <= MAX_PREC }>: True,\r\n   |                    ^^^^^^^^^^^^^^^^^\r\n   |\r\nnote: ...which requires building THIR for `<impl at src/main.rs:42:1: 50:2>::{constant#0}`...\r\n  --> src/main.rs:44:20\r\n   |\r\n44 |     PrecLimitCheck<{ P <= MAX_PREC }>: True,\r\n   |                    ^^^^^^^^^^^^^^^^^\r\nnote: ...which requires type-checking the const argument `<impl at src/main.rs:42:1: 50:2>::{constant#0}`...\r\n  --> src/main.rs:44:20\r\n   |\r\n44 |     PrecLimitCheck<{ P <= MAX_PREC }>: True,\r\n   |                    ^^^^^^^^^^^^^^^^^\r\nnote: ...which requires trying to unify the generic constants <impl at src/main.rs:42:1: 50:2>::{constant#0} and <impl at src/main.rs:42:1: 50:2>::{constant#0}...\r\n  --> src/main.rs:44:20\r\n   |\r\n44 |     PrecLimitCheck<{ P <= MAX_PREC }>: True,\r\n   |                    ^^^^^^^^^^^^^^^^^\r\n   = note: ...which again requires building an abstract representation for the const argument <impl at src/main.rs:42:1: 50:2>::{constant#0}, completing the cycle\r\nnote: cycle used when trying to unify the generic constants <impl at src/main.rs:42:1: 50:2>::{constant#0} and <impl at src/main.rs:21:1: 30:2>::{constant#1}\r\n  --> src/main.rs:44:20\r\n   |\r\n44 |     PrecLimitCheck<{ P <= MAX_PREC }>: True,\r\n   |                    ^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nEspecially the part \"... to unify the generic constants <impl at src/main.rs:42:1: 50:2>::{constant#0} and <impl at src/main.rs:42:1: 50:2>::{constant#0}\" seems odd.\r\n\r\nImplementing PartialEq works for any integer type other than the type of the constant type parameter.\r\n\r\nImplementing other traits (for example Add and Mul) in a similar way works without an error.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.58.0-nightly (29b124802 2021-10-25)\r\nbinary: rustc\r\ncommit-hash: 29b1248025b19bd132c8047fc710ea9314b9b76b\r\ncommit-date: 2021-10-25\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.58.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\nRunning with RUST_BACKTRACE=1 does not provide more details than the error message shown above.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90327/timeline", "performed_via_github_app": null, "state_reason": null}