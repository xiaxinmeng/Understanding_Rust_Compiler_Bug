{"url": "https://api.github.com/repos/rust-lang/rust/issues/97167", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97167/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97167/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97167/events", "html_url": "https://github.com/rust-lang/rust/issues/97167", "id": 1241318565, "node_id": "I_kwDOAAsO6M5J_QSl", "number": 97167, "title": "CTFE cycle error doesn't adequately point out location of cycle", "user": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-05-19T07:07:01Z", "updated_at": "2022-06-23T13:38:20Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here's some inconspicuous-looking Rust code. Can you spot the error? [(playground link)](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=456b560fd1292493f37fe5178099c819)\r\n\r\n```rust\r\n#![feature(const_option)]\r\n\r\n#[derive(Copy, Clone)]\r\npub enum Month {\r\n    Jan,\r\n    Feb,\r\n    Mar,\r\n    Apr,\r\n    May,\r\n    Jun,\r\n    Jul,\r\n    Aug,\r\n    Sep,\r\n    Oct,\r\n    Nov,\r\n    Dec,\r\n}\r\n\r\npub struct MonthDay {\r\n    month: Month,\r\n    day: u8,\r\n}\r\n\r\nimpl MonthDay {\r\n    const fn new(month: Month, day: u8) -> Option<MonthDay> {\r\n        if day <= MonthDay::last_of_leap(month).day {\r\n            Some(MonthDay { month, day })\r\n        } else {\r\n            None\r\n        }\r\n    }\r\n\r\n    const fn last_of_leap(month: Month) -> MonthDay {\r\n        const FEB29: MonthDay = MonthDay::new(Month::Feb, 29).unwrap();\r\n        if matches!(month, Month::Feb) {\r\n            FEB29\r\n        } else {\r\n            MonthDay::last_of_nonleap(month)\r\n        }\r\n    }\r\n\r\n    const fn last_of_nonleap(month: Month) -> MonthDay {\r\n        let day = match month {\r\n            Month::Feb => 28,\r\n            Month::Apr | Month::Jun | Month::Sep | Month::Nov => 30,\r\n            Month::Jan\r\n            | Month::Mar\r\n            | Month::May\r\n            | Month::Jul\r\n            | Month::Aug\r\n            | Month::Oct\r\n            | Month::Dec => 31,\r\n        };\r\n        MonthDay { month, day }\r\n    }\r\n}\r\n```\r\n\r\nAlthough the contents of the error *technically* reveal what's wrong, they do so in a very roundabout way that doesn't make it as obvious to the passive reader. At least, when I first saw this, I thought that this was just a compiler bug, not an actual error in my code.\r\n\r\nHere's the current output:\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0391]](https://doc.rust-lang.org/nightly/error-index.html#E0391): cycle detected when elaborating drops for `<impl at src/lib.rs:24:1: 56:2>::last_of_leap`\r\n  --> src/lib.rs:36:13\r\n   |\r\n36 |             FEB29\r\n   |             ^^^^^\r\n   |\r\nnote: ...which requires const-evaluating + checking `<impl at src/lib.rs:24:1: 56:2>::last_of_leap::FEB29`...\r\n  --> src/lib.rs:34:9\r\n   |\r\n34 |         const FEB29: MonthDay = MonthDay::new(Month::Feb, 29).unwrap();\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...which requires const-evaluating + checking `<impl at src/lib.rs:24:1: 56:2>::last_of_leap::FEB29`...\r\n  --> src/lib.rs:34:9\r\n   |\r\n34 |         const FEB29: MonthDay = MonthDay::new(Month::Feb, 29).unwrap();\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...which requires caching mir of `<impl at src/lib.rs:24:1: 56:2>::last_of_leap` for CTFE...\r\n  --> src/lib.rs:33:5\r\n   |\r\n33 |     const fn last_of_leap(month: Month) -> MonthDay {\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   = note: ...which again requires elaborating drops for `<impl at src/lib.rs:24:1: 56:2>::last_of_leap`, completing the cycle\r\n   = note: cycle used when running analysis passes on this crate\r\n\r\nFor more information about this error, try `rustc --explain E0391`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nHowever, the middle three steps are *essentially* the same, and don't reveal the full story. The way I would expect the cycle to be pointed out is:\r\n\r\n1. Cannot evaluate `FEB29` on line 36. (span: `FEB29`)\r\n2. Because it calls `MonthDay::new` on line 34. (span: `MonthDay::new`)\r\n3. Because `MonthDay::new` calls `last_of_leap` on line 26. (span: `last_of_leap`)\r\n4. Because `last_of_leap` requires evaluating `FEB29` on line 36. (same as first span)\r\n\r\nEssentially, I think that the key changes should be:\r\n\r\n1. The first step should always be the failure to evaluate a constant. If we were to take the existing cycle, this means that we should rotate the cycle until we reach some constant that failed; it doesn't matter which one if there are multiple in the cycle.\r\n1. The user really doesn't need to know that normalizing, simplifying, and const-evaluating are three separate steps, unless not all three are included.\r\n3. The full stack trace should be revealed, including exactly what methods are called where.\r\n4. Spans should highlight the specific parts of the line being evaluated, and not the entire line.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97167/timeline", "performed_via_github_app": null, "state_reason": null}