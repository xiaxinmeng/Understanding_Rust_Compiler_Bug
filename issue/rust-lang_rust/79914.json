{"url": "https://api.github.com/repos/rust-lang/rust/issues/79914", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79914/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79914/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79914/events", "html_url": "https://github.com/rust-lang/rust/issues/79914", "id": 761609639, "node_id": "MDU6SXNzdWU3NjE2MDk2Mzk=", "number": 79914, "title": "Using ManuallyDrop causes allocas and memcpys that LLVM cannot remove", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-12-10T20:57:22Z", "updated_at": "2020-12-13T03:47:43Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "It's great that `ManuallyDrop` helps people do the right thing by pre-leaking things they plan to move elsewhere, helping to avoid double-free issues.\r\n\r\nBut unfortunately `ManuallyDrop::new` gets codegened as copying the whole thing into a local variable, and LLVM frequently cannot remove it.  This is particularly frustrating for large types where the ABI passes them by pointer, as they get copied from that pointer to the stack (which, in addition to the copy, means more stack manipulation and `__rust_probestack` call than necessary).  Demo: https://rust.godbolt.org/z/Y8o7MG\r\n```rust\r\n#![feature(maybe_uninit_extra)]\r\n#![feature(min_const_generics)]\r\nuse std::mem::{ManuallyDrop, MaybeUninit};\r\nfn array_map<T, U, const N: usize>(a: [T; N], f: impl Fn(T) -> U) -> [U;N]\r\n{\r\n    // For this demo, always just leak on panic.\r\n    // Obviously a full implementation should do more,\r\n    // but this is sufficient to show the problem.\r\n    let a = ManuallyDrop::new(a);\r\n    union Foo<V, const M: usize> {\r\n        uninit: (),\r\n        partial: ManuallyDrop<[MaybeUninit<V>; M]>,\r\n        done: ManuallyDrop<[V; M]>,\r\n    }\r\n    let mut result = Foo::<U, N> { uninit: () };\r\n    unsafe {\r\n        for i in 0..N {\r\n            (*result.partial)[i].write(f(std::ptr::read(&a[i])));\r\n        }\r\n        ManuallyDrop::into_inner(result.done)\r\n    }\r\n}\r\n\r\npub fn demo(a: [u32; 400]) -> [i64; 400] {\r\n    array_map(a, From::from)\r\n}\r\n```\r\nNote in particular the following (generated with nightly 2020-12-07 in the godbolt link):\r\n```llvm\r\ndefine void @_ZN7example4demo17hf199b6e7768bfe59E([400 x i64]* noalias nocapture sret dereferenceable(3200) %0, [400 x i32]* noalias nocapture readonly dereferenceable(1600) %a) unnamed_addr #0 personality i32 (i32, i32, i64, %\"unwind::libunwind::_Unwind_Exception\"*, %\"unwind::libunwind::_Unwind_Context\"*)* @rust_eh_personality !dbg !6 {\r\nstart:\r\n  %result.i = alloca %\"array_map::Foo<i64, 400_usize>\", align 8\r\n  %a1.i = alloca %\"std::mem::ManuallyDrop<[u32; 400]>\", align 4\r\n```\r\nThere's no good reason for either of those locals, and this is comparatively easy mode -- panic=abort and the monomorphization is only using `Copy` types that definitely don't need dropping.\r\n\r\nAt the ABI level this is `fn demo(*mut [i64; 400], *const [u32; 400])`, so there ought to be a way to write this function in Rust such that it would produce the obvious no-stack-needed implementation of `out[i] = static_cast<_>(in[i]);`.  But I can't find one.\r\n\r\nUndeveloped musings on possible fixes:\r\n- Don't lower `ManuallyDrop` as its own type in codegen (it's already a lang item anyway)\r\n- Write a mir-opt to make the wrapper disappear (since it's transparent anyway and in MIR drops are explicit so the type difference is unimportant)\r\n- Create some sort of forget-in-place intrinsic that just suppresses the drop without moving anything or invalidating the binding\r\n- Figure out why LLVM can't optimize this away and fix that\r\n- ...\r\n\r\nEdit: FWIW, `-Z mir-opt-level=3 -Z unsound-mir-opts=yes` doesn't fix this either (as of 2020-12-12)\r\n\r\n---\r\n\r\nI started looking into this as part of figuring out what was happening in https://github.com/rust-lang/rust/pull/75571\r\n\r\nFinally decided to open this after this CI failure (which I'd made sure worked locally), https://github.com/rust-lang/rust/runs/1532668348\r\n```\r\n/checkout/src/test/codegen/vec-extend_from_array.rs:12:16: error: CHECK-NOT: excluded string found in input\r\n // CHECK-NOT: alloca\r\n               ^\r\n/checkout/obj/build/x86_64-unknown-linux-gnu/test/codegen/vec-extend_from_array/vec-extend_from_array.ll:128:14: note: found here\r\n %array1.i = alloca %\"std::mem::ManuallyDrop<[std::string::String; 400]>\", align 8\r\n             ^~~~~~\r\n```\r\n\r\n`MaybeUninit` has similar issues, but that might be covered by https://github.com/rust-lang/rust/issues/61011\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79914/timeline", "performed_via_github_app": null, "state_reason": null}