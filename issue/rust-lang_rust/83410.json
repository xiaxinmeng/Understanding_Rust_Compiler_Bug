{"url": "https://api.github.com/repos/rust-lang/rust/issues/83410", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83410/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83410/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83410/events", "html_url": "https://github.com/rust-lang/rust/issues/83410", "id": 838701034, "node_id": "MDU6SXNzdWU4Mzg3MDEwMzQ=", "number": 83410, "title": "[ER] Help for boxed array => slice/array", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-03-23T12:59:11Z", "updated_at": "2023-02-21T07:07:13Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This is wrong code:\r\n\r\n```rust\r\n#![allow(unused_variables)]\r\nfn foo1(a: &[u32]) {}\r\nfn foo2(a: &mut [u32]) {}\r\nfn bar1(a: &[u32; 10]) {}\r\nfn bar2(a: &mut [u32; 10]) {}\r\nfn main() {\r\n    let mut a = Box::new([0_u32; 10]);\r\n    foo1(a);          // C01 Err\r\n    foo1(&a);         // C02 Err\r\n    foo1(&mut a);     // C03 Err\r\n    foo1(&a[..]);     // C04 OK\r\n    foo1(&mut a[..]); // C05 OK?\r\n\r\n    foo2(a);          // C06 Err\r\n    foo2(&a);         // C07 Err\r\n    foo2(&mut a);     // C08 Err\r\n    foo2(&a[..]);     // C09 Err\r\n    foo2(&mut a[..]); // C10 OK\r\n\r\n    bar1(a);          // C11 Err\r\n    bar1(&a);         // C12 OK\r\n    bar1(&mut a);     // C13 OK?\r\n    bar1(&a[..]);     // C14 Err\r\n    bar1(&mut a[..]); // C15 Err\r\n\r\n    bar2(a);          // C16 Err\r\n    bar2(&a);         // C17 Err\r\n    bar2(&mut a);     // C18 OK\r\n    bar2(&a[..]);     // C19 Err\r\n    bar2(&mut a[..]); // C20 Err\r\n}\r\n```\r\n\r\nrustc 1.53.0 nightly gives the error messages:\r\n\r\n```rust\r\nerror[E0308]: mismatched types\r\n --> ...\\test.rs:8:10\r\n  |\r\n8 |     foo1(a);          // C01\r\n  |          ^ expected `&[u32]`, found struct `Box`\r\n  |\r\n  = note: expected reference `&[u32]`\r\n                found struct `Box<[u32; 10]>`\r\n\r\nerror[E0308]: mismatched types\r\n --> ...\\test.rs:9:10\r\n  |\r\n9 |     foo1(&a);         // C02\r\n  |          ^^ expected slice `[u32]`, found struct `Box`\r\n  |\r\n  = note: expected reference `&[u32]`\r\n             found reference `&Box<[u32; 10]>`\r\n\r\nerror[E0308]: mismatched types\r\n  --> ...\\test.rs:10:10\r\n   |\r\n10 |     foo1(&mut a);     // C03\r\n   |          ^^^^^^ expected slice `[u32]`, found struct `Box`\r\n   |\r\n   = note:      expected reference `&[u32]`\r\n           found mutable reference `&mut Box<[u32; 10]>`\r\n\r\nerror[E0308]: mismatched types\r\n  --> ...\\test.rs:14:10\r\n   |\r\n14 |     foo2(a);          // C06\r\n   |          ^ expected `&mut [u32]`, found struct `Box`\r\n   |\r\n   = note: expected mutable reference `&mut [u32]`\r\n                         found struct `Box<[u32; 10]>`\r\n\r\nerror[E0308]: mismatched types\r\n  --> ...\\test.rs:15:10\r\n   |\r\n15 |     foo2(&a);         // C07\r\n   |          ^^ types differ in mutability\r\n   |\r\n   = note: expected mutable reference `&mut [u32]`\r\n                      found reference `&Box<[u32; 10]>`\r\n\r\nerror[E0308]: mismatched types\r\n  --> ...\\test.rs:16:10\r\n   |\r\n16 |     foo2(&mut a);     // C08\r\n   |          ^^^^^^ expected slice `[u32]`, found struct `Box`\r\n   |\r\n   = note: expected mutable reference `&mut [u32]`\r\n              found mutable reference `&mut Box<[u32; 10]>`\r\n\r\nerror[E0308]: mismatched types\r\n  --> ...\\test.rs:17:10\r\n   |\r\n17 |     foo2(&a[..]);     // C09\r\n   |          ^^^^^^ types differ in mutability\r\n   |\r\n   = note: expected mutable reference `&mut [u32]`\r\n                      found reference `&[u32]`\r\n\r\nerror[E0308]: mismatched types\r\n  --> ...\\test.rs:20:10\r\n   |\r\n20 |     bar1(a);          // C11\r\n   |          ^\r\n   |          |\r\n   |          expected `&[u32; 10]`, found struct `Box`\r\n   |          help: consider borrowing here: `&a`\r\n   |\r\n   = note: expected reference `&[u32; 10]`\r\n                 found struct `Box<[u32; 10]>`\r\n\r\nerror[E0308]: mismatched types\r\n  --> ...\\test.rs:23:10\r\n   |\r\n23 |     bar1(&a[..]);     // C14\r\n   |          ^^^^^^ expected array `[u32; 10]`, found slice `[u32]`\r\n   |\r\n   = note: expected reference `&[u32; 10]`\r\n              found reference `&[u32]`\r\n\r\nerror[E0308]: mismatched types\r\n  --> ...\\test.rs:24:10\r\n   |\r\n24 |     bar1(&mut a[..]); // C15\r\n   |          ^^^^^^^^^^ expected array `[u32; 10]`, found slice `[u32]`\r\n   |\r\n   = note:      expected reference `&[u32; 10]`\r\n           found mutable reference `&mut [u32]`\r\n\r\nerror[E0308]: mismatched types\r\n  --> ...\\test.rs:26:10\r\n   |\r\n26 |     bar2(a);          // C16\r\n   |          ^\r\n   |          |\r\n   |          expected `&mut [u32; 10]`, found struct `Box`\r\n   |          help: consider mutably borrowing here: `&mut a`\r\n   |\r\n   = note: expected mutable reference `&mut [u32; 10]`\r\n                         found struct `Box<[u32; 10]>`\r\n\r\nerror[E0308]: mismatched types\r\n  --> ...\\test.rs:27:10\r\n   |\r\n27 |     bar2(&a);         // C17\r\n   |          ^^ types differ in mutability\r\n   |\r\n   = note: expected mutable reference `&mut [u32; 10]`\r\n                      found reference `&Box<[u32; 10]>`\r\n\r\nerror[E0308]: mismatched types\r\n  --> ...\\test.rs:29:10\r\n   |\r\n29 |     bar2(&a[..]);     // C19\r\n   |          ^^^^^^ types differ in mutability\r\n   |\r\n   = note: expected mutable reference `&mut [u32; 10]`\r\n                      found reference `&[u32]`\r\n\r\nerror[E0308]: mismatched types\r\n  --> ...\\test.rs:30:10\r\n   |\r\n30 |     bar2(&mut a[..]); // C20\r\n   |          ^^^^^^^^^^ expected array `[u32; 10]`, found slice `[u32]`\r\n   |\r\n   = note: expected mutable reference `&mut [u32; 10]`\r\n              found mutable reference `&mut [u32]`\r\n\r\nerror: aborting due to 14 previous errors\r\n```\r\n\r\nIn all the wrong cases rustc could give as help the suggestion to use the syntax I've used in the correct cases (C4, C10, C12 and C18). (C11 and C16 already give the help).\r\nAdditionally rustc could warn in the cases of useless mut usage (C05 and C13) (See issue #83409 ).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83410/timeline", "performed_via_github_app": null, "state_reason": null}