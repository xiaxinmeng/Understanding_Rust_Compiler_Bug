{"url": "https://api.github.com/repos/rust-lang/rust/issues/69441", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69441/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69441/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69441/events", "html_url": "https://github.com/rust-lang/rust/issues/69441", "id": 570141706, "node_id": "MDU6SXNzdWU1NzAxNDE3MDY=", "number": 69441, "title": "Trait bounds on associated types not resolving correctly", "user": {"login": "myrrlyn", "id": 5921109, "node_id": "MDQ6VXNlcjU5MjExMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5921109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/myrrlyn", "html_url": "https://github.com/myrrlyn", "followers_url": "https://api.github.com/users/myrrlyn/followers", "following_url": "https://api.github.com/users/myrrlyn/following{/other_user}", "gists_url": "https://api.github.com/users/myrrlyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/myrrlyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/myrrlyn/subscriptions", "organizations_url": "https://api.github.com/users/myrrlyn/orgs", "repos_url": "https://api.github.com/users/myrrlyn/repos", "events_url": "https://api.github.com/users/myrrlyn/events{/privacy}", "received_events_url": "https://api.github.com/users/myrrlyn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-24T20:56:05Z", "updated_at": "2020-02-24T21:30:16Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "In [the attached gist](https://gist.github.com/myrrlyn/47b57e6a16371a34a1ca113d9c204bf0), I provide a demonstration of a trait resolution error, and an equivalent fix for it.\r\n\r\nThe summary is this:\r\n\r\nI have a trait `A` that depends on other traits, including `core::ops` operator implementations. It depends on multiple versions of the same operator trait. I have another trait `B` that uses this as an associated type bound `AssocA: A`.\r\n\r\nValues typed as `<B as AssocA>::A` fail to correctly select the operator trait that matches the expression, and instead insist that only the *last* operator trait variant in the requirements list, by source order, exists, and the expression must be reshaped to fit it.\r\n\r\nChanging the type of the value from `<B as AssocA>::A` to `T where T: A` causes the expression to resolve its traits correctly.\r\n\r\nCode summary:\r\n\r\n```rust\r\ntrait A: \r\n  BitAnd<Self, Output = Self>\r\n  + for<'a> BitAnd<&'a Self, Output = Self>\r\n{}\r\ntrait B {\r\n  type AssocA: A;\r\n}\r\n\r\nfn fails<T: B>(this: T::AssocA) -> T::AssocA {\r\n  this & this // wants `this & &this`\r\n}\r\ncall_fails::<Something>(<Something as B>::AssocA::default());\r\n\r\nfn succeeds<T: A>(this: T) -> T {\r\n  this & this\r\n}\r\ncall_succeeds::<<Something as B>::AssocA>(a_value);\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.41.0 (5e1a79984 2020-01-27)\r\nbinary: rustc\r\ncommit-hash: 5e1a799842ba6ed4a57e91f7ab9435947482f7d8\r\ncommit-date: 2020-01-27\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.41.0\r\nLLVM version: 9.0\r\n\r\nrustc 1.43.0-nightly (58b834344 2020-02-05)\r\nbinary: rustc\r\ncommit-hash: 58b834344fc7b9185e7a50db1ff24e5eb07dae5e\r\ncommit-date: 2020-02-05\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.43.0-nightly\r\nLLVM version: 9.0\r\n```\r\n\r\n### Reproduction\r\n\r\nThe two `.rs` source files in the gist are tests; put them in `tests/` of a new library. Add `funty = \"1\"` to the `Cargo.toml` manifest. Attempt to compile.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69441/timeline", "performed_via_github_app": null, "state_reason": null}