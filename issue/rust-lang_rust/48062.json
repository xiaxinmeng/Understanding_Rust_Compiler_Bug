{"url": "https://api.github.com/repos/rust-lang/rust/issues/48062", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48062/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48062/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48062/events", "html_url": "https://github.com/rust-lang/rust/issues/48062", "id": 295339021, "node_id": "MDU6SXNzdWUyOTUzMzkwMjE=", "number": 48062, "title": "Type mismatch when pattern matching to a unit struct could really use some better diagnostics", "user": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-08T00:05:25Z", "updated_at": "2020-03-07T12:02:23Z", "closed_at": "2020-03-07T12:02:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've answered a question like this every day for the past 3 days... https://users.rust-lang.org/t/how-to-create-a-new-option-serde-json-value-value/15466\r\n\r\nThe problem is with code like this:\r\n\r\n```\r\nstruct foo;\r\n\r\nlet foo = 1;\r\n```\r\n\r\nTypically the let binding and the struct definition are much more separated, and the struct definition comes from a glob import. The error received is:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:4:9\r\n  |\r\n4 |     let foo = 1;\r\n  |         ^^^ expected integral variable, found struct `main::foo`\r\n  |\r\n  = note: expected type `{integer}`\r\n             found type `main::foo`\r\n```\r\n\r\nThis error isn't *wrong*, and I'm not even proposing that we remove it. However, in the specific case where the match is on a unit struct, I do think it would be incredibly helpful to add a `help` diagnostic pointing at the span where `foo` was brought into scope, stating that a struct with zero fields named `foo` was imported. E.g.\r\n\r\n```\r\n --> src/main.rs:2:4\r\n  |\r\n2 |     struct foo;\r\n  |     ^^^^^^^^^^ note: A struct named `foo` with zero fields was brought into scope here.\r\n  |\r\n```\r\n\r\nI have purposely biased this error message towards `use` vs definition, because I think the overwhelmingly common case is going to be from `use` not definition (though the error is still reasonable when pointing at the definition).\r\n\r\nI'd be happy to implement this if it'd be accepted, though I think I'll probably need a bit of help.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48062/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48062/timeline", "performed_via_github_app": null, "state_reason": "completed"}