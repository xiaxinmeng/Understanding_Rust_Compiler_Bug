{"url": "https://api.github.com/repos/rust-lang/rust/issues/90308", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90308/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90308/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90308/events", "html_url": "https://github.com/rust-lang/rust/issues/90308", "id": 1036477803, "node_id": "I_kwDOAAsO6M49x2Vr", "number": 90308, "title": "Consider deprecating and/or modifying behavior of std::env::set_var", "user": {"login": "leo60228", "id": 8355305, "node_id": "MDQ6VXNlcjgzNTUzMDU=", "avatar_url": "https://avatars.githubusercontent.com/u/8355305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leo60228", "html_url": "https://github.com/leo60228", "followers_url": "https://api.github.com/users/leo60228/followers", "following_url": "https://api.github.com/users/leo60228/following{/other_user}", "gists_url": "https://api.github.com/users/leo60228/gists{/gist_id}", "starred_url": "https://api.github.com/users/leo60228/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leo60228/subscriptions", "organizations_url": "https://api.github.com/users/leo60228/orgs", "repos_url": "https://api.github.com/users/leo60228/repos", "events_url": "https://api.github.com/users/leo60228/events{/privacy}", "received_events_url": "https://api.github.com/users/leo60228/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 289259951, "node_id": "MDU6TGFiZWwyODkyNTk5NTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-help-wanted", "name": "E-help-wanted", "color": "02E10C", "default": false, "description": "Call for participation: Help is requested to fix this issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 33, "created_at": "2021-10-26T15:55:02Z", "updated_at": "2023-01-03T16:30:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Observing an environment variable concurrently with a call to `setenv` constitutes a data race. Rust currently handles this by using a mutex, but that only protects against functions in `std::env`. My interpretation of POSIX (which appears to be the same as the glibc developers') is that any libc function is allowed to call `getenv`. This has already caused problems with `getaddrinfo` in #27970.\r\nAdditionally, a large amount of C code calls `getenv` but is otherwise thread-safe. While this isn't necessarily the standard library's issue, it's impossible for third-party libraries to soundly use this code without requiring the user to certify that this isn't an issue via an `unsafe` block. Some examples of this happening in practice are in https://github.com/time-rs/time/issues/293 and https://github.com/rust-lang/flate2-rs/issues/272.\r\nhttps://github.com/rustsec/advisory-db/issues/926 had several proposals on how this could be handled brought up.\r\n\r\n## Make `std::env::set_var` unsafe\r\nThis is arguably the cleanest solution to the issue. This could be considered a soundness fix, which would make it an option, but the ecosystem impact feels like it'd be too big.\r\n\r\n## Don't actually call `setenv`\r\n`std` could keep track of the environment itself, and make `set_var` changes only visible to `var` and subprocesses. This is probably the way to solve the issue with the least impact on existing code, but the behavior is somewhat unexpected and not zero-cost.\r\n\r\n## Only call `setenv` in single-threaded code\r\nThis would reduce the impact further, but seems even less expected for negligible benefit.\r\n\r\n## Deprecate `std::env::set_var`\r\nThis would make it clear that setting an environment variable in the current process is discouraged. It could also be combined with not actually calling `setenv`, which would be my preferred solution to this issue.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90308/reactions", "total_count": 17, "+1": 15, "-1": 2, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90308/timeline", "performed_via_github_app": null, "state_reason": null}