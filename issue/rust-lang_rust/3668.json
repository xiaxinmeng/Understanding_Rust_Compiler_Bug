{"url": "https://api.github.com/repos/rust-lang/rust/issues/3668", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3668/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3668/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3668/events", "html_url": "https://github.com/rust-lang/rust/issues/3668", "id": 7393707, "node_id": "MDU6SXNzdWU3MzkzNzA3", "number": 3668, "title": "crash: compile-time typeck/check.rs failure", "user": {"login": "BigEndian", "id": 516982, "node_id": "MDQ6VXNlcjUxNjk4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/516982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BigEndian", "html_url": "https://github.com/BigEndian", "followers_url": "https://api.github.com/users/BigEndian/followers", "following_url": "https://api.github.com/users/BigEndian/following{/other_user}", "gists_url": "https://api.github.com/users/BigEndian/gists{/gist_id}", "starred_url": "https://api.github.com/users/BigEndian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BigEndian/subscriptions", "organizations_url": "https://api.github.com/users/BigEndian/orgs", "repos_url": "https://api.github.com/users/BigEndian/repos", "events_url": "https://api.github.com/users/BigEndian/events{/privacy}", "received_events_url": "https://api.github.com/users/BigEndian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/8", "html_url": "https://github.com/rust-lang/rust/milestone/8", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/8/labels", "id": 144598, "node_id": "MDk6TWlsZXN0b25lMTQ0NTk4", "number": 8, "title": "0.5", "description": "", "creator": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 206, "state": "closed", "created_at": "2012-07-12T19:45:03Z", "updated_at": "2013-06-13T02:57:55Z", "due_on": "2012-12-22T08:00:00Z", "closed_at": "2013-06-13T02:57:55Z"}, "comments": 4, "created_at": "2012-10-06T01:45:43Z", "updated_at": "2014-06-16T21:56:38Z", "closed_at": "2012-10-15T21:41:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Result of attempted compilation: \n\n<pre>\nrust: task failed at 'Assertion fcx.inh.locals.contains_key(nid) failed', /Users/superjapanfreak/build/rust/src/rustc/middle/typeck/check.rs:2388\nerror: internal compiler error: unexpected failure\nnote: the compiler hit an unexpected failure path. this is a bug\nnote: try running with RUST_LOG=rustc=0,::rt::backtrace to get further details and report the results to github.com/mozilla/rust/issues\nrust: task failed at 'explicit failure', /Users/superjapanfreak/build/rust/src/rustc/driver/rustc.rs:275\nrust: domain main @0x7fb97b800010 root task failed\nrust: task failed at 'killed', /Users/superjapanfreak/build/rust/src/libcore/task.rs:705\n</pre>\n\n\n``` rust\nstruct Employee { name: ~str, mut employer: Option<@Business> }                                                                                                                    \nstruct Business { name: ~str, mut boss: Option<@mut Employee>, mut employees: ~[Option<@mut Employee>] }                                                                           \n\ntrait EmployeeTrait {                                                                                                                                                              \n   pure fn isEmployed() -> bool;                                                                                                                                                   \n   fn setEmployer(employer: @Business);                                                                                                                                            \n}                                                                                                                                                                                  \n\nimpl Employee: EmployeeTrait {                                                                                                                                                        pure fn isEmployed() -> bool {                                                                                                                                                        self.employer.is_some()                                                                                                                                                      \n   }                                                                                                                                                                               \n   fn setEmployer(employer: @Business) {                                                                                                                                           \n      self.employer = Some(employer);                                                                                                                                              \n   }                                                                                                                                                                               \n}                                                                                                                                                                                  \n\ntrait BusinessTrait {                                                                                                                                                              \n   fn fireBoss() -> bool;                                                                                                                                                          \n   fn hireBoss(e: @mut Employee);                                                                                                                                                  \n   fn getBossOption() -> Option<@Employee>;                                                                                                                                        \n}                                                                                                                                                                                  \n\nimpl Business: BusinessTrait {                                                                                                                                                     \n   fn fireBoss() -> bool {                                                                                                                                                         \n      if self.boss.is_none() {                                                                                                                                                     \n         return false;                                                                                                                                                             \n      }                                                                                                                                                                            \n      let oldBoss = self.boss.get();                                                                                                                                               \n      oldBoss.employer = None;                                                                                                                                                     \n      self.boss = None;                                                                                                                                                            \n      true                                                                                                                                                                         \n   }                                                                                                                                                                               \n   fn hireBoss(newBoss: @mut Employee) {                                                                                                                                           \n      if self.boss.is_some() {                                                                                                                                                     \n         self.fireBoss();                                                                                                                                                          \n      }                                                                                                                                                                            \n      newBoss.setEmployer(@copy self);                                                                                                                                             \n      self.boss = Some(newBoss);                                                                                                                                                   \n   }                                                                                                                                                                               \n   fn getBossOption() -> Option<@Employee> {                                                                                                                                       \n      let opt: Option<@Employee> = None;                                                                                                                                           \n      if self.boss.is_some() {                                                                                                                                                     \n         const bossCopy: @Employee = self.boss.get();                                                                                                                              \n         opt = Some(bossCopy);                                                                                                                                                     \n      }                                                                                                                                                                            \n      opt                                                                                                                                                                          \n   }                                                                                                                                                                               \n}                                                                                                                                                                                  \n\nfn main() {                                                                                                                                                                        \n   let bob = @mut Employee { name: ~\"Bob Newhart\", employer: None };\n   let restaurant = Business { name: ~\"In-N-Out\", boss: Some(bob), employees: ~[] };                                                                                               \n\n   io::println(#fmt(\"Bob is %s\", if bob.isEmployed() { ~\"employed\" } else { ~\"not employed\" }));                                                                                   \n} \n```\n", "closed_by": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3668/timeline", "performed_via_github_app": null, "state_reason": "completed"}