{"url": "https://api.github.com/repos/rust-lang/rust/issues/107179", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107179/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107179/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107179/events", "html_url": "https://github.com/rust-lang/rust/issues/107179", "id": 1551982520, "node_id": "I_kwDOAAsO6M5cgV-4", "number": 107179, "title": "Unreliable warnings about unreachable code downstream of uninhabited expression", "user": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-01-22T02:28:03Z", "updated_at": "2023-01-22T02:31:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Code\r\n\r\n```Rust\r\nuse core::convert::Infallible;\r\nuse core::hint::unreachable_unchecked;\r\n\r\nfn make_infallible() -> Infallible { \r\n    // Infallible implements From<!>\r\n    loop { }\r\n}\r\n\r\nextern {\r\n    fn side_effects();\r\n}\r\n\r\npub fn has_unit_type() {\r\n    let _a : Infallible = make_infallible();\r\n\r\n    // This gets no unreachable-code warning\r\n    println!(\"I cannot execute\");\r\n\r\n    // This gets no unreachable-code warning\r\n    unsafe { side_effects() }\r\n\r\n    // This gets an unreachable-code warning\r\n    if false { }\r\n}\r\n\r\npub fn has_never_type_no_warning() -> ! {\r\n    let _ : Infallible = make_infallible();\r\n\r\n    // This gets no unreachable-code warning (probably correctly?)\r\n    unsafe { unreachable_unchecked() }\r\n}\r\n\r\npub fn has_never_type_has_warning() -> ! {\r\n    let _ : Infallible = make_infallible();\r\n    // This has the same never-type, but does get a warning\r\n    loop {}\r\n}\r\n```\r\n\r\n\r\n### Current output\r\n\r\n```Shell\r\nwarning: unreachable expression\r\n  --> src/lib.rs:23:5\r\n   |\r\n14 |     let _a : Infallible = make_infallible();\r\n   |                           ----------------- any code following this expression is unreachable\r\n...\r\n23 |     if false { }\r\n   |     ^^^^^^^^^^^^ unreachable expression\r\n   |\r\nnote: this expression has type `Infallible`, which is uninhabited\r\n  --> src/lib.rs:14:27\r\n   |\r\n14 |     let _a : Infallible = make_infallible();\r\n   |                           ^^^^^^^^^^^^^^^^^\r\n   = note: `#[warn(unreachable_code)]` on by default\r\n\r\nwarning: unreachable expression\r\n  --> src/lib.rs:36:5\r\n   |\r\n34 |     let _ : Infallible = make_infallible();\r\n   |                          ----------------- any code following this expression is unreachable\r\n35 |     // This has the same never-type, but does get a warning\r\n36 |     loop {}\r\n   |     ^^^^^^^ unreachable expression\r\n   |\r\nnote: this expression has type `Infallible`, which is uninhabited\r\n  --> src/lib.rs:34:26\r\n   |\r\n34 |     let _ : Infallible = make_infallible();\r\n   |                          ^^^^^^^^^^^^^^^^^\r\n```\r\n\r\n### Rationale and extra context\r\n\r\nIt should warn on the first (and every) unreachable expression, not just the seemingly random set of expressions it fires on here. Note that if you change any of the `make_infallible()` calls to `panic!()` it will warn at the correct spots. So I think this is specifically related to the treatment of empty types.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107179/timeline", "performed_via_github_app": null, "state_reason": null}