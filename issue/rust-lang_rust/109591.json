{"url": "https://api.github.com/repos/rust-lang/rust/issues/109591", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109591/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109591/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109591/events", "html_url": "https://github.com/rust-lang/rust/issues/109591", "id": 1640496927, "node_id": "I_kwDOAAsO6M5hx_8f", "number": 109591, "title": "Unnecessary lifetime error", "user": {"login": "ViktorWb", "id": 24882298, "node_id": "MDQ6VXNlcjI0ODgyMjk4", "avatar_url": "https://avatars.githubusercontent.com/u/24882298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ViktorWb", "html_url": "https://github.com/ViktorWb", "followers_url": "https://api.github.com/users/ViktorWb/followers", "following_url": "https://api.github.com/users/ViktorWb/following{/other_user}", "gists_url": "https://api.github.com/users/ViktorWb/gists{/gist_id}", "starred_url": "https://api.github.com/users/ViktorWb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ViktorWb/subscriptions", "organizations_url": "https://api.github.com/users/ViktorWb/orgs", "repos_url": "https://api.github.com/users/ViktorWb/repos", "events_url": "https://api.github.com/users/ViktorWb/events{/privacy}", "received_events_url": "https://api.github.com/users/ViktorWb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2023-03-25T12:20:56Z", "updated_at": "2023-03-27T22:55:10Z", "closed_at": "2023-03-27T22:54:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code produces a compiler error:\r\n\r\n```rust\r\npub trait ReturnedTrait {}\r\n\r\nimpl<T> ReturnedTrait for T {}\r\n\r\npub fn create_trait<'a, T>(_t: T) -> impl ReturnedTrait + 'a {}\r\n\r\npub fn outer<'a>(val: String) -> impl ReturnedTrait + 'a {\r\n    create_trait(&val)\r\n}\r\n```\r\n\r\n```\r\nerror[[E0597]](https://doc.rust-lang.org/stable/error_codes/E0597.html): `val` does not live long enough\r\n --> src/lib.rs:8:18\r\n  |\r\n7 | pub fn outer<'a>(val: String) -> impl ReturnedTrait + 'a {\r\n  |              -- lifetime `'a` defined here\r\n8 |     create_trait(&val)\r\n  |     -------------^^^^-\r\n  |     |            |\r\n  |     |            borrowed value does not live long enough\r\n  |     argument requires that `val` is borrowed for `'a`\r\n9 | }\r\n  | - `val` dropped here while still borrowed\r\n```\r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=ee1fae017d34852fe3b1e6231b0d761c)\r\n\r\nThe reason, as I see it, is that according to [RFC 1951](https://github.com/rust-lang/rfcs/blob/master/text/1951-expand-impl-trait.md), a returned `impl` captures generic arguments. However, in this case, I do have a lifetime bound `'a` which is present on the returned `impl` but not on the generic `T`. However, the function still acts as if `T` has a lifetime bound of `'a`.\r\n\r\nOkay, so if the returned `impl` captures `T`, then I would expect to be able to use `T` in the return value. But the compiler will not let me:\r\n\r\n```rust\r\npub trait ReturnedTrait {}\r\n\r\nimpl<T> ReturnedTrait for T {}\r\n\r\npub fn create_trait<'a, T>(t: T) -> impl ReturnedTrait + 'a {\r\n    t\r\n}\r\n\r\npub fn outer<'a>(val: String) -> impl ReturnedTrait + 'a {\r\n    create_trait(val)\r\n}\r\n```\r\n\r\n```\r\nerror[[E0309]](https://doc.rust-lang.org/stable/error_codes/E0309.html): the parameter type `T` may not live long enough\r\n --> src/lib.rs:6:5\r\n  |\r\n6 |     t\r\n  |     ^ ...so that the type `T` will meet its required lifetime bounds\r\n  |\r\nhelp: consider adding an explicit lifetime bound...\r\n  |\r\n5 | pub fn create_trait<'a, T: 'a>(t: T) -> impl ReturnedTrait + 'a {\r\n  |                          ++++\r\n```\r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=ceb09f18ddc1450ed6cd2e3440575db2)\r\n\r\nThe compiler will not let me use `T` in the returned `impl`, but still, it requires that `T` is borrowed for `'a`.\r\n\r\nI would expect one of two things to happen:\r\n\r\n- The returned `impl` captures `T`, which would allow me to use `T` in the return value.\r\n- The returned `impl` does not capture `T`, in which case it would be possible for `T` to not have lifetime `'a`.\r\n\r\nInstead what happens is that the inner function does not allow the `impl` to capture `T`, but the outer function acts as if the `impl` has captured `T`.\r\n\r\n## An additional note\r\n\r\nI noticed that by wrapping the returned value in a `Box<dyn _>`, the code compiles:\r\n\r\n```rust\r\npub trait ReturnedTrait {}\r\n\r\nimpl<T> ReturnedTrait for T {}\r\n\r\npub fn create_trait<'a, T>(_t: T) -> impl ReturnedTrait + 'a {}\r\n\r\npub fn outer<'a>(val: String) -> impl ReturnedTrait + 'a {\r\n    let res = create_trait(&val);\r\n    let res: Box<dyn ReturnedTrait + 'a> = Box::new(res);\r\n    res\r\n}\r\n```\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.76s\r\n```\r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=4638b9437eab4b7d729c571ccfc1aefb)\r\n\r\nThis further leads me to believe that this lifetime error is unnecessary. Without any modification to the inner function, the compiler now understands that the returned `impl` in fact does not capture `T`.\r\n\r\n## Solution\r\n\r\nBecause of the `'a` bound on the returned `impl`, the inner function does not allow the returned `impl` to capture `T`. The function `outer` should therefore be able to know that the parameter `T` does not have to live for `'a`. Therefore, it should be possible to remove the lifetime error in the first code example, at [this playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=ee1fae017d34852fe3b1e6231b0d761c).", "closed_by": {"login": "ViktorWb", "id": 24882298, "node_id": "MDQ6VXNlcjI0ODgyMjk4", "avatar_url": "https://avatars.githubusercontent.com/u/24882298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ViktorWb", "html_url": "https://github.com/ViktorWb", "followers_url": "https://api.github.com/users/ViktorWb/followers", "following_url": "https://api.github.com/users/ViktorWb/following{/other_user}", "gists_url": "https://api.github.com/users/ViktorWb/gists{/gist_id}", "starred_url": "https://api.github.com/users/ViktorWb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ViktorWb/subscriptions", "organizations_url": "https://api.github.com/users/ViktorWb/orgs", "repos_url": "https://api.github.com/users/ViktorWb/repos", "events_url": "https://api.github.com/users/ViktorWb/events{/privacy}", "received_events_url": "https://api.github.com/users/ViktorWb/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109591/timeline", "performed_via_github_app": null, "state_reason": "completed"}