{"url": "https://api.github.com/repos/rust-lang/rust/issues/29424", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29424/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29424/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29424/events", "html_url": "https://github.com/rust-lang/rust/issues/29424", "id": 113765297, "node_id": "MDU6SXNzdWUxMTM3NjUyOTc=", "number": 29424, "title": "Pattern mathing and fixed size decimals", "user": {"login": "quasilyte", "id": 6286655, "node_id": "MDQ6VXNlcjYyODY2NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6286655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quasilyte", "html_url": "https://github.com/quasilyte", "followers_url": "https://api.github.com/users/quasilyte/followers", "following_url": "https://api.github.com/users/quasilyte/following{/other_user}", "gists_url": "https://api.github.com/users/quasilyte/gists{/gist_id}", "starred_url": "https://api.github.com/users/quasilyte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quasilyte/subscriptions", "organizations_url": "https://api.github.com/users/quasilyte/orgs", "repos_url": "https://api.github.com/users/quasilyte/repos", "events_url": "https://api.github.com/users/quasilyte/events{/privacy}", "received_events_url": "https://api.github.com/users/quasilyte/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-28T08:16:23Z", "updated_at": "2015-10-28T08:38:43Z", "closed_at": "2015-10-28T08:38:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code is not compiling, yet looking correct from my point of view:\n\n```\nprintln!(\"{}\", match 777_i64 /* any i64 value will do */ {\n        i64::MIN...i64::MAX => \"valid i64 value\"\n});\n```\n\nThis does, but `_' here is kinda redundant:\n\n```\nprintln!(\"{}\", match 777_i64 /* any i64 value will do */ {\n        i64::MIN...i64::MAX => \"just as expected\",\n        _ => \"how this can possibly happen?\"\n});\n```\n\nExpected result: better **match** exhaustiveness checking **or** explicit reference to this kind of problems in _E0004_ (at least until this gets fixed, or forever, if this is not going to be fixed).\n## Details\n\nTo be more precise, by **fixed size decimals** I mean i/ui{8, 16, 32, 64}.\nCurrently in Rustc 1.3.0 (stable channel) user can not satisfy the compiler \neven when whole range of possible [literal] values are covered in match pattern.\n\nLets imagine some of the if/else chain:\n\n```\ntrait SubjectiveMeasurement {\n    fn how_big(self) -> &'static str;\n}\n\nimpl SubjectiveMeasurement for i64 {\n    fn how_big(self) -> &'static str {\n        if self < -10000 {\n            \"number is really tiny\"\n        } else if self < -1000 {\n            \"number is tiny\"\n        } else if self < 0 {\n            \"number is small\"\n        } else if self == 0 {\n            \"number is nil\"\n        } else if self > 10000 {\n            \"number is really huge\"\n        } else if self > 1000 {\n            \"number is huge\"\n        } else {\n            \"number is big\"\n        }\n    }\n}\n\nfn main() {\n    println!(\"{}\", (-1000_i64).how_big());\n    println!(\"{}\", (1000_i64).how_big());\n}\n```\n\nWe can use pattern matching by ranges here to get better readability:\n\n```\n\nimpl SubjectiveMeasurement for i64 {\n    fn how_big(self) -> &'static str {        \n        match self {\n            i64::MIN...-10000 => \"number is really tiny\",\n            -9999...-1001 => \"number is tiny\",\n            -1000...-1 => \"number is small\",\n            0 => \"number is nil\",\n            1...1000 => \"number is big\",\n            1001...9999 => \"number is huge\",\n            10000...i64::MAX => \"number is really huge\",\n            _ => \"why the hell I need this arm?!\"\n        }\n    }\n}\n```\n\nBut again, we need an extra `_' arm.\nFrom a position of compiler user, not a compiler developer, I want it to do a better job at\nchecking are all cases guarded or not.\n## Meta\n\n```\nquasilyte@lb:~$ rustc --version --verbose\nrustc 1.3.0\nbinary: rustc\ncommit-hash: unknown\ncommit-date: unknown\nhost: x86_64-unknown-linux-gnu\nrelease: 1.3.0\n```\n", "closed_by": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29424/timeline", "performed_via_github_app": null, "state_reason": "completed"}