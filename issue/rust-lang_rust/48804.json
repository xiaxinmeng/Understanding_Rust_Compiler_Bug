{"url": "https://api.github.com/repos/rust-lang/rust/issues/48804", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48804/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48804/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48804/events", "html_url": "https://github.com/rust-lang/rust/issues/48804", "id": 302933018, "node_id": "MDU6SXNzdWUzMDI5MzMwMTg=", "number": 48804, "title": "Line and column numbers for linting warnings are off when recursing macros across files", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-07T01:39:44Z", "updated_at": "2019-08-04T22:31:07Z", "closed_at": "2019-08-04T22:31:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The core problem is that when a linting warning is due to a piece coming from a macro in another crate, things get off.\r\nFollowing is a minimalist reproducible testcase:\r\n```\r\n$ cargo new --lib foo\r\n$ cd foo\r\n$ cat <<'EOF' > src/bar.rs\r\n#[macro_export]\r\nmacro_rules! bar {\r\n    ($macro:ident !) => ( $macro! {\r\n          a\r\n          bbbbb\r\n          cccccccccccccccccc\r\n        }\r\n    )\r\n}\r\nEOF\r\n$ cat <<'EOF' > src/lib.rs\r\n#[macro_use]\r\nmod bar;\r\n\r\nmacro_rules! foo {\r\n    ($($name:ident)+) => {\r\n        pub enum Foo {$($name,)+ }\r\n    };\r\n}\r\n\r\nbar!(foo!);\r\nEOF\r\n```\r\n\r\nThe compiler output is:\r\n```\r\nwarning: variant `a` should have a camel case name such as `A`\r\n  --> src/lib.rs:6:25\r\n   |\r\n4  | | macro_rules! foo {\r\n   | |___________^\r\n5  |       ($($name:ident)+) => {\r\n6  |           pub enum Foo {$($name,)+ }\r\n   |  _________________________^\r\n...\r\n10 |   bar!(foo!);\r\n   |   ----------- in this macro invocation\r\n   |\r\n   = note: #[warn(non_camel_case_types)] on by default\r\n\r\nwarning: variant `bbbbb` should have a camel case name such as `Bbbbb`\r\n  --> src/lib.rs:6:25\r\n   |\r\n5  | |     ($($name:ident)+) => {\r\n   | |_______________^\r\n6  |           pub enum Foo {$($name,)+ }\r\n   |  _________________________^\r\n...\r\n10 |   bar!(foo!);\r\n   |   ----------- in this macro invocation\r\n\r\nwarning: variant `cccccccccccccccccc` should have a camel case name such as `Cccccccccccccccccc`\r\n  --> src/lib.rs:6:25\r\n   |\r\n6  |         pub enum Foo {$($name,)+ }\r\n   |                         ^^^^\r\n...\r\n10 | bar!(foo!);\r\n   | ----------- in this macro invocation\r\n```\r\n\r\nSeveral things of note:\r\n- Line numbers are progressing, but depending on the contents of the bar macro, they sometimes don't: even when all items are on different lines, sometimes the reported lines for some variants are the same as other variants.\r\n- Columns vary depending on the length of the items in the bar macro, but don't seem to actually match.\r\n- When putting everything in the same file, the errors look fine:\r\n```\r\n#[macro_use]\r\nmod bar {\r\n    #[macro_export]\r\n    macro_rules! bar {\r\n\t($macro:ident !) => ( $macro! {\r\n\t      a\r\n\t      bbbbb\r\n\t      cccccccccccccccccc\r\n\t    }\r\n\t)\r\n    }\r\n}\r\n\r\nmacro_rules! foo {\r\n    ($($name:ident)+) => {\r\n        pub enum Foo {$($name,)+ }\r\n    };\r\n}\r\n\r\nbar!(foo!);\r\n```\r\n```\r\nwarning: variant `a` should have a camel case name such as `A`\r\n  --> src/lib.rs:6:8\r\n   |\r\n6  |             a\r\n   |  ___________^\r\n7  | |           bbbbb\r\n8  | |           cccccccccccccccccc\r\n9  | |         }\r\n...  |\r\n15 | |     ($($name:ident)+) => {\r\n16 | |         pub enum Foo {$($name,)+ }\r\n   | |_____________________________^\r\n...\r\n20 |   bar!(foo!);\r\n   |   ----------- in this macro invocation\r\n   |\r\n   = note: #[warn(non_camel_case_types)] on by default\r\n\r\nwarning: variant `bbbbb` should have a camel case name such as `Bbbbb`\r\n  --> src/lib.rs:7:8\r\n   |\r\n7  |             bbbbb\r\n   |  ___________^\r\n8  | |           cccccccccccccccccc\r\n9  | |         }\r\n10 | |     )\r\n...  |\r\n15 | |     ($($name:ident)+) => {\r\n16 | |         pub enum Foo {$($name,)+ }\r\n   | |_____________________________^\r\n...\r\n20 |   bar!(foo!);\r\n   |   ----------- in this macro invocation\r\n\r\nwarning: variant `cccccccccccccccccc` should have a camel case name such as `Cccccccccccccccccc`\r\n  --> src/lib.rs:8:8\r\n   |\r\n8  |             cccccccccccccccccc\r\n   |  ___________^\r\n9  | |         }\r\n10 | |     )\r\n11 | |     }\r\n...  |\r\n15 | |     ($($name:ident)+) => {\r\n16 | |         pub enum Foo {$($name,)+ }\r\n   | |_____________________________^\r\n...\r\n20 |   bar!(foo!);\r\n   |   ----------- in this macro invocation\r\n```", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48804/timeline", "performed_via_github_app": null, "state_reason": "completed"}