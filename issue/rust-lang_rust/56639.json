{"url": "https://api.github.com/repos/rust-lang/rust/issues/56639", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56639/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56639/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56639/events", "html_url": "https://github.com/rust-lang/rust/issues/56639", "id": 388956758, "node_id": "MDU6SXNzdWUzODg5NTY3NTg=", "number": 56639, "title": "Custom section generation under `wasm32-unknown-unknown` is inconsistent and unintuitive", "user": {"login": "koute", "id": 246574, "node_id": "MDQ6VXNlcjI0NjU3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/246574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koute", "html_url": "https://github.com/koute", "followers_url": "https://api.github.com/users/koute/followers", "following_url": "https://api.github.com/users/koute/following{/other_user}", "gists_url": "https://api.github.com/users/koute/gists{/gist_id}", "starred_url": "https://api.github.com/users/koute/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koute/subscriptions", "organizations_url": "https://api.github.com/users/koute/orgs", "repos_url": "https://api.github.com/users/koute/repos", "events_url": "https://api.github.com/users/koute/events{/privacy}", "received_events_url": "https://api.github.com/users/koute/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-12-08T20:32:10Z", "updated_at": "2022-08-02T12:43:51Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Assume we have a crate named `dependency` with the following content:\r\n\r\n```rust\r\npub fn trigger() {\r\n    submodule::call();\r\n}\r\npub mod submodule {\r\n    pub fn call() {\r\n        #[link_section = \"some-custom-section\"]\r\n        static SNIPPET: [u8; 3] = [b'X', b'Y', b'Z'];\r\n\r\n        extern \"C\" {\r\n            fn require_XYZ();\r\n        }\r\n\r\n        unsafe {\r\n            require_XYZ();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd we have another crate which uses the `dependency`:\r\n\r\n```rust\r\nextern crate dependency;\r\n\r\n#[no_mangle]\r\npub fn main() {\r\n    dependency::trigger();\r\n}\r\n```\r\n\r\nIf I compile this crate like this:\r\n\r\n```\r\n$ cargo build --target=wasm32-unknown-unknown --release\r\n```\r\n\r\nand dump it with `wasm-objdump` then the `\"some-custom-section\"` custom section will be missing. However, if I change the `dependency` crate to look like this (I've moved the `call` function from the `submodule` to the crate root and even made it private):\r\n\r\n```rust\r\npub fn trigger() {\r\n    call();\r\n}\r\nfn call() {\r\n    #[link_section = \"some-custom-section\"]\r\n    static SNIPPET: [u8; 3] = [b'X', b'Y', b'Z'];\r\n\r\n    extern \"C\" {\r\n        fn require_XYZ();\r\n    }\r\n\r\n    unsafe {\r\n        require_XYZ();\r\n    }\r\n}\r\n```\r\n\r\nand build the main crate again then the custom section *is* generated. Calling `dependency::submodule::call` directly instead of `dependency::trigger` also results in the custom section being generated.\r\n\r\nBased on my experiments the custom section generation currently works like this:\r\n\r\n| In which crate is the custom section defined? | Where is the function containing the section? | How is the function containing the custom section called? | Is it generated? |\r\n| --------------------------------------------- | --------------------------------------------- | --------------------------------------------------------- | ---------------- |\r\n| External crate | Submodule | Not called | No  |\r\n| External crate | Submodule | Indirectly | No  |\r\n| External crate | Submodule | Directly   | Yes |\r\n| External crate | In root   | Not called | No  |\r\n| External crate | In root   | Indirectly | Yes |\r\n| External crate | In root   | Directly   | Yes |\r\n| Main crate     | Any       | Any        | Yes |\r\n\r\nI have an example crate here which reproduces the issue:\r\n\r\n```\r\n$ git clone https://github.com/koute/rust-custom-section-issue\r\n$ cd rust-custom-section-issue\r\n\r\n# This will not generate a custom section:\r\n$ cargo build --target=wasm32-unknown-unknown --release --features broken\r\n$ wasm-objdump -s target/wasm32-unknown-unknown/release/rust_custom_section_issue.wasm\r\n\r\n# This will:\r\n$ cargo build --target=wasm32-unknown-unknown --release --features working\r\n$ wasm-objdump -s target/wasm32-unknown-unknown/release/rust_custom_section_issue.wasm\r\n```\r\n\r\nI'm using the most recent nightly: `rustc 1.32.0-nightly (4a45578bc 2018-12-07)`\r\n\r\nCould we make this somewhat consistent?\r\n\r\nSome background: as a first step towards `wasm-bindgen` compatibility I'm converting [`stdweb`](https://github.com/koute/stdweb)'s `js!` macro to use custom sections, however to make it not break existing downstream users I need to have either a) every custom section in the whole crate graph be generated, or b) always generated if the custom section is defined inside of a potentially reachable (at runtime) function. Otherwise I end up generating an import for a snippet for which the corresponding custom section entry doesn't exist.\r\n\r\ncc @alexcrichton", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56639/timeline", "performed_via_github_app": null, "state_reason": null}