{"url": "https://api.github.com/repos/rust-lang/rust/issues/96305", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96305/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96305/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96305/events", "html_url": "https://github.com/rust-lang/rust/issues/96305", "id": 1211780986, "node_id": "I_kwDOAAsO6M5IOk96", "number": 96305, "title": "yarte_lexer 0.0.1 compilation regression", "user": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2022-04-22T03:51:42Z", "updated_at": "2022-05-23T09:03:15Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@lqd pointed out a [failure](https://crater-reports.s3.amazonaws.com/beta-1.61-2/beta-2022-04-18/reg/yarte_lexer-0.0.1/log.txt) from a recent crater run.\r\n\r\nBisection identifies the 7th commit of #95159 as the problem: \"[Eliminate TokenTreeOrTokenTreeSlice](https://github.com/rust-lang/rust/pull/95159/commits/31df6807893bd9c66cba57ff0f4de89ab9d8460e)\". Interestingly, #95797 reverted many of the changes from that 7th commit, but the problem persists.\r\n\r\n**UPDATE: See [this comment](https://github.com/rust-lang/rust/issues/96305#issuecomment-1106005128) for the explanation.**\r\n\r\nI have a reduced test case. It doesn't fit in a single file, instead requiring two crates.\r\n\r\n## Two-crate test case\r\n\r\nCrate `y`, `Cargo.toml`:\r\n```toml\r\n[package]\r\nname = \"y\"\r\nversion = \"0.1.0\"\r\nedition = \"2018\"\r\n[dependencies]\r\n```\r\nCrate `y`, `src/lib.rs`:\r\n```rust\r\n#![feature(trace_macros)]\r\ntrace_macros!(true);\r\n\r\nmacro_rules! ascii_builder {\r\n    ($($n:literal)+) => {\r\n        #[macro_export]\r\n        macro_rules! ascii {\r\n            $(($n) => { $n };)+\r\n            ($t:tt) => { compile_error!(\"no match\") };\r\n        }\r\n    };\r\n}\r\n\r\nascii_builder!('a' 'b' 'c');\r\n```\r\nCrate `z` (which sits next to crate `y` in the filesystem), `Cargo.toml`:\r\n```toml\r\n[package]\r\nname = \"z2\"\r\nversion = \"0.1.0\"\r\nedition = \"2021\"\r\n[dependencies]\r\ny = { path = \"../y\" }\r\n```\r\nCrate `z`, `src/main.rs`:\r\n```rust\r\n#![feature(trace_macros)]\r\ntrace_macros!(true);\r\n\r\nfn main() {\r\n    let _x = y::ascii!('a');\r\n}\r\n```\r\nNote: The original code defines `ascii` and `ascii_builder` within the `yarte_lexer` crate and then uses `ascii` within a unit test. For my reduced test case I used two separate crates because it made it easier to use tools like `cargo expand`, and to avoid any issues specific to unit tests.\r\n\r\n## Output\r\nIf I compile with `cargo check` using a version prior to #95159, compilation succeeds with this output:\r\n```\r\n    Checking y v0.1.0 (/home/njn/dev/y)\r\nnote: trace_macro\r\n  --> /home/njn/dev/y/src/lib.rs:14:1\r\n   |\r\n14 | ascii_builder!('a' 'b' 'c');\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: expanding `ascii_builder! { 'a' 'b' 'c' }`\r\n   = note: to `#[macro_export] macro_rules! ascii\r\n           {\r\n               ('a') => { 'a' } ; ('b') => { 'b' } ; ('c') => { 'c' } ; ($t : tt) =>\r\n               { compile_error! (\"no match\") } ;\r\n           }`\r\n\r\n    Checking z2 v0.1.0 (/home/njn/dev/z3)\r\nnote: trace_macro\r\n --> src/main.rs:5:14\r\n  |\r\n5 |     let _x = y::ascii!('a');\r\n  |              ^^^^^^^^^^^^^^\r\n  |\r\n  = note: expanding `ascii! { 'a' }`\r\n  = note: to `'a'`\r\n\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.21s\r\n```\r\nIf I do the same with a version after #95159, compilation fails with this output:\r\n```\r\n    Checking y v0.1.0 (/home/njn/dev/y)\r\nnote: trace_macro\r\n  --> /home/njn/dev/y/src/lib.rs:14:1\r\n   |\r\n14 | ascii_builder!('a' 'b' 'c');\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: expanding `ascii_builder! { 'a' 'b' 'c' }`\r\n   = note: to `#[macro_export] macro_rules! ascii\r\n           {\r\n               ('a') => { 'a' } ; ('b') => { 'b' } ; ('c') => { 'c' } ; ($t : tt) =>\r\n               { compile_error! (\"no match\") } ;\r\n           }`\r\n\r\n    Checking z2 v0.1.0 (/home/njn/dev/z2)\r\nerror: no match\r\n --> src/main.rs:5:14\r\n  |\r\n5 |     let _x = y::ascii!('a');\r\n  |              ^^^^^^^^^^^^^^\r\n  |\r\n  = note: this error originates in the macro `y::ascii` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nnote: trace_macro\r\n --> src/main.rs:5:14\r\n  |\r\n5 |     let _x = y::ascii!('a');\r\n  |              ^^^^^^^^^^^^^^\r\n  |\r\n  = note: expanding `ascii! { 'a' }`\r\n  = note: to `compile_error! (\"no match\")`\r\n\r\nerror: could not compile `z2` due to previous error\r\n```\r\nThe obvious difference is the compile error. Interestingly, the expansion of `ascii_builder` in crate `y` is the same in both cases. So it's not at all clear why the failure occurs. There's a rule matching `'a'` in both cases.\r\n\r\n## Single file attempt\r\nI tried and failed to reproduce this in a single file. Here's what I had:\r\n```rust\r\nmacro_rules! ascii_builder {\r\n    ($($n:literal)+) => {\r\n        #[macro_export]\r\n        macro_rules! ascii {\r\n            $(($n) => { $n };)+\r\n            ($t:tt) => { compile_error!(\"no match\") };\r\n        }\r\n    };\r\n}\r\n\r\nascii_builder!('a' 'b' 'c');\r\n\r\nfn main() {\r\n    let _x = ascii!('a');\r\n}\r\n```\r\nI just get the same compile error from above, no matter which version of the compiler I use:\r\n```\r\nerror: no match\r\n  --> y.rs:9:26\r\n   |\r\n9  |             ($t:tt) => { compile_error!(\"no match\") };\r\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n...\r\n17 |     let _x = ascii!('a');\r\n   |              ----------- in this macro invocation\r\n   |\r\n   = note: this error originates in the macro `ascii` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror: aborting due to previous error\r\n```\r\nI honestly don't know why this single-file version fails but the two-crate version works, and whether that is valid or a bug. It feels like it should compile.\r\n\r\n## Metadata difference\r\nThe only other clue I have is that the metadata has changed slightly. The older (pre-regression) compiler produces this:\r\n```\r\n-rw-rw-r-- 1 njn njn 3282 Apr 22 13:39 liby-d5c1be4b71acf3c4.rmeta\r\n```\r\nThe newer (post-regression) compiler produces this:\r\n```\r\n-rw-rw-r-- 1 njn njn 3278 Apr 22 13:39 liby-d5c1be4b71acf3c4.rmeta\r\n```\r\nI don't know of an easy way to compare metadata files, so I don't know what accounts for the slight size difference.\r\n\r\n## Conclusion\r\nThis is a weird one, involving a macro that generates another macro that is then used in another crate. This explains why the change in behaviour took a while to be noticed.\r\n\r\nI have looked through the commit responsible, but I can't see any changes related to all of the above.\r\n\r\n@petrochenkov, any ideas?\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96305/timeline", "performed_via_github_app": null, "state_reason": null}