{"url": "https://api.github.com/repos/rust-lang/rust/issues/69367", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69367/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69367/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69367/events", "html_url": "https://github.com/rust-lang/rust/issues/69367", "id": 569308363, "node_id": "MDU6SXNzdWU1NjkzMDgzNjM=", "number": 69367, "title": "Scoping rules for tail expressions leads to unexpected compiler error", "user": {"login": "Sherlock-Holo", "id": 10096425, "node_id": "MDQ6VXNlcjEwMDk2NDI1", "avatar_url": "https://avatars.githubusercontent.com/u/10096425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sherlock-Holo", "html_url": "https://github.com/Sherlock-Holo", "followers_url": "https://api.github.com/users/Sherlock-Holo/followers", "following_url": "https://api.github.com/users/Sherlock-Holo/following{/other_user}", "gists_url": "https://api.github.com/users/Sherlock-Holo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sherlock-Holo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sherlock-Holo/subscriptions", "organizations_url": "https://api.github.com/users/Sherlock-Holo/orgs", "repos_url": "https://api.github.com/users/Sherlock-Holo/repos", "events_url": "https://api.github.com/users/Sherlock-Holo/events{/privacy}", "received_events_url": "https://api.github.com/users/Sherlock-Holo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 1622913351, "node_id": "MDU6TGFiZWwxNjIyOTEzMzUx", "url": "https://api.github.com/repos/rust-lang/rust/labels/lang-team-202x-edition", "name": "lang-team-202x-edition", "color": "fcbff6", "default": false, "description": "Something we may consider if we do another edition"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-22T09:25:58Z", "updated_at": "2023-05-07T15:53:01Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code: [playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=efbf3a046a8d1801cc3559ba28331368)\r\n\r\n```rust\r\nuse tokio::sync::{Mutex, RwLock};\r\n\r\nstruct InnerUser {\r\n    file_handle: Mutex<u64>,\r\n}\r\n\r\nstruct Foo(RwLock<InnerUser>);\r\n\r\nimpl Foo {\r\n    async fn try_set_lock0(&self) -> Result<(), u32> {\r\n        let guard = self.0.read().await;\r\n        if let Ok(_) = guard.file_handle.try_lock() {\r\n            Ok(())\r\n        } else {\r\n            Err(2)\r\n        }\r\n    }\r\n\r\n    async fn try_set_lock1(&self) -> Result<(), u32> {\r\n        let guard = self.0.read().await;\r\n        let ret = if let Ok(_) = guard.file_handle.try_lock() {\r\n            Ok(())\r\n        } else {\r\n            Err(2)\r\n        };\r\n        ret\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: \r\n\r\ncompile success\r\n\r\nInstead, this happened:\r\nthe first function report error\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0597]: `guard` does not live long enough\r\n  --> src/lib.rs:12:24\r\n   |\r\n12 |         if let Ok(_) = guard.file_handle.try_lock() {\r\n   |                        ^^^^^-----------------------\r\n   |                        |\r\n   |                        borrowed value does not live long enough\r\n   |                        a temporary with access to the borrow is created here ...\r\n...\r\n17 |     }\r\n   |     -\r\n   |     |\r\n   |     `guard` dropped here while still borrowed\r\n   |     ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::result::Result<tokio::sync::mutex::MutexGuard<'_, u64>, tokio::sync::mutex::TryLockError>`\r\n   |\r\n   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0597`.\r\nerror: could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.43.0-nightly (8aa9d2014 2020-02-21)\r\nbinary: rustc\r\ncommit-hash: 8aa9d2014f4e5258f83b907e8431c59a33acdae7\r\ncommit-date: 2020-02-21\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.43.0-nightly\r\nLLVM version: 9.0\r\n\r\nplayground is stable 1.41.0\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69367/timeline", "performed_via_github_app": null, "state_reason": null}