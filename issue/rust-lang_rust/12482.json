{"url": "https://api.github.com/repos/rust-lang/rust/issues/12482", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12482/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12482/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12482/events", "html_url": "https://github.com/rust-lang/rust/issues/12482", "id": 28108622, "node_id": "MDU6SXNzdWUyODEwODYyMg==", "number": 12482, "title": "Converting types with an expression (not a statement)", "user": {"login": "Valloric", "id": 919444, "node_id": "MDQ6VXNlcjkxOTQ0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/919444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Valloric", "html_url": "https://github.com/Valloric", "followers_url": "https://api.github.com/users/Valloric/followers", "following_url": "https://api.github.com/users/Valloric/following{/other_user}", "gists_url": "https://api.github.com/users/Valloric/gists{/gist_id}", "starred_url": "https://api.github.com/users/Valloric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Valloric/subscriptions", "organizations_url": "https://api.github.com/users/Valloric/orgs", "repos_url": "https://api.github.com/users/Valloric/repos", "events_url": "https://api.github.com/users/Valloric/events{/privacy}", "received_events_url": "https://api.github.com/users/Valloric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-02-23T00:12:05Z", "updated_at": "2014-02-23T00:31:04Z", "closed_at": "2014-02-23T00:23:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here's example code showing ideal code I'd like to write:\n\n``` rust\nfn example( pattern: &str ) {\n  match pattern.split( '*' ).collect() {\n    [head, tail] => println!( \"{:?} {:?}\", head, tail ),\n    _ => ()\n  };\n}\n```\n\nand here's the code Rust forces me to write:\n\n``` rust\nfn example( pattern: &str ) {\n  let items: ~[&str] = pattern.split( '*' ).collect();\n  let items_ref: &[&str] = items;\n  match items_ref {\n    [head, tail] => println!( \"{:?} {:?}\", head, tail ),\n    _ => ()\n  };\n}\n```\n\nNotice the useless `items` and `items_ref` vars. They only exist to placate the compiler. I understand that `pattern.split( '*' ).collect()` returns a `std::iter::FromIterator<&str>` and that conversions need to happen, but I'm currently forced to use vars to achieve this. The `as` keyword for casting only works with primitive numeric types or pointers, so I know of no way to get a `~[&str]` out of `pattern.split( '*' ).collect()` (and then a `&[&str]` out of that) with an expression.\n\nThe `match` makes this a very pathological example, but here's something more common:\n\n``` rust\nfn takes_ref_vec( items: &[int] ) {\n  println!( \"{:?}\", items )\n}\n\n#[test]\nfn takes_ref_vec_tests() {\n  // Doesn't compile!\n  takes_ref_vec( [1, 2, 3].iter().map( |&x| x ).collect() ) \n\n  // Infinite sadness...\n  let useless: ~[int] = [1, 2, 3].iter().map( |&x| x ).collect();\n  takes_ref_vec( useless );\n}\n```\n\nI know I'm unlikely to convince the Rust devs to accept implicit casts, but could we make explicit casts possible with an expression? Something like `as` for numeric types? Having to introduce a new variable name only for the sake of a cast is not very user-friendly and only leads to boilerplate code. Also, being forced to use a statement to cast a type feels quite un-functional and needlessly breaks my expression chains.\n\nI'm a complete Rust newbie, so apologies if I'm missing some obvious solution to the above problems.\n\nThis is all using the latest [Rust nightly](https://launchpad.net/~hansjorg/+archive/rust).\n", "closed_by": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12482/timeline", "performed_via_github_app": null, "state_reason": "completed"}