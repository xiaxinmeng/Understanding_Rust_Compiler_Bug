{"url": "https://api.github.com/repos/rust-lang/rust/issues/99279", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99279/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99279/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99279/events", "html_url": "https://github.com/rust-lang/rust/issues/99279", "id": 1305889819, "node_id": "I_kwDOAAsO6M5N1kwb", "number": 99279, "title": "\u201ccaptured variable cannot escape `FnMut` closure body\u201d diagnostic can be more confusing than the basic \u201cmay outlive current function\u201d diagnostic", "user": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-07-15T10:52:39Z", "updated_at": "2023-04-05T17:28:38Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Consider the following example ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=a3f2f6dc2254b8d395e510b9a401ea9f)):\r\n\r\n```rust\r\nfn is_fnmut<R, F: FnMut() -> R>(_: F) {}\r\n\r\nfn bad() {\r\n    let mut x = 5;\r\n    is_fnmut(|| async {\r\n        x += 1;\r\n    });\r\n}\r\n```\r\n\r\nHere the `x` is captured by-value by the closure but the `async` block then captures it by-reference and the resulting future is being immediately returned from the closure. This is the standard example of returning function-local variables by reference.\r\n\r\nThe diagnostic thus reads as:\r\n\r\n```\r\nerror: captured variable cannot escape `FnMut` closure body\r\n --> src/lib.rs:5:17\r\n  |\r\n4 |       let mut x = 5;\r\n  |           ----- variable defined here\r\n5 |       is_fnmut(|| async {\r\n  |  _______________-_^\r\n  | |               |\r\n  | |               inferred to be a `FnMut` closure\r\n6 | |         x += 1;\r\n  | |         - variable captured here\r\n7 | |     });\r\n  | |_____^ returns an `async` block that contains a reference to a captured variable, which then escapes the closure body\r\n  |\r\n  = note: `FnMut` closures only have access to their captured variables while they are executing...\r\n  = note: ...therefore, they cannot allow references to captured variables to escape\r\n```\r\n\r\nThere are a couple of problems with this diagnostic \u2013 first, it places a lot of the blame on the closure being inferred as `FnMut`. This can and does confuse people reading this diagnostic that the solution is to somehow change the closure to _not_ be an `FnMut`. However, in practice there is rarely anything sensible that the author can do to affect the traits a closure implements. These auto-traits will always be implemented for all the applicable closures. Second, making closure be something else than `FnMut` doesn\u2019t actually help in any way \u2013 the return value still references its captures by a reference!\r\n\r\nI\u2019d like to argue that as it stands the generic \u201creturned value may outlive the current function\u201d diagnostic is [much more understandable](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=f774a9935f66b0af8a3bd0c018359477). Not to mention that it triggers the actual most-likely correct `help` suggestion:\r\n\r\n```\r\nerror[E0373]: async block may outlive the current function, but it borrows `x`, which is owned by the current function\r\n --> src/lib.rs:6:15\r\n  |\r\n6 |         async { x += 1; }\r\n  |               ^^-^^^^^^^^\r\n  |               | |\r\n  |               | `x` is borrowed here\r\n  |               may outlive borrowed value `x`\r\n  |\r\nnote: async block is returned here\r\n --> src/lib.rs:6:9\r\n  |\r\n6 |         async { x += 1; }\r\n  |         ^^^^^^^^^^^^^^^^^\r\nhelp: to force the async block to take ownership of `x` (and any other referenced variables), use the `move` keyword\r\n  |\r\n6 |         async move { x += 1; }\r\n  |               ++++\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99279/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99279/timeline", "performed_via_github_app": null, "state_reason": null}