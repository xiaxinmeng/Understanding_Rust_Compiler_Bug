{"url": "https://api.github.com/repos/rust-lang/rust/issues/98780", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98780/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98780/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98780/events", "html_url": "https://github.com/rust-lang/rust/issues/98780", "id": 1291851396, "node_id": "I_kwDOAAsO6M5NABaE", "number": 98780, "title": "Confusing wording of Vec::from_raw_parts pointer allocation requirement", "user": {"login": "Hawk777", "id": 365236, "node_id": "MDQ6VXNlcjM2NTIzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/365236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hawk777", "html_url": "https://github.com/Hawk777", "followers_url": "https://api.github.com/users/Hawk777/followers", "following_url": "https://api.github.com/users/Hawk777/following{/other_user}", "gists_url": "https://api.github.com/users/Hawk777/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hawk777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hawk777/subscriptions", "organizations_url": "https://api.github.com/users/Hawk777/orgs", "repos_url": "https://api.github.com/users/Hawk777/repos", "events_url": "https://api.github.com/users/Hawk777/events{/privacy}", "received_events_url": "https://api.github.com/users/Hawk777/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-07-01T21:38:23Z", "updated_at": "2022-10-03T23:31:47Z", "closed_at": "2022-10-03T23:31:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "[The Alternatives section of the documentation for `core::mem::transmute`](https://doc.rust-lang.org/stable/core/mem/fn.transmute.html#alternatives) has this to say about a better way to turn a `Vec<&X>` into a `Vec<Option<&X>>`:\r\n> ```rust\r\n> // This is the proper no-copy, unsafe way of \"transmuting\" a `Vec`, without relying on the\r\n> // data layout. Instead of literally calling `transmute`, we perform a pointer cast, but\r\n> // in terms of converting the original inner type (`&i32`) to the new one (`Option<&i32>`),\r\n> // this has all the same caveats. Besides the information provided above, also consult the\r\n> // [`from_raw_parts`] documentation.\r\n> let v_from_raw = unsafe {\r\n>     // Ensure the original vector is not dropped.\r\n>     let mut v_clone = std::mem::ManuallyDrop::new(v_clone);\r\n>     Vec::from_raw_parts(v_clone.as_mut_ptr() as *mut Option<&i32>,\r\n>                         v_clone.len(),\r\n>                         v_clone.capacity())\r\n> };\r\n> ```\r\n\r\n[The documentation for `Vec<T>::from_raw_parts`](https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html#method.from_raw_parts) has this to say about where you can get the pointer from:\r\n> `ptr` needs to have been previously allocated via [`String`](https://doc.rust-lang.org/stable/alloc/string/struct.String.html)/`Vec<T>` (at least, it\u2019s highly likely to be incorrect if it wasn\u2019t).\r\n\r\nA strict reading, if I understand correctly, says that these two statements are contradictory. The `transmute` documentation says that it is safe to create a `Vec<&i32>` and then use `from_raw_parts` to create a `Vec<Option<&i32>>` out of its pointer. But the `Vec` documentation says that, when creating a `Vec<T>`, `ptr` must have previously been allocated via precisely and only `Vec<T>`, *not* `Vec<U>` for some other type `U`\u2014not even if `U` happens to be transmutable from `T`, not even if `T` and `U` are ABI-compatible, not only if `T` is a `repr(transparent)` wrapper around `U`, but *only `T` itself*.\r\n\r\nI suspect it was meant to say it must have previously been allocated by `Vec`, not `Vec<T>`; after all, if it could only have been allocated by `Vec<T>` in the first place, the next bullet point would be redundant (because obviously `T` has the same alignment as `T`).", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98780/timeline", "performed_via_github_app": null, "state_reason": "completed"}