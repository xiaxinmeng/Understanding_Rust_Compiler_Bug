{"url": "https://api.github.com/repos/rust-lang/rust/issues/24564", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/24564/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/24564/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/24564/events", "html_url": "https://github.com/rust-lang/rust/issues/24564", "id": 69336768, "node_id": "MDU6SXNzdWU2OTMzNjc2OA==", "number": 24564, "title": "Provide support for arbitrary width atomics from 16bit to 2x word size (u16, u32, u64, u128)", "user": {"login": "rrichardson", "id": 124171, "node_id": "MDQ6VXNlcjEyNDE3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/124171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rrichardson", "html_url": "https://github.com/rrichardson", "followers_url": "https://api.github.com/users/rrichardson/followers", "following_url": "https://api.github.com/users/rrichardson/following{/other_user}", "gists_url": "https://api.github.com/users/rrichardson/gists{/gist_id}", "starred_url": "https://api.github.com/users/rrichardson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rrichardson/subscriptions", "organizations_url": "https://api.github.com/users/rrichardson/orgs", "repos_url": "https://api.github.com/users/rrichardson/repos", "events_url": "https://api.github.com/users/rrichardson/events{/privacy}", "received_events_url": "https://api.github.com/users/rrichardson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-04-18T18:50:20Z", "updated_at": "2016-08-14T06:40:18Z", "closed_at": "2016-08-14T06:40:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "In order to perform many tasks without locks, CAS requires two values in order to avoid the [ABA Problem](https://www.wikiwand.com/en/ABA_problem)\n\nTypically, the first value is the item which needs to be swapped, and the 2nd is an independently adjust variable which reduces the likelyhood that a value can be swapped in, and swapped out without competing threads observing it. \n\nFor example, popping off of a list based stack might look like:\n\n``` rust\nlet mut head = [0u64, 0u64];\nlet mut next = [0u64, 0u64];\n\nloop {  \n    head = hdr.head_offset.load(Ordering::Relaxed);\n    next[0] = get_list(head[0]).next_offset;\n    next[1] = head[1] + 1;\n    if hdr.head_offset.compare_and_swap(head, next, Ordering::SeqCst) {\n        break;\n    }\n}\n```\n\n~~Note that even better, many atomic libs, such as [concurrency kit](http://concurrencykit.org/doc/ck_pr_cas.html) provide additional functionality.  When a CAS fails, it will put the updated value (which resides in hdr.head_offset) into another param of your choosing, making the cas loop more efficient and possibly doing so atomically.~~\n\n~~So the updated value is placed into head, thus avoiding the need to put hdr.head_offset.load inside the loop.~~ \n\nI do recommend looking to concurrencykit for examples, we have used that library in a significant amount of production code with great success.  However, the API provided by Atomic*.compare_and_swap is fine, as it always returns the value that was present in the variable at the time of the cas. \n\n_caveats_ \nIt seems like it would be straightforward to provide support for Usize atomic arrays, but doing such a thing with the pointer type (where my interests lie) would violate type safety mildly :) \n\nAlso, one major limitation right now is that when performing a cas, most architectures require an array to be aligned to the size of the array. e.g. on a 64 bit system,  an AtomicUsize or AtomicPtr double width CAS would require the array to be aligned on a 16 byte boundary.   I am not sure of a way to guarantee this happens if/when the data types are in structs. \n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/24564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/24564/timeline", "performed_via_github_app": null, "state_reason": "completed"}