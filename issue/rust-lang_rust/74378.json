{"url": "https://api.github.com/repos/rust-lang/rust/issues/74378", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74378/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74378/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74378/events", "html_url": "https://github.com/rust-lang/rust/issues/74378", "id": 657582430, "node_id": "MDU6SXNzdWU2NTc1ODI0MzA=", "number": 74378, "title": "Emit noundef LLVM attribute", "user": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-15T19:03:04Z", "updated_at": "2022-02-14T16:04:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "LLVM 11 introduces a new `noundef` attribute, with the following semantics:\r\n\r\n> This attribute applies to parameters and return values. If the value representation contains any undefined or poison bits, the behavior is undefined. Note that this does not refer to padding introduced by the type\u2019s storage representation.\r\n\r\nIn LLVM 11 itself it doesn't do anything yet, but this will become important in the future to reduce the impact of `freeze` instructions.\r\n\r\nWe need to figure out for which parameters / return values we can emit this attribute. We generally can't do so if any bits are unspecified, e.g. due to padding. More problematic for Rust is https://github.com/rust-lang/unsafe-code-guidelines/issues/71, i.e. the question of whether integers are allowed to contain uninitialized bits without going through something like MaybeUninit.\r\n\r\nIf we go with aggressive emission of noundef, we probably need to ~~punish~~ safe-guard `mem::uninitialized()` users with liberal application of `freeze`.\r\n\r\ncc @RalfJung", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74378/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74378/timeline", "performed_via_github_app": null, "state_reason": null}