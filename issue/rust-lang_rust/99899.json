{"url": "https://api.github.com/repos/rust-lang/rust/issues/99899", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99899/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99899/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99899/events", "html_url": "https://github.com/rust-lang/rust/issues/99899", "id": 1321987320, "node_id": "I_kwDOAAsO6M5Oy-z4", "number": 99899, "title": "Improve `core::intrinsics::black_box` output.", "user": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1353616418, "node_id": "MDU6TGFiZWwxMzUzNjE2NDE4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-intrinsics", "name": "A-intrinsics", "color": "f7e101", "default": false, "description": "Area: intrinsics"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-07-29T09:25:47Z", "updated_at": "2023-03-11T04:31:51Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "On discord, the user kangalioo (unsure of github name) shared a custom version of the `black_box` (https://github.com/rust-lang/rust/issues/64102) function they're using to improve the asm output of black_box, and reduce the overhead of its use. It does this by passing small things in registers instead of by pointers.\r\n\r\n```rs\r\n// Warning, not sound. Do not use.\r\npub fn black_box<T>(x: T) -> T {\r\n    use std::mem::{transmute_copy as t, forget as f};\r\n    use std::arch::asm;\r\n    unsafe { match std::mem::size_of::<T>() {\r\n        1 => { let mut y: u8 = t(&x); f(x); asm!(\"/*{y}*/\", y = inout(reg_byte) y, options(nostack)); t(&y) }\r\n        2 => { let mut y: u16 = t(&x); f(x); asm!(\"/*{y}*/\", y = inout(reg) y, options(nostack)); t(&y) }\r\n        4 => { let mut y: u32 = t(&x); f(x); asm!(\"/*{y}*/\", y = inout(reg) y, options(nostack)); t(&y) }\r\n        8 => { let mut y: u64 = t(&x); f(x); asm!(\"/*{y}*/\", y = inout(reg) y, options(nostack)); t(&y) }\r\n        16 => { let [mut y, mut z]: [u64; 2] = t(&x); f(x); asm!(\"/*{y}{z}*/\", y = inout(reg) y, z = inout(reg) z, options(nostack)); t(&[y, z]) }\r\n        _ => { x },\r\n    } }\r\n}\r\npub fn example() {\r\n    black_box(black_box(2) + black_box(3));\r\n    extern \"C\" { fn print(_: &str); }\r\n    unsafe { print(black_box(\"hello world :)\")); }\r\n}\r\n```\r\n\r\nWhich produces the following output:\r\n\r\n```nasm\r\nexample::example:\r\n    mov     eax, 2\r\n    mov     ecx, 3\r\n    add     ecx, eax\r\n    lea     rdi, [rip + .L__unnamed_1]\r\n    mov     esi, 14\r\n    jmp     qword ptr [rip + print@GOTPCREL]\r\n.L__unnamed_1:\r\n    .ascii  \"hello world :)\"\r\n```\r\n\r\nIn comparison, the current black box `black_box` spills the output in basically all cases. The equivalent output with the current `black_box` is as follows (Godbolt for all this is available here https://godbolt.org/z/a7evcEP6x):\r\n\r\n```nasm\r\nexample::example:\r\n    sub     rsp, 24\r\n    mov     dword ptr [rsp + 8], 2\r\n    lea     rax, [rsp + 8]\r\n    mov     ecx, dword ptr [rsp + 8]\r\n    mov     dword ptr [rsp + 8], 3\r\n    add     ecx, dword ptr [rsp + 8]\r\n    mov     dword ptr [rsp + 8], ecx\r\n    lea     rcx, [rip + .L__unnamed_1]\r\n    mov     qword ptr [rsp + 8], rcx\r\n    mov     qword ptr [rsp + 16], 14\r\n    mov     rdi, qword ptr [rsp + 8]\r\n    mov     rsi, qword ptr [rsp + 16]\r\n    call    qword ptr [rip + print@GOTPCREL]\r\n    add     rsp, 24\r\n    ret\r\n\r\n.L__unnamed_1:\r\n    .ascii  \"hello world :)\"\r\n```\r\n\r\nI believe this is basically because we just lower the intrinsic as passing a pointer to the value into an inline asm block, which forces the spilling.\r\n\r\nI don't believe this can be fixed by libs changes, as we are just calling into an intrinsic and need to remain that way to support all targets (and cases like miri). Additionally, the version posted in discord has a soundness hole, and is considered UB if `T` contains padding bytes (and can't be fixed at the moment as passing `MaybeUninit` via registers isn't currently possible).\r\n\r\nHowever, because we just pass the argument to an intrinsic, it seems likely that the compiler can lower it in a more optimal way, which seems to be a less error-prone way of handling this anyway.\r\n\r\nImproving this output seems beneficial, since the whole point of this intrinsic is to have as close to 0 cost as possible while still providing an optimization barrier. I think the basic idea behind the `black_box` provided above is a reasonable starting point of what would be good, but it's obviously not a requirement that it's lowered in that manner.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99899/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99899/timeline", "performed_via_github_app": null, "state_reason": null}