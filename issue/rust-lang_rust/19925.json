{"url": "https://api.github.com/repos/rust-lang/rust/issues/19925", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19925/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19925/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19925/events", "html_url": "https://github.com/rust-lang/rust/issues/19925", "id": 52133437, "node_id": "MDU6SXNzdWU1MjEzMzQzNw==", "number": 19925, "title": "Set transmute from fn item to type fn lint a hard error", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 219670472, "node_id": "MDU6TGFiZWwyMTk2NzA0NzI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/final-comment-period", "name": "final-comment-period", "color": "1e76d9", "default": false, "description": "In the final comment period and will be merged soon unless new substantive objections are raised."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}], "state": "closed", "locked": false, "assignee": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 42, "created_at": "2014-12-16T16:22:14Z", "updated_at": "2017-04-11T21:17:46Z", "closed_at": "2017-03-01T11:59:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Original title:** Fn item types should be zero-sized\n\nPer [RFC 401](https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md#function-type-polymorphism), every fn in Rust should have its own unique, zero-sized type. This fits with the overall design of closures, which also have their own unique types (but those types are not zero-sized, as they carry the environment). None of these types have any explicit syntax at present. This has been a longstanding plan, but until recently it was not fully implemented. This is changing with PR #31710, which means that some existing code will need to be adjusted to account for the new behavior. This issue attempts to summarize how things work and describe what needs to be changed.\n### Zero-sized fn types\n\nWhat all of this means is that, if you have a function declaration `foo`:\n\n``` rust\n// for the purposes of this discussion, all of these different kinds of `fn` declarations are equivalent:\nfn foo(x: i32) { ... }\nextern \"C\" fn foo(x: i32);\nimpl i32 { fn foo(x: self) { ... } }\n```\n\nthe type of `foo` is **not** `fn(i32)`, as one might expect. Rather, it is a unique, zero-sized marker type that I will just write as `typeof(foo)`. However, `typeof(foo)` can be _coerced_ to a function pointer `fn(i32)`, so you rarely notice this:\n\n``` rust\nlet x: fn(i32) = foo; // OK, coerces\n```\n\nThe reason that this matter is that the type `fn(i32)` is not specify to any particular function: it's a function _pointer_. So calling `x()` results in a virtual call, whereas `foo()` is statically dispatched, because the type of `foo` tells us precisely what function is being called. \n### Impact on users\n\nAs noted above, coercions mean that most code will continue to work just fine before and after this issue is fully fixed. However, you can tell the difference in a few scenarios. Perhaps the most prominent is using **transmute** to convert a fn item into a fn pointer. This is often done as part of an FFI:\n\n``` rust\nextern \"C\" fn foo(userdata: Box<i32>) {\n   ...\n}\n\nlet f: extern \"C\" fn(*mut i32) = transmute(foo);\ncallback(f);\n```\n\nHere, transmute is being used to convert the types of the fn arguments. This pattern is now incorrect because, because the type of `foo` is a function **item** (`typeof(foo)`), which is zero-sized, and the target type (`fn()`) is a function pointer, which is not zero-sized. For now, this pattern still works due to some special-cased code in the compiler, but that code is expected to be removed. For future compatibility, this pattern should be rewritten. There are a few possible ways to do this:\n- change the original fn declaration to match the expected signature, and do the cast in the fn body (perhaps the best);\n- cast the fn item fo a fn pointer before calling transmute, as shown here:\n  - `let f: extern \"C\" fn(*mut i32) = transmute(foo as extern \"C\" fn(_))`\n  - `let f: extern \"C\" fn(*mut i32) = transmute(foo as usize) /* works too */`\n\nThe same applies to transmutes to `*mut fn()`, which were observed frequently in practice. Note though that use of this type is generally incorrect. The intention is typically to describe a function pointer, but just `fn()` alone suffices for that. `*mut fn()` is a pointer to a fn pointer. (Since these values are typically just passed to C code, however, this rarely makes a difference in practice.)\n### Current status and implementation trail\n- [x] PR #19891 laid the groundwork with fresh, unique types per fn item, but left the back-end work undone\n- [x] PR #31710 completes the work.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19925/timeline", "performed_via_github_app": null, "state_reason": "completed"}