{"url": "https://api.github.com/repos/rust-lang/rust/issues/93889", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93889/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93889/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93889/events", "html_url": "https://github.com/rust-lang/rust/issues/93889", "id": 1131600922, "node_id": "I_kwDOAAsO6M5Dctwa", "number": 93889, "title": "On Apple M1, passing `-Ctarget-cpu=native` results in us choosing an older CPU than we choose by default.", "user": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-02-11T03:27:53Z", "updated_at": "2022-09-24T05:34:16Z", "closed_at": "2022-09-24T05:34:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "On `aarch64-apple-darwin`, we don't seem to be determining the right target features when `-Ctarget-cpu=native` is enabled -- we do a much better job *without* the `-Ctarget-cpu` flag than *with* it.\r\n\r\nFor example:\r\n\r\n<details>\r\n<summary>The output of <code>rustc --print cfg -Ctarget-cpu=native</code></summary>\r\n\r\n```\r\ndebug_assertions\r\npanic=\"unwind\"\r\ntarget_abi=\"\"\r\ntarget_arch=\"aarch64\"\r\ntarget_endian=\"little\"\r\ntarget_env=\"\"\r\ntarget_family=\"unix\"\r\ntarget_feature=\"aes\"\r\ntarget_feature=\"fp\"\r\ntarget_feature=\"neon\"\r\ntarget_feature=\"pmuv3\"\r\ntarget_feature=\"sha2\"\r\ntarget_has_atomic=\"128\"\r\ntarget_has_atomic=\"16\"\r\ntarget_has_atomic=\"32\"\r\ntarget_has_atomic=\"64\"\r\ntarget_has_atomic=\"8\"\r\ntarget_has_atomic=\"ptr\"\r\ntarget_has_atomic_equal_alignment=\"128\"\r\ntarget_has_atomic_equal_alignment=\"16\"\r\ntarget_has_atomic_equal_alignment=\"32\"\r\ntarget_has_atomic_equal_alignment=\"64\"\r\ntarget_has_atomic_equal_alignment=\"8\"\r\ntarget_has_atomic_equal_alignment=\"ptr\"\r\ntarget_has_atomic_load_store=\"128\"\r\ntarget_has_atomic_load_store=\"16\"\r\ntarget_has_atomic_load_store=\"32\"\r\ntarget_has_atomic_load_store=\"64\"\r\ntarget_has_atomic_load_store=\"8\"\r\ntarget_has_atomic_load_store=\"ptr\"\r\ntarget_os=\"macos\"\r\ntarget_pointer_width=\"64\"\r\ntarget_thread_local\r\ntarget_vendor=\"apple\"\r\nunix\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>The output of <code>rustc --print cfg</code></summary>\r\n\r\n```\r\ndebug_assertions\r\npanic=\"unwind\"\r\ntarget_abi=\"\"\r\ntarget_arch=\"aarch64\"\r\ntarget_endian=\"little\"\r\ntarget_env=\"\"\r\ntarget_family=\"unix\"\r\ntarget_feature=\"aes\"\r\ntarget_feature=\"crc\"\r\ntarget_feature=\"dit\"\r\ntarget_feature=\"dotprod\"\r\ntarget_feature=\"dpb\"\r\ntarget_feature=\"dpb2\"\r\ntarget_feature=\"fcma\"\r\ntarget_feature=\"fhm\"\r\ntarget_feature=\"flagm\"\r\ntarget_feature=\"fp\"\r\ntarget_feature=\"fp16\"\r\ntarget_feature=\"frintts\"\r\ntarget_feature=\"jsconv\"\r\ntarget_feature=\"lor\"\r\ntarget_feature=\"lse\"\r\ntarget_feature=\"neon\"\r\ntarget_feature=\"pan\"\r\ntarget_feature=\"pauth\"\r\ntarget_feature=\"pmuv3\"\r\ntarget_feature=\"ras\"\r\ntarget_feature=\"rcpc\"\r\ntarget_feature=\"rcpc2\"\r\ntarget_feature=\"rdm\"\r\ntarget_feature=\"sb\"\r\ntarget_feature=\"sha2\"\r\ntarget_feature=\"sha3\"\r\ntarget_feature=\"ssbs\"\r\ntarget_feature=\"v8.1a\"\r\ntarget_feature=\"v8.2a\"\r\ntarget_feature=\"v8.3a\"\r\ntarget_feature=\"v8.4a\"\r\ntarget_feature=\"vh\"\r\ntarget_has_atomic=\"128\"\r\ntarget_has_atomic=\"16\"\r\ntarget_has_atomic=\"32\"\r\ntarget_has_atomic=\"64\"\r\ntarget_has_atomic=\"8\"\r\ntarget_has_atomic=\"ptr\"\r\ntarget_has_atomic_equal_alignment=\"128\"\r\ntarget_has_atomic_equal_alignment=\"16\"\r\ntarget_has_atomic_equal_alignment=\"32\"\r\ntarget_has_atomic_equal_alignment=\"64\"\r\ntarget_has_atomic_equal_alignment=\"8\"\r\ntarget_has_atomic_equal_alignment=\"ptr\"\r\ntarget_has_atomic_load_store=\"128\"\r\ntarget_has_atomic_load_store=\"16\"\r\ntarget_has_atomic_load_store=\"32\"\r\ntarget_has_atomic_load_store=\"64\"\r\ntarget_has_atomic_load_store=\"8\"\r\ntarget_has_atomic_load_store=\"ptr\"\r\ntarget_os=\"macos\"\r\ntarget_pointer_width=\"64\"\r\ntarget_thread_local\r\ntarget_vendor=\"apple\"\r\nunix\r\n```\r\n\r\n</details>\r\n\r\nThis is unexpected, and somewhat undesirable -- Ideally specifying `-Ctarget-cpu=native` would never *reduce* the set of target features compared to the default, and would, in fact, increase it.\r\n\r\nSome digging (mostly by @bjorn3 and @ehuss) determined that LLVM is ending up with `cyclone` as the CPU under `-Ctarget-cpu=native` and `apple-a14` as the CPU if nothing is passed. `apple-a14` itself is actually slightly wrong, even for baseline `aarch64-apple-darwin`, just the right value of `apple-m1` was not available in LLVM until LLVM v13.\r\n\r\nWhy is LLVM choosing cyclone? Dunno (perhaps because it's an early iOS aarch64 chip), but we probably can do a better job there, given that we do so for the default target -- and I think we can improve `aarch64-apple-darwin` (with or without `-Ctarget-cpu=native`) to use `apple-m1` -- perhaps only after an LLVM version check.\r\n\r\n---\r\n\r\nOpen question: Is there a way for us to implement `-Ctarget-cpu=native` conveniently? That is, to determine which CPU is native? Again, dunno! Running `sysctl hw.cpufamily` tells you... something... it comes from [these](https://github.com/apple-oss-distributions/xnu/blob/e6231be02a03711ca404e5121a151b24afbff733/osfmk/mach/machine.h#L411-L443), I suppose (well, I hope it's also in some more public documentation, I didn't look).\r\n\r\nCan that be mapped to a name like `apple-m1`? Probably, although seems slightly annoying, and there may be a better way... Also, they suggest that you \"should not\" do this in the comment above these defines, but... they *also* have the names of the Intel chips in there too, which obviously works just fine... so perhaps the \"should not\" in the sentence is in the RFC sense (and I can see why they might want to encourage feature checking anyway, even if checking the CPU worked fine)\r\n\r\nRegardless, I think that we don't actually need to fully fix `-Ctarget-cpu=native` in order to improve things here -- it'd be nice, but in the meantime perhaps it's sufficient for us to ensure that it doesn't yield a CPU older than the one we use by default (and as I mentioned, it might be worth bumping the default target-cpu for `aarch64-apple-darwin` to `apple-m1` when on LLVM 13 while we're there).\r\n\r\n---\r\n\r\n*(Zulip discussion leading to filing this issue: https://rust-lang.zulipchat.com/#narrow/stream/242906-t-compiler.2Farm/topic/aarch64-apple-darwin.20target.20feats.20w.2F.20.60-Ctarget-cpu.3Dnative.60 -- I've attempted to cover the important points above)*", "closed_by": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93889/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93889/timeline", "performed_via_github_app": null, "state_reason": "completed"}