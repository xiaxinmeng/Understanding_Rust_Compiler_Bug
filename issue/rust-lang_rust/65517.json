{"url": "https://api.github.com/repos/rust-lang/rust/issues/65517", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65517/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65517/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65517/events", "html_url": "https://github.com/rust-lang/rust/issues/65517", "id": 508683063, "node_id": "MDU6SXNzdWU1MDg2ODMwNjM=", "number": 65517, "title": "Direct users to crate-type=cdylib in crate-type=dylib documentation", "user": {"login": "hanna-kruppe", "id": 2311707, "node_id": "MDQ6VXNlcjIzMTE3MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2311707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hanna-kruppe", "html_url": "https://github.com/hanna-kruppe", "followers_url": "https://api.github.com/users/hanna-kruppe/followers", "following_url": "https://api.github.com/users/hanna-kruppe/following{/other_user}", "gists_url": "https://api.github.com/users/hanna-kruppe/gists{/gist_id}", "starred_url": "https://api.github.com/users/hanna-kruppe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hanna-kruppe/subscriptions", "organizations_url": "https://api.github.com/users/hanna-kruppe/orgs", "repos_url": "https://api.github.com/users/hanna-kruppe/repos", "events_url": "https://api.github.com/users/hanna-kruppe/events{/privacy}", "received_events_url": "https://api.github.com/users/hanna-kruppe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36956, "node_id": "MDU6TGFiZWwzNjk1Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-frontend", "name": "A-frontend", "color": "f7e101", "default": false, "description": "Area: frontend (errors, parsing and HIR)"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-17T19:44:36Z", "updated_at": "2019-10-17T20:55:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The dylib crate type is well known to be misleading and rarely useful (to put it politely) among rustc developers, but if a user reads about crate types in `rustc --help`, [the reference](https://doc.rust-lang.org/reference/linkage.html), or [the rustc book](https://doc.rust-lang.org/rustc/command-line-arguments.html#--crate-type-a-list-of-types-of-crates-for-the-compiler-to-emit) they won't get much indication of this. This probably contributes to the constant stream of users picking it or recommending it to each other when they really need `cdylib`. Generally this is only prevented if someone with \"insider knowledge\" is in the same room when the decision is made, and otherwise only corrected when something breaks and the user seeks help or files a bug report.\r\n\r\nI still believe it would be best to deprecate the crate type entirely but since that probably involves more process and pushback, for now I propose to add a note to all the aforementioned documents that says something like:\r\n\r\n> As with `lib`, the file produced from a `dylib` crate can only be consumed by the same version of rustc and is not guaranteed to be in any particular format or contain any symbols that other programs could use. If you wish to produce a dynamic library to be loaded dynamically by Rust programs or linked against by other languages, you need to use the `cdylib` crate type.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65517/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65517/timeline", "performed_via_github_app": null, "state_reason": null}