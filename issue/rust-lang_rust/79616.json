{"url": "https://api.github.com/repos/rust-lang/rust/issues/79616", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79616/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79616/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79616/events", "html_url": "https://github.com/rust-lang/rust/issues/79616", "id": 754833214, "node_id": "MDU6SXNzdWU3NTQ4MzMyMTQ=", "number": 79616, "title": "Improvements to error messages from nested indexing", "user": {"login": "ISSOtm", "id": 15271137, "node_id": "MDQ6VXNlcjE1MjcxMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/15271137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ISSOtm", "html_url": "https://github.com/ISSOtm", "followers_url": "https://api.github.com/users/ISSOtm/followers", "following_url": "https://api.github.com/users/ISSOtm/following{/other_user}", "gists_url": "https://api.github.com/users/ISSOtm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ISSOtm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ISSOtm/subscriptions", "organizations_url": "https://api.github.com/users/ISSOtm/orgs", "repos_url": "https://api.github.com/users/ISSOtm/repos", "events_url": "https://api.github.com/users/ISSOtm/events{/privacy}", "received_events_url": "https://api.github.com/users/ISSOtm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-12-02T00:37:16Z", "updated_at": "2020-12-02T01:28:53Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nstruct Board(Vec<Vec<String>>);\r\n\r\nimpl<I, J> Index<(I, J)> for Board {\r\n    type Output = String;\r\n\r\n    fn index(&self, index: (I, J)) -> &Self::Output {\r\n        self.0[index.1][index.0]\r\n    }\r\n}\r\n```\r\n\r\nThis fails, and `rustc` suggests adding constraints:\r\n\r\n```\r\nerror[E0277]: the type `[std::vec::Vec<std::string::String>]` cannot be indexed by `J`\r\n  --> src/lib.rs:24:10\r\n   |\r\n24 |         &self.0[index.1][index.0]\r\n   |          ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\r\n   |\r\n   = note: required because of the requirements on the impl of `std::ops::Index<J>` for `std::vec::Vec<std::vec::Vec<std::string::String>>`\r\nhelp: consider restricting type parameter `J`\r\n   |\r\n20 | impl<I, J: std::slice::SliceIndex<[std::vec::Vec<std::string::String>]>> Index<(I, J)> for Board {\r\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nApplying the suggested changes:\r\n\r\n```rust\r\nstruct Board(Vec<Vec<String>>);\r\n\r\nimpl<I: SliceIndex<[String]>, J: SliceIndex<[Vec<String>]>> Index<(I, J)> for Board {\r\n    type Output = String;\r\n\r\n    fn index(&self, index: (I, J)) -> &Self::Output {\r\n        self.0[index.1][index.0]\r\n    }\r\n}\r\n```\r\n\r\n`rustc` produced the following error, which fails to indicate that what's needed is specifying the output type. (Further, `J` is mentioned, which is not relevant to the line being pointed, but rather the `Index` `impl`.)\r\n\r\n```\r\nerror[E0608]: cannot index into a value of type `<J as std::slice::SliceIndex<[std::vec::Vec<std::string::String>]>>::Output`\r\n  --> src/lib.rs:24:9\r\n   |\r\n24 |         self.0[index.1][index.0]\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nThe correct code is the following:\r\n\r\n```rust\r\nstruct Board(Vec<Vec<String>>);\r\n\r\nimpl<\r\n        I: SliceIndex<[String], Output = String>,\r\n        J: SliceIndex<[Vec<String>], Output = Vec<String>>,\r\n    > Index<(I, J)> for Board\r\n{\r\n    type Output = String;\r\n\r\n    fn index(&self, index: (I, J)) -> &Self::Output {\r\n        &self.0[index.1][index.0]\r\n    }\r\n}\r\n```\r\n\r\nAs a side note, the following (incorrect) fix was proposed:\r\n\r\n```rust\r\nstruct Board(Vec<Vec<String>>);\r\n\r\nimpl<\r\n        I: SliceIndex<[String], Output = String>,\r\n        J: SliceIndex<[Vec<String>], Output = [String]>,\r\n    > Index<(I, J)> for Board\r\n{\r\n    type Output = String;\r\n\r\n    fn index(&self, index: (I, J)) -> &Self::Output {\r\n        &self.0[index.1][index.0]\r\n    }\r\n}\r\n```\r\n\r\nAs expected, this compiles, and fails when trying to use the operator:\r\n\r\n```\r\nerror[E0271]: type mismatch resolving `<usize as std::slice::SliceIndex<[std::vec::Vec<std::string::String>]>>::Output == [std::string::String]`\r\n   --> src/lib.rs:271:23\r\n    |\r\n271 |         while step >= self.board[coords].len() {\r\n    |                       ^^^^^^^^^^^^^^^^^^ expected struct `std::vec::Vec`, found slice\r\n    |\r\n    = note: expected type `std::vec::Vec<std::string::String>`\r\n              found slice `[std::string::String]`\r\n    = note: required because of the requirements on the impl of `std::ops::Index<(usize, usize)>` for `Board`\r\n```\r\n\r\nHowever, the line being pointed at shows the usage site, when the types being discussed are rather relevant to the `impl` block. This might be improvable as well.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n\r\n```\r\nissotm@sheik-kitty ~% rustc --version --verbose\r\nrustc 1.47.0 (18bf6b4f0 2020-10-07)\r\nbinary: rustc\r\ncommit-hash: 18bf6b4f01a6feaf7259ba7cdae58031af1b7b39\r\ncommit-date: 2020-10-07\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.47.0\r\nLLVM version: 11.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79616/timeline", "performed_via_github_app": null, "state_reason": null}