{"url": "https://api.github.com/repos/rust-lang/rust/issues/92857", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92857/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92857/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92857/events", "html_url": "https://github.com/rust-lang/rust/issues/92857", "id": 1101929590, "node_id": "I_kwDOAAsO6M5Brhx2", "number": 92857, "title": "GAT: mismatched types [E0308]", "user": {"login": "rwestphal", "id": 931662, "node_id": "MDQ6VXNlcjkzMTY2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/931662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rwestphal", "html_url": "https://github.com/rwestphal", "followers_url": "https://api.github.com/users/rwestphal/followers", "following_url": "https://api.github.com/users/rwestphal/following{/other_user}", "gists_url": "https://api.github.com/users/rwestphal/gists{/gist_id}", "starred_url": "https://api.github.com/users/rwestphal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rwestphal/subscriptions", "organizations_url": "https://api.github.com/users/rwestphal/orgs", "repos_url": "https://api.github.com/users/rwestphal/repos", "events_url": "https://api.github.com/users/rwestphal/events{/privacy}", "received_events_url": "https://api.github.com/users/rwestphal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 3307663436, "node_id": "MDU6TGFiZWwzMzA3NjYzNDM2", "url": "https://api.github.com/repos/rust-lang/rust/labels/GATs-triaged", "name": "GATs-triaged", "color": "e88000", "default": false, "description": "Issues using the `generic_associated_types` feature that have been triaged"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-01-13T15:21:28Z", "updated_at": "2023-05-08T09:57:03Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The following program is failing to compile on nightly ([Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=a7464fd2b8d9e352b704fda4e297ccb2)):\r\n```rust\r\n#![feature(generic_associated_types)]\r\n#![allow(type_alias_bounds)]\r\n\r\nuse once_cell::sync::Lazy;\r\nuse std::collections::HashMap;\r\n\r\n// ============= generic code =============\r\n\r\ntrait Provider: Sized {\r\n    // IterateCb's iterator item.\r\n    type ListEntry<'a>: std::fmt::Debug;\r\n\r\n    // Load IterateCb callbacks.\r\n    fn load_callbacks() -> Callbacks<Self>;\r\n}\r\n\r\ntype IterateCb<P: Provider> = for<'a> fn(&'a P) -> Box<dyn Iterator<Item = P::ListEntry<'a>> + 'a>;\r\n\r\nstruct Callbacks<P: Provider>(HashMap<&'static str, IterateCb<P>>);\r\n\r\n// ============ implementation ============\r\n\r\n// Global callbacks.\r\nstatic CALLBACKS: Lazy<Callbacks<Instance>> = Lazy::new(Instance::load_callbacks);\r\n\r\nstruct Instance {\r\n    peers: Vec<Peer>,\r\n    routes: Vec<Route>,\r\n}\r\n\r\n#[derive(Debug)]\r\nstruct Peer(i32);\r\n\r\n#[derive(Debug)]\r\nstruct Route(i32);\r\n\r\n#[derive(Debug)]\r\nenum InstanceListEntry<'a> {\r\n    Peer(&'a Peer),\r\n    Route(&'a Route),\r\n}\r\n\r\nimpl Provider for Instance {\r\n    type ListEntry<'a> = InstanceListEntry<'a>;\r\n\r\n    fn load_callbacks() -> Callbacks<Self> {\r\n        let mut callbacks = HashMap::new();\r\n\r\n        // First callback.\r\n        let callback: IterateCb<Self> = |instance| {\r\n            let iter = instance.peers.iter().map(InstanceListEntry::Peer);\r\n            Box::new(iter)\r\n        };\r\n        callbacks.insert(\"peers\", callback);\r\n\r\n        // Second callback.\r\n        let callback: IterateCb<Self> = |instance| {\r\n            let iter = instance.routes.iter().map(InstanceListEntry::Route);\r\n            Box::new(iter)\r\n        };\r\n        callbacks.insert(\"routes\", callback);\r\n\r\n        // todo!();\r\n        Callbacks(callbacks)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    // Initialize instance.\r\n    let instance = Instance {\r\n        peers: vec![Peer(1), Peer(2)],\r\n        routes: vec![Route(1), Route(2)],\r\n    };\r\n\r\n    // Print peers.\r\n    if let Some(cb) = CALLBACKS.0.get(\"peers\") {\r\n        let list_iter = (*cb)(&instance);\r\n        for list_entry in list_iter {\r\n            println!(\"peer: {:?}\", list_entry);\r\n        }\r\n    }\r\n    // Print routes.\r\n    if let Some(cb) = CALLBACKS.0.get(\"routes\") {\r\n        let list_iter = (*cb)(&instance);\r\n        for list_entry in list_iter {\r\n            println!(\"route: {:?}\", list_entry);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIn this program, I have a global list of callbacks that return an iterator over a generic associated type (`Provider::ListEntry<'a>`). The lifetime parameter is necessary because the associated type needs to be an enum of references.\r\n\r\nUnfortunately the code isn't compiling, and the error message doesn't seem to make much sense:\r\n```\r\n# cargo check\r\n    Checking hello_cargo v0.1.0 (/mnt/renato/git/rust/hello_cargo)\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:64:19\r\n   |\r\n64 |         Callbacks(callbacks)\r\n   |                   ^^^^^^^^^ expected associated type, found enum `InstanceListEntry`\r\n   |\r\n   = note: expected struct `HashMap<&'static str, for<'a> fn(&'a Instance) -> Box<(dyn Iterator<for<'a> Item = <Instance as Provider>::ListEntry<'a>> + 'a)>>`\r\n              found struct `HashMap<&str, for<'a> fn(&'a Instance) -> Box<(dyn Iterator<for<'a> Item = InstanceListEntry<'a>> + 'a)>>`\r\n   = help: consider constraining the associated type `<Instance as Provider>::ListEntry<'a>` to `InstanceListEntry<'_>` or calling a method that returns `<Instance as Provider>::ListEntry<'a>`\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `hello_cargo` due to previous error\r\n```\r\n\r\nWorkaround to make rustc accept the program: https://users.rust-lang.org/t/mismatched-types-gat-compiler-bug/68952/2\r\n\r\n### Meta\r\n\r\n```\r\n# rustc --version --verbose\r\nrustc 1.60.0-nightly (1bd4fdc94 2022-01-12)\r\nbinary: rustc\r\ncommit-hash: 1bd4fdc943513e1004f498bbf289279c9784fc6f\r\ncommit-date: 2022-01-12\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.60.0-nightly\r\nLLVM version: 13.0.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92857/timeline", "performed_via_github_app": null, "state_reason": null}