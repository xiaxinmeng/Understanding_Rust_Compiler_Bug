{"url": "https://api.github.com/repos/rust-lang/rust/issues/66100", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66100/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66100/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66100/events", "html_url": "https://github.com/rust-lang/rust/issues/66100", "id": 517513649, "node_id": "MDU6SXNzdWU1MTc1MTM2NDk=", "number": 66100, "title": "[codegen] Unnecessary panicking branches in resumption of infinite generator (stored in static variable)", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 679846574, "node_id": "MDU6TGFiZWw2Nzk4NDY1NzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-generators", "name": "A-generators", "color": "f7e101", "default": false, "description": "Area: Generators"}, {"id": 880020421, "node_id": "MDU6TGFiZWw4ODAwMjA0MjE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-embedded", "name": "WG-embedded", "color": "c2e0c6", "default": false, "description": "Of interest to the embedded Working Group"}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}, {"id": 1472502130, "node_id": "MDU6TGFiZWwxNDcyNTAyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-type_alias_impl_trait", "name": "F-type_alias_impl_trait", "color": "f9c0cc", "default": false, "description": "`#[feature(type_alias_impl_trait)]`"}, {"id": 1472513502, "node_id": "MDU6TGFiZWwxNDcyNTEzNTAy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generators", "name": "F-generators", "color": "f9c0cc", "default": false, "description": "`#![feature(generators)]`"}], "state": "closed", "locked": false, "assignee": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-11-05T02:32:48Z", "updated_at": "2020-03-19T09:14:28Z", "closed_at": "2020-03-19T09:14:28Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Tested with `nightly-2019-11-04`\r\n\r\n## Observed behavior\r\n\r\nThe following `no_std` program which stores a generator in a static variable and\r\nthen resumes it (no indirection / dynamic-dispatch involved):\r\n\r\n``` rust\r\n#![feature(generator_trait)]\r\n#![feature(generators)]\r\n#![feature(never_type)]\r\n#![feature(type_alias_impl_trait)]\r\n#![no_main]\r\n#![no_std]\r\n\r\nuse core::{mem::MaybeUninit, ops::Generator, pin::Pin};\r\nuse cortex_m_rt::{entry, exception};\r\nuse panic_halt as _;\r\n\r\ntype A = impl Generator<Yield = (), Return = !>;\r\n\r\nfn foo() -> A {\r\n    || loop {\r\n        yield\r\n    }\r\n}\r\n\r\nstatic mut X: MaybeUninit<A> = MaybeUninit::uninit();\r\n\r\n#[entry]\r\nfn main() -> ! {\r\n    unsafe {\r\n        X.as_mut_ptr().write(foo());\r\n    }\r\n\r\n    loop {}\r\n}\r\n\r\n#[exception]\r\nfn SysTick() {\r\n    unsafe {\r\n        Pin::new_unchecked(&mut *X.as_mut_ptr()).resume();\r\n    }\r\n}\r\n```\r\n\r\nwhen fully optimized for the `thumbv7m-none-eabi` target (`panic = abort`)\r\nproduces the following machine code for the `SysTick` function:\r\n\r\n``` armasm\r\n00000400 <SysTick>:\r\n 400:   f240 0000       movw    r0, #0\r\n 404:   f2c2 0000       movt    r0, #8192       ; 0x2000\r\n 408:   6801            ldr     r1, [r0, #0]\r\n 40a:   e8df f001       tbb     [pc, r1]\r\n 40e:   0502            .short  0x0502\r\n 410:   020d            .short  0x020d\r\n 412:   2103            movs    r1, #3\r\n 414:   6001            str     r1, [r0, #0]\r\n 416:   4770            bx      lr\r\n 418:   f240 5030       movw    r0, #1328       ; 0x530\r\n 41c:   2122            movs    r1, #34 ; 0x22\r\n 41e:   f2c0 0000       movt    r0, #0\r\n 422:   f000 f80c       bl      43e <core::panicking::panic> ; <- 1\r\n 426:   defe            udf     #254    ; 0xfe\r\n 428:   f240 5000       movw    r0, #1280       ; 0x500\r\n 42c:   2121            movs    r1, #33 ; 0x21\r\n 42e:   f2c0 0000       movt    r0, #0\r\n 432:   f000 f804       bl      43e <core::panicking::panic> ; <- 2\r\n 436:   defe            udf     #254    ; 0xfe\r\n```\r\n\r\nThis function resumes the generator stored in the static variable `X`. The\r\ngenerator is extremely simple and contains no explicit panicking branches yet\r\nthe machine code contains 2 panicking branches which are *not* necessary for\r\nmemory safety (more on this later).\r\n\r\nIf the program is slightly modified like this (semantics are not changed):\r\n\r\n``` diff\r\n@@ -7,7 +7,7 @@\r\n\r\n use core::{mem::MaybeUninit, ops::Generator, pin::Pin};\r\n use cortex_m_rt::{entry, exception};\r\n-use panic_halt as _;\r\n+// use panic_halt as _; // \"source-inlined\" as the `panic_halt` function at the bottom\r\n\r\n type A = impl Generator<Yield = (), Return = !>;\r\n\r\n@@ -34,3 +34,8 @@\r\n         Pin::new_unchecked(&mut *X.as_mut_ptr()).resume();\r\n     }\r\n }\r\n+\r\n+#[panic_handler]\r\n+fn panic_halt(_: &core::panic::PanicInfo) -> ! {\r\n+    loop {}\r\n+}\r\n```\r\n\r\nThen `SysTick` is optimized to the following machine code, which is free of\r\npanicking branches:\r\n\r\n``` armasm\r\n00000400 <SysTick>:\r\n 400:   f240 0000       movw    r0, #0\r\n 404:   2103            movs    r1, #3\r\n 406:   f2c2 0000       movt    r0, #8192       ; 0x2000\r\n 40a:   6001            str     r1, [r0, #0]\r\n 40c:   4770            bx      lr\r\n```\r\n\r\n## Expected behavior\r\n\r\nThis second machine code (the one with 5 instructions) is what one would expect\r\nfrom the first version of the program. Changing the shape / complexity of unrelated code\r\nshould not introduce panicking branches.\r\n\r\n## Cause\r\n\r\nThe `Generator.resume` function decides which part of the generator body to\r\nexecute based on the value of a discriminant. As of nightly-2019-11-04 the code\r\ngenerated for the `resume` function contains 2 \"built-in\" panicking branches,\r\nwhich are present in *all* generators:\r\n\r\n``` llvm\r\n; Function Attrs: nofree norecurse nounwind\r\ndefine void @SysTick() unnamed_addr #1 {\r\nstart:\r\n  %_3.i = load i32, i32* bitcast (<{ [4 x i8] }>* @_ZN3app1X17h48a9105f802c5ed4E to i32*), align 4\r\n  switch i32 %_3.i, label %bb6.i [\r\n    i32 0, label %\"_ZN3app3foo28_$u7b$$u7b$closure$u7d$$u7d$17hcc44d33a27bb7de8E.exit\"\r\n    i32 1, label %panic1.i ; <- 1\r\n    i32 2, label %panic.i  ; <- 2\r\n    i32 3, label %\"_ZN3app3foo28_$u7b$$u7b$closure$u7d$$u7d$17hcc44d33a27bb7de8E.exit\"\r\n  ]\r\n; ..\r\n}\r\n```\r\n\r\nThe first built-in panicking branch, which corresponds to discriminant `1`, is\r\nused to panic a generator that has been `resume`-d beyond *completion* -- a\r\ngenerator that has reached a `return` statement has reached completion.\r\n\r\nThe second built-in branch, which corresponds to discriminant `2`, is used to\r\npanic a generator that has been `resume`-d after panicking -- I'm not sure when\r\nthis can occur in practice but looking at the compiler codegen unwinding is required to\r\nreach this \"poisoned\" state.\r\n\r\nHowever, neither of these situations can occur in the example. The discriminant\r\nof the generator can never become `1` because it does not contain a `return`\r\nstatement in its body. Its discriminant can not become `2` either because the\r\ntarget has been configured for `panic = abort` meaning that unwinding is not\r\nsupported at the codegen level (`UnwindResume` functions are never generated). This\r\ncan be confirmed by scanning the optimized LLVM IR produced by the compiler: the\r\ndiscriminant is stored in static memory (`.bss`) and the only values written to\r\nthis memory are `0` and `3`.\r\n\r\n## Possible fixes (?)\r\n\r\nNaively, I would improve the *MIR* codegen by:\r\n\r\n- Not producing the `discriminant == 1` branch if the `Return` type of the\r\n  generator is `!` (or, I guess, any other empty type like `enum Void {}`). This\r\n  type indicates that the generator does not contain a `return` statement.\r\n\r\n- Not producing the `discriminant == 2` branch if the target has set its `panic`\r\n  option to `abort`. Alternatively, one could check if the unwind-related\r\n  `Resume` function is generated and omit the branch if it's *not* generated.\r\n  Relevant code:\r\n\r\nhttps://github.com/rust-lang/rust/blob/881ebeb776cf4062a85a20b15f64c7349319518c/src/librustc_mir/transform/generator.rs#L1061-L1068\r\n\r\nDoes these seem like sensible fixes?\r\n\r\n---\r\n\r\n# STR\r\n\r\nSteps to produce the above machine code. This is not a minified repro because a\r\ncertain complexity is required to get the inferior codegen -- trivial programs\r\nget properly optimized.\r\n\r\n<details>\r\n\r\n``` console\r\n$ rustup target add thumbv7m-none-eabi\r\n$ rustup component add llvm-tools-preview\r\n$ cargo new --bin app && cd app\r\n$ # or edit Cargo.toml\r\n$ cargo add cortex-m-rt --vers '=0.6.10'\r\n$ cargo add panic-halt --vers '=0.2.0'\r\n$ cat <<EOF >>Cargo.toml\r\n[profile.release]\r\ncodegen-units = 1\r\nlto = true\r\nEOF\r\n$ mkdir .cargo\r\n$ cat <<EOF >.cargo/config\r\n[target.thumbv7m-none-eabi]\r\nrustflags = [\"-C\", \"link-arg=-Tlink.x\"]\r\n[build]\r\ntarget = \"thumbv7m-none-eabi\"\r\nEOF\r\n$ cat <<EOF >memory.x\r\nMEMORY\r\n{\r\n  FLASH : ORIGIN = 0x00000000, LENGTH = 256K\r\n  RAM : ORIGIN = 0x20000000, LENGTH = 64K\r\n}\r\nEOF\r\n$ $EDITOR src/main.rs # enter code shown at the beginning of this issue\r\n$ cargo build --release\r\n$ # or use `arm-none-eabi-objdump` from the `binutils-arm-none-eabi` package (Debian)\r\n$ $(find $(rustc --print sysroot) -name llvm-objdump) -Cd -triple=thumbv7m-none-eabi target/thumbv7m-none-eabi/release/app\r\n```\r\n\r\n</details>\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66100/timeline", "performed_via_github_app": null, "state_reason": "completed"}