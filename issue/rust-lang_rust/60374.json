{"url": "https://api.github.com/repos/rust-lang/rust/issues/60374", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60374/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60374/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60374/events", "html_url": "https://github.com/rust-lang/rust/issues/60374", "id": 438450384, "node_id": "MDU6SXNzdWU0Mzg0NTAzODQ=", "number": 60374, "title": "Where bounds are ignored as part of trait type parameters on an impl", "user": {"login": "richardwhiuk", "id": 346165, "node_id": "MDQ6VXNlcjM0NjE2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/346165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richardwhiuk", "html_url": "https://github.com/richardwhiuk", "followers_url": "https://api.github.com/users/richardwhiuk/followers", "following_url": "https://api.github.com/users/richardwhiuk/following{/other_user}", "gists_url": "https://api.github.com/users/richardwhiuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/richardwhiuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richardwhiuk/subscriptions", "organizations_url": "https://api.github.com/users/richardwhiuk/orgs", "repos_url": "https://api.github.com/users/richardwhiuk/repos", "events_url": "https://api.github.com/users/richardwhiuk/events{/privacy}", "received_events_url": "https://api.github.com/users/richardwhiuk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-29T18:35:40Z", "updated_at": "2020-06-11T17:36:49Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Where bounds are ignored, but suggested by the compiler, when implementing trait objects with second order types.\r\n\r\nA full example is available at: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d61ff8acea97a202e00ea6fc32def211\r\n\r\nThe bound on line 21 is ignored:\r\n\r\n```rust\r\n    <T as hyper::service::MakeService<&'a SC>>::Service: 'static,\r\n```\r\n\r\nbut suggested (with inaccurate markers):\r\n\r\n```\r\nerror[E0310]: the associated type `<T as hyper::service::make_service::MakeService<&SC>>::Service` may not live long enough\r\n  --> src/lib.rs:10:32\r\n   |\r\n10 | impl<'a, T, SC, RC, F, OB, ME> hyper::service::MakeService<&'a SC>\r\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = help: consider adding an explicit lifetime bound `<T as hyper::service::make_service::MakeService<&SC>>::Service: 'static`...\r\nnote: ...so that the type `<T as hyper::service::make_service::MakeService<&SC>>::Service` will meet its required lifetime bounds\r\n  --> src/lib.rs:10:32\r\n   |\r\n10 | impl<'a, T, SC, RC, F, OB, ME> hyper::service::MakeService<&'a SC>\r\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nIn fact, in the example given, the error is repeated four times for good measure, in a standard `cargo build`.\r\n\r\nThe workaround is to add another type parameter to the function declaration - i.e. changing:\r\n\r\n```rust\r\nimpl<'a, T, S, SC, RC, F, OB, ME> hyper::service::MakeService<&'a SC>\r\n    for MakeService<T, RC>\r\nwhere\r\n    T: hyper::service::MakeService<\r\n        &'a SC,\r\n        ReqBody = hyper::Body,\r\n        ResBody = OB,\r\n        Error = hyper::Error,\r\n        MakeError = ME,\r\n        Future = F,\r\n    >,\r\n    <T as hyper::service::MakeService<&'a SC>>::Service: 'static,\r\n```\r\n\r\nto \r\n\r\n```rust\r\nimpl<'a, T, SC, RC, F, OB, ME> hyper::service::MakeService<&'a SC>\r\n    for MakeService<T, RC>\r\nwhere\r\n    T: hyper::service::MakeService<\r\n        &'a SC,\r\n        ReqBody = hyper::Body,\r\n        ResBody = OB,\r\n        Error = hyper::Error,\r\n        Service = S,\r\n        MakeError = ME,\r\n        Future = F,\r\n    >,\r\n    S: 'static,\r\n```\r\n\r\nwhich additionally requires duplicating any bounds on the inner type (i.e,\r\n```rust\r\n    type Service: Service<\r\n        ReqBody=Self::ReqBody,\r\n        ResBody=Self::ResBody,\r\n        Error=Self::Error,\r\n    >;\r\n```\r\n\r\nspecified at https://docs.rs/hyper/0.12.25/src/hyper/service/make_service.rs.html#10-44).\r\n\r\nThis results in function declarations with large numbers of type parameters, and more complex bounds than is strictly necessary.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60374/timeline", "performed_via_github_app": null, "state_reason": null}