{"url": "https://api.github.com/repos/rust-lang/rust/issues/38437", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38437/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38437/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38437/events", "html_url": "https://github.com/rust-lang/rust/issues/38437", "id": 196244575, "node_id": "MDU6SXNzdWUxOTYyNDQ1NzU=", "number": 38437, "title": "MIR dynamic drop flags cause spurious extra drops with optimizations on.", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}], "state": "closed", "locked": false, "assignee": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2016-12-17T21:44:20Z", "updated_at": "2016-12-27T21:10:23Z", "closed_at": "2016-12-27T21:10:23Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This program generates an assertion failure on nightly Rust:\r\n\r\n```rust\r\nuse std::sync::*;\r\nuse std::sync::atomic::*;\r\nuse std::sync::atomic::Ordering::*;\r\n\r\nfn main() {\r\n    struct Inner(usize);\r\n\r\n    // This assertion in theory never trips, there's not mutability in\r\n    // `Arc<Inner>`! Yet this fails.\r\n    impl Drop for Inner {\r\n        fn drop(&mut self) {\r\n            assert_eq!(self.0, 0);\r\n        }\r\n    }\r\n    let b = Arc::new(Inner(0));\r\n\r\n    drop(WriteQueue::new(b).poll());\r\n}\r\n\r\npub struct WriteQueue<W>  {\r\n    pending: Option<Sender>,\r\n    state: State<W>,\r\n}\r\n\r\nenum State<W> {\r\n    Writing(W, Sender),\r\n    BetweenWrites(W),\r\n    Empty,\r\n}\r\n\r\nimpl<W> WriteQueue<W> {\r\n    pub fn new(writer: W) -> WriteQueue<W> {\r\n        let (complete, _) = channel();\r\n        WriteQueue {\r\n            pending: Some(complete),\r\n            state: State::BetweenWrites(writer),\r\n        }\r\n    }\r\n}\r\n\r\nenum IntermediateState<W> {\r\n    _WriteDone(W),\r\n    StartWrite(Sender),\r\n    _Resolve,\r\n}\r\n\r\nimpl<W> WriteQueue<W> {\r\n    fn poll(&mut self) -> Result<(), ()> {\r\n        loop {\r\n            let next: IntermediateState<W> = match self.state {\r\n                State::Writing(..) => {\r\n                    return Err(())\r\n                }\r\n                State::BetweenWrites(ref mut _writer) => {\r\n                    let front = self.pending.take();\r\n                    match front {\r\n                        Some(complete) => {\r\n                            IntermediateState::StartWrite(complete)\r\n                        }\r\n                        None => diverge(),\r\n                    }\r\n                }\r\n                State::Empty => diverge(),\r\n            };\r\n\r\n            match next {\r\n                IntermediateState::_WriteDone(_w) => diverge(),\r\n                IntermediateState::StartWrite(c) => {\r\n                    let new_state = match ::std::mem::replace(&mut self.state, State::Empty) {\r\n                        State::BetweenWrites(w) => {\r\n                            State::Writing(w, c)\r\n                        }\r\n                        _ => diverge(),\r\n                    };\r\n                    self.state = new_state;\r\n                }\r\n                IntermediateState::_Resolve => {\r\n                    match ::std::mem::replace(&mut self.state, State::Empty) {\r\n                        State::BetweenWrites(_w) => {\r\n                            return Ok(())\r\n                        }\r\n                        _ => diverge(),\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfn diverge() -> ! {\r\n    panic!()\r\n}\r\n\r\npub struct Receiver {\r\n    inner: Arc<Inner2>,\r\n}\r\n\r\npub struct Sender {\r\n    _inner: Arc<Inner2>,\r\n}\r\n\r\nstruct Inner2 {\r\n    complete: AtomicUsize,\r\n}\r\n\r\npub fn channel() -> (Sender, Receiver) {\r\n    let inner = Arc::new(Inner2 {\r\n        complete: AtomicUsize::new(0),\r\n    });\r\n    let receiver = Receiver {\r\n        inner: inner.clone(),\r\n    };\r\n    let sender = Sender {\r\n        _inner: inner,\r\n    };\r\n    (sender, receiver)\r\n}\r\n\r\nimpl Drop for Receiver {\r\n    fn drop(&mut self) {\r\n        self.inner.complete.store(1, SeqCst);\r\n    }\r\n}\r\n```\r\n\r\nThe assertion in the destructor of the main function should never trip, but something's tripping it! This is an adapted test case from https://github.com/alexcrichton/futures-rs/issues/296, and although the original issue reproduces on stable/beta/nightly this test case only reproduces on nightly:\r\n\r\n```\r\n$ rustc +nightly -vV\r\nrustc 1.15.0-nightly (8f02c429a 2016-12-15)\r\nbinary: rustc\r\ncommit-hash: 8f02c429ad3e2ad687a222d1daae2e04bb9bb876\r\ncommit-date: 2016-12-15\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.15.0-nightly\r\nLLVM version: 3.9\r\n$ rustc +nightly ./crash.rs -O\r\n$ ./crash\r\nthread 'main' panicked at 'assertion failed: `(left == right)` (left: `1`, right: `0`)', ./crash.rs:12\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38437/timeline", "performed_via_github_app": null, "state_reason": "completed"}