{"url": "https://api.github.com/repos/rust-lang/rust/issues/85123", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85123/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85123/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85123/events", "html_url": "https://github.com/rust-lang/rust/issues/85123", "id": 882775183, "node_id": "MDU6SXNzdWU4ODI3NzUxODM=", "number": 85123, "title": "Better diagnostics for inappropriate lifetime from (large) match statement", "user": {"login": "djc", "id": 158471, "node_id": "MDQ6VXNlcjE1ODQ3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/158471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djc", "html_url": "https://github.com/djc", "followers_url": "https://api.github.com/users/djc/followers", "following_url": "https://api.github.com/users/djc/following{/other_user}", "gists_url": "https://api.github.com/users/djc/gists{/gist_id}", "starred_url": "https://api.github.com/users/djc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djc/subscriptions", "organizations_url": "https://api.github.com/users/djc/orgs", "repos_url": "https://api.github.com/users/djc/repos", "events_url": "https://api.github.com/users/djc/events{/privacy}", "received_events_url": "https://api.github.com/users/djc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-05-09T20:34:23Z", "updated_at": "2022-06-24T10:44:42Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With this reduced example, I get a nice, specific error message:\r\n\r\n```rust\r\nuse std::borrow::Cow;\r\n\r\nenum Foo<'a> {\r\n    Bar(Cow<'a, [u8]>),\r\n    Baz(Cow<'a, [u8]>),\r\n}\r\n\r\nimpl<'a> Foo<'a> {\r\n    fn to_owned(&self) -> Foo<'static> {\r\n        match self {\r\n            Foo::Bar(x) => Foo::Bar(x.to_owned()),\r\n            Foo::Baz(x) => Foo::Baz(x.to_owned()),\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nError:\r\n\r\n```rust\r\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\r\n  --> src/lib.rs:10:15\r\n   |\r\n10 |         match self {\r\n   |               ^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the lifetime `'a` as defined on the impl at 8:6...\r\n  --> src/lib.rs:8:6\r\n   |\r\n8  | impl<'a> Foo<'a> {\r\n   |      ^^\r\nnote: ...so that the types are compatible\r\n  --> src/lib.rs:10:15\r\n   |\r\n10 |         match self {\r\n   |               ^^^^\r\n   = note: expected `&Foo<'_>`\r\n              found `&Foo<'a>`\r\n   = note: but, the lifetime must be valid for the static lifetime...\r\nnote: ...so that the expression is assignable\r\n  --> src/lib.rs:11:28\r\n   |\r\n11 |             Foo::Bar(x) => Foo::Bar(x.to_owned()),\r\n   |                            ^^^^^^^^^^^^^^^^^^^^^^\r\n   = note: expected `Foo<'static>`\r\n              found `Foo<'_>`\r\n```\r\n\r\nHowever, in this real world case (from https://github.com/ctz/rustls/pull/685), the error message isn't as good:\r\n\r\n```rust\r\n    pub fn to_owned(&self) -> ClientExtension<'static> {\r\n        use ClientExtension::*;\r\n        match self {\r\n            ECPointFormats(x) => ECPointFormats(x.clone()),\r\n            NamedGroups(x) => NamedGroups(x.clone()),\r\n            SignatureAlgorithms(x) => SignatureAlgorithms(x.clone()),\r\n            ServerName(x) => ServerName(x.iter().map(|y| y.to_owned()).collect()),\r\n            SessionTicketRequest => SessionTicketRequest,\r\n            SessionTicketOffer(x) => SessionTicketOffer(x.to_owned()),\r\n            Protocols(x) => Protocols(x.iter().map(|y| y.to_owned()).collect()),\r\n            SupportedVersions(x) => SupportedVersions(x.clone()),\r\n            KeyShare(x) => KeyShare(x.iter().map(|y| y.to_owned()).collect()),\r\n            PresharedKeyModes(x) => PresharedKeyModes(x.clone()),\r\n            PresharedKey(x) => PresharedKey(x.to_owned()),\r\n            Cookie(x) => Cookie(x.to_owned()),\r\n            ExtendedMasterSecretRequest => ExtendedMasterSecretRequest,\r\n            CertificateStatusRequest(x) => CertificateStatusRequest(x.to_owned()),\r\n            SignedCertificateTimestampRequest => SignedCertificateTimestampRequest,\r\n            TransportParameters(x) => TransportParameters(x.to_owned()),\r\n            TransportParametersDraft(x) => TransportParametersDraft(x.to_owned()),\r\n            EarlyData => EarlyData,\r\n            Unknown(r) => Unknown(r.to_owned()),\r\n        }\r\n    }\r\n```\r\n\r\n```rust\r\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\r\n   --> rustls/src/msgs/handshake.rs:698:15\r\n    |\r\n698 |         match self {\r\n    |               ^^^^\r\n    |\r\nnote: first, the lifetime cannot outlive the lifetime `'a` as defined on the impl at 670:6...\r\n   --> rustls/src/msgs/handshake.rs:670:6\r\n    |\r\n670 | impl<'a> ClientExtension<'a> {\r\n    |      ^^\r\nnote: ...so that the types are compatible\r\n   --> rustls/src/msgs/handshake.rs:698:15\r\n    |\r\n698 |         match self {\r\n    |               ^^^^\r\n    = note: expected `&ClientExtension<'_>`\r\n               found `&ClientExtension<'a>`\r\n    = note: but, the lifetime must be valid for the static lifetime...\r\nnote: ...so that the expression is assignable\r\n   --> rustls/src/msgs/handshake.rs:698:9\r\n    |\r\n698 | /         match self {\r\n699 | |             ECPointFormats(x) => ECPointFormats(x.clone()),\r\n700 | |             NamedGroups(x) => NamedGroups(x.clone()),\r\n701 | |             SignatureAlgorithms(x) => SignatureAlgorithms(x.clone()),\r\n...   |\r\n717 | |             Unknown(r) => Unknown(r.to_owned()),\r\n718 | |         }\r\n    | |_________^\r\n    = note: expected `ClientExtension<'static>`\r\n               found `ClientExtension<'_>`\r\n```\r\n\r\nNote that this error does not point to any specific arm, and leaves me to figure out which of the match arms had incorrect lifetimes. In this case, I happened to know which arms were at fault, but in an earlier instance I ended up bisecting the match arms by copy/pasting until I figured out which ones were incorrect.\r\n\r\nThis happened for me with rustc 1.52.0, but I see the same behavior with a nightly from 2021-04-24.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85123/timeline", "performed_via_github_app": null, "state_reason": null}