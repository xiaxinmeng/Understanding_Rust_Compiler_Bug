{"url": "https://api.github.com/repos/rust-lang/rust/issues/84395", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84395/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84395/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84395/events", "html_url": "https://github.com/rust-lang/rust/issues/84395", "id": 863926812, "node_id": "MDU6SXNzdWU4NjM5MjY4MTI=", "number": 84395, "title": "Passing `-lto-embed-bitcode=optimized` to the `lld` gives a corrupted `.llvmbc` section.", "user": {"login": "vext01", "id": 604955, "node_id": "MDQ6VXNlcjYwNDk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vext01", "html_url": "https://github.com/vext01", "followers_url": "https://api.github.com/users/vext01/followers", "following_url": "https://api.github.com/users/vext01/following{/other_user}", "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}", "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vext01/subscriptions", "organizations_url": "https://api.github.com/users/vext01/orgs", "repos_url": "https://api.github.com/users/vext01/repos", "events_url": "https://api.github.com/users/vext01/events{/privacy}", "received_events_url": "https://api.github.com/users/vext01/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2021-04-21T14:02:07Z", "updated_at": "2022-06-13T15:44:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi everyone,\r\n\r\n(This issue is based on [this SO post](https://stackoverflow.com/questions/67195322/extracting-llvm-bitcode-embedded-using-lto-embed-bitcode))\r\n\r\nlibLTO has the option to embed the post-merged-and-optimised (i.e. final) bitcode into the end binary. This is done with the `-lto-embed-bitcode=optimized` option to `lld`.\r\n\r\nExample of the use of this option with clang:\r\n```\r\n$ clang  -fuse-ld=lld -flto -Wl,--plugin-opt=-lto-embed-bitcode=optimized world.c\r\n$ objcopy a.out --dump-section .llvmbc=llvm.bc\r\n$ llvm-dis llvm.bc\r\n$ head -5 llvm.ll\r\n; ModuleID = 'llvm.bc'\r\nsource_filename = \"ld-temp.o\"\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\n```\r\n\r\nEquivalent in the Rust world:\r\n```\r\n$ RUSTFLAGS=\"-C linker_plugin_lto -C linker=clang -C link-arg=-fuse-ld=lld -C link-arg=-Wl,--plugin-opt=-lto-embed-bitcode=optimized\" cargo build --release\r\n   Compiling world v0.1.0 (/tmp/world)\r\n    Finished release [optimized] target(s) in 0.21s\r\n$ objcopy target/release/world --dump-section .llvmbc=llvm.bc\r\n$ llvm-dis llvm.bc\r\nLLVM ERROR: Invalid encoding\r\nPLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace.\r\nStack dump:\r\n0.      Program arguments: llvm-dis llvm.bc\r\n #0 0x000055ef6668578c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/home/vext01/research/yorick/llvm-project/inst/bin/llvm-dis+0x1b578c)\r\n #1 0x000055ef666836e4 llvm::sys::RunSignalHandlers() (/home/vext01/research/yorick/llvm-project/inst/bin/llvm-dis+0x1b36e4)\r\n #2 0x000055ef66683843 SignalHandler(int) (/home/vext01/research/yorick/llvm-project/inst/bin/llvm-dis+0x1b3843)\r\n #3 0x00007fbcf1776730 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x12730)\r\n #4 0x00007fbcf105c7bb raise /build/glibc-vjB4T1/glibc-2.28/signal/../sysdeps/unix/sysv/linux/raise.c:51:1\r\n #5 0x00007fbcf1047535 abort /build/glibc-vjB4T1/glibc-2.28/stdlib/abort.c:81:7\r\n #6 0x000055ef6665a753 llvm::report_fatal_error(llvm::Twine const&, bool) (/home/vext01/research/yorick/llvm-project/inst/bin/llvm-dis+0x18a753)\r\n #7 0x000055ef6665a868 (/home/vext01/research/yorick/llvm-project/inst/bin/llvm-dis+0x18a868)\r\n #8 0x000055ef66692703 llvm::BitstreamCursor::ReadAbbrevRecord() (/home/vext01/research/yorick/llvm-project/inst/bin/llvm-dis+0x1c2703)\r\n #9 0x000055ef6652149d llvm::BitstreamCursor::advance(unsigned int) (.constprop.1679) (/home/vext01/research/yorick/llvm-project/inst/bin/llvm-dis+0x5149d)\r\n#10 0x000055ef6652fabd llvm::getBitcodeFileContents(llvm::MemoryBufferRef) (/home/vext01/research/yorick/llvm-project/inst/bin/llvm-dis+0x5fabd)\r\n#11 0x000055ef66515159 main (/home/vext01/research/yorick/llvm-project/inst/bin/llvm-dis+0x45159)\r\n#12 0x00007fbcf104909b __libc_start_main /build/glibc-vjB4T1/glibc-2.28/csu/../csu/libc-start.c:342:3\r\n#13 0x000055ef6651a6ea _start (/home/vext01/research/yorick/llvm-project/inst/bin/llvm-dis+0x4a6ea)\r\nAborted\r\n```\r\n\r\nIf I search the dumped section for the bitcode magic header bytes, `0x4243c0de`, there are lots of hits. If I add `-C codegen-units=1` to `RUSTFLAGS` then there are then fewer hits (exactly two).\r\n\r\nIt looks to me (although I can't be sure) like rustc is invoking the linker in such a way that the `.llvmbc` sections of the intermediate objects are not being discarded post-LTO, but instead being concatenated back to back (as linkers do) with the `.llvmbc` section of the post-LTO bitcode. So `.llvmbc` would contain many modules, but it should contain only the post-LTO bitcode module.\r\n\r\nAssuming this is the case, this is problematic: it's not trivial to split the concatenated bitstreams apart (the magic bytes cannot be used as a reliable delimiter, as those bytes may appear in other unrelated contexts), and even if we could, we wouldn't know which of the resulting modules was the post-LTO one.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84395/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84395/timeline", "performed_via_github_app": null, "state_reason": null}