{"url": "https://api.github.com/repos/rust-lang/rust/issues/112047", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112047/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112047/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112047/events", "html_url": "https://github.com/rust-lang/rust/issues/112047", "id": 1729650192, "node_id": "I_kwDOAAsO6M5nGF4Q", "number": 112047, "title": "`Failed to normalize` `async_fn_in_trait` ICE for indirect recursion of async trait method calls", "user": {"login": "rkusa", "id": 409021, "node_id": "MDQ6VXNlcjQwOTAyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/409021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkusa", "html_url": "https://github.com/rkusa", "followers_url": "https://api.github.com/users/rkusa/followers", "following_url": "https://api.github.com/users/rkusa/following{/other_user}", "gists_url": "https://api.github.com/users/rkusa/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkusa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkusa/subscriptions", "organizations_url": "https://api.github.com/users/rkusa/orgs", "repos_url": "https://api.github.com/users/rkusa/repos", "events_url": "https://api.github.com/users/rkusa/events{/privacy}", "received_events_url": "https://api.github.com/users/rkusa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3618128266, "node_id": "LA_kwDOAAsO6M7XqEGK", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-async_fn_in_trait", "name": "F-async_fn_in_trait", "color": "f9c0cc", "default": false, "description": "Static async fn in traits"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-05-28T20:10:56Z", "updated_at": "2023-06-11T16:55:24Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n-->\r\n\r\nThe following happens for the `async_fn_in_trait` feature. I guess it is caused by the indirect recursion (`First::first()` -> `Second::second()` -> `First::first()` -> `Second::second()` -> `First::first()` -> ...).\r\n\r\n### Code\r\n\r\n```Rust\r\n#![feature(async_fn_in_trait)]\r\n\r\nfn main() {\r\n    let _ = async {\r\n        A.first().await.second().await;\r\n    };\r\n}\r\n\r\npub trait First {\r\n    type Second: Second;\r\n    async fn first(self) -> Self::Second;\r\n}\r\n\r\nstruct A;\r\n\r\nimpl First for A {\r\n    type Second = A;\r\n    async fn first(self) -> Self::Second {\r\n        A\r\n    }\r\n}\r\n\r\npub trait Second {\r\n    async fn second(self);\r\n}\r\n\r\nimpl<C> Second for C\r\nwhere\r\n    C: First,\r\n{\r\n    async fn second(self) {\r\n        self.first().await.second().await;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.71.0-nightly (cca7ee581 2023-05-27)\r\nbinary: rustc\r\ncommit-hash: cca7ee58110726983951a19d5fb7316d9243925d\r\ncommit-date: 2023-05-27\r\nhost: aarch64-apple-darwin\r\nrelease: 1.71.0-nightly\r\nLLVM version: 16.0.4\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: compiler/rustc_middle/src/ty/normalize_erasing_regions.rs:195:90: Failed to normalize [async block@src/main.rs:4:13: 6:6], maybe try to call `try_normalize_erasing_regions` instead\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'Box<dyn Any>', /rustc/cca7ee58110726983951a19d5fb7316d9243925d/compiler/rustc_errors/src/lib.rs:1651:9\r\nstack backtrace:\r\n   0: std::panicking::begin_panic::<rustc_errors::ExplicitBug>\r\n   1: <rustc_errors::HandlerInner>::bug::<alloc::string::String>\r\n   2: <rustc_errors::Handler>::bug::<alloc::string::String>\r\n   3: rustc_middle::util::bug::opt_span_bug_fmt::<rustc_span::span_encoding::Span>::{closure#0}\r\n   4: rustc_middle::ty::context::tls::with_opt::<rustc_middle::util::bug::opt_span_bug_fmt<rustc_span::span_encoding::Span>::{closure#0}, !>::{closure#0}\r\n   5: rustc_middle::ty::context::tls::with_context_opt::<rustc_middle::ty::context::tls::with_opt<rustc_middle::util::bug::opt_span_bug_fmt<rustc_span::span_encoding::Span>::{closure#0}, !>::{closure#0}, !>\r\n   6: rustc_middle::util::bug::bug_fmt\r\n   7: <rustc_middle::ty::normalize_erasing_regions::NormalizeAfterErasingRegionsFolder as rustc_type_ir::fold::TypeFolder<rustc_middle::ty::context::TyCtxt>>::fold_ty\r\n   8: <rustc_monomorphize::collector::MirNeighborCollector as rustc_middle::mir::visit::Visitor>::visit_terminator\r\n   9: rustc_monomorphize::collector::collect_neighbours\r\n  10: rustc_monomorphize::collector::collect_items_rec\r\n  11: <core::panic::unwind_safe::AssertUnwindSafe<rustc_data_structures::sync::par_for_each_in<alloc::vec::Vec<rustc_middle::mir::mono::MonoItem>, rustc_monomorphize::collector::collect_crate_mono_items::{closure#1}::{closure#0}>::{closure#0}::{closure#0}> as core::ops::function::FnOnce<()>>::call_once\r\n  12: rustc_data_structures::sync::par_for_each_in::<alloc::vec::Vec<rustc_middle::mir::mono::MonoItem>, rustc_monomorphize::collector::collect_crate_mono_items::{closure#1}::{closure#0}>\r\n  13: <rustc_session::session::Session>::time::<(), rustc_monomorphize::collector::collect_crate_mono_items::{closure#1}>\r\n  14: rustc_monomorphize::collector::collect_crate_mono_items\r\n  15: rustc_monomorphize::partitioning::collect_and_partition_mono_items\r\n  16: rustc_codegen_ssa::base::codegen_crate::<rustc_codegen_llvm::LlvmCodegenBackend>\r\n  17: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate\r\n  18: rustc_interface::passes::start_codegen\r\n  19: <rustc_middle::ty::context::GlobalCtxt>::enter::<<rustc_interface::queries::Queries>::ongoing_codegen::{closure#0}::{closure#0}, core::result::Result<alloc::boxed::Box<dyn core::any::Any>, rustc_span::ErrorGuaranteed>>\r\n  20: <rustc_interface::queries::Queries>::ongoing_codegen\r\n  21: <rustc_interface::interface::Compiler>::enter::<rustc_driver_impl::run_compiler::{closure#1}::{closure#2}, core::result::Result<core::option::Option<rustc_interface::queries::Linker>, rustc_span::ErrorGuaranteed>>\r\n  22: rustc_span::set_source_map::<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}::{closure#0}>\r\n  23: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_span::ErrorGuaranteed>, rustc_driver_impl::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_span::ErrorGuaranteed>>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.71.0-nightly (cca7ee581 2023-05-27) running on aarch64-apple-darwin\r\n\r\nnote: compiler flags: --crate-type bin -C embed-bitcode=no -C split-debuginfo=unpacked -C debuginfo=2 -C incremental=[REDACTED]\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [collect_and_partition_mono_items] collect_and_partition_mono_items\r\nend of query stack\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112047/timeline", "performed_via_github_app": null, "state_reason": null}