{"url": "https://api.github.com/repos/rust-lang/rust/issues/53972", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53972/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53972/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53972/events", "html_url": "https://github.com/rust-lang/rust/issues/53972", "id": 357316371, "node_id": "MDU6SXNzdWUzNTczMTYzNzE=", "number": 53972, "title": "`const fn` taking function pointers and generic args with trait bounds", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 268744493, "node_id": "MDU6TGFiZWwyNjg3NDQ0OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-fn", "name": "A-const-fn", "color": "f7e101", "default": false, "description": "Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-09-05T16:51:33Z", "updated_at": "2018-09-06T14:45:11Z", "closed_at": "2018-09-06T14:45:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "continued from https://github.com/rust-lang/rust/issues/53555#issuecomment-418794102 (cc @SimonSapin @Centril )\r\n\r\n> Isn\u2019t it already too late to make const the default, and non-constness require opt-in?\r\n\r\nnot really. we have restricted `min_const_fn` to the point where all futures are possible.\r\n\r\n# Resolving inconsistencies\r\n\r\nI'm proposing that we stabilize function pointers in const fns by not allowing calling them until a future syntax enables us to call them. Below a possible syntax is sketched to show that such a scheme is possible\r\n\r\n```rust\r\nstruct Foo(fn());\r\nconst fn foo(f: Foo) {\r\n    // can't call `(f.0)()` here\r\n}\r\nconst fn foo2(f: const Foo) {\r\n    // can't call `(f.0)()` here, see also `bar1`\r\n}\r\nconst fn foo3(f: fn()) {\r\n    // can't call `f()` here\r\n}\r\nconst fn foo4(f: const fn()) {\r\n    f() // legal\r\n}\r\nfn not_const1(f: const fn()) {} // not legal, const modifier in non-const fn\r\nfn not_const2() {\r\n    fn nop() {}\r\n    foo3(nop); // legal even though `nop` is no `const fn` because we're not in a const environment\r\n}\r\nstruct Bar(const fn());\r\nconst fn bar(f: Bar) {\r\n    (f.0)() // not allowed\r\n}\r\nconst fn bar1(f: const Bar) {\r\n    (f.0)() // legal\r\n}\r\nconst impl Bar {\r\n    fn bar(&self) {\r\n        (self.0)() // legal\r\n    }\r\n}\r\n```\r\n\r\n# Trait objects and generic trait bounds\r\n\r\nSimilar to the above I propose that one can specify arbitrary trait bounds and trait objects but not call any methods on them. Future syntax can opt into const trait objects and const trait bounds, enforcing these if the const fn is called inside a constant environment (const/static initializer, array length, enum discriminant)", "closed_by": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53972/timeline", "performed_via_github_app": null, "state_reason": "completed"}