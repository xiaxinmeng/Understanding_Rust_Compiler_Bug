{"url": "https://api.github.com/repos/rust-lang/rust/issues/31446", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/31446/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/31446/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/31446/events", "html_url": "https://github.com/rust-lang/rust/issues/31446", "id": 131839076, "node_id": "MDU6SXNzdWUxMzE4MzkwNzY=", "number": 31446, "title": "The Vec should not needlessly overallocate capacity if it is guaranteed to fail.", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-02-06T09:36:10Z", "updated_at": "2020-03-28T18:06:40Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Current Vec / RawVec allocation strategy is to at least double the capacity on\nreallocation. This leads to unnecessary panic when the new overallocated\ncapacity exceeds std::isize::MAX. If allocating std::isize::MAX would be\nsufficient it should do so instead.\n\nFor example I would expect the following to work on 32-bit platform (provided\nthat there is sufficient amount of memory):\n\n``` rust\nfn main() {\n    let mut v = std::vec::from_elem(1 as u8, (std::isize::MAX / 2 + 1) as usize);\n    v.push(1);\n}\n```\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/31446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/31446/timeline", "performed_via_github_app": null, "state_reason": null}