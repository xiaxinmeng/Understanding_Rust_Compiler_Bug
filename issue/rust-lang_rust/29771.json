{"url": "https://api.github.com/repos/rust-lang/rust/issues/29771", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29771/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29771/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29771/events", "html_url": "https://github.com/rust-lang/rust/issues/29771", "id": 116357383, "node_id": "MDU6SXNzdWUxMTYzNTczODM=", "number": 29771, "title": "Content of enum docblock not ignored in tests", "user": {"login": "daschl", "id": 29086, "node_id": "MDQ6VXNlcjI5MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/29086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daschl", "html_url": "https://github.com/daschl", "followers_url": "https://api.github.com/users/daschl/followers", "following_url": "https://api.github.com/users/daschl/following{/other_user}", "gists_url": "https://api.github.com/users/daschl/gists{/gist_id}", "starred_url": "https://api.github.com/users/daschl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daschl/subscriptions", "organizations_url": "https://api.github.com/users/daschl/orgs", "repos_url": "https://api.github.com/users/daschl/repos", "events_url": "https://api.github.com/users/daschl/events{/privacy}", "received_events_url": "https://api.github.com/users/daschl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-11-11T15:27:28Z", "updated_at": "2015-11-13T13:33:13Z", "closed_at": "2015-11-13T13:33:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi folks, I'm on rustc 1.4 (rustc 1.4.0 (8ab8581f6 2015-10-27).\n\n**edit:** see [below](https://github.com/rust-lang/rust/issues/29771#issuecomment-156429608) for a much simpler and reduced test case.\nI have the following FFI file which I'm developing, that works without issues (other than described below):\n\n``` rust\nuse libc::{c_int, c_uint, c_ulonglong};\n\npub enum HwlocTopology {}\n\n#[repr(u32)]\n#[derive(Debug,PartialEq)]\npub enum ObjectType {\n    /// The whole system that is accessible to hwloc. That may comprise several \n    /// machines in SSI systems like Kerrighed.\n    System,\n    /// The typical root object type. A set of processors and memory with cache \n    /// coherency.\n    Machine,\n    /// A set of processors around memory which the processors can directly \n    /// access.\n    NUMANode,\n    /// Physical package, what goes into a socket. In the physical meaning, \n    /// i.e. that you can add or remove physically.\n    Package,\n    /// The Cache. Can be L1i, L1d, L2, L3,...\n    Cache,\n    /// A computation unit (may be shared by several logical processors).\n    Core,\n    /// Processing Unit, or (Logical) Processor.\n    ///\n    /// An execution unit (may share a core with some other logical \n    /// processors, e.g. in the case of an SMT core). Objects of this kind \n    /// are always reported and can thus be used as fallback when others are \n    /// not.\n    PU,\n    /// Group objects.\n    ///\n    /// Objects which do not fit in the above but are detected by hwloc and \n    /// are useful to take into account for affinity. For instance, some \n    /// operating systems expose their arbitrary processors aggregation this\n    /// way. And hwloc may insert such objects to group NUMA nodes according \n    /// to their distances.\n    ///\n    /// These objects are ignored when they do not bring any structure.\n    Group,\n    /// Miscellaneous objects.\n    ///\n    /// Objects without particular meaning, that can e.g. be\n    /// added by the application for its own use, or by hwloc\n    /// for miscellaneous objects such as MemoryModule (DIMMs).\n    Misc,\n    /// Any bridge that connects the host or an I/O bus, to another I/O bus.\n    ///\n    /// Bridge objects have neither CPU sets nor node sets.\n    /// They are not added to the topology unless I/O discovery\n    /// is enabled through the custom flags.\n    Bridge,\n    /// PCI device.\n    ///\n    /// These objects have neither CPU sets nor node sets.\n    /// They are not added to the topology unless I/O discovery\n    /// is enabled through the custom flags.\n    PCIDevice,\n    /// Operating system device.\n    /// \n    /// These objects have neither CPU sets nor node sets. They are not \n    /// added to the topology unless I/O discovery is enabled \n    /// through the custom flags.\n    OSDevice,\n    /// An internal sentinel value.\n    TypeMax,\n}\n\n#[derive(Debug,PartialEq)]\npub enum TypeDepthError {\n    /// HWLOC returned a depth error which is not known to the rust binding.\n    UnkownTypeDepthError,\n    /// No object of given type exists in the topology.\n    TypeDepthUnknown,\n    /// Objects of given type exist at different depth in the topology.\n    TypeDepthMultiple,\n    /// Virtual depth for bridge object level.\n    TypeDepthBridge,\n    /// Virtual depth for PCI device object level.\n    TypeDepthPCIDevice,\n    /// Virtual depth for software device object level.\n    TypeDepthOSDevice,\n}\n\n#[link(name = \"hwloc\")]\nextern \"C\" {\n\n    // === Topology Creation and Destruction ===\n\n    pub fn hwloc_topology_init(topology: *mut *mut HwlocTopology) -> c_int;\n    pub fn hwloc_topology_load(topology: *mut HwlocTopology) -> c_int;\n    pub fn hwloc_topology_destroy(topology: *mut HwlocTopology);\n\n    // === Topology Detection Configuration and Query ===\n\n    pub fn hwloc_topology_set_flags(topology: *mut HwlocTopology, flags: c_ulonglong) -> c_int;\n    pub fn hwloc_topology_get_flags(topology: *mut HwlocTopology) -> c_ulonglong;\n\n    // === Object levels, depths and types ===\n\n    pub fn hwloc_topology_get_depth(topology: *mut HwlocTopology) -> c_uint;\n    pub fn hwloc_get_type_depth(topology: *mut HwlocTopology, object_type: ObjectType) -> c_int;\n    pub fn hwloc_get_depth_type(topology: *mut HwlocTopology, depth: c_uint) -> ObjectType;\n    pub fn hwloc_get_nbobjs_by_depth(topology: *mut HwlocTopology, depth: c_uint) -> c_uint;\n    pub fn hwloc_get_obj_by_depth(topology: *mut HwlocTopology, depth: c_uint, idx: c_uint) -> ObjectType;\n}\n```\n\nNow when I try to run this through cargo test, I get:\n\n```\n   Compiling hwloc v0.1.0 (file:///Users/michael/rust/hwloc-rs)\nsrc/ffi.rs:96:6: 96:93 warning: foreign function is never used: `hwloc_topology_set_flags`, #[warn(dead_code)] on by default\nsrc/ffi.rs:96   pub fn hwloc_topology_set_flags(topology: *mut HwlocTopology, flags: c_ulonglong) -> c_int;\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/ffi.rs:97:6: 97:79 warning: foreign function is never used: `hwloc_topology_get_flags`, #[warn(dead_code)] on by default\nsrc/ffi.rs:97   pub fn hwloc_topology_get_flags(topology: *mut HwlocTopology) -> c_ulonglong;\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     Running target/debug/hwloc-eb4c737c5f23fc40\n\nrunning 4 tests\ntest tests::should_get_nbobjs_by_depth ... ok\ntest tests::should_match_types_and_their_depth ... ok\ntest tests::should_get_topology_depth ... ok\ntest tests::should_get_object_at_depth_and_index ... ok\n\ntest result: ok. 4 passed; 0 failed; 0 ignored; 0 measured\n\n   Doc-tests hwloc\n\nrunning 1 test\ntest ffi::ObjectType::Group_0 ... FAILED\n\nfailures:\n\n---- ffi::ObjectType::Group_0 stdout ----\n    <anon>:3:13: 3:18 error: expected one of `!`, `.`, `::`, `;`, `{`, `}`, or an operator, found `which`\n<anon>:3     Objects which do not fit in the above but are detected by hwloc and \n                     ^~~~~\nthread 'ffi::ObjectType::Group_0' panicked at 'Box<Any>', ../src/libsyntax/parse/mod.rs:98\n\n\n\nfailures:\n    ffi::ObjectType::Group_0\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured\n```\n\ncheck out the doc failure in the middle there. When I remove the following empty line:\n\n```\n    /// Group objects.\n--> this to be removed  /// \n    /// Objects which do not fit in the above but are detected by hwloc and \n    /// are useful to take into account for affinity. For instance, some \n    /// operating systems expose their arbitrary processors aggregation this\n    /// way. And hwloc may insert such objects to group NUMA nodes according \n    /// to their distances.\n    ///\n    /// These objects are ignored when they do not bring any structure.\n```\n\nIt compiles fine. Am I doing anything wrong or is this a bug in the docblock parser?\n\nit works properly. It seems that somehow rust thinks my docblock contains a test while it doesn't?\n", "closed_by": {"login": "daschl", "id": 29086, "node_id": "MDQ6VXNlcjI5MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/29086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daschl", "html_url": "https://github.com/daschl", "followers_url": "https://api.github.com/users/daschl/followers", "following_url": "https://api.github.com/users/daschl/following{/other_user}", "gists_url": "https://api.github.com/users/daschl/gists{/gist_id}", "starred_url": "https://api.github.com/users/daschl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daschl/subscriptions", "organizations_url": "https://api.github.com/users/daschl/orgs", "repos_url": "https://api.github.com/users/daschl/repos", "events_url": "https://api.github.com/users/daschl/events{/privacy}", "received_events_url": "https://api.github.com/users/daschl/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29771/timeline", "performed_via_github_app": null, "state_reason": "completed"}