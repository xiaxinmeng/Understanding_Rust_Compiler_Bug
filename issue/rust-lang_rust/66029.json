{"url": "https://api.github.com/repos/rust-lang/rust/issues/66029", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66029/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66029/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66029/events", "html_url": "https://github.com/rust-lang/rust/issues/66029", "id": 516365206, "node_id": "MDU6SXNzdWU1MTYzNjUyMDY=", "number": 66029, "title": "Missed niche optimization (Box<impl Sized> & Box<impl Unsized>)", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1944310735, "node_id": "MDU6TGFiZWwxOTQ0MzEwNzM1", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-layout", "name": "A-layout", "color": "f7e101", "default": false, "description": "Area: Memory layout of types"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-01T21:52:09Z", "updated_at": "2020-03-29T22:05:14Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=195b7c6252bc25148ee1bcd63efef4aa)\r\n\r\n```rust\r\nenum WithBox {\r\n    Sized(Box<Sized>),\r\n    Unsized(Box<Unsized>),\r\n}\r\n\r\nenum WithUnitPtr {\r\n    Sized(  /*   0usize    */ ptr::NonNull<()>),\r\n    Unsized(ptr::NonNull<()>, usize           ),\r\n}\r\n\r\nfn main() {\r\n    dbg!(size_of::<WithBox>());        // = 24\r\n    dbg!(size_of::<WithUnitPtr>());    // = 24\r\n    dbg!(size_of::<ManuallyNiched>()); // = 16\r\n}\r\n\r\nstruct ManuallyNiched {\r\n    a: usize,\r\n    b: usize,\r\n}\r\n\r\nimpl From<WithBox> for ManuallyNiched {\r\n    fn from(this: WithBox) -> ManuallyNiched {\r\n        match this {\r\n            WithBox::Sized(this) => ManuallyNiched {\r\n                a: 0,\r\n                b: Box::into_raw(this) as usize,\r\n            },\r\n            WithBox::Unsized(this) => ManuallyNiched {\r\n                b: this.len(),\r\n                a: Box::into_raw(this) as *mut Sized as usize,\r\n            },\r\n        }\r\n    }\r\n}\r\n\r\nimpl From<ManuallyNiched> for WithBox {\r\n    fn from(this: ManuallyNiched) -> WithBox {\r\n        unsafe {\r\n            match this.a {\r\n                0 => WithBox::Sized(Box::from_raw(this.b as *mut _)),\r\n                _ => WithBox::Unsized(Box::from_raw(slice::from_raw_parts_mut(\r\n                    this.a as *mut _,\r\n                    this.b,\r\n                ))),\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nSpecifically, the tagged union of `ptr::NonNull<{Sized type}>` and `ptr::NonNull<{!Sized type}>` can niche together to be the size of `ptr::NonNull<{!Sized type}>` (for unsized types with non-zero sized metadata) by storing the discriminant for the sized pointer in the 0 niche of the non-null pointer to the unsized type (and the pointer to the sized type in the pointer metadata of the unsized type).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66029/timeline", "performed_via_github_app": null, "state_reason": null}