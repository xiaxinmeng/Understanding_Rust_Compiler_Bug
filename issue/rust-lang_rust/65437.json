{"url": "https://api.github.com/repos/rust-lang/rust/issues/65437", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65437/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65437/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65437/events", "html_url": "https://github.com/rust-lang/rust/issues/65437", "id": 507247329, "node_id": "MDU6SXNzdWU1MDcyNDczMjk=", "number": 65437, "title": "Off-by-one in generated DWARF columns", "user": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2019-10-15T13:31:28Z", "updated_at": "2020-03-15T14:18:15Z", "closed_at": "2020-03-15T14:18:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While parsing DWARF in custom tooling, I've noticed that Rust generates 0-based columns, whereas other compilers, including LLVM-based (e.g. Clang and Swift) generate 1-based column.\r\n\r\nThis creates issues for tools that want to extract source spans, generate error messages or otherwise link to the original source location.\r\n\r\nLet's take an example for Clang:\r\n```c\r\nextern void abort();\r\n\r\nvoid assert_less(int num1, int num2) {\r\n    if (num1 >= num2) {\r\n        abort();\r\n    }\r\n}\r\n\r\nint main() {\r\n    assert_less(10, 20);\r\n    assert_less(30, 20);\r\n    return 0;\r\n}\r\n```\r\n\r\nThis generates the following debug info ([Godbolt](https://godbolt.org/z/RDlpJV)):\r\n```\r\n!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: \"clang version 9.0.0 (tags/RELEASE_900/final 372344)\", isOptimized: false, runtimeVersion: 0, emissionKind: LineTablesOnly, enums: !2, nameTableKind: None)\r\n!1 = !DIFile(filename: \"example.c\", directory: \"/home/ubuntu\")\r\n...\r\n!7 = distinct !DISubprogram(name: \"assert_less\", scope: !8, file: !8, line: 3, type: !9, scopeLine: 3, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)\r\n!8 = !DIFile(filename: \"./example.c\", directory: \"/home/ubuntu\")\r\n!9 = !DISubroutineType(types: !2)\r\n!10 = !DILocation(line: 4, column: 9, scope: !7)\r\n!11 = !DILocation(line: 4, column: 17, scope: !7)\r\n!12 = !DILocation(line: 4, column: 14, scope: !7)\r\n!13 = !DILocation(line: 5, column: 9, scope: !7)\r\n!14 = !DILocation(line: 7, column: 1, scope: !7)\r\n!15 = distinct !DISubprogram(name: \"main\", scope: !8, file: !8, line: 9, type: !9, scopeLine: 9, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)\r\n!16 = !DILocation(line: 10, column: 5, scope: !15)\r\n!17 = !DILocation(line: 11, column: 5, scope: !15)\r\n!18 = !DILocation(line: 12, column: 5, scope: !15)\r\n```\r\n\r\nYou can see how locations for expressions start at the first char, e.g. `5:9` for `abort(...)`, `10:5` for `assert_less(...)` etc.\r\n\r\nNow let's take a Rust example:\r\n```rust\r\nextern {\r\n    fn abort();\r\n}\r\n\r\nfn assert_less(num1: i32, num2: i32) {\r\n    if num1 >= num2 {\r\n        unsafe {\r\n            abort();\r\n        }\r\n    }\r\n}\r\n\r\npub fn main() {\r\n    assert_less(10, 20);\r\n    assert_less(30, 20);\r\n}\r\n```\r\n\r\nThis generates debug info ([Godbolt](https://godbolt.org/z/7TEdpQ)):\r\n```\r\n...\r\n!2 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !3, producer: \"clang LLVM (rustc version 1.38.0 (625451e37 2019-09-23))\", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4)\r\n!3 = !DIFile(filename: \"./example.rs\", directory: \"/home/ubuntu\")\r\n!4 = !{}\r\n!5 = distinct !DISubprogram(name: \"assert_less\", linkageName: \"_ZN7example11assert_less17h3f90e1d508137775E\", scope: !6, file: !3, line: 5, type: !7, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, templateParams: !4, retainedNodes: !4)\r\n!6 = !DINamespace(name: \"example\", scope: null)\r\n!7 = !DISubroutineType(types: !4)\r\n!8 = !DILocation(line: 6, column: 7, scope: !5)\r\n!9 = !DILocation(line: 6, column: 4, scope: !5)\r\n!10 = !DILocation(line: 8, column: 12, scope: !11)\r\n!11 = distinct !DILexicalBlock(scope: !5, file: !3, line: 7, column: 8)\r\n!12 = !DILocation(line: 11, column: 1, scope: !5)\r\n!13 = distinct !DISubprogram(name: \"main\", linkageName: \"_ZN7example4main17h3efe614eed321469E\", scope: !6, file: !3, line: 13, type: !7, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, templateParams: !4, retainedNodes: !4)\r\n!14 = !DILocation(line: 14, column: 4, scope: !13)\r\n!15 = !DILocation(line: 15, column: 4, scope: !13)\r\n!16 = !DILocation(line: 16, column: 1, scope: !13)\r\n```\r\n\r\nYou can see how locations for beginning of the line are still starting at column `1` like in Clang, but locations for various expressions are like `8:12` for `abort`, `14:4` for `assert_less`, etc. - that is, starting right before the expression rather than at its first character.\r\n\r\nI wasn't sure which one is correct, so I also checked Swift compiler (it does the same as Clang) and GCC (it turns out not to implement column information yet).\r\n\r\nI also looked at LLVM docs, and their examples for debug information also use 1-based columns, pointing at the first char of an expression: https://llvm.org/docs/SourceLevelDebugging.html\r\n\r\nFinally, I checked the DWARF spec, and, while I couldn't find exactly how columns are supposed to be represented for expressions, I found this for declarations and expect it to be true / consistent for other items as well:\r\n\r\n> The value of the DW_AT_decl_line attribute represents the source line number at which the first character of the identifier of the declared object appears. The value 0 indicates that no source line has been specified.\r\n>\r\n> The value of the DW_AT_decl_column attribute represents the source column number at which the first character of the identifier of the declared object appears. The value 0 indicates that no column has been specified.\r\n\r\nAll in all, it looks like Rust is the one generating columns that violate LLVM and, subsequently, DWARF descriptions and expectations.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65437/timeline", "performed_via_github_app": null, "state_reason": "completed"}