{"url": "https://api.github.com/repos/rust-lang/rust/issues/68251", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68251/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68251/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68251/events", "html_url": "https://github.com/rust-lang/rust/issues/68251", "id": 550210543, "node_id": "MDU6SXNzdWU1NTAyMTA1NDM=", "number": 68251, "title": "weird condition \"if obligation.recursion_depth >= 0\"", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-15T14:12:37Z", "updated_at": "2020-01-16T20:59:56Z", "closed_at": "2020-01-16T20:59:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As far as I can tell from `src/librustc/traits/mod.rs:132:`\r\n\r\n````rust\r\n#[derive(Clone, PartialEq, Eq, Hash)]\r\npub struct Obligation<'tcx, T> {\r\n    /// The reason we have to prove this thing.\r\n    pub cause: ObligationCause<'tcx>,\r\n\r\n    /// The environment in which we should prove this thing.\r\n    pub param_env: ty::ParamEnv<'tcx>,\r\n\r\n    /// The thing we are trying to prove.\r\n    pub predicate: T,\r\n\r\n    /// If we started proving this as a result of trying to prove\r\n    /// something else, track the total depth to ensure termination.\r\n    /// If this goes over a certain threshold, we abort compilation --\r\n    /// in such cases, we can not say whether or not the predicate\r\n    /// holds for certain. Stupid halting problem; such a drag.\r\n    pub recursion_depth: usize,\r\n}\r\n````\r\n`recursion_depth` is usize, thus the condition `if obligation.recursion_depth >= 0` at  src/librustc/traits/select.rs:3770:12 is always `true`\r\n````rust\r\n        // NOTE(flaper87): As of now, it keeps track of the whole error\r\n        // chain. Ideally, we should have a way to configure this either\r\n        // by using -Z verbose or just a CLI argument.\r\n        if obligation.recursion_depth >= 0 {\r\n            let derived_cause = DerivedObligationCause {\r\n                parent_trait_ref: obligation.predicate.to_poly_trait_ref(),\r\n                parent_code: Rc::new(obligation.cause.code.clone()),\r\n            };\r\n            let derived_code = variant(derived_cause);\r\n            ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)\r\n        } else {\r\n            obligation.cause.clone()\r\n        }\r\n````\r\n\r\nDoes this point out some kind of logic error (or should the unreachable code just be deleted?).\r\n\r\nFound via clippy.\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68251/timeline", "performed_via_github_app": null, "state_reason": "completed"}