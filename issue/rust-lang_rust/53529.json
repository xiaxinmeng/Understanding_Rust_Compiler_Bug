{"url": "https://api.github.com/repos/rust-lang/rust/issues/53529", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53529/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53529/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53529/events", "html_url": "https://github.com/rust-lang/rust/issues/53529", "id": 352148383, "node_id": "MDU6SXNzdWUzNTIxNDgzODM=", "number": 53529, "title": "Rust nightly 2018-08-17 or later causes random segmentation faults or panics", "user": {"login": "yorickpeterse", "id": 86065, "node_id": "MDQ6VXNlcjg2MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/86065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yorickpeterse", "html_url": "https://github.com/yorickpeterse", "followers_url": "https://api.github.com/users/yorickpeterse/followers", "following_url": "https://api.github.com/users/yorickpeterse/following{/other_user}", "gists_url": "https://api.github.com/users/yorickpeterse/gists{/gist_id}", "starred_url": "https://api.github.com/users/yorickpeterse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yorickpeterse/subscriptions", "organizations_url": "https://api.github.com/users/yorickpeterse/orgs", "repos_url": "https://api.github.com/users/yorickpeterse/repos", "events_url": "https://api.github.com/users/yorickpeterse/events{/privacy}", "received_events_url": "https://api.github.com/users/yorickpeterse/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 147085028, "node_id": "MDU6TGFiZWwxNDcwODUwMjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-nightly", "name": "regression-from-stable-to-nightly", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to nightly."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/57", "html_url": "https://github.com/rust-lang/rust/milestone/57", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/57/labels", "id": 3587589, "node_id": "MDk6TWlsZXN0b25lMzU4NzU4OQ==", "number": 57, "title": "1.30", "description": "", "creator": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 21, "state": "closed", "created_at": "2018-08-21T17:30:50Z", "updated_at": "2019-01-30T20:02:06Z", "due_on": "2018-10-25T07:00:00Z", "closed_at": "2018-11-16T11:07:19Z"}, "comments": 22, "created_at": "2018-08-20T13:59:44Z", "updated_at": "2018-08-23T19:17:50Z", "closed_at": "2018-08-23T19:17:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "<https://gitlab.com/inko-lang/inko> is a programming language that I am working on, and the VM is written in Rust. Up until Rust nightly 2018-08-17, everything works fine. Starting with the nightly from the 17th, I'm observing various crashes and different program behaviour. For example:\r\n\r\n* On Windows it will either fail with a [memory allocation error](https://ci.appveyor.com/project/YorickPeterse/inko/build/80/job/a8kux3cjdfl7vxug), or [an error in the runtime test library](https://ci.appveyor.com/project/YorickPeterse/inko/build/80/job/03fvj9xkb0r2y4pa) (more on this in a moment).\r\n* On Linux [it will segfault](https://gitlab.com/inko-lang/inko/-/jobs/90452349). Note that the funny segfault output is because the command is started with Ruby, and Ruby installs its own segmentation fault handler.\r\n* Locally it will usually fail with the same runtime error as observed in Windows above, but sometimes it will segfault. Sometimes it will panic because certain operations are performed using NULL pointers where this is not expected.\r\n\r\nThe last nightly that did not suffer from these problems was Rust 2018-08-16.  Stable Rust also works fine. When the segmentation faults happen, they are usually in different places. For example, for one segmentation fault the backtrace is as follows:\r\n\r\n    #0  0x00007ffff7e12763 in _int_malloc () from /usr/lib/libc.so.6\r\n    #1  0x00007ffff7e13ada in malloc () from /usr/lib/libc.so.6\r\n    #2  0x0000555555568e6b in alloc::alloc::alloc (layout=...) at /checkout/src/liballoc/alloc.rs:78\r\n    #3  <libinko::chunk::Chunk<T>>::new (capacity=3) at src/chunk.rs:29\r\n    #4  libinko::register::Register::new (amount=3) at src/register.rs:23\r\n    #5  libinko::execution_context::ExecutionContext::from_block (block=0x7fffdc0971e0, return_register=Some = {...}) at src/execution_context.rs:60\r\n    #6  libinko::vm::machine::Machine::run (self=<optimized out>, process=<optimized out>) at src/vm/machine.rs:2350\r\n    #7  0x0000555555568b7f in libinko::vm::machine::Machine::run_with_error_handling (self=0x55555567d8c0, process=0x7ffff75fcbd0) at src/vm/machine.rs:351\r\n    #8  0x00005555555c88a4 in libinko::vm::machine::Machine::start_primary_threads::{{closure}} (process=...) at src/vm/machine.rs:260\r\n    #9  <libinko::pool::PoolInner<T>>::process (self=<optimized out>, index=0, closure=0x7ffff75fcc60) at src/pool.rs:186\r\n    #10 0x00005555555b739d in <libinko::pool::Pool<T>>::run::{{closure}} () at src/pool.rs:126\r\n    #11 std::sys_common::backtrace::__rust_begin_short_backtrace (f=...) at /checkout/src/libstd/sys_common/backtrace.rs:136\r\n    #12 0x00005555555cb0dc in std::thread::Builder::spawn::{{closure}}::{{closure}} () at /checkout/src/libstd/thread/mod.rs:409\r\n    #13 <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once (self=..., _args=<optimized out>) at /checkout/src/libstd/panic.rs:313\r\n    #14 std::panicking::try::do_call (data=<optimized out>) at /checkout/src/libstd/panicking.rs:310\r\n    #15 0x0000555555618a3a in __rust_maybe_catch_panic () at libpanic_unwind/lib.rs:102\r\n    #16 0x00005555555ba39b in std::panicking::try (f=...) at /checkout/src/libstd/panicking.rs:289\r\n    #17 std::panic::catch_unwind (f=...) at /checkout/src/libstd/panic.rs:392\r\n    #18 std::thread::Builder::spawn::{{closure}} () at /checkout/src/libstd/thread/mod.rs:408\r\n    #19 <F as alloc::boxed::FnBox<A>>::call_box (self=0x55555567db50, args=<optimized out>) at /checkout/src/liballoc/boxed.rs:642\r\n    #20 0x00005555556090db in _$LT$alloc..boxed..Box$LT$$LP$dyn$u20$alloc..boxed..FnBox$LT$A$C$$u20$Output$u3d$R$GT$$u20$$u2b$$u20$$u27$a$RP$$GT$$u20$as$u20$core..ops..function..FnOnce$LT$A$GT$$GT$::call_once::h904fcd0dbdc71d4f () at /checkout/src/liballoc/boxed.rs:652\r\n    #21 std::sys_common::thread::start_thread () at libstd/sys_common/thread.rs:24\r\n    #22 0x00005555555f83b6 in std::sys::unix::thread::Thread::new::thread_start () at libstd/sys/unix/thread.rs:90\r\n    #23 0x00007ffff7f73a9d in start_thread () from /usr/lib/libpthread.so.0\r\n    #24 0x00007ffff7e89a43 in clone () from /usr/lib/libc.so.6\r\n\r\nWhile for another segfault the backtrace is instead:\r\n\r\n    #0  libinko::runtime_panic::display_panic (process=0x7f, message=\"ObjectValue::as_block() called on a non block object\") at src/runtime_panic.rs:11\r\n    #1  0x0000555555568baa in libinko::vm::machine::Machine::panic (self=0x55555567d8c0, process=0x7ffff71f8bd0, message=\"\") at src/vm/machine.rs:3750\r\n    #2  libinko::vm::machine::Machine::run_with_error_handling (self=0x55555567d8c0, process=0x7ffff71f8bd0) at src/vm/machine.rs:352\r\n    #3  0x00005555555c88a4 in libinko::vm::machine::Machine::start_primary_threads::{{closure}} (process=...) at src/vm/machine.rs:260\r\n    #4  <libinko::pool::PoolInner<T>>::process (self=<optimized out>, index=4, closure=0x7ffff71f8c60) at src/pool.rs:186\r\n    #5  0x00005555555b739d in <libinko::pool::Pool<T>>::run::{{closure}} () at src/pool.rs:126\r\n    #6  std::sys_common::backtrace::__rust_begin_short_backtrace (f=...) at /checkout/src/libstd/sys_common/backtrace.rs:136\r\n    #7  0x00005555555cb0dc in std::thread::Builder::spawn::{{closure}}::{{closure}} () at /checkout/src/libstd/thread/mod.rs:409\r\n    #8  <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once (self=..., _args=<optimized out>) at /checkout/src/libstd/panic.rs:313\r\n    #9  std::panicking::try::do_call (data=<optimized out>) at /checkout/src/libstd/panicking.rs:310\r\n    #10 0x0000555555618a3a in __rust_maybe_catch_panic () at libpanic_unwind/lib.rs:102\r\n    #11 0x00005555555ba39b in std::panicking::try (f=...) at /checkout/src/libstd/panicking.rs:289\r\n    #12 std::panic::catch_unwind (f=...) at /checkout/src/libstd/panic.rs:392\r\n    #13 std::thread::Builder::spawn::{{closure}} () at /checkout/src/libstd/thread/mod.rs:408\r\n    #14 <F as alloc::boxed::FnBox<A>>::call_box (self=0x55555567e5d0, args=<optimized out>) at /checkout/src/liballoc/boxed.rs:642\r\n    #15 0x00005555556090db in _$LT$alloc..boxed..Box$LT$$LP$dyn$u20$alloc..boxed..FnBox$LT$A$C$$u20$Output$u3d$R$GT$$u20$$u2b$$u20$$u27$a$RP$$GT$$u20$as$u20$core..ops..function..FnOnce$LT$A$GT$$GT$::call_once::h904fcd0dbdc71d4f () at /checkout/src/liballoc/boxed.rs:652\r\n    #16 std::sys_common::thread::start_thread () at libstd/sys_common/thread.rs:24\r\n    #17 0x00005555555f83b6 in std::sys::unix::thread::Thread::new::thread_start () at libstd/sys/unix/thread.rs:90\r\n    #18 0x00007ffff7f73a9d in start_thread () from /usr/lib/libpthread.so.0\r\n    #19 0x00007ffff7e89a43 in clone () from /usr/lib/libc.so.6\r\n\r\nAnd a third segfault:\r\n\r\n    #0  0x0000555555568d84 in libinko::vm::machine::Machine::run (self=<optimized out>, process=<optimized out>) at src/vm/machine.rs:388\r\n    #1  0x0000555555568b7f in libinko::vm::machine::Machine::run_with_error_handling (self=0x55555567d8c0, process=0x7ffff6cf3bd0) at src/vm/machine.rs:351\r\n    #2  0x00005555555c88a4 in libinko::vm::machine::Machine::start_primary_threads::{{closure}} (process=...) at src/vm/machine.rs:260\r\n    #3  <libinko::pool::PoolInner<T>>::process (self=<optimized out>, index=10, closure=0x7ffff6cf3c60) at src/pool.rs:186\r\n    #4  0x00005555555b739d in <libinko::pool::Pool<T>>::run::{{closure}} () at src/pool.rs:126\r\n    #5  std::sys_common::backtrace::__rust_begin_short_backtrace (f=...) at /checkout/src/libstd/sys_common/backtrace.rs:136\r\n    #6  0x00005555555cb0dc in std::thread::Builder::spawn::{{closure}}::{{closure}} () at /checkout/src/libstd/thread/mod.rs:409\r\n    #7  <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once (self=..., _args=<optimized out>) at /checkout/src/libstd/panic.rs:313\r\n    #8  std::panicking::try::do_call (data=<optimized out>) at /checkout/src/libstd/panicking.rs:310\r\n    #9  0x0000555555618a3a in __rust_maybe_catch_panic () at libpanic_unwind/lib.rs:102\r\n    #10 0x00005555555ba39b in std::panicking::try (f=...) at /checkout/src/libstd/panicking.rs:289\r\n    #11 std::panic::catch_unwind (f=...) at /checkout/src/libstd/panic.rs:392\r\n    #12 std::thread::Builder::spawn::{{closure}} () at /checkout/src/libstd/thread/mod.rs:408\r\n    #13 <F as alloc::boxed::FnBox<A>>::call_box (self=0x55555567f590, args=<optimized out>) at /checkout/src/liballoc/boxed.rs:642\r\n    #14 0x00005555556090db in _$LT$alloc..boxed..Box$LT$$LP$dyn$u20$alloc..boxed..FnBox$LT$A$C$$u20$Output$u3d$R$GT$$u20$$u2b$$u20$$u27$a$RP$$GT$$u20$as$u20$core..ops..function..FnOnce$LT$A$GT$$GT$::call_once::h904fcd0dbdc71d4f () at /checkout/src/liballoc/boxed.rs:652\r\n    #15 std::sys_common::thread::start_thread () at libstd/sys_common/thread.rs:24\r\n    #16 0x00005555555f83b6 in std::sys::unix::thread::Thread::new::thread_start () at libstd/sys/unix/thread.rs:90\r\n    #17 0x00007ffff7f73a9d in start_thread () from /usr/lib/libpthread.so.0\r\n    #18 0x00007ffff7e89a43 in clone () from /usr/lib/libc.so.6\r\n\r\nIn case of the last segfault, it seems certain local variables that are used are NULL pointers, when this should be impossible. Debugging this in GDB proves to be quite difficult, as a variety of variables are reported as <optimized out> even when debugging symbols are included. For example, for the last backtrace the output of \"info locals\" is:\r\n\r\n```\r\n(gdb) info locals\r\ninstruction = 0x0\r\nindex = 1\r\ncode = <optimized out>\r\ncontext = 0x7fffb4000c30\r\nreductions = 984\r\n```\r\n\r\nThe VM test suite passes, even when running `cargo test --release`. I'm wondering if perhaps code is optimised in the wrong way, and this is somehow not triggered in the test suite (certainly possible, code coverage is not 100%).\r\n\r\nReproducing this is a bit weird. If we leave the code as-is, the segmentation faults rarely occur, instead the VM panics with the following:\r\n\r\n    Stack trace (the most recent call comes last):\r\n      0: \"/home/yorickpeterse/Projects/inko/inko/runtime/src/std/process.inko\", line 324, in \"<block>\"\r\n      1: \"/home/yorickpeterse/Projects/inko/inko/runtime/src/std/test/runner.inko\", line 281, in \"<lambda>\"\r\n      2: \"/home/yorickpeterse/Projects/inko/inko/runtime/src/std/test/runner.inko\", line 220, in \"run\"\r\n    Process 1 panicked: ObjectValue::as_block() called on a non block object\r\n\r\nHowever, if we apply the following patch things will start to segfault really quick:\r\n\r\n```diff\r\ndiff --git a/runtime/src/std/test/runner.inko b/runtime/src/std/test/runner.inko\r\nindex 8175e2e..45fa998 100644\r\n--- a/runtime/src/std/test/runner.inko\r\n+++ b/runtime/src/std/test/runner.inko\r\n@@ -217,6 +217,8 @@ object Runner {\r\n   def run {\r\n     let command = @receiver.receive\r\n\r\n+    _INKOC.stdout_write(command.inspect + \"\\n\")\r\n+\r\n     command.run(@state)\r\n\r\n     @state.terminate?.if_true {\r\n```\r\n\r\n1. `git clone https://gitlab.com/inko-lang/inko.git`\r\n1. `cd inko`\r\n1. `make -C vm profile`\r\n1. `curl https://gist.githubusercontent.com/YorickPeterse/2be478ab617ad02e9e2495130e8f32f0/raw/38ca8bcab963d5b9fc4d192e126f546bff0f6aa9/crash.patch | patch -p1 -N`\r\n1. `env RUBYLIB=./compiler/lib ./compiler/bin/inko-test -d runtime --vm vm/target/release/ivm`\r\n\r\nNote that the last command requires Ruby 2.3 or newer. This will run the test suite of the standard library, which is where all the crashes happen rather frequently (probably because they run much more than the VM's own test suite).", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53529/timeline", "performed_via_github_app": null, "state_reason": "completed"}