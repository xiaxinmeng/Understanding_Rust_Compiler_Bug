{"url": "https://api.github.com/repos/rust-lang/rust/issues/111938", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111938/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111938/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111938/events", "html_url": "https://github.com/rust-lang/rust/issues/111938", "id": 1725378148, "node_id": "I_kwDOAAsO6M5m1y5k", "number": 111938, "title": "Compiler crashes on complex type-aliases and associate types", "user": {"login": "Equilibris", "id": 47296141, "node_id": "MDQ6VXNlcjQ3Mjk2MTQx", "avatar_url": "https://avatars.githubusercontent.com/u/47296141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Equilibris", "html_url": "https://github.com/Equilibris", "followers_url": "https://api.github.com/users/Equilibris/followers", "following_url": "https://api.github.com/users/Equilibris/following{/other_user}", "gists_url": "https://api.github.com/users/Equilibris/gists{/gist_id}", "starred_url": "https://api.github.com/users/Equilibris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Equilibris/subscriptions", "organizations_url": "https://api.github.com/users/Equilibris/orgs", "repos_url": "https://api.github.com/users/Equilibris/repos", "events_url": "https://api.github.com/users/Equilibris/events{/privacy}", "received_events_url": "https://api.github.com/users/Equilibris/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2023-05-25T08:52:33Z", "updated_at": "2023-05-25T19:26:22Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n-->\r\n\r\nThe bug arises when I remove the module nesting around a very complex piece of code, which I have absolutely no idea how to simplify for this bug report. I have tried to loopify as much as physically possible.\r\n\r\nGiven the following [piece of code](https://github.com/Equilibris/n-orm/blob/aef05109d127a50657a621ff084b1cf1de5ede27/syn-state-machine/src/impls/sum.rs). If i try to simplify the code the compiler crashes. If i try to take it out of the module tree and turn it into its own file it passes. This may have something to do with how its used in nested complex types in the other files. The error only occures in `cargo test`\r\n\r\n### Code\r\n\r\n```Rust\r\nmod new_sum {\r\n    use proc_macro2::TokenTree;\r\n\r\n    use crate::*;\r\n    use std::ops::ControlFlow::*;\r\n\r\n    pub type E1Next<T, A> = <T as Cons<A>>::Next;\r\n    pub type E2Next<T, A, B> = E1Next<E1Next<T, A>, B>;\r\n    pub type E3Next<T, A, B, C> = E1Next<E2Next<T, A, B>, C>;\r\n    pub type E4Next<T, A, B, C, D> = E1Next<E3Next<T, A, B, C>, D>;\r\n    pub type E5Next<T, A, B, C, D, E> = E1Next<E4Next<T, A, B, C, D>, E>;\r\n    pub type E6Next<T, A, B, C, D, E, F> = E1Next<E5Next<T, A, B, C, D, E>, F>;\r\n    pub type E7Next<T, A, B, C, D, E, F, G> = E1Next<E6Next<T, A, B, C, D, E, F>, G>;\r\n    pub type E8Next<T, A, B, C, D, E, F, G, H> = E1Next<E7Next<T, A, B, C, D, E, F, G>, H>;\r\n    pub type E9Next<T, A, B, C, D, E, F, G, H, I> = E1Next<E8Next<T, A, B, C, D, E, F, G, H>, I>;\r\n    pub type E10Next<T, A, B, C, D, E, F, G, H, I, J> =\r\n        E1Next<E9Next<T, A, B, C, D, E, F, G, H, I>, J>;\r\n    pub type E11Next<T, A, B, C, D, E, F, G, H, I, J, K> =\r\n        E1Next<E10Next<T, A, B, C, D, E, F, G, H, I, J>, K>;\r\n    pub type E12Next<T, A, B, C, D, E, F, G, H, I, J, K, L> =\r\n        E1Next<E11Next<T, A, B, C, D, E, F, G, H, I, J, K>, L>;\r\n    pub type E13Next<T, A, B, C, D, E, F, G, H, I, J, K, L, M> =\r\n        E1Next<E12Next<T, A, B, C, D, E, F, G, H, I, J, K, L>, M>;\r\n    pub type E14Next<T, A, B, C, D, E, F, G, H, I, J, K, L, M, N> =\r\n        E1Next<E13Next<T, A, B, C, D, E, F, G, H, I, J, K, L, M>, N>;\r\n\r\n    // This may be able to be used to impl monads and typeclasses in rsut\r\n    pub trait Cons<T> {\r\n        type Next;\r\n\r\n        fn next(self, v: T) -> Self::Next;\r\n    }\r\n\r\n    #[derive(Default, Debug, thiserror::Error)]\r\n    #[error(\"BlackHole\")]\r\n    pub struct BlackHole;\r\n    impl<T> Cons<T> for BlackHole {\r\n        type Next = BlackHole;\r\n\r\n        fn next(self, _: T) -> Self::Next {\r\n            BlackHole\r\n        }\r\n    }\r\n\r\n    #[derive(Default, Debug, thiserror::Error)]\r\n    #[error(\"\")]\r\n    pub struct Sum0Err {}\r\n    impl<T: std::error::Error> Cons<T> for Sum0Err {\r\n        type Next = Sum1Err<T>;\r\n\r\n        fn next(self, a: T) -> Self::Next {\r\n            Sum1Err { a }\r\n        }\r\n    }\r\n\r\n    macro_rules! sum_n_err {\r\n        (!$name:ident, $err:literal, $($p:ident $s:ident),*; $fp:ident $fs:ident) => {\r\n            #[derive(Debug, thiserror::Error)]\r\n            #[error($err, $(. $p),*)]\r\n            pub struct $name <$($s: std::error::Error),*>{\r\n                $(pub $p: $s,)*\r\n            }\r\n        };\r\n        ($name:ident, $next:ident, $err:literal, $($p:ident $s:ident),*; $fp:ident $fs:ident) => {\r\n            sum_n_err!(!$name, $err, $($p $s),*; $fp $fs);\r\n\r\n            impl<$($s: std::error::Error,)*$fs : std::error::Error> Cons<$fs> for $name <$($s),*> {\r\n                type Next = $next<$($s,)*$fs >;\r\n\r\n                fn next(self, $fp: $fs) -> Self::Next {\r\n                    let Self { $($p,)* } = self;\r\n\r\n                    $next { $($p,)* $fp }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    sum_n_err!(Sum1Err,  Sum2Err,  \"e0: ({})\", a A; b B);\r\n    sum_n_err!(Sum2Err,  Sum3Err,  \"e0: ({}) e1: ({})\", a A, b B; c C);\r\n    sum_n_err!(Sum3Err,  Sum4Err,  \"e0: ({}) e1: ({}) e2: ({})\", a A, b B, c C; d D);\r\n    sum_n_err!(Sum4Err,  Sum5Err,  \"e0: ({}) e1: ({}) e2: ({}) e3: ({})\", a A, b B, c C, d D; e E);\r\n    sum_n_err!(Sum5Err,  Sum6Err,  \"e0: ({}) e1: ({}) e2: ({}) e3: ({}) e4: ({})\", a A, b B, c C, d D, e E; f F);\r\n    sum_n_err!(Sum6Err,  Sum7Err,  \"e0: ({}) e1: ({}) e2: ({}) e3: ({}) e4: ({}) e5: ({})\", a A, b B, c C, d D, e E, f F; g G);\r\n    sum_n_err!(Sum7Err,  Sum8Err,  \"e0: ({}) e1: ({}) e2: ({}) e3: ({}) e4: ({}) e5: ({}) e6: ({})\", a A, b B, c C, d D, e E, f F, g G; h H);\r\n    sum_n_err!(Sum8Err,  Sum9Err,  \"e0: ({}) e1: ({}) e2: ({}) e3: ({}) e4: ({}) e5: ({}) e6: ({}) e7: ({})\", a A, b B, c C, d D, e E, f F, g G, h H; i I);\r\n    sum_n_err!(Sum9Err,  Sum10Err, \"e0: ({}) e1: ({}) e2: ({}) e3: ({}) e4: ({}) e5: ({}) e6: ({}) e7: ({}) e8: ({})\", a A, b B, c C, d D, e E, f F, g G, h H, i I; j J);\r\n    sum_n_err!(Sum10Err, Sum11Err, \"e0: ({}) e1: ({}) e2: ({}) e3: ({}) e4: ({}) e5: ({}) e6: ({}) e7: ({}) e8: ({}) e9: ({})\", a A, b B, c C, d D, e E, f F, g G, h H, i I, j J; k K);\r\n    sum_n_err!(Sum11Err, Sum12Err, \"e0: ({}) e1: ({}) e2: ({}) e3: ({}) e4: ({}) e5: ({}) e6: ({}) e7: ({}) e8: ({}) e9: ({}) e10: ({})\", a A, b B, c C, d D, e E, f F, g G, h H, i I, j J, k K; l L);\r\n    sum_n_err!(Sum12Err, Sum13Err, \"e0: ({}) e1: ({}) e2: ({}) e3: ({}) e4: ({}) e5: ({}) e6: ({}) e7: ({}) e8: ({}) e9: ({}) e10: ({}) e11: ({})\", a A, b B, c C, d D, e E, f F, g G, h H, i I, j J, k K, l L; m M);\r\n    sum_n_err!(Sum13Err, Sum14Err, \"e0: ({}) e1: ({}) e2: ({}) e3: ({}) e4: ({}) e5: ({}) e6: ({}) e7: ({}) e8: ({}) e9: ({}) e10: ({}) e11: ({}) e12: ({})\", a A, b B, c C, d D, e E, f F, g G, h H, i I, j J, k K, l L, m M; n N);\r\n    sum_n_err!(!Sum14Err,          \"e0: ({}) e1: ({}) e2: ({}) e3: ({}) e4: ({}) e5: ({}) e6: ({}) e7: ({}) e8: ({}) e9: ({}) e10: ({}) e11: ({}) e12: ({}) e13: ({})\", a A, b B, c C, d D, e E, f F, g G, h H, i I, j J, k K, l L, m M, n N; p P);\r\n\r\n    macro_rules! sum_n {\r\n        (\r\n            $name:ident, $mname:ident, $errored_name:ident\r\n            $(\r\n                ; $sum:ident\r\n                , $next:ident\r\n                , $gen:ident\r\n                , ($fst:ident $($err_type:ident)*)\r\n                , $bound:ident\r\n            )*\r\n            : $f_sum:ident\r\n            , $f_gen:ident\r\n            , ($f_fst:ident $($f_err_type:ident)*)\r\n            , $f_bound:ident\r\n            , ($ff_fst:ident $($final:ident)*)\r\n            ) => {\r\n\r\n            pub struct $errored_name<\r\n                A: Parsable,\r\n                $($gen: Parsable,)*\r\n                $f_gen: Parsable,\r\n                E0\r\n            > (std::marker::PhantomData<(A, $($gen,)* $f_gen, E0)>);\r\n\r\n            impl<\r\n                A: Parsable,\r\n                $($gen: Parsable,)*\r\n                $f_gen: Parsable,\r\n                E0\r\n            > Parsable for $errored_name<\r\n                A,\r\n                $($gen,)*\r\n                $f_gen,\r\n                E0\r\n            >\r\n            where\r\n                E0: Cons<SmErr<A>> + Default,\r\n                $(\r\n                    $fst<E0, $(SmErr<$err_type>,)*>: Cons<SmErr<$bound>>,\r\n                )*\r\n                $f_fst<E0, $(SmErr<$f_err_type>,)*>: Cons<SmErr<$f_bound>>,\r\n                $ff_fst<E0, $(SmErr<$final>, )*>: std::error::Error,\r\n            {\r\n                type StateMachine = $mname<\r\n                    A::StateMachine,\r\n                    $($gen::StateMachine,)*\r\n                    $f_gen::StateMachine,\r\n                    E0\r\n                >;\r\n            }\r\n\r\n            #[derive(Clone, Debug)]\r\n            pub enum $name<A, $($gen,)* $f_gen> {\r\n                Val0(A),\r\n                $($sum($gen),)*\r\n                $f_sum($f_gen)\r\n            }\r\n            pub enum $mname<\r\n                A: StateMachine,\r\n                $($gen: StateMachine,)*\r\n                $f_gen: StateMachine,\r\n                E0\r\n            >\r\n            where\r\n                E0: Cons<A::Error>,\r\n                $(\r\n                    $fst<E0, $($err_type::Error,)*>: Cons<$bound::Error>,\r\n                )*\r\n                $f_fst<E0, $($f_err_type::Error,)*>: Cons<$f_bound::Error>,\r\n                $ff_fst<E0, $($final::Error, )*>: std::error::Error,\r\n            {\r\n                Val0(Vec<TokenTree>, E0, A),\r\n                // Val1(Vec<TokenTree>, E1Next<E0, A::Error>, B),\r\n                $(\r\n                    $sum(Vec<TokenTree>, $fst<E0, $($err_type::Error,)*>, $gen),\r\n                )*\r\n                $f_sum(Vec<TokenTree>, $f_fst<E0, $($f_err_type::Error,)*>, $f_gen)\r\n            }\r\n\r\n            impl<\r\n                A: StateMachine,\r\n                $($gen: StateMachine,)*\r\n                $f_gen: StateMachine,\r\n                E0\r\n            > Default for $mname<A, $($gen,)* $f_gen, E0>\r\n            where\r\n                E0: Default + Cons<A::Error>,\r\n                $(\r\n                    $fst<E0, $($err_type::Error,)*>: Cons<$bound::Error>,\r\n                )*\r\n                $f_fst<E0, $($f_err_type::Error,)*>: Cons<$f_bound::Error>,\r\n                $ff_fst<E0, $($final::Error,)*>: std::error::Error,\r\n            {\r\n                fn default() -> Self {\r\n                    loop {}\r\n                }\r\n            }\r\n\r\n            impl<\r\n                A: Parsable,\r\n                $($gen: Parsable,)*\r\n                $f_gen: Parsable\r\n            > Parsable for $name<A, $($gen,)* $f_gen> {\r\n                type StateMachine = $mname<\r\n                    A::StateMachine,\r\n                    $($gen::StateMachine,)*\r\n                    $f_gen::StateMachine,\r\n                    Sum0Err\r\n                >;\r\n            }\r\n\r\n            impl<\r\n                A: StateMachine,\r\n                $($gen: StateMachine,)*\r\n                $f_gen: StateMachine,\r\n                E0\r\n            > StateMachine for $mname<A, $($gen,)* $f_gen, E0>\r\n            where\r\n                E0: Default + Cons<A::Error>,\r\n                $(\r\n                    $fst<E0, $($err_type::Error,)*>: Cons<$bound::Error>,\r\n                )*\r\n                $f_fst<E0, $($f_err_type::Error,)*>: Cons<$f_bound::Error>,\r\n                $ff_fst<E0, $($final::Error,)*>: std::error::Error,\r\n            {\r\n                type Output = $name<A::Output, $($gen::Output,)* $f_gen::Output>;\r\n                type Error = $ff_fst<E0, $($final::Error,)*>;\r\n\r\n                fn drive(\r\n                    self,\r\n                    _: &TokenTree,\r\n                ) -> std::ops::ControlFlow<SmResult<Self::Output, Self::Error>, Self> {\r\n                    loop {}\r\n                }\r\n\r\n                fn terminate(self) -> SmResult<Self::Output, Self::Error> {\r\n                    loop {}\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    sum_n!(\r\n        Sum2, Sum2M, ESum2\r\n        : Val1, B, (E1Next A), B\r\n        ,          (E2Next A B)\r\n    );\r\n    sum_n!(\r\n        Sum3, Sum3M, ESum3\r\n        ; Val1, Val2, B, (E1Next A), B\r\n        : Val2, C,       (E2Next A B), C\r\n        ,                (E3Next A B C)\r\n    );\r\n    sum_n!(\r\n        Sum4, Sum4M, ESum4\r\n        ; Val1, Val2, B, (E1Next A), B\r\n        ; Val2, Val3, C, (E2Next A B), C\r\n        : Val3, D,       (E3Next A B C), D\r\n        ,                (E4Next A B C D)\r\n    );\r\n    sum_n!(\r\n        Sum5, Sum5M, ESum5\r\n        ; Val1, Val2, B, (E1Next A), B\r\n        ; Val2, Val3, C, (E2Next A B), C\r\n        ; Val3, Val4, D, (E3Next A B C), D\r\n        : Val4, E,       (E4Next A B C D), E\r\n        ,                (E5Next A B C D E)\r\n    );\r\n    sum_n!(\r\n        Sum6, Sum6M, ESum6\r\n        ; Val1, Val2, B, (E1Next A), B\r\n        ; Val2, Val3, C, (E2Next A B), C\r\n        ; Val3, Val4, D, (E3Next A B C), D\r\n        ; Val4, Val5, E, (E4Next A B C D), E\r\n        : Val5, F,       (E5Next A B C D E), F\r\n        ,                (E6Next A B C D E F)\r\n    );\r\n    sum_n!(\r\n        Sum7, Sum7M, ESum7\r\n        ; Val1, Val2, B, (E1Next A), B\r\n        ; Val2, Val3, C, (E2Next A B), C\r\n        ; Val3, Val4, D, (E3Next A B C), D\r\n        ; Val4, Val5, E, (E4Next A B C D), E\r\n        ; Val5, Val6, F, (E5Next A B C D E), F\r\n        : Val6, G,       (E6Next A B C D E F), G\r\n        ,                (E7Next A B C D E F G)\r\n    );\r\n    sum_n!(\r\n        Sum8, Sum8M, ESum8\r\n        ; Val1, Val2, B, (E1Next A), B\r\n        ; Val2, Val3, C, (E2Next A B), C\r\n        ; Val3, Val4, D, (E3Next A B C), D\r\n        ; Val4, Val5, E, (E4Next A B C D), E\r\n        ; Val5, Val6, F, (E5Next A B C D E), F\r\n        ; Val6, Val7, G, (E6Next A B C D E F), G\r\n        : Val7, H,       (E7Next A B C D E F G), H\r\n        ,                (E8Next A B C D E F G H)\r\n    );\r\n    sum_n!(\r\n        Sum9, Sum9M, ESum9\r\n        ; Val1, Val2, B, (E1Next A), B\r\n        ; Val2, Val3, C, (E2Next A B), C\r\n        ; Val3, Val4, D, (E3Next A B C), D\r\n        ; Val4, Val5, E, (E4Next A B C D), E\r\n        ; Val5, Val6, F, (E5Next A B C D E), F\r\n        ; Val6, Val7, G, (E6Next A B C D E F), G\r\n        ; Val7, Val8, H, (E7Next A B C D E F G), H\r\n        : Val8, I,       (E8Next A B C D E F G H), I\r\n        ,                (E9Next A B C D E F G H I)\r\n    );\r\n    sum_n!(\r\n        Sum10, Sum10M, ESum10\r\n        ; Val1, Val2, B, (E1Next A), B\r\n        ; Val2, Val3, C, (E2Next A B), C\r\n        ; Val3, Val4, D, (E3Next A B C), D\r\n        ; Val4, Val5, E, (E4Next A B C D), E\r\n        ; Val5, Val6, F, (E5Next A B C D E), F\r\n        ; Val6, Val7, G, (E6Next A B C D E F), G\r\n        ; Val7, Val8, H, (E7Next A B C D E F G), H\r\n        ; Val8, Val9, I, (E8Next A B C D E F G H), I\r\n        : Val9, J,       (E9Next A B C D E F G H I), J\r\n        ,                (E10Next A B C D E F G H I J)\r\n    );\r\n    sum_n!(\r\n        Sum11, Sum11M, ESum11\r\n        ; Val1, Val2,  B,  (E1Next A), B\r\n        ; Val2, Val3,  C,  (E2Next A B), C\r\n        ; Val3, Val4,  D,  (E3Next A B C), D\r\n        ; Val4, Val5,  E,  (E4Next A B C D), E\r\n        ; Val5, Val6,  F,  (E5Next A B C D E), F\r\n        ; Val6, Val7,  G,  (E6Next A B C D E F), G\r\n        ; Val7, Val8,  H,  (E7Next A B C D E F G), H\r\n        ; Val8, Val9,  I,  (E8Next A B C D E F G H), I\r\n        ; Val9, Val10, J,  (E9Next A B C D E F G H I), J\r\n        : Val10, K,       (E10Next A B C D E F G H I J), K\r\n        ,                 (E11Next A B C D E F G H I J K)\r\n    );\r\n    sum_n!(\r\n        Sum12, Sum12M, ESum12\r\n        ; Val1, Val2,   B,  (E1Next A), B\r\n        ; Val2, Val3,   C,  (E2Next A B), C\r\n        ; Val3, Val4,   D,  (E3Next A B C), D\r\n        ; Val4, Val5,   E,  (E4Next A B C D), E\r\n        ; Val5, Val6,   F,  (E5Next A B C D E), F\r\n        ; Val6, Val7,   G,  (E6Next A B C D E F), G\r\n        ; Val7, Val8,   H,  (E7Next A B C D E F G), H\r\n        ; Val8, Val9,   I,  (E8Next A B C D E F G H), I\r\n        ; Val9, Val10,  J,  (E9Next A B C D E F G H I), J\r\n        ; Val10, Val11, K, (E10Next A B C D E F G H I J), K\r\n        : Val11, L,        (E11Next A B C D E F G H I J K), L\r\n        ,                  (E12Next A B C D E F G H I J K L)\r\n    );\r\n    sum_n!(\r\n        Sum13, Sum13M, ESum13\r\n        ; Val1, Val2,   B,  (E1Next A), B\r\n        ; Val2, Val3,   C,  (E2Next A B), C\r\n        ; Val3, Val4,   D,  (E3Next A B C), D\r\n        ; Val4, Val5,   E,  (E4Next A B C D), E\r\n        ; Val5, Val6,   F,  (E5Next A B C D E), F\r\n        ; Val6, Val7,   G,  (E6Next A B C D E F), G\r\n        ; Val7, Val8,   H,  (E7Next A B C D E F G), H\r\n        ; Val8, Val9,   I,  (E8Next A B C D E F G H), I\r\n        ; Val9, Val10,  J,  (E9Next A B C D E F G H I), J\r\n        ; Val10, Val11, K, (E10Next A B C D E F G H I J), K\r\n        ; Val11, Val12, L, (E11Next A B C D E F G H I J K), L\r\n        : Val12, M,        (E12Next A B C D E F G H I J K L), M\r\n        ,                  (E13Next A B C D E F G H I J K L M)\r\n    );\r\n    sum_n!(\r\n        Sum14, Sum14M, ESum14\r\n        ; Val1, Val2,   B,  (E1Next A), B\r\n        ; Val2, Val3,   C,  (E2Next A B), C\r\n        ; Val3, Val4,   D,  (E3Next A B C), D\r\n        ; Val4, Val5,   E,  (E4Next A B C D), E\r\n        ; Val5, Val6,   F,  (E5Next A B C D E), F\r\n        ; Val6, Val7,   G,  (E6Next A B C D E F), G\r\n        ; Val7, Val8,   H,  (E7Next A B C D E F G), H\r\n        ; Val8, Val9,   I,  (E8Next A B C D E F G H), I\r\n        ; Val9, Val10,  J,  (E9Next A B C D E F G H I), J\r\n        ; Val10, Val11, K, (E10Next A B C D E F G H I J), K\r\n        ; Val11, Val12, L, (E11Next A B C D E F G H I J K), L\r\n        ; Val12, Val13, M, (E12Next A B C D E F G H I J K L), M\r\n        : Val13, N,        (E13Next A B C D E F G H I J K L M), N\r\n        ,                  (E14Next A B C D E F G H I J K L M N)\r\n    );\r\n}\r\n\r\npub use new_sum::*;\r\n// We can actually fix the memory scaling issue by transforming the problem to a state where we\r\n// just iteratively map a series of options until reach a valid value. We must hold an iterative\r\n// error term tho. This could optionally be boxed. An idea is also making it generic across a\r\n// monoid error composer. This would result in a sum that is (with a forgetful error mapping) O(1)\r\n// sized where n is the amount of types its summed over. This would be a great improvement from\r\n// the current O(n) sizing scheme\r\n//\r\n// This is done in the module `self::new_sum`\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use crate::*;\r\n\r\n    type P = Punct;\r\n\r\n    insta_match_test!(\r\n        it_matches_highest_priority,\r\n        Sum5<\r\n            (P,P,P,P,P),\r\n            (P,P,P,P,),\r\n            (P,P,P,),\r\n            (P,P,),\r\n            (P,),\r\n        > : ....);\r\n\r\n    insta_match_test!(it_matches_sum_2_0, Sum2<Ident, Punct> : hello);\r\n    insta_match_test!(it_matches_sum_2_1, Sum2<Ident, Punct> : <);\r\n}\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.71.0-nightly (5ea3f0ae0 2023-05-23)\r\nbinary: rustc\r\ncommit-hash: 5ea3f0ae08c07472239a94ce55601e9b63eb1f45\r\ncommit-date: 2023-05-23\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.71.0-nightly\r\nLLVM version: 16.0.4\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'Failed to extract DefId: opt_local_def_id_to_hir_id 4f8e9e9944886d83-ee3bb765f01576f', compiler/rustc_middle/src/dep_graph/dep_node.rs:1\r\n81:17\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/library/std/src/panicking.rs:578:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/library/core/src/panicking.rs:67:14\r\n   2: <rustc_query_system::dep_graph::dep_node::DepNode<rustc_middle::dep_graph::dep_node::DepKind> as rustc_middle::dep_graph::dep_node::DepNodeExt>::extract_def_i\r\nd::{closure#0}\r\n   3: <rustc_query_system::dep_graph::dep_node::DepNode<rustc_middle::dep_graph::dep_node::DepKind> as rustc_middle::dep_graph::dep_node::DepNodeExt>::extract_def_i\r\nd\r\n   4: <rustc_query_impl::plumbing::query_callback<rustc_query_impl::query_impl::opt_local_def_id_to_hir_id::QueryType>::{closure#0} as core::ops::function::FnOnce<(\r\nrustc_middle::ty::context::TyCtxt, rustc_query_system::dep_graph::dep_node::DepNode<rustc_middle::dep_graph::dep_node::DepKind>)>>::call_once\r\n   5: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n   6: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n   7: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n   8: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n   9: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n  10: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n  11: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n  12: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::DynamicConfig<rustc_query_system::query::caches::DefaultCache<rustc_middle::infer::\r\ncanonical::Canonical<rustc_middle::ty::ParamEnvAnd<rustc_middle::ty::Predicate>>, rustc_middle::query::erase::Erased<[u8; 2]>>, false, false, false>, rustc_query_im\r\npl::plumbing::QueryCtxt, true>\r\n  13: <rustc_trait_selection::traits::fulfill::FulfillProcessor as rustc_data_structures::obligation_forest::ObligationProcessor>::process_obligation\r\n  14: <rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_\r\ntrait_selection::traits::fulfill::FulfillProcessor>\r\n  15: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_argument_types\r\n  16: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_call\r\n  17: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  18: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_decl\r\n  19: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_block_with_expected\r\n  20: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  21: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_argument_types\r\n  22: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_call\r\n  23: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  24: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  25: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_argument_types\r\n  26: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_call\r\n  27: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  28: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  29: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  30: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_argument_types\r\n  31: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_call\r\n  32: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  33: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_argument_types\r\n  34: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_call\r\n  35: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  36: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_decl\r\n  37: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_block_with_expected\r\n  38: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  39: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_decl\r\n  40: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_block_with_expected\r\n  41: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  42: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_block_with_expected\r\n  43: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  44: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_return_expr\r\n  45: rustc_hir_typeck::check::check_fn\r\n  46: rustc_hir_typeck::typeck\r\n  47: rustc_hir_analysis::check_crate\r\n  48: rustc_interface::passes::analysis\r\n  49: <rustc_middle::ty::context::GlobalCtxt>::enter::<rustc_driver_impl::run_compiler::{closure#1}::{closure#2}::{closure#4}, core::result::Result<(), rustc_span::\r\nErrorGuaranteed>>\r\n  50: <rustc_interface::interface::Compiler>::enter::<rustc_driver_impl::run_compiler::{closure#1}::{closure#2}, core::result::Result<core::option::Option<rustc_int\r\nerface::queries::Linker>, rustc_span::ErrorGuaranteed>>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.71.0-nightly (5ea3f0ae0 2023-05-23) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental=[REDACTED]\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [evaluate_obligation] evaluating trait selection obligation `impls::map::MappedMachine<common_tokens::macro_invocation::MacroInvocationSemi>: core::marker::Sized\r\n`  |  = note: this failure-note originates in the macro `insta_match_test` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\n#1 [typeck] type-checking `common_tokens::external_blocks::tests::it_matches_item`\r\n#2 [used_trait_imports] finding used_trait_imports `common_tokens::external_blocks::tests::it_matches_item`\r\n#3 [analysis] running analysis passes on this crate\r\nend of query stack\r\nthere was a panic while trying to force a dep node\r\ntry_mark_green dep node stack:\r\n#0 opt_def_kind(thread 'rustc' panicked at 'Failed to extract DefId: opt_def_kind 4f8e9e9944886d83-ee3bb765f01576f', compiler/rustc_middle/src/dep_graph/dep_node.rs\r\n:181:17\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/library/std/src/panicking.rs:578:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/library/core/src/panicking.rs:67:14\r\n   2: <rustc_query_system::dep_graph::dep_node::DepNode<rustc_middle::dep_graph::dep_node::DepKind> as rustc_middle::dep_graph::dep_node::DepNodeExt>::extract_def_i\r\nd::{closure#0}\r\n   3: <rustc_query_system::dep_graph::dep_node::DepNode<rustc_middle::dep_graph::dep_node::DepKind> as rustc_middle::dep_graph::dep_node::DepNodeExt>::extract_def_i\r\nd\r\n   4: <rustc_middle::dep_graph::dep_node::DepKind as rustc_query_system::dep_graph::DepKind>::debug_node\r\n   5: core::fmt::rt::Argument::fmt\r\n             at /rustc/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/library/core/src/fmt/rt.rs:138:9\r\n   6: core::fmt::write\r\n             at /rustc/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/library/core/src/fmt/mod.rs:1094:21\r\n   7: std::io::Write::write_fmt\r\n             at /rustc/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/library/std/src/io/mod.rs:1712:15\r\n   8: <&std::io::stdio::Stderr as std::io::Write>::write_fmt\r\n             at /rustc/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/library/std/src/io/stdio.rs:945:9\r\n   9: <std::io::stdio::Stderr as std::io::Write>::write_fmt\r\n             at /rustc/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/library/std/src/io/stdio.rs:919:9\r\n  10: std::io::stdio::print_to\r\n             at /rustc/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/library/std/src/io/stdio.rs:1018:21\r\n  11: std::io::stdio::_eprint\r\n             at /rustc/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/library/std/src/io/stdio.rs:1106:5\r\n  12: rustc_query_system::dep_graph::graph::print_markframe_trace::<rustc_middle::dep_graph::dep_node::DepKind>\r\n  13: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n  14: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n  15: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n  16: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n  17: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n  18: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n  19: <rustc_query_system::dep_graph::graph::DepGraphData<rustc_middle::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl::plumbing::QueryC\r\ntxt>\r\n  20: rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::DynamicConfig<rustc_query_system::query::caches::DefaultCache<rustc_middle::infer::\r\ncanonical::Canonical<rustc_middle::ty::ParamEnvAnd<rustc_middle::ty::Predicate>>, rustc_middle::query::erase::Erased<[u8; 2]>>, false, false, false>, rustc_query_im\r\npl::plumbing::QueryCtxt, true>\r\n  21: <rustc_trait_selection::traits::fulfill::FulfillProcessor as rustc_data_structures::obligation_forest::ObligationProcessor>::process_obligation\r\n  22: <rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_\r\ntrait_selection::traits::fulfill::FulfillProcessor>\r\n  23: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_argument_types\r\n  24: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_call\r\n  25: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  26: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_decl\r\n  27: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_block_with_expected\r\n  28: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  29: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_argument_types\r\n  30: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_call\r\n  31: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  32: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  33: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_argument_types\r\n  34: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_call\r\n  35: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  36: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  37: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  38: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_argument_types\r\n  39: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_call\r\n  40: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  41: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_argument_types\r\n  42: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_call\r\n  43: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  44: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_decl\r\n  45: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_block_with_expected\r\n  46: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  47: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_decl\r\n  48: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_block_with_expected\r\n  49: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  50: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_block_with_expected\r\n  51: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args\r\n  52: <rustc_hir_typeck::fn_ctxt::FnCtxt>::check_return_expr\r\n  53: rustc_hir_typeck::check::check_fn\r\n  54: rustc_hir_typeck::typeck\r\n  55: rustc_hir_analysis::check_crate\r\n  56: rustc_interface::passes::analysis\r\n  57: <rustc_middle::ty::context::GlobalCtxt>::enter::<rustc_driver_impl::run_compiler::{closure#1}::{closure#2}::{closure#4}, core::result::Result<(), rustc_span::\r\nErrorGuaranteed>>\r\n  58: <rustc_interface::interface::Compiler>::enter::<rustc_driver_impl::run_compiler::{closure#1}::{closure#2}, core::result::Result<core::option::Option<rustc_int\r\nerface::queries::Linker>, rustc_span::ErrorGuaranteed>>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.71.0-nightly (5ea3f0ae0 2023-05-23) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental=[REDACTED]\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [evaluate_obligation] evaluating trait selection obligation `impls::map::MappedMachine<common_tokens::macro_invocation::MacroInvocationSemi>: core::marker::Sized\r\n`  |  = note: this failure-note originates in the macro `insta_match_test` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\n#1 [typeck] type-checking `common_tokens::external_blocks::tests::it_matches_item`\r\n#2 [used_trait_imports] finding used_trait_imports `common_tokens::external_blocks::tests::it_matches_item`\r\n#3 [analysis] running analysis passes on this crate\r\nend of query stack\r\nthere was a panic while trying to force a dep node\r\ntry_mark_green dep node stack:\r\n#0 used_trait_imports(syn_state_machine[4f8e]::common_tokens::external_blocks::tests::it_matches_item#1)\r\nend of try_mark_green dep node stack\r\n```\r\n\r\nBacktrace did not change the result of the error\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111938/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111938/timeline", "performed_via_github_app": null, "state_reason": null}