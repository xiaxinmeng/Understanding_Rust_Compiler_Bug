{"url": "https://api.github.com/repos/rust-lang/rust/issues/38376", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38376/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38376/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38376/events", "html_url": "https://github.com/rust-lang/rust/issues/38376", "id": 195675835, "node_id": "MDU6SXNzdWUxOTU2NzU4MzU=", "number": 38376, "title": "Special errors for common trait object issues", "user": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-12-14T23:31:03Z", "updated_at": "2020-04-22T06:57:37Z", "closed_at": "2020-04-22T06:57:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There are a few common mistakes people make involving trait objects, where instead of getting a helpful error, they end up getting some error about how their trait doesn't implement `Sized`. This can be extremely confusing, and it doesn't given any guidance to help the user solve their actual issue.\r\n\r\nIt would be great if we could just get special case error messages for each of these situations that tell the user how their problem can be solved.\r\n\r\nHere are a few common cases I see often:\r\n\r\n## The trait is not in scope\r\n\r\nA common pattern (shared by `Iterator` and `Future` for example) is to have parametric provided methods bounded by `Self: Sized` & an implementation of `Trait for Box<T> where T: Trait + ?Sized`.\r\n\r\nIf you end up getting a `Box<Trait>` in a scope where you don't have the trait in scope, method resolution will deref your box, and try to call the method on the raw, dynamically sized trait object, which will result in an error about how `'Trait + 'static: Sized' not satisfied`.\r\n\r\nA minimal example:\r\n\r\n```rust\r\ntrait Foo {\r\n    fn bar(&self) where Self: Sized { }\r\n}\r\n\r\nimpl<F: Foo + ?Sized> Foo for Box<F> { }\r\n\r\nimpl Foo for () { }\r\n\r\nfn foo() -> Box<Foo> { Box::new(()) }\r\n\r\nmod bar {\r\n    use foo;\r\n\r\n    fn bar() {\r\n        foo().bar();\r\n    }\r\n}\r\n```\r\n\r\nhttps://is.gd/2G5ywC\r\n\r\nThe actual solution to this is to import the trait into the scope in question, so that the Box's impl will be delegated to, instead of the raw object.\r\n\r\nOne wonders if there isn't a deeper solution to this problem, but at minimum we could recognize cases where you could instead delegate to the Box impl and suggest importing the trait instead.\r\n\r\n## You didn't mean to implement it for the trait object\r\n\r\nUsers who haven't fully internalized the idea of \"parametric polymorphism\" will often come upon the idea of providing a blanket impl, and write it like this:\r\n\r\n```rust\r\ntrait Foo { }\r\n\r\ntrait Bar: Sized { }\r\n\r\nimpl Foo for Bar { }\r\n```\r\n\r\nOften, `Bar` is not object safe, and so you get a `Sized` issue. Sometimes, `Bar` is object safe, and so you get an even more confusing error when you try to invoke a Foo method on a Bar type.\r\n\r\nImplementing a trait for an unsized trait object is almost never what you want to do to (I've never wanted to, at least). At very least, in the case where the trait is not object-safe, we could suggest that what you actually want is this:\r\n\r\n```rust\r\nimpl<T> Foo for T where T: Bar { }\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38376/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38376/timeline", "performed_via_github_app": null, "state_reason": "completed"}