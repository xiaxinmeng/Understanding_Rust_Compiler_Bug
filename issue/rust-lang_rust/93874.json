{"url": "https://api.github.com/repos/rust-lang/rust/issues/93874", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93874/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93874/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93874/events", "html_url": "https://github.com/rust-lang/rust/issues/93874", "id": 1130902247, "node_id": "I_kwDOAAsO6M5DaDLn", "number": 93874, "title": "#92917 breaks type inference on GATs", "user": {"login": "MingweiSamuel", "id": 6778341, "node_id": "MDQ6VXNlcjY3NzgzNDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6778341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MingweiSamuel", "html_url": "https://github.com/MingweiSamuel", "followers_url": "https://api.github.com/users/MingweiSamuel/followers", "following_url": "https://api.github.com/users/MingweiSamuel/following{/other_user}", "gists_url": "https://api.github.com/users/MingweiSamuel/gists{/gist_id}", "starred_url": "https://api.github.com/users/MingweiSamuel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MingweiSamuel/subscriptions", "organizations_url": "https://api.github.com/users/MingweiSamuel/orgs", "repos_url": "https://api.github.com/users/MingweiSamuel/repos", "events_url": "https://api.github.com/users/MingweiSamuel/events{/privacy}", "received_events_url": "https://api.github.com/users/MingweiSamuel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2413861294, "node_id": "MDU6TGFiZWwyNDEzODYxMjk0", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-untriaged", "name": "regression-untriaged", "color": "e4008a", "default": false, "description": "Untriaged performance or correctness regression."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-02-10T20:32:51Z", "updated_at": "2022-03-10T12:31:47Z", "closed_at": "2022-02-19T05:08:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a regression report! \ud83d\udc1b A regression is something that changed between versions of Rust but was not supposed to.\r\n\r\nPlease provide a short summary of the regression, along with any information you feel is relevant to replicate it.\r\n-->\r\nSeems to be caused by #92917 @jackh726 \r\n> Not a fix, but a mitigation to prevent a backwards-compatible hazard where we normalize using a predicate only because it's the only one available, but shouldn't.\r\n\r\nSo this regression seems to be intentional, but I want to make sure because even very basic inference fails now, making any use of GATs very fill up with explicit type annotations. It doesn't look so bad in this example, but with complex types it's bad, and I think there's a more complex example the compiler can't even tell what `_x` is at all, but I'm still working on that.\r\n\r\n### Code\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\n\r\npub trait Build {\r\n    type Output<O>;\r\n    fn build<O>(self, input: O) -> Self::Output<O>;\r\n}\r\n\r\npub struct IdentityBuild;\r\nimpl Build for IdentityBuild {\r\n    type Output<O> = O;\r\n    fn build<O>(self, input: O) -> Self::Output<O> {\r\n        input\r\n    }\r\n}\r\n\r\nfn a() {\r\n    let _x: u8 = IdentityBuild.build(10);\r\n    // ^type mismatch resolving `<IdentBuild as Build>::Output<i32> == u8`\r\n}\r\n\r\nfn b() {\r\n    let _x: Vec<u8> = IdentityBuild.build(Vec::new());\r\n    // ^type annotations needed: cannot satisfy `<IdentBuild as Build>::Output<Vec<_>> == Vec<u8>`\r\n    // cannot satisfy `<IdentBuild as Build>::Output<Vec<_>> == Vec<u8>`\r\n}\r\n\r\n// edit: added\r\nfn c() {\r\n    let mut f = IdentityBuild.build(|| ());\r\n    (f)();\r\n    // ^type annotations needed\r\n    // type must be known at this pointrustcE0282\r\n    // main.rs(17, 9): consider giving `x` a type\r\n}\r\n\r\npub fn main() {\r\n    a();\r\n    b();\r\n    c();\r\n}\r\n```\r\n\r\nI expected to see this happen: _compiles without error_\r\n\r\nInstead, this happened: Type inference fails, `Output<O> = O` seems to be ignored or not understood by the compiler.\r\n\r\n### Version it worked on\r\n\r\n<!--\r\nProvide the most recent version this worked on, for example:\r\n\r\nIt most recently worked on: Rust 1.47\r\n-->\r\n\r\nIt most recently worked on: <!-- version -->\r\n* cc38176793e9e13bb7b70dde4b951d9371017662\r\n* nightly-2022-02-09\r\n\r\n### Version with regression\r\n\r\n<!--\r\nProvide the version you are using that has the regression.\r\n-->\r\n\r\n* 9a5a961be97f405e751dd2cf966e1cdb80a612c2\r\n* nightly-2022-02-10\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.60.0-nightly (e7aca8959 2022-02-09)\r\nbinary: rustc\r\ncommit-hash: e7aca895980f25f6d2d3c48e10fd04656764d1e4\r\ncommit-date: 2022-02-09\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.60.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n<!--\r\nDid the compiler crash? If so, please provide a backtrace.\r\n-->\r\n\r\n### Backtrace\r\n(no crash)\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n-->\r\n\r\n<!--\r\nIf you know when this regression occurred, please add a line like below, replacing `{channel}` with one of stable, beta, or nightly.\r\n\r\n@rustbot modify labels: +regression-from-stable-to-{channel} -regression-untriaged\r\n-->\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93874/timeline", "performed_via_github_app": null, "state_reason": "completed"}