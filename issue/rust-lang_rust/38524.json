{"url": "https://api.github.com/repos/rust-lang/rust/issues/38524", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38524/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38524/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38524/events", "html_url": "https://github.com/rust-lang/rust/issues/38524", "id": 197057765, "node_id": "MDU6SXNzdWUxOTcwNTc3NjU=", "number": 38524, "title": "Reconsidering the recent changes in sort guarantees", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-12-21T23:23:00Z", "updated_at": "2017-01-26T04:24:21Z", "closed_at": "2017-01-26T04:24:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "The PR in question is #38192.\r\n\r\n@steveklabnik had some [objections](https://www.reddit.com/r/rust/comments/5jkvo0/four_years_with_rust/dbh394k/) to new guarantees of the sort algorithm.\r\n\r\n**Old** guarantees: \"This sort is stable and O(n log n) worst-case but allocates approximately 2 * n where n is the length of self.\"\r\n**New** guarantees: \"This sort is stable and O(n log n) worst-case, but allocates temporary storage half the size of self.\"\r\n\r\nThe new version is ATM in nightly only, so we still have time to adjust it. I agree that saying \"**approximately** half the size\" would be slightly better.\r\n\r\nHowever... should we perhaps leave the guarantees as they were (`2 * n`), in order not to make alternative implementations non-compliant? What exactly should the documentation say?\r\n\r\nHere's my stance on the issue:\r\n\r\nFirst, sort algorithms should never ever allocate `2 * n` additional memory. That's just way too much and I'm strongly against `2 * n`. Even the old merge sort can be easily tweaked to allocate just `n` without compromising performance.\r\n\r\nSecond, stable sorts can often get away with allocating just `n / 2`. In fact, I successfully tweaked the old merge sort to allocate just `n / 2` before I jumped on the TimSort ship.\r\n\r\nAny stable sort that requires `n` memory can be made to work with just `n / 2`. Here's how. Split the input array in half. Sort each half using the allocated auxilliary buffer (which is of same length as the half itself). Move one of the halves into the buffer. Merge them into the original orray. Done.\r\n\r\nGuarantees in some other programming languages:\r\n1. Python ([source](https://svn.python.org/projects/python/trunk/Objects/listsort.txt)) - TimSort allocates `n / 2`.\r\n2. Java ([source](http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/util/TimSort.java)) - TimSort allocates `n / 2`.\r\n3. C++ ([docs](http://en.cppreference.com/w/cpp/algorithm/stable_sort)) - `std::stable_sort` allocates `n`.\r\n\r\nI believe it's safe to say that the standard sort allocates approximately `n / 2`, but would be okay with guaranteeing `n`, too.\r\n\r\nLibs team, what do you think? @bluss?", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38524/timeline", "performed_via_github_app": null, "state_reason": "completed"}