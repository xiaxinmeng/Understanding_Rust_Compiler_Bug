{"url": "https://api.github.com/repos/rust-lang/rust/issues/19281", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19281/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19281/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19281/events", "html_url": "https://github.com/rust-lang/rust/issues/19281", "id": 49946127, "node_id": "MDU6SXNzdWU0OTk0NjEyNw==", "number": 19281, "title": "Dramatic slowdown in rust performance from the serialization benchmarks", "user": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 147085028, "node_id": "MDU6TGFiZWwxNDcwODUwMjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-nightly", "name": "regression-from-stable-to-nightly", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to nightly."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-11-24T21:40:54Z", "updated_at": "2014-12-08T20:51:49Z", "closed_at": "2014-12-08T20:51:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been doing a lot of benchmarking recently ([1](http://erickt.github.io/blog/2014/11/11/benchmarks/), [2](http://erickt.github.io/blog/2014/11/13/benchmarks-2/), [3](http://erickt.github.io/blog/2014/11/22/benchmarking-is-confusing/)), and I've seen a pretty dramatic drop in performance over the past couple weeks. While some of it might be explained from upgrading from OSX Mavericks to Yosemite, I still saw a 40% drop in performance between 2014-11-13 and 2014-11-23. I haven't been able to dig into what's going on yet, but I did see that our current implementation of `Writer` for `&mut [u8]`:\n\n``` rust\nimpl Writer for Vec<u8> {\n    #[inline]\n    fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n        self.push_all(buf);\n        Ok(())\n    }\n}\n\nimpl Writer for Vec<u8> {\n    #[inline]\n    fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n        self.push_all(buf);\n        Ok(())\n    }\n}\n\n#[bench]\nfn bench_std_vec_writer(b: &mut test::Bencher) {\n    let mut dst = Vec::with_capacity(BATCHES * SRC_LEN);\n    let src = &[1, .. SRC_LEN];\n\n    b.iter(|| {\n        dst.clear();\n\n        do_std_writes(&mut dst, src, BATCHES);\n    })\n}\n```\n\nDoes not appear to be inlining well for some reason:\n\n```\ntest writer::bench_std_vec_writer                           ... bench: 1000 | [----*****#*****--------]             | 2000:      1248 ns/iter (+/- 588)\ntest writer::bench_std_vec_writer_inline_always             ... bench: 900 |   [----*#***--]                        | 2000:      1125 ns/iter (+/- 282)\ntest writer::bench_std_vec_writer_inline_never              ... bench: 1000 |  [----***#*****--------]              | 2000:      1227 ns/iter (+/- 516)\n```\n\nRewriting to this makes it 10 times faster (and yes, I realize I'm not updating the length of the `Vec<u8>`. Could that be a problem?):\n\n``` rust\nstruct VecWriter1<'a> {\n    dst: &'a mut Vec<u8>,\n}\n\nimpl<'a> MyWriter for VecWriter1<'a> {\n    #[inline]\n    fn my_write(&mut self, src: &[u8]) -> IoResult<()> {\n        let src_len = src.len();\n\n        self.dst.reserve(src_len);\n\n        let dst = self.dst.as_mut_slice();\n\n        unsafe {\n            // we reserved enough room in `dst` to store `src`.\n            ptr::copy_nonoverlapping_memory(\n                dst.as_mut_ptr(),\n                src.as_ptr(),\n                src_len);\n        }\n\n        Ok(())\n    }\n}\n```\n\nwith this performance:\n\n```\ntest writer::bench_vec_writer_1                             ... bench: 100 |         [------*********#*****--------] | 200:       160 ns/iter (+/- 68)\ntest writer::bench_vec_writer_1_inline_always               ... bench: 100 |     [--------****#**--]                 | 300:       182 ns/iter (+/- 79)\ntest writer::bench_vec_writer_1_inline_never                ... bench: 600 |   [---****#**--]                       | 2000:       952 ns/iter (+/- 399)\n```\n\nFurthermore, commenting out the `self.dst.reserve(src_len)` made it just as fast as `BufWriter` and directly using the unsafe `ptr::copy_nonoverlapping_memory`.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19281/timeline", "performed_via_github_app": null, "state_reason": "completed"}