{"url": "https://api.github.com/repos/rust-lang/rust/issues/46303", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46303/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46303/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46303/events", "html_url": "https://github.com/rust-lang/rust/issues/46303", "id": 277039570, "node_id": "MDU6SXNzdWUyNzcwMzk1NzA=", "number": 46303, "title": "incr.comp.: Span fingerprinting cannot afford inaccuracies when caching query results", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-27T14:36:30Z", "updated_at": "2018-01-22T13:29:34Z", "closed_at": "2018-01-22T13:29:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In the current implementation of the incremental compilation change tracking system, the compiler will sometimes explicitly ignore source-span-related information (e.g. when hashing [type definitions](https://github.com/rust-lang/rust/blob/ea51b19dc7587bac0011282506ad4678cca9c1eb/src/librustc/ich/impls_hir.rs#L895-L908)). We do this in order to avoid false positives that spring from conflating span and HIR information. For example, when the compiler generates debuginfo for a data type, it will access the HIR of the type's definition in order to extract certain information. Thus, even though we explicitly do not include the source location of a type definition in the corresponding debuginfo, changing the source location would still cause the debuginfo to be considered as having changed and the whole object file would need to be compiled.\r\n\r\nExplicitly ignoring some span information during change detection was never pretty but it was feasible as long as we only had to consider the consequences this had for cached machine code. Now, that we are starting to cache arbitrary query results I think it is a bad idea to try and keep following this strategy. It seems likely that having such manual exceptions would break every few weeks due to largely unrelated changes to some query.\r\n\r\nAlso, up until now the compiler makes the assumption that source location information is only relevant when generating debuginfo. This too was only true as long as we just cache machine code. This assumption actually already doesn't hold anymore since we started caching error messages a while ago. These contain source locations but are independent of whether debuginfo is generated or not.\r\n\r\nI'm pretty convinced that we should always hash all span information. The question is how to best avoid the negative consequences this will have on change detection accuracy. I think that splitting span information out of HIR and into a side-table will be one of the things we'll have to do. Spans would then be accessed by the `NodeId` of the corresponding HIR node. This would allow for simply not storing span information in most query results (e.g. MIR) and for avoiding the conflation of source location and other HIR information.\r\n\r\ncc @nikomatsakis ", "closed_by": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46303/timeline", "performed_via_github_app": null, "state_reason": "completed"}