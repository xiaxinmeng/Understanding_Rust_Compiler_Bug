{"url": "https://api.github.com/repos/rust-lang/rust/issues/79432", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79432/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79432/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79432/events", "html_url": "https://github.com/rust-lang/rust/issues/79432", "id": 751183961, "node_id": "MDU6SXNzdWU3NTExODM5NjE=", "number": 79432, "title": "DepGraph::with_ignore misuse", "user": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-11-25T23:58:10Z", "updated_at": "2021-04-03T00:59:08Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[`DepGraph::with_ignore(closure)`](https://github.com/rust-lang/rust/blob/05dde137cad043738e94a47f63256f1e66c83768/compiler/rustc_query_system/src/dep_graph/graph.rs#L158) either doesn't work as intended, or some clients are confused about what it does. Some clients are under the impression that this prevents the closure from modifying the dep graph, but that's not the case.\r\n\r\nFor example, in [`OnDiskCache::serialize`](https://github.com/rust-lang/rust/blob/05dde137cad043738e94a47f63256f1e66c83768/compiler/rustc_middle/src/ty/query/on_disk_cache.rs#L179), we serialize the query result cache, and we apparently don't want the process of serializing the cache to modify the graph itself (seems reasonable):\r\n\r\n```rust\r\n// Serializing the `DepGraph` should not modify it.\r\n// (The comment is off--we're actually serializing the result cache here.)\r\ntcx.dep_graph.with_ignore(|| {\r\n    ...\r\n})\r\n```\r\n\r\nBut it does. The calls to queries `tcx.original_crate_name` and `tcx.crate_disambiguator` within that closure can and often do modify the graph (I verified by adding some `eprintln`s to print the graph node count before and after these queries). So, when we later (or in parallel) serialize the actual dep graph, it's inconsistent with the result cache. Specifically, the graph has nodes for which no query result was serialized, though perhaps they should have been (\"perhaps\" because I'm not sure it matters for the particular queries involved here).\r\n\r\nI haven't investigated the full ramifications of this specific use of `with_ignore`. It may account for some existing incr-comp bugs. It's likely an even bigger problem for parallel builds, since the result cache and graph are serialized in parallel.\r\n\r\nBut this is just one of many uses of `with_ignore`. If the above analysis is correct, I think we need to provide a way to prevent dep graph modification while executing some code, and vet uses of `with_ignore` to see whether or not they actually need the functionality provided by it, or need the new don't-modify-dep-graph functionality. We may also want to rename `with_ignore` so that it's more clear what it does.\r\n\r\n@rustbot label A-incr-comp", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79432/timeline", "performed_via_github_app": null, "state_reason": null}