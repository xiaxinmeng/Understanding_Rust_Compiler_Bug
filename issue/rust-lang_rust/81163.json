{"url": "https://api.github.com/repos/rust-lang/rust/issues/81163", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81163/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81163/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81163/events", "html_url": "https://github.com/rust-lang/rust/issues/81163", "id": 788202076, "node_id": "MDU6SXNzdWU3ODgyMDIwNzY=", "number": 81163, "title": "Improve ptr::read code in debug builds", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 2019962432, "node_id": "MDU6TGFiZWwyMDE5OTYyNDMy", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt-inlining", "name": "A-mir-opt-inlining", "color": "f7e101", "default": false, "description": "Area: MIR inlining"}, {"id": 2242906716, "node_id": "MDU6TGFiZWwyMjQyOTA2NzE2", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-raw-pointers", "name": "A-raw-pointers", "color": "f7e101", "default": false, "description": "Area: raw pointers, MaybeUninit, NonNull"}], "state": "closed", "locked": false, "assignee": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 31, "created_at": "2021-01-18T11:50:10Z", "updated_at": "2022-11-27T08:24:36Z", "closed_at": "2022-11-27T08:24:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In https://github.com/rust-lang/rust/pull/80290, some people raised concerns about the quality of the code that `ptr::write` compiles to in debug builds. Given that, to my knowledge, reads are much more common than writes, I would think that one should be much more concerned with the code that `ptr::read` compiles to -- and currently, there's going to be quite a few function calls in there, so without inlining, that code will be pretty slow.\r\n\r\n`ptr::read` could be improved with techniques similar to what I did for `ptr::write` (call intrinsics directly, and inline everything else by hand). This would result in (something like) the following implementation: (EDIT see below for why this is wrong)\r\n```rust\r\npub const unsafe fn read<T>(src: *const T) -> T {\r\n    // We are calling the intrinsics directly to avoid function calls in the generated code\r\n    // as `intrinsics::copy_nonoverlapping` is a wrapper function.\r\n    extern \"rust-intrinsic\" {\r\n        fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\r\n    }\r\n\r\n    // For the same reason, we also side-step `mem::MaybeUninit` and use a custom `union` directly.\r\n    #[repr(C)]\r\n    union MaybeUninit<T> {\r\n        init: mem::ManuallyDrop<T>,\r\n        uninit: (),\r\n    }\r\n\r\n    let mut tmp: MaybeUninit<T> = MaybeUninit { uninit: () };\r\n    // SAFETY: the caller must guarantee that `src` is valid for reads.\r\n    // `src` cannot overlap `tmp` because `tmp` was just allocated on\r\n    // the stack as a separate allocated object.\r\n    //\r\n    // `MaybeUninit` is repr(C), so we can assume `init` is at offset 0, justifying the pointer\r\n    // casts.\r\n    //\r\n    // Finally, since we just wrote a valid value into `tmp`, it is guaranteed\r\n    // to be properly initialized.\r\n    unsafe {\r\n        copy_nonoverlapping(src, &mut tmp as *mut _ as *mut T, 1);\r\n        mem::transmute_copy(&tmp.init)\r\n    }\r\n}\r\n```\r\nHowever, here we have the extra difficulty that `read` is (unstably) a `const fn`, so the above implementation is rejected. `&tmp.init` can be replaced by `&mut tmp.init` and that works (or we wait for a bootstrap bump so we can make use of https://github.com/rust-lang/rust/pull/80418), but `transmute_copy` is non-`const`, so there's still more work to be done. (`transmute` does not work since the compiler does not recognize that `T` and `ManuallyDrop<T>` have the same size.)\r\n\r\nI will stop here, but if someone else strongly cares about `ptr::read` performance/codesize in debug builds, feel free to pick this up and drive it to completion.\r\n\r\nCc @bjorn3 @therealprof @usbalbin", "closed_by": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81163/timeline", "performed_via_github_app": null, "state_reason": "completed"}