{"url": "https://api.github.com/repos/rust-lang/rust/issues/44113", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44113/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44113/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44113/events", "html_url": "https://github.com/rust-lang/rust/issues/44113", "id": 253152195, "node_id": "MDU6SXNzdWUyNTMxNTIxOTU=", "number": 44113, "title": "global_allocator can not not be defined inside module", "user": {"login": "rkapl", "id": 2761336, "node_id": "MDQ6VXNlcjI3NjEzMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/2761336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkapl", "html_url": "https://github.com/rkapl", "followers_url": "https://api.github.com/users/rkapl/followers", "following_url": "https://api.github.com/users/rkapl/following{/other_user}", "gists_url": "https://api.github.com/users/rkapl/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkapl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkapl/subscriptions", "organizations_url": "https://api.github.com/users/rkapl/orgs", "repos_url": "https://api.github.com/users/rkapl/repos", "events_url": "https://api.github.com/users/rkapl/events{/privacy}", "received_events_url": "https://api.github.com/users/rkapl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-08-27T09:24:34Z", "updated_at": "2019-07-26T02:18:27Z", "closed_at": "2019-07-26T02:18:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying define a global allocator inside a module, you get a weird error message: `[E0432]: unresolved import super`. The global_allocator is expanded to code containing `use super::<varname>` but I don't know why rustc fails to resolve that in this case. Happens with both inline and file modules. \r\n\r\nLooks like the module that is created by expanding global_allocator thinks its parent is the root crate despite being in the `breaks` module.\r\n\r\nExample:\r\n```rust\r\n#![feature(global_allocator, allocator_api)]                                                                                                                                                                       \r\n                                                                                                                                                                                                                   \r\nstruct TAlloc;                                                                                                                                                                                                     \r\n                                                                                                                                                                                                                   \r\nunsafe impl<'a> std::heap::Alloc for &'a TAlloc{                                                                                                                                                                   \r\n    unsafe fn alloc(&mut self, _layout: std::heap::Layout) -> std::result::Result<*mut u8, std::heap::AllocErr> {                                                                                                  \r\n        return Err(std::heap::AllocErr::Unsupported{details: \"Stub allocator\"});                                                                                                                                   \r\n    }                                                                                                                                                                                                              \r\n    unsafe fn dealloc(&mut self, _ptr: *mut u8, _layout: std::heap::Layout) {                                                                                                                                      \r\n    }                                                                                                                                                                                                              \r\n}                                                                                                                                                                                                                  \r\n                                                                                                                                                                                                                   \r\nmod breaks{                                                                                                                                                                                                        \r\n    #[global_allocator]                                                                                                                                                                                            \r\n    static ALLOCATOR: ::TAlloc = ::TAlloc;                                                                                                                                                                         \r\n}                                                                                                                                                                                                                  \r\n                                                                                                                                                                                                                   \r\npub fn main() {                                                                                                                                                                                                    \r\n}\r\n```\r\ncauses:\r\n```\r\nerror[E0432]: unresolved import `super`\r\n  --> alloc.rs:15:5\r\n   |\r\n15 |     static ALLOCATOR: ::TAlloc = ::TAlloc;\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `ALLOCATOR` in the root\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44113/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44113/timeline", "performed_via_github_app": null, "state_reason": "completed"}