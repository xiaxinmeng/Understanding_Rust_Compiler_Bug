{"url": "https://api.github.com/repos/rust-lang/rust/issues/51623", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51623/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51623/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51623/events", "html_url": "https://github.com/rust-lang/rust/issues/51623", "id": 333452203, "node_id": "MDU6SXNzdWUzMzM0NTIyMDM=", "number": 51623, "title": "[Mini-RFC] Tracking issue for single source cross-compilation", "user": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 167285428, "node_id": "MDU6TGFiZWwxNjcyODU0Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-cross", "name": "A-cross", "color": "f7e101", "default": false, "description": "Area: Cross compilation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-06-18T22:07:46Z", "updated_at": "2020-04-30T14:33:21Z", "closed_at": "2020-04-30T14:33:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As suggested, this issue is about the Rust single source cross compilation story. I've had some success with this while I was working on [`mir-hsa`](https://github.com/DiamondLovesYou/rust-mir-hsa) and the AMDGPU Stuff. In my case, the HSA API is used, which accepts GPU native ELF files directly, and therefore enables me to *not* have to write a new codegen backend. I have done this with the following changes to Rust:\r\n\r\n* [ ] Plugin provided `rustc-intrinsic`s, which run post monomorphization to have access to only concrete types and usage. They are limited to inserting MIR statements just before the original `TerminatorKind::Call`. This is useful because all Rust functions have a unique type. Thus a call the intrinsic [like this one](https://github.com/DiamondLovesYou/rust-mir-hsa/blob/b8bf2e36ed984269be5115ee11fe33edf2aca9a3/hsa-core/src/kernel_info.rs#L20) (note the upvar stuff is nonfunctional, however. I need to put more thought into that part) will \u201creturn\u201d the `DefId` (rather, equivalent info) of the function passed in. After expansion, trans rewrites the terminator to be a direct goto. [This](https://github.com/DiamondLovesYou/rust-mir-hsa/blob/b8bf2e36ed984269be5115ee11fe33edf2aca9a3/rustc-plugin/src/lib.rs#L122\r\n) is the plugin that expands the `kernel_info_for` intrinsic mentioned/linked earlier.\r\n\r\nThis expansion originally occurred during trans, like when traditional LLVM intrinsics are handled. However, I think it could be made to happen before collection and partitioning. Either way, this implementation as is allows crate authors to use plugin intrinsics and not force downstream crates to also load that plugin (downstream crates can't be able to call the intrinsics generically).\r\n\r\nHere is the trait for the plugin registry:\r\n```rust\r\npub trait MirPluginIntrinsicTrans {\r\n    fn trans_simple_intrinsic<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\r\n                                        name: &str,\r\n                                        source_info: SourceInfo,\r\n                                        sig: &FnSig<'tcx>,\r\n                                        parent_mir: &mir::Mir<'tcx>,\r\n                                        parent_param_substs: &'tcx Substs<'tcx>,\r\n                                        args: &Vec<Operand<'tcx>>,\r\n                                        return_place: Place<'tcx>,\r\n                                        extra_stmts: &mut Vec<StatementKind<'tcx>>)\r\n        where 'tcx: 'a;\r\n}\r\n```\r\nThe extra statements needed to store the return values are put into `extra_stmts`, which are translated just after the function returns. The other parameters are so one has the needed things to monomorphize types, and for debugging info.\r\n\r\nMy impl had Rust just trusting that the \"return\" value provided by the plugin matched the type specified by the intrinsic declaration. This is probably not what we want long term.\r\n\r\n* [ ] A codegen/\u201ddebugging\u201d flag to always save/keep Rust\u2019s cstore metadata in outputs. Combined with `-Z always-encode-mir`, we now have every function\u2019s MIR available at runtime. My original impl made this hard coded \u2018cause I\u2019m lazy, so I\u2019ll need to fix this before issuing a PR.\r\n\r\n* [ ] An extra codegen/\u201ddebugging\u201d flag to force `librustc_mir::monomorphize` to translate everything, without relying on upstream definitions and a linker. I made this inaccessible to everyone except specialized `rustc` drivers, ie can\u2019t use `rustc -Z retrans-all-deps ..`, to prevent misuse.\r\n\r\n* [ ] Make `librustc_metadata::schema` public, so one can use `CrateRoot` and friends. [Here](https://github.com/DiamondLovesYou/rust-mir-hsa/blob/b8bf2e36ed984269be5115ee11fe33edf2aca9a3/runtime/src/metadata.rs#L123) is how the metadata was loaded (finding every dylib, including dylibs not actually mapped into the current process, is done elsewhere).\r\n\r\n* [ ] Make Rust accept a mono item collector root override. This is used by a special `rustc` driver at compiled program runtime to rerun trans for specific functions.\r\n\r\n### Issues (as implemented, so mostly issues related to *my* runtime impl):\r\n\r\n* [ ] This method is limited to Rust code only.\r\n* [ ] It also doesn\u2019t allow performing codegen at compile-time (ie generating for the cross when you\u2019re compiling for the host; the cross must be \u201ccompiled\u201d at runtime).\r\n* [ ] Globals referenced will not be shared. Or, globals are defined in the output. Host/GPU ABI differences.\r\n* [ ] Closure upvars are ignored (IIRC, they didn\u2019t work at all when I tried with my prototype, but I decided to ignore this while I got other things working so..). The runtime (eg my `mir-hsa::runtime` crate) will need to know about the upvars of a closure so that they can get mapped on to the GPU.\r\n* [ ] New `Send` like trait: `NumaSend`. This is needed so that types can do appropriate serialization of inner memory regions when they are sent to other memories. Doesn\u2019t seem like there is a whole lotta thought into this area, yet.\r\n\r\nHas anyone else worked on any single source prototype? [I see this topic on discuss.rust-lang.org](https://internals.rust-lang.org/t/single-source-gpu-support/898), but nothing recent.\r\n\r\nRelated: https://github.com/rust-lang/rust/issues/51575 and https://github.com/rust-lang/rust/issues/38789\r\n\r\nRFC of sorts, so please criticize. I'm going to submit patches for the proposed changes above, and I would like to at least get something functionally equivalent accepted.\r\n@eddyb \r\n\r\nEdit log:\r\n\r\n1. Fix missing link", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51623/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51623/timeline", "performed_via_github_app": null, "state_reason": "completed"}