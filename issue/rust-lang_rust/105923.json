{"url": "https://api.github.com/repos/rust-lang/rust/issues/105923", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105923/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105923/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105923/events", "html_url": "https://github.com/rust-lang/rust/issues/105923", "id": 1503639969, "node_id": "I_kwDOAAsO6M5Zn7mh", "number": 105923, "title": "Returning Self with incorrect lifetime assumsion", "user": {"login": "earthengine", "id": 2227031, "node_id": "MDQ6VXNlcjIyMjcwMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2227031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/earthengine", "html_url": "https://github.com/earthengine", "followers_url": "https://api.github.com/users/earthengine/followers", "following_url": "https://api.github.com/users/earthengine/following{/other_user}", "gists_url": "https://api.github.com/users/earthengine/gists{/gist_id}", "starred_url": "https://api.github.com/users/earthengine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/earthengine/subscriptions", "organizations_url": "https://api.github.com/users/earthengine/orgs", "repos_url": "https://api.github.com/users/earthengine/repos", "events_url": "https://api.github.com/users/earthengine/events{/privacy}", "received_events_url": "https://api.github.com/users/earthengine/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-12-19T21:36:23Z", "updated_at": "2022-12-22T19:01:55Z", "closed_at": "2022-12-22T19:01:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\ntrait Foo {\r\n    type Gat<'a>: Foo + 'a where Self: 'a;\r\n    fn foo<'a>() -> Self::Gat<'a> where Self: Sized + 'a;\r\n}\r\nenum Bar<'a> {\r\n    Baz(&'a ())\r\n}\r\n\r\nimpl<'b> Foo for Bar<'b> {\r\n    type Gat<'a> = Bar<'a> where Self: 'a;\r\n    fn foo<'a>() -> Bar<'a> {\r\n        //Worked: \r\n        //Bar::Baz(&())\r\n        //error: lifetime may not live long enough\r\n        //= help: consider adding the following bound: `'b: 'a`\r\n        Self::Baz(&())\r\n    }\r\n}\r\n\r\n```\r\n[Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=60ddd7d0c4153175b9f1479cc940dd21)\r\n\r\nI expected to see it to compile since it worked if replacing `Self` with the actual enum name.\r\n\r\nInstead, it reports error\r\n\r\n```text\r\nerror: lifetime may not live long enough\r\n  --> src/lib.rs:16:9\r\n   |\r\n9  | impl<'b> Foo for Bar<'b> {\r\n   |      -- lifetime `'b` defined here\r\n10 |     type Gat<'a> = Bar<'a> where Self: 'a;\r\n11 |     fn foo<'a>() -> Bar<'a> {\r\n   |            -- lifetime `'a` defined here\r\n...\r\n16 |         Self::Baz(&())\r\n   |         ^^^^^^^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\r\n   |\r\n   = help: consider adding the following bound: `'b: 'a`\r\n\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n### Meta\r\nThis is replicated in ALL channels in the playground.\r\n\r\nIt may or may not related to the newly stabilized GAT feature, but this example surely requires to use this feature.\r\n\r\nIt might be justifiable to reject the code given; but it would need a good reason and being well documented. To general users like me, the assumption is that `Self` in this context should be equivalent to the enum name, without any lifetime assumptions.\r\n", "closed_by": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105923/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}