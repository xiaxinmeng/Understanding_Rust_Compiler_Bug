{"url": "https://api.github.com/repos/rust-lang/rust/issues/36624", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/36624/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/36624/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/36624/events", "html_url": "https://github.com/rust-lang/rust/issues/36624", "id": 178386050, "node_id": "MDU6SXNzdWUxNzgzODYwNTA=", "number": 36624, "title": "Better SIMD shuffles", "user": {"login": "jneem", "id": 1448113, "node_id": "MDQ6VXNlcjE0NDgxMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1448113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jneem", "html_url": "https://github.com/jneem", "followers_url": "https://api.github.com/users/jneem/followers", "following_url": "https://api.github.com/users/jneem/following{/other_user}", "gists_url": "https://api.github.com/users/jneem/gists{/gist_id}", "starred_url": "https://api.github.com/users/jneem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jneem/subscriptions", "organizations_url": "https://api.github.com/users/jneem/orgs", "repos_url": "https://api.github.com/users/jneem/repos", "events_url": "https://api.github.com/users/jneem/events{/privacy}", "received_events_url": "https://api.github.com/users/jneem/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-09-21T15:44:07Z", "updated_at": "2023-04-05T17:38:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to do the following in AVX2 using intrinsics: shift `x` one byte to the right, while shifting the rightmost byte of `y` into the leftmost byte of `x`. This is best done using two instructions: `vperm2i128` followed by `vpalignr`. However, `simd_shuffle32` generates four instructions: `vmovdqa` (to load a constant), `vpblendvb`, then `vperm2i128` and `vpalignr`. Here is a a full example, which may be compiled with `rustc -O -C target_feature=+avx2 --crate-type=lib --emit=asm shuffle.rs`.\n\n```\n#![feature(platform_intrinsics, repr_simd)]\n\n#[allow(non_camel_case_types)]\n#[repr(simd)]\npub struct u8x32(u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8);\n\nextern \"platform-intrinsic\" {\n    fn simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U;\n}\n\npub fn right_shift_1(left: u8x32, right: u8x32) -> u8x32 {\n    unsafe { simd_shuffle32(left, right, [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]) }\n}\n```\n\nThis might be considered a bug in LLVM, in the sense that it's generating a sub-optimal shuffle. However, I think it should be addressed in rustc, because if I know what the right sequence of instructions is then I shouldn't have to hope that LLVM can generate it. Moreover, it's possible to get the right code from clang (compile with `clang -emit-llvm -mavx2 -O -S shuffle.c`):\n\n```\n#include <immintrin.h>\n__m256i right_shift_1(__m256i left, __m256i right)\n{\n    __m256i new_left = _mm256_permute2x128_si256(left, right, 33);\n    return _mm256_alignr_epi8(new_left, right, 1);\n}\n```\n\nA possibly interesting observation is that the unoptimized LLVM IR from clang contains a `llvm.x86.avx2.vperm2i128` intrinsic followed by a `shufflevector`. The optimized LLVM IR from clang contains two `shufflevector` intrinsics. In order to try to get the same output from rustc, I first patched it to support `llvm.x86.avx2.vperm2i128`. After modifying `right_shift_1` to use the new intrinsic, I got rustc to produce `llvm.x86.avx2.vperm2i128` followed by a `shufflevector`. However, the optimized LLVM IR from rustc still produces a single `shufflevector`, and it still ends up producing the bad asm.\n\nI think this means that the fault is from some optimization pass in rustc that isn't in clang, but I haven't had time to investigate it yet...\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/36624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/36624/timeline", "performed_via_github_app": null, "state_reason": null}