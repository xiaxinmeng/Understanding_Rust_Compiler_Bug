{"url": "https://api.github.com/repos/rust-lang/rust/issues/102159", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102159/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102159/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102159/events", "html_url": "https://github.com/rust-lang/rust/issues/102159", "id": 1383093844, "node_id": "I_kwDOAAsO6M5ScFZU", "number": 102159, "title": "GAT with bound on another GAT fails despite fulfilling the bound", "user": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-09-22T22:40:13Z", "updated_at": "2022-09-23T06:47:47Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nstruct HasGeneric<T>(T);\r\n\r\ntrait GatFoo {\r\n    type Foo<T>: GatBar<Bar<()> = Self::Foo<()>>;\r\n}\r\n\r\ntrait GatBar {\r\n    type Bar<T>;\r\n}\r\n\r\nimpl<U> GatBar for HasGeneric<U> {\r\n    type Bar<T> = HasGeneric<T>;\r\n}\r\n\r\nimpl<U> GatFoo for HasGeneric<U> {\r\n    type Foo<T> = HasGeneric<T>;\r\n}\r\n```\r\n\r\nI expected to see this happen: This compiles successfully, as the bound is true - `GatBar::Bar<()> == HasGeneric<()>`.\r\n\r\nInstead, this happened: The compile fails with E0271, type mismatch during resolution\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nTested on the playground with:\r\n\r\n```\r\n1.65.0-beta.1\r\n(2022-09-19 2a65764f21cf10b7e03c)\r\n```\r\nand\r\n```\r\n1.66.0-nightly\r\n(2022-09-21 9062b780b32d2eab060b)\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0271]](https://doc.rust-lang.org/beta/error-index.html#E0271): type mismatch resolving `<HasGeneric<T> as GatBar>::Bar<()> == HasGeneric<T>`\r\n  --> src/lib.rs:17:19\r\n   |\r\n17 |     type Foo<T> = HasGeneric<T>;\r\n   |              -    ^^^^^^^^^^^^^ type mismatch resolving `<HasGeneric<T> as GatBar>::Bar<()> == HasGeneric<T>`\r\n   |              |\r\n   |              this type parameter\r\n   |\r\nnote: expected this to be `HasGeneric<T>`\r\n  --> src/lib.rs:13:19\r\n   |\r\n13 |     type Bar<T> = HasGeneric<T>;\r\n   |                   ^^^^^^^^^^^^^\r\n   = note: expected struct `HasGeneric<T>`\r\n              found struct `HasGeneric<()>`\r\nnote: required by a bound in `GatFoo::Foo`\r\n  --> src/lib.rs:5:25\r\n   |\r\n5  |     type Foo<T>: GatBar<Bar<()> = Self::Foo<()>>;\r\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `GatFoo::Foo`\r\n\r\nFor more information about this error, try `rustc --explain E0271`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102159/timeline", "performed_via_github_app": null, "state_reason": null}