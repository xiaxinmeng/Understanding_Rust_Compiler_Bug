{"url": "https://api.github.com/repos/rust-lang/rust/issues/38282", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38282/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38282/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38282/events", "html_url": "https://github.com/rust-lang/rust/issues/38282", "id": 194774524, "node_id": "MDU6SXNzdWUxOTQ3NzQ1MjQ=", "number": 38282, "title": "Fallible map on Option", "user": {"login": "golddranks", "id": 2675542, "node_id": "MDQ6VXNlcjI2NzU1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2675542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/golddranks", "html_url": "https://github.com/golddranks", "followers_url": "https://api.github.com/users/golddranks/followers", "following_url": "https://api.github.com/users/golddranks/following{/other_user}", "gists_url": "https://api.github.com/users/golddranks/gists{/gist_id}", "starred_url": "https://api.github.com/users/golddranks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/golddranks/subscriptions", "organizations_url": "https://api.github.com/users/golddranks/orgs", "repos_url": "https://api.github.com/users/golddranks/repos", "events_url": "https://api.github.com/users/golddranks/events{/privacy}", "received_events_url": "https://api.github.com/users/golddranks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-10T15:38:06Z", "updated_at": "2016-12-11T17:41:24Z", "closed_at": "2016-12-11T17:41:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using Option::map together with the `?` operator is a pain. If you are mapping over an optional type, you can't use `?` inside the closure to signal error. This means that it's often impractical to map functions that return `Result`s over optional types. Here's a way to alleviate that:\r\n\r\n    item.explanation = item.explanation\r\n        .and_then(|s| sanitize_links(&s).ok() ); // FIXME silently ignores errors\r\n\r\n...but as noted in the comment, in the cases where the error matters, this is bad, and needs to be refactored into a `match` statement.\r\n\r\nIt would help the ergonomics, if `Option<T>` had a method \u2013 let's call it `fallible_map` for the sake of the argument (feel free to suggest more succinct names) \u2013 like this:\r\n\r\n    fallible_map(self, FnOnce(T) \u2192 Result<U, E>) \u2192 Result<Option<U>, E>\r\n\r\nWhat it would do, it would map the function over `T`, but wrap an `Ok` result into `Option` and return that `Option` wrapped into a `Result`. This would allow mapping fallible functions over `Option`s:\r\n\r\n    item.explanation = item.explanation\r\n        .fallible_map(|s| sanitize_links(&s))?;\r\n\r\nWhich, combined with `?`, allows neat, fluid APIs while handling errors properly.\r\n\r\nComments? Does adding this kind of an API to `Option` need an RFC?\r\n\r\nNote that alternative to this would be a method over `Option<Result<T, E>>` that would \"flip\" the types to `Result<Option<T>, E>`. ", "closed_by": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38282/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38282/timeline", "performed_via_github_app": null, "state_reason": "completed"}