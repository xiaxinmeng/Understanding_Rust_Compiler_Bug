{"url": "https://api.github.com/repos/rust-lang/rust/issues/92094", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92094/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92094/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92094/events", "html_url": "https://github.com/rust-lang/rust/issues/92094", "id": 1083991898, "node_id": "I_kwDOAAsO6M5AnGda", "number": 92094, "title": "`'static` bound on type is not satisfied by definition involving `'static` associated types ", "user": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-12-19T02:38:37Z", "updated_at": "2023-04-05T17:35:15Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "We have the following code:\r\n\r\n```rust\r\npub unsafe trait ULE : Sized + Copy + 'static {}\r\n\r\npub trait AsULE: Copy {\r\n    type ULE: ULE;\r\n}\r\n\r\npub unsafe trait VarULE: 'static {}\r\n\r\n// Note that T is used as a marker type; the data model is T::ULE\r\n#[repr(transparent)]\r\npub struct ZeroSlice<T: AsULE>([T::ULE]);\r\n\r\n// This works: a raw [T::ULE] in VarULE\r\nunsafe impl<U: ULE> VarULE for [U] {}\r\n\r\n// However, the following complains about T's lifetime\r\nunsafe impl<T: AsULE> VarULE for ZeroSlice<T> {}\r\n```\r\n\r\n([playpen](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=1d9fd6a1075db0339610e246e4236fdc))\r\n\r\nRaises the following error:\r\n\r\n<details>\r\n\r\n```\r\nerror[E0310]: the parameter type `T` may not live long enough\r\n  --> src/main.rs:17:23\r\n   |\r\n17 | unsafe impl<T: AsULE> VarULE for ZeroSlice<T> {}\r\n   |             --        ^^^^^^ ...so that the type `ZeroSlice<T>` will meet its required lifetime bounds\r\n   |             |\r\n   |             help: consider adding an explicit lifetime bound...: `T: 'static +`\r\n\r\nerror[E0310]: the parameter type `T` may not live long enough\r\n  --> src/main.rs:17:23\r\n   |\r\n17 | unsafe impl<T: AsULE> VarULE for ZeroSlice<T> {}\r\n   |             --        ^^^^^^ ...so that the type `T` will meet its required lifetime bounds\r\n   |             |\r\n   |             help: consider adding an explicit lifetime bound...: `T: 'static +`\r\n```\r\n\r\n</details>\r\n\r\nFrom looking at the definition, `ZeroSlice<T>([T::ULE])` should _always_ be `'static`, because `T::ULE` implements `ULE` which implies `'static`. However, the `VarULE` implementation is still required to have `T: 'static` by the compiler (which consequently reduces the number of types that it supports, since it should theoretically be possible to have `impl AsULE for Foo<'a>`)\r\n\r\nThe bug does not change if `trait AsULE` is changed to have `type ULE: ULE + 'static`. This is useful for reducing the issue further since it lets you get rid of the `ULE` trait, though we kept it around to demonstrate that it does work in the `[U]` case.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92094/timeline", "performed_via_github_app": null, "state_reason": null}