{"url": "https://api.github.com/repos/rust-lang/rust/issues/77304", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77304/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77304/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77304/events", "html_url": "https://github.com/rust-lang/rust/issues/77304", "id": 710479500, "node_id": "MDU6SXNzdWU3MTA0Nzk1MDA=", "number": 77304, "title": "Error message for `T <binop> U` worsens if `T` has exactly one implementation of the relevant trait", "user": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-09-28T18:19:09Z", "updated_at": "2022-05-12T16:28:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This code\r\n\r\n```rust\r\nstruct S;\r\n\r\nfn main() {\r\n    let _ = S == ();\r\n}\r\n```\r\n\r\nEmits the error message\r\n\r\n```\r\nerror[E0369]: binary operation `==` cannot be applied to type `S`\r\n --> src/main.rs:4:15\r\n  |\r\n4 |     let _ = S == ();\r\n  |             - ^^ -- ()\r\n  |             |\r\n  |             S\r\n  |\r\n  = note: an implementation of `std::cmp::PartialEq` might be missing for `S`\r\n```\r\n\r\nHowever, if the type `S` has any implementation of `PartialEq<T>` for a *single* type `T` that is not `()`, the error message becomes less helpful:\r\n\r\n```rust\r\n#[derive(PartialEq)]\r\nstruct S;\r\n\r\nfn main() {\r\n    let _ = S == ();\r\n}\r\n```\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:5:18\r\n  |\r\n5 |     let _ = S == ();\r\n  |                  ^^ expected struct `S`, found `()`\r\n```\r\n\r\nIf there are two or more impls of `PartialEq`, the error message becomes helpful again:\r\n\r\n```rust\r\n#[derive(PartialEq)]\r\nstruct S;\r\n\r\nimpl PartialEq<u8> for S {\r\n    fn eq(&self, _: &u8) -> bool {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let _ = S == ();\r\n}\r\n```\r\n\r\n```\r\nerror[E0277]: can't compare `S` with `()`\r\n  --> src/main.rs:11:15\r\n   |\r\n11 |     let _ = S == ();\r\n   |               ^^ no implementation for `S == ()`\r\n   |\r\n   = help: the trait `std::cmp::PartialEq<()>` is not implemented for `S`\r\n```\r\n\r\nThis also applies to other binary operation traits like `PartialOrd` and `Add`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77304/timeline", "performed_via_github_app": null, "state_reason": null}