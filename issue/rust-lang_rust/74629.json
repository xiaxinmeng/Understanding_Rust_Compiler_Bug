{"url": "https://api.github.com/repos/rust-lang/rust/issues/74629", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74629/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74629/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74629/events", "html_url": "https://github.com/rust-lang/rust/issues/74629", "id": 663734265, "node_id": "MDU6SXNzdWU2NjM3MzQyNjU=", "number": 74629, "title": "`negative_impls` and `optin_builtin_traits` nightly-features allow trait impls to overlap", "user": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1967303144, "node_id": "MDU6TGFiZWwxOTY3MzAzMTQ0", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-negative_impls", "name": "F-negative_impls", "color": "f9c0cc", "default": false, "description": "#![feature(negative_impls)]"}, {"id": 3921861239, "node_id": "LA_kwDOAAsO6M7pwtp3", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-bug-has-test", "name": "S-bug-has-test", "color": "862eff", "default": false, "description": "A `known-bug` test has been added for this bug."}], "state": "open", "locked": false, "assignee": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-07-22T12:45:38Z", "updated_at": "2023-04-27T19:31:25Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code (this is the most minimal example that I could create, though I think that there may exist a simpler one. my original code: [playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=9027b4ddd48a45475f548ca980963ced)):\r\n\r\n```rust\r\n#![feature(negative_impls)]\r\n#![feature(optin_builtin_traits)]\r\nstruct Nil;\r\nstruct Cons<H>(H);\r\nstruct Test;\r\n\r\ntrait Fold<F> {}\r\n\r\nimpl<T, F> Fold<F> for Cons<T> // 0\r\nwhere\r\n    T: Fold<Nil>,\r\n{}\r\n\r\nimpl<T, F> Fold<F> for Cons<T> // 1\r\nwhere\r\n    T: Fold<F>,\r\n    private::Is<T>: private::NotNil,\r\n{}\r\n\r\nimpl<F> Fold<F> for Test {} // 2\r\n\r\nmod private {\r\n    use crate::Nil;\r\n\r\n    pub struct Is<T>(T);\r\n    pub auto trait NotNil {}\r\n    impl !NotNil for Is<Nil> {}\r\n}\r\n```\r\n([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=0279c655181f268b1a6e5d14911cb215))\r\n\r\nI expected to see a compilation error because `0` and `1` implementations are clearly overlapping each other. E.g.: with `T = Test, F = ()` all bounds are true, making both implementations appliable  (`Test: Fold<Nil>`, `Test: Fold<()>` are true because of `2`, `Is<Test>: NotNil` is true because of `auto trait` & lack of negative implementation).\r\n\r\nHowever, this code compiles with the latest nightly (`1.47.0-nightly (2020-07-20 f9a3086363f214f2b56b)`)\r\n\r\nTo make things even weirder, this does **not** compile:\r\n```rust\r\nfn assert<T>()\r\nwhere\r\n    Cons<T>: Fold<()>\r\n{}\r\n\r\nassert::<Test>(); // error[E0283]: type annotations needed\r\n```\r\n([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=c184668e863d9ec321bb138af5ff457f))\r\n<details><summary>Error</summary>\r\n<p>\r\n\r\n```\r\nerror[E0283]: type annotations needed\r\n  --> src/main.rs:11:5\r\n   |\r\n6  |     fn assert<T>()\r\n   |        ------ required by a bound in this\r\n7  |     where\r\n8  |         Cons<T>: Fold<()>\r\n   |                  -------- required by this bound in `main::assert`\r\n...\r\n11 |     assert::<Test>();\r\n   |     ^^^^^^^^^^^^^^ cannot infer type for struct `Cons<Test>`\r\n   |\r\n   = note: cannot satisfy `Cons<Test>: Fold<()>`\r\n```\r\n</p>\r\n</details>\r\n\r\nBut this **does** compile:\r\n\r\n```rust\r\nfn indirect_assert0<T>()\r\nwhere\r\n    T: Fold<Nil>,\r\n{\r\n    assert::<T>();\r\n}\r\n\r\nfn indirect_assert1<T>()\r\nwhere\r\n    T: Fold<Nil>,\r\n    private::Is<T>: private::NotNil,\r\n{\r\n    assert::<T>();\r\n}\r\n\r\nindirect_assert0::<Test>();\r\nindirect_assert1::<Test>();\r\n```\r\n([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=387f09716bf0b9efb711f3c1626113bb))\r\n\r\nAnd lastly, if you'll try to [add a constant to the trait & print it](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=7035c7f41f0fb08a2562b3a786be7b3a), the compiler will ICE.\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror: internal compiler error: /rustc/f9a3086363f214f2b56bef30f0ac572e1a9127f1/src/librustc_middle/macros.rs:16:9: encountered bad ConstKind after monomorphizing: Error(DelaySpanBugEmitted(()))\r\n  --> src/main.rs:10:14\r\n   |\r\n10 |         dbg!(Cons::<T>::IMPL);\r\n   |              ^^^^^^^^^^^^^^^\r\n\r\nthread 'rustc' panicked at 'Box<Any>', /rustc/f9a3086363f214f2b56bef30f0ac572e1a9127f1/src/libstd/macros.rs:13:23\r\nstack backtrace:\r\n   0: std::backtrace_rs::backtrace::libunwind::trace\r\n             at /rustc/f9a3086363f214f2b56bef30f0ac572e1a9127f1/src/libstd/../backtrace/src/backtrace/libunwind.rs:96\r\n   1: std::backtrace_rs::backtrace::trace_unsynchronized\r\n             at /rustc/f9a3086363f214f2b56bef30f0ac572e1a9127f1/src/libstd/../backtrace/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at /rustc/f9a3086363f214f2b56bef30f0ac572e1a9127f1/src/libstd/sys_common/backtrace.rs:77\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at /rustc/f9a3086363f214f2b56bef30f0ac572e1a9127f1/src/libstd/sys_common/backtrace.rs:58\r\n   4: core::fmt::write\r\n             at /rustc/f9a3086363f214f2b56bef30f0ac572e1a9127f1/src/libcore/fmt/mod.rs:1117\r\n   5: std::io::Write::write_fmt\r\n             at /rustc/f9a3086363f214f2b56bef30f0ac572e1a9127f1/src/libstd/io/mod.rs:1508\r\n   6: std::sys_common::backtrace::_print\r\n             at /rustc/f9a3086363f214f2b56bef30f0ac572e1a9127f1/src/libstd/sys_common/backtrace.rs:61\r\n   7: std::sys_common::backtrace::print\r\n             at /rustc/f9a3086363f214f2b56bef30f0ac572e1a9127f1/src/libstd/sys_common/backtrace.rs:48\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at /rustc/f9a3086363f214f2b56bef30f0ac572e1a9127f1/src/libstd/panicking.rs:198\r\n   9: std::panicking::default_hook\r\n             at /rustc/f9a3086363f214f2b56bef30f0ac572e1a9127f1/src/libstd/panicking.rs:217\r\n  10: rustc_driver::report_ice\r\n  11: std::panicking::rust_panic_with_hook\r\n             at /rustc/f9a3086363f214f2b56bef30f0ac572e1a9127f1/src/libstd/panicking.rs:530\r\n  12: std::panicking::begin_panic\r\n  13: rustc_errors::HandlerInner::span_bug\r\n  14: rustc_errors::Handler::span_bug\r\n  15: rustc_middle::util::bug::opt_span_bug_fmt::{{closure}}\r\n  16: rustc_middle::ty::context::tls::with_opt::{{closure}}\r\n  17: rustc_middle::ty::context::tls::with_opt\r\n  18: rustc_middle::util::bug::opt_span_bug_fmt\r\n  19: rustc_middle::util::bug::span_bug_fmt\r\n  20: rustc_codegen_ssa::mir::constant::<impl rustc_codegen_ssa::mir::FunctionCx<Bx>>::eval_mir_constant\r\n  21: rustc_codegen_ssa::mir::codegen_mir\r\n  22: <rustc_middle::mir::mono::MonoItem as rustc_codegen_ssa::mono_item::MonoItemExt>::define\r\n  23: rustc_codegen_llvm::base::compile_codegen_unit::module_codegen\r\n  24: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  25: rustc_codegen_llvm::base::compile_codegen_unit\r\n  26: rustc_codegen_ssa::base::codegen_crate\r\n  27: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate\r\n  28: rustc_interface::passes::start_codegen\r\n  29: rustc_middle::ty::context::tls::enter_global\r\n  30: rustc_interface::queries::Queries::ongoing_codegen\r\n  31: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  32: rustc_span::with_source_map\r\n  33: rustc_interface::interface::create_compiler_and_run\r\n  34: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.47.0-nightly (f9a308636 2020-07-20) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C codegen-units=1 -C debuginfo=2 --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nerror: aborting due to previous error\r\n\r\nerror: could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n</p>\r\n</details>\r\n\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"lcnr\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74629/timeline", "performed_via_github_app": null, "state_reason": null}