{"url": "https://api.github.com/repos/rust-lang/rust/issues/66481", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66481/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66481/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66481/events", "html_url": "https://github.com/rust-lang/rust/issues/66481", "id": 523905643, "node_id": "MDU6SXNzdWU1MjM5MDU2NDM=", "number": 66481, "title": "Context and Waker might be accidentally `Sync`", "user": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2019-11-16T22:45:32Z", "updated_at": "2023-01-12T14:22:36Z", "closed_at": "2023-01-03T04:53:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "One issue that came up in the discussion [here](https://www.reddit.com/r/rust/comments/dx0vx5/thoughts_on_stdfuture_unnecessary_synchronization/f7nbiqy/?context=3) is that the `Context` type implements [Send + Sync](https://doc.rust-lang.org/beta/std/task/struct.Context.html#impl-Sync).\r\n\r\nThis might have been introduced accidentally. `Send` probably does not matter at all, given that users will only observe a `Context`  by reference. However `Sync` has the impliciation that we will not be able to add non thread-safe methods to `Context` - e.g. in order to optimize thread-local wake-ups again.\r\n\r\nIt might be interesting to see whether `Send` and `Sync` support could be removed from the type. Unfortunately that is however a breaking change - even though it is not likely that any code currently uses `Context` out of the direct `poll()` path.\r\n\r\nIn a similar fashion it had been observed in the implementation of #65875 ([comment](https://github.com/rust-lang/rust/pull/65875#discussion_r339360590)) that the `Waker` type is also `Send` and `Sync`. While it had been expected for `Send`- given that `Waker`s  are used to wake-up tasks from different threads, it might not have been for `Sync`. One downside of `Waker`s  being `Sync` is that it prevents optimizations. E.g. in linked ticket the original implementation contained an optimization that while a `Waker` was not `clone`d (and thereby equipped with a different vtable) it could wake-up the local eventloop again by just setting a non-synchronized boolean flag in the current thread. However given that `&Waker` could be transferred to another thread, and `.wake_by_ref()` called from there even within the `.poll()` context - this optmization is invalid.\r\n\r\nHere it would also be interesting if the `Sync` requirement could be removed. I expect the amount of real-world usages to be in the same ballpark as sending `&Context` across threads - hopefully 0.\r\nBut it's again a breaking change \ud83d\ude22 \r\n\r\ncc @Ralith , @Nemo157 , @cramertj , @withoutboats \r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66481/reactions", "total_count": 17, "+1": 17, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66481/timeline", "performed_via_github_app": null, "state_reason": "completed"}