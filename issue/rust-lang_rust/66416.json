{"url": "https://api.github.com/repos/rust-lang/rust/issues/66416", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66416/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66416/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66416/events", "html_url": "https://github.com/rust-lang/rust/issues/66416", "id": 522962509, "node_id": "MDU6SXNzdWU1MjI5NjI1MDk=", "number": 66416, "title": "Demangle C++ functions in backtraces", "user": {"login": "leo60228", "id": 8355305, "node_id": "MDQ6VXNlcjgzNTUzMDU=", "avatar_url": "https://avatars.githubusercontent.com/u/8355305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leo60228", "html_url": "https://github.com/leo60228", "followers_url": "https://api.github.com/users/leo60228/followers", "following_url": "https://api.github.com/users/leo60228/following{/other_user}", "gists_url": "https://api.github.com/users/leo60228/gists{/gist_id}", "starred_url": "https://api.github.com/users/leo60228/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leo60228/subscriptions", "organizations_url": "https://api.github.com/users/leo60228/orgs", "repos_url": "https://api.github.com/users/leo60228/repos", "events_url": "https://api.github.com/users/leo60228/events{/privacy}", "received_events_url": "https://api.github.com/users/leo60228/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-14T16:18:04Z", "updated_at": "2019-11-14T16:26:55Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm modding a C++ game (which contains debug symbols, thanks flibitijibibo!) using Rust. If I panic in a Rust function from my mod, this is what the backtrace looks like:\r\n```\r\nthread '<unnamed>' panicked at 'panic test', src/lib.rs:37:5\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:77                                                                                   \r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:61\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1030\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1412\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:65\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:50\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:188\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:205\r\n  10: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:464\r\n  11: std::panicking::begin_panic\r\n             at /rustc/bc0e288ad02ef362b5a6c42aaf61f2901c9b46db/src/libstd/panicking.rs:400\r\n  12: vloader::hook_physfs_init\r\n             at src/lib.rs:37\r\n  13: core::ops::function::Fn::call\r\n             at /rustc/bc0e288ad02ef362b5a6c42aaf61f2901c9b46db/src/libcore/ops/function.rs:69\r\n  14: <alloc::boxed::Box<F> as core::ops::function::Fn<A>>::call\r\n             at /rustc/bc0e288ad02ef362b5a6c42aaf61f2901c9b46db/src/liballoc/boxed.rs:956\r\n  15: vloader::PHYSFS_INIT::__ffi_detour\r\n             at /home/leo60228/vloader/<::detour::macros::static_detour macros>:31\r\n  16: _Z15FILESYSTEM_initPc\r\n             at /home/flibitijibibo/Programming/cppProjects/Contracts/VVVVVV/Src/FileSystemUtils.cpp:39\r\n  17: main\r\n             at /home/flibitijibibo/Programming/cppProjects/Contracts/VVVVVV/Src/main.cpp:39\r\n  18: __libc_start_main\r\n  19: <unknown>\r\n```\r\nThis backtrace is almost perfect, except for the ugly mangled C++ symbol. Now that #65646 allows unwinding through C++ code, it would be nice if Rust demangled them. `backtrace-rs` already supports this behind a feature, and I tried enabling it through xargo, but it didn't work. I think this might be because of the way std prints backtraces.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66416/timeline", "performed_via_github_app": null, "state_reason": null}