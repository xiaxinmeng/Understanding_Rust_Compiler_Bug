{"url": "https://api.github.com/repos/rust-lang/rust/issues/74014", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74014/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74014/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74014/events", "html_url": "https://github.com/rust-lang/rust/issues/74014", "id": 650747205, "node_id": "MDU6SXNzdWU2NTA3NDcyMDU=", "number": 74014, "title": "Missed inference with array of nonzero divisors", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-03T19:53:26Z", "updated_at": "2021-04-21T10:14:41Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This is an ER about a possible currently missed inference. I am not sure if here I am asking too much from LLVM. This code shows three different implementations of a simple function (that's reduced from other code):\r\n\r\n```rust\r\n#![feature(core_intrinsics)]\r\nuse std::intrinsics::assume;\r\n\r\npub fn foo1(x: u32, i: usize) -> Option<u32> {\r\n    const PS: [u32; 6] = [2, 3, 5, 7, 11, 13];\r\n    if i < PS.len() {\r\n        let psi = PS[i];\r\n        Some(x % psi)\r\n    } else {\r\n        None\r\n    }\r\n}\r\n\r\npub fn foo2(x: u32, i: usize) -> Option<u32> {\r\n    const PS: [u32; 6] = [2, 3, 5, 7, 11, 13];\r\n    if i < PS.len() {\r\n        let psi = PS[i];\r\n        unsafe { assume(psi != 0); }\r\n        Some(x % psi)\r\n    } else {\r\n        None\r\n    }\r\n}\r\n\r\npub fn foo3(x: u32, i: usize) -> Option<u32> {\r\n    match i {\r\n        0 => Some(x % 2),\r\n        1 => Some(x % 3),\r\n        2 => Some(x % 5),\r\n        3 => Some(x % 7),\r\n        4 => Some(x % 11),\r\n        5 => Some(x % 13),\r\n        _ => None,\r\n    }\r\n}\r\n```\r\nGives (rustc 1.46.0-nightly 3503f565e 2020-07-02):\r\n```asm\r\nfoo1:\r\n        push    rax\r\n        cmp     rsi, 5\r\n        ja      .LBB0_1\r\n        lea     rax, [rip + .L__unnamed_1]\r\n        mov     ecx, dword ptr [rax + 4*rsi]\r\n        test    ecx, ecx\r\n        je      .LBB0_5\r\n        mov     eax, edi\r\n        xor     edx, edx\r\n        div     ecx\r\n        mov     eax, 1\r\n        pop     rcx\r\n        ret\r\n.LBB0_1:\r\n        xor     eax, eax\r\n        pop     rcx\r\n        ret\r\n.LBB0_5:\r\n        lea     rdi, [rip + str.0]\r\n        lea     rdx, [rip + .L__unnamed_2]\r\n        mov     esi, 57\r\n        call    qword ptr [rip + core::panicking::panic@GOTPCREL]\r\n        ud2\r\n\r\nfoo2:\r\n        cmp     rsi, 5\r\n        ja      .LBB1_1\r\n        lea     rcx, [rip + .L__unnamed_1]\r\n        mov     eax, edi\r\n        xor     edx, edx\r\n        div     dword ptr [rcx + 4*rsi]\r\n        mov     eax, 1\r\n        ret\r\n.LBB1_1:\r\n        xor     eax, eax\r\n        ret\r\n\r\nfoo3:\r\n        cmp     rsi, 5\r\n        ja      .LBB2_1\r\n        lea     rax, [rip + .LJTI2_0]\r\n        movsxd  rcx, dword ptr [rax + 4*rsi]\r\n        add     rcx, rax\r\n        jmp     rcx\r\n.LBB2_3:\r\n        and     edi, 1\r\n        mov     eax, 1\r\n        mov     edx, edi\r\n        ret\r\n.LBB2_1:\r\n        xor     eax, eax\r\n        mov     edx, edi\r\n        ret\r\n.LBB2_4:\r\n        mov     eax, edi\r\n        mov     ecx, 2863311531\r\n        imul    rcx, rax\r\n        shr     rcx, 33\r\n        lea     eax, [rcx + 2*rcx]\r\n        sub     edi, eax\r\n        mov     eax, 1\r\n        mov     edx, edi\r\n        ret\r\n.LBB2_5:\r\n        mov     eax, edi\r\n        mov     ecx, 3435973837\r\n        imul    rcx, rax\r\n        shr     rcx, 34\r\n        lea     eax, [rcx + 4*rcx]\r\n        sub     edi, eax\r\n        mov     eax, 1\r\n        mov     edx, edi\r\n        ret\r\n.LBB2_6:\r\n        mov     eax, edi\r\n        imul    rax, rax, 613566757\r\n        shr     rax, 32\r\n        mov     ecx, edi\r\n        sub     ecx, eax\r\n        shr     ecx\r\n        add     ecx, eax\r\n        shr     ecx, 2\r\n        lea     eax, [8*rcx]\r\n        sub     ecx, eax\r\n        add     ecx, edi\r\n        mov     eax, 1\r\n        mov     edx, ecx\r\n        ret\r\n.LBB2_7:\r\n        mov     eax, edi\r\n        mov     ecx, 3123612579\r\n        imul    rcx, rax\r\n        shr     rcx, 35\r\n        lea     eax, [rcx + 4*rcx]\r\n        lea     eax, [rcx + 2*rax]\r\n        sub     edi, eax\r\n        mov     eax, 1\r\n        mov     edx, edi\r\n        ret\r\n.LBB2_8:\r\n        mov     eax, edi\r\n        imul    rax, rax, 1321528399\r\n        shr     rax, 34\r\n        lea     ecx, [rax + 2*rax]\r\n        lea     eax, [rax + 4*rcx]\r\n        sub     edi, eax\r\n        mov     eax, 1\r\n        mov     edx, edi\r\n        ret\r\n.LJTI2_0:\r\n        .long   .LBB2_3-.LJTI2_0\r\n        .long   .LBB2_4-.LJTI2_0\r\n        .long   .LBB2_5-.LJTI2_0\r\n        .long   .LBB2_6-.LJTI2_0\r\n        .long   .LBB2_7-.LJTI2_0\r\n        .long   .LBB2_8-.LJTI2_0\r\n```\r\nThe PS array contains only nonzero values, so \"attempt to calculate the remainder with a divisor of zero\" can't happen. Is this worth submitting upstream?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74014/timeline", "performed_via_github_app": null, "state_reason": null}