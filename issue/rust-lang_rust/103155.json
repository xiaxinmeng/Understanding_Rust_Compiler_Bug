{"url": "https://api.github.com/repos/rust-lang/rust/issues/103155", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103155/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103155/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103155/events", "html_url": "https://github.com/rust-lang/rust/issues/103155", "id": 1411954967, "node_id": "I_kwDOAAsO6M5UKLkX", "number": 103155, "title": "Suboptimal diagnostics when trying to create a trait object for a trait with GATs", "user": {"login": "PatchMixolydic", "id": 8634700, "node_id": "MDQ6VXNlcjg2MzQ3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8634700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PatchMixolydic", "html_url": "https://github.com/PatchMixolydic", "followers_url": "https://api.github.com/users/PatchMixolydic/followers", "following_url": "https://api.github.com/users/PatchMixolydic/following{/other_user}", "gists_url": "https://api.github.com/users/PatchMixolydic/gists{/gist_id}", "starred_url": "https://api.github.com/users/PatchMixolydic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PatchMixolydic/subscriptions", "organizations_url": "https://api.github.com/users/PatchMixolydic/orgs", "repos_url": "https://api.github.com/users/PatchMixolydic/repos", "events_url": "https://api.github.com/users/PatchMixolydic/events{/privacy}", "received_events_url": "https://api.github.com/users/PatchMixolydic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 1839565265, "node_id": "MDU6TGFiZWwxODM5NTY1MjY1", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-terse", "name": "D-terse", "color": "c9f7a3", "default": false, "description": "A diagnostic that doesn't give enough information about the problem at hand"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-10-17T17:34:19Z", "updated_at": "2023-01-05T18:51:01Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code ([playground 1](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=283ceedf88927d7f7847fdccdb64d107)):\r\n\r\n```rust\r\ntrait Foo {\r\n    type Bar<T>;\r\n}\r\n\r\nfn bar(x: &dyn Foo) {}\r\n```\r\n\r\nThe current output is:\r\n```\r\nerror[E0191]: the value of the associated type `Bar` (from trait `Foo`) must be specified\r\n --> src/lib.rs:5:16\r\n  |\r\n2 |     type Bar<T>;\r\n  |     ----------- `Bar` defined here\r\n...\r\n5 | fn bar(x: &dyn Foo) {}\r\n  |                ^^^ help: specify the associated type: `Foo<Bar = Type>`\r\n```\r\n\r\nFollowing this suggestion ([playground 2](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=382ec29650ce0920540563ad24bfdfe8))...\r\n```rust\r\ntrait Foo {\r\n    type Bar<T>;\r\n}\r\n\r\nfn bar(x: &dyn Foo<Bar = i32>) {}\r\n```\r\n\r\n... produces another diagnostic:\r\n```\r\nerror[E0107]: missing generics for associated type `Foo::Bar`\r\n --> src/lib.rs:5:20\r\n  |\r\n5 | fn bar(x: &dyn Foo<Bar = i32>) {}\r\n  |                    ^^^ expected 1 generic argument\r\n  |\r\nnote: associated type defined here, with 1 generic parameter: `T`\r\n --> src/lib.rs:2:10\r\n  |\r\n2 |     type Bar<T>;\r\n  |          ^^^ -\r\nhelp: add missing generic argument\r\n  |\r\n5 | fn bar(x: &dyn Foo<Bar<T> = i32>) {}\r\n  |                    ~~~~~~\r\n```\r\n\r\nFinally, specifying the generic argument for `Bar` ([playground 3](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=5f4643be86020d18e4cc9ca761b03821))...\r\n```rust\r\ntrait Foo {\r\n    type Bar<T>;\r\n}\r\n\r\nfn bar(x: &dyn Foo<Bar<i32> = i32>) {}\r\n```\r\n\r\n... reveals that our struggle was all for naught:\r\n```\r\nerror[E0038]: the trait `Foo` cannot be made into an object\r\n --> src/lib.rs:5:12\r\n  |\r\n5 | fn bar(x: &dyn Foo<Bar<i32> = i32>) {}\r\n  |            ^^^^^^^^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\r\n  |\r\nnote: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\r\n --> src/lib.rs:2:10\r\n  |\r\n1 | trait Foo {\r\n  |       --- this trait cannot be made into an object...\r\n2 |     type Bar<T>;\r\n  |          ^^^ ...because it contains the generic associated type `Bar`\r\n  = help: consider moving `Bar` to another trait\r\n```\r\n\r\nIdeally, the first snippet should produce an object safety error right away:\r\n```\r\nerror[E0038]: the trait `Foo` cannot be made into an object\r\n --> src/lib.rs:5:12\r\n  |\r\n5 | fn bar(x: &dyn Foo) {}\r\n  |            ^^^^^^^ `Foo` cannot be made into an object\r\n  |\r\nnote: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\r\n --> src/lib.rs:2:10\r\n  |\r\n1 | trait Foo {\r\n  |       --- this trait cannot be made into an object...\r\n2 |     type Bar<T>;\r\n  |          ^^^ ...because it contains the generic associated type `Bar`\r\n  = help: consider moving `Bar` to another trait\r\n```\r\n\r\nIn case `#![feature(generic_associated_types_extended)]` is enabled, E0191 should still be emitted, but the suggestion should include the generic argument for `Bar`:\r\n```\r\nerror[E0191]: the value of the associated type `Bar` (from trait `Foo`) must be specified\r\n --> src/lib.rs:5:16\r\n  |\r\n2 |     type Bar<T>;\r\n  |     ----------- `Bar` defined here\r\n...\r\n5 | fn bar(x: &dyn Foo) {}\r\n  |                ^^^ help: specify the associated type: `Foo<Bar<T> = Type>`\r\n```\r\n\r\n@rustbot modify labels +D-terse +F-generic_associated_types", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103155/timeline", "performed_via_github_app": null, "state_reason": null}