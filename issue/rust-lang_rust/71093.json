{"url": "https://api.github.com/repos/rust-lang/rust/issues/71093", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71093/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71093/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71093/events", "html_url": "https://github.com/rust-lang/rust/issues/71093", "id": 598888285, "node_id": "MDU6SXNzdWU1OTg4ODgyODU=", "number": 71093, "title": "[codegen] unnecessary panicking branch in `foo().await` (vs equivalent `FutureImpl.await`)", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 679846574, "node_id": "MDU6TGFiZWw2Nzk4NDY1NzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-generators", "name": "A-generators", "color": "f7e101", "default": false, "description": "Area: Generators"}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-13T13:26:40Z", "updated_at": "2020-04-21T23:39:50Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I compiled this `no_std` code with (LTO / `-Oz` / `-C panic=abort`) optimizations (full repro instructions at the bottom):\r\n\r\n```rust\r\n#![no_std]\r\n#![no_main]\r\n\r\n#[no_mangle]\r\nfn main() -> ! {\r\n    let mut f = async {\r\n        loop {\r\n            // uncomment only ONE of these statements\r\n            // Foo.await; // NO panicking branch\r\n            foo().await; // HAS panicking branch (though it should be equivalent to `Foo.await`?)\r\n            // bar().await; // NO panicking branch (because it's implicitly divergent?)\r\n            // baz().await; // HAS panicking branch (that it inherit from `foo().await`?)\r\n        }\r\n    };\r\n\r\n    let waker = waker();\r\n    let mut cx = Context::from_waker(&waker);\r\n    loop {\r\n        unsafe {\r\n            let _ = Pin::new_unchecked(&mut f).poll(&mut cx);\r\n        }\r\n    }\r\n}\r\n\r\nstruct Foo;\r\n\r\nimpl Future for Foo {\r\n    type Output = ();\r\n    fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<()> {\r\n        asm::nop();\r\n        Poll::Ready(())\r\n    }\r\n}\r\n\r\nasync fn foo() {\r\n    asm::nop();\r\n}\r\n\r\nasync fn bar() {\r\n    asm::nop();\r\n    loop {}\r\n}\r\n\r\nasync fn baz() {\r\n    foo().await;\r\n    loop {}\r\n}\r\n```\r\n\r\nI got machine code that includes a panicking branch:\r\n\r\n``` asm\r\n00000400 <main>:\r\n 400:   push    {r5, r6, r7, lr}\r\n 402:   add     r7, sp, #8\r\n 404:   movs    r0, #0\r\n 406:   strh.w  r0, [r7, #-2]\r\n 40a:   subs    r0, r7, #2\r\n 40c:   bl      412 <app::main::{{closure}}>\r\n 410:   udf     #254    ; 0xfe\r\n\r\n00000412 <app::main::{{closure}}>:\r\n 412:   push    {r7, lr}\r\n 414:   mov     r7, sp\r\n 416:   mov     r4, r0\r\n 418:   ldrb    r0, [r0, #0]\r\n 41a:   cbz     r0, 426 <app::main::{{closure}}+0x14>\r\n 41c:   ldrb    r0, [r4, #1]\r\n 41e:   cbz     r0, 42a <app::main::{{closure}}+0x18>\r\n 420:   bl      434 <core::panicking::panic>\r\n 424:   udf     #254    ; 0xfe\r\n 426:   movs    r0, #0\r\n 428:   strb    r0, [r4, #1]\r\n 42a:   bl      48e <__nop>\r\n 42e:   movs    r0, #1\r\n 430:   strb    r0, [r4, #1]\r\n 432:   b.n     426 <app::main::{{closure}}+0x14>\r\n\r\n00000434 <core::panicking::panic>:\r\n 434:   push    {r7, lr}\r\n 436:   mov     r7, sp\r\n 438:   bl      43e <core::panicking::panic_fmt>\r\n 43c:   udf     #254    ; 0xfe\r\n\r\n0000043e <core::panicking::panic_fmt>:\r\n 43e:   push    {r7, lr}\r\n 440:   mov     r7, sp\r\n 442:   bl      48c <rust_begin_unwind>\r\n 446:   udf     #254    ; 0xfe\r\n```\r\n\r\nI expected to see no panicking branches in the output. If I comment out `foo().await` and uncomment `Foo.await` (which should be semantically equivalent) then I get the expected output:\r\n\r\n``` asm\r\n00000400 <main>:\r\n 400:   push    {r7, lr}\r\n 402:   mov     r7, sp\r\n 404:   bl      40a <app::main::{{closure}}>\r\n 408:   udf     #254    ; 0xfe\r\n\r\n0000040a <app::main::{{closure}}>:\r\n 40a:   push    {r7, lr}\r\n 40c:   mov     r7, sp\r\n 40e:   bl      458 <__nop>\r\n 412:   b.n     40e <app::main::{{closure}}+0x4>\r\n```\r\n\r\nInterestingly, `bar().await` contains no panicking branch (because it's divergent?), but `baz().await` does (because it inherits it from `foo().await`?).\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.44.0-nightly (94d346360 2020-04-09)\r\n```\r\n\r\n<details><summary>Steps to reproduce</summary>\r\n<p>\r\n\r\n``` console\r\n$ git clone https://github.com/rust-embedded/cortex-m-quickstart\r\n\r\n$ cd cortex-m-quickstart\r\n$ git reset --hard 1a60c1d94489cec3008166a803bdcf8ac306b98f\r\n$ $EDITOR Cargo.toml && cat Cargo.toml\r\n```\r\n\r\n``` toml\r\n[package]\r\nedition = \"2018\"\r\nname = \"app\"\r\nversion = \"0.0.0\"\r\n\r\n[dependencies]\r\ncortex-m = \"0.6.0\"\r\ncortex-m-rt = \"0.6.10\"\r\ncortex-m-semihosting = \"0.3.3\"\r\npanic-halt = \"0.2.0\"\r\n\r\n[profile.dev]\r\ncodegen-units = 1\r\ndebug = 1\r\ndebug-assertions = false\r\nincremental = false\r\nlto = \"fat\"\r\nopt-level = 'z'\r\noverflow-checks = false\r\n```\r\n\r\n``` console\r\n$ $EDITOR src/main.rs && cat src/main.rs\r\n```\r\n\r\n``` rust\r\n#![no_std]\r\n#![no_main]\r\n\r\nuse core::{\r\n    future::Future,\r\n    pin::Pin,\r\n    task::{Context, Poll, RawWaker, RawWakerVTable, Waker},\r\n};\r\n\r\nuse cortex_m_rt::entry;\r\nuse cortex_m::asm;\r\nuse panic_halt as _;\r\n\r\n#[no_mangle]\r\nfn main() -> ! {\r\n    let mut f = async {\r\n        loop {\r\n            // uncomment only ONE of these statements\r\n            // Foo.await; // NO panicking branch\r\n            foo().await; // HAS panicking branch\r\n            // bar().await; // NO panicking branch\r\n            // baz().await; // HAS panicking branch\r\n        }\r\n    };\r\n\r\n    let waker = waker();\r\n    let mut cx = Context::from_waker(&waker);\r\n    loop {\r\n        unsafe {\r\n            let _ = Pin::new_unchecked(&mut f).poll(&mut cx);\r\n        }\r\n    }\r\n}\r\n\r\nstruct Foo;\r\n\r\nimpl Future for Foo {\r\n    type Output = ();\r\n    fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<()> {\r\n        asm::nop();\r\n        Poll::Ready(())\r\n    }\r\n}\r\n\r\nasync fn foo() {\r\n    asm::nop();\r\n}\r\n\r\nasync fn bar() {\r\n    asm::nop();\r\n    loop {}\r\n}\r\n\r\nasync fn baz() {\r\n    foo().await;\r\n    loop {}\r\n}\r\n\r\nfn waker() -> Waker {\r\n    unsafe fn clone(_: *const ()) -> RawWaker {\r\n        RawWaker::new(&(), &VTABLE)\r\n    }\r\n    unsafe fn wake(_: *const ()) {}\r\n    unsafe fn wake_by_ref(_: *const ()) {}\r\n    unsafe fn drop(_: *const ()) {}\r\n    static VTABLE: RawWakerVTable = RawWakerVTable::new(clone, wake, wake_by_ref, drop);\r\n\r\n    unsafe { Waker::from_raw(clone(&())) }\r\n}\r\n```\r\n\r\n``` console\r\n$ # target = thumbv7m-none-eabi (see .cargo/config)\r\n$ cargo build\r\n$ arm-none-eabi-objdump -Cd target/thumbv7m-none-eabi/debug/app\r\n```\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71093/timeline", "performed_via_github_app": null, "state_reason": null}