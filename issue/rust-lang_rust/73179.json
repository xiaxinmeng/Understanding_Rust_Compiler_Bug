{"url": "https://api.github.com/repos/rust-lang/rust/issues/73179", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73179/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73179/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73179/events", "html_url": "https://github.com/rust-lang/rust/issues/73179", "id": 635726608, "node_id": "MDU6SXNzdWU2MzU3MjY2MDg=", "number": 73179, "title": "Tracking Issue for methods to go from nul-terminated Vec<u8> to CString", "user": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}, {"id": 2240342704, "node_id": "MDU6TGFiZWwyMjQwMzQyNzA0", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Small", "name": "Libs-Small", "color": "d4c5f9", "default": false, "description": "Libs issues that are considered \"small\" or self-contained"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-06-09T20:14:18Z", "updated_at": "2021-10-21T15:26:14Z", "closed_at": "2021-10-21T10:59:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue! \ud83d\udcdc Tracking issues are for tracking a\r\nfeature from implementation to stabilisation. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nThe feature gate for the issue is `#![feature(cstring_from_vec_with_nul)]`.\r\n\r\nThis adds the following method to [`CString`](https://doc.rust-lang.org/stable/std/ffi/struct.CString.html):\r\n\r\n```rust\r\npub unsafe fn from_vec_with_nul_unchecked(v: Vec<u8>) -> Self { /* ... */ }\r\npub fn from_vec_with_nul(v: Vec<u8>) -> Result<Self, FromVecWithNulError> { /* ... */ }\r\n```\r\n\r\n`FromVecWithNulError` is a new error type, following the naming pattern of `FromBytesWithNulError` already existing for `CStr::new`.\r\n\r\nThis type, defined as:\r\n\r\n```rust\r\n#[derive(Clone, PartialEq, Eq, Debug)]\r\n#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\r\npub struct FromVecWithNulError {\r\n    error_kind: FromBytesWithNulErrorKind,\r\n    bytes: Vec<u8>,\r\n}\r\n```\r\n\r\nIt is inspired from the `FromUtf8Error` type (having `as_bytes` and `into_bytes` method) that allows recuperating the input when conversion failed.\r\n\r\nThe `fmt:Display` implementation for the type uses the same text as the `FromBytesWithNulError`, without using the deprecated `description` method of the `Error` trait.\r\n\r\n```rust\r\n#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\r\nimpl fmt::Display for FromVecWithNulError {\r\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\r\n        match self.error_kind {\r\n            FromBytesWithNulErrorKind::InteriorNul(pos) => {\r\n                write!(f, \"data provided contains an interior nul byte at pos {}\", pos)\r\n            }\r\n            FromBytesWithNulErrorKind::NotNulTerminated => {\r\n                write!(f, \"data provided is not nul terminated\")\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\n- Is this feature needed ? It was asked for issue #73100 and [`CStr::from_bytes_with_nul`](https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#method.from_bytes_with_nul) (and its `unchecked` version) seems to indicates that having an owned version would be logical.\r\n- Names ? I just changed `bytes` to `vec` in the names (`CStr::from_bytes_with_nul` -> `CString::from_vec_with_nul` and `CStr::from_bytes_with_nul_unchecked` -> `CString::from_vec_with_nul_unchecked`).\r\n- Input type for the safe version: I used `Vec<u8>` but I see `CString::new` uses `Into<Vec<u8>>`, should I use that too ?\r\n\r\n### Implementation history\r\n\r\nPR #73139 implements this at the moment, in a `unstable` form, with documentation and doc tests.\n\nPR #89292 by @CleanCut proposes to stabilize this \ud83e\udd73 \r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\nEdit: this being the first time I write a tracking issue, please do not hesitate to tell me if there is something to fix.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73179/reactions", "total_count": 4, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 4, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73179/timeline", "performed_via_github_app": null, "state_reason": "completed"}