{"url": "https://api.github.com/repos/rust-lang/rust/issues/70239", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70239/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70239/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70239/events", "html_url": "https://github.com/rust-lang/rust/issues/70239", "id": 585556698, "node_id": "MDU6SXNzdWU1ODU1NTY2OTg=", "number": 70239, "title": "Place &str in specific linker sections", "user": {"login": "korken89", "id": 913109, "node_id": "MDQ6VXNlcjkxMzEwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/913109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/korken89", "html_url": "https://github.com/korken89", "followers_url": "https://api.github.com/users/korken89/followers", "following_url": "https://api.github.com/users/korken89/following{/other_user}", "gists_url": "https://api.github.com/users/korken89/gists{/gist_id}", "starred_url": "https://api.github.com/users/korken89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/korken89/subscriptions", "organizations_url": "https://api.github.com/users/korken89/orgs", "repos_url": "https://api.github.com/users/korken89/repos", "events_url": "https://api.github.com/users/korken89/events{/privacy}", "received_events_url": "https://api.github.com/users/korken89/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-21T18:47:46Z", "updated_at": "2023-01-26T22:20:55Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "In the usecase I am working on I want to store the string from `core::any::type_name` in a specific linker section to create an instrumentation tool for Embedded Rust micro controllers.\r\nIf the string is placed in `.rodata` it does not affect the tool, but when having only a few kB of memory storing these strings in the actual micro controller is a huge price to pay.\r\nRather only the generated ELF file, which the host can read, should have this info (i.e. in an `INFO` marked section).\r\n\r\nAs it is today one can place variables in specific sections as:\r\n\r\n```rust\r\n#[link_section = \".my_section\"]\r\nstatic S: u32 = 2; \r\n```\r\n\r\nHowever, this is not possible for `&str`, the following:\r\n\r\n```rust\r\n#[link_section = \".my_section\"]\r\nstatic S: &str = \"test\"; \r\n```\r\n\r\nWill place the string itself in `.rodata`, while placing the pointer and length in the section `.my_section`. \r\nThe recommended solution is to place the string in an array using something similar to the following:\r\n\r\n```rust\r\nunion Transmute<T: Copy, U: Copy> {\r\n    from: T,\r\n    to: U,\r\n}\r\n\r\nconst TN: &'static str = \"my string\";\r\n\r\n#[link_section = \".my_section\"]\r\nstatic S: [u8; TN.as_bytes().len()] = unsafe {\r\n    *Transmute::<*const [u8; TN.as_bytes().len()], &[u8; TN.as_bytes().len()]> {\r\n        from: TN.as_ptr() as *const [u8; TN.as_bytes().len()],\r\n    }\r\n    .to\r\n};\r\n```\r\n\r\nHowever this does not work on strings given from (non-const-fn) functions such as `core::any::type_name`, and the function take no arguments so the string must be coming from a literal somewhere.\r\nIs there a way to make the strings from `core::any::type_name` (or similar functions) be placed in a specific linker section?\r\nAs the string is being placed in `.rodata` something is controlling this placement, I simply wish to change this.\r\n\r\nThe method stated above works in nightly, as one can use the `#![feature(const_type_name)]` feature to get the string as a const-fn. However I am unable to reproduce this in any way using stable rust.\r\nExample playground of the nightly version: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=d5f5c7fbe90194640bd1918cc068c2db", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70239/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70239/timeline", "performed_via_github_app": null, "state_reason": null}