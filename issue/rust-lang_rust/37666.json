{"url": "https://api.github.com/repos/rust-lang/rust/issues/37666", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37666/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37666/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37666/events", "html_url": "https://github.com/rust-lang/rust/issues/37666", "id": 188287294, "node_id": "MDU6SXNzdWUxODgyODcyOTQ=", "number": 37666, "title": "overly conserative region edges invoking higher-ranked closure", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-09T16:17:29Z", "updated_at": "2023-03-20T11:21:54Z", "closed_at": "2023-03-20T11:21:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This snippet [fails to compile](https://is.gd/2zpos4):\r\n\r\n```rust\r\nstruct MyType<'a, 'tcx: 'a> {\r\n    x: &'a &'tcx ()\r\n}\r\n\r\nimpl<'a, 'tcx> MyType<'a, 'tcx> {\r\n    fn with<F>(&mut self, f: F)\r\n        where F: for<'b> FnOnce(&mut MyType<'b, 'tcx>)\r\n    {\r\n        f(self);\r\n    }\r\n    fn with2<F>(&mut self, f: F)\r\n        where F: for<'b> FnOnce(&mut MyType<'b, 'tcx>)\r\n    {\r\n        self.with(|this| f(this))\r\n        // self.with(|this| this.with(f)) <-- this works, if you uncomment it, see below\r\n    }\r\n}\r\n\r\nfn main() { }\r\n```\r\n\r\nwith the error:\r\n\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\r\n  --> <anon>:14:26\r\n   |\r\n14 |         self.with(|this| f(this))\r\n   |                          ^^^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the lifetime 'tcx as defined on the block at 13:4...\r\n  --> <anon>:13:5\r\n   |\r\n13 |     {\r\n   |     ^\r\nnote: ...so that the declared lifetime parameter bounds are satisfied\r\n  --> <anon>:14:26\r\n   |\r\n14 |         self.with(|this| f(this))\r\n   |                          ^^^^^^^\r\nnote: but, the lifetime must be valid for the lifetime 'b as defined on the block at 14:25...\r\n  --> <anon>:14:26\r\n   |\r\n14 |         self.with(|this| f(this))\r\n   |                          ^^^^^^^\r\nnote: ...so that expression is assignable (expected &mut MyType<'_, 'tcx>, found &mut MyType<'b, '_>)\r\n  --> <anon>:14:28\r\n   |\r\n14 |         self.with(|this| f(this))\r\n   |                            ^^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nI believe it should succeed, but somehow the implied bound that `'tcx: 'b` is failing to get added in the closure. I haven't investigated much to see why this is the case.\r\n\r\nThere is a workaround. If you change `self.with(|this| f(this))` to `self.with(|this| this.with(f))`, it works, because the implied bounds work out for you then.", "closed_by": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37666/timeline", "performed_via_github_app": null, "state_reason": "completed"}