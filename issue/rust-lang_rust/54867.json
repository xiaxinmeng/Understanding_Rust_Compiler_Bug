{"url": "https://api.github.com/repos/rust-lang/rust/issues/54867", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54867/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54867/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54867/events", "html_url": "https://github.com/rust-lang/rust/issues/54867", "id": 367457698, "node_id": "MDU6SXNzdWUzNjc0NTc2OTg=", "number": 54867, "title": "Fast algorithm for u128 (and i128) divided by small constant", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2018-10-06T13:35:46Z", "updated_at": "2023-04-08T14:47:41Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This is an enhancement request. While u16, u32 and u64 numbers get divided by a small constant divisor using a fast algorithm, the same isn't true for u128 numbers:\r\n\r\n```\r\nfn digits_sum0(mut n: u16) -> u16 {\r\n    let mut total = 0;\r\n    while n != 0 {\r\n        total += n % 10;\r\n        n /= 10;\r\n    }\r\n    total\r\n}\r\n\r\nfn digits_sum1(mut n: u32) -> u32 {\r\n    let mut total = 0;\r\n    while n != 0 {\r\n        total += n % 10;\r\n        n /= 10;\r\n    }\r\n    total\r\n}\r\n\r\nfn digits_sum2(mut n: u64) -> u64 {\r\n    let mut total = 0;\r\n    while n != 0 {\r\n        total += n % 10;\r\n        n /= 10;\r\n    }\r\n    total\r\n}\r\n\r\nfn digits_sum3(mut n: u128) -> u128 {\r\n    let mut total = 0;\r\n    while n != 0 {\r\n        total += n % 10;\r\n        n /= 10;\r\n    }\r\n    total\r\n}\r\n```\r\n\r\nGenerate asm (with -O):\r\n\r\n```\r\ndigits_sum0:\r\n        xor     eax, eax\r\n        test    di, di\r\n        je      .LBB0_2\r\n.LBB0_1:\r\n        movzx   ecx, di\r\n        imul    edx, ecx, 52429\r\n        shr     edx, 19\r\n        lea     esi, [rdx + rdx]\r\n        lea     esi, [rsi + 4*rsi]\r\n        sub     edi, esi\r\n        add     eax, edi\r\n        mov     edi, edx\r\n        cmp     ecx, 10\r\n        jae     .LBB0_1\r\n.LBB0_2:\r\n        ret\r\n        \r\n\r\ndigits_sum1:\r\n        xor     eax, eax\r\n        test    edi, edi\r\n        je      .LBB0_3\r\n        mov     r8d, 3435973837\r\n.LBB0_2:\r\n        mov     edx, edi\r\n        imul    rdx, r8\r\n        shr     rdx, 35\r\n        lea     esi, [rdx + rdx]\r\n        lea     esi, [rsi + 4*rsi]\r\n        mov     ecx, edi\r\n        sub     ecx, esi\r\n        add     eax, ecx\r\n        cmp     edi, 10\r\n        mov     edi, edx\r\n        jae     .LBB0_2\r\n.LBB0_3:\r\n        ret\r\n\r\n\r\ndigits_sum2:\r\n        xor     ecx, ecx\r\n        test    rdi, rdi\r\n        je      .LBB1_3\r\n        movabs  r8, -3689348814741910323\r\n.LBB1_2:\r\n        mov     rax, rdi\r\n        mul     r8\r\n        shr     rdx, 3\r\n        lea     rax, [rdx + rdx]\r\n        lea     rax, [rax + 4*rax]\r\n        mov     rsi, rdi\r\n        sub     rsi, rax\r\n        add     rcx, rsi\r\n        cmp     rdi, 10\r\n        mov     rdi, rdx\r\n        jae     .LBB1_2\r\n.LBB1_3:\r\n        mov     rax, rcx\r\n        ret\r\n\r\n\r\ndigits_sum3:\r\n        push    r15\r\n        push    r14\r\n        push    r13\r\n        push    r12\r\n        push    rbx\r\n        mov     rax, rdi\r\n        or      rax, rsi\r\n        je      .LBB2_1\r\n        mov     rbx, rsi\r\n        mov     r15, rdi\r\n        xor     r14d, r14d\r\n        mov     r13d, 10\r\n        xor     r12d, r12d\r\n.LBB2_4:\r\n        mov     edx, 10\r\n        xor     ecx, ecx\r\n        mov     rdi, r15\r\n        mov     rsi, rbx\r\n        call    __udivti3@PLT\r\n        mov     rcx, rax\r\n        mov     rsi, rdx\r\n        mul     r13\r\n        lea     rdi, [rsi + 4*rsi]\r\n        lea     rdx, [rdx + 2*rdi]\r\n        mov     rdi, r15\r\n        sub     rdi, rax\r\n        mov     rax, rbx\r\n        sbb     rax, rdx\r\n        add     r14, rdi\r\n        adc     r12, rax\r\n        cmp     r15, 10\r\n        sbb     rbx, 0\r\n        mov     r15, rcx\r\n        mov     rbx, rsi\r\n        jae     .LBB2_4\r\n        jmp     .LBB2_2\r\n.LBB2_1:\r\n        xor     r14d, r14d\r\n        xor     r12d, r12d\r\n.LBB2_2:\r\n        mov     rax, r14\r\n        mov     rdx, r12\r\n        pop     rbx\r\n        pop     r12\r\n        pop     r13\r\n        pop     r14\r\n        pop     r15\r\n        ret\r\n```\r\n\r\nThe faster algorithm is short enough and it could be added to rustc:\r\n\r\nhttp://ridiculousfish.com/blog/posts/labor-of-division-episode-i.html\r\nhttp://ridiculousfish.com/blog/posts/labor-of-division-episode-ii.html\r\nhttp://libdivide.com/\r\nhttp://ridiculousfish.com/blog/posts/labor-of-division-episode-iii.html\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54867/timeline", "performed_via_github_app": null, "state_reason": null}