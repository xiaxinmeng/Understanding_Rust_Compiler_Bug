{"url": "https://api.github.com/repos/rust-lang/rust/issues/88931", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88931/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88931/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88931/events", "html_url": "https://github.com/rust-lang/rust/issues/88931", "id": 995925982, "node_id": "I_kwDOAAsO6M47XJ_e", "number": 88931, "title": "Add hints to diagnostic messages about type annotation", "user": {"login": "elichai", "id": 2167860, "node_id": "MDQ6VXNlcjIxNjc4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elichai", "html_url": "https://github.com/elichai", "followers_url": "https://api.github.com/users/elichai/followers", "following_url": "https://api.github.com/users/elichai/following{/other_user}", "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}", "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elichai/subscriptions", "organizations_url": "https://api.github.com/users/elichai/orgs", "repos_url": "https://api.github.com/users/elichai/repos", "events_url": "https://api.github.com/users/elichai/events{/privacy}", "received_events_url": "https://api.github.com/users/elichai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-09-14T11:51:25Z", "updated_at": "2021-09-14T11:51:25Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\n```rust\r\nfn example(n: &[u8]) -> [u8; 32] {\r\n    match n.try_into() {\r\n        Ok(n) => {\r\n            println!(\"len: {}\", n.len());\r\n            n\r\n        },\r\n        Err(_) => panic!(\"wops\"),\r\n    }\r\n}\r\n```\r\nhttps://play.rust-lang.org/?gist=e9720a11b44e59362937210443cb7b86\r\nThe current output is:\r\n\r\n```\r\nerror[E0282]: type annotations needed\r\n --> src/lib.rs:6:33\r\n  |\r\n4 |     match n.try_into() {\r\n  |           ------------ this method call resolves to `Result<T, <Self as TryInto<T>>::Error>`\r\n5 |         Ok(n) => {\r\n6 |             println!(\"len: {}\", n.len());\r\n  |                                 ^ cannot infer type\r\n  |\r\n  = note: type must be known at this point\r\nFor more information about this error, try `rustc --explain E0282`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nIdeally it would hint me on how should I annotate, especially here where the answer is not obvious, \r\nit could tell you to either do `match TryInto::<[u8; 32]>::try_into(n) {` or `<[u8; 32]>::try_from(n)`", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88931/timeline", "performed_via_github_app": null, "state_reason": null}