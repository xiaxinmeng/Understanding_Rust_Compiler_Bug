{"url": "https://api.github.com/repos/rust-lang/rust/issues/93265", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93265/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93265/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93265/events", "html_url": "https://github.com/rust-lang/rust/issues/93265", "id": 1112678716, "node_id": "I_kwDOAAsO6M5CUiE8", "number": 93265, "title": "`memcpy` implementation is too large on embedded", "user": {"login": "piegamesde", "id": 14054505, "node_id": "MDQ6VXNlcjE0MDU0NTA1", "avatar_url": "https://avatars.githubusercontent.com/u/14054505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piegamesde", "html_url": "https://github.com/piegamesde", "followers_url": "https://api.github.com/users/piegamesde/followers", "following_url": "https://api.github.com/users/piegamesde/following{/other_user}", "gists_url": "https://api.github.com/users/piegamesde/gists{/gist_id}", "starred_url": "https://api.github.com/users/piegamesde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piegamesde/subscriptions", "organizations_url": "https://api.github.com/users/piegamesde/orgs", "repos_url": "https://api.github.com/users/piegamesde/repos", "events_url": "https://api.github.com/users/piegamesde/events{/privacy}", "received_events_url": "https://api.github.com/users/piegamesde/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2022-01-24T13:53:46Z", "updated_at": "2023-04-16T22:55:11Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I used the following code to copy a memory region around on an embedded `riscv32im-unknown-none-elf` target:\r\n\r\n```rust\r\ncore::ptr::copy_nonoverlapping(0xe0000000 as *const u8, 0x80000000 as *mut u8, 256 * 1024);\r\n```\r\n\r\nModulo some checks, this resolves to a jump with a `memcpy` implementation that looks like this in a disassembler:\r\n\r\n```\r\n700002e8 <memcpy>:\r\n700002e8:       00f00693                li      a3,15\r\n700002ec:       08c6f863                bgeu    a3,a2,7000037c <memcpy+0x94>\r\n700002f0:       40a006b3                neg     a3,a0\r\n700002f4:       0036f813                andi    a6,a3,3\r\n700002f8:       010503b3                add     t2,a0,a6\r\n700002fc:       02080063                beqz    a6,7000031c <memcpy+0x34>\r\n70000300:       00050793                mv      a5,a0\r\n70000304:       00058693                mv      a3,a1\r\n70000308:       00068703                lb      a4,0(a3)\r\n7000030c:       00e78023                sb      a4,0(a5)\r\n70000310:       00178793                addi    a5,a5,1\r\n70000314:       00168693                addi    a3,a3,1\r\n70000318:       fe77e8e3                bltu    a5,t2,70000308 <memcpy+0x20>\r\n7000031c:       010582b3                add     t0,a1,a6\r\n70000320:       41060833                sub     a6,a2,a6\r\n70000324:       ffc87893                andi    a7,a6,-4\r\n70000328:       0032f593                andi    a1,t0,3\r\n7000032c:       011386b3                add     a3,t2,a7\r\n70000330:       04058c63                beqz    a1,70000388 <memcpy+0xa0>\r\n70000334:       ffc2f613                andi    a2,t0,-4\r\n70000338:       00062583                lw      a1,0(a2) # 40000 <_hart_stack_size+0x3f800>\r\n7000033c:       07105463                blez    a7,700003a4 <memcpy+0xbc>\r\n70000340:       00329713                slli    a4,t0,0x3\r\n70000344:       01877313                andi    t1,a4,24\r\n70000348:       40e00733                neg     a4,a4\r\n7000034c:       01877e13                andi    t3,a4,24\r\n70000350:       00460613                addi    a2,a2,4\r\n70000354:       00062703                lw      a4,0(a2)\r\n70000358:       0065d5b3                srl     a1,a1,t1\r\n7000035c:       01c717b3                sll     a5,a4,t3\r\n70000360:       00b7e5b3                or      a1,a5,a1\r\n70000364:       00b3a023                sw      a1,0(t2)\r\n70000368:       00438393                addi    t2,t2,4\r\n7000036c:       00460613                addi    a2,a2,4\r\n70000370:       00070593                mv      a1,a4\r\n70000374:       fed3e0e3                bltu    t2,a3,70000354 <memcpy+0x6c>\r\n70000378:       02c0006f                j       700003a4 <memcpy+0xbc>\r\n7000037c:       00050693                mv      a3,a0\r\n70000380:       02c04863                bgtz    a2,700003b0 <memcpy+0xc8>\r\n70000384:       0440006f                j       700003c8 <memcpy+0xe0>\r\n70000388:       01105e63                blez    a7,700003a4 <memcpy+0xbc>\r\n7000038c:       00028593                mv      a1,t0\r\n70000390:       0005a603                lw      a2,0(a1) # e0000000 <_sstack+0x5ffa0000>\r\n70000394:       00c3a023                sw      a2,0(t2)\r\n70000398:       00438393                addi    t2,t2,4\r\n7000039c:       00458593                addi    a1,a1,4\r\n700003a0:       fed3e8e3                bltu    t2,a3,70000390 <memcpy+0xa8>\r\n700003a4:       011285b3                add     a1,t0,a7\r\n700003a8:       00387613                andi    a2,a6,3\r\n700003ac:       00c05e63                blez    a2,700003c8 <memcpy+0xe0>\r\n700003b0:       00c68633                add     a2,a3,a2\r\n700003b4:       00058703                lb      a4,0(a1)\r\n700003b8:       00e68023                sb      a4,0(a3)\r\n700003bc:       00168693                addi    a3,a3,1\r\n700003c0:       00158593                addi    a1,a1,1\r\n700003c4:       fec6e8e3                bltu    a3,a2,700003b4 <memcpy+0xcc>\r\n700003c8:       00008067                ret\r\n```\r\n\r\nFor something that could just be a loop copying bytes, this is *huge*. I did not have a deep look at it, but as far as I can tell, the main loop at the end is as small as one would expect. Before it though, there is some special casing for small copy operations \u2013 it starts with `li      a3,15; bgeu    a3,a2,<memcpy+0x94>`, so that whole 0x90 bytes long part is skipped if the length is greater than 15.\r\n\r\nSince I am aiming for the smallest possible binary size, I'd consider this a bug. More specifically, I have the following issues:\r\n\r\n- If the copy length is statically known at compile time (like in this case), the special cases that don't apply should be omitted\r\n- If compiling for size (`-Os`), no special casing should be done at all since it increases the binary size but is not necessary.\r\n\r\nI tried reproducing this in godbolt, but I did not manage because of the tool's limitations. As far as I could tell, the `memcpy` comes from an LLVM intrinsic. Therefore, one must build for an embedded target (otherwise, libc's `memcpy` will be used instead) and build a self-contained binary (otherwise, it only emits the jump to some LLVM function without showing its code). This is sadly not supported by godbolt at the moment. The issue might apply to multiple or all bare metal targets, although I was only able to check for `riscv32*-unknown-none`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93265/timeline", "performed_via_github_app": null, "state_reason": null}