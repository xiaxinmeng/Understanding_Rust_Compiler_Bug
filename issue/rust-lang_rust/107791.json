{"url": "https://api.github.com/repos/rust-lang/rust/issues/107791", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107791/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107791/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107791/events", "html_url": "https://github.com/rust-lang/rust/issues/107791", "id": 1575932078, "node_id": "I_kwDOAAsO6M5d7tCu", "number": 107791, "title": "Is an invalid value immediately replaced considered a produced value?.", "user": {"login": "axos88", "id": 1281218, "node_id": "MDQ6VXNlcjEyODEyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1281218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axos88", "html_url": "https://github.com/axos88", "followers_url": "https://api.github.com/users/axos88/followers", "following_url": "https://api.github.com/users/axos88/following{/other_user}", "gists_url": "https://api.github.com/users/axos88/gists{/gist_id}", "starred_url": "https://api.github.com/users/axos88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axos88/subscriptions", "organizations_url": "https://api.github.com/users/axos88/orgs", "repos_url": "https://api.github.com/users/axos88/repos", "events_url": "https://api.github.com/users/axos88/events{/privacy}", "received_events_url": "https://api.github.com/users/axos88/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2023-02-08T11:14:43Z", "updated_at": "2023-02-12T06:32:34Z", "closed_at": "2023-02-11T22:54:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Location\n\nhttps://doc.rust-lang.org/reference/behavior-considered-undefined.html\n\n### Summary\n\nThis may be a bit hair-splitting, but what do we consider *produced* in `Producing an invalid value, even in private fields and locals. `?. There seem to be a lot of confusion and fear around this topic, and it's unarguably better to avoid more code than to hit UB because we did not avoid a case, it would be better to be as precise as possible to prevent actions based on fear rather than facts.\r\n\r\nDo we consider a value that is first initialized as invalid, and then overwritten with a valid value as soon as possible, but provably before it is accessed?\r\n\r\nI firmly believe that writing a bunch of bytes to a memory area that is overwritten without access to it cannot influence the behaviour of the program, and shouldn't be considered a produced value at all. Guaranteeing that it is not accessed is another thing and undoubtedly a can of worms, but the clarification would be welcome nonetheless, so that UB could be better understood and constrained.\r\n\r\nI agree that this is a VERY dangerous area, but with the necessary attention and guarantees, \r\n\r\nDoes the following code actually trigger UB, with the following restrictions:\r\n\r\n   * Please, no suggestions on how this should be done to avoid this arguably gray-area, I'm interested in the actual answer to this case, both from a theoretic and a practical point of view.\r\n  * No code accesses the GLOBAL_MUT variable before main runs.\r\n  * When main runs, code still runs on a single thread, on a single CPU (embedded environment)\r\n  * No interrupts, signals or alike can interrupt the first unsafe block, it is executed atomically.\r\n  * All futher accesses to GLOBAL_MUT will be reads (although this is unimportant, since all accesses must be unsafe {} anyways)\r\n  * https://www.ralfj.de/blog/2020/07/15/unused-data.html was an interesting read, however that still covers the case when seemingly unused memory might actually be used due to compiler optimizations. In this case that cannot happen, as AFAIK accesses CANNOT be moved through an assignment. (So any accesses happening after an assignments can only be rearranged to happen after the reassignment).\r\n  * Possibly another rewrite of this without using the MaybeUninit API, just returning uninitialized memory in the static definition.\r\n  * Can the intermittently produced invalid value actually influence the behaviour of the compiler or the resulting binary and trigger UB, provided that the invalid value is never actually read, and it is overwritten as soon as the entry point code finishes running, and calls main? Can something I never know about influence me?\r\n```\r\n\r\n#![feature(const_size_of_val)]\r\n#![feature(const_ptr_write)]\r\n\r\nstatic mut GLOBAL_LAZY_MUT: MyStructThatCannotBeInitiedInConst = unsafe {\r\n    // Copied from MaybeUninit::zeroed() with minor modifications, see below\r\n    let mut u = MaybeUninit::uninit();\r\n\r\n    let bytes = mem::size_of_val(&u);\r\n    write_bytes(u.as_ptr() as *const u8 as *mut u8, 0xA5, bytes); //Trick the compiler check that verifies pointers and references are not null.\r\n\r\n    u.assume_init() //Or replace the whole thing with some other method of producing an invalid value in const-time.\r\n};\r\n\r\n(...)\r\n\r\nfn main() {\r\n    // First instruction in main, atomic execution.\r\n    unsafe {\r\n        let mut v = MyStructThatCannotBeInitiedInConst::new();\r\n        libc::memcpy(&mut v as *mut _, &mut GLOBAL_LAZY_MUT as *mut _, mem::size_of_val(&v)); \r\n        mem::forget(v);\r\n    }\r\n}\r\n```\r\n\r\nSee this discussion here: https://users.rust-lang.org/t/is-this-ub-or-not/88739/15\r\n\r\n", "closed_by": {"login": "axos88", "id": 1281218, "node_id": "MDQ6VXNlcjEyODEyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1281218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axos88", "html_url": "https://github.com/axos88", "followers_url": "https://api.github.com/users/axos88/followers", "following_url": "https://api.github.com/users/axos88/following{/other_user}", "gists_url": "https://api.github.com/users/axos88/gists{/gist_id}", "starred_url": "https://api.github.com/users/axos88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axos88/subscriptions", "organizations_url": "https://api.github.com/users/axos88/orgs", "repos_url": "https://api.github.com/users/axos88/repos", "events_url": "https://api.github.com/users/axos88/events{/privacy}", "received_events_url": "https://api.github.com/users/axos88/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107791/timeline", "performed_via_github_app": null, "state_reason": "completed"}