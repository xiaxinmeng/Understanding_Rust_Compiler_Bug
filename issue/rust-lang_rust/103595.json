{"url": "https://api.github.com/repos/rust-lang/rust/issues/103595", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103595/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103595/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103595/events", "html_url": "https://github.com/rust-lang/rust/issues/103595", "id": 1424600205, "node_id": "I_kwDOAAsO6M5U6ayN", "number": 103595, "title": "Tracking issue for speeding up rustc via its build configuration", "user": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 849077850, "node_id": "MDU6TGFiZWw4NDkwNzc4NTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-compiler-performance", "name": "WG-compiler-performance", "color": "c2e0c6", "default": false, "description": "Working group: Compiler Performance"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2022-10-26T19:39:08Z", "updated_at": "2023-06-01T10:47:20Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There are several ways to speed up rustc by changing its build configuration, without changing its code: use a single codegen unit (CGU), profile-guided optimization (PGO), link-time optimization (LTO), post-link optimization (via BOLT), and using a better allocator (e.g. jemalloc or mimalloc).\r\n\r\nThis is a tracking issue for doing these for the most popular Tier 1 platforms: Linux64 (`x86_64-unknown-linux-gnu`), Win64 (`x86_64-pc-windows-msvc`), and Mac (`x86_64-apple-darwin`).\r\n\r\nItems marked with [2022] are on the [Compiler performance roadmap for 2022](https://hackmd.io/YJQSj_nLSZWl2sbI84R1qA).\r\n\r\n### Single CGU\r\n\r\n- [ ] All platforms: #107651, in progress, good results.\r\n\r\n### PGO\r\n\r\n- [x] Linux64: #80262, merged 2020-12-23.\r\n- [x] Win64 [2022]: #96978, merged 2022-07-12.\r\n- [ ] Mac [2022]:\r\n  - Slow Macs on GitHub CI were the limiting factor, but faster machines became available in #105212, so this should now be possible.\r\n\r\n### LTO\r\n\r\n- Linux64:\r\n  - [x] rustc front-end: #101403, merged 2022-10-24.\r\n  - [x] LLVM: done some time ago.\r\n- Win64:\r\n  - [x] rustc front-end: #103591, merged 2022-12-11.\r\n  - [ ] LLVM [2022]: currently statically linked, which prevents LTO, but this could be changed\r\n- Mac:\r\n  - [x] rustc front-end: in progress, #103647 seemed to cause issues in ICE output (and was temporarily reverted in #105646).\r\n  - [ ] LLVM [2022]\r\n\r\nThis is all thin LTO, which gets most of the benefits of fat LTO with a much lower link-time cost.\r\n\r\n### BOLT\r\n\r\n- Linux64:\r\n  - [ ] rustc front-end [2022]: #102487, in progress, mixed results.\r\n  - [x] LLVM [2022]: #94381, merged 2022-10-10.\r\n- Win64: N/A\r\n- Mac: N/A\r\n\r\nBolt only works on ELF binaries, and thus is Linux-only.\r\n\r\n### Better allocator\r\n\r\n- [x] Linux64: jemalloc, done some time ago.\r\n- [ ] Win64 [2022]\r\n- [x] Mac: jemalloc, done some time ago.\r\n\r\nNote: #92249 and #92317 tried using two different versions of mimalloc (one 1.7-based, one 2.0-based) instead of jemalloc, but the speed/memory tradeoffs in both cases were deemed inferior (the max-rss regressions expected to be fixed in the 2.x series still exist as of 2.0.6, see #103944).\r\n\r\nNote: we use a better allocator by simply overriding malloc/free, rather than using `#[global_allocator]`. See [this Zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler.2Fperformance/topic/Using.20.60.23.5Bglobal_allocator.5D.60.20for.20jemalloc.20on.20macOS.20.28w.2F.20data.29/near/294375737) for some discussion about the sub-optimality of this.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103595/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103595/timeline", "performed_via_github_app": null, "state_reason": null}