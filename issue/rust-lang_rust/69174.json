{"url": "https://api.github.com/repos/rust-lang/rust/issues/69174", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69174/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69174/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69174/events", "html_url": "https://github.com/rust-lang/rust/issues/69174", "id": 565609340, "node_id": "MDU6SXNzdWU1NjU2MDkzNDA=", "number": 69174, "title": "Bad quality code for `Clone` on enum types", "user": {"login": "reinerp", "id": 777239, "node_id": "MDQ6VXNlcjc3NzIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/777239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reinerp", "html_url": "https://github.com/reinerp", "followers_url": "https://api.github.com/users/reinerp/followers", "following_url": "https://api.github.com/users/reinerp/following{/other_user}", "gists_url": "https://api.github.com/users/reinerp/gists{/gist_id}", "starred_url": "https://api.github.com/users/reinerp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reinerp/subscriptions", "organizations_url": "https://api.github.com/users/reinerp/orgs", "repos_url": "https://api.github.com/users/reinerp/repos", "events_url": "https://api.github.com/users/reinerp/events{/privacy}", "received_events_url": "https://api.github.com/users/reinerp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-14T23:41:32Z", "updated_at": "2020-03-18T22:11:20Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "For this Rust code, we get some pretty bad assembly:\r\n\r\n```rust\r\n#[derive(Clone)]\r\npub enum Foo {\r\n    A(u8),\r\n    B(bool),\r\n}\r\n\r\n#[derive(Clone)]\r\npub enum Bar {\r\n    C(Foo),\r\n    D(u8),\r\n}\r\n\r\npub fn clone_foo(f: &Foo) -> Foo {\r\n    f.clone()\r\n}\r\n\r\npub fn clone_bar(b: &Bar) -> Bar {\r\n    b.clone()\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=release&edition=2018&gist=c14facc15a40601a2eb8dd10e122e421))\r\n\r\nAssembly:\r\n\r\n```\r\nplayground::clone_bar:\r\n\tmovb\t1(%rdi), %al\r\n\tcmpb\t$1, (%rdi)\r\n\tjne\t.LBB1_2\r\n\txorl\t%ecx, %ecx\r\n\tmovl\t$1, %edx\r\n\tjmp\t.LBB1_3\r\n\r\n.LBB1_2:\r\n\tmovzbl\t2(%rdi), %edx\r\n\txorl\t%ecx, %ecx\r\n\ttestb\t%dl, %dl\r\n\tsetne\t%cl\r\n\tcmpb\t$1, %al\r\n\tsete\t%al\r\n\tcmovnel\t%edx, %ecx\r\n\tshll\t$16, %ecx\r\n\txorl\t%edx, %edx\r\n\r\n.LBB1_3:\r\n\torl\t%edx, %ecx\r\n\tmovzbl\t%al, %eax\r\n\tshll\t$8, %eax\r\n\torl\t%ecx, %eax\r\n\tretq\r\n```\r\n\r\nTo see that it's possibly to do better, we can simply add a `Copy` instance to the types. Then the code _even for `Clone`_ gets much better:\r\n\r\n```rust\r\n#[derive(Clone, Copy)]\r\npub enum Foo {\r\n    A(u8),\r\n    B(bool),\r\n}\r\n\r\n#[derive(Clone, Copy)]\r\npub enum Bar {\r\n    C(Foo),\r\n    D(u8),\r\n}\r\n\r\npub fn clone_foo(f: &Foo) -> Foo {\r\n    f.clone()\r\n}\r\n\r\npub fn clone_bar(b: &Bar) -> Bar {\r\n    b.clone()\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=release&edition=2018&gist=4215a15ed3879563d06ab23e548ff8b1))\r\n\r\nAssembly:\r\n\r\n```\r\nplayground::clone_bar:\r\n\tmovzwl\t(%rdi), %ecx\r\n\tmovzbl\t2(%rdi), %eax\r\n\tshll\t$16, %eax\r\n\torl\t%ecx, %eax\r\n\tretq\r\n```\r\n\r\nIt's still not perfect (why are there two 2-byte loads instead of a single 4-byte load?) but it's much better.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69174/timeline", "performed_via_github_app": null, "state_reason": null}