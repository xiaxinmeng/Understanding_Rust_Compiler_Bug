{"url": "https://api.github.com/repos/rust-lang/rust/issues/27854", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/27854/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/27854/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/27854/events", "html_url": "https://github.com/rust-lang/rust/issues/27854", "id": 101239362, "node_id": "MDU6SXNzdWUxMDEyMzkzNjI=", "number": 27854, "title": "How to write a generic trait method returning value conforming to the trait?", "user": {"login": "Qard", "id": 205482, "node_id": "MDQ6VXNlcjIwNTQ4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/205482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qard", "html_url": "https://github.com/Qard", "followers_url": "https://api.github.com/users/Qard/followers", "following_url": "https://api.github.com/users/Qard/following{/other_user}", "gists_url": "https://api.github.com/users/Qard/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qard/subscriptions", "organizations_url": "https://api.github.com/users/Qard/orgs", "repos_url": "https://api.github.com/users/Qard/repos", "events_url": "https://api.github.com/users/Qard/events{/privacy}", "received_events_url": "https://api.github.com/users/Qard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-16T07:26:16Z", "updated_at": "2015-08-16T10:09:08Z", "closed_at": "2015-08-16T10:09:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've spent several hours trying to get this to work, and no one on IRC seems to have any answers either. Basically, I have a generic trait that I want to apply to a couple different generic structs which should have a method that returns a new, different generic object based on the same struct.\n\nThis example probably makes more sense than my description:\n\n``` rust\n#[derive(Debug)]\nstruct A<T>(i32, T);\nimpl<T> A<T> {\n    fn new(a: i32, b: T) -> A<T> { A(a, b) }\n}\n\n#[derive(Debug)]\nstruct B<T>(i64, T);\nimpl<T> B<T> {\n    fn new(a: i64, b: T) -> B<T> { B(a, b) }\n}\n\ntrait DoAThing<T> {\n    fn do_a_thing<F, V>(self, f: F) -> DoAThing<V>\n        where F: FnOnce(T) -> V;\n}\n\nimpl<T> DoAThing<T> for A<T> {\n    fn do_a_thing<F, V>(self, f: F) -> A<V>\n        where F: FnOnce(T) -> V {\n        let A(a, b) = self;\n        f(b)\n    }\n}\n\nimpl<T> DoAThing<T> for B<T> {\n    fn do_a_thing<F, V>(self, f: F) -> B<V>\n        where F: FnOnce(T) -> V {\n        let B(a, b) = self;\n        f(b)\n    }\n}\n\nfn main() {\n    let a = A::new(1, \"hello\");\n    let b = B::new(2, \"hi\");\n\n    println!(\"{:?} {:?}\", a, b);\n    println!(\n        \"{:?} {:?}\",\n        a.do_a_thing(|v| A::new(v.len(), v)),\n        b.do_a_thing(|v| B::new(v.len(), v))\n    );\n}\n```\n", "closed_by": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/27854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/27854/timeline", "performed_via_github_app": null, "state_reason": "completed"}