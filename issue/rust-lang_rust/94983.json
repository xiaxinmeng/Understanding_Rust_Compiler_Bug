{"url": "https://api.github.com/repos/rust-lang/rust/issues/94983", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94983/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94983/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94983/events", "html_url": "https://github.com/rust-lang/rust/issues/94983", "id": 1170386860, "node_id": "I_kwDOAAsO6M5Fwq-s", "number": 94983, "title": "Statically linking `libc++` requires disabling `static-libstdcpp`", "user": {"login": "djkoloski", "id": 7554649, "node_id": "MDQ6VXNlcjc1NTQ2NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/7554649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djkoloski", "html_url": "https://github.com/djkoloski", "followers_url": "https://api.github.com/users/djkoloski/followers", "following_url": "https://api.github.com/users/djkoloski/following{/other_user}", "gists_url": "https://api.github.com/users/djkoloski/gists{/gist_id}", "starred_url": "https://api.github.com/users/djkoloski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djkoloski/subscriptions", "organizations_url": "https://api.github.com/users/djkoloski/orgs", "repos_url": "https://api.github.com/users/djkoloski/repos", "events_url": "https://api.github.com/users/djkoloski/events{/privacy}", "received_events_url": "https://api.github.com/users/djkoloski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 325438536, "node_id": "MDU6TGFiZWwzMjU0Mzg1MzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-bootstrap", "name": "T-bootstrap", "color": "bfd4f2", "default": false, "description": "Relevant to the bootstrap subteam: Rust's build system (x.py and src/bootstrap)"}, {"id": 2345380158, "node_id": "MDU6TGFiZWwyMzQ1MzgwMTU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-contributor-roadblock", "name": "A-contributor-roadblock", "color": "f7e101", "default": false, "description": "Area: Makes things more difficult for new contributors to rust itself"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2022-03-16T00:09:58Z", "updated_at": "2023-05-02T11:58:23Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In 737ef08ea066cbdc9f4b93373b1a1a108e6691ab, the default value of `static-libstdcpp` was changed from `false` to `true`. When statically linking `libc++` on linux, this has a rather unfortunate cascade of effects:\r\n\r\n1. If `static-libstdcpp` is set to true, then `bootstrap/compile.rs` will ask `clang++` where `libstdc++.a` is located.\r\n2. For pure-LLVM toolchains, only `libc++.a` is provided and `clang++` will unhelpfully return \"`libstdc++.a`\". `compile.rs` stores this in `LLVM_STATIC_STDCPP`.\r\n3. `rustc_llvm`'s build script checks whether `LLVM_STATIC_STDCPP` is set. Seeing that it is, it adds `cargo:rustc-link-search=native=<PARENT_DIR>` to the command line where `<PARENT_DIR>` is the directory containing `LLVM_STATIC_STDCPP`.\r\n4. Because there is no parent directly, this winds up adding `-L native=`, which triggers the error \"empty search path given via `-L`\" in `rustc_session/src/search_paths.rs`.\r\n\r\nTo get the behavior that we actually want, we need to fall into the case where `LLVM_STATIC_STDCPP` is not defined, and instead add `-stdlib=libc++` to `cxxflags`. To do so, we have to set `static-libstdcpp = false` in `config.toml`. This is unintuitive behavior as it appears that we're disabling static linking entirely, but in reality we're just statically linking against `libc++` instead of `libstdc++`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94983/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94983/timeline", "performed_via_github_app": null, "state_reason": null}