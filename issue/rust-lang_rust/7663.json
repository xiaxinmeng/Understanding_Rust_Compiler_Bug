{"url": "https://api.github.com/repos/rust-lang/rust/issues/7663", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/7663/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/7663/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/7663/events", "html_url": "https://github.com/rust-lang/rust/issues/7663", "id": 16528175, "node_id": "MDU6SXNzdWUxNjUyODE3NQ==", "number": 7663, "title": "Use statements don't check for duplicates", "user": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-07-09T14:38:55Z", "updated_at": "2014-04-11T00:22:24Z", "closed_at": "2014-04-11T00:22:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I stumbled upon this issue by accident, as I noticed that using a symbol that has been imported in multiple glob statements does not result in an error:\n\n``` rust\nmod foo {\n    pub fn p() { println(\"foo\"); }\n}\nmod bar {\n    pub fn p() { println(\"bar\"); }\n}\n\nmod baz {\n   use foo::*;\n   use bar::*;\n   #[main]\n   fn my_main() {\n       p();\n   }\n}\n```\n\nA simple oversight, I thought, and dove into resolve to fix the bug. Then I noticed that not even single imports are checked for conflicts:\n\n``` rust\nmod foo {\n    pub fn p() { println(\"foo\"); }\n}\nmod bar {\n    pub fn p() { println(\"bar\"); }\n}\n\nmod baz {\n   use foo::p;\n   use bar::p;\n   #[main]\n   fn my_main() {\n       p();\n   }\n}\n```\n\nI assumed that the reason for this was that currently both glob and single imports are flattened into a hashmap per module and tried to introduce a 2-level import scheme that allows duplicates only in glob imports but not in single imports.\n\nAnd then I noticed that it's possible to export glob imports from a crate, making that scheme impossible. Even worse: this makes the global API of a crate dependent on the vigilance of the developer to not export multiple symbols with the same name, as a simple rearranging of use statements in the source code could break existing users of the crate.\n\nSo, there are four possible ways to go about this problem:\n\n1) Don't change anything. I.e. don't check for duplicate imported symbols, neither single imports nor glob imports. (Maybe add a lint, but that would probably have to be turned of in many cases, e.g. `libstd` is full of duplicate glob imports).\n\n2) Disallow duplicate imports, even when glob importing. This is IMO not workable.\n\n3) Disallow exporting glob imports from crates, making the aforementioned 2-level duplicate checking possible (i.e. disallow duplicate single imports, disallow used duplicate glob imports, allow unused duplicate glob imports).\n\n4) A variant on 3): allow exporting glob imports, implement the 2-level scheme for imports that are not visible from outside the crate, but disallow any duplicate imports otherwise.\n\n3) or 4) would be my preferred solution, but would incur a lot of work, both in implementing the scheme and restructuring existing code. 1) is the most realistic solution, but I personally don't really like it, as Rust is all about safety after all.\n\nFun example at the end:\n\n``` rust\nmod foo {\n    pub fn p() { println(\"foo\"); }\n}\nmod bar {\n    pub fn p() { println(\"bar\"); }\n}\n\nmod baz {\n   use bar::p;\n   use foo::*;\n   #[main]\n   fn my_main() {\n       p();\n   }\n}\n```\n\nHere, the `use foo::*;` is marked as being unused, even though when running the program, `foo::foo()` is actually the implementation of `foo()` that is used.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/7663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/7663/timeline", "performed_via_github_app": null, "state_reason": "completed"}