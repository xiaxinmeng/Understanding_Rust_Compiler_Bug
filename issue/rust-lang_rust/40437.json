{"url": "https://api.github.com/repos/rust-lang/rust/issues/40437", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/40437/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/40437/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/40437/events", "html_url": "https://github.com/rust-lang/rust/issues/40437", "id": 213517530, "node_id": "MDU6SXNzdWUyMTM1MTc1MzA=", "number": 40437, "title": "Undetected unconditional recursion in Clone impl using to_owned()", "user": {"login": "crumblingstatue", "id": 1521976, "node_id": "MDQ6VXNlcjE1MjE5NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1521976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crumblingstatue", "html_url": "https://github.com/crumblingstatue", "followers_url": "https://api.github.com/users/crumblingstatue/followers", "following_url": "https://api.github.com/users/crumblingstatue/following{/other_user}", "gists_url": "https://api.github.com/users/crumblingstatue/gists{/gist_id}", "starred_url": "https://api.github.com/users/crumblingstatue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crumblingstatue/subscriptions", "organizations_url": "https://api.github.com/users/crumblingstatue/orgs", "repos_url": "https://api.github.com/users/crumblingstatue/repos", "events_url": "https://api.github.com/users/crumblingstatue/events{/privacy}", "received_events_url": "https://api.github.com/users/crumblingstatue/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-11T09:15:47Z", "updated_at": "2022-04-21T16:37:39Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\nfn main() {\r\n    struct Foo;\r\n    impl Clone for Foo {\r\n        fn clone(&self) -> Self {\r\n            self.to_owned()\r\n        }\r\n    }\r\n    Foo.clone();\r\n}\r\n\r\n```\r\n\r\nRustc gives no warning, but this overflows the stack.\r\n\r\nSlightly more realistic example:\r\n```rust\r\nfn main() {\r\n    use std::borrow::{Borrow, ToOwned};\r\n    use std::ops::Deref;\r\n    struct Foo;\r\n    struct Borrowed;\r\n    impl Deref for Foo {\r\n        type Target = Borrowed;\r\n        fn deref(&self) -> &Borrowed {\r\n            unimplemented!()\r\n        }\r\n    }\r\n    impl Borrow<Borrowed> for Foo {\r\n        fn borrow(&self) -> &Borrowed {\r\n            &*self\r\n        }\r\n    }\r\n    impl ToOwned for Borrowed {\r\n        type Owned = Foo;\r\n        fn to_owned(&self) -> Foo {\r\n            unimplemented!()\r\n        }\r\n    }\r\n    impl Clone for Foo {\r\n        fn clone(&self) -> Self {\r\n            (*self).to_owned() // Oops, should have dereferenced twice\r\n        }\r\n    }\r\n    Foo.clone();\r\n}\r\n\r\n```\r\n([Real life use case for implementing `Clone` through `deref -> to_owned`](https://github.com/jeremyletang/rust-sfml/blob/941a53008d3385ec4e578deabc398a8851eecd69/src/audio/sound_buffer.rs#L219-L236))\r\n\r\nIs it feasible for rustc to detect this kind of cross-trait unconditional recursion?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/40437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/40437/timeline", "performed_via_github_app": null, "state_reason": null}