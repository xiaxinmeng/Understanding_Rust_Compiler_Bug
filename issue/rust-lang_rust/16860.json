{"url": "https://api.github.com/repos/rust-lang/rust/issues/16860", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/16860/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/16860/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/16860/events", "html_url": "https://github.com/rust-lang/rust/issues/16860", "id": 41544486, "node_id": "MDU6SXNzdWU0MTU0NDQ4Ng==", "number": 16860, "title": "rustc: strange failure with lifetime bounds forcing explicit re-borrowing", "user": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 125141240, "node_id": "MDU6TGFiZWwxMjUxNDEyNDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-dst", "name": "A-dst", "color": "f7e101", "default": false, "description": "Area: Dynamically Sized Types"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-08-29T22:16:12Z", "updated_at": "2017-05-02T21:26:16Z", "closed_at": "2017-05-02T21:26:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Now that DST has landed, I've been working on refactoring various library code to take advantage of it. I tried to remove some of the extension traits currently used in `core::any`, but ran into a strange error for `downcase_mut` that was solved by explicitly reborrowing the receiver:\n\n``` rust\n/// The `Any` trait is implemented by all `'static` types, and can be used for\n/// dynamic typing\n///\n/// Every type with no non-`'static` references implements `Any`, so `Any` can\n/// be used as a trait object to emulate the effects dynamic typing.\n#[stable]\npub trait Any: AnyPrivate {\n    /// Returns true if the boxed type is the same as `T`\n    #[inline]\n    #[stable]\n    fn is<T: 'static>(&self) -> bool {\n        // Get TypeId of the type this function is instantiated with\n        let t = TypeId::of::<T>();\n\n        // Get TypeId of the type in the trait object\n        let boxed = self.get_type_id();\n\n        // Compare both TypeIds on equality\n        t == boxed\n    }\n\n    /// Returns some reference to the boxed value if it is of type `T`, or\n    /// `None` if it isn't.\n    #[inline]\n    #[unstable = \"naming conventions around acquiring references may change\"]\n    fn downcast_ref<T: 'static>(&self) -> Option<&T> {\n        if self.is::<T>() {\n            unsafe {\n                // Get the raw representation of the trait object\n                let to: TraitObject = transmute_copy(&self);\n\n                // Extract the data pointer\n                Some(transmute(to.data))\n            }\n        } else {\n            None\n        }\n    }\n\n    /// Returns some mutable reference to the boxed value if it is of type `T`, or\n    /// `None` if it isn't.\n    #[inline]\n    #[unstable = \"naming conventions around acquiring references may change\"]\n    fn downcast_mut<T: 'static>(&mut self) -> Option<&mut T> {\n        // The following fails with: \n        //    error: instantiating a type parameter with an incompatible type `&mut Self`, \n        //    which does not fulfill `'static`\n        // if self.is::<T>() {\n\n        // Explicitly reborrowing seems to work:\n        if (&*self).is::<T>() {\n            unsafe {\n                // Get the raw representation of the trait object\n                let to: TraitObject = transmute_copy(&self);\n\n                // Extract the data pointer\n                Some(transmute(to.data))\n            }\n        } else {\n            None\n        }\n    }\n\n    /// Returns some reference to the boxed value if it is of type `T`, or\n    /// `None` if it isn't.\n    #[deprecated = \"this function has been renamed to `downcast_ref`\"]\n    fn as_ref<T: 'static>(&self) -> Option<&T> {\n        self.downcast_ref::<T>()\n    }\n\n    /// Returns some mutable reference to the boxed value if it is of type `T`, or\n    /// `None` if it isn't.\n    #[deprecated = \"this function has been renamed to `downcast_mut`\"]\n    fn as_mut<T: 'static>(&mut self) -> Option<&mut T> {\n        self.downcast_mut::<T>()\n    }\n}\n\n/// An inner trait to ensure that only this module can call `get_type_id()`.\ntrait AnyPrivate {\n    /// Get the `TypeId` of `self`\n    fn get_type_id(&self) -> TypeId;\n}\n\nimpl<T: 'static> AnyPrivate for T {\n    fn get_type_id(&self) -> TypeId { TypeId::of::<T>() }\n}\n\nimpl<T: 'static + AnyPrivate> Any for T {}\n```\n\ncc @nikomatsakis \n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/16860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/16860/timeline", "performed_via_github_app": null, "state_reason": "completed"}