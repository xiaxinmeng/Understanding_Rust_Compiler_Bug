{"url": "https://api.github.com/repos/rust-lang/rust/issues/101353", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101353/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101353/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101353/events", "html_url": "https://github.com/rust-lang/rust/issues/101353", "id": 1360691581, "node_id": "I_kwDOAAsO6M5RGoF9", "number": 101353, "title": "Fix messaging around what is and isn't a \"slice\" AKA. stop using \"slice\" to mean &[T]", "user": {"login": "Ben-Lichtman", "id": 15235153, "node_id": "MDQ6VXNlcjE1MjM1MTUz", "avatar_url": "https://avatars.githubusercontent.com/u/15235153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ben-Lichtman", "html_url": "https://github.com/Ben-Lichtman", "followers_url": "https://api.github.com/users/Ben-Lichtman/followers", "following_url": "https://api.github.com/users/Ben-Lichtman/following{/other_user}", "gists_url": "https://api.github.com/users/Ben-Lichtman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ben-Lichtman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ben-Lichtman/subscriptions", "organizations_url": "https://api.github.com/users/Ben-Lichtman/orgs", "repos_url": "https://api.github.com/users/Ben-Lichtman/repos", "events_url": "https://api.github.com/users/Ben-Lichtman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ben-Lichtman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-09-02T23:55:14Z", "updated_at": "2022-09-16T01:26:08Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## **Slices - Why the messaging is wrong / confusing and needs to be clarified**\r\n\r\nIn my experience teaching newbies about rust (mostly on the community discord and in person) there has always been a speed-bump in the learning process, and that's slices.\r\n\r\nThe way we talk about slices is confusing and ambiguous - we first (IMO incorrectly) teach that `&[T]` is called a slice, but then later when we introduce unsized types and reveal that actually `[T]` is a slice, but also continue to call `&[T]` a slice in extensive documentation.\r\n\r\nThings become even more confusing when some documentation also uses the terms \"shared slice\" and \"mutable slice\", or defines a slice as a \"view into a contiguous sequence\" (which IMO conveys a sense of indirection?). Things that add to the confusion:\r\n - Owned slices such as `Box<[T]>` and even the rare `Box<str>`\r\n - `[T]` / `str` as a generic parameter (why is or isn't it `&[T]` / `&str`?).\r\n - How does `[T]` relate to `[T; N]` ie. (if `&[T]` is a slice then is `&[T; N]` an array?)\r\n\r\nDue to the langage we use to teach, rust beginners must learn and then unlearn the terminology several times before they arrive at the correct nuances of how slices work and in what contexts we use what terms. I believe this should change.\r\n\r\nWhile I believe using \"slice\" to mean `&[T]` informally is acceptable, I think having this language present in documentation does the community a disservice and makes everything more difficult than it needs to be.\r\n\r\n## **How we could fix it**\r\n\r\nWe need to focus on accurately teaching the language, and using the terminology consistently:\r\n - `[T]` is a slice - an unsized type that needs to be behind some form of pointer / reference / indirection\r\n - `&[T]` is a slice reference / slice ref - a fat pointer which includes the length of the slice.\r\n - `&mut [T]` should be called a mutable slice ref\r\n - `&str` - what should we call this? a \"string ref\" / \"str ref\" maybe? currently it is often called a \"string slice\" but that is inaccurate...\r\nThese basics should not be conflated - especially in documentation. Make it clear which ones are slices and which ones are references. (yes, I know that it's more words to type out)\r\n - Introducing the terms \"shared\" and \"unique\", while accurate, are confusing since they are not used anywhere else\r\n - Calling `&[T]` a \"shared slice\" is confusing since it implies that the type is a kind of slice, when in fact it is a reference to a slice.\r\n - The documentation needs to be overhauled in several places to make this messaging accurate and consistent.\r\n - I think methods such as `.as_slice()` and `.as_mut_slice()`, while technically incorrect (they return slice references) should be fine to stay since it's still fairly clear what the user is getting back.\r\n\r\nIf we really want to continue calling `&[T]` a \"slice\" and `&mut [T]` a \"mutable slice\", then we must come up with a new name for a `[T]` to avoid ambiguous language.\r\n\r\n## **Locations (not comprehensive)**\r\n\r\n- Confusing language exists throughout the documentation\r\n- stdlib:\r\n  - `primitive slice`\r\n    - A slice is a \"dynamically-sized view into a contiguous sequence\"\r\n    - They are \"either mutable or shared\" - neglecting the existance of owned slices\r\n    - The type is for slice primitives, but the documentation generally describes slice references\r\n  - `std::slice`\r\n    - same documentation as for the slice primitive, but then additionally describes traits and methods which apply to the primitive type\r\n  - `std::slice::from_raw_parts` returns a \"slice\" `std::slice::from_raw_parts_mut` returns a \"mutable slice\"\r\n  - Nowhere in the documentation is an actual slice described, and the difference between slices and references to them is never made clear\r\n- the rust book - slice chapter\r\n  - \"Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection\"\r\n  - \"A slice is a kind of reference, so it does not have ownership\" - incorrect\r\n  - \"array\" is used interchangably with \"slice\" without definitions being clarified\r\n  - generally uses \"slice\" to mean `&[T]`\r\n- the rust reference\r\n  - Glossary\r\n    - \"A slice is dynamically-sized view into a contiguous sequence, written as [T].\r\n\r\n        It is often seen in its borrowed forms, either mutable or shared. The shared slice type is &[T], while the mutable slice type is &mut [T], where T represents the element type.\" - This is the best description so far, but again, the reference type names are used interchangably with an actual slice type.\r\n  - Slice types\r\n    - \"A slice is a dynamically sized type representing a 'view' into a sequence of elements of type T. The slice type is written as [T]\"\r\n    - \"&[T]: a 'shared slice', often just called a 'slice'. It doesn't own the data it points to; it borrows it.\r\n        &mut [T]: a 'mutable slice'. It mutably borrows the data it points to.\r\n        Box<[T]>: a 'boxed slice'\"\r\n\r\n**TL;DR: Using \"slice\" to mean `&[T]` is bad, confusing, and hard to learn.**\r\n\r\nDoes anyone else think this is a problem? Please bikeshed your `&[T]` and `&mut [T]` names and other thoughts below :)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101353/reactions", "total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101353/timeline", "performed_via_github_app": null, "state_reason": null}