{"url": "https://api.github.com/repos/rust-lang/rust/issues/105510", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105510/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105510/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105510/events", "html_url": "https://github.com/rust-lang/rust/issues/105510", "id": 1487437522, "node_id": "I_kwDOAAsO6M5YqH7S", "number": 105510, "title": "Improving type inference / annotation explicitness diagnostic", "user": {"login": "jaybosamiya", "id": 5683582, "node_id": "MDQ6VXNlcjU2ODM1ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/5683582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaybosamiya", "html_url": "https://github.com/jaybosamiya", "followers_url": "https://api.github.com/users/jaybosamiya/followers", "following_url": "https://api.github.com/users/jaybosamiya/following{/other_user}", "gists_url": "https://api.github.com/users/jaybosamiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaybosamiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaybosamiya/subscriptions", "organizations_url": "https://api.github.com/users/jaybosamiya/orgs", "repos_url": "https://api.github.com/users/jaybosamiya/repos", "events_url": "https://api.github.com/users/jaybosamiya/events{/privacy}", "received_events_url": "https://api.github.com/users/jaybosamiya/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-12-09T20:49:31Z", "updated_at": "2022-12-14T12:46:06Z", "closed_at": "2022-12-14T12:46:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "A minimized example, derived from a chain of changes that a friend (who has just begun learning Rust) did.\r\n\r\nStarting from this code ([Playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=218bd3adf0ec1081fbd62dfb452d75d2)):\r\n```rust\r\nfn main() {\r\n    let x = \"\".chars().collect();\r\n}\r\n```\r\n\r\nThe current output is:\r\n```\r\nerror[E0282]: type annotations needed\r\n --> src/main.rs:2:9\r\n  |\r\n2 |     let x = \"\".chars().collect();\r\n  |         ^\r\n  |\r\nhelp: consider giving `x` an explicit type\r\n  |\r\n2 |     let x: _ = \"\".chars().collect();\r\n  |          +++\r\n```\r\n\r\nNow someone more familiar with Rust wouldn't just blindly add a `: _` (since it doesn't lead to telling Rust anything new here, just would move the problem), but this friend is new to Rust, and has often found suggestions in the \"help:\" section to immediately provide fixes, so they add the `: _`, making the code into this ([Playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=4ae368d61d5d83e00fc10d274ff3c42b)):\r\n```rust\r\nfn main() {\r\n    let x: _ = \"\".chars().collect();\r\n}\r\n```\r\n\r\nThe current output for this is:\r\n```\r\nerror[E0282]: type annotations needed\r\n --> src/main.rs:2:27\r\n  |\r\n2 |     let x: _ = \"\".chars().collect();\r\n  |                           ^^^^^^^ cannot infer type of the type parameter `B` declared on the associated function `collect`\r\n  |\r\nhelp: consider specifying the generic argument\r\n  |\r\n2 |     let x: _ = \"\".chars().collect::<B>();\r\n  |                                  +++++\r\n```\r\n\r\nSince they aren't sure what this `B` is doing, but they realize that that it is a type parameter, they decide \"oh, Rust can infer types for me, I'll just let it infer it\", and decide to add the turbofish with `_`, i.e., `::<_>`, making the code into this ([Playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=a2f3977ba0bfff07b403e35d957141af)):\r\n```rust\r\nfn main() {\r\n    let x: _ = \"\".chars().collect::<_>();\r\n}\r\n```\r\n\r\nAgain any seasoned Rust programmer would instantly recognize that this is unhelpful, but nonetheless, this leads to the following output:\r\n```\r\nerror[E0282]: type annotations needed\r\n --> src/main.rs:2:27\r\n  |\r\n2 |     let x: _ = \"\".chars().collect::<_>();\r\n  |                           ^^^^^^^ cannot infer type of the type parameter `B` declared on the associated function `collect`\r\n  |\r\nhelp: consider specifying the generic argument\r\n  |\r\n2 |     let x: _ = \"\".chars().collect::<_>();\r\n  |                                  ~~~~~\r\n```\r\n\r\nAt this point, we've reached a fixed-point, and the error message is copied over to chat-message-platform-of-choice, with an \"excuse me what rust\" message:\r\n<img width=\"164\" alt=\"screenshot of text stating 'excuse me what rust' where the 'rust' is highlighted as an alert\" src=\"https://user-images.githubusercontent.com/5683582/206790299-4fd240a7-274a-4318-ac0c-d085bf3f2b40.png\">\r\n\r\nI help them understand what happened, and they fix the issue, and go on their way. However, this now seems like a point where diagnostics could be improved. (Btw, the original issue happened nested inside an iterator chain inside another iterator chain, and there was a type error along the way too, so lots more issues there; I've distilled it down to the above story just to remove all irrelevant details; also, while not in the above story, if instead of beginning with the `: _`, someone added the turbofish first (i.e., `let x = \"\".chars().collect::<_>();`), then too one hits the final fixed-point case)\r\n\r\n---\r\n\r\nWhat could be improved:\r\n1. If something is explicitly marked as \"to be inferred\" via the `_`, maybe something like \"cannot infer type of the type parameter `B` (here, `_`) declared on the associated function `collect`\" or similar. Probably someone can come up with a better way to write that though, but there should be something that connects the `B`.\r\n1. If both \"sides\" are marked to be inferred (in this case, type of `x` and type parameter in the turbofish), and making any one of them explicit would be sufficient, having an error message that says this might help.\r\n1. Adding a diagnostic that specifically points out such annotations in general would also potentially help. In particular, I don't see any situation where (verbatim) `::<_>` is useful; except maybe in [this animation](https://turbo.fish/::%3C_%3E). Having a diagnostic that tells users would probably be good. Similarly for (verbatim) `: _`. (I hope what I am saying here makes sense: I'm saying, as an example, `::<Vec<_>>` is fine, but `::<_>` is not).\r\n1. (Not 100% the goal of the above story, but still) `collect` could have a special diagnostic help message that mentions containers, rather than the `B` which can be confusing to new users.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105510/timeline", "performed_via_github_app": null, "state_reason": "completed"}