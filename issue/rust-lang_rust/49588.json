{"url": "https://api.github.com/repos/rust-lang/rust/issues/49588", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49588/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49588/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49588/events", "html_url": "https://github.com/rust-lang/rust/issues/49588", "id": 310510636, "node_id": "MDU6SXNzdWUzMTA1MTA2MzY=", "number": 49588, "title": "#[warn(non_shorthand_field_patterns)] is a menace to pattern macros", "user": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-02T15:08:30Z", "updated_at": "2018-04-12T00:35:45Z", "closed_at": "2018-04-12T00:35:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Nobody responded to [my URLO thread](https://users.rust-lang.org/t/defending-against-redundant-pattern-warnings-in-a-pattern-macro/16543), and the rabbit hole has only gotten deeper and deeper since I've started trying to work around this [in frunk's hlist_pat](https://github.com/lloydmeta/frunk/issues/107).  It's time for an issue.\r\n\r\nHere's a simple pattern macro:\r\n\r\n```rust\r\npub struct Value<A> { pub value: A }\r\n\r\n#[macro_export]\r\nmacro_rules! pat {\r\n    ($a:pat) => { Value { value: $a }};\r\n}\r\n```\r\n\r\nTrouble is, suppose somebody writes `pat!(value)`.  Then they'll get this:\r\n\r\n```text\r\nwarning: the `value:` in this pattern is redundant\r\n --> src/main.rs:5:27\r\n  |\r\n5 |     ($a:pat) => { Value { value: $a }};\r\n  |                           ^^^^^ help: remove this\r\n...\r\n9 |     let pat!(value) = Value { value: () };\r\n  |         ----------- in this macro invocation\r\n  |\r\n  = note: #[warn(non_shorthand_field_patterns)] on by default\r\n\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.45 secs\r\n     Running `target/debug/playground`\r\n```\r\n\r\nHere is the simplest alternative I can come up with for working around this warning in this simple macro.\r\n\r\n```rust\r\nmacro_rules! pat {\r\n    // Possibly rewrite ident patterns to avoid 'value: value'.\r\n    // We need to duplicate the ident in an intermediate rule first\r\n    // so we can match the ident to a literal without losing hygiene.\r\n    (ref mut $a:ident) => { pat![%HACK% [ref mut] $a $a] };\r\n    (ref $a:ident)     => { pat![%HACK% [ref]     $a $a] };\r\n    (mut $a:ident)     => { pat![%HACK% [mut]     $a $a] };\r\n    ($a:ident)         => { pat![%HACK% []        $a $a] };\r\n    \r\n    // only the specific ident 'value' should be rewritten,\r\n    // since otherwise we might rewrite unit structs or constants.\r\n    (%HACK% [$($kw:tt)*] $ident:ident value ) => { Value { $($kw)* $ident } };\r\n    (%HACK% [$($kw:tt)*] $ident:ident $_x:tt) => { Value { value: $($kw)* $ident } };\r\n    \r\n    // if it is any other kind of pattern, use it normally\r\n    ($a:pat) => { Value { value: $a }};\r\n}\r\n```\r\n\r\nNotice how proper support for `ref` and `mut` _requires_ that the macro output uses shorthand field syntax, as opposed to a more scalable workaround like `value: value@_` (where the `value@_` is at least something that could be produced by a helper macro).  A similar pattern macro for a struct with two fields basically *requires* an incremental muncher now, just to avoid the exponential blowup of `5^n` rules.\r\n\r\nThis is an awful lot of headache just for a little reminder to write more idiomatic code!  Isn't that clippy's job, anyhow?", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49588/timeline", "performed_via_github_app": null, "state_reason": "completed"}