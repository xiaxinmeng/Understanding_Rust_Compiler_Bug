{"url": "https://api.github.com/repos/rust-lang/rust/issues/69517", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69517/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69517/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69517/events", "html_url": "https://github.com/rust-lang/rust/issues/69517", "id": 572173861, "node_id": "MDU6SXNzdWU1NzIxNzM4NjE=", "number": 69517, "title": "Clearer error for failed tests which returned a Result Err()", "user": {"login": "dbr", "id": 509, "node_id": "MDQ6VXNlcjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbr", "html_url": "https://github.com/dbr", "followers_url": "https://api.github.com/users/dbr/followers", "following_url": "https://api.github.com/users/dbr/following{/other_user}", "gists_url": "https://api.github.com/users/dbr/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbr/subscriptions", "organizations_url": "https://api.github.com/users/dbr/orgs", "repos_url": "https://api.github.com/users/dbr/repos", "events_url": "https://api.github.com/users/dbr/events{/privacy}", "received_events_url": "https://api.github.com/users/dbr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630810559, "node_id": "MDU6TGFiZWw2MzA4MTA1NTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-libtest", "name": "A-libtest", "color": "f7e101", "default": false, "description": "Area: #[test] related"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-02-27T01:34:48Z", "updated_at": "2023-05-31T04:46:27Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!-- Thanks for filing a \ud83d\udc1b bug report \ud83d\ude04! -->\r\n\r\n**Problem**\r\nI have a test function which returns a `Result<...>` as a convenient way of testing failable methods. For example:\r\n\r\n```rust\r\n#[test]\r\nfn exampletest() -> Result<(), std::io::Error> {\r\n    let f = std::fs::File::open(\"/root/nonexistantfile\")?;\r\n    assert_eq!(example_method(&f), 0);\r\n    Ok(())\r\n}\r\n```\r\n\r\nThe test started failing for whatever reason, and the `cargo test` output looked like this:\r\n\r\n```\r\n$ cargo test\r\n   Compiling confusing v0.1.0 (/Users/dbr/confusing)\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.42s\r\n     Running target/debug/deps/confusing-3ccdc020a15819b0\r\n\r\nrunning 1 test\r\ntest exampletest ... FAILED\r\n\r\nfailures:\r\n\r\n---- exampletest stdout ----\r\nError: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\r\nthread 'exampletest' panicked at 'assertion failed: `(left == right)`\r\n  left: `1`,\r\n right: `0`: the test returned a termination value with a non-zero status code (1) which indicates a failure', src/libtest/lib.rs:196:5\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\n\r\n\r\nfailures:\r\n    exampletest\r\n\r\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\nerror: test failed, to rerun pass '--bin confusing'\r\n```\r\n\r\nNot reading the output properly, I interpreted the `panicked at 'assertion failed: ...` as being a failure from my `assert_eq!` and started trying to work out why my `example_method` was returning 0.\r\n\r\nI also tried running the tests under a debugger, but the backtrace only pointed at the test closure rather than the probelmatic line:\r\n\r\n```\r\n...\r\n  13: std::panicking::begin_panic_fmt\r\n             at src/libstd/panicking.rs:328\r\n  14: test::assert_test_result\r\n             at ./<::std::macros::panic macros>:9\r\n  15: confusing::exampletest::{{closure}}\r\n             at src/main.rs:6\r\n  16: core::ops::function::FnOnce::call_once\r\n             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libcore/ops/function.rs:227\r\n```\r\n..where src/main.rs:6 is the line `fn exampletest() -> Result<(), std::io::Error> {`\r\n\r\n**Steps**\r\n<!-- The steps to reproduce the bug. -->\r\n1. Write a test case returning a `Result<...>`\r\n2. Have the test case fail by returning `Err(...)`\r\n3. Misread the output!\r\n\r\n**Possible Solution(s)**\r\nI think there are two aspects to this:\r\n\r\nFirst is the panic message from the assert is talking about \"internal\" details - the exit code of the test. The fact the test (I assume) runs as a process and the exit-code is used to determine failure isn't something I was thinking about while writing/debugging the test.\r\n\r\nFor this, I think it would help a lot to just simplify the panic message from saying\r\n```\r\nthread 'exampletest' panicked at 'assertion failed: `(left == right)`\r\n  left: `1`,\r\n right: `0`: the test returned a termination value with a non-zero status code (1) which indicates a failure', src/libtest/lib.rs:196:5\r\n```\r\nto something more concise like:\r\n```\r\nthread 'exampletest' panicked at 'the test exited with non-zero exit code (1) which indicates a failure', src/libtest/lib.rs:196:5\r\n```\r\n\r\nSecond part I'm not so clear about, but it seems like the Result isn't being handled specially - the `Err` is just being turned into an exit code, then asserted later. Since the panic comes from this assertion, the backtrace doesn't reference the actual line which failed.\r\n\r\nThis is different to if I had, say, used `.unwrap()` instead of `?`:\r\n\r\n```\r\n...\r\n  16: core::result::Result<T,E>::unwrap\r\n             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libcore/result.rs:933\r\n  17: confusing::exampletest\r\n             at src/main.rs:7\r\n  18: confusing::exampletest::{{closure}}\r\n             at src/main.rs:6\r\n  19: core::ops::function::FnOnce::call_once\r\n             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libcore/ops/function.rs:227\r\n...\r\n```\r\n\r\nwhere line 7 is the problem-causing line `let _f = std::fs::File::open(\"/root/nonexistantfile\").unwrap();` - it would be nice if using `?` resulted in a similar traceback\r\n\r\n**Notes**\r\n\r\nOutput of `cargo version`:\r\n\r\n```$ cargo version\r\ncargo 1.40.0 (bc8e4c8be 2019-11-22)\r\n```\r\n```\r\n$ rustup show\r\nDefault host: x86_64-apple-darwin\r\nrustup home:  /Users/dbr/.rustup\r\n\r\ninstalled toolchains\r\n--------------------\r\n\r\nstable-x86_64-apple-darwin\r\nnightly-x86_64-apple-darwin\r\n\r\ninstalled targets for active toolchain\r\n--------------------------------------\r\n\r\narm-unknown-linux-musleabihf\r\nwasm32-unknown-unknown\r\nx86_64-apple-darwin\r\n\r\nactive toolchain\r\n----------------\r\n\r\nstable-x86_64-apple-darwin (default)\r\nrustc 1.40.0 (73528e339 2019-12-16)\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69517/reactions", "total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69517/timeline", "performed_via_github_app": null, "state_reason": null}