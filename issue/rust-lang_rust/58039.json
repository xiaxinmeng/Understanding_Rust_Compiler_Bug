{"url": "https://api.github.com/repos/rust-lang/rust/issues/58039", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58039/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58039/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58039/events", "html_url": "https://github.com/rust-lang/rust/issues/58039", "id": 405548767, "node_id": "MDU6SXNzdWU0MDU1NDg3Njc=", "number": 58039, "title": "self-less method missing return type lifetime should suggest adding &self", "user": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-01T04:36:32Z", "updated_at": "2020-06-11T17:37:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I frequently find myself forgetting to write the `&self` on methods. In the scenario where I write a method whose return type has a lifetime that I've elided, it would be nice if the compiler could include a note suggesting that I might have meant to add `&self` on the method, instead of (or in addition to) suggesting that I should add `'static`.\r\n\r\nExample:\r\n\r\n```rust\r\nstruct Foo<'a>;\r\n\r\nstruct Bar;\r\n\r\nimpl Bar {\r\n    fn foos() -> Vec<Foo> {\r\n        unimplemented!()\r\n    }\r\n}\r\n```\r\n\r\nThis produces the error\r\n\r\n```\r\nerror[E0106]: missing lifetime specifier\r\n --> unnamed.rs:6:22\r\n  |\r\n6 |     fn foos() -> Vec<Foo> {\r\n  |                      ^^^ help: consider giving it a 'static lifetime: `Foo + 'static`\r\n  |\r\n  = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\r\n```\r\n\r\nIn fact, looking at that error, even the current help is incorrect, I'd want to write `Foo<'static>`, not `Foo + 'static`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58039/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58039/timeline", "performed_via_github_app": null, "state_reason": null}