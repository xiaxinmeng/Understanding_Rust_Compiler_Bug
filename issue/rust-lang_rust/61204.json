{"url": "https://api.github.com/repos/rust-lang/rust/issues/61204", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61204/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61204/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61204/events", "html_url": "https://github.com/rust-lang/rust/issues/61204", "id": 448523449, "node_id": "MDU6SXNzdWU0NDg1MjM0NDk=", "number": 61204, "title": "Warning for when a `pub use x::*` statement excludes something already imported privately", "user": {"login": "daboross", "id": 1152146, "node_id": "MDQ6VXNlcjExNTIxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1152146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daboross", "html_url": "https://github.com/daboross", "followers_url": "https://api.github.com/users/daboross/followers", "following_url": "https://api.github.com/users/daboross/following{/other_user}", "gists_url": "https://api.github.com/users/daboross/gists{/gist_id}", "starred_url": "https://api.github.com/users/daboross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daboross/subscriptions", "organizations_url": "https://api.github.com/users/daboross/orgs", "repos_url": "https://api.github.com/users/daboross/repos", "events_url": "https://api.github.com/users/daboross/events{/privacy}", "received_events_url": "https://api.github.com/users/daboross/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-26T03:19:07Z", "updated_at": "2020-06-11T17:33:03Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Ran into this today when refactoring visibility of tons of things in a library crate. In part of my refactoring, I added `pub use inner_mod::*;` statements to many of my modules. Confusingly, this didn't always re-export everything.\r\n\r\nConsider this situation:\r\n\r\n```rust\r\nmod my_lib {\r\n    mod inner_mod {\r\n        mod inner_level {\r\n            pub struct A;\r\n            pub struct B;\r\n            pub struct C;\r\n        }\r\n        \r\n        use self::inner_level::B;\r\n        \r\n        pub use self::inner_level::*;\r\n    }\r\n    \r\n    pub use self::inner_mod::*;\r\n}\r\n\r\nfn main() {\r\n    // works fine\r\n    let _a = my_lib::A;\r\n    // errors with 'error[E0425]: cannot find value `B` in module `my_lib`'\r\n    let _b = my_lib::B; \r\n    //               ^ \r\n}\r\n```\r\n\r\nThe line `pub use inner_level::*;` does not include `inner_level::B`, because that has already been imported. But since it's imported _privately_, it still can't be accessed.\r\n\r\nReading my own code, it took quite a while before I realized I had this conflict. I've included my nested-module situation above as it was in my code, as that produced the error \"does not exist\". (rather than \"this is private\", which is what occurs when only one mod level deep).\r\n\r\nIf there was a way to warn against \"wildcard pub use not re-exporting item already previously imported\", I think it could help in the future? Or, this might be a super niche situation not worth helping.\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61204/timeline", "performed_via_github_app": null, "state_reason": null}