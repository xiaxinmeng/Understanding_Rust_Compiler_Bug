{"url": "https://api.github.com/repos/rust-lang/rust/issues/107554", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107554/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107554/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107554/events", "html_url": "https://github.com/rust-lang/rust/issues/107554", "id": 1565684368, "node_id": "I_kwDOAAsO6M5dUnKQ", "number": 107554, "title": "Suboptimal code generated for alignment checks and similar via `number.trailing_zeros() >= bit_count`", "user": {"login": "schreter", "id": 40718699, "node_id": "MDQ6VXNlcjQwNzE4Njk5", "avatar_url": "https://avatars.githubusercontent.com/u/40718699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schreter", "html_url": "https://github.com/schreter", "followers_url": "https://api.github.com/users/schreter/followers", "following_url": "https://api.github.com/users/schreter/following{/other_user}", "gists_url": "https://api.github.com/users/schreter/gists{/gist_id}", "starred_url": "https://api.github.com/users/schreter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schreter/subscriptions", "organizations_url": "https://api.github.com/users/schreter/orgs", "repos_url": "https://api.github.com/users/schreter/repos", "events_url": "https://api.github.com/users/schreter/events{/privacy}", "received_events_url": "https://api.github.com/users/schreter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2023-02-01T08:44:29Z", "updated_at": "2023-02-15T08:51:29Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Typically, one would write `val & 7 == 0` to check whether `val` is aligned to 8B. However, Clippy complains and says it would be nicer to write it as `val.trailing_zeros() >= 3`. Although it is disputable whether this is really more readable, the problem is that the code generated is significantly worse.\r\n\r\nFor example, let's take this code:\r\n```rust\r\npub fn check_align_trailing_zeros(val: usize) -> bool {\r\n    val.trailing_zeros() >= 3\r\n}\r\n\r\npub fn check_align_mask(val: usize) -> bool {\r\n    val & 7 == 0\r\n}\r\n```\r\n\r\nI expected to see the same optimal code generated. However, the compiler indeed generates separate instruction for `trailing_zeros()` instruction and additional compare, instead of a single instruction.\r\n\r\nCode generated on x64:\r\n```\r\nexample::check_align_trailing_zeros:\r\n        test    rdi, rdi\r\n        je      .LBB0_1\r\n        bsf     rax, rdi\r\n        cmp     eax, 3\r\n        setae   al\r\n        ret\r\n.LBB0_1:\r\n        mov     eax, 64\r\n        cmp     eax, 3\r\n        setae   al\r\n        ret\r\n\r\nexample::check_align_mask:\r\n        test    dil, 7\r\n        sete    al\r\n        ret\r\n```\r\n\r\nCode generated on ARM:\r\n```\r\nexample::check_align_trailing_zeros:\r\n        rbit    x8, x0\r\n        clz     x8, x8\r\n        cmp     w8, #2\r\n        cset    w0, hi\r\n        ret\r\n\r\nexample::check_align_mask:\r\n        tst     x0, #0x7\r\n        cset    w0, eq\r\n        ret\r\n```\r\n\r\nThis happens with the newest Rust 1.67 as well as with older versions and in nightly.\r\n\r\nChecking of `trailing_zeros`/`trailing_ones` and `leading_zeros`/`leading_ones` with `>`/`>=` operators against `n` can be mapped to checking via a mask of `n+1`/`n` ones at the tail (for `trailing_*`) or head (for `leading_*`) of the mask word and comparing against 0 for `*_zeroes` (which is implicitly done and set as ZERO/EQ flag in CPU flags after the TEST operation, i.e., it boils down to a single instruction) or the mask word for `*_ones` (which boils down to two instructions).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107554/timeline", "performed_via_github_app": null, "state_reason": null}