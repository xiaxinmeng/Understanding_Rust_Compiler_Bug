{"url": "https://api.github.com/repos/rust-lang/rust/issues/79121", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79121/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79121/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79121/events", "html_url": "https://github.com/rust-lang/rust/issues/79121", "id": 744347028, "node_id": "MDU6SXNzdWU3NDQzNDcwMjg=", "number": 79121, "title": "Tracking Issue for LLVM InstrProf code coverage (current flag: `-Zinstrument-coverage`)", "user": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2483744621, "node_id": "MDU6TGFiZWwyNDgzNzQ0NjIx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-code-coverage", "name": "A-code-coverage", "color": "f7e101", "default": false, "description": "Area: Source-based code coverage (-Cinstrument-coverage)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2020-11-17T02:10:33Z", "updated_at": "2022-07-13T03:16:24Z", "closed_at": "2022-07-13T03:16:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue! \ud83d\udcdc Tracking issues are for tracking a\r\nfeature from implementation to stabilisation. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nThis is a tracking issue for the MCP \"Implement LLVM-compatible source-based code coverage\" (rust-lang/compiler-team#278).\r\n\r\n<!-- Is a feature gate needed?\r\nThe feature gate for the issue is `#![feature(FFF)]`.\r\n-->\r\n\r\nOriginal feature request: Issue #34701.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [x] Implement the MCP\r\n- [x] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n  * The `Rustc Dev Guide` includes detailed documentation on the implementation in a new section, [`LLVM Source-Based Code Coverage `](https://rustc-dev-guide.rust-lang.org/llvm-coverage-instrumentation.html#llvm-and-covmap-versions)\r\n  * Usage is documented in the `Rust Unstable Book` at https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/source-based-code-coverage.html\r\n  * Also see the `Inside Rust Blog` article at https://blog.rust-lang.org/inside-rust/2020/11/12/source-based-code-coverage.html\r\n- [x] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n\r\nThere are no unresolved questions from the MCP.\r\n\r\nSome implementation options were debated and, if deferred, were logged as `FIXME` comments in the compiler source code or tests. `FIXME` comments related to stabilization have been added as `rust-lang/rust` issues.\r\n\r\n* If/when stabilized, will the compiler flag be updated to `-C instrument-coverage`? (If so, the `-Z` variant could also be supported for some time, to ease migrations for existing users and scripts.)\r\n\r\n* The Rust coverage implementation depends on (and automatically turns on) `-Z symbol-mangling-version=v0`. Will stabilizing this feature depend on stabilizing `v0` symbol-mangling first? If so, what is the current status and timeline?\r\n\r\n* The Rust coverage implementation implements the latest version of LLVM's Coverage Mapping Format (version 4), which forces a dependency on LLVM 11 or later. A compiler error is generated if attempting to compile with coverage, and using an older version of LLVM.\r\n\r\n* What other questions need to be answered before the feature can be stabilized?\r\n\r\n### Open Issues related to this Tracking Issue\r\n\r\nSomewhat ordered by priority:\r\n\r\n* \"Rustdoc doctests should have their file/lines remapped when using `-Zinstrument-coverage`\" (#79417)\r\n  - Fixed to correctly offset the lines, but still need a fix to offset the column (character) number\r\n* \"MIR InstrumentCoverage: Improve coverage of `#[should_panic]` tests and `catch_unwind()` handlers\" (#78544)\r\n* \"Improve coverage results on certain derived traits that show two different counters\" (#79626)\r\n  - This may have been resolved by another coincidental improvement, and just needs verification\r\n* \"Add a cargo option to generate coverage reports using -Z instrument-coverage\" (#85902)\r\n* \"MIR InstrumentCoverage - Can the source_info.span for `FakeRead` statements be more consistent?\" (#78546)\r\n* \"std::process::exit() on MSVC bypasses writing LLVM InstrProf counters to profraw file\" (#77553)\r\n\r\nAlso, note the issue tracking label: [A-code-coverage](https://github.com/rust-lang/rust/labels/A-code-coverage)\r\n\r\n### Implementation history\r\n\r\n* This feature was functionally complete as of PR #78267 and available via the `nightly` channel as of November 8, 2020.\r\n* There have been many subsequent PRs to expand and improve coverage, including support for coverage of and within macros, coverage of dead code within a function (based on const eval), coverage of unused functions, and coverage of unused templates: [Summary of merged PRs contributing to the implementation](https://github.com/rust-lang/rust/pulls?q=coverage+is%3Apr+author%3Arichkadel+is%3Aclosed+closed%3A%3C2020-12-11+is%3Amerged+)\r\n\r\n", "closed_by": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79121/reactions", "total_count": 52, "+1": 18, "-1": 0, "laugh": 0, "hooray": 9, "confused": 0, "heart": 19, "rocket": 6, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79121/timeline", "performed_via_github_app": null, "state_reason": "completed"}