{"url": "https://api.github.com/repos/rust-lang/rust/issues/51772", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51772/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51772/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51772/events", "html_url": "https://github.com/rust-lang/rust/issues/51772", "id": 335299795, "node_id": "MDU6SXNzdWUzMzUyOTk3OTU=", "number": 51772, "title": "ambiguous type-dependent name resolution ", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-25T08:04:24Z", "updated_at": "2018-09-15T17:47:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently ([playground](https://play.rust-lang.org/?gist=005ffda13df3190067c4f7189856d22a&version=stable&mode=debug)):\r\n\r\n```rust\r\npub struct A<T>(T);\r\nimpl A<u32> {\r\n    fn new(x: u32) -> Self { A(0) }\r\n}\r\nimpl A<f32> {\r\n    fn new(x: f32) -> Self { A(0.) }\r\n}\r\nfn main() {\r\n    let _ : A<f32> = A::new(0.);  // ERROR\r\n    // let _ = A::<f32>::new(0.); // OK\r\n}\r\n```\r\n\r\nerrors with:\r\n\r\n```\r\nerror[E0034]: multiple applicable items in scope\r\n --> src/main.rs:9:22\r\n  |\r\n9 |     let _ : A<f32> = A::new(0.);\r\n  |                      ^^^^^^ multiple `new` found\r\n  |\r\nnote: candidate #1 is defined in an impl for the type `A<u32>`\r\n --> src/main.rs:3:5\r\n  |\r\n3 |     fn new(x: u32) -> Self { A(0) }\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^\r\nnote: candidate #2 is defined in an impl for the type `A<f32>`\r\n --> src/main.rs:6:5\r\n  |\r\n6 |     fn new(x: f32) -> Self { A(0.) }\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nThis is probably a feature request but I'd like the `A<f32>` method to be picked in this case and for the program above to compile.\r\n\r\nSolving this might require an RFC but I think this is a problem worth solving. \r\n\r\n---\r\n\r\ncc @nikomatsakis @eddyb ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51772/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51772/timeline", "performed_via_github_app": null, "state_reason": null}