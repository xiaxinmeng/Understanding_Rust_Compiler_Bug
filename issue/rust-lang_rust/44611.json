{"url": "https://api.github.com/repos/rust-lang/rust/issues/44611", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44611/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44611/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44611/events", "html_url": "https://github.com/rust-lang/rust/issues/44611", "id": 258123125, "node_id": "MDU6SXNzdWUyNTgxMjMxMjU=", "number": 44611, "title": "Improve borrowck error message for nested flat_map", "user": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-15T18:18:47Z", "updated_at": "2020-06-12T00:52:03Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Take the following code:\r\n\r\n```rust\r\nstruct Foo { x: String }\r\n\r\nimpl Foo {\r\n    fn one(&mut self) -> Vec<String> { vec![] }\r\n    fn two(&mut self) {\r\n        let z: Vec<Vec<String>> = Default::default();\r\n        let _: Vec<_> = z.into_iter()\r\n            .flat_map(|xs| xs.into_iter().flat_map(|_| self.one()))\r\n            .collect();\r\n    }\r\n}\r\n```\r\n\r\nThis code fails to compile with\r\n```console\r\nerror[E0598]: lifetime of `self` is too short to guarantee its contents can be safely reborrowed\r\n --> src/main.rs:8:52\r\n  |\r\n8 |             .flat_map(|xs| xs.into_iter().flat_map(|_| self.one()))\r\n  |                                                    ^^^\r\n  |\r\nnote: `self` would have to be valid for the method call at 7:25...\r\n --> src/main.rs:7:25\r\n  |\r\n7 |           let _: Vec<_> = z.into_iter()\r\n  |  _________________________^\r\n8 | |             .flat_map(|xs| xs.into_iter().flat_map(|_| self.one()))\r\n9 | |             .collect();\r\n  | |______________________^\r\nnote: ...but `self` is only valid for the lifetime  as defined on the body at 8:23\r\n --> src/main.rs:8:23\r\n  |\r\n8 |             .flat_map(|xs| xs.into_iter().flat_map(|_| self.one()))\r\n  |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nThough that is not particularly helpful in terms of identifying the underlying issue, namely that the inner flat map returns a closure whose lifetime is associated with `self`, preventing `self` from being used again when the outer closure is called again. I think. I'll let @nikomatsakis explain (reformatted from IRC):\r\n\r\n> basically you wind up with two ways to access `self`. easiest fix is certainly to call `collect()`. you are returning *the closure* as part of the iterator you return and *that closure* that you return has captured `self`, but the *outer closure* (which exists at the same time as the inner closure) also has captured self (so it can pass it to the inner closure). we have no way to know that the iterator will fully drain and discard the inner closure before re-invoking the outer closure\r\n\r\n> interesting test case; I wonder how on earth we could give an error that explains it better :P\r\n> do you suppose you could open an issue with that example and a brief summary (as an A-diagnostics puzzler)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44611/timeline", "performed_via_github_app": null, "state_reason": null}