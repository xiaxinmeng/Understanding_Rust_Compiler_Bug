{"url": "https://api.github.com/repos/rust-lang/rust/issues/106881", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106881/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106881/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106881/events", "html_url": "https://github.com/rust-lang/rust/issues/106881", "id": 1533491180, "node_id": "I_kwDOAAsO6M5bZzfs", "number": 106881, "title": "E0277 causes syntax error when adding several bounds at the same time via several errors", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-01-14T21:11:42Z", "updated_at": "2023-01-14T21:22:35Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "### Code\r\n\r\n```Rust\r\n#![feature(associated_type_defaults)]\r\n\r\nuse std::{\r\n    fmt::Display,\r\n    ops::{AddAssign, Deref},\r\n};\r\n\r\ntrait UncheckedCopy: Sized + std::fmt::Display + AddAssign<&'static str> + Deref + Copy {\r\n    // This Output is said to be Copy. Yet we default to Self\r\n    // and it's accepted, not knowing if Self ineed is Copy\r\n    type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\r\n    //~^ ERROR the trait bound `Self: Copy` is not satisfied\r\n    //~| ERROR the trait bound `Self: Deref` is not satisfied\r\n    //~| ERROR cannot add-assign `&'static str` to `Self`\r\n    //~| ERROR `Self` doesn't implement `std::fmt::Display`\r\n\r\n    // We said the Output type was Copy, so we can Copy it freely!\r\n    fn unchecked_copy(other: &Self::Output) -> Self::Output {\r\n        (*other)\r\n    }\r\n\r\n    fn make_origin(s: Self) -> Self::Output {\r\n        s.into()\r\n    }\r\n}\r\n\r\nimpl<T> UncheckedCopy for T {}\r\n\r\nfn bug<T: UncheckedCopy>(origin: T) {\r\n    let origin = T::make_origin(origin);\r\n    let mut copy = T::unchecked_copy(&origin);\r\n\r\n    // assert we indeed have 2 strings pointing to the same buffer.\r\n    assert_eq!(origin.as_ptr(), copy.as_ptr());\r\n\r\n    // Drop the origin. Any use of `copy` is UB.\r\n    drop(origin);\r\n\r\n    copy += \"This is invalid!\";\r\n    println!(\"{}\", copy);\r\n}\r\n\r\nfn main() {\r\n    bug(String::from(\"hello!\"));\r\n}\r\n```\r\n\r\n\r\n### Current output\r\n\r\n```Shell\r\nwarning: unnecessary parentheses around block return value\r\n  --> src/lib.rs:19:9\r\n   |\r\n19 |         (*other)\r\n   |         ^      ^\r\n   |\r\n   = note: `#[warn(unused_parens)]` on by default\r\nhelp: remove these parentheses\r\n   |\r\n19 -         (*other)\r\n19 +         *other\r\n   |\r\n\r\nerror[E0277]: the trait bound `T: Copy` is not satisfied\r\n  --> src/lib.rs:27:27\r\n   |\r\n27 | impl<T> UncheckedCopy for T {}\r\n   |                           ^ the trait `Copy` is not implemented for `T`\r\n   |\r\nnote: required by a bound in `UncheckedCopy`\r\n  --> src/lib.rs:8:84\r\n   |\r\n8  | trait UncheckedCopy: Sized + std::fmt::Display + AddAssign<&'static str> + Deref + Copy {\r\n   |                                                                                    ^^^^ required by this bound in `UncheckedCopy`\r\nhelp: consider restricting type parameter `T`\r\n   |\r\n27 | impl<T: std::marker::Copy> UncheckedCopy for T {}\r\n   |       +++++++++++++++++++\r\n\r\nerror[E0277]: the trait bound `T: Deref` is not satisfied\r\n  --> src/lib.rs:27:27\r\n   |\r\n27 | impl<T> UncheckedCopy for T {}\r\n   |                           ^ the trait `Deref` is not implemented for `T`\r\n   |\r\nnote: required by a bound in `UncheckedCopy`\r\n  --> src/lib.rs:8:76\r\n   |\r\n8  | trait UncheckedCopy: Sized + std::fmt::Display + AddAssign<&'static str> + Deref + Copy {\r\n   |                                                                            ^^^^^ required by this bound in `UncheckedCopy`\r\nhelp: consider restricting type parameter `T`\r\n   |\r\n27 | impl<T: std::ops::Deref> UncheckedCopy for T {}\r\n   |       +++++++++++++++++\r\n\r\nerror[E0277]: cannot add-assign `&'static str` to `T`\r\n  --> src/lib.rs:27:27\r\n   |\r\n27 | impl<T> UncheckedCopy for T {}\r\n   |                           ^ no implementation for `T += &'static str`\r\n   |\r\nnote: required by a bound in `UncheckedCopy`\r\n  --> src/lib.rs:8:50\r\n   |\r\n8  | trait UncheckedCopy: Sized + std::fmt::Display + AddAssign<&'static str> + Deref + Copy {\r\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `UncheckedCopy`\r\nhelp: consider restricting type parameter `T`\r\n   |\r\n27 | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}\r\n   |       +++++++++++++++++++++++++++++++++++\r\n\r\nerror[E0277]: `T` doesn't implement `std::fmt::Display`\r\n  --> src/lib.rs:27:27\r\n   |\r\n27 | impl<T> UncheckedCopy for T {}\r\n   |                           ^ `T` cannot be formatted with the default formatter\r\n   |\r\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\r\nnote: required by a bound in `UncheckedCopy`\r\n  --> src/lib.rs:8:30\r\n   |\r\n8  | trait UncheckedCopy: Sized + std::fmt::Display + AddAssign<&'static str> + Deref + Copy {\r\n   |                              ^^^^^^^^^^^^^^^^^ required by this bound in `UncheckedCopy`\r\nhelp: consider restricting type parameter `T`\r\n   |\r\n27 | impl<T: std::fmt::Display> UncheckedCopy for T {}\r\n   |       +++++++++++++++++++\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\n```\r\n\r\n\r\n\r\n\r\n\r\nHere we have several errors trying to add bounds to `impl<T> UncheckedCopy for T {}`.\r\n````\r\nhelp: consider restricting type parameter `T`\r\n   |\r\n27 | impl<T: std::marker::Copy> UncheckedCopy for T {}\r\n\r\n````\r\n\r\nThis would work when adding only a single bound, but here we end up adding several bounds, separated by `:` which causes syntax error, the \"fully fixed\" code ends up being\r\n`impl<T: std::marker::Copy: std::ops::Deref: std::ops::AddAssign<&'static str>: std::fmt::Display> UncheckedCopy for T {}`\r\n\r\n\r\nCan we make rust clever enough to separate these by `+` ?\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106881/timeline", "performed_via_github_app": null, "state_reason": null}