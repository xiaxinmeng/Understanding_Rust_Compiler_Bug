{"url": "https://api.github.com/repos/rust-lang/rust/issues/46606", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46606/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46606/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46606/events", "html_url": "https://github.com/rust-lang/rust/issues/46606", "id": 280746344, "node_id": "MDU6SXNzdWUyODA3NDYzNDQ=", "number": 46606, "title": "Backwards propagation of types leads to unhelpful errors [futures]", "user": {"login": "mqudsi", "id": 606923, "node_id": "MDQ6VXNlcjYwNjkyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/606923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mqudsi", "html_url": "https://github.com/mqudsi", "followers_url": "https://api.github.com/users/mqudsi/followers", "following_url": "https://api.github.com/users/mqudsi/following{/other_user}", "gists_url": "https://api.github.com/users/mqudsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mqudsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mqudsi/subscriptions", "organizations_url": "https://api.github.com/users/mqudsi/orgs", "repos_url": "https://api.github.com/users/mqudsi/repos", "events_url": "https://api.github.com/users/mqudsi/events{/privacy}", "received_events_url": "https://api.github.com/users/mqudsi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-12-09T19:16:43Z", "updated_at": "2023-03-20T23:21:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In general, and I genuinely wish I had a citation for this, developers likely tend to write their software going from input to output, even if the output is the eventual, fixed \"goal\" they would like to reach.\r\n\r\nFor example, the code here (git checkout available): https://git.neosmart.net/mqudsi/futuretest/src/rust-46606\r\n\r\n```rust\r\n    let f = future::result(Ok(()))\r\n        .map_err(|()| \"&'static str error\")\r\n        .map(|_| future::result(Err(\"another &'static str error\")))\r\n        .and_then(|_|\r\n             future::result(Ok(())\r\n                .map_err(|()| \"String error\".to_owned())\r\n            )\r\n        )\r\n    ;\r\n```\r\n\r\nTwo conflicting error types are mapped, the first is to `&'static str` and the second is to `String`, the [compiler output](https://git.neosmart.net/mqudsi/futuretest/src/rust-46606/cargo.out) indicates an error with the `&'static str` type instead of the `String` type usage:\r\n\r\n```rust\r\n   Compiling futuretest v0.1.0 (file:///mnt/c/Users/Mahmoud/git/futuretest)\r\nerror[E0271]: type mismatch resolving `<futures::FutureResult<(), std::string::String> as futures::IntoFuture>::Error == &str`\r\n  --> src/main.rs:13:10\r\n   |\r\n13 |         .and_then(|_|\r\n   |          ^^^^^^^^ expected struct `std::string::String`, found &str\r\n   |\r\n   = note: expected type `std::string::String`\r\n              found type `&str`\r\n\r\nerror[E0271]: type mismatch resolving `<futures::FutureResult<(), std::string::String> as futures::IntoFuture>::Error == &str`\r\n  --> src/main.rs:20:10\r\n   |\r\n20 |     core.run(f).unwrap();\r\n   |          ^^^ expected struct `std::string::String`, found &str\r\n   |\r\n   = note: expected type `std::string::String`\r\n              found type `&str`\r\n   = note: required because of the requirements on the impl of `futures::Future` for `futures::AndThen<futures::Map<futures::MapErr<futures::FutureResult<(), ()>, [closure@src/main.rs:11:18: 11:43]>, [closure@src/main.rs:12:14: 12:67]>, futures::FutureResult<(), std::string::String>, [closure@src/main.rs:13:19: 16:14]>`\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nerror: Could not compile `futuretest`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\nIn an ideal situation, all types would match up and it wouldn't matter which line the type inference began with. But in the event of a type mismatch, such as here, the reported errors are based off the backwards type propagation, which doesn't seem right (opinion) and leads to an unhelpful error message (fact).\r\n\r\n(To make the case a bit clearer, I included several uses of the correct type followed by a final usage of the incorrect type).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46606/timeline", "performed_via_github_app": null, "state_reason": null}