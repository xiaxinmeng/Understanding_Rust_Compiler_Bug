{"url": "https://api.github.com/repos/rust-lang/rust/issues/79316", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79316/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79316/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79316/events", "html_url": "https://github.com/rust-lang/rust/issues/79316", "id": 748338876, "node_id": "MDU6SXNzdWU3NDgzMzg4NzY=", "number": 79316, "title": "Incremental compilation does not account for changes to -Zpolonius", "user": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "closed", "locked": false, "assignee": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-11-22T20:07:39Z", "updated_at": "2020-11-25T14:08:51Z", "closed_at": "2020-11-25T14:08:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\n/// Insert a new data element at a given key.\r\npub fn insert<'a, K: Eq, V>(this: &'a mut Vec<(K, V)>, key: K, val: V) -> &'a mut V {\r\n    for (key1, val1) in &mut *this {\r\n        if key == *key1 {\r\n            return val1;\r\n        }\r\n    }\r\n    let this = &mut *this;\r\n    this.push((key, val));\r\n    &mut this.last_mut().unwrap().1\r\n}\r\n\r\nfn main() {\r\n    let mut things = vec![(1, 2), (3, 4)];\r\n\r\n    let v = insert(&mut things, 1, 2);\r\n    println!(\"{} ({:p})\", v, v);\r\n\r\n    let v = insert(&mut things, 1, 2);\r\n    println!(\"{} ({:p})\", v, v);\r\n\r\n    let v = insert(&mut things, 5, 6);\r\n    println!(\"{} ({:p})\", v, v);\r\n\r\n    let v = insert(&mut things, 5, 6);\r\n    println!(\"{} ({:p})\", v, v);\r\n}\r\n```\r\n\r\nI expected this to fail when not compiled with `-Zpolonius`, but it *does* compile if we *previously* built with `-Zpolonius`:\r\n\r\n```\r\n% RUSTFLAGS='' cargo +nightly build\r\n   Compiling p v0.1.0 (/private/tmp/p)\r\nerror[E0499]: cannot borrow `*this` as mutable more than once at a time\r\n --> src/main.rs:8:16\r\n  |\r\n2 | pub fn insert<'a, K: Eq, V>(this: &'a mut Vec<(K, V)>, key: K, val: V) -> &'a mut V {\r\n  |               -- lifetime `'a` defined here\r\n3 |     for (key1, val1) in &mut *this {\r\n  |                         ---------- first mutable borrow occurs here\r\n4 |         if key == *key1 {\r\n5 |             return val1;\r\n  |                    ---- returning this value requires that `*this` is borrowed for `'a`\r\n...\r\n8 |     let this = &mut *this;\r\n  |                ^^^^^^^^^^ second mutable borrow occurs here\r\n\r\n% RUSTFLAGS='-Zpolonius' cargo +nightly build\r\n   Compiling p v0.1.0 (/private/tmp/p)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.37s\r\n\r\n% RUSTFLAGS='' cargo +nightly build\r\n   Compiling p v0.1.0 (/private/tmp/p)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.25s\r\n```\r\n\r\nIf I disable incremental compilation, this does not occur:\r\n\r\n```toml\r\n[profile.dev]\r\nincremental = false\r\n```\r\n\r\n```\r\n% RUSTFLAGS='' cargo +nightly build\r\n   Compiling p v0.1.0 (/private/tmp/p)\r\nerror[E0499]: cannot borrow `*this` as mutable more than once at a time\r\n --> src/main.rs:8:16\r\n  |\r\n2 | pub fn insert<'a, K: Eq, V>(this: &'a mut Vec<(K, V)>, key: K, val: V) -> &'a mut V {\r\n  |               -- lifetime `'a` defined here\r\n3 |     for (key1, val1) in &mut *this {\r\n  |                         ---------- first mutable borrow occurs here\r\n4 |         if key == *key1 {\r\n5 |             return val1;\r\n  |                    ---- returning this value requires that `*this` is borrowed for `'a`\r\n...\r\n8 |     let this = &mut *this;\r\n  |                ^^^^^^^^^^ second mutable borrow occurs here\r\n\r\n% RUSTFLAGS='-Zpolonius' cargo +nightly build\r\n   Compiling p v0.1.0 (/private/tmp/p)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32s\r\n\r\n% RUSTFLAGS='' cargo +nightly build\r\n   Compiling p v0.1.0 (/private/tmp/p)\r\nerror[E0499]: cannot borrow `*this` as mutable more than once at a time\r\n --> src/main.rs:8:16\r\n  |\r\n2 | pub fn insert<'a, K: Eq, V>(this: &'a mut Vec<(K, V)>, key: K, val: V) -> &'a mut V {\r\n  |               -- lifetime `'a` defined here\r\n3 |     for (key1, val1) in &mut *this {\r\n  |                         ---------- first mutable borrow occurs here\r\n4 |         if key == *key1 {\r\n5 |             return val1;\r\n  |                    ---- returning this value requires that `*this` is borrowed for `'a`\r\n...\r\n8 |     let this = &mut *this;\r\n  |                ^^^^^^^^^^ second mutable borrow occurs here\r\n```\r\n\r\n### Meta\r\n\r\n```\r\n% rustc +nightly --version --verbose\r\nrustc 1.50.0-nightly (da3846948 2020-11-21)\r\nbinary: rustc\r\ncommit-hash: da384694807172f0ca40eca2e49a11688aba6e93\r\ncommit-date: 2020-11-21\r\nhost: x86_64-apple-darwin\r\nrelease: 1.50.0-nightly\r\n```\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79316/timeline", "performed_via_github_app": null, "state_reason": "completed"}