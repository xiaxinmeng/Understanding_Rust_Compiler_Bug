{"url": "https://api.github.com/repos/rust-lang/rust/issues/65796", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65796/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65796/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65796/events", "html_url": "https://github.com/rust-lang/rust/issues/65796", "id": 512351259, "node_id": "MDU6SXNzdWU1MTIzNTEyNTk=", "number": 65796, "title": "Soundness of std::sync::Once", "user": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-10-25T07:28:34Z", "updated_at": "2019-11-25T06:01:04Z", "closed_at": "2019-11-25T06:01:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While working on a refactor of `std::sync::Once` in https://github.com/rust-lang/rust/pull/65719 I stumbled across multiple soundness issues. I now believe the current algorithm that queues waiting threads in a linked list with nodes an the stack of each waiting thread is not worth the complexity.\r\n\r\n#### Thread may be parked forever\r\nEdit: this is not a valid concern, see https://github.com/rust-lang/rust/issues/65796#issuecomment-546242347.\r\n[Code](https://github.com/rust-lang/rust/blob/master/src/libstd/sync/once.rs#L424):\r\n```rust\r\nwhile !node.signaled.load(Ordering::SeqCst) {\r\n    // HERE\r\n    thread::park();\r\n}\r\n```\r\nThe thread managing the waiter queue (thread 1) sets `node.signaled` and unparkes a thread.\r\nThe thread that wants to wait (thread 2) checks `node.signaled` before parking itself.\r\nBut at HERE thread 1 may set `node.signaled` and unpark thread 2 (which is not parked yet). Afterwards thread 2 will park itself, and never receive an unpark again.\r\n\r\nThis can be solved by using [`park_timeout`](https://doc.rust-lang.org/std/thread/fn.park_timeout.html). It does seems suboptimal to me though.\r\n\r\n#### Aliasing of a mutable reference\r\n[Code](https://github.com/rust-lang/rust/blob/master/src/libstd/sync/once.rs#L408)\r\n```rust\r\nlet me = &mut node as *mut Waiter as usize;\r\n/* ... */\r\n// the mutable reference to me is send to another thread\r\nlet old = self.state.compare_and_swap(state, me | RUNNING, Ordering::SeqCst);\r\n/* ... */\r\n// We are at the same time checking `node` ourselves\r\nwhile !node.signaled.load(Ordering::SeqCst) { /* ... */ }\r\n```\r\n\r\nThis can be solved by using shared references and interior mutability.\r\n\r\n#### Use of a potentially dangling shared reference (https://github.com/rust-lang/rust/issues/55005)\r\n[Code](https://github.com/rust-lang/rust/blob/master/src/libstd/sync/once.rs#L463)\r\n```rust\r\n(*queue).signaled.store(true, Ordering::SeqCst);\r\n```\r\nThe waiting thread can free `queue` after `signaled` is set after a spurious wakeup. At this point `store` can in theory still hold a dangling reference.\r\n\r\nThere is not much the implementation of `OnceCell` can do here, but I suppose if will be solved in the same way as https://github.com/rust-lang/rust/issues/55005.\r\n\r\n----\r\n\r\nThis reason `std::sync::Once` does not go with the obvious implementation that uses a mutex, is because `Mutex::new` is not const. This is the explanation in the comments:\r\n```\r\n// So to implement this, one might first reach for a `Mutex`, but those cannot\r\n// be put into a `static`. It also gets a lot harder with poisoning to figure\r\n// out when the mutex needs to be deallocated because it's not after the closure\r\n// finishes, but after the first successful closure finishes.\r\n//\r\n// All in all, this is instead implemented with atomics and lock-free\r\n// operations! Whee! Each `Once` has one word of atomic state, and this state is\r\n// CAS'd on to determine what to do.\r\n```\r\n\r\nThe talk about atomics and lock-free make it sound like this implementation might be more optimal then using a mutex. But the park/unpark machinery [currently relies](https://github.com/rust-lang/rust/blob/master/src/libstd/thread/mod.rs#L875) on a mutex+condvar per thread. So instead of using one mutex, it is using as many as there are waiting threads.\r\n\r\n#### Alternative implementation\r\n\r\nWhile also a bit tricky, it is still possible to just use a mutex: encode a reference to an `Arc<Mutex>` in `Once.state`. The reference will be created when the `Once` starts running, and not be dropped until the `Once` is dropped.\r\n\r\nI'd like to include the fixes in https://github.com/rust-lang/rust/pull/65719, and make unother PR with an alternative implementation using a mutex. Also a thing to remember is that if https://github.com/rust-lang/rust/pull/65719 ever lands, the standard library can just use the `Once` implementation from `parking_lot`.", "closed_by": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65796/timeline", "performed_via_github_app": null, "state_reason": "completed"}