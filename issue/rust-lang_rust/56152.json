{"url": "https://api.github.com/repos/rust-lang/rust/issues/56152", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56152/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56152/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56152/events", "html_url": "https://github.com/rust-lang/rust/issues/56152", "id": 383411004, "node_id": "MDU6SXNzdWUzODM0MTEwMDQ=", "number": 56152, "title": " no-stc panic=abort dev builds require `rust_eh_personality`", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-22T07:30:31Z", "updated_at": "2022-07-05T12:37:45Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n$ cat Cargo.toml \r\n[package]\r\nname = \"foo\"\r\nversion = \"0.1.0\"\r\nauthors = [\"Mike Hommey <mh@glandium.org>\"]\r\n\r\n[lib]\r\ncrate-type = [\"cdylib\"]\r\n\r\n[profile.dev]\r\npanic = \"abort\"\r\n\r\n[profile.release]\r\npanic = \"abort\"\r\n```\r\n\r\n```\r\n$ cat src/lib.rs\r\n#![no_std]\r\n\r\nuse core::alloc::Layout;\r\nuse core::ffi::c_void;\r\nuse core::ptr;\r\n\r\nconst CHUNK_SIZE: usize = 1 << 20;\r\n\r\n#[panic_handler]\r\n#[no_mangle]\r\npub fn panic_impl(_: &core::panic::PanicInfo) -> ! {\r\n    loop {}\r\n}\r\n\r\n#[derive(Clone, Copy, Debug)]\r\npub(crate) struct ChunkLayout(Layout);\r\n\r\n#[derive(Debug)]\r\npub(crate) struct ChunkLayoutErr;\r\n\r\nimpl ChunkLayout {\r\n    fn from_size_align(size: usize, align: usize) -> Result<Self, ChunkLayoutErr> {\r\n        if align < CHUNK_SIZE || (size & (CHUNK_SIZE - 1) != 0) {\r\n            return Err(ChunkLayoutErr);\r\n        }\r\n        Layout::from_size_align(size, align).map(ChunkLayout).map_err(|_| ChunkLayoutErr)\r\n    }\r\n}\r\n\r\n#[no_mangle]\r\npub unsafe extern \"C\" fn chunk_alloc_mmap(size: usize, align: usize) -> *mut c_void {\r\n    if let Ok(_layout) = ChunkLayout::from_size_align(size, align) {\r\n        ptr::null_mut()\r\n    } else {\r\n        ptr::null_mut()\r\n    }\r\n}\r\n```\r\n\r\n```\r\n$ cargo build\r\n   Compiling foo v0.1.0 (/tmp/foo)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.24s\r\n$ objdump -T target/debug/libfoo.so | grep rust_eh_personality\r\n0000000000000000      D  *UND*\t0000000000000000 rust_eh_personality\r\n```\r\n\r\nPractically speaking, this means the resulting library (cdylib) can't be loaded because the symbol can't be resolved.\r\n\r\nThis doesn't happen with `--release` (there is no undefined reference to `rust_eh_personality`). And this doesn't happen when the body of `chunk_alloc_mmap` is further reduced to only `ptr::null_mut()`.\r\n\r\nIf I add -Wl,-Map,map to the linker arguments, the output `map` file says the symbol reference comes from:\r\n```\r\n .data.DW.ref.rust_eh_personality\r\n                0x0000000000004008        0x8 /tmp/foo/target/debug/deps/foo.3sp59mzlmyqssn40.rcgu.o\r\n                0x0000000000004008                DW.ref.rust_eh_personality\r\n```\r\n\r\nSo rust actively creates a pointer to `rust_eh_personality` in `.data`. DW suggests this would have something to do with DWARF, so I tried enabling debug info on the release profile, but that still didn't make it happen with `--release`.\r\n\r\nCc: @japaric, @alexcrichton ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56152/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56152/timeline", "performed_via_github_app": null, "state_reason": null}