{"url": "https://api.github.com/repos/rust-lang/rust/issues/46948", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46948/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46948/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46948/events", "html_url": "https://github.com/rust-lang/rust/issues/46948", "id": 284185953, "node_id": "MDU6SXNzdWUyODQxODU5NTM=", "number": 46948, "title": "Some num tests fail for {i586, i686, x86_64}-unknown-linux-gnu", "user": {"login": "malbarbo", "id": 1678126, "node_id": "MDQ6VXNlcjE2NzgxMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1678126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/malbarbo", "html_url": "https://github.com/malbarbo", "followers_url": "https://api.github.com/users/malbarbo/followers", "following_url": "https://api.github.com/users/malbarbo/following{/other_user}", "gists_url": "https://api.github.com/users/malbarbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/malbarbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/malbarbo/subscriptions", "organizations_url": "https://api.github.com/users/malbarbo/orgs", "repos_url": "https://api.github.com/users/malbarbo/repos", "events_url": "https://api.github.com/users/malbarbo/events{/privacy}", "received_events_url": "https://api.github.com/users/malbarbo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 120005, "node_id": "MDU6TGFiZWwxMjAwMDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-testsuite", "name": "A-testsuite", "color": "f7e101", "default": false, "description": "Area: The testsuite used to check the correctness of rustc"}, {"id": 55301991, "node_id": "MDU6TGFiZWw1NTMwMTk5MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86", "name": "O-x86", "color": "6e6ec0", "default": false, "description": "Target: x86 processors"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-12-22T15:13:30Z", "updated_at": "2020-06-14T18:02:48Z", "closed_at": "2020-06-14T18:02:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following tests extract from libstd:\r\n\r\n```rust\r\n#[cfg(test)]\r\nmod tests {\r\n    use std::f32;\r\n    use std::f64;\r\n\r\n    macro_rules! assert_approx_eq {\r\n        ($a:expr, $b:expr) => ({\r\n            let (a, b) = (&$a, &$b);\r\n            assert!((*a - *b).abs() < 1.0e-6,\r\n                    \"{} is not approximately equal to {}\", *a, *b);\r\n        })\r\n    }\r\n\r\n    #[test]\r\n    fn test_mul_add() {\r\n        let nan = f64::NAN;\r\n        let inf = f64::INFINITY;\r\n        let neg_inf = f64::NEG_INFINITY;\r\n        assert_approx_eq!(12.3f64.mul_add(4.5, 6.7), 62.05);\r\n        assert_approx_eq!((-12.3f64).mul_add(-4.5, -6.7), 48.65);\r\n        assert_approx_eq!(0.0f64.mul_add(8.9, 1.2), 1.2);\r\n        assert_approx_eq!(3.4f64.mul_add(-0.0, 5.6), 5.6);\r\n        assert!(nan.mul_add(7.8, 9.0).is_nan());\r\n        assert_eq!(inf.mul_add(7.8, 9.0), inf);\r\n        assert_eq!(neg_inf.mul_add(7.8, 9.0), neg_inf);\r\n        assert_eq!(8.9f64.mul_add(inf, 3.2), inf);\r\n        assert_eq!((-3.2f64).mul_add(2.4, neg_inf), neg_inf);\r\n    }\r\n\r\n    #[test]\r\n    fn f32_test_float_bits_conv() {\r\n        assert_eq!((1f32).to_bits(), 0x3f800000);\r\n        assert_eq!((12.5f32).to_bits(), 0x41480000);\r\n        assert_eq!((1337f32).to_bits(), 0x44a72000);\r\n        assert_eq!((-14.25f32).to_bits(), 0xc1640000);\r\n        assert_approx_eq!(f32::from_bits(0x3f800000), 1.0);\r\n        assert_approx_eq!(f32::from_bits(0x41480000), 12.5);\r\n        assert_approx_eq!(f32::from_bits(0x44a72000), 1337.0);\r\n        assert_approx_eq!(f32::from_bits(0xc1640000), -14.25);\r\n\r\n        // Check that NaNs roundtrip their bits regardless of signalingness\r\n        // 0xA is 0b1010; 0x5 is 0b0101 -- so these two together clobbers all the mantissa bits\r\n        let masked_nan1 = f32::NAN.to_bits() ^ 0x002A_AAAA;\r\n        let masked_nan2 = f32::NAN.to_bits() ^ 0x0055_5555;\r\n        assert!(f32::from_bits(masked_nan1).is_nan());\r\n        assert!(f32::from_bits(masked_nan2).is_nan());\r\n\r\n        assert_eq!(f32::from_bits(masked_nan1).to_bits(), masked_nan1);\r\n        assert_eq!(f32::from_bits(masked_nan2).to_bits(), masked_nan2);\r\n    }\r\n\r\n    #[test]\r\n    fn f64_test_float_bits_conv() {\r\n        assert_eq!((1f64).to_bits(), 0x3ff0000000000000);\r\n        assert_eq!((12.5f64).to_bits(), 0x4029000000000000);\r\n        assert_eq!((1337f64).to_bits(), 0x4094e40000000000);\r\n        assert_eq!((-14.25f64).to_bits(), 0xc02c800000000000);\r\n        assert_approx_eq!(f64::from_bits(0x3ff0000000000000), 1.0);\r\n        assert_approx_eq!(f64::from_bits(0x4029000000000000), 12.5);\r\n        assert_approx_eq!(f64::from_bits(0x4094e40000000000), 1337.0);\r\n        assert_approx_eq!(f64::from_bits(0xc02c800000000000), -14.25);\r\n\r\n        // Check that NaNs roundtrip their bits regardless of signalingness\r\n        // 0xA is 0b1010; 0x5 is 0b0101 -- so these two together clobbers all the mantissa bits\r\n        let masked_nan1 = f64::NAN.to_bits() ^ 0x000A_AAAA_AAAA_AAAA;\r\n        let masked_nan2 = f64::NAN.to_bits() ^ 0x0005_5555_5555_5555;\r\n        assert!(f64::from_bits(masked_nan1).is_nan());\r\n        assert!(f64::from_bits(masked_nan2).is_nan());\r\n\r\n        assert_eq!(f64::from_bits(masked_nan1).to_bits(), masked_nan1);\r\n        assert_eq!(f64::from_bits(masked_nan2).to_bits(), masked_nan2);\r\n    }\r\n}\r\n```\r\n\r\nUsing `rustc 1.24.0-nightly (250b49205 2017-12-21)` it fails in debug mode  for the targets `{i586, i686}-unknown-linux-gnu` but works in release mode. It works in both release and debug mode for `x86_64-unknown-linux-gnu`.\r\n\r\nUsing `rustc 1.23.0-beta.2 (c9107ee93 2017-12-08)` or `rustc 1.22.1 (05e2e1c41 2017-11-22)` only `tests::test_mul_add` works in release mode for `{i586, i686, x86_64}-unknown-linux-gnu`. For debug mode all tests fails for `{i586, i686}-unknown-linux-gnu`, `tests::test_mul_add` works `for x86_64-unknown-linux-gnu`.", "closed_by": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46948/timeline", "performed_via_github_app": null, "state_reason": "completed"}