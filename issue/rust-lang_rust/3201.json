{"url": "https://api.github.com/repos/rust-lang/rust/issues/3201", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3201/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3201/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3201/events", "html_url": "https://github.com/rust-lang/rust/issues/3201", "id": 6248695, "node_id": "MDU6SXNzdWU2MjQ4Njk1", "number": 3201, "title": "Macro system apparently has trouble with nested token trees", "user": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235146, "node_id": "MDU6TGFiZWwyMzUxNDY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-syntaxext", "name": "A-syntaxext", "color": "f7e101", "default": false, "description": "Area: Syntax extensions"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/4", "html_url": "https://github.com/rust-lang/rust/milestone/4", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/4/labels", "id": 14773, "node_id": "MDk6TWlsZXN0b25lMTQ3NzM=", "number": 4, "title": "old 1.0 milestone", "description": "this milestone used to be tracking \"1.0\" bugs in aggregate; we've now broken them down into various maturity milestones so it's no longer relevant.", "creator": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 297, "state": "closed", "created_at": "2011-06-08T18:20:12Z", "updated_at": "2013-07-18T01:03:49Z", "due_on": null, "closed_at": "2013-07-18T01:03:49Z"}, "comments": 2, "created_at": "2012-08-15T19:27:35Z", "updated_at": "2012-11-29T20:45:24Z", "closed_at": "2012-11-29T20:45:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The title is my best hypothesis for what's happening. It is probably wrong.\n\nI have a set of macros that should implement a lambda calculus interpreter:\n\n```\nmacro_rules! eval {\n    { $e:tt } => (ee! { $e , (id_k) })\n}\n\nmacro_rules! ee {\n    { [$(#$x:ident)+] $([$y:ident,$v:tt])*, $k:tt } =>\n        (lookup!{$(#$x)+, $([$y,$v])*, $k});\n\n    { (\u03bb $x:ident. $e:tt) $([$y:ident,$v:tt])*, $k:tt } =>\n        (apply_k! {$k, (closure $x . $e : $([$y,$v])*)});\n\n    { ($rator:tt $rand:tt) $([$y:ident,$v:tt])*, $k:tt } =>\n        (ee! { $rator $([$y,$v])*,\n              (rator_k $rand $([$y,$v])*, $k)});\n}\n\nmacro_rules! lookup {\n    { #$x:ident, [$y:ident,$v:tt] $([$ys:ident,$vs:tt])*, $k:tt }\n    => (apply_k!{$k, $v});\n\n    { #$x:ident$(#$xs:ident)+, [$y:ident,$v:tt]$([$ys:ident,$vs:tt])+,\n     $k:tt }\n    => (lookup!{$(#$xs)+, $([$ys,($vs)])+, $k});\n}\n\nmacro_rules! apply_k {\n    { (id_k), $v:tt } => { log_syntax! { $v }; () };\n    { (rator_k $rand:tt $([$y:ident,$vs:tt])*, $k:tt), $v:tt } => (\n        ee! { $rand $([$y,$vs])*,\n              (rand_k $v, $k) }\n    );\n    { (rand_k (closure $x:ident . $e:tt : $([$y:ident,$vs:tt])*), $k:tt),\n       $v:tt } => (\n        ee! { $e [$x,$v] $([$y,$vs])*, $k }\n    )\n}\n\n```\n\nI can use this to interpret a lambda calculus term:\n\n```\nfn main() {\n    trace_macros!(true);\n\n    eval! {\n        ((\u03bb x. [#x]) (\u03bb y. [#y]))\n    };\n}\n```\n\nThis evaluates as follows, which is clearly wrong:\n\n```\neval! { ((\u03bb x.[#x])(\u03bb y.[#y])) }\nee! { ((\u03bb x.[#x])(\u03bb y.[#y])),(id_k) }\nee! { (\u03bb x.[#x]),(rator_k(\u03bb y.[#y]),(id_k)) }\napply_k! { (rator_k(\u03bb y.[#y]),(id_k)),(closure x.[#x]:) }\nlambda.rs:50:21: 50:22 error: No rules expected the token (\nlambda.rs:50         ((\u03bb x. [#x]) (\u03bb y. [#y]))\n```\n\nHowever, if I copy the last line in the macro trace and try to run that, I get a little further:\n\n```\napply_k! { (rator_k(\u03bb y.[#y]),(id_k)),(closure x.[#x]:) }\nee! { (\u03bb y.[#y]),(rand_k(closure x.[#x]:),(id_k)) }\napply_k! { (rand_k(closure x.[#x]:),(id_k)),(closure y.[#y]:) }\nlambda.rs:45:34: 45:35 error: No rules expected the token (\nlambda.rs:45     apply_k! { (rator_k(\u03bb y.[#y]),(id_k)),(closure x.[#x]:) };\n```\n\nIf I repeat the process, I get:\n\n```\napply_k! { (rand_k(closure x.[#x]:),(id_k)),(closure y.[#y]:) }\nee! { [#x][x,(closure y.[#y]:)],(id_k) }\nlambda.rs:45:48: 45:49 error: No rules expected the token (\nlambda.rs:45     apply_k! { (rand_k(closure x.[#x]:),(id_k)),(closure y.[#y]:) };\n                                                             ^\n```\n\nAnd again...\n\n```\nee! { [#x][x,(closure y.[#y]:)],(id_k) }\nlookup! { #x,[x,(closure y.[#y]:)],(id_k) }\nlambda.rs:45:17: 45:18 error: No rules expected the token (\nlambda.rs:45     ee! { [#x][x,(closure y.[#y]:)],(id_k) };\n                              ^\n```\n\nAnd again...\n\n```\nlookup! { #x,[x,(closure y.[#y]:)],(id_k) }\napply_k! { (id_k),(closure y.[#y]:) }\n(closure y.[#y]:)\n```\n\nThe last line, `(closure y.[#y]:)`, is what I would expect the original expression to evaluate to. The fact that repeated invocation causes us to make a little more progress each time makes me think there's a bug in how macro parsing works.\n", "closed_by": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3201/timeline", "performed_via_github_app": null, "state_reason": "completed"}