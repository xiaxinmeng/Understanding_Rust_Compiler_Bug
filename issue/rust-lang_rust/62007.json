{"url": "https://api.github.com/repos/rust-lang/rust/issues/62007", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62007/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62007/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62007/events", "html_url": "https://github.com/rust-lang/rust/issues/62007", "id": 458887418, "node_id": "MDU6SXNzdWU0NTg4ODc0MTg=", "number": 62007, "title": "NLL iterating and updating `&mut` fails for non-local Place.", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}], "state": "closed", "locked": false, "assignee": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2019-06-20T21:18:20Z", "updated_at": "2019-06-22T07:59:34Z", "closed_at": "2019-06-22T07:59:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Spawned off of discussion with @ecstatic-morse  and their work on PR #61787 \r\n\r\nThere is a dataflow subroutine for `Borrows`, `kill_borrows_on_place`, added in PR #56649 to resolve #46589. `kill_borrows_on_place` reads from the `on_entry` field of `BlockSets` (even though I am pretty sure no one was ever supposed to do so; its inclusion in this part of the API was a wart):\r\n\r\nhttps://github.com/rust-lang/rust/blob/f0c2bdf52e0c8bce258f1bbb5652c9691b7f3193/src/librustc_mir/dataflow/impls/borrows.rs#L205-L214\r\n\r\nI think this was written with the assumption that `sets.on_entry.clone().union(sets.gen_set)` (aka *on-entry* U *gen-set*) would represent an upper-bound on the things that should be in the kill set. (And then the subsequent loop determines which of those things to actually *put into* the kill set.)\r\n\r\nThe problem with that is that when we are computing the transfer-function initially, `on_entry` is going to be the empty-set, at least for almost all basic blocks. That all you have to work with in dataflow. So you end up with a kill-set here that is an under-approximation to what it should actually be, if you are assuming that we're supposed to start with the complete (post dataflow) on-entry and combine that with gen-set to get the upper bound on what to use for the kill-set.\r\n\r\nWhy hasn't this been a problem for us so far? Well, here's my theory:\r\n\r\n 1. With respect to soundness: if the kill-set for `Borrows` is a subset of what it should \"truly be\", then I think the compiler ends up treating borrows as living longer than they should, and so it ends up detecting conflicts that are not actually there, and so the compiler rejects code that you might have other expected it to accept.\r\n\r\n 2. With respect to expressiveness: We don't actually get into the problematic part of `kill_borrows_on_place` as often as you might think, because there's a special dodge at the start of the function:\r\n\r\nhttps://github.com/rust-lang/rust/blob/f0c2bdf52e0c8bce258f1bbb5652c9691b7f3193/src/librustc_mir/dataflow/impls/borrows.rs#L196-L203\r\n\r\n----\r\n\r\nYou combine the two points made above, and you end up with things like the following example: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=3d29327853729ec280799760d5e58003\r\n\r\n<details>\r\n<summary> Click to see the example Rust code </summary>\r\n\r\n```rust\r\nstruct List<T> {\r\n    value: T,\r\n    next: Option<Box<List<T>>>,\r\n}\r\n\r\n\r\nfn to_refs1<T>(mut list: &mut List<T>) -> Vec<&mut T> {\r\n    let mut result = vec![];\r\n    loop {\r\n        result.push(&mut list.value);\r\n        if let Some(n) = list.next.as_mut() {\r\n            list = n;\r\n        } else {\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nfn to_refs2<T>(mut list: (&mut List<T>,)) -> Vec<&mut T> {\r\n    let mut result = vec![];\r\n    loop {\r\n        result.push(&mut (list.0).value);\r\n        if let Some(n) = (list.0).next.as_mut() {\r\n            list.0 = n;\r\n        } else {\r\n            return result;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n(In that example, `to_refs2` is basically the same as `to_refs1`, except that its wrapped in a unary tuple `(T,)`. I think the intention is that if `to_refs1` is accepted, then so should `to_refs2`. But NLL currently accepts `to_refs1` and )\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62007/timeline", "performed_via_github_app": null, "state_reason": "completed"}