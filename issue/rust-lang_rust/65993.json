{"url": "https://api.github.com/repos/rust-lang/rust/issues/65993", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65993/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65993/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65993/events", "html_url": "https://github.com/rust-lang/rust/issues/65993", "id": 515139419, "node_id": "MDU6SXNzdWU1MTUxMzk0MTk=", "number": 65993, "title": "There seems to be some parameters that has not been used in the __thread_local_inner macro of the unstabilized standard library.", "user": {"login": "3442853561", "id": 21147967, "node_id": "MDQ6VXNlcjIxMTQ3OTY3", "avatar_url": "https://avatars.githubusercontent.com/u/21147967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/3442853561", "html_url": "https://github.com/3442853561", "followers_url": "https://api.github.com/users/3442853561/followers", "following_url": "https://api.github.com/users/3442853561/following{/other_user}", "gists_url": "https://api.github.com/users/3442853561/gists{/gist_id}", "starred_url": "https://api.github.com/users/3442853561/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/3442853561/subscriptions", "organizations_url": "https://api.github.com/users/3442853561/orgs", "repos_url": "https://api.github.com/users/3442853561/repos", "events_url": "https://api.github.com/users/3442853561/events{/privacy}", "received_events_url": "https://api.github.com/users/3442853561/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-31T03:44:07Z", "updated_at": "2019-11-07T07:09:19Z", "closed_at": "2019-11-07T07:09:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When I tried to learn `std::thread_local` by reading the implementation in the standard library, I found such a piece of code. There seems to be some parameters that has not been used in the `__thread_local_inner` macro of the unstabilized standard library.\r\n\r\n```Rust\r\n#[doc(hidden)]\r\n#[unstable(feature = \"thread_local_internals\",\r\n           reason = \"should not be necessary\",\r\n           issue = \"0\")]\r\n#[macro_export]\r\n#[allow_internal_unstable(thread_local_internals, cfg_target_thread_local, thread_local)]\r\n#[allow_internal_unsafe]\r\nmacro_rules! __thread_local_inner {\r\n    (@key $(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $init:expr) => {\r\n        {\r\n            #[inline]\r\n            fn __init() -> $t { $init }\r\n\r\n            unsafe fn __getit() -> $crate::option::Option<&'static $t> {\r\n                #[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\r\n                static __KEY: $crate::thread::__StaticLocalKeyInner<$t> =\r\n                    $crate::thread::__StaticLocalKeyInner::new();\r\n\r\n                #[thread_local]\r\n                #[cfg(all(\r\n                    target_thread_local,\r\n                    not(all(target_arch = \"wasm32\", not(target_feature = \"atomics\"))),\r\n                ))]\r\n                static __KEY: $crate::thread::__FastLocalKeyInner<$t> =\r\n                    $crate::thread::__FastLocalKeyInner::new();\r\n\r\n                #[cfg(all(\r\n                    not(target_thread_local),\r\n                    not(all(target_arch = \"wasm32\", not(target_feature = \"atomics\"))),\r\n                ))]\r\n                static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\r\n                    $crate::thread::__OsLocalKeyInner::new();\r\n\r\n                __KEY.get(__init)\r\n            }\r\n\r\n            unsafe {\r\n                $crate::thread::LocalKey::new(__getit)\r\n            }\r\n        }\r\n    };\r\n    ($(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $init:expr) => {\r\n        $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =\r\n            $crate::__thread_local_inner!(@key $(#[$attr])* $vis $name, $t, $init);\r\n    }\r\n}\r\n```\r\n\r\n`$(#[$attr:meta])*`, `$vis` and `$name` in `(@key $(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $init:expr)` seems to be useless.\r\n\r\nSince this is a macro without stability, why don't we remove these parameters? Like\r\n\r\n```Rust\r\nmacro_rules! __thread_local_inner {\r\n    (@key $t:ty, $init:expr) => {\r\n        // blablabla\r\n    };\r\n    ($(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $init:expr) => {\r\n        $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =\r\n            $crate::__thread_local_inner!(@key $t, $init);\r\n    }\r\n}\r\n```\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65993/timeline", "performed_via_github_app": null, "state_reason": "completed"}