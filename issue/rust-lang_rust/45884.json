{"url": "https://api.github.com/repos/rust-lang/rust/issues/45884", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45884/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45884/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45884/events", "html_url": "https://github.com/rust-lang/rust/issues/45884", "id": 272404734, "node_id": "MDU6SXNzdWUyNzI0MDQ3MzQ=", "number": 45884, "title": "Invalid casts for C-style enums should trigger the \"overflowing_literals\" lint", "user": {"login": "Michael-F-Bryan", "id": 17380079, "node_id": "MDQ6VXNlcjE3MzgwMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/17380079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Michael-F-Bryan", "html_url": "https://github.com/Michael-F-Bryan", "followers_url": "https://api.github.com/users/Michael-F-Bryan/followers", "following_url": "https://api.github.com/users/Michael-F-Bryan/following{/other_user}", "gists_url": "https://api.github.com/users/Michael-F-Bryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Michael-F-Bryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Michael-F-Bryan/subscriptions", "organizations_url": "https://api.github.com/users/Michael-F-Bryan/orgs", "repos_url": "https://api.github.com/users/Michael-F-Bryan/repos", "events_url": "https://api.github.com/users/Michael-F-Bryan/events{/privacy}", "received_events_url": "https://api.github.com/users/Michael-F-Bryan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-09T01:01:10Z", "updated_at": "2020-06-11T18:01:52Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Is there any reason why the \"integer out of range\" lint doesn't trigger when you cast a C-style enum to an integer type which isn't big enough?\r\n\r\nFor example say I have the following program:\r\n\r\n```rust\r\nenum Foo {\r\n    A = 1,\r\n    C = 1234,\r\n}\r\n\r\nfn main() {\r\n    let a = Foo::A as u32;\r\n    let c = Foo::C as u8;\r\n    let normal = 1234 as u8;\r\n    println!(\"{}, {}, {}\", a, c, normal);\r\n}\r\n```\r\n\r\nWhen you compile it, you get a warning on the integer cast, but not the `Foo::C as u8` line.\r\n\r\n```\r\n   Compiling playground v0.0.1 (file:///playground)\r\nwarning: literal out of range for u8\r\n --> src/main.rs:9:18\r\n  |\r\n9 |     let normal = 1234 as u8;\r\n  |                  ^^^^\r\n  |\r\n  = note: #[warn(overflowing_literals)] on by default\r\n\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.46 secs\r\n     Running `target/debug/playground`\r\n\r\n1, 210, 210\r\n```\r\n\r\nI would have thought the compiler knows what integer size a C-style enum can fit into and then be able to lint accordingly. So for this case a `Foo`'s largest variant has a value of `1234` meaning it can fit into a `u16` (or `i16`), but not a `u8`.\r\n\r\n[(playground)](https://play.rust-lang.org/?gist=76a4606a72b21ea88adf7cd0858d16e8&version=nightly)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45884/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45884/timeline", "performed_via_github_app": null, "state_reason": null}