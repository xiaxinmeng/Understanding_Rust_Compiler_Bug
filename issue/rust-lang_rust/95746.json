{"url": "https://api.github.com/repos/rust-lang/rust/issues/95746", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95746/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95746/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95746/events", "html_url": "https://github.com/rust-lang/rust/issues/95746", "id": 1195460601, "node_id": "I_kwDOAAsO6M5HQUf5", "number": 95746, "title": "`Allocator::grow` does not verify all safety conditions of `GlobalAlloc::realloc`", "user": {"login": "djkoloski", "id": 7554649, "node_id": "MDQ6VXNlcjc1NTQ2NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/7554649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djkoloski", "html_url": "https://github.com/djkoloski", "followers_url": "https://api.github.com/users/djkoloski/followers", "following_url": "https://api.github.com/users/djkoloski/following{/other_user}", "gists_url": "https://api.github.com/users/djkoloski/gists{/gist_id}", "starred_url": "https://api.github.com/users/djkoloski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djkoloski/subscriptions", "organizations_url": "https://api.github.com/users/djkoloski/orgs", "repos_url": "https://api.github.com/users/djkoloski/repos", "events_url": "https://api.github.com/users/djkoloski/events{/privacy}", "received_events_url": "https://api.github.com/users/djkoloski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-04-07T03:07:00Z", "updated_at": "2022-04-12T20:35:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`Allocator::grow` does not verify that the new allocation size, when rounded up to a multiple of `align`, does not overflow `isize::MAX`. This can cause it to call `realloc` with invalid arguments:\r\n\r\n```rust\r\n#![deny(unsafe_op_in_unsafe_fn, clippy::missing_safety_doc, clippy::undocumented_unsafe_blocks)]\r\n#![feature(allocator_api)]\r\n\r\nuse std::alloc::{Allocator, Global, GlobalAlloc, Layout, System};\r\n\r\nstruct MyGlobalAlloc;\r\n\r\nunsafe impl GlobalAlloc for MyGlobalAlloc {\r\n    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\r\n        // SAFETY: The safety requirements for `alloc` match the safety docs for `System.alloc`.\r\n        unsafe { System.alloc(layout) }\r\n    }\r\n\r\n    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\r\n        // SAFETY: The safety requirements for `dealloc` match the safety docs for `System.dealloc`.\r\n        unsafe {\r\n            System.dealloc(ptr, layout);\r\n        }\r\n    }\r\n\r\n    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\r\n        let new_layout = Layout::from_size_align(new_size, layout.align()).unwrap();\r\n        // Uh oh! The safety guarantees for `realloc` have been violated!\r\n        assert!(new_layout.pad_to_align().size() <= isize::MAX as usize);\r\n\r\n        // SAFETY: The safety requirements for `realloc` match the safety docs for `System.realloc`.\r\n        unsafe { System.realloc(ptr, layout, new_size) }\r\n    }\r\n}\r\n\r\n#[global_allocator]\r\nstatic GLOBAL: MyGlobalAlloc = MyGlobalAlloc;\r\n\r\nfn main() {\r\n    let initial_layout = Layout::from_size_align(2, 2).unwrap();\r\n    let final_layout = Layout::from_size_align(isize::MAX as usize, 2).unwrap();\r\n    let ptr = Global.allocate(initial_layout).unwrap();\r\n\r\n    // SAFETY:\r\n    // - `ptr` is allocated from `Global` with layout `initial_layout`.\r\n    // - `final_layout.size()` is `isize::MAX` which is greater than `initial_layout.size()`, which\r\n    //   is 2.\r\n    let ptr = unsafe { Global.grow(ptr.cast(), initial_layout, final_layout).unwrap() };\r\n    // SAFETY: `ptr` is allocated from `Global` with `final_layout`.\r\n    unsafe {\r\n        Global.deallocate(ptr.cast(), final_layout);\r\n    }\r\n}\r\n```\r\n\r\nThis sample panics at the assertion in `<MyGlobalAlloc as GlobalAlloc>::realloc`. It's not clear whether:\r\n\r\n- The safety requirements of `Allocator::grow` need to include the missing clause from `realloc`.\r\n- `realloc` should be relaxed to allow for allocations larger than `isize::MAX`.\r\n- The implementation of `Allocator::grow` should check for this situation and return `AllocError`.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.61.0-nightly (0677edc86 2022-03-31)\r\nbinary: rustc\r\ncommit-hash: 0677edc86e342f333d4828b0ee1ef395a4e70fe5\r\ncommit-date: 2022-03-31\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.61.0-nightly\r\nLLVM version: 14.0.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95746/timeline", "performed_via_github_app": null, "state_reason": null}