{"url": "https://api.github.com/repos/rust-lang/rust/issues/110607", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110607/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110607/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110607/events", "html_url": "https://github.com/rust-lang/rust/issues/110607", "id": 1676830491, "node_id": "I_kwDOAAsO6M5j8mcb", "number": 110607, "title": "Rustc won't compile when combining hrtb, hof, generics, destructure syntax, and async", "user": {"login": "DieracDelta", "id": 13730968, "node_id": "MDQ6VXNlcjEzNzMwOTY4", "avatar_url": "https://avatars.githubusercontent.com/u/13730968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DieracDelta", "html_url": "https://github.com/DieracDelta", "followers_url": "https://api.github.com/users/DieracDelta/followers", "following_url": "https://api.github.com/users/DieracDelta/following{/other_user}", "gists_url": "https://api.github.com/users/DieracDelta/gists{/gist_id}", "starred_url": "https://api.github.com/users/DieracDelta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DieracDelta/subscriptions", "organizations_url": "https://api.github.com/users/DieracDelta/orgs", "repos_url": "https://api.github.com/users/DieracDelta/repos", "events_url": "https://api.github.com/users/DieracDelta/events{/privacy}", "received_events_url": "https://api.github.com/users/DieracDelta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-04-20T14:20:49Z", "updated_at": "2023-04-20T21:10:48Z", "closed_at": "2023-04-20T19:48:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI wrote [this code](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=e3e4fcb748b79b2c0613e0c212fa1ad8):\r\n\r\n```rust\r\nuse futures::{future::LocalBoxFuture, FutureExt};\r\nuse std::sync::Arc;\r\nuse std::marker::PhantomData;\r\n\r\n#[derive(Clone)]\r\npub struct Foo<I, J> {\r\n    bar: usize,\r\n    barr: usize,\r\n    _a: PhantomData<(I, J)>\r\n}\r\n\r\npub struct StoreLambda<I, J>(Arc<\r\n    dyn for<'a> Fn(\r\n      &'a I,\r\n      &'a mut J\r\n    ) -> LocalBoxFuture<'a, ()>\r\n>);\r\n\r\nimpl<I, J> Foo<I, J> {\r\n    fn build(&self) -> StoreLambda<I, J>{\r\n        let Self {\r\n            bar, .. } = self.clone();\r\n        \r\n        StoreLambda(Arc::new(move |\r\n            foo1: &I, \r\n            foo2: &mut J,\r\n        | -> LocalBoxFuture<()>{\r\n            async move {\r\n                if bar == 5 {\r\n                    println!(\"this is a usage of bar {:?}\", bar);\r\n                };\r\n                ()\r\n            }.boxed_local()\r\n        }))\r\n        \r\n    }\r\n}\r\n```\r\n\r\nI expected for the code to compile.\r\n\r\nInstead, the code did not compile, with the following error:\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0277]](https://doc.rust-lang.org/stable/error_codes/E0277.html): can't compare `&usize` with `{integer}`\r\n  --> src/lib.rs:29:24\r\n   |\r\n29 |                 if bar == 5 {\r\n   |                        ^^ no implementation for `&usize == {integer}`\r\n   |\r\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&usize`\r\n   = help: the trait `PartialEq` is implemented for `usize`\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\nAnd if I dereference `bar`:\r\n```\r\nerror: lifetime may not live long enough\r\n  --> src/lib.rs:28:13\r\n   |\r\n20 |       fn build(&self) -> StoreLambda<I, J>{\r\n   |                - let's call the lifetime of this reference `'1`\r\n...\r\n28 | /             async move {\r\n29 | |                 if *bar == 5 {\r\n30 | |                     println!(\"this is a usage of bar {:?}\", bar);\r\n31 | |                 };\r\n32 | |                 ()\r\n33 | |             }.boxed_local()\r\n   | |___________________________^ returning this value requires that `'1` must outlive `'static`\r\n```\r\n\r\nRustc will compile the code if I [remove the generics](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=51d91f8e182c15963beb7db13f0694fb) or [remove the destructure syntax](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=b51510cff863462924c5268cad5b2a8e). I'm guessing this is an artifact of the `Self { .. }` destructuring syntax not exactly `clone/copy`-ing the contained elements. From the error, it looks like `rustc` is considering these elements as not cloned and part of `Self`. Hence the lifetime error. The pointer dereference error, I'm not so sure about.\r\n\r\nA related note: it looks like the lifetime relationship I'm trying to express is only possible to construct if I return `StoreLambda(Arc::new(move || ..))`. E.g. \r\n\r\n```\r\nfn build(&self) -> StoreLambda<I, J>{\r\n        let bar = self.bar;\r\n        let closure = move |\r\n            foo1: &I, \r\n            foo2: &mut J,\r\n        | -> LocalBoxFuture<()>{\r\n            async move {\r\n                println!(\"this is a usage of bar {:?}\", bar);\r\n                ()\r\n            }.boxed_local()\r\n        };\r\n        \r\n        StoreLambda(Arc::new(closure))\r\n    }\r\n```\r\n\r\nDoesn't compile with the following error:\r\n\r\n```\r\nerror[[E0308]](https://doc.rust-lang.org/stable/error_codes/E0308.html): mismatched types\r\n  --> src/lib.rs:32:21\r\n   |\r\n32 |         StoreLambda(Arc::new(closure))\r\n   |                     ^^^^^^^^^^^^^^^^^ one type is more general than the other\r\n   |\r\n   = note: expected struct `Pin<Box<dyn futures::Future<Output = ()>>>`\r\n              found struct `Pin<Box<(dyn futures::Future<Output = ()> + 'a)>>`\r\n```\r\n\r\nMaybe this is sound and the error is due to something about the contra/covariance of arguments and return values? Not sure, thought I'd mention as well.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.68.2 (9eb3afe9e 2023-03-27)\r\nbinary: rustc\r\ncommit-hash: 9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0\r\ncommit-date: 2023-03-27\r\nhost: aarch64-apple-darwin\r\nrelease: 1.68.2\r\nLLVM version: 15.0.6\r\n```", "closed_by": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110607/timeline", "performed_via_github_app": null, "state_reason": "completed"}