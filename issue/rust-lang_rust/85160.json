{"url": "https://api.github.com/repos/rust-lang/rust/issues/85160", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85160/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85160/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85160/events", "html_url": "https://github.com/rust-lang/rust/issues/85160", "id": 885247262, "node_id": "MDU6SXNzdWU4ODUyNDcyNjI=", "number": 85160, "title": "Bad error messages when passing and using 2 PartialEq or PartialOrd traits to function.", "user": {"login": "subamanis", "id": 41115188, "node_id": "MDQ6VXNlcjQxMTE1MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/41115188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/subamanis", "html_url": "https://github.com/subamanis", "followers_url": "https://api.github.com/users/subamanis/followers", "following_url": "https://api.github.com/users/subamanis/following{/other_user}", "gists_url": "https://api.github.com/users/subamanis/gists{/gist_id}", "starred_url": "https://api.github.com/users/subamanis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/subamanis/subscriptions", "organizations_url": "https://api.github.com/users/subamanis/orgs", "repos_url": "https://api.github.com/users/subamanis/repos", "events_url": "https://api.github.com/users/subamanis/events{/privacy}", "received_events_url": "https://api.github.com/users/subamanis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-05-10T22:27:23Z", "updated_at": "2021-05-11T02:28:22Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Given the following code:\r\n\r\n```rust\r\n<#![allow(unused)]\r\nuse std::cmp::Ordering;\r\n\r\nfn main() {\r\n    let m1 = MyStruct(0);\r\n    let m2 = MyStruct(1);\r\n    \r\n   \r\n    println!(\"{:?}\",m1 == m2);\r\n    println!(\"{:?}\",m1 > m2);\r\n}\r\n\r\nfn test_eq(m1 :&impl PartialEq, m2 :&impl PartialEq) {\r\n    println!(\"{:?}\",m1 == m2);\r\n}\r\n\r\nfn test_ord(m1 :&impl PartialOrd, m2 :&impl PartialOrd) {\r\n    println!(\"{:?}\",m1 > m2);\r\n}\r\n\r\n#[derive(Debug)]\r\nstruct MyStruct(usize);\r\n\r\nimpl PartialEq for MyStruct {\r\n    fn eq(&self, other: &Self) -> bool {\r\n        self.0 == other.0\r\n    }\r\n}\r\n\r\nimpl PartialOrd for MyStruct {\r\n        fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\r\n            Some(self.0.cmp(&other.0))\r\n        }\r\n}>\r\n```\r\n\r\nCompilation fails with the following messages:\r\n\r\n```\r\n<error[E0277]: can't compare `impl PartialEq` with `impl PartialEq`\r\n  --> src/main.rs:14:24\r\n   |\r\n14 |     println!(\"{:?}\",m1 == m2);\r\n   |                        ^^ no implementation for `impl PartialEq == impl PartialEq`\r\n   |\r\n   = note: required because of the requirements on the impl of `PartialEq<&impl PartialEq>` for `&impl PartialEq`\r\nhelp: consider further restricting this bound\r\n   |\r\n13 | fn test_eq(m1 :&impl PartialEq + PartialEq<impl PartialEq>, m2 :&impl PartialEq) {\r\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:18:26\r\n   |\r\n17 | fn test_ord(m1 :&impl PartialOrd, m2 :&impl PartialOrd) {\r\n   |                  ---------------       --------------- found type parameter\r\n   |                  |\r\n   |                  expected type parameter\r\n18 |     println!(\"{:?}\",m1 > m2);\r\n   |                          ^^ expected type parameter `impl PartialOrd`, found a different type parameter `impl PartialOrd`\r\n   |\r\n   = note: expected reference `&impl PartialOrd` (type parameter `impl PartialOrd`)\r\n              found reference `&impl PartialOrd` (type parameter `impl PartialOrd`)\r\n   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\r\n```\r\n\r\nCompilation fails on both \"test_eq\" and \"test_ord\" functions while the equivelant code when run from main compiles and runs. Moreover I find the errors confusing, especially the second where it states that 2 identical types are mismatched.\r\n\r\nIf the methods are changed to this:\r\n```rust\r\nfn test_eq<E :PartialEq>(m1 :E, m2 :E) {\r\n    println!(\"{:?}\",m1 == m2);\r\n}\r\n\r\nfn test_ord<P :PartialOrd>(m1 :P, m2 :P) {\r\n    println!(\"{:?}\",m1 > m2);\r\n}\r\n```\r\nThen the code compiles and runs. The compiler messages don't make it clear to me at all, as a Rust noob, why any of this is happening.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85160/timeline", "performed_via_github_app": null, "state_reason": null}