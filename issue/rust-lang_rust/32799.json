{"url": "https://api.github.com/repos/rust-lang/rust/issues/32799", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32799/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32799/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32799/events", "html_url": "https://github.com/rust-lang/rust/issues/32799", "id": 146691542, "node_id": "MDU6SXNzdWUxNDY2OTE1NDI=", "number": 32799, "title": "rustc error msg poor when *indirectly* expecting F: Fn but given F: FnOnce", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-07T17:26:40Z", "updated_at": "2017-05-02T15:44:32Z", "closed_at": "2017-05-02T15:44:32Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The `rustc` error message is mystifying to users when they unknowingly have created a closure that only implemented `FnOnce` and are passing it into a context that indirectly requires an `Fn`.\n\n(By indirectly, I mainly mean a case like where one has a `trait Handler`, an `impl<F:Fn> Handler for F { ... }`, and the context is a function argument of type `H` where `<H: Handler>`)\n\nA concrete example:\n\n``` rust\npub struct Response;\npub struct Router;\npub struct IronError;\npub struct Request;\n\npub type IronResult<T> = Result<T, IronError>;\n\npub trait Handler { }\n\nimpl<F> Handler for F\n    where F: Send + Sync + Fn(&mut Request) -> IronResult<Response>\n{ }\n\nimpl Router {\n    pub fn post_h<H>(&mut self, _handler: H) -> &mut Router\n        where H: Handler\n    { unimplemented!() }\n\n    pub fn post_f<H>(&mut self, _handler: H) -> &mut Router\n        where H: Send + Sync + Fn(&mut Request) -> IronResult<Response>\n    { unimplemented!() }\n}\n\nfn body(_s: String) -> IronResult<Response> { unimplemented!() }\n\nfn main() { attempt(Router); }\n\n#[cfg(not(this_works))]\nfn attempt(mut r: Router) {\n    let owned = String::new();\n    r.post_h(move |req: &mut Request| -> IronResult<Response> { body(owned) });\n}\n\n#[cfg(this_works)]\nfn attempt(mut r: Router) {\n    let owned = String::new();\n    r.post_h(move |_eq: &mut Request| -> IronResult<Response> { body(owned.clone()) });\n}\n\n#[cfg(this_fails_to_compile_but_has_a_good_error_message)]\nfn attempt(mut r: Router) {\n    let owned = String::new();\n    r.post_f(move |_eq: &mut Request| -> IronResult<Response> { body(owned) });\n}\n```\n\nTrying to compile the above (http://is.gd/qBje7g) yields the following error message:\n\n```\n<anon>:31:7: 31:13 error: the trait `for<'r> std::ops::Fn<(&'r mut Request,)>` is not implemented for the type `[closure@<anon>:31:14: 31:78 owned:std::string::String]` [E0277]\n<anon>:31     r.post_h(move |req: &mut Request| -> IronResult<Response> { body(owned) });\n                ^~~~~~\n<anon>:31:7: 31:13 help: see the detailed explanation for E0277\nerror: aborting due to previous error\n```\n\nThis error message is accurate, but not specific enough. In particular, I find that people often focus on the lifetime(s) reported in the message and are wondering if that is somehow the reason that their closure is not implementing the listed trait bound.\n\nI have found that only after taking steps such as wrapping the closure expression in a call to a function of the form\n\n``` rust\nfn id<F>(x: F) -> F where F: Fn(&mut Request) -> IronResult<Response> { x }\n```\n\nonly then do I get an error message that points out that my closure doesn't implement `Fn` at all, and that I need to avoid moving the captured `owned` state out the closure when it is executed.\n\n---\n\nIt is worth noting that the error message you get when the `F: Fn` requirement is more directly imposed on the closure; in that situation, you get something like:\n\n```\n<anon>:44:70: 44:75 error: cannot move out of captured outer variable in an `Fn` closure [E0507]\n<anon>:44     r.post_f(move |_eq: &mut Request| -> IronResult<Response> { body(owned) });\n                                                                               ^~~~~\n<anon>:44:70: 44:75 help: see the detailed explanation for E0507\nerror: aborting due to previous error\n```\n\nwhich users tend to be able to deal with. (Basically this is just me repeating the point that adding a call to a `id` function with the specific expected bound can help yield a better error message.)\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32799/timeline", "performed_via_github_app": null, "state_reason": "completed"}