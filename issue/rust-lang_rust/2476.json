{"url": "https://api.github.com/repos/rust-lang/rust/issues/2476", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/2476/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/2476/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/2476/events", "html_url": "https://github.com/rust-lang/rust/issues/2476", "id": 4851076, "node_id": "MDU6SXNzdWU0ODUxMDc2", "number": 2476, "title": "Consider making ty::t \"fatter\"", "user": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2012-06-01T05:12:35Z", "updated_at": "2016-08-17T09:05:49Z", "closed_at": "2016-08-17T01:11:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We could possibly save some time over our structural hashing and equality code if we revamped `ty::t` to become a packed `u64` value in something approaching this form:\n- nil, bot, bool, ints, uints, floats, str, self, type, opaque box become constant values\n- estr, box, uniq, vec, ptr, rptr become (type tag: u8, mutability flags: u8, vstore/region ID: u16, enclosed type: u32)\n- enum, iface, class, res become (type tag: u8, crate ID: u8, substs ID: u16, node ID: u32)\n- tup becomes (type tag: u8, tup ID: u32)\n- rec becomes (type tag: u8, fieldset ID: u16, tup ID: u32)\n- fn becomes (type tag: u8, purity/proto/retstyle flags: u8, constrs ID: u16, signature ID: u32)\n- param becomes (type tag: u8, crate ID: u8, parameter ID: u16, node ID: u32)\n- var becomes (type tag: u8, vid: u32)\n- constr becomes (type tag: u8, constrs ID: u16)\n- opaque closure ptr becomes (type tag: u8, closure kind: u8)\n\nWe need several side tables:\n- A hash table of regions found in the program.\n- A table of linearized substs. The table contains subsituted types; at each node is a hash table (or an association list) of self_r and self_ty to ID.\n- A fieldset table.\n- A table of vstores and regions.\n- A table of linearized tuples.\n- A table of linearized function types. The return value comes first, followed by the arguments.\n- A table of constraints. Doesn't need to be fast; we rarely if ever use constraints.\n\nBy \"linearized\" I mean that the type in question is converted into a list and concatenated into one large string of types encoded in this way. So, for example, a list of 4 types would be 16 bytes long (but note that there are some complications with function parameter modes). This byte string forms the key in the table; thus there is never any need to traverse pointers when doing comparisons for equality, as we simply compare byte strings.\n\nThis is very rough, but I think it might speed things up.\n", "closed_by": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/2476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/2476/timeline", "performed_via_github_app": null, "state_reason": "completed"}