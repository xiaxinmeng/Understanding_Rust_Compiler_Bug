{"url": "https://api.github.com/repos/rust-lang/rust/issues/87093", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87093/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87093/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87093/events", "html_url": "https://github.com/rust-lang/rust/issues/87093", "id": 942443479, "node_id": "MDU6SXNzdWU5NDI0NDM0Nzk=", "number": 87093, "title": "Functions/closures do not coerce to trait objects and give confusing diagnostics", "user": {"login": "blaahaj", "id": 54417783, "node_id": "MDQ6VXNlcjU0NDE3Nzgz", "avatar_url": "https://avatars.githubusercontent.com/u/54417783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blaahaj", "html_url": "https://github.com/blaahaj", "followers_url": "https://api.github.com/users/blaahaj/followers", "following_url": "https://api.github.com/users/blaahaj/following{/other_user}", "gists_url": "https://api.github.com/users/blaahaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/blaahaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blaahaj/subscriptions", "organizations_url": "https://api.github.com/users/blaahaj/orgs", "repos_url": "https://api.github.com/users/blaahaj/repos", "events_url": "https://api.github.com/users/blaahaj/events{/privacy}", "received_events_url": "https://api.github.com/users/blaahaj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-07-12T21:00:47Z", "updated_at": "2021-08-07T16:27:56Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Bad case:\r\n\r\n```rust\r\npub trait Foo {}\r\nimpl Foo for fn() {}\r\n\r\npub fn bar() {}\r\nconst FOOBAR: &'static dyn Foo = &bar;\r\n```\r\n\r\n```\r\nerror[E0277]: the trait bound `fn() {bar}: Foo` is not satisfied\r\n --> bug.rs:5:34\r\n  |\r\n5 | const FOOBAR: &'static dyn Foo = &bar;\r\n  |                                  ^^^^ the trait `Foo` is not implemented for `fn() {bar}`\r\n  |\r\n  = note: required for the cast to the object type `dyn Foo`\r\n```\r\n\r\nWorse case:\r\n\r\n```rust\r\npub trait Foo {}\r\nimpl Foo for fn() {}\r\n\r\nconst FOOBAR: &'static dyn Foo = &||{};\r\n```\r\n\r\n```\r\nerror[E0277]: the trait bound `[closure@bug.rs:5:35: 5:39]: Foo` is not satisfied\r\n --> bug.rs:5:34\r\n  |\r\n5 | const FOOBAR: &'static dyn Foo = &||{};\r\n  |                                  ^^^^^ the trait `Foo` is not implemented for `[closure@bug.rs:5:35: 5:39]`\r\n  |\r\n  = note: required for the cast to the object type `dyn Foo`\r\n```\r\n\r\nIn all cases, the workaround is to cast to the function type, for example `&(||{} as fn())`. But this is not obvious, not hinted by the diagnostic, and it is surprising that it is required. Moreover, it can in one case produce an even worse diagnostic:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> bug.rs:5:34\r\n  |\r\n5 | const FOOBAR: &'static dyn Foo = &(bar as fn(_));\r\n  |                                  ^^^^^^^^^^^^^^^ one type is more general than the other\r\n  |\r\n  = note: expected trait `Foo`\r\n             found trait `Foo`\r\n```\r\n\r\nIt would be most convenient if no casting would be needed. If casting is unavoidable however, the diagnostic could at least hint this.\r\n\r\nThese are minimal cases with minimally complicated types. In practice the problem will be less clear. Consider for example that the type signature shown in the diagnostic may include implied lifetime details. It is then easy to mistakenly assume that the lifetimes are the problem.\r\n\r\nA practical use of this coercion is making type-safe arrays of pointers to functions with diverse signatures. In such a context it can be especially annoying to have to write each signature twice (in the function/closure definition and in the cast).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87093/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87093/timeline", "performed_via_github_app": null, "state_reason": null}