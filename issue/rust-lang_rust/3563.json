{"url": "https://api.github.com/repos/rust-lang/rust/issues/3563", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3563/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3563/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3563/events", "html_url": "https://github.com/rust-lang/rust/issues/3563", "id": 7073230, "node_id": "MDU6SXNzdWU3MDczMjMw", "number": 3563, "title": "default method ICE", "user": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/9", "html_url": "https://github.com/rust-lang/rust/milestone/9", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/9/labels", "id": 194126, "node_id": "MDk6TWlsZXN0b25lMTk0MTI2", "number": 9, "title": "0.6", "description": "", "creator": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 203, "state": "closed", "created_at": "2012-10-11T18:15:24Z", "updated_at": "2015-01-21T01:43:22Z", "due_on": "2013-03-25T07:00:00Z", "closed_at": "2013-04-02T18:27:52Z"}, "comments": 6, "created_at": "2012-09-23T17:37:58Z", "updated_at": "2014-06-16T21:56:35Z", "closed_at": "2013-01-08T22:02:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Working on an example app and got an ICE as soon as I added a default method (add_points).\n\n```\n// ASCII art shape renderer.\n// Demonstrates traits, impls, operator overloading, non-copyable struct, unit testing.\n// To run execute: rustc --test shapes.rs && ./shapes\n\n// Rust's core library is tightly bound to the language itself so it is automatically linked in.\n// However the std library is designed to be optional (for code that must run on constrained\n//  environments like embedded devices or special environments like kernel code) so it must\n// be explicitly linked in.\nextern mod std;\n\n// Extern mod controls linkage. Use controls the visibility of names to modules that are\n// already linked in. Using WriterUtil allows us to use the write_line method.\nuse io::WriterUtil;\n\n// Represents a position on a canvas.\nstruct Point\n{\n    x: int,\n    y: int,\n}\n\n// Represents an offset on a canvas. (This has the same structure as a Point.\n// but different semantics).\nstruct Size\n{\n    width: int,\n    height: int,\n}\n\nstruct Rect\n{\n    top_left: Point,\n    size: Size,\n}\n\n// TODO: operators\n\n// Contains the information needed to do shape rendering via ASCII art.\nstruct AsciiArt\n{\n    width: uint,\n    height: uint,\n    priv fill: char,\n    priv lines: ~[~[mut char]],\n\n    // This struct can be quite large so we'll disable copying: developers need\n    // to either pass these structs around via borrowed pointers or move them.\n    drop {}\n}\n\n// It's common to define a constructor sort of function to create struct instances.\n// If there is a canonical constructor it is typically named the same as the type.\n// Other constructor sort of functions are typically named from_foo, from_bar, etc. \nfn AsciiArt(width: uint, height: uint, fill: char) -> AsciiArt\n{\n    // Use an anonymous function to build a vector of vectors containing\n    // blank characters for each position in our canvas.\n    let lines = do vec::build_sized(height)\n        |push|\n        {\n            for height.times\n            {\n                let mut line = ~[mut];    \n                vec::grow_set(line, width-1, '.', '.');\n                push(line);\n            }\n        };\n\n    // Rust code often returns values by omitting the trailing semi-colon\n    // instead of using an explicit return statement.\n    AsciiArt {width: width, height: height, fill: fill, lines: lines}\n}\n\n// Methods particular to the AsciiArt struct.\nimpl AsciiArt\n{\n    fn add_pt(x: int, y: int)\n    {\n        if x >= 0 && x < self.width as int\n        {\n            if y >= 0 && y < self.height as int\n            {\n                // Note that numeric types don't implicitly convert to each other.\n                let v = y as uint;\n                let h = x as uint;\n\n                // Vector subscripting will normally copy the element, but &v[i]\n                // will return a reference which is what we need because the\n                // element is:\n                // 1) potentially large\n                // 2) needs to be modified\n                let row = &self.lines[v];\n                row[h] = self.fill;\n            }\n        }\n    }\n}\n\n// Allows AsciiArt to be converted to a string using the libcore ToStr trait.\n// Note that the %s fmt! specifier will not call this automatically.\nimpl AsciiArt : ToStr\n{\n    fn to_str() -> ~str\n    {\n        // Convert each line into a string.\n        let lines = do self.lines.map |line| {str::from_chars(line)};\n\n        // Concatenate the lines together using a new-line.\n        str::connect(lines, \"\\n\")\n    }\n}\n\n// This is similar to an interface in other languages: it defines a protocol which\n// developers can implement for arbitrary concrete types.\ntrait Canvas\n{\n    fn add_point(shape: Point);\n    fn add_rect(shape: Rect);\n\n    // Unlike interfaces traits support default implementations.\n    // Got an ICE as soon as I added this method.\n    fn add_points(shapes: &[Point])\n    {\n        for shapes.each |pt| {self.add_point(pt)};\n    }\n}\n\n// Here we provide an implementation of the Canvas methods for AsciiArt.\n// Other implementations could also be provided (e.g. for PDF or Apple's Quartz)\n// and code can use them polymorphically via the Canvas trait.\nimpl AsciiArt : Canvas\n{\n    fn add_point(shape: Point)\n    {\n        self.add_pt(shape.x, shape.y);\n    }\n\n    fn add_rect(shape: Rect)\n    {\n        // Add the top and bottom lines.\n        for int::range(shape.top_left.x, shape.top_left.x + shape.size.width)\n        |x|\n        {\n            self.add_pt(x, shape.top_left.y);\n            self.add_pt(x, shape.top_left.y + shape.size.height - 1);\n        }\n\n        // Add the left and right lines.\n        for int::range(shape.top_left.y, shape.top_left.y + shape.size.height)\n        |y|\n        {\n            self.add_pt(shape.top_left.x, y);\n            self.add_pt(shape.top_left.x + shape.size.width - 1, y);\n        }\n    }\n}\n\n// Rust's unit testing framework is currently a bit under-developed so we'll use\n// this little helper.\npub fn check_strs(actual: &str, expected: &str) -> bool\n{\n    if actual != expected\n    {\n        io::stderr().write_line(fmt!(\"Found:\\n%s\\nbut expected\\n%s\", actual, expected));\n        return false;\n    }\n    return true;\n}\n\n#[test]\nfn test_ascii_art_ctor()\n{\n    let art = AsciiArt(3, 3, '*');\n    assert check_strs(art.to_str(), \"...\\n...\\n...\");\n}\n\n#[test]\nfn test_add_pt()\n{\n    let art = AsciiArt(3, 3, '*');\n    art.add_pt(0, 0);\n    art.add_pt(0, -10);\n    art.add_pt(1, 2);\n    assert check_strs(art.to_str(), \"*..\\n...\\n.*.\");\n}\n\n#[test]\nfn test_shapes()\n{\n    let art = AsciiArt(4, 4, '*');\n    art.add_rect(Rect {top_left: Point {x: 0, y: 0}, size: Size {width: 4, height: 4}});\n    art.add_point(Point {x: 2, y: 2});\n    assert check_strs(art.to_str(), \"****\\n*..*\\n*.**\\n****\");\n}\n```\n\nThis is with rust from Sep 22, 2012.\n", "closed_by": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3563/timeline", "performed_via_github_app": null, "state_reason": "completed"}