{"url": "https://api.github.com/repos/rust-lang/rust/issues/41906", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41906/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41906/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41906/events", "html_url": "https://github.com/rust-lang/rust/issues/41906", "id": 227919871, "node_id": "MDU6SXNzdWUyMjc5MTk4NzE=", "number": 41906, "title": "Collision of Borrow::borrow() and RefCell::borrow()", "user": {"login": "gavento", "id": 956446, "node_id": "MDQ6VXNlcjk1NjQ0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/956446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavento", "html_url": "https://github.com/gavento", "followers_url": "https://api.github.com/users/gavento/followers", "following_url": "https://api.github.com/users/gavento/following{/other_user}", "gists_url": "https://api.github.com/users/gavento/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavento/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavento/subscriptions", "organizations_url": "https://api.github.com/users/gavento/orgs", "repos_url": "https://api.github.com/users/gavento/repos", "events_url": "https://api.github.com/users/gavento/events{/privacy}", "received_events_url": "https://api.github.com/users/gavento/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-05-11T08:47:34Z", "updated_at": "2022-11-27T11:21:58Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The trait `std::borrow::Borrow` and type `std::rc::RefCell` both have a method `borrow()`. This leads to ambiguity, possibly hard-to-understand errors and most importantly breaking unrelated code by adding `use std::borrow::Borrow;`. \r\n\r\nConsider the following code:\r\n```rust\r\nuse std::rc::Rc;\r\nuse std::cell::RefCell;\r\n// Uncommenting causes compile error\r\n//use std::borrow::Borrow;\r\n\r\npub struct S {\r\n\tflag : bool\r\n}\r\n\r\ntype SCell = Rc<RefCell<S>>;\r\n\r\nfn main() {\r\n    // Type annotations just for clarity\r\n    let s : SCell = Rc::new(RefCell::new(S {flag: false}));\r\n    let sb : &S = &s.borrow();\r\n    println!(\"{:?}\", sb.flag);\r\n}\r\n```\r\n[(Rust playground link)](https://play.rust-lang.org/?gist=261852bc9a7c357851f32b4f858209f3&version=stable&backtrace=0)\r\n\r\nThis code compiles and works as intended. But when you add `use std::borrow::Borrow;`, the compiler complains:\r\n\r\n```\r\nrustc 1.17.0 (56124baa9 2017-04-24)\r\nerror[E0277]: the trait bound `std::rc::Rc<std::cell::RefCell<S>>: std::borrow::Borrow<S>` is not satisfied\r\n  --> <anon>:13:21\r\n   |\r\n13 |     let sb: &S = &s.borrow();\r\n   |                     ^^^^^^ the trait `std::borrow::Borrow<S>` is not implemented for `std::rc::Rc<std::cell::RefCell<S>>`\r\n   |\r\n   = help: the following implementations were found:\r\n             <std::rc::Rc<T> as std::borrow::Borrow<T>>\r\n```\r\n\r\nThe problem is that the method call `s.borrow()` is applied to `Rc` which is an instance of `Borrow` rather than to the contained `RefCell` as intended (and as working in the example above), and the error just complains that this borrow is not possible (which is fine).\r\n\r\nThis is mentioned by @spirali in related #41865, but this issue deals with a different part of the problem. (Namely that if you remove the type annotation from `let sb : &S = ...`, the error message will complain about ambiguity of the `Borrow::borrow()` return type in a confusing way.)\r\n\r\nI would propose to change the method name for `RefCell::borrow` to something else (a painful change, but leaving such bugs around things implementing the `Deref` trait might be even worse for the language long-term) and avoid this naming collisions whenever possible (is there a guideline for that?). Any other solutions?\r\n\r\n ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41906/reactions", "total_count": 17, "+1": 17, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41906/timeline", "performed_via_github_app": null, "state_reason": null}