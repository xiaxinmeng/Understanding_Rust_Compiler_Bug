{"url": "https://api.github.com/repos/rust-lang/rust/issues/110339", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110339/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110339/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110339/events", "html_url": "https://github.com/rust-lang/rust/issues/110339", "id": 1669012071, "node_id": "I_kwDOAAsO6M5jexpn", "number": 110339, "title": "\"Implementation not general enough\" with async and projection, fixed by wrapping with `async move`", "user": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 679846574, "node_id": "MDU6TGFiZWw2Nzk4NDY1NzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-generators", "name": "A-generators", "color": "f7e101", "default": false, "description": "Area: Generators"}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-04-14T22:18:06Z", "updated_at": "2023-04-24T15:47:01Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Another instance of #110338 (pretty similar to #71723 I guess). Code sample:\r\n\r\n```rust\r\npub fn serve() -> impl Future<Output = ()> + Send {\r\n    async move {\r\n        let netstack = Foo;\r\n        let stream = futures::stream::iter(vec![]);\r\n        let work_items_fut =\r\n            // async move {\r\n                stream.for_each(|()| async {\r\n                    let _ns = netstack.clone();\r\n                })\r\n            // .await }\r\n        ;\r\n\r\n        let mut _fut0 = MaybeDone::Future(work_items_fut);\r\n        let mut _fut0 = unsafe { core::pin::Pin::new_unchecked(&mut _fut0) };\r\n        _fut0.await\r\n    }\r\n}\r\n```\r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=55ee1f96d69ef810ab8433d1b57490ef)\r\n\r\n```\r\nerror: implementation of `std::marker::Send` is not general enough\r\n  --> src/lib.rs:24:5\r\n   |\r\n24 | /     async move {\r\n25 | |         let netstack = Foo;\r\n26 | |         let stream = futures::stream::iter(vec![]);\r\n27 | |         let work_items_fut =\r\n...  |\r\n38 | |         _fut0.await\r\n39 | |     }\r\n   | |_____^ implementation of `std::marker::Send` is not general enough\r\n   |\r\n   = note: `std::marker::Send` would have to be implemented for the type `&'0 Foo`, for any lifetime `'0`...\r\n   = note: ...but `std::marker::Send` is actually implemented for the type `&'1 Foo`, for some specific lifetime `'1`\r\n\r\nerror[[E0308]](https://doc.rust-lang.org/stable/error_codes/E0308.html): mismatched types\r\n  --> src/lib.rs:24:5\r\n   |\r\n24 | /     async move {\r\n25 | |         let netstack = Foo;\r\n26 | |         let stream = futures::stream::iter(vec![]);\r\n27 | |         let work_items_fut =\r\n...  |\r\n38 | |         _fut0.await\r\n39 | |     }\r\n   | |_____^ one type is more general than the other\r\n   |\r\n   = note: expected `async` block `[async block@src/lib.rs:29:38: 31:18]`\r\n              found `async` block `[async block@src/lib.rs:29:38: 31:18]`\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground` due to 2 previous errors\r\n```\r\n\r\nWhat's interesting about this one to me is that uncommenting the commented lines (wrapping in an `async move`) removes the error.\r\n\r\nThe projection type being in `MaybeDone` is load-bearing, so I suspect something like #92449 would have fixed this.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110339/timeline", "performed_via_github_app": null, "state_reason": null}