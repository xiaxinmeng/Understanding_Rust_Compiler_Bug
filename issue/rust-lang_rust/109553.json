{"url": "https://api.github.com/repos/rust-lang/rust/issues/109553", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109553/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109553/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109553/events", "html_url": "https://github.com/rust-lang/rust/issues/109553", "id": 1638836810, "node_id": "I_kwDOAAsO6M5hrqpK", "number": 109553, "title": "Likely data race in `core::cell::OnceCell`", "user": {"login": "dead-claudia", "id": 4483844, "node_id": "MDQ6VXNlcjQ0ODM4NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4483844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dead-claudia", "html_url": "https://github.com/dead-claudia", "followers_url": "https://api.github.com/users/dead-claudia/followers", "following_url": "https://api.github.com/users/dead-claudia/following{/other_user}", "gists_url": "https://api.github.com/users/dead-claudia/gists{/gist_id}", "starred_url": "https://api.github.com/users/dead-claudia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dead-claudia/subscriptions", "organizations_url": "https://api.github.com/users/dead-claudia/orgs", "repos_url": "https://api.github.com/users/dead-claudia/repos", "events_url": "https://api.github.com/users/dead-claudia/events{/privacy}", "received_events_url": "https://api.github.com/users/dead-claudia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-24T06:57:12Z", "updated_at": "2023-03-24T07:00:24Z", "closed_at": "2023-03-24T06:59:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "In https://github.com/rust-lang/rust/blob/master/library/core/src/cell/once.rs#L97-L100, I saw this comment as reason to avoid locks and atomicity in `OnceCell::set()` and elsewhere:\r\n\r\n> This is the only place where we set the slot, no races due to reentrancy/concurrency are possible, and we've checked that slot is currently `None`, so this write maintains the `inner`'s invariant.\r\n\r\nThis isn't sufficient justification to avoid atomic operations or other synchronization. Under multiple concurrent `set` calls, especially with multi-word inner values, this could still result in data races:\r\n\r\n1. Concurrent write on initialization\r\n\r\n\t| Thread 1: `.set(foo)` | Thread 2: `.set(bar)` |\r\n\t|:-|:-|\r\n\t| Load enum variant | Load enum variant |\r\n\t| Check if `Some` | Check if `Some` |\r\n\t| Skip branch | Skip branch |\r\n\t| Store `Some` as enum variant | Store `Some` as enum variant |\r\n\t| Store first chunk from `foo` | |\r\n\t| | \u26a0 Store first chunk from `bar` |\r\n\t| | Store second chunk from `bar` |\r\n\t| \u26a0 Store second chunk from `foo` | |\r\n\r\n\tThis would result in the first chunk of the slot set to that of `bar` and the second to that of `foo`.\r\n\r\n2. Incomplete write from thread preemption\r\n\r\n\t| Thread 1: `.set(foo)` | Thread 2: `.get()` |\r\n\t|:-|:-|\r\n\t| Load enum variant | |\r\n\t| Check if `Some` | |\r\n\t| Skip branch | |\r\n\t| Store `Some` as enum variant | |\r\n\t| *preempted* | Load enum variant |\r\n\t| | \u26a0 Load value |\r\n\t| | \u26a0 Continue |\r\n\t| *resume* | |\r\n\t| Store first chunk from `foo` | |\r\n\t| Store second chunk from `foo` | |\r\n\r\n\tThis would result in thread 2 reading uninitialized data. This case also poses a problem for single-word option values, and all that's needed is the value and enum variant read both occurring after the enum variant write and before the value write.\r\n\r\n3. Writes and reads performed in different order\r\n\r\n\t| Thread 1: `.set(foo)` | Thread 2: `.get()` |\r\n\t|:-|:-|\r\n\t| Load enum variant | |\r\n\t| Check if `Some` | |\r\n\t| Skip branch | |\r\n\t| Store `Some` as enum variant | |\r\n\t| | Load enum variant |\r\n\t| Store second chunk from `foo` | |\r\n\t| | \u26a0 Load first chunk from `foo` |\r\n\t| Store first chunk from `foo` | |\r\n\t| | Load second chunk from `foo` |\r\n\r\n\tThis would result in thread 2 reading partially uninitialized data.\r\n", "closed_by": {"login": "dead-claudia", "id": 4483844, "node_id": "MDQ6VXNlcjQ0ODM4NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4483844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dead-claudia", "html_url": "https://github.com/dead-claudia", "followers_url": "https://api.github.com/users/dead-claudia/followers", "following_url": "https://api.github.com/users/dead-claudia/following{/other_user}", "gists_url": "https://api.github.com/users/dead-claudia/gists{/gist_id}", "starred_url": "https://api.github.com/users/dead-claudia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dead-claudia/subscriptions", "organizations_url": "https://api.github.com/users/dead-claudia/orgs", "repos_url": "https://api.github.com/users/dead-claudia/repos", "events_url": "https://api.github.com/users/dead-claudia/events{/privacy}", "received_events_url": "https://api.github.com/users/dead-claudia/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109553/timeline", "performed_via_github_app": null, "state_reason": "completed"}