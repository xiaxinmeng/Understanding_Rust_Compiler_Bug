{"url": "https://api.github.com/repos/rust-lang/rust/issues/76382", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76382/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76382/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76382/events", "html_url": "https://github.com/rust-lang/rust/issues/76382", "id": 694139789, "node_id": "MDU6SXNzdWU2OTQxMzk3ODk=", "number": 76382, "title": "Get rid of `clean` in rustdoc", "user": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 234876, "node_id": "MDU6TGFiZWwyMzQ4NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-hard", "name": "E-hard", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Hard / a lot"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 630799571, "node_id": "MDU6TGFiZWw2MzA3OTk1NzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compilemem", "name": "I-compilemem", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to memory usage during compilation."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-09-05T18:16:10Z", "updated_at": "2021-12-15T20:34:58Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, rustdoc has its own data structure for basically everything in the compiler: [`librustdoc::clean::types`](https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc/clean/types/index.html). Collecting these ahead of time is expensive (https://github.com/rust-lang/rust/pull/74590#issuecomment-674587005) and it would be better to instead calculate them on demand. This would reduce a ton of code duplication, speed up rustdoc, and hopefully fix bugs related to caching (https://github.com/rust-lang/rust/pull/74879) and get rid of hacks like fake IDs (#75355).\r\n\r\nOn the other hand, it's really hard.\r\n\r\nThe basic idea is to, instead of discarding the `TyCtxt` after `run_core`, instead pass in `TyCtxt` to `render`. Then `render` will calculate the info it needs as it comes up - possibly still with caching in `DocContext`, but because this is on-demand it will be like `cache.get().or_else(|| calculate_info())`, not `cache.get().unwrap()` which is what leads to the bugs.\r\n\r\ncc @rust-lang/rustdoc - is this something you're interested in?\r\ncc @RDambrosio016, @kixiron - this would break your idea to have `librustdoc_render` be a separate crate from `librustdoc`, because there would inherently be no stable interface: `DocContext` would be returning rustc types directly.\r\ncc @P1n3appl3 - this would require rewriting large parts of the JSON backend.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76382/timeline", "performed_via_github_app": null, "state_reason": null}