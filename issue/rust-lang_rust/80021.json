{"url": "https://api.github.com/repos/rust-lang/rust/issues/80021", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80021/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80021/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80021/events", "html_url": "https://github.com/rust-lang/rust/issues/80021", "id": 766243478, "node_id": "MDU6SXNzdWU3NjYyNDM0Nzg=", "number": 80021, "title": "[Optimization] Equivalent functions are not merged because their panic information differs.", "user": {"login": "LunarLambda", "id": 38919842, "node_id": "MDQ6VXNlcjM4OTE5ODQy", "avatar_url": "https://avatars.githubusercontent.com/u/38919842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LunarLambda", "html_url": "https://github.com/LunarLambda", "followers_url": "https://api.github.com/users/LunarLambda/followers", "following_url": "https://api.github.com/users/LunarLambda/following{/other_user}", "gists_url": "https://api.github.com/users/LunarLambda/gists{/gist_id}", "starred_url": "https://api.github.com/users/LunarLambda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LunarLambda/subscriptions", "organizations_url": "https://api.github.com/users/LunarLambda/orgs", "repos_url": "https://api.github.com/users/LunarLambda/repos", "events_url": "https://api.github.com/users/LunarLambda/events{/privacy}", "received_events_url": "https://api.github.com/users/LunarLambda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-12-14T10:14:24Z", "updated_at": "2020-12-17T11:53:48Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I was playing around in the compiler explorer with APIs using `AsRef<T>` to provide more ergonomic interfaces. \r\nMy example used `AsRef<[u8]>` to allow an API to use string literals, byte arrays, byte strings, etc.\r\n\r\nI wanted to know if there was an elegant way to avoid monomorphization overhead for large functions that only differ by a `AsRef::as_ref` call at the very top, or if the compiler could do this for me in optmized builds.\r\n\r\nMy tests can be found here:\r\n\r\nhttps://godbolt.org/z/5MzKMT\r\n\r\nHowever, far more interestingly, I saw that `asref_inner` and `asref_direct` were not merged by the compiler in an optimized build, despite being 100% the same code.\r\n\r\nThe only difference is that they have different source location info for a potential panic.\r\nPerhaps this is a contrived case, since fully equivalent functions are probably rare in real code,\r\nhowever I still thought it was worth bringing up.\r\n\r\nPerhaps the functions could be merged if the panic information was smuggled through a register or the stack at the call site instead?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80021/timeline", "performed_via_github_app": null, "state_reason": null}