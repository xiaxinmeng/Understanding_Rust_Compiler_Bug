{"url": "https://api.github.com/repos/rust-lang/rust/issues/33446", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/33446/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/33446/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/33446/events", "html_url": "https://github.com/rust-lang/rust/issues/33446", "id": 153349680, "node_id": "MDU6SXNzdWUxNTMzNDk2ODA=", "number": 33446, "title": "Prevent \"Target-incompatible DataLayout\" LLVM asserts.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-05-05T23:38:56Z", "updated_at": "2019-02-23T20:39:10Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Example of such an assertion:\n`Assertion 'TM.isCompatibleDataLayout(getDataLayout()) && \"Can't create a MachineFunction using a Module with a \" \"Target-incompatible DataLayout attached\\n\"' failed.`\n\nIt appears that since LLVM 3.7, `DataLayout` is checked for target compatibility, and as `joker-eph` on LLVM's IRC channel on OFTC explains:\n\n> technically a Target can implement a \"compatibility check\" if it is willing to relax the constrain that the DL matches, but we haven't implemented anything like that that I know of. So the backend check if the Module data layout is the same as what the target wants. \n\nThe relevant method is `bool TargetMachine::isCompatibleDataLayout(const DataLayout &Candidate)`.\n\n`joker-eph` suggests warning and overriding an incompatible data layout with the target default.\nHowever, I don't think we can do anything but error because we would've already used the (incompatible) data layout string for determining type layouts.\n\nWe can at least provide the target default data layout string for the user in that situation.\ncc @alexcrichton\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/33446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/33446/timeline", "performed_via_github_app": null, "state_reason": null}