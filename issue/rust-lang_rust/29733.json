{"url": "https://api.github.com/repos/rust-lang/rust/issues/29733", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29733/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29733/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29733/events", "html_url": "https://github.com/rust-lang/rust/issues/29733", "id": 116004643, "node_id": "MDU6SXNzdWUxMTYwMDQ2NDM=", "number": 29733, "title": "Improve \"previous borrow\" location in borrow error message", "user": {"login": "thibault-ml", "id": 138014, "node_id": "MDQ6VXNlcjEzODAxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/138014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thibault-ml", "html_url": "https://github.com/thibault-ml", "followers_url": "https://api.github.com/users/thibault-ml/followers", "following_url": "https://api.github.com/users/thibault-ml/following{/other_user}", "gists_url": "https://api.github.com/users/thibault-ml/gists{/gist_id}", "starred_url": "https://api.github.com/users/thibault-ml/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thibault-ml/subscriptions", "organizations_url": "https://api.github.com/users/thibault-ml/orgs", "repos_url": "https://api.github.com/users/thibault-ml/repos", "events_url": "https://api.github.com/users/thibault-ml/events{/privacy}", "received_events_url": "https://api.github.com/users/thibault-ml/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 867483626, "node_id": "MDU6TGFiZWw4Njc0ODM2MjY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-fixed-by-NLL", "name": "NLL-fixed-by-NLL", "color": "f799ea", "default": false, "description": "Bugs fixed, but only when NLL is enabled."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-10T01:18:23Z", "updated_at": "2019-04-22T15:06:12Z", "closed_at": "2019-04-22T15:06:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the following code:\r\n\r\n``` rust\r\nuse std::collections::HashMap;\r\n\r\nfn main() {\r\n    let mut vec = vec![0, 1, 2, 3, 4];\r\n    let mut map = HashMap::<&i32, &str>::new();\r\n\r\n    for key in &vec {\r\n        map.insert(key, \"value\");\r\n    }\r\n\r\n    vec.push(5);\r\n}\r\n```\r\n\r\nThe compiler will complain with the following error message:\r\n\r\n```\r\nerror[E0502]: cannot borrow `vec` as mutable because it is also borrowed as immutable\r\n  --> /tmp/test_borrow_message.rs:11:5\r\n   |\r\n7  |     for key in &vec {\r\n   |                 --- immutable borrow occurs here\r\n...\r\n11 |     vec.push(5);\r\n   |     ^^^ mutable borrow occurs here\r\n12 | }\r\n   | - immutable borrow ends here\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nWhile the borrow error is expected, the message seems pretty unclear to me. \r\n\r\nRemoving/commenting the `map.insert(key, \"value\");` line will allow rustc to compile the file, which shows the problem isn't really exactly with the borrow happening at line 7 (for loop), but with the fact that the borrow is then extended to the lifetime of the `map` variable.\r\nThis can be verified with the following code which works because the `map` variable is gone by the time we need to mutable borrow again:\r\n\r\n``` rust\r\nuse std::collections::HashMap;\r\n\r\nfn main() {\r\n    let mut vec = vec![0, 1, 2, 3, 4];\r\n    {\r\n        let mut map = HashMap::<&i32, &str>::new();\r\n        for key in &vec {\r\n            map.insert(key, \"value\");\r\n        }\r\n    }\r\n    vec.push(5);\r\n}\r\n```\r\n\r\nIt feels like the compiler should be clearer as to where the borrow is actually \"stored\". It's able to show that the borrow ends when `map` goes away, so I feel it should be clearer that the borrow issue stems from the `map.insert(key, \"value\");` line, which extends the borrow's \"lifetime\" to the lifetime of `map`\r\n\r\n(this error is output by rust 1.4.0)\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29733/timeline", "performed_via_github_app": null, "state_reason": "completed"}