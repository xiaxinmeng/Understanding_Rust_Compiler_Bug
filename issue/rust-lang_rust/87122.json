{"url": "https://api.github.com/repos/rust-lang/rust/issues/87122", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87122/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87122/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87122/events", "html_url": "https://github.com/rust-lang/rust/issues/87122", "id": 944098176, "node_id": "MDU6SXNzdWU5NDQwOTgxNzY=", "number": 87122, "title": "Poor diagnostic for closure not returning Result when there is a return Ok/Err in it", "user": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-07-14T06:40:16Z", "updated_at": "2021-07-14T20:44:21Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nI was doing a refactoring of moving a match arm into a closure and I got confused at the error when it was saying the closure had the wrong type. I think that one part of it is that the error should say something about it being that the closure return type is wrong, not just \"expected x type\" like it was just a normal variable being the wrong type, and because of this insufficiently specific message, I couldn't really tell what exactly had the wrong type. Additionally, there's a custom improved diagnostic (shown elsewhere below) that this is missing the condition for because there's an explicit return in the closure, leading to this confusing behaviour.\r\n\r\nGiven the following code: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=35f4adc1e8a72ab59e0a6501259638be\r\n\r\n```rust\r\nfn returns_result() -> Result<(), ()> {\r\n    Ok(())\r\n}\r\n\r\nfn main() {\r\n    let f = || {\r\n        if false {\r\n            return Err(());\r\n        }\r\n        // do some stuff\r\n        returns_result()?;\r\n        // do some more stuff\r\n        println!(\"hello world!\");\r\n    };\r\n\r\n    f();\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:6:16\r\n   |\r\n6  |       let f = || {\r\n   |  ________________^\r\n7  | |         if false {\r\n8  | |             return Err(());\r\n9  | |         }\r\n...  |\r\n13 | |         println!(\"hello world!\");\r\n14 | |     };\r\n   | |_____^ expected enum `Result`, found `()`\r\n   |\r\n   = note:   expected type `Result<_, ()>`\r\n           found unit type `()`\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\nerror[E0277]: the `?` operator can only be used in a closure that returns `Resul\r\nt` or `Option` (or another type that implements `FromResidual`)\r\n  --> src/main.rs:8:25\r\n   |\r\n6  |       let f = || {\r\n   |  _____________-\r\n7  | |         // do some stuff\r\n8  | |         returns_result()?;\r\n   | |                         ^ cannot use the `?` operator in a closure that r\r\neturns `()`\r\n9  | |         // do some more stuff\r\n10 | |         println!(\"hello world!\");\r\n11 | |     };\r\n   | |_____- this function should return `Result` or `Option` to accept `?`\r\n   |\r\n   = help: the trait `FromResidual<Result<Infallible, ()>>` is not implemented f\r\nor `()`\r\n   = note: required by `from_residual`\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\nIf you delete the `if false { ... }` block, it results in the desired output.\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n\r\nrustc 1.55.0-nightly (8b87e8539 2021-07-08)\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87122/timeline", "performed_via_github_app": null, "state_reason": null}