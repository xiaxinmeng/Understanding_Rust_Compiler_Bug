{"url": "https://api.github.com/repos/rust-lang/rust/issues/62320", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62320/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62320/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62320/events", "html_url": "https://github.com/rust-lang/rust/issues/62320", "id": 463477409, "node_id": "MDU6SXNzdWU0NjM0Nzc0MDk=", "number": 62320, "title": "Coherence violation when inherent method is added to type", "user": {"login": "ebfull", "id": 3794471, "node_id": "MDQ6VXNlcjM3OTQ0NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3794471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebfull", "html_url": "https://github.com/ebfull", "followers_url": "https://api.github.com/users/ebfull/followers", "following_url": "https://api.github.com/users/ebfull/following{/other_user}", "gists_url": "https://api.github.com/users/ebfull/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebfull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebfull/subscriptions", "organizations_url": "https://api.github.com/users/ebfull/orgs", "repos_url": "https://api.github.com/users/ebfull/repos", "events_url": "https://api.github.com/users/ebfull/events{/privacy}", "received_events_url": "https://api.github.com/users/ebfull/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-02T23:25:40Z", "updated_at": "2023-04-05T17:39:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems that because inherent methods are always called before trait methods, when a dependency adds an inherent method to a struct (which _should_ be a backwards-compatible change to its API requiring no major semver bump) your code that was previously calling a trait method on that struct will (silently) switch to calling the inherent method.\r\n\r\nAs an example, I could make an extension trait for `Option` defining a method named `foo`, publish `my_cool_crate`, and then if an inherent method named `foo` is added to `Option` in a new version of `core` then my crate can suddenly behave differently despite merely upgrading my Rust compiler. Perhaps it could also fail to compile (like if the signature is \"compatible\" at the callsite but then a typechecking error happens elsewhere).\r\n\r\nI'm not sure if this is a coherence violation or not, or whether this has already been observed/discussed elsewhere. (Had no luck when I searched for github issues about it.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62320/timeline", "performed_via_github_app": null, "state_reason": null}