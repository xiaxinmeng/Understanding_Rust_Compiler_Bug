{"url": "https://api.github.com/repos/rust-lang/rust/issues/96470", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96470/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96470/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96470/events", "html_url": "https://github.com/rust-lang/rust/issues/96470", "id": 1216886625, "node_id": "I_kwDOAAsO6M5IiDdh", "number": 96470, "title": "Conditionally obtaining a function, then calling, emits suboptimal indirect calls (that can be direct)", "user": {"login": "Phosra", "id": 90156453, "node_id": "MDQ6VXNlcjkwMTU2NDUz", "avatar_url": "https://avatars.githubusercontent.com/u/90156453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phosra", "html_url": "https://github.com/Phosra", "followers_url": "https://api.github.com/users/Phosra/followers", "following_url": "https://api.github.com/users/Phosra/following{/other_user}", "gists_url": "https://api.github.com/users/Phosra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phosra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phosra/subscriptions", "organizations_url": "https://api.github.com/users/Phosra/orgs", "repos_url": "https://api.github.com/users/Phosra/repos", "events_url": "https://api.github.com/users/Phosra/events{/privacy}", "received_events_url": "https://api.github.com/users/Phosra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-04-27T06:56:40Z", "updated_at": "2023-04-05T17:34:50Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This seems more like an LLVM issue?\r\n\r\nhttps://rust.godbolt.org/z/TEncx3h5G\r\n\r\nThe simplest case of this issue is that, when conditionally choosing a function pointer (or closure), then calling it, the codegen will emit code to obtain one of the branches, then indirectly dispatch to the function pointer (as opposed to using a direct call).\r\n\r\nFor small functions, this codegen is noticeably worse, as the pattern always denies inlining.\r\n\r\nConsider these trivial examples:\r\n```rs\r\nlet rounding_mode = if condition {\r\n f64::floor\r\n} else {\r\n f64::ceil\r\n};\r\n\r\nrounding_mode(x)\r\n```\r\nGenerally, both branches would be evaluated, and then the result would be chosen based on the condition. Here, instead, a full function call is required to round the float.\r\n\r\n```rs\r\nlet rounding_mode = if condition {\r\n f64::floor\r\n} else {\r\n f64::ceil\r\n};\r\n\r\nrounding_mode(0.0)\r\n```\r\nHere, the value should always be 0.0, yet it too requires a function call, passing the zero back and fourth.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96470/timeline", "performed_via_github_app": null, "state_reason": null}