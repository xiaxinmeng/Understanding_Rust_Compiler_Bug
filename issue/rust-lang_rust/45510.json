{"url": "https://api.github.com/repos/rust-lang/rust/issues/45510", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45510/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45510/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45510/events", "html_url": "https://github.com/rust-lang/rust/issues/45510", "id": 268224350, "node_id": "MDU6SXNzdWUyNjgyMjQzNTA=", "number": 45510, "title": "`FnOnce` doesn't seem to support type-based dispatch (as `Add`, etc. do)", "user": {"login": "eternaleye", "id": 99404, "node_id": "MDQ6VXNlcjk5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/99404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eternaleye", "html_url": "https://github.com/eternaleye", "followers_url": "https://api.github.com/users/eternaleye/followers", "following_url": "https://api.github.com/users/eternaleye/following{/other_user}", "gists_url": "https://api.github.com/users/eternaleye/gists{/gist_id}", "starred_url": "https://api.github.com/users/eternaleye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eternaleye/subscriptions", "organizations_url": "https://api.github.com/users/eternaleye/orgs", "repos_url": "https://api.github.com/users/eternaleye/repos", "events_url": "https://api.github.com/users/eternaleye/events{/privacy}", "received_events_url": "https://api.github.com/users/eternaleye/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-10-24T23:55:52Z", "updated_at": "2019-06-28T13:48:14Z", "closed_at": "2019-06-28T13:48:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**UPDATE:** [Mentoring instructions below.](https://github.com/rust-lang/rust/issues/45510#issuecomment-358780469)\r\n\r\n---\r\n\r\nHere's a minimal example program showing the issue:\r\n\r\n```Rust\r\n#![feature(fn_traits)] \r\n#![feature(unboxed_closures)]\r\n\r\nstruct Ishmael;\r\nstruct Maybe;\r\nstruct CallMe;\r\n\r\nimpl FnOnce<(Ishmael,)> for CallMe {\r\n    type Output = ();\r\n    extern \"rust-call\" fn call_once(self, _args: (Ishmael,)) -> () {\r\n        println!(\"Split your lungs with blood and thunder!\");\r\n    }\r\n}\r\n\r\nimpl FnOnce<(Maybe,)> for CallMe {\r\n    type Output = ();\r\n    extern \"rust-call\" fn call_once(self, _args: (Maybe,)) -> () {\r\n        println!(\"So we just met, and this is crazy\");\r\n    }\r\n}\r\n\r\nfn main() {\r\n    CallMe(Ishmael);\r\n    CallMe(Maybe);\r\n}\r\n```\r\n\r\nThis works perfectly if you comment out either the `Ishmael` or `Maybe` implementations, and the corresponding call. I've wanted this behavior at various times - if nothing else, it'd be useful for binding to certain parts of C++ - and at least in _theory_ it's the same exact mechanism `Add::add` uses.\r\n\r\nIn addition, the error message is (to ~~steal~~ lovingly borrow a term from the Perl 6 community) \"less than awesome\" - it informs the user `error[E0059]: cannot use call notation; the first type parameter for the function trait is neither a tuple nor unit` when it clearly is (as it succeeds in the single-impl case).\r\n\r\nIt also claims `error[E0619]: the type of this value must be known in this context`, but only for the argument of the _first_ call - reversing the order also exchanges the subject of the error message.\r\n\r\nShould this be supported? If so, what needs done? If not, how can we make the error messages more helpful? Not supporting it now and adding support later is forwards-compatible, but at very least the error message should probably be improved before stabilization (cc #29625)\r\n\r\nEDIT: Ah, seems this may be covered by #18952", "closed_by": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45510/reactions", "total_count": 6, "+1": 2, "-1": 0, "laugh": 4, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45510/timeline", "performed_via_github_app": null, "state_reason": "completed"}