{"url": "https://api.github.com/repos/rust-lang/rust/issues/50619", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50619/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50619/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50619/events", "html_url": "https://github.com/rust-lang/rust/issues/50619", "id": 322031875, "node_id": "MDU6SXNzdWUzMjIwMzE4NzU=", "number": 50619, "title": "fs::read_dir iterator loops forever on same entry", "user": {"login": "sharkdp", "id": 4209276, "node_id": "MDQ6VXNlcjQyMDkyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4209276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sharkdp", "html_url": "https://github.com/sharkdp", "followers_url": "https://api.github.com/users/sharkdp/followers", "following_url": "https://api.github.com/users/sharkdp/following{/other_user}", "gists_url": "https://api.github.com/users/sharkdp/gists{/gist_id}", "starred_url": "https://api.github.com/users/sharkdp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sharkdp/subscriptions", "organizations_url": "https://api.github.com/users/sharkdp/orgs", "repos_url": "https://api.github.com/users/sharkdp/repos", "events_url": "https://api.github.com/users/sharkdp/events{/privacy}", "received_events_url": "https://api.github.com/users/sharkdp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123110, "node_id": "MDU6TGFiZWwxMjMxMTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-linux", "name": "O-linux", "color": "6e6ec0", "default": false, "description": "Operating system: Linux"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-10T18:21:43Z", "updated_at": "2018-06-26T05:56:18Z", "closed_at": "2018-06-26T05:56:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#### Bug description\r\n\r\nThere are certain directories that cause the `fs::read_dir` iterator (`ReadDir`) to loop indefinitely. While I am not sure what the exact properties of these directories are, I know that they do appear in `/proc` in the presence of zombie processes.\r\n\r\nConsider the following Rust program ...\r\n\r\n``` rust\r\nuse std::env;\r\nuse std::fs;\r\n\r\nfn main() {\r\n    let path = env::args().nth(1).unwrap();\r\n\r\n    for entry in fs::read_dir(path).unwrap() {\r\n        println!(\"{:?}\", entry);\r\n    }\r\n}\r\n```\r\n\r\n... and a zombie process with process id `$ZOMBIE_PID` (see below how to create a zombie process on purpose). Running the above program with:\r\n\r\n``` bash\r\ncargo run -- /proc/$ZOMBIE_PID/net\r\n```\r\n\r\nresults in an infinite loop, printing:\r\n```\r\nErr(Os { code: 22, kind: InvalidInput, message: \"Invalid argument\" })\r\nErr(Os { code: 22, kind: InvalidInput, message: \"Invalid argument\" })\r\nErr(Os { code: 22, kind: InvalidInput, message: \"Invalid argument\" })\r\n...\r\n```\r\n\r\n#### How to create a zombie process to reproduce this?\r\n\r\n1. Copy the code from https://stackoverflow.com/a/25228579/704831 into a file called `zombie.c`\r\n2. Compile it `gcc -o zombie zombie.c`\r\n3. Run it: `./zombie`\r\n4. Get the PID of the \"defunct\"/zombie process: `ps -ef | grep '<defunct>'`\r\n\r\n#### Analysis\r\n\r\nI did some debugging and I believe I found the cause of this.\r\n\r\nWhen called on `/proc/$ZOMBIE_PID/net`, the `readdir_r`(3) function\r\n\r\n``` c\r\nint readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);\r\n```\r\n\r\nreturns error code `22` and - *at the same time* - returns `NULL` in `*result`, signalling the end of the directory stream.\r\n\r\nIf I am reading the code in the standard library correctly, this case can not be handled properly at the moment:\r\n\r\nCode from the `next` function of `impl Iterator for ReadDir`:\r\n\r\nhttps://github.com/rust-lang/rust/blob/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/src/libstd/sys/unix/fs.rs#L252-L262\r\n\r\nTo handle this properly (without looping forever), one would probably have to check for `entry_ptr.is_null()` in the first (`Some(Err(...))`) case as well. The result (whether or not it returned a `NULL` pointer) would probably have to be stored in some internal state of the iterator. On the forthcoming `next` call, the iterator could then return `None`.\r\n\r\n#### Meta\r\n\r\n```\r\n> rustc --version\r\nrustc 1.25.0 (84203cac6 2018-03-25)\r\n\r\n> uname -s -r -v -m -p -i -o\r\nLinux 4.16.7-1-ARCH #1 SMP PREEMPT Wed May 2 21:12:36 UTC 2018 x86_64 unknown unknown GNU/Linux\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50619/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50619/timeline", "performed_via_github_app": null, "state_reason": "completed"}