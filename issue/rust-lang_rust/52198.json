{"url": "https://api.github.com/repos/rust-lang/rust/issues/52198", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52198/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52198/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52198/events", "html_url": "https://github.com/rust-lang/rust/issues/52198", "id": 339659783, "node_id": "MDU6SXNzdWUzMzk2NTk3ODM=", "number": 52198, "title": "Consider using pair mode to return scalar pair bools as i1", "user": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1904923801, "node_id": "MDU6TGFiZWwxOTA0OTIzODAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-cranelift", "name": "A-cranelift", "color": "f7e101", "default": false, "description": "Things relevant to the [future] cranelift backend"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-10T01:19:48Z", "updated_at": "2020-03-12T13:26:24Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Starting in #51583, we're representing scalar pair `bool`s as `i8` in LLVM aggregates to match their memory storage, whereas they are `i1` as immediate values.\r\n\r\nWhen a pair is the argument to a function, we use `PassMode::Pair` and pass each part like independent immediate values.  We don't use that mode for return values though, so a paired `bool` will be extended to `i8` for return, then truncated back to `i1` when the caller unpacks it.\r\n\r\nQuoting @eddyb in https://github.com/rust-lang/rust/pull/51583#discussion_r195895958:\r\n\r\n> I wonder if they should be using the pair \"passing mode\" that arguments do, and create a LLVM aggregate type on the fly, using the immediate types for the pair components. That way we'd get `{i1, i1}` for returns, but everything else would see `{i8, i8}`.\r\n> \r\n> Not sure it's worth the complexity though. When inlining, LLVM should collapse the zext followed by trunc, just like it gets rid of packing into a pair and unpacking it.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52198/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52198/timeline", "performed_via_github_app": null, "state_reason": null}