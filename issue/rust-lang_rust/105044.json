{"url": "https://api.github.com/repos/rust-lang/rust/issues/105044", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105044/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105044/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105044/events", "html_url": "https://github.com/rust-lang/rust/issues/105044", "id": 1467612749, "node_id": "I_kwDOAAsO6M5Xef5N", "number": 105044, "title": "ICE \"broken MIR ... Field projection specified type ... but actual type is ...\" comparing type with type as trait", "user": {"login": "teor2345", "id": 8951843, "node_id": "MDQ6VXNlcjg5NTE4NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/8951843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teor2345", "html_url": "https://github.com/teor2345", "followers_url": "https://api.github.com/users/teor2345/followers", "following_url": "https://api.github.com/users/teor2345/following{/other_user}", "gists_url": "https://api.github.com/users/teor2345/gists{/gist_id}", "starred_url": "https://api.github.com/users/teor2345/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teor2345/subscriptions", "organizations_url": "https://api.github.com/users/teor2345/orgs", "repos_url": "https://api.github.com/users/teor2345/repos", "events_url": "https://api.github.com/users/teor2345/events{/privacy}", "received_events_url": "https://api.github.com/users/teor2345/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2022-11-29T07:55:43Z", "updated_at": "2022-12-08T10:14:53Z", "closed_at": "2022-12-08T10:14:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There seems to be a bug in the way that Rust compiles `Iterator::flat_map()`, in release mode, with complex iterators.\r\n\r\nIt also triggers on other \"type\" vs \"type as trait\" comparisons in the compiler, for example [unsized-vec](https://github.com/Jules-Bertholet/unsized-vec/commit/d98958c2689bcb3d8b2ac769de0349e5390f66f0) fails with:\r\n```\r\nerror: internal compiler error: broken MIR in DropGlue(DefId(2:2141 ~ core[0ec9]::ptr::drop_in_place), Some(unsized_vec::UnsizedVec<dyn std::fmt::Debug>)) (after phase change to runtime-optimized) at bb0[0]:\r\n                                Field projection `(*_1).field[0]` specified type `unsized_vec::inner::unaligned::UnalignedVecInner<dyn std::fmt::Debug>`, but actual type is `<dyn std::fmt::Debug as unsized_vec::inner::UnsizedVecImpl>::Impl`\r\n   --> /home/dev/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/mod.rs:490:1\r\n    |\r\n490 | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\r\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    |\r\n    = note: delayed at compiler/rustc_const_eval/src/transform/validate.rs:229:30\r\n\r\nerror: internal compiler error: broken MIR in DropGlue(DefId(2:2141 ~ core[0ec9]::ptr::drop_in_place), Some(unsized_vec::UnsizedVec<[i32]>)) (after phase change to runtime-optimized) at bb0[0]:\r\n                                Field projection `(*_1).field[0]` specified type `unsized_vec::inner::aligned::AlignedVecInner<[i32]>`, but actual type is `<[i32] as unsized_vec::inner::UnsizedVecImpl>::Impl`\r\n   --> /home/dev/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/mod.rs:490:1\r\n```\r\n\r\n\r\n### Code\r\n\r\nRelated crate code:\r\n<details>\r\n\r\n```Rust\r\npub enum Transaction {\r\n    V5 {\r\n        orchard_shielded_data: Option<ShieldedData>,\r\n    },\r\n}\r\n\r\nimpl Transaction {\r\n    pub fn orchard_shielded_data(&self) -> Option<&ShieldedData> {\r\n        match self {\r\n            // Maybe Orchard shielded data\r\n            Transaction::V5 {\r\n                orchard_shielded_data,\r\n                ..\r\n            } => orchard_shielded_data.as_ref(),\r\n        }\r\n    }\r\n\r\n    pub fn orchard_nullifiers(&self) -> impl Iterator<Item = &Nullifier> {\r\n        self.orchard_shielded_data()\r\n            .into_iter()\r\n            .flat_map(ShieldedData::nullifiers)\r\n    }\r\n}\r\n\r\npub struct ShieldedData {\r\n    pub actions: AtLeastOne<AuthorizedAction>,\r\n}\r\n\r\nimpl ShieldedData {\r\n    pub fn actions(&self) -> impl Iterator<Item = &Action> {\r\n        self.actions.actions()\r\n    }\r\n\r\n    pub fn nullifiers(&self) -> impl Iterator<Item = &Nullifier> {\r\n        self.actions().map(|action| &action.nullifier)\r\n    }\r\n}\r\n\r\nimpl AtLeastOne<AuthorizedAction> {\r\n    pub fn actions(&self) -> impl Iterator<Item = &Action> {\r\n        self.iter()\r\n            .map(|authorized_action| &authorized_action.action)\r\n    }\r\n}\r\n\r\npub struct AuthorizedAction {\r\n    pub action: Action,\r\n}\r\n\r\npub struct Action {\r\n    pub nullifier: (),\r\n}\r\n\r\npub struct AtLeastOne<T> {\r\n    inner: Vec<T>,\r\n}\r\n\r\nimpl<T> Deref for AtLeastOne<T> {\r\n    type Target = Vec<T>;\r\n\r\n    fn deref(&self) -> &Self::Target {\r\n        &self.inner\r\n    }\r\n}\r\n\r\nimpl<T> AsRef<[T]> for AtLeastOne<T> {\r\n    fn as_ref(&self) -> &[T] {\r\n        self.inner.as_ref()\r\n    }\r\n}\r\n\r\nimpl<T> IntoIterator for AtLeastOne<T> {\r\n    type Item = T;\r\n\r\n    type IntoIter = std::vec::IntoIter<T>;\r\n\r\n    fn into_iter(self) -> std::vec::IntoIter<T> {\r\n        self.inner.into_iter()\r\n    }\r\n}\r\n```\r\n\r\n</details>\r\n\r\nFailing code:\r\n```Rust\r\nimpl Transaction {\r\n    pub fn orchard_nullifiers(&self) -> impl Iterator<Item = &Nullifier> {\r\n        self.orchard_shielded_data()\r\n            .into_iter()\r\n            .flat_map(ShieldedData::nullifiers)\r\n    }\r\n}\r\n\r\n    let orchard_nullifier_count = block\r\n        .transactions\r\n        .iter()\r\n        .flat_map(|t| t.orchard_nullifiers()) \r\n        .count();\r\n\r\n    for nullifier in prepared.block.orchard_nullifiers() { }\r\n```\r\n\r\nWorkaround:\r\n```Rust\r\n    pub fn orchard_nullifiers(&self) -> impl Iterator<Item = &orchard::Nullifier> {\r\n        let nullifiers: Vec<_> = self\r\n            .transactions\r\n            .iter()\r\n            .flat_map(|transaction| transaction.orchard_nullifiers())\r\n            .collect();\r\n\r\n        nullifiers.into_iter()\r\n    }\r\n\r\n    let orchard_nullifier_count: usize = block\r\n        .transactions\r\n        .iter()\r\n        .map(|t| t.orchard_nullifiers().into_iter().count())\r\n        .sum();\r\n```\r\n\r\n### Meta\r\n\r\nFails from nightly nightly-2022-11-20 onwards, in commit 2f8d8040166a730d0da7bba0f2864f0ef7ff6364.\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.67.0-nightly (2585bcea0 2022-11-28)\r\nbinary: rustc\r\ncommit-hash: 2585bcea0bc2a9c42a4be2c1eba5c61137f2b167\r\ncommit-date: 2022-11-28\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.67.0-nightly\r\nLLVM version: 15.0.4\r\n```\r\n\r\nI used these commands to bisect the nightly Rust version:\r\n```sh\r\ngit clone https://github.com/ZcashFoundation/zebra.git\r\ngit checkout a763eec9f3\r\ncd zebra-state\r\n\r\ncat << EOF > cargo-build-release.sh\r\n#!/usr/bin/env bash\r\ncargo build --release\r\nEOF\r\nchmod +x cargo-build-release.sh\r\n\r\ncargo-bisect-rustc --start=2022-11-07 --regress=ice --script=./cargo-build-release.sh\r\n```\r\n\r\nZebra needs some build dependencies:\r\nhttps://github.com/ZcashFoundation/zebra#build-instructions\r\n\r\nRegression log:\r\nsearched nightlies: from nightly-2022-11-07 to nightly-2022-11-29\r\nregressed nightly: nightly-2022-11-20\r\nsearched commit range: https://github.com/rust-lang/rust/compare/b833ad56f46a0bbe0e8729512812a161e7dae28a...c5d82ed7a4ad94a538bb87e5016e7d5ce0bd434b\r\nregressed commit: https://github.com/rust-lang/rust/commit/2f8d8040166a730d0da7bba0f2864f0ef7ff6364\r\n\r\n<details>\r\n<summary>bisected with <a href='https://github.com/rust-lang/cargo-bisect-rustc'>cargo-bisect-rustc</a> v0.6.4</summary>\r\n\r\n\r\nHost triple: x86_64-unknown-linux-gnu\r\nReproduce with:\r\n```bash\r\ncargo bisect-rustc --regress=ice --script=./cargo-build-release.sh \r\n```\r\n</details>\r\n\r\n### Analysis\r\n\r\nThis might be caused by `-C linker-plugin-lto` or release builds, but I couldn't find an exact set of flags or a minimal example to reproduce it.\r\n\r\n`cargo build` does not fail, either from the individual crate or workspace directory. But `cargo build --release` and `cargo install --git https://github.com/ZcashFoundation/zebra.git zebrad` fail.\r\n\r\nI tried commenting out my whole `.cargo/config.toml`, and it didn't make a difference.\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: no errors encountered even though `delay_span_bug` issued                \r\n                                                                                                         \r\nerror: internal compiler error: broken MIR in Item(WithOptConstParam { did: DefId(0:1718 ~ zebra_state[4d\r\nf4]::service::finalized_state::zebra_db::metrics::block_precommit_metrics), const_param_did: None }) (aft\r\ner phase change to runtime-optimized) at bb128[5]:                                                       \r\n                                Field projection `_37.field[0]` specified type `std::iter::adapters::flat\r\nten::FlattenCompat<std::iter::Map<std::slice::Iter<'_, std::sync::Arc<zebra_chain::transaction::Transacti\r\non>>, [closure@zebra-state/src/service/finalized_state/zebra_db/metrics.rs:39:19: 39:22]>, std::iter::Fla\r\ntMap<std::option::IntoIter<&zebra_chain::orchard::ShieldedData>, std::iter::Map<std::iter::Map<std::slice\r\n::Iter<'_, zebra_chain::orchard::AuthorizedAction>, [closure@zebra_chain::orchard::shielded_data::<impl z\r\nebra_chain::serialization::AtLeastOne<zebra_chain::orchard::AuthorizedAction>>::actions::{closure#0}]>, [\r\nclosure@zebra_chain::orchard::ShieldedData::nullifiers::{closure#0}]>, for<'a> fn(&'a zebra_chain::orchar\r\nd::ShieldedData) -> impl std::iter::Iterator<Item = &'a zebra_chain::orchard::Nullifier> {zebra_chain::or\r\nchard::ShieldedData::nullifiers}>>`, but actual type is `std::iter::adapters::flatten::FlattenCompat<std:\r\n:iter::Map<std::slice::Iter<'_, std::sync::Arc<zebra_chain::transaction::Transaction>>, [closure@zebra-st\r\nate/src/service/finalized_state/zebra_db/metrics.rs:39:19: 39:22]>, <std::iter::FlatMap<std::option::Into\r\nIter<&zebra_chain::orchard::ShieldedData>, std::iter::Map<std::iter::Map<std::slice::Iter<'_, zebra_chain\r\n::orchard::AuthorizedAction>, [closure@zebra_chain::orchard::shielded_data::<impl zebra_chain::serializat\r\nion::AtLeastOne<zebra_chain::orchard::AuthorizedAction>>::actions::{closure#0}]>, [closure@zebra_chain::o\r\nrchard::ShieldedData::nullifiers::{closure#0}]>, for<'a> fn(&'a zebra_chain::orchard::ShieldedData) -> im\r\npl std::iter::Iterator<Item = &'a zebra_chain::orchard::Nullifier> {zebra_chain::orchard::ShieldedData::n\r\nullifiers}> as std::iter::IntoIterator>::IntoIter>`                                                      \r\n  --> zebra-state/src/service/finalized_state/zebra_db/metrics.rs:36:35 \r\n   |                                                                                                     \r\n36 |       let orchard_nullifier_count = block\r\n   |  ___________________________________^\r\n37 | |         .transactions\r\n38 | |         .iter()\r\n39 | |         .flat_map(|t| t.orchard_nullifiers()) \r\n40 | |         .count();\r\n   | |________________^\r\n   |\r\n   = note: delayed at compiler/rustc_const_eval/src/transform/validate.rs:229:30\r\n\r\nerror: internal compiler error: broken MIR in Item(WithOptConstParam { did: DefId(0:4282 ~ zebra_state[4d\r\nf4]::service::check::nullifier::no_duplicates_in_finalized_chain), const_param_did: None }) (after phase \r\nchange to runtime-optimized) at bb60[6]:\r\n                                Field projection `(*_128).field[0]` specified type `std::iter::adapters::\r\nflatten::FlattenCompat<std::iter::Map<std::slice::Iter<'_, std::sync::Arc<zebra_chain::transaction::Trans\r\naction>>, [closure@zebra_chain::block::Block::orchard_nullifiers::{closure#0}]>, std::iter::FlatMap<std::\r\noption::IntoIter<&zebra_chain::orchard::ShieldedData>, std::iter::Map<std::iter::Map<std::slice::Iter<'_,\r\n zebra_chain::orchard::AuthorizedAction>, [closure@zebra_chain::orchard::shielded_data::<impl zebra_chain\r\n::serialization::AtLeastOne<zebra_chain::orchard::AuthorizedAction>>::actions::{closure#0}]>, [closure@ze\r\nbra_chain::orchard::ShieldedData::nullifiers::{closure#0}]>, for<'a> fn(&'a zebra_chain::orchard::Shielde\r\ndData) -> impl std::iter::Iterator<Item = &'a zebra_chain::orchard::Nullifier> {zebra_chain::orchard::Shi\r\neldedData::nullifiers}>>`, but actual type is `std::iter::adapters::flatten::FlattenCompat<std::iter::Map\r\n<std::slice::Iter<'_, std::sync::Arc<zebra_chain::transaction::Transaction>>, [closure@zebra_chain::block\r\n::Block::orchard_nullifiers::{closure#0}]>, <std::iter::FlatMap<std::option::IntoIter<&zebra_chain::orcha\r\nrd::ShieldedData>, std::iter::Map<std::iter::Map<std::slice::Iter<'_, zebra_chain::orchard::AuthorizedAct\r\nion>, [closure@zebra_chain::orchard::shielded_data::<impl zebra_chain::serialization::AtLeastOne<zebra_ch\r\nain::orchard::AuthorizedAction>>::actions::{closure#0}]>, [closure@zebra_chain::orchard::ShieldedData::nu\r\nllifiers::{closure#0}]>, for<'a> fn(&'a zebra_chain::orchard::ShieldedData) -> impl std::iter::Iterator<I\r\ntem = &'a zebra_chain::orchard::Nullifier> {zebra_chain::orchard::ShieldedData::nullifiers}> as std::iter\r\n::IntoIterator>::IntoIter>`\r\n  --> zebra-state/src/service/check/nullifier.rs:48:22\r\n   |\r\n48 |     for nullifier in prepared.block.orchard_nullifiers() {\r\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: delayed at compiler/rustc_const_eval/src/transform/validate.rs:229:30]\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', compiler/rustc_errors/src/lib.rs:1609:13\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0: std::panicking::begin_panic::<rustc_errors::ExplicitBug>\r\n   1: std::panic::panic_any::<rustc_errors::ExplicitBug>\r\n   2: <rustc_errors::HandlerInner>::flush_delayed::<alloc::vec::Vec<rustc_errors::diagnostic::Diagnostic>\r\n, &str>\r\n   3: <rustc_errors::HandlerInner as core::ops::drop::Drop>::drop\r\n   4: core::ptr::drop_in_place::<rustc_session::parse::ParseSess>\r\n   5: core::ptr::drop_in_place::<rustc_session::session::Session>\r\n   6: core::ptr::drop_in_place::<rustc_interface::interface::Compiler>\r\n   7: rustc_span::with_source_map::<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_interf\r\nace::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_c\r\nompiler::{closure#1}>::{closure#0}::{closure#0}>\r\n   8: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::interface::run_compiler\r\n<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{clos\r\nure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nnote: compiler flags: --crate-type lib -C opt-level=3 -C panic=abort -C linker-plugin-lto -C debuginfo=1 \r\n-C debug-assertions=on\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nerror: could not compile `zebra-state`\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "apiraino", "id": 6098822, "node_id": "MDQ6VXNlcjYwOTg4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6098822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apiraino", "html_url": "https://github.com/apiraino", "followers_url": "https://api.github.com/users/apiraino/followers", "following_url": "https://api.github.com/users/apiraino/following{/other_user}", "gists_url": "https://api.github.com/users/apiraino/gists{/gist_id}", "starred_url": "https://api.github.com/users/apiraino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apiraino/subscriptions", "organizations_url": "https://api.github.com/users/apiraino/orgs", "repos_url": "https://api.github.com/users/apiraino/repos", "events_url": "https://api.github.com/users/apiraino/events{/privacy}", "received_events_url": "https://api.github.com/users/apiraino/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105044/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}