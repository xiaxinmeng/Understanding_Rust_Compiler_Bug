{"url": "https://api.github.com/repos/rust-lang/rust/issues/52998", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52998/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52998/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52998/events", "html_url": "https://github.com/rust-lang/rust/issues/52998", "id": 347180968, "node_id": "MDU6SXNzdWUzNDcxODA5Njg=", "number": 52998, "title": "rustc emits unnecessary abort / trap instructions after calls to divergent functions", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-02T21:27:49Z", "updated_at": "2018-08-07T19:39:36Z", "closed_at": "2018-08-07T19:22:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### STR\r\n\r\n``` console\r\n$ cat foo.rs\r\n```\r\n\r\n``` rust\r\n#![crate_type = \"lib\"]\r\n\r\n#[no_mangle]\r\npub fn foo() -> ! {\r\n    extern \"Rust\" {\r\n        fn bar() -> !;\r\n    }\r\n\r\n    unsafe { bar() }\r\n}\r\n```\r\n\r\n``` console\r\n$ rustc -C panic=abort --emit=llvm-ir,link -C opt-level=3 foo.rs\r\n\r\n$ cat foo.ll\r\n; ModuleID = 'foo0-8787f43e282added376259c1adb08b80.rs'\r\nsource_filename = \"foo0-8787f43e282added376259c1adb08b80.rs\"\r\ntarget datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\n; Function Attrs: noreturn nounwind\r\ndefine void @foo() unnamed_addr #0 {\r\nstart:\r\n  tail call void @bar()\r\n  unreachable\r\n}\r\n\r\n; Function Attrs: noreturn nounwind\r\ndeclare void @bar() unnamed_addr #0\r\n\r\nattributes #0 = { noreturn nounwind \"probe-stack\"=\"__rust_probestack\" }\r\n```\r\n\r\nIs the `unreachable` after calling `bar` really necessary? `bar` is `noreturn nounwind`.\r\n\r\n``` console\r\n$ objdump -Cd libfoo.rlib\r\nIn archive libfoo.rlib:\r\n\r\nfoo.foo0.rcgu.o:     file format elf64-x86-64\r\n\r\nDisassembly of section .text.foo:\r\n\r\n0000000000000000 <foo>:\r\n   0:   50                      push   %rax\r\n   1:   e8 00 00 00 00          callq  6 <foo+0x6>\r\n   6:   0f 0b                   ud2\r\n```\r\n\r\nThe `ud2` instruction is dead code because `bar` never returns.\r\n\r\nIf I manually use `llc` on the optimized `.ll` file I get this:\r\n\r\n``` console\r\n$ llc -filetype=obj foo.ll\r\n\r\n$ objdump -Cd foo.o\r\nfoo.o:     file format elf64-x86-64\r\n\r\nDisassembly of section .text:\r\n\r\n0000000000000000 <foo>:\r\n   0:   50                      push   %rax\r\n   1:   e8 00 00 00 00          callq  6 <foo+0x6>\r\n```\r\n\r\n(I see the same if I run `llc` on an unoptimized `.ll` file)\r\n\r\nWhich is what I expected to get from `rustc`. Is there some LLVM pass that we are disabling that\r\nprevents LLVM from removing the `ud2` instruction? I also observe this behavior when compiling for ARM.\r\n\r\n### Meta\r\n\r\n``` console\r\n$ rustc -V\r\nrustc 1.29.0-nightly (97085f9fb 2018-08-01)\r\n\r\n$ # the llc is from a Rust build I had around\r\n$ llc -version | head -n5\r\nLLVM (http://llvm.org/):\r\n  LLVM version 7.0.0svn\r\n  Optimized build.\r\n  Default target: x86_64-unknown-linux-gnu\r\n  Host CPU: skylake\r\n```\r\n\r\ncc @nagisa ", "closed_by": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52998/timeline", "performed_via_github_app": null, "state_reason": "completed"}