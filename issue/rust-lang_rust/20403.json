{"url": "https://api.github.com/repos/rust-lang/rust/issues/20403", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/20403/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/20403/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/20403/events", "html_url": "https://github.com/rust-lang/rust/issues/20403", "id": 53223312, "node_id": "MDU6SXNzdWU1MzIyMzMxMg==", "number": 20403, "title": "Should the mutable borrow of `self` in method call range over the arguments?", "user": {"login": "honzasp", "id": 64298, "node_id": "MDQ6VXNlcjY0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/64298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honzasp", "html_url": "https://github.com/honzasp", "followers_url": "https://api.github.com/users/honzasp/followers", "following_url": "https://api.github.com/users/honzasp/following{/other_user}", "gists_url": "https://api.github.com/users/honzasp/gists{/gist_id}", "starred_url": "https://api.github.com/users/honzasp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honzasp/subscriptions", "organizations_url": "https://api.github.com/users/honzasp/orgs", "repos_url": "https://api.github.com/users/honzasp/repos", "events_url": "https://api.github.com/users/honzasp/events{/privacy}", "received_events_url": "https://api.github.com/users/honzasp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-01T16:40:03Z", "updated_at": "2015-01-01T17:03:04Z", "closed_at": "2015-01-01T17:01:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a `&mut self` method is called, the receiver is mutably borrowed before the arguments are evaluated, so the following program does not compile:\n\n```\nfn main() {\n  let mut vec = vec![1, 2, 3];\n  vec.push(vec.len());\n  assert_eq!(vec, vec![1, 2, 3, 4]);\n}\n```\n\nBut when the argument explicitly evaluated before the call in a `let` statement, is compiles just fine:\n\n```\nfn main() {\n  let mut vec = vec![1, 2, 3];\n  let vec_len = vec.len();\n  vec.push(vec_len);\n  assert_eq!(vec, vec![1, 2, 3, 3]);\n}\n```\n\nI am not sure if there is a good reason for the first program to be rejected, I would expect `e1(e2)` to be equivalent to `{ let x = e2; e1(x) }`.\n", "closed_by": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/20403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/20403/timeline", "performed_via_github_app": null, "state_reason": "completed"}