{"url": "https://api.github.com/repos/rust-lang/rust/issues/86198", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86198/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86198/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86198/events", "html_url": "https://github.com/rust-lang/rust/issues/86198", "id": 917355624, "node_id": "MDU6SXNzdWU5MTczNTU2MjQ=", "number": 86198, "title": "generic const exprs in diagnostics aren't printed with substs applied", "user": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-06-10T13:35:58Z", "updated_at": "2022-06-24T14:05:14Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Given the following code: [link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=f262555bd938b68a2191975eeff11d6b)\r\n\r\n```rust\r\n#![feature(const_generics, const_evaluatable_checked)]\r\n#![allow(incomplete_features)]\r\n\r\ntrait Trait {}\r\nstruct HasCastInTraitImpl<const N: usize, const M: usize>;\r\nimpl<const M: usize> Trait for HasCastInTraitImpl<M, { M + 1 }> {}\r\npub struct HasTrait<T: Trait>(T);\r\nfn foo<const N: usize>() -> HasTrait<HasCastInTraitImpl<{ N + 1 }, { N + 1}>> { loop {} }\r\n\r\nfn main() {}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror: unconstrained generic constant\r\n --> src/main.rs:8:29\r\n  |\r\n7 | pub struct HasTrait<T: Trait>(T);\r\n  |                        ----- required by this bound in `HasTrait`\r\n8 | fn foo<const N: usize>() -> HasTrait<HasCastInTraitImpl<{ N + 1 }, { N + 1}>> { loop {} }\r\n  |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = help: try adding a `where` bound using this expression: `where [(); { M + 1 }]:`\r\nnote: required because of the requirements on the impl of `Trait` for `HasCastInTraitImpl<{ N + 1 }, { N + 1}>`\r\n --> src/main.rs:6:22\r\n  |\r\n6 | impl<const M: usize> Trait for HasCastInTraitImpl<M, { M + 1 }> {}\r\n  |                      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:8:29\r\n  |\r\n8 | fn foo<const N: usize>() -> HasTrait<HasCastInTraitImpl<{ N + 1 }, { N + 1}>> { loop {} }\r\n  |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N + 1}`, found `{ M + 1 }`\r\n  |\r\n  = note: expected type `{ N + 1}`\r\n             found type `{ M + 1 }`\r\n\r\nerror: aborting due to 2 previous errors\r\n```\r\n\r\nIdeally the output should look like:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:8:29\r\n  |\r\n8 | fn foo<const N: usize>() -> HasTrait<HasCastInTraitImpl<{ N + 1 }, { N + 1}>> { loop {} }\r\n  |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N + 1}`, found `{ (N + 1) + 1 }`\r\n  |\r\n  = note: expected type `{ N + 1}`\r\n             found type `{ (N + 1) + 1 }`\r\n```\r\n\r\n@rustbot label: +A-const-generics +F-const_generics +F-const_evaluatable_checked", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86198/timeline", "performed_via_github_app": null, "state_reason": null}