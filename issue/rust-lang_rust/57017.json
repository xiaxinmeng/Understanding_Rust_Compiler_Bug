{"url": "https://api.github.com/repos/rust-lang/rust/issues/57017", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57017/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57017/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57017/events", "html_url": "https://github.com/rust-lang/rust/issues/57017", "id": 393189730, "node_id": "MDU6SXNzdWUzOTMxODk3MzA=", "number": 57017, "title": "async/await: awaiting inside a match block captures borrow too eagerly", "user": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2018-12-20T19:54:37Z", "updated_at": "2023-04-27T14:41:23Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If you use `await!(some_fut)` inside an arm of a `match X`, the generated future eagerly borrows the value of `X`, if it not needed.\r\n\r\nThis may not usually be noticeable, but the issue compounds when the type `X` contains a trait object, and the future you wish to return is `impl Future + Send`. This causes a misleading error message that \"`dyn Trait + Send` cannot be shared between threads\", which is required to for `&X: Send`.\r\n\r\n## Example\r\n\r\nHere's a simple struct with a trait object:\r\n\r\n```rust\r\nstruct Client(Box<Any + Send>);\r\n```\r\n\r\nConsider a function like this:\r\n\r\n```rust\r\nimpl Client {\r\n    fn status(&self) -> u16 {\r\n        200\r\n    }\r\n}\r\n```\r\n\r\nYou could consider using a match to determine what kind of future to await (or what arguments to pass):\r\n\r\n```rust\r\nasync fn get() {\r\n}\r\n\r\npub fn wat() -> impl Future + Send {\r\n    let client = Client(Box::new(true));\r\n    async move {\r\n        match client.status() {\r\n            200 => {\r\n                let _x = await!(get());\r\n            },\r\n            _ => (),\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIf the `await` is moved out of the match block, all is well:\r\n\r\n```rust\r\npub fn ok() -> impl Future + Send {\r\n    let client = Client(Box::new(true));\r\n    async move {\r\n        if client.status() == 200 {\r\n            let _x = await!(get());\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe `wat` function causes this compilation error:\r\n\r\n```\r\nerror[E0277]: `(dyn std::any::Any + std::marker::Send + 'static)` cannot be shared between threads safely\r\n  --> src/main.rs:21:17\r\n   |\r\n21 | pub fn wat() -> impl Future + Send {\r\n   |                 ^^^^^^^^^^^^^^^^^^ `(dyn std::any::Any + std::marker::Send + 'static)` cannot be shared between threads safely\r\n   |\r\n   = help: the trait `std::marker::Sync` is not implemented for `(dyn std::any::Any + std::marker::Send + 'static)`\r\n   = note: required because of the requirements on the impl of `std::marker::Sync` for `std::ptr::Unique<(dyn std::any::Any + std::marker::Send + 'static)>`\r\n   = note: required because it appears within the type `std::boxed::Box<(dyn std::any::Any + std::marker::Send + 'static)>`\r\n   = note: required because it appears within the type `Client`\r\n   = note: required because of the requirements on the impl of `for<'r> std::marker::Send` for `&Client`\r\n   = note: required because it appears within the type `for<'r> {Client, &'r Client, u16, impl std::future::Future, ()}`\r\n   = note: required because it appears within the type `[static generator@src/main.rs:23:16: 30:6 client:Client for<'r> {Client, &'r Client, u16, impl std::future::Future, ()}]`\r\n   = note: required because it appears within the type `std::future::GenFuture<[static generator@src/main.rs:23:16: 30:6 client:Client for<'r> {Client, &'r Client, u16, impl std::future::Future, ()}]>`\r\n   = note: required because it appears within the type `impl std::future::Future`\r\n   = note: the return type of a function must have a statically known size\r\n```\r\n\r\nPlayground: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=2a9dbea32d31457d50d40b99c52ee214 (updated to latest syntax -Niko)\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"eholk\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57017/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57017/timeline", "performed_via_github_app": null, "state_reason": "reopened"}