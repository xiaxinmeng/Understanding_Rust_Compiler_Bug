{"url": "https://api.github.com/repos/rust-lang/rust/issues/61011", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61011/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61011/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61011/events", "html_url": "https://github.com/rust-lang/rust/issues/61011", "id": 446699575, "node_id": "MDU6SXNzdWU0NDY2OTk1NzU=", "number": 61011, "title": "There should be a way to unwrap MaybeUninits without moving them", "user": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2019-05-21T15:56:19Z", "updated_at": "2019-09-02T11:26:16Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "[`MaybeUninit`](https://doc.rust-lang.org/nightly/std/mem/union.MaybeUninit.html) has an API where you construct a `MaybeUninit<T>`, can operate on it via raw pointer methods, and then can call [`assume_init()`](https://doc.rust-lang.org/nightly/std/mem/union.MaybeUninit.html#method.assume_init) to move the inner value out. It also has methods that let you assume that it is initialized and obtain safe Rust references.\r\n\r\nThis is great for temporary initialization on the stack, but this doesn't work so well for the heap. What if you need to gradually initialize `Vec<T>` or `Arc<T>` heap values? This ends up leaving a carcass of a `MaybeUninit` in the type forever, basically infecting the type with an unsafe abstraction from the time of its initialization.\r\n\r\n\r\nOne solution here is to make sure `MaybeUninit` and `ManuallyDrop` have a repr of `T` (basically, `repr(transparent)`, except we haven't defined that for unions) so that you can always transmute `&MaybeUninit<T>` to `&T`, or `Arc<MaybeUninit<T>>` into `Arc<T>`.\r\n\r\nThe fact that `MaybeUninit` has methods specifically for doing this kind of thing with slices seems to point to the need for this ability to be generalized.\r\n\r\nEither way we should have clear documentation for using `MaybeUninit` with values not on your stack (on the heap, or passed in as a reference). Ideally we allow you to transmute it in such cases (and have examples doing this), but if we can't, we should still document that you shouldn't use it that way. (I think that this choice would preclude a lot of legitimate and necessary use cases, especially in FFI)\r\n\r\ncc @eddyb @RalfJung ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61011/reactions", "total_count": 18, "+1": 12, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 6, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61011/timeline", "performed_via_github_app": null, "state_reason": null}