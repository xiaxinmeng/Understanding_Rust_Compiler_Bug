{"url": "https://api.github.com/repos/rust-lang/rust/issues/105276", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105276/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105276/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105276/events", "html_url": "https://github.com/rust-lang/rust/issues/105276", "id": 1475311322, "node_id": "I_kwDOAAsO6M5X73ba", "number": 105276, "title": "confusion when intersecting multiple HashSets", "user": {"login": "briandorsey", "id": 122043, "node_id": "MDQ6VXNlcjEyMjA0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/122043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/briandorsey", "html_url": "https://github.com/briandorsey", "followers_url": "https://api.github.com/users/briandorsey/followers", "following_url": "https://api.github.com/users/briandorsey/following{/other_user}", "gists_url": "https://api.github.com/users/briandorsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/briandorsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/briandorsey/subscriptions", "organizations_url": "https://api.github.com/users/briandorsey/orgs", "repos_url": "https://api.github.com/users/briandorsey/repos", "events_url": "https://api.github.com/users/briandorsey/events{/privacy}", "received_events_url": "https://api.github.com/users/briandorsey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-12-04T23:46:58Z", "updated_at": "2022-12-05T08:46:49Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "\r\nContext: I'm about a month in to learning Rust, doing Advent of Code to help learn. Day three this year has a problem where part of the solution is a nice fit for intersecting three HashSets. [Here is the code I ended up with](https://github.com/briandorsey/AdventOfCode/blob/58717699b8d3380f6deb2889d5f204168a7cd263/2022/day03/src/main.rs#L62).\r\n\r\nI've extracted a minimal version of the error I got stuck at. I spent... an embarrassingly long time trying to get something working with `.intersection()`. This is what I expected to work based on understanding sets from other languages and reading the HashSet docs (and seeing lots of chained function calls in Rust). \r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=69e54c612f881becd9f8ae38eb8416f6)\r\n```rust\r\nuse std::collections::HashSet;\r\n\r\nfn main() {\r\n    let a: HashSet<_> = \"vJrwpWtwJgWrhcsFMMfFFhFp\".chars().collect();\r\n    let b: HashSet<_> = \"jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\".chars().collect();\r\n    let c: HashSet<_> = \"PmmdzqPrVvPwwTWBwg\".chars().collect();\r\n\r\n    let in_all = a\r\n        .intersection(&b)\r\n        .collect::<HashSet<_>>()\r\n        .intersection(&c)\r\n        .collect::<HashSet<_>>();\r\n\r\n    println!(\"{in_all:?}\");\r\n}\r\n```\r\n\r\nThe current output is:\r\n(all output is from 1.65.0 stable)\r\n```\r\nerror[[E0308]](https://doc.rust-lang.org/stable/error-index.html#E0308): mismatched types\r\n  --> src/main.rs:11:23\r\n   |\r\n11 |         .intersection(&c)\r\n   |          ------------ ^^ expected `&char`, found `char`\r\n   |          |\r\n   |          arguments to this function are incorrect\r\n   |\r\n   = note: expected reference `&HashSet<&char>`\r\n              found reference `&HashSet<char>`\r\nnote: associated function defined here\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\n```\r\n\r\nI didn't understand how to easily affect the char references inside the HashSets.\r\n\r\nI eventually ended up here, which works... but I knew wasn't right, and wouldn't work well for a larger number of sets. \r\n\r\n```rust\r\nuse std::collections::HashSet;\r\n\r\nfn main() {\r\n    let a: HashSet<_> = \"vJrwpWtwJgWrhcsFMMfFFhFp\".chars().collect();\r\n    let b: HashSet<_> = \"jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\".chars().collect();\r\n    let c: HashSet<_> = \"PmmdzqPrVvPwwTWBwg\".chars().collect();\r\n\r\n    let tmp1: HashSet<&char> = a.intersection(&b).collect();\r\n    let tmp2: HashSet<&char> = b.intersection(&c).collect();\r\n    let in_all: HashSet<&&char> = tmp1.intersection(&tmp2).collect();\r\n\r\n    println!(\"{in_all:?}\");\r\n}\r\n```\r\n\r\nI don't have specific proposed output, but I would have loved hints that lead me to one of the two solutions below.\r\n\r\nI looked at some other folks solutions to the same problem [notes and links here](https://github.com/briandorsey/AdventOfCode/blob/main/2022/day03/README.md) and with the caveat that I'm early in my Rust learning, here are the two outcomes I liked best: \r\n\r\n## Solution A\r\nThe solution I think I like best involves using operator sugar: HashSet [implements `&`](https://doc.rust-lang.org/src/std/collections/hash/set.rs.html#1156), which is clean and nearly what I expected intersection to work like. It's still awkward to give the extra &() reference in order to make the third intersection work. But, I'm probably missing some nice Rsut syntax, and I imagine there is a nice way to do this for the general case of a sequence of iteration. Maybe `.fold()` over an iterator or something?\r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=5ef8c796d69a609cc821a2c1c3ee5a8a)\r\n```rust\r\nuse std::collections::HashSet;\r\n\r\nfn main() {\r\n    let a: HashSet<_> = \"vJrwpWtwJgWrhcsFMMfFFhFp\".chars().collect();\r\n    let b: HashSet<_> = \"jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\".chars().collect();\r\n    let c: HashSet<_> = \"PmmdzqPrVvPwwTWBwg\".chars().collect();\r\n\r\n    let in_all = &(&a & &b) & &c;\r\n\r\n    println!(\"{in_all:?}\");\r\n}\r\n```\r\n\r\noutput:\r\n```\r\n{'r'}\r\n```\r\n\r\n\r\n## Solution B\r\n\r\nLooking at other solutions, lots of folks used `.copied()`... and just adding that almost works... and the error message guides me to a working solution. (The message when adding `.cloned()` is similarly good)\r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=8e75291ccf10248c8953c957be7658fd)\r\n```rust\r\nuse std::collections::HashSet;\r\n\r\nfn main() {\r\n    let a: HashSet<_> = \"vJrwpWtwJgWrhcsFMMfFFhFp\".chars().collect();\r\n    let b: HashSet<_> = \"jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\".chars().collect();\r\n    let c: HashSet<_> = \"PmmdzqPrVvPwwTWBwg\".chars().collect();\r\n\r\n        let in_all = a\r\n            .intersection(&b)\r\n            .copied()\r\n            .collect::<HashSet<_>>()\r\n            .intersection(&c)\r\n            .collect::<HashSet<_>>();\r\n\r\n    println!(\"{in_all:?}\");\r\n}\r\n```\r\n\r\noutput:\r\n```\r\nerror[[E0716]](https://doc.rust-lang.org/stable/error-index.html#E0716): temporary value dropped while borrowed\r\n  --> src/main.rs:8:22\r\n   |\r\n8  |           let in_all = a\r\n   |  ______________________^\r\n9  | |             .intersection(&b)\r\n10 | |             .copied()\r\n11 | |             .collect::<HashSet<_>>()\r\n   | |____________________________________^ creates a temporary which is freed while still in use\r\n12 |               .intersection(&c)\r\n13 |               .collect::<HashSet<_>>();\r\n   |                                       - temporary value is freed at the end of this statement\r\n14 |\r\n15 |       println!(\"{in_all:?}\");\r\n   |                  ------ borrow later used here\r\n   |\r\nhelp: consider using a `let` binding to create a longer lived value\r\n   |\r\n8  ~         let binding = a\r\n9  +             .intersection(&b)\r\n10 +             .copied()\r\n11 +             .collect::<HashSet<_>>();\r\n12 ~         let in_all = binding\r\n   |\r\n\r\nFor more information about this error, try `rustc --explain E0716`.\r\n```\r\n\r\nAnd that works!:\r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=ab06d4b965b81b554ac65e5bb00e6ca5)\r\n```rust\r\nuse std::collections::HashSet;\r\n\r\nfn main() {\r\n    let a: HashSet<_> = \"vJrwpWtwJgWrhcsFMMfFFhFp\".chars().collect();\r\n    let b: HashSet<_> = \"jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\".chars().collect();\r\n    let c: HashSet<_> = \"PmmdzqPrVvPwwTWBwg\".chars().collect();\r\n\r\n    let binding = a.intersection(&b).copied().collect::<HashSet<_>>();\r\n    let in_all = binding.intersection(&c).collect::<HashSet<_>>();\r\n\r\n    println!(\"{in_all:?}\");\r\n}\r\n```\r\n\r\noutput:\r\n```\r\n{'r'}\r\n```\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105276/timeline", "performed_via_github_app": null, "state_reason": null}