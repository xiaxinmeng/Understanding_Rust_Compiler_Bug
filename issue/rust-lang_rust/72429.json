{"url": "https://api.github.com/repos/rust-lang/rust/issues/72429", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72429/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72429/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72429/events", "html_url": "https://github.com/rust-lang/rust/issues/72429", "id": 622648373, "node_id": "MDU6SXNzdWU2MjI2NDgzNzM=", "number": 72429, "title": "NonNull methods for pointer offset, add, sub", "user": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-21T17:10:39Z", "updated_at": "2021-07-29T02:27:25Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "It would be beneficial to low-level code to add methods like `offset`, `add`, `sub` non `NonNull<T>`, so that pointer offsetting can be done without converting back and forth to raw pointers. These methods would be `unsafe` just like the corresponding raw pointer methods, return `NonNull<T>` and have the same semantics.\r\n\r\nThese methods will work well because such pointer offsetting is only valid inside the same allocated object; when offsetting it is not allowed to \"leave\" the current object, it can because of that never result in a null pointer. (For example, LLVM documents that an inbounds GEP on a non-null pointer *must not* result in a null pointer.)\r\n\r\nFor this reason, the safety rules that need to be followed for correct use of `<NonNull<T>>::offset` are the same as for `<*mut T>::offset`, and the method can be offered on the same terms, as an unsafe method.\r\n\r\nThis is for the moment implemented in at least one crate - [`rawpointer`](https://docs.rs/rawpointer/0.2/rawpointer/) and was a necessary feature for using `NonNull<T>` in `ndarray`.\r\n\r\nExample implementation\r\n\r\n```rust\r\nimpl<T> NonNull<T> {\r\n    /// Use the same documentation as the corresponding raw pointer method\r\n    pub unsafe fn offset(self, i: isize) -> Self {\r\n        // offset must be inside the same allocated object or one past the end, and can that way\r\n        // never result in a null pointer\r\n        NonNull::new_unchecked(self.as_ptr().offset(i))\r\n    }\r\n\r\n    pub unsafe fn add(self, i: usize) -> Self {\r\n        NonNull::new_unchecked(self.as_ptr().add(i))\r\n    }\r\n\r\n    pub unsafe fn sub(self, i: usize) -> Self {\r\n        NonNull::new_unchecked(self.as_ptr().sub(i))\r\n    }\r\n}\r\n```\r\n\r\nThe drawback of these methods is that while raw pointer `offset` has tricky requirements (offset inside the same allocation) due to the code generation back-end, the new nonnull `offset` methods will add extra requirements on top of that (Rust-level value validity); that these two restrictions go hand in hand, is just a consequence of the current back-end. Would it be possible to imagine a \"nicer\" Rust that didn't have these UB traps for pointer offsetting?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72429/timeline", "performed_via_github_app": null, "state_reason": null}