{"url": "https://api.github.com/repos/rust-lang/rust/issues/100116", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100116/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100116/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100116/events", "html_url": "https://github.com/rust-lang/rust/issues/100116", "id": 1327555784, "node_id": "I_kwDOAAsO6M5PIOTI", "number": 100116, "title": "Traits on function pointers", "user": {"login": "jdonszelmann", "id": 22172241, "node_id": "MDQ6VXNlcjIyMTcyMjQx", "avatar_url": "https://avatars.githubusercontent.com/u/22172241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdonszelmann", "html_url": "https://github.com/jdonszelmann", "followers_url": "https://api.github.com/users/jdonszelmann/followers", "following_url": "https://api.github.com/users/jdonszelmann/following{/other_user}", "gists_url": "https://api.github.com/users/jdonszelmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdonszelmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdonszelmann/subscriptions", "organizations_url": "https://api.github.com/users/jdonszelmann/orgs", "repos_url": "https://api.github.com/users/jdonszelmann/repos", "events_url": "https://api.github.com/users/jdonszelmann/events{/privacy}", "received_events_url": "https://api.github.com/users/jdonszelmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-08-03T17:14:31Z", "updated_at": "2023-05-21T12:56:00Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nFirst of all, I'm not yet sure if this is a problem with just diagnostics, or with the entire type system.\r\nThe following is a minimal example of an issue I got working on a larger project. The example may seem like a weird thing to do\r\nbut that's because it's minimized.\r\n\r\n```rust\r\nenum MyEnum {\r\n    A,\r\n    B(Box<Self>)\r\n}\r\ntrait MyTrait1 {}\r\nimpl MyTrait1 for MyEnum {}\r\n\r\ntrait MyTrait2<T: MyTrait1> {}\r\nimpl<T: MyTrait1> MyTrait2<T> for fn(Box<T>) -> T {}\r\n\r\nfn test<A: MyTrait1, B: MyTrait2<A>>(v: B) {}\r\n\r\nfn main() {\r\n    test(MyEnum::B);\r\n}\r\n```\r\n(https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=5f3e7f2b710cec461b0f4f824583fa69)\r\nI expected this to work, but it doesn't. It gives the following (weird) error:\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0277]](https://doc.rust-lang.org/stable/error-index.html#E0277): the trait bound `fn(Box<MyEnum>) -> MyEnum {MyEnum::B}: MyTrait2<_>` is not satisfied\r\n  --> src/main.rs:14:10\r\n   |\r\n14 |     test(MyEnum::B);\r\n   |     ---- ^^^^^^^^^ the trait `MyTrait2<_>` is not implemented for `fn(Box<MyEnum>) -> MyEnum {MyEnum::B}`\r\n   |     |\r\n   |     required by a bound introduced by this call\r\n   |\r\n   = help: the trait `MyTrait2<T>` is implemented for `fn(Box<T>) -> T`\r\nnote: required by a bound in `test`\r\n  --> src/main.rs:11:25\r\n   |\r\n11 | fn test<A: MyTrait1, B: MyTrait2<A>>(v: B) {}\r\n   |                         ^^^^^^^^^^^ required by this bound in `test`\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nWhat's weird about it is this: it doesn't seem to think MmyTrait2 is implemented for `fn(Box<MyEnum>) -> MyEnum`\r\nhowever, the help messages says: look, it is implemented for `fn(Box<T>) -> T` which my type conforms to.\r\n\r\nI started digging a bit. Maybe it's because of the enum variant not actually being a fn:\r\n```rust\r\nenum MyEnum {\r\n    A,\r\n    B(Box<Self>)\r\n}\r\ntrait MyTrait1 {}\r\nimpl MyTrait1 for MyEnum {}\r\n\r\ntrait MyTrait2<T: MyTrait1> {}\r\nimpl<T: MyTrait1> MyTrait2<T> for fn(Box<T>) -> T {}\r\n\r\nfn test<A: MyTrait1, B: MyTrait2<A>>(v: B) {}\r\n\r\nfn helper(a: Box<MyEnum>) -> MyEnum {\r\n    MyEnum::B(a)\r\n}\r\n\r\nfn main() {\r\n    test(helper);\r\n}\r\n```\r\nBut this gives a similar error.\r\n\r\nAlright, maybe it's the function pointer. What happens if I ask for a closure? (I'd quite like the function pointers since with closures I need a generic leading to overlapping impls, and I never expect to get a closure anyway. I thought that was the problem at first, distinguishing an overlapping impl with the fn pointer but the example seems to prove that it goes wrong even if there aren't any other implementors of `MyTrait2`)\r\n\r\n```rust\r\nenum MyEnum {\r\n    A,\r\n    B(Box<Self>)\r\n}\r\ntrait MyTrait1 {}\r\nimpl MyTrait1 for MyEnum {}\r\n\r\ntrait MyTrait2<T: MyTrait1> {}\r\nimpl<T: MyTrait1, F: Fn(Box<T>) -> T> MyTrait2<T> for F {}\r\n\r\nfn test<A: MyTrait1, B: MyTrait2<A>>(v: B) {}\r\n\r\nfn helper(a: Box<MyEnum>) -> MyEnum {\r\n    MyEnum::B(a)\r\n}\r\n\r\nfn main() {\r\n    test(helper);\r\n}\r\n```\r\nThis seems to work. So it specifically has to do with function pointers.\r\n\r\nNow one more thing, if I insert an explicit cast to the function pointer type:\r\n```rust\r\nenum MyEnum {\r\n    A,\r\n    B(Box<Self>)\r\n}\r\ntrait MyTrait1 {}\r\nimpl MyTrait1 for MyEnum {}\r\n\r\ntrait MyTrait2<T: MyTrait1> {}\r\nimpl<T: MyTrait1> MyTrait2<T> for fn(Box<T>) -> T {}\r\n\r\nfn test<A: MyTrait1, B: MyTrait2<A>>(v: B) {}\r\n\r\nfn main() {\r\n    test::<_, fn(Box<MyEnum>) -> MyEnum>(MyEnum::B);\r\n}\r\n```\r\nEverything works. \r\n\r\n<summary>\r\n(last minute: I thought maybe the box was the issue so I removed it and the enum, replacing it with just a function call and even that produces the same error)\r\n\r\n<details>\r\n\r\n```rust\r\ntrait MyTrait1 {}\r\nimpl MyTrait1 for i64 {}\r\n\r\ntrait MyTrait2<T: MyTrait1> {}\r\nimpl<T: MyTrait1> MyTrait2<T> for fn(T) -> T {}\r\n\r\nfn test<A: MyTrait1, B: MyTrait2<A>>(v: B) {}\r\n\r\nfn helper(a: i64) -> i64 {\r\n    todo!()\r\n}\r\n\r\nfn main() {\r\n    test(helper);\r\n}\r\n```\r\n\r\nbreaks in a similar manner:\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0277]](https://doc.rust-lang.org/stable/error-index.html#E0277): the trait bound `fn(i64) -> i64 {helper}: MyTrait2<_>` is not satisfied\r\n  --> src/main.rs:14:10\r\n   |\r\n14 |     test(helper);\r\n   |     ---- ^^^^^^ the trait `MyTrait2<_>` is not implemented for `fn(i64) -> i64 {helper}`\r\n   |     |\r\n   |     required by a bound introduced by this call\r\n   |\r\n   = help: the trait `MyTrait2<T>` is implemented for `fn(T) -> T`\r\nnote: required by a bound in `test`\r\n  --> src/main.rs:7:25\r\n   |\r\n7  | fn test<A: MyTrait1, B: MyTrait2<A>>(v: B) {}\r\n   |                         ^^^^^^^^^^^ required by this bound in `test`\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n</details>\r\n</summary>\r\nMy conclusion: this is certainly a diagnostics bug. The help message that the implementation exists is misleading since it references an implementation that looks like it should work. However, I also expected this to *just work* meaning it could be classified as a bug in type inference. But I don't know enough about the compiler to know whether or not this is expected behavior or not.\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.61.0 (fe5b13d68 2022-05-18)\r\nbinary: rustc\r\ncommit-hash: fe5b13d681f25ee6474be29d748c65adcd91f69e\r\ncommit-date: 2022-05-18\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.61.0\r\nLLVM version: 14.0.0\r\n```\r\n(though I also tried nightly, and it's not fixed yet there)\r\n\r\n(there is no backtrace here since there's no program that crashed. Code just didn't compile)\r\n\r\nI'm mentioning @estebank since I can't add the A-diagnostics tag myself on a more generic bug report. That only happens if I choose the diagnostics template and I think this bug may be broader than that. I hope you don't mind :)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100116/timeline", "performed_via_github_app": null, "state_reason": null}