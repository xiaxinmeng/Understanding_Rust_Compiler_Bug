{"url": "https://api.github.com/repos/rust-lang/rust/issues/60122", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60122/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60122/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60122/events", "html_url": "https://github.com/rust-lang/rust/issues/60122", "id": 435275006, "node_id": "MDU6SXNzdWU0MzUyNzUwMDY=", "number": 60122, "title": "Suboptimal assembly for unsigned and signed integer division", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-19T19:06:47Z", "updated_at": "2019-04-20T00:14:55Z", "closed_at": "2019-04-20T00:14:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "```rust\r\n#![feature(core_intrinsics)]\r\nuse std::hint::*;\r\nuse std::intrinsics::*;\r\n\r\nmacro_rules! assert {\r\n    { $e:expr } => { \r\n        unsafe {\r\n            if unlikely(!($e)) {\r\n                unreachable_unchecked();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npub fn half_u(i: u32) -> u32 {\r\n    i * 3 / 6\r\n}\r\n\r\npub fn half_s(i: i32) -> i32 {\r\n    assert!(i >= 0);\r\n    i * 3 / 6\r\n}\r\n\r\npub fn half_s_no_assert(i: i32) -> i32 {\r\n    i * 3 / 6\r\n}\r\n```\r\n\r\nresults in (same for stable) ([Godbolt](https://godbolt.org/z/mw_io8))\r\n\r\n```asm\r\nexample::half_u:\r\n        lea     ecx, [rdi + 2*rdi]\r\n        mov     eax, 2863311531\r\n        imul    rax, rcx\r\n        shr     rax, 34\r\n        ret\r\n\r\nexample::half_s_no_assert:\r\n        lea     eax, [rdi + 2*rdi]\r\n        cdqe\r\n        imul    rax, rax, 715827883\r\n        mov     rcx, rax\r\n        shr     rcx, 63\r\n        shr     rax, 32\r\n        add     eax, ecx\r\n        ret\r\n```\r\n\r\nwhile in Zig ([via Andrew Kelley](https://twitter.com/andy_kelley/status/1119295864097464320) (in response to C++ below)) ([Godbolt](https://godbolt.org/z/GKiYMz)) (yes, LLVM does not take advantage of the `unreachable` in `assert` (Zig\u2018s is equivalent to the above (without unlikely)) contrary to gcc with C++ contracts)\r\n\r\n```zig\r\nconst std = @import(\"std\");\r\nconst assert = std.debug.assert;\r\n\r\nexport fn half_unsigned(index: u32) u32 {\r\n    return index*3/6;\r\n}\r\n\r\nexport fn half_signed_no_assert(index: i32) i32 {\r\n    return @divTrunc(index*3,6);\r\n}\r\n\r\nexport fn half_signed_assert(index: i32) i32 {\r\n    assert(index >= 0);\r\n    return @divTrunc(index*3,6);\r\n}\r\n```\r\n\r\n```asm\r\nhalf_unsigned:\r\n        mov     eax, edi\r\n        shr     eax\r\n        ret\r\n\r\nhalf_signed_assert:\r\n        mov     eax, edi\r\n        shr     eax, 31\r\n        lea     eax, [rax + rdi]\r\n        sar     eax\r\n        ret\r\n\r\nhalf_signed_no_assert:\r\n        jmp     half_signed_assert\r\n```\r\n\r\nwhile in C++ with contracts `gcc` `-std=c++2a -O3 -fcontract-semantic=default:assume` ([via John McFarlane](https://twitter.com/JSAMcFarlane/status/1119164321873813504)) ([Godbolt](https://godbolt.org/z/HRltyR))\r\n\r\n```cpp\r\nauto half(unsigned index)\r\n{\r\n    return index*3/6;\r\n}\r\n\r\nauto half(int index)\r\n{\r\n    [[assert: index>=0]];\r\n    return index*3/6;\r\n}\r\n```\r\n\r\n```asm\r\nhalf(unsigned int):\r\n        lea     eax, [rdi+rdi*2]\r\n        mov     edx, 2863311531\r\n        imul    rax, rdx\r\n        shr     rax, 34\r\n        ret\r\nhalf(int):\r\n        mov     eax, edi\r\n        sar     eax\r\n        ret\r\n```\r\n\r\nwhile in C++ without contracts `gcc` `-O3` ([Godbolt](https://godbolt.org/z/nl-M-p))\r\n\r\n```cpp\r\nauto half(unsigned index)\r\n{\r\n    return index*3/6;\r\n}\r\n\r\nauto half(int index)\r\n{\r\n    return index*3/6;\r\n}\r\n```\r\n\r\n```asm\r\nhalf(unsigned int):\r\n        lea     eax, [rdi+rdi*2]\r\n        mov     edx, 2863311531\r\n        imul    rax, rdx\r\n        shr     rax, 34\r\n        ret\r\nhalf(int):\r\n        mov     eax, edi\r\n        shr     eax, 31\r\n        add     eax, edi\r\n        sar     eax\r\n        ret\r\n```", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60122/timeline", "performed_via_github_app": null, "state_reason": "completed"}