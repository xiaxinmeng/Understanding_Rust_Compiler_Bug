{"url": "https://api.github.com/repos/rust-lang/rust/issues/29203", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29203/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29203/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29203/events", "html_url": "https://github.com/rust-lang/rust/issues/29203", "id": 112564577, "node_id": "MDU6SXNzdWUxMTI1NjQ1Nzc=", "number": 29203, "title": "There's no clean way to move a value into an Option and get a reference to the value.", "user": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-10-21T11:16:33Z", "updated_at": "2021-10-04T11:32:13Z", "closed_at": "2017-03-08T19:44:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I need to mutate an `Option` in place, setting it to `Some(x)`, then get a reference to `x`. The only way to do this is:\n\n```\n*my_opt = Some(x);\nlet r = match *my_opt {\n    Some(ref x) => x,\n    None => unreachable!(),\n}\n```\n\nI shouldn't need to pattern-match against `my_opt` if I already know that it's a `Some`. Having to use `unreachable!()` creates code-smell - it's often a red flag that code is wrong and if it isn't wrong it should ideally be possible to restructure it to get rid of the `unreachable!()`.\n\nThis is actually a problem with enums generally but without a way to fix the more general problem I think it should at least be fixed for `Option`.\n\nI propose that either one of the following methods should be added to `Option<T>`\n\n```\n// Insert a value into the `Option`, setting it to `Some(val)` and returning a reference to `val`\nfn insert(&mut self, val: T) -> &mut T\n\n// Insert a value into the `Option`, setting it to `Some(val)` and returning a reference to `val`\n// along with the previous value in the `Option` (if there was one)\nfn insert(&mut self, val: T) -> (&mut T, Option<T>)\n```\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29203/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29203/timeline", "performed_via_github_app": null, "state_reason": "completed"}