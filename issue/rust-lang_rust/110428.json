{"url": "https://api.github.com/repos/rust-lang/rust/issues/110428", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110428/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110428/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110428/events", "html_url": "https://github.com/rust-lang/rust/issues/110428", "id": 1670124799, "node_id": "I_kwDOAAsO6M5jjBT_", "number": 110428, "title": "rustflags ignored if cross-compiling a workspace with a proc-macro crate", "user": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-04-16T20:33:52Z", "updated_at": "2023-04-17T01:14:05Z", "closed_at": "2023-04-17T01:10:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have the following workspace:\r\n\r\n`.cargo/config.toml`:\r\n```toml\r\n[build]\r\ntarget = \"x86_64-pc-windows-gnu\"\r\n\r\n[target.'cfg(all())']\r\nrunner = \"wine\"\r\nrustflags = [\r\n    # BEGIN - Embark standard lints v6 for Rust 1.55+\r\n    # Do not change or add/remove here, but one can add exceptions after this section\r\n    # for more info see: <https://github.com/EmbarkStudios/rust-ecosystem/issues/59>\r\n    \"-Dunsafe_code\",\r\n    \"-Wclippy::all\",\r\n    \"-Wclippy::await_holding_lock\",\r\n    \"-Wclippy::char_lit_as_u8\",\r\n    \"-Wclippy::checked_conversions\",\r\n    \"-Wclippy::dbg_macro\",\r\n    \"-Wclippy::debug_assert_with_mut_call\",\r\n    \"-Wclippy::doc_markdown\",\r\n    \"-Wclippy::empty_enum\",\r\n    \"-Wclippy::enum_glob_use\",\r\n    \"-Wclippy::exit\",\r\n    \"-Wclippy::expl_impl_clone_on_copy\",\r\n    \"-Wclippy::explicit_deref_methods\",\r\n    \"-Wclippy::explicit_into_iter_loop\",\r\n    \"-Wclippy::fallible_impl_from\",\r\n    \"-Wclippy::filter_map_next\",\r\n    \"-Wclippy::flat_map_option\",\r\n    \"-Wclippy::float_cmp_const\",\r\n    \"-Wclippy::fn_params_excessive_bools\",\r\n    \"-Wclippy::from_iter_instead_of_collect\",\r\n    \"-Wclippy::if_let_mutex\",\r\n    \"-Wclippy::implicit_clone\",\r\n    \"-Wclippy::imprecise_flops\",\r\n    \"-Wclippy::inefficient_to_string\",\r\n    \"-Wclippy::invalid_upcast_comparisons\",\r\n    \"-Wclippy::large_digit_groups\",\r\n    \"-Wclippy::large_stack_arrays\",\r\n    \"-Wclippy::large_types_passed_by_value\",\r\n    \"-Wclippy::let_unit_value\",\r\n    \"-Wclippy::linkedlist\",\r\n    \"-Wclippy::lossy_float_literal\",\r\n    \"-Wclippy::macro_use_imports\",\r\n    \"-Wclippy::manual_ok_or\",\r\n    \"-Wclippy::map_err_ignore\",\r\n    \"-Wclippy::map_flatten\",\r\n    \"-Wclippy::map_unwrap_or\",\r\n    \"-Wclippy::match_on_vec_items\",\r\n    \"-Wclippy::match_same_arms\",\r\n    \"-Wclippy::match_wild_err_arm\",\r\n    \"-Wclippy::match_wildcard_for_single_variants\",\r\n    \"-Wclippy::mem_forget\",\r\n    \"-Wclippy::mismatched_target_os\",\r\n    \"-Wclippy::missing_enforced_import_renames\",\r\n    \"-Wclippy::mut_mut\",\r\n    \"-Wclippy::mutex_integer\",\r\n    \"-Wclippy::needless_borrow\",\r\n    \"-Wclippy::needless_continue\",\r\n    \"-Wclippy::needless_for_each\",\r\n    \"-Wclippy::option_option\",\r\n    \"-Wclippy::path_buf_push_overwrite\",\r\n    \"-Wclippy::ptr_as_ptr\",\r\n    \"-Wclippy::rc_mutex\",\r\n    \"-Wclippy::ref_option_ref\",\r\n    \"-Wclippy::rest_pat_in_fully_bound_structs\",\r\n    \"-Wclippy::same_functions_in_if_condition\",\r\n    \"-Wclippy::semicolon_if_nothing_returned\",\r\n    \"-Wclippy::single_match_else\",\r\n    \"-Wclippy::string_add_assign\",\r\n    \"-Wclippy::string_add\",\r\n    \"-Wclippy::string_lit_as_bytes\",\r\n    \"-Wclippy::string_to_string\",\r\n    \"-Wclippy::todo\",\r\n    \"-Wclippy::trait_duplication_in_bounds\",\r\n    \"-Wclippy::unimplemented\",\r\n    \"-Wclippy::unnested_or_patterns\",\r\n    \"-Wclippy::unused_self\",\r\n    \"-Wclippy::useless_transmute\",\r\n    \"-Wclippy::verbose_file_reads\",\r\n    \"-Wclippy::zero_sized_map_values\",\r\n    \"-Wfuture_incompatible\",\r\n    \"-Wnonstandard_style\",\r\n    \"-Wrust_2018_idioms\",\r\n    # END - Embark standard lints v6 for Rust 1.55+\r\n]\r\n```\r\nI'm using this to both cross-compile and for linting.\r\n\r\nI then have 2 crates in the /crates/ directory: `lib` and `lib-macros`. `lib` is a cdylib that depends on `lib-macros`, which is a prob-macro.\r\n\r\n`/crates/lib/src/lib.rs`:\r\n```rust\r\nuse lib_macros::a;\r\n\r\n// this should do something nifty...\r\na!(\"version.dll\" => ![..]);\r\n```\r\n\r\n`/crates/lib-macros/src/lib.rs`:\r\n```rust\r\nuse proc_macro::TokenStream;\r\n\r\n#[proc_macro]\r\npub fn a(_input: TokenStream) -> TokenStream {\r\n    // this should be an error\r\n    unsafe {\r\n        let px = std::ptr::null_mut::<u32>();\r\n        // px.write(1u32);\r\n    }\r\n\r\n    TokenStream::new()\r\n}\r\n\r\n#[proc_macro]\r\npub fn b(_input: TokenStream) -> TokenStream {\r\n    // this should emit a warning\r\n    todo!();\r\n}\r\n```\r\n\r\nI expected to see this happen: Compilation fails, as -Dunsafe-code is passed to rustc in rustflags. This happens if I add anything unsafe to `lib`.\r\n\r\nInstead, this happened: Compilation succeeds, even though it shouldn't.\r\n\r\nIt seems this only happens with both a proc-macro crate **and** if I'm cross compiling.\r\n\r\nI've found the following workarounds:\r\n1. I can add --target=x86_64-pc-windows-gnu to the end of rustflags, and this works almost perfectly; except rust-analyzer passes target twice, causing it to fail.\r\n2. I can call `cargo clippy --target=x86_64-pc-windows-gnu -- (etc)` manually, though this isn't ideal (but works fine.)\r\n3. I can just not cross-compile, but this is necessary as another crate in the workspace (`lib`) must be compiled for windows.\r\n\r\n### **Meta**\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.70.0-nightly (3a8a131e9 2023-04-02)\r\nbinary: rustc\r\ncommit-hash: 3a8a131e9509c478ece1c58fe0ea2d49463d2300\r\ncommit-date: 2023-04-02\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.70.0-nightly\r\nLLVM version: 16.0.0\r\n```\r\n\r\ne: I have some more info. If I run `cargo build -v` with the above configuration, I get this:\r\n```\r\nrustc --crate-name lib --edition=2021 crates/lib/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --diagnostic-width=277 --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=56772d0707a74b7b -C extra-filename=-56772d0707a74b7b --out-dir /home/centri/GitHub/aaa/target/x86_64-pc-windows-gnu/debug/deps --target x86_64-pc-windows-gnu -C incremental=/home/centri/GitHub/aaa/target/x86_64-pc-windows-gnu/debug/incremental -L dependency=/home/centri/GitHub/aaa/target/x86_64-pc-windows-gnu/debug/deps -L dependency=/home/centri/GitHub/aaa/target/debug/deps --extern lib_macros=/home/centri/GitHub/aaa/target/debug/deps/liblib_macros-3b80b69d807e0acf.so -Dunsafe_code '-Wclippy::all' '-Wclippy::await_holding_lock' '-Wclippy::char_lit_as_u8' '-Wclippy::checked_conversions' '-Wclippy::dbg_macro' '-Wclippy::debug_assert_with_mut_call' '-Wclippy::doc_markdown' '-Wclippy::empty_enum' '-Wclippy::enum_glob_use' '-Wclippy::exit' '-Wclippy::expl_impl_clone_on_copy' '-Wclippy::explicit_deref_methods' '-Wclippy::explicit_into_iter_loop' '-Wclippy::fallible_impl_from' '-Wclippy::filter_map_next' '-Wclippy::flat_map_option' '-Wclippy::float_cmp_const' '-Wclippy::fn_params_excessive_bools' '-Wclippy::from_iter_instead_of_collect' '-Wclippy::if_let_mutex' '-Wclippy::implicit_clone' '-Wclippy::imprecise_flops' '-Wclippy::inefficient_to_string' '-Wclippy::invalid_upcast_comparisons' '-Wclippy::large_digit_groups' '-Wclippy::large_stack_arrays' '-Wclippy::large_types_passed_by_value' '-Wclippy::let_unit_value' '-Wclippy::linkedlist' '-Wclippy::lossy_float_literal' '-Wclippy::macro_use_imports' '-Wclippy::manual_ok_or' '-Wclippy::map_err_ignore' '-Wclippy::map_flatten' '-Wclippy::map_unwrap_or' '-Wclippy::match_on_vec_items' '-Wclippy::match_same_arms' '-Wclippy::match_wild_err_arm' '-Wclippy::match_wildcard_for_single_variants' '-Wclippy::mem_forget' '-Wclippy::mismatched_target_os' '-Wclippy::missing_enforced_import_renames' '-Wclippy::mut_mut' '-Wclippy::mutex_integer' '-Wclippy::needless_borrow' '-Wclippy::needless_continue' '-Wclippy::needless_for_each' '-Wclippy::option_option' '-Wclippy::path_buf_push_overwrite' '-Wclippy::ptr_as_ptr' '-Wclippy::rc_mutex' '-Wclippy::ref_option_ref' '-Wclippy::rest_pat_in_fully_bound_structs' '-Wclippy::same_functions_in_if_condition' '-Wclippy::semicolon_if_nothing_returned' '-Wclippy::single_match_else' '-Wclippy::string_add_assign' '-Wclippy::string_add' '-Wclippy::string_lit_as_bytes' '-Wclippy::string_to_string' '-Wclippy::todo' '-Wclippy::trait_duplication_in_bounds' '-Wclippy::unimplemented' '-Wclippy::unnested_or_patterns' '-Wclippy::unused_self' '-Wclippy::useless_transmute' '-Wclippy::verbose_file_reads' '-Wclippy::zero_sized_map_values' -Wfuture_incompatible -Wnonstandard_style -Wrust_2018_idioms\r\n```\r\nIf I instead run it with --target=x86_64-pc-windows-gnu in rustflags and remove build.target, I get this:\r\n```\r\nrustc --crate-name lib_macros --edition=2021 crates/lib-macros/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --diagnostic-width=277 --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debuginfo=2 -C metadata=3b80b69d807e0acf -C extra-filename=-3b80b69d807e0acf --out-dir /home/centri/GitHub/aaa/target/debug/deps -C incremental=/home/centri/GitHub/aaa/target/debug/incremental -L dependency=/home/centri/GitHub/aaa/target/debug/deps --extern proc_macro -Dunsafe_code '-Wclippy::all' '-Wclippy::await_holding_lock' '-Wclippy::char_lit_as_u8' '-Wclippy::checked_conversions' '-Wclippy::dbg_macro' '-Wclippy::debug_assert_with_mut_call' '-Wclippy::doc_markdown' '-Wclippy::empty_enum' '-Wclippy::enum_glob_use' '-Wclippy::exit' '-Wclippy::expl_impl_clone_on_copy' '-Wclippy::explicit_deref_methods' '-Wclippy::explicit_into_iter_loop' '-Wclippy::fallible_impl_from' '-Wclippy::filter_map_next' '-Wclippy::flat_map_option' '-Wclippy::float_cmp_const' '-Wclippy::fn_params_excessive_bools' '-Wclippy::from_iter_instead_of_collect' '-Wclippy::if_let_mutex' '-Wclippy::implicit_clone' '-Wclippy::imprecise_flops' '-Wclippy::inefficient_to_string' '-Wclippy::invalid_upcast_comparisons' '-Wclippy::large_digit_groups' '-Wclippy::large_stack_arrays' '-Wclippy::large_types_passed_by_value' '-Wclippy::let_unit_value' '-Wclippy::linkedlist' '-Wclippy::lossy_float_literal' '-Wclippy::macro_use_imports' '-Wclippy::manual_ok_or' '-Wclippy::map_err_ignore' '-Wclippy::map_flatten' '-Wclippy::map_unwrap_or' '-Wclippy::match_on_vec_items' '-Wclippy::match_same_arms' '-Wclippy::match_wild_err_arm' '-Wclippy::match_wildcard_for_single_variants' '-Wclippy::mem_forget' '-Wclippy::mismatched_target_os' '-Wclippy::missing_enforced_import_renames' '-Wclippy::mut_mut' '-Wclippy::mutex_integer' '-Wclippy::needless_borrow' '-Wclippy::needless_continue' '-Wclippy::needless_for_each' '-Wclippy::option_option' '-Wclippy::path_buf_push_overwrite' '-Wclippy::ptr_as_ptr' '-Wclippy::rc_mutex' '-Wclippy::ref_option_ref' '-Wclippy::rest_pat_in_fully_bound_structs' '-Wclippy::same_functions_in_if_condition' '-Wclippy::semicolon_if_nothing_returned' '-Wclippy::single_match_else' '-Wclippy::string_add_assign' '-Wclippy::string_add' '-Wclippy::string_lit_as_bytes' '-Wclippy::string_to_string' '-Wclippy::todo' '-Wclippy::trait_duplication_in_bounds' '-Wclippy::unimplemented' '-Wclippy::unnested_or_patterns' '-Wclippy::unused_self' '-Wclippy::useless_transmute' '-Wclippy::verbose_file_reads' '-Wclippy::zero_sized_map_values' -Wfuture_incompatible -Wnonstandard_style -Wrust_2018_idioms --target=x86_64-pc-windows-gnu\r\n```\r\n\r\nSo, rustflags is still passed, it's just building the opposite(?) crate in both. I'm still not sure why it does this, though (or why it ignores it in the former)...", "closed_by": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110428/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}