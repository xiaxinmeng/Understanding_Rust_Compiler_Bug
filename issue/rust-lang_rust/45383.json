{"url": "https://api.github.com/repos/rust-lang/rust/issues/45383", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45383/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45383/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45383/events", "html_url": "https://github.com/rust-lang/rust/issues/45383", "id": 266832782, "node_id": "MDU6SXNzdWUyNjY4MzI3ODI=", "number": 45383, "title": "suggest use of the `match_default_bindings` feature gate", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-19T12:57:28Z", "updated_at": "2017-11-02T21:26:25Z", "closed_at": "2017-11-02T21:26:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now, if the `match_default_bindings` is not enabled, then [type check does not even **attempt** to auto-deref on pattern match](https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/_match.rs#L71). This makes it rather undiscoverable. If I try to run this program, for example:\r\n\r\n```rust\r\nfn foo(x: &Option<i32>) {\r\n  if let Some(y) = x {\r\n    println!(\"{}\", y);\r\n  }\r\n}\r\n\r\nfn main() {\r\n  foo(&Some(22));\r\n}\r\n```\r\n\r\nI get:\r\n\r\n```\r\nStandard Error\r\n\r\n   Compiling playground v0.0.1 (file:///playground)\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:2:10\r\n  |\r\n2 |   if let Some(y) = x {\r\n  |          ^^^^^^^ expected reference, found enum `std::option::Option`\r\n  |\r\n  = note: expected type `&std::option::Option<i32>`\r\n             found type `std::option::Option<_>`\r\n```\r\n\r\nOf course, [if I add the feature gate, it works](https://play.rust-lang.org/?gist=60cc8d1a9e23d0a3f4c705153a288c82&version=nightly).\r\n\r\nWhat I would like is for some kind of **hint** that the feature gate is available, at least on nightly builds. As an example, if I [use slice patterns (also unstable) on nightly](https://play.rust-lang.org/?gist=66fee3f2744bdc380180a8995565d9de&version=nightly), I get:\r\n\r\n```\r\nerror: slice pattern syntax is experimental (see issue #23121)\r\n --> src/main.rs:2:7\r\n  |\r\n2 |   let [x, y] = [1, 2];\r\n  |       ^^^^^^\r\n  = help: add #![feature(slice_patterns)] to the crate attributes to enable\r\n```\r\n\r\n(On stable, the help is not present.) This error results from [this code here](https://github.com/rust-lang/rust/blob/master/src/libsyntax/feature_gate.rs#L1501-L1503) which invokes the [`gate_features_post!` macro](https://github.com/rust-lang/rust/blob/master/src/libsyntax/feature_gate.rs#L1165-L1178). I'm not 100% sure what error message we should use here, but I think we should do something similar.\r\n\r\nRoughly speaking, the idea would be this: \r\n\r\n- Remove the feature check for `tcx.sess.features.borrow().match_default_bindings` from [this line](https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/_match.rs#L71) and instead enter the `if` the same either way.\r\n- Instead, we can do the feature check only [once we actually decide to insert match default bindings](https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/_match.rs#L117-L119) -- this code only runs for patterns that would result in an error without the feature-gate enabled anyhow.\r\n- In that branch, if the feature-gate is disabled, we can invoke [the `feature_err` function](https://github.com/rust-lang/rust/blob/master/src/libsyntax/feature_gate.rs#L1074-L1077) to create an error to emit. \r\n    - Perhaps we should a help or suggestion like, \"to make this code work without the feature gate, consider using an `&`-pattern here\".\r\n\r\nThe final error would thus look something like:\r\n\r\n```\r\nerror: matching a value of reference type with a non-reference pattern is unstable\r\n --> src/main.rs:2:10\r\n  |\r\n2 |   if let Some(y) = x {\r\n  |          ^^^^^^^ `&`-pattern required: `&Some(y)`\r\n  |\r\n  = help: add `#![feature(match_default_bindings)]` to the crate attributes to enable\r\n```\r\n\r\nThis error is...a bit funky. We might want to play with the wording. Maybe it wants to be something like:\r\n\r\n\r\n```\r\nerror[\u03950123]: non-reference pattern used to match a reference\r\n --> src/main.rs:2:10\r\n  |\r\n2 |   if let Some(y) = x {\r\n  |          ^^^^^^^ `&`-pattern required: `&Some(y)`\r\n  |\r\n  = help: you can add `#![feature(match_default_bindings)]` to the crate attributes to enable\r\n```\r\n\r\nWe could then make an extended error message for E0123 that explains the RFC a bit too.\r\n\r\ncc @tschottdorf @estebank ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45383/timeline", "performed_via_github_app": null, "state_reason": "completed"}