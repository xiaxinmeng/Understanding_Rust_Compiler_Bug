{"url": "https://api.github.com/repos/rust-lang/rust/issues/31544", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/31544/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/31544/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/31544/events", "html_url": "https://github.com/rust-lang/rust/issues/31544", "id": 132814600, "node_id": "MDU6SXNzdWUxMzI4MTQ2MDA=", "number": 31544, "title": "`copy_nonoverlapping` optimizes to a `__aeabi_memcpy` function that recurses infinitely", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-02-10T20:51:27Z", "updated_at": "2016-02-17T23:03:15Z", "closed_at": "2016-02-12T19:18:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "on a custom target with `no-compiler-rt: true`.\n\nThis binary:\n\n``` asm\n08000000 <_ZN10EXCEPTIONS20h109777d051950307UbaE>:\n 8000000:       20002000        andcs   r2, r0, r0\n 8000004:       08000009        stmdaeq r0, {r0, r3}\n\n08000008 <__reset>:\n 8000008:       b580            push    {r7, lr}\n 800000a:       f240 0000       movw    r0, #0\n 800000e:       f240 0100       movw    r1, #0\n 8000012:       f2c2 0000       movt    r0, #8192       ; 0x2000\n 8000016:       f2c2 0100       movt    r1, #8192       ; 0x2000\n 800001a:       1a09            subs    r1, r1, r0\n 800001c:       f021 0203       bic.w   r2, r1, #3\n 8000020:       f240 0140       movw    r1, #64 ; 0x40\n 8000024:       f6c0 0100       movt    r1, #2048       ; 0x800\n 8000028:       f000 f806       bl      8000038 <__aeabi_memcpy4>\n 800002c:       f240 0000       movw    r0, #0\n 8000030:       f6c0 0000       movt    r0, #2048       ; 0x800\n 8000034:       6800            ldr     r0, [r0, #0]\n 8000036:       e7fe            b.n     8000036 <__reset+0x2e>\n\n08000038 <__aeabi_memcpy4>:\n 8000038:       f000 b800       b.w     800003c <__aeabi_memcpy>\n\n0800003c <__aeabi_memcpy>:\n 800003c:       e7fe            b.n     800003c <__aeabi_memcpy>\n```\n\nWas generated by this cargo project:\n\n``` rust\n// src/main.rs\n#![feature(core_intrinsics)]\n#![feature(lang_items)]\n\n#![no_std]\n\nextern crate rlibc;\n\nuse core::{intrinsics, mem};\n\n// Entry point\n#[no_mangle]\npub unsafe extern \"C\" fn __reset() {\n    init_data();\n\n    // Make sure the compiler doesn't remove the EXCEPTIONS symbol\n    intrinsics::volatile_load(&EXCEPTIONS[0]);\n\n    loop {}\n}\n\n// Initialize the data section\nunsafe fn init_data() {\n    extern \"C\" {\n        static __DATA_LOAD: u32;\n\n        static mut __DATA_END: u32;\n        static mut __DATA_START: u32;\n    }\n\n    let n = (&__DATA_END as *const _ as usize - &__DATA_START as *const _ as usize) /\n            mem::size_of::<u32>();\n\n    intrinsics::copy_nonoverlapping(&__DATA_LOAD, &mut __DATA_START, n);\n}\n\n// This is how compiler-rt defines this symbol\n#[no_mangle]\npub unsafe extern \"C\" fn __aeabi_memcpy4(dest: *mut u8, src: *const u8, size: usize) {\n    rlibc::memcpy(dest, src, size);\n}\n\n// This is how compiler-rt defines this symbol\n#[no_mangle]\npub unsafe extern \"C\" fn __aeabi_memcpy(dest: *mut u8, src: *const u8, size: usize) {\n    rlibc::memcpy(dest, src, size);\n}\n\n// Stuff to build a place symbols in the addresses where the hardware expects them\nextern \"C\" {\n    fn __STACK_START();\n}\n\n#[link_section = \".exceptions\"]\nstatic EXCEPTIONS: [Option<unsafe extern \"C\" fn()>; 2] = [Some(__STACK_START), Some(::__reset)];\n\nmod lang_items {\n    #[lang = \"eh_personality\"]\n    fn eh_personality() {}\n\n    #[lang = \"panic_fmt\"]\n    fn panic_fmt() {}\n\n    // Unused, just to appease the compiler\n    #[lang = \"start\"]\n    fn start(_: *const u8, _: isize, _: *const *const u8) -> isize {\n        0\n    }\n}\n\n// Unused, just to appease the compiler\nfn main() {}\n```\n\n`thumbv7m-none-eabi.json`\n\n``` json\n{\n  \"arch\": \"arm\",\n  \"llvm-target\": \"thumbv7m-none-eabi\",\n  \"os\": \"none\",\n  \"target-endian\": \"little\",\n  \"target-pointer-width\": \"32\",\n\n  \"cpu\": \"cortex-m3\",\n  \"executables\": true,\n  \"morestack\": false,\n  \"no-compiler-rt\": true,\n  \"pre-link-args\": [\n    \"-Tlayout.ld\",\n    \"-Wl,--build-id=none\",\n    \"-Wl,--gc-sections\",\n    \"-mcpu=cortex-m3\",\n    \"-mthumb\",\n    \"-nostartfiles\"\n  ],\n  \"relocation-model\": \"static\"\n}\n```\n\n``` toml\n# Cargo.toml\n[package]\nauthors = []\nname = \"bug\"\nversion = \"0.1.0\"\n\n[dependencies]\nrlibc = { git = \"https://github.com/hackndev/rlibc\", branch = \"zinc\" }\nrust-libcore = \"0.0.3\"\n```\n\n```\n/* layout.ld */\nMEMORY\n{\n    rom(RX)     : ORIGIN = 0x08000000, LENGTH = 128K\n    ram(WAIL)   : ORIGIN = 0x20000000, LENGTH = 8K\n}\n\nENTRY(__reset)\n\n__DATA_LOAD = LOADADDR(.data);\n\nSECTIONS\n{\n    .text : ALIGN(4)\n    {\n        KEEP(*(.exceptions))\n        *(.text*)\n    } > rom\n\n    .data : ALIGN(4)\n    {\n      __DATA_START = .;\n      *(.data*)\n      . = ALIGN(4);\n      __DATA_END = .;\n    } > ram AT > rom\n\n    /DISCARD/ :\n    {\n      *(.ARM.exidx*)\n    }\n\n    __STACK_START = ORIGIN(ram) + LENGTH(ram);\n}\n```\n### Version\n\n```\nrustc 1.8.0-nightly (75271d8f1 2016-02-09)\n```\n### Workarounds\n- Define `__aeabi_memcpy4` as a loop instead of using `rlibc::memcpy` then you can drop the `rlibc` dependency. But depending on how you write the definition you may end with infinite recursion again.\n- Remove the `__aeabi_memcpy4` function and link to a cross compiled `libcompiler-rt.a` by changing `no-compiler-rt` to `false`. This is hard to do because one needs to patch rust-lang/compiler-rt to work with a specific custom target.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/31544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/31544/timeline", "performed_via_github_app": null, "state_reason": "completed"}