{"url": "https://api.github.com/repos/rust-lang/rust/issues/96255", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96255/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96255/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96255/events", "html_url": "https://github.com/rust-lang/rust/issues/96255", "id": 1210109631, "node_id": "I_kwDOAAsO6M5IIM6_", "number": 96255, "title": "Poor error message for closure expression that does not infer required higher-ranked lifetime", "user": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-04-20T19:15:51Z", "updated_at": "2022-04-20T19:19:49Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If I have a method that takes a generic parameter constrained by a trait, and the trait is implemented for `F: for<'a> FnOnce(Foo<'a>) -> Bar<'a>`[^foobar], then calling the method with a closure expression fails to infer the higher-ranked lifetime and produces a confusing error.\r\n\r\n[^foobar]: `Foo<'a>` and `Bar<'a>` may also be `&'a T`.\r\n\r\nGiven the following code: ([play.rust-lang.org](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=a4b1147ed32815ada980ab19e31472c2))\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\nstruct Value<'a> {\r\n    _marker: PhantomData<&'a ()>,\r\n}\r\nimpl<'a> Value<'a> {\r\n    fn new() -> Self {\r\n        Self {\r\n            _marker: PhantomData,\r\n        }\r\n    }\r\n}\r\ntrait Callable {\r\n    fn call<'a>(self, s: Value<'a>) -> Value<'a>;\r\n}\r\n\r\nimpl<F> Callable for F\r\nwhere\r\n    F: for<'a> FnOnce(Value<'a>) -> Value<'a>,\r\n{\r\n    fn call<'a>(self, s: Value<'a>) -> Value<'a> {\r\n        self(s)\r\n    }\r\n}\r\n\r\nfn take_callable<C: Callable>(_: C) {}\r\n\r\nfn main() {\r\n    take_callable(|v: Value| Value::new());\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:28:5\r\n   |\r\n28 |     take_callable(|v: Value| Value::new());\r\n   |     ^^^^^^^^^^^^^ lifetime mismatch\r\n   |\r\n   = note: expected struct `Value<'_>`\r\n              found struct `Value<'a>`\r\nnote: the lifetime requirement is introduced here\r\n  --> src/main.rs:25:21\r\n   |\r\n25 | fn take_callable<C: Callable>(_: C) {}\r\n   |                     ^^^^^^^^\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\n```\r\n\r\nThis error does not mention higher-ranked lifetimes, does not explain where the `'a` came from or the `'_` (and if I use a type like `&str` instead of `Value` then it doesn't even print the `'_` lifetime), flips the \"expected\" and \"found\" types, points at the `C: Callable` bound as the lifetime requirement despite no lifetime being visible on that bound, and does not even highlight the closure expression's span. If I modify the code to return `v` instead of a `Value<'static>` then it does add the following note:\r\n\r\n```\r\nnote: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\r\n  --> src/main.rs:28:19\r\n   |\r\n28 |     take_callable(|v: Value| v);\r\n   |                   ^^^^^^^^^^^^\r\n```\r\n\r\nThis is a slight improvement but is still confusing.\r\n\r\nThis is especially confusing as having a method that is bounded by `FnOnce` directly avoids this error, which I'm told is a special-case in the compiler for inferring higher-ranked lifetimes on closure expressions.\r\n\r\nMy expectation here is the error should mention higher-ranked lifetimes somehow, preferably both specifying `for<'a> Value<'a>` and including a note that explains that closure expressions do not infer higher-ranked lifetimes when the generic bound does not specify the higher-ranked lifetime directly.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96255/timeline", "performed_via_github_app": null, "state_reason": null}