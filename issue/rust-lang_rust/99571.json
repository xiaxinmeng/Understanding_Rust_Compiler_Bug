{"url": "https://api.github.com/repos/rust-lang/rust/issues/99571", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99571/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99571/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99571/events", "html_url": "https://github.com/rust-lang/rust/issues/99571", "id": 1313621818, "node_id": "I_kwDOAAsO6M5OTEc6", "number": 99571, "title": "Tracking Issue for Transmutability Trait: `#[transmutability]`", "user": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-07-21T18:08:33Z", "updated_at": "2023-01-04T00:22:46Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Feature gate: `#![feature(transmutability)]`\r\n\r\nThis is a tracking issue for [MCP411: *Lang Item for Transmutability*](https://github.com/rust-lang/compiler-team/issues/411). The MCP defines an experimental, compiler-implemented trait that can be used to audit whether a particular transmutation (or other form of bit-reinterpretation cast) is safe. \r\n\r\nAt this time, this feature is **NOT** on track to stabilization. It has been specified in an MCP, not an RFC, and will likely require an RFC to be tracked for stabilization.\r\n\r\n### Public API\r\nThe public API of this feature, as defined by MCP411, is roughly as follows:\r\n```rust\r\n#[lang = \"transmute_trait\"]\r\npub unsafe trait BikeshedIntrinsicFrom<Src, Context, const ASSUME: Assume>\r\nwhere\r\n    Src: ?Sized\r\n{}\r\n\r\n#[lang = \"transmutability_opts\"]\r\n#[derive(PartialEq, Eq, Clone, Copy)]\r\n#[non_exhaustive]\r\npub struct Assume {\r\n    pub alignment   : bool,\r\n    pub lifetimes   : bool,\r\n    pub validity    : bool,\r\n    pub visibility  : bool,\r\n}\r\n\r\nimpl Assume {\r\n    pub const NOTHING: Self = Self {\r\n        alignment   : false,\r\n        lifetimes   : false,\r\n        validity    : false,\r\n        visibility  : false,\r\n    };\r\n\r\n    pub const ALIGNMENT:  Self = Self {alignment:  true, ..Self::NOTHING};\r\n    pub const LIFETIMES:  Self = Self {lifetimes:  true, ..Self::NOTHING};\r\n    pub const VALIDITY:   Self = Self {validity:   true, ..Self::NOTHING};\r\n    pub const VISIBILITY: Self = Self {visibility: true, ..Self::NOTHING};\r\n}\r\n\r\nimpl const core::ops::Add for Assume {\r\n    type Output = Self;\r\n\r\n    fn add(self, rhs: Self) -> Self {\r\n        Self {\r\n            alignment   : self.alignment  || rhs.alignment,\r\n            lifetimes   : self.lifetimes  || rhs.lifetimes,\r\n            validity    : self.validity   || rhs.validity,\r\n            visibility  : self.visibility || rhs.visibility,\r\n        }\r\n    }\r\n}\r\n\r\nimpl const core::ops::Sub for Assume {\r\n    type Output = Self;\r\n\r\n    fn sub(self, rhs: Self) -> Self {\r\n        Self {\r\n            alignment   : self.alignment  && !rhs.alignment,\r\n            lifetimes   : self.lifetimes  && !rhs.lifetimes,\r\n            validity    : self.validity   && !rhs.validity,\r\n            visibility  : self.visibility && !rhs.visibility,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] MCP: https://github.com/rust-lang/compiler-team/issues/411\r\n- [ ] Implementation:\r\n  - [x] https://github.com/rust-lang/rust/pull/92268\r\n  - [x] https://github.com/rust-lang/rust/pull/100726\r\n- [ ] RFC: #...\r\n- [ ] Final comment period (FCP)[^1]\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\nVirtually all aspects of this experimental feature are unresolved. \r\n\r\n* [What can we transmute to and from a union?](https://github.com/rust-lang/rust/pull/92268#discussion_r925254503)\r\n\r\n[^1]: https://std-dev-guide.rust-lang.org/feature-lifecycle/stabilization.html\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99571/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 2}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99571/timeline", "performed_via_github_app": null, "state_reason": null}