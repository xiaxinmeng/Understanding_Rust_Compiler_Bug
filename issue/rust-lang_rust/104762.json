{"url": "https://api.github.com/repos/rust-lang/rust/issues/104762", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104762/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104762/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104762/events", "html_url": "https://github.com/rust-lang/rust/issues/104762", "id": 1461095396, "node_id": "I_kwDOAAsO6M5XFovk", "number": 104762, "title": "Confusing examples in Vec::extend_from_within", "user": {"login": "HarrisonMc555", "id": 22666187, "node_id": "MDQ6VXNlcjIyNjY2MTg3", "avatar_url": "https://avatars.githubusercontent.com/u/22666187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HarrisonMc555", "html_url": "https://github.com/HarrisonMc555", "followers_url": "https://api.github.com/users/HarrisonMc555/followers", "following_url": "https://api.github.com/users/HarrisonMc555/following{/other_user}", "gists_url": "https://api.github.com/users/HarrisonMc555/gists{/gist_id}", "starred_url": "https://api.github.com/users/HarrisonMc555/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HarrisonMc555/subscriptions", "organizations_url": "https://api.github.com/users/HarrisonMc555/orgs", "repos_url": "https://api.github.com/users/HarrisonMc555/repos", "events_url": "https://api.github.com/users/HarrisonMc555/events{/privacy}", "received_events_url": "https://api.github.com/users/HarrisonMc555/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-11-23T06:06:50Z", "updated_at": "2023-01-11T12:04:13Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Location\n\n[Vec::extend_from_within](https://doc.rust-lang.org/std/vec/struct.Vec.html#method.extend_from_within)\n\n### Summary\n\nThe examples are confusing because they use increasing integer sequences as both the vector elements _and_ the range. This leas to a confusing example where you call `vec.extend_from_within(2..);` and add `2..4` to the end of the vector. When I first read this, I assumed that it was adding the elements of the range to the end of the vector and that the vector had only been initialized with enough \"extra room\" for three more elements. It took me a while to realize that the range was specifying a range inside the vector and then appending it to the end. Looking back, the name `extend_from_within` should have been a pretty good hint. However, every example adds numbers to the end that matches the first number of the provided range.\n\n```\nlet mut vec = vec![0, 1, 2, 3, 4];\n\n// Adds 2..4 to end of vector\nvec.extend_from_within(2..);\nassert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4]);\n\n// Adds 0..1 to end of vector\nvec.extend_from_within(..2);\nassert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4, 0, 1]);\n\n// Adds 4 (and then 2..4) to end of vector\nvec.extend_from_within(4..8);\nassert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4, 0, 1, 4, 2, 3, 4]);\n```\n\nIf you think about the name of the method and the description of the method, you can figure out what this function does. However, the examples can be fairly misleading. I believe this can be rectified by using non-integer values in the vector. For example:\n\n```\nlet mut vec = vec!['a', 'b', 'c'];\n\nvec.extend_from_within(1..);\nassert_eq!(vec, ['a', 'b', 'c', 'b', 'c']);\n\nvec.extend_from_within(..1);\nassert_eq!(vec, ['a', 'b', 'c', 'b', 'c', 'a', 'b']);\n\nvec.extend_from_within(2..5);\nassert_eq!(vec, ['a', 'b', 'c', 'b', 'c', 'a', 'b', 'c', 'b', 'c', 'a']);\n```\n\nDo others agree that this is an improvement? I know a lot of the other examples use integers, so maybe it's not worth making this example different. At the very least, we could improve it by using different numbers instead 0, 1, 2, etc.\n\n```\nlet mut vec = vec![31, 37, 41, 43];\n\nvec.extend_from_within(1..);\nassert_eq!(vec, [31, 37, 41, 43, 37, 41, 43]);\n\nvec.extend_from_within(..2);\nassert_eq!(vec, [31, 37, 41, 43, 37, 41, 43, 31, 37]);\n\nvec.extend_from_within(2..5);\nassert_eq!(vec, [31, 37, 41, 43, 37, 41, 43, 31, 37, 41, 43, 37]);\n```\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"HintringerFabian\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104762/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104762/timeline", "performed_via_github_app": null, "state_reason": null}