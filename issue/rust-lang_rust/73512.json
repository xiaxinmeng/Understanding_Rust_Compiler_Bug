{"url": "https://api.github.com/repos/rust-lang/rust/issues/73512", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73512/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73512/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73512/events", "html_url": "https://github.com/rust-lang/rust/issues/73512", "id": 642085666, "node_id": "MDU6SXNzdWU2NDIwODU2NjY=", "number": 73512, "title": "Terrible code generation with a zillion bounds checks.", "user": {"login": "khuey", "id": 325892, "node_id": "MDQ6VXNlcjMyNTg5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/325892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khuey", "html_url": "https://github.com/khuey", "followers_url": "https://api.github.com/users/khuey/followers", "following_url": "https://api.github.com/users/khuey/following{/other_user}", "gists_url": "https://api.github.com/users/khuey/gists{/gist_id}", "starred_url": "https://api.github.com/users/khuey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khuey/subscriptions", "organizations_url": "https://api.github.com/users/khuey/orgs", "repos_url": "https://api.github.com/users/khuey/repos", "events_url": "https://api.github.com/users/khuey/events{/privacy}", "received_events_url": "https://api.github.com/users/khuey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-19T16:19:38Z", "updated_at": "2020-06-19T19:51:08Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is probably a duplicate of something.\r\n\r\nIn psychon/x11rb#491 we have a function that looks like:\r\n```rust\r\n    pub fn try_parse_request(header: RequestHeader, value: &[u8]) -> Result<Self, ParseError> {\r\n        if header.minor_opcode != LATCH_LOCK_STATE_REQUEST {\r\n            return Err(ParseError::ParseError);\r\n        }\r\n        let (device_spec, remaining) = DeviceSpec::try_parse(value)?;\r\n        let (affect_mod_locks, remaining) = u8::try_parse(remaining)?;\r\n        let (mod_locks, remaining) = u8::try_parse(remaining)?;\r\n        let (lock_group, remaining) = bool::try_parse(remaining)?;\r\n        let (group_lock, remaining) = u8::try_parse(remaining)?;\r\n        let group_lock = group_lock.try_into()?;\r\n        let (affect_mod_latches, remaining) = u8::try_parse(remaining)?;\r\n        let remaining = remaining.get(1..).ok_or(ParseError::InsufficientData)?;\r\n        let remaining = remaining.get(1..).ok_or(ParseError::InsufficientData)?;\r\n        let (latch_group, remaining) = bool::try_parse(remaining)?;\r\n        let (group_latch, remaining) = u16::try_parse(remaining)?;\r\n        let _ = remaining;\r\n        Ok(LatchLockStateRequest {\r\n            device_spec,\r\n            affect_mod_locks,\r\n            mod_locks,\r\n            lock_group,\r\n            group_lock,\r\n            affect_mod_latches,\r\n            latch_group,\r\n            group_latch,\r\n        })\r\n    }\r\n```\r\nBasically, it takes a byte stream in a wire format and parses it into an in-memory struct.\r\n\r\nThe generated assembly looks like \r\n\r\n```asm\r\n_ZN5x11rb8protocol3xkb21LatchLockStateRequest17try_parse_request17hb503842b081124b2E:\r\n        movq    %rdi, %rax\r\n        shrq    $40, %rsi\r\n        cmpb    $5, %sil\r\n        jne     .LBB4888_13\r\n        cmpq    $2, %rcx\r\n        jb      .LBB4888_16\r\n        je      .LBB4888_16\r\n        cmpq    $3, %rcx\r\n        je      .LBB4888_16\r\n        cmpq    $4, %rcx\r\n        je      .LBB4888_16\r\n        cmpb    $0, 4(%rdx)\r\n        setne   %sil\r\n        cmpq    $5, %rcx\r\n        je      .LBB4888_16\r\n        movb    5(%rdx), %dil\r\n        cmpb    $4, %dil\r\n        jae     .LBB4888_13\r\n        cmpq    $6, %rcx\r\n        je      .LBB4888_16\r\n        cmpq    $7, %rcx\r\n        je      .LBB4888_16\r\n        cmpq    $8, %rcx\r\n        je      .LBB4888_16\r\n        cmpq    $9, %rcx\r\n        je      .LBB4888_16\r\n        andq    $-2, %rcx\r\n        cmpq    $10, %rcx\r\n        jne     .LBB4888_12\r\n.LBB4888_16:\r\n        movb    $0, 1(%rax)\r\n        movb    $1, %cl\r\n        movb    %cl, (%rax)\r\n        retq\r\n.LBB4888_13:\r\n        movb    $1, 1(%rax)\r\n        movb    $1, %cl\r\n        movb    %cl, (%rax)\r\n        retq\r\n.LBB4888_12:\r\n        movzwl  (%rdx), %ecx\r\n        movb    2(%rdx), %r8b\r\n        movb    3(%rdx), %r9b\r\n        movb    6(%rdx), %r10b\r\n        cmpb    $0, 9(%rdx)\r\n        movzwl  10(%rdx), %edx\r\n        movw    %cx, 2(%rax)\r\n        movw    %dx, 4(%rax)\r\n        movb    %r8b, 6(%rax)\r\n        movb    %r9b, 7(%rax)\r\n        movb    %sil, 8(%rax)\r\n        movb    %dil, 9(%rax)\r\n        movb    %r10b, 10(%rax)\r\n        setne   11(%rax)\r\n        xorl    %ecx, %ecx\r\n        movb    %cl, (%rax)\r\n        retq\r\n```\r\n\r\nLBB4888_16 is the ParseError::InsufficientData return and LBB4888_13 is the ParseError::ParseError return.\r\n\r\nThe compiler really should be able to consolidate the adjacent bounds checks. And although much smaller, not condensing the adjacent `jb`/`je`s is a comically easy missed optimization.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.46.0-nightly (e55d3f9c5 2020-06-18)\r\nbinary: rustc\r\ncommit-hash: e55d3f9c5213fe1a25366450127bdff67ad1eca2\r\ncommit-date: 2020-06-18\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.46.0-nightly\r\nLLVM version: 10.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73512/timeline", "performed_via_github_app": null, "state_reason": null}