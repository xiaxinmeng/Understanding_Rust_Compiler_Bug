{"url": "https://api.github.com/repos/rust-lang/rust/issues/109563", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109563/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109563/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109563/events", "html_url": "https://github.com/rust-lang/rust/issues/109563", "id": 1639266091, "node_id": "I_kwDOAAsO6M5htTcr", "number": 109563, "title": "Confusing error message when integer literal is inferred as usize", "user": {"login": "VincentWo", "id": 11615665, "node_id": "MDQ6VXNlcjExNjE1NjY1", "avatar_url": "https://avatars.githubusercontent.com/u/11615665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VincentWo", "html_url": "https://github.com/VincentWo", "followers_url": "https://api.github.com/users/VincentWo/followers", "following_url": "https://api.github.com/users/VincentWo/following{/other_user}", "gists_url": "https://api.github.com/users/VincentWo/gists{/gist_id}", "starred_url": "https://api.github.com/users/VincentWo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VincentWo/subscriptions", "organizations_url": "https://api.github.com/users/VincentWo/orgs", "repos_url": "https://api.github.com/users/VincentWo/repos", "events_url": "https://api.github.com/users/VincentWo/events{/privacy}", "received_events_url": "https://api.github.com/users/VincentWo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-03-24T12:02:04Z", "updated_at": "2023-03-24T12:02:04Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Code\n\n```Rust\nfn main() {\r\n    let n: usize = 10;\r\n    let i = -1;\r\n\r\n    let _ = i + n;\r\n}\n```\n\n\n### Current output\n\n```Shell\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\r\n --> src/main.rs:3:13\r\n  |\r\n3 |     let i = -1;\r\n  |             ^^ the trait `Neg` is not implemented for `usize`\r\n  |\r\n  = help: the following other types implement trait `Neg`:\r\n            &f32\r\n            &f64\r\n            &i128\r\n            &i16\r\n            &i32\r\n            &i64\r\n            &i8\r\n            &isize\r\n          and 8 others\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `rust_diagnostic_bug` (bin \"rust_diagnostic_bug\") due to previous error\n```\n\n\n### Desired output\n\n```Shell\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\r\n5 |     let _ = i + n;\r\n  |             ^^^^^---------------------- inferred as `usize` because of this expression\r\n --> src/main.rs:3:13\r\n  |\r\n3 |     let i = -1;\r\n  |             ^^ the trait `Neg` is not implemented for `usize`\r\n  |\r\n  = help: the following other types implement trait `Neg`:\r\n            &f32\r\n            &f64\r\n            &i128\r\n            &i16\r\n            &i32\r\n            &i64\r\n            &i8\r\n            &isize\r\n          and 8 others\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `rust_diagnostic_bug` (bin \"rust_diagnostic_bug\") due to previous error\n```\n\n\n### Rationale and extra context\n\nI think that this combination of type inference is especially confusing since usually rust takes the first inferred type and complains at the second use of the variable, but since this is an integer literal and thus not inferred as `iX` we suddenly have a case where a seemingly innocent declaration can fail in a confusing way without even mentioning the real source of the warning. Especially since it is a bit unintuitive that the addition with another variable can change the type.\n\n### Other cases\n\n_No response_\n\n### Anything else?\n\nThe desired output seemed like the easiest solution to me, but I don't know any rustc internals, it would of course also be possible to infer `i` as `i32` and thus giving an error on the addition or at least to say: Can't convert `-1` to `usize` since `-1` is intuitivly seen as a integer literal, not as an trait function applied to an integer literal.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109563/timeline", "performed_via_github_app": null, "state_reason": null}