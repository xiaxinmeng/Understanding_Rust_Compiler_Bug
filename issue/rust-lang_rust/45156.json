{"url": "https://api.github.com/repos/rust-lang/rust/issues/45156", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45156/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45156/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45156/events", "html_url": "https://github.com/rust-lang/rust/issues/45156", "id": 264013052, "node_id": "MDU6SXNzdWUyNjQwMTMwNTI=", "number": 45156, "title": "use `try_mark_green` for type-checking", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 693665681, "node_id": "MDU6TGFiZWw2OTM2NjU2ODE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-incr-comp", "name": "WG-incr-comp", "color": "c2e0c6", "default": false, "description": "Working group: incremental compilation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-10-09T20:15:14Z", "updated_at": "2017-10-11T18:02:22Z", "closed_at": "2017-10-11T18:02:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now, the type-checker works by [iterating over over every body in the crate and invoking `typeck_tables_of` on them](https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src/librustc_typeck/check/mod.rs#L730-L732); it then proceeds to discard the answer, since it doesn't actually care about the result, it just wants to ensure that the result **has been** computed (and in particular that any errors that may result have been reported).\r\n\r\nIn general, for cases where we are not interested in the result, I think that we should instead be using the `try_mark_green` operation, though we probably want a mildly cleaner interface to it first. The idea here is that `try_mark_green` **will** re-execute the query, but only if its inputs have changed; otherwise, it can mark the query as green without executing it. In particular, `try_mark_green` does not guarantee that the result of the query is \"encached\" in the tables when it completes. \r\n\r\nThis is useful for typeck in particular because I would like to at least have the **option** of skipping the typeck for particular items without saving the results onto disk. The current setup, where we actually do the query, means that we **must** have the typeck tables saved to disk, or else we will have to re-execute the typeck to regenerate them.\r\n\r\nNow, even once we make this change, we will need to do more work to enable skipping typeck (particularly if we don't want to save the typeck tables to disk). We basically have to ensure that there are no **other** places in the code that will invoke `typeck_tables_of` unnecessarily (ideally: if the function or some dependent of it has not changed). In the shorter term, it may indeed be easier to just save the typeck results. \r\n\r\nStill, this seems like a simple step we can take. Longer term, I think we will want to be able to minimize our disk and memory space footprint, while still achieving the best incremental results we can, and the ability to \"lazilly\" recompute things like typeck-tables will be an important factor in that. \r\n\r\nI think I would break this issue into two parts:\r\n\r\n**Step 1. Package up the `try_mark_green` operation in some nicer way.** I would do this by modifying the [plumbing macros for the query infrastructure](https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src/librustc/ty/maps/plumbing.rs). I think we could add an accessor called `try_mark_green`, [somewhat like `force`](https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src/librustc/ty/maps/plumbing.rs#L385-L389). It would look something like this:\r\n\r\n```rust\r\n/// Determines whether the query's result for `key` is up-to-date,\r\n/// without necessarily executing the query. In particular, if all the inputs\r\n/// to the query are green, then the query will not be re-executed. If however\r\n/// some inputs have changed, then the query will be re-executed, and its\r\n/// results cached (after being compared against the hash of the previous results).\r\n///\r\n/// This function is particularly useful when executing passes for their side-effects --\r\n/// e.g., in order to report errors for erroneous programs.\r\n///\r\n/// Because the query will not execute unless it has changed, this function returns unit.\r\npub fn try_mark_green(\r\n    tcx: TyCtxt<'a, $tcx, 'lcx>,\r\n    key: $K)\r\n{\r\n    let dep_node = Self::to_dep_node(tcx, &key);\r\n    tcx.dep_graph.try_mark_green(tcx, &dep_node);\r\n}\r\n```\r\n\r\n**Step 2. Convert code in `librustc_typeck` to use `try_mark_green`.** Notably, change [this line](https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src/librustc_typeck/check/mod.rs#L731) from `self.tcx.typeck_tables_of(body_owner_def_id)` to `ty::maps::queries::typeck_tables_of::try_mark_green(self.tcx, body_owner_def_id)`.\r\n\r\ncc @michaelwoerister, who may disagree forcefully with my premise here, I don't know", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45156/timeline", "performed_via_github_app": null, "state_reason": "completed"}