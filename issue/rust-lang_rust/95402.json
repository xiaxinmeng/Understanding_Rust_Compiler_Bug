{"url": "https://api.github.com/repos/rust-lang/rust/issues/95402", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95402/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95402/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95402/events", "html_url": "https://github.com/rust-lang/rust/issues/95402", "id": 1183420986, "node_id": "I_kwDOAAsO6M5GiZI6", "number": 95402, "title": "Compiler hangs indefinetly when using associated types instead of their explicit type.", "user": {"login": "y86-dev", "id": 94611769, "node_id": "U_kgDOBaOpOQ", "avatar_url": "https://avatars.githubusercontent.com/u/94611769?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y86-dev", "html_url": "https://github.com/y86-dev", "followers_url": "https://api.github.com/users/y86-dev/followers", "following_url": "https://api.github.com/users/y86-dev/following{/other_user}", "gists_url": "https://api.github.com/users/y86-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/y86-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y86-dev/subscriptions", "organizations_url": "https://api.github.com/users/y86-dev/orgs", "repos_url": "https://api.github.com/users/y86-dev/repos", "events_url": "https://api.github.com/users/y86-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/y86-dev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-03-28T13:11:48Z", "updated_at": "2022-04-10T04:12:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\nI tried this code:\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\n\r\npub trait DynQueriable<'a>: Sized\r\nwhere\r\n    QueryIter<'a, Self::Parts, Self::Raw, Self>: Iterator<Item = Self>,\r\n{\r\n    type Parts;\r\n    type Raw: ?Sized + 'a;\r\n}\r\n\r\npub trait QueryVariant<'a, Component: ?Sized + 'a> {}\r\n\r\npub struct QueryIter<'a, T, C: ?Sized, V: DynQueriable<'a, Raw = C>>\r\nwhere\r\n    QueryIter<'a, <V as DynQueriable<'a>>::Parts, C, V>: Iterator<Item = V>,\r\n{\r\n    p: PhantomData<fn(T, &'a C, V) -> (T, &'a C, V)>,\r\n}\r\n\r\nimpl<'a, C: ?Sized, V: QueryVariant<'a, C>> Iterator for QueryIter<'a, &'a V, C, &'a C>\r\nwhere\r\n    &'a C: DynQueriable<'a, Raw = C>,\r\n    QueryIter<'a, <&'a C as DynQueriable<'a>>::Parts, C, &'a C>: Iterator<Item = &'a C>,\r\n{\r\n    type Item = &'a C;\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        todo!()\r\n    }\r\n}\r\n\r\ntrait MyMarker {}\r\n\r\nstruct A;\r\nimpl MyMarker for A {}\r\nimpl<'a> QueryVariant<'a, dyn MyMarker + 'a> for A {}\r\n\r\nimpl<'a> DynQueriable<'a> for &'a dyn MyMarker {\r\n    type Parts = &'a A;\r\n    type Raw = dyn MyMarker + 'a;\r\n}\r\n```\r\n\r\nI expected to see this happen: successful compilation.\r\n\r\nInstead, this happened: The compiler hung and did not make any progress (i let it run for at least 5 minutes).\r\n\r\nA slight modification of the above code results in it compiling without a problem:\r\nline diffs:\r\n```rust\r\n// line 13 \r\npub struct QueryIter<'a, T, C: ?Sized, V: DynQueriable<'a, Raw = C>>\r\n// replaced by\r\npub struct QueryIter<'a, T, C: ?Sized, V: DynQueriable<'a, Raw = C, Parts = T>>\r\n\r\n// line 15\r\n     QueryIter<'a, <V as DynQueriable<'a>>::Parts, C, V>: Iterator<Item = V>,\r\n// replaced by\r\n     Self: Iterator<Item = V>,\r\n\r\n// lines 22-23\r\n     &'a C: DynQueriable<'a, Raw = C>,\r\n     QueryIter<'a, <&'a C as DynQueriable<'a>>::Parts, C, &'a C>: Iterator<Item = &'a C>,\r\n// replaced by\r\n     &'a C: DynQueriable<'a, Raw = C, Parts = &'a V>,\r\n```\r\n\r\nso the total modified code is:\r\n```rust\r\nuse std::marker::PhantomData;\r\n\r\npub trait DynQueriable<'a>: Sized\r\nwhere\r\n    QueryIter<'a, Self::Parts, Self::Raw, Self>: Iterator<Item = Self>,\r\n{\r\n    type Parts;\r\n    type Raw: ?Sized + 'a;\r\n}\r\n\r\npub trait QueryVariant<'a, Component: ?Sized + 'a> {}\r\n\r\npub struct QueryIter<'a, T, C: ?Sized, V: DynQueriable<'a, Raw = C, Parts = T>>\r\nwhere\r\n    Self: Iterator<Item = V>,\r\n{\r\n    p: PhantomData<fn(T, &'a C, V) -> (T, &'a C, V)>,\r\n}\r\n\r\nimpl<'a, C: ?Sized, V: QueryVariant<'a, C>> Iterator for QueryIter<'a, &'a V, C, &'a C>\r\nwhere\r\n    &'a C: DynQueriable<'a, Raw = C, Parts = &'a V>,\r\n{\r\n    type Item = &'a C;\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        todo!()\r\n    }\r\n}\r\n\r\ntrait MyMarker {}\r\n\r\nstruct A;\r\nimpl MyMarker for A {}\r\nimpl<'a> QueryVariant<'a, dyn MyMarker + 'a> for A {}\r\n\r\nimpl<'a> DynQueriable<'a> for &'a dyn MyMarker {\r\n    type Parts = &'a A;\r\n    type Raw = dyn MyMarker + 'a;\r\n}\r\n```\r\nAnd that compiles without issues.\r\n\r\nI searched through some issues and found #91498, the problem mentioned in [this](https://github.com/rust-lang/rust/issues/91498#issuecomment-998899433) comment seems related, however in my case the complier does not emit an error.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```rustc 1.61.0-nightly (1d9c262ee 2022-03-26)\r\nbinary: rustc\r\ncommit-hash: 1d9c262eea411ec5230f8a4c9ba50b3647064da4\r\ncommit-date: 2022-03-26\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.61.0-nightly\r\nLLVM version: 14.0.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95402/timeline", "performed_via_github_app": null, "state_reason": null}