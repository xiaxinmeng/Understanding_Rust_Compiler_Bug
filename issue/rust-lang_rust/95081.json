{"url": "https://api.github.com/repos/rust-lang/rust/issues/95081", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95081/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95081/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95081/events", "html_url": "https://github.com/rust-lang/rust/issues/95081", "id": 1173786744, "node_id": "I_kwDOAAsO6M5F9pB4", "number": 95081, "title": "`$crate` is not a valid new identifier for `::proc_macro::Ident::new()`", "user": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2079070889, "node_id": "MDU6TGFiZWwyMDc5MDcwODg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-proc-macros", "name": "A-proc-macros", "color": "f7e101", "default": false, "description": "Area: Procedural macros"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-18T16:32:24Z", "updated_at": "2022-03-18T16:32:26Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse ::proc_macro::{Ident, Span};\r\n\r\nIdent::new(\"$crate\", Span::mixed_site());\r\n```\r\n\r\n#### I expected to see this happen\r\n\r\nThat it generate a `Ident { sym: \"$crate\", span: Span::mixed_site() }` correctly, since that's something that a proc-macro can already do once they receive a `$crate` identifier from a `macro_rules!` caller (where they can edit the span to get their own `mixed_site()` span).\r\n\r\n#### Instead, this happened\r\n\r\nThe constructor panics:\r\n\r\n```console\r\nerror: proc macro panicked\r\n    <snip>\r\n  = help: message: `\"$crate\"` is not a valid identifier\r\n```\r\n\r\n  - [Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=15e099b29dc3cd402f34e3a53e4347dd)\r\n\r\n### Context\r\n\r\nEver since proc-macros got stable access to `Span::mixed_site()`, it was expected for them to be able to behave like `macro_rules!` macros do (w.r.t. hygiene). This ought to include `$crate`.\r\n\r\nGranted, the interest for `$crate` in `proc-macro = true` crates is **severely limited**, since `$crate` would then refer to the backend proc-macro crate rather than the frontend (which is where the non-proc-macro stuff will be accessible), since a procedural macro can technically directly call another one directly as a function.\r\n\r\nStill, there may be some specific cases where being able to call a \"companion\" proc-macro using macro syntax may be a desirable capability, with no real reason for it to be denied.\r\n\r\nIndeed, [if we take the proc-macro example above, and reversed the `if true` switch](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=f1f1605c97e3bb05499bcc7bce534119), we have a fully functional demo where the proc-macro \"hijacks\" a genuine `$crate` that a `macro_rules!` caller provided.\r\n\r\n@rustbot modify labels: A-macros A-proc-macros\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95081/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95081/timeline", "performed_via_github_app": null, "state_reason": null}