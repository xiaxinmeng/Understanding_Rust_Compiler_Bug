{"url": "https://api.github.com/repos/rust-lang/rust/issues/97092", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97092/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97092/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97092/events", "html_url": "https://github.com/rust-lang/rust/issues/97092", "id": 1237794340, "node_id": "I_kwDOAAsO6M5Jxz4k", "number": 97092, "title": "FakeRead is semantically meaningful to miri (but gets optimized away)", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2022-05-16T22:17:45Z", "updated_at": "2022-06-08T04:23:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given this sample program:\r\n\r\n```rust\r\n#![feature(generators)]\r\n\r\nfn main() {\r\n    let x = Some(22);\r\n    let _a = match x {\r\n        Some(y) if foo() => (),\r\n        _ => (),\r\n    };\r\n}\r\n\r\nfn foo() -> bool { \r\n    true\r\n}\r\n```\r\n\r\nthe desugaring of the match intentionally adds some borrows when executing the guard:\r\n\r\n```\r\n    bb3: {\r\n        StorageLive(_6);                 // scope 1 at foo.rs:6:14: 6:15\r\n        _6 = &((_1 as Some).0: i32);     // scope 1 at foo.rs:6:14: 6:15\r\n        _4 = &shallow _1;                // scope 1 at foo.rs:5:20: 5:21\r\n        StorageLive(_7);                 // scope 1 at foo.rs:6:20: 6:25\r\n        _7 = foo() -> [return: bb4, unwind: bb8]; // scope 1 at foo.rs:6:20: 6:25\r\n                                         // mir::Constant\r\n                                         // + span: foo.rs:6:20: 6:23\r\n                                         // + literal: Const { ty: fn() -> bool {foo}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb4: {\r\n        switchInt(move _7) -> [false: bb6, otherwise: bb5]; // scope 1 at foo.rs:6:20: 6:25\r\n    }\r\n\r\n    bb5: {\r\n        StorageDead(_7);                 // scope 1 at foo.rs:6:24: 6:25\r\n        FakeRead(ForMatchGuard, _4);     // scope 1 at foo.rs:6:24: 6:25\r\n        FakeRead(ForGuardBinding, _6);   // scope 1 at foo.rs:6:24: 6:25\r\n```\r\n\r\nThe purposeof the `FakeRead` of `_4`and `_6` is to ensure that the discriminant does not change while the guard executes -- i.e., that the guard doesn't (via unsafe code, say) mutate `x` to be `None`. But after optimizations those FakeReads are removed:\r\n\r\n```\r\n\r\n    bb0: {\r\n        Deinit(_1);                      // scope 0 at foo.rs:4:13: 4:21\r\n        ((_1 as Some).0: i32) = const 22_i32; // scope 0 at foo.rs:4:13: 4:21\r\n        discriminant(_1) = 1;            // scope 0 at foo.rs:4:13: 4:21\r\n        _4 = &((_1 as Some).0: i32);     // scope 1 at foo.rs:6:14: 6:15\r\n        _5 = foo() -> bb1;               // scope 1 at foo.rs:6:20: 6:25\r\n                                         // mir::Constant\r\n                                         // + span: foo.rs:6:20: 6:23\r\n                                         // + literal: Const { ty: fn() -> bool {foo}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb1: {\r\n        switchInt(move _5) -> [false: bb3, otherwise: bb2]; // scope 1 at foo.rs:6:20: 6:25\r\n    }\r\n```\r\n\r\nthis means that `foo()` could trigger writes without causing UB. This seems bad!\r\n\r\nUPDATE: This is overstating the case. It's ok for us to optimize FakeRead away, but tools like miri or some future sanitizers would still want to see them (for the reasons give above).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97092/timeline", "performed_via_github_app": null, "state_reason": null}