{"url": "https://api.github.com/repos/rust-lang/rust/issues/99220", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99220/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99220/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99220/events", "html_url": "https://github.com/rust-lang/rust/issues/99220", "id": 1303971733, "node_id": "I_kwDOAAsO6M5NuQeV", "number": 99220, "title": "Recursive PartialEq implementation not detected", "user": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-07-13T21:38:36Z", "updated_at": "2022-07-13T22:47:55Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code:  https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=ed9fb2f62239c9485d43d48e3e0d419b\r\n\r\n```rust\r\nstruct Foo(u32);\r\n\r\nimpl std::cmp::PartialEq for Foo {\r\n    fn eq(&self, rhs: &Self) -> bool {\r\n        self == rhs\r\n    }\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\n```\r\n(no warnings)\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\nwarning: function cannot return without recursing\r\n --> src/lib.rs:4:5\r\n  |\r\n4 |     fn eq(&self, rhs: &Self) -> bool {\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\r\n5 |         self == rhs\r\n  |         ----------- recursive call site\r\n  |\r\n  = note: `#[warn(unconditional_recursion)]` on by default\r\n  = help: a `loop` may express intention better if this is on purpose\r\n```\r\n\r\nNote how we *do* warn about this if you do `self.eq(rhs)`. So I guess it's a matter of treating `==` as `.eq` for the purposes of recursion checking? Not sure.\r\n\r\nHappens on nightly/beta/stable.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99220/timeline", "performed_via_github_app": null, "state_reason": null}