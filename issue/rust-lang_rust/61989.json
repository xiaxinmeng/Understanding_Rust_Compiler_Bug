{"url": "https://api.github.com/repos/rust-lang/rust/issues/61989", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61989/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61989/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61989/events", "html_url": "https://github.com/rust-lang/rust/issues/61989", "id": 458633948, "node_id": "MDU6SXNzdWU0NTg2MzM5NDg=", "number": 61989, "title": "u8::reverse_bits is too slow", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 55301991, "node_id": "MDU6TGFiZWw1NTMwMTk5MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86", "name": "O-x86", "color": "6e6ec0", "default": false, "description": "Target: x86 processors"}, {"id": 55302148, "node_id": "MDU6TGFiZWw1NTMwMjE0OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86_64", "name": "O-x86_64", "color": "6e6ec0", "default": false, "description": "Target: x64 processors"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-06-20T12:40:23Z", "updated_at": "2020-05-12T17:06:57Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While upgrading the `bitintr` crate I re-ran its benchmarks and found out that the stable implementation there is much faster than the stabilized `u8::reverse_bits` intrinsic available on nightly. \r\n\r\nI'm comparing this implementation of `u8::reverse_bits`:\r\n\r\n```rust\r\nfn rbit_u8(x: u8) -> u8 {\r\n    (((((x as u64) * 0x80200802_u64) & 0x0884422110_u64) * 0x0101010101_u64)\r\n        >> 32) as u8\r\n}\r\n```\r\n\r\nvs `u8::reverse_bits`. \r\n\r\nMy benchmark there isn't super tight, each iteration calls reverse_bits on all [0, 255] integers :\r\n\r\n```rust\r\nfn u8_runner<F: Fn(u8) -> u8>(bench: &mut Bencher, f: F) {\r\n    bench.iter(|| {\r\n        for v in 0..=u8::max_value() {\r\n            bencher::black_box(f(bencher::black_box(v)));\r\n        }\r\n    })\r\n}\r\n\r\n#[bench]\r\nfn rbit_u8_std(bench: &mut Bencher) {\r\n    u8_runner(bench, |x| x.reverse_bits()))\r\n}\r\n\r\n#[bench]\r\nfn rbit_u8_self(bench: &mut Bencher) {\r\n    u8_runner(bench, |x| rbit_u8(x)))\r\n}\r\n```\r\n\r\nOn my laptop (x86_64 1.8Ghz i5), I'm getting 343 ns/iter for `rbit_u8`, while for `u8::reverse_bits` I'm getting 619 ns/iter. Dividing by 256 that's 1.34 (mine) vs 2.42 (libstd) ns / bitreverse.\r\n\r\nAll of this somehow rings a bell; the `bitintr` crate had a benchmark specifically for this operation, and it was previously comparing its own implementations against `core::intrinsic::bitreverse`, and it had a workaround for using its own implementation even when the user was on nightly and explicitly enabled using `core::intrinsics` via an `unstable` cargo feature. I guess I should have written a comment back then.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61989/timeline", "performed_via_github_app": null, "state_reason": null}