{"url": "https://api.github.com/repos/rust-lang/rust/issues/79562", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79562/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79562/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79562/events", "html_url": "https://github.com/rust-lang/rust/issues/79562", "id": 753528111, "node_id": "MDU6SXNzdWU3NTM1MjgxMTE=", "number": 79562, "title": "Support PGO in the compiler's build system", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 325438536, "node_id": "MDU6TGFiZWwzMjU0Mzg1MzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-bootstrap", "name": "T-bootstrap", "color": "bfd4f2", "default": false, "description": "Relevant to the bootstrap subteam: Rust's build system (x.py and src/bootstrap)"}, {"id": 593503757, "node_id": "MDU6TGFiZWw1OTM1MDM3NTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-infra", "name": "T-infra", "color": "bfd4f2", "default": false, "description": "Relevant to the infrastructure team, which will review and decide on the PR/issue."}, {"id": 849077850, "node_id": "MDU6TGFiZWw4NDkwNzc4NTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-compiler-performance", "name": "WG-compiler-performance", "color": "c2e0c6", "default": false, "description": "Working group: Compiler Performance"}, {"id": 2352122097, "node_id": "MDU6TGFiZWwyMzUyMTIyMDk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-discussion", "name": "C-discussion", "color": "f5f1fd", "default": false, "description": "Category: Discussion or questions that doesn't represent real issues."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2020-11-30T14:32:58Z", "updated_at": "2022-07-11T02:00:35Z", "closed_at": "2022-07-11T02:00:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "One of the first steps in [bringing PGO to rustc](https://github.com/rust-lang/rust/issues/79442) is adding support for it to the compiler's build system. Concretely this means\r\n\r\n- support building an instrumented compiler (`-Cprofile-generate` phase), and\r\n- support building a compiler that makes use of profile data (`-Cprofile-use` phase)\r\n\r\nOptionally, the build system could also\r\n\r\n- support profile data collection (by running the instrumented compiler through a standard set of workloads)\r\n\r\nIn https://github.com/rust-lang/cargo/issues/7618#issuecomment-731269657, @luser suggests that the three phases should be operable separately. I think that makes a lot of sense since on CI we'll probably want to either only run the \"profile-use\" phase with downloaded profile data, or only the \"profile-generate\" phase that uploads the profile data. \r\n\r\nI suggest adding the following new `config.toml` settings:\r\n\r\n- `llvm.profile-generate = ( \"<path>\" | \"default-path\" )`\r\n- `llvm.profile-use = ( \"<path>\" | \"default-path\" | \"download-profdata\" )`\r\n- `rust.profile-generate = ( \"<path>\" | \"default-path\" )`\r\n- `rust.profile-use = ( \"<path>\" | \"default-path\" | \"download-profdata\" )`\r\n- `rust.profile-collect = (true | false)`\r\n\r\nThe paths specify the argument to the `-Cprofile-generate` and `-Cprofile-use` flags. `default-path` means some known location within the build directory. `download-profdata` means that the build system will try to find and download the most recent profile data available for the given commit. If `rust.profile-collect` is true, the build system will run a standard data collection scenario with the instrumented compiler (or will error if none of `profile-generate` flags is set). \r\n\r\nNote that this setup has the following implications:\r\n\r\n- One can turn PGO on or off independently for LLVM and Rust. \r\n- There is no single command that runs all three phases at once. If one wants to build a PGOed compiler completely locally, one has to run something like:\r\n   ```bash\r\n   ./configure \r\n     --llvm.profile-generate=default-path\r\n     --rust.profile-generate=default-path\r\n     --llvm.profile-collect=true\r\n\r\n   ./x.py build\r\n\r\n   ./x.py clean # including LLVM?\r\n\r\n   ./configure \r\n     --llvm.profile-use=default-path\r\n     --rust.profile-use=default-path\r\n\r\n   ./x.py build\r\n   ```\r\n- The \"default\" scenario where \"generate\" and \"use\" phases are not run on the same machine can be done with a single `./configure && ./x.py build` though.\r\n\r\n\r\nI'd like to hear if somebody can come up with a different, better setup. Maybe something that allows the entire three-phase build with a single `./x.py pgo-build` command?", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79562/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79562/timeline", "performed_via_github_app": null, "state_reason": "completed"}