{"url": "https://api.github.com/repos/rust-lang/rust/issues/63908", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63908/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63908/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63908/events", "html_url": "https://github.com/rust-lang/rust/issues/63908", "id": 485051601, "node_id": "MDU6SXNzdWU0ODUwNTE2MDE=", "number": 63908, "title": "Cannot convert this tail recursive function into an iterative one due to lifetime error", "user": {"login": "EFanZh", "id": 2160692, "node_id": "MDQ6VXNlcjIxNjA2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2160692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EFanZh", "html_url": "https://github.com/EFanZh", "followers_url": "https://api.github.com/users/EFanZh/followers", "following_url": "https://api.github.com/users/EFanZh/following{/other_user}", "gists_url": "https://api.github.com/users/EFanZh/gists{/gist_id}", "starred_url": "https://api.github.com/users/EFanZh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EFanZh/subscriptions", "organizations_url": "https://api.github.com/users/EFanZh/orgs", "repos_url": "https://api.github.com/users/EFanZh/repos", "events_url": "https://api.github.com/users/EFanZh/events{/privacy}", "received_events_url": "https://api.github.com/users/EFanZh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 1146616045, "node_id": "MDU6TGFiZWwxMTQ2NjE2MDQ1", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-polonius", "name": "NLL-polonius", "color": "f799ea", "default": false, "description": "Issues related for using Polonius in the borrow checker"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-26T05:34:32Z", "updated_at": "2019-09-06T23:51:19Z", "closed_at": "2019-09-06T23:51:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Rust version: 1.37.0\r\n\r\nThis problem has been previously discussed on [Stack Overflow](https://stackoverflow.com/q/57643908/722720) and [Rust Users Forum](https://users.rust-lang.org/t/how-do-you-remove-the-last-node-from-a-singly-linked-list/31805?u=efanzh). And I think it is something the Rust compiler can improve on.\r\n\r\nI was writing a function that remove the last node from a singly linked list:\r\n\r\n```rust\r\nstruct Node<T> {\r\n    value: T,\r\n    next: Option<Box<Self>>,\r\n}\r\n\r\ntype List<T> = Option<Box<Node<T>>>;\r\n\r\nfn remove_last_node_recursive<T>(node_ref: &mut List<T>) {\r\n    let next_ref = &mut node_ref.as_mut().unwrap().next;\r\n\r\n    if next_ref.is_some() {\r\n        remove_last_node_recursive(next_ref);\r\n    } else {\r\n        *node_ref = None;\r\n    }\r\n}\r\n```\r\n\r\nSince the recursive call in the function is a tail call, I want to convert the function into an equivalent iterative one:\r\n\r\n```rust\r\nfn remove_last_node_iterative<T>(mut node_ref: &mut List<T>) {\r\n    loop {\r\n        let next_ref = &mut node_ref.as_mut().unwrap().next;\r\n\r\n        if next_ref.is_some() {\r\n            node_ref = next_ref;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    *node_ref = None; // This line causes lifetime error.\r\n}\r\n```\r\n\r\nThe function above does not work due to lifetime error:\r\n\r\n```\r\nerror[E0506]: cannot assign to `*node_ref` because it is borrowed\r\n  --> src/main.rs:29:5\r\n   |\r\n18 | fn remove_last_node_iterative<T>(mut node_ref: &mut List<T>) {\r\n   |                                                - let's call the lifetime of this reference `'1`\r\n19 |     loop {\r\n20 |         let next_ref = &mut node_ref.as_mut().unwrap().next;\r\n   |                             -----------------\r\n   |                             |\r\n   |                             borrow of `*node_ref` occurs here\r\n   |                             argument requires that `*node_ref` is borrowed for `'1`\r\n...\r\n29 |     *node_ref = None; // This line causes lifetime error.\r\n   |     ^^^^^^^^^ assignment to borrowed `*node_ref` occurs here\r\n```\r\n\r\nI think I should be able to convert any valid tail recursive function into an equivalent iterative one without lifetime errors.", "closed_by": {"login": "EFanZh", "id": 2160692, "node_id": "MDQ6VXNlcjIxNjA2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2160692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EFanZh", "html_url": "https://github.com/EFanZh", "followers_url": "https://api.github.com/users/EFanZh/followers", "following_url": "https://api.github.com/users/EFanZh/following{/other_user}", "gists_url": "https://api.github.com/users/EFanZh/gists{/gist_id}", "starred_url": "https://api.github.com/users/EFanZh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EFanZh/subscriptions", "organizations_url": "https://api.github.com/users/EFanZh/orgs", "repos_url": "https://api.github.com/users/EFanZh/repos", "events_url": "https://api.github.com/users/EFanZh/events{/privacy}", "received_events_url": "https://api.github.com/users/EFanZh/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63908/timeline", "performed_via_github_app": null, "state_reason": "completed"}