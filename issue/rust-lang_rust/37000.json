{"url": "https://api.github.com/repos/rust-lang/rust/issues/37000", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37000/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37000/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37000/events", "html_url": "https://github.com/rust-lang/rust/issues/37000", "id": 181439727, "node_id": "MDU6SXNzdWUxODE0Mzk3Mjc=", "number": 37000, "title": "incr.comp.: Create Test Case for Incr. Comp. Hash for const declarations", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-06T15:00:32Z", "updated_at": "2016-10-12T01:13:02Z", "closed_at": "2016-10-12T01:13:02Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This issue is part of a broader effort to implement comprehensive regression testing for incremental compilation. For the tracking issue go to #36350.\n### Background\n\nFor incremental compilation we need to determine if a given HIR node has changed in between two versions of a program. This is implemented in the [calculate_svh](https://github.com/rust-lang/rust/tree/master/src/librustc_incremental/calculate_svh) module. We compute a hash value for each HIR node that corresponds to a node in the dependency graph and then compare those hash values. We call this hash value the _Incremental Compilation Hash_ (ICH) of the HIR node. It is supposed to be sensitive to any change that might make a semantic difference to the thing being hashed.\n### Testing Methodology\n\nThe auto-tests in the `src/test/incremental` directory all follow the same pattern:\n- Each source file defines one test case\n- The source file is compiled multiple times with incremental compilation turned on, each time with a different `--cfg` flag, allowing each version to differ via conditional compilation. Each of these versions we call a _revision_.\n- During each revision, the test runner will make sure that some assertions about the dependency graph of the program hold.\n- These assertions are specified in the source code of the test file as attributes attached to the items being tested (e.g. `#[rustc_clean]`/`#[rustc_dirty]`).\n\nThe ICH-specific tests use this framework by adhering to the following pattern:\n- There are two versions of the definition under test, one marked with `#[cfg(cfail1)]` and the second marked with `#[cfg(not(cfail1))]`. As a consequence, the first revision will be compiled with the first version of the definition, and all other revisions will be compiled with the second version. The two versions are supposed to differ in exactly one aspect (e.g. the visibility of a field is different, or the return of a function has changed).\n- The second definition has a `#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]` attribute attached. This attribute makes the test runner check that a change of the `Hir` dependency node of the definition has been detected between revisions `cfail1` and `cfail2`. This will effectively test that a different ICH value has been computed for the two versions of the definition.\n- The second definition also has a `#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]` attribute. This makes sure that the `Hir` dependency node (and thus the ICH) of the definition has **not** changed between revisions `cfail2` and `cfail3`. That's what we expect, because both revisions use the same version of the definition.\n- For definitions that are exported from the crate, we also want to check the ICH of the corresponding metadata. This is tested using the `#[rustc_metadata_clean]`/`#[rustc_metadata_dirty]` attributes and works analogous to the `Hir` case: We add `#[rustc_metadata_dirty(cfg=\"cfail2\")]` to the second definition to make sure that the ICH of the exported metadata is not the same for the different versions of the definition, and we add `#[rustc_metadata_dirty(cfg=\"cfail3\")]` to make sure that the ICH is the same for the two identical versions of the definition.\n\nWhy are the revisions called \"cfail\"? That's because of reasons internal to how\nthe test-runner works. Prefixing a revision with \"cfail\" tells the test runner to treat the test like a \"compile-file\" test, that is: compile the test case but don't actually run it (which would be the case for an \"rpass\" revision). For the ICH tests we need to compile \"rlibs\", so that we can test metadata ICHs. As a consequence we cannot declare them \"rpass\". In an additional directive (`// must-compile-successfully`), we tell the test runner that we actually expect the file to not produce any errors.\n\nEach test case must contain the following test-runner directives and crate attributes at the top:\n\n``` rust\n// must-compile-successfully\n// revisions: cfail1 cfail2 cfail3\n// compile-flags: -Z query-dep-graph\n\n#![feature(rustc_attrs)]  // <-- let's us use #[rustc_dirty], etc.\n#![crate_type=\"rlib\"]     // <-- makes sure that we export definitions\n```\n\nSee [src/test/incremental/hashes/struct_defs.rs](https://github.com/rust-lang/rust/blob/master/src/test/incremental/hashes/struct_defs.rs) for a full example of such a ICH regression test.\n## Const Declaration Specific ICH Testing\n\nEach of the following things should be tested with its own definition pair:\n- Change visibility of a `const`\n- Change the type of a `const` from `i32` to `u32`\n- Change the type of a `const` from `Option<u32>` to `Option<u64>`\n- Change the value of a `const` from a simple literal to another one (e.g. `1` to `2`)\n- Change the value of a `const` from `1 + 1` to `1 + 2`\n- Change the value of a `const` from `2 + 3` to `2 * 3`\n- Change the value of a `const` from `1 + 2 * 3` => `1 + 2 * 4`\n- Change the type of a `const` [indirectly](https://github.com/michaelwoerister/rust/blob/e82462523b5ac032e9a28e0e35a9d7fdc318d864/src/test/incremental/hashes/struct_defs.rs#L243-L258) by modifying a use statement\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37000/timeline", "performed_via_github_app": null, "state_reason": "completed"}