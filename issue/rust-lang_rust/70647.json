{"url": "https://api.github.com/repos/rust-lang/rust/issues/70647", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70647/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70647/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70647/events", "html_url": "https://github.com/rust-lang/rust/issues/70647", "id": 591783476, "node_id": "MDU6SXNzdWU1OTE3ODM0NzY=", "number": 70647, "title": "Associated types expansion issue", "user": {"login": "Popog", "id": 761307, "node_id": "MDQ6VXNlcjc2MTMwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/761307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Popog", "html_url": "https://github.com/Popog", "followers_url": "https://api.github.com/users/Popog/followers", "following_url": "https://api.github.com/users/Popog/following{/other_user}", "gists_url": "https://api.github.com/users/Popog/gists{/gist_id}", "starred_url": "https://api.github.com/users/Popog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Popog/subscriptions", "organizations_url": "https://api.github.com/users/Popog/orgs", "repos_url": "https://api.github.com/users/Popog/repos", "events_url": "https://api.github.com/users/Popog/events{/privacy}", "received_events_url": "https://api.github.com/users/Popog/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1405345617, "node_id": "MDU6TGFiZWwxNDA1MzQ1NjE3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lazy-normalization", "name": "A-lazy-normalization", "color": "f7e101", "default": false, "description": "Area: lazy normalization (tracking issue: #60471)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-01T09:51:37Z", "updated_at": "2020-04-01T10:00:37Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Adding an bound on an associated type (`where T::BarOutput: TraitFoo`) causes the compiler to erroneously complain about the original bound:\r\n\r\n`the trait bound ``T: TraitBar<u64>`` is not satisfied`\r\n\r\nThe compiler is able to expand the associated type `BazOutput` enough to generate that error, but not enough to realize it would satisfy that bound.\r\n\r\n```rust\r\npub trait TraitFoo {}\r\n\r\npub trait TraitBar<T> {\r\n    type BarOutput;\r\n}\r\n\r\npub trait TraitBaz {\r\n    type BazOutput;\r\n}\r\npub trait TraitFum<T> {}\r\n\r\npub struct StructZot;\r\n\r\nimpl TraitBaz for StructZot {\r\n    type BazOutput = u64;\r\n}\r\n\r\nmacro_rules! test {\r\n    (1) => {\r\n        impl<T: TraitBar<<Self as TraitBaz>::BazOutput>> TraitFum<T> for StructZot {}\r\n    };\r\n    (2) => {\r\n        impl<T: TraitBar<<StructZot as TraitBaz>::BazOutput>> TraitFum<T> for StructZot {}\r\n    };\r\n    (3) => {\r\n        impl<T: TraitBar<u64>> TraitFum<T> for StructZot {}\r\n    };\r\n    (4) => {\r\n        impl<T: TraitBar<<Self as TraitBaz>::BazOutput>> TraitFum<T> for StructZot where\r\n            T::BarOutput: TraitFoo\r\n        {\r\n        }\r\n    };\r\n    (5) => {\r\n        impl<T: TraitBar<<StructZot as TraitBaz>::BazOutput>> TraitFum<T> for StructZot where\r\n            T::BarOutput: TraitFoo\r\n        {\r\n        }\r\n    };\r\n    (6) => {\r\n        impl<T: TraitBar<u64>> TraitFum<T> for StructZot where T::BarOutput: TraitFoo {}\r\n    };\r\n}\r\n\r\n//test!{1} // Works\r\n//test!{2} // Works\r\n//test!{3} // Works\r\n//test!{4} // Fails\r\ntest!{5} // Fails\r\n//test!{6} // Works\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=ff6ba725e845b52ec5106df7a546698b))\r\n\r\n\r\nI expected to see all 6 versions compile cleanly.\r\n\r\n\r\nInstead, this happened:\r\n```\r\nerror[E0277]: the trait bound `T: TraitBar<u64>` is not satisfied\r\n  --> src/lib.rs:35:9\r\n   |\r\n35 | /         impl<T: TraitBar<<StructZot as TraitBaz>::BazOutput>> TraitFum<T> for StructZot where\r\n36 | |             T::BarOutput: TraitFoo\r\n37 | |         {\r\n38 | |         }\r\n   | |_________^ the trait `TraitBar<u64>` is not implemented for `T`\r\n...\r\n49 |   test!{5} // Fails\r\n   |   -------- in this macro invocation\r\n   |\r\n   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\r\nhelp: consider further restricting type parameter `T`\r\n   |\r\n36 |             T::BarOutput: TraitFoo, T: TraitBar<u64>\r\n   |                                   ^^^^^^^^^^^^^^^^^^\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70647/timeline", "performed_via_github_app": null, "state_reason": null}