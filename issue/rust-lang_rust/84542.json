{"url": "https://api.github.com/repos/rust-lang/rust/issues/84542", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84542/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84542/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84542/events", "html_url": "https://github.com/rust-lang/rust/issues/84542", "id": 866950854, "node_id": "MDU6SXNzdWU4NjY5NTA4NTQ=", "number": 84542, "title": "Rustc unable to see through Vec/RawVec abstraction for `push` (and other cases)", "user": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2021-04-25T08:33:19Z", "updated_at": "2023-03-30T20:28:18Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Rustc is often unable to optimize through rawvec's abstractions. Here's a motivating example:\r\n\r\nhttps://rust.godbolt.org/z/7b1MeKcY1\r\n\r\n```rust\r\npub fn foo() -> u8 {\r\n    let mut v = Vec::<u8>::new();\r\n    v.push(1);\r\n    return v[0];\r\n}\r\n```\r\n\r\nProduces about 160 lines of assembly.\r\n\r\nThe equivalent with clang++ under libc++ is able to completely eliminate the abstraction: https://gcc.godbolt.org/z/8MY47shEz\r\n\r\nHowever, in the real world, often such things would be impossible. That said, in cases where it can't completely eliminate the abstraction, it still does one hell of a better job. For example, with libstdc++'s vector, we end up with https://gcc.godbolt.org/z/Y3fGb3TG4 \u2014\u00a0a tight 10 lines of assembly.\r\n\r\nAnyway, I don't think this is a rustc issue, so much as a Vec/RawVec issue. I've been meaning to file a bug about this after digging in more, but maybe some one else can.\r\n\r\n---\r\n\r\nI think it's notable that a lot of the stuff it doesn't remove are functions marked as #[cold]. My pet hypothesis is that our penchant for using #[cold] over intrinsics::unlikely is biting us, and we'd be better off with neither. That said, I haven't had the time to test this, and could be wrong.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84542/timeline", "performed_via_github_app": null, "state_reason": null}