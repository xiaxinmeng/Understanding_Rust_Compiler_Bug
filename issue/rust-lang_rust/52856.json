{"url": "https://api.github.com/repos/rust-lang/rust/issues/52856", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52856/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52856/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52856/events", "html_url": "https://github.com/rust-lang/rust/issues/52856", "id": 345743198, "node_id": "MDU6SXNzdWUzNDU3NDMxOTg=", "number": 52856, "title": "make miri usable as stage 0/1 tool", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 325438536, "node_id": "MDU6TGFiZWwzMjU0Mzg1MzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-bootstrap", "name": "T-bootstrap", "color": "bfd4f2", "default": false, "description": "Relevant to the bootstrap subteam: Rust's build system (x.py and src/bootstrap)"}, {"id": 1244499056, "node_id": "MDU6TGFiZWwxMjQ0NDk5MDU2", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-miri", "name": "A-miri", "color": "f7e101", "default": false, "description": "Area: The miri tool"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2018-07-30T12:48:27Z", "updated_at": "2020-05-09T13:43:02Z", "closed_at": "2020-05-09T12:31:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Moving miri to the compiler made development with miri significantly harder. To avoid rebuilding the compiler twice on every change in `librustc_mir/interpret`, I usually do `./x.py build src/rustc --keep-stage 0`. This still does unnecessary work, however, when changing libstd (but that is likely hard to avoid?). Also `--keep-stage` is somewhat fragile. So overall, developing miri is much more cumbersome than previously (and that's not even talking about it being much harder to land patches, and much more likely to get merge conflicts, but that part is unavoidable).\r\n\r\nIt would be great if one could build, test and run miri in earlier stages. The building part actually works, but only with a trick:\r\n```\r\n$ CARGO_CFG_REGEX_DISABLE_AUTO_OPTIMIZATIONS=1 ./x.py --stage 0 build src/tools/miri\r\n```\r\nThe env var is needed because stage 0 libstd does not contain `std::arch`. Could we change that?\r\n\r\nRunning works but is not very straight-forward\r\n```\r\n$ cp build/x86_64-unknown-linux-gnu/stage0-tools-bin/miri build/x86_64-unknown-linux-gnu/stage1/bin/\r\n$ MIRI_SYSROOT=build/x86_64-unknown-linux-gnu/stage1/ build/x86_64-unknown-linux-gnu/stage1/bin/miri src/tools/miri/tests/run-pass/products.rs\r\n```\r\nLooks like `RUST_SYSROOT` is not properly set during build, so I have to give the sysroot manually?\r\n\r\nRunning the test suite, however, fails:\r\n```\r\n$ CARGO_CFG_REGEX_DISABLE_AUTO_OPTIMIZATIONS=1 ./x.py --stage 0 test src/tools/miri -v\r\n[...]\r\nrunning: \"/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage0/bin/cargo\" \"test\" \"--target\" \"x86_64-unknown-linux-gnu\" \"-j\" \"8\" \"--release\" \"--manifest-path\" \"/home/r/src/rust/rustc/src/tools/miri/Cargo.toml\"\r\n[...]\r\nerror: failed to find a `codegen-backends` folder in the sysroot candidates:\r\n* /home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu\r\n* /home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage0-sysroot/lib/rustlib/x86_64-unknown-linux-gnu\r\n* /home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage0-sysroot\r\n```\r\n\r\nHow could we do better (other than maybe enabling `std::arch` in stage 0)? @eddyb suggested that `test src/tools/miri` should behave more like `test src/test/run-pass`, and test the stuff produced by the previous stage, but I find that somewhat strange. The compiler itself has strange \"leveling issues\" in a  staged build, but the tools should be more consistent.\r\n\r\nI'd expect miri to behave more like libstd: `build --stage 1 src/libstd` builds using the compiler produced in stage 0, and `test --stage 1 src/libstd --no-doc` tests with that same compiler. So maybe `build --stage 1 src/tools/miri` should be built with the compiler produced in stage 0 and the libstd produced in stage 1 (similar to `build --stage 1 src/rustc`). `build --stage 0 src/tools/miri` would use the bootstrap compiler to build miri, which will likely not work but that's okay. `test --stage 1 src/tools/miri` would first do `build --stage 1 src/tools/miri` and then run the tests in the `stage1` sysroot.\r\nOr does that not work because miri depends on librustc?\r\n\r\nCc @oli-obk @eddyb (and maybe we should get a bootstrap expert in the loop?)", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52856/timeline", "performed_via_github_app": null, "state_reason": "completed"}