{"url": "https://api.github.com/repos/rust-lang/rust/issues/106374", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106374/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106374/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106374/events", "html_url": "https://github.com/rust-lang/rust/issues/106374", "id": 1516513652, "node_id": "I_kwDOAAsO6M5aZCl0", "number": 106374, "title": "Clippy fails to fix unnecessary_to_owned", "user": {"login": "KonradHoeffner", "id": 839577, "node_id": "MDQ6VXNlcjgzOTU3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/839577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KonradHoeffner", "html_url": "https://github.com/KonradHoeffner", "followers_url": "https://api.github.com/users/KonradHoeffner/followers", "following_url": "https://api.github.com/users/KonradHoeffner/following{/other_user}", "gists_url": "https://api.github.com/users/KonradHoeffner/gists{/gist_id}", "starred_url": "https://api.github.com/users/KonradHoeffner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KonradHoeffner/subscriptions", "organizations_url": "https://api.github.com/users/KonradHoeffner/orgs", "repos_url": "https://api.github.com/users/KonradHoeffner/repos", "events_url": "https://api.github.com/users/KonradHoeffner/events{/privacy}", "received_events_url": "https://api.github.com/users/KonradHoeffner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2513492750, "node_id": "MDU6TGFiZWwyNTEzNDkyNzUw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-clippy", "name": "A-clippy", "color": "f7e101", "default": false, "description": "Area: Clippy"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-01-02T15:36:18Z", "updated_at": "2023-04-06T14:25:37Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Clippy told me to file a bug report after it reports three occurrences of \"unnecessary_to_owned\" in a single method that it can't fix.\r\n\r\n```\r\nhdt$ cargo clippy --fix \r\n    Checking hdt v0.0.8 (/home/konrad/tmp/hdt)\r\nwarning: failed to automatically apply fixes suggested by rustc to crate `hdt`\r\n\r\nafter fixes were automatically applied the compiler reported errors within these files:\r\n\r\n  * src/hdt_graph.rs\r\n\r\nThis likely indicates a bug in either rustc or cargo itself [...]\r\n\r\nThe following errors were reported:\r\nerror[E0521]: borrowed data escapes outside of function\r\n  --> src/hdt_graph.rs:86:14\r\n   |\r\n51 | fn auto_term<T: Data>(s: &str) -> Result<Term<T>, TermError> {\r\n   |                       -  - let's call the lifetime of this reference `'1`\r\n   |                       |\r\n   |                       `s` is a reference that is only valid in the function body\r\n...\r\n86 |         _ => Term::<T>::new_iri(s),\r\n   |              ^^^^^^^^^^^^^^^^^^^^^\r\n   |              |\r\n   |              `s` escapes the function body here\r\n   |              argument requires that `'1` must outlive `'static`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0521`.\r\nOriginal diagnostics will follow.\r\n\r\nwarning: unnecessary use of `to_owned`\r\n  --> src/hdt_graph.rs:69:25\r\n   |\r\n69 |                         rest[tag_index + 1..].to_owned(),\r\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `&rest[tag_index + 1..]`\r\n   |\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_to_owned\r\n   = note: `#[warn(clippy::unnecessary_to_owned)]` on by default\r\n\r\nwarning: unnecessary use of `to_owned`\r\n  --> src/hdt_graph.rs:85:43\r\n   |\r\n85 |         Some('_') => Term::<T>::new_bnode(s[2..].to_owned()),\r\n   |                                           ^^^^^^^^^^^^^^^^^ help: use: `&s[2..]`\r\n   |\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_to_owned\r\n\r\nwarning: unnecessary use of `to_owned`\r\n  --> src/hdt_graph.rs:86:33\r\n   |\r\n86 |         _ => Term::<T>::new_iri(s.to_owned()),\r\n   |                                 ^^^^^^^^^^^^ help: use: `s`\r\n   |\r\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_to_owned\r\n\r\nwarning: `hdt` (lib) generated 3 warnings (run `cargo clippy --fix --lib -p hdt` to apply 3 suggestions)\r\nwarning: `hdt` (lib test) generated 3 warnings (3 duplicates)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.88s\r\n```\r\n\r\nThe method in question is:\r\n\r\n```rust\r\npub trait Data:\r\n    AsRef<str> + Clone + Eq + From<std::boxed::Box<str>> + From<String> + From<&'static str> + Hash\r\n{\r\n}\r\nimpl<T> Data for T where\r\n    T: AsRef<str> + Clone + Eq + From<std::boxed::Box<str>> + From<String> + From<&'static str> + Hash\r\n{\r\n}\r\n\r\nimpl<T: Data> HdtGraph<T> {\r\n    /// Wrapper around Hdt.\r\n    pub const fn new(hdt: Hdt) -> Self {\r\n        HdtGraph { hdt, phantom: PhantomData {} }                                    \r\n    }\r\n    /// Size in bytes on the heap.\r\n    pub fn size_in_bytes(&self) -> usize {\r\n        self.hdt.size_in_bytes()\r\n    }\r\n}\r\n        \r\nconst XSD_STRING: &str = \"http://www.w3.org/2001/XMLSchema#string\";\r\n        \r\n/// Create the correct Sophia term for a given resource string.\r\n/// Slow, use the appropriate method if you know which type (Literal, URI, or blank node) the string has.\r\nfn auto_term<T: Data>(s: &str) -> Result<Term<T>, TermError> {\r\n    match s.chars().next() {\r\n        None => Err(TermError::InvalidIri(String::new())),\r\n        Some('\"') => match s.rfind('\"') {\r\n            None => Err(TermError::UnsupportedDatatype(s.to_owned())),\r\n            Some(index) => {\r\n                let lex = s[1..index].to_owned();\r\n                let rest = &s[index + 1..];\r\n                // literal with no language tag and no datatype\r\n                if rest.is_empty() {    \r\n                    //let dt_string: sophia::term::iri::Iri<&str> = Iri::<&str>::new_unchecked(XSD_STRING);\r\n                    let dt_string = Iri::<&str>::new_unchecked(XSD_STRING);\r\n                    return Ok(Term::<T>::from(Literal::new_dt(lex, dt_string)));\r\n                }\r\n                // either language tag or datatype\r\n                if let Some(tag_index) = rest.find('@') {\r\n                    return Ok(Term::<T>::from(Literal::new_lang_unchecked(\r\n                        lex,\r\n                        rest[tag_index + 1..].to_owned(),\r\n                    )));\r\n                }\r\n                // datatype\r\n                let mut dt_split = rest.split(\"^^\");\r\n                dt_split.next(); // empty\r\n                match dt_split.next() {\r\n                    Some(dt) => {\r\n                        let unquoted = dt[1..dt.len() - 1].to_owned().into_boxed_str();\r\n                        let dt = Iri::<Box<str>>::new_unchecked(unquoted);\r\n                        Ok(Term::<T>::from(Literal::new_dt(lex, dt)))\r\n                    }\r\n                    None => Err(TermError::UnsupportedDatatype(s.to_owned())),\r\n                }\r\n            }\r\n        },\r\n        Some('_') => Term::<T>::new_bnode(s[2..].to_owned()),\r\n        _ => Term::<T>::new_iri(s.to_owned()),\r\n    }\r\n}\r\n```\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.68.0-nightly (77429957a 2023-01-01)\r\nbinary: rustc\r\ncommit-hash: 77429957a0e9c90a26c89def061ffdd4bae5ccb9\r\ncommit-date: 2023-01-01\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.68.0-nightly\r\nLLVM version: 15.0.6\r\n```\r\n\r\nThe problem can be replicated in <https://github.com/KonradHoeffner/hdt/commit/197b72879a041cea1ee1546281b1b21286d42051>.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106374/timeline", "performed_via_github_app": null, "state_reason": null}