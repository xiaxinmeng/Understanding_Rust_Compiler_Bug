{"url": "https://api.github.com/repos/rust-lang/rust/issues/57966", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57966/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57966/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57966/events", "html_url": "https://github.com/rust-lang/rust/issues/57966", "id": 404111214, "node_id": "MDU6SXNzdWU0MDQxMTEyMTQ=", "number": 57966, "title": "really bad error messages for trying to `use` a macro from a module", "user": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2019-01-29T03:53:10Z", "updated_at": "2022-08-18T17:08:51Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If you read up on new-style macro imports in the [edition guide](https://rust-lang-nursery.github.io/edition-guide/rust-2018/macros/macro-changes.html) and miss the tiny note that it doesn't work for macros in modules in your own crate (why not?!), you might try this:\r\n\r\n```rust\r\nmod has_a_macro {\r\n    macro_rules! a_macro { () => {} }\r\n}\r\n\r\nuse crate::has_a_macro::a_macro;\r\n\r\nfn main() {\r\n    a_macro!();\r\n}\r\n```\r\n\r\n**BIG MISTAKE.**\r\n\r\n```\r\nerror[E0432]: unresolved import `crate::has_a_macro::a_macro`\r\n --> src/main.rs:6:5\r\n  |\r\n6 | use crate::has_a_macro::a_macro;\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `a_macro` in `has_a_macro`\r\n\r\nerror: cannot determine resolution for the macro `a_macro`\r\n --> src/main.rs:8:5\r\n  |\r\n8 |     a_macro!();\r\n  |     ^^^^^^^\r\n  |\r\n  = note: import resolution is stuck, try simplifying macro imports\r\n\r\nerror: aborting due to 2 previous errors\r\n```\r\n\r\nOK, two errors here, neither of which are helpful.\r\n\r\nThe first one simply says the macro doesn't exist when it obviously does, this is just the compiler gaslighting the user. Next!\r\n\r\nThe second one is fairly hilarious (this is already the simplest situation possible) and unactionable.\r\n\r\nLet's see... I know that in the past you used to put `#[macro_use]` above the `mod` declaration to do this. Adding that nets a different second error:\r\n\r\n```\r\nerror[E0659]: `a_macro` is ambiguous (`macro_rules` vs non-`macro_rules` from other module)\r\n --> src/main.rs:9:5\r\n  |\r\n9 |     a_macro!();\r\n  |     ^^^^^^^ ambiguous name\r\n  |\r\nnote: `a_macro` could refer to the macro defined here\r\n --> src/main.rs:3:5\r\n  |\r\n3 |     macro_rules! a_macro { () => {} }\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: `a_macro` could also refer to the unresolved item imported here\r\n --> src/main.rs:6:5\r\n  |\r\n6 | use crate::has_a_macro::a_macro;\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  = help: use `crate::a_macro` to refer to this unresolved item unambiguously\r\n```\r\n\r\nThis is... really confusing. I can see that the compiler knows exactly which macro I want to call, but it refuses to do it, and for some reason it says it's ambiguous with the statement trying to import it. The `` `macro_rules` vs non-`macro_rules` `` word salad doesn't help matters.\r\n\r\nAlso, the suggestion doesn't work, you just get the original `import resolution is stuck` error back.\r\n\r\nSo, the eventual solution is to remove the `use` statement, leaving only `#[macro_use]`, but this isn't discoverable from the mess of errors. Can we take off the compiler-colored glasses and make better diagnostics for this situation? I can't imagine I'm the only person who tried this.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57966/reactions", "total_count": 57, "+1": 57, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57966/timeline", "performed_via_github_app": null, "state_reason": null}