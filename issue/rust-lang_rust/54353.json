{"url": "https://api.github.com/repos/rust-lang/rust/issues/54353", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54353/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54353/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54353/events", "html_url": "https://github.com/rust-lang/rust/issues/54353", "id": 361695205, "node_id": "MDU6SXNzdWUzNjE2OTUyMDU=", "number": 54353, "title": "SIMD intrinsics like _mm_cmpestri is not getting inlined", "user": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-09-19T11:06:13Z", "updated_at": "2020-04-27T07:20:19Z", "closed_at": "2018-09-19T18:36:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I recently tried to port some string searching code using PCMPESTRI from explicit `asm!` to new stable SIMD intrinsics and noticed that it became quite slower (~30% on average, depending on a case).\r\n\r\nAfter looking into the generated assembly to find a difference that would cause it, I've noticed that Rust intrinsic is not getting inlined and so prevents further optimisations. Here goes minimal equivalent reproducible code in C and Rust:\r\n\r\n```c\r\n#include <nmmintrin.h>\r\n\r\nint pcmp_find(const char *needle, size_t needle_len, const char *haystack, size_t haystack_len) {\r\n    __m128i needle_m = _mm_loadu_si128((void*)needle);\r\n    __m128i haystack_m = _mm_loadu_si128((void*)haystack);\r\n\r\n    return _mm_cmpestri(needle_m, needle_len, haystack_m, haystack_len, _SIDD_CMP_EQUAL_ORDERED);\r\n}\r\n```\r\n\r\nRust:\r\n\r\n```rust\r\nuse std::arch::x86_64::*;\r\n\r\npub unsafe fn pcmp_find(needle: *const u8, needle_len: usize, haystack: *const u8, haystack_len: usize) -> i32 {\r\n    let needle_m = _mm_loadu_si128(needle as *const _);\r\n    let haystack_m = _mm_loadu_si128(haystack as *const _);\r\n\r\n    _mm_cmpestri(needle_m, needle_len as _, haystack_m, haystack_len as _, _SIDD_CMP_EQUAL_ORDERED)\r\n}\r\n```\r\n\r\nGenerated assembly for C lowers to few simple instructions, as expected:\r\n\r\n```asm\r\npcmp_find:\r\n        push    ebx\r\n        mov     ecx, DWORD PTR [esp+16]\r\n        mov     ebx, DWORD PTR [esp+8]\r\n        mov     eax, DWORD PTR [esp+12]\r\n        mov     edx, DWORD PTR [esp+20]\r\n        movdqu  xmm0, XMMWORD PTR [ebx]\r\n        pcmpestri       xmm0, XMMWORD PTR [ecx], 12\r\n        pop     ebx\r\n        mov     eax, ecx\r\n        ret\r\n```\r\n\r\nGenerated assembly for Rust code looks much more verbose and involves a function call:\r\n```asm\r\ncore::coresimd::x86::sse42::_mm_cmpestri:\r\n        mov     r8, rdx\r\n        movdqa  xmm0, xmmword ptr [rdi]\r\n        mov     eax, esi\r\n        mov     edx, ecx\r\n        pcmpestri       xmm0, xmmword ptr [r8], 12\r\n        mov     eax, ecx\r\n        ret\r\n\r\nexample::pcmp_find:\r\n        sub     rsp, 40\r\n        movups  xmm0, xmmword ptr [rdi]\r\n        movups  xmm1, xmmword ptr [rdx]\r\n        movaps  xmmword ptr [rsp], xmm0\r\n        movaps  xmmword ptr [rsp + 16], xmm1\r\n        mov     rdi, rsp\r\n        lea     rdx, [rsp + 16]\r\n        call    core::coresimd::x86::sse42::_mm_cmpestri\r\n        add     rsp, 40\r\n        ret\r\n```\r\n\r\nI see that `_mm_cmpestri` in Rust already has `#[inline]` attribute like other SIMD intrinsics, but perhaps they should have stronger variant with `#[inline(always)]` since they are always supposed to lower to simple instructions?", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54353/timeline", "performed_via_github_app": null, "state_reason": "completed"}