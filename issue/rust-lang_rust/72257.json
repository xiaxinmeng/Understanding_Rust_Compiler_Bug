{"url": "https://api.github.com/repos/rust-lang/rust/issues/72257", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72257/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72257/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72257/events", "html_url": "https://github.com/rust-lang/rust/issues/72257", "id": 619390827, "node_id": "MDU6SXNzdWU2MTkzOTA4Mjc=", "number": 72257, "title": "Inconsistency between primitive type and user-defined type in Vec AddAsign", "user": {"login": "tamuhey", "id": 24998666, "node_id": "MDQ6VXNlcjI0OTk4NjY2", "avatar_url": "https://avatars.githubusercontent.com/u/24998666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamuhey", "html_url": "https://github.com/tamuhey", "followers_url": "https://api.github.com/users/tamuhey/followers", "following_url": "https://api.github.com/users/tamuhey/following{/other_user}", "gists_url": "https://api.github.com/users/tamuhey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamuhey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamuhey/subscriptions", "organizations_url": "https://api.github.com/users/tamuhey/orgs", "repos_url": "https://api.github.com/users/tamuhey/repos", "events_url": "https://api.github.com/users/tamuhey/events{/privacy}", "received_events_url": "https://api.github.com/users/tamuhey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-16T06:13:27Z", "updated_at": "2020-05-16T15:01:06Z", "closed_at": "2020-05-16T15:01:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "From [this stackoverflow question](https://stackoverflow.com/questions/61732690/why-is-it-allowed-to-have-both-immutable-and-mutable-borrows-of-a-vector-of-nume).\r\n\r\n`a` is a `Vec<i32>` which can be mutably and immutably referenced in one expression:\r\n\r\n```rust\r\nfn main() {\r\n    let mut a = vec![0, 1];\r\n    a[0] += a[1]; // OK\r\n}\r\n```\r\n\r\nI thought this compiled because `i32` implements `Copy`, so I created another type that implements `Copy` and compiled it like the first example, but it fails:\r\n\r\n```rust\r\nuse std::ops::AddAssign;\r\n\r\n#[derive(Clone, Copy, PartialEq, Debug, Default)]\r\nstruct MyNum(i32);\r\n\r\nimpl AddAssign for MyNum {\r\n    fn add_assign(&mut self, rhs: MyNum) {\r\n        *self = MyNum(self.0 + rhs.0)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut b = vec![MyNum(0), MyNum(1)];\r\n    b[0] += b[1];\r\n}\r\n```\r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d8ad987a94f1c70092fb8b45e536152d)\r\n\r\n```none\r\nerror[E0502]: cannot borrow `b` as immutable because it is also borrowed as mutable\r\n  --> src/main.rs:14:13\r\n   |\r\n14 |     b[0] += b[1];\r\n   |     --------^---\r\n   |     |       |\r\n   |     |       immutable borrow occurs here\r\n   |     mutable borrow occurs here\r\n   |     mutable borrow later used here\r\n```\r\n\r\nAccording to the answer in [this stackoverflow question](https://stackoverflow.com/questions/61732690/why-is-it-allowed-to-have-both-immutable-and-mutable-borrows-of-a-vector-of-nume), this inconsistency is caused by compiler optimization.\r\n\r\nI think this behavior should be fully controlled by Trait. What do you think?\r\n", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72257/timeline", "performed_via_github_app": null, "state_reason": "completed"}