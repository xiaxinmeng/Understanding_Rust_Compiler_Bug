{"url": "https://api.github.com/repos/rust-lang/rust/issues/29915", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29915/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29915/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29915/events", "html_url": "https://github.com/rust-lang/rust/issues/29915", "id": 117668408, "node_id": "MDU6SXNzdWUxMTc2Njg0MDg=", "number": 29915, "title": "Possible redundancy in the Rust Book", "user": {"login": "cmlsharp", "id": 3654575, "node_id": "MDQ6VXNlcjM2NTQ1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/3654575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmlsharp", "html_url": "https://github.com/cmlsharp", "followers_url": "https://api.github.com/users/cmlsharp/followers", "following_url": "https://api.github.com/users/cmlsharp/following{/other_user}", "gists_url": "https://api.github.com/users/cmlsharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmlsharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmlsharp/subscriptions", "organizations_url": "https://api.github.com/users/cmlsharp/orgs", "repos_url": "https://api.github.com/users/cmlsharp/repos", "events_url": "https://api.github.com/users/cmlsharp/events{/privacy}", "received_events_url": "https://api.github.com/users/cmlsharp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-11-18T19:58:12Z", "updated_at": "2015-11-19T00:26:49Z", "closed_at": "2015-11-18T23:53:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the guessing game example, the reader is instructed to read a line from `stdin` like so:\n\n```\nlet mut guess = String::new();\n\nio::stdin().read_line(&mut guess)\n    .ok()\n    .expect(\"Failed to read line\");\n```\n\nIs there a reason to convert the `io::Result` into an `Option` and then call `expect()`? As I understand it, `Result`s have an `expect` method too which would accomplish the same thing here e.g.\n\n```\nlet mut guess = String::new();\n\nio::stdin().read_line(&mut gues)\n    .expect(\"Failed to read line\");\n```\n", "closed_by": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29915/timeline", "performed_via_github_app": null, "state_reason": "completed"}