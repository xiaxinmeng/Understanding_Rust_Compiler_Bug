{"url": "https://api.github.com/repos/rust-lang/rust/issues/19135", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19135/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19135/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19135/events", "html_url": "https://github.com/rust-lang/rust/issues/19135", "id": 49517036, "node_id": "MDU6SXNzdWU0OTUxNzAzNg==", "number": 19135, "title": "ICE when using unboxed closures with lifetime HRTBs", "user": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-11-20T09:19:55Z", "updated_at": "2014-12-18T14:32:15Z", "closed_at": "2014-12-18T14:32:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Most basic test case:\n\n``` rust\n#![feature(unboxed_closures)]\n\n#[deriving(Show)]\nstruct LifetimeStruct<'a>;\n\nfn main() {\n    takes_hrtb_closure(|&mut: lts| println!(\"{}\", lts));\n}\n\nfn takes_hrtb_closure<F: for<'a>FnMut(LifetimeStruct<'a>)>(f: F) {\n    f(LifetimeStruct);\n}\n```\n\nCompiler Output:\n\n```\n$ RUST_BACKTRACE=1 rustc hrtb_test.rs \nerror: internal compiler error: unexpected panic\nnote: the compiler unexpectedly panicked. this is a bug.\nnote: we would appreciate a bug report: http://doc.rust-lang.org/complement-bugreport.html\nnote: run with `RUST_BACKTRACE=1` for a backtrace\ntask 'rustc' panicked at 'assertion failed: !ty::type_needs_infer(ty)', /home/rustbuild/src/rust-buildbot/slave/nightly-linux/build/src/librustc/middle/typeck/mod.rs:290\n\nstack backtrace:\n   1:     0x7fde72dc4a80 - rt::backtrace::imp::write::had71017ae03f24a0vVs\n   2:     0x7fde72dc7b10 - failure::on_fail::he71b2ccb43241291iht\n   3:     0x7fde7358c0e0 - unwind::begin_unwind_inner::he7edbf4992e36292Pad\n   4:     0x7fde71b53790 - unwind::begin_unwind::h16417137682926516883\n   5:     0x7fde71ecab50 - middle::typeck::write_ty_to_tcx::h1c217af62028a95brtK\n   6:     0x7fde71ec62e0 - middle::typeck::check::writeback::WritebackCx<'cx, 'tcx>::visit_node_id::h0cabe78aea9d5af18n9\n   7:     0x7fde71ec4410 - middle::typeck::check::writeback::WritebackCx<'cx, 'tcx>.Visitor<'v>::visit_expr::he3eee31f7078a8284c9\n   8:     0x7fde71ec4410 - middle::typeck::check::writeback::WritebackCx<'cx, 'tcx>.Visitor<'v>::visit_expr::he3eee31f7078a8284c9\n   9:     0x7fde71ec9e40 - visit::walk_block::h11911811437128181636\n  10:     0x7fde71ec6050 - middle::typeck::check::writeback::resolve_type_vars_in_fn::h1f622545b4b2c27c978\n  11:     0x7fde71f25df0 - middle::typeck::check::check_bare_fn::hd3d74fd6bc764cbdhfh\n  12:     0x7fde71f21e60 - middle::typeck::check::check_item::h40f208d380d8ba92izh\n  13:     0x7fde71f25bb0 - middle::typeck::check::check_item_types::hab579f21022c1d0freh\n  14:     0x7fde722ff7e0 - util::common::time::h2047692826153001907\n  15:     0x7fde722fe960 - middle::typeck::check_crate::h2edb3a53d123f8c0eMK\n  16:     0x7fde73a81500 - driver::driver::phase_3_run_analysis_passes::ha5acf8a70ce48fbfMTR\n  17:     0x7fde73a76320 - driver::driver::compile_input::h2b7fa47cad7323abwAR\n  18:     0x7fde73af69f0 - driver::run_compiler::hd1dcd9c26f83ca38HyT\n  19:     0x7fde73af68e0 - driver::run::closure.53542\n  20:     0x7fde73913400 - task::TaskBuilder<S>::try_future::closure.38917\n  21:     0x7fde739131f0 - task::TaskBuilder<S>::spawn_internal::closure.38888\n  22:     0x7fde73e12b50 - task::NativeSpawner.Spawner::spawn::closure.2470\n  23:     0x7fde735e4b40 - rust_try_inner\n  24:     0x7fde735e4b30 - rust_try\n  25:     0x7fde73589a40 - unwind::try::h074ea65506c07a5arZc\n  26:     0x7fde735898d0 - task::Task::run::h7e964b829504fb5ah5b\n  27:     0x7fde73e12890 - task::NativeSpawner.Spawner::spawn::closure.2396\n  28:     0x7fde7358b0f0 - thread::thread_start::hd81953be3de79f59nqc\n  29:     0x7fde6deab0c0 - start_thread\n  30:     0x7fde73250f89 - __clone\n  31:                0x0 - <unknown>\n```\n\nThis is a boiled-down version of the problem I'm having. It's not giving them here, but in the original program where I discovered this, I did get compiler lifetime errors:\n\n```\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:94: 19:101 error: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19         multipart.foreach_entry(|&mut: name, content| println!(\"Name: {} Content: {}\", name, content));\n                                                                                                                                                        ^~~~~~~\nnote: in expansion of format_args!\n<std macros>:2:23: 2:77 note: expansion site\n<std macros>:1:1: 3:2 note: in expansion of println!\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:55: 19:103 note: expansion site\nnote: first, the lifetime cannot outlive lifetime ReInfer(ReSkolemized(10, BrNamed(DefId { krate: 30, node: 1704 }, \"'a\"(2090))))...\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:94: 19:101 note: ...so that the reference type `&multipart::MultipartField<'a>` does not outlive the data it points at\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19         multipart.foreach_entry(|&mut: name, content| println!(\"Name: {} Content: {}\", name, content));\n                                                                                                                                                        ^~~~~~~\nnote: in expansion of format_args!\n<std macros>:2:23: 2:77 note: expansion site\n<std macros>:1:1: 3:2 note: in expansion of println!\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:55: 19:103 note: expansion site\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:94: 19:101 note: but, the lifetime must be valid for the expression at 19:93...\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19         multipart.foreach_entry(|&mut: name, content| println!(\"Name: {} Content: {}\", name, content));\n                                                                                                                                                        ^~~~~~~\nnote: in expansion of format_args!\n<std macros>:2:23: 2:77 note: expansion site\n<std macros>:1:1: 3:2 note: in expansion of println!\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:55: 19:103 note: expansion site\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:94: 19:101 note: ...so that reference is valid at the time of borrow\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19         multipart.foreach_entry(|&mut: name, content| println!(\"Name: {} Content: {}\", name, content));\n                                                                                                                                                        ^~~~~~~\nnote: in expansion of format_args!\n<std macros>:2:23: 2:77 note: expansion site\n<std macros>:1:1: 3:2 note: in expansion of println!\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:55: 19:103 note: expansion site\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:19: 19:103 error: cannot infer an appropriate lifetime due to conflicting requirements\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19         multipart.foreach_entry(|&mut: name, content| println!(\"Name: {} Content: {}\", name, content));\n                                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nnote: first, the lifetime cannot outlive lifetime ReInfer(ReSkolemized(10, BrNamed(DefId { krate: 30, node: 1704 }, \"'a\"(2090))))...\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:19: 19:103 note: ...so that trait type parameters matches those specified on the impl (expected `for<'a> core::ops::FnMut<(collections::string::String, multipart::MultipartField<'a>), ()>`, found `core::ops::FnMut<(collections::string::String, multipart::MultipartField<'a>), ()>`)\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19         multipart.foreach_entry(|&mut: name, content| println!(\"Name: {} Content: {}\", name, content));\n                                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:94: 19:101 note: but, the lifetime must be valid for the expression at 19:93...\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19         multipart.foreach_entry(|&mut: name, content| println!(\"Name: {} Content: {}\", name, content));\n                                                                                                                                                        ^~~~~~~\nnote: in expansion of format_args!\n<std macros>:2:23: 2:77 note: expansion site\n<std macros>:1:1: 3:2 note: in expansion of println!\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:55: 19:103 note: expansion site\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:94: 19:101 note: ...so that type parameter instantiated with `multipart::MultipartField<'_>`, will meet its declared lifetime bounds.\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19         multipart.foreach_entry(|&mut: name, content| println!(\"Name: {} Content: {}\", name, content));\n                                                                                                                                                        ^~~~~~~\nnote: in expansion of format_args!\n<std macros>:2:23: 2:77 note: expansion site\n<std macros>:1:1: 3:2 note: in expansion of println!\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:55: 19:103 note: expansion site\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:94: 19:101 error: type of expression contains references that are not valid during the expression: `multipart::MultipartField<'a>`\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19         multipart.foreach_entry(|&mut: name, content| println!(\"Name: {} Content: {}\", name, content));\n                                                                                                                                                        ^~~~~~~\nnote: in expansion of format_args!\n<std macros>:2:23: 2:77 note: expansion site\n<std macros>:1:1: 3:2 note: in expansion of println!\n/home/austin/Rust/multipart/src/bin/multipart_server.rs:19:55: 19:103 note: expansion site\nnote: type is only valid for lifetime ReInfer(ReSkolemized(10, BrNamed(DefId { krate: 30, node: 1704 }, \"'a\"(2090))))\nerror: internal compiler error: unexpected panic\nnote: the compiler unexpectedly panicked. this is a bug.\nnote: we would appreciate a bug report: http://doc.rust-lang.org/complement-bugreport.html\nnote: run with `RUST_BACKTRACE=1` for a backtrace\ntask 'rustc' panicked at 'assertion failed: !ty::type_needs_infer(ty)', /home/rustbuild/src/rust-buildbot/slave/nightly-linux/build/src/librustc/middle/typeck/mod.rs:290\n```\n\n(Backtrace omitted because it was the same.)\n\n[ICE Location](https://github.com/cybergeek94/multipart/blob/master/src/bin/multipart_server.rs#L19)\n[`multipart.foreach_entry()` definition](https://github.com/cybergeek94/multipart/blob/master/src/server.rs#L112)\n\nThis seems like a personally reasonable use case, and I believe my logic here is sound. It should work just fine with a static function or an old boxed closure, but I'd really like to make it work with unboxed closures. \n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19135/timeline", "performed_via_github_app": null, "state_reason": "completed"}