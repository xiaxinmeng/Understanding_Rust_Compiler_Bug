{"url": "https://api.github.com/repos/rust-lang/rust/issues/49638", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49638/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49638/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49638/events", "html_url": "https://github.com/rust-lang/rust/issues/49638", "id": 311082573, "node_id": "MDU6SXNzdWUzMTEwODI1NzM=", "number": 49638, "title": "New lookup functions on BTreeMap/Set", "user": {"login": "parsonsmatt", "id": 7310112, "node_id": "MDQ6VXNlcjczMTAxMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7310112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parsonsmatt", "html_url": "https://github.com/parsonsmatt", "followers_url": "https://api.github.com/users/parsonsmatt/followers", "following_url": "https://api.github.com/users/parsonsmatt/following{/other_user}", "gists_url": "https://api.github.com/users/parsonsmatt/gists{/gist_id}", "starred_url": "https://api.github.com/users/parsonsmatt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parsonsmatt/subscriptions", "organizations_url": "https://api.github.com/users/parsonsmatt/orgs", "repos_url": "https://api.github.com/users/parsonsmatt/repos", "events_url": "https://api.github.com/users/parsonsmatt/events{/privacy}", "received_events_url": "https://api.github.com/users/parsonsmatt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2018-04-04T04:35:48Z", "updated_at": "2022-01-27T08:53:09Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The current function `get` attempts to find an exact key match; if it fails, it returns `None`. I propose the addition of four variants:\r\n\r\n- `get_lt` finds the greatest `(key, element)` in the map/set that is less than the given key.\r\n- `get_lte` returns the lookup key and element in the map if present, otherwise returning the next smallest key and element.\r\n- `get_gt` finds the smallest `(key, element)` in the map/set that is greater than the given key.\r\n- `get_gte` looks up the key; if present, returns it and the element, if not, returns the next largest key and element.\r\n\r\nThe specific use case that prompted this:\r\n\r\nI'm working on a toy Smalltalk implementation. One of the implementation methods is \"given an object pointer, find the next object pointer that is an instance of of the class.\" Given a value `instances: BTreeSet<Pointer>`, the implementation is simply `get_gt(obj_ptr)`.\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":null}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49638/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49638/timeline", "performed_via_github_app": null, "state_reason": null}