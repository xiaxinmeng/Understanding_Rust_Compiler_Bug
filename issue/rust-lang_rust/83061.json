{"url": "https://api.github.com/repos/rust-lang/rust/issues/83061", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83061/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83061/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83061/events", "html_url": "https://github.com/rust-lang/rust/issues/83061", "id": 830433367, "node_id": "MDU6SXNzdWU4MzA0MzMzNjc=", "number": 83061, "title": "Possible solution to allow MIR inlining with -Zinstrument-coverage", "user": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 2019962432, "node_id": "MDU6TGFiZWwyMDE5OTYyNDMy", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt-inlining", "name": "A-mir-opt-inlining", "color": "f7e101", "default": false, "description": "Area: MIR inlining"}, {"id": 2483744621, "node_id": "MDU6TGFiZWwyNDgzNzQ0NjIx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-code-coverage", "name": "A-code-coverage", "color": "f7e101", "default": false, "description": "Area: Source-based code coverage (-Cinstrument-coverage)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-03-12T20:45:28Z", "updated_at": "2021-03-18T02:32:28Z", "closed_at": "2021-03-18T02:32:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Today, the MIR `Inline` pass is [skipped if `-Zinstrument-coverage`](https://github.com/rust-lang/rust/blob/782c7b04cf7a815890fc0bb50ad721081779d0a5/compiler/rustc_mir/src/transform/inline.rs#L42) is enabled.\r\n\r\nI have an idea for a workaround that will allow MIR inlining.\r\n\r\nI believe the problem is, when generating the LLVM coverage counters, and related coverage info used to generate the coverage map, each `Coverage` MIR statement assumes the coverage data should be associated with the current function being codegenned.\r\n\r\nSee https://github.com/rust-lang/rust/blob/1973f84ebbb3b2bb4b9a1488b6553ac46b2db8d4/compiler/rustc_codegen_ssa/src/mir/coverageinfo.rs#L23\r\n\r\nThe `self.instance` is the function instance being generated. But if MIR inlining is performed, the original coverage counters for the inlined function will conflict with coverage counters of the current `instance`. For example, in both functions, the first counter is `1`. But there will be two occurrences of that counter, for different  functions in the original source. (That's essentially the problem.)\r\n\r\nTo fix this, I believe we can just add the original function's `def_id` to the MIR `Coverage` statement data.\r\n\r\nEverywhere `self.instance` is used in the `codegen_coverage()` function should (probably) be replaced with an instance derived from the original `def_id`. This will apply those counters to the correct `FunctionCoverage`, and there will be no conflicts.\r\n\r\nI may not be able to work on this very soon, and disabling MIR inlining is an OK workaround for now, but I wanted to capture the idea for me or someone else to try in the future. ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83061/timeline", "performed_via_github_app": null, "state_reason": "completed"}