{"url": "https://api.github.com/repos/rust-lang/rust/issues/45795", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45795/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45795/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45795/events", "html_url": "https://github.com/rust-lang/rust/issues/45795", "id": 271319158, "node_id": "MDU6SXNzdWUyNzEzMTkxNTg=", "number": 45795, "title": "[std::char] Add MAX_UTF8_LEN and MAX_UTF16_LEN", "user": {"login": "behnam", "id": 37169, "node_id": "MDQ6VXNlcjM3MTY5", "avatar_url": "https://avatars.githubusercontent.com/u/37169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/behnam", "html_url": "https://github.com/behnam", "followers_url": "https://api.github.com/users/behnam/followers", "following_url": "https://api.github.com/users/behnam/following{/other_user}", "gists_url": "https://api.github.com/users/behnam/gists{/gist_id}", "starred_url": "https://api.github.com/users/behnam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/behnam/subscriptions", "organizations_url": "https://api.github.com/users/behnam/orgs", "repos_url": "https://api.github.com/users/behnam/repos", "events_url": "https://api.github.com/users/behnam/events{/privacy}", "received_events_url": "https://api.github.com/users/behnam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 657353545, "node_id": "MDU6TGFiZWw2NTczNTM1NDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-accepted", "name": "C-feature-accepted", "color": "f5f1fd", "default": false, "description": "Category: A feature request that has been accepted pending implementation."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-05T22:11:03Z", "updated_at": "2017-11-14T08:30:14Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Background\r\nUTF-8 encoding on any character can take up to 4 bytes (`u8`). UTF-16 encoding can take up to 2 words (`u16`). This is a promise from the encoding specs, and an assumption made in many places inside rust libs and applications.\r\n\r\nCurrently, there's lots of *magic* numbers 4 and 2 everywhere in the code, creating buffer long enough to encode a character into as UTF-8 or UTF-16.\r\n\r\n## Examples\r\nhttps://github.com/rust-lang/rust/blob/b7041bfab3a83702a8026fb7a18d8ea7d54cc648/src/libcore/tests/char.rs#L236-L239\r\n\r\nhttps://github.com/rust-lang/rust/blob/b7041bfab3a83702a8026fb7a18d8ea7d54cc648/src/libcore/tests/char.rs#L253-L256\r\n\r\n# Proposal\r\nAdd the followings public definitions to `std::char` and `core::char` to be used inside the rust codebase and publicly.\r\n\r\n```rust\r\npub const MAX_UTF8_LEN: usize = 4;\r\npub const MAX_UTF16_LEN: usize = 2;\r\n```\r\n\r\n# Why should we do this?\r\nThis will allow the code to be written like this:\r\n```rust\r\nlet mut buf = [0; char::MAX_UTF16_LEN];\r\nlet b = input.encode_utf16(&mut buf);\r\n```\r\n\r\nThis will guide users\u2014without them knowing too much details of UTF-8/UTF-16 encodings\u2014to allocate the correct amount of memory while writing the code, instead of waiting until some runtime error is raise, which actually may not happen in basic tests and discovered externally. Also, it increases readability for anyone reading such code.\r\n\r\nBesides using these max-length values for char-level allocations, user can also use them for pre-allocate memory for encoding some chars list into UTF-8/UTF-16.\r\n\r\n# How we teach this?\r\nThe std/core libs will be updated to use these values wherever possible (see [this list](https://gist.github.com/behnam/64484153914d862a2c75d57d15fc58e4)), and docs for encoding-related functions in `char` module are updated to evangelize using these values when allocating memory to be used by the encoding functions.\r\n\r\n* https://doc.rust-lang.org/std/primitive.char.html#method.len_utf8\r\n* https://doc.rust-lang.org/std/primitive.char.html#method.len_utf16\r\n* https://doc.rust-lang.org/std/primitive.char.html#method.encode_utf8\r\n* https://doc.rust-lang.org/std/primitive.char.html#method.encode_utf16\r\n\r\n# Alternatives\r\n\r\n### 1) Only update the docs\r\nWe can just update the function docs to talk about these max-length values, but not name them as a `const` value.\r\n\r\n### 2) New functions for allocations with max limit\r\nAlthough this can be handy for some users, it would be limited to only one use-case of these numbers and not helpful for other operations.\r\n\r\n----\r\n\r\nWhat do you think?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45795/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45795/timeline", "performed_via_github_app": null, "state_reason": null}