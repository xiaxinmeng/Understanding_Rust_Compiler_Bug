{"url": "https://api.github.com/repos/rust-lang/rust/issues/82080", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82080/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82080/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82080/events", "html_url": "https://github.com/rust-lang/rust/issues/82080", "id": 807852657, "node_id": "MDU6SXNzdWU4MDc4NTI2NTc=", "number": 82080, "title": "Actually deprecate `collections::Bound`", "user": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2021-02-13T23:48:03Z", "updated_at": "2021-03-26T15:29:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In https://github.com/rust-lang/rust/commit/f2c7917402ebd858f5b517a3406bec8ef187bfb1 , `intrinsics::drop_in_place` was supposedly deprecated in favor of `ptr::drop_in_place`:\r\n```rust\r\n#[rustc_deprecated(\r\n    reason = \"no longer an intrinsic - use `ptr::drop_in_place` directly\",\r\n    since = \"1.18.0\"\r\n)]\r\npub use crate::ptr::drop_in_place;\r\n```\r\nHowever, this function does not show up as deprecated in the library docs (https://doc.rust-lang.org/nightly/std/intrinsics/fn.drop_in_place.html), nor does it trigger the deprecation warning in the following program:\r\n```rust\r\nfn main() {\r\n    let x = &mut 42 as *mut i32;\r\n    unsafe { core::intrinsics::drop_in_place(x); }\r\n}\r\n```\r\nPresumably this is an unforeseen inability of `#[rustc_deprecated]` to operate on re-exports. Regardless it means that this function was never actually deprecated in practice, and it will need be deprecated for real with an updated `since` value.\r\n\r\nThis can be resolved by simply making `intrinsics::drop_in_place` into an actual function that merely wraps and calls `ptr::drop_in_place`, then and then applying `#[rustc_deprecated]` to it. Alternatively one could fix `#[rustc_deprecated]` to work when applied to re-exports, but that seems far more involved.\r\n\r\n---\r\n\r\nEdit: I've also discovered another example of this, which is `collections::Bound`:\r\n```rust\r\n#[rustc_deprecated(reason = \"moved to `std::ops::Bound`\", since = \"1.26.0\")]\r\n#[doc(hidden)]\r\npub use crate::ops::Bound;\r\n```\r\nThe problem in this case is a bit more difficult than with `drop_in_place` and requires a bit more care. To wit, function items aren't nominal types, so redefining `intrinsics::drop_in_place` as a wrapper over `ptr::drop_in_place` isn't a breaking change. However, redefining `collections::Bound` as a newtype over `ops::Bound` would create a new nominal type, and would be a breaking change. Furthermore, type aliases via `type` aren't fully at parity with \"real\" types, so there *might* be potential for breakage if one were to simply do `pub type Bound = ops::Bound;` (I can confirm that the `#[deprecated]` attribute does work on type aliases). However, I think in practice it should(?) be alright to use a type alias here (the only disparity I can think of with type aliases is that they can't be used as constructors for unit structs, but I'd like second opinions).", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82080/timeline", "performed_via_github_app": null, "state_reason": null}