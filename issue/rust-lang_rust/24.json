{"url": "https://api.github.com/repos/rust-lang/rust/issues/24", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/24/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/24/events", "html_url": "https://github.com/rust-lang/rust/issues/24", "id": 228801, "node_id": "MDU6SXNzdWUyMjg4MDE=", "number": 24, "title": " support non-init output slots on STMT_call", "user": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2010-06-22T22:11:57Z", "updated_at": "2014-04-11T20:49:55Z", "closed_at": "2011-01-27T00:49:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently Trans.trans_call takes an argument indicating whether it's an\ninitializing call, but it always behaves as though it's initializing, even if\nthe argument is false. This is because there's a bit of a subtlety involved in\nrefcounted values: the same referent may be used as both dst of the call and as\nan arg, and we want to avoid having it drop before being pinned as an arg,\nbecause the dst was dropped. \n\nThe existing code may have been born in the CoW era and may no longer represent\na real hazard if rearranged to just pin args first then drop dst; will need a\nfew careful tests to be sure the arrangement actually works.\n\n(Alternatively: worst case, make a static pass that prohibits x = f(x) the same\nway f(x,x) is to be prohibited if both slots are alias-mode.)\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/24/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/24/timeline", "performed_via_github_app": null, "state_reason": "completed"}