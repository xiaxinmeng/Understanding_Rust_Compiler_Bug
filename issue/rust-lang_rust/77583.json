{"url": "https://api.github.com/repos/rust-lang/rust/issues/77583", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77583/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77583/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77583/events", "html_url": "https://github.com/rust-lang/rust/issues/77583", "id": 715030792, "node_id": "MDU6SXNzdWU3MTUwMzA3OTI=", "number": 77583, "title": "Poorly optimized assembly generation around Ipv4Addr, Ipv6Addr", "user": {"login": "TyPR124", "id": 29851190, "node_id": "MDQ6VXNlcjI5ODUxMTkw", "avatar_url": "https://avatars.githubusercontent.com/u/29851190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TyPR124", "html_url": "https://github.com/TyPR124", "followers_url": "https://api.github.com/users/TyPR124/followers", "following_url": "https://api.github.com/users/TyPR124/following{/other_user}", "gists_url": "https://api.github.com/users/TyPR124/gists{/gist_id}", "starred_url": "https://api.github.com/users/TyPR124/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TyPR124/subscriptions", "organizations_url": "https://api.github.com/users/TyPR124/orgs", "repos_url": "https://api.github.com/users/TyPR124/repos", "events_url": "https://api.github.com/users/TyPR124/events{/privacy}", "received_events_url": "https://api.github.com/users/TyPR124/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-10-05T17:34:07Z", "updated_at": "2021-04-05T13:47:22Z", "closed_at": "2021-04-05T13:47:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\npub fn ipv4_bitand_mask(ipv4: Ipv4Addr, mask: u32) -> Ipv4Addr {\r\n    let ipv4_u32 = u32::from_ne_bytes(ipv4.octets());\r\n    Ipv4Addr::from((ipv4_u32 & mask).to_ne_bytes())\r\n}\r\n```\r\n\r\nI expected to see this happen: assembly generated should be equivalent to:\r\n\r\n```rust\r\npub fn ipv4_bitand_mask_unsafe(ipv4: Ipv4Addr, mask: u32) -> Ipv4Addr {\r\n    let ipv4_u32: u32 = unsafe { std::mem::transmute(ipv4) };\r\n    unsafe { std::mem::transmute(ipv4_u32 & mask) }\r\n}\r\n```\r\n\r\nInstead, this happened: the generated assembly retains calls to Ipv4::octets and Ipv4::from, leaving the assembly poorly optimized\r\n\r\nI've played with different ways of implementing the safe version, but cannot find anyway get it to optimize further.\r\n\r\nGood assembly:\r\n\r\n```asm\r\nexample::ipv4_bitand_mask_unsafe:\r\n        mov     eax, edi\r\n        and     eax, esi\r\n        ret\r\n```\r\n\r\nBad assembly:\r\n\r\n```asm\r\nexample::ipv4_bitand_mask:\r\n        push    rbx\r\n        sub     rsp, 16\r\n        mov     ebx, esi\r\n        mov     dword ptr [rsp + 8], edi\r\n        lea     rdi, [rsp + 8]\r\n        call    qword ptr [rip + std::net::ip::Ipv4Addr::octets@GOTPCREL]\r\n        and     eax, ebx\r\n        mov     edi, eax\r\n        call    qword ptr [rip + <std::net::ip::Ipv4Addr as core::convert::From<[u8; 4]>>::from@GOTPCREL]\r\n        add     rsp, 16\r\n        pop     rbx\r\n        ret\r\n```\r\n\r\n[Playground](https://play.rust-lang.org/?version=nightly&mode=release&edition=2018&gist=e9b9780847aec6211faf8695331c41b5) and [GodBolt](https://rust.godbolt.org/z/5aG6bc) (both include an IPv6 example as well)\r\n\r\nAdding '-Z mir-opt-level=2' (or higher) does optimize away the call to octets, but not the call to from.\r\n\r\nI get the same optimization behavior when building a binary, at least on my own platfom (x86-64 Windows MSVC)\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.49.0-nightly (beb5ae474 2020-10-04)\r\nbinary: rustc\r\ncommit-hash: beb5ae474d2835962ebdf7416bd1c9ad864fe101\r\ncommit-date: 2020-10-04\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.49.0-nightly\r\nLLVM version: 11.0\r\n```\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77583/timeline", "performed_via_github_app": null, "state_reason": "completed"}