{"url": "https://api.github.com/repos/rust-lang/rust/issues/54508", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54508/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54508/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54508/events", "html_url": "https://github.com/rust-lang/rust/issues/54508", "id": 362949833, "node_id": "MDU6SXNzdWUzNjI5NDk4MzM=", "number": 54508, "title": "#[derive] Debug, PartialEq, Hash, etc. for any function pointers, regardless of type signature", "user": {"login": "fschutt", "id": 12084016, "node_id": "MDQ6VXNlcjEyMDg0MDE2", "avatar_url": "https://avatars.githubusercontent.com/u/12084016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fschutt", "html_url": "https://github.com/fschutt", "followers_url": "https://api.github.com/users/fschutt/followers", "following_url": "https://api.github.com/users/fschutt/following{/other_user}", "gists_url": "https://api.github.com/users/fschutt/gists{/gist_id}", "starred_url": "https://api.github.com/users/fschutt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fschutt/subscriptions", "organizations_url": "https://api.github.com/users/fschutt/orgs", "repos_url": "https://api.github.com/users/fschutt/repos", "events_url": "https://api.github.com/users/fschutt/events{/privacy}", "received_events_url": "https://api.github.com/users/fschutt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-09-23T15:05:38Z", "updated_at": "2023-03-22T19:38:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Suppose you have a situation like this:\r\n\r\n```rust\r\ntrait MyTrait { }\r\n\r\n// This works:\r\n#[derive(Debug, Copy, Clone, PartialEq, Eq)]\r\nstruct WorkingFunctionPointer<T: MyTrait>(fn(T));\r\n\r\n// This doesn't work:\r\n#[derive(Debug, Copy, Clone, PartialEq, Eq)]\r\nstruct NotWorkingFunctionPointer<T: MyTrait>(fn(&T));\r\n```\r\n\r\nhttps://play.rust-lang.org/?gist=d1bd43980abfb37197a8aaf84ed7b529&version=stable&mode=debug&edition=2015\r\n\r\nYou can implement this manually by writing something like this:\r\n\r\n```rust\r\n// #[derive(Debug, Clone, PartialEq, Hash, Eq)] for NotWorkingFunctionPointer<T>\r\n\r\nimpl<T: Layout> fmt::Debug for NotWorkingFunctionPointer<T> {\r\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\r\n        write!(f, \"NotWorkingFunctionPointer(0x{:x})\", self.0 as usize)\r\n    }\r\n}\r\n\r\nimpl<T: Layout> Clone for NotWorkingFunctionPointer<T> {\r\n    fn clone(&self) -> Self {\r\n        NotWorkingFunctionPointer(self.0.clone())\r\n    }\r\n}\r\n\r\nimpl<T: Layout> Hash for NotWorkingFunctionPointer<T> {\r\n  fn hash<H>(&self, state: &mut H) where H: Hasher {\r\n    state.write_usize(self.0 as usize);\r\n  }\r\n}\r\n\r\nimpl<T: Layout> PartialEq for NotWorkingFunctionPointer<T> {\r\n  fn eq(&self, rhs: &Self) -> bool {\r\n    self.0 as usize == rhs.0 as usize\r\n  }\r\n}\r\n\r\nimpl<T: Layout> Eq for NotWorkingFunctionPointer<T> { }\r\nimpl<T: Layout> Copy for NotWorkingFunctionPointer<T> { }\r\n```\r\n\r\n... but this is tedious to do and leads to a lot of boilerplaite code. Even worse, this is especially bad if you have a `FunctionPointer<T>` **used in a struct** like this:\r\n\r\n```rust\r\n// #[derive] won't work here, same error!\r\nstruct Something<T: MyTrait> {\r\n    ptr: NotWorkingFunctionPointer<T>,\r\n    // other fields for demonstration\r\n    blah: Blah,\r\n    foo: Foo,\r\n    baz: Baz,\r\n}\r\n```\r\n\r\n... because then #[derive] **doesn't work on the `Something` struct**! This means you have to copy-paste all over again:\r\n\r\n```rust\r\n// A manual #[derive(Debug, Clone, PartialEq, Hash, Eq)] for Something<T>\r\n\r\nimpl<T: Layout> fmt::Debug for Something<T> {\r\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\r\n        write!(f, \"Something { ptr: {:?}, blah: {:?}, foo: {:?}, baz: {:?} }\", self.ptr, self.blah, self.foo, self.baz)\r\n    }\r\n}\r\n\r\nimpl<T: MyTrait> Clone for Something<T> {\r\n    fn clone(&self) -> Self {\r\n         Something {\r\n             ptr: self.ptr.clone(),\r\n             blah: self.blah.clone(),\r\n             foo: self.foo.clone(),\r\n             baz: self.baz.clone(),\r\n         }\r\n    }\r\n}\r\n\r\nimpl<T: MyTrait> Clone for Something<T> {\r\n    fn clone(&self) -> Self {\r\n         Something {\r\n             ptr: self.ptr.clone(),\r\n             blah: self.blah.clone(),\r\n             foo: self.foo.clone(),\r\n             baz: self.baz.clone(),\r\n         }\r\n    }\r\n}\r\n\r\nimpl<T: Layout> Hash for Something<T> {\r\n  fn hash<H>(&self, state: &mut H) where H: Hasher {\r\n    state.hash(self.ptr);\r\n    state.hash(self.foo);\r\n    state.hash(self.bar);\r\n    state.hash(self.baz);\r\n  }\r\n}\r\n\r\nimpl<T: Layout> PartialEq for Something<T> {\r\n  fn eq(&self, rhs: &Self) -> bool {\r\n    self.ptr == rhs.ptr &&\r\n    self.foo == rhs.foo &&\r\n    self.bar == rhs.bar &&\r\n    self.baz == rhs.baz &&\r\n  }\r\n}\r\n\r\nimpl<T: Layout> Eq for Something<T> { }\r\nimpl<T: Layout> Copy for Something<T> { }\r\n```\r\n\r\n.. and over and over and over again, for each struct that you wrap / use `Something` in. Nevermind that this is error-prone if you add a field to the `Something` struct, don't forget to update the `hash()` and `fmt()` functions! This leads to a whole bunch of code that I need to copy-paste because derive doesn't work. \r\n\r\nThe real-world code where I encountered this problem is:\r\n\r\nhttps://github.com/maps4print/azul/blob/4f2ba2e6eebdd0718d1adb15aac34c643f0f94ca/src/dom.rs#L159-L228\r\nhttps://github.com/maps4print/azul/blob/4f2ba2e6eebdd0718d1adb15aac34c643f0f94ca/src/dom.rs#L358-L394\r\nhttps://github.com/maps4print/azul/blob/4f2ba2e6eebdd0718d1adb15aac34c643f0f94ca/src/dom.rs#L413-L452\r\n\r\nIt's just stupid, copy-pasted code and if possible, I'd like to get rid of it with derive, but right now I sadly can't. My manual code is just a workaround for now, and I'd like this to be properly fixed somehow. Thanks in advance for any help.", "closed_by": {"login": "fschutt", "id": 12084016, "node_id": "MDQ6VXNlcjEyMDg0MDE2", "avatar_url": "https://avatars.githubusercontent.com/u/12084016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fschutt", "html_url": "https://github.com/fschutt", "followers_url": "https://api.github.com/users/fschutt/followers", "following_url": "https://api.github.com/users/fschutt/following{/other_user}", "gists_url": "https://api.github.com/users/fschutt/gists{/gist_id}", "starred_url": "https://api.github.com/users/fschutt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fschutt/subscriptions", "organizations_url": "https://api.github.com/users/fschutt/orgs", "repos_url": "https://api.github.com/users/fschutt/repos", "events_url": "https://api.github.com/users/fschutt/events{/privacy}", "received_events_url": "https://api.github.com/users/fschutt/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54508/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54508/timeline", "performed_via_github_app": null, "state_reason": null}