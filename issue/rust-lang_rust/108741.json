{"url": "https://api.github.com/repos/rust-lang/rust/issues/108741", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108741/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108741/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108741/events", "html_url": "https://github.com/rust-lang/rust/issues/108741", "id": 1609826874, "node_id": "I_kwDOAAsO6M5f9AI6", "number": 108741, "title": "`emit-stack-sizes` not reporting correct stack size", "user": {"login": "xphoniex", "id": 14107758, "node_id": "MDQ6VXNlcjE0MTA3NzU4", "avatar_url": "https://avatars.githubusercontent.com/u/14107758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xphoniex", "html_url": "https://github.com/xphoniex", "followers_url": "https://api.github.com/users/xphoniex/followers", "following_url": "https://api.github.com/users/xphoniex/following{/other_user}", "gists_url": "https://api.github.com/users/xphoniex/gists{/gist_id}", "starred_url": "https://api.github.com/users/xphoniex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xphoniex/subscriptions", "organizations_url": "https://api.github.com/users/xphoniex/orgs", "repos_url": "https://api.github.com/users/xphoniex/repos", "events_url": "https://api.github.com/users/xphoniex/events{/privacy}", "received_events_url": "https://api.github.com/users/xphoniex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1884641928, "node_id": "MDU6TGFiZWwxODg0NjQxOTI4", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-AVR", "name": "O-AVR", "color": "6e6ec0", "default": false, "description": "Target: AVR processors (ATtiny, ATmega, etc.)"}, {"id": 5226909857, "node_id": "LA_kwDOAAsO6M8AAAABN4xQoQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-cli", "name": "A-cli", "color": "f7e101", "default": false, "description": "Area: Command line interface to the compiler."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-03-04T15:20:56Z", "updated_at": "2023-04-05T17:33:02Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a library and and app using the library, and compiling for AVR target using `avr-gcc`. It's seem to be overflowing the device so I want to check stack usage. I tried building my library which is pure rust and got:\r\n```console\r\n$ RUSTFLAGS=\"-Z emit-stack-sizes\" cargo  build --lib -r\r\n...\r\n\r\n$ size -A target/release/libnoble_secp256k1.rlib | grep -A1 -B1 double\r\n.text                                                                               0      0\r\n.text._ZN15noble_secp256k15point5Point17double_assign_mod17h64c79c0a4005e01fE    3040      0\r\n.stack_sizes                                                                       10      0\r\n```\r\n\r\nwhich makes no sense as the function works with 64-byte numbers, and does a few allocations. I turned to `cargo-call-stack` and as it doesn't support AVR either (https://github.com/japaric/cargo-call-stack/issues/92), I chose an ARM target to view `call-stack` output:\r\n![Screenshot from 2023-03-04 17-33-27](https://user-images.githubusercontent.com/14107758/222914171-53b826fe-8a42-4511-9e06-66ff6f99130f.png)\r\n\r\nso according to `cargo-call-stack` which uses `emit-stack-sizes` under the hood, the same function `double_assign_mod` uses 1424 bytes, which makes more sense.\r\n\r\nrelated:\r\n- https://github.com/rust-lang/rust/issues/54192\r\n- https://github.com/japaric/cargo-call-stack/issues/92\r\n\r\n`rustc --version --verbose`:\r\n```\r\nnightly-2022-07-10\r\n```\r\n\r\n@japaric ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108741/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108741/timeline", "performed_via_github_app": null, "state_reason": null}