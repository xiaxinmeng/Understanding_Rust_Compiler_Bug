{"url": "https://api.github.com/repos/rust-lang/rust/issues/50392", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50392/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50392/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50392/events", "html_url": "https://github.com/rust-lang/rust/issues/50392", "id": 319508115, "node_id": "MDU6SXNzdWUzMTk1MDgxMTU=", "number": 50392, "title": "Improve performance of BytePos", "user": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-02T11:05:36Z", "updated_at": "2018-05-05T11:46:19Z", "closed_at": "2018-05-05T11:46:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have seen BytePos's operations showing up in profiles. In particular, common operations like to_usize() and from_usize() aren't getting inlined. Presumably this is because BytePos is in the libsyntax_pos crate but most of its uses are in other crates and it's not marked as `#[inline]`.\r\n\r\nJust as an experiment, I tried changing BytePos to just be a typedef of `u32`. Results were surprisingly good, with lots of improvements in the 1--4% range.\r\n```\r\ncoercions-check\r\n\tavg: -2.5%\tmin: -4.5%\tmax: -1.1%\r\nhelloworld-check\r\n\tavg: -4.0%\tmin: -4.2%\tmax: -3.7%\r\nunify-linearly-check\r\n\tavg: -3.2%\tmin: -3.8%\tmax: -2.6%\r\ndeeply-nested-check\r\n\tavg: -2.8%\tmin: -3.6%\tmax: -2.2%\r\nissue-46449-check\r\n\tavg: -3.0%\tmin: -3.3%\tmax: -2.8%\r\nparser-check\r\n\tavg: -2.8%\tmin: -3.3%\tmax: -2.2%\r\ndeeply-nested\r\n\tavg: -1.9%\tmin: -3.1%\tmax: -1.2%\r\ndeeply-nested-opt\r\n\tavg: -1.6%\tmin: -3.1%\tmax: -0.7%\r\ncoercions-opt\r\n\tavg: -1.8%\tmin: -3.1%\tmax: -1.1%\r\ncoercions\r\n\tavg: -1.1%\tmin: -3.0%\tmax: 0.2%\r\nissue-46449\r\n\tavg: -1.5%\tmin: -2.9%\tmax: -1.2%\r\nissue-46449-opt\r\n\tavg: -1.1%\tmin: -2.8%\tmax: -0.6%\r\nregression-31157-check\r\n\tavg: -1.8%\tmin: -2.5%\tmax: -1.1%\r\ntokio-webpush-simple-check\r\n\tavg: -1.7%\tmin: -2.2%\tmax: -1.3%\r\ntuple-stress\r\n\tavg: -1.0%\tmin: -2.0%\tmax: -0.5%\r\nunused-warnings-check\r\n\tavg: -1.4%\tmin: -1.8%\tmax: -1.3%\r\ntuple-stress-check\r\n\tavg: -0.9%\tmin: -1.8%\tmax: -0.6%\r\nencoding-check\r\n\tavg: -1.3%\tmin: -1.7%\tmax: -0.9%\r\nencoding-opt\r\n\tavg: -0.8%\tmin: -1.7%\tmax: -0.1%\r\ntuple-stress-opt\r\n\tavg: -0.9%\tmin: -1.7%\tmax: -0.5%\r\nencoding\r\n\tavg: -0.9%\tmin: -1.5%\tmax: -0.0%\r\nregression-31157-opt\r\n\tavg: -0.6%\tmin: -1.4%\tmax: -0.0%\r\nunify-linearly-opt\r\n\tavg: -1.2%\tmin: -1.4%\tmax: -1.0%\r\nfutures-check\r\n\tavg: -1.0%\tmin: -1.4%\tmax: -0.5%\r\nparser-opt\r\n\tavg: -1.3%\tmin: -1.4%\tmax: -1.1%\r\nparser\r\n\tavg: -1.3%\tmin: -1.4%\tmax: -1.1%\r\nunused-warnings\r\n\tavg: -1.2%\tmin: -1.4%\tmax: -1.1%\r\nfutures\r\n\tavg: -0.9%\tmin: -1.4%\tmax: -0.4%\r\nunused-warnings-opt\r\n\tavg: -1.2%\tmin: -1.4%\tmax: -1.1%\r\nfutures-opt\r\n\tavg: -0.8%\tmin: -1.4%\tmax: -0.3%\r\nhelloworld\r\n\tavg: -1.3%\tmin: -1.4%\tmax: -1.3%\r\nhelloworld-opt\r\n\tavg: -1.3%\tmin: -1.4%\tmax: -1.3%\r\nunify-linearly\r\n\tavg: -1.2%\tmin: -1.4%\tmax: -1.1%\r\nregression-31157\r\n\tavg: -0.8%\tmin: -1.3%\tmax: -0.4%\r\nsyn-check\r\n\tavg: -0.8%\tmin: -1.3%\tmax: -0.3%\r\nsyn-opt\r\n\tavg: -0.5%\tmin: -1.2%\tmax: -0.0%\r\nregex\r\n\tavg: -0.7%\tmin: -1.2%\tmax: -0.3%\r\nregex-check\r\n\tavg: -1.0%\tmin: -1.2%\tmax: -0.6%\r\nregex-opt\r\n\tavg: -0.5%\tmin: -1.2%\tmax: 0.0%\r\nsyn\r\n\tavg: -0.6%\tmin: -1.2%\tmax: -0.3%\r\npiston-image-check\r\n\tavg: -0.6%\tmin: -1.1%\tmax: -0.4%\r\ninflate-opt\r\n\tavg: -0.2%\tmin: -1.1%\tmax: 0.4%\r\nhyper\r\n\tavg: -0.7%\tmin: -1.1%\tmax: -0.4%\r\nhyper-opt\r\n\tavg: -0.5%\tmin: -1.0%\tmax: -0.1%\r\nhyper-check\r\n\tavg: -0.8%\tmin: -1.0%\tmax: -0.5%\r\nhtml5ever-opt\r\n\tavg: -0.5%\tmin: -1.0%\tmax: -0.2%\r\ntokio-webpush-simple-opt\r\n\tavg: -0.3%\tmin: -1.0%\tmax: 0.1%\r\ninflate\r\n\tavg: -0.4%\tmin: -1.0%\tmax: -0.1%\r\n```\r\nIt definitely seems worth doing something here. Though converting to `u32` is not good, because it's having BytePos be a newtype is definitely good for code readability.\r\n\r\nWould simply adding `#[inline]` or `#[inline(always)]` to the relevant methods work? Does that have other consequences, such as increasing compile time of rustc itself?", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50392/timeline", "performed_via_github_app": null, "state_reason": "completed"}