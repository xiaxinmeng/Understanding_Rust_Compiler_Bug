{"url": "https://api.github.com/repos/rust-lang/rust/issues/30027", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/30027/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/30027/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/30027/events", "html_url": "https://github.com/rust-lang/rust/issues/30027", "id": 118615236, "node_id": "MDU6SXNzdWUxMTg2MTUyMzY=", "number": 30027, "title": "Produce idata content for dll/dylib import on windows", "user": {"login": "SlugFiller", "id": 5435495, "node_id": "MDQ6VXNlcjU0MzU0OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5435495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SlugFiller", "html_url": "https://github.com/SlugFiller", "followers_url": "https://api.github.com/users/SlugFiller/followers", "following_url": "https://api.github.com/users/SlugFiller/following{/other_user}", "gists_url": "https://api.github.com/users/SlugFiller/gists{/gist_id}", "starred_url": "https://api.github.com/users/SlugFiller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SlugFiller/subscriptions", "organizations_url": "https://api.github.com/users/SlugFiller/orgs", "repos_url": "https://api.github.com/users/SlugFiller/repos", "events_url": "https://api.github.com/users/SlugFiller/events{/privacy}", "received_events_url": "https://api.github.com/users/SlugFiller/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 27, "created_at": "2015-11-24T14:03:50Z", "updated_at": "2019-09-13T19:24:02Z", "closed_at": "2019-09-13T19:24:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "From what I can tell the `kind=\"dylib\"` link hint is mostly ignored on windows, as rust expects a matching import library to be found. I suggest it should, instead, produce an appropriate idata section in the LLVM code.\n\nFor example, for the following:\n\n``` rust\n#[cfg(windows)]\n#[link(name = \"kernel32\", kind=\"dylib\")]\n#[allow(non_snake_case)]\nextern \"system\" {\n    fn GetStdHandle(nStdHandle: u32) -> *mut u8;\n    fn WriteConsoleA(hConsoleOutput: *mut u8, lpBuffer: *const u8, nNumberOfCharsToWrite: u32, lpNumberOfCharsWritten: *mut u32, lpReserved: *const u8) -> i32;\n}\n```\n\nRust should produce (Assuming 32-bit. For 64-bit target, a bunch of i32s should replaced with i64s below):\n\n``` llvm\n@__ImageBase = external global i8\n\ndefine internal i8* @GetStdHandle(i32 %nStdHandle) unnamed_addr alwaysinline nounwind {\n    %lpaddr = bitcast i8** getelementptr ([3 x i8*]* @.import.kernel32.ptr, i32 0, i32 0) to i8*(i32 )**\n    %addr = load i8*(i32)** %lpaddr\n    %ret = call cc 64 i8* %addr(i32 %nStdHandle)\n    ret i8* %ret\n}\n\ndefine internal i32 @WriteConsoleA(i8* %hConsoleOutput, i8* %lpBuffer, i32 %nNumberOfCharsToWrite, i32* %lpNumberOfCharsWritten, i8* %lpReserved) unnamed_addr alwaysinline nounwind {\n    %lpaddr = bitcast i8** getelementptr ([3 x i8*]* @.import.kernel32.ptr, i32 0, i32 1) to i32(i8*, i8*, i32, i32*, i8*)**\n    %addr = load i32(i8*, i8*, i32, i32*, i8*)** %lpaddr\n    %ret = call cc 64 i32 %addr(i8* %hConsoleOutput, i8* %lpBuffer, i32 %nNumberOfCharsToWrite, i32* %lpNumberOfCharsWritten, i8* %lpReserved)\n    ret i32 %ret\n}\n\n%.win32.image_import_descriptor = type {\n    i8*, ; Characteristics\n    i32, ; TimeDateStamp\n    i32, ; ForwarderChain\n    i8*, ; DLL Name\n    i8* ; FirstThunk\n}\n\n@.import.kernel32.dllname = private constant [16 x i8] c\"KERNEL32.DLL\\00\\00\\00\\00\", section \".idata$7\"\n\n@.import.kernel32.func.GetStdHandle = private constant [18 x i8] c\"\\00\\00GetStdHandle\\00\\00\\00\\00\", section \".idata$6\"\n@.import.kernel32.func.WriteConsoleA = private constant [19 x i8] c\"\\00\\00WriteConsoleA\\00\\00\\00\\00\", section \".idata$6\"\n\n@.import.kernel32.desc = private global [3 x i8*] [\n    i8* inttoptr (i32 sub(i32 ptrtoint([18 x i8]* @.import.kernel32.func.GetStdHandle to i32), i32 ptrtoint(i8* @__ImageBase to i32)) to i8*),\n    i8* inttoptr (i32 sub(i32 ptrtoint([19 x i8]* @.import.kernel32.func.WriteConsoleA to i32), i32 ptrtoint(i8* @__ImageBase to i32)) to i8*),\n    i8* null\n], section \".idata$4\"\n@.import.kernel32.ptr = private global [3 x i8*] [\n    i8* inttoptr (i32 sub(i32 ptrtoint([18 x i8]* @.import.kernel32.func.GetStdHandle to i32), i32 ptrtoint(i8* @__ImageBase to i32)) to i8*),\n    i8* inttoptr (i32 sub(i32 ptrtoint([19 x i8]* @.import.kernel32.func.WriteConsoleA to i32), i32 ptrtoint(i8* @__ImageBase to i32)) to i8*),\n    i8* null\n], section \".idata$3\"\n\n@.dllimport = appending constant [2 x %.win32.image_import_descriptor] [\n    %.win32.image_import_descriptor {\n        i8* inttoptr (i32 sub(i32 ptrtoint([3 x i8*]* @.import.kernel32.desc to i32), i32 ptrtoint(i8* @__ImageBase to i32)) to i8*),\n        i32 0,\n        i32 0,\n        i8* inttoptr (i32 sub(i32 ptrtoint([16 x i8]* @.import.kernel32.dllname to i32), i32 ptrtoint(i8* @__ImageBase to i32)) to i8*),\n        i8* inttoptr (i32 sub(i32 ptrtoint([3 x i8*]* @.import.kernel32.ptr to i32), i32 ptrtoint(i8* @__ImageBase to i32)) to i8*)\n    },\n    %.win32.image_import_descriptor {\n        i8* null,\n        i32 0,\n        i32 0,\n        i8* null,\n        i8* null\n    }\n], section \".idata$2\"\n```\n", "closed_by": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/30027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/30027/timeline", "performed_via_github_app": null, "state_reason": "completed"}