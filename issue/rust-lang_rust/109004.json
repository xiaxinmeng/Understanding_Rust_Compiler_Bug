{"url": "https://api.github.com/repos/rust-lang/rust/issues/109004", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109004/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109004/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109004/events", "html_url": "https://github.com/rust-lang/rust/issues/109004", "id": 1619668560, "node_id": "I_kwDOAAsO6M5gii5Q", "number": 109004, "title": "Compiling `drop(Box<large array>)` causes runaway compiler memory usage", "user": {"login": "adlerd", "id": 2301999, "node_id": "MDQ6VXNlcjIzMDE5OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2301999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adlerd", "html_url": "https://github.com/adlerd", "followers_url": "https://api.github.com/users/adlerd/followers", "following_url": "https://api.github.com/users/adlerd/following{/other_user}", "gists_url": "https://api.github.com/users/adlerd/gists{/gist_id}", "starred_url": "https://api.github.com/users/adlerd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adlerd/subscriptions", "organizations_url": "https://api.github.com/users/adlerd/orgs", "repos_url": "https://api.github.com/users/adlerd/repos", "events_url": "https://api.github.com/users/adlerd/events{/privacy}", "received_events_url": "https://api.github.com/users/adlerd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630799571, "node_id": "MDU6TGFiZWw2MzA3OTk1NzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compilemem", "name": "I-compilemem", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to memory usage during compilation."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2023-03-10T21:56:07Z", "updated_at": "2023-04-02T14:54:31Z", "closed_at": "2023-04-02T14:54:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Attempting to compile this code causes extremely large memory usage by rustc.\r\nBy experimentation, the important features of the code are: large `LIMIT`, the element type needs to have drop glue, and the drop can't be skipped with `forget` or some other mechanism. It also must be a program, not a library function.\r\n\r\n`src/main.rs`\r\n```rust\r\nfn main() {\r\n    const LIMIT: usize = 64_000_000;\r\n    // NB. if it compiled successfully, this would just panic, it wouldn't even allocate...\r\n    let _arr: Box<[String; LIMIT]> = Vec::new().into_boxed_slice().try_into().ok().unwrap();\r\n}\r\n```\r\n`Cargo.toml`\r\n```\r\n[package]\r\nname = \"repro\"\r\nversion = \"0.1.0\"\r\nedition = \"2021\"\r\n```\r\n\r\nThe problematic compiler invocation: `cargo build`. \r\n\r\nI expected to see this happen: The compiler memory usage shouldn't run away due to large `LIMIT`; in fact the compiler memory usage should be almost entirely independent of `LIMIT` for this program.\r\n\r\nInstead, this happened: When `LIMIT` is large, `rustc` uses a lot of memory and takes a long time. I have not successfully compiled the above program with the given `LIMIT` of 64M.\r\n\r\n### Meta\r\nI repro'd this on `1.65.0`, `1.68.0`, and finally:\r\n```\r\nrustc 1.70.0-nightly (39f2657d1 2023-03-09)\r\nbinary: rustc\r\ncommit-hash: 39f2657d1101b50f9b71ae460b762d330cc8426b\r\ncommit-date: 2023-03-09\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.70.0-nightly\r\nLLVM version: 15.0.7\r\n```\r\n\r\n(I did not capture a compiler backtrace.)\r\n\r\n### Thoughts\r\nI surmise that there's a correlation between `LIMIT` and compiler behavior but I haven't explored it beyond verifying a small `LIMIT` doesn't repro the bad behavior.\r\n\r\nI thought perhaps this program tries to use the stack for the slice->array cast, and somehow the compiler is getting stuck on such a large stack frame. Thankfully, this is ruled out by checking that `src/alloc/boxed.rs:boxed_slice_as_array_unchecked` does indeed do the slice->array cast entirely using pointers. So the compiler shouldn't \"see\" how big the array is; it's behind a pointer.\r\n\r\nAppending `std::mem::forget(_arr);` to `main` bypasses the issue, so it appears to be drop glue for the box which causes the problem. I don't see a particular reason why the drop glue for this type should be problematic; it should be no different than dropping the initialized part of a large `Vec<String>`.\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109004/timeline", "performed_via_github_app": null, "state_reason": "completed"}