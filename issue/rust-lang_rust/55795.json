{"url": "https://api.github.com/repos/rust-lang/rust/issues/55795", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55795/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55795/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55795/events", "html_url": "https://github.com/rust-lang/rust/issues/55795", "id": 378905773, "node_id": "MDU6SXNzdWUzNzg5MDU3NzM=", "number": 55795, "title": "static array of zeroes can take minutes to lint check", "user": {"login": "kazcw", "id": 1047859, "node_id": "MDQ6VXNlcjEwNDc4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kazcw", "html_url": "https://github.com/kazcw", "followers_url": "https://api.github.com/users/kazcw/followers", "following_url": "https://api.github.com/users/kazcw/following{/other_user}", "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}", "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions", "organizations_url": "https://api.github.com/users/kazcw/orgs", "repos_url": "https://api.github.com/users/kazcw/repos", "events_url": "https://api.github.com/users/kazcw/events{/privacy}", "received_events_url": "https://api.github.com/users/kazcw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-11-08T20:34:45Z", "updated_at": "2021-01-21T09:21:44Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This program takes an inordinate amount of time and memory to compile (it's worse if the array is actually used, but this is a minimal test case):\r\n\r\n    const SIZE: usize = 1 << 30;\r\n    static SLICE: [u8; SIZE] = [0u8; SIZE];\r\n    fn main() {}\r\n\r\nI was hoping this would be a viable way to get a big chunk of `.bss` so I don't have to depend on an `mmap` crate to get a lot of static zeroes, but the effect on compile time makes that impractical.\r\n\r\nIf I run `rustc -Z time-passes`, the big offender is:\r\n`time: 47.666; rss: 2486MB     lint checking`\r\n\r\nAlthough the time (and memory) is reportedly spent checking lints, setting `--cap-lints allow` doesn't make any difference. I'm guessing the \"lint checking\" pass includes some things that need to be checked even if lints are suppressed? If not, it seems like a separate issue is that a lot of work could be saved with cap-lints set (e.g. when compiling dependencies).\r\n\r\nHere are the top results from `perf report`, for `rustc 1.32.0-nightly (25a42b2ce 2018-11-07)`:\r\n```\r\n  31.62%  rustc     librustc_mir-714845413a99e6ff.so              [.] <rustc_mir::interpret::memory::Memory<'a, 'mir, 'tcx, M>>::copy_repeatedly\r\n  22.94%  rustc     librustc_mir-714845413a99e6ff.so              [.] <core::iter::Map<I, F> as core::iter::iterator::Iterator>::fold\r\n   7.32%  rustc     librustc-0eb8c117db37850c.so                  [.] rustc::mir::interpret::UndefMask::grow\r\n   7.31%  rustc     librustc-0eb8c117db37850c.so                  [.] rustc::mir::interpret::UndefMask::set_range\r\n   6.94%  rustc     libc-2.27.so                                  [.] __memmove_sse2_unaligned_erms\r\n   5.91%  rustc     librustc_mir-714845413a99e6ff.so              [.] <rustc_mir::interpret::memory::Memory<'a, 'mir, 'tcx, M>>::check_bytes\r\n```\r\n\r\nSo it looks like miri is actually creating the array and folding over it. I know it's not going to find any problems, because I have ECC memory :laughing:.\r\n\r\nThere are already some bugs relating to slow compilation of large arrays, with the most relevant I could find being #37155, #49330. I think this is separate from those cases because:\r\n\r\n* the input in this case is a [0; _] array, whereas the others initialize arrays from sequences of elements\r\n* those cases seem to refer to superlinear runtime; this issue appears roughly linear in time and space and only becomes noticeable for much larger arrays\r\n* the bottleneck in this case occurs during lint checking, which I didn't see in any other array performance bugs", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55795/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55795/timeline", "performed_via_github_app": null, "state_reason": null}