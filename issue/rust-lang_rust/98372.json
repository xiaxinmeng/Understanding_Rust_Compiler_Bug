{"url": "https://api.github.com/repos/rust-lang/rust/issues/98372", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98372/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98372/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98372/events", "html_url": "https://github.com/rust-lang/rust/issues/98372", "id": 1279517812, "node_id": "I_kwDOAAsO6M5MQ-R0", "number": 98372, "title": "ICE: expected Box to contain Unique", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1568304854, "node_id": "MDU6TGFiZWwxNTY4MzA0ODU0", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-rustc_attrs", "name": "F-rustc_attrs", "color": "f9c0cc", "default": false, "description": "Internal rustc attributes gated on the `#[rustc_attrs]` feature gate."}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}, {"id": 5352452905, "node_id": "LA_kwDOAAsO6M8AAAABPwfzKQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-internal-features", "name": "requires-internal-features", "color": "76dcde", "default": false, "description": "This issue requires the use of internal features"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2022-06-22T04:50:34Z", "updated_at": "2023-04-05T05:40:43Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n`./compiler/rustc_codegen_gcc/example/mini_core.rs`\r\nDon't have time to reduce right now, sorry\r\n\r\nreduced: https://github.com/rust-lang/rust/issues/98372#issuecomment-1163294844\r\n\r\n\r\n```Rust\r\n#![feature(\r\n    no_core, lang_items, intrinsics, unboxed_closures, type_ascription, extern_types,\r\n    untagged_unions, decl_macro, rustc_attrs, transparent_unions, auto_traits,\r\n    thread_local\r\n)]\r\n#![no_core]\r\n#![allow(dead_code)]\r\n\r\n#[no_mangle]\r\nunsafe extern \"C\" fn _Unwind_Resume() {\r\n    intrinsics::unreachable();\r\n}\r\n\r\n#[lang = \"sized\"]\r\npub trait Sized {}\r\n\r\n#[lang = \"destruct\"]\r\npub trait Destruct {}\r\n\r\n#[lang = \"unsize\"]\r\npub trait Unsize<T: ?Sized> {}\r\n\r\n#[lang = \"coerce_unsized\"]\r\npub trait CoerceUnsized<T> {}\r\n\r\nimpl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\r\nimpl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a mut U> for &'a mut T {}\r\nimpl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\r\nimpl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\r\n\r\n#[lang = \"dispatch_from_dyn\"]\r\npub trait DispatchFromDyn<T> {}\r\n\r\n// &T -> &U\r\nimpl<'a, T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<&'a U> for &'a T {}\r\n// &mut T -> &mut U\r\nimpl<'a, T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<&'a mut U> for &'a mut T {}\r\n// *const T -> *const U\r\nimpl<T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<*const U> for *const T {}\r\n// *mut T -> *mut U\r\nimpl<T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<*mut U> for *mut T {}\r\nimpl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Box<U>> for Box<T> {}\r\n\r\n#[lang = \"receiver\"]\r\npub trait Receiver {}\r\n\r\nimpl<T: ?Sized> Receiver for &T {}\r\nimpl<T: ?Sized> Receiver for &mut T {}\r\nimpl<T: ?Sized> Receiver for Box<T> {}\r\n\r\n#[lang = \"copy\"]\r\npub unsafe trait Copy {}\r\n\r\nunsafe impl Copy for bool {}\r\nunsafe impl Copy for u8 {}\r\nunsafe impl Copy for u16 {}\r\nunsafe impl Copy for u32 {}\r\nunsafe impl Copy for u64 {}\r\nunsafe impl Copy for usize {}\r\nunsafe impl Copy for i8 {}\r\nunsafe impl Copy for i16 {}\r\nunsafe impl Copy for i32 {}\r\nunsafe impl Copy for isize {}\r\nunsafe impl Copy for f32 {}\r\nunsafe impl Copy for f64 {}\r\nunsafe impl Copy for char {}\r\nunsafe impl<'a, T: ?Sized> Copy for &'a T {}\r\nunsafe impl<T: ?Sized> Copy for *const T {}\r\nunsafe impl<T: ?Sized> Copy for *mut T {}\r\n\r\n#[lang = \"sync\"]\r\npub unsafe trait Sync {}\r\n\r\nunsafe impl Sync for bool {}\r\nunsafe impl Sync for u8 {}\r\nunsafe impl Sync for u16 {}\r\nunsafe impl Sync for u32 {}\r\nunsafe impl Sync for u64 {}\r\nunsafe impl Sync for usize {}\r\nunsafe impl Sync for i8 {}\r\nunsafe impl Sync for i16 {}\r\nunsafe impl Sync for i32 {}\r\nunsafe impl Sync for isize {}\r\nunsafe impl Sync for char {}\r\nunsafe impl<'a, T: ?Sized> Sync for &'a T {}\r\nunsafe impl Sync for [u8; 16] {}\r\n\r\n#[lang = \"freeze\"]\r\nunsafe auto trait Freeze {}\r\n\r\nunsafe impl<T: ?Sized> Freeze for PhantomData<T> {}\r\nunsafe impl<T: ?Sized> Freeze for *const T {}\r\nunsafe impl<T: ?Sized> Freeze for *mut T {}\r\nunsafe impl<T: ?Sized> Freeze for &T {}\r\nunsafe impl<T: ?Sized> Freeze for &mut T {}\r\n\r\n#[lang = \"structural_peq\"]\r\npub trait StructuralPartialEq {}\r\n\r\n#[lang = \"structural_teq\"]\r\npub trait StructuralEq {}\r\n\r\n#[lang = \"not\"]\r\npub trait Not {\r\n    type Output;\r\n\r\n    fn not(self) -> Self::Output;\r\n}\r\n\r\nimpl Not for bool {\r\n    type Output = bool;\r\n\r\n    fn not(self) -> bool {\r\n        !self\r\n    }\r\n}\r\n\r\n#[lang = \"mul\"]\r\npub trait Mul<RHS = Self> {\r\n    type Output;\r\n\r\n    #[must_use]\r\n    fn mul(self, rhs: RHS) -> Self::Output;\r\n}\r\n\r\nimpl Mul for u8 {\r\n    type Output = Self;\r\n\r\n    fn mul(self, rhs: Self) -> Self::Output {\r\n        self * rhs\r\n    }\r\n}\r\n\r\nimpl Mul for usize {\r\n    type Output = Self;\r\n\r\n    fn mul(self, rhs: Self) -> Self::Output {\r\n        self * rhs\r\n    }\r\n}\r\n\r\n#[lang = \"add\"]\r\npub trait Add<RHS = Self> {\r\n    type Output;\r\n\r\n    fn add(self, rhs: RHS) -> Self::Output;\r\n}\r\n\r\nimpl Add for u8 {\r\n    type Output = Self;\r\n\r\n    fn add(self, rhs: Self) -> Self {\r\n        self + rhs\r\n    }\r\n}\r\n\r\nimpl Add for i8 {\r\n    type Output = Self;\r\n\r\n    fn add(self, rhs: Self) -> Self {\r\n        self + rhs\r\n    }\r\n}\r\n\r\nimpl Add for usize {\r\n    type Output = Self;\r\n\r\n    fn add(self, rhs: Self) -> Self {\r\n        self + rhs\r\n    }\r\n}\r\n\r\n#[lang = \"sub\"]\r\npub trait Sub<RHS = Self> {\r\n    type Output;\r\n\r\n    fn sub(self, rhs: RHS) -> Self::Output;\r\n}\r\n\r\nimpl Sub for usize {\r\n    type Output = Self;\r\n\r\n    fn sub(self, rhs: Self) -> Self {\r\n        self - rhs\r\n    }\r\n}\r\n\r\nimpl Sub for u8 {\r\n    type Output = Self;\r\n\r\n    fn sub(self, rhs: Self) -> Self {\r\n        self - rhs\r\n    }\r\n}\r\n\r\nimpl Sub for i8 {\r\n    type Output = Self;\r\n\r\n    fn sub(self, rhs: Self) -> Self {\r\n        self - rhs\r\n    }\r\n}\r\n\r\nimpl Sub for i16 {\r\n    type Output = Self;\r\n\r\n    fn sub(self, rhs: Self) -> Self {\r\n        self - rhs\r\n    }\r\n}\r\n\r\n#[lang = \"rem\"]\r\npub trait Rem<RHS = Self> {\r\n    type Output;\r\n\r\n    fn rem(self, rhs: RHS) -> Self::Output;\r\n}\r\n\r\nimpl Rem for usize {\r\n    type Output = Self;\r\n\r\n    fn rem(self, rhs: Self) -> Self {\r\n        self % rhs\r\n    }\r\n}\r\n\r\n#[lang = \"bitor\"]\r\npub trait BitOr<RHS = Self> {\r\n    type Output;\r\n\r\n    #[must_use]\r\n    fn bitor(self, rhs: RHS) -> Self::Output;\r\n}\r\n\r\nimpl BitOr for bool {\r\n    type Output = bool;\r\n\r\n    fn bitor(self, rhs: bool) -> bool {\r\n        self | rhs\r\n    }\r\n}\r\n\r\nimpl<'a> BitOr<bool> for &'a bool {\r\n    type Output = bool;\r\n\r\n    fn bitor(self, rhs: bool) -> bool {\r\n        *self | rhs\r\n    }\r\n}\r\n\r\n#[lang = \"eq\"]\r\npub trait PartialEq<Rhs: ?Sized = Self> {\r\n    fn eq(&self, other: &Rhs) -> bool;\r\n    fn ne(&self, other: &Rhs) -> bool;\r\n}\r\n\r\nimpl PartialEq for u8 {\r\n    fn eq(&self, other: &u8) -> bool {\r\n        (*self) == (*other)\r\n    }\r\n    fn ne(&self, other: &u8) -> bool {\r\n        (*self) != (*other)\r\n    }\r\n}\r\n\r\nimpl PartialEq for u16 {\r\n    fn eq(&self, other: &u16) -> bool {\r\n        (*self) == (*other)\r\n    }\r\n    fn ne(&self, other: &u16) -> bool {\r\n        (*self) != (*other)\r\n    }\r\n}\r\n\r\nimpl PartialEq for u32 {\r\n    fn eq(&self, other: &u32) -> bool {\r\n        (*self) == (*other)\r\n    }\r\n    fn ne(&self, other: &u32) -> bool {\r\n        (*self) != (*other)\r\n    }\r\n}\r\n\r\n\r\nimpl PartialEq for u64 {\r\n    fn eq(&self, other: &u64) -> bool {\r\n        (*self) == (*other)\r\n    }\r\n    fn ne(&self, other: &u64) -> bool {\r\n        (*self) != (*other)\r\n    }\r\n}\r\n\r\nimpl PartialEq for usize {\r\n    fn eq(&self, other: &usize) -> bool {\r\n        (*self) == (*other)\r\n    }\r\n    fn ne(&self, other: &usize) -> bool {\r\n        (*self) != (*other)\r\n    }\r\n}\r\n\r\nimpl PartialEq for i8 {\r\n    fn eq(&self, other: &i8) -> bool {\r\n        (*self) == (*other)\r\n    }\r\n    fn ne(&self, other: &i8) -> bool {\r\n        (*self) != (*other)\r\n    }\r\n}\r\n\r\nimpl PartialEq for i32 {\r\n    fn eq(&self, other: &i32) -> bool {\r\n        (*self) == (*other)\r\n    }\r\n    fn ne(&self, other: &i32) -> bool {\r\n        (*self) != (*other)\r\n    }\r\n}\r\n\r\nimpl PartialEq for isize {\r\n    fn eq(&self, other: &isize) -> bool {\r\n        (*self) == (*other)\r\n    }\r\n    fn ne(&self, other: &isize) -> bool {\r\n        (*self) != (*other)\r\n    }\r\n}\r\n\r\nimpl PartialEq for char {\r\n    fn eq(&self, other: &char) -> bool {\r\n        (*self) == (*other)\r\n    }\r\n    fn ne(&self, other: &char) -> bool {\r\n        (*self) != (*other)\r\n    }\r\n}\r\n\r\nimpl<T: ?Sized> PartialEq for *const T {\r\n    fn eq(&self, other: &*const T) -> bool {\r\n        *self == *other\r\n    }\r\n    fn ne(&self, other: &*const T) -> bool {\r\n        *self != *other\r\n    }\r\n}\r\n\r\n#[lang = \"neg\"]\r\npub trait Neg {\r\n    type Output;\r\n\r\n    fn neg(self) -> Self::Output;\r\n}\r\n\r\nimpl Neg for i8 {\r\n    type Output = i8;\r\n\r\n    fn neg(self) -> i8 {\r\n        -self\r\n    }\r\n}\r\n\r\nimpl Neg for i16 {\r\n    type Output = i16;\r\n\r\n    fn neg(self) -> i16 {\r\n        self\r\n    }\r\n}\r\n\r\nimpl Neg for isize {\r\n    type Output = isize;\r\n\r\n    fn neg(self) -> isize {\r\n        -self\r\n    }\r\n}\r\n\r\nimpl Neg for f32 {\r\n    type Output = f32;\r\n\r\n    fn neg(self) -> f32 {\r\n        -self\r\n    }\r\n}\r\n\r\npub enum Option<T> {\r\n    Some(T),\r\n    None,\r\n}\r\n\r\npub use Option::*;\r\n\r\n#[lang = \"phantom_data\"]\r\npub struct PhantomData<T: ?Sized>;\r\n\r\n#[lang = \"fn_once\"]\r\n#[rustc_paren_sugar]\r\npub trait FnOnce<Args> {\r\n    #[lang = \"fn_once_output\"]\r\n    type Output;\r\n\r\n    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\r\n}\r\n\r\n#[lang = \"fn_mut\"]\r\n#[rustc_paren_sugar]\r\npub trait FnMut<Args>: FnOnce<Args> {\r\n    extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\r\n}\r\n\r\n#[lang = \"panic\"]\r\n#[track_caller]\r\npub fn panic(_msg: &str) -> ! {\r\n    unsafe {\r\n        libc::puts(\"Panicking\\n\\0\" as *const str as *const u8);\r\n        intrinsics::abort();\r\n    }\r\n}\r\n\r\n#[lang = \"panic_bounds_check\"]\r\n#[track_caller]\r\nfn panic_bounds_check(index: usize, len: usize) -> ! {\r\n    unsafe {\r\n        libc::printf(\"index out of bounds: the len is %d but the index is %d\\n\\0\" as *const str as *const i8, len, index);\r\n        intrinsics::abort();\r\n    }\r\n}\r\n\r\n#[lang = \"eh_personality\"]\r\nfn eh_personality() -> ! {\r\n    loop {}\r\n}\r\n\r\n#[lang = \"drop_in_place\"]\r\n#[allow(unconditional_recursion)]\r\npub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\r\n    // Code here does not matter - this is replaced by the\r\n    // real drop glue by the compiler.\r\n    drop_in_place(to_drop);\r\n}\r\n\r\n#[lang = \"deref\"]\r\npub trait Deref {\r\n    type Target: ?Sized;\r\n\r\n    fn deref(&self) -> &Self::Target;\r\n}\r\n\r\npub trait Allocator {\r\n}\r\n\r\npub struct Global;\r\n\r\nimpl Allocator for Global {}\r\n\r\n#[lang = \"owned_box\"]\r\npub struct Box<\r\n    T: ?Sized,\r\n    A: Allocator = Global,\r\n>(*mut T, A);\r\n\r\nimpl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\r\n\r\nimpl<T: ?Sized, A: Allocator> Drop for Box<T, A> {\r\n    fn drop(&mut self) {\r\n        // drop is currently performed by compiler.\r\n    }\r\n}\r\n\r\nimpl<T> Deref for Box<T> {\r\n    type Target = T;\r\n\r\n    fn deref(&self) -> &Self::Target {\r\n        &**self\r\n    }\r\n}\r\n\r\n#[lang = \"exchange_malloc\"]\r\nunsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\r\n    libc::malloc(size)\r\n}\r\n\r\n#[lang = \"box_free\"]\r\nunsafe fn box_free<T: ?Sized, A: Allocator>(ptr: *mut T, alloc: A) {\r\n    libc::free(ptr as *mut u8);\r\n}\r\n\r\n#[lang = \"drop\"]\r\npub trait Drop {\r\n    fn drop(&mut self);\r\n}\r\n\r\n#[lang = \"manually_drop\"]\r\n#[repr(transparent)]\r\npub struct ManuallyDrop<T: ?Sized> {\r\n    pub value: T,\r\n}\r\n\r\n#[lang = \"maybe_uninit\"]\r\n#[repr(transparent)]\r\npub union MaybeUninit<T> {\r\n    pub uninit: (),\r\n    pub value: ManuallyDrop<T>,\r\n}\r\n\r\npub mod intrinsics {\r\n    extern \"rust-intrinsic\" {\r\n        pub fn abort() -> !;\r\n        pub fn size_of<T>() -> usize;\r\n        pub fn size_of_val<T: ?::Sized>(val: *const T) -> usize;\r\n        pub fn min_align_of<T>() -> usize;\r\n        pub fn min_align_of_val<T: ?::Sized>(val: *const T) -> usize;\r\n        pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\r\n        pub fn transmute<T, U>(e: T) -> U;\r\n        pub fn ctlz_nonzero<T>(x: T) -> T;\r\n        pub fn needs_drop<T: ?::Sized>() -> bool;\r\n        pub fn bitreverse<T>(x: T) -> T;\r\n        pub fn bswap<T>(x: T) -> T;\r\n        pub fn write_bytes<T>(dst: *mut T, val: u8, count: usize);\r\n        pub fn unreachable() -> !;\r\n    }\r\n}\r\n\r\npub mod libc {\r\n    #[link(name = \"c\")]\r\n    extern \"C\" {\r\n        pub fn puts(s: *const u8) -> i32;\r\n        pub fn printf(format: *const i8, ...) -> i32;\r\n        pub fn malloc(size: usize) -> *mut u8;\r\n        pub fn free(ptr: *mut u8);\r\n        pub fn memcpy(dst: *mut u8, src: *const u8, size: usize);\r\n        pub fn memmove(dst: *mut u8, src: *const u8, size: usize);\r\n        pub fn strncpy(dst: *mut u8, src: *const u8, size: usize);\r\n    }\r\n}\r\n\r\n#[lang = \"index\"]\r\npub trait Index<Idx: ?Sized> {\r\n    type Output: ?Sized;\r\n    fn index(&self, index: Idx) -> &Self::Output;\r\n}\r\n\r\nimpl<T> Index<usize> for [T; 3] {\r\n    type Output = T;\r\n\r\n    fn index(&self, index: usize) -> &Self::Output {\r\n        &self[index]\r\n    }\r\n}\r\n\r\nimpl<T> Index<usize> for [T] {\r\n    type Output = T;\r\n\r\n    fn index(&self, index: usize) -> &Self::Output {\r\n        &self[index]\r\n    }\r\n}\r\n\r\nextern {\r\n    type VaListImpl;\r\n}\r\n\r\n#[lang = \"va_list\"]\r\n#[repr(transparent)]\r\npub struct VaList<'a>(&'a mut VaListImpl);\r\n\r\n#[rustc_builtin_macro]\r\n#[rustc_macro_transparency = \"semitransparent\"]\r\npub macro stringify($($t:tt)*) { /* compiler built-in */ }\r\n\r\n#[rustc_builtin_macro]\r\n#[rustc_macro_transparency = \"semitransparent\"]\r\npub macro file() { /* compiler built-in */ }\r\n\r\n#[rustc_builtin_macro]\r\n#[rustc_macro_transparency = \"semitransparent\"]\r\npub macro line() { /* compiler built-in */ }\r\n\r\n#[rustc_builtin_macro]\r\n#[rustc_macro_transparency = \"semitransparent\"]\r\npub macro cfg() { /* compiler built-in */ }\r\n\r\npub static A_STATIC: u8 = 42;\r\n\r\n#[lang = \"panic_location\"]\r\nstruct PanicLocation {\r\n    file: &'static str,\r\n    line: u32,\r\n    column: u32,\r\n}\r\n\r\n#[no_mangle]\r\npub fn get_tls() -> u8 {\r\n    #[thread_local]\r\n    static A: u8 = 42;\r\n\r\n    A\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.63.0-nightly (dc80ca78b 2022-06-21)\r\nbinary: rustc\r\ncommit-hash: dc80ca78b6ec2b6bba02560470347433bcd0bb3c\r\ncommit-date: 2022-06-21\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.63.0-nightly\r\nLLVM version: 14.0.5\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nwarning: unused variable: `alloc`\r\n   --> ./compiler/rustc_codegen_gcc/example/mini_core.rs:485:58\r\n    |\r\n485 | unsafe fn box_free<T: ?Sized, A: Allocator>(ptr: *mut T, alloc: A) {\r\n    |                                                          ^^^^^ help: if this is intentional, prefix it with an underscore: `_alloc`\r\n    |\r\n    = note: `#[warn(unused_variables)]` on by default\r\n\r\nerror: internal compiler error: compiler/rustc_mir_transform/src/elaborate_box_derefs.rs:106:17: expected Box to contain Unique\r\n   --> ./compiler/rustc_codegen_gcc/example/mini_core.rs:461:3\r\n    |\r\n461 | >(*mut T, A);\r\n    |   ^^^^^^\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/compiler/rustc_errors/src/lib.rs:1331:9\r\nstack backtrace:\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nerror: internal compiler error: compiler/rustc_mir_transform/src/elaborate_box_derefs.rs:106:17: expected Box to contain Unique\r\n   --> ./compiler/rustc_codegen_gcc/example/mini_core.rs:461:3\r\n    |\r\n461 | >(*mut T, A);\r\n    |   ^^^^^^\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/compiler/rustc_errors/src/lib.rs:1331:9\r\nstack backtrace:\r\n   0:     0x7fa37629e02d - std::backtrace_rs::backtrace::libunwind::trace::h66824bd979b46652\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\r\n   1:     0x7fa37629e02d - std::backtrace_rs::backtrace::trace_unsynchronized::h0caf895dc6521160\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\r\n   2:     0x7fa37629e02d - std::sys_common::backtrace::_print_fmt::h8ee19c74892f96ef\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/std/src/sys_common/backtrace.rs:66:5\r\n   3:     0x7fa37629e02d - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h4f38873b172b3ee3\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/std/src/sys_common/backtrace.rs:45:22\r\n   4:     0x7fa3762f9dec - core::fmt::write::h95bc5c1a2dab38ae\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/core/src/fmt/mod.rs:1197:17\r\n   5:     0x7fa37628f741 - std::io::Write::write_fmt::hcbe645da27d05687\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/std/src/io/mod.rs:1672:15\r\n   6:     0x7fa3762a0cf5 - std::sys_common::backtrace::_print::h491b32351e64ba40\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/std/src/sys_common/backtrace.rs:48:5\r\n   7:     0x7fa3762a0cf5 - std::sys_common::backtrace::print::h95813b9263ac2531\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/std/src/sys_common/backtrace.rs:35:9\r\n   8:     0x7fa3762a0cf5 - std::panicking::default_hook::{{closure}}::h97b51a053e0a66a6\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/std/src/panicking.rs:295:22\r\n   9:     0x7fa3762a0a16 - std::panicking::default_hook::h4e7a054eecf2a40c\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/std/src/panicking.rs:314:9\r\n  10:     0x7fa376afd3c4 - rustc_driver[90499e6357860faf]::DEFAULT_HOOK::{closure#0}::{closure#0}\r\n  11:     0x7fa3762a13ca - std::panicking::rust_panic_with_hook::hc34128de9b2f1619\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/std/src/panicking.rs:702:17\r\n  12:     0x7fa376c99f81 - std[b701561e8274a90e]::panicking::begin_panic::<rustc_errors[66b38508c80fa53]::ExplicitBug>::{closure#0}\r\n  13:     0x7fa376c98756 - std[b701561e8274a90e]::sys_common::backtrace::__rust_end_short_backtrace::<std[b701561e8274a90e]::panicking::begin_panic<rustc_errors[66b38508c80fa53]::ExplicitBug>::{closure#0}, !>\r\n  14:     0x7fa376cc4c96 - std[b701561e8274a90e]::panicking::begin_panic::<rustc_errors[66b38508c80fa53]::ExplicitBug>\r\n  15:     0x7fa376ca4906 - std[b701561e8274a90e]::panic::panic_any::<rustc_errors[66b38508c80fa53]::ExplicitBug>\r\n  16:     0x7fa376ca2791 - <rustc_errors[66b38508c80fa53]::HandlerInner>::span_bug::<rustc_span[a21f0b15de3a4c22]::span_encoding::Span, &alloc[2bc16101ff7e918e]::string::String>\r\n  17:     0x7fa376ca2560 - <rustc_errors[66b38508c80fa53]::Handler>::span_bug::<rustc_span[a21f0b15de3a4c22]::span_encoding::Span, &alloc[2bc16101ff7e918e]::string::String>\r\n  18:     0x7fa376c65498 - rustc_middle[72ed1f8610012006]::ty::context::tls::with_opt::<rustc_middle[72ed1f8610012006]::util::bug::opt_span_bug_fmt<rustc_span[a21f0b15de3a4c22]::span_encoding::Span>::{closure#0}, ()>\r\n  19:     0x7fa376c65336 - rustc_middle[72ed1f8610012006]::util::bug::opt_span_bug_fmt::<rustc_span[a21f0b15de3a4c22]::span_encoding::Span>\r\n  20:     0x7fa376c652f4 - rustc_middle[72ed1f8610012006]::util::bug::span_bug_fmt::<rustc_span[a21f0b15de3a4c22]::span_encoding::Span>\r\n  21:     0x7fa377fb351c - <rustc_mir_transform[9ad3929c9a854eea]::elaborate_box_derefs::ElaborateBoxDerefs as rustc_middle[72ed1f8610012006]::mir::MirPass>::run_pass\r\n  22:     0x7fa377f40150 - rustc_mir_transform[9ad3929c9a854eea]::pass_manager::run_passes\r\n  23:     0x7fa377f31ee9 - rustc_mir_transform[9ad3929c9a854eea]::mir_drops_elaborated_and_const_checked\r\n  24:     0x7fa3786af83b - rustc_query_system[a3029e6dae607812]::query::plumbing::try_execute_query::<rustc_query_impl[7ac02512ff88ed66]::plumbing::QueryCtxt, rustc_query_system[a3029e6dae607812]::query::caches::DefaultCache<rustc_middle[72ed1f8610012006]::ty::WithOptConstParam<rustc_span[a21f0b15de3a4c22]::def_id::LocalDefId>, &rustc_data_structures[c41427e6dab4dba2]::steal::Steal<rustc_middle[72ed1f8610012006]::mir::Body>>>\r\n  25:     0x7fa37869690a - <rustc_query_impl[7ac02512ff88ed66]::Queries as rustc_middle[72ed1f8610012006]::ty::query::QueryEngine>::mir_drops_elaborated_and_const_checked\r\n  26:     0x7fa377e222fc - <rustc_session[4ced65ff44b6b5e6]::session::Session>::time::<(), rustc_interface[fff95432a826ec6b]::passes::analysis::{closure#3}>\r\n  27:     0x7fa378cfb23c - rustc_interface[fff95432a826ec6b]::passes::analysis\r\n  28:     0x7fa37925bc0f - rustc_query_system[a3029e6dae607812]::query::plumbing::try_execute_query::<rustc_query_impl[7ac02512ff88ed66]::plumbing::QueryCtxt, rustc_query_system[a3029e6dae607812]::query::caches::DefaultCache<(), core[61a96b067728b167]::result::Result<(), rustc_errors[66b38508c80fa53]::ErrorGuaranteed>>>\r\n  29:     0x7fa3792a56ee - rustc_query_system[a3029e6dae607812]::query::plumbing::get_query::<rustc_query_impl[7ac02512ff88ed66]::queries::analysis, rustc_query_impl[7ac02512ff88ed66]::plumbing::QueryCtxt>\r\n  30:     0x7fa378cde5a7 - <rustc_interface[fff95432a826ec6b]::passes::QueryContext>::enter::<rustc_driver[90499e6357860faf]::run_compiler::{closure#1}::{closure#2}::{closure#3}, core[61a96b067728b167]::result::Result<(), rustc_errors[66b38508c80fa53]::ErrorGuaranteed>>\r\n  31:     0x7fa378cc884f - <rustc_interface[fff95432a826ec6b]::interface::Compiler>::enter::<rustc_driver[90499e6357860faf]::run_compiler::{closure#1}::{closure#2}, core[61a96b067728b167]::result::Result<core[61a96b067728b167]::option::Option<rustc_interface[fff95432a826ec6b]::queries::Linker>, rustc_errors[66b38508c80fa53]::ErrorGuaranteed>>\r\n  32:     0x7fa378cecd2f - rustc_span[a21f0b15de3a4c22]::with_source_map::<core[61a96b067728b167]::result::Result<(), rustc_errors[66b38508c80fa53]::ErrorGuaranteed>, rustc_interface[fff95432a826ec6b]::interface::create_compiler_and_run<core[61a96b067728b167]::result::Result<(), rustc_errors[66b38508c80fa53]::ErrorGuaranteed>, rustc_driver[90499e6357860faf]::run_compiler::{closure#1}>::{closure#1}>\r\n  33:     0x7fa378cc96e2 - <scoped_tls[fd6fb1272a57f899]::ScopedKey<rustc_span[a21f0b15de3a4c22]::SessionGlobals>>::set::<rustc_interface[fff95432a826ec6b]::interface::run_compiler<core[61a96b067728b167]::result::Result<(), rustc_errors[66b38508c80fa53]::ErrorGuaranteed>, rustc_driver[90499e6357860faf]::run_compiler::{closure#1}>::{closure#0}, core[61a96b067728b167]::result::Result<(), rustc_errors[66b38508c80fa53]::ErrorGuaranteed>>\r\n  34:     0x7fa378cdecdf - std[b701561e8274a90e]::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface[fff95432a826ec6b]::util::run_in_thread_pool_with_globals<rustc_interface[fff95432a826ec6b]::interface::run_compiler<core[61a96b067728b167]::result::Result<(), rustc_errors[66b38508c80fa53]::ErrorGuaranteed>, rustc_driver[90499e6357860faf]::run_compiler::{closure#1}>::{closure#0}, core[61a96b067728b167]::result::Result<(), rustc_errors[66b38508c80fa53]::ErrorGuaranteed>>::{closure#0}, core[61a96b067728b167]::result::Result<(), rustc_errors[66b38508c80fa53]::ErrorGuaranteed>>\r\n  35:     0x7fa378cdee19 - <<std[b701561e8274a90e]::thread::Builder>::spawn_unchecked_<rustc_interface[fff95432a826ec6b]::util::run_in_thread_pool_with_globals<rustc_interface[fff95432a826ec6b]::interface::run_compiler<core[61a96b067728b167]::result::Result<(), rustc_errors[66b38508c80fa53]::ErrorGuaranteed>, rustc_driver[90499e6357860faf]::run_compiler::{closure#1}>::{closure#0}, core[61a96b067728b167]::result::Result<(), rustc_errors[66b38508c80fa53]::ErrorGuaranteed>>::{closure#0}, core[61a96b067728b167]::result::Result<(), rustc_errors[66b38508c80fa53]::ErrorGuaranteed>>::{closure#1} as core[61a96b067728b167]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\r\n  36:     0x7fa3762ab303 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::hed39a37500816679\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/alloc/src/boxed.rs:1951:9\r\n  37:     0x7fa3762ab303 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::hf70a23328098c6ee\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/alloc/src/boxed.rs:1951:9\r\n  38:     0x7fa3762ab303 - std::sys::unix::thread::Thread::new::thread_start::h4e2fce376f42517a\r\n                               at /rustc/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/library/std/src/sys/unix/thread.rs:108:17\r\n  39:     0x7fa37607f54d - <unknown>\r\n  40:     0x7fa376104b14 - clone\r\n  41:                0x0 - <unknown>\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.63.0-nightly (dc80ca78b 2022-06-21) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: --crate-type lib\r\n\r\nquery stack during panic:\r\n#0 [mir_drops_elaborated_and_const_checked] elaborating drops for `<impl at ./compiler/rustc_codegen_gcc/example/mini_core.rs:86:1: 86:33>::{constant#0}`\r\n#1 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror: aborting due to previous error; 1 warning emitted\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98372/timeline", "performed_via_github_app": null, "state_reason": null}