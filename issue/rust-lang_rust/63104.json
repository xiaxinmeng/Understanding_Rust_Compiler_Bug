{"url": "https://api.github.com/repos/rust-lang/rust/issues/63104", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63104/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63104/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63104/events", "html_url": "https://github.com/rust-lang/rust/issues/63104", "id": 474000360, "node_id": "MDU6SXNzdWU0NzQwMDAzNjA=", "number": 63104, "title": "Should PartialOrd provide impl for Ord to avoid boilerplate?", "user": {"login": "oblitum", "id": 1269815, "node_id": "MDQ6VXNlcjEyNjk4MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1269815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oblitum", "html_url": "https://github.com/oblitum", "followers_url": "https://api.github.com/users/oblitum/followers", "following_url": "https://api.github.com/users/oblitum/following{/other_user}", "gists_url": "https://api.github.com/users/oblitum/gists{/gist_id}", "starred_url": "https://api.github.com/users/oblitum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oblitum/subscriptions", "organizations_url": "https://api.github.com/users/oblitum/orgs", "repos_url": "https://api.github.com/users/oblitum/repos", "events_url": "https://api.github.com/users/oblitum/events{/privacy}", "received_events_url": "https://api.github.com/users/oblitum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-29T11:33:59Z", "updated_at": "2019-07-30T22:59:11Z", "closed_at": "2019-07-30T22:59:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently `std` gives the following example in \"[How can I implement `Ord`?](https://doc.rust-lang.org/std/cmp/trait.Ord.html#how-can-i-implement-ord)\":\r\n\r\n```rust\r\nuse std::cmp::Ordering;\r\n\r\n#[derive(Eq)]\r\nstruct Person {\r\n    id: u32,\r\n    name: String,\r\n    height: u32,\r\n}\r\n\r\nimpl Ord for Person {\r\n    fn cmp(&self, other: &Self) -> Ordering {\r\n        self.height.cmp(&other.height)\r\n    }\r\n}\r\n\r\nimpl PartialOrd for Person {\r\n    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\r\n        Some(self.cmp(other))\r\n    }\r\n}\r\n\r\nimpl PartialEq for Person {\r\n    fn eq(&self, other: &Self) -> bool {\r\n        self.height == other.height\r\n    }\r\n}\r\n```\r\n\r\nI was wondering why this boilerplate couldn't be reduced, because it seems clear that in almost all cases of `Ord` implementation, `PartialOrd` implementation can be done in terms of the former.\r\n\r\nI suspect this is in its current state because it exists prior to [specialization](https://github.com/rust-lang/rfcs/pull/1210)? If you have the following:\r\n\r\n```rust\r\nimpl<T: Ord> PartialOrd for T {\r\n    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\r\n        Some(self.cmp(other))\r\n    }\r\n}\r\n```\r\n\r\nAm I right that the `std` example could be updated to:\r\n\r\n```rust\r\nuse std::cmp::Ordering;\r\n\r\n#[derive(Eq)]\r\nstruct Person {\r\n    id: u32,\r\n    name: String,\r\n    height: u32,\r\n}\r\n\r\nimpl Ord for Person {\r\n    fn cmp(&self, other: &Self) -> Ordering {\r\n        self.height.cmp(&other.height)\r\n    }\r\n}\r\n\r\nimpl PartialEq for Person {\r\n    fn eq(&self, other: &Self) -> bool {\r\n        self.height == other.height\r\n    }\r\n}\r\n```\r\n?", "closed_by": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63104/timeline", "performed_via_github_app": null, "state_reason": "completed"}