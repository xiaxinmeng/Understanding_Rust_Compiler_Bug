{"url": "https://api.github.com/repos/rust-lang/rust/issues/110317", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110317/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110317/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110317/events", "html_url": "https://github.com/rust-lang/rust/issues/110317", "id": 1667907644, "node_id": "I_kwDOAAsO6M5jakA8", "number": 110317, "title": "std::process:Command::spawn panics when pre_exec hook fails if SIGCHLD is ignored", "user": {"login": "kennylevinsen", "id": 176245, "node_id": "MDQ6VXNlcjE3NjI0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennylevinsen", "html_url": "https://github.com/kennylevinsen", "followers_url": "https://api.github.com/users/kennylevinsen/followers", "following_url": "https://api.github.com/users/kennylevinsen/following{/other_user}", "gists_url": "https://api.github.com/users/kennylevinsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennylevinsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennylevinsen/subscriptions", "organizations_url": "https://api.github.com/users/kennylevinsen/orgs", "repos_url": "https://api.github.com/users/kennylevinsen/repos", "events_url": "https://api.github.com/users/kennylevinsen/events{/privacy}", "received_events_url": "https://api.github.com/users/kennylevinsen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}, {"id": 2635899341, "node_id": "MDU6TGFiZWwyNjM1ODk5MzQx", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-unix", "name": "O-unix", "color": "6e6ec0", "default": false, "description": "Operating system: Unix-like"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-04-14T09:39:32Z", "updated_at": "2023-04-14T14:56:28Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "On Linux when a `CommandExt::pre_exec` hook is in use, `std::process::Command::spawn` forks, calls `do_exec` and then runs each of the hooks in order. If `do_exec` fails (if a pre_exec hook or exec itself fails for example), the `Err` bubbles up and the child process writes the errno to the pipe of the parent before exiting.\r\n\r\nAfter the parent reads the error, it calls `Command::wait` which internally calls `waitpid(2)`. When a `SIGCHLD` handler is installed - in this case, `SIG_IGN` - there is no child to wait for, so `waitpid(2)` returns `ECHILD`. This leads to `spawn` panicking:\r\n\r\n```\r\nthread 'main' panicked at 'wait() should either return Ok or panic', library/std/src/sys/unix/process/process_unix.rs:129:21\r\n```\r\n\r\nI expected to be able to return an error from `pre_exec` hooks without causing a panic, even if `SIGCHLD` is handled.\r\n\r\nThe `pre_exec` hook is a prerequisite in order to disable the `posix_spawn` path. Note that there are other ways to disable `posix_spawn`, which would reproduce the issue as well.\r\n\r\n### Reproduction\r\n\r\nThe issue can be reproduced as follows:\r\n\r\n```rust\r\n// Built with libc 0.2.141\r\nfn main() {\r\n    use std::os::unix::process::CommandExt;\r\n    let mut cmd = std::process::Command::new(\"hopefully invalid path\");\r\n\r\n    unsafe {\r\n        libc::signal(libc::SIGCHLD, libc::SIG_IGN);\r\n        cmd.pre_exec(|| Ok(()));\r\n    }\r\n\r\n    cmd.spawn().unwrap();\r\n}\r\n```\r\n\r\nWhich results in\r\n```\r\nthread 'main' panicked at 'wait() should either return Ok or panic', library/std/src/sys/unix/process/process_unix.rs:129:21\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/5e1d3299a290026b85787bc9c7e72bcc53ac283f/library/std/src/panicking.rs:577:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/5e1d3299a290026b85787bc9c7e72bcc53ac283f/library/core/src/panicking.rs:67:14\r\n   2: std::sys::unix::process::process_inner::<impl std::sys::unix::process::process_common::Command>::spawn\r\n   3: std::process::Command::spawn\r\n             at /rustc/5e1d3299a290026b85787bc9c7e72bcc53ac283f/library/std/src/process.rs:893:9\r\n   4: rust_test::main\r\n             at ./src/main.rs:10:5\r\n   5: core::ops::function::FnOnce::call_once\r\n             at /rustc/5e1d3299a290026b85787bc9c7e72bcc53ac283f/library/core/src/ops/function.rs:250:5\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\nThe waitpid behavior can also be observed in plain C with:\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n#include <signal.h>\r\n#include <errno.h>\r\n#include <string.h>\r\n#include <sys/wait.h>\r\n\r\nint main() {\r\n\tsignal(SIGCHLD, SIG_IGN);\r\n\tpid_t pid = fork();\r\n\tif (pid == -1) {\r\n\t\tfprintf(stderr, \"fork failed: %d, %s\\n\", errno, strerror(errno));\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tif (pid == 0) {\r\n\t\tfprintf(stderr, \"child!\\n\");\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tint status = 0;\r\n\tint res = waitpid(pid, &status, 0);\r\n\tfprintf(stderr, \"res: %d, status: %d, errno: %d, %s\\n\", res, status, errno, strerror(errno));\r\n\treturn 0;\r\n}\r\n```\r\n\r\nWhich outputs:\r\n```\r\nchild!\r\nres: -1, errno: 10, No child processes\u23ce\r\n```\r\n\r\nIf the signal handler is commented out, `waitpid` works as the `Command::spawn` expects.\r\n\r\n### Meta\r\n\r\n- `rustc --version --verbose`:\r\n```\r\nrustc 1.70.0-nightly (5e1d3299a 2023-03-31)\r\nbinary: rustc\r\ncommit-hash: 5e1d3299a290026b85787bc9c7e72bcc53ac283f\r\ncommit-date: 2023-03-31\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.70.0-nightly\r\nLLVM version: 16.0.0\r\n```\r\n- Kernel: Linux 6.2.10-arch1-1\r\n- glibc: 2.37-2", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110317/timeline", "performed_via_github_app": null, "state_reason": null}