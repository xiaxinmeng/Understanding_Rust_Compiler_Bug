{"url": "https://api.github.com/repos/rust-lang/rust/issues/95412", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95412/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95412/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95412/events", "html_url": "https://github.com/rust-lang/rust/issues/95412", "id": 1183832615, "node_id": "I_kwDOAAsO6M5Gj9on", "number": 95412, "title": "Confusing extension of lifetime of reference causes lack of Send in Future", "user": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-03-28T18:34:07Z", "updated_at": "2023-05-22T23:58:32Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse std::sync::mpsc;\r\nuse std::future::Future;\r\nuse std::pin::Pin;\r\n\r\nasync fn awaitpoint(_: ()) { }\r\n\r\nasync fn failure() {\r\n    let (_, rx) = mpsc::channel::<()>();\r\n\r\n    while let Ok(event) = rx.recv() {\r\n        awaitpoint(event).await;\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let _: Pin<Box<dyn Future<Output=()> + Send>> = Box::pin(\r\n        async {\r\n            failure().await;\r\n        }\r\n    );\r\n}\r\n```\r\n\r\nIdeally, it would compile.  (Obviously it doesn't make much sense, semantically.)\r\n\r\nInstead, it produces this error:\r\n\r\n```\r\nerror: future cannot be sent between threads safely\r\n  --> src/main.rs:16:53\r\n   |\r\n16 |       let _: Pin<Box<dyn Future<Output=()> + Send>> = Box::pin(\r\n   |  _____________________________________________________^\r\n17 | |         async {\r\n18 | |             failure().await;\r\n19 | |         }\r\n20 | |     );\r\n   | |_____^ future created by async block is not `Send`\r\n   |\r\n   = help: the trait `Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\r\nnote: future is not `Send` as this value is used across an await\r\n  --> src/main.rs:11:26\r\n   |\r\n10 |     while let Ok(event) = rx.recv() {\r\n   |                           -- has type `&std::sync::mpsc::Receiver<()>` which is not `Send`\r\n11 |         awaitpoint(event).await;\r\n   |                          ^^^^^^ await occurs here, with `rx` maybe used later\r\n12 |     }\r\n   |     - `rx` is later dropped here\r\nhelp: consider moving this into a `let` binding to create a shorter lived borrow\r\n  --> src/main.rs:10:27\r\n   |\r\n10 |     while let Ok(event) = rx.recv() {\r\n   |                           ^^^^^^^^^\r\n   = note: required for the cast to the object type `dyn Future<Output = ()> + Send`\r\n```\r\n\r\nThe error message leads me to conclude that the reference `&rx` which is being created by autoref is being \"held\" across the await point.  The following workaround fixes it:\r\n\r\n```\r\n    while let Ok(event) = { let k= &rx; let y = k.recv(); y } {\r\n```\r\n\r\n(albeit with a clippy FP, https://github.com/rust-lang/rust-clippy/issues/8598)\r\n\r\nI tried to produce a repro not involving futures etc., using `&mut` references, but I wasn't able to do so.\r\n\r\nISTM that this is sufficiently strange, and the workaround sufficiently unpleasant, that it was worth a report.  I'm not sure if I should be tagging this as a diagnostic issue, or what.\r\n\r\nThanks for your attention.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.61.0-nightly (1bfe40d11 2022-03-18)\r\nbinary: rustc\r\ncommit-hash: 1bfe40d11c3630254504fb73eeccfca28d50df52\r\ncommit-date: 2022-03-18\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.61.0-nightly\r\nLLVM version: 14.0.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95412/timeline", "performed_via_github_app": null, "state_reason": null}