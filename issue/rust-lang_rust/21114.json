{"url": "https://api.github.com/repos/rust-lang/rust/issues/21114", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/21114/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/21114/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/21114/events", "html_url": "https://github.com/rust-lang/rust/issues/21114", "id": 54255470, "node_id": "MDU6SXNzdWU1NDI1NTQ3MA==", "number": 21114, "title": "new scoping rules for safe dtors can yield spurious semi-colon or trailing unit expr", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 37977651, "node_id": "MDU6TGFiZWwzNzk3NzY1MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/metabug", "name": "metabug", "color": "5319e7", "default": false, "description": "Issues about issues themselves (\"bugs about bugs\")"}, {"id": 43009118, "node_id": "MDU6TGFiZWw0MzAwOTExOA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-destructors", "name": "A-destructors", "color": "f7e101", "default": false, "description": "Area: destructors (Drop, ..)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 867483626, "node_id": "MDU6TGFiZWw4Njc0ODM2MjY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-fixed-by-NLL", "name": "NLL-fixed-by-NLL", "color": "f799ea", "default": false, "description": "Bugs fixed, but only when NLL is enabled."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 43, "created_at": "2015-01-13T22:08:56Z", "updated_at": "2019-09-20T09:59:49Z", "closed_at": "2019-04-29T11:07:30Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Spawned off of #21022, #21972\r\n\r\nThere are a number of situations where a trailing expression like a for-loop ends up being treated by the region lifetime inferencer as requiring a much longer lifetime assignment than what you would intuitively expect.\r\n\r\nA lot of the relevant cases have been addressed. In fact, its gotten to the point that I want to have a summary comment up here that specifies the status for each example. Each demo should link to  a playpen (using AST-borrowck when that has a checkmark, and NLL when AST-borrowck does not have a checkmark). Some rows also include a link to the comment where it was pointed out.\r\n\r\n * A checkmark (\u2705) is used for cases where either 1. code is now accepted, or 2. code is (still) rejected but has a clear diagnostic explaining why.\r\n * The column marked 2018 is testing here the 2018 edition, where migration mode gets *most* of the benefits from NLL. They will also eventually trickle down to the 2015 edition when we switch that to use NLL as well.\r\n * The magnifying glass (\ud83d\udd0d) is for cases where we issue a diagnostic suggesting that one add a local binding or a semi-colon (depending on whether the value is needed or not), explaining that the temporaries (under the current language semantics) are being dropped too late without it. This sort of case is, to my eye, acceptable.\r\n * The column marked NLL is for cases where you need to opt into `#![feature(nll)]` (or use the synonymous command line options `-Z borrowck=mir -Z two-phase-borrows`) to get the nicest output. In most cases the 2018 output is the same, so I didn't fill in the column in those cases.\r\n\r\n| Example on playpen | 2015  | 2018 | NLL | source |\r\n|-------------------- | ------ | ----- | --- | - |\r\n| [io::stdin demo 1][]  |  \u2705   | \u2705  |  | | \r\n| [io::stdin demo 2][]  | \ud83e\udd22   | \u2705  |  | | \r\n| [alloc::rc demo][]  | \u2705  | \u2705  |  | | \r\n| [ebfull drain demo][] | \ud83e\udd22   | \u2705 |  | https://github.com/rust-lang/rust/issues/21114#issuecomment-74242619\r\n| [felispere stdio demo][] | \ud83e\udd22   | \u2705  |  | https://github.com/rust-lang/rust/issues/21114#issuecomment-74300312\r\n| [drbawb demo][] | \u2705  | \u2705  |  | https://github.com/rust-lang/rust/issues/21114#issuecomment-74438455\r\n| [niconii demo][] | \ud83e\udd22 | \ud83d\udd0d |  | https://github.com/rust-lang/rust/issues/21114#issuecomment-228331214\r\n | [kixunil demo][] | \ud83e\udd22   | \u2705  |   | https://github.com/rust-lang/rust/issues/21114#issuecomment-312447832\r\n| [thiez demo 1][] | \ud83e\udd22   | \u2705  |   |https://github.com/rust-lang/rust/issues/21114#issuecomment-321158567\r\n| [thiez demo 2][] | \ud83e\udd22 | \ud83d\udd0d |  |https://github.com/rust-lang/rust/issues/21114#issuecomment-321158567\r\n| [shepmaster demo][] | \ud83e\udd22   | \u2705  |   | https://github.com/rust-lang/rust/issues/21114#issuecomment-357400013\r\n| [jonas-schievink demo][] | \ud83e\udd22| \ud83e\udd22 |  \u2705  | #42574\r\n| [stephaneyfx demo 1][] |  \ud83e\udd22   | \ud83d\udd0d |  | https://github.com/rust-lang/rust/issues/46413#issuecomment-352113056\r\n| [stephaneyfx demo 2][] |  \ud83e\udd22   | \ud83d\udd0d |  | https://github.com/rust-lang/rust/issues/46413#issuecomment-378353931\r\n\r\n[io::stdin demo 1]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=ed2d96f950b9ee7cb27efe2d6f861386\r\n[io::stdin demo 2]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=7aaf4635c187dd9db58776859fbabd2a\r\n[alloc::rc demo]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=e2ec7e2845822b53a7dfc037758724ba\r\n[ebfull drain demo]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=43b2bfa79979015adadbaed80d438cbb\r\n[felispere stdio demo]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=96ecfaf797bfb8dab23f6a0fa566f584\r\n[drbawb demo]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=57cc22508735c359603e8849ff54efd2\r\n[niconii demo]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=722bfa4840f78d15b38e625e16f11eba\r\n[kixunil demo]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=4dd142514a64f72aaec3f63cdf6886e2\r\n[thiez demo 1]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=d37416a2c2e4458b13ecea1af52cc616\r\n[thiez demo 2]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=8277a810e6e20becbc190366ebd60aa8\r\n[shepmaster demo]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=01cb342d5eb6ffca31bc2f096b297ca8\r\n[jonas-schievink demo]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=366c0fb4a21ffacdf98008fa60d30c38\r\n[stephaneyfx demo 1]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=a92017dbd39332967b70f5fe4cb2557c\r\n[stephaneyfx demo 2]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=ed8abe64be080c951a072c0fd5bf855d\r\n\r\nMore details for issue follow.\r\n----\r\n\r\nA simple example of this (from examples embedded in the docs for `io::stdio`):\r\n\r\n``` rust\r\n    use std::io;\r\n\r\n    let mut stdin = io::stdin();\r\n    for line in stdin.lock().lines() {\r\n        println!(\"{}\", line.unwrap());\r\n    };\r\n```\r\n\r\nAnother example, this time from an example for `alloc::rc` (where this time I took the time to add a comment explaining what I encountered):\r\n\r\n``` rust\r\nfn main() {\r\n     let gadget_owner : Rc<Owner> = Rc::new(\r\n            Owner {\r\n                name: \"Gadget Man\".to_string(),\r\n                gadgets: RefCell::new(Vec::new())\r\n            }\r\n    );\r\n\r\n    let gadget1 = Rc::new(Gadget{id: 1, owner: gadget_owner.clone()});\r\n    let gadget2 = Rc::new(Gadget{id: 2, owner: gadget_owner.clone()});\r\n\r\n    gadget_owner.gadgets.borrow_mut().push(gadget1.clone().downgrade());\r\n    gadget_owner.gadgets.borrow_mut().push(gadget2.clone().downgrade());\r\n\r\n    for gadget_opt in gadget_owner.gadgets.borrow().iter() {\r\n        let gadget = gadget_opt.upgrade().unwrap();\r\n        println!(\"Gadget {} owned by {}\", gadget.id, gadget.owner.name);\r\n    }\r\n\r\n    // This is an unfortunate wart that is a side-effect of the implmentation\r\n    // of new destructor semantics: if the above for-loop is the final expression\r\n    // in the function, the borrow-checker treats the gadget_owner as needing to\r\n    // live past the destruction scope of the function (which of course it does not).\r\n    // To work around this, for now I am inserting a dummy value just so the above\r\n    // for-loop is no longer the final expression in the block.\r\n    ()\r\n}\r\n```\r\n\r\nLuckily for #21022, the coincidence of factors here is not very frequent, which is why I'm not planning on blocking #21022 on resolving this, but instead leaving it as something to address after issues for the alpha have been addressed.\r\n\r\n(I'm filing this bug before landing the PR so that I can annotation each of the corresponding cases with a FIXME so that I can go back and address them after I get a chance to investigate this properly.)\r\n", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/21114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/21114/timeline", "performed_via_github_app": null, "state_reason": "completed"}