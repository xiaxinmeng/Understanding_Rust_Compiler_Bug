{"url": "https://api.github.com/repos/rust-lang/rust/issues/93346", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93346/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93346/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93346/events", "html_url": "https://github.com/rust-lang/rust/issues/93346", "id": 1115513916, "node_id": "I_kwDOAAsO6M5CfWQ8", "number": 93346, "title": "Tracking Issue for panic_backtrace_config", "user": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-01-26T21:21:23Z", "updated_at": "2022-01-28T18:52:42Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Feature gate: `#![feature(panic_backtrace_config)]`\r\n\r\nThis is a tracking issue for configuring the capture and display of backtraces in the default panic hook, as well as exposing that configuration to third-party libraries for usage.\r\n\r\n### Public API\r\n\r\n```rust\r\nmod panic {\r\n    #[derive(Copy, Clone, Debug, PartialEq, Eq)]\r\n    #[non_exhaustive]\r\n    pub enum BacktraceStyle {\r\n        Short,\r\n        Full,\r\n        Off,\r\n    }\r\n    fn set_backtrace_style(BacktraceStyle);\r\n    fn get_backtrace_style() -> Option<BacktraceStyle>;\r\n}\r\n```\r\n\r\nThis API is intended to form part of the strategy for addressing the unsoundness of the `std::env::set_var` API on some platforms (mostly non-Windows). See https://github.com/rust-lang/rust/pull/92431#issuecomment-1014945627 for a summary.\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: #93101\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n* Do we need to move to a thread-local or otherwise more customizable strategy for whether to capture backtraces? See [this comment](https://github.com/rust-lang/rust/pull/79085#issuecomment-727845826) for some potential use cases for this.\r\n   * Proposed answer: no, leave this for third-party hooks.\r\n* Bikeshed on naming of all the options, as usual.\r\n* Should BacktraceStyle be moved into `std::backtrace`?\r\n   * It's already somewhat annoying to import and/or re-type the `std::panic::` prefix necessary to use these APIs, probably adding a second module to the mix isn't worth it.\r\n* Should `get_backtrace_style` be exposed?\r\n   *  The `Option<BacktraceStyle>` return type looks a little weird, and may not mean the intuitive thing -- `None` represents `Unsupported`, not \"not set\" or \"don't print backtraces\", as might be initially assumed.\r\n   * We may want a `std::panic::report_backtrace(&mut dyn Write)` instead which internally knows how to format things.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93346/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93346/timeline", "performed_via_github_app": null, "state_reason": null}