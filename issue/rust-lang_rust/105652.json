{"url": "https://api.github.com/repos/rust-lang/rust/issues/105652", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105652/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105652/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105652/events", "html_url": "https://github.com/rust-lang/rust/issues/105652", "id": 1493726769, "node_id": "I_kwDOAAsO6M5ZCHYx", "number": 105652, "title": "Associated types in traits forget their bounds when referenced in `impl`s", "user": {"login": "ltratt", "id": 20318, "node_id": "MDQ6VXNlcjIwMzE4", "avatar_url": "https://avatars.githubusercontent.com/u/20318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltratt", "html_url": "https://github.com/ltratt", "followers_url": "https://api.github.com/users/ltratt/followers", "following_url": "https://api.github.com/users/ltratt/following{/other_user}", "gists_url": "https://api.github.com/users/ltratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltratt/subscriptions", "organizations_url": "https://api.github.com/users/ltratt/orgs", "repos_url": "https://api.github.com/users/ltratt/repos", "events_url": "https://api.github.com/users/ltratt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltratt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-12-13T08:47:25Z", "updated_at": "2023-05-24T01:37:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Associated types in traits seem to \"forget\" their bounds when referenced in `impl`s. For example this code:\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\n\r\ntrait AssocTypes\r\nwhere\r\n    Self::A: T1,\r\n{\r\n    type A;\r\n}\r\n\r\ntrait T1 {}\r\n\r\nstruct S<T> {\r\n    phatom: PhantomData<T>,\r\n}\r\n\r\nimpl<AssocTypesT: AssocTypes> From<AssocTypesT::A> for S<AssocTypesT> {\r\n     fn from(x: AssocTypesT::A) -> S<AssocTypesT> {\r\n        todo!()\r\n    }\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nfails to compile (with rust 1.65 and nightly as of yesterday) with:\r\n\r\n```\r\nerror[E0119]: conflicting implementations of trait `std::convert::From<S<_>>` for type `S<_>`\r\n  --> /tmp/t.rs:16:1\r\n   |\r\n16 | impl<AssocTypesT: AssocTypes> From<AssocTypesT::A> for S<AssocTypesT> {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: conflicting implementation in crate `core`:\r\n           - impl<T> From<T> for T;\r\n```\r\n\r\nIt seems fairly clear to me that in `From<AssocTypesT::A>` has ended up referencing an unbound type `A` rather than a type `A where A:T1` which is what I expected by referencing the variable in the `trait`.\r\n\r\nThe best fix I've come up with for this example is to create another type parameter that manually copies over the type bounds from the `trait`. Thus this compiles:\r\n\r\n```rust\r\nimpl<AssocTypesT: AssocTypes, T: T1> From<T> for S<AssocTypesT> {\r\n     fn from(x: T) -> S<AssocTypesT> {\r\n        todo!()\r\n    }\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105652/timeline", "performed_via_github_app": null, "state_reason": null}