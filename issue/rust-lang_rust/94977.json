{"url": "https://api.github.com/repos/rust-lang/rust/issues/94977", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94977/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94977/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94977/events", "html_url": "https://github.com/rust-lang/rust/issues/94977", "id": 1170253100, "node_id": "I_kwDOAAsO6M5FwKUs", "number": 94977, "title": "Inline asm docs incorrectly state that k0 (x86 AVX-512) is hard-wired to zero", "user": {"login": "pcordes", "id": 165377, "node_id": "MDQ6VXNlcjE2NTM3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/165377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcordes", "html_url": "https://github.com/pcordes", "followers_url": "https://api.github.com/users/pcordes/followers", "following_url": "https://api.github.com/users/pcordes/following{/other_user}", "gists_url": "https://api.github.com/users/pcordes/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcordes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcordes/subscriptions", "organizations_url": "https://api.github.com/users/pcordes/orgs", "repos_url": "https://api.github.com/users/pcordes/repos", "events_url": "https://api.github.com/users/pcordes/events{/privacy}", "received_events_url": "https://api.github.com/users/pcordes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-03-15T20:51:48Z", "updated_at": "2022-04-20T03:51:09Z", "closed_at": "2022-04-20T03:51:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://doc.rust-lang.org/nightly/reference/inline-assembly.html#register-names\r\nsays about  `k0`  \"*This is a constant zero register which can't be modified.*\"\r\nThat's the same phrasing as AArch64 `xzr`, so I assume the author thought it was architecturally hard-wired, rather than a software choice to keep it zeroed (like often done with AVR `r0`).  (Which I don't think would make much sense; most instructions with an all-zero mask are no-ops so you don't normally want one.)\r\n\r\n`k0` is special in that it can't be used *as a mask*, because that register number means no-masking if used in an instruction like `vmovaps (%rdi), %xmm0{%k1}{z}`.  But it *can* be the destination of instructions like compare-into-mask or [`vptestmd %ymm0, %ymm0, %k0`](https://www.felixcloutier.com/x86/vptestmb:vptestmw:vptestmd:vptestmq), and then stored to memory or copied to a GP-integer reg with `kmovd %k0, %eax`, tested with `kortest`, combine with other masks with `kunpck` or `kadd` or whatever.\r\n\r\nLeaving it unused prevents false dependencies when materializing an all-ones mask with `kxnord %k0, %k0, %k1` (e.g. before a gather), but otherwise there's no reason to avoid it if your uses for that mask don't include applying masking to other instructions.\r\n\r\nYou do definitely want there to be a constraint that can only pick k1..7, not k0, like GNU C inline asm's `Yk` (https://stackoverflow.com/questions/55946103/gnu-c-inline-asm-input-constraint-for-avx512-mask-registers-k1-k7), but there's no reason to disallow `k0` as an explicit choice.  If people don't want to know about details like k0 being special, they can use intrinsics.\r\n\r\nProbably not much reason to invent a constraint like `Yk` but which can pick k0..7, though, but it's possible it could help register allocation of mask regs with surrounding code.  (But would be more documentation to wade through, and could end up wasting some people's time if they find the constraint which can pick k0 when they need one which can't.)", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94977/timeline", "performed_via_github_app": null, "state_reason": "completed"}