{"url": "https://api.github.com/repos/rust-lang/rust/issues/80747", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80747/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80747/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80747/events", "html_url": "https://github.com/rust-lang/rust/issues/80747", "id": 780015147, "node_id": "MDU6SXNzdWU3ODAwMTUxNDc=", "number": 80747, "title": "Infinite loop when trying to fill a Vector of MaybeUninit<SomeZeroSizedType>", "user": {"login": "PaulGrandperrin", "id": 1748936, "node_id": "MDQ6VXNlcjE3NDg5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1748936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PaulGrandperrin", "html_url": "https://github.com/PaulGrandperrin", "followers_url": "https://api.github.com/users/PaulGrandperrin/followers", "following_url": "https://api.github.com/users/PaulGrandperrin/following{/other_user}", "gists_url": "https://api.github.com/users/PaulGrandperrin/gists{/gist_id}", "starred_url": "https://api.github.com/users/PaulGrandperrin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PaulGrandperrin/subscriptions", "organizations_url": "https://api.github.com/users/PaulGrandperrin/orgs", "repos_url": "https://api.github.com/users/PaulGrandperrin/repos", "events_url": "https://api.github.com/users/PaulGrandperrin/events{/privacy}", "received_events_url": "https://api.github.com/users/PaulGrandperrin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-01-06T04:43:09Z", "updated_at": "2021-01-06T21:07:29Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried to reduce the demonstration to the minimum possible.\r\n\r\nI wrote a function that fills a vector of `MaybeUninit<T>` values that I think is safe (free of UB).\r\nThe code works well with `cargo miri run`.\r\n\r\nBut when calling this function with a zero-sized type, the execution goes into an infinite loop.\r\nThe exact same code without the `MaybeUninit` logic works as expected.\r\n\r\nHere is the code:\r\n\r\n```rust\r\n#![feature(maybe_uninit_extra)] // not important, works also without\r\nuse core::mem::{self, MaybeUninit};\r\n\r\nstruct A(u8);\r\nimpl Default for A {\r\n    fn default() -> Self {\r\n        Self(0)\r\n    }\r\n}\r\nimpl Drop for A {\r\n    fn drop(&mut self) {\r\n        println!(\"dropping A\");\r\n    }\r\n}\r\n\r\nstruct B;\r\nimpl Default for B {\r\n    fn default() -> Self {\r\n        Self\r\n    }\r\n}\r\nimpl Drop for B {\r\n    fn drop(&mut self) {\r\n        println!(\"dropping B\");\r\n    }\r\n}\r\n\r\n// Fills a vector of uninitialized T with their default values\r\nfn fill_default_uninit<T: Default>(mut v: Vec<MaybeUninit<T>>) -> Vec<T> {\r\n    v.iter_mut().for_each(|i|{\r\n        i.write(T::default()); // without the nightly feature: unsafe{i.as_mut_ptr().write(T::default())};\r\n    });\r\n    unsafe { mem::transmute::<_, _>(v) } // this is safe because the Vec is now fully initialized\r\n}\r\n\r\n// Fills a vector of T with their default values, overriding the previous ones\r\nfn fill_default_init<T: Default>(mut v: Vec<T>) -> Vec<T> {\r\n    v.iter_mut().for_each(|i|{\r\n        *i = T::default();\r\n    });\r\n    v\r\n}\r\n\r\nfn main() {\r\n    // create an uninitialized vector of 3 As\r\n    let mut v: Vec<MaybeUninit<A>> = Vec::with_capacity(3);\r\n    unsafe{v.set_len(v.capacity())}; // this is safe because the elements are MaybeUninit\r\n    let v = fill_default_uninit(v); // no problem\r\n    drop(v); // all 3 As are dropped\r\n    \r\n    \r\n    // create an uninitialized vector of 3 Bs\r\n    let mut v: Vec<MaybeUninit<B>> = Vec::with_capacity(3);\r\n    unsafe{v.set_len(v.capacity())}; // this is safe because the elements are MaybeUninit\r\n    //let v = init_default(v); //  <------------------------------------------------------ INFINITE LOOP HERE\r\n    //drop(v);\r\n    \r\n    // now let's try the same code for B without MaybeUninit\r\n    let mut v = Vec::with_capacity(3);\r\n    for _ in 0..3 { v.push(B::default()) }\r\n\r\n    let v = fill_default_init(v); // no problem, here the 3 old Bs will be dropped\r\n    drop(v); // no problem, the 3 new Bs will be dropped\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=10c5cfb3d94ca617fec24da260006ca0))\r\n\r\nOutput:\r\n\r\n```\r\ndropping A\r\ndropping A\r\ndropping A\r\ndropping B\r\ndropping B\r\ndropping B\r\ndropping B\r\ndropping B\r\ndropping B\r\n\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80747/timeline", "performed_via_github_app": null, "state_reason": null}