{"url": "https://api.github.com/repos/rust-lang/rust/issues/47290", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47290/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47290/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47290/events", "html_url": "https://github.com/rust-lang/rust/issues/47290", "id": 287052146, "node_id": "MDU6SXNzdWUyODcwNTIxNDY=", "number": 47290, "title": "FFI aggregate handling for mips64 is broken", "user": {"login": "jcowgill", "id": 1226825, "node_id": "MDQ6VXNlcjEyMjY4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1226825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcowgill", "html_url": "https://github.com/jcowgill", "followers_url": "https://api.github.com/users/jcowgill/followers", "following_url": "https://api.github.com/users/jcowgill/following{/other_user}", "gists_url": "https://api.github.com/users/jcowgill/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcowgill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcowgill/subscriptions", "organizations_url": "https://api.github.com/users/jcowgill/orgs", "repos_url": "https://api.github.com/users/jcowgill/repos", "events_url": "https://api.github.com/users/jcowgill/events{/privacy}", "received_events_url": "https://api.github.com/users/jcowgill/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 106552066, "node_id": "MDU6TGFiZWwxMDY1NTIwNjY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-MIPS", "name": "O-MIPS", "color": "6e6ec0", "default": false, "description": "Target: MIPS processors"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-09T11:12:02Z", "updated_at": "2018-03-06T11:09:28Z", "closed_at": "2018-03-06T11:09:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A number of FFI tests relating to the handling of aggregates fail on 64-bit MIPS:\r\nhttps://gist.github.com/jcowgill/911a7c3cf3c05c187c7ed1262526de78\r\n\r\nIt seems to me that `src/librustc_trans/cabi_mips64.rs` has been copied from `cabi_mips.rs` with only minimal changes, however the 64-bit MIPS ABI is significantly different from the 32-bit ABI so I expect that file needs rewriting.\r\n\r\nI've had a brief look fixing this (no patches yet). One issue is that the 64-bit MIPS ABI requires special handling of any structures containing doubles, not just homogeneous structures. This means I can't cast these to `Uniform` like other architectures do. I think I would need something behaving similar to `Uniform`, but with the LLVM type consisting of some arbitrary combination of `double` and `i64` types. Does implementing this seem reasonable?\r\n\r\nThis is the relevant extract from the ABI document (the first 2 paragraphs are the important ones):\r\n\r\n> Structs, unions, or other composite types are treated as a sequence of doublewords,\r\n> and are passed in integer or floating point registers as though they were simple\r\n> scalar parameters to the extent that they fit, with any excess on the stack packed\r\n> according to the normal memory layout of the object. More specifically:\r\n> - Regardless of the struct field structure, it is treated as a sequence of 64-bit\r\n> chunks. If a chunk consists solely of a double float field (but not a double,\r\n> which is part of a union), it is passed in a floating point register. Any other\r\n> chunk is passed in an integer register.\r\n> - A union, either as the parameter itself or as a struct parameter field, is treated\r\n> as a sequence of integer doublewords for purposes of assignment to integer\r\n> parameter registers. No attempt is made to identify floating point components\r\n> for passing in floating point registers.\r\n> - Array fields of structs are passed like unions. Array parameters are passed by\r\n> reference (unless the relevant language standard requires otherwise).\r\n> - Right-justifying small scalar parameters in their save area slots\r\n> notwithstanding, struct parameters are always left-justified. This applies both\r\n> to the case of a struct smaller than 64 bits, and to the final chunk of a struct\r\n> which is not an integral multiple of 64 bits in size. The implication of this rule is\r\n> that the address of the first chunk\u2019s save area slot is the address of the struct,\r\n> and the struct is laid out in the save area memory exactly as if it were allocated\r\n> normally (once any part in registers has been stored to the save area). [These\r\n> rules are analogous to the o32-bit ABI treatment \u2013 only the chunk size and the\r\n> ability to pass double fields in floating point registers are different.]", "closed_by": {"login": "jcowgill", "id": 1226825, "node_id": "MDQ6VXNlcjEyMjY4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1226825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcowgill", "html_url": "https://github.com/jcowgill", "followers_url": "https://api.github.com/users/jcowgill/followers", "following_url": "https://api.github.com/users/jcowgill/following{/other_user}", "gists_url": "https://api.github.com/users/jcowgill/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcowgill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcowgill/subscriptions", "organizations_url": "https://api.github.com/users/jcowgill/orgs", "repos_url": "https://api.github.com/users/jcowgill/repos", "events_url": "https://api.github.com/users/jcowgill/events{/privacy}", "received_events_url": "https://api.github.com/users/jcowgill/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47290/timeline", "performed_via_github_app": null, "state_reason": "completed"}