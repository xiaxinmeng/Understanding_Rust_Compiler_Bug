{"url": "https://api.github.com/repos/rust-lang/rust/issues/30002", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/30002/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/30002/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/30002/events", "html_url": "https://github.com/rust-lang/rust/issues/30002", "id": 118407078, "node_id": "MDU6SXNzdWUxMTg0MDcwNzg=", "number": 30002, "title": "Lifetime inference + Associated types limitation / bug?", "user": {"login": "frankmcsherry", "id": 5741500, "node_id": "MDQ6VXNlcjU3NDE1MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/5741500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frankmcsherry", "html_url": "https://github.com/frankmcsherry", "followers_url": "https://api.github.com/users/frankmcsherry/followers", "following_url": "https://api.github.com/users/frankmcsherry/following{/other_user}", "gists_url": "https://api.github.com/users/frankmcsherry/gists{/gist_id}", "starred_url": "https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frankmcsherry/subscriptions", "organizations_url": "https://api.github.com/users/frankmcsherry/orgs", "repos_url": "https://api.github.com/users/frankmcsherry/repos", "events_url": "https://api.github.com/users/frankmcsherry/events{/privacy}", "received_events_url": "https://api.github.com/users/frankmcsherry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-11-23T15:37:40Z", "updated_at": "2022-03-05T11:06:52Z", "closed_at": "2022-03-05T11:06:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was able to write the following, and could imagine a world in which it works. At the same time, I could also imagine many good reasons that Rust can't reach a conclusion that I think I can reach. I floated it on IRC, where it was suggested to report it (and you all can figure out if it is a bug, a missing feature, or a wontfix).\n\nThe following hunk of code errors on playpen, with the concern that in calling `test`, Rust can't confirm that the associated type `<&'a String as Test<'a>>::Inner` lives long enough to be referenced by `&'b`. However, we see that in defining the trait `Test<'a>` there is a requirement that `Inner: 'a`, and in the `for<...>` construct we impose the requirement that `'a: 'b`. \n\n``` rust\ntrait Test<'a> {\n    type Inner:'a;\n}\n\nimpl<'a> Test<'a> for &'a String {\n    type Inner = &'a String;\n}\n\nfn test<L>(func: L) where L : for<'b,'a:'b> Fn(&'b <&'a String as Test<'a>>::Inner) { }\n\nfn main() {\n    test(|x| println!(\"{:?}\", x));\n}\n```\n\nThere could be any number of issues here, including total misunderstanding on my part. \n\nIt seems that if I change the definition of `test` to remove the use of an associated type, as\n\n``` rust\nfn test<L>(func: L) where L : for<'b,'a:'b> Fn(&'b &'a String) { }\n```\n\nit works out just fine. Slightly disconcertingly for my understanding, I can also remove the `'a:'b` constraint, and no complaints. Maybe that's ok in this example?\n\nIf I change the definition of `test` to only have a single lifetime, as\n\n``` rust\nfn test<L>(func: L) where L : for<'a> Fn(&'a <&'a String as Test<'a>>::Inner) { }\n```\n\nIt builds just fine (on nightly; stable has an ICE), but it also builds fine if I remove the `'a` requirement on `Inner` from the trait definition (I was really hoping that would error). Clearly I'm a bit confused about how things work.\n\nShould the first version of the code have worked, or is there a glitch in sticking these bits of reasoning together?\n", "closed_by": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/30002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/30002/timeline", "performed_via_github_app": null, "state_reason": "completed"}