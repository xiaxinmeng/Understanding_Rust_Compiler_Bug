{"url": "https://api.github.com/repos/rust-lang/rust/issues/50335", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50335/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50335/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50335/events", "html_url": "https://github.com/rust-lang/rust/issues/50335", "id": 318809742, "node_id": "MDU6SXNzdWUzMTg4MDk3NDI=", "number": 50335, "title": "[assert_eq!] Add support for any value symbol \"_\" in enum variant with tuple values", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-30T07:50:20Z", "updated_at": "2018-05-10T16:22:00Z", "closed_at": "2018-05-10T16:22:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "My Rust version: `1.25.0`\r\n\r\nCurrently this compiles:\r\n\r\n```rust\r\nenum E {\r\n    A(u8, u8),\r\n    B,\r\n}\r\n\r\nmatch E::B {\r\n    E::A(_, _) => (),\r\n    _ => (),\r\n}\r\n```\r\n\r\nBut this doesn't compile:\r\n\r\n```rust\r\nassert_eq!(E::A(_, _), E::A(1, 2));\r\nassert_eq!(E::A(_, _), E::B);\r\n```\r\n\r\nI think it would be useful if `assert_eq!` (or similar, such as `assert_ne!`) supports `_` in such cases.\r\n\r\n---\r\n\r\nFor example in real code I have an enum:\r\n\r\n```rust\r\nenum ErrorKind {\r\n    InvalidInput(String),\r\n    Other,\r\n}\r\n```\r\n\r\nThe string inside `ErrorKind::InvalidInput(String)` is only useful while debugging. But in tests, I normally don't care about it. So when writing tests, it would help if this compiles:\r\n\r\n```rust\r\nassert_eq!(error, ErrorKind::InvalidInput(_));\r\n```\r\n\r\nThank you,", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50335/timeline", "performed_via_github_app": null, "state_reason": "completed"}