{"url": "https://api.github.com/repos/rust-lang/rust/issues/60471", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60471/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60471/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60471/events", "html_url": "https://github.com/rust-lang/rust/issues/60471", "id": 439592686, "node_id": "MDU6SXNzdWU0Mzk1OTI2ODY=", "number": 60471, "title": "Tracking issue for \"Lazy normalization\"", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 1405345617, "node_id": "MDU6TGFiZWwxNDA1MzQ1NjE3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lazy-normalization", "name": "A-lazy-normalization", "color": "f7e101", "default": false, "description": "Area: lazy normalization (tracking issue: #60471)"}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2019-05-02T13:31:18Z", "updated_at": "2023-06-07T13:44:21Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "# What is this?\r\n\r\n\"Lazy normalization\" is a change to how we handle associated types (and constants) so that we wait until we have to equate an associated type (or constant) has to be equated or processed to normalize it (i.e., figure out if there is an impl we can use to find its definition), rather than doing so eagerly. This has a number of advantages, and in particular for const generics it can prevent a large number of cyclic errors.\r\n\r\n# Subissues\r\n\r\n* https://github.com/rust-lang/rust/issues/72219 -- Lazy normalization for constants\r\n\r\n# Further background reading\r\n\r\n## What is this \"lazy normalization\"? (see https://github.com/rust-lang/rust/issues/60471#issuecomment-523394151)\r\n\r\n> @Aaron1011 Normalization is replacing \"projections\" (such as `<T as Trait>::AssocType` or unevaluated constant expressions - a better name than \"projection\" might be \"expression\" or \"call\" - something that only says how to get to a final \"value\", not what it is) with what they resolve/evaluate to.\r\n> E.g. `&<Rc<str> as Deref>::Target` becomes `&str`, and `[T; {1+1}]` becomes `[T; 2]`.\r\n> \r\n> Right now all of this is done \"eagerly\", i.e. as soon as possible, and always (during typeck, or whenever there is enough information to normalize further), but that causes some issues:\r\n> \r\n> * for associated types it's HRTB-related (IIRC)\r\n> \r\n> * for type-level constants it's cyclic dependencies between the constant and the parent definition it's found in, which is why we can't fix #43408 (it's a one-line change, but then not even libcore compiles anymore)\r\n> \r\n> \r\n> Lazy normalization would simply defer the work of resolving/evaluating such type-level constructs until the very moment they are needed (such as when requiring that two types are the same, or when computing the low-level layout of a type for miri/codegen).\r\n> The associated type problem is more subtle (at least from what I've heard), but for constant expressions in types, it will simply break the cyclic dependencies because definitions will no longer force the evaluation of constant expressions they contain.\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60471/reactions", "total_count": 72, "+1": 49, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 19, "rocket": 4, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60471/timeline", "performed_via_github_app": null, "state_reason": null}