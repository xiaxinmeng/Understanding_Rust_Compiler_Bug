{"url": "https://api.github.com/repos/rust-lang/rust/issues/66426", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66426/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66426/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66426/events", "html_url": "https://github.com/rust-lang/rust/issues/66426", "id": 523155398, "node_id": "MDU6SXNzdWU1MjMxNTUzOTg=", "number": 66426, "title": "Impossible to return unboxed closure from some functions.", "user": {"login": "wdanilo", "id": 1623053, "node_id": "MDQ6VXNlcjE2MjMwNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1623053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdanilo", "html_url": "https://github.com/wdanilo", "followers_url": "https://api.github.com/users/wdanilo/followers", "following_url": "https://api.github.com/users/wdanilo/following{/other_user}", "gists_url": "https://api.github.com/users/wdanilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdanilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdanilo/subscriptions", "organizations_url": "https://api.github.com/users/wdanilo/orgs", "repos_url": "https://api.github.com/users/wdanilo/repos", "events_url": "https://api.github.com/users/wdanilo/events{/privacy}", "received_events_url": "https://api.github.com/users/wdanilo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1472502130, "node_id": "MDU6TGFiZWwxNDcyNTAyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-type_alias_impl_trait", "name": "F-type_alias_impl_trait", "color": "f9c0cc", "default": false, "description": "`#[feature(type_alias_impl_trait)]`"}, {"id": 1472515602, "node_id": "MDU6TGFiZWwxNDcyNTE1NjAy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-trait_alias", "name": "F-trait_alias", "color": "f9c0cc", "default": false, "description": "`#![feature(trait_alias)]`"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-11-14T23:04:45Z", "updated_at": "2022-09-09T15:00:19Z", "closed_at": "2022-09-09T15:00:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I'm trying to write a lens library for Rust (see this for reference about lenses: https://github.com/ekmett/lens/wiki). I'm trying to write it in an zero-overhead style, so all lens-usages could be optimized away during compilation stage, thus, I'm trying to create unboxed closures and glue them together. However, a very strange error occurs here. Consider the following code:\r\n\r\n```rust\r\n#![feature(type_alias_impl_trait)]\r\n#![feature(trait_alias)]\r\n\r\nuse std::marker::PhantomData;\r\n\r\ntrait OptGetter<'t,A,B> = Fn(&'t A) -> Option<&'t B>\r\n    where A:'t, B:'t, Self:Copy;\r\n\r\nstruct Lens<'t,Get,A,B>\r\n    where Get: OptGetter<'t,A,B> {\r\n    get: Get,\r\n    phantom: PhantomData<(&'t(),A,B)>\r\n}\r\n\r\ntype CombinedOptGetter<'t,Get1,Get2,A,B,C> = impl OptGetter<'t,A,C>;\r\nfn combine_opt_getter <'t,Get1,Get2,A,B,C>\r\n(f1: Get1, f2: Get2) -> CombinedOptGetter<'t,Get1,Get2,A,B,C>\r\n    where Get1:OptGetter<'t,A,B>,\r\n          Get2:OptGetter<'t,B,C> {\r\n    move |a| f1(a).and_then(f2)\r\n}\r\n\r\nimpl<'t,Get,A,B> Lens<'t,Get,A,B>\r\n    where Get: OptGetter<'t,A,B> {\r\n    pub fn new(get: Get) -> Self {\r\n        let phantom = PhantomData;\r\n        Self { get, phantom }\r\n    }\r\n\r\n    pub fn combine<Get2, C>(self, that: Lens<'t,Get2,B,C>)\r\n    -> Lens<'t,CombinedOptGetter<'t,Get,Get2,A,B,C>,A,C>\r\n        where Get2: OptGetter<'t,B,C> {\r\n        Lens::new(combine_opt_getter(self.get, that.get))\r\n    }\r\n}\r\n\r\ntrait OptionLens {\r\n    type Out;\r\n    fn _Some(self) -> Self::Out;\r\n}\r\n\r\ntype SomeGetter<'t,A> = impl OptGetter<'t,Option<A>,A>;\r\nfn some_getter<'t,A:'t>() -> Lens<'t,SomeGetter<'t,A>,Option<A>,A> {\r\n    Lens::new(move|t: &'t Option<A>| t.as_ref())\r\n}\r\n\r\nfn _Some<'t, Get, A, B> (this: Lens<'t,Get,A,Option<B>>) -> i32\r\nwhere Get: OptGetter<'t,A,Option<B>> {\r\n    let wrapped: Lens<'t,SomeGetter<'t,B>,Option<B>,B> = some_getter();\r\n    let wrapper: Lens<'t,CombinedOptGetter<'t,Get,SomeGetter<'t,B>,A,Option<B>,B>,A,B> = this.combine(wrapped);\r\n    7\r\n}\r\n```\r\n\r\nIt compiles fine. However, if you try to return `wrapper` from the `_Some` function, the code will not compile and the errrors we get are not very explanatory either. With this code instead:\r\n```rust\r\nfn _Some<'t, Get, A, B> (this: Lens<'t,Get,A,Option<B>>) -> Lens<'t,CombinedOptGetter<'t,Get,SomeGetter<'t,B>,A,Option<B>,B>,A,B>\r\nwhere Get: OptGetter<'t,A,Option<B>> {\r\n    let wrapped: Lens<'t,SomeGetter<'t,B>,Option<B>,B> = some_getter();\r\n    let wrapper: Lens<'t,CombinedOptGetter<'t,Get,SomeGetter<'t,B>,A,Option<B>,B>,A,B> = this.combine(wrapped);\r\n    wrapper\r\n}\r\n```\r\n\r\nWe get:\r\n\r\n```rust\r\nerror[E0283]: type annotations needed: cannot resolve `_: OptGetter<'t, std::option::Option<B>, B>`\r\n  --> lib/optics/src/lib.rs:42:1\r\n   |\r\n42 | type SomeGetter<'t,A> = impl OptGetter<'t,Option<A>,A>;\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: the return type of a function must have a statically known size\r\n\r\nerror: concrete type differs from previous defining opaque type use\r\n  --> lib/optics/src/lib.rs:47:1\r\n   |\r\n47 | / fn _Some<'t, Get, A, B> (this: Lens<'t,Get,A,Option<B>>) -> Lens<'t,CombinedOptGetter<'t,Get,SomeGetter<'t,B>,A,Option<B>,B>,A,B>\r\n48 | | where Get: OptGetter<'t,A,Option<B>> {\r\n49 | |     let wrapped: Lens<'t,SomeGetter<'t,B>,Option<B>,B> = some_getter();\r\n50 | |     let wrapper: Lens<'t,CombinedOptGetter<'t,Get,SomeGetter<'t,B>,A,Option<B>,B>,A,B> = this.combine(wrapped);\r\n51 | |     wrapper\r\n52 | | }\r\n   | |_^ expected `[closure@lib/optics/src/lib.rs:44:15: 44:48]`, got `[type error]`\r\n   |\r\nnote: previous use here\r\n  --> lib/optics/src/lib.rs:43:1\r\n   |\r\n43 | / fn some_getter<'t,A:'t>() -> Lens<'t,SomeGetter<'t,A>,Option<A>,A> {\r\n44 | |     Lens::new(move|t: &'t Option<A>| t.as_ref())\r\n45 | | }\r\n   | |_^\r\n```", "closed_by": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66426/timeline", "performed_via_github_app": null, "state_reason": "completed"}