{"url": "https://api.github.com/repos/rust-lang/rust/issues/42021", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42021/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42021/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42021/events", "html_url": "https://github.com/rust-lang/rust/issues/42021", "id": 228879400, "node_id": "MDU6SXNzdWUyMjg4Nzk0MDA=", "number": 42021, "title": "Deref and method shadowing", "user": {"login": "gavento", "id": 956446, "node_id": "MDQ6VXNlcjk1NjQ0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/956446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavento", "html_url": "https://github.com/gavento", "followers_url": "https://api.github.com/users/gavento/followers", "following_url": "https://api.github.com/users/gavento/following{/other_user}", "gists_url": "https://api.github.com/users/gavento/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavento/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavento/subscriptions", "organizations_url": "https://api.github.com/users/gavento/orgs", "repos_url": "https://api.github.com/users/gavento/repos", "events_url": "https://api.github.com/users/gavento/events{/privacy}", "received_events_url": "https://api.github.com/users/gavento/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-16T00:02:49Z", "updated_at": "2017-06-22T23:32:21Z", "closed_at": "2017-06-22T23:27:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Types implementing `Deref`, e.g. `Rc<T>`,  can shadow methods of their target types. This can happen in two ways:\r\n* either by the `impl` of both types defining the same method (case A)\r\n* or by the method being added to either of the types via a trait (cases B and C).\r\n\r\nWhile this is according to the intended `Deref` design, it can easily lead to confusion or bugs. It is also one case where adding `impl`s or importing traits can silently change behavior (see below) or break the code (see e.g. #41906 and the original #41865).\r\n\r\nWe should be able to detect it and at least issue a warning.\r\n\r\n## Details and illustration\r\n\r\nTo illustrate, consider this code excerpt ([full playpen](https://play.rust-lang.org/?gist=0cbbaedacba3e0c81395669c296d1a58&version=stable&backtrace=0)). (The types here are abstract on purpose, but see #41906 and case C below for examples with `Borrow`.)\r\n\r\n```rust\r\n#[derive(Default)]\r\nstruct A<T> { inner: T }\r\n\r\nimpl<T> Deref for A<T> {\r\n    type Target = T;\r\n    fn deref(&self) -> &T {\r\n        &self.inner\r\n    }\r\n}\r\n\r\n#[derive(Default)]\r\nstruct B;\r\n\r\nimpl B {\r\n    fn method(&self) { println!(\"B::method\"); }\r\n}\r\n\r\nfn main() {\r\n    let a: A<B> = Default::default();\r\n    a.method();\r\n}\r\n```\r\n\r\n**Case A** is triggered by adding `impl<T> A<T> { fn method(&self) { } }`. While here the behavior is least confusing of the three, it still a bad design we might be able to detect and warn about. (This is the reason `Deref` types such as `std::rc::Rc` generally only have type-associated methods.)\r\n\r\n**Case B** is triggered by implementing a trait with `method` on `A<T>` as below. This is harder to both avoid (trait methods are not associated) and notice.\r\n\r\n```rust\r\ntrait Tr {\r\n    fn method(&self) { println!(\"Tr::method\"); }\r\n}\r\nimpl<T> Tr for A<T> { }\r\n```\r\n\r\n**Case C** is triggered similarly to **B**, by the code below. The difference is that the trait is implemented in another module and only gets activated by an `use`.\r\n\r\n```rust\r\nmod sub {\r\n    pub trait Hidden {\r\n        fn method(&self) { println!(\"Hidden::method\"); }\r\n    }\r\n    impl<T> Hidden for super::A<T> { }\r\n}\r\nuse sub::Hidden;\r\n```\r\n\r\nFor this last case, I have a slightly more realistic example with `use std::borrow::Borrow;` triggering a different behavior with no warnings. See the [playpen](https://play.rust-lang.org/?gist=a562ba4300f5d2dd3fff96fa3f035543&version=stable&backtrace=0).\r\n\r\n## Solution\r\n\r\nOn a method call, we could inspect the entire `Deref` chain of types for methods of the same name and issue a warning if we find a method of the same name. \r\n\r\nUsers could resolve this with:\r\n* Explicit deref and call: `(*a).method()`\r\n* Explicit call without deref: `A::method(&a)`\r\n* Some `#[allow(deref_shadowing)]` pragma\r\n\r\nI would see this as an important warning: activating any two of the cases A, B or C at once is a compiler error (as it should be) and the `Deref` coercion is very close to that from user point of view but gives no warning.\r\n\r\nThis would also resolve #41906 in a general way (are there any other related issues?)", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42021/timeline", "performed_via_github_app": null, "state_reason": "completed"}