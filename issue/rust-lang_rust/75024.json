{"url": "https://api.github.com/repos/rust-lang/rust/issues/75024", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75024/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75024/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75024/events", "html_url": "https://github.com/rust-lang/rust/issues/75024", "id": 671134483, "node_id": "MDU6SXNzdWU2NzExMzQ0ODM=", "number": 75024, "title": "panic_bounds_check with for on an interval closed on the right", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-01T19:33:23Z", "updated_at": "2020-08-01T19:33:23Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This bug report is similar to others but in my opinion sufficiently different. This code:\r\n```rust\r\npub fn e76() -> u32 {\r\n    const N: usize = 100;\r\n    let mut ways = [0_u32; N + 1];\r\n    ways[0] = 1;\r\n    for j in 1 .. N {\r\n        for i in j ..= N {\r\n            ways[i] += ways[i - j];\r\n        }\r\n    }\r\n    ways[N]\r\n}\r\n```\r\nUsing `rustc 1.47.0-nightly cfc572cae 2020-07-30` contains a panic_bounds_check:\r\n```asm\r\nexample::e76:\r\n        sub     rsp, 408\r\n        vxorps  xmm0, xmm0, xmm0\r\n        vmovups ymmword ptr [rsp + 376], ymm0\r\n        vmovups ymmword ptr [rsp + 360], ymm0\r\n        vmovups ymmword ptr [rsp + 328], ymm0\r\n        vmovups ymmword ptr [rsp + 296], ymm0\r\n        vmovups ymmword ptr [rsp + 264], ymm0\r\n        vmovups ymmword ptr [rsp + 232], ymm0\r\n        vmovups ymmword ptr [rsp + 200], ymm0\r\n        vmovups ymmword ptr [rsp + 168], ymm0\r\n        vmovups ymmword ptr [rsp + 136], ymm0\r\n        vmovups ymmword ptr [rsp + 104], ymm0\r\n        vmovups ymmword ptr [rsp + 72], ymm0\r\n        vmovups ymmword ptr [rsp + 40], ymm0\r\n        vmovups ymmword ptr [rsp + 8], ymm0\r\n        mov     dword ptr [rsp + 4], 1\r\n        mov     ecx, 1\r\n        mov     r8d, 100\r\n.LBB0_1:\r\n        lea     rdx, [rcx + 1]\r\n        mov     rax, rcx\r\n.LBB0_2:\r\n        mov     rdi, rax\r\n        sub     rdi, rcx\r\n        cmp     rdi, 100\r\n        ja      .LBB0_11\r\n        lea     rsi, [rax + 1]\r\n        cmp     rax, 100\r\n        cmovae  rsi, r8\r\n        mov     edi, dword ptr [rsp + 4*rdi + 4]\r\n        add     dword ptr [rsp + 4*rax + 4], edi\r\n        cmp     rsi, 100\r\n        ja      .LBB0_4\r\n        cmp     rax, 99\r\n        mov     rax, rsi\r\n        jbe     .LBB0_2\r\n.LBB0_4:\r\n        cmp     rdx, 100\r\n        je      .LBB0_5\r\n        add     rcx, 2\r\n        mov     rsi, rdx\r\n.LBB0_8:\r\n        mov     rdi, rsi\r\n        sub     rdi, rdx\r\n        cmp     rdi, 100\r\n        ja      .LBB0_11\r\n        lea     rax, [rsi + 1]\r\n        cmp     rsi, 100\r\n        cmovae  rax, r8\r\n        mov     edi, dword ptr [rsp + 4*rdi + 4]\r\n        add     dword ptr [rsp + 4*rsi + 4], edi\r\n        cmp     rax, 100\r\n        ja      .LBB0_1\r\n        cmp     rsi, 99\r\n        mov     rsi, rax\r\n        jbe     .LBB0_8\r\n        jmp     .LBB0_1\r\n.LBB0_5:\r\n        mov     eax, dword ptr [rsp + 404]\r\n        add     rsp, 408\r\n        vzeroupper\r\n        ret\r\n.LBB0_11:\r\n        lea     rdx, [rip + .L__unnamed_1]\r\n        mov     esi, 101\r\n        vzeroupper\r\n        call    qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\r\n        ud2\r\n```        \r\nWhile the same code with \".. N + 1\" instead of \"..= N\":\r\n```rust\r\npub fn e76() -> u32 {\r\n    const N: usize = 100;\r\n    let mut ways = [0_u32; N + 1];\r\n    ways[0] = 1;\r\n    for j in 1 .. N {\r\n        for i in j .. N + 1 {\r\n            ways[i] += ways[i - j];\r\n        }\r\n    }\r\n    ways[N]\r\n}\r\n```\r\nContains no panic_bounds_check (and gets vectorized):\r\n```asm\r\nexample::e76:\r\n        push    rbp\r\n        push    r15\r\n        push    r14\r\n        push    r13\r\n        push    r12\r\n        push    rbx\r\n        sub     rsp, 404\r\n        vpxor   xmm0, xmm0, xmm0\r\n        vmovdqu ymmword ptr [rsp + 372], ymm0\r\n        vmovdqu ymmword ptr [rsp + 356], ymm0\r\n        vmovdqu ymmword ptr [rsp + 324], ymm0\r\n        vmovdqu ymmword ptr [rsp + 292], ymm0\r\n        vmovdqu ymmword ptr [rsp + 260], ymm0\r\n        vmovdqu ymmword ptr [rsp + 228], ymm0\r\n        vmovdqu ymmword ptr [rsp + 196], ymm0\r\n        vmovdqu ymmword ptr [rsp + 164], ymm0\r\n        vmovdqu ymmword ptr [rsp + 132], ymm0\r\n        vmovdqu ymmword ptr [rsp + 100], ymm0\r\n        vmovdqu ymmword ptr [rsp + 68], ymm0\r\n        lea     rax, [rsp + 4]\r\n        vmovdqu ymmword ptr [rsp + 36], ymm0\r\n        vmovdqu ymmword ptr [rsp + 4], ymm0\r\n        mov     dword ptr [rsp], 1\r\n        lea     rcx, [rsp + 228]\r\n        mov     r9d, 1\r\n        mov     r8d, 4\r\n        mov     r10d, 92\r\n        mov     r11, -4\r\n        xor     r15d, r15d\r\n        jmp     .LBB0_2\r\n.LBB0_1:\r\n        inc     r15\r\n        add     rcx, 4\r\n        add     r8, 4\r\n        dec     r10\r\n        add     r11, -4\r\n        add     rax, -4\r\n        cmp     r9, 100\r\n        je      .LBB0_18\r\n.LBB0_2:\r\n        mov     rsi, r9\r\n        mov     r13d, 100\r\n        sub     r13, r15\r\n        inc     r9\r\n        cmp     r13, 8\r\n        jb      .LBB0_13\r\n        lea     rdx, [rsp + 4*r13]\r\n        lea     rdi, [rsp + 4*r15]\r\n        add     rdi, 4\r\n        cmp     rdi, rdx\r\n        jb      .LBB0_13\r\n        mov     edi, 92\r\n        sub     rdi, r15\r\n        mov     rdx, rdi\r\n        shr     rdx, 3\r\n        inc     rdx\r\n        mov     r14d, edx\r\n        and     r14d, 7\r\n        cmp     rdi, 56\r\n        jae     .LBB0_6\r\n        xor     ebx, ebx\r\n        jmp     .LBB0_8\r\n.LBB0_6:\r\n        sub     rdx, r14\r\n        xor     ebx, ebx\r\n.LBB0_7:\r\n        vmovdqu ymm0, ymmword ptr [rcx + 4*rbx - 224]\r\n        vmovdqu ymm1, ymmword ptr [rcx + 4*rbx - 192]\r\n        vmovdqu ymm2, ymmword ptr [rcx + 4*rbx - 160]\r\n        vmovdqu ymm3, ymmword ptr [rcx + 4*rbx - 128]\r\n        vpaddd  ymm0, ymm0, ymmword ptr [rsp + 4*rbx]\r\n        vmovdqu ymmword ptr [rcx + 4*rbx - 224], ymm0\r\n        vpaddd  ymm0, ymm1, ymmword ptr [rsp + 4*rbx + 32]\r\n        vmovdqu ymmword ptr [rcx + 4*rbx - 192], ymm0\r\n        vpaddd  ymm0, ymm2, ymmword ptr [rsp + 4*rbx + 64]\r\n        vmovdqu ymmword ptr [rcx + 4*rbx - 160], ymm0\r\n        vpaddd  ymm0, ymm3, ymmword ptr [rsp + 4*rbx + 96]\r\n        vmovdqu ymmword ptr [rcx + 4*rbx - 128], ymm0\r\n        vmovdqu ymm0, ymmword ptr [rcx + 4*rbx - 96]\r\n        vpaddd  ymm0, ymm0, ymmword ptr [rsp + 4*rbx + 128]\r\n        vmovdqu ymmword ptr [rcx + 4*rbx - 96], ymm0\r\n        vmovdqu ymm0, ymmword ptr [rcx + 4*rbx - 64]\r\n        vpaddd  ymm0, ymm0, ymmword ptr [rsp + 4*rbx + 160]\r\n        vmovdqu ymmword ptr [rcx + 4*rbx - 64], ymm0\r\n        vmovdqu ymm0, ymmword ptr [rcx + 4*rbx - 32]\r\n        vpaddd  ymm0, ymm0, ymmword ptr [rsp + 4*rbx + 192]\r\n        vmovdqu ymmword ptr [rcx + 4*rbx - 32], ymm0\r\n        vmovdqu ymm0, ymmword ptr [rcx + 4*rbx]\r\n        vpaddd  ymm0, ymm0, ymmword ptr [rsp + 4*rbx + 224]\r\n        vmovdqu ymmword ptr [rcx + 4*rbx], ymm0\r\n        add     rbx, 64\r\n        add     rdx, -8\r\n        jne     .LBB0_7\r\n.LBB0_8:\r\n        mov     r12, r13\r\n        and     r12, -8\r\n        test    r14, r14\r\n        je      .LBB0_11\r\n        mov     edx, r10d\r\n        shr     dl, 3\r\n        inc     dl\r\n        movzx   r14d, dl\r\n        and     r14d, 7\r\n        shl     r14, 5\r\n        lea     rbx, [rsp + 4*rbx]\r\n        lea     rdi, [rbx + r8]\r\n        xor     edx, edx\r\n.LBB0_10:\r\n        vmovdqu ymm0, ymmword ptr [rdi + rdx]\r\n        vpaddd  ymm0, ymm0, ymmword ptr [rbx + rdx]\r\n        vmovdqu ymmword ptr [rdi + rdx], ymm0\r\n        add     rdx, 32\r\n        cmp     r14, rdx\r\n        jne     .LBB0_10\r\n.LBB0_11:\r\n        cmp     r13, r12\r\n        je      .LBB0_1\r\n        add     rsi, r12\r\n.LBB0_13:\r\n        mov     edi, 1\r\n        sub     edi, esi\r\n        mov     edx, 100\r\n        sub     rdx, rsi\r\n        and     rdi, 3\r\n        je      .LBB0_16\r\n        lea     rbx, [rsp + r11]\r\n.LBB0_15:\r\n        mov     ebp, dword ptr [rbx + 4*rsi]\r\n        add     dword ptr [rsp + 4*rsi], ebp\r\n        inc     rsi\r\n        dec     rdi\r\n        jne     .LBB0_15\r\n.LBB0_16:\r\n        cmp     rdx, 3\r\n        jb      .LBB0_1\r\n.LBB0_17:\r\n        mov     edx, dword ptr [rax + 4*rsi - 8]\r\n        add     dword ptr [rsp + 4*rsi], edx\r\n        mov     edx, dword ptr [rax + 4*rsi - 4]\r\n        add     dword ptr [rsp + 4*rsi + 4], edx\r\n        mov     edx, dword ptr [rax + 4*rsi]\r\n        add     dword ptr [rsp + 4*rsi + 8], edx\r\n        mov     edx, dword ptr [rax + 4*rsi + 4]\r\n        add     dword ptr [rsp + 4*rsi + 12], edx\r\n        add     rsi, 4\r\n        cmp     rsi, 101\r\n        jne     .LBB0_17\r\n        jmp     .LBB0_1\r\n.LBB0_18:\r\n        mov     eax, dword ptr [rsp + 400]\r\n        add     rsp, 404\r\n        pop     rbx\r\n        pop     r12\r\n        pop     r13\r\n        pop     r14\r\n        pop     r15\r\n        pop     rbp\r\n        vzeroupper\r\n        ret\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75024/timeline", "performed_via_github_app": null, "state_reason": null}