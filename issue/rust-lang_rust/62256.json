{"url": "https://api.github.com/repos/rust-lang/rust/issues/62256", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62256/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62256/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62256/events", "html_url": "https://github.com/rust-lang/rust/issues/62256", "id": 462449197, "node_id": "MDU6SXNzdWU0NjI0NDkxOTc=", "number": 62256, "title": "compiler_fence may emit machine code", "user": {"login": "Disasm", "id": 1418749, "node_id": "MDQ6VXNlcjE0MTg3NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1418749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Disasm", "html_url": "https://github.com/Disasm", "followers_url": "https://api.github.com/users/Disasm/followers", "following_url": "https://api.github.com/users/Disasm/following{/other_user}", "gists_url": "https://api.github.com/users/Disasm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Disasm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Disasm/subscriptions", "organizations_url": "https://api.github.com/users/Disasm/orgs", "repos_url": "https://api.github.com/users/Disasm/repos", "events_url": "https://api.github.com/users/Disasm/events{/privacy}", "received_events_url": "https://api.github.com/users/Disasm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}, {"id": 1210355734, "node_id": "MDU6TGFiZWwxMjEwMzU1NzM0", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-riscv", "name": "O-riscv", "color": "6e6ec0", "default": false, "description": "Target: RISC-V architecture"}, {"id": 4434017660, "node_id": "LA_kwDOAAsO6M8AAAABCEm9fA", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-atomic", "name": "A-atomic", "color": "f7e101", "default": false, "description": "Area: atomics, barriers, and sync primitives"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-06-30T21:36:18Z", "updated_at": "2022-08-17T06:40:38Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As discovered [there](https://github.com/rust-embedded/wg/issues/361#issuecomment-505146286) `compiler_fence` produces `atomic_fence(ordering, SingleThread)` construction, which in turn can produce a non-empty code sequence. In fact, LLVM backends for AVR, PowerPC, RISC-V and Spark do not treat SingleThread fence as something special. At the same time Rust [docs](https://doc.rust-lang.org/std/sync/atomic/fn.compiler_fence.html) tell that \"compiler_fence does not emit any machine code\".\r\nSeems like Rust misuses this \"SingleThread means CompilerBarrier\" semantics, but I could be wrong.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62256/timeline", "performed_via_github_app": null, "state_reason": null}