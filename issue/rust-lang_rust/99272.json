{"url": "https://api.github.com/repos/rust-lang/rust/issues/99272", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99272/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99272/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99272/events", "html_url": "https://github.com/rust-lang/rust/issues/99272", "id": 1305745548, "node_id": "I_kwDOAAsO6M5N1BiM", "number": 99272, "title": "Uplift `clippy::for_loops_over_fallibles` to `rustc`", "user": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2022-07-15T08:32:53Z", "updated_at": "2022-10-10T12:09:37Z", "closed_at": "2022-10-10T12:09:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "@jyn514 showed an interesting bug:\r\n\r\n```rust\r\nfor x in rx.recv().await {\r\n    // ...\r\n}\r\n```\r\n\r\nThe sneaky bug is that `rx.recv().await` returns an `Option` and `Option` implements `IntoIterator`. So instead of calling `rx.recv().await` repeatedly until it returns `None` (intended usage), this calls it once and executes the loop body if it's `Some(x)`.\r\n\r\nThis can easily be written by a newcomer or even an experienced user, it compiles and does an unexpected thing. This is especially easy to write with `async` code since we don't have `async` version of `for` loop and `while let` is commonly used instead. `Option: IntoIterator` is useful in generic code or with iterator combinators (e.g. `.chain(opt)`), but I think using it in a `for` loop is never intended.\r\n\r\nClippy has a lint for that: [`for_loops_over_fallibles`](https://rust-lang.github.io/rust-clippy/master/index.html#for_loops_over_fallibles) which, in my opinion, should be uplifted to `rustc`. \r\n\r\nClippy currently only suggests using `if let Some` (i.e. preserving code behavior), but we could also suggest using `while let Some` (i.e. changing code behavior, in `recv` case to the good) and, in case of `for x in i.next()` we can suggest `for x in i` (iterator specific fix).\r\n\r\n----\r\n\r\nI'm willing to work on this, but want to first get a signoff that we indeed want to uplift the lint :)\r\n\r\n@rustbot label +A-lint +T-compiler +D-newcomer-roadblock", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99272/reactions", "total_count": 6, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 6, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99272/timeline", "performed_via_github_app": null, "state_reason": "completed"}