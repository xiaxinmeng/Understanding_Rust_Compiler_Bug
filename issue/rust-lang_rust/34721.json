{"url": "https://api.github.com/repos/rust-lang/rust/issues/34721", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/34721/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/34721/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/34721/events", "html_url": "https://github.com/rust-lang/rust/issues/34721", "id": 164507437, "node_id": "MDU6SXNzdWUxNjQ1MDc0Mzc=", "number": 34721, "title": "mismatches types [E0308] doesn't offer enough information to fix the error", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 693664741, "node_id": "MDU6TGFiZWw2OTM2NjQ3NDE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mentor", "name": "E-needs-mentor", "color": "02e10c", "default": false, "description": "Call for participation: This issue is in need of a mentor."}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-07-08T10:58:32Z", "updated_at": "2019-01-25T03:57:46Z", "closed_at": "2019-01-25T03:57:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I get an error message like this:\r\n\r\n``` shell\r\nsrc/x86/bmi2/mod.rs:51:35: 51:36 error: mismatched types [E0308]\r\nsrc/x86/bmi2/mod.rs:51         unsafe { intrinsics::bzhi(x, bit_position) }\r\n                                                         ^\r\nsrc/x86/bmi2/mod.rs:51:35: 51:36 help: run `rustc --explain E0308` to see a detailed explanation\r\nsrc/x86/bmi2/mod.rs:51:35: 51:36 note: expected type `()`\r\nsrc/x86/bmi2/mod.rs:51:35: 51:36 note:    found type `T`\r\n```\r\n\r\nThis tells me \"what the error is\", but gives me too little context (or no context at all) to actually solve it: I have to go to the `intrinsics` module, find the `bzhi` function, read its signature, and in my case, I end up baffled because it actually takes a `T` (so the `expected type ()` makes no sense). \r\n\r\nI still haven't figured out what is going on, but it would be good if when rustc detects a type error when calling a function, it would not only tell me where the error is, which type i am passing, and what type is expected, but where exactly the function is and what's its complete signature so that if needed I know where to go to read up the comments. Probably the real error here is that I am calling a function with the same name but from a different module, so it might be even better if rustc would check all functions in all modules in scope for functions with the same name and the type signature I am passing it and make a suggestion like \"did you meant to call the `bzhi` function from the `bar` module instead?\".\r\n\r\nIn particular the next error is a type error on the second function argument, so it would be even better if rustc could collapse these two errors into one.\r\n\r\n---\r\n\r\nEDIT: An example of the error is given here:\r\n\r\nhttps://play.rust-lang.org/?gist=841b50e5845c61f2a1ebfd141673c151&version=nightly&backtrace=0\r\n\r\nwhere the following error message is not very helpful:\r\n\r\n```shell\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:21:14\r\n   |\r\n21 |     bar::bar(x.zero())\r\n   |              ^^^^^^^^ expected (), found type parameter\r\n   |\r\n   = note: expected type `()`\r\n              found type `T`\r\n   = help: here are some functions which might fulfill your needs:\r\n           - .zero()\r\n\r\n```\r\n\r\nIn particular the ` expected (), found type parameter T` is very misleading.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/34721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/34721/timeline", "performed_via_github_app": null, "state_reason": "completed"}