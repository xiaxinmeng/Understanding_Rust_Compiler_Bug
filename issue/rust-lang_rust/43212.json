{"url": "https://api.github.com/repos/rust-lang/rust/issues/43212", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43212/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43212/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43212/events", "html_url": "https://github.com/rust-lang/rust/issues/43212", "id": 242661669, "node_id": "MDU6SXNzdWUyNDI2NjE2Njk=", "number": 43212, "title": "Building with LTO should skip \"compilation\"", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-07-13T10:52:14Z", "updated_at": "2020-05-06T23:31:42Z", "closed_at": "2020-05-06T23:31:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See #43211 for some horrorifying timings from doing LTO builds in Firefox.\r\n\r\nPlease correct me where I'm wrong, but here is my understanding of the situation wrt building with LTO (and more or less confirmed by @alexcrichton and @mbrubeck on irc):\r\n- Cargo starts building all dependencies\r\n- For each dependency, the rust compiler creates an rlib\r\n- The rlib contains compiled code for the crate, as well as metadata about the crate.\r\n- When linking the main crate with LTO, the rust compiler uses the metadata from the dependee's rlibs, and compiles based on that and the code in the current crate. As I understand it, at this point, all the code that was compiled and put in those rlibs **is not used**.\r\n\r\nIn simplified and C/C++ terms, this is my understanding of what's happening:\r\n- Let's say we have a `test.c` that is built in a libtest library, and linked with `foo.c` into a foo binary.\r\n- The libtest library is generated with:\r\n  - `gcc -o test.o -c test.c -O3` that's the compiled code part\r\n  - `gcc -o test.lto.o -c test.c -O3 -flto` that's the metadata used for LTO\r\n  - `gcc-ar cr libtest.a test.lto.o test.o`\r\n- The code for the main binary is generated with:\r\n  - `gcc -o foo.lto.o -c foo.c -O3 -flto`\r\n  - (maybe rust even compiles the code here too? like `gcc -o foo.o -c foo.c -O3`)\r\n  - `gcc -flto -o foo foo.lto.o libtest.a`\r\n\r\nIn the above, the fact is, if libtest.a only contained test.lto.o, the foo binary would still compile fine, because the compiled code is not used. Which means we've spent time generating that test.o for nothing.\r\n\r\nNow, consider a crate like geckoservo, which, while it contains 3Kloc, you wouldn't expect to require the time it takes to build (it's well above a minute). @mbrubeck suggested that compiling the crate inlines a bunch of stuff. Which is probably what is happening. Except that seems completely irrelevant and wasted time, considering it will have to do it all again when linking the entire project.\r\n\r\nFWIW, the -Ztime-passes output with last 1.20 nightly, for geckoservo looks like:\r\n```\r\ntime: 0.011; rss: 32MB  parsing\r\ntime: 0.000; rss: 32MB  recursion limit\r\ntime: 0.000; rss: 32MB  crate injection\r\ntime: 0.000; rss: 32MB  plugin loading\r\ntime: 0.000; rss: 32MB  plugin registration\r\ntime: 0.243; rss: 134MB expansion\r\ntime: 0.000; rss: 134MB maybe building test harness\r\ntime: 0.000; rss: 134MB maybe creating a macro crate\r\ntime: 0.000; rss: 134MB checking for inline asm in case the target doesn't support it\r\ntime: 0.001; rss: 134MB early lint checks\r\ntime: 0.000; rss: 134MB AST validation\r\ntime: 0.015; rss: 137MB name resolution\r\ntime: 0.001; rss: 137MB complete gated feature checking\r\ntime: 0.005; rss: 140MB lowering ast -> hir\r\ntime: 0.001; rss: 138MB indexing hir\r\ntime: 0.000; rss: 138MB attribute checking\r\ntime: 0.000; rss: 135MB language item collection\r\ntime: 0.001; rss: 135MB lifetime resolution\r\ntime: 0.000; rss: 135MB looking for entry point\r\ntime: 0.000; rss: 135MB looking for plugin registrar\r\ntime: 0.000; rss: 135MB loop checking\r\ntime: 0.000; rss: 135MB static item recursion checking\r\ntime: 0.016; rss: 136MB compute_incremental_hashes_map\r\ntime: 0.000; rss: 136MB load_dep_graph\r\ntime: 0.000; rss: 136MB stability index\r\ntime: 0.002; rss: 136MB stability checking\r\ntime: 0.004; rss: 137MB type collecting\r\ntime: 0.000; rss: 137MB impl wf inference\r\ntime: 0.000; rss: 137MB coherence checking\r\ntime: 0.000; rss: 137MB variance testing\r\ntime: 0.009; rss: 138MB wf checking\r\ntime: 0.009; rss: 140MB item-types checking\r\ntime: 0.366; rss: 185MB item-bodies checking\r\ntime: 0.024; rss: 185MB const checking\r\ntime: 0.002; rss: 186MB privacy checking\r\ntime: 0.001; rss: 186MB intrinsic checking\r\ntime: 0.000; rss: 186MB effect checking\r\ntime: 0.005; rss: 186MB match checking\r\ntime: 0.001; rss: 186MB liveness checking\r\ntime: 0.076; rss: 193MB borrow checking\r\ntime: 0.000; rss: 193MB reachability checking\r\ntime: 0.001; rss: 193MB death checking\r\ntime: 0.000; rss: 193MB unused lib feature checking\r\ntime: 0.011; rss: 193MB lint checking\r\ntime: 0.000; rss: 193MB resolving dependency formats\r\n  time: 0.009; rss: 194MB       write metadata\r\n  time: 0.569; rss: 279MB       translation item collection\r\n  time: 0.041; rss: 298MB       codegen unit partitioning\r\n  time: 0.022; rss: 748MB       internalize symbols\r\ntime: 6.012; rss: 748MB translation\r\ntime: 0.000; rss: 748MB assert dep graph\r\ntime: 0.000; rss: 748MB serialize dep graph\r\n  time: 4.810; rss: 712MB       llvm function passes [0]\r\n  time: 79.068; rss: 958MB      llvm module passes [0]\r\n  time: 21.767; rss: 929MB      codegen passes [0]\r\n  time: 0.001; rss: 929MB       codegen passes [0]\r\ntime: 107.035; rss: 929MB       LLVM passes\r\ntime: 0.000; rss: 929MB serialize work products\r\n```\r\n\r\ne.g. most of the time is in llvm module and codegen passes.\r\n\r\nCc: @froydnj @rillian ", "closed_by": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43212/timeline", "performed_via_github_app": null, "state_reason": "completed"}