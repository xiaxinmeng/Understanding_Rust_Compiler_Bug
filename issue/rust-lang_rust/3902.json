{"url": "https://api.github.com/repos/rust-lang/rust/issues/3902", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3902/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3902/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3902/events", "html_url": "https://github.com/rust-lang/rust/issues/3902", "id": 8043099, "node_id": "MDU6SXNzdWU4MDQzMDk5", "number": 3902, "title": "Unable to infer trait's type parameter when using static method of trait", "user": {"login": "burg", "id": 70680, "node_id": "MDQ6VXNlcjcwNjgw", "avatar_url": "https://avatars.githubusercontent.com/u/70680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burg", "html_url": "https://github.com/burg", "followers_url": "https://api.github.com/users/burg/followers", "following_url": "https://api.github.com/users/burg/following{/other_user}", "gists_url": "https://api.github.com/users/burg/gists{/gist_id}", "starred_url": "https://api.github.com/users/burg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burg/subscriptions", "organizations_url": "https://api.github.com/users/burg/orgs", "repos_url": "https://api.github.com/users/burg/repos", "events_url": "https://api.github.com/users/burg/events{/privacy}", "received_events_url": "https://api.github.com/users/burg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2012-11-01T20:58:41Z", "updated_at": "2014-12-30T16:02:02Z", "closed_at": "2014-12-30T10:42:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following should compile correctly AFAIK, but the type parameter isn't being properly inferred. \n## Updated Testcase\n\n``` rust\nuse std::io::println;\n\nmod base {\n    pub trait HasNew<T> {\n        #[cfg(buggy)]\n        fn new() -> T;\n        #[cfg(fixed)]\n        fn new() -> Self; // (see niko's first comment in ticket)\n    }\n\n    #[deriving(Show)]\n    pub struct Foo {\n        dummy: (),\n    }\n\n    impl HasNew<Foo> for Foo {\n        fn new() -> Foo {\n            Foo { dummy: () }\n        }\n    }\n\n    pub struct Bar {\n        dummy: (),\n    }\n\n    impl HasNew<Bar> for Bar {\n        fn new() -> Bar {\n            Bar { dummy: () }\n        }\n    }\n}\n\nfn main() {\n    // 1. You cannot say this:\n    // let f: base::Foo = base::HasNew<base::Foo>::new();\n\n    // 2. There are discussions to provide some way to say\n    // something like this (see Issue 6894):\n    // let f: base::Foo = base::HasNew<base::Foo, for base::Foo>::new();\n\n    // 3. But for now, one must rely on the type inference system\n    // to feed the appropriate type via the expression context in which\n    // the invocation of `new` occurs:\n    let f: base::Foo = base::HasNew::new();\n    println(format!(\"{}\", f).as_slice());\n}\n```\n## Original Outdated Testcase\n\n```\nmod base {\n    trait HasNew<T> {\n        static pure fn new() -> T;\n    }\n\n    pub struct Foo {\n        dummy: (),\n    }\n\n    pub impl Foo : HasNew<Foo> {\n        static pure fn new() -> Foo {\n            Foo { dummy: () }\n        }\n    }\n\n    pub struct Bar {\n        dummy: (),\n    }\n\n    pub impl Bar : HasNew<Bar> {\n        static pure fn new() -> Bar {\n            Bar { dummy: () }\n        }\n    }\n}\n\nfn main() {\n    let f: base::Foo = base::new::<base::Foo, base::Foo>();\n    debug!(\"%?\", f);\n}\n```\n## Error\n\n```\n% rustc --cfg buggy /tmp/base.rs\n/tmp/base.rs:42:23: 42:40 error: cannot determine a type for this bounded type parameter: unconstrained type\n/tmp/base.rs:42     let f: base::Foo = base::HasNew::new();\n                                       ^~~~~~~~~~~~~~~~~\n\n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3902/timeline", "performed_via_github_app": null, "state_reason": "completed"}