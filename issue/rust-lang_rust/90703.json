{"url": "https://api.github.com/repos/rust-lang/rust/issues/90703", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90703/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90703/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90703/events", "html_url": "https://github.com/rust-lang/rust/issues/90703", "id": 1047711746, "node_id": "I_kwDOAAsO6M4-ctAC", "number": 90703, "title": "rustdoc: cannot resolve links to associated trait items for primitives", "user": {"login": "classabbyamp", "id": 5366828, "node_id": "MDQ6VXNlcjUzNjY4Mjg=", "avatar_url": "https://avatars.githubusercontent.com/u/5366828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/classabbyamp", "html_url": "https://github.com/classabbyamp", "followers_url": "https://api.github.com/users/classabbyamp/followers", "following_url": "https://api.github.com/users/classabbyamp/following{/other_user}", "gists_url": "https://api.github.com/users/classabbyamp/gists{/gist_id}", "starred_url": "https://api.github.com/users/classabbyamp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/classabbyamp/subscriptions", "organizations_url": "https://api.github.com/users/classabbyamp/orgs", "repos_url": "https://api.github.com/users/classabbyamp/repos", "events_url": "https://api.github.com/users/classabbyamp/events{/privacy}", "received_events_url": "https://api.github.com/users/classabbyamp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1118567289, "node_id": "MDU6TGFiZWwxMTE4NTY3Mjg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-intra-doc-links", "name": "A-intra-doc-links", "color": "f7e101", "default": false, "description": "Area: Intra-doc links, the ability to link to items in docs by name"}], "state": "closed", "locked": false, "assignee": {"login": "mdibaiee", "id": 2807772, "node_id": "MDQ6VXNlcjI4MDc3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2807772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdibaiee", "html_url": "https://github.com/mdibaiee", "followers_url": "https://api.github.com/users/mdibaiee/followers", "following_url": "https://api.github.com/users/mdibaiee/following{/other_user}", "gists_url": "https://api.github.com/users/mdibaiee/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdibaiee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdibaiee/subscriptions", "organizations_url": "https://api.github.com/users/mdibaiee/orgs", "repos_url": "https://api.github.com/users/mdibaiee/repos", "events_url": "https://api.github.com/users/mdibaiee/events{/privacy}", "received_events_url": "https://api.github.com/users/mdibaiee/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mdibaiee", "id": 2807772, "node_id": "MDQ6VXNlcjI4MDc3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2807772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdibaiee", "html_url": "https://github.com/mdibaiee", "followers_url": "https://api.github.com/users/mdibaiee/followers", "following_url": "https://api.github.com/users/mdibaiee/following{/other_user}", "gists_url": "https://api.github.com/users/mdibaiee/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdibaiee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdibaiee/subscriptions", "organizations_url": "https://api.github.com/users/mdibaiee/orgs", "repos_url": "https://api.github.com/users/mdibaiee/repos", "events_url": "https://api.github.com/users/mdibaiee/events{/privacy}", "received_events_url": "https://api.github.com/users/mdibaiee/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2021-11-08T17:22:38Z", "updated_at": "2022-01-06T18:48:47Z", "closed_at": "2022-01-06T18:48:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse std::{num::ParseFloatError, str::FromStr};\r\n\r\n/// Uses the rules from [`f64::from_str()`].\r\npub struct Number {\r\n    pub value: f64,\r\n}\r\n\r\nimpl FromStr for Number {\r\n    type Err = ParseFloatError;\r\n\r\n    fn from_str(s: &str) -> Result<Self, Self::Err> {\r\n        let value = s.parse::<f64>()?;\r\n        Ok(Self{value})\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: the `[f64::from_str()]` in the docstring links to https://doc.rust-lang.org/1.56.0/std/primitive.f64.html#method.from_str\r\n\r\nInstead, this happened:\r\n\r\n```\r\ncargo doc\r\n Documenting cayenne v0.1.0 (/home/abi/projects/classabbyamp/rspice)\r\nwarning: unresolved link to `f64::from_str`\r\n --> src/v.rs:3:27\r\n  |\r\n3 | /// Uses the rules from [`f64::from_str()`].\r\n  |                           ^^^^^^^^^^^^^^^ the builtin type `f64` has no function named `from_str`\r\n  |\r\n  = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\r\n\r\nwarning: `cayenne` (lib doc) generated 1 warning\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.34s\r\n```\r\n\r\nThis does not happen for `[f64::floor()]` nor for linking to a non-primitive `FromStr` implmentation, like `[Number::from_str()]` (in the example above).\r\n\r\n@jyn514 suggested that [`resolve_primitive_associated_item()`](https://github.com/rust-lang/rust/blob/495322d776fd6f679cd8cd4ca02b8fa834da654b/src/librustdoc/passes/collect_intra_doc_links.rs#L366) may be only looking at inherent impls and not trait impls, and that it may need a call to [`resolve_associated_trait_item()`](https://github.com/rust-lang/rust/blob/495322d776fd6f679cd8cd4ca02b8fa834da654b/src/librustdoc/passes/collect_intra_doc_links.rs#L729).\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.56.0 (09c42c458 2021-10-18)\r\nbinary: rustc\r\ncommit-hash: 09c42c45858d5f3aedfa670698275303a3d19afa\r\ncommit-date: 2021-10-18\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.56.0\r\nLLVM version: 13.0.0\r\n```\r\nReproduced on beta:\r\n```\r\nrustc 1.57.0-beta.3 (708d57e28 2021-11-01)\r\nbinary: rustc\r\ncommit-hash: 708d57e288d051a6238ed56039ffeac158e10e84\r\ncommit-date: 2021-11-01\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.57.0-beta.3\r\nLLVM version: 13.0.0\r\n```\r\nand nightly:\r\n```\r\nrustc 1.58.0-nightly (46b8e7488 2021-11-07)\r\nbinary: rustc\r\ncommit-hash: 46b8e7488eae116722196e8390c1bd2ea2e396cf\r\ncommit-date: 2021-11-07\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.58.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n`RUSTC_BOOTSTRAP=1 RUSTDOC_LOG=rustdoc::passes::collect_intra_doc_links=debug cargo rustdoc -- -Dwarnings -Ztreat-err-as-bug`:\r\n\r\n```\r\n Documenting cayenne v0.1.0 (/home/classabbyamp/projects/cayenne)\r\nwarning: some trace filter directives would enable traces that are disabled statically\r\n | `rustdoc::passes::collect_intra_doc_links=debug` would enable the DEBUG level for the `rustdoc::passes::collect_intra_doc_links` target\r\n = note: the static max level is `info`\r\n = help: to enable DEBUG logging, remove the `max_level_info` feature\r\nDEBUG rustdoc::passes::collect_intra_doc_links::early doc=\" Uses the rules from [`f64::from_str()`].\"\r\nDEBUG rustdoc::passes::collect_intra_doc_links::early link.link=\"`f64::from_str()`\"\r\nDEBUG rustdoc::passes::collect_intra_doc_links looking for the `Self` type\r\nDEBUG rustdoc::passes::collect_intra_doc_links using item_name(): Some(\"cayenne\")\r\nDEBUG rustdoc::passes::collect_intra_doc_links looking for the `Self` type\r\nDEBUG rustdoc::passes::collect_intra_doc_links using item_name(): Some(\"v\")\r\nDEBUG rustdoc::passes::collect_intra_doc_links looking for the `Self` type\r\nDEBUG rustdoc::passes::collect_intra_doc_links using item_name(): Some(\"Number\")\r\nDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=Uses the rules from [`f64::from_str()`].\r\nDEBUG rustdoc::passes::collect_intra_doc_links f64::from_str resolved to Err(()) in namespace ValueNS\r\nDEBUG rustdoc::passes::collect_intra_doc_links resolved primitives F64\r\nDEBUG rustdoc::passes::collect_intra_doc_links looking for enum variant f64::from_str\r\nDEBUG rustdoc::passes::collect_intra_doc_links f64::from_str resolved to Err(()) in namespace TypeNS\r\nDEBUG rustdoc::passes::collect_intra_doc_links resolved primitives F64\r\nDEBUG rustdoc::passes::collect_intra_doc_links resolving f64::from_str as a macro in the module DefId(0:3 ~ cayenne[f5be]::v)\r\nDEBUG rustdoc::passes::collect_intra_doc_links f64 resolved to Ok(Primitive(F64)) in namespace TypeNS\r\nDEBUG rustdoc::passes::collect_intra_doc_links found partial_res=Primitive(F64)\r\nerror: unresolved link to `f64::from_str`\r\n --> src/v.rs:3:27\r\n  |\r\n3 | /// Uses the rules from [`f64::from_str()`].\r\n  |                           ^^^^^^^^^^^^^^^ the builtin type `f64` has no function named `from_str`\r\n  |\r\n  = note: `-D rustdoc::broken-intra-doc-links` implied by `-D warnings`\r\n\r\nthread 'rustc' panicked at 'aborting due to `-Z treat-err-as-bug=1`', compiler/rustc_errors/src/lib.rs:1182:27\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nerror: Unrecognized option: 'crate-version'\r\n\r\nerror: could not document `cayenne`\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustdoc --edition=2021 --crate-type lib --crate-name cayenne src/lib.rs -o /home/classabbyamp/projects/cayenne/target/doc --error-format=json --json=diagnostic-rendered-ansi -Dwarnings -Ztreat-err-as-bug -L dependency=/home/classabbyamp/projects/cayenne/target/debug/deps --crate-version 0.1.0` (exit status: 1)\r\n```\r\n\r\n</p>\r\n</details>\r\n\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"mdibaiee\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90703/timeline", "performed_via_github_app": null, "state_reason": "completed"}