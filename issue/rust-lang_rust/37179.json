{"url": "https://api.github.com/repos/rust-lang/rust/issues/37179", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37179/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37179/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37179/events", "html_url": "https://github.com/rust-lang/rust/issues/37179", "id": 183149585, "node_id": "MDU6SXNzdWUxODMxNDk1ODU=", "number": 37179, "title": "MSVC profilers attribute most time to std::panicking::try::do_call<AssertUnwindSafe<closure>,()>", "user": {"login": "vvuk", "id": 194965, "node_id": "MDQ6VXNlcjE5NDk2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/194965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvuk", "html_url": "https://github.com/vvuk", "followers_url": "https://api.github.com/users/vvuk/followers", "following_url": "https://api.github.com/users/vvuk/following{/other_user}", "gists_url": "https://api.github.com/users/vvuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvuk/subscriptions", "organizations_url": "https://api.github.com/users/vvuk/orgs", "repos_url": "https://api.github.com/users/vvuk/repos", "events_url": "https://api.github.com/users/vvuk/events{/privacy}", "received_events_url": "https://api.github.com/users/vvuk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 266005765, "node_id": "MDU6TGFiZWwyNjYwMDU3NjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows-msvc", "name": "O-windows-msvc", "color": "6e6ec0", "default": false, "description": "Toolchain: MSVC, Operating system: Windows"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2016-10-14T21:02:20Z", "updated_at": "2023-04-05T17:45:47Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While building servo with a locally-built msvc nightly rust with debug symbols (same behaviour with regular nightly binaries, the debug symbols just give a lot more useful stacks/etc. overall since names are resolved to proper demangled ones), profilers end up attributing >70% of CPU time to `std::panicking::try::do_call<AssertUnwindSafe<closure>,()>`.  They both see the call stack from `thread_start -> thread::start_thread -> __rust_maybe_catch_panic -> std::panicking:...`.\n\nIf I break in the (Visual Studio) debugger, basically every Rust-created thread has a stack that looks like this:\n\n```\n    servo.exe!net::image_cache_thread::Receivers::recv() Line 277   Unknown\n    servo.exe!net::image_cache_thread::ImageCache::run(core::option::Option<webrender_traits::api::RenderApi> core_resource_thread, ipc_channel::ipc::IpcReceiver<net_traits::image_cache_thread::ImageCacheCommand>) Line 369  Unknown\n    servo.exe!00007ff7b1b93ae9() Line 352   Unknown\n    servo.exe!00007ff7b2dfa6e0() Line 97    Unknown\n    servo.exe!alloc::boxed::{{impl}}::call_box<(),closure>(closure * self, ...) Line 595    Unknown\n    servo.exe!std::sys_common::thread::start_thread(libc::c_void * main) Line 21    Unknown\n    servo.exe!std::sys::thread::{{impl}}::new::thread_start(libc::c_void * main) Line 50    Unknown\n```\n\nor\n\n```\n    win32u.dll!NtUserGetMessage\u001e()  Unknown\n    user32.dll!GetMessageW\u001e()   Unknown\n>   servo.exe!00007ff7b2bca4b0() Line 352   Unknown\n    servo.exe!00007ff7b2dfa6e0() Line 97    Unknown\n    servo.exe!alloc::boxed::{{impl}}::call_box<(),closure>(closure * self, ...) Line 595    Unknown\n    servo.exe!std::sys_common::thread::start_thread(libc::c_void * main) Line 21    Unknown\n    servo.exe!std::sys::thread::{{impl}}::new::thread_start(libc::c_void * main) Line 50    Unknown\n```\n\nI have a whole bunch of worker threads that are showing\n\n```\n>   servo.exe!00007ff7b2009fca() Line 352   Unknown\n    servo.exe!00007ff7b2dfa6e0() Line 97    Unknown\n    servo.exe!alloc::boxed::{{impl}}::call_box<(),closure>(closure * self, ...) Line 595    Unknown\n    servo.exe!std::sys_common::thread::start_thread(libc::c_void * main) Line 21    Unknown\n    servo.exe!std::sys::thread::{{impl}}::new::thread_start(libc::c_void * main) Line 50    Unknown\n    kernel32.dll!BaseThreadInitThunk\u001e() Unknown\n    ntdll.dll!RtlUserThreadStart\u001e() Unknown\n```\n\nas their entire stack.  The \"Line 352\", on each of those unnamed functions, takes me to `panicking.rs:352`, which is the `do_call` mentioned above.  But they're also very clearly different addresses, all of which are in the `servo.exe` module (which is at 00007FF7B1A20000-00007FF7B3EEB000).  \n\nManually dumping the pdb for servo.exe and looking up the relevant offset (`0x5e9fca`) gives me:\n\n```\n00000000005e7bb0      72712 SymTagFunction        net::bluetooth_thread::BluetoothManager::start C:\\proj\\r\\servo\\components\\net\\bluetooth_thread.rs(181)\n00000000005f9890        254 SymTagFunction        net::bluetooth_thread::BluetoothManager::get_or_create_adapter C:\\proj\\r\\servo\\components\\net\\bluetooth_thread.rs(232)\n```\n\nWhich is totally reasonable and correct -- that last thread is somewhere inside the BluetoothManager's thread func.  The size -- 72712 -- also looks correct, and our address should be in the middle of it.  The source file and line number are _also_ correct!\n\nBut the tools are merging all of these things down to line 352.  I'm wondering if they're not using the PDB info for this, and the compiler/llvm is generating incorrect info in another layer?\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37179/timeline", "performed_via_github_app": null, "state_reason": null}