{"url": "https://api.github.com/repos/rust-lang/rust/issues/63006", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63006/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63006/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63006/events", "html_url": "https://github.com/rust-lang/rust/issues/63006", "id": 473300204, "node_id": "MDU6SXNzdWU0NzMzMDAyMDQ=", "number": 63006, "title": "Iterator::skip is not zero-cost in some cases (badly optimized by LLVM)", "user": {"login": "mateon1", "id": 1754784, "node_id": "MDQ6VXNlcjE3NTQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1754784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mateon1", "html_url": "https://github.com/mateon1", "followers_url": "https://api.github.com/users/mateon1/followers", "following_url": "https://api.github.com/users/mateon1/following{/other_user}", "gists_url": "https://api.github.com/users/mateon1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mateon1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mateon1/subscriptions", "organizations_url": "https://api.github.com/users/mateon1/orgs", "repos_url": "https://api.github.com/users/mateon1/repos", "events_url": "https://api.github.com/users/mateon1/events{/privacy}", "received_events_url": "https://api.github.com/users/mateon1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-07-26T10:52:35Z", "updated_at": "2023-04-04T08:59:06Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "See https://rust.godbolt.org/z/DkMgKv for full, commented source and the generated assembly.\r\n\r\n---\r\n\r\nrustc doesn't optimize the iterator `buffer.windows(size).skip(1)` well.\r\nYou can very easily outperform the Rust compiler by writing an imperative loop with a boolean flag whether the current element is the first.\r\n\r\nConsider the function:\r\n```rust\r\nfn inner_buffer_ngrams_bad<'a>(&mut self, buf: &'a [u8]) -> &'a [u8] {\r\n    let order = self.order.get() as usize; // Note: self.order is a NonZeroU8\r\n    let mut last = buf;\r\n    for win in buf.windows(order).skip(1) {\r\n        self.add_ngram(last);\r\n        last = win;\r\n    }\r\n    last // return trailing bytes to prepend to next chunk\r\n}\r\n```\r\nThe intent of this function is to iterate over `order`-sized windows of `buf` and return any unprocessed data. We specifically don't want to process the last window in the `buf`, but since there is no useful method that would allow us to split off the last element in the iterator, we instead skip the first element and create a mutable variable to lag behind by one iteration.\r\nThis implementation is correct since `self.add_ngram` ignores trailing data in a slice, so passing the whole buffer on the first iteration is fine.\r\n\r\nSadly, this implementation is extremely poorly optimized. If you graph the generated assembly you can see two weirdly-interwoven loops, **with two bounds checks** inside those loops.\r\n\r\n---\r\n\r\nReimplementing this function with a boolean flag instead of `.skip(1)` results in this code:\r\n```rust\r\nfn inner_buffer_ngrams<'a>(&mut self, buf: &'a [u8]) -> &'a [u8] {\r\n    let order = self.order.get() as usize; // Note: self.order is a NonZeroU8\r\n    let mut last = buf;\r\n    let mut is_first = true;\r\n    for win in buf.windows(order) {\r\n        if !is_first {\r\n            self.add_ngram(last);\r\n            last = win;\r\n        }\r\n        is_first = false;\r\n    }\r\n    last // return trailing bytes to prepend to next chunk\r\n}\r\n```\r\n\r\nI intentionally did as little refactoring as possible to make it obvious the code is equivalent to the previous example.\r\n\r\nThe assembly this code generates is almost three times shorter, only contains a single loop, and contains **no bounds checks**. The assembly looks like something you'd write by hand.\r\n\r\n---\r\n\r\nNote: All of the above applies to `opt-level = 2` and `opt-level = 3`. This does not apply to `opt-level = 1` since it does little to no inlining.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63006/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63006/timeline", "performed_via_github_app": null, "state_reason": null}