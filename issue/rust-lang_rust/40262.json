{"url": "https://api.github.com/repos/rust-lang/rust/issues/40262", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/40262/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/40262/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/40262/events", "html_url": "https://github.com/rust-lang/rust/issues/40262", "id": 211892717, "node_id": "MDU6SXNzdWUyMTE4OTI3MTc=", "number": 40262, "title": "if let borrow lasts too long", "user": {"login": "Xaeroxe", "id": 6182002, "node_id": "MDQ6VXNlcjYxODIwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6182002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xaeroxe", "html_url": "https://github.com/Xaeroxe", "followers_url": "https://api.github.com/users/Xaeroxe/followers", "following_url": "https://api.github.com/users/Xaeroxe/following{/other_user}", "gists_url": "https://api.github.com/users/Xaeroxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xaeroxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xaeroxe/subscriptions", "organizations_url": "https://api.github.com/users/Xaeroxe/orgs", "repos_url": "https://api.github.com/users/Xaeroxe/repos", "events_url": "https://api.github.com/users/Xaeroxe/events{/privacy}", "received_events_url": "https://api.github.com/users/Xaeroxe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-04T17:15:43Z", "updated_at": "2017-03-04T17:28:44Z", "closed_at": "2017-03-04T17:28:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following code does not compile due to this error\r\n\r\n```\r\nerror[E0502]: cannot borrow `app.sound_cache` as mutable because it is also borrowed as immutable\r\n   --> nitro/src/app.rs:347:5\r\n    |\r\n340 |     if let Some(chunk) = app.sound_cache.get(path) {\r\n    |                          --------------- immutable borrow occurs here\r\n...\r\n347 |     app.sound_cache.insert(path.to_string(), chunk);\r\n    |     ^^^^^^^^^^^^^^^ mutable borrow occurs here\r\n348 |     Ok(app.sound_cache.get(path).unwrap())\r\n349 | }\r\n    | - immutable borrow ends here\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nCode:\r\n\r\n```Rust\r\npub fn fetch_sound_chunk<'a>(app: &'a mut App, path: &str) -> Result<&'a Chunk, String> {\r\n    if let Some(chunk) = app.sound_cache.get(path) {\r\n        return Ok(chunk);\r\n    }\r\n    let mut file_path = PathBuf::from(\"assets\");\r\n    file_path.push(\"sounds\");\r\n    file_path.push(path);\r\n    let chunk = Chunk::from_file(file_path)?;\r\n    app.sound_cache.insert(path.to_string(), chunk);\r\n    Ok(app.sound_cache.get(path).unwrap())\r\n}\r\n```\r\n\r\nHowever the following code does compile using the same compiler version:\r\n\r\n```Rust\r\n/// Plays a sound at a volume between 1.0 and 0.0\r\n///\r\n/// path is a filename relative to assets/sounds (assets\\sounds on Windows)\r\npub fn play_sound(&mut self, path: &str, volume: f32) -> Result<(), String> {\r\n    if let Some(chunk) = self.sound_cache.get(path) {\r\n        let channel = Channel::all().play(chunk, 0)?;\r\n        channel.set_volume((volume * 128.0) as i32);\r\n        return Ok(());\r\n    }\r\n    let mut file_path = PathBuf::from(\"assets\");\r\n    file_path.push(\"sounds\");\r\n    file_path.push(path);\r\n    let chunk = Chunk::from_file(file_path)?;\r\n    let channel = Channel::all().play(&chunk, 0)?;\r\n    channel.set_volume((volume * 128.0) as i32);\r\n    self.sound_cache.insert(path.to_owned(), chunk);\r\n    Ok(())\r\n}\r\n```\r\nsound_cache is a HashMap<String, Chunk>\r\n\r\nBoth of these use if let in the same way but one results in a compiler error and the other works fine.  In the first example the borrow lasts until the end of the function while in the second example the borrow lasts until the end of the if let.\r\n\r\nI expected: The if let from the first sample to terminate its borrow at the end of the if let.\r\n\r\nWhat actually happened: The if let from the first sample maintains its borrow through to the end of the function.\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\n\r\nrustc 1.15.1 (021bd294c 2017-02-08)\r\nbinary: rustc\r\ncommit-hash: 021bd294c039bd54aa5c4aa85bcdffb0d24bc892\r\ncommit-date: 2017-02-08\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.15.1\r\nLLVM version: 3.9\r\n", "closed_by": {"login": "Xaeroxe", "id": 6182002, "node_id": "MDQ6VXNlcjYxODIwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6182002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xaeroxe", "html_url": "https://github.com/Xaeroxe", "followers_url": "https://api.github.com/users/Xaeroxe/followers", "following_url": "https://api.github.com/users/Xaeroxe/following{/other_user}", "gists_url": "https://api.github.com/users/Xaeroxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xaeroxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xaeroxe/subscriptions", "organizations_url": "https://api.github.com/users/Xaeroxe/orgs", "repos_url": "https://api.github.com/users/Xaeroxe/repos", "events_url": "https://api.github.com/users/Xaeroxe/events{/privacy}", "received_events_url": "https://api.github.com/users/Xaeroxe/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/40262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/40262/timeline", "performed_via_github_app": null, "state_reason": "completed"}