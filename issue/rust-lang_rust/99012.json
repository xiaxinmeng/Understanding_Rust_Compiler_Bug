{"url": "https://api.github.com/repos/rust-lang/rust/issues/99012", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99012/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99012/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99012/events", "html_url": "https://github.com/rust-lang/rust/issues/99012", "id": 1297206558, "node_id": "I_kwDOAAsO6M5NUc0e", "number": 99012, "title": "Tracking issue for improving std::fmt::Arguments and format_args!()", "user": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 2238476604, "node_id": "MDU6TGFiZWwyMjM4NDc2NjA0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-fmt", "name": "A-fmt", "color": "f7e101", "default": false, "description": "Area: std::fmt"}], "state": "open", "locked": false, "assignee": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 23, "created_at": "2022-07-07T10:58:37Z", "updated_at": "2023-05-04T14:29:24Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Earlier this year in the libs team meeting, I presented several different ideas for alternative implementations of [`std::fmt::Arguments`](https://doc.rust-lang.org/stable/std/fmt/struct.Arguments.html) which could result in smaller binary size or higher performance. Now that #93740 is mostly done, I'll be shifting my focus to fmt::Arguments and exploring those ideas.\r\n\r\nCurrently, fmt::Arguments is the size of six pointers, and refers to three slices:\r\n\r\n- A `&'static [&'static str]` containing the literal parts around the formatting placeholders. E.g. for `\"a{}b{}c\"`, these are `[\"a\", \"b\", \"c\"]`.\r\n- A `&[&(ptr, fn_ptr)]` which is basically a `&[&dyn Display]` (but can point to `Debug` or `Hex` etc. too), pointing to the arguments. This one is not `'static`, as it points to the actual arguments to be formatted.\r\n- A `Option<&'static [FmtArgument]>`, where `FmtArgument` is a struct containing all the options like precision, width, alignment, fill character,  etc. This is unused (`None`) when all placeholders have no options, like in `\"{} {}\"`, but is used and filled in for all place holders as soon as any placeholder uses any options, like in `\"{:.5} {}\"`.\r\n\r\nHere's a visualisation of that, for a `\"a{}b{:.5}c\"` format string:\r\n\r\n![Diagram](https://user-images.githubusercontent.com/783247/177764666-647da40e-0434-4913-be12-83bffdbfcd45.svg)\r\n\r\nAn important part of this design is that most of it can be stored in `static` storage, to minimize the amount of work that a function that needs to create/pass a fmt::Arguments needs to do. It can just refer to the static data, and only fill in a slice of the arguments.\r\n\r\nSome downsides:\r\n - A fmt::Arguments is still relatively big (six pointers in size), and not a great type to pass by value. It could be just two pointers in size (one to static data, one to dynamic data), such that it fits in a register pair.\r\n - It costs quite a lot of static storage for some simple format strings. For example, `\"a{}b{}c\"` needs a `&[\"a\", \"b\", \"c\"]`, which is stored in memory as a (ptr, size) pair referencing three (ptr, size) pairs referencing one byte each, which is a lot of overhead. Small string literals with just a newline or a space are very common in formatting.\r\n - When even just a single formatting placeholder uses any non-standard options, such as `\"{:02x}\"`, a relatively large array with all the (mostly default) formatting options is stored for _all_ placeholders.\r\n - The non-static part that contains the pointers to the arguments contains the pointers to the relevant Display/Debug/etc. implementation as well, even though that second part is constant and could be static. (It's a bit tricky to split those, though.)\r\n - Even when formatting a simple `&str` argument with a simple `\"{}\"` placeholder, the full `Display` implementation for `&str` is pulled in, which include code for all the unused options like padding, alignment, etc.\r\n\r\nIssues like those are often reason to avoid formatting in some situations, which is a shame.\r\n\r\nNone of these things are trivial to fix, and all involve a trade off between compile time, code size, runtime performance, and implementation complexity. It's also very tricky to make these tradeoffs for many different use cases at once, as the ways in which formatting is used in a program differs vastly per type of Rust program.\r\n\r\nStill, there are many ideas that are worth exploring. It's hard to predict which one will end up being best, so this will involve several different implementations to test and benchmark.\r\n\r\nI'll explain the different ideas one by one in the comments below as I explore them.\r\n\r\n---\r\n\r\nTo do:\r\n\r\n- [x] Simplify and clean up format_args!() implementation so we can more easily work on it.\r\n    - [x] #100277\r\n    - [x] #100996\r\n    - [x] #101000\r\n    - [x] #106806\r\n    - [x] #101569\r\n    - [x] Change formatting items to lang items (part of #106745)\r\n    - [x] Remove all public exports of the lang items, after the beta 1.69 bump: https://github.com/rust-lang/rust/pull/110616\r\n    - [x] Remove the `V1` suffix from the `ArgumentV1` and `FlagV1` types: https://github.com/rust-lang/rust/pull/110766\r\n- [x] Move format args into the AST, so we can do more with it.\r\n   - [x] MCP: https://github.com/rust-lang/compiler-team/issues/541\r\n   - [x] Move to AST: #106745\r\n     - [x] Explore variation: #106770\r\n       - [x] Accidentally solve [#69455](https://github.com/rust-lang/rust/issues/69455): #106820 \r\n     - [x] Work around #106930\r\n- [x] Remove Clippy's dependence on format_args's implementation details, to allow refactoring format_args without having to fix clippy every time.\r\n   - [x] [Zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/257328-clippy/topic/format_args/near/321242198)\r\n   - [x] Update lint implementations https://github.com/rust-lang/rust-clippy/issues/10233\r\n      - [x] UselessFormat lint: https://github.com/rust-lang/rust-clippy/pull/10561\r\n      - [x] FormatArgs lints: https://github.com/rust-lang/rust-clippy/pull/10484\r\n      - [x] FormatImpl lints: https://github.com/rust-lang/rust-clippy/pull/10561\r\n      - [x] ManualAssert lint: https://github.com/rust-lang/rust-clippy/pull/10276\r\n      - [x] ExplicitWrite lint: https://github.com/rust-lang/rust-clippy/pull/10561\r\n      - [x] Write lints: https://github.com/rust-lang/rust-clippy/pull/10275\r\n      - [x] expect_fun_call lint: https://github.com/rust-lang/rust-clippy/pull/10561\r\n   - [x] Synchronize the cilppy subtree: https://github.com/rust-lang/rust/pull/110003\r\n- [x] Optimizations for format_args!() within the compiler (independent of std::fmt::Arguments)\r\n   - [x] Inlining and flattening: https://github.com/rust-lang/rust/issues/78356\r\n      - [x] Update API docs to allow this for std::fmt::Arguments::as_str(): #106823\r\n      - [x] Implementation as unstable option: https://github.com/rust-lang/rust/pull/106824\r\n      - [x] Enable it by default: https://github.com/rust-lang/rust/pull/109999\r\n      - [x] Accidentally introduce a bug: https://github.com/rust-lang/rust/issues/110769\r\n      - [ ] Fix the bug: https://github.com/rust-lang/rust/pull/110770\r\n- [ ] Optimizations for fmt::Arguments in the library\r\n   - [ ] Reduce amount of (unnecessary) fmt code pulled in\r\n      - [ ] https://github.com/rust-lang/rust/pull/104525\r\n   - [ ] Make sure `write!(f, \"literal\")` is just as efficient as `f.write_str(\"literal\")`\r\n- [ ] Experiment with various ideas for changing format_args and fmt::Arguments.\r\n   - [x] Implement and try out the closure idea. #101568\r\n     (Impact on compile time too big, because of all the extra code generation.)\r\n   - [ ] Implement and try out the \"encoded formatting instructions\" idea.\r\n      - [x] First partial attempt: #84823\r\n      - [ ] A better/complete attempt\r\n   - [ ] ... (more ideas)\r\n- [ ] Implement the winning design\r\n   - [ ] ... (?)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99012/reactions", "total_count": 36, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 28, "rocket": 6, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99012/timeline", "performed_via_github_app": null, "state_reason": null}