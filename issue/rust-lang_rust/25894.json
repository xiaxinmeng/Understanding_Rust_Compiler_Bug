{"url": "https://api.github.com/repos/rust-lang/rust/issues/25894", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/25894/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/25894/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/25894/events", "html_url": "https://github.com/rust-lang/rust/issues/25894", "id": 82717169, "node_id": "MDU6SXNzdWU4MjcxNzE2OQ==", "number": 25894, "title": "unsafe: ScopedKey allows for Sync-ification of non-Sync data", "user": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2015-05-30T06:07:01Z", "updated_at": "2015-06-16T22:13:44Z", "closed_at": "2015-06-16T22:13:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "There is an [`unsafe impl<T> Sync for KeyInner<T> { }`](https://github.com/rust-lang/rust/blob/master/src/libstd/thread/scoped_tls.rs#L196) in the scoped TLS module, which allows for sharing of data that wasn't meant to be shared.\n\nAn unqualified `unsafe impl<T> Sync for Foo { }` should _only_ be used when `Foo` provides some sort of threadsafe locking mechanism. `KeyInner` and `ScopedKey` do not.\n\nThis lets us, for example, clone an `Rc` or `RefCell` between threads, in safe code:\n\n``` rust\nscoped_thread_local!(static RC: Rc<u8>);\nfn main() {\n RC.set(&Rc::new(1), ||{\n     let y = &RC;\n     let guard = scoped(|| {\n        println!(\"Started 1\");\n        y.with(|slot|{\n            for i in 1..10 {\n                println!(\"Cloned in 1\");\n                slot.clone();\n                sleep_ms(10);\n            }\n        });\n        println!(\"Ended 1\");\n     });\n     println!(\"Started 0\");\n     y.with(|slot| {\n            for i in 1..10 {\n                println!(\"Cloned in 0\");\n                slot.clone();\n                sleep_ms(10);\n            }\n     });\n     println!(\"Ended 0\");\n     guard.join();\n });\n}\n```\n\n[playpen](http://is.gd/fhErmT)\n\nHere, we have `Rc` clones from different threads being interleaved, which can cause unsafety if there's a race on the refcount. We could also cause unsafety with a `RefCell`, or any other non-Sync type. `ScopedKey` basically lets us share `&T` across threads even if `T: !Sync`. I put the sleeps in there because somehow without them the routines are run serially.\n\nNote that this is not a problem with the `scoped()` API. I'm using `scoped()` here because to exploit `&T: Send, T:!Sync` one needs to be able to share across threads, and `Arc` has an additional `Send` bound which `ScopedKey` doesn't satisfy. Any usable `scoped` API will probably have to make the assumption that `&T: Send iff T:Sync`. Nor is this a problem with `Rc`, since it can be done with `RefCell`, too.\n\nSolution: Make it `unsafe impl<T: Sync> Sync for KeyInner<T> { }`\n\n... I think. I'm not familiar with this API, and I'm not sure why it's even `Sync` in the first place.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/25894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/25894/timeline", "performed_via_github_app": null, "state_reason": "completed"}