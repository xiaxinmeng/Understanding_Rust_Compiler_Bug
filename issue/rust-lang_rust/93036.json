{"url": "https://api.github.com/repos/rust-lang/rust/issues/93036", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93036/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93036/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93036/events", "html_url": "https://github.com/rust-lang/rust/issues/93036", "id": 1107065596, "node_id": "I_kwDOAAsO6M5B_Hr8", "number": 93036, "title": "Rust unable to optimize away assert vs. clang. ", "user": {"login": "jrmuizel", "id": 332653, "node_id": "MDQ6VXNlcjMzMjY1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/332653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrmuizel", "html_url": "https://github.com/jrmuizel", "followers_url": "https://api.github.com/users/jrmuizel/followers", "following_url": "https://api.github.com/users/jrmuizel/following{/other_user}", "gists_url": "https://api.github.com/users/jrmuizel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrmuizel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrmuizel/subscriptions", "organizations_url": "https://api.github.com/users/jrmuizel/orgs", "repos_url": "https://api.github.com/users/jrmuizel/repos", "events_url": "https://api.github.com/users/jrmuizel/events{/privacy}", "received_events_url": "https://api.github.com/users/jrmuizel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-01-18T15:47:33Z", "updated_at": "2023-04-05T17:34:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\npub fn f(arr: &mut [u32]) {\r\n    for i in 0..arr.len() {\r\n        for j in 0..i {\r\n            assert!(j < arr.len());\r\n        }\r\n    }\r\n}\r\n```\r\nRustc does not optimize away the the assert. Adding `-C passes=constraint-elimination` doesn't help.\r\n\r\nHowever, clang does optimize away this assert when compiled with `-O2 -mllvm -enable-constraint-elimination`\r\n```c\r\nvoid f(int *ptr, size_t len) {\r\n    for (size_t i = 0; i < len; i++) {\r\n            for (size_t j = 0; j < i; j++) {\r\n                assert(j < len);\r\n            }\r\n    }\r\n}\r\n```\r\n\r\nGCC is also able to remove the assert with GCC trunk.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93036/reactions", "total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93036/timeline", "performed_via_github_app": null, "state_reason": null}