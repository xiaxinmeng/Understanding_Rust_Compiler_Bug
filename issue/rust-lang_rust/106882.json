{"url": "https://api.github.com/repos/rust-lang/rust/issues/106882", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106882/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106882/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106882/events", "html_url": "https://github.com/rust-lang/rust/issues/106882", "id": 1533515272, "node_id": "I_kwDOAAsO6M5bZ5YI", "number": 106882, "title": "E0507 could perhaps suggest fixing subsequent uses if it changes T to &T", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-01-14T22:02:54Z", "updated_at": "2023-01-14T22:02:54Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "### Code\n\n```Rust\nuse std::any::TypeId;\r\nuse std::collections::HashMap;\r\nuse std::hash::Hash;\r\n\r\ntrait State {\r\n    type EventType;\r\n    fn get_type_id_of_state(&self) -> TypeId;\r\n}\r\n\r\nstruct StateMachine<EventType: Hash + Eq> {\r\n    current_state: Box<dyn State<EventType = EventType>>,\r\n    transition_table:\r\n        HashMap<TypeId, HashMap<EventType, fn() -> Box<dyn State<EventType = EventType>>>>,\r\n}\r\n\r\nimpl<EventType: Hash + Eq> StateMachine<EventType> {\r\n    fn inner_process_event(&mut self, event: EventType) -> Result<(), i8> {\r\n        let new_state_creation_function = self\r\n            .transition_table\r\n            .iter()\r\n            .find(|(&event_typeid, _)| event_typeid == self.current_state.get_type_id_of_state())\r\n            .ok_or(1)?\r\n            .1\r\n            .iter()\r\n            .find(|(&event_type, _)| event == event_type)\r\n            //~^ ERROR cannot move out of a shared reference\r\n            .ok_or(2)?\r\n            .1;\r\n\r\n        self.current_state = new_state_creation_function();\r\n        Ok(())\r\n    }\r\n}\r\n\r\nfn main() {}\n```\n\n\n### Current output\n\n```Shell\nerror[E0507]: cannot move out of a shared reference\r\n  --> src/lib.rs:25:20\r\n   |\r\n25 |             .find(|(&event_type, _)| event == event_type)\r\n   |                    ^^----------^^^^\r\n   |                      |\r\n   |                      data moved here\r\n   |                      move occurs because `event_type` has type `EventType`, which does not implement the `Copy` trait\r\n   |\r\nhelp: consider borrowing the pattern binding\r\n   |\r\n25 |             .find(|(&ref event_type, _)| event == event_type)\r\n   |                      +++\r\n\r\nFor more information about this error, try `rustc --explain E0507`.\n```\n\n\n### Desired output\n\n```Shell\nhelp: consider borrowing the pattern binding\r\n   |\r\n25 |             .find(|(&ref event_type, _)| event == *event_type)\r\n   |                      +++                          +\n```\n\n\n### Rationale and extra context\n\nApplying the suggestion will cause type mismatch in `event == event_type`, so perhaps rust could suggest borrowing/dereferencing automatically to fix that?\r\n\r\n````\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:25:51\r\n   |\r\n16 | impl<EventType: Hash + Eq> StateMachine<EventType> {\r\n   |      --------- this type parameter\r\n...\r\n25 |             .find(|(&ref event_type, _)| event == event_type)\r\n   |                                          -----    ^^^^^^^^^^ expected type parameter `EventType`, found `&EventType`\r\n   |                                          |\r\n   |                                          expected because this is `EventType`\r\n   |\r\n   = note: expected type parameter `EventType`\r\n                   found reference `&EventType`\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\n````\n\n### Other cases\n\n_No response_\n\n### Anything else?\n\n_No response_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106882/timeline", "performed_via_github_app": null, "state_reason": null}