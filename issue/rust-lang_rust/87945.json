{"url": "https://api.github.com/repos/rust-lang/rust/issues/87945", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87945/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87945/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87945/events", "html_url": "https://github.com/rust-lang/rust/issues/87945", "id": 967513119, "node_id": "MDU6SXNzdWU5Njc1MTMxMTk=", "number": 87945, "title": "Insecure behavior in std::process::Command on Windows", "user": {"login": "bk2204", "id": 497054, "node_id": "MDQ6VXNlcjQ5NzA1NA==", "avatar_url": "https://avatars.githubusercontent.com/u/497054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bk2204", "html_url": "https://github.com/bk2204", "followers_url": "https://api.github.com/users/bk2204/followers", "following_url": "https://api.github.com/users/bk2204/following{/other_user}", "gists_url": "https://api.github.com/users/bk2204/gists{/gist_id}", "starred_url": "https://api.github.com/users/bk2204/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bk2204/subscriptions", "organizations_url": "https://api.github.com/users/bk2204/orgs", "repos_url": "https://api.github.com/users/bk2204/repos", "events_url": "https://api.github.com/users/bk2204/events{/privacy}", "received_events_url": "https://api.github.com/users/bk2204/received_events", "type": "User", "site_admin": true}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 122062043, "node_id": "MDU6TGFiZWwxMjIwNjIwNDM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-security", "name": "A-security", "color": "f7e101", "default": false, "description": "Area: Security related issues (example: address space layout randomization)"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 3812066157, "node_id": "LA_kwDOAAsO6M7jN4Nt", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-process", "name": "A-process", "color": "f7e101", "default": false, "description": "Area: std::process and std::env"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2021-08-11T21:41:57Z", "updated_at": "2023-03-19T09:43:21Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "There appears to be a security vulnerability in std::process::Command, specifically on Windows.  The documentation for the `new` function states this:\r\n\r\n> If program is not an absolute path, the PATH will be searched in an OS-defined way.\r\n>\r\n> The search path to be used may be controlled by setting the PATH environment variable on the Command, but this has some implementation limitations on Windows (see issue #37519).\r\n\r\nWhat this does not say is that these implementation limitations cause the program to be executed from the current directory, even if that is not in `PATH`.  This is a vulnerability and this behavior has been known to be insecure on Unix for many years.\r\n\r\nAs a result, it is not possible to use Rust to invoke other than an absolute path when the current directory is untrusted, such as when a user is working in cloned Git repository.  Moreover, this fact is not even documented, and as such, I would reasonably expect that directories outside of `PATH` are not searched.\r\n\r\nI've attached [a tarball of a cargo project](https://github.com/rust-lang/rust/files/6971445/path-check.tar.gz) which contains two trivial programs.  To reproduce the problem, do the following:\r\n\r\n1. Open PowerShell.\r\n2. Extract the tarball.\r\n3. Change into `path-check`.\r\n4. Run `cargo build`.\r\n5. Change into `target\\debug`.\r\n6. Run `$env:Path = \"C:\\Users\\User\\.cargo\\bin\"` to set a fixed `PATH` without the current directory.\r\n6. Run `& '.\\path-check.exe'`.\r\n7. Notice that `exploit.exe` is also invoked and that its output is displayed.\r\n\r\nI used a [Windows 10 Development VM](https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/) for this purpose.  I don't habitually use Windows; I'm mostly a Linux user, so my apologies if the steps are hard to understand.\r\n\r\nI realize that the current functionality exists because Rust looks only for `.exe` files and not other types of files, and it therefore it otherwise passes files which do not exist in `PATH` to `CreateProcessW`, which has the insecure behavior.  However, just because Microsoft has designed an insecure interface does not mean Rust should permit the same behavior.\r\n\r\n[The approach that Go uses for searching for executables](https://github.com/golang/go/blob/master/src/os/exec/lp_windows.go), _other than the use of the current directory_, is generally good.  It uses `PATHEXT` (or, if absent, a hardcoded list) to look for extensions, and then considers each component in `PATH` (rejecting empty components), looking for each extension in turn.  This algorithm (with the current directory) is used by CMD, and therefore doing the same thing without the current directory would be normal and expected for Windows users, and also secure.\r\n\r\nNote that unlike on Unix, on Windows empty components in `PATH` should not be treated as the current directory.  Unfortunately, many Windows machines contain a trailing semicolon in `PATH` and as such, that would preserve insecure semantics.\r\n\r\nI originally reported this to the private security list, but it was [determined that this behavior had been discussed publicly before](https://internals.rust-lang.org/t/std-command-resolve-to-avoid-security-issues-on-windows/14800), and thus, opening an issue was appropriate.  It remains a vulnerability, and a CVE should still be issued, though.\r\n\r\nThis came to my attention because Go has the same insecure behavior and they have deliberately chosen to retain the vulnerability for compatibility, so every Go program that runs on Windows (including Git LFS, which I maintain) must contain special code to work around this.  Since Rust has already documented secure behavior (using `PATH`), all that needs to be done is actually fixing the implementation, which is less of a problem.\r\n\r\n### Meta\r\n\r\n`rustc --version`:\r\n```\r\nrustc 1.54.0 (a178d0322 2021-07-26)\r\n```\r\n\r\nI've verified that the vulnerable code exists in a recent HEAD.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87945/timeline", "performed_via_github_app": null, "state_reason": null}