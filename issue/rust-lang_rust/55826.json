{"url": "https://api.github.com/repos/rust-lang/rust/issues/55826", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55826/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55826/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55826/events", "html_url": "https://github.com/rust-lang/rust/issues/55826", "id": 379229550, "node_id": "MDU6SXNzdWUzNzkyMjk1NTA=", "number": 55826, "title": "Confusing error message when trying to implement a shared mutable state", "user": {"login": "lovasoa", "id": 552629, "node_id": "MDQ6VXNlcjU1MjYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/552629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovasoa", "html_url": "https://github.com/lovasoa", "followers_url": "https://api.github.com/users/lovasoa/followers", "following_url": "https://api.github.com/users/lovasoa/following{/other_user}", "gists_url": "https://api.github.com/users/lovasoa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovasoa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovasoa/subscriptions", "organizations_url": "https://api.github.com/users/lovasoa/orgs", "repos_url": "https://api.github.com/users/lovasoa/repos", "events_url": "https://api.github.com/users/lovasoa/events{/privacy}", "received_events_url": "https://api.github.com/users/lovasoa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-09T16:25:16Z", "updated_at": "2020-06-11T18:00:39Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Let's say I am a rust beginner coming from another language, and I want to write a simple multi-threaded program in rust.\r\n\r\nSo I write this simple function : \r\n\r\n```rust\r\nfn simple() -> u8 {\r\n    let mut x = 0;\r\n    std::thread::spawn(|| {\r\n        x += 1;\r\n    });\r\n    x += 1;\r\n    x\r\n}\r\n```\r\n\r\nOne of the selling points of rust is being able to prevent data races, so it should be able to explain in details what is wrong with this function. However, it gives a confusing error message.\r\n\r\nIt does not compile, and the compiler returns : \r\n> closure may outlive the current function, but it borrows `x`, which is owned by the current function\r\n> help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\r\n\r\nAnd if I look up the detailed error message in the error book (here: https://doc.rust-lang.org/error-index.html#E0373), it also tells me to add a `move` in front of the closure.\r\n\r\nI think this is confusing. Obviously, the right thing to do here is to use a mutex, but this is not mentioned neither in the error message, nor in the error book.\r\n\r\nMaybe the error should also say something like\r\n\r\n> If you need to use `x` both in the current function and in the closure, than you may have to use a form of [shared state concurrency](https://doc.rust-lang.org/book/second-edition/ch16-03-shared-state.html)\r\n\r\nIt would be even nicer if the compiler could detect that we are using `x` after the litigious function, and thus not talk about `move` at all.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55826/timeline", "performed_via_github_app": null, "state_reason": null}