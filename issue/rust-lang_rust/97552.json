{"url": "https://api.github.com/repos/rust-lang/rust/issues/97552", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97552/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97552/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97552/events", "html_url": "https://github.com/rust-lang/rust/issues/97552", "id": 1252770611, "node_id": "I_kwDOAAsO6M5Kq8Mz", "number": 97552, "title": "LLVM IR for generic functions sometimes fails to inline post MergeFuncs with LTO", "user": {"login": "Nils-TUD", "id": 2010758, "node_id": "MDQ6VXNlcjIwMTA3NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/2010758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nils-TUD", "html_url": "https://github.com/Nils-TUD", "followers_url": "https://api.github.com/users/Nils-TUD/followers", "following_url": "https://api.github.com/users/Nils-TUD/following{/other_user}", "gists_url": "https://api.github.com/users/Nils-TUD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nils-TUD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nils-TUD/subscriptions", "organizations_url": "https://api.github.com/users/Nils-TUD/orgs", "repos_url": "https://api.github.com/users/Nils-TUD/repos", "events_url": "https://api.github.com/users/Nils-TUD/events{/privacy}", "received_events_url": "https://api.github.com/users/Nils-TUD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2413861294, "node_id": "MDU6TGFiZWwyNDEzODYxMjk0", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-untriaged", "name": "regression-untriaged", "color": "e4008a", "default": false, "description": "Untriaged performance or correctness regression."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2022-05-30T13:49:19Z", "updated_at": "2022-11-01T20:46:38Z", "closed_at": "2022-11-01T20:46:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "For some reason, the compiler decides to not inline `Vec::deref` anymore if LTO is enabled, which ruins performance in my case. I tried to force the compiler to inline it via `-Znew-llvm-pass-manager=no -Cinline-threshold=N`, but even N=10000 (resulting in insane compile times and binary sizes) doesn't convince the compiler to inline the function. This behavior changed between Rust version 76d770ac2 (inlined) and 6af09d250 (not inlined).\r\n\r\n### Code\r\n\r\nI tried to create a more or less minimal example that reproduces the problem, which resulted in the following Rust program:\r\n\r\n```rust\r\n#[inline(never)]\r\nfn do_something(args: &Vec<String>) -> bool {\r\n    args[0] == \"test\"\r\n}\r\n\r\nfn main() {\r\n    println!(\"{}\", do_something(&std::env::args().collect::<Vec<_>>()));\r\n}\r\n```\r\n\r\nI expected to see this happen: the `Deref` implementation of `Vec` is inlined regardless of whether LTO is used or not.\r\n\r\nInstead, this happened: If LTO is enabled, the `Deref` implementation of `Vec` is not inlined. If LTO is disabled, it is inlined. That is, with LTO, the generated assembly code looks like this:\r\n\r\n```\r\n0000000000037bd0 <vec_deref_inline::do_something>:\r\n   37bd0:       50                      push   %rax\r\n   37bd1:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)\r\n   37bd6:       74 1d                   je     37bf5 <vec_deref_inline::do_something+0x25>\r\n   37bd8:       48 8b 3f                mov    (%rdi),%rdi\r\n   37bdb:       e8 30 00 00 00          call   37c10 <<alloc::vec::Vec<T,A> as core::ops::deref::Deref>::deref>\r\n   37be0:       48 83 fa 04             cmp    $0x4,%rdx\r\n   37be4:       75 0b                   jne    37bf1 <vec_deref_inline::do_something+0x21>\r\n   37be6:       81 38 74 65 73 74       cmpl   $0x74736574,(%rax)\r\n   37bec:       0f 94 c0                sete   %al\r\n   37bef:       59                      pop    %rcx\r\n   37bf0:       c3                      ret    \r\n   37bf1:       31 c0                   xor    %eax,%eax\r\n   37bf3:       59                      pop    %rcx\r\n   37bf4:       c3                      ret    \r\n   37bf5:       48 8d 15 c4 df 00 00    lea    0xdfc4(%rip),%rdx        # 45bc0 <__do_global_dtors_aux_fini_array_entry+0x1b68>\r\n   37bfc:       31 ff                   xor    %edi,%edi\r\n   37bfe:       31 f6                   xor    %esi,%esi\r\n   37c00:       e8 7b c5 fc ff          call   4180 <core::panicking::panic_bounds_check>\r\n   37c05:       0f 0b                   ud2    \r\n   37c07:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\r\n   37c0e:       00 00 \r\n\r\n0000000000037c10 <<alloc::vec::Vec<T,A> as core::ops::deref::Deref>::deref>:\r\n   37c10:       48 8b 07                mov    (%rdi),%rax\r\n   37c13:       48 8b 57 10             mov    0x10(%rdi),%rdx\r\n   37c17:       c3                      ret    \r\n```\r\n\r\n### Version it worked on\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.61.0-nightly (76d770ac2 2022-04-02)\r\nbinary: rustc\r\ncommit-hash: 76d770ac21d9521db6a92a48c7b3d5b2cc535941\r\ncommit-date: 2022-04-02\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.61.0-nightly\r\nLLVM version: 14.0.0\r\n```\r\n\r\nIn this version, `Vec::deref` is inlined in every Rust program I have (LTO=on). In the example above, it is also inlined regardless of whether LTO is used or not.\r\n\r\n### Version with regression\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.61.0-nightly (6af09d250 2022-04-03)\r\nbinary: rustc\r\ncommit-hash: 6af09d2505f38e4f1df291df56d497fb2ad935ed\r\ncommit-date: 2022-04-03\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.61.0-nightly\r\nLLVM version: 14.0.0\r\n```\r\n\r\nIn this version, `Vec::deref` is *never* inlined as it seems (LTO=on). In the example above, it is only inlined if LTO is disabled.", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97552/timeline", "performed_via_github_app": null, "state_reason": "completed"}