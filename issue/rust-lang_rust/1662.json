{"url": "https://api.github.com/repos/rust-lang/rust/issues/1662", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/1662/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/1662/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/1662/events", "html_url": "https://github.com/rust-lang/rust/issues/1662", "id": 2970646, "node_id": "MDU6SXNzdWUyOTcwNjQ2", "number": 1662, "title": "optimize message sending and/or scheduler", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 36956, "node_id": "MDU6TGFiZWwzNjk1Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-frontend", "name": "A-frontend", "color": "f7e101", "default": false, "description": "Area: frontend (errors, parsing and HIR)"}, {"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/5", "html_url": "https://github.com/rust-lang/rust/milestone/5", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/5/labels", "id": 75280, "node_id": "MDk6TWlsZXN0b25lNzUyODA=", "number": 5, "title": "0.2 release, detail work, cleanup and performance", "description": "", "creator": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 61, "state": "closed", "created_at": "2012-01-20T02:48:39Z", "updated_at": "2013-03-14T18:46:37Z", "due_on": "2012-03-23T07:00:00Z", "closed_at": "2012-03-29T03:54:45Z"}, "comments": 8, "created_at": "2012-01-25T20:13:16Z", "updated_at": "2012-02-03T20:15:39Z", "closed_at": "2012-02-03T20:15:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently the performance of message sending is not very good.  @pcwalton @brson and I have been discussing a possible design and this is what we have so far.  Feedback welcome.\n## Basic idea\n- Channels become a built-in type (for now) probably called `__chan` with an alias.\n- Ports and channels are both, in fact, pointers to a C struct layed out roughly like so:\n  \n  ```\n  struct port_chan {\n      int port_ref_count; // non-atomically maintained\n      int chan_ref_count; // atomically maintained\n      spinlock_t lock;\n      task_t *task;\n      void *queue_data;\n  };\n  ```\n- When you copy a channel, you increment the chan_ref_count atomically.\n- When you copy a port, you increment the port ref count non-atomically.\n- When the port ref count reaches 0, the port is \"tombstoned:\" the queue data is freed and the hold on the task is released.\n- When both port and channel ref reach 0, the port is freed altogether.\n## Possible danger:\n- The tombstone is not freed until all channels go away.  In principle some task could accumulate a lot of channels and never release them?  But it's not a very big allocation so perhaps this is not a big concern.\n## Possible future optimizations:\n- If the atomic ref counts become a perf. hit, then we can represent channels as an additional per-task structure which is non-atomically ref counted but holds a single atomic ref on the `port_chan`.  Downside is that we have to have a `send_glue` (or perhaps implement using shape code _shudder_) because we need to inc. atomic ref count only on sends (and dec on free).\n- For now, we allocate a fixed-size queue.  We can optimize this to have it start small---perhaps use tagged pointers so that the first send doesn't need to allocate at all.  This is based on an intution that many port/chan pairs are used exactly once.\n- The \"L4\" optimization: make a send_recv primitive and try to convert RPC-like calls into a context switch into the recipient task.  This deserves its own bug and its own discussion.\n## Next steps\n- Look into what other similar open source projects do.\n- Then, assuming no great alternatives present themselves, implement.\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/1662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/1662/timeline", "performed_via_github_app": null, "state_reason": "completed"}