{"url": "https://api.github.com/repos/rust-lang/rust/issues/53771", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53771/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53771/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53771/events", "html_url": "https://github.com/rust-lang/rust/issues/53771", "id": 354888600, "node_id": "MDU6SXNzdWUzNTQ4ODg2MDA=", "number": 53771, "title": "NLL regresses diagnostic for impl-trait/static-return-lifetime-infered.rs", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}, {"id": 867465998, "node_id": "MDU6TGFiZWw4Njc0NjU5OTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-diagnostics", "name": "NLL-diagnostics", "color": "f799ea", "default": false, "description": "Working torwads the \"diagnostic parity\" goal"}], "state": "closed", "locked": false, "assignee": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-08-28T20:21:08Z", "updated_at": "2018-09-18T09:06:53Z", "closed_at": "2018-09-18T09:06:53Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Consider this code from `static-return-lifetime-infered.rs` ([play](https://play.rust-lang.org/?gist=cbfe263081bc7057e820e96ef10e60c3&version=nightly&mode=debug&edition=2015)):\r\n\r\n```rust\r\n// #![feature(nll)]\r\n\r\nstruct A {\r\n    x: [(u32, u32); 10]\r\n}\r\n\r\nimpl A {\r\n    fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\r\n        self.x.iter().map(|a| a.0)\r\n    }\r\n    //~^^ ERROR cannot infer an appropriate lifetime\r\n    fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\r\n        self.x.iter().map(|a| a.0)\r\n    }\r\n    //~^^ ERROR cannot infer an appropriate lifetime\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nPart of the diagnostic info you get is this useful help message:\r\n\r\n```\r\nhelp: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 8:5\r\n  |\r\n8 |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\r\n  |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\n----\r\n\r\nUnfortunately, under `#![feature(nll)]`, we fail to produce that help diagnostic ([play](https://play.rust-lang.org/?gist=cbfe263081bc7057e820e96ef10e60c3&version=nightly&mode=debug&edition=2015)):\r\n\r\n```\r\nerror: unsatisfied lifetime constraints\r\n --> src/main.rs:9:9\r\n  |\r\n8 |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\r\n  |                         - let's call the lifetime of this reference `'1`\r\n9 |         self.x.iter().map(|a| a.0)\r\n  |         ^^^^^^^^^^^^^ requires that `'1` must outlive `'static`\r\n\r\nerror: unsatisfied lifetime constraints\r\n  --> src/main.rs:13:9\r\n   |\r\n12 |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\r\n   |                    -- lifetime `'a` defined here\r\n13 |         self.x.iter().map(|a| a.0)\r\n   |         ^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\r\n\r\nerror: aborting due to 2 previous errors\r\n```\r\n\r\n----\r\n\r\n\"Luckily\", this does not need to be a high priority issue for us to resolve, because in the special \"migration\" mode for NLL (which you can observe today by opting into the 2018 edition), we *do* produce the help message ([play](https://play.rust-lang.org/?gist=072848d3037949a17fdcb741daba5305&version=nightly&mode=debug&edition=2018)):\r\n\r\n```\r\nerror: cannot infer an appropriate lifetime\r\n --> src/main.rs:9:16\r\n  |\r\n8 |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\r\n  |                                   ----------------------- this return type evaluates to the `'static` lifetime...\r\n9 |         self.x.iter().map(|a| a.0)\r\n  |         ------ ^^^^\r\n  |         |\r\n  |         ...but this borrow...\r\n  |\r\nnote: ...can't outlive the anonymous lifetime #1 defined on the method body at 8:5\r\n --> src/main.rs:8:5\r\n  |\r\n8 | /     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\r\n9 | |         self.x.iter().map(|a| a.0)\r\n10| |     }\r\n  | |_____^\r\nhelp: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 8:5\r\n  |\r\n8 |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\r\n  |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: cannot infer an appropriate lifetime\r\n  --> src/main.rs:13:16\r\n   |\r\n12 |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\r\n   |                                     ----------------------- this return type evaluates to the `'static` lifetime...\r\n13 |         self.x.iter().map(|a| a.0)\r\n   |         ------ ^^^^\r\n   |         |\r\n   |         ...but this borrow...\r\n   |\r\nnote: ...can't outlive the lifetime 'a as defined on the method body at 12:20\r\n  --> src/main.rs:12:20\r\n   |\r\n12 |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\r\n   |                    ^^\r\nhelp: you can add a constraint to the return type to make it last less than `'static` and match the lifetime 'a as defined on the method body at 12:20\r\n   |\r\n12 |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\r\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to 2 previous errors\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53771/timeline", "performed_via_github_app": null, "state_reason": "completed"}