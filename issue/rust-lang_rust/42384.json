{"url": "https://api.github.com/repos/rust-lang/rust/issues/42384", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42384/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42384/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42384/events", "html_url": "https://github.com/rust-lang/rust/issues/42384", "id": 233250985, "node_id": "MDU6SXNzdWUyMzMyNTA5ODU=", "number": 42384, "title": "refactor `used_mut_nodes` result", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 419557634, "node_id": "MDU6TGFiZWw0MTk1NTc2MzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-medium", "name": "E-medium", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Medium / intermediate"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-06-02T17:36:31Z", "updated_at": "2017-10-16T06:40:18Z", "closed_at": "2017-10-16T06:40:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "At present, when you run borrowck, it also has the side-effect of modifying the `used_mut_nodes` set in the `tcx`:\r\n\r\n```rust\r\n    /// Set of nodes which mark locals as mutable which end up getting used at\r\n    /// some point. Local variable definitions not in this set can be warned\r\n    /// about.\r\n    pub used_mut_nodes: RefCell<NodeSet>,\r\n```\r\n\r\nThis set is used later by the lint machinery: any `mut` declaration *not* in this set gets a warning.\r\n\r\nThis is not good, because that field is not tracking by the incremental system. The other problem is just that this very setup -- one big set -- is sort of anti-incremental, since we can't readily track which contributions to the set came from where.\r\n\r\nI think we should refactor this so that the borrowck query, instead of yielding a unit result, as it does now, returns a `NodeSet` containing the list of used mut nodes within the body. Note that whether a `mut` is used is purely determinde by the function it is in, so we don't need to combine results from multiple borrowck results.\r\n\r\nIn other words, we would remove that field from the `tcx` and change the entry in `src/librustc/ty/maps.rs` for the borrowck from this:\r\n\r\n```\r\n    [] borrowck: BorrowCheck(DefId) -> (),\r\n```\r\n\r\nto something like this:\r\n\r\n```\r\n    [] borrowck: BorrowCheck(DefId) -> Rc<BorrowCheckResult>,\r\n```\r\n\r\nwhere `BorrowCheckResult` would be a new struct defined (presumably) in `src/librustc/ty.rs`, looking something like this:\r\n\r\n```rust\r\nstruct BorrowCheckResult {\r\n    /// contains the node-ids for variables within this function where the `mut`\r\n    /// declaration was used in some way (e.g., by modifying the variable's value,\r\n    /// or taking an `&mut` borrow of it).\r\n    used_mut_nodes: NodeSet\r\n}\r\n```\r\n\r\nWe would then modify the borrow checker code (`borrowck()` in `src/librustc_borrowck/borrowck/mod.rs`) so that instead of modifying the `tcx` directly, it modifies a set defined per-fn, and constructs the struct when it is done.\r\n\r\nFinally, we would have to modify the *lint* code that currently reads from this set (found in `src/librustc_lint/unused.rs`). This is a bit annoying, since late's don't seem to naturally want to carry state, and we don't have quite the helpers you would need to make it stateless.\r\n\r\nOne option -- adding state -- would be to add a field to the `UnusedMut` struct that tricks the innermost body (it's type might be `Vec<Rc<BorrowCheckResult>>`). Then we would want to modify the  `LateLintPass` impl, which implements a \"visitor-like\" pattern, where you get callbacks as we descend the HIR. We would want to override `check_body`, so that each time we enter a fn body (etc), we can load up the borrowck results for that fn (we can keep them in a stack). Something like this:\r\n\r\n```rust\r\nfn check_body(&mut self, cx: &LateContext, body: &'tcx hir::Body) {\r\n    // Get the def-id of the owner of this body, typically a function.\r\n    let body_owner_def_id = cx.tcx().hir.body_owner_def_id(body.id());\r\n    \r\n    // Get the borrowck tables.\r\n    self.borrowck_tables.push(cx.tcx().borrowck(body_owner_def_id));\r\n}\r\n\r\nfn check_body_post(&mut self, cx: &LateContext, body: &'tcx hir::Body) {\r\n    self.borrowck_tables.pop();\r\n}\r\n```\r\n\r\nthen we can check whether a given `mut` binding is \"used\" by invoking `self.borrowck_tables.last().unwrap().contains(...)` (the vector *ought* to be non-empty, I think, though that could be wrong for cases like function parameters). ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42384/timeline", "performed_via_github_app": null, "state_reason": "completed"}