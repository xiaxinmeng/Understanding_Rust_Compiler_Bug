{"url": "https://api.github.com/repos/rust-lang/rust/issues/19244", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19244/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19244/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19244/events", "html_url": "https://github.com/rust-lang/rust/issues/19244", "id": 49830297, "node_id": "MDU6SXNzdWU0OTgzMDI5Nw==", "number": 19244, "title": "Constancy broken by tuple indexing (newtypes may unwrap in the runtime)", "user": {"login": "mnemnion", "id": 231785, "node_id": "MDQ6VXNlcjIzMTc4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/231785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mnemnion", "html_url": "https://github.com/mnemnion", "followers_url": "https://api.github.com/users/mnemnion/followers", "following_url": "https://api.github.com/users/mnemnion/following{/other_user}", "gists_url": "https://api.github.com/users/mnemnion/gists{/gist_id}", "starred_url": "https://api.github.com/users/mnemnion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mnemnion/subscriptions", "organizations_url": "https://api.github.com/users/mnemnion/orgs", "repos_url": "https://api.github.com/users/mnemnion/repos", "events_url": "https://api.github.com/users/mnemnion/events{/privacy}", "received_events_url": "https://api.github.com/users/mnemnion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-11-23T16:33:11Z", "updated_at": "2014-11-27T06:35:59Z", "closed_at": "2014-11-27T06:35:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm translating a VM, and make heavy use of  `struct NewType(u32)` as an idiom to separate the logical uses of numbers. I was advised to use `new_type.0` to unwrap/dereference the value of such a type.\n\nSince the type is known at compile time, it is at least possible to infer the type of a `new_type.0` statically. It seems this may not be happening, or at least not consistently. \n\nHere is the breaking code: \n\n``` rust\n#![feature(tuple_indexing)]\n\nuse std::default::Default;\n\nconst WORKS_CONST: uint = 23 ;\nconst ALSO_WORKS_CONST: uint = WORKS_CONST + 5 ;\n\nstruct Wrapper(uint);\nconst WRAPPED_CONST: Wrapper = Wrapper(42) ;\nconst BAD_CONST: uint = WRAPPED_CONST.0 ;\n\nstruct ConstCheck {\n    broken_array: [int, ..BAD_CONST],\n    works_array: [int, ..ALSO_WORKS_CONST],\n}\n\nfn main() {\n    println!(\"Wrapped Constant is: {}\", BAD_CONST);\n}\n```\n\nThe definition of broken_array breaks the compiler, with the following message:\n\n``` text\n/../src/main.rs:13:19: 13:37 error: expected constant expr for array length: unsupported constant expr\n/../src/main.rs:13     broken_array: [int, ..BAD_CONST],\n                                                                            ^~~~~~~~~~~~~~~~~~\nCould not compile `rusty_sandbox`.\n```\n\nIf that line is commented out, the code compiles, creating BAD_CONST and printing the correct value.\n\nI infer from this that new_type.0 unwrapping is happening in the runtime. This is going to be terrible for my VMs performance. It would seem that a major use case for newtypes would be wrapping raw numbers for math-heavy applications, so your Kilos don't mix with your Meters. \n\nI'm brand new here, so take this for the naive perspective that it is, but it seems to me the fix would involve reifying newtypes, at least somewhat. A type that's a simple synonym should disappear completely at compile time, with the syntax enforcing correct use. It's my old Perl side talking, I expect, but syntax such as `newtype.$` for self could force the compiler to try and unwrap a single value from the tuple and fail if the struct isn't a single-field tuple. \n\nI do feel that the code provided should compile. Thank you. \n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19244/timeline", "performed_via_github_app": null, "state_reason": "completed"}