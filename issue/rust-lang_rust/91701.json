{"url": "https://api.github.com/repos/rust-lang/rust/issues/91701", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91701/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91701/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91701/events", "html_url": "https://github.com/rust-lang/rust/issues/91701", "id": 1075528261, "node_id": "I_kwDOAAsO6M5AG0JF", "number": 91701, "title": "Compilation fails when explicit types are not provided, despite satisfied trait bounds", "user": {"login": "Andlon", "id": 578309, "node_id": "MDQ6VXNlcjU3ODMwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/578309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andlon", "html_url": "https://github.com/Andlon", "followers_url": "https://api.github.com/users/Andlon/followers", "following_url": "https://api.github.com/users/Andlon/following{/other_user}", "gists_url": "https://api.github.com/users/Andlon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andlon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andlon/subscriptions", "organizations_url": "https://api.github.com/users/Andlon/orgs", "repos_url": "https://api.github.com/users/Andlon/repos", "events_url": "https://api.github.com/users/Andlon/events{/privacy}", "received_events_url": "https://api.github.com/users/Andlon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-12-09T12:40:30Z", "updated_at": "2023-04-05T17:39:51Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nEDIT: See [further minified code](https://github.com/rust-lang/rust/issues/91701#issuecomment-989830714) in subsequent replies.\r\n\r\nConsider the following code ([Playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=04a1c2b4aa094033801ad3f051f25a8a)): \r\n\r\n```rust\r\npub struct X;\r\n\r\npub trait Pair<A, B = ()> {}\r\n\r\npub trait One<A>: Pair<A> + Pair<A, A> {}\r\npub trait Two<A, B>: One<A> + One<B> + Pair<A, B> + Pair<B, A> {}\r\npub trait Three<A, B, C>: Two<A, B> + Two<A, C> + Two<B, C> {}\r\n\r\nimpl<A, B> Two<A, B> for X\r\nwhere\r\n    X: One<A> + One<B> + Pair<A, B> + Pair<B, A>\r\n{}\r\n\r\nimpl<A, B, C> Three<A, B, C> for X\r\nwhere\r\n    X: Two<A, B> + Two<A, C> + Two<B, C>\r\n{}\r\n\r\npub fn foo1<A, B, C>(_a: A, _b: B, _c: C)\r\nwhere\r\n    X: Three<A, B, C>\r\n{}\r\n\r\n// Calls foo1 but we have a different order of types in the trait bound.\r\n// However, the traits are defined so that the order technically does not\r\n// matter: if one order is satisfied, then it's satisfied for all\r\n// possible orderings. This is evidenced by the fact that it works with\r\n// a different order than the trait ordering if we *explicitly* specify\r\n// the types. However, without explicitly specifying types, type inference\r\n// fails.\r\npub fn foo2<Z, A, B, C>(a: A, b: B, c: C)\r\nwhere\r\n    // Note different order of parameters\r\n    X: Three<A, C, B>,\r\n{\r\n    // Fails due to type inference\r\n    foo1(a, b, c);\r\n    \r\n    // Works when types are explicitly named\r\n    // foo1::<A, B, C>(a, b, c);\r\n}\r\n```\r\n\r\nI expected to see this happen: Both manners of calling `foo1` should work.\r\n\r\nInstead, this happened: Only the variant where the types are explicitly named compiles. Here's the error:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:37:13\r\n   |\r\n31 | pub fn foo2<A, B, C>(a: A, b: B, c: C)\r\n   |                -  - expected type parameter\r\n   |                |\r\n   |                found type parameter\r\n...\r\n37 |     foo1(a, b, c);\r\n   |             ^ expected type parameter `C`, found type parameter `B`\r\n   |\r\n   = note: expected type parameter `C`\r\n              found type parameter `B`\r\n   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:37:16\r\n   |\r\n31 | pub fn foo2<A, B, C>(a: A, b: B, c: C)\r\n   |                -  - found type parameter\r\n   |                |\r\n   |                expected type parameter\r\n...\r\n37 |     foo1(a, b, c);\r\n   |                ^ expected type parameter `B`, found type parameter `C`\r\n   |\r\n   = note: expected type parameter `B`\r\n              found type parameter `C`\r\n   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground` due to 2 previous errors\r\n```\r\n\r\n### Meta\r\n\r\nI've tried this on Stable 1.57 and the current nightly on the playground (1.59.0-nightly (2021-12-07 0b6f079e4987ded15c13)).\r\n\r\nFor context, this minified code is representative of some fairly involved generic code that works with the `Allocator` bounds used by `nalgebra`. For example, the [TriDimAllocator trait from fenris](https://docs.rs/fenris/0.0.14/fenris/allocators/trait.TriDimAllocator.html) is essentially analogous to `Three` in the above example.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91701/timeline", "performed_via_github_app": null, "state_reason": null}