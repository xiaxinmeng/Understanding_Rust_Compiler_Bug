{"url": "https://api.github.com/repos/rust-lang/rust/issues/76007", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76007/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76007/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76007/events", "html_url": "https://github.com/rust-lang/rust/issues/76007", "id": 687616224, "node_id": "MDU6SXNzdWU2ODc2MTYyMjQ=", "number": 76007, "title": "Suggest returning an owned type instead of a reference in E0106", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-28T00:03:02Z", "updated_at": "2023-04-05T17:31:42Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Lifetime elision doesn't allow the following:\r\n```\r\nfn fizzbuzz() -> &str {\r\n    todo!()\r\n}\r\n```\r\n\r\nThe current message has a great hint, but only suggests `-> &'static str`.\r\n\r\nIt would be nice if it could also suggest `-> String`, which would be the better choice for this example.\r\n\r\nSo maybe it would result in an error something like the following:\r\n```\r\nerror[E0106]: missing lifetime specifier\r\n --> src/lib.rs:1:18\r\n  |\r\n1 | fn fizzbuzz() -> &str {\r\n  |                  ^ expected named lifetime parameter\r\n  |\r\n  = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\r\nhelp: consider returning an owned value instead\r\n  |\r\n1 | fn fizzbuzz() -> String {\r\n  |                  ^^^^^^\r\nhelp: or, if this only returns literals or globals, using the `'static` lifetime\r\n  |\r\n1 | fn fizzbuzz() -> &'static str {\r\n  |                  ^^^^^^^^\r\n```\r\n(Ideally the error can get the corresponding owned type through `ToOwned`, but just having individual message for `&impl Sized` and `&[T]` and `&[str]` would cover pretty much everything here.)\r\n\r\nThis idea inspired by the conversation in https://users.rust-lang.org/t/why-not-automatic-inference-of-static-in-foo-str/47913?u=scottmcm", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76007/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76007/timeline", "performed_via_github_app": null, "state_reason": null}