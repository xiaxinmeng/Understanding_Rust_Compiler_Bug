{"url": "https://api.github.com/repos/rust-lang/rust/issues/66071", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66071/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66071/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66071/events", "html_url": "https://github.com/rust-lang/rust/issues/66071", "id": 516931822, "node_id": "MDU6SXNzdWU1MTY5MzE4MjI=", "number": 66071, "title": "Incorrect trace for Item-level syntax errors in modules included by macro-generated code", "user": {"login": "SOF3", "id": 19623715, "node_id": "MDQ6VXNlcjE5NjIzNzE1", "avatar_url": "https://avatars.githubusercontent.com/u/19623715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SOF3", "html_url": "https://github.com/SOF3", "followers_url": "https://api.github.com/users/SOF3/followers", "following_url": "https://api.github.com/users/SOF3/following{/other_user}", "gists_url": "https://api.github.com/users/SOF3/gists{/gist_id}", "starred_url": "https://api.github.com/users/SOF3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SOF3/subscriptions", "organizations_url": "https://api.github.com/users/SOF3/orgs", "repos_url": "https://api.github.com/users/SOF3/repos", "events_url": "https://api.github.com/users/SOF3/events{/privacy}", "received_events_url": "https://api.github.com/users/SOF3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-04T02:20:25Z", "updated_at": "2019-12-14T13:17:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using Rust nightly 2019-11-04.\r\n\r\nConsider a macro that generates a `mod` statement:\r\n```rust\r\n#[proc_macro]\r\npub fn generate(_: proc_macro::TokenStream) -> proc_macro::TokenStream {\r\n    quote::quote!(mod foo;).into()\r\n}\r\n```\r\n\r\nCall this in the src/main.rs in another crate:\r\n```rust\r\ncodegen::generate!();\r\n\r\nfn main() {\r\n    foo::bar();\r\n}\r\n```\r\n\r\nIn src/foo.rs, we have the following code:\r\n```rust\r\n#{inline}\r\npub fn bar() {\r\n    println!(\"Hello world\");\r\n}\r\n```\r\n\r\nNote the intentional syntax error `#{inline}` instead of `#[inline]` in src/foo.rs.\r\n\r\nCompiling this setup (reproducible example in\r\n[upload.tar.gz](https://github.com/rust-lang/rust/files/3802516/upload.tar.gz))\r\nwith `cargo check`,\r\nwe have the following error message:\r\n\r\n```\r\nerror: expected `[`, found `{`\r\n --> src\\main.rs:1:1\r\n  |\r\n1 | codegen::generate!();\r\n  | ^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror[E0433]: failed to resolve: use of undeclared type or module `foo`\r\n --> src\\main.rs:4:5\r\n  |\r\n4 |     foo::bar();\r\n  |     ^^^ use of undeclared type or module `foo`\r\n```\r\n\r\nThe second error is an indirect consequence of the first error.\r\nBut where did the \"found `{`\" error message come from?\r\n\r\nObviously, there is nothing wrong with the `codegen::generate!()` macro\r\n(we can verify this by fixing the intentional syntax error in src/foo.rs).\r\n\r\nSo let's try manually expanding the macro call, i.e. we now replace src/main.rs:1 with\r\n```rust\r\nmod foo;\r\n```\r\n\r\nAnd we have the following correct error message:\r\n```\r\nerror: expected `[`, found `{`\r\n --> src\\foo.rs:1:2\r\n  |\r\n1 | #{inline}\r\n  |  ^ expected `[`\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nSo this error is caused by incorrect error span detection.\r\n\r\nI am unable to locate the exact set of syntax errors affected,\r\nbecause this does not happen with every syntax error.\r\n\r\nFor example, if I replace src/foo.rs with\r\n```rust\r\n#[inline] // correct syntax here\r\npub fn bar() {\r\n    let a = 1 // missing semicolon here\r\n    println!(\"Hello world\");\r\n}\r\n```\r\n\r\nThe resultant error message is correct:\r\n```\r\nerror: expected `;`, found ``println``\r\n --> src\\foo.rs:3:14\r\n  |\r\n3 |     let a = 1\r\n  |              ^ help: add `;` here\r\n4 |     println!(\"Hello world\");\r\n  |     ------- unexpected token\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66071/timeline", "performed_via_github_app": null, "state_reason": null}