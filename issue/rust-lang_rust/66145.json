{"url": "https://api.github.com/repos/rust-lang/rust/issues/66145", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66145/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66145/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66145/events", "html_url": "https://github.com/rust-lang/rust/issues/66145", "id": 518307074, "node_id": "MDU6SXNzdWU1MTgzMDcwNzQ=", "number": 66145, "title": "Tracking issue for `array_into_iter` future compatibility lint", "user": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630636017, "node_id": "MDU6TGFiZWw2MzA2MzYwMTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-future-compatibility", "name": "C-future-compatibility", "color": "f5f1fd", "default": false, "description": "Category: future compatibility lints"}, {"id": 3425147156, "node_id": "LA_kwDOAAsO6M7MJ5kU", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-array", "name": "A-array", "color": "f7e101", "default": false, "description": "Area: [T; N]"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-06T08:08:40Z", "updated_at": "2023-03-07T05:43:13Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "### What is this lint about?\r\n\r\n*Method resolution* is responsible for finding a fitting method for a method call expression `receiver.name(args)`. The expression `array.into_iter()` (where `array` has an array type `[T; N]`) currently resolves to either `<&[T; N] as IntoIterator>::into_iter` (for arrays smaller than 33) or `<&[T] as IntoIterator>::into_iter` (for larger arrays). In either way, an iterator over *references to the array's elements* is returned. \r\n\r\nIn the future, we might want to [add `impl IntoIterator for [T; N]` (for arrays by value)](https://github.com/rust-lang/rust/pull/65819). In that case, method resolution would prioritize `<[T;N] as IntoIterator>::into_iter` as that method call would not require an autoref-coercion. In other words: the receiver expression (left of the dot in the method call) fits the receiver type of the method perfectly, so that method is preferred. In the `&[T; N]` or `&[T]` case, coercions are necessary to make the method call work.\r\n\r\nSince the new method is prioritized over the old ones, some code can break. Usually that code looks somewhat like this:\r\n\r\n```rust\r\n[1, 2, 3].into_iter().for_each(|n| { *n; });\r\n```\r\n\r\nCurrently this works, as `into_iter` returns an iterator over references to the array's values, meaning that `n` is indeed `&{integer}` and can be dereferenced. With the new impl, that code would stop compiling. The lint has been put in place to warn of this potentially upcoming breaking change.\r\n\r\n### How to fix this warning/error\r\n\r\n**Replace `.into_iter()` with `.iter()`**. The latter is guaranteed to always resolve to an iterator over references to the elements. \r\n\r\n<br>\r\n\r\n---\r\n\r\n### Current status\r\n\r\n- [x] Lint merged as warn by default in 1.41 (stable on 2020-01-31): #66017\r\n- [x] Lint also lints boxed arrays starting from 1.42 (stable on 2020-03-13): #67524", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66145/reactions", "total_count": 15, "+1": 15, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66145/timeline", "performed_via_github_app": null, "state_reason": null}