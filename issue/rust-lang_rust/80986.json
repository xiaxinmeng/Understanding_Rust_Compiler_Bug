{"url": "https://api.github.com/repos/rust-lang/rust/issues/80986", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80986/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80986/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80986/events", "html_url": "https://github.com/rust-lang/rust/issues/80986", "id": 785167852, "node_id": "MDU6SXNzdWU3ODUxNjc4NTI=", "number": 80986, "title": "\"Associated type doesn't live long enough\", even though it does", "user": {"login": "RustyYato", "id": 16103364, "node_id": "MDQ6VXNlcjE2MTAzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/16103364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RustyYato", "html_url": "https://github.com/RustyYato", "followers_url": "https://api.github.com/users/RustyYato/followers", "following_url": "https://api.github.com/users/RustyYato/following{/other_user}", "gists_url": "https://api.github.com/users/RustyYato/gists{/gist_id}", "starred_url": "https://api.github.com/users/RustyYato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RustyYato/subscriptions", "organizations_url": "https://api.github.com/users/RustyYato/orgs", "repos_url": "https://api.github.com/users/RustyYato/repos", "events_url": "https://api.github.com/users/RustyYato/events{/privacy}", "received_events_url": "https://api.github.com/users/RustyYato/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-01-13T14:47:47Z", "updated_at": "2021-12-14T23:58:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0474ce6d89ae44d17d9ef2df99c0883f\r\n\r\n```rust\r\nstruct Foo<T>([T]);\r\n\r\nimpl<I: core::slice::SliceIndex<[T]>, T> core::ops::Index<I> for Foo<T>\r\nwhere\r\n    I::Output: AsRef<[u8]>,\r\n{\r\n    type Output = [u8];\r\n\r\n    fn index(&self, index: I) -> &Self::Output {\r\n        self.0[index].as_ref()\r\n    }\r\n}\r\n```\r\n\r\nI expected this to compile, because lifetime elision enforces that `I::Output` will live as long as `self`, and that `SomethingElse` will live as long as `I::Output`, and by transitivity `SomethingElse` will live as long as `self`.\r\n\r\nHowever, I got to following\r\n<details>\r\n<summary> error message </summary>\r\n\r\n```rust\r\nerror[E0311]: the associated type `<I as SliceIndex<[T]>>::Output` may not live long enough\r\n  --> src/lib.rs:11:9\r\n   |\r\n11 |         self.0[index].as_ref()\r\n   |         ^^^^^^^^^^^^^\r\n   |\r\nnote: the associated type `<I as SliceIndex<[T]>>::Output` must be valid for the anonymous lifetime #1 defined on the method body at 10:5...\r\n  --> src/lib.rs:10:5\r\n   |\r\n10 |     fn index(&self, index: I) -> &Self::Output {\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...so that the reference type `&<I as SliceIndex<[T]>>::Output` does not outlive the data it points at\r\n  --> src/lib.rs:11:9\r\n   |\r\n11 |         self.0[index].as_ref()\r\n   |         ^^^^^^^^^^^^^\r\n\r\nerror[E0311]: the associated type `<I as SliceIndex<[T]>>::Output` may not live long enough\r\n  --> src/lib.rs:11:9\r\n   |\r\n11 |         self.0[index].as_ref()\r\n   |         ^^^^^^^^^^^^^\r\n   |\r\nnote: the associated type `<I as SliceIndex<[T]>>::Output` must be valid for the anonymous lifetime #1 defined on the method body at 10:5...\r\n  --> src/lib.rs:10:5\r\n   |\r\n10 |     fn index(&self, index: I) -> &Self::Output {\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...so that the type `<I as SliceIndex<[T]>>::Output` is not borrowed for too long\r\n  --> src/lib.rs:11:9\r\n   |\r\n11 |         self.0[index].as_ref()\r\n   |         ^^^^^^^^^^^^^\r\n\r\nerror[E0311]: the associated type `<I as SliceIndex<[T]>>::Output` may not live long enough\r\n  --> src/lib.rs:11:23\r\n   |\r\n11 |         self.0[index].as_ref()\r\n   |                       ^^^^^^\r\n   |\r\nnote: the associated type `<I as SliceIndex<[T]>>::Output` must be valid for the anonymous lifetime #1 defined on the method body at 10:5...\r\n  --> src/lib.rs:10:5\r\n   |\r\n10 |     fn index(&self, index: I) -> &Self::Output {\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...so that the reference type `&<I as SliceIndex<[T]>>::Output` does not outlive the data it points at\r\n  --> src/lib.rs:11:23\r\n   |\r\n11 |         self.0[index].as_ref()\r\n   |                       ^^^^^^\r\n\r\nerror: aborting due to 3 previous errors\r\n\r\nerror: could not compile `playground`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n</details>\r\n\r\n\r\nThis is not specific to `AsRef`, any function that has the following signature will fail to compile\r\n\r\n```rust\r\nfn method(output: &I::Output) -> &SomethingElse { ... }\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80986/timeline", "performed_via_github_app": null, "state_reason": null}