{"url": "https://api.github.com/repos/rust-lang/rust/issues/105999", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105999/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105999/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105999/events", "html_url": "https://github.com/rust-lang/rust/issues/105999", "id": 1506270860, "node_id": "I_kwDOAAsO6M5Zx96M", "number": 105999, "title": "glibc `.init_array` usage for `std::env::args` is not safe", "user": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2022-12-21T13:06:33Z", "updated_at": "2023-02-11T12:10:14Z", "closed_at": "2023-02-11T12:10:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently in `library/std/src/sys/unix/args.rs`, Rust is hooking into the glibc `.init_array` extension for retrieving `argc`/`argv` even in case Rust does not manage `main()` and is e.g. just loaded into a process as a `cdylib`.\r\n\r\nWhile this is great and convenient, it's unfortunately not implemented in a safe way. Various C commandline argument parsers are **modifying** `argv` while parsing, so the information that gets passed into `.init_array` might not be correct anymore.\r\n\r\nExamples of such parsers are\r\n\r\n  - glibc's own [`getopt`](https://www.gnu.org/software/libc/manual/html_node/Using-Getopt.html) parser, noting \" The default is to permute the contents of argv while scanning it so that eventually all the non-options are at the end. This allows options to be given in any order, even with programs that were not written to expect this. \"\r\n  - GLib's [`GOptionContext`](https://docs.gtk.org/glib/struct.OptionContext.html) parser, which removes all already handled arguments from `argv` and only leaves others (removed ones are set to `NULL` and moved to the end).\r\n  - Qt does the same thing in `QCoreApplication` in `QCoreApplicationPrivate::processCommandLineArguments()`. It shuffles around arguments in `argv` and removes (by setting to `nullptr`) arguments it handled already.\r\n\r\nThis means that at least `argc` can easily be too big, and Rust would read beyond the (new) end of `argv`. This caused crashes in [practice](https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs/-/issues/280) because of calling `strlen()` on `NULL` when creating an `CStr` around such an \"removed\" argument.\r\n\r\nNow the question is how this should be handled in Rust. I see three options here\r\n\r\n  1. Remove the `.init_array` extension usage and handle glibc like all other libcs\r\n  2. Copy all arguments in `.init_array`. This means everybody has to pay for that even if they don't use arguments, and this is theoretically still not safe if the shared library is loaded at the same time the `argv` array is modified and a partially written pointer value is read\r\n  3. Handle `NULL` pointers in `argv` by skipping over them. This means we would lose the exact length information of the `args` iterator, and this is still theoretically not safe for the same reason as 2. See https://github.com/rust-lang/rust/pull/106001\r\n\r\nThis code was added in 2019 by https://github.com/rust-lang/rust/pull/66547 (CC @leo60228)\r\n\r\n~~I'd be happy to provide a PR implementing either solution once there is some agreement how to move forward here.~~ I've created https://github.com/rust-lang/rust/pull/106001 as a proposed fix for this, which implements option 3.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.66.0 (69f9c33d7 2022-12-12)\r\nbinary: rustc\r\ncommit-hash: 69f9c33d71c871fc16ac445211281c6e7a340943\r\ncommit-date: 2022-12-12\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.66.0\r\nLLVM version: 15.0.2\r\n```\r\n\r\n\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n__strlen_evex () at ../sysdeps/x86_64/multiarch/strlen-evex.S:79\r\n79\t\tVPCMP\t$0, (%rdi), %YMMZERO, %k0\r\nMissing separate debuginfos, use: dnf debuginfo-install bzip2-libs-1.0.8-12.fc37.x86_64 elfutils-libelf-0.188-3.fc37.x86_64 elfutils-libs-0.188-3.fc37.x86_64 libblkid-2.38.1-1.fc37.x86_64 libmount-2.38.1-1.fc37.x86_64 libunwind-1.6.2-5.fc37.x86_64 libzstd-1.5.2-3.fc37.x86_64 pcre2-10.40-1.fc37.1.x86_64 xz-libs-5.2.5-10.fc37.x86_64 zlib-1.2.12-5.fc37.x86_64\r\n(gdb) backtrace full\r\n#0  __strlen_evex () at ../sysdeps/x86_64/multiarch/strlen-evex.S:79\r\n#1  0x00007ffff7713281 in core::ffi::c_str::CStr::from_ptr () at library/core/src/ffi/c_str.rs:286\r\n#2  std::sys::unix::args::imp::clone::{closure#0} () at library/std/src/sys/unix/args.rs:146\r\n#3  core::iter::adapters::map::map_fold::{closure#0}<isize, std::ffi::os_str::OsString, (), std::sys::unix::args::imp::clone::{closure_env#0}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}<std::ffi::os_str::OsString, alloc::vec::spec_extend::{impl#1}::spec_extend::{closure_env#0}<std::ffi::os_str::OsString, core::iter::adapters::map::Map<core::ops::range::Range<isize>, std::sys::unix::args::imp::clone::{closure_env#0}>, alloc::alloc::Global>>> () at library/core/src/iter/adapters/map.rs:84\r\n#4  core::iter::traits::iterator::Iterator::fold<core::ops::range::Range<isize>, (), core::iter::adapters::map::map_fold::{closure_env#0}<isize, std::ffi::os_str::OsString, (), std::sys::unix::args::imp::clone::{closure_env#0}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}<std::ffi::os_str::OsString, alloc::vec::spec_extend::{impl#1}::spec_extend::{closure_env#0}<std::ffi::os_str::OsString, core::iter::adapters::map::Map<core::ops::range::Range<isize>, std::sys::unix::args::imp::clone::{closure_env#0}>, alloc::alloc::Global>>>>\r\n    () at library/core/src/iter/traits/iterator.rs:2414\r\n#5  core::iter::adapters::map::{impl#2}::fold<std::ffi::os_str::OsString, core::ops::range::Range<isize>, std::sys::unix::args::imp::clone::{closure_env#0}, (), core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}<std::ffi::os_str::OsString, alloc::vec::spec_extend::{impl#1}::spec_extend::{closure_env#0}<std::ffi::os_str::OsString, core::iter::adapters::map::Map<core::ops::range::Range<isize>, std::sys::unix::args::imp::clone::{closure_env#0}>, alloc::alloc::Global>>> () at library/core/src/iter/adapters/map.rs:124\r\n#6  core::iter::traits::iterator::Iterator::for_each<core::iter::adapters::map::Map<core::ops::range::Range<isize>, std::sys::unix::args::imp::clone::{closure_env#0}>, alloc::vec::spec_extend::{impl#1}::spec_extend::{closure_env#0}<std::ffi::os_str::OsString, core::iter::adapters::map::Map<core::ops::range::Range<isize>, std::sys::unix::args::imp::clone::{closure_env#0}>, alloc::alloc::Global>> () at library/core/src/iter/traits/iterator.rs:831\r\n#7  alloc::vec::spec_extend::{impl#1}::spec_extend<std::ffi::os_str::OsString, core::iter::adapters::map::Map<core::ops::range::Range<isize>, std::sys::unix::args::imp::clone::{closure_env#0}>, alloc::alloc::Global> () at library/alloc/src/vec/spec_extend.rs:40\r\n#8  alloc::vec::spec_from_iter_nested::{impl#1}::from_iter<std::ffi::os_str::OsString, core::iter::adapters::map::Map<core::ops::range::Range<isize>, std::sys::unix::args::imp::clone::{closure_env#0}>> () at library/alloc/src/vec/spec_from_iter_nested.rs:62\r\n#9  alloc::vec::spec_from_iter::{impl#0}::from_iter<std::ffi::os_str::OsString, core::iter::adapters::map::Map<core::ops::range::Range<isize>, std::sys::unix::args::imp::clone::{closure_env#0}>> () at library/alloc/src/vec/spec_from_iter.rs:33\r\n#10 alloc::vec::{impl#18}::from_iter<std::ffi::os_str::OsString, core::iter::adapters::map::Map<core::ops::range::Range<isize>, std::sys::unix::args::imp::clone::{closure_env#0}>> ()\r\n    at library/alloc/src/vec/mod.rs:2757\r\n#11 core::iter::traits::iterator::Iterator::collect<core::iter::adapters::map::Map<core::ops::range::Range<isize>, std::sys::unix::args::imp::clone::{closure_env#0}>, alloc::vec::Vec<std::ffi::os_str::OsString, alloc::alloc::Global>> () at library/core/src/iter/traits/iterator.rs:1836\r\n#12 std::sys::unix::args::imp::clone () at library/std/src/sys/unix/args.rs:144\r\n#13 std::sys::unix::args::imp::args () at library/std/src/sys/unix/args.rs:129\r\n#14 std::sys::unix::args::args () at library/std/src/sys/unix/args.rs:19\r\n#15 std::env::args_os () at library/std/src/env.rs:792\r\n#16 0x00007ffff7713151 in std::env::args () at library/std/src/env.rs:757\r\n[...]\r\n```\r\n\r\nAlso\r\n\r\n```\r\n(gdb) info registers\r\nrax            0x0                 0\r\nrbx            0x8                 8\r\nrcx            0x6b6e6973656b6166  7741240753840152934\r\nrdx            0x8                 8\r\nrsi            0x6b6e6973656b6166  7741240753840152934\r\nrdi            0x0                 0\r\nrbp            0x0                 0x0\r\nrsp            0x7fffffffc398      0x7fffffffc398\r\nr8             0x7ffff7cacce0      140737350651104\r\nr9             0x40                64\r\nr10            0x0                 0\r\nr11            0x20                32\r\nr12            0x55555556e890      93824992340112\r\nr13            0x4                 4\r\nr14            0x5                 5\r\nr15            0x5555558748e0      93824995510496\r\nrip            0x7ffff7c4093c      0x7ffff7c4093c <__strlen_evex+28>\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105999/timeline", "performed_via_github_app": null, "state_reason": "completed"}