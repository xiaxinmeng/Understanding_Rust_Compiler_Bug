{"url": "https://api.github.com/repos/rust-lang/rust/issues/53704", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53704/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53704/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53704/events", "html_url": "https://github.com/rust-lang/rust/issues/53704", "id": 354040047, "node_id": "MDU6SXNzdWUzNTQwNDAwNDc=", "number": 53704, "title": "Captureless closures can still codegen to `fn call(&self)` / `fn call_mut(&mut self)`.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 884691893, "node_id": "MDU6TGFiZWw4ODQ2OTE4OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-codegen", "name": "WG-codegen", "color": "c2e0c6", "default": false, "description": "Working Group: Codegen (Runtime perf and code size)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-25T20:09:48Z", "updated_at": "2018-08-25T20:09:48Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Despite them being ZSTs and `Copy`, which would allow `Fn` / `FnMut` impls on top of `FnOnce`.\r\n\r\nThis small example:\r\n```rust\r\nfn foo(f: impl FnOnce()) { f() }\r\npub fn test() {\r\n    // Not passed directly in call to avoid inferring `closure` to `FnOnce`.\r\n    let closure = || {};\r\n    foo(closure);\r\n}\r\n```\r\nwill cause a `ClosureOnceShim` to be generated, which takes the ZST closure, borrows it, and passes it to the actual closure \"function\", that has been inferred to be `Fn` (I think?).\r\n\r\nWhile correct, it's an extra function between the caller and the closure, and there's a potential risk of LLVM doing not-that-nice (e.g. inlining-related) things (and mergefunc might not work here).\r\n\r\nThis seems tricky to fix, since parts of the compiler *assume* that e.g. a closure implements `FnMut` if it can be called with a mutable reference to its environment, and if it implements `FnMut` *and not* `Fn`, then its \"codegen'd function\" *must* have a `FnMut::call_mut` signature.\r\n\r\ncc @rust-lang/wg-codegen ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53704/timeline", "performed_via_github_app": null, "state_reason": null}