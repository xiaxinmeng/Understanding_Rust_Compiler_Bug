{"url": "https://api.github.com/repos/rust-lang/rust/issues/33268", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/33268/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/33268/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/33268/events", "html_url": "https://github.com/rust-lang/rust/issues/33268", "id": 151797322, "node_id": "MDU6SXNzdWUxNTE3OTczMjI=", "number": 33268, "title": "Checked overflow has particularly poor codegen on ARM", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-04-29T05:45:48Z", "updated_at": "2016-04-29T07:20:52Z", "closed_at": "2016-04-29T06:41:17Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "``` rust\n#![crate_type = \"lib\"]\n#[no_mangle]\npub fn unchecked(x: i32, y: i32) -> i32 {\n    x.wrapping_add(y)\n}\n#[no_mangle]\npub fn checked(x: i32, y: i32) -> i32 {\n    x + y\n}\n\n#[no_mangle]\npub fn sum_unchecked(x: &[i32]) -> i32 {\n    let mut s = 0i32;\n    for y in x {\n        s = s.wrapping_add(*y)\n    }\n    s\n}\n#[no_mangle]\npub fn sum_checked(x: &[i32]) -> i32 {\n    let mut s = 0;\n    for y in x {\n        s += *y;\n    }\n    s\n}\n```\n\nCompiled with 1.8, `-C opt-level=3 -Z force-overflow-checks --target arm-unknown-linux-gnueabihf`:\n\n``` asm\nunchecked:\n    add r0, r1, r0\n    bx  lr\n\nchecked:\n    mov r2, r0\n    add r0, r2, r1\n    mov r1, #1\n    cmp r0, r2\n    movvc   r1, #0\n    cmp r1, #0\n    bxeq    lr\n    push    {r11, lr}\n    ldr r0, .LCPI1_0\n.LPC1_0:\n    add r0, pc, r0\n    bl  _ZN9panicking5panic20h68323117a6c854a2SaME(PLT)\n```\n\nAnd \"in context\" (i.e. demonstrating that the extra instructions aren't just because the function is too focused/aren't something that inlining fixes):\n\n``` asm\nsum_unchecked:\n    .fnstart\n    mov r2, #0\n    cmp r1, #0\n    beq .LBB2_3\n    lsl r1, r1, #2\n    mov r2, #0\n.LBB2_2:\n    ldr r3, [r0], #4\n    subs    r1, r1, #4\n    add r2, r3, r2\n    bne .LBB2_2\n.LBB2_3:\n    mov r0, r2\n    bx  lr\n\nsum_checked:\n    mov r2, #0\n    cmp r1, #0\n    beq .LBB3_4\n    lsl r1, r1, #2\n    mov r3, #0\n.LBB3_2:\n    ldr r2, [r0], #4\n    add r2, r3, r2\n    cmp r2, r3\n    mov r3, #1\n    movvc   r3, #0\n    cmp r3, #0\n    bne .LBB3_5\n    subs    r1, r1, #4\n    mov r3, r2\n    bne .LBB3_2\n.LBB3_4:\n    mov r0, r2\n    bx  lr\n.LBB3_5:\n    push    {r11, lr}\n    ldr r0, .LCPI3_0\n.LPC3_0:\n    add r0, pc, r0\n    bl  _ZN9panicking5panic20h68323117a6c854a2SaME(PLT)\n```\n\nIn particular, it seems to me that the following sequence of instructions is pointless:\n\n``` rust\n    mov r1, #1\n    cmp r0, r2\n    movvc   r1, #0\n    cmp r1, #0\n    bxeq    lr\n```\n\nIt is equivalent to something like `let r1 = 1; if overflow(r0, r2) { r1 = 0 } if r1 == 0 { return }`, but seems like all 5 instructions could be replaced with just `bxvc lr` (or maybe it has to be `cmp r0, r2; bxvc lr`, not sure).\n\n(The equivalent on`x86` is much nicer.)\n\n(This could well be an LLVM bug.)\n", "closed_by": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/33268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/33268/timeline", "performed_via_github_app": null, "state_reason": "completed"}