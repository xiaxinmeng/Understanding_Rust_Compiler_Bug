{"url": "https://api.github.com/repos/rust-lang/rust/issues/62208", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62208/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62208/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62208/events", "html_url": "https://github.com/rust-lang/rust/issues/62208", "id": 462058762, "node_id": "MDU6SXNzdWU0NjIwNTg3NjI=", "number": 62208, "title": "Inclusive version of take_while", "user": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2019-06-28T14:21:06Z", "updated_at": "2022-12-11T03:27:33Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`Iterator::take_while` stops _before_ the first element where the condition evaluates to `false`. That is the correct behavior given its name, but it makes it difficult to write an iterator that should include the boundary element. In particular consider something like iterating over a [histogram](https://docs.rs/hdrhistogram/), trimming off the tails:\r\n\r\n```rust\r\nfor v in histogram\r\n    .iter_linear(1_000)\r\n    .skip_while(|v| v.quantile() < 0.01)\r\n    .take_while(|v| v.quantile() < 0.99)\r\n```\r\n\r\nThis may seem right, but consider an iterator where the elements are such that `v.quantile()` yields this sequence: `[0, 0.02, 0.99]`. Here, the bin that spans `<0.02-0.99]` will be dropped, even though it includes the majority of the samples. What we really want to do is take from the iterator until we have _received_ an element whose `v.quantile() > 0.99`. To write that with `take_while`, we need something like:\r\n\r\n```rust\r\nlet mut got_true = true;\r\nfor v in h\r\n    .iter_linear(1_000)\r\n    .skip_while(|v| v.quantile() < 0.01)\r\n    .take_while(move |v| {\r\n        if got_true {\r\n            // we've already yielded when condition was true\r\n            return false;\r\n        }\r\n        if v.quantile() > 0.99 {\r\n            // this must be the first time condition returns true\r\n            // we should yield i, and then no more\r\n            got_true = true;\r\n        }\r\n        // we should keep yielding\r\n        true\r\n    })\r\n\r\n\r\n```\r\n\r\nWhich isn't exactly obvious.\r\n\r\nSo, I propose we add `Iterator::take_until_inclusive`, which yields elements up to and including the first element for which its argument returns true. The name isn't great, but I'm also struggling to come up with a better one. In some sense, I want the function to communicate that it yields every item it evaluates. Some other possible names if we're willing to invert the boolean: `break_once`, `break_after`, `end_at`, `end_once`, `end_after`.\r\n\r\nThoughts?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62208/reactions", "total_count": 44, "+1": 40, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 4, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62208/timeline", "performed_via_github_app": null, "state_reason": null}