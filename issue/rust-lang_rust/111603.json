{"url": "https://api.github.com/repos/rust-lang/rust/issues/111603", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111603/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111603/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111603/events", "html_url": "https://github.com/rust-lang/rust/issues/111603", "id": 1710383095, "node_id": "I_kwDOAAsO6M5l8l_3", "number": 111603, "title": "`Arc::new` duplicates stack memory", "user": {"login": "marc0246", "id": 40955683, "node_id": "MDQ6VXNlcjQwOTU1Njgz", "avatar_url": "https://avatars.githubusercontent.com/u/40955683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marc0246", "html_url": "https://github.com/marc0246", "followers_url": "https://api.github.com/users/marc0246/followers", "following_url": "https://api.github.com/users/marc0246/following{/other_user}", "gists_url": "https://api.github.com/users/marc0246/gists{/gist_id}", "starred_url": "https://api.github.com/users/marc0246/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marc0246/subscriptions", "organizations_url": "https://api.github.com/users/marc0246/orgs", "repos_url": "https://api.github.com/users/marc0246/repos", "events_url": "https://api.github.com/users/marc0246/events{/privacy}", "received_events_url": "https://api.github.com/users/marc0246/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2023-05-15T15:57:35Z", "updated_at": "2023-06-13T21:43:16Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Running the following through Godbolt, using rustc 1.71.0-nightly (cba14074b 2023-05-10) with `-C opt-level=3`:\r\n\r\n```rust\r\nuse std::sync::Arc;\r\n\r\npub fn test1(x: u64) -> Arc<[u64]> {\r\n    let array = [x; 1000];\r\n    Arc::new(array)\r\n}\r\n```\r\n\r\nI expected rustc to create an 8 KB stack allocation and a memcpy from it to the heap allocation, instead it creates 2 identical stack allocations and 2 memcpys to go along with them:\r\n\r\n```asm\r\nexample::test1:\r\n        push    rbx\r\n        sub     rsp, 4096\r\n        mov     qword ptr [rsp], 0\r\n        sub     rsp, 4096\r\n        mov     qword ptr [rsp], 0\r\n        sub     rsp, 4096\r\n        mov     qword ptr [rsp], 0\r\n        sub     rsp, 3712\r\n        movq    xmm0, rdi\r\n        pshufd  xmm0, xmm0, 68\r\n        mov     eax, 18\r\n.LBB0_1:\r\n        movdqu  xmmword ptr [rsp + 8*rax - 144], xmm0\r\n        movdqu  xmmword ptr [rsp + 8*rax - 128], xmm0\r\n        movdqu  xmmword ptr [rsp + 8*rax - 112], xmm0\r\n        movdqu  xmmword ptr [rsp + 8*rax - 96], xmm0\r\n        movdqu  xmmword ptr [rsp + 8*rax - 80], xmm0\r\n        movdqu  xmmword ptr [rsp + 8*rax - 64], xmm0\r\n        movdqu  xmmword ptr [rsp + 8*rax - 48], xmm0\r\n        movdqu  xmmword ptr [rsp + 8*rax - 32], xmm0\r\n        movdqu  xmmword ptr [rsp + 8*rax - 16], xmm0\r\n        movdqu  xmmword ptr [rsp + 8*rax], xmm0\r\n        add     rax, 20\r\n        cmp     rax, 1018\r\n        jne     .LBB0_1\r\n        lea     rdi, [rsp + 8000]\r\n        mov     rsi, rsp\r\n        mov     edx, 8000\r\n        call    qword ptr [rip + memcpy@GOTPCREL]\r\n        mov     edi, 8016\r\n        mov     esi, 8\r\n        call    qword ptr [rip + __rust_alloc@GOTPCREL]\r\n        test    rax, rax\r\n        je      .LBB0_3\r\n        mov     rbx, rax\r\n        mov     qword ptr [rax], 1\r\n        mov     qword ptr [rax + 8], 1\r\n        mov     rdi, rax\r\n        add     rdi, 16\r\n        lea     rsi, [rsp + 8000]\r\n        mov     edx, 8000\r\n        call    qword ptr [rip + memcpy@GOTPCREL]\r\n        mov     edx, 1000\r\n        mov     rax, rbx\r\n        add     rsp, 16000\r\n        pop     rbx\r\n        ret\r\n.LBB0_3:\r\n        mov     edi, 8\r\n        mov     esi, 8016\r\n        call    qword ptr [rip + alloc::alloc::handle_alloc_error@GOTPCREL]\r\n        ud2\r\n```\r\n\r\nTrying to narrow the problem down further, when eliminating the stack allocations entirely:\r\n\r\n```rs\r\n#![feature(get_mut_unchecked, new_uninit)]\r\n\r\nuse std::sync::Arc;\r\n\r\npub fn test2(x: u64) -> Arc<[u64]> {\r\n    let mut arc = Arc::new_uninit_slice(1000);\r\n    for elem in unsafe { Arc::get_mut_unchecked(&mut arc) } {\r\n        elem.write(x);\r\n    }\r\n    unsafe { arc.assume_init() }\r\n}\r\n```\r\n\r\nThe code duplication still persists, and is limited to the `arcinner_layout_for_value_layout` call:\r\n\r\n```asm\r\nexample::test2:\r\n        push    r15\r\n        push    r14\r\n        push    r12\r\n        push    rbx\r\n        push    rax\r\n        mov     rbx, rdi\r\n        mov     r12, qword ptr [rip + alloc::sync::arcinner_layout_for_value_layout@GOTPCREL]\r\n        mov     edi, 8\r\n        mov     esi, 8000\r\n        call    r12\r\n        mov     r14, rax\r\n        mov     r15, rdx\r\n        mov     edi, 8\r\n        mov     esi, 8000\r\n        call    r12\r\n        test    rdx, rdx\r\n        je      .LBB0_2\r\n        mov     rdi, rdx\r\n        mov     rsi, rax\r\n        call    qword ptr [rip + __rust_alloc@GOTPCREL]\r\n.LBB0_2:\r\n        test    rax, rax\r\n        je      .LBB0_6\r\n        mov     qword ptr [rax], 1\r\n        mov     qword ptr [rax + 8], 1\r\n        movq    xmm0, rbx\r\n        pshufd  xmm0, xmm0, 68\r\n        mov     ecx, 20\r\n.LBB0_4:\r\n        movdqu  xmmword ptr [rax + 8*rcx - 144], xmm0\r\n        movdqu  xmmword ptr [rax + 8*rcx - 128], xmm0\r\n        movdqu  xmmword ptr [rax + 8*rcx - 112], xmm0\r\n        movdqu  xmmword ptr [rax + 8*rcx - 96], xmm0\r\n        movdqu  xmmword ptr [rax + 8*rcx - 80], xmm0\r\n        movdqu  xmmword ptr [rax + 8*rcx - 64], xmm0\r\n        movdqu  xmmword ptr [rax + 8*rcx - 48], xmm0\r\n        movdqu  xmmword ptr [rax + 8*rcx - 32], xmm0\r\n        movdqu  xmmword ptr [rax + 8*rcx - 16], xmm0\r\n        movdqu  xmmword ptr [rax + 8*rcx], xmm0\r\n        add     rcx, 20\r\n        cmp     rcx, 1020\r\n        jne     .LBB0_4\r\n        mov     edx, 1000\r\n        add     rsp, 8\r\n        pop     rbx\r\n        pop     r12\r\n        pop     r14\r\n        pop     r15\r\n        ret\r\n.LBB0_6:\r\n        mov     rdi, r14\r\n        mov     rsi, r15\r\n        call    qword ptr [rip + alloc::alloc::handle_alloc_error@GOTPCREL]\r\n        ud2\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111603/timeline", "performed_via_github_app": null, "state_reason": null}