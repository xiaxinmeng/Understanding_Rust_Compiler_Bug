{"url": "https://api.github.com/repos/rust-lang/rust/issues/84748", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84748/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84748/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84748/events", "html_url": "https://github.com/rust-lang/rust/issues/84748", "id": 872527479, "node_id": "MDU6SXNzdWU4NzI1Mjc0Nzk=", "number": 84748, "title": "Bad diagnostic on second borrow of mutable self", "user": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-04-30T13:38:53Z", "updated_at": "2023-05-10T07:33:23Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nThe following code:\r\n\r\n```rust\r\nuse std::collections::HashMap;\r\n\r\nstruct Node {}\r\n\r\nstruct Example {\r\n    nodes: HashMap<usize, Node>,\r\n    edges: HashMap<usize, Vec<usize>>,\r\n}\r\n\r\nimpl Example {\r\n    pub fn why_no_work(&mut self) -> Vec<&Node> {\r\n        let edges = self.edges.get(&0).unwrap();\r\n\r\n        edges\r\n            .iter()\r\n            .map(move |id| self.nodes.get(id).unwrap())\r\n            .collect()\r\n    }\r\n}\r\n```\r\n\r\nGives the following diagnostics:\r\n\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\r\n  --> src/lib.rs:16:39\r\n   |\r\n16 |             .map(move |id| self.nodes.get(id).unwrap())\r\n   |                                       ^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the lifetime `'_` as defined on the body at 16:18...\r\n  --> src/lib.rs:16:18\r\n   |\r\n16 |             .map(move |id| self.nodes.get(id).unwrap())\r\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...so that closure can access `self`\r\n  --> src/lib.rs:16:28\r\n   |\r\n16 |             .map(move |id| self.nodes.get(id).unwrap())\r\n   |                            ^^^^^^^^^^\r\nnote: but, the lifetime must be valid for the anonymous lifetime #1 defined on the method body at 11:5...\r\n  --> src/lib.rs:11:5\r\n   |\r\n11 |     pub fn why_no_work(&mut self) -> Vec<&Node> {\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...so that the expression is assignable\r\n  --> src/lib.rs:14:9\r\n   |\r\n14 | /         edges\r\n15 | |             .iter()\r\n16 | |             .map(move |id| self.nodes.get(id).unwrap())\r\n17 | |             .collect()\r\n   | |______________________^\r\n   = note: expected `Vec<&Node>`\r\n              found `Vec<&Node>`\r\n```\r\n\r\nThis diagnostic mentions `autoref`, anonymous lifetimes, and more which can be very confusing. One way to fix this is to not capture `self` which is a mutable reference into the closure passed to `map` like so:\r\n\r\n```rust\r\nuse std::collections::HashMap;\r\n\r\nstruct Node {}\r\n\r\nstruct Example {\r\n    nodes: HashMap<usize, Node>,\r\n    edges: HashMap<usize, Vec<usize>>,\r\n}\r\n\r\nimpl Example {\r\n    pub fn why_no_work(&mut self) -> Vec<&Node> {\r\n        let edges = self.edges.get(&0).unwrap();\r\n        let nodes = &self.nodes;\r\n        edges\r\n            .iter()\r\n            .map(move |id| nodes.get(id).unwrap())\r\n            .collect()\r\n    }\r\n}\r\n```\r\n\r\nI'm not exactly sure what the right approach is, but perhaps pointing out that `self` is being captured by the closure could help. This likely will go away with RFC 2229 though. \r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nThis is based on an issue originally [reported on the Rust subreddit](https://www.reddit.com/r/rust/comments/n1dqc4/struggling_to_understand_why_i_cant_use_map_in_a/).\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc --version --verbose\r\nrustc 1.51.0 (2fd73fabe 2021-03-23)\r\nbinary: rustc\r\ncommit-hash: 2fd73fabe469357a12c2c974c140f67e7cdd76d0\r\ncommit-date: 2021-03-23\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.51.0\r\nLLVM version: 11.0.1\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84748/timeline", "performed_via_github_app": null, "state_reason": null}