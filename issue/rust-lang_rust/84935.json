{"url": "https://api.github.com/repos/rust-lang/rust/issues/84935", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84935/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84935/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84935/events", "html_url": "https://github.com/rust-lang/rust/issues/84935", "id": 875943423, "node_id": "MDU6SXNzdWU4NzU5NDM0MjM=", "number": 84935, "title": "Surprising missing stability attribute error", "user": {"login": "illicitonion", "id": 1131704, "node_id": "MDQ6VXNlcjExMzE3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1131704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/illicitonion", "html_url": "https://github.com/illicitonion", "followers_url": "https://api.github.com/users/illicitonion/followers", "following_url": "https://api.github.com/users/illicitonion/following{/other_user}", "gists_url": "https://api.github.com/users/illicitonion/gists{/gist_id}", "starred_url": "https://api.github.com/users/illicitonion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/illicitonion/subscriptions", "organizations_url": "https://api.github.com/users/illicitonion/orgs", "repos_url": "https://api.github.com/users/illicitonion/repos", "events_url": "https://api.github.com/users/illicitonion/events{/privacy}", "received_events_url": "https://api.github.com/users/illicitonion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 201852178, "node_id": "MDU6TGFiZWwyMDE4NTIxNzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-stability", "name": "A-stability", "color": "f7e101", "default": false, "description": "Area: issues related to #[stable] and #[unstable] attributes themselves."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-05-05T00:22:31Z", "updated_at": "2023-04-27T03:51:43Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "On master (as of 716394d6581b60c75cfdd88b8e5b876f2db88b62) I can currently successfully compile stage1 std by running `./x.py build --stage 1`.\r\n\r\nBefore https://github.com/rust-lang/rust/pull/81837 merged, applying the following patch would still allow me to successfully compile stage1 std:\r\n\r\n```diff\r\ndiff --git a/compiler/rustc_builtin_macros/src/lib.rs b/compiler/rustc_builtin_macros/src/lib.rs\r\nindex d7926ed0e0b..95f398aee1e 100644\r\n--- a/compiler/rustc_builtin_macros/src/lib.rs\r\n+++ b/compiler/rustc_builtin_macros/src/lib.rs\r\n@@ -101,6 +101,7 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\r\n \r\n     register_derive! {\r\n         Clone: clone::expand_deriving_clone,\r\n+        DWH: clone::expand_deriving_clone,\r\n         Copy: bounds::expand_deriving_copy,\r\n         Debug: debug::expand_deriving_debug,\r\n         Default: default::expand_deriving_default,\r\ndiff --git a/compiler/rustc_span/src/symbol.rs b/compiler/rustc_span/src/symbol.rs\r\nindex b2dac10c83f..47cf56cf7af 100644\r\n--- a/compiler/rustc_span/src/symbol.rs\r\n+++ b/compiler/rustc_span/src/symbol.rs\r\n@@ -136,6 +136,7 @@\r\n         Clone,\r\n         Copy,\r\n         Count,\r\n+        DWH,\r\n         Debug,\r\n         DebugStruct,\r\n         DebugTuple,\r\ndiff --git a/library/core/src/num/mod.rs b/library/core/src/num/mod.rs\r\nindex 6032dc9a2d3..3cdf570e600 100644\r\n--- a/library/core/src/num/mod.rs\r\n+++ b/library/core/src/num/mod.rs\r\n@@ -39,6 +39,19 @@\r\n mod nonzero;\r\n mod wrapping;\r\n \r\n+#[unstable(feature = \"dwh\", issue = \"none\")]\r\n+/// Docs.\r\n+pub mod enums {\r\n+    /// Docs.\r\n+    #[cfg(not(bootstrap))]\r\n+    #[rustc_builtin_macro]\r\n+    #[unstable(feature = \"dwh\", issue = \"none\")]\r\n+    #[allow_internal_unstable(core_intrinsics)]\r\n+    pub macro DWH($item:item) {\r\n+    /* compiler built-in */\r\n+    }\r\n+}\r\n+\r\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\r\n pub use wrapping::Wrapping;\r\n```\r\n\r\nAfter https://github.com/rust-lang/rust/pull/81837, which added a non-`pub` `const` to that module, applying the above patch gives me the following error:\r\n\r\n```\r\nerror: constant has missing stability attribute\r\n   --> library/core/src/num/mod.rs:169:1\r\n    |\r\n170 | const ASCII_CASE_MASK: u8 = 0b0010_0000;\r\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n\r\nerror: could not compile `core`\r\n```\r\n\r\nIf I revert https://github.com/rust-lang/rust/pull/81837 the error goes away.\r\n\r\nThis is surprising - I wouldn't expect the presence of an unrelated, but properly marked unstable, macro in a module to change whether a `const` needs to be marked stable. I'm not sure what's wrong here - maybe the `const` does need a stability attribute and a bug means that wasn't flagged, or maybe the lint checking for missing stability attributes is getting tripped up somehow, but _something_ is wrong...\r\n\r\nThis reliably reproduces whether the added module is inline or a separate file. It does not reproduce if the macro isn't present in the module (e.g. it doesn't reproduce for an empty module).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84935/timeline", "performed_via_github_app": null, "state_reason": null}