{"url": "https://api.github.com/repos/rust-lang/rust/issues/56882", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56882/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56882/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56882/events", "html_url": "https://github.com/rust-lang/rust/issues/56882", "id": 391487022, "node_id": "MDU6SXNzdWUzOTE0ODcwMjI=", "number": 56882, "title": "Unnecessary memcpy when using array initialization shorthand", "user": {"login": "isegal", "id": 4561505, "node_id": "MDQ6VXNlcjQ1NjE1MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/4561505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isegal", "html_url": "https://github.com/isegal", "followers_url": "https://api.github.com/users/isegal/followers", "following_url": "https://api.github.com/users/isegal/following{/other_user}", "gists_url": "https://api.github.com/users/isegal/gists{/gist_id}", "starred_url": "https://api.github.com/users/isegal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isegal/subscriptions", "organizations_url": "https://api.github.com/users/isegal/orgs", "repos_url": "https://api.github.com/users/isegal/repos", "events_url": "https://api.github.com/users/isegal/events{/privacy}", "received_events_url": "https://api.github.com/users/isegal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-16T17:18:19Z", "updated_at": "2018-12-16T17:42:46Z", "closed_at": "2018-12-16T17:42:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a performance regression with shorthand array initialization that causes temporary stack allocation and copy. It appears to have been introduced between Rust 1.11.0 and 1.12.0 and exists all the way up to current beta.\r\n\r\n(All examples henceforth are with -C opt-level=3)\r\n\r\nExample:\r\n```rust\r\npub struct BigTest {\r\n    arr: [u32; 128]\r\n}\r\n\r\nimpl BigTest {\r\n    pub fn new() -> BigTest {\r\n        BigTest {\r\n            arr: [123; 128],\r\n        }\r\n    }\r\n}\r\n\r\npub fn test() -> BigTest {\r\n    BigTest::new()\r\n}\r\n```\r\n\r\nIt appears that in this case, a temporary is allocated on stack, initialized and then copied.\r\nThis could cause performance issues with large array initialization.\r\n\r\n```asm\r\n.LCPI0_0:\r\n        .long   123\r\n        .long   123\r\n        .long   123\r\n        .long   123\r\nexample::BigTest::new:\r\n        push    rbx\r\n        sub     rsp, 512\r\n        mov     rbx, rdi\r\n        movaps  xmm0, xmmword ptr [rip + .LCPI0_0]\r\n        movaps  xmmword ptr [rsp], xmm0\r\n        movaps  xmmword ptr [rsp + 16], xmm0\r\n        movaps  xmmword ptr [rsp + 32], xmm0\r\n        movaps  xmmword ptr [rsp + 48], xmm0\r\n        movaps  xmmword ptr [rsp + 64], xmm0\r\n        movaps  xmmword ptr [rsp + 80], xmm0\r\n        movaps  xmmword ptr [rsp + 96], xmm0\r\n        movaps  xmmword ptr [rsp + 112], xmm0\r\n        movaps  xmmword ptr [rsp + 128], xmm0\r\n        movaps  xmmword ptr [rsp + 144], xmm0\r\n        movaps  xmmword ptr [rsp + 160], xmm0\r\n        movaps  xmmword ptr [rsp + 176], xmm0\r\n        movaps  xmmword ptr [rsp + 192], xmm0\r\n        movaps  xmmword ptr [rsp + 208], xmm0\r\n        movaps  xmmword ptr [rsp + 224], xmm0\r\n        movaps  xmmword ptr [rsp + 240], xmm0\r\n        movaps  xmmword ptr [rsp + 256], xmm0\r\n        movaps  xmmword ptr [rsp + 272], xmm0\r\n        movaps  xmmword ptr [rsp + 288], xmm0\r\n        movaps  xmmword ptr [rsp + 304], xmm0\r\n        movaps  xmmword ptr [rsp + 320], xmm0\r\n        movaps  xmmword ptr [rsp + 336], xmm0\r\n        movaps  xmmword ptr [rsp + 352], xmm0\r\n        movaps  xmmword ptr [rsp + 368], xmm0\r\n        movaps  xmmword ptr [rsp + 384], xmm0\r\n        movaps  xmmword ptr [rsp + 400], xmm0\r\n        movaps  xmmword ptr [rsp + 416], xmm0\r\n        movaps  xmmword ptr [rsp + 432], xmm0\r\n        movaps  xmmword ptr [rsp + 448], xmm0\r\n        movaps  xmmword ptr [rsp + 464], xmm0\r\n        movaps  xmmword ptr [rsp + 480], xmm0\r\n        movaps  xmmword ptr [rsp + 496], xmm0\r\n        mov     rsi, rsp\r\n        mov     edx, 512\r\n        call    qword ptr [rip + memcpy@GOTPCREL]\r\n        mov     rax, rbx\r\n        add     rsp, 512\r\n        pop     rbx\r\n        ret\r\n\r\nexample::test:\r\n        push    rbx\r\n        mov     rbx, rdi\r\n        call    qword ptr [rip + example::BigTest::new@GOTPCREL]\r\n        mov     rax, rbx\r\n        pop     rbx\r\n        ret\r\n```\r\n\r\nWithout shorthand, there is no temporary allocation:\r\n\r\n```rust\r\npub struct BigTest {\r\n\r\n    arr: [u32; 128]\r\n}\r\n\r\nimpl BigTest {\r\n    pub fn new() -> BigTest {\r\n        BigTest {\r\n    \r\n            arr: [\r\n            123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,\r\n            123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,\r\n            123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,\r\n            123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,\r\n            123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,\r\n            123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,\r\n            123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,\r\n            123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,\r\n            ], \r\n        }\r\n    }\r\n}\r\n\r\npub fn test() -> BigTest {\r\n    BigTest::new()\r\n}\r\n\r\n```\r\n\r\n```asm\r\n.LCPI0_0:\r\n        .long   123\r\n        .long   123\r\n        .long   123\r\n        .long   123\r\nexample::BigTest::new:\r\n        mov     rax, rdi\r\n        movaps  xmm0, xmmword ptr [rip + .LCPI0_0]\r\n        movups  xmmword ptr [rdi], xmm0\r\n        movups  xmmword ptr [rdi + 16], xmm0\r\n        movups  xmmword ptr [rdi + 32], xmm0\r\n        movups  xmmword ptr [rdi + 48], xmm0\r\n        movups  xmmword ptr [rdi + 64], xmm0\r\n        movups  xmmword ptr [rdi + 80], xmm0\r\n        movups  xmmword ptr [rdi + 96], xmm0\r\n        movups  xmmword ptr [rdi + 112], xmm0\r\n        movups  xmmword ptr [rdi + 128], xmm0\r\n        movups  xmmword ptr [rdi + 144], xmm0\r\n        movups  xmmword ptr [rdi + 160], xmm0\r\n        movups  xmmword ptr [rdi + 176], xmm0\r\n        movups  xmmword ptr [rdi + 192], xmm0\r\n        movups  xmmword ptr [rdi + 208], xmm0\r\n        movups  xmmword ptr [rdi + 224], xmm0\r\n        movups  xmmword ptr [rdi + 240], xmm0\r\n        movups  xmmword ptr [rdi + 256], xmm0\r\n        movups  xmmword ptr [rdi + 272], xmm0\r\n        movups  xmmword ptr [rdi + 288], xmm0\r\n        movups  xmmword ptr [rdi + 304], xmm0\r\n        movups  xmmword ptr [rdi + 320], xmm0\r\n        movups  xmmword ptr [rdi + 336], xmm0\r\n        movups  xmmword ptr [rdi + 352], xmm0\r\n        movups  xmmword ptr [rdi + 368], xmm0\r\n        movups  xmmword ptr [rdi + 384], xmm0\r\n        movups  xmmword ptr [rdi + 400], xmm0\r\n        movups  xmmword ptr [rdi + 416], xmm0\r\n        movups  xmmword ptr [rdi + 432], xmm0\r\n        movups  xmmword ptr [rdi + 448], xmm0\r\n        movups  xmmword ptr [rdi + 464], xmm0\r\n        movups  xmmword ptr [rdi + 480], xmm0\r\n        movups  xmmword ptr [rdi + 496], xmm0\r\n        ret\r\n\r\nexample::test:\r\n        push    rbx\r\n        mov     rbx, rdi\r\n        call    qword ptr [rip + example::BigTest::new@GOTPCREL]\r\n        mov     rax, rbx\r\n        pop     rbx\r\n        ret\r\n```\r\n\r\nRust 1.11.0 when using shorthand, there is no extra allocation:\r\n```asm\r\n.LCPI0_0:\r\n        .long   123\r\n        .long   123\r\n        .long   123\r\n        .long   123\r\nexample::BigTest::new:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        movaps  xmm0, xmmword ptr [rip + .LCPI0_0]\r\n        movups  xmmword ptr [rdi], xmm0\r\n        movups  xmmword ptr [rdi + 16], xmm0\r\n        movups  xmmword ptr [rdi + 32], xmm0\r\n        movups  xmmword ptr [rdi + 48], xmm0\r\n        movups  xmmword ptr [rdi + 64], xmm0\r\n        movups  xmmword ptr [rdi + 80], xmm0\r\n        movups  xmmword ptr [rdi + 96], xmm0\r\n        movups  xmmword ptr [rdi + 112], xmm0\r\n        movups  xmmword ptr [rdi + 128], xmm0\r\n        movups  xmmword ptr [rdi + 144], xmm0\r\n        movups  xmmword ptr [rdi + 160], xmm0\r\n        movups  xmmword ptr [rdi + 176], xmm0\r\n        movups  xmmword ptr [rdi + 192], xmm0\r\n        movups  xmmword ptr [rdi + 208], xmm0\r\n        movups  xmmword ptr [rdi + 224], xmm0\r\n        movups  xmmword ptr [rdi + 240], xmm0\r\n        movups  xmmword ptr [rdi + 256], xmm0\r\n        movups  xmmword ptr [rdi + 272], xmm0\r\n        movups  xmmword ptr [rdi + 288], xmm0\r\n        movups  xmmword ptr [rdi + 304], xmm0\r\n        movups  xmmword ptr [rdi + 320], xmm0\r\n        movups  xmmword ptr [rdi + 336], xmm0\r\n        movups  xmmword ptr [rdi + 352], xmm0\r\n        movups  xmmword ptr [rdi + 368], xmm0\r\n        movups  xmmword ptr [rdi + 384], xmm0\r\n        movups  xmmword ptr [rdi + 400], xmm0\r\n        movups  xmmword ptr [rdi + 416], xmm0\r\n        movups  xmmword ptr [rdi + 432], xmm0\r\n        movups  xmmword ptr [rdi + 448], xmm0\r\n        movups  xmmword ptr [rdi + 464], xmm0\r\n        movups  xmmword ptr [rdi + 480], xmm0\r\n        movups  xmmword ptr [rdi + 496], xmm0\r\n        mov     rax, rdi\r\n        pop     rbp\r\n        ret\r\n\r\n.LCPI1_0:\r\n        .long   123\r\n        .long   123\r\n        .long   123\r\n        .long   123\r\nexample::test:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        movaps  xmm0, xmmword ptr [rip + .LCPI1_0]\r\n        movups  xmmword ptr [rdi], xmm0\r\n        movups  xmmword ptr [rdi + 16], xmm0\r\n        movups  xmmword ptr [rdi + 32], xmm0\r\n        movups  xmmword ptr [rdi + 48], xmm0\r\n        movups  xmmword ptr [rdi + 64], xmm0\r\n        movups  xmmword ptr [rdi + 80], xmm0\r\n        movups  xmmword ptr [rdi + 96], xmm0\r\n        movups  xmmword ptr [rdi + 112], xmm0\r\n        movups  xmmword ptr [rdi + 128], xmm0\r\n        movups  xmmword ptr [rdi + 144], xmm0\r\n        movups  xmmword ptr [rdi + 160], xmm0\r\n        movups  xmmword ptr [rdi + 176], xmm0\r\n        movups  xmmword ptr [rdi + 192], xmm0\r\n        movups  xmmword ptr [rdi + 208], xmm0\r\n        movups  xmmword ptr [rdi + 224], xmm0\r\n        movups  xmmword ptr [rdi + 240], xmm0\r\n        movups  xmmword ptr [rdi + 256], xmm0\r\n        movups  xmmword ptr [rdi + 272], xmm0\r\n        movups  xmmword ptr [rdi + 288], xmm0\r\n        movups  xmmword ptr [rdi + 304], xmm0\r\n        movups  xmmword ptr [rdi + 320], xmm0\r\n        movups  xmmword ptr [rdi + 336], xmm0\r\n        movups  xmmword ptr [rdi + 352], xmm0\r\n        movups  xmmword ptr [rdi + 368], xmm0\r\n        movups  xmmword ptr [rdi + 384], xmm0\r\n        movups  xmmword ptr [rdi + 400], xmm0\r\n        movups  xmmword ptr [rdi + 416], xmm0\r\n        movups  xmmword ptr [rdi + 432], xmm0\r\n        movups  xmmword ptr [rdi + 448], xmm0\r\n        movups  xmmword ptr [rdi + 464], xmm0\r\n        movups  xmmword ptr [rdi + 480], xmm0\r\n        movups  xmmword ptr [rdi + 496], xmm0\r\n        mov     rax, rdi\r\n        pop     rbp\r\n        ret\r\n```\r\nSource: https://rust.godbolt.org/z/isxu3Y\r\n", "closed_by": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56882/timeline", "performed_via_github_app": null, "state_reason": "completed"}