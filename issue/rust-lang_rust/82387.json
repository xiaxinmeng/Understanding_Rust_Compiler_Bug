{"url": "https://api.github.com/repos/rust-lang/rust/issues/82387", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82387/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82387/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82387/events", "html_url": "https://github.com/rust-lang/rust/issues/82387", "id": 813143663, "node_id": "MDU6SXNzdWU4MTMxNDM2NjM=", "number": 82387, "title": "Account for type and trait errors due to incorrectly wrapped  types", "user": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}, {"id": 1839565265, "node_id": "MDU6TGFiZWwxODM5NTY1MjY1", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-terse", "name": "D-terse", "color": "c9f7a3", "default": false, "description": "A diagnostic that doesn't give enough information about the problem at hand"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-02-22T05:44:18Z", "updated_at": "2021-02-23T07:18:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[Given the following code](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=fc6054ff31f0d741e529808e0a618902):\r\n\r\n```rust\r\ntrait CanFoo {}\r\ntrait IsFoo {}\r\nimpl<T: IsFoo> CanFoo for T {}\r\nstruct Foo;\r\nimpl IsFoo for Foo {}\r\n\r\nfn foo(x: impl CanFoo) {}\r\nfn bar() -> Result<Foo, ()> { Err(()) }\r\n\r\nfn main() {\r\n    foo(bar());\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0277]: the trait bound `Result<Foo, ()>: IsFoo` is not satisfied\r\n  --> src/main.rs:11:9\r\n   |\r\n7  | fn foo(x: impl CanFoo) {}\r\n   |                ------ required by this bound in `foo`\r\n...\r\n11 |     foo(bar());\r\n   |         ^^^^^ the trait `IsFoo` is not implemented for `Result<Foo, ()>`\r\n   |\r\n   = note: required because of the requirements on the impl of `CanFoo` for `Result<Foo, ()>`\r\n```\r\n\r\n[For the case of a type error](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=ec9f8aa7a8d7f035eff5fc262de59c05), the output is less verbose and clear enough:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:11:9\r\n   |\r\n11 |     foo(bar());\r\n   |         ^^^^^ expected struct `Foo`, found enum `Result`\r\n   |\r\n   = note: expected struct `Foo`\r\n                found enum `Result<Foo, ()>`\r\n```\r\n\r\nBut ideally, for both of these cases we should be looking at available fields of all of the type's variants to detect cases where the found value is either incorrectly wrapped and could potentially be accessed, _or_ if it just needs to be wrapped with the expected new-type or an appropriate variant. For cases involving `Result` in particular we should be able to suggest `?` if the enclosing `fn` has an appropriate return type. For all other cases where fields are not directly accessible, we _could_ look at the available associated methods with a suitable return type, but we've tried doing this in the past and the suggestions weren't helpful enough. If we were to go down that route again, we should introduce an attribute to annotate `fn`s we are comfortable suggesting to minimize false positives.\r\n\r\n_Taken from subthreads originated at https://twitter.com/mcclure111/status/1363586990944444416_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82387/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82387/timeline", "performed_via_github_app": null, "state_reason": null}