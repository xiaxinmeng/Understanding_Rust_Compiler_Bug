{"url": "https://api.github.com/repos/rust-lang/rust/issues/57276", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57276/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57276/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57276/events", "html_url": "https://github.com/rust-lang/rust/issues/57276", "id": 395343276, "node_id": "MDU6SXNzdWUzOTUzNDMyNzY=", "number": 57276, "title": "ICE in object_safety.rs due to method receiver not having a layout", "user": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472515079, "node_id": "MDU6TGFiZWwxNDcyNTE1MDc5", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-arbitrary_self_types", "name": "F-arbitrary_self_types", "color": "f9c0cc", "default": false, "description": "`#![feature(arbitrary_self_types)]`"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1486728712, "node_id": "MDU6TGFiZWwxNDg2NzI4NzEy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-dispatch_from_dyn", "name": "F-dispatch_from_dyn", "color": "f9c0cc", "default": false, "description": "`#![feature(dispatch_from_dyn)]`"}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-02T18:52:54Z", "updated_at": "2022-05-10T11:39:16Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following code causes an ICE, ``Error: the type `T` has an unknown layout``:\r\n\r\n```rust\r\n#![feature(arbitrary_self_types, dispatch_from_dyn)]\r\n\r\nuse std::ops::{Deref, DispatchFromDyn};\r\n\r\ntrait Trait<T: Deref<Target=Self> + DispatchFromDyn<T>> {\r\n    fn foo(self: T) -> dyn Trait<T>;\r\n}\r\n```\r\n\r\nSimilar to #56806, `receiver_is_dispatchable` succeeds, and then there is an ICE during the layout sanity checks. In this case, it is because the method receiver is a type parameter and has no layout.\r\n\r\n`receiver_is_dispatchable` checks that the following predicate holds: \r\n\r\n```\r\nforall (U: Trait + ?Sized) {\r\n    if (Self: Unsize<U>) {\r\n        Receiver: DispatchFromDyn<Receiver[Self => U]>\r\n    }\r\n}\r\n```\r\n\r\nIn this case, it reduces to `T: DispatchFromDyn<T>`, which is provided by a where clause. In #56806, it reduced to `Box<dyn Trait>: DispatchFromDyn<Box<dyn Trait>>`. The check passes in both cases, and then there is an ICE during the layout sanity checks.\r\n\r\nOne way to fix both of these cases would be to add an extra requirement to `receiver_is_dispatchable`: that `Receiver` and `Receiver[Self => U]` are not the same type. I'm not sure if there are any edge cases that that doesn't cover.\r\n\r\ncc @varkor #57229", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57276/timeline", "performed_via_github_app": null, "state_reason": null}