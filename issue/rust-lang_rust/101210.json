{"url": "https://api.github.com/repos/rust-lang/rust/issues/101210", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101210/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101210/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101210/events", "html_url": "https://github.com/rust-lang/rust/issues/101210", "id": 1356077376, "node_id": "I_kwDOAAsO6M5Q1BlA", "number": 101210, "title": "match-then-remake `Result` doesn't optimize away for some payload widths", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-08-30T17:18:46Z", "updated_at": "2023-04-05T17:33:57Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "As [the new codegen test](https://github.com/rust-lang/rust/pull/100693/files#diff-68a12d31335d7f061169500381ebaf9634034cf419332c16512355df8c8cfddeR16) confirms, matching and rebuilding a `Result<i32, u32>` optimizes away now (on x64).\r\n\r\nHowever, it seemingly *doesn't* optimize away if the ok and error types are *64* bits:\r\n```rust\r\npub fn result_nop_match_64(x: Result<i64, u64>) -> Result<i64, u64> {\r\n    match x {\r\n        Ok(x) => Ok(x),\r\n        Err(x) => Err(x),\r\n    }\r\n}\r\n```\r\nhttps://rust.godbolt.org/z/fMn6aqWG8\r\n```nasm\r\nresult_nop_match_64:\r\n        mov     rax, rdi\r\n        cmp     qword ptr [rsi], 0\r\n        je      .LBB0_1\r\n        mov     rcx, qword ptr [rsi + 8]\r\n        mov     qword ptr [rax + 8], rcx\r\n        mov     ecx, 1\r\n        mov     qword ptr [rax], rcx\r\n        ret\r\n.LBB0_1:\r\n        mov     rcx, qword ptr [rsi + 8]\r\n        mov     qword ptr [rax + 8], rcx\r\n        xor     ecx, ecx\r\n        mov     qword ptr [rax], rcx\r\n        ret\r\n```\r\n\r\n---\r\n\r\nInterestingly, it *does* optimize away when there's another enum in the middle, like happens in the `?` desugaring.  From that same godbolt,\r\n```rust\r\npub fn result_nop_traits_64(x: Result<i64, u64>) -> Result<i64, u64> {\r\n    try {\r\n        x?\r\n    }\r\n}\r\n```\r\ngives\r\n```nasm\r\nresult_nop_traits_64:\r\n        mov     rax, rdi\r\n        movups  xmm0, xmmword ptr [rsi]\r\n        movups  xmmword ptr [rdi], xmm0\r\n        ret\r\n```\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101210/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101210/timeline", "performed_via_github_app": null, "state_reason": null}