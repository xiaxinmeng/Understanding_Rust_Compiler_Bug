{"url": "https://api.github.com/repos/rust-lang/rust/issues/87902", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87902/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87902/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87902/events", "html_url": "https://github.com/rust-lang/rust/issues/87902", "id": 964494381, "node_id": "MDU6SXNzdWU5NjQ0OTQzODE=", "number": 87902, "title": "Cannot Drop A Closure With Non Copy Captures Confusing Error", "user": {"login": "danii", "id": 39541871, "node_id": "MDQ6VXNlcjM5NTQxODcx", "avatar_url": "https://avatars.githubusercontent.com/u/39541871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danii", "html_url": "https://github.com/danii", "followers_url": "https://api.github.com/users/danii/followers", "following_url": "https://api.github.com/users/danii/following{/other_user}", "gists_url": "https://api.github.com/users/danii/gists{/gist_id}", "starred_url": "https://api.github.com/users/danii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danii/subscriptions", "organizations_url": "https://api.github.com/users/danii/orgs", "repos_url": "https://api.github.com/users/danii/repos", "events_url": "https://api.github.com/users/danii/events{/privacy}", "received_events_url": "https://api.github.com/users/danii/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-08-10T00:36:28Z", "updated_at": "2021-08-10T16:29:08Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The All Mighty Borrow Checker appears to not allow you to drop a closure that accepts a lifetime as an argument, when a pointer to that closure has the same lifetime. I believe this to be a bug, because when you remove the drop call (`drop(func);`), Rust already *does the same thing implicitly* at the end of the block, without error.\r\n\r\n[Here's the minimum replicatale error I have found.](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=1230155bb5c76079465d91027830e8c6)\r\n```rust\r\ntype LifetimeBound<'r> = &'r dyn Fn(&'r ());\r\n\r\nfn main() {\r\n    // This creates a string.\r\n\tlet capture = String::new();\r\n\t// This moves string into a closure.\r\n\tlet func = move |_| drop(&capture);\r\n\t// This forces func to implement Fn(PhantomData<&'r ()>), where 'r lasts as\r\n\t// long as func does.\r\n\tlet func_ref_bound: LifetimeBound = &func;\r\n\t// 'r ends here, because the reference with the lifetime 'r is dropped.\r\n\tdrop(func_ref_bound);\r\n\t// Should be able to drop, there are no more references to func.\r\n\tdrop(func);\r\n}\r\n```\r\n\r\n## Expected Result & Actual Result\r\nI expected that using `drop` on `func` is the same thing as letting `func` fall out of scope; it's what happens inside `drop` anyway.\r\n\r\nI expected the above code to act and compile exactly the same as \r\n[this code](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=909b6dc4721ad6e8cc9fbae6d05f0e36). It compiles perfectly.\r\n```rust\r\ntype LifetimeBound<'r> = &'r dyn Fn(&'r ());\r\n\r\nfn main() {\r\n\tlet capture = String::new();\r\n\tlet func = move |_| drop(&capture);\r\n\tlet func_ref_bound: LifetimeBound = &func;\r\n\tdrop(func_ref_bound);\r\n}\r\n```\r\n\r\nInstead, compilation error E0505 is emitted;\r\n```\r\nerror[E0505]: cannot move out of `func` because it is borrowed\r\n  --> src/main.rs:14:7\r\n   |\r\n10 |     let func_ref_bound: LifetimeBound = &func;\r\n   |                                         ----- borrow of `func` occurs here\r\n...\r\n14 |     drop(func);\r\n   |          ^^^^\r\n   |          |\r\n   |          move out of `func` occurs here\r\n   |          borrow later used here\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\n## Meta\r\nI use both stable and nightly, this is the version of both of them.\r\n\r\nStable;\r\n```\r\nrustc 1.54.0 (a178d0322 2021-07-26)\r\nbinary: rustc\r\ncommit-hash: a178d0322ce20e33eac124758e837cbd80a6f633\r\ncommit-date: 2021-07-26\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.54.0\r\nLLVM version: 12.0.1\r\n```\r\n\r\nNightly;\r\n```\r\nrustc 1.56.0-nightly (ad981d58e 2021-08-08)\r\nbinary: rustc\r\ncommit-hash: ad981d58e1ca16bcf4072577934630deb11c5e14\r\ncommit-date: 2021-08-08\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.56.0-nightly\r\nLLVM version: 12.0.1\r\n```\r\n\r\nBoth compilers have this issue.\r\n\r\n## Quirks\r\nThis is quite the weird bug, there are multiple ways to suppress it but they all don't make sense. These are all the ways people in the Rust Language Discord server found to fix it, but they don't really help explain the bug at all.\r\n- Add a type to the closure argument `|_: PhantomData<&()>|`\r\n- Make the captured variable something copyable `let capture = ();`\r\n\r\n## Why Fix?\r\nI believe this bug should be fixed because The All Mighty Borrow Checker has been given too much power, and is now starting to use it against us. \ud83d\ude1c No, I believe this bug should be fixed because writing calls to drop for each variable at the end of the function in reverse order is, as I've been told, exactly the same as if you hadn't. On top of that, it is extremely confusing, especially in situations where you may need to manually change the order in which things drop, like the situation I came from. Even if this bug is null, the error message should still be changed, as it is misleading.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87902/timeline", "performed_via_github_app": null, "state_reason": null}