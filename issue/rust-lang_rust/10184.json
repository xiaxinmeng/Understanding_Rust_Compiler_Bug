{"url": "https://api.github.com/repos/rust-lang/rust/issues/10184", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/10184/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/10184/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/10184/events", "html_url": "https://github.com/rust-lang/rust/issues/10184", "id": 21869137, "node_id": "MDU6SXNzdWUyMTg2OTEzNw==", "number": 10184, "title": "floating point to integer casts can cause undefined behaviour", "user": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 234, "created_at": "2013-10-31T00:18:33Z", "updated_at": "2020-05-06T20:33:41Z", "closed_at": "2020-05-06T20:33:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Status as of 2020-04-18\r\n\r\nWe intend to stabilize the saturating-float-casts behavior for `as`, and have stabilized unsafe library functions that handle the previous behavior. See #71269 for the latest discussion on that stabilization process.\r\n\r\n### Status as of 2018-11-05\r\n\r\nA flag has been implemented in the compiler, `-Zsaturating-float-casts`, which will cause all float to integer casts have \"saturating\" behavior where if it's out of bounds it's clamped to the nearest bound. A [call for benchmarking](https://internals.rust-lang.org/t/help-us-benchmark-saturating-float-casts/6231) of this change went out awhile ago. Results, while positive in many projects, are [quite negative for some projects](https://github.com/rust-lang/rust/issues/10184#issuecomment-429663706) and indicates that we're not done here.\r\n\r\nThe next steps are figuring out how to recover performance for these cases:\r\n\r\n* One option is to take today's `as` cast behavior (which is UB in some cases) and add `unsafe` functions for the relevant types and such.\r\n* Another is to wait for LLVM to add a `freeze` concept which means that we get a garbage bit pattern, but it's at least not UB\r\n* Another is to implement casts via inline assembly in LLVM IR, as the current codegen is not heavily optimized.\r\n\r\n## Old status\r\n\r\n**UPDATE (by @nikomatsakis):** After much discussion, we've got [the rudiments of a plan](https://github.com/rust-lang/rust/issues/10184#issuecomment-302198137) for how to address this problem. But we need some help with actually investigating the performance impact and working out the final details!\r\n\r\n----\r\n\r\n**ORIGINAL ISSUE FOLLOWS:**\r\n\r\n> If the value cannot fit in ty2, the results are undefined.\r\n\r\n``` rust\r\n1.04E+17 as u8\r\n```\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/10184/reactions", "total_count": 58, "+1": 57, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/10184/timeline", "performed_via_github_app": null, "state_reason": "completed"}