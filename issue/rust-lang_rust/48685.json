{"url": "https://api.github.com/repos/rust-lang/rust/issues/48685", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48685/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48685/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48685/events", "html_url": "https://github.com/rust-lang/rust/issues/48685", "id": 301918072, "node_id": "MDU6SXNzdWUzMDE5MTgwNzI=", "number": 48685, "title": "Query Parallelization Tracking Issue", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 849077850, "node_id": "MDU6TGFiZWw4NDkwNzc4NTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-compiler-performance", "name": "WG-compiler-performance", "color": "c2e0c6", "default": false, "description": "Working group: Compiler Performance"}, {"id": 891133401, "node_id": "MDU6TGFiZWw4OTExMzM0MDE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-parallel-queries", "name": "A-parallel-queries", "color": "f7e101", "default": false, "description": "Area: Parallel query execution"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-03-02T21:57:17Z", "updated_at": "2023-02-22T21:08:29Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This issue is a sub-issue of https://github.com/rust-lang/rust/issues/48547: it tracks the in-progress effort to parallelize rustc across queries. This work is being spearheaded by @zoxc. \r\n\r\n### Goals\r\n\r\nAllow rustc to execute queries in parallel with one another. Enable the use of rayon or other tools for intra-query parallelization as well. See [this internals thread](https://internals.rust-lang.org/t/parallelizing-rustc-using-rayon/6606) for more information.\r\n\r\n### Overview of the plan\r\n\r\n- [x] Make all types in the compiler send and sync by landing @Zoxc's existing work\r\n    - The existing work largely replaces `RefCell` usage with `Mutex`\r\n    - In many cases, [the interior mutability itself can be refactored away](https://internals.rust-lang.org/t/parallelizing-rustc-using-rayon/6606/24?u=nikomatsakis). The plan is do this as a second step.\r\n- [x] Set up CI so this gets some testing (https://github.com/rust-lang/rust/issues/48607)\r\n- [x] Implement a thread pool that is integrated with Cargo's jobserver (https://github.com/rust-lang/rust/pull/56946)\r\n- [ ] Build list of all sources of shared state in the compiler by auditing PR history https://github.com/rust-lang/rust/issues/63643\r\n- [ ] Audit each source of shared state, leading to either refactoring to reduce use of shared state, or persistent documentation covering invariants, atomicity, and lock orderings\r\n\r\n### Pending refactorings\r\n\r\n- [ ] [ParseSess.included_mod_stack](https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/mod.rs#L51) might be problematic\r\n- [ ] Ensure that the err_count() API is not used to discover if errors happen in parallel code (cc  #49737)\r\n- [ ] Find a way to order error messages deterministically so that if a query depends on another query, its error messages appear after the other query (cc #49737)\r\n- [ ] Make `mk_attr_id` use a scoped thread local or make it part of `ParseSess`\r\n- [ ] See if `GlobalCtxt.rcache`, `OnDiskCache.file_index_to_file` and `OnDiskCache.synthetic_expansion_infos`  are faster as thread-locals\r\n- [ ] Review usages of `Session.lint_store` and `Session.buffered_lints`\r\n- [ ] Fix https://github.com/rust-lang/rust/issues/50507, as it may cause issues with parallel rustc\r\n- [ ] Find a way to deal with marking attributes as used\r\n- [ ] Ensure Rayon executes all remaining work when we panic inside the thread pool\r\n\r\n### Completed refactorings\r\n\r\n- [x] Remove HIR inlining (https://github.com/rust-lang/rust/issues/49690)\r\n- [x] [Make GlobalCtxt implement Sync](#50108)\r\n- [x] Use scoped thread locals instead of globals, https://github.com/rust-lang/rust/pull/46193\r\n- [x] Misc fixes required to use a rayon thread pool, https://github.com/rust-lang/rust/pull/46564\r\n- [x] Ensure metadata [loaded by LlvmMetadataLoader](https://github.com/rust-lang/rust/blob/master/src/librustc_trans/metadata.rs#L25) does not get freed on the wrong thread\r\n- [x] [CurrentDepGraph.task_stack](https://github.com/rust-lang/rust/blob/master/src/librustc/dep_graph/graph.rs#L764) has to be made a `QueryJob` field. (implemented in https://github.com/rust-lang/rust/pull/49732)\r\n- [x] Check that optimization fuel is not used with parallel queries\r\n- [x] Review `libproc_macro` for issues, Find out which types should be `Send`, `Sync`. Deal with `Deref` impls for `Symbol`. (https://github.com/rust-lang/rust/pull/49219)\r\n- [x] [Run CI with cfg(parallel_queries)](https://github.com/rust-lang/rust/issues/48607)\r\n- [x] Refactor away `CStore::next_crate_num`\r\n- [x] Make `FileMap.lines`, `FileMap.multibyte_chars`,  and `FileMap.non_narrow_chars` immutable (implemented in #50997)\r\n- [x] When executing queries, instead of keeping around a lock to the query map, create a job object immediately instead (https://github.com/rust-lang/rust/pull/50102)\r\n- [x] Ensure all diagnostics are emitted before returning from `DepGraph.try_mark_green`\r\n- [x] Refactor `DepGraphData.previous_work_products` so it becomes immutable (#50501) (implemented in #50524)\r\n- [x] Remove `DepGraphData.work_products` by threaded the value through `save_trans_partition() -> copy_module_artifacts_into_incr_comp_cache() -> OngoingCrateTranslation::join()` (#50500) (implemented in #50885)\r\n- [x] The `TransitiveRelation` doesn't really need to use a `RefCell`. In the future, it won't even be shared, but regardless the caching scheme [could be reworked to avoid `RefCell`](https://github.com/rust-lang/rust/pull/48587#issuecomment-369336651) (implemented in https://github.com/rust-lang/rust/pull/99702).\r\n- [x] Refactor `GlobalCtxt::layout_depth` so it does not need global mutable state (https://github.com/rust-lang/rust/issues/49735) (implemented in https://github.com/rust-lang/rust/pull/100748)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48685/reactions", "total_count": 22, "+1": 14, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 8, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48685/timeline", "performed_via_github_app": null, "state_reason": null}