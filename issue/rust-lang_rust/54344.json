{"url": "https://api.github.com/repos/rust-lang/rust/issues/54344", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54344/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54344/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54344/events", "html_url": "https://github.com/rust-lang/rust/issues/54344", "id": 361581032, "node_id": "MDU6SXNzdWUzNjE1ODEwMzI=", "number": 54344, "title": "Rust compiler not inferring the correct trait implementation", "user": {"login": "Tey", "id": 646444, "node_id": "MDQ6VXNlcjY0NjQ0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/646444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tey", "html_url": "https://github.com/Tey", "followers_url": "https://api.github.com/users/Tey/followers", "following_url": "https://api.github.com/users/Tey/following{/other_user}", "gists_url": "https://api.github.com/users/Tey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tey/subscriptions", "organizations_url": "https://api.github.com/users/Tey/orgs", "repos_url": "https://api.github.com/users/Tey/repos", "events_url": "https://api.github.com/users/Tey/events{/privacy}", "received_events_url": "https://api.github.com/users/Tey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-19T05:12:48Z", "updated_at": "2022-03-22T08:20:26Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "(I've raised a question on [SO](https://stackoverflow.com/q/52153792/5099839), and the general answer is that it is due to a bug in rustc that should be reported here, so here I am :) I'm not sure about the report format you expect, so sorry if the following does not match)\r\n\r\nI'm trying to implement a reader which could be able to extract values from different types from a file. There is a `File` struct which represents the file resource (and methods to access its content), and a `Reader` trait which makes it possible to extract values based on the resulting type. The (dummy) implementation looks like this ([playground](https://play.rust-lang.org/?gist=859160ad8016cafc2ce07c7e6b724fe7&version=stable&mode=debug&edition=2015)):\r\n````rust\r\nuse std::io::Result;\r\n\r\nmod file {\r\n    use std::io::Result;\r\n\r\n    pub struct File {/* ... */}\r\n\r\n    pub trait Reader<T> {\r\n        fn read(&mut self) -> Result<T>;\r\n    }\r\n\r\n    impl Reader<u32> for File {\r\n        fn read(&mut self) -> Result<u32> {\r\n            // Dummy implementation\r\n            Ok(10)\r\n        }\r\n    }\r\n\r\n    impl Reader<u8> for File {\r\n        fn read(&mut self) -> Result<u8> {\r\n            // Dummy implementation\r\n            Ok(0)\r\n        }\r\n    }\r\n\r\n    impl Reader<bool> for File {\r\n        fn read(&mut self) -> Result<bool> {\r\n            // Dummy implementation\r\n            Ok(false)\r\n        }\r\n    }\r\n}\r\n\r\nuse file::{File, Reader};\r\n\r\nimpl<T: Default> Reader<Vec<T>> for File\r\nwhere\r\n    File: Reader<T> + Reader<u32>,\r\n{\r\n    fn read(&mut self) -> Result<Vec<T>> {\r\n        let count: u32 = self.read()?;\r\n        let mut array: Vec<T> = Vec::with_capacity(count as usize);\r\n        for _ in 0..count {\r\n            let mut item: T = self.read()?;\r\n            array.push(item);\r\n        }\r\n\r\n        Ok(array)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut file = File {};\r\n    let _v: Vec<u8> = file.read().unwrap();\r\n}\r\n````\r\n\r\nEverything worked until I added the `Reader<Vec<T>>` implementation. Vectors are stored in the file as a `u32` indicating the number of elements followed by the element's representation. The compiler gives the following error:\r\n\r\n    error[E0308]: try expression alternatives have incompatible types\r\n      --> src/main.rs:41:26\r\n       |\r\n    41 |         let count: u32 = self.read()?;\r\n       |                          ^^^^^^^^^^^^\r\n       |                          |\r\n       |                          expected u32, found type parameter\r\n       |                          help: try wrapping with a success variant: `Ok(self.read()?)`\r\n       |\r\n       = note: expected type `u32`\r\n                  found type `T`\r\n\r\nEven though I specified that `File` implements both `Reader<T>` and `Reader<u32>`, it seems to be stuck on `Reader<T>`.\r\n\r\nWhat's even more strange is that if I only keep 2 implementations of the `Reader` trait (removing `Reader<bool>` for instance), the code compiles without any issue ([playground](https://play.rust-lang.org/?gist=0b4ead500802fcd4662413ac4ef340ea&version=stable&mode=debug&edition=2015)).\r\n\r\nThe current workaround is to explicitly tell the compiler it should use the `Reader<u32>` implementation:\r\n\r\n````rust\r\nlet count: u32 = (self as &mut Reader<u32>).read()?;\r\n````\r\n\r\n**But the compiler should be able to detect this implicitly, as it does when only 2 implementations exist.**\r\n\r\nShould Rust Playground be trusted, issue appears in stable (1.29.0), unstable (6fdf1dbb9a6d2fbd7894 aka 1.29.0-beta.15) and nightly (2224a42c353636db6ee5 aka 1.30.0-nightly).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54344/timeline", "performed_via_github_app": null, "state_reason": null}