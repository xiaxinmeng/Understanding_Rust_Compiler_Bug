{"url": "https://api.github.com/repos/rust-lang/rust/issues/19529", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19529/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19529/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19529/events", "html_url": "https://github.com/rust-lang/rust/issues/19529", "id": 51012568, "node_id": "MDU6SXNzdWU1MTAxMjU2OA==", "number": 19529, "title": "Improper mutability reference requirement for embedded mutable references in structs", "user": {"login": "PhilLavoie", "id": 1521116, "node_id": "MDQ6VXNlcjE1MjExMTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1521116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PhilLavoie", "html_url": "https://github.com/PhilLavoie", "followers_url": "https://api.github.com/users/PhilLavoie/followers", "following_url": "https://api.github.com/users/PhilLavoie/following{/other_user}", "gists_url": "https://api.github.com/users/PhilLavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/PhilLavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PhilLavoie/subscriptions", "organizations_url": "https://api.github.com/users/PhilLavoie/orgs", "repos_url": "https://api.github.com/users/PhilLavoie/repos", "events_url": "https://api.github.com/users/PhilLavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/PhilLavoie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-12-04T18:49:07Z", "updated_at": "2014-12-05T06:47:41Z", "closed_at": "2014-12-05T06:47:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "So you can store a mutable reference as a field in a struct. Kewl. You can declare said struct immutable and modify the value referenced through the mutable reference using the open box mechanism (see code below). Which makes perfect sense to me so far. \n\nHowever, when you do the same thing by in implementation functions, the compiler cries that you are modifying the field of a '&' ref, even though you aren't (wants you to change &self for &mut self, or self because it believes the FIELD is being modified).\n\n```\nstruct MyRef<'a, T: 'a> {\n  r: &'a mut T\n}\n\nfn main() {\n  let mut x = 4i;\n  let my_ref = MyRef{r: &mut x };\n  *(my_ref.r) = 5; //This works.\n}\n\n//But this does not compile.\nimpl<'a, T> MyRef<'a, T> {\n  fn reassign(&self, value: T) {\n    *(self.r) = value;\n  }\n}\n```\n", "closed_by": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19529/timeline", "performed_via_github_app": null, "state_reason": "completed"}