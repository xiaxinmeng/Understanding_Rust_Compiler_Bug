{"url": "https://api.github.com/repos/rust-lang/rust/issues/23273", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/23273/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/23273/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/23273/events", "html_url": "https://github.com/rust-lang/rust/issues/23273", "id": 60616688, "node_id": "MDU6SXNzdWU2MDYxNjY4OA==", "number": 23273, "title": "Constructors that immediately copy a value to a pointer are not optimized; stack allocation still occurs", "user": {"login": "devyn", "id": 10729, "node_id": "MDQ6VXNlcjEwNzI5", "avatar_url": "https://avatars.githubusercontent.com/u/10729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devyn", "html_url": "https://github.com/devyn", "followers_url": "https://api.github.com/users/devyn/followers", "following_url": "https://api.github.com/users/devyn/following{/other_user}", "gists_url": "https://api.github.com/users/devyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/devyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devyn/subscriptions", "organizations_url": "https://api.github.com/users/devyn/orgs", "repos_url": "https://api.github.com/users/devyn/repos", "events_url": "https://api.github.com/users/devyn/events{/privacy}", "received_events_url": "https://api.github.com/users/devyn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-03-11T06:32:40Z", "updated_at": "2015-03-11T22:59:23Z", "closed_at": "2015-03-11T22:59:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a little kernel project going on and I'm not really at the point where I'm ready to start porting actual Rust libraries like `liballoc` yet, so I have a little mock `Box` type instead. But I need to be able to allocate large structs, and the typical pattern is like this:\n\n``` rust\nBox::new(Big::new())\n```\n\nWith `opt-level=0` and `std::boxed::Box`, Rust still makes a > 8192 byte allocation on the stack (I'll include the Rust code later, but basically it's an 8192-byte struct):\n\n``` gas\n    50ed:       48 81 ec 18 20 00 00    sub    $0x2018,%rsp\n```\n\nwhich it then goes on to clear and copy. However, with `opt-level=2` this goes away and Rust optimizes it out:\n\n``` gas\n    cab6:       be 00 20 00 00          mov    $0x2000,%esi\n...\n    cace:       e8 fd 83 ff ff          callq  4ed0 <mmap@plt>\n```\n\n(As I understand it, `mmap` returns zeroed memory here anyway.)\n\nSo here's the problematic Rust code, then:\n\n``` rust\n#![feature(core)]\n#![feature(unique)]\n\nuse std::ptr::{self, Unique};\n\nstruct MyBox<T> {\n    ptr: Unique<T>\n}\n\nimpl<T> MyBox<T> {\n    fn new(value: T) -> MyBox<T> {\n        unsafe {\n            let p = 0xdeadbeef as *mut T;\n\n            ptr::write(p.as_mut().expect(\"out of memory\"), value);\n\n            MyBox { ptr: Unique::new(p) }\n        }\n    }\n}\n\nstruct Big {\n    array1: [u64; 512],\n    array2: [u64; 512],\n}\n\nimpl Big {\n    fn new() -> Big {\n        Big { array1: [0; 512], array2: [0; 512] }\n    }\n}\n\nfn main() {\n    let _b = MyBox::new(Big::new());\n}\n```\n\nAnd this is what it ends up as at even `opt-level=3`:\n\n``` gas\n    503e:       48 81 ec 00 20 00 00    sub    $0x2000,%rsp\n    5045:       48 8d 1c 24             lea    (%rsp),%rbx\n    5049:       31 f6                   xor    %esi,%esi\n    504b:       ba 00 20 00 00          mov    $0x2000,%edx\n    5050:       48 89 df                mov    %rbx,%rdi\n    5053:       e8 a8 fa ff ff          callq  4b00 <memset@plt>\n    5058:       bf ef be ad de          mov    $0xdeadbeef,%edi\n    505d:       ba 00 20 00 00          mov    $0x2000,%edx\n    5062:       48 89 de                mov    %rbx,%rsi\n    5065:       e8 36 fe ff ff          callq  4ea0 <memcpy@plt>\n    506a:       48 81 c4 00 20 00 00    add    $0x2000,%rsp\n```\n\nReally, it should optimize that out to a `memset` directly at `0xdeadbeef`, shouldn't it? This is a contrived example, but I'm getting the same result when calling out to my own memory allocator function.\n## Meta\n\n`rustc --version --verbose`:\n\n```\nrustc 1.0.0-nightly (12b846ab8 2015-03-09) (built 2015-03-10)\nbinary: rustc\ncommit-hash: 12b846ab80ca054d2fbfb0320d33badbd5ef0112\ncommit-date: 2015-03-09\nbuild-date: 2015-03-10\nhost: x86_64-unknown-linux-gnu\nrelease: 1.0.0-nightly\n```\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/23273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/23273/timeline", "performed_via_github_app": null, "state_reason": "completed"}