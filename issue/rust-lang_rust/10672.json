{"url": "https://api.github.com/repos/rust-lang/rust/issues/10672", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/10672/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/10672/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/10672/events", "html_url": "https://github.com/rust-lang/rust/issues/10672", "id": 23307159, "node_id": "MDU6SXNzdWUyMzMwNzE1OQ==", "number": 10672, "title": "Permit `fn(self)` methods to be invoked on object types", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/20", "html_url": "https://github.com/rust-lang/rust/milestone/20", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/20/labels", "id": 452034, "node_id": "MDk6TWlsZXN0b25lNDUyMDM0", "number": 20, "title": "1.0", "description": "This will be the first major release of Rust, where we offer some guaranteed level of support and backwards compatibility.\r\n\r\nThe significant criteria for this release are:\r\n\r\n* Language backwards compatibility - All major features are in, and in their final form. Generally, the only new language features added after this milestone must be backwards compatible, or to fix soundness holes, though we do expect to have some leeway to make small incompatible fixes that have low impact on existing code bases.\r\n\r\n* Library stability - We have a system of measuring and ensuring the stability of API's, and a significant portion of the standard library is declared stable. Stable API's will not change. Large portions of the standard library need to be stable for 1.0, including primitive types, vectors, strings, option, numerics, collections, some I/O and concurrency.\r\n\r\n* User experience - The system is polished and the presentation is complete and professional. New users have a clear path to using and learning the system. This encompasses the web site, documentation, installation, and tooling.\r\n", "creator": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 376, "state": "closed", "created_at": "2013-10-10T18:48:33Z", "updated_at": "2016-08-28T23:13:24Z", "due_on": "2015-05-15T07:00:00Z", "closed_at": "2015-05-21T20:59:13Z"}, "comments": 15, "created_at": "2013-11-26T11:03:59Z", "updated_at": "2014-09-22T05:57:33Z", "closed_at": "2014-07-01T04:36:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, methods declared as `self` cannot be invoked on object types. The reason for this is that, without knowing the type of the receiver, we can't know whether `self` is to be passed with indirection or as an immediate value.\n\nFor example:\n\n```\ntrait Consume { fn take(self) { ... } }\nimpl Consume for int {\n    fn take(self) { ... /* self should be passed as an immediate here */ ... }\n}\nimpl Consume for MyBigStruct {\n    fn take(self) { ... /* self not passed as an immediate here */ ... }\n}\n```\n\nSo now if I have a `~int` casted to `~Consume`, and I were to invoke `take()`, I would want to load from the `~int`, pass the loaded value, and then free the `~int` after the call returns (or maybe in a different order; I don't want to think too hard about weird failure cases since that's not really the point of this issue). If I have a `~MyBigStruct`, I would want to pass _the pointer itself_ to `take` (since `take` expects a `MyBigStruct*`, essentially). After the call returns, `take()` will have freed the `MyBigStruct` but not the `~` pointer itself, so I can shallow free the pointer. But of course all I know at codegen time is that I have a `~Consume` and thus I can't distinguish these two cases.\n\nThis is however rather inconvenient, as the above example shows. It is particularly inconvenient since using a `~self` method isn't really a good alternative, particularly if you try to implement the trait for the object type:\n\n```\ntrait Message { fn send(~self) { ... } }\nimpl Message for ~Message { fn send(~self) { /* self: ~~Message */ } }\n```\n\nNow I need a `~~Message`! Silly. This would work fine if `send()` were a `self` method, though.\n\nThe thing is, if we were a bit more clever, we _could_ permit by-value calls on object types. We can just say that for virtual calls `self` is _always_ passed indirectly, and then generate a shim function to use in the vtable that does a load for immediate receivers.\n\nNominating although I think this is something that can possibly wait till post 1.0, since it's not a backwards compat question. I'd still call it high priority (presuming others agree with my reasoning).\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/10672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/10672/timeline", "performed_via_github_app": null, "state_reason": "completed"}