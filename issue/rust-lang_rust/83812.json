{"url": "https://api.github.com/repos/rust-lang/rust/issues/83812", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83812/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83812/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83812/events", "html_url": "https://github.com/rust-lang/rust/issues/83812", "id": 849689265, "node_id": "MDU6SXNzdWU4NDk2ODkyNjU=", "number": 83812, "title": "Conflicting compiler type inference result", "user": {"login": "Jaimeloeuf", "id": 44993072, "node_id": "MDQ6VXNlcjQ0OTkzMDcy", "avatar_url": "https://avatars.githubusercontent.com/u/44993072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jaimeloeuf", "html_url": "https://github.com/Jaimeloeuf", "followers_url": "https://api.github.com/users/Jaimeloeuf/followers", "following_url": "https://api.github.com/users/Jaimeloeuf/following{/other_user}", "gists_url": "https://api.github.com/users/Jaimeloeuf/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jaimeloeuf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jaimeloeuf/subscriptions", "organizations_url": "https://api.github.com/users/Jaimeloeuf/orgs", "repos_url": "https://api.github.com/users/Jaimeloeuf/repos", "events_url": "https://api.github.com/users/Jaimeloeuf/events{/privacy}", "received_events_url": "https://api.github.com/users/Jaimeloeuf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2021-04-03T16:17:15Z", "updated_at": "2021-04-12T14:53:39Z", "closed_at": "2021-04-12T14:53:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, thanks for taking your time to read this issue. I believe I am facing a compiler bug issue, but if it is not, please do let me know and would be great if you can point me to some resource regarding this! Thanks \ud83d\ude4f\ud83c\udffb\r\n\r\n---\r\n\r\nI am trying to convert methods on a Compiler struct of type ParseFnBase into functions of type ParseFn using a macro. The way I want to do this, is to create a wrapper function of type ParseFn and call the original function of type ParseFnBase inside.\r\n```rust\r\ntype ParseFnBase = fn(compiler: &mut Compiler) -> Result<(), CompileError>;\r\ntype ParseFn = fn(compiler: &mut Compiler, can_assign: bool) -> Result<(), CompileError>;\r\n```\r\n\r\nThe problem however starts when I try to return the original function's return value. As one would expect, since both of the above function types share the same exact return type, I should be able to just do something like ```return ParseFnBase(compiler);``` directly.\r\nBut this is not the case, rust states that it found type ```()``` instead of ```Result<(), CompileError>``` to be the return value of a method that is of type ParseFnBase.\r\n![original](https://user-images.githubusercontent.com/44993072/113483812-e5402d80-94d7-11eb-9378-58c993387e50.PNG)\r\n\r\n\r\nSince I thought this is weird and should not be the case, I decide to test calling the inner function, and returning ```Ok(())``` directly. This time however, it did compile, BUT it also correctly detected and warned that the inner function returns a value of type ```Result<(), CompileError>``` and that it should be handled instead of ignoring it.\r\n![1](https://user-images.githubusercontent.com/44993072/113483963-9050e700-94d8-11eb-88cf-23c41dde34ff.PNG)\r\n\r\n\r\nNow I am abit confused, so I decide to just try a bunch of things to test it out. First I tried following rust-c's advice as shown on the first image, to wrap the return value in a Result variant. So I wrap it in the Ok variant. Interestingly now it detects that the return value of the inner function is indeed a Result variant, and that I should not wrap it in the Ok variant again. Rust-c thinks that I should return ```Ok(())``` instead of returning a ```Ok(Result<(), CompileError>)```\r\n![4](https://user-images.githubusercontent.com/44993072/113484095-28e76700-94d9-11eb-94fe-12b55909e461.PNG)\r\n\r\n\r\nWrapping the return value in Ok variant after trying to unwrap it also does not work. Rust-c infers it return value as ```()``` and specify that the ```?``` operator cannot be used on it.\r\n![5](https://user-images.githubusercontent.com/44993072/113484287-0e61bd80-94da-11eb-98ca-01d5b6375789.PNG)\r\n\r\n\r\nWell since that did not help, I thought maybe the compiler is unable to infer the type, so I added type annotation to the inner function call to help it out. Well well, now rust-c infers that the return value of the inner function is actually ```()``` again instead of ```Result<(), CompileError>``` and prevents me from binding the return value to ```ret```\r\n![2](https://user-images.githubusercontent.com/44993072/113484346-6bf60a00-94da-11eb-98b9-e9ace959fee1.PNG)\r\n\r\n\r\nOk so last resort was that, maybe just maybe, inline functions requires function type annotation.... so maybe.... if I use a closure instead, the problem will go away? Nope it did not \ud83d\ude05\r\n![3](https://user-images.githubusercontent.com/44993072/113484376-947e0400-94da-11eb-8fb4-1231453b20db.PNG)\r\n\r\n---\r\n\r\nOk, so to conclude, it seems like rust-c infers the type of the inner function's return value differently depending on its surrounding context? It seems like only when the function is called by itself on its on line/statement, then will its return value be correctly inferred.\r\nAny advice on this? Is this even a compiler bug? I assume so, since the compiler is inferring different types for the same value. Or perhaps this is an issue with rust macros? Any help would be greatly appreciated, thanks! \ud83d\ude01\ud83d\ude4f\ud83c\udffb\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.50.0 (cb75ad5db 2021-02-10)\r\nbinary: rustc\r\ncommit-hash: cb75ad5db02783e8b0222fee363c5f63f7e2cf5b\r\ncommit-date: 2021-02-10\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.50.0\r\n```", "closed_by": {"login": "Jaimeloeuf", "id": 44993072, "node_id": "MDQ6VXNlcjQ0OTkzMDcy", "avatar_url": "https://avatars.githubusercontent.com/u/44993072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jaimeloeuf", "html_url": "https://github.com/Jaimeloeuf", "followers_url": "https://api.github.com/users/Jaimeloeuf/followers", "following_url": "https://api.github.com/users/Jaimeloeuf/following{/other_user}", "gists_url": "https://api.github.com/users/Jaimeloeuf/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jaimeloeuf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jaimeloeuf/subscriptions", "organizations_url": "https://api.github.com/users/Jaimeloeuf/orgs", "repos_url": "https://api.github.com/users/Jaimeloeuf/repos", "events_url": "https://api.github.com/users/Jaimeloeuf/events{/privacy}", "received_events_url": "https://api.github.com/users/Jaimeloeuf/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83812/timeline", "performed_via_github_app": null, "state_reason": "completed"}