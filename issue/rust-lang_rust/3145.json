{"url": "https://api.github.com/repos/rust-lang/rust/issues/3145", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3145/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3145/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3145/events", "html_url": "https://github.com/rust-lang/rust/issues/3145", "id": 6097366, "node_id": "MDU6SXNzdWU2MDk3MzY2", "number": 3145, "title": "Concurrency primitives in sync.rs with static enforcement.", "user": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234876, "node_id": "MDU6TGFiZWwyMzQ4NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-hard", "name": "E-hard", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Hard / a lot"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-08-08T07:59:09Z", "updated_at": "2014-06-16T21:56:43Z", "closed_at": "2012-08-15T18:18:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "These will serve as enhanced versions of `arc::exclusive`. The plan is for `mutex_arc` to be the same as `exclusive`, but scheduler enabled, and come equipped with a working condition variable. It is marked unsafe because you can still create cycles with it (benefit: you can nest them).\n\n`rw_arc` is somewhat more advanced, and notably more safe. The `const` serves two purposes - it allows handing out immutable references while in read mode (just like `arc::arc` does today), and it also prevents nesting them inside each other, since they won't be const themselves.\n\nI am also thinking of exposing semaphores, with `acquire` and `release` and potentially also `cond_wait` and `cond_signal`. These wouldn't protect anything themselves, but could perhaps be used to synchronise beyond-rust shared resources, such as the filesystem.\n\nProposed interface:\n\n```\ntrait condvar {\n    fn signal();\n    fn wait();\n}\n\nimpl <T: send> for &mutex_arc<T> {\n    unsafe fn access<U>(blk: fn(&mut T) -> U) -> U;\n    unsafe fn access_cond<U>(blk: fn(&mut T, condvar) -> U) -> U;\n}\n\nimpl <T: const send> for &rw_arc<T> {\n    // Read mode\n    fn access_read<U>(blk: fn(&T) -> U) -> U;\n\n    // Write mode\n    fn access<U>(blk: fn(&mut T) -> U) -> U;\n    fn access_cond<U>(blk: fn(&mut T, &condvar) -> U) -> U;\n    fn access_downgrade<U>(blk: fn(+write_mode<T>) -> U) -> U;\n}\n\nfn downgrade<T: const send>(+write_mode<T>) -> read_mode<T>;\n\nimpl <T: const send> for &write_mode<T> {\n    fn access<U>(blk: fn(&mut T) -> U) -> U;\n    fn access_cond<U>(blk: fn(&mut T, &condvar) -> U) -> U;\n}\n\nimpl <T: const send> for &read_mode<T> {\n    fn access<U>(blk: fn(&T) -> U) -> U;\n}\n```\n\nA couple points:\n- The condvar is just like `rust_cond_lock` very-unsafely provided in the past.\n\ncvar example:\n\n```\ndo mutex_arc.access_cond |state, cond| {\n    ...\n    while not_satisfied(state) {\n        cond.wait();\n    }\n    ...\n}\n```\n- I don't think it's meaningful to hand out a condition variable for rws in read-mode. And it'd be a bunch nastier to implement. Feel free to argue, but I think that (a) signalling on one is meaningless, since you can't have changed anything inside, and (b) waiting on one is meaningless, because either you forbid writers from going before you wake (in which case what are you waiting for?) or writers can go (in which case you might as well have dropped the lock wholesale).\n- Downgrade is _really neat_ (hopefully). The `read_mode` and `write_mode` are linear tokens that allow you to access the state, and downgrade consumes the write mode. This allows you atomically downgrade without releasing the lock, while statically enforcing no mutation after the downgrade.\n\nDowngrade example:\n\n```\ndo rw_arc.access_downgrade |write_mode| {\n    do write_mode.access |state| {\n        ... mutate state ...\n    }\n    let read_mode = downgrade(write_mode);\n    do read_mode.access |state| {\n        ... state is immutable ...\n    }\n}\n```\n\nIn particular, I would like confirmation that my understanding of region pointers will enforce the im/mutability properties.\n", "closed_by": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3145/timeline", "performed_via_github_app": null, "state_reason": "completed"}