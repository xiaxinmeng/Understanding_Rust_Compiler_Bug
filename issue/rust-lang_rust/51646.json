{"url": "https://api.github.com/repos/rust-lang/rust/issues/51646", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51646/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51646/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51646/events", "html_url": "https://github.com/rust-lang/rust/issues/51646", "id": 333887112, "node_id": "MDU6SXNzdWUzMzM4ODcxMTI=", "number": 51646, "title": "rustc doesn't handle libc dependencies it introduces on its own", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-20T00:47:45Z", "updated_at": "2019-08-06T09:18:15Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As of currently nightly, a minimalist `no_std` program can look like the following (panic is purposefully badly handled):\r\n\r\n```rust\r\n#![no_std]\r\n#![no_main]\r\n#![feature(panic_implementation)]\r\n\r\n#[panic_implementation]\r\n#[no_mangle]\r\npub fn panic_impl(_: &core::panic::PanicInfo) -> ! { loop {}}\r\n\r\n#[no_mangle]\r\npub extern \"C\" fn main(_argc: isize, _arg: *const *const u8) -> isize {\r\n    0\r\n}\r\n```\r\n\r\nThis actually fails to link with:\r\n```\r\n  = note: /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o: In function `_start':\r\n          (.text+0x12): undefined reference to `__libc_csu_fini'\r\n          (.text+0x19): undefined reference to `__libc_csu_init'\r\n          (.text+0x26): undefined reference to `__libc_start_main'\r\n          collect2: error: ld returned 1 exit status\r\n```\r\n(using `-C panic=abort`)\r\n\r\n`Scrt1.o` comes from the ld command line the rust compiler emits, so it should arguably handle the libc dependency itself.\r\n\r\nSomehow, when using the `alloc` library (which may be stabilized soon per RFC 2480), libc gets pulled in, so the following builds:\r\n\r\n```rust\r\n#![no_std]\r\n#![no_main]\r\n#![feature(alloc, lang_items, panic_implementation)]\r\n\r\nextern crate alloc;\r\n\r\n// won't be necessary after PR #51607\r\n#[lang = \"oom\"]\r\n#[no_mangle]\r\npub fn oom() -> ! { loop {}}\r\n\r\n#[panic_implementation]\r\n#[no_mangle]\r\npub fn panic_impl(_: &core::panic::PanicInfo) -> ! { loop {}}\r\n\r\n#[no_mangle]\r\npub extern \"C\" fn main(_argc: isize, _arg: *const *const u8) -> isize {\r\n    0\r\n}\r\n```\r\n\r\nPresumably, this happens because, without your own `#[global_allocator]`, you end up linking jemalloc in, which pulls libc.\r\n\r\nSo, let's now see what happens when you set your own `#[global_allocator]`:\r\n\r\n```rust\r\n#![no_std]\r\n#![no_main]\r\n#![feature(alloc, lang_items, panic_implementation)]\r\n\r\nextern crate alloc;\r\n\r\nuse alloc::alloc::{GlobalAlloc, Layout};\r\n\r\n// won't be necessary after PR #51607\r\n#[lang = \"oom\"]\r\n#[no_mangle]\r\npub fn oom() -> ! { loop {}}\r\n\r\n#[panic_implementation]\r\n#[no_mangle]\r\npub fn panic_impl(_: &core::panic::PanicInfo) -> ! { loop {}}\r\n\r\n#[no_mangle]\r\npub extern \"C\" fn main(_argc: isize, _arg: *const *const u8) -> isize {\r\n    0\r\n}\r\n\r\nstruct MyAlloc;\r\n\r\nunsafe impl GlobalAlloc for MyAlloc {\r\n    unsafe fn alloc(&self, _layout: Layout) -> *mut u8 {\r\n        core::ptr::null_mut()\r\n    }\r\n\r\n    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {\r\n    }\r\n}\r\n\r\n#[global_allocator]\r\nstatic GLOBAL: MyAlloc = MyAlloc;\r\n```\r\n\r\nNow we're back to the same linkage error as originally, because we're not pulling jemalloc anymore.\r\n\r\nBut then, some `core` operations can also actually use libc functions, and that adds more undefined references to symbols. For instance, adding the following to `main`:\r\n```rust\r\nunsafe { GLOBAL.alloc_zeroed(Layout::new::<[u8; 42]>()); }\r\n```\r\n(which you'd normally get from using e.g. `Vec`)\r\n\r\nadds the following error:\r\n```\r\nr6-317d481089b8c8fe83113de504472633.rs:(.text._ZN4core5alloc11GlobalAlloc12alloc_zeroed17h8bac7be5ef64acd6E+0x6c): undefined reference to `memset'\r\n```\r\n\r\nBecause `GlobalAlloc::alloc_zeroed` uses `ptr::write_bytes`, which is really `intrinsics::write_bytes`, which apparently uses `memset` under the hood.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51646/timeline", "performed_via_github_app": null, "state_reason": null}