{"url": "https://api.github.com/repos/rust-lang/rust/issues/63274", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63274/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63274/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63274/events", "html_url": "https://github.com/rust-lang/rust/issues/63274", "id": 476667820, "node_id": "MDU6SXNzdWU0NzY2Njc4MjA=", "number": 63274, "title": "Inconsistent optimization", "user": {"login": "npmccallum", "id": 288304, "node_id": "MDQ6VXNlcjI4ODMwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/288304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npmccallum", "html_url": "https://github.com/npmccallum", "followers_url": "https://api.github.com/users/npmccallum/followers", "following_url": "https://api.github.com/users/npmccallum/following{/other_user}", "gists_url": "https://api.github.com/users/npmccallum/gists{/gist_id}", "starred_url": "https://api.github.com/users/npmccallum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npmccallum/subscriptions", "organizations_url": "https://api.github.com/users/npmccallum/orgs", "repos_url": "https://api.github.com/users/npmccallum/repos", "events_url": "https://api.github.com/users/npmccallum/events{/privacy}", "received_events_url": "https://api.github.com/users/npmccallum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-05T05:47:30Z", "updated_at": "2020-04-17T23:11:05Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\nuse std::ops::*;\r\n\r\npub struct Number([u64; 4]);\r\n\r\nimpl Add for Number {\r\n    type Output = Self;\r\n\r\n    #[inline]\r\n    fn add(self, other: Self) -> Self::Output {\r\n        let mut accum: Self::Output = unsafe { core::mem::uninitialized() };\r\n        let mut carry = false;\r\n\r\n        for i in 0..self.0.len() {\r\n            let x = self.0[i] as u128 + other.0[i] as u128 + carry as u128;\r\n            carry = x > core::u64::MAX as u128;\r\n            accum.0[i] = x as u64;\r\n        }\r\n\r\n        accum\r\n    }\r\n}\r\n\r\npub fn add_a(l: Number, r: Number) -> Number {\r\n    l + r\r\n}\r\n\r\n\r\npub fn add_b(l: [u64; 4], r: [u64; 4]) -> [u64; 4] {\r\n    let mut accum: [u64; 4] = unsafe { core::mem::uninitialized() };\r\n    let mut carry = false;\r\n\r\n    for i in 0..4 {\r\n        let x = l[i] as u128 + r[i] as u128 + carry as u128;\r\n        carry = x > core::u64::MAX as u128;\r\n        accum[i] = x as u64;\r\n    }\r\n\r\n    accum\r\n}\r\n\r\nimpl Sub for Number {\r\n    type Output = Self;\r\n\r\n    #[inline]\r\n    fn sub(self, other: Self) -> Self::Output {\r\n        let mut accum: Self::Output = unsafe { core::mem::uninitialized() };\r\n        let mut carry = false;\r\n\r\n        for i in 0..self.0.len() {\r\n            let x = self.0[i] as u128 - other.0[i] as u128 - carry as u128;\r\n            carry = x > core::u64::MAX as u128;\r\n            accum.0[i] = x as u64;\r\n        }\r\n\r\n        accum\r\n    }\r\n}\r\n\r\npub fn sub_a(l: Number, r: Number) -> Number {\r\n    l - r\r\n}\r\n\r\n\r\npub fn sub_b(l: [u64; 4], r: [u64; 4]) -> [u64; 4] {\r\n    let mut accum: [u64; 4] = unsafe { core::mem::uninitialized() };\r\n    let mut carry = false;\r\n\r\n    for i in 0..4 {\r\n        let x = l[i] as u128 - r[i] as u128 - carry as u128;\r\n        carry = x > core::u64::MAX as u128;\r\n        accum[i] = x as u64;\r\n    }\r\n\r\n    accum\r\n}\r\n```\r\n\r\nhttps://godbolt.org/z/aqhD1B\r\n\r\nThe above link demonstrates four functions of the same algorithm. The generated assembly is widely divergent based on context. It would be great if rust could output the same code for all of them. Alternatively, someone could recommend an algorithm that produces consistent output.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63274/timeline", "performed_via_github_app": null, "state_reason": null}