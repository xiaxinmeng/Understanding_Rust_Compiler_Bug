{"url": "https://api.github.com/repos/rust-lang/rust/issues/57156", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57156/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57156/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57156/events", "html_url": "https://github.com/rust-lang/rust/issues/57156", "id": 394502443, "node_id": "MDU6SXNzdWUzOTQ1MDI0NDM=", "number": 57156, "title": "error: internal compiler error: src/librustc/ty/relate.rs:753: impossible case reached: can't relate: (T,) with Lifetime('_#1r)", "user": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252628, "node_id": "MDU6TGFiZWwyNjIyNTI2Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta", "name": "regression-from-stable-to-beta", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to beta."}], "state": "closed", "locked": false, "assignee": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 20, "created_at": "2018-12-27T22:38:50Z", "updated_at": "2019-02-27T15:09:29Z", "closed_at": "2019-01-11T14:53:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried the following code in editions 2015 and 2018:\r\n\r\n```rust\r\nuse std::cell::Cell;\r\n\r\ntrait CloneablePredicate<'a, T>: 'a + Fn(T) -> bool {\r\n    fn clone_boxed(&self) -> Box<dyn CloneablePredicate<'a, T, Output = bool>>;\r\n}\r\n\r\nimpl<'a, T, F> CloneablePredicate<'a, T> for F\r\nwhere\r\n    F: 'a + Clone + Fn(T) -> bool,\r\n{\r\n    fn clone_boxed(&self) -> Box<dyn CloneablePredicate<'a, T, Output = bool>> {\r\n        Box::new(self.clone())\r\n    }\r\n}\r\n\r\nimpl<'a, T> Clone for Box<dyn CloneablePredicate<'a, T, Output = bool>>\r\nwhere\r\n    T: 'a,\r\n{\r\n    fn clone(&self) -> Self {\r\n        self.clone_boxed()\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let cell = Cell::new(4);\r\n    let x: Box<dyn CloneablePredicate<i32, Output = bool>> = Box::new(move |x| {\r\n        let minus_one = cell.get() - 1;\r\n        cell.set(minus_one);\r\n        x == minus_one\r\n    });\r\n    let y = x.clone();\r\n    println!(\"{}\", x(3));\r\n    println!(\"{}\", x(3));\r\n    println!(\"{}\", y(3));\r\n    println!(\"{}\", y(3));\r\n}\r\n```\r\n\r\nI expected it to print:\r\n\r\n```\r\ntrue\r\nfalse\r\ntrue\r\nfalse\r\n```\r\n\r\nAnd this does happen on stable, but not on beta or nightly, where I get this (this particular error is from nightly):\r\n\r\n```\r\nerror: internal compiler error: src/librustc/ty/relate.rs:753: impossible case reached: can't relate: (T,) with Lifetime('_#1r)\r\n\r\nthread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:590:9\r\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\nerror: aborting due to previous error\r\n\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.33.0-nightly (a7be40c65 2018-12-26) running on x86_64-unknown-linux-gnu\r\n```\r\n\r\n## Meta:\r\n\r\n`rustc --version --verbose`:\r\n\r\n```\r\nrustc 1.33.0-nightly (a7be40c65 2018-12-26)\r\nbinary: rustc\r\ncommit-hash: a7be40c65ae8ace467c9c40b0a22642973e31a13\r\ncommit-date: 2018-12-26\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.33.0-nightly\r\nLLVM version: 8.0\r\n```\r\n\r\nBacktrace:\r\n\r\n```\r\nerror: internal compiler error: src/librustc/ty/relate.rs:753: impossible case reached: can't relate: (T,) with Lifetime('_#1r)\r\n\r\nthread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:590:9\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39\r\n   1: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:70\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/sys_common/backtrace.rs:58\r\n             at src/libstd/panicking.rs:200\r\n   3: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:215\r\n   4: rustc::util::common::panic_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:482\r\n   6: std::panicking::begin_panic\r\n   7: rustc_errors::Handler::bug\r\n   8: rustc::util::bug::opt_span_bug_fmt::{{closure}}\r\n   9: rustc::ty::context::tls::with_opt::{{closure}}\r\n  10: rustc::ty::context::tls::with_context_opt\r\n  11: rustc::ty::context::tls::with_opt\r\n  12: rustc::util::bug::opt_span_bug_fmt\r\n  13: rustc::util::bug::bug_fmt\r\n  14: <rustc::ty::subst::Kind<'tcx> as rustc::ty::relate::Relate<'tcx>>::relate\r\n  15: core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &mut F>::call_once\r\n  16: <smallvec::SmallVec<A> as core::iter::traits::FromIterator<<A as smallvec::Array>::Item>>::from_iter\r\n  17: <core::result::Result<T, E> as rustc::ty::context::InternIteratorElement<T, R>>::intern_with\r\n  18: <rustc::ty::sty::ExistentialTraitRef<'tcx> as rustc::ty::relate::Relate<'tcx>>::relate\r\n  19: rustc::infer::InferCtxt::commit_if_ok\r\n  20: rustc::infer::InferCtxt::commit_if_ok\r\n  21: rustc::traits::project::opt_normalize_projection_type\r\n  22: rustc::traits::project::normalize_projection_type\r\n  23: rustc::ty::context::GlobalCtxt::enter_local\r\n  24: rustc_traits::normalize_projection_ty::normalize_projection_ty\r\n  25: rustc::ty::query::__query_compute::normalize_projection_ty\r\n  26: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::normalize_projection_ty<'tcx>>::compute\r\n  27: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  28: <rustc::ty::query::plumbing::JobOwner<'a, 'tcx, Q>>::start\r\n  29: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  30: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_get_with\r\n  31: <rustc::traits::query::normalize::QueryNormalizer<'cx, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  32: <smallvec::SmallVec<A> as core::iter::traits::FromIterator<<A as smallvec::Array>::Item>>::from_iter\r\n  33: rustc::ty::fold::TypeFoldable::fold_with\r\n  34: rustc::ty::structural_impls::<impl rustc::ty::fold::TypeFoldable<'tcx> for &'tcx rustc::ty::TyS<'tcx>>::super_fold_with\r\n  35: <rustc::traits::query::normalize::QueryNormalizer<'cx, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  36: rustc::ty::structural_impls::<impl rustc::ty::fold::TypeFoldable<'tcx> for &'tcx rustc::ty::TyS<'tcx>>::super_fold_with\r\n  37: <rustc::traits::query::normalize::QueryNormalizer<'cx, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  38: rustc::traits::query::normalize::<impl rustc::infer::at::At<'cx, 'gcx, 'tcx>>::normalize\r\n  39: rustc::ty::context::GlobalCtxt::enter_local\r\n  40: rustc_traits::normalize_erasing_regions::normalize_ty_after_erasing_regions\r\n  41: rustc::ty::query::__query_compute::normalize_ty_after_erasing_regions\r\n  42: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::normalize_ty_after_erasing_regions<'tcx>>::compute\r\n  43: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  44: <rustc::ty::query::plumbing::JobOwner<'a, 'tcx, Q>>::start\r\n  45: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  46: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_get_with\r\n  47: rustc::traits::query::normalize_erasing_regions::<impl rustc::ty::context::TyCtxt<'cx, 'tcx, 'tcx>>::normalize_erasing_regions\r\n  48: <rustc::ty::layout::LayoutCx<'tcx, rustc::ty::context::TyCtxt<'a, 'tcx, 'tcx>> as rustc_target::abi::LayoutOf>::layout_of\r\n  49: rustc::traits::object_safety::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'tcx>>::virtual_call_violation_for_method::{{closure}}\r\n  50: rustc::traits::object_safety::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'tcx>>::virtual_call_violation_for_method\r\n  51: <&mut I as core::iter::iterator::Iterator>::next\r\n  52: <core::iter::Filter<I, P> as core::iter::iterator::Iterator>::next\r\n  53: <alloc::vec::Vec<T> as alloc::vec::SpecExtend<T, I>>::from_iter\r\n  54: rustc::traits::object_safety::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'tcx>>::object_safety_violations_for_trait\r\n  55: <core::iter::FlatMap<I, U, F> as core::iter::iterator::Iterator>::next\r\n  56: <alloc::vec::Vec<T> as alloc::vec::SpecExtend<T, I>>::from_iter\r\n  57: rustc::traits::object_safety::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'tcx>>::object_safety_violations\r\n  58: rustc::traits::object_safety::is_object_safe_provider\r\n  59: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::is_object_safe<'tcx>>::compute\r\n  60: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  61: <rustc::ty::query::plumbing::JobOwner<'a, 'tcx, Q>>::start\r\n  62: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  63: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_get_with\r\n  64: <rustc_data_structures::obligation_forest::ObligationForest<O>>::process_obligations\r\n  65: <rustc::traits::fulfill::FulfillmentContext<'tcx> as rustc::traits::engine::TraitEngine<'tcx>>::select_where_possible\r\n  66: <rustc::traits::fulfill::FulfillmentContext<'tcx> as rustc::traits::engine::TraitEngine<'tcx>>::select_all_or_error\r\n  67: rustc_typeck::check::FnCtxt::select_all_obligations_or_error\r\n  68: rustc::ty::context::GlobalCtxt::enter_local\r\n  69: rustc_typeck::check::wfcheck::check_item_well_formed\r\n  70: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::check_item_well_formed<'tcx>>::compute\r\n  71: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  72: <rustc::ty::query::plumbing::JobOwner<'a, 'tcx, Q>>::start\r\n  73: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  74: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_get_with\r\n  75: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::ensure_query\r\n  76: <rustc_typeck::check::wfcheck::CheckTypeWellFormedVisitor<'a, 'tcx> as rustc::hir::intravisit::Visitor<'v>>::visit_item\r\n  77: rustc::hir::Crate::visit_all_item_likes\r\n  78: rustc_typeck::check_crate\r\n  79: <std::thread::local::LocalKey<T>>::with\r\n  80: rustc::ty::context::TyCtxt::create_and_enter\r\n  81: rustc_driver::driver::compile_input\r\n  82: rustc_driver::run_compiler_with_pool\r\n  83: <scoped_tls::ScopedKey<T>>::set\r\n  84: rustc_driver::run_compiler\r\n  85: <scoped_tls::ScopedKey<T>>::set\r\nquery stack during panic:\r\n#0 [normalize_projection_ty] normalizing `Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as CloneablePredicate<'_, T>>)), Binder(TraitPredicate(<T as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, (T,)], item_def_id: DefId(2/0:985 ~ core[7549]::ops[0]::function[0]::FnOnce[0]::Output[0]) }, bool)), Binder(TraitPredicate(<Self as std::ops::Fn<(T,)>>)), Binder(TraitPredicate(<Self as std::ops::FnMut<(T,)>>)), Binder(TraitPredicate(<Self as std::ops::FnOnce<(T,)>>)), Binder(OutlivesPredicate(Self, ReLateBound(DebruijnIndex(1), BrAnon(0))))], reveal: All }, value: ProjectionTy { substs: [Self, ReLateBound(DebruijnIndex(0), BrAnon(1)), T], item_def_id: DefId(2/0:985 ~ core[7549]::ops[0]::function[0]::FnOnce[0]::Output[0]) } } }`\r\n#1 [normalize_ty_after_erasing_regions] normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as CloneablePredicate<'a, T>>)), Binder(TraitPredicate(<T as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, (T,)], item_def_id: DefId(2/0:985 ~ core[7549]::ops[0]::function[0]::FnOnce[0]::Output[0]) }, bool)), Binder(TraitPredicate(<Self as std::ops::Fn<(T,)>>)), Binder(TraitPredicate(<Self as std::ops::FnMut<(T,)>>)), Binder(TraitPredicate(<Self as std::ops::FnOnce<(T,)>>)), Binder(OutlivesPredicate(Self, ReEarlyBound(1, 'a)))], reveal: All }, value: &dyn CloneablePredicate<T, Output=<Self as std::ops::FnOnce<T>>::Output> }`\r\n#2 [is_object_safe] determine object safety of trait `CloneablePredicate`\r\n#3 [check_item_well_formed] processing `<impl std::clone::Clone for std::boxed::Box<(dyn CloneablePredicate<'a, T, Output=bool, Output=bool> + 'a)>>`\r\nend of query stack\r\nerror: aborting due to previous error\r\n\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.33.0-nightly (a7be40c65 2018-12-26) running on x86_64-unknown-linux-gnu\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57156/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57156/timeline", "performed_via_github_app": null, "state_reason": "completed"}