{"url": "https://api.github.com/repos/rust-lang/rust/issues/10613", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/10613/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/10613/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/10613/events", "html_url": "https://github.com/rust-lang/rust/issues/10613", "id": 23162478, "node_id": "MDU6SXNzdWUyMzE2MjQ3OA==", "number": 10613, "title": "Small discriminants are causing bad code generation", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2013-11-22T19:36:46Z", "updated_at": "2014-02-14T16:56:44Z", "closed_at": "2014-02-14T16:56:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This code\n\n``` rust\nenum Test<T> {                    \n    A(T), B                       \n}                                 \nstruct Node {                     \n    value: Test<int>,             \n}                                 \n\n#[inline(never)]                  \npub fn foo(n: &mut Node, v: int) {\n  n.value = A(v);                 \n}                                 \n```\n\nWill generate this IR under `-O`\n\n```\ndefine void @_ZN3foo19hbd6078a6918ab2b9as4v0.0E({ i64, %tydesc*, i8*, i8*, i8 }* nocapture readnone, %struct.Node* nocapture, i64) unnamed_addr #1 {\n\"function top level\":                                                                                                                               \n  %.sroa.2 = alloca [7 x i8], align 1                                                                                                               \n  %.sroa.0.0.idx = getelementptr inbounds %struct.Node* %1, i64 0, i32 0, i32 0                                                                     \n  store i8 0, i8* %.sroa.0.0.idx, align 8                                                                                                           \n  %.sroa.2.0.idx = getelementptr inbounds %struct.Node* %1, i64 0, i32 0, i32 1, i64 0                                                              \n  %.sroa.2.0.idx2 = getelementptr inbounds [7 x i8]* %.sroa.2, i64 0, i64 0                                                                         \n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %.sroa.2.0.idx, i8* %.sroa.2.0.idx2, i64 7, i32 1, i1 false)                                             \n  %.sroa.23.0.idx = getelementptr inbounds %struct.Node* %1, i64 0, i32 0, i32 2, i64 0                                                             \n  store i64 %2, i64* %.sroa.23.0.idx, align 8                                                                                                       \n  ret void                                                                                                                                          \n}                                                                                                                                                   \n```\n\nYes, that is a `memcpy` of length 7. I have no idea why this is getting generated, I'm trying to narrow down which pass is generating this, but that is absolutely awful code to generate for such a simple operation. I would expect this function to generate two stores, one of the discriminant and one of the value.\n\nNow change the program to have `#[repr(uint)]` in front of the enum, and we get this code:\n\n```\ndefine void @_ZN3foo19hbd6078a6918ab2b9as4v0.0E({ i64, %tydesc*, i8*, i8*, i8 }* nocapture readnone, %struct.Node* nocapture, i64) unnamed_addr #0 {\n\"function top level\":                                                                                                                               \n  %.sroa.0.0.idx = getelementptr inbounds %struct.Node* %1, i64 0, i32 0, i32 0                                                                     \n  store i64 0, i64* %.sroa.0.0.idx, align 8                                                                                                         \n  %.sroa.2.0.idx2 = getelementptr inbounds %struct.Node* %1, i64 0, i32 0, i32 2, i64 0                                                             \n  store i64 %2, i64* %.sroa.2.0.idx2, align 8                                                                                                       \n  ret void                                                                                                                                          \n}                                                                                                                                                   \n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/10613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/10613/timeline", "performed_via_github_app": null, "state_reason": "completed"}