{"url": "https://api.github.com/repos/rust-lang/rust/issues/84676", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84676/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84676/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84676/events", "html_url": "https://github.com/rust-lang/rust/issues/84676", "id": 870445818, "node_id": "MDU6SXNzdWU4NzA0NDU4MTg=", "number": 84676, "title": "global_asm! rejects real mode far jmp even if correct", "user": {"login": "Luis-Hebendanz", "id": 22085373, "node_id": "MDQ6VXNlcjIyMDg1Mzcz", "avatar_url": "https://avatars.githubusercontent.com/u/22085373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Luis-Hebendanz", "html_url": "https://github.com/Luis-Hebendanz", "followers_url": "https://api.github.com/users/Luis-Hebendanz/followers", "following_url": "https://api.github.com/users/Luis-Hebendanz/following{/other_user}", "gists_url": "https://api.github.com/users/Luis-Hebendanz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Luis-Hebendanz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Luis-Hebendanz/subscriptions", "organizations_url": "https://api.github.com/users/Luis-Hebendanz/orgs", "repos_url": "https://api.github.com/users/Luis-Hebendanz/repos", "events_url": "https://api.github.com/users/Luis-Hebendanz/events{/privacy}", "received_events_url": "https://api.github.com/users/Luis-Hebendanz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 55301991, "node_id": "MDU6TGFiZWw1NTMwMTk5MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86", "name": "O-x86", "color": "6e6ec0", "default": false, "description": "Target: x86 processors"}, {"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2046313052, "node_id": "MDU6TGFiZWwyMDQ2MzEzMDUy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-asm", "name": "F-asm", "color": "f9c0cc", "default": false, "description": "`#![feature(asm)]` (not `llvm_asm`)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-04-28T22:24:16Z", "updated_at": "2023-02-24T05:06:20Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n```start.s\r\n.section .init_bootloader, \"awx\"\r\n.intel_syntax noprefix\r\n\r\n.code16\r\nsmp_trampoline:\r\n    # clear the direction flag (e.g. go forward in memory when using\r\n    # instructions like lodsb)\r\n    cld\r\n    # disable interrupts\r\n    cli\r\n\r\n    # zero data segment\r\n    xor ax, ax\r\n    mov ds, ax\r\n\r\n    # Set the A20 line\r\n\tin    al, 0x92\r\n\tor    al, 2\r\n\tout 0x92, al\r\n\r\n    # Load 32-bit GDT\r\n    lgdt gdt32_pointer\r\n\r\n    # Enable protected mode\r\n\tmov eax, cr0\r\n\tor  eax, (1 << 0)\r\n\tmov cr0, eax\r\n    # normally this should be jmp 0x8:mylabel\r\n    jmp 0x8:protected_mode_setup\r\n\r\n.code32\r\nprotected_mode_setup:\r\n    jmp protected_mode_setup\r\n\r\n.align 4\r\ngdt32:\r\n    .quad 0x0000000000000000          # Null Descriptor - should be present.\r\n    .quad 0xffff0000009acf00          # 32-bit code descriptor (exec/read).\r\n    .quad 0xffff00000092cf00          # 32-bit data descriptor (read/write)\r\ngdt32_end:\r\n\r\n.align 4\r\ngdt32_pointer:\r\n   .word gdt32_end - gdt32 - 1  # 16-bit Size (Limit) of GDT.\r\n   .long gdt32                  # 32-bit Base Address of GDT. (CPU will zero extend to 64-bit)\r\n```\r\nA repo with minimal sample code: https://github.com/Luis-Hebendanz/rust_asm_error\r\n\r\nI expected to see this happen: \r\nCompile without errors because it is valid asm. The gas assembler can compile it without problems.\r\n\r\nInstead, this happened: \r\nIt fails with an `error: unexpected token in argument list`\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.53.0-nightly (42816d61e 2021-04-24)\r\nbinary: rustc\r\ncommit-hash: 42816d61ead7e46d462df997958ccfd514f8c21c\r\ncommit-date: 2021-04-24\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.53.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n   Compiling rust_err v0.1.0 (/home/lhebendanz/Projects/rust_err)\r\nerror: unexpected token in argument list\r\n   |\r\nnote: instantiated into assembly here\r\n  --> <inline asm>:33:12\r\n   |\r\n33 |     jmp 0x8:protected_mode_setup\r\n   |            ^\r\n\r\nerror: aborting due to previous error\r\n\r\nerror: could not compile `rust_err`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84676/timeline", "performed_via_github_app": null, "state_reason": null}