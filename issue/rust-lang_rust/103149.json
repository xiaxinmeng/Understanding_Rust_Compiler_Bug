{"url": "https://api.github.com/repos/rust-lang/rust/issues/103149", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103149/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103149/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103149/events", "html_url": "https://github.com/rust-lang/rust/issues/103149", "id": 1411616381, "node_id": "I_kwDOAAsO6M5UI459", "number": 103149, "title": "Trivial code edit makes build times 10 times slower", "user": {"login": "nappa85", "id": 7566389, "node_id": "MDQ6VXNlcjc1NjYzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/7566389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nappa85", "html_url": "https://github.com/nappa85", "followers_url": "https://api.github.com/users/nappa85/followers", "following_url": "https://api.github.com/users/nappa85/following{/other_user}", "gists_url": "https://api.github.com/users/nappa85/gists{/gist_id}", "starred_url": "https://api.github.com/users/nappa85/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nappa85/subscriptions", "organizations_url": "https://api.github.com/users/nappa85/orgs", "repos_url": "https://api.github.com/users/nappa85/repos", "events_url": "https://api.github.com/users/nappa85/events{/privacy}", "received_events_url": "https://api.github.com/users/nappa85/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-10-17T13:47:05Z", "updated_at": "2022-11-01T13:20:50Z", "closed_at": "2022-11-01T13:20:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm unable to reproduce the problem with a MVP, so I'll try to be more descriptive I can, sorry for that.\r\n\r\n**Preamble:**\r\nI have this crate that holds all common code between like 10 applications.\r\nThose applications are simple services that takes data from a queue, does something and put the result in another queue, except for one that also exposes a good number of REST APIs using warp.\r\nThis last one is the biggest application, and has already given me some headaches, for example to be run in debug you must specify RUST_MIN_STACK env var, otherwise warp route types will cause a stack overflow.\r\n\r\n**The incident:**\r\nThe other day I made an innocent code edit to that shared crate, my CI started rebuilding every project and, after 1 hour, it notified me that the REST API application build went timeout.\r\n\r\nTo show you the innocent code edit, I need to intruduce a bit of boilerplate:\r\n```rust\r\nuse tokio::sync::OnceCell;\r\n\r\npub struct Model {\r\n    currency: Family,\r\n    details: Option<Details>,//json field\r\n    packageable: OnceCell<AnotherModel>,\r\n}\r\n\r\npub struct Details {\r\n    reverse: Option<bool>,\r\n}\r\n\r\npub struct AnotherModel {}\r\n\r\nimpl AnotherModel {\r\n    pub fn counter_currency(&self, _currency: Family) -> Result<Family, VoidError> {\r\n        unreachable!()\r\n    }\r\n}\r\n\r\n#[derive(Copy, Clone)]\r\npub enum Family {}\r\n\r\npub trait ConnectionTrait {}\r\n\r\npub struct VoidError {}\r\n\r\nimpl Model {\r\n    pub fn reverse(&self) -> bool {\r\n        self.details.as_ref().and_then(|d| d.reverse).unwrap_or_default()\r\n    }\r\n    \r\n    pub fn currency(&self) -> Family {\r\n        self.currency\r\n    }\r\n\r\n    /// kind-of parent model\r\n    pub async fn packageable<C>(&self, _conn: &C) -> Result<&AnotherModel, VoidError>\r\n    where\r\n        C: ConnectionTrait + std::fmt::Debug,\r\n    {\r\n        self.packageable\r\n            .get_or_try_init(|| async {\r\n                unreachable!()//get by database\r\n            })\r\n            .await\r\n    }\r\n}\r\n```\r\n\r\nThis was the working code:\r\n```rust\r\nimpl Model {\r\n    pub async fn source_currency<C>(&self, conn: &C) -> Result<Family, VoidError>\r\n    where\r\n        C: ConnectionTrait + std::fmt::Debug,\r\n    {\r\n        if self.reverse() {\r\n            self.packageable(conn).await?.counter_currency(self.currency())\r\n        } else {\r\n            Ok(self.currency())\r\n        }\r\n    }\r\n\r\n    pub async fn destination_currency<C>(&self, conn: &C) -> Result<Family, VoidError>\r\n    where\r\n        C: ConnectionTrait + std::fmt::Debug,\r\n    {\r\n        if self.reverse() {\r\n            Ok(self.currency())\r\n        } else {\r\n            self.packageable(conn).await?.counter_currency(self.currency())\r\n        }\r\n    }\r\n\r\n    pub async fn counter_currency<C>(&self, conn: &C) -> Result<Family, VoidError>\r\n    where\r\n        C: ConnectionTrait + std::fmt::Debug,\r\n    {\r\n        if self.reverse() {\r\n            self.source_currency(conn).await\r\n        } else {\r\n            self.destination_currency(conn).await\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe edit consists in this:\r\n```rust\r\nimpl Model {\r\n    pub async fn source_currency<C>(&self, conn: &C) -> Result<Family, VoidError>\r\n    where\r\n        C: ConnectionTrait + std::fmt::Debug,\r\n    {\r\n        if self.reverse() {\r\n            self.counter_currency(conn).await\r\n        } else {\r\n            Ok(self.currency())\r\n        }\r\n    }\r\n\r\n    pub async fn destination_currency<C>(&self, conn: &C) -> Result<Family, VoidError>\r\n    where\r\n        C: ConnectionTrait + std::fmt::Debug,\r\n    {\r\n        if self.reverse() {\r\n            Ok(self.currency())\r\n        } else {\r\n            self.counter_currency(conn).await\r\n        }\r\n    }\r\n\r\n    pub async fn counter_currency<C>(&self, conn: &C) -> Result<Family, VoidError>\r\n    where\r\n        C: ConnectionTrait + std::fmt::Debug,\r\n    {\r\n        self.packageable(conn).await?.counter_currency(self.currency())\r\n    }\r\n}\r\n```\r\n\r\nAs you can see, it's nothing trascendental, there is no recursion, etc...\r\n\r\n**Benchmarks:**\r\nMy machine is slightly faster than the CI one.\r\nold code:\r\nWith opt-level = 3 it takes 5 minutes\r\nWith opt-level = 2 it takes 5 minutes\r\nWith opt-level = 1 it takes 5 minutes\r\nWith opt-level = 0 it takes 4 minutes\r\nnew code:\r\nWith opt-level = 3 it takes 45 minutes\r\nWith opt-level = 2 it takes 6 minutes\r\nWith opt-level = 1 it takes 5 minutes\r\nWith opt-level = 0 it takes 3 minutes\r\n\r\nLast part of new code build consists in a single rustc process taking 100% of a single CPU and no-so-much RAM.\r\nLaunching with CARGO_LOG=debug or even CARGO_LOG=trace doesn't help a lot, last messages before a really long silence are like\r\n```\r\n[2022-10-14T13:15:13Z DEBUG cargo_util::paths] invocation time for \".../target/release/.fingerprint/project-b64972d2f705716e\" is 1665753313.923454678s\r\n```\r\nor\r\n```\r\n[2022-10-14T13:15:14Z TRACE cargo::core::compiler] found directive from rustc: `.../target/release/deps/project-b64972d2f705716e.d`\r\n```\r\n\r\n", "closed_by": {"login": "nappa85", "id": 7566389, "node_id": "MDQ6VXNlcjc1NjYzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/7566389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nappa85", "html_url": "https://github.com/nappa85", "followers_url": "https://api.github.com/users/nappa85/followers", "following_url": "https://api.github.com/users/nappa85/following{/other_user}", "gists_url": "https://api.github.com/users/nappa85/gists{/gist_id}", "starred_url": "https://api.github.com/users/nappa85/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nappa85/subscriptions", "organizations_url": "https://api.github.com/users/nappa85/orgs", "repos_url": "https://api.github.com/users/nappa85/repos", "events_url": "https://api.github.com/users/nappa85/events{/privacy}", "received_events_url": "https://api.github.com/users/nappa85/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103149/timeline", "performed_via_github_app": null, "state_reason": "completed"}