{"url": "https://api.github.com/repos/rust-lang/rust/issues/80603", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80603/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80603/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80603/events", "html_url": "https://github.com/rust-lang/rust/issues/80603", "id": 777370453, "node_id": "MDU6SXNzdWU3NzczNzA0NTM=", "number": 80603, "title": "Using associated constant incorrectly errors out with incorrect message about generic types", "user": {"login": "mqudsi", "id": 606923, "node_id": "MDQ6VXNlcjYwNjkyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/606923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mqudsi", "html_url": "https://github.com/mqudsi", "followers_url": "https://api.github.com/users/mqudsi/followers", "following_url": "https://api.github.com/users/mqudsi/following{/other_user}", "gists_url": "https://api.github.com/users/mqudsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mqudsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mqudsi/subscriptions", "organizations_url": "https://api.github.com/users/mqudsi/orgs", "repos_url": "https://api.github.com/users/mqudsi/repos", "events_url": "https://api.github.com/users/mqudsi/events{/privacy}", "received_events_url": "https://api.github.com/users/mqudsi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-01-01T23:24:00Z", "updated_at": "2021-01-05T19:48:06Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following code runs afoul of the check for nested functions with definitions contingent on the value of a generic parameter (or generic associated type) from the parent scope, even though the value in question is a) not in a generic struct, b) not in a trait, c) not in an outer function, and d) guaranteed to be the exclusive value ever used in the substitution (as it is a compile-time constant):\r\n\r\n```rust\r\n#![crate_type = \"rlib\"]\r\n\r\nstruct Foo;\r\nimpl Foo {\r\n    const COMPILE_TIME_LEN: usize = 42;\r\n\r\n    fn foo() -> u8 {\r\n        type TYPE = [u8; Self::COMPILE_TIME_LEN];\r\n        let foo: TYPE = [0; Self::COMPILE_TIME_LEN];\r\n\r\n        foo[0]\r\n    }\r\n}\r\n```\r\n\r\n[playground link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&code=%23!%5Bcrate_type%20%3D%20%22rlib%22%5D%0D%0A%0D%0Astruct%20Foo%3B%0D%0Aimpl%20Foo%20%7B%0D%0A%20%20%20%20const%20COMPILE_TIME_LEN%3A%20usize%20%3D%2042%3B%0D%0A%0D%0A%20%20%20%20fn%20foo()%20-%3E%20u8%20%7B%0D%0A%20%20%20%20%20%20%20%20type%20TYPE%20%3D%20%5Bu8%3B%20Self%3A%3ACOMPILE_TIME_LEN%5D%3B%0D%0A%20%20%20%20%20%20%20%20let%20foo%3A%20TYPE%20%3D%20%5B0%3B%20Self%3A%3ACOMPILE_TIME_LEN%5D%3B%0D%0A%0D%0A%20%20%20%20%20%20%20%20foo%5B0%5D%0D%0A%20%20%20%20%7D%0D%0A%7D%0D%0A)\r\n\r\nError currently reported with rustc rustc 1.51.0-nightly (2987785df 2020-12-28):\r\n\r\n```\r\nerror[E0401]: can't use generic parameters from outer function\r\n --> ./ex3.rs:8:26\r\n  |\r\n4 | impl Foo {\r\n  | ---- `Self` type implicitly declared here, by this `impl`\r\n...\r\n8 |         type TYPE = [u8; Self::COMPILE_TIME_LEN];\r\n  |                          ^^^^^^^^^^^^^^^^^^^^^^\r\n  |                          |\r\n  |                          use of generic parameter from outer function\r\n  |                          use a type here instead\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0401`.\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80603/timeline", "performed_via_github_app": null, "state_reason": null}