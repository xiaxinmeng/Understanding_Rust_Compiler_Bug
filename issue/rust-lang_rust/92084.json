{"url": "https://api.github.com/repos/rust-lang/rust/issues/92084", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92084/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92084/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92084/events", "html_url": "https://github.com/rust-lang/rust/issues/92084", "id": 1083883278, "node_id": "I_kwDOAAsO6M5Amr8O", "number": 92084, "title": "Investigate removing `need_backline` from `rustdoc::clean::DocFragment`", "user": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 419557634, "node_id": "MDU6TGFiZWw0MTk1NTc2MzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-medium", "name": "E-medium", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Medium / intermediate"}, {"id": 630799571, "node_id": "MDU6TGFiZWw2MzA3OTk1NzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compilemem", "name": "I-compilemem", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to memory usage during compilation."}], "state": "closed", "locked": false, "assignee": {"login": "xTachyon", "id": 16454588, "node_id": "MDQ6VXNlcjE2NDU0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/16454588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xTachyon", "html_url": "https://github.com/xTachyon", "followers_url": "https://api.github.com/users/xTachyon/followers", "following_url": "https://api.github.com/users/xTachyon/following{/other_user}", "gists_url": "https://api.github.com/users/xTachyon/gists{/gist_id}", "starred_url": "https://api.github.com/users/xTachyon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xTachyon/subscriptions", "organizations_url": "https://api.github.com/users/xTachyon/orgs", "repos_url": "https://api.github.com/users/xTachyon/repos", "events_url": "https://api.github.com/users/xTachyon/events{/privacy}", "received_events_url": "https://api.github.com/users/xTachyon/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "xTachyon", "id": 16454588, "node_id": "MDQ6VXNlcjE2NDU0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/16454588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xTachyon", "html_url": "https://github.com/xTachyon", "followers_url": "https://api.github.com/users/xTachyon/followers", "following_url": "https://api.github.com/users/xTachyon/following{/other_user}", "gists_url": "https://api.github.com/users/xTachyon/gists{/gist_id}", "starred_url": "https://api.github.com/users/xTachyon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xTachyon/subscriptions", "organizations_url": "https://api.github.com/users/xTachyon/orgs", "repos_url": "https://api.github.com/users/xTachyon/repos", "events_url": "https://api.github.com/users/xTachyon/events{/privacy}", "received_events_url": "https://api.github.com/users/xTachyon/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2021-12-18T18:02:33Z", "updated_at": "2021-12-21T19:11:46Z", "closed_at": "2021-12-21T19:11:46Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I expected this change to work:\r\n```diff\r\ndiff --git a/src/librustdoc/clean/types.rs b/src/librustdoc/clean/types.rs\r\nindex 2bd90f67cf4..a7ef658e811 100644\r\n--- a/src/librustdoc/clean/types.rs\r\n+++ b/src/librustdoc/clean/types.rs\r\n@@ -936,8 +936,8 @@ fn get_word_attr(mut self, word: Symbol) -> Option<ast::NestedMetaItem> {\r\n //\r\n // * Applying the computed indent to each lines in each doc fragment (a `DocFragment` can contain\r\n //   multiple lines in case of `#[doc = \"\"]`).\r\n-// * Adding backlines between `DocFragment`s and adding an extra one if required (stored in the\r\n-//   `need_backline` field).\r\n+//\r\n+// NOTE: this can contain trailing newlines. Make sure you remove the final newline.\r\n fn add_doc_fragment(out: &mut String, frag: &DocFragment) {\r\n     let s = frag.doc.as_str();\r\n     let mut iter = s.lines().peekable();\r\n@@ -952,9 +952,7 @@ fn add_doc_fragment(out: &mut String, frag: &DocFragment) {\r\n             out.push('\\n');\r\n         }\r\n     }\r\n-    if frag.need_backline {\r\n-        out.push('\\n');\r\n-    }\r\n+    out.push('\\n');\r\n }\r\n \r\n /// Collapse a collection of [`DocFragment`]s into one string,\r\n@@ -964,6 +962,9 @@ fn add_doc_fragment(out: &mut String, frag: &DocFragment) {\r\n     for frag in doc_strings {\r\n         add_doc_fragment(&mut acc, frag);\r\n     }\r\n+    if acc.ends_with('\\n') {\r\n+        acc.pop();\r\n+    }\r\n     acc\r\n }\r\n \r\n@@ -1091,6 +1092,9 @@ fn update_need_backline(doc_strings: &mut Vec<DocFragment>) {\r\n             }\r\n             add_doc_fragment(&mut out, new_frag);\r\n         }\r\n+        if out.ends_with('\\n') {\r\n+            out.pop();\r\n+        }\r\n         if out.is_empty() { None } else { Some(out) }\r\n     }\r\n \r\n@@ -1103,6 +1107,9 @@ fn update_need_backline(doc_strings: &mut Vec<DocFragment>) {\r\n         for new_frag in self.doc_strings.iter() {\r\n             let out = ret.entry(new_frag.parent_module).or_default();\r\n             add_doc_fragment(out, new_frag);\r\n+            if out.ends_with('\\n') {\r\n+                out.pop();\r\n+            }\r\n         }\r\n         ret\r\n     }\r\n```\r\nBut it causes `source_span_for_markdown_range` to panic:\r\n```\r\n---- [rustdoc] rustdoc/intra-doc/trait-impl.rs stdout ----\r\n\r\nerror: rustdoc failed!\r\n------------------------------------------\r\nstderr:\r\n------------------------------------------\r\nthread 'rustc' panicked at 'could not find markdown in source', src/librustdoc/passes/mod.rs:199:48\r\n```\r\n\r\n<details><summary>Backtrace</summary>\r\n\r\n```\r\nthread 'rustc' panicked at 'could not find markdown in source', src/librustdoc/passes/mod.rs:199:48\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library/std/src/panicking.rs:498:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library/core/src/panicking.rs:107:14\r\n   2: core::panicking::panic_display\r\n             at /rustc/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library/core/src/panicking.rs:63:5\r\n   3: core::option::expect_failed\r\n             at /rustc/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library/core/src/option.rs:1819:5\r\n   4: rustdoc::passes::source_span_for_markdown_range\r\n   5: <rustdoc::passes::collect_intra_doc_links::report_diagnostic<rustdoc::passes::collect_intra_doc_links::resolution_failure::{closure#0}>::{closure#0} as core::ops::function::FnOnce<(rustc_middle::lint::LintDiagnosticBuilder,)>>::call_once::{shim:vtable#0}\r\n   6: rustc_middle::lint::struct_lint_level::struct_lint_level_impl\r\n   7: rustc_middle::lint::struct_lint_level::<rustdoc::passes::collect_intra_doc_links::report_diagnostic<rustdoc::passes::collect_intra_doc_links::resolution_failure::{closure#0}>::{closure#0}>\r\n   8: <rustc_middle::ty::context::TyCtxt>::struct_span_lint_hir::<rustc_span::span_encoding::Span, rustdoc::passes::collect_intra_doc_links::report_diagnostic<rustdoc::passes::collect_intra_doc_links::resolution_failure::{closure#0}>::{closure#0}>\r\n   9: rustdoc::passes::collect_intra_doc_links::report_diagnostic::<rustdoc::passes::collect_intra_doc_links::resolution_failure::{closure#0}>\r\n  10: rustdoc::passes::collect_intra_doc_links::resolution_failure\r\n  11: <rustdoc::passes::collect_intra_doc_links::LinkCollector as rustdoc::visit::DocVisitor>::visit_item\r\n  12: <rustdoc::passes::collect_intra_doc_links::LinkCollector as rustdoc::visit::DocVisitor>::visit_item_recur\r\n  13: <rustdoc::passes::collect_intra_doc_links::LinkCollector as rustdoc::visit::DocVisitor>::visit_item\r\n  14: <rustdoc::passes::collect_intra_doc_links::LinkCollector as rustdoc::visit::DocVisitor>::visit_item_recur\r\n  15: <rustdoc::passes::collect_intra_doc_links::LinkCollector as rustdoc::visit::DocVisitor>::visit_item\r\n  16: <rustdoc::passes::collect_intra_doc_links::LinkCollector as rustdoc::visit::DocVisitor>::visit_crate\r\n  17: rustdoc::passes::collect_intra_doc_links::collect_intra_doc_links\r\n  18: <rustc_session::session::Session>::time::<rustdoc::clean::types::Crate, rustdoc::core::run_global_ctxt::{closure#11}>\r\n  19: rustdoc::core::run_global_ctxt\r\n  20: <rustc_session::session::Session>::time::<(rustdoc::clean::types::Crate, rustdoc::config::RenderOptions, rustdoc::formats::cache::Cache), rustdoc::main_options::{closure#0}::{closure#0}::{closure#0}::{closure#0}>\r\n  21: <rustc_interface::passes::QueryContext>::enter::<rustdoc::main_options::{closure#0}::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorReported>>\r\n  22: <rustc_interface::interface::Compiler>::enter::<rustdoc::main_options::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorReported>>\r\n  23: rustc_span::with_source_map::<core::result::Result<(), rustc_errors::ErrorReported>, rustc_interface::interface::create_compiler_and_run<core::result::Result<(), rustc_errors::ErrorReported>, rustdoc::main_options::{closure#0}>::{closure#1}>\r\n  24: rustc_interface::interface::create_compiler_and_run::<core::result::Result<(), rustc_errors::ErrorReported>, rustdoc::main_options::{closure#0}>\r\n  25: rustdoc::main_options\r\n  26: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals<rustdoc::main_args::{closure#0}, core::result::Result<(), rustc_errors::ErrorReported>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorReported>>\r\n```\r\n\r\n</details>\r\n\r\nI don't have time to look into it right now, but I wouldn't expect it to be *too* hard to fix and it would reduce the memory usage of rustdoc by quite a lot. I'd suggest starting by adding a bunch of assertions that the old and new behavior of `collapsed_doc_value` is the same and investigating the assertion failures.\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"xTachyon\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92084/timeline", "performed_via_github_app": null, "state_reason": "completed"}