{"url": "https://api.github.com/repos/rust-lang/rust/issues/76589", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76589/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76589/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76589/events", "html_url": "https://github.com/rust-lang/rust/issues/76589", "id": 698633152, "node_id": "MDU6SXNzdWU2OTg2MzMxNTI=", "number": 76589, "title": "Compiler guesses incorrect type after error occurs", "user": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 1659943986, "node_id": "MDU6TGFiZWwxNjU5OTQzOTg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-verbose", "name": "D-verbose", "color": "c9f7a3", "default": false, "description": "Too much output caused by a single piece of incorrect code"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-09-11T00:00:25Z", "updated_at": "2022-12-28T19:46:14Z", "closed_at": "2022-12-28T19:46:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The following code:\r\n\r\n```rust\r\nfn main() {\r\n    let a = String::missing_method();\r\n    let b: &str = &a;\r\n    let c: String = a;\r\n}\r\n```\r\n\r\nprints the following error messages:\r\n\r\n```\r\nerror[E0599]: no function or associated item named `missing_method` found for struct `std::string::String` in the current scope\r\n --> src/main.rs:2:21\r\n  |\r\n2 |     let a = String::missing_method();\r\n  |                     ^^^^^^^^^^^^^^ function or associated item not found in `std::string::String`\r\n\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:4:21\r\n  |\r\n4 |     let c: String = a;\r\n  |            ------   ^\r\n  |            |        |\r\n  |            |        expected struct `std::string::String`, found `str`\r\n  |            |        help: try using a conversion method: `a.to_string()`\r\n  |            expected due to this\r\n\r\nerror: aborting due to 2 previous errors\r\n```\r\n\r\nThe compiler appears to have inferred the type of `a` to be `str`, based on the statement `let b: &str = &a`. However, this is almost certainly the wrong thing to do. The fact that an error occurred while type-checking the initial declaration means that we cannot be sure of what type the user intended to use. In this case, unifying `&str` with `&a` produces an incorrect type of `a`, since a deref coercion will likely be involved in the corrected code (e.g. if the user writes `let a = String::new()`).\r\n\r\nWe should be more cautious about inferring the types of locals when an error has occurred. If we are certain that no coercions can be occurring (e.g. passing `a` to a function that takes a `String` parameter), then continuing on to infer the variable's type should be fine.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76589/timeline", "performed_via_github_app": null, "state_reason": "completed"}