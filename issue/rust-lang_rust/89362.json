{"url": "https://api.github.com/repos/rust-lang/rust/issues/89362", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89362/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89362/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89362/events", "html_url": "https://github.com/rust-lang/rust/issues/89362", "id": 1011049503, "node_id": "I_kwDOAAsO6M48Q2Qf", "number": 89362, "title": "Panics in procedural macros can lead to hundreds of unrelated resolution errors", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1659943986, "node_id": "MDU6TGFiZWwxNjU5OTQzOTg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-verbose", "name": "D-verbose", "color": "c9f7a3", "default": false, "description": "Too much output caused by a single piece of incorrect code"}, {"id": 2079070889, "node_id": "MDU6TGFiZWwyMDc5MDcwODg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-proc-macros", "name": "A-proc-macros", "color": "f7e101", "default": false, "description": "Area: Procedural macros"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-09-29T14:38:49Z", "updated_at": "2021-09-29T16:02:00Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "One thing I've often seen with rustc when I'm developing a procedural macro is that I'm in a situation where a procedural macro is generating a bunch of code and I've got a file that's using all the code the procedural macro. Everything works well but inevitably I've got a bug in the macro and the macro panics. This causes the macro to not actually produce any items, but all the code I have that was hand-written and using the results of the generated macro is still there. This leads rustc to generate an error-per-use-of-generated code, which often for me at least can be in the dozens or hundreds of errors. I find that I basically have to sift through all the compiler errors back to the top to find the one with the procedural macro to actually find the issue.\r\n\r\nIdeally I think rustc would recognize macro expansion errors and stop producing other name resolution errors related to the module that had the macro expansion error. Given that the macro could have possibly produced anything else in the module any other further error could be a false positive.\r\n\r\nAs a small example with this procedural macro:\r\n\r\n```rust\r\n// pm.rs\r\nextern crate proc_macro;\r\n\r\nuse proc_macro::TokenStream;\r\n\r\n#[proc_macro]\r\npub fn foo(a: TokenStream) -> TokenStream {\r\n    if a.to_string() == \"a\" {\r\n        panic!()\r\n    }\r\n    \"pub fn foo() {}\".parse().unwrap()\r\n}\r\n```\r\n\r\nand a `main.rs`:\r\n\r\n```rust\r\n// main.rs\r\npm::foo!();\r\n\r\nfn main() {\r\n    foo();\r\n}\r\n```\r\n\r\ncompiling this yields no error:\r\n\r\n```\r\n$ rustc pm.rs --crate-type proc-macro\r\n$ rustc main.rs --extern pm=./libpm.so\r\n```\r\n\r\nbut changing `main.rs` to this:\r\n\r\n```rust\r\n// main.rs\r\npm::foo!(a);\r\n\r\nfn main() {\r\n    foo();\r\n}\r\n```\r\n\r\nyields:\r\n\r\n```\r\n$ rustc pm.rs --crate-type proc-macro\r\n$ rustc main.rs --extern pm=./libpm.so\r\nerror: proc macro panicked\r\n --> main.rs:1:1\r\n  |\r\n1 | pm::foo!(a);\r\n  | ^^^^^^^^^^^^\r\n  |\r\n  = help: message: explicit panic\r\n\r\nerror[E0425]: cannot find function `foo` in this scope\r\n --> main.rs:4:5\r\n  |\r\n4 |     foo();\r\n  |     ^^^ not found in this scope\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0425`.\r\n```\r\n\r\nThe second error here isn't very helpful because it's just a knock-on effect of the first error. While this example itself is quite isolated and easy to debug, it's a bit more troublesome to sift through hundreds of knock-on effects from a mistake in a procedural macro than one.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89362/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89362/timeline", "performed_via_github_app": null, "state_reason": null}