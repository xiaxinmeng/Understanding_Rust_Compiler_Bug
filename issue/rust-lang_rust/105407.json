{"url": "https://api.github.com/repos/rust-lang/rust/issues/105407", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105407/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105407/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105407/events", "html_url": "https://github.com/rust-lang/rust/issues/105407", "id": 1480679898, "node_id": "I_kwDOAAsO6M5YQWHa", "number": 105407, "title": "`for` syntax loops wrong times", "user": {"login": "sugiura-hiromichi", "id": 108505602, "node_id": "U_kgDOBneqAg", "avatar_url": "https://avatars.githubusercontent.com/u/108505602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sugiura-hiromichi", "html_url": "https://github.com/sugiura-hiromichi", "followers_url": "https://api.github.com/users/sugiura-hiromichi/followers", "following_url": "https://api.github.com/users/sugiura-hiromichi/following{/other_user}", "gists_url": "https://api.github.com/users/sugiura-hiromichi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sugiura-hiromichi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sugiura-hiromichi/subscriptions", "organizations_url": "https://api.github.com/users/sugiura-hiromichi/orgs", "repos_url": "https://api.github.com/users/sugiura-hiromichi/repos", "events_url": "https://api.github.com/users/sugiura-hiromichi/events{/privacy}", "received_events_url": "https://api.github.com/users/sugiura-hiromichi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-12-07T01:47:32Z", "updated_at": "2022-12-08T00:38:47Z", "closed_at": "2022-12-08T00:38:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#[derive(PartialEq, Eq, Clone, Debug,)]\r\npub struct ListNode {\r\n\tpub val:  i32,\r\n\tpub next: Option<Box<ListNode,>,>,\r\n}\r\n\r\nimpl ListNode {\r\n\t#[inline]\r\n\tfn new(val: i32,) -> Self { ListNode { next: None, val, } }\r\n}\r\n\r\nimpl Solution {\r\n\tpub fn reverse_k_group(head: Option<Box<ListNode,>,>, k: i32,) -> Option<Box<ListNode,>,> {\r\n\t\tif k == 1 {\r\n\t\t\treturn head;\r\n\t\t} else if k == 2 {\r\n\t\t\treturn swap_pairs(head,);\r\n\t\t}\r\n\t\t// NOTE: make sure that k > 2 from here\r\n\r\n\t\tlet mut l_kth = &head;\r\n\t\t// detect (k-1)th node from head\r\n\t\tfor _ in 2..k {\r\n\t\t\tprintln!(\"l_kth: {l_kth:?}\");\r\n\t\t\tl_kth =  &l_kth.as_ref().unwrap().next;// ERROR OCCURS HERE\r\n\t\t\tif l_kth.is_none() {\r\n\t\t\t\treturn head;\r\n\t\t\t}\r\n\t\t}\r\n//....\r\n```\r\n\r\nI expected to see this happen: I set three test cases like this\r\n\r\n```rust\r\n#[cfg(test)]\r\nmod tests {\r\n\tuse super::*;\r\n\r\n\t#[test]\r\n\tfn test_1() {\r\n\t\tlet mut ans = ary_to_list(&[2, 1, 4, 3, 5,],);\r\n\t\tlet mut sol = Solution::reverse_k_group(ary_to_list(&[1, 2, 3, 4, 5,],), 2,);\r\n\t\tassert_eq!(ans, sol);\r\n\t}\r\n\r\n\t#[test]\r\n\tfn test_2() {\r\n\t\tlet mut ans = ary_to_list(&[3, 2, 1, 4, 5,],);\r\n\t\tlet mut sol = Solution::reverse_k_group(ary_to_list(&[1, 2, 3, 4, 5,],), 3,);\r\n\t\tassert_eq!(ans, sol);\r\n\t}\r\n\r\n\t#[test]\r\n\tfn test_3() {\r\n\t\tlet mut ans = ary_to_list(&[3, 2, 1,],);\r\n\t\tlet mut sol = Solution::reverse_k_group(ary_to_list(&[1, 2, 3,],), 3,);\r\n\t\tassert_eq!(ans, sol);\r\n\t}\r\n\r\n\tfn ary_to_list(ary: &[i32],) -> Option<Box<ListNode,>,> {\r\n\t\tif ary.is_empty() {\r\n\t\t\tNone\r\n\t\t} else {\r\n\t\t\tSome(Box::new(ListNode { val: ary[0], next: ary_to_list(&ary[1..],), },),)\r\n\t\t}\r\n\t}\r\n\r\n\tfn arys_to_lists(arys: Vec<&[i32],>,) -> Vec<Option<Box<ListNode,>,>,> {\r\n\t\tarys.iter().map(|&a| ary_to_list(a,),).collect()\r\n\t}\r\n}\r\n```\r\n\r\nI expected to pass all tests.\r\n\r\nInstead, this happened: Only test_3 fails.  \r\nHere is `cargo t` output:\r\n```\r\ncargo t\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.03s\r\n     Running unittests src/main.rs (target/debug/deps/leet_code-7f4542e82408fff9)\r\n\r\nrunning 3 tests\r\ntest tests::test_2 ... ok\r\ntest tests::test_1 ... ok\r\ntest tests::test_3 ... FAILED\r\n\r\nfailures:\r\n\r\n---- tests::test_3 stdout ----\r\nl_kth: Some(ListNode { val: 1, next: Some(ListNode { val: 2, next: Some(ListNode { val: 3, next: None }) }) })\r\nl_kth: None\r\nthread 'tests::test_3' panicked at 'called `Option::unwrap()` on a `None` value', src/main.rs:28:37\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\n\r\nfailures:\r\n    tests::test_3\r\n\r\ntest result: FAILED. 2 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\r\n\r\nerror: test failed, to rerun pass `--bin leet_code`\r\n```\r\n\r\nIt seems for loop trying to loops more than two times where should be one.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc -V -v\r\nrustc 1.67.0-nightly (b28d30e1e 2022-12-06)\r\nbinary: rustc\r\ncommit-hash: b28d30e1e3c2b90fd08b7dd79d8e63884d1e0339\r\ncommit-date: 2022-12-06\r\nhost: aarch64-apple-darwin\r\nrelease: 1.67.0-nightly\r\nLLVM version: 15.0.4\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nRUST_BACKTRACE=1 cargo test\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.00s\r\n     Running unittests src/main.rs (target/debug/deps/leet_code-7f4542e82408fff9)\r\n\r\nrunning 3 tests\r\ntest tests::test_1 ... ok\r\ntest tests::test_2 ... ok\r\ntest tests::test_3 ... FAILED\r\n\r\nfailures:\r\n\r\n---- tests::test_3 stdout ----\r\nl_kth: Some(ListNode { val: 1, next: Some(ListNode { val: 2, next: Some(ListNode { val: 3, next: None }) }) })\r\nl_kth: None\r\nthread 'tests::test_3' panicked at 'called `Option::unwrap()` on a `None` value', src/main.rs:28:37\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/b28d30e1e3c2b90fd08b7dd79d8e63884d1e0339/library/std/src/panicking.rs:575:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/b28d30e1e3c2b90fd08b7dd79d8e63884d1e0339/library/core/src/panicking.rs:64:14\r\n   2: core::panicking::panic\r\n             at /rustc/b28d30e1e3c2b90fd08b7dd79d8e63884d1e0339/library/core/src/panicking.rs:111:5\r\n   3: core::option::Option<T>::unwrap\r\n             at /rustc/b28d30e1e3c2b90fd08b7dd79d8e63884d1e0339/library/core/src/option.rs:778:21\r\n   4: leet_code::Solution::reverse_k_group\r\n             at ./src/main.rs:28:13\r\n   5: leet_code::Solution::reverse_k_group\r\n             at ./src/main.rs:45:4\r\n   6: leet_code::tests::test_3\r\n             at ./src/main.rs:91:17\r\n   7: leet_code::tests::test_3::{{closure}}\r\n             at ./src/main.rs:89:14\r\n   8: core::ops::function::FnOnce::call_once\r\n             at /rustc/b28d30e1e3c2b90fd08b7dd79d8e63884d1e0339/library/core/src/ops/function.rs:507:5\r\n   9: core::ops::function::FnOnce::call_once\r\n             at /rustc/b28d30e1e3c2b90fd08b7dd79d8e63884d1e0339/library/core/src/ops/function.rs:507:5\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\n\r\nfailures:\r\n    tests::test_3\r\n\r\ntest result: FAILED. 2 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s\r\n\r\nerror: test failed, to rerun pass `--bin leet_code`\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "sugiura-hiromichi", "id": 108505602, "node_id": "U_kgDOBneqAg", "avatar_url": "https://avatars.githubusercontent.com/u/108505602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sugiura-hiromichi", "html_url": "https://github.com/sugiura-hiromichi", "followers_url": "https://api.github.com/users/sugiura-hiromichi/followers", "following_url": "https://api.github.com/users/sugiura-hiromichi/following{/other_user}", "gists_url": "https://api.github.com/users/sugiura-hiromichi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sugiura-hiromichi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sugiura-hiromichi/subscriptions", "organizations_url": "https://api.github.com/users/sugiura-hiromichi/orgs", "repos_url": "https://api.github.com/users/sugiura-hiromichi/repos", "events_url": "https://api.github.com/users/sugiura-hiromichi/events{/privacy}", "received_events_url": "https://api.github.com/users/sugiura-hiromichi/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105407/timeline", "performed_via_github_app": null, "state_reason": "completed"}