{"url": "https://api.github.com/repos/rust-lang/rust/issues/58905", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58905/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58905/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58905/events", "html_url": "https://github.com/rust-lang/rust/issues/58905", "id": 416564943, "node_id": "MDU6SXNzdWU0MTY1NjQ5NDM=", "number": 58905, "title": "Rust arrays on C FFI are super confusing", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 800802916, "node_id": "MDU6TGFiZWw4MDA4MDI5MTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-coercions", "name": "A-coercions", "color": "f7e101", "default": false, "description": "Area: implicit and explicit `expr as Type` coercions"}, {"id": 1089771154, "node_id": "MDU6TGFiZWwxMDg5NzcxMTU0", "url": "https://api.github.com/repos/rust-lang/rust/labels/needs-rfc", "name": "needs-rfc", "color": "fceb9f", "default": false, "description": "This change is large or controversial enough that it should have an (e-)RFC accepted before doing it"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-03T21:11:11Z", "updated_at": "2019-11-28T00:36:16Z", "closed_at": "2019-11-28T00:36:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Arrays are passed to C as a raw pointers, which means that `foo` does not move it, so this example is confusing at best. \r\n\r\n```rust\r\n#[repr(C)]\r\nstruct I32(i32);\r\n\r\nextern \"C\" {\r\n    fn foo(x: [I32; 2]);\r\n}\r\n\r\nfn main() {\r\n    let x = [I32(0), I32(1)];\r\n    unsafe { foo(x) };\r\n    println!(\"x = {}\", x[0].0);\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7a25fb17a6f38941c4ae3ddf887a8910))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0382]: borrow of moved value: `x`\r\n  --> src/main.rs:11:24\r\n   |\r\n10 |     unsafe { foo(x) };\r\n   |                  - value moved here\r\n11 |     println!(\"x = {}\", x[0].0);\r\n   |                        ^^^^^^ value borrowed here after move\r\n   |\r\n   = note: move occurs because `x` has type `[I32; 2]`, which does not implement the `Copy` trait\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nIf one does not try to use the moved value, this will silently compile, but `x` will be deallocated as soon as the function returns, yet the C code could still try to read (or even write - the code above doesn't make it clear what C can actually do with the pointer...) to it. \r\n\r\nIt would be better if we would require code to be more explicit about this, e.g., by writing:\r\n\r\n```rust\r\nextern \"C\" {\r\n    fn foo(x: *const [I32; 2]);\r\n    // or:\r\n    fn foo(x: *mut [I32; 2]);\r\n}\r\n```\r\n\r\ninstead. This makes it clear that `foo` doesn't own the array, how many elements are expected behind the pointer, and whether the foreign function only reads or also might write to it.\r\n\r\nWe could avoid breaking changes due to updating C FFI code by allowing people to still call `foo(x)` but treating it a as a unique or shared borrow depending on the mutability of the FFI declaration, and then applying a coercion to the raw pointer, while simultaneously emitting a warning to users that they should be more explicit and write `foo(&x as *const _)` instead. ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58905/timeline", "performed_via_github_app": null, "state_reason": "completed"}