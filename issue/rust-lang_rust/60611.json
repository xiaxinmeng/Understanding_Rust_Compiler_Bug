{"url": "https://api.github.com/repos/rust-lang/rust/issues/60611", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60611/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60611/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60611/events", "html_url": "https://github.com/rust-lang/rust/issues/60611", "id": 441338418, "node_id": "MDU6SXNzdWU0NDEzMzg0MTg=", "number": 60611, "title": "Behavior of panicking Drop::drop is not properly documented", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 43009118, "node_id": "MDU6TGFiZWw0MzAwOTExOA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-destructors", "name": "A-destructors", "color": "f7e101", "default": false, "description": "Area: destructors (Drop, ..)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-07T16:58:59Z", "updated_at": "2019-05-16T18:51:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It was decided in, I think, #14875, that `Drop::drop` can panic, and if this happens, the value must be leaked (at least in a generic context), that is, it cannot be re-dropped again and doing that could invoke UB (that's at least what generic unsafe code needs to assume).\r\n\r\nThis does not appear to be documented anywhere. These semantics make the following snippet have undefined behavior due to double-drops ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=8aa124ceb7a72d954497891d29cf4004) uses `T = Vec<HasDrop>`):\r\n\r\n```rust\r\nlet mut a: T;\r\nlet a_raw = &mut a as *mut  T;\r\n\r\nmatch std::panic::catch_unwind(|| {\r\n    // Drop `a` in place:\r\n    unsafe { std::ptr::drop_in_place(a_raw) };\r\n}) {\r\n    // For exposition only, if the value isn't leaked,\r\n    // it will be re-dropped, but one could also try to \r\n    // explicitly re-drop on drop failure.\r\n    // UB: this will double-drop some previously dropped fields of a\r\n    Err(_) => std::mem::drop(a),\r\n    // If dropping succeeds, leak a\r\n    Ok(()) => std::mem::forget(a),\r\n}\r\n```\r\n\r\nTo avoid UB, that snippet must be changed to unconditionally leak the value independently of whether `drop_in_place` succeeded or failed:\r\n\r\n```rust\r\nlet mut a: T;\r\nlet a_raw = &mut *a as *mut T;\r\n\r\nstd::panic::catch_unwind(|| {\r\n    // Drop `a` in place:\r\n    unsafe { std::ptr::drop_in_place(a_raw) };\r\n});\r\n// Always leak `a`: if dropping failed, some elements will be leaked,\r\n// but there is no way to properly drop them and trying to re-drop\r\n// a could invoke UB\r\n std::mem::forget(a);\r\n```\r\n\r\n---\r\n\r\ncc @Centril - this might be a T-lang issue, I don't know the best way to word this, and I can't find any RFC designing this part of the language.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60611/timeline", "performed_via_github_app": null, "state_reason": null}