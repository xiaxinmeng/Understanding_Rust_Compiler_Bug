{"url": "https://api.github.com/repos/rust-lang/rust/issues/24770", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/24770/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/24770/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/24770/events", "html_url": "https://github.com/rust-lang/rust/issues/24770", "id": 70673146, "node_id": "MDU6SXNzdWU3MDY3MzE0Ng==", "number": 24770, "title": "`infer_ty(IntVar)` should not print as `_` in user error messages", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-04-24T12:12:25Z", "updated_at": "2016-08-23T18:36:07Z", "closed_at": "2016-08-23T18:36:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "spawned off of https://github.com/rust-lang/rust/pull/24728#issuecomment-95911488\n\nIn an example like:\n\n``` rust\nfn main() {\n    let vs = vec![1, 2, 3, 4];\n\n    for v in &vs {\n        match v {\n            1 => {}\n            _ => {}\n        }\n    }\n}\n```\n\nwhich yields the error message:\n\n```\n<anon>:4:5: 9:6 error: type mismatch resolving  \\ (linebreak solely for presentation here)\n `<core::slice::Iter<'_, _> as core::iter::Iterator>::Item == _`:\n expected &-ptr,\n    found integral variable [E0271]\n<anon>:4     for v in &vs {\n<anon>:5         match v {\n<anon>:6             1 => {}\n<anon>:7             _ => {}\n<anon>:8         }\n<anon>:9     }\n```\n\ni find it frustrating that the first line prints the integral type variable as just `_`.\n\nIt is not a completely unconstrained type; it must be some kind of integer.\n\n(It is true that one should be able to figure this out from the third line.  But I think we can still do better on the first line itself.)\n\nI am thinking something like this could suffice:\n\n```\nerror: type mismatch resolving   \\\n `<core::slice::Iter<'_, _> as core::iter::Iterator>::Item == iN`\n```\n\nAnother slightly more verbose option (but less prone to misinterpretation when e.g. unsigned integers are involved, or when the user has _defined_ a type named `iN`) would be:\n\n```\nerror: type mismatch resolving   \\\n `<core::slice::Iter<'_, _> as core::iter::Iterator>::Item == <int type>`\n```\n\nYet another option, which is both succinct but will not collide with user definitions (at least not today):\n\n```\nerror: type mismatch resolving   \\\n `int? == <core::slice::Iter<'_, _> as core::iter::Iterator>::Item`\n```\n\nand likewise one would imagine for the `FloatVar` case\n\n```\nerror: type mismatch resolving   \\\n `float? == <core::slice::Iter<'_, _> as core::iter::Iterator>::Item`\n```\n\nI forced the `int?` and `float?` to be on the left-hand side to ensure that they did not get mistaken for a question mark ending the error message itself.  (I did consider `?int` and `?float` but I worry a little that those would get confused with the generalization marker `?Sized` ... maybe that is a small price to pay...)\n", "closed_by": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/24770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/24770/timeline", "performed_via_github_app": null, "state_reason": "completed"}