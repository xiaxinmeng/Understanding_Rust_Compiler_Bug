{"url": "https://api.github.com/repos/rust-lang/rust/issues/88079", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88079/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88079/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88079/events", "html_url": "https://github.com/rust-lang/rust/issues/88079", "id": 971631296, "node_id": "MDU6SXNzdWU5NzE2MzEyOTY=", "number": 88079, "title": "Improve suggestion when TryFrom trait bound not satisified due to missing dereference", "user": {"login": "edmorley", "id": 501702, "node_id": "MDQ6VXNlcjUwMTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/501702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edmorley", "html_url": "https://github.com/edmorley", "followers_url": "https://api.github.com/users/edmorley/followers", "following_url": "https://api.github.com/users/edmorley/following{/other_user}", "gists_url": "https://api.github.com/users/edmorley/gists{/gist_id}", "starred_url": "https://api.github.com/users/edmorley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edmorley/subscriptions", "organizations_url": "https://api.github.com/users/edmorley/orgs", "repos_url": "https://api.github.com/users/edmorley/repos", "events_url": "https://api.github.com/users/edmorley/events{/privacy}", "received_events_url": "https://api.github.com/users/edmorley/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}, {"id": 1839565265, "node_id": "MDU6TGFiZWwxODM5NTY1MjY1", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-terse", "name": "D-terse", "color": "c9f7a3", "default": false, "description": "A diagnostic that doesn't give enough information about the problem at hand"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-08-16T11:17:07Z", "updated_at": "2022-09-22T08:49:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nWhilst working through [Rustlings](https://github.com/rust-lang/rustlings) exercise [try_from_into](https://github.com/rust-lang/rustlings/blob/df25684cb79f8413915e00b5efef29369849cef1/exercises/conversions/try_from_into.rs), I encountered a few confusing compiler messages, particularly once I tried to fix the original issue.\r\n\r\nI wasn't quite sure how to phrase the issue title - please rename as needed :-)\r\n\r\nGiven the following code: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=11706b8dd1bef0c09d48be82bd88700e\r\n\r\n```rust\r\nuse std::convert::{TryFrom, TryInto};\r\nuse std::error;\r\n\r\n#[derive(Debug, PartialEq)]\r\nstruct Color {\r\n    red: u8,\r\n    green: u8,\r\n    blue: u8,\r\n}\r\n\r\nimpl TryFrom<&[i16]> for Color {\r\n    type Error = Box<dyn error::Error>;\r\n    fn try_from(slice: &[i16]) -> Result<Self, Self::Error> {\r\n        match slice {\r\n            [red, green, blue] => Ok(Color {\r\n                red: red.try_into()?,\r\n                green: green.try_into()?,\r\n                blue: blue.try_into()?,\r\n            }),\r\n            _ => Err(\"Invalid slice\".into()),\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let v = vec![183, 65, 14];\r\n    let c = Color::try_from(&v[..]);\r\n    println!(\"{:?}\", c);\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0277]: the trait bound `u8: From<&i16>` is not satisfied\r\n  --> src/main.rs:16:26\r\n   |\r\n16 |                 red: red.try_into()?,\r\n   |                          ^^^^^^^^ the trait `From<&i16>` is not implemented for `u8`\r\n   |\r\n   = help: the following implementations were found:\r\n             <u8 as From<NonZeroU8>>\r\n             <u8 as From<bool>>\r\n   = note: required because of the requirements on the impl of `Into<u8>` for `&i16`\r\n   = note: required because of the requirements on the impl of `TryFrom<&i16>` for `u8`\r\n   = note: required because of the requirements on the impl of `TryInto<u8>` for `&i16`\r\n...\r\n```\r\n\r\nIdeally the output should either suggest dereferencing red/green/blue, using:\r\n\r\n```rust\r\n        match slice {\r\n            [red, green, blue] => Ok(Color {\r\n                red: (*red).try_into()?,\r\n                green: (*green).try_into()?,\r\n                blue: (*blue).try_into()?,\r\n            }),\r\n            _ => Err(\"Invalid slice\".into()),\r\n        }\r\n```\r\n\r\nOr else even better suggest changing the syntax used in that match arm (`[red, green, blue]` -> `&[red, green, blue]`):\r\n\r\n```rust\r\n        match slice {\r\n            &[red, green, blue] => Ok(Color {\r\n                red: red.try_into()?,\r\n                green: green.try_into()?,\r\n                blue: blue.try_into()?,\r\n            }),\r\n            _ => Err(\"Invalid slice\".into()),\r\n        }\r\n```\r\n\r\n---\r\n\r\nThe need to use that match syntax is probably obvious for anyone familiar with Rust/slices, but for me Rust's auto-dereferencing is something that's meant I haven't really had to think about accounting for references much so far.\r\n\r\nPrior to me finding the working approaches above, I tried this (which is missing the parentheses around the dereferencing):\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=832f13138c7edff6b6ba9cb5104924a5\r\n```rust\r\n        match slice {\r\n            [red, green, blue] => Ok(Color {\r\n                red: *red.try_into()?,\r\n                green: *green.try_into()?,\r\n                blue: *blue.try_into()?,\r\n            }),\r\n            _ => Err(\"Invalid slice\".into()),\r\n        }\r\n```\r\n\r\n...which gave this output, which also had me confused:\r\n\r\n```\r\nerror[E0282]: type annotations needed\r\n  --> src/main.rs:16:27\r\n   |\r\n16 |                 red: *red.try_into()?,\r\n   |                       ----^^^^^^^^--\r\n   |                       |   |\r\n   |                       |   cannot infer type\r\n   |                       this method call resolves to `Result<T, <Self as TryInto<T>>::Error>`\r\n   |\r\n   = note: type must be known at this point\r\n```\r\n\r\nAnd then I tried this (I was pretty much guessing and not thinking at this point):\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d0a17817fa45f2c9aa08b2ba29e9a4c8\r\n```rust\r\n        match slice {\r\n            [&red, &green, &blue] => Ok(Color {\r\n                red: red.try_into()?,\r\n                green: green.try_into()?,\r\n                blue: blue.try_into()?,\r\n            }),\r\n            _ => Err(\"Invalid slice\".into()),\r\n        }\r\n```\r\n\r\n...which gave this output:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:15:14\r\n   |\r\n14 |         match slice {\r\n   |               ----- this expression has type `&[i16]`\r\n15 |             [&red, &green, &blue] => Ok(Color {\r\n   |              ^^^^\r\n   |              |\r\n   |              expected `i16`, found reference\r\n   |              help: you can probably remove the explicit borrow: `red`\r\n   |\r\n   = note:   expected type `i16`\r\n           found reference `&_`\r\n...\r\n```\r\n\r\n...which is when the penny dropped about `slice` being `&[i16]` and to try `&[red, green, blue]`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88079/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88079/timeline", "performed_via_github_app": null, "state_reason": null}