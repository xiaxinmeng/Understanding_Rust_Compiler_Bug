{"url": "https://api.github.com/repos/rust-lang/rust/issues/70579", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70579/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70579/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70579/events", "html_url": "https://github.com/rust-lang/rust/issues/70579", "id": 590483384, "node_id": "MDU6SXNzdWU1OTA0ODMzODQ=", "number": 70579, "title": "Measure binary size impact of implicit caller location", "user": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}, {"id": 1606844895, "node_id": "MDU6TGFiZWwxNjA2ODQ0ODk1", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-track_caller", "name": "F-track_caller", "color": "f9c0cc", "default": false, "description": "`#![feature(track_caller)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-30T18:01:27Z", "updated_at": "2021-10-13T17:35:23Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The largest unanswered questions about [implicit caller location](https://github.com/rust-lang/rust/issues/47809) are about the binary size impact of the feature and how to offer users control over it.\r\n\r\nThere are three ways I see that `#[track_caller]` inflates binaries:\r\n\r\n1. code bloat from panicking branches that were previously fused\r\n2. encoding the `Location` structs themselves\r\n3. encoding the `&'static str` for every filename referenced by a `Location`\r\n\r\nWe need to determine the impact to the ecosystem for each of these before deciding on mitigation strategy.\r\n\r\n(1) was the main concern in the RFC but it was predicated on the assumption that `#[track_caller]` would affect inlining (an artifact of the implementation proposed). Since it doesn't affect inlining now, the only lost optimization in panicking branches would be for cases where LLVM previously used knowledge of a single constant panic location to make the failure path of a function smaller.\r\n\r\nWe've not yet had any reports of this and some ad-hoc measurements don't show any difference. This matches my mental model of LLVM's ability to optimize calling conventions which is \"very expensive magic\". I'm open to ideas for how to better assess this, including \"wait and see\".\r\n\r\n**TLDR** Re (2) and (3),\r\n\r\n`Location`s are 24 bytes when `size_of::<usize>() == size_of::<u64>()` and we don't currently measure how many we encode. We should put these in their own section to make it easier to measure.\r\n\r\nWhich filenames do we encode? In practice: probably all source files. We should put these in their own section too.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70579/timeline", "performed_via_github_app": null, "state_reason": null}