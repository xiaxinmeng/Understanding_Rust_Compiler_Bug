{"url": "https://api.github.com/repos/rust-lang/rust/issues/110748", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110748/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110748/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110748/events", "html_url": "https://github.com/rust-lang/rust/issues/110748", "id": 1680328722, "node_id": "I_kwDOAAsO6M5kJ8gS", "number": 110748, "title": "Explicitly document/guarantee which pointers are safe for NonNull", "user": {"login": "nic-hartley", "id": 4331760, "node_id": "MDQ6VXNlcjQzMzE3NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4331760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nic-hartley", "html_url": "https://github.com/nic-hartley", "followers_url": "https://api.github.com/users/nic-hartley/followers", "following_url": "https://api.github.com/users/nic-hartley/following{/other_user}", "gists_url": "https://api.github.com/users/nic-hartley/gists{/gist_id}", "starred_url": "https://api.github.com/users/nic-hartley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nic-hartley/subscriptions", "organizations_url": "https://api.github.com/users/nic-hartley/orgs", "repos_url": "https://api.github.com/users/nic-hartley/repos", "events_url": "https://api.github.com/users/nic-hartley/events{/privacy}", "received_events_url": "https://api.github.com/users/nic-hartley/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-04-24T02:10:02Z", "updated_at": "2023-04-24T20:27:55Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Location\n\nThere are several places this applies, e.g.:\r\n\r\n- [`Vec::as_ptr`](https://doc.rust-lang.org/std/vec/struct.Vec.html#method.as_ptr)\r\n- [`slice::as_ptr`](https://doc.rust-lang.org/core/primitive.slice.html#method.as_ptr)\r\n- [`MaybeUninit::as_ptr`](https://doc.rust-lang.org/core/mem/union.MaybeUninit.html#method.as_ptr)\r\n\r\nAlso, the `mut_ptr` equivalents, where relevant.\r\n\r\nI haven't gone through literally all of them, but I suspect it's at least all `as_ptr`/`as_mut_ptr` methods, and probably the vast majority of stdlib functions returning pointers.\n\n### Summary\n\nCompare these bits of documentation to, say, [`Box::into_raw`](https://doc.rust-lang.org/std/boxed/struct.Box.html#method.into_raw), which explicitly states:\r\n\r\n> The pointer will be properly aligned and non-null.\r\n\r\nIn all the other places I mentioned, it's implicitly true -- e.g. `Vec` indirectly contains a `NonNull`, which is what produces the pointer that's eventually returned; `MaybeUninit` just directly casts a reference to a pointer, which can't possibly be null or misaligned. And there are lines like this in many of these docs:\r\n\r\n> Returns a raw pointer to the vector\u2019s buffer, or a dangling raw pointer valid for zero sized reads if the vector didn\u2019t allocate.\r\n\r\nIt doesn't explicitly say \"the pointer is well-aligned non-null\", but the vector's buffer is either unallocated (and this function returns a *dangling*, which in Rust means \"well-aligned and non-null\", pointer) or allocated (and by definition non-null and well-aligned). That said, it takes a minute to work through that logic and convince myself that, yep, that's safe to assume is non-null.\r\n\r\nAccordingly, it'd be very handy for quickly verifying safety if the documentation just... explicitly said \"The pointer will be properly aligned and non-null\", everywhere that's true. It'd mean being able to ensure that things like `NonNull::new_unchecked(vec.as_ptr())` are, in fact, correct, without having to take a minute to confirm the docs say what I think they do.\r\n\r\nI'm happy to write that PR, but I'd appreciate it if someone more familiar with the stdlib/unsafe code would give me a checklist of places where it's true. I'm not nearly confident enough in my understanding of `unsafe` code to be confident doing it solo.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110748/timeline", "performed_via_github_app": null, "state_reason": null}