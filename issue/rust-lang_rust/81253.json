{"url": "https://api.github.com/repos/rust-lang/rust/issues/81253", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81253/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81253/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81253/events", "html_url": "https://github.com/rust-lang/rust/issues/81253", "id": 791568066, "node_id": "MDU6SXNzdWU3OTE1NjgwNjY=", "number": 81253, "title": "Array bound tests with for loop that get removed with while loops", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-01-21T23:31:17Z", "updated_at": "2021-01-29T02:53:49Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I think there's something wrong with Rust loops, they could lose some range information. So even if a for loop should be slightly simpler to analize compared to a while loop, the foo2 has no array bound tests, unlike foo1 (if N becomes 10 both get compiled to about the same asm without array bound tests):\r\n\r\n```rust\r\npub fn foo1() -> u32 {\r\n    const N: usize = 20;\r\n    let mut data = [[0; N + 2]; N + 2];\r\n    for x in 0 .. N + 2 {\r\n        for y in 0 .. N + 2 {\r\n            if x == 1 || x == N || y == 1 || y == N {\r\n                data[x][y] = 1;\r\n            }\r\n        }\r\n    }\r\n    data[0][0]\r\n}\r\n\r\npub fn foo2() -> u32 {\r\n    const N: usize = 20;\r\n    let mut data = [[0; N + 2]; N + 2];\r\n    let mut x = 0;\r\n    while x < N + 2 {\r\n        let mut y = 0;\r\n        while y < N + 2 {\r\n            if x == 1 || x == N || y == 1 || y == N {\r\n                data[x][y] = 1;\r\n            }\r\n            y += 1;\r\n        }\r\n        x += 1;\r\n    }\r\n    data[0][0]\r\n}\r\n```\r\n\r\nrustc (V.1.51.0-nightly a4cbb44ae 2021-01-20) gives:\r\n\r\n```asm\r\nfoo1:\r\n    push    rbx\r\n    sub     rsp, 1936\r\n    mov     rdi, rsp\r\n    xor     ebx, ebx\r\n    mov     edx, 1936\r\n    xor     esi, esi\r\n    call    qword ptr [rip + memset@GOTPCREL]\r\n    mov     al, 1\r\n    vbroadcastss    ymm0, dword ptr [rip + .LCPI0_0]\r\n    xor     edi, edi\r\n    jmp     .LBB0_1\r\n.LBB0_9:\r\n    vmovups ymmword ptr [rsp + rbx + 88], ymm0\r\n    vmovups ymmword ptr [rsp + rbx + 120], ymm0\r\n    vmovups xmmword ptr [rsp + rbx + 152], xmm0\r\n    mov     ecx, 21\r\n    mov     edx, 20\r\n.LBB0_10:\r\n    add     rdi, 2\r\n    lea     rdx, [rsp + 4*rdx]\r\n    mov     dword ptr [rbx + rdx + 88], 1\r\n    lea     rcx, [rsp + 4*rcx]\r\n    mov     dword ptr [rbx + rcx + 88], 1\r\n    cmp     rax, 21\r\n    setb    al\r\n    add     rbx, 176\r\n    cmp     rbx, 1936\r\n    je      .LBB0_11\r\n.LBB0_1:\r\n    cmp     rbx, 1760\r\n    jne     .LBB0_6\r\n    test    al, 1\r\n    je      .LBB0_8\r\n    vmovups ymmword ptr [rsp + rbx], ymm0\r\n    vmovups ymmword ptr [rsp + rbx + 32], ymm0\r\n    vmovups xmmword ptr [rsp + rbx + 64], xmm0\r\n    mov     ecx, 21\r\n    mov     edx, 20\r\n    jmp     .LBB0_4\r\n.LBB0_6:\r\n    test    al, 1\r\n    je      .LBB0_8\r\n    mov     ecx, 20\r\n    mov     edx, 1\r\n.LBB0_4:\r\n    lea     rax, [rdi + 1]\r\n    lea     rdx, [rsp + 4*rdx]\r\n    mov     dword ptr [rbx + rdx], 1\r\n    lea     rcx, [rsp + 4*rcx]\r\n    mov     dword ptr [rbx + rcx], 1\r\n    test    rbx, rbx\r\n    je      .LBB0_9\r\n    mov     ecx, 20\r\n    mov     edx, 1\r\n    jmp     .LBB0_10\r\n.LBB0_11:\r\n    mov     eax, dword ptr [rsp]\r\n    add     rsp, 1936\r\n    pop     rbx\r\n    vzeroupper\r\n    ret\r\n.LBB0_8:\r\n    lea     rdx, [rip + .L__unnamed_1]\r\n    mov     esi, 22\r\n    vzeroupper\r\n    call    qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\r\n    ud2\r\n\r\n\r\nfoo2:\r\n    push    rbx\r\n    sub     rsp, 1936\r\n    mov     rdi, rsp\r\n    xor     ebx, ebx\r\n    mov     edx, 1936\r\n    xor     esi, esi\r\n    call    qword ptr [rip + memset@GOTPCREL]\r\n    vbroadcastss    ymm0, dword ptr [rip + .LCPI1_0]\r\n    jmp     .LBB1_1\r\n.LBB1_3:\r\n    lea     rsi, [rsp + 4*rsi]\r\n    mov     dword ptr [rbx + rsi], 1\r\n    lea     rdx, [rsp + 4*rdx]\r\n    mov     dword ptr [rbx + rdx], 1\r\n    test    rbx, rbx\r\n    je      .LBB1_4\r\n.LBB1_5:\r\n    lea     rcx, [rsp + 4*rcx]\r\n    mov     dword ptr [rbx + rcx + 88], 1\r\n    lea     rax, [rsp + 4*rax]\r\n    mov     dword ptr [rbx + rax + 88], 1\r\n    add     rbx, 176\r\n    cmp     rbx, 1936\r\n    je      .LBB1_6\r\n.LBB1_1:\r\n    mov     eax, 20\r\n    mov     ecx, 1\r\n    mov     esi, 1\r\n    mov     edx, 20\r\n    cmp     rbx, 1760\r\n    jne     .LBB1_3\r\n    vmovups ymmword ptr [rsp + rbx], ymm0\r\n    vmovups ymmword ptr [rsp + rbx + 32], ymm0\r\n    vmovups xmmword ptr [rsp + rbx + 64], xmm0\r\n    mov     edx, 21\r\n    mov     esi, 20\r\n    jmp     .LBB1_3\r\n.LBB1_4:\r\n    vmovups ymmword ptr [rsp + rbx + 88], ymm0\r\n    vmovups ymmword ptr [rsp + rbx + 120], ymm0\r\n    vmovups xmmword ptr [rsp + rbx + 152], xmm0\r\n    mov     eax, 21\r\n    mov     ecx, 20\r\n    jmp     .LBB1_5\r\n.LBB1_6:\r\n    mov     eax, dword ptr [rsp]\r\n    add     rsp, 1936\r\n    pop     rbx\r\n    vzeroupper\r\n    ret\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81253/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81253/timeline", "performed_via_github_app": null, "state_reason": null}