{"url": "https://api.github.com/repos/rust-lang/rust/issues/58868", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58868/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58868/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58868/events", "html_url": "https://github.com/rust-lang/rust/issues/58868", "id": 416379542, "node_id": "MDU6SXNzdWU0MTYzNzk1NDI=", "number": 58868, "title": "Unclear unsoundness warning when reborrowing data using late-bound lifetimes across multiple trait definitions", "user": {"login": "darkwisebear", "id": 3289071, "node_id": "MDQ6VXNlcjMyODkwNzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3289071?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darkwisebear", "html_url": "https://github.com/darkwisebear", "followers_url": "https://api.github.com/users/darkwisebear/followers", "following_url": "https://api.github.com/users/darkwisebear/following{/other_user}", "gists_url": "https://api.github.com/users/darkwisebear/gists{/gist_id}", "starred_url": "https://api.github.com/users/darkwisebear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darkwisebear/subscriptions", "organizations_url": "https://api.github.com/users/darkwisebear/orgs", "repos_url": "https://api.github.com/users/darkwisebear/repos", "events_url": "https://api.github.com/users/darkwisebear/events{/privacy}", "received_events_url": "https://api.github.com/users/darkwisebear/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 43009118, "node_id": "MDU6TGFiZWw0MzAwOTExOA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-destructors", "name": "A-destructors", "color": "f7e101", "default": false, "description": "Area: destructors (Drop, ..)"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-02T09:39:21Z", "updated_at": "2023-04-05T17:31:40Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This is a cross post from the [users forum](https://users.rust-lang.org/t/unclear-borrow-checker-warning-about-unsound-late-bound-lifetimes/25688) where I was redirected to here:\r\n\r\nWhile working on a project I hit a brick wall when designing a more complicated way to reborrow an object so that a different interface is exposed. This is the definition of the types used (stripped down):\r\n```rust\r\ntrait WorkspaceLog {\r\n    fn get(&self) -> usize;\r\n}\r\n\r\nstruct TheLog<'a>(&'a FSWorkspaceController<'a>);\r\n\r\nimpl<'a> WorkspaceLog for TheLog<'a> {\r\n    fn get(&self) -> usize {\r\n        ((self.0).0).0\r\n    }\r\n}\r\n\r\ntrait WorkspaceController<'a> {\r\n    type Log: WorkspaceLog+'a;\r\n\r\n    fn get_log(&'a self) -> Self::Log;\r\n    fn set_log(&mut self, x: usize);\r\n}\r\n\r\nstruct FilesystemOverlay(usize);\r\n\r\nstruct FSWorkspaceController<'a>(&'a mut FilesystemOverlay);\r\n\r\nimpl<'a, 'b> WorkspaceController<'b> for FSWorkspaceController<'a> {\r\n    type Log = TheLog<'b>;\r\n\r\n    fn get_log(&'b self) -> Self::Log {\r\n        TheLog(&*self)\r\n    }\r\n    \r\n    fn set_log(&mut self, x: usize) {\r\n        (self.0).0 = x;\r\n    }\r\n}\r\n\r\ntrait AsWorkspaceController<'a, 'b> {\r\n    type Controller: WorkspaceController<'b>+'a;\r\n\r\n    fn get_controller(&'a mut self) -> Self::Controller;\r\n}\r\n\r\nimpl<'a, 'b> AsWorkspaceController<'a, 'b> for FilesystemOverlay {\r\n    type Controller = FSWorkspaceController<'a>;\r\n\r\n    fn get_controller(&'a mut self) -> FSWorkspaceController<'a> {\r\n        FSWorkspaceController(self)\r\n    }\r\n}\r\n```\r\nNow, if I directly use the type FilesystemOverlay everything is just fine:\r\n```rust\r\nfn init1(control_dir: &mut FilesystemOverlay) -> usize {\r\n    let controller = control_dir.get_controller();\r\n    let log = controller.get_log();\r\n    log.get()\r\n}\r\n```\r\nHowever, if I try to generalize control_dir, I get a problem:\r\n```rust\r\nfn init2<O>(control_dir: &mut O) -> usize\r\n    where for<'a, 'b> O: AsWorkspaceController<'a, 'b> {\r\n    let controller = control_dir.get_controller();\r\n    let log = controller.get_log();\r\n    log.get()\r\n}\r\n```\r\nAlthough this compiles, there is a warning which might eventually be turned into an error:\r\n```none\r\nwarning[E0597]: `controller` does not live long enough\r\n  --> src/main.rs:59:15\r\n   |\r\n59 |     let log = controller.get_log();\r\n   |               ^^^^^^^^^^ borrowed value does not live long enough\r\n60 |     log.get()\r\n61 | }\r\n   | -\r\n   | |\r\n   | `controller` dropped here while still borrowed\r\n   | borrow might be used here, when `controller` is dropped and runs the destructor for type `<O as AsWorkspaceController<'_, '_>>::Controller`\r\n   |\r\n   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\r\n           It represents potential unsoundness in your code.\r\n           This warning will become a hard error in the future.\r\n```\r\nIt is unclear to me why the compiler thinks that controller is still borrowed and the warning doesn't carry any information which object controller is borrowed to. In addition I wonder why the compiler thinks it's unsound: As `log` was constructed after `controller` and may be dropped before since the lifetime of `log` is late-bound, and the compiler is free to choose a shorter lifetime.\r\n\r\n[This](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=deb828422637e1f9cbca4fa573425ef0) is the full code on the playground.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58868/timeline", "performed_via_github_app": null, "state_reason": null}