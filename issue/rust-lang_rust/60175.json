{"url": "https://api.github.com/repos/rust-lang/rust/issues/60175", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60175/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60175/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60175/events", "html_url": "https://github.com/rust-lang/rust/issues/60175", "id": 435809607, "node_id": "MDU6SXNzdWU0MzU4MDk2MDc=", "number": 60175, "title": "generator: capture by reference instead of moving", "user": {"login": "leinlawun", "id": 19807978, "node_id": "MDQ6VXNlcjE5ODA3OTc4", "avatar_url": "https://avatars.githubusercontent.com/u/19807978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leinlawun", "html_url": "https://github.com/leinlawun", "followers_url": "https://api.github.com/users/leinlawun/followers", "following_url": "https://api.github.com/users/leinlawun/following{/other_user}", "gists_url": "https://api.github.com/users/leinlawun/gists{/gist_id}", "starred_url": "https://api.github.com/users/leinlawun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leinlawun/subscriptions", "organizations_url": "https://api.github.com/users/leinlawun/orgs", "repos_url": "https://api.github.com/users/leinlawun/repos", "events_url": "https://api.github.com/users/leinlawun/events{/privacy}", "received_events_url": "https://api.github.com/users/leinlawun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679846574, "node_id": "MDU6TGFiZWw2Nzk4NDY1NzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-generators", "name": "A-generators", "color": "f7e101", "default": false, "description": "Area: Generators"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-22T17:28:10Z", "updated_at": "2020-03-04T21:00:33Z", "closed_at": "2020-03-04T21:00:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "```rust\r\n#![feature(\r\n    futures_api,\r\n    async_await,\r\n    await_macro,\r\n    generators,\r\n    generator_trait,\r\n    gen_future\r\n)]\r\n\r\nuse std::{\r\n    future::{from_generator, poll_with_tls_context},\r\n    ops::Generator,\r\n    panic::AssertUnwindSafe,\r\n    pin::Pin,\r\n    task::Poll,\r\n};\r\n\r\nuse futures::{\r\n    channel::mpsc, executor::block_on, future::FutureExt, sink::SinkExt, stream::StreamExt,\r\n};\r\n\r\nfn print_future(\r\n    mut rx: AssertUnwindSafe<mpsc::UnboundedReceiver<&'static str>>,\r\n) -> impl Generator<Yield = (), Return = ()> {\r\n    move || {\r\n        let mut future = rx.next();\r\n\r\n        let maybe_message = loop {\r\n            if let Poll::Ready(value) =\r\n                poll_with_tls_context(unsafe { Pin::new_unchecked(&mut future) })\r\n            {\r\n                break value;\r\n            }\r\n\r\n            yield\r\n        };\r\n\r\n        if let Some(message) = maybe_message {\r\n            println!(\"{}\", message);\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let (mut tx, rx) = mpsc::unbounded();\r\n    let future = from_generator(print_future(AssertUnwindSafe(rx)));\r\n\r\n    block_on(async {\r\n        await!(tx.send(\"Hello, World!\")).unwrap();\r\n\r\n        let maybe_err = await!(future.catch_unwind()).err();\r\n\r\n        if let Some(err) = maybe_err {\r\n            println!(\"{:?}\", err);\r\n        }\r\n    });\r\n}\r\n```\r\nWhy rx a reference, although this is not explicitly indicated anywhere, and the generator is declared with the keyword move?\r\n```\r\nerror[E0277]: the type `&mut std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&str>>` may not be safely transferred across an unwind boundary\r\n  --> src/main.rs:51:39\r\n   |\r\n51 |         let maybe_err = await!(future.catch_unwind()).err();\r\n   |                                       ^^^^^^^^^^^^ `&mut std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&str>>` may not be safely transferred across an unwind boundary\r\n   |\r\n   = help: within `impl core::future::future::Future`, the trait `std::panic::UnwindSafe` is not implemented for `&mut std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&str>>`\r\n   = note: required because it appears within the type `futures_util::stream::next::Next<'_, std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&str>>>`\r\n   = note: required because it appears within the type `for<'r, 's> {futures_util::stream::next::Next<'r, std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&'s str>>>, ()}`\r\n   = note: required because it appears within the type `[generator@src/main.rs:25:5: 41:6 rx:std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&'static str>> for<'r, 's> {futures_util::stream::next::Next<'r, std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&'s str>>>, ()}]`\r\n   = note: required because it appears within the type `impl std::ops::Generator`\r\n   = note: required because it appears within the type `std::future::GenFuture<impl std::ops::Generator>`\r\n   = note: required because it appears within the type `impl core::future::future::Future`\r\n\r\nerror[E0277]: the type `&mut std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&str>>` may not be safely transferred across an unwind boundary\r\n  --> src/main.rs:51:25\r\n   |\r\n51 |         let maybe_err = await!(future.catch_unwind()).err();\r\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&mut std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&str>>` may not be safely transferred across an unwind boundary\r\n   |\r\n   = help: within `impl core::future::future::Future`, the trait `std::panic::UnwindSafe` is not implemented for `&mut std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&str>>`\r\n   = note: required because it appears within the type `futures_util::stream::next::Next<'_, std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&str>>>`\r\n   = note: required because it appears within the type `for<'r, 's> {futures_util::stream::next::Next<'r, std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&'s str>>>, ()}`\r\n   = note: required because it appears within the type `[generator@src/main.rs:25:5: 41:6 rx:std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&'static str>> for<'r, 's> {futures_util::stream::next::Next<'r, std::panic::AssertUnwindSafe<futures_channel::mpsc::UnboundedReceiver<&'s str>>>, ()}]`\r\n   = note: required because it appears within the type `impl std::ops::Generator`\r\n   = note: required because it appears within the type `std::future::GenFuture<impl std::ops::Generator>`\r\n   = note: required because it appears within the type `impl core::future::future::Future`\r\n   = note: required because of the requirements on the impl of `core::future::future::Future` for `futures_util::future::catch_unwind::CatchUnwind<impl core::future::future::Future>`\r\n   = note: required by `std::future::poll_with_tls_context`\r\n= note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\r\n```", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60175/timeline", "performed_via_github_app": null, "state_reason": "completed"}