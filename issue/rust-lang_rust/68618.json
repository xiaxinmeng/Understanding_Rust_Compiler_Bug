{"url": "https://api.github.com/repos/rust-lang/rust/issues/68618", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68618/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68618/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68618/events", "html_url": "https://github.com/rust-lang/rust/issues/68618", "id": 556490438, "node_id": "MDU6SXNzdWU1NTY0OTA0Mzg=", "number": 68618, "title": "Allow `#[attr] if` to be passed to proc macros", "user": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36956, "node_id": "MDU6TGFiZWwzNjk1Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-frontend", "name": "A-frontend", "color": "f7e101", "default": false, "description": "Area: frontend (errors, parsing and HIR)"}, {"id": 234948, "node_id": "MDU6TGFiZWwyMzQ5NDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-attributes", "name": "A-attributes", "color": "f7e101", "default": false, "description": "Area: #[attributes(..)]"}, {"id": 27424086, "node_id": "MDU6TGFiZWwyNzQyNDA4Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-parser", "name": "A-parser", "color": "f7e101", "default": false, "description": "Area: The parsing of Rust source code to an AST."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-28T21:49:07Z", "updated_at": "2020-03-09T15:16:44Z", "closed_at": "2020-03-09T15:16:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The following code:\r\n\r\n```rust\r\nfn main() {\r\n    #[attr] if let Some(_) = Ok(true) {}\r\n}\r\n```\r\n\r\nproduces this error:\r\n\r\n```\r\nerror: attributes are not yet allowed on `if` expressions\r\n --> src/main.rs:2:5\r\n  |\r\n2 |     #[attr] if let Some(_) = Ok(true) {}\r\n  |     ^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nProc macros like [`pin-project`](https://github.com/taiki-e/pin-project) currently use a trick to work around attributes on expressions being unstable: The entire function is annotated with a 'wrapper' attribute, which goes through and manually parses expression attributes. For example:\r\n\r\n```rust\r\n#[my_attr]\r\nfn foo() {\r\n    #[my_attr] let a = 25;\r\n}\r\n```\r\n\r\nIn the example above, the `#[my_attr] let a = 25;` will be processed by the outer `#[my_attr] fn foo()` implementation, which will strip away the expression-based `#[my_attr]` before emitting the final `TokenStream`.\r\n\r\nUnfortunately, the current 'attributes are not yet allowed on `if` expressions' check is done during parsing:\r\n\r\nhttps://github.com/rust-lang/rust/blob/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/src/librustc_parse/parser/expr.rs#L679\r\n\r\nWhile the proc-macro itself can parse the attribute on the `if let` without any errors, compilation will still fail due to the parsing error that was emitted *before* any proc-macros were run.\r\n\r\nIt would be extremely useful if this check were to be moved until **after** parsing, so that proc macros had a chance to remove attributes from `if` expressions.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68618/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68618/timeline", "performed_via_github_app": null, "state_reason": "completed"}