{"url": "https://api.github.com/repos/rust-lang/rust/issues/33707", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/33707/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/33707/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/33707/events", "html_url": "https://github.com/rust-lang/rust/issues/33707", "id": 155425637, "node_id": "MDU6SXNzdWUxNTU0MjU2Mzc=", "number": 33707, "title": "Race condition in `std::fs::create_dir_all`.", "user": {"login": "dpc", "id": 9209, "node_id": "MDQ6VXNlcjkyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/9209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpc", "html_url": "https://github.com/dpc", "followers_url": "https://api.github.com/users/dpc/followers", "following_url": "https://api.github.com/users/dpc/following{/other_user}", "gists_url": "https://api.github.com/users/dpc/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpc/subscriptions", "organizations_url": "https://api.github.com/users/dpc/orgs", "repos_url": "https://api.github.com/users/dpc/repos", "events_url": "https://api.github.com/users/dpc/events{/privacy}", "received_events_url": "https://api.github.com/users/dpc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-05-18T06:28:39Z", "updated_at": "2017-05-17T06:20:07Z", "closed_at": "2017-05-17T06:20:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I just got bitten by this, took me a long time to find it and I see the issue was raised before in #30152\n\nIt's very non-obvious that `std::fs::create_dir_all` - which whole purpose of is to make sure the dir exists, can fail due to the fact that the dir was created concurrently.\n\nThe PR to fix it #30152 was rejected due to \"Concurrent operations can't always be detected and when they do happen on the filesystem it often indicates that something else is going awry and needs to be kicked up further.\"\n\nBut please note that `std::fs::create_dir_all` is a convenience function, and not one directly mapping to a posix fs operation. If `stdlib` provides a convenience function, I think it should provide the sanest, and most robust one - not one with a big gotcha inside. The fact that there's a race condition between multiple calls to `std::fs::create_dir_all` is entirely a implementation choice and just a wrong behavior.\n\nIMO any sane implementation should consider not takign care of this race condition a bug:\n- http://opensource.apple.com/source/file_cmds/file_cmds-212/mkdir/mkdir.c\n- http://stackoverflow.com/questions/675039/how-can-i-create-directory-tree-in-c-linux#comment15173179_675193\n\nI've checked some other standard libraries and all are doing the right thing:\n- Python: https://github.com/python/cpython/blob/c6ae2fcc724cbebb14e7c434b89eabdd64802cb3/Lib/os.py#L233\n- Java: http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/io/File.java#1209\n- Boost: http://www.boost.org/doc/libs/1_39_0/boost/filesystem/convenience.hpp - _argument that boost had this race condition, was used to close #30152 but it's not true_ - please see:\n\n```\n    BOOST_FS_FUNC(bool) create_directories(const Path& ph)\n    {\n         if (ph.empty() || exists(ph))\n         {\n           if ( !ph.empty() && !is_directory(ph) )\n               boost::throw_exception( basic_filesystem_error<Path>(\n                 \"boost::filesystem::create_directories\", ph,\n                 make_error_code( boost::system::posix::file_exists ) ) );\n           return false;\n         }\n\n         // First create branch, by calling ourself recursively\n         create_directories(ph.parent_path());\n         // Now that parent's path exists, create the directory\n         create_directory(ph);\n         return true;\n     }\n```\n\nNote that return value of `create_directories(ph.parent_path());` is ignored, not returned upwards, like in Rust implementation. And exception is thrown only if `ph` exists but is not a directory.\n\nThink how many other Rust projects might have undetected race condition as they assumed the `create_dir_all` will do the right thing. Short googling already pointed other project that got bitten: https://github.com/droundy/bigbro/blob/464bfae81de4ad695a158315e3c75d6d21e382a2/src/lib.rs#L43\n", "closed_by": {"login": "dpc", "id": 9209, "node_id": "MDQ6VXNlcjkyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/9209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpc", "html_url": "https://github.com/dpc", "followers_url": "https://api.github.com/users/dpc/followers", "following_url": "https://api.github.com/users/dpc/following{/other_user}", "gists_url": "https://api.github.com/users/dpc/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpc/subscriptions", "organizations_url": "https://api.github.com/users/dpc/orgs", "repos_url": "https://api.github.com/users/dpc/repos", "events_url": "https://api.github.com/users/dpc/events{/privacy}", "received_events_url": "https://api.github.com/users/dpc/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/33707/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/33707/timeline", "performed_via_github_app": null, "state_reason": "completed"}