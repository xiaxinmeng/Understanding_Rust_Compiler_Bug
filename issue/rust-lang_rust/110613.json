{"url": "https://api.github.com/repos/rust-lang/rust/issues/110613", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110613/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110613/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110613/events", "html_url": "https://github.com/rust-lang/rust/issues/110613", "id": 1677024478, "node_id": "I_kwDOAAsO6M5j9Vze", "number": 110613, "title": "Forbidding lints doesn't really work in macros", "user": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-04-20T16:10:14Z", "updated_at": "2023-04-20T19:09:48Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "## Story-driven explanation\r\n\r\nI was writing a macro that implements ADT <=> int conversions:\r\n\r\n<details>\r\n<summary>TW: macros</summary>\r\n\r\n```rust\r\ntrait Convert {\r\n    fn into_u32(self) -> u32;\r\n\r\n    fn from_u32(v: u32) -> Self;\r\n}\r\n\r\nmacro_rules! impl_convert {\r\n    (\r\n        for $Self:ty;\r\n\r\n        // This basically matches `Type::Variant { fields... } <=> 0,`\r\n        $( $($path:ident)::* $( { $( $fields:tt )* })? <=> $int:literal, )*\r\n    ) => {\r\n        impl $crate::Convert for $Self {\r\n            fn into_u32(self) -> u32 {\r\n                #[forbid(unreachable_patterns)]\r\n                match self {\r\n                    $( $($path)::* $( { $( $fields )* } )? => $int, )*\r\n                }\r\n            }\r\n\r\n            fn from_u32(v: u32) -> Self {\r\n                #[forbid(unreachable_patterns)]\r\n                match v {\r\n                    $( $int => $($path)::* $( { $( $fields )* } )?, )*\r\n                    _ => panic!(\"invalid value: {v:?}\"),\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\n```\r\n\r\n</details>\r\n\r\nUsed like this:\r\n\r\n```rust\r\nenum Type {\r\n    A,\r\n    B { v: bool },\r\n}\r\n\r\nimpl_convert! {\r\n    for Type;\r\n    Type::A <=> 0,\r\n    Type::B { v: false } <=> 1,\r\n    Type::B { v: true  } <=> 2,\r\n}\r\n```\r\n\r\nI tested it, it worked perfectly. `#[forbid(unreachable_patterns)]` even ensures that the mapping is 1 to 1 (duplicate patterns would make the lint go off).\r\n\r\nHowever, when I've made a `compile_fail` doc test to ensure that duplicate patterns are always rejected, it failed (meaning the compilation passed). At first I though that the problem is in rustdoc, but latter testing showed that this is actually the rustc's behavior: if a lint is forbidden inside a macro and is issued inside the macro, then it is not shown and does not abort compilation in case of `#[forbid]`.\r\n\r\nThis is a shame! I would expect `#[forbid(unreachable_patterns)]` actually work and catch wrong macro uses. This behavior seems hard to anticipate, in other words \"footgun-y\". This is especially annoying given that the calls in the same crate, where you are most likely to test your macros, **do** produce lints.\r\n\r\n## More precise explanation\r\n\r\nGiven these two crates:\r\n\r\n```rust\r\n// crate `a`\r\n\r\n#[macro_export]\r\nmacro_rules! example {\r\n    () => {\r\n        #[forbid(unused_variables)]\r\n        const _: () = { let a = 0; };\r\n    }\r\n}\r\n\r\nexample! {} // <-- invocation in `a`\r\n```\r\n```rust\r\n// crate `b`\r\n\r\na::example! {} // <-- invocation in `b`\r\n```\r\n([play](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=7fe6fe1589419cf56c01675b5e5167c9))\r\n\r\nInvocation in `a` fails the compilation because of the `forbid`. However, if you comment it out, the invocation in `b` compiles successfully, the lint and `forbid` are ignored. This is inconsistent, hard to test and error prone (especially if the lint is actually caused by the user input, as in my example in the story above).\r\n\r\n## Proposal?\r\n\r\nI'd like to \"fix\" this, however, it's not clear what exact rules here should be, how much of a breaking change this is, etc. I'm opening this issue to hear the feedback.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110613/timeline", "performed_via_github_app": null, "state_reason": null}