{"url": "https://api.github.com/repos/rust-lang/rust/issues/100097", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100097/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100097/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100097/events", "html_url": "https://github.com/rust-lang/rust/issues/100097", "id": 1326696600, "node_id": "I_kwDOAAsO6M5PE8iY", "number": 100097, "title": "Non exhaustive match error presents incompletely with tuples and .unwrap()", "user": {"login": "Jeremiah-Griffin", "id": 96573748, "node_id": "U_kgDOBcGZNA", "avatar_url": "https://avatars.githubusercontent.com/u/96573748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jeremiah-Griffin", "html_url": "https://github.com/Jeremiah-Griffin", "followers_url": "https://api.github.com/users/Jeremiah-Griffin/followers", "following_url": "https://api.github.com/users/Jeremiah-Griffin/following{/other_user}", "gists_url": "https://api.github.com/users/Jeremiah-Griffin/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jeremiah-Griffin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jeremiah-Griffin/subscriptions", "organizations_url": "https://api.github.com/users/Jeremiah-Griffin/orgs", "repos_url": "https://api.github.com/users/Jeremiah-Griffin/repos", "events_url": "https://api.github.com/users/Jeremiah-Griffin/events{/privacy}", "received_events_url": "https://api.github.com/users/Jeremiah-Griffin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-08-03T05:26:13Z", "updated_at": "2023-04-05T17:28:40Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "When matching against a tuple, if one of the values is an `Option<char>`, unwrapping it in the match statement itself provides a garbled error message from the compiler. \r\n\r\n\r\nprevious_chr is of type `Option<char>`\r\ncurrent_chr if of type `char`\r\n\r\n\r\n```\r\nmatch ( (previous_chr.unwrap(), current_chr) ){\r\n    ('\\\\', '\"') => {\r\n        self.is_within_literal = true; \r\n        self.previous_chr = Some(current_chr)\r\n    }\r\n} \r\n```\r\n\r\nI would expect a typical error message stating that the None case for the optional value is not covered. Instead, this message is returned by the compiler:\r\n```\r\n   --> src\\interpreter\\helpers\\mod.rs:147:23\r\n    |\r\n147 |                 match ((self.previous_chr.unwrap(),current_chr)){\r\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ patterns `('\\0'..='[', _)`, `(']'..='\\u{d\r\n7ff}', _)` and `('\\u{e000}'..='\\u{10ffff}', _)` not covered\r\n    |\r\n    = note: the matched value is of type `(char, char)`\r\nhelp: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match ar\r\nm with multiple or-patterns as shown, or multiple match arms\r\n152 +                     ('\\0'..='[', _) | (']'..='\\u{d7ff}', _) | ('\\u{e000}'..='\\u{10ffff}', _) => todo!()   \r\n    |\r\n\r\n```\r\n\r\nChanging the code to the following...\r\n```\r\nmatch ( (previous_chr, current_chr) ){\r\n    (Some('\\\\'), '\"') => {\r\n        self.is_within_literal = true; \r\n        self.previous_chr = Some(current_chr)\r\n    }\r\n} \r\n```\r\n\r\n...produces the expected message:\r\n\r\n```\r\n   --> src\\interpreter\\helpers\\mod.rs:147:23\r\n    |\r\n147 |                 match ((self.previous_chr,current_chr)){\r\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `(None, _)` not covered\r\n    |\r\n    = note: the matched value is of type `(std::option::Option<char>, char)`\r\nhelp: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an expli\r\ncit pattern as shown\r\n    |\r\n151 ~                     }\r\n152 +                     (None, _) => todo!()\r\n    |\r\n```\r\nrust version:\r\n\r\nrustc 1.64.0-nightly (4493a0f47 2022-08-02)\r\nbinary: rustc\r\ncommit-hash: 4493a0f4724c0bae1436242d76cccc9c0a287b80\r\ncommit-date: 2022-08-02\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.64.0-nightly\r\nLLVM version: 14.0.6\r\n\r\n\r\nThere is no panic and no backtrace is emitted.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100097/timeline", "performed_via_github_app": null, "state_reason": null}