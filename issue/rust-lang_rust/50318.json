{"url": "https://api.github.com/repos/rust-lang/rust/issues/50318", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50318/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50318/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50318/events", "html_url": "https://github.com/rust-lang/rust/issues/50318", "id": 318738884, "node_id": "MDU6SXNzdWUzMTg3Mzg4ODQ=", "number": 50318, "title": "Specialization: assigning associated type in default trait implementation leads typecheck to fail with weird error", "user": {"login": "PaulGrandperrin", "id": 1748936, "node_id": "MDQ6VXNlcjE3NDg5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1748936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PaulGrandperrin", "html_url": "https://github.com/PaulGrandperrin", "followers_url": "https://api.github.com/users/PaulGrandperrin/followers", "following_url": "https://api.github.com/users/PaulGrandperrin/following{/other_user}", "gists_url": "https://api.github.com/users/PaulGrandperrin/gists{/gist_id}", "starred_url": "https://api.github.com/users/PaulGrandperrin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PaulGrandperrin/subscriptions", "organizations_url": "https://api.github.com/users/PaulGrandperrin/orgs", "repos_url": "https://api.github.com/users/PaulGrandperrin/repos", "events_url": "https://api.github.com/users/PaulGrandperrin/events{/privacy}", "received_events_url": "https://api.github.com/users/PaulGrandperrin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1472579062, "node_id": "MDU6TGFiZWwxNDcyNTc5MDYy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-specialization", "name": "F-specialization", "color": "f9c0cc", "default": false, "description": "`#![feature(specialization)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-29T18:35:08Z", "updated_at": "2023-03-21T01:26:24Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I have a trait `NodeTrait` that I implemented for `Node` with a default implementation and a specialized one.\r\nThe trait has an associated type `Item`.\r\nIf I assign the type of `Item` in the specialized implementation, everything works.\r\nIf I specify it in the default implementation, I get a weird type check error.\r\n\r\n\r\nhere is the code ([playground](https://play.rust-lang.org/?gist=e2e5a88851eeb52b576d7113a586d906&version=nightly&mode=debug))\r\n```rust\r\n#![feature(specialization)]\r\nuse std::marker::PhantomData;\r\n\r\nstruct Node<T>(PhantomData<T>);\r\nstruct Foo;\r\n\r\ntrait NodeTrait {\r\n    type Item;\r\n    fn foo(&self, a: Self::Item);\r\n    fn bar();\r\n}\r\n\r\ndefault impl<T> NodeTrait for Node<T> {\r\n    type Item = u32; // if you comment this one\r\n\r\n    default fn foo(&self, a: Self::Item) {\r\n    }\r\n}\r\n\r\nimpl NodeTrait for Node<Foo> {\r\n    //type Item = u32; // and uncomment this one, it works\r\n    fn bar(){}\r\n}\r\n\r\nfn main() {\r\n    let a = Node::<Foo>(PhantomData);\r\n    a.foo(0u32);\r\n}\r\n```\r\nand the error\r\n```\r\n27 |     a.foo(0u32);\r\n   |           ^^^^ expected associated type, found u32\r\n   |\r\n   = note: expected type `<Node<Foo> as NodeTrait>::Item`\r\n              found type `u32`\r\n```\r\n\r\nFYI, my understanding of specialization is still very light, it might be expected behavior and not a bug.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50318/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50318/timeline", "performed_via_github_app": null, "state_reason": null}