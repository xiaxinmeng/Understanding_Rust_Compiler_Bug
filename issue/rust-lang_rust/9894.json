{"url": "https://api.github.com/repos/rust-lang/rust/issues/9894", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/9894/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/9894/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/9894/events", "html_url": "https://github.com/rust-lang/rust/issues/9894", "id": 21111010, "node_id": "MDU6SXNzdWUyMTExMTAxMA==", "number": 9894, "title": "RFC: Proposal for macro invocation sugar.", "user": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235146, "node_id": "MDU6TGFiZWwyMzUxNDY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-syntaxext", "name": "A-syntaxext", "color": "f7e101", "default": false, "description": "Area: Syntax extensions"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2013-10-16T21:13:38Z", "updated_at": "2014-04-16T21:02:43Z", "closed_at": "2014-04-16T21:02:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "# Current situation\n\nRight now, rust knows about two kinds of macro invocation:\n\n```\nIDENT!(...)\nIDENT! IDENT (...)\n```\n\nThe latter one is just used by `macro_rules!` right now, and seems kinda out of place because of that.\n\nAdditionally, just being restricted to `IDENT!(...)` means that, while you can define macros just fine, the resulting invocation syntax often looks a bit weird because of the need for the outer `()` pair.\n\nFor example, if you want to write some kind of custom `match` macro you ideally want a syntax like `macro! EXPR { CASES... }`, but in practice are forced to decide between redundant, deeply nested brackets or weird syntax if you want to reduce the brackets:\n\n```\nmy_match!(\n    foo().bar().baz() {\n        case 1 => ...\n        case 2 => ...\n        ...\n    }\n)\n\nmy_match!(foo().bar().baz() cases:\n    case 1 => ...\n    case 2 => ...\n    ...\n)\n```\n# Proposal\n\nWe can't just allow macros to accept different syntax like `IDENT! EXPR ( ... )`, because it would create ambiguity in the parser, but it occurred to me that we _can_ provide syntactic sugar for transforming 'nicer looking' variants into the regular `IDENT!(...)` syntax.\n\nBasically, I'm thinking of leveraging the bang in a macro invocation to annotate how many following bracket pairs to group into one regular macro invocation:\n\n```\nIDENT!! (...) (...)         => desugaring => IDENT!((...) (...))\nIDENT!!! (...) (...) (...)  => desugaring => IDENT!((...) (...) (...))\n... etc\n```\n\nThe number of bangs can become confusing fast, but I don't expect that macros with more than two bracket groups are going to be common. And because it would just be sugar, you could always write it as the regular form.\n# Advantages\n\nThere are a number of advantages I see with this proposal:\n1. The two macro invocation forms can be folded into one:\n   \n   ```\n   IDENT!(...)        => IDENT!(...)\n   IDENT! IDENT (...) => IDENT!! (IDENT) (...) => IDENT!((IDENT) (...))\n   ```\n2. Custom syntax can become nicer looking, especially for control structures.\n   Looking at the `my_match` example:\n\n```\nmy_match!! (foo().bar().baz()) {\n        case 1 => ...\n        case 2 => ...\n        ...\n}\n```\n\n... which looks more natural than any the two options outlined above.\n1. It's a pure syntactic sugar, which means it's easy to implement and reason about.\n   All `libsyntax` needs to do is to consume a list of bracket-counted token trees equal to the number of bangs, and introduce an artificial outer bracket pair if the number is higher than one.\n2. It's just invocation sugar, which means there is no difference between defining a macro that uses this vs one that doesn't - you just declare them all assuming the explicit outer `()` pair.\n# Potential issues\n\nThe possible issues I can see with this are confusing error messages if the number of bangs is wrong, and uncertainty about which brackets belong to a macro invocation and which are regular rust code if their contents become big and/or their number become high.\n\nHowever, in theory rust might be able to provide good error messages for the first one, because if the macro name is right you'd get an `No rules expected this ...` error, and there could be some heuristics for recognizing cases where the user has do add/remove bangs to match the macro definition.\n\nAnd the second one can likely be managed by syntax highlighting, and by the usual convention of not abusing the syntax to the point where it becomes illegible.\n# Backwards compatibility\n\nAdding this sugar would be backwards compatible because it doesn't change any existing macro syntax, however if `IDENT! IDENT (...)` ends up obsolete through this, that would break existing uses of `macro_rules!` - however macros are behind a feature flag anyway at this point, so it wouldn't matter as much.\n# Variations, extensions\n- Multiple bangs might read bad, so we could just make the variadic variants take a number literal:\n  \n  ```\n  IDENT!2 () {}\n  ```\n- We could accept any token tree, including single, non bracketed tokens, which would allow for custom keywords:\n  \n  ```\n  try!3 {\n  ...\n  } catch {\n  ...\n  }\n  ```\n- One could embedded what grammar fragments to expect:\n  \n  ```\n  foo!e EXPR { ... }\n  paa!p Some(_) { ... }\n  ```\n  \n  Alternatively, the `IDENT!e EXPR { BLOCK }` form could just be special cased invocation syntax for the common case, with all other being delegated to the explicit parenthesized form.\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/9894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/9894/timeline", "performed_via_github_app": null, "state_reason": "completed"}