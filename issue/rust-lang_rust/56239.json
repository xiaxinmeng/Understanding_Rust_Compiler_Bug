{"url": "https://api.github.com/repos/rust-lang/rust/issues/56239", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56239/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56239/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56239/events", "html_url": "https://github.com/rust-lang/rust/issues/56239", "id": 384368593, "node_id": "MDU6SXNzdWUzODQzNjg1OTM=", "number": 56239, "title": "Compiler panic running 'cargo doc' on 1.30.1", "user": {"login": "ebkalderon", "id": 322831, "node_id": "MDQ6VXNlcjMyMjgzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/322831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebkalderon", "html_url": "https://github.com/ebkalderon", "followers_url": "https://api.github.com/users/ebkalderon/followers", "following_url": "https://api.github.com/users/ebkalderon/following{/other_user}", "gists_url": "https://api.github.com/users/ebkalderon/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebkalderon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebkalderon/subscriptions", "organizations_url": "https://api.github.com/users/ebkalderon/orgs", "repos_url": "https://api.github.com/users/ebkalderon/repos", "events_url": "https://api.github.com/users/ebkalderon/events{/privacy}", "received_events_url": "https://api.github.com/users/ebkalderon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 1118598314, "node_id": "MDU6TGFiZWwxMTE4NTk4MzE0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-synthetic-impls", "name": "A-synthetic-impls", "color": "f7e101", "default": false, "description": "Area: Synthetic impls, used by rustdoc to document auto traits and traits with blanket impls"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-11-26T14:59:10Z", "updated_at": "2019-01-23T14:21:34Z", "closed_at": "2019-01-23T14:21:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Summary\r\n\r\nI was working on a very simple gRPC service using [tower-grpc](https://github.com/tower-rs/tower-grpc), and I ran into an internal compiler error when trying to run `cargo doc` on the crate. The ICE only seems to occur when I run `cargo doc`, and everything compiles fine when I use `cargo build`. The specific error message I see is:\r\n\r\n```\r\nthread '<unnamed>' panicked at 'Unable to fulfill trait DefId(2/0:819 ~ core[2449]::marker[0]::Send[0]) for 'foo::server::foo::ResponseBody<T>': [FulfillmentError(Obligation(predicate=Binder(TraitPredicate(<<T as foo::server::Foo>::HelloWorldStream as std::marker::Send>)),depth=6),Unimplemented)]', librustc/traits/auto_trait.rs:218:17\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n## Toolchain information\r\n\r\n* `rustc 1.30.1 (1433507eb 2018-11-07)`\r\n* `rustdoc 1.30.1 (1433507eb 2018-11-07)`\r\n* macOS Mojave 10.14.1 (`x86_64-apple-darwin`)\r\n\r\n## How to reproduce\r\n\r\nBelow is a simplified form of the generated code:\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\n\r\npub struct Mock<T> {\r\n    _marker: PhantomData<T>,\r\n}\r\n\r\npub type Encode<T> = Mock<T>;\r\npub type GrpcRequest<T> = Mock<T>;\r\npub type GrpcResponse<T> = Mock<T>;\r\npub enum Status {}\r\n\r\npub trait Service<R> {\r\n    type Response;\r\n    type Error;\r\n    type Future;\r\n}\r\n\r\npub trait ServerStreamingService<R> {\r\n    type Response;\r\n    type ResponseStream: Stream<Item = Self::Response, Error = ()>;\r\n}\r\n\r\nimpl<T, M, S> ServerStreamingService<M> for T\r\nwhere\r\n    T: Service<GrpcRequest<M>, Response = GrpcResponse<S>, Error = ()>,\r\n    S: Stream<Error = ()>,\r\n{\r\n    type Response = S::Item;\r\n    type ResponseStream = S;\r\n}\r\n\r\npub trait Future {\r\n    type Item;\r\n    type Error;\r\n}\r\n\r\npub trait Stream {\r\n    type Item;\r\n    type Error;\r\n}\r\n\r\n#[derive(Clone, PartialEq)]\r\npub struct Request;\r\n\r\n#[derive(Clone, PartialEq)]\r\npub struct Response;\r\n\r\npub trait Foo: Clone {\r\n    type HelloWorldStream: Stream<Item = Response, Error = ()>;\r\n    type HelloWorldFuture: Future<Item = GrpcResponse<Self::HelloWorldStream>, Error = ()>;\r\n}\r\n\r\npub mod foo {\r\n    use super::*;\r\n\r\n    pub struct ResponseBody<T>\r\n    where\r\n        T: Foo,\r\n    {\r\n        /// Commenting out this line causes `cargo doc` to work again.\r\n        pub(super) _kind: Result<\r\n            Kind<Encode<<methods::HelloWorld<T> as ServerStreamingService<Request>>::ResponseStream>>,\r\n            Status,\r\n        >,\r\n    }\r\n\r\n    #[allow(dead_code)]\r\n    #[derive(Debug, Clone)]\r\n    pub(super) enum Kind<HelloWorld> {\r\n        HelloWorld(HelloWorld),\r\n    }\r\n\r\n    pub mod methods {\r\n        use super::{Foo, GrpcRequest, GrpcResponse, Request, Service};\r\n\r\n        pub struct HelloWorld<T>(pub T);\r\n\r\n        impl<T> Service<GrpcRequest<Request>> for HelloWorld<T>\r\n        where\r\n            T: Foo,\r\n        {\r\n            type Response = GrpcResponse<T::HelloWorldStream>;\r\n            type Error = ();\r\n            type Future = T::HelloWorldFuture;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nTo reproduce this compiler panic, create a new library crate with this Cargo manifest and code, and then run `RUST_BACKTRACE=1 cargo doc`.\r\n\r\n### Backtrace\r\n\r\nSee this [backtrace](https://github.com/rust-lang/rust/files/2616050/2018-11-26-rustc-1.30.1-backtrace.txt) for the full output.", "closed_by": {"login": "ebkalderon", "id": 322831, "node_id": "MDQ6VXNlcjMyMjgzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/322831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebkalderon", "html_url": "https://github.com/ebkalderon", "followers_url": "https://api.github.com/users/ebkalderon/followers", "following_url": "https://api.github.com/users/ebkalderon/following{/other_user}", "gists_url": "https://api.github.com/users/ebkalderon/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebkalderon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebkalderon/subscriptions", "organizations_url": "https://api.github.com/users/ebkalderon/orgs", "repos_url": "https://api.github.com/users/ebkalderon/repos", "events_url": "https://api.github.com/users/ebkalderon/events{/privacy}", "received_events_url": "https://api.github.com/users/ebkalderon/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56239/timeline", "performed_via_github_app": null, "state_reason": "completed"}