{"url": "https://api.github.com/repos/rust-lang/rust/issues/46776", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46776/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46776/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46776/events", "html_url": "https://github.com/rust-lang/rust/issues/46776", "id": 282647925, "node_id": "MDU6SXNzdWUyODI2NDc5MjU=", "number": 46776, "title": "Somewhat unclear error message when match arms evaluate to different types", "user": {"login": "S0urc3C0de", "id": 8807847, "node_id": "MDQ6VXNlcjg4MDc4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/8807847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/S0urc3C0de", "html_url": "https://github.com/S0urc3C0de", "followers_url": "https://api.github.com/users/S0urc3C0de/followers", "following_url": "https://api.github.com/users/S0urc3C0de/following{/other_user}", "gists_url": "https://api.github.com/users/S0urc3C0de/gists{/gist_id}", "starred_url": "https://api.github.com/users/S0urc3C0de/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/S0urc3C0de/subscriptions", "organizations_url": "https://api.github.com/users/S0urc3C0de/orgs", "repos_url": "https://api.github.com/users/S0urc3C0de/repos", "events_url": "https://api.github.com/users/S0urc3C0de/events{/privacy}", "received_events_url": "https://api.github.com/users/S0urc3C0de/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 693664741, "node_id": "MDU6TGFiZWw2OTM2NjQ3NDE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mentor", "name": "E-needs-mentor", "color": "02e10c", "default": false, "description": "Call for participation: This issue is in need of a mentor."}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-16T20:21:10Z", "updated_at": "2019-02-14T07:07:27Z", "closed_at": "2019-02-14T07:07:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I just found a minor annoyance in the compiler diagnostics.\r\n\r\nHere's the code:\r\n```rust\r\nfor key in 0..0x10 {\r\n    match Keyboard::assoc_key(key) {\r\n        Some(x) => keyboard.data.insert(x, false),\r\n        _ => {},\r\n    };\r\n}\r\n```\r\nkeyboard.data is a HashMap inside a struct, defined as:\r\n```rust \r\ndata: HashMap<Keys, bool>\r\n```\r\nKeyboard::assoc_key is defined as:\r\n```rust\r\nfn assoc_key(n: u8) -> Option<Keys>\r\n```\r\n`Keys` is just a simple enum type.\r\n\r\nThe problem with the code above is that `HashMap::insert` returns an `Option` and so the match tries to evaluate to that type which is, however, not needed in this case. But it means that the default arm must also evaluate to an `Option` which it doesn't.\r\nThe compiler obviously complains about this:\r\n```\r\nerror[E0308]: match arms have incompatible types\r\n  --> src/keyboard.rs:21:13\r\n   |\r\n21 | /             match Keyboard::assoc_key(key) {\r\n22 | |                 Some(x) => keyboard.data.insert(x, false),\r\n23 | |                 _ => {},\r\n24 | |             };\r\n   | |_____________^ expected enum `std::option::Option`, found ()\r\n   |\r\n   = note: expected type `std::option::Option<bool>`\r\n              found type `()`\r\nnote: match arm with an incompatible type\r\n  --> src/keyboard.rs:23:22\r\n   |\r\n23 |                 _ => {},\r\n   |                      ^^\r\n\r\nerror: aborting due to previous error\r\n```\r\nThis confused me for a while because that was the first time I used a `HashMap` and I didn't have in mind that `HashMap::insert` returns something.\r\nI think the compiler should specifically mention **why** it expects an `Option`, that is, from where it inferred the type which would have made it more obvious that `HashMap::insert` returns an `Option`.\r\nI suppose this is something that typically doesn't happen to someone who is familiar enough with the language but it's confusing for someone who only recently began learning Rust.\r\n\r\nI've looked for existing similar issues but found nothing obvious. If this has already been discussed somewhere or is not considered an issue, please close this :)", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46776/timeline", "performed_via_github_app": null, "state_reason": "completed"}