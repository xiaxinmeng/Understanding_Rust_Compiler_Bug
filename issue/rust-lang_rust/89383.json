{"url": "https://api.github.com/repos/rust-lang/rust/issues/89383", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89383/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89383/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89383/events", "html_url": "https://github.com/rust-lang/rust/issues/89383", "id": 1011610444, "node_id": "I_kwDOAAsO6M48S_NM", "number": 89383, "title": "Miscompilation with inline assembly", "user": {"login": "xu-cheng", "id": 3105373, "node_id": "MDQ6VXNlcjMxMDUzNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3105373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xu-cheng", "html_url": "https://github.com/xu-cheng", "followers_url": "https://api.github.com/users/xu-cheng/followers", "following_url": "https://api.github.com/users/xu-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/xu-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/xu-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xu-cheng/subscriptions", "organizations_url": "https://api.github.com/users/xu-cheng/orgs", "repos_url": "https://api.github.com/users/xu-cheng/repos", "events_url": "https://api.github.com/users/xu-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/xu-cheng/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-09-30T01:58:21Z", "updated_at": "2021-10-01T10:33:53Z", "closed_at": "2021-10-01T10:33:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code ([playground link](https://play.rust-lang.org/?version=nightly&mode=release&edition=2018&gist=c47c2eafb6e483e04f266bb7d6b3a8b6)):\r\n\r\n```rust\r\n#![feature(asm)]\r\n\r\nuse core::mem;\r\n\r\npub trait CMov: Clone {\r\n    /// if choice { b } else { a }\r\n    fn cmov_select(a: &Self, b: &Self, choice: bool) -> Self;\r\n\r\n    /// if choice { *self = *other; }\r\n    fn cmov_assign(&mut self, other: &Self, choice: bool);\r\n}\r\n\r\n/// CMov bytes array which is 8-bytes aligned.\r\n///\r\n/// # Safety\r\n///\r\n/// count should be non-zero. src and dst are properly aligned.\r\n#[inline(always)]\r\npub unsafe fn cmov_bytes_a8(cnd: bool, src: *const u8, dst: *mut u8, count: usize) {\r\n    debug_assert!(count > 0);\r\n    debug_assert_eq!(count % 8, 0);\r\n    debug_assert_eq!(src.align_offset(8), 0);\r\n    debug_assert_eq!(dst.align_offset(8), 0);\r\n    let cnd = cnd as u64;\r\n    let count = count / 8;\r\n    asm!(\r\n        \"neg {0}\",\r\n        \"2:\",\r\n            \"mov {0}, qword ptr [{3} + 8*{1} - 8]\",\r\n            \"cmovc {0}, qword ptr [{2} + 8*{1} - 8]\",\r\n            \"mov qword ptr [{3} + 8*{1} - 8], {0}\",\r\n            \"dec {1}\",\r\n            \"jnz 2b\",\r\n        in(reg) cnd,\r\n        in(reg) count,\r\n        in(reg) src,\r\n        in(reg) dst,\r\n        options(nostack),\r\n    );\r\n}\r\n\r\nimpl CMov for [u64; 16] {\r\n    #[inline]\r\n    fn cmov_select(a: &Self, b: &Self, choice: bool) -> Self {\r\n        let mut out = *a;\r\n        out.cmov_assign(b, choice);\r\n        out\r\n    }\r\n\r\n    #[inline]\r\n    fn cmov_assign(&mut self, other: &Self, choice: bool) {\r\n        let count = mem::size_of::<Self>();\r\n        if count != 0 {\r\n            let src = other as *const Self as *const u8;\r\n            let dst = self as *mut Self as *mut u8;\r\n            unsafe {\r\n                cmov_bytes_a8(choice, src, dst, count);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nimpl CMov for Vec<u64> {\r\n    #[inline]\r\n    fn cmov_select(a: &Self, b: &Self, choice: bool) -> Self {\r\n        let mut out = a.clone();\r\n        out.cmov_assign(b, choice);\r\n        out\r\n    }\r\n\r\n    #[inline]\r\n    fn cmov_assign(&mut self, other: &Self, choice: bool) {\r\n        assert_eq!(self.len(), other.len());\r\n        let count = mem::size_of::<u64>() * self.len();\r\n        if count != 0 {\r\n            let src = other.as_ptr() as *const u64 as *const u8;\r\n            let dst = self.as_mut_ptr() as *mut u64 as *mut u8;\r\n            unsafe {\r\n                cmov_bytes_a8(choice, src, dst, count);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n#[inline(never)]\r\nfn black_box(input: bool) -> bool{\r\n\r\n    unsafe {\r\n        core::ptr::read_volatile(&input as *const bool)\r\n    }\r\n}\r\n\r\nfn test1() {\r\n    let a = [1u64; 16];\r\n    let b = [2u64; 16];\r\n\r\n    let src = a.clone();\r\n    let mut dst = b.clone();\r\n\r\n    let choice = black_box(false);\r\n    dst.cmov_assign(&src, choice);\r\n    assert_eq!(src, a);\r\n    assert_eq!(dst, b);\r\n    assert_eq!(<_>::cmov_select(&a, &b, choice), a);\r\n\r\n    let choice = black_box(true);\r\n    dst.cmov_assign(&src, choice);\r\n    assert_eq!(src, a);\r\n    assert_eq!(dst, a);\r\n    assert_eq!(<_>::cmov_select(&a, &b, choice), b);\r\n}\r\n\r\nfn test2() {\r\n    let len = 256;\r\n    let a = vec![3u64; len];\r\n    let b = vec![4u64; len];\r\n\r\n    let src = a.clone();\r\n    let mut dst = b.clone();\r\n\r\n    let choice = black_box(false);\r\n    dst.cmov_assign(&src, choice);\r\n    assert_eq!(src, a);\r\n    assert_eq!(dst, b);\r\n    assert_eq!(<_>::cmov_select(&a, &b, choice), a);\r\n\r\n    let choice = black_box(true);\r\n    dst.cmov_assign(&src, choice);\r\n    assert_eq!(src, a);\r\n    assert_eq!(dst, a);\r\n    assert_eq!(<_>::cmov_select(&a, &b, choice), b);\r\n}\r\n\r\nfn main() {\r\n    test1();\r\n    test2();\r\n}\r\n```\r\n\r\nThe above program runs fine in debug mode. However, it fails both tests when is built under release mode. I can replicate the issue on both Mac and Linux. I was unable to reduce the example further. \r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.57.0-nightly (8f8092cc3 2021-09-28)\r\nbinary: rustc\r\ncommit-hash: 8f8092cc32ec171becef8ceacec7dbb06c5d7d7e\r\ncommit-date: 2021-09-28\r\nhost: x86_64-apple-darwin\r\nrelease: 1.57.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n\r\n", "closed_by": {"login": "xu-cheng", "id": 3105373, "node_id": "MDQ6VXNlcjMxMDUzNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3105373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xu-cheng", "html_url": "https://github.com/xu-cheng", "followers_url": "https://api.github.com/users/xu-cheng/followers", "following_url": "https://api.github.com/users/xu-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/xu-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/xu-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xu-cheng/subscriptions", "organizations_url": "https://api.github.com/users/xu-cheng/orgs", "repos_url": "https://api.github.com/users/xu-cheng/repos", "events_url": "https://api.github.com/users/xu-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/xu-cheng/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89383/timeline", "performed_via_github_app": null, "state_reason": "completed"}