{"url": "https://api.github.com/repos/rust-lang/rust/issues/66136", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66136/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66136/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66136/events", "html_url": "https://github.com/rust-lang/rust/issues/66136", "id": 518002128, "node_id": "MDU6SXNzdWU1MTgwMDIxMjg=", "number": 66136, "title": "Warn that  `*const T as *mut T` is Undefined Behavior", "user": {"login": "Shnatsel", "id": 291257, "node_id": "MDQ6VXNlcjI5MTI1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/291257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Shnatsel", "html_url": "https://github.com/Shnatsel", "followers_url": "https://api.github.com/users/Shnatsel/followers", "following_url": "https://api.github.com/users/Shnatsel/following{/other_user}", "gists_url": "https://api.github.com/users/Shnatsel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Shnatsel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Shnatsel/subscriptions", "organizations_url": "https://api.github.com/users/Shnatsel/orgs", "repos_url": "https://api.github.com/users/Shnatsel/repos", "events_url": "https://api.github.com/users/Shnatsel/events{/privacy}", "received_events_url": "https://api.github.com/users/Shnatsel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-11-05T20:14:11Z", "updated_at": "2019-12-14T13:37:43Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Casting a `*const T` to `*mut T` may lead to memory corruption since it allows mutation of shared state. Even if the `*const T` happened to be unique, it is still undefined behavior and the optimizer may break such code in interesting ways. In a nutshell, this is as bad as transmuting a `&` into `&mut`. The compiler should warn against doing this.\r\n\r\n*Update: as [pointed out below](https://github.com/rust-lang/rust/issues/66136#issuecomment-550003651), there are cases when that does not immediately trigger UB, but in those cases there is no reason to do this in the first place.*\r\n\r\nThis often occurs when people try to consume a data structure and create a new one from it, e.g. \r\n\r\n```rust\r\nlet new_slice = core::slice::from_raw_parts_mut(old_slice.as_ptr() as *mut B, len)\r\n```\r\nin which case the proper solution is to rewrite it as \r\n\r\n```rust\r\nlet new_slice = core::slice::from_raw_parts_mut(old_slice.as_mut_ptr(), len)\r\n```\r\n\r\nThis also may happen when people try to mutate shared state through a `&`, in which case they need a `Cell`, `RefCell` or an `UnsafeCell` instead.\r\n\r\nPlayground with a real-world snippet that fails MIRI: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=b28a15e3d99616b03caafdd794550946\r\n\r\nThis pattern seems to be quite widespread - quoting @RalfJung on Zulip:\r\n\r\n> I have seen at least 2 or 3 cases over the last few weeks for a const-to-mut raw ptr cast being the give-away for mutation of shared data\r\n\r\nI have already requested [a Clippy lint](https://github.com/rust-lang/rust-clippy/issues/4774) for this, but this looks important enough to warn against by default, without relying on optional tooling to catch this.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66136/reactions", "total_count": 6, "+1": 3, "-1": 3, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66136/timeline", "performed_via_github_app": null, "state_reason": null}