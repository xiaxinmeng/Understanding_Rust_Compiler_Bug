{"url": "https://api.github.com/repos/rust-lang/rust/issues/11445", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/11445/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/11445/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/11445/events", "html_url": "https://github.com/rust-lang/rust/issues/11445", "id": 25379462, "node_id": "MDU6SXNzdWUyNTM3OTQ2Mg==", "number": 11445, "title": "Avoid placing immutable lvalues in allocas and zeroing them to cancel cleanup.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2014-01-10T07:31:36Z", "updated_at": "2016-02-02T18:20:52Z", "closed_at": "2016-02-02T18:20:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is the current LLVM IR generated at `--opt-level=0` for a seemingly noop transmute:\n\n``` rust\nfn foo(x: ~[u8]) -> ~str {unsafe{transmute(x)}}\n```\n\n``` ll\ndefine internal { i64, i64, [0 x i8] }* @foo::h5f52f1de17121161af::v0.0({ i64, %tydesc*, i8*, i8*, i8 }*, { i64, i64, [0 x i8] }* noalias) unnamed_addr #4 {\n\"function top level\":\n  %__arg = alloca { i64, i64, [0 x i8] }*\n  %__self = alloca { i64, i64, [0 x i8] }*\n  %2 = alloca { i8*, i32 }\n  store { i64, i64, [0 x i8] }* %1, { i64, i64, [0 x i8] }** %__arg\n  %3 = load { i64, i64, [0 x i8] }** %__arg\n  store { i64, i64, [0 x i8] }* %3, { i64, i64, [0 x i8] }** %__self\n  %4 = bitcast { i64, i64, [0 x i8] }** %__arg to i8*\n  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 8, i32 8, i1 false)\n  %5 = load { i64, i64, [0 x i8] }** %__self\n  br label %\"normal return\"\n\n\"normal return\":                                  ; preds = %\"function top level\"\n  %6 = bitcast { i64, i64, [0 x i8] }** %__arg to i32**\n  call void @\"_$UP$u32::glue_drop::hb6a3c7b062d25f8far\"({}* null, i32** %6)\n  ret { i64, i64, [0 x i8] }* %5\n\nunwind:                                           ; No predecessors!\n  %7 = landingpad { i8*, i32 } personality i32 (i32, i32, i64, %\"struct.std::rt::unwind::libunwind::_Unwind_Exception[#1]\"*, %\"enum.std::rt::unwind::libunwind::_Unwind_Context[#1]\"*)* @rust_eh_personality\n          cleanup\n  store { i8*, i32 } %7, { i8*, i32 }* %2\n  br label %cleanup\n\ncleanup:                                          ; preds = %unwind\n  %8 = bitcast { i64, i64, [0 x i8] }** %__arg to i32**\n  call void @\"_$UP$u32::glue_drop::hb6a3c7b062d25f8far\"({}* null, i32** %8)\n  %9 = load { i8*, i32 }* %2\n  resume { i8*, i32 } %9\n}\n```\n\nWherever `x` is moved out of, a `memset` call is used to zero the pointer, to \"cancel the cleanup\" (drop glue ignores NULL pointers and objects with a drop flag of 0).\n\nThe generated IR could look like this, without affecting semantics:\n\n``` ll\ndefine internal { i64, i64, [0 x i8] }* @foo::h5f52f1de17121161af::v0.0({ i64, %tydesc*, i8*, i8*, i8 }*, { i64, i64, [0 x i8] }* noalias) unnamed_addr #4 {\n\"function top level\":\n  %__self = alloca { i64, i64, [0 x i8] }*\n  store { i64, i64, [0 x i8] }* %1 { i64, i64, [0 x i8] }** %__self\n  %2 = load { i64, i64, [0 x i8] }** %__self\n  br label %\"normal return\"\n\n\"normal return\":                                  ; preds = %\"function top level\"\n  ret { i64, i64, [0 x i8] }* %2\n```\n\n(it might be even possible to remove the alloca used for the inlined `transmute` call)\n\nThe reason I wasn't able to implement this behavior in #11252 is the differing scope between the cleanup creation and the cleanup cancellation. It becomes obvious when we have multiple branches:\n\n``` rust\nfn foo<T: Clone>(x: T) {\n    if rand() % 1 == 0 {\n        x // moves out of x (zeroes x to cancel cleanup)\n    } else {\n        x.clone() // doesn't move out of x\n    }\n}\n```\n\n@huonw recalled someone mentioning requiring to move out of `x` in both branches, but I don't know if that's a viable solution.\n\ncc @nikomatsakis @pcwalton @thestinger\n", "closed_by": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/11445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/11445/timeline", "performed_via_github_app": null, "state_reason": "completed"}