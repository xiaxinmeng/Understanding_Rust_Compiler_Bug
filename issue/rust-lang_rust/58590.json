{"url": "https://api.github.com/repos/rust-lang/rust/issues/58590", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58590/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58590/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58590/events", "html_url": "https://github.com/rust-lang/rust/issues/58590", "id": 412329481, "node_id": "MDU6SXNzdWU0MTIzMjk0ODE=", "number": 58590, "title": "Fuchsia's target_family should be None, not \"unix\"", "user": {"login": "kulakowski", "id": 531313, "node_id": "MDQ6VXNlcjUzMTMxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/531313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kulakowski", "html_url": "https://github.com/kulakowski", "followers_url": "https://api.github.com/users/kulakowski/followers", "following_url": "https://api.github.com/users/kulakowski/following{/other_user}", "gists_url": "https://api.github.com/users/kulakowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/kulakowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kulakowski/subscriptions", "organizations_url": "https://api.github.com/users/kulakowski/orgs", "repos_url": "https://api.github.com/users/kulakowski/repos", "events_url": "https://api.github.com/users/kulakowski/events{/privacy}", "received_events_url": "https://api.github.com/users/kulakowski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1210356198, "node_id": "MDU6TGFiZWwxMjEwMzU2MTk4", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-fuchsia", "name": "O-fuchsia", "color": "6e6ec0", "default": false, "description": "Operating system: Fuchsia"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2019-02-20T09:36:58Z", "updated_at": "2022-03-18T23:10:26Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[Currently](https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src/librustc_target/spec/fuchsia_base.rs#L18), the Fuchsia target is part of the unix target_family. I'd like to suggest that this should not be the case, and that `#cfg[unix]` should be false for Fuchsia.\r\n\r\nFirst, I want to capture what I think the _opposite_ case is. Fuchsia does support some amount of posix functionality. That subset is currently informal and pragmatic. It has made starting to port exist software a certain amount easier.\r\n\r\n\"unix\" connotes a lot of things. I've singled out some big ones that do not apply to Fuchsia. I think that in aggregate, these outweigh the benefits mentioned above.\r\n\r\nProcess model: Fuchsia does not have fork and exec, and does not have a process hierarchy. There's no `wait(2)` or `waitpid(2)` on Fuchsia.\r\n\r\nSignals: Fuchsia does not have unix signals.\r\n\r\nFilesystems and users: Fuchsia does not have unix users or groups, and does not implement unix filesystem permissions. Fuchsia does not have a global filesystem.\r\n\r\nFDs: Files and file descriptors are central, primitive concepts for unix: \"everything is a file\". In Fuchsia, they are an abstraction built out of other primitives, and working with those primitives directly is often preferred.\r\n\r\nC and ABI: Unix system ABIs are typically deeply intertwined with its C standard library, and C is a de facto standard for specifying ABIs (witness `repr(C)`). On Fuchsia, almost all ABIs are specified in a language-agnostic IDL. The biggest exception, the system ABI in, we have been careful to describe in terms of ELF dynamic linkage, rather than C per se.\r\n\r\nIO: Portable unix IO boils down to synchronous read(2) and write(2). Abstractions for event-driven programming exist, but are not portable. Fuchsia has limited emulation for some of them, preferring instead to use native constructs more directly.\r\n\r\nIn aggregate, I think defining `#cfg[unix]` to be true for Fuchsia is tempting, yet a trap. An existing small program which just wants to synchronously manipulate stdin and stdout seems to benefit, for example, until they want to handle ^C with their same unix code.\r\n\r\nI'd love for rust programs, existing or not, to be as good as possible as easily as possible when built for Fuchsia. I think not setting `#cfg(unix)` will help with that.\r\n\r\nFor some background: I work on Fuchsia. Among other things, I am one of the maintainers for our libc.\r\n\r\ncc @cramertj ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58590/reactions", "total_count": 45, "+1": 38, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 7, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58590/timeline", "performed_via_github_app": null, "state_reason": null}