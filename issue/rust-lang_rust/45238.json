{"url": "https://api.github.com/repos/rust-lang/rust/issues/45238", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45238/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45238/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45238/events", "html_url": "https://github.com/rust-lang/rust/issues/45238", "id": 265003643, "node_id": "MDU6SXNzdWUyNjUwMDM2NDM=", "number": 45238, "title": "incr.comp.: Implement \"eval-always\" queries", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 693665681, "node_id": "MDU6TGFiZWw2OTM2NjU2ODE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-incr-comp", "name": "WG-incr-comp", "color": "c2e0c6", "default": false, "description": "Working group: incremental compilation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-12T16:20:42Z", "updated_at": "2017-10-27T11:16:49Z", "closed_at": "2017-10-27T11:16:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "For each query invocation the query system will track which other queries have been invoked by the former. We collect this data in the `DepGraph` and use it to find which queries need to be re-executed in a subsequent compilation session. However, there are some queries (like `collect_and_partition_translation_items` for example) that access pretty much everything in the current crate and therefore:\r\n* will introduce a lot of dependency edges in the graph, while at the same time\r\n* are very likely to be re-executed if there is even a small change to the code base.\r\n\r\nWe can take advantage of this domain knowledge by introducing so-called \"eval-always\" queries. This is a special kind of query where we opt into super coarse-grained dependency tracking: Instead of recording each individual read-edge, we just record a single read to `DepNode::Krate`. This has the effect that any change will make this query be re-executed. \r\n\r\nNote that it is not entirely clear how much of a performance win this can provide but it's certainly interesting to test out.\r\n\r\nThere are a few steps to implementing this:\r\n* Add a new kind of task in https://github.com/rust-lang/rust/blob/master/src/librustc/dep_graph/graph.rs that behaves like `OpenTask::Ignore` in `fn read_index` but, upon closing, registers a read to `DepNode::Krate`. \r\n* Make the new kind of task available to the outside as `DepGraph::with_eval_always_task()`.\r\n* Allow for declaring a `DepKind`/`DepNode` as \"eval_always\", the same way it is [possible to mark them as `anon` or `input`](https://github.com/rust-lang/rust/blob/1807f27a338e8e3f8c3a9c99fde2223b5942e640/src/librustc/dep_graph/dep_node.rs#L83).\r\n* Make `fn try_get_with()` in https://github.com/rust-lang/rust/blob/master/src/librustc/ty/maps/plumbing.rs check of the `DepNode` being \"eval_always\" and if true, execute `compute_result` within `DepGraph::with_eval_always_task()` (very similar to the [`anon` case](https://github.com/rust-lang/rust/blob/1807f27a338e8e3f8c3a9c99fde2223b5942e640/src/librustc/ty/maps/plumbing.rs#L285))\r\n* Switch the following queries to being \"eval_always\":\r\n  * `collect_and_partition_translation_items`\r\n  * `lint_levels`\r\n  * `privacy_access_levels` (and remove `with_ignore` from `librustc_privacy::check_crate`)\r\n\r\nFeel free to come up with a better name for \"eval-always\". It's really not a good name `:)`\r\n\r\ncc @wesleywiser @nikomatsakis \r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45238/timeline", "performed_via_github_app": null, "state_reason": "completed"}