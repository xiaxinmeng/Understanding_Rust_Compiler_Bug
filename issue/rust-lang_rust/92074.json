{"url": "https://api.github.com/repos/rust-lang/rust/issues/92074", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92074/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92074/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92074/events", "html_url": "https://github.com/rust-lang/rust/issues/92074", "id": 1083857639, "node_id": "I_kwDOAAsO6M5Amlrn", "number": 92074, "title": "ICE when pattern matching `vec![]`", "user": {"login": "quornian", "id": 225827, "node_id": "MDQ6VXNlcjIyNTgyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/225827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quornian", "html_url": "https://github.com/quornian", "followers_url": "https://api.github.com/users/quornian/followers", "following_url": "https://api.github.com/users/quornian/following{/other_user}", "gists_url": "https://api.github.com/users/quornian/gists{/gist_id}", "starred_url": "https://api.github.com/users/quornian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quornian/subscriptions", "organizations_url": "https://api.github.com/users/quornian/orgs", "repos_url": "https://api.github.com/users/quornian/repos", "events_url": "https://api.github.com/users/quornian/events{/privacy}", "received_events_url": "https://api.github.com/users/quornian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}, {"id": 1976249039, "node_id": "MDU6TGFiZWwxOTc2MjQ5MDM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-patterns", "name": "A-patterns", "color": "f7e101", "default": false, "description": "Relating to patterns and pattern matching"}], "state": "closed", "locked": false, "assignee": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2021-12-18T15:42:07Z", "updated_at": "2022-01-03T10:36:26Z", "closed_at": "2022-01-03T10:36:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\nNote: this only occurs when the type of the code block is a result. Removing the `Ok` line and swapping `?` for `.unwrap()` does not yield the ICE.\r\n\r\n### Code\r\n\r\n```Rust\r\n//! Library\r\n//!\r\n//! ```\r\n//! use rustice::sub;\r\n//!\r\n//! let x = sub::make_struct()?;\r\n//!\r\n//! assert!(matches!(x, sub::En::A(sub::B { inner: vec![], .. })));\r\n//! Ok::<(), &'static str>(())\r\n//! ```\r\n\r\npub mod sub {\r\n    pub enum En {\r\n        A(B),\r\n    }\r\n\r\n    pub struct B {\r\n        inner: Vec<u8>,\r\n    }\r\n\r\n    pub fn make_struct() -> Result<En, &'static str> {\r\n        Ok(En::A(B { inner: vec![] }))\r\n    }\r\n\r\n    impl B {\r\n        pub fn inner(&self) -> &Vec<u8> {\r\n            &self.inner\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.55.0 (c8dfcfe04 2021-09-06)\r\nbinary: rustc\r\ncommit-hash: c8dfcfe046a7680554bf4eb612bad840e7631c4b\r\ncommit-date: 2021-09-06\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.55.0\r\nLLVM version: 12.0.1\r\n```\r\nand after a rustup, (still getting the same ICE):\r\n```\r\nrustc 1.57.0 (f1edd0429 2021-11-29)\r\nbinary: rustc\r\ncommit-hash: f1edd0429582dd29cccacaf50fd134b05593bd9c\r\ncommit-date: 2021-11-29\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.57.0\r\nLLVM version: 13.0.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\n$ cargo test --doc\r\n   Compiling rustice v0.1.0 (/home/ian/src/rust-ice)\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.20s\r\n   Doc-tests rustice\r\n\r\nrunning 1 test\r\ntest src/lib.rs - (line 3) ... FAILED\r\n\r\nfailures:\r\n\r\n---- src/lib.rs - (line 3) stdout ----\r\nerror: arbitrary expressions aren't allowed in patterns\r\n --> src/lib.rs:8:48\r\n  |\r\n8 | assert!(matches!(x, sub::En::A(sub::B { inner: vec![], .. })));\r\n  |                                                ^^^^^^\r\n  |\r\n  = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror: internal compiler error: compiler/rustc_mir_build/src/thir/pattern/mod.rs:558:22: not a literal: Expr { hir_id: HirId { owner: DefId(0:5 ~ rust_out[6150]::main::_doctest_main_src_lib_rs_3_0), local_id: 39 }, kind: Call(Expr { hir_id: HirId { owner: DefId(0:5 ~ rust_out[6150]::main::_doctest_main_src_lib_rs_3_0), local_id: 38 }, kind: Path(TypeRelative(Ty { hir_id: HirId { owner: DefId(0:5 ~ rust_out[6150]::main::_doctest_main_src_lib_rs_3_0), local_id: 36 }, kind: Path(Resolved(None, Path { span: /home/ian/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:43:36: 43:52 (#6), res: Def(Struct, DefId(5:6801 ~ alloc[197d]::vec::Vec)), segments: [PathSegment { ident: $crate#6, hir_id: Some(HirId { owner: DefId(0:5 ~ rust_out[6150]::main::_doctest_main_src_lib_rs_3_0), local_id: 33 }), res: Some(Err), args: None, infer_args: true }, PathSegment { ident: vec#6, hir_id: Some(HirId { owner: DefId(0:5 ~ rust_out[6150]::main::_doctest_main_src_lib_rs_3_0), local_id: 34 }), res: Some(Def(Mod, DefId(5:6024 ~ alloc[197d]::vec))), args: None, infer_args: true }, PathSegment { ident: Vec#6, hir_id: Some(HirId { owner: DefId(0:5 ~ rust_out[6150]::main::_doctest_main_src_lib_rs_3_0), local_id: 35 }), res: Some(Err), args: None, infer_args: true }] })), span: /home/ian/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:43:36: 43:52 (#6) }, PathSegment { ident: new#6, hir_id: Some(HirId { owner: DefId(0:5 ~ rust_out[6150]::main::_doctest_main_src_lib_rs_3_0), local_id: 37 }), res: Some(Err), args: None, infer_args: true })), span: /home/ian/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:43:36: 43:57 (#6) }, []), span: /home/ian/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:43:36: 43:59 (#6) }\r\n --> src/lib.rs:8:48\r\n  |\r\n8 | assert!(matches!(x, sub::En::A(sub::B { inner: vec![], .. })));\r\n  |                                                ^^^^^^\r\n  |\r\n  = note: this error: internal compiler error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/compiler/rustc_errors/src/lib.rs:980:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.55.0 (c8dfcfe04 2021-09-06) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C codegen-units=1 -C embed-bitcode=no --crate-type bin\r\n\r\nquery stack during panic:\r\n#0 [thir_body] building THIR for `main::_doctest_main_src_lib_rs_3_0`\r\n#1 [mir_built] building MIR for `main::_doctest_main_src_lib_rs_3_0`\r\nend of query stack\r\nerror: aborting due to 2 previous errors\r\n\r\nCouldn't compile the test.\r\n\r\nfailures:\r\n    src/lib.rs - (line 3)\r\n\r\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.05s\r\n\r\nerror: test failed, to rerun pass '--doc'\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'Box<dyn Any>', /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/compiler/rustc_errors/src/lib.rs:980:9\r\nstack backtrace:\r\n   0: std::panicking::begin_panic\r\n   1: std::panic::panic_any\r\n   2: rustc_errors::HandlerInner::span_bug\r\n   3: rustc_errors::Handler::span_bug\r\n   4: rustc_middle::ty::context::tls::with_opt\r\n   5: rustc_middle::util::bug::opt_span_bug_fmt\r\n   6: rustc_middle::util::bug::span_bug_fmt\r\n   7: rustc_mir_build::thir::pattern::PatCtxt::lower_lit\r\n   8: rustc_mir_build::thir::pattern::PatCtxt::lower_pattern\r\n   9: <alloc::vec::Vec<T> as alloc::vec::spec_from_iter::SpecFromIter<T,I>>::from_iter\r\n  10: rustc_mir_build::thir::pattern::PatCtxt::lower_pattern\r\n  11: <alloc::vec::Vec<T> as alloc::vec::spec_from_iter::SpecFromIter<T,I>>::from_iter\r\n  12: rustc_mir_build::thir::pattern::PatCtxt::lower_pattern\r\n  13: rustc_mir_build::thir::pattern::pat_from_hir\r\n  14: rustc_mir_build::thir::cx::expr::<impl rustc_mir_build::thir::cx::Cx>::convert_arm\r\n  15: <alloc::vec::Vec<T> as alloc::vec::spec_from_iter::SpecFromIter<T,I>>::from_iter\r\n  16: rustc_mir_build::thir::cx::expr::<impl rustc_mir_build::thir::cx::Cx>::make_mirror_unadjusted\r\n  17: rustc_mir_build::thir::cx::expr::<impl rustc_mir_build::thir::cx::Cx>::mirror_expr_inner\r\n  18: rustc_mir_build::thir::cx::expr::<impl rustc_mir_build::thir::cx::Cx>::make_mirror_unadjusted\r\n  19: rustc_mir_build::thir::cx::expr::<impl rustc_mir_build::thir::cx::Cx>::mirror_expr_inner\r\n  20: rustc_mir_build::thir::cx::expr::<impl rustc_mir_build::thir::cx::Cx>::make_mirror_unadjusted\r\n  21: rustc_mir_build::thir::cx::expr::<impl rustc_mir_build::thir::cx::Cx>::mirror_expr_inner\r\n  22: core::ops::function::impls::<impl core::ops::function::FnMut<A> for &mut F>::call_mut\r\n  23: <alloc::vec::Vec<T> as alloc::vec::spec_from_iter::SpecFromIter<T,I>>::from_iter\r\n  24: rustc_mir_build::thir::cx::block::<impl rustc_mir_build::thir::cx::Cx>::mirror_block\r\n  25: rustc_mir_build::thir::cx::expr::<impl rustc_mir_build::thir::cx::Cx>::make_mirror_unadjusted\r\n  26: rustc_mir_build::thir::cx::expr::<impl rustc_mir_build::thir::cx::Cx>::mirror_expr_inner\r\n  27: rustc_mir_build::thir::cx::thir_body\r\n  28: rustc_query_system::query::plumbing::get_query_impl\r\n  29: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::thir_body\r\n  30: rustc_infer::infer::InferCtxtBuilder::enter\r\n  31: rustc_mir_build::build::mir_built\r\n  32: rustc_query_system::query::plumbing::get_query_impl\r\n  33: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::mir_built\r\n  34: rustc_mir::transform::check_unsafety::unsafety_check_result\r\n  35: core::ops::function::FnOnce::call_once\r\n  36: rustc_query_system::query::plumbing::get_query_impl\r\n  37: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::unsafety_check_result\r\n  38: rustc_mir::transform::mir_const\r\n  39: rustc_query_system::query::plumbing::get_query_impl\r\n  40: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::mir_const\r\n  41: rustc_mir::transform::mir_promoted\r\n  42: rustc_query_system::query::plumbing::get_query_impl\r\n  43: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::mir_promoted\r\n  44: rustc_mir::borrow_check::mir_borrowck\r\n  45: core::ops::function::FnOnce::call_once\r\n  46: rustc_query_system::query::plumbing::get_query_impl\r\n  47: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::mir_borrowck\r\n  48: rustc_typeck::collect::type_of::type_of\r\n  49: rustc_query_system::query::plumbing::get_query_impl\r\n  50: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::type_of\r\n  51: rustc_typeck::check::check::check_item_type\r\n  52: rustc_middle::hir::map::Map::visit_item_likes_in_module\r\n  53: rustc_typeck::check::check::check_mod_item_types\r\n  54: rustc_query_system::query::plumbing::get_query_impl\r\n  55: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::check_mod_item_types\r\n  56: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  57: rustc_typeck::check_crate\r\n  58: rustc_interface::passes::analysis\r\n  59: rustc_query_system::query::plumbing::get_query_impl\r\n  60: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\r\n  61: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  62: rustc_span::with_source_map\r\n  63: rustc_interface::interface::create_compiler_and_run\r\n  64: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92074/timeline", "performed_via_github_app": null, "state_reason": "completed"}