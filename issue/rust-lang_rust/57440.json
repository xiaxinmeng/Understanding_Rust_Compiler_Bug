{"url": "https://api.github.com/repos/rust-lang/rust/issues/57440", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57440/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57440/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57440/events", "html_url": "https://github.com/rust-lang/rust/issues/57440", "id": 396860844, "node_id": "MDU6SXNzdWUzOTY4NjA4NDQ=", "number": 57440, "title": "Using associated type as struct field causes invariance w.r.t trait", "user": {"login": "philipc", "id": 330342, "node_id": "MDQ6VXNlcjMzMDM0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipc", "html_url": "https://github.com/philipc", "followers_url": "https://api.github.com/users/philipc/followers", "following_url": "https://api.github.com/users/philipc/following{/other_user}", "gists_url": "https://api.github.com/users/philipc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipc/subscriptions", "organizations_url": "https://api.github.com/users/philipc/orgs", "repos_url": "https://api.github.com/users/philipc/repos", "events_url": "https://api.github.com/users/philipc/events{/privacy}", "received_events_url": "https://api.github.com/users/philipc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-01-08T11:17:17Z", "updated_at": "2019-02-22T13:17:45Z", "closed_at": "2019-02-22T13:17:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following code:\r\n```rust\r\npub trait Trait {\r\n    type Assoc: 'static;\r\n}\r\n\r\npub struct I<'a>(pub &'a ());\r\n\r\nimpl<'a> Trait for I<'a> {\r\n    type Assoc = ();\r\n}\r\n\r\npub struct S1<T, A>\r\nwhere\r\n    T: Trait<Assoc = A>,\r\n    A: 'static,\r\n{\r\n    pub t: T,\r\n    pub a: A,\r\n}\r\n\r\npub struct S2<T>\r\nwhere\r\n    T: Trait,\r\n    T::Assoc: 'static,\r\n{\r\n    pub t: T,\r\n    pub a: T::Assoc,\r\n}\r\n\r\npub fn assert_covariance_i<'new, 'old: 'new>(i: I<'old>) -> I<'new> { i }\r\npub fn assert_covariance_s1<'new, 'old: 'new>(s1: S1<I<'old>, ()>) -> S1<I<'new>, ()> { s1 }\r\npub fn assert_covariance_s2<'new, 'old: 'new>(s2: S2<I<'old>>) -> S2<I<'new>> { s2 }\r\n```\r\n\r\nfails with:\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:31:81\r\n   |\r\n31 | pub fn assert_covariance_s2<'new, 'old: 'new>(s2: S2<I<'old>>) -> S2<I<'new>> { s2 }\r\n   |                                                                                 ^^ lifetime mismatch\r\n   |\r\n   = note: expected type `S2<I<'new>>`\r\n              found type `S2<I<'old>>`\r\nnote: the lifetime 'new as defined on the function body at 31:29...\r\n  --> src/lib.rs:31:29\r\n   |\r\n31 | pub fn assert_covariance_s2<'new, 'old: 'new>(s2: S2<I<'old>>) -> S2<I<'new>> { s2 }\r\n   |                             ^^^^\r\nnote: ...does not necessarily outlive the lifetime 'old as defined on the function body at 31:35\r\n  --> src/lib.rs:31:35\r\n   |\r\n31 | pub fn assert_covariance_s2<'new, 'old: 'new>(s2: S2<I<'old>>) -> S2<I<'new>> { s2 }\r\n   |                                   ^^^^\r\n```\r\n\r\nI would expect the variance of `S1` and `S2` to be the same w.r.t `T`. And even if this case can't be handled in general for all associated types, shouldn't the `Assoc: 'static` bound allow it?\r\n\r\nI've been using `S1` as a workaround for this issue, but the problem with that is the extra type parameter propagates upwards into all containing types, and it gets quite ugly and verbose.", "closed_by": {"login": "philipc", "id": 330342, "node_id": "MDQ6VXNlcjMzMDM0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipc", "html_url": "https://github.com/philipc", "followers_url": "https://api.github.com/users/philipc/followers", "following_url": "https://api.github.com/users/philipc/following{/other_user}", "gists_url": "https://api.github.com/users/philipc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipc/subscriptions", "organizations_url": "https://api.github.com/users/philipc/orgs", "repos_url": "https://api.github.com/users/philipc/repos", "events_url": "https://api.github.com/users/philipc/events{/privacy}", "received_events_url": "https://api.github.com/users/philipc/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57440/timeline", "performed_via_github_app": null, "state_reason": "completed"}