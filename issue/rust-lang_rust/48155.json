{"url": "https://api.github.com/repos/rust-lang/rust/issues/48155", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48155/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48155/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48155/events", "html_url": "https://github.com/rust-lang/rust/issues/48155", "id": 296278215, "node_id": "MDU6SXNzdWUyOTYyNzgyMTU=", "number": 48155, "title": "Performance regressions in nightly btwn nightly-2017-12-25 and nightly-2017-12-26", "user": {"login": "lloydmeta", "id": 914805, "node_id": "MDQ6VXNlcjkxNDgwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/914805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lloydmeta", "html_url": "https://github.com/lloydmeta", "followers_url": "https://api.github.com/users/lloydmeta/followers", "following_url": "https://api.github.com/users/lloydmeta/following{/other_user}", "gists_url": "https://api.github.com/users/lloydmeta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lloydmeta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lloydmeta/subscriptions", "organizations_url": "https://api.github.com/users/lloydmeta/orgs", "repos_url": "https://api.github.com/users/lloydmeta/repos", "events_url": "https://api.github.com/users/lloydmeta/events{/privacy}", "received_events_url": "https://api.github.com/users/lloydmeta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-12T06:35:30Z", "updated_at": "2018-02-13T14:42:57Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I *think* this is the right place to report that I am seeing some performance regressions in [Frunk](https://github.com/lloydmeta/frunk), namely in [the benchmark](https://github.com/lloydmeta/frunk/blob/master/benches/labelled.rs) for `LabelledGeneric`-based conversions, where I compare hand-written conversions between structs vs auto `LabelledGeneric`-driven conversions.\r\n\r\nI've narrowed it to changes made between `nightly-2017-12-25` and `nightly-2017-12-26`\r\n\r\n```rust\r\n$ cargo +nightly-2017-12-25 bench big\r\nrunning 4 tests\r\ntest big_from_24fields           ... bench:         128 ns/iter (+/- 10)\r\ntest big_from_25fields           ... bench:         159 ns/iter (+/- 27)\r\ntest big_transform_from_24fields ... bench:         136 ns/iter (+/- 68)\r\ntest big_transform_from_25fields ... bench:         186 ns/iter (+/- 36)\r\n\r\n$ cargo +nightly-2017-12-26 bench big\r\ntest big_from_24fields           ... bench:         149 ns/iter (+/- 32)\r\ntest big_from_25fields           ... bench:         188 ns/iter (+/- 44)\r\ntest big_transform_from_24fields ... bench:       7,631 ns/iter (+/- 3,917)\r\ntest big_transform_from_25fields ... bench:       9,162 ns/iter (+/- 4,136)\r\n```\r\n\r\nAs you can see above, the `LabelledGeneric`-based conversion (`big_transform_from_*`) went from being essentially the same as hand-written to **~70x** the overhead \ud83d\ude22 \r\n\r\nNot really sure if it matters how `LabelledGeneric` struct-to-struct transformation works in Frunk, but it essentially gets the compiler to verify that for two given structs, their fields are \"compatible\" (target struct field names and fields types are a subset of source struct's) and then \"just\" aligns the generic representation of source to target and dumps one into the other. I say \"just\" because I still have no idea how Rust managed to make this a zero-overhead op \ud83d\ude06 \r\n\r\nThe bloody details are available in multipart on my blog ([part 1](https://beachape.com/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/), [part 2](https://beachape.com/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/), [part 3](https://beachape.com/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/)).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48155/timeline", "performed_via_github_app": null, "state_reason": null}