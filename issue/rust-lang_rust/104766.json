{"url": "https://api.github.com/repos/rust-lang/rust/issues/104766", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104766/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104766/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104766/events", "html_url": "https://github.com/rust-lang/rust/issues/104766", "id": 1461150545, "node_id": "I_kwDOAAsO6M5XF2NR", "number": 104766, "title": "E0521 borrowed data escapes with subtyping stuff is confusing", "user": {"login": "djc", "id": 158471, "node_id": "MDQ6VXNlcjE1ODQ3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/158471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djc", "html_url": "https://github.com/djc", "followers_url": "https://api.github.com/users/djc/followers", "following_url": "https://api.github.com/users/djc/following{/other_user}", "gists_url": "https://api.github.com/users/djc/gists{/gist_id}", "starred_url": "https://api.github.com/users/djc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djc/subscriptions", "organizations_url": "https://api.github.com/users/djc/orgs", "repos_url": "https://api.github.com/users/djc/repos", "events_url": "https://api.github.com/users/djc/events{/privacy}", "received_events_url": "https://api.github.com/users/djc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-11-23T06:54:24Z", "updated_at": "2022-11-23T20:24:25Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Code that fails:\r\n\r\n```rust\r\nstruct State<'a, 'b> {\r\n    data: &'a str,\r\n    foo: &'b [u8],\r\n}\r\n\r\nimpl<'a, 'b> State<'a, 'b> {\r\n    fn id(&self) -> Id<'b> {\r\n        todo!()\r\n    }\r\n}\r\n\r\nimpl<'b> Foo<'b> for bool {\r\n    fn process<'a>(state: &'a mut State<'a, 'b>) -> bool {\r\n        let id = state.id();\r\n        if Kind::Id(id) == KIND {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        };\r\n    }\r\n    \r\n}\r\n\r\ntrait Foo<'b>: Sized {\r\n    fn process<'a>(state: &'a mut State<'a, 'b>) -> bool;\r\n}\r\n\r\n#[derive(Eq, PartialEq)]\r\nstruct Id<'b> {\r\n    data: &'b str,\r\n}\r\n\r\n#[derive(Eq, PartialEq)]\r\nenum Kind {\r\n    Id(Id<'static>),\r\n}\r\n\r\nconst KIND: Kind = Kind::Id(Id { data: \"foo\" });\r\n```\r\n\r\n[Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=2630cd61c1b6a3afdfa8d53d7a307559).\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[[E0521]](https://doc.rust-lang.org/stable/error-index.html#E0521): borrowed data escapes outside of associated function\r\n  --> src/lib.rs:14:18\r\n   |\r\n12 | impl<'b> Foo<'b> for bool {\r\n   |      -- lifetime `'b` defined here\r\n13 |     fn process<'a>(state: &'a mut State<'a, 'b>) -> bool {\r\n   |                    ----- `state` is a reference that is only valid in the associated function body\r\n14 |         let id = state.id();\r\n   |                  ^^^^^^^^^^\r\n   |                  |\r\n   |                  `state` escapes the associated function body here\r\n   |                  argument requires that `'b` must outlive `'static`\r\n\r\nFor more information about this error, try `rustc --explain E0521`.\r\n```\r\n\r\nThe value of `id` clearly does not escape the associated function, and nor does `state`. The problematic span is actually `Kind::Id(id)`, although I would still not use the \"escape\" wording for this case of putting an explicit lifetime into a `'static` field.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104766/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104766/timeline", "performed_via_github_app": null, "state_reason": null}