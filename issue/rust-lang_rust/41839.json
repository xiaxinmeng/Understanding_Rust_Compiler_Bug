{"url": "https://api.github.com/repos/rust-lang/rust/issues/41839", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41839/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41839/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41839/events", "html_url": "https://github.com/rust-lang/rust/issues/41839", "id": 227185184, "node_id": "MDU6SXNzdWUyMjcxODUxODQ=", "number": 41839, "title": "Non-optimal derived PartialEq for POD struct", "user": {"login": "jwilm", "id": 4285147, "node_id": "MDQ6VXNlcjQyODUxNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4285147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwilm", "html_url": "https://github.com/jwilm", "followers_url": "https://api.github.com/users/jwilm/followers", "following_url": "https://api.github.com/users/jwilm/following{/other_user}", "gists_url": "https://api.github.com/users/jwilm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwilm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwilm/subscriptions", "organizations_url": "https://api.github.com/users/jwilm/orgs", "repos_url": "https://api.github.com/users/jwilm/repos", "events_url": "https://api.github.com/users/jwilm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwilm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-08T21:49:01Z", "updated_at": "2023-04-05T17:38:49Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Given a struct like\r\n\r\n```rust\r\npub struct Foo {\r\n    a: bool,\r\n    b: bool,\r\n    c: bool,\r\n    d: bool\r\n}\r\n```\r\n\r\nI would expect generated asm to be doing a dword comparison to check for equality. However, that's not what is seen unless explicitly transmuting before the comparison (interactive: https://godbolt.org/g/kYPaOh).\r\n\r\nThe `PartialEq` implementation looks something like:\r\n\r\n```rust\r\npub fn eq(a: &Foo, b: &Foo) -> bool {\r\n  a.a == b.a &&\r\n    a.b == b.b &&\r\n    a.c == b.c &&\r\n    a.d == b.d\r\n}\r\n```\r\n\r\nwhich produces the assembly:\r\n\r\n```asm\r\nexample::eq:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        mov     al, byte ptr [rdi]\r\n        cmp     al, byte ptr [rsi]\r\n        jne     .LBB0_1\r\n        mov     al, byte ptr [rdi + 1]\r\n        cmp     al, byte ptr [rsi + 1]\r\n        jne     .LBB0_1\r\n        mov     al, byte ptr [rdi + 2]\r\n        cmp     al, byte ptr [rsi + 2]\r\n        jne     .LBB0_1\r\n        mov     cl, byte ptr [rdi + 3]\r\n        mov     al, 1\r\n        cmp     cl, byte ptr [rsi + 3]\r\n        je      .LBB0_3\r\n.LBB0_1:\r\n        xor     eax, eax\r\n.LBB0_3:\r\n        pop     rbp\r\n        ret\r\n```\r\n\r\nAn optimized version using transmute (Rust):\r\n\r\n```rust\r\npub fn eq_transmute(a: &Foo, b: &Foo) -> bool {\r\n    unsafe {\r\n        transmute_copy::<_, u32>(a) == transmute_copy::<_, u32>(b)\r\n    }\r\n}\r\n```\r\n\r\nproduces the assembly:\r\n\r\n```asm\r\nexample::eq_transmute:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        mov     eax, dword ptr [rdi]\r\n        cmp     eax, dword ptr [rsi]\r\n        sete    al\r\n        pop     rbp\r\n        ret\r\n```\r\n\r\n\r\nIs this an optimization we should expect to be handled automatically?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41839/timeline", "performed_via_github_app": null, "state_reason": null}