{"url": "https://api.github.com/repos/rust-lang/rust/issues/90359", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90359/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90359/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90359/events", "html_url": "https://github.com/rust-lang/rust/issues/90359", "id": 1038026427, "node_id": "I_kwDOAAsO6M493wa7", "number": 90359, "title": "Consolidate unused warnings into one diagnostic", "user": {"login": "wbrickner", "id": 2095902, "node_id": "MDQ6VXNlcjIwOTU5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2095902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wbrickner", "html_url": "https://github.com/wbrickner", "followers_url": "https://api.github.com/users/wbrickner/followers", "following_url": "https://api.github.com/users/wbrickner/following{/other_user}", "gists_url": "https://api.github.com/users/wbrickner/gists{/gist_id}", "starred_url": "https://api.github.com/users/wbrickner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wbrickner/subscriptions", "organizations_url": "https://api.github.com/users/wbrickner/orgs", "repos_url": "https://api.github.com/users/wbrickner/repos", "events_url": "https://api.github.com/users/wbrickner/events{/privacy}", "received_events_url": "https://api.github.com/users/wbrickner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-10-28T02:49:49Z", "updated_at": "2021-10-28T22:42:19Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "## Proposal\r\n\r\nDuring development there are often dozens of warnings about unused arguments,\r\nunconstructed enum variants and unused struct fields.\r\n\r\n- These are good! However they're very verbose, to the point of degrading the developer experience, printing a separate multi-line message for each unused item:\r\n\r\n![Current verbose output](https://user-images.githubusercontent.com/2095902/139169289-d0ed61da-969c-4767-a842-30054fb5ea85.png)\r\n\r\n- I am imagining a solution which produces output like:\r\n\r\n```\r\nwarning: unused variables: `im`, `unused` \r\n --> src/main.rs:18:25\r\n   |\r\n18 | fn demo(string: String, im: f32, unused: u32) {\r\n   |                         ^^       ^^^^^^ help: if this is intentional, prefix with an underscore: `_im`, `_unused`\r\n   |\r\n```\r\n\r\n### In a perfect world this would generalize further:\r\n- unconstructed enum variants (consolidated by enum): \r\n```\r\nwarning: variants are never constructed: `Stable`, `Unsubscribe`\r\n  --> src/other_mod/mod.rs:15:3\r\n   |\r\n15 |     Stable,\r\n   |     ^^^^^^\r\n   |\r\n25 | /   Unstable, {\r\n26 | |     period: usize,\r\n27 | |   }\r\n   | |___^\r\n```\r\n\r\n- unused struct fields (consolidated by struct):\r\n```\r\nwarning: fields are never read: `im_unused`, `me_too`\r\n  --> src/the_mod.rs:77:3\r\n   |\r\n77 |   im_unused: String,\r\n   |   ^^^^^^^^^^^^^^^^^\r\n79 |   me_too: String\r\n   |   ^^^^^^^^^^^^^^\r\n```\r\n\r\n- unused functions (grouped by impl block, or grouped by whatever the implementation is \"on\"):\r\n```\r\nwarning: associated functions are never used: `store`, `list`\r\n  --> src/main.rs:40:25\r\n   |\r\n40 |   pub async fn store(&self) {\r\n   |                ^^^^^\r\n60 |   pub fn list(&self) -> Vec<u8> {\r\n   |          ^^^^^\r\n```\r\n\r\n- unused local variables (consolidated by scope):\r\n```\r\nwarning: unused variables: `local_creation_time`, `count`\r\n   --> src/my_mod/mod.rs:159:12\r\n    |\r\n159 |       let (local_creation_time, file) = {\r\n    |            ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_local_creation_time`\r\n    |\r\n170 |       let count = 0;\r\n    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_count`\r\n```\r\n\r\n- One can imagine this going even further:\r\n  - unconstructed structs (consolidated by module?)\r\n```\r\nwarning: structs are never constructed: `Format`, `Packet`\r\n   --> src/serial_bus.rs:29:8\r\n    |\r\n29  | struct Format {}\r\n    |        ^^^^^^\r\n120 | struct Packet {}\r\n    |        ^^^^^^\r\n```\r\n  - unconstructed enums (consolidated by module?)\r\n```\r\nwarning: enums are never used: `LinkType`, `Checksum`\r\n  --> src/serial_bus.rs:50:10\r\n   |\r\n50 | pub enum LinkType {\r\n   |          ^^^^^^^^\r\n95 | pub enum Checksum {\r\n   |          ^^^^^^^^\r\n   |\r\n```\r\n\r\n## Supporting Arguments\r\n\r\n- Consolidation of these messages would reduce the cognitive complexity of the compiler output\r\n   - Conceptually there are not 15 very distinct warnings, there are 4 warnings, each of them nearly identical and often adjacent in the source. \r\n   - Lots and lots (and lots) of separate messages is overwhelming, consolidation makes the output easier to grok.\r\n   - The effect of a \"wall of yellow\" output _that is mostly ignorable_ is to lead humans to _mostly ignore it_, accidentally overlooking warnings which are not benign, e.g. `#[must_use]` warnings and the like.\r\n      - In principle people should remedy all warnings before publishing or moving to production, and in doing so they would eventually read every warning (the important ones), so no issue. I wager this does not always happen. Our tools should guide us towards the outcomes we desire, and so the parent argument stands.\r\n   -  Reducing wall-of-yellow output is good for experienced users, but it is especially valuable for beginners. I posit these changes would contribute to accelerating language adoption and ecosystem growth.\r\n\r\n- We already do this for unused imports:\r\n   -  in fact the compiler can consolidate many warnings into 1 warning (I've seen \"lots of\" unused items consolidated, it may even be unbounded, I don't know)\r\n   - (However, import warnings are only consolidated if they are from the same statement. This should also be improved, I should have a warning about 5 unused imports, not 5 warnings about 5 unused imports)\r\n\r\n![Unused imports warnings are consolidated](https://user-images.githubusercontent.com/2095902/139169749-615c8b63-91fe-4f94-8d31-73cc3f29c9af.png)\r\n\r\n## Additional Thoughts\r\n\r\n- Warnings without consolidation provide a line and column number. For consolidated warnings, there is no longer an inarguably correct location to point to. I think that all consolidations described above only occur inside single files, so I propose we use the first infraction that a warning represents. For example, if we have two unused variables in the same scope, the first unused variable is what is pointed to even though both are listed in the warning. \r\n\r\n- The same arguments I have made above can be applied to _some_ aspects of error reporting:\r\n- However in the case of errors I think they should always remain separate\r\n- When compared to warnings, errors are extremely cognitively demanding to parse, understand the root cause of, and repair. They should probably never be consolidated in the output.\r\n- One similar quality of life change w.r.t. error reporting that I will argue for is guaranteeing that errors are always printed last (closest to the terminal prompt, least likely to be cut off), although it is not directly related to this ticket so I can save that for another day.\r\n\r\nI have never contributed to `rustc` or related tooling, so I do not have an intuition for how difficult implementation of my proposal will be, so I apologize if it turns out I am asking for the world \ud83d\ude04 .\r\n\r\nI understand that my proposal constitutes a substantial change to the human-facing output behavior of `rustc`, and I appreciate your consideration.\r\n\r\nThank you for reading.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90359/reactions", "total_count": 8, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 7, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90359/timeline", "performed_via_github_app": null, "state_reason": null}