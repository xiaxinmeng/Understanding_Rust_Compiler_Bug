{"url": "https://api.github.com/repos/rust-lang/rust/issues/91432", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91432/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91432/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91432/events", "html_url": "https://github.com/rust-lang/rust/issues/91432", "id": 1068809684, "node_id": "I_kwDOAAsO6M4_tL3U", "number": 91432, "title": "uhh? good luck?", "user": {"login": "goetsche101", "id": 55802435, "node_id": "MDQ6VXNlcjU1ODAyNDM1", "avatar_url": "https://avatars.githubusercontent.com/u/55802435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goetsche101", "html_url": "https://github.com/goetsche101", "followers_url": "https://api.github.com/users/goetsche101/followers", "following_url": "https://api.github.com/users/goetsche101/following{/other_user}", "gists_url": "https://api.github.com/users/goetsche101/gists{/gist_id}", "starred_url": "https://api.github.com/users/goetsche101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goetsche101/subscriptions", "organizations_url": "https://api.github.com/users/goetsche101/orgs", "repos_url": "https://api.github.com/users/goetsche101/repos", "events_url": "https://api.github.com/users/goetsche101/events{/privacy}", "received_events_url": "https://api.github.com/users/goetsche101/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-12-01T19:51:54Z", "updated_at": "2021-12-05T19:44:35Z", "closed_at": "2021-12-02T17:00:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "use std::env; // to get arugments passed to the program\r\nuse std::thread;\r\nuse std::sync::Arc;\r\nuse std::sync::Mutex;\r\n\r\n/*\r\n* Print the number of partitions and the size of each partition\r\n* @param vs A vector of vectors\r\n*/\r\nfn print_partition_info(vs: &Vec<Vec<usize>>){\r\n    println!(\"Number of partitions = {}\", vs.len());\r\n    for i in 0..vs.len(){\r\n        println!(\"\\tsize of partition {} = {}\", i, vs[i].len());\r\n    }\r\n}\r\n\r\n/*\r\n* Create a vector with integers from 0 to num_elements -1\r\n* @param num_elements How many integers to generate\r\n* @return A vector with integers from 0 to (num_elements - 1)\r\n*/\r\nfn generate_data(num_elements: usize) -> Vec<usize>{\r\n    let mut v : Vec<usize> = Vec::new();\r\n    for i in 0..num_elements {\r\n        v.push(i);\r\n    }\r\n    return v;\r\n}\r\n\r\n/*\r\n* Partition the data in the vector v into 2 vectors\r\n* @param v Vector of integers\r\n* @return A vector that contains 2 vectors of integers\r\n\r\n*/\r\nfn partition_data_in_two(v: &Vec<usize>) -> Vec<Vec<usize>>{\r\n    let partition_size = v.len() / 2;\r\n    // Create a vector that will contain vectors of integers\r\n    let mut xs: Vec<Vec<usize>> = Vec::new();\r\n\r\n    // Create the first vector of integers\r\n    let mut x1 : Vec<usize> = Vec::new();\r\n    // Add the first half of the integers in the input vector to x1\r\n    for i in 0..partition_size{\r\n        x1.push(v[i]);\r\n    }\r\n    // Add x1 to the vector that will be returned by this function\r\n    xs.push(x1);\r\n\r\n    // Create the second vector of integers\r\n    let mut x2 : Vec<usize> = Vec::new();\r\n    // Add the second half of the integers in the input vector to x2\r\n    for i in partition_size..v.len(){\r\n        x2.push(v[i]);\r\n    }\r\n    // Add x2 to the vector that will be returned by this function\r\n    xs.push(x2);\r\n    // Return the result vector\r\n    xs\r\n}\r\n\r\n/*\r\n* Sum up the all the integers in the given vector\r\n* @param v Vector of integers\r\n* @return Sum of integers in v\r\n* Note: this function has the same code as the reduce_data function.\r\n*       But don't change the code of map_data or reduce_data.\r\n*/\r\nfn map_data(v: &Vec<usize>) -> usize{\r\n    let mut sum = 0;\r\n    for i in v{\r\n        sum += i;\r\n    }\r\n    sum\r\n}\r\n\r\n/*\r\n* Sum up the all the integers in the given vector\r\n* @param v Vector of integers\r\n* @return Sum of integers in v\r\n*/\r\nfn reduce_data(v: &Vec<usize>) -> usize{\r\n    let mut sum = 0;\r\n    for i in v{\r\n        sum += i;\r\n    }\r\n    sum\r\n}\r\n\r\n/*\r\n* A single threaded map-reduce program\r\n*/\r\nfn main() {\r\n\r\n    // Use std::env to get arguments passed to the program\r\n    let args: Vec<String> = env::args().collect();\r\n    if args.len() != 3 {\r\n        println!(\"ERROR: Usage {} num_partitions num_elements\", args[0]);\r\n        return;\r\n    }\r\n    let num_partitions : usize = args[1].parse().unwrap();\r\n    let num_elements : usize = args[2].parse().unwrap();\r\n    if num_partitions < 1{\r\n      println!(\"ERROR: num_partitions must be at least 1\");\r\n        return;\r\n    }\r\n    if num_elements < num_partitions{\r\n        println!(\"ERROR: num_elements cannot be smaller than num_partitions\");\r\n        return;\r\n    }\r\n\r\n    // Generate data.\r\n    let v = generate_data(num_elements);\r\n\r\n    // PARTITION STEP: partition the data into 2 partitions\r\n    let xs = partition_data_in_two(&v);\r\n\r\n    // Print info about the partitions\r\n    print_partition_info(&xs);\r\n    let mut intermediate_sums : Vec<usize> = Vec::new();\r\n    //let intermediate_sums : Arc<Mutex<i32>> = Arc::new(Mutex::new(0));\r\n    \r\n\r\n    // MAP STEP: Process each partition\r\n\r\n    // CHANGE CODE START: Don't change any code above this line\r\n\r\n    // Change the following code to create 2 threads that run concurrently and each of which uses map_data() function to process one of the two partitions\r\n\r\n    //intermediate_sums.push(map_data(&xs[0]));\r\n    //intermediate_sums.push(map_data(&xs[1]));\r\n    let p1 = xs[0].clone();\r\n    let p2 = xs[1].clone();\r\n\r\n    let thread_1 = thread::spawn(move || \r\n    {\r\n        let r1 = map_data(&p1);\r\n        r1\r\n    }\r\n    );\r\n    //let thread_2 = thread::spawn(move || {let r2 = map_data(&p2);});\r\n\r\n    let result = thread_1.join().unwrap();\r\n    //thread_2.join().unwrap();\r\n    \r\n\r\n\r\n    // CHANGE CODE END: Don't change any code below this line until the next CHANGE CODE comment\r\n\r\n    // Print the vector with the intermediate sums\r\n    println!(\"Intermediate sums = {:?}\", intermediate_sums);\r\n\r\n    // REDUCE STEP: Process the intermediate result to produce the final result\r\n    let sum = reduce_data(&intermediate_sums);\r\n    println!(\"Sum = {}\", sum);\r\n\r\n    // CHANGE CODE: Add code that does the following:\r\n    // 1. Calls partition_data to partition the data into equal partitions\r\n    // 2. Calls print_partition_info to print info on the partitions that have been created\r\n    // 3. Creates one thread per partition and uses each thread to concurrently process one partition\r\n    // 4. Collects the intermediate sums from all the threads\r\n    // 5. Prints information about the intermediate sums\r\n    // 5. Calls reduce_data to process the intermediate sums\r\n    // 6. Prints the final sum computed by reduce_data\r\n\r\n}\r\n\r\n/*\r\n* CHANGE CODE: code this function\r\n* Note: Don't change the signature of this function\r\n*\r\n* Partitions the data into a number of partitions such that\r\n* - the returned partitions contain all elements that are in the input vector\r\n* - if num_elements is a multiple of num_partitions, then all partitions must have equal number of elements\r\n* - if num_elements is not a multiple of num_partitions, some partitions can have one more element than other partitions\r\n*\r\n* @param num_partitions The number of partitions to create\r\n* @param v The data to be partitioned\r\n* @return A vector that contains vectors of integers\r\n* \r\n*/\r\nfn partition_data(num_partitions: usize, v: &Vec<usize>) -> Vec<Vec<usize>>{\r\n    // Remove the following line which has been added to remove a compiler error\r\n    partition_data_in_two(v)\r\n}\r\n\r\n<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\n<code>\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\n<version>\r\n```\r\n\r\n### Error output\r\n\r\n```\r\n<output>\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91432/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91432/timeline", "performed_via_github_app": null, "state_reason": "completed"}