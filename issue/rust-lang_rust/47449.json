{"url": "https://api.github.com/repos/rust-lang/rust/issues/47449", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47449/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47449/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47449/events", "html_url": "https://github.com/rust-lang/rust/issues/47449", "id": 288545589, "node_id": "MDU6SXNzdWUyODg1NDU1ODk=", "number": 47449, "title": "Other modules `extern` functions can currently be redefined", "user": {"login": "gamozolabs", "id": 13505090, "node_id": "MDQ6VXNlcjEzNTA1MDkw", "avatar_url": "https://avatars.githubusercontent.com/u/13505090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gamozolabs", "html_url": "https://github.com/gamozolabs", "followers_url": "https://api.github.com/users/gamozolabs/followers", "following_url": "https://api.github.com/users/gamozolabs/following{/other_user}", "gists_url": "https://api.github.com/users/gamozolabs/gists{/gist_id}", "starred_url": "https://api.github.com/users/gamozolabs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gamozolabs/subscriptions", "organizations_url": "https://api.github.com/users/gamozolabs/orgs", "repos_url": "https://api.github.com/users/gamozolabs/repos", "events_url": "https://api.github.com/users/gamozolabs/events{/privacy}", "received_events_url": "https://api.github.com/users/gamozolabs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-15T10:26:10Z", "updated_at": "2019-11-22T20:41:21Z", "closed_at": "2019-11-22T20:41:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently it is possible to redefine functions that are defined as `extern` in another module. This affects many internal functions to rustc (the compiler) as well as the built Rust application.\r\n\r\nThe most bold issue is currently this is safe in stable, produces no warnings or errors, and causes a crash of the built program:\r\n\r\n```\r\n#[no_mangle]\r\npub fn memcpy() {}\r\npub fn main() {}\r\n```\r\n\r\nThis crash can be observed directly on the Rust playground https://play.rust-lang.org/?gist=c914a0d307eff3b7d4bb2b90b264970e&version=stable\r\n\r\nThe issue at heart is being able to redefine `extern` functions from another module. For example a simple application like this is allowed:\r\n\r\n```\r\npub mod imports {\r\n    extern \"C\" {\r\n        pub fn write();\r\n    }\r\n}\r\n\r\n#[no_mangle]\r\npub fn write() {}\r\n\r\nfn main() {}\r\n```\r\n\r\nFurther this issue also affects `rustc` itself, in that it can invalidate certain internal compiler state and cause memory corruption and a crash of `rustc`.\r\n\r\n```\r\n// Build with 'rustc --crate-type lib --target x86_64-pc-windows-msvc src/lib.rs'\r\n#[no_mangle]\r\npub static __CxxFrameHandler3: u32 = 0;\r\n\r\npub extern fn x() { panic!(\"WOO\"); }\r\n```\r\n\r\nBuilding this will cause `rustc` to crash due to an out of bounds write due to type confusion around the type of `__CxxFrameHandler3`.  This issue can cause some pretty catastrophic corruption resulting in `rustc` jumping to arbitrary code as seen here: https://gist.github.com/gamozolabs/d966adc2e13310a8ddb65285e5936681 (sorry, don't have symbols to this official build). Due to this being memory corruption, it might not always trigger a crash. Turning on page heap or address sanitizer makes it always crash, but without these it's 'random'.\r\nHere's stack traces at each stage of this crash, and the call site of the allocation that is being written out of bounds to:\r\nhttps://gist.github.com/gamozolabs/2fc773c092a37ce3b160e946b6d475a3\r\n\r\nThis would be an assert if LLVM assertions are turned on and it is related to #38641 .\r\n\r\nFurther this also can be caused on non-MSVC targets by doing it as such:\r\n\r\n```\r\n// Build with 'rustc --target x86_64-unknown-linux-gnu --crate-type lib src/lib.rs'\r\n#![no_std]\r\n\r\n#[no_mangle]\r\npub static rust_eh_personality: u32 = 0;\r\n\r\npub extern fn x() { panic!(\"WOO\"); }\r\n```\r\n\r\nFurther it seems LLVM errors can be caused by defining LLVM intrinsics such as:\r\n\r\n```\r\n#![crate_type = \"lib\"]\r\n\r\n#[export_name = \"llvm.lifetime.start\"]\r\npub extern fn ABCD() {}\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nAttribute after last parameter!\r\nvoid ()* @llvm.lifetime.start\r\nLLVM ERROR: Broken function found, compilation aborted!\r\n```\r\n\r\nHowever if you try this with a made up LLVM intrinsic name, it yells at you for trying to define LLVM intrinsics:\r\n\r\n```\r\n#![crate_type = \"lib\"]\r\n\r\n#[export_name = \"llvm.lifetime.asdfasdf\"]\r\npub extern fn ABCD() {}\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nllvm intrinsics cannot be defined!\r\nvoid ()* @llvm.lifetime.asdfasdf\r\nLLVM ERROR: Broken function found, compilation aborted!\r\n```\r\n\r\nAt this point I've stopped looking for more examples of what this impacts as it's just too many to bother writing up. Almost all of my testing was done on x86_64 Windows as a host with nightly Rust, however I have cross checked most things on Linux or the Rust playground.\r\n\r\nFurther while almost all of these examples use `#[export_name]` or `#[no_mangle]`, this issue also can occur if you have an `extern` that is named the same as your mangled Rust function. A bit niche, but this issue is not with just these attributes.\r\n\r\nOne worry with fixing this is that it would break a lot of `#![no_std]` projects that implement `panic_fmt`, `memcpy`, etc as they are defined as `extern` in Rust. I think to make this work we would have to enforce that the type signature of the `extern` matches the type signature of the function you are implementing. If you declare `extern { pub unsafe extern \"C\" fn memcpy(...) }` then the reimplementation must match that including the `unsafe`. Which at that point this is no longer unsound. Or it might be able to be made that any naming collisions with an `extern {}` must be `unsafe`. Haven't thought through all the edge cases of that.\r\n\r\n-B", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47449/timeline", "performed_via_github_app": null, "state_reason": "completed"}