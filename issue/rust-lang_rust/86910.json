{"url": "https://api.github.com/repos/rust-lang/rust/issues/86910", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86910/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86910/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86910/events", "html_url": "https://github.com/rust-lang/rust/issues/86910", "id": 938068824, "node_id": "MDU6SXNzdWU5MzgwNjg4MjQ=", "number": 86910, "title": "Description of E0495 failure difficult to parse", "user": {"login": "mcy", "id": 2711945, "node_id": "MDQ6VXNlcjI3MTE5NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2711945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcy", "html_url": "https://github.com/mcy", "followers_url": "https://api.github.com/users/mcy/followers", "following_url": "https://api.github.com/users/mcy/following{/other_user}", "gists_url": "https://api.github.com/users/mcy/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcy/subscriptions", "organizations_url": "https://api.github.com/users/mcy/orgs", "repos_url": "https://api.github.com/users/mcy/repos", "events_url": "https://api.github.com/users/mcy/events{/privacy}", "received_events_url": "https://api.github.com/users/mcy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 3675472455, "node_id": "LA_kwDOAAsO6M7bE0JH", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-variance", "name": "A-variance", "color": "f7e101", "default": false, "description": "Area: Variance (https://doc.rust-lang.org/nomicon/subtyping.html)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-07-06T16:28:35Z", "updated_at": "2021-12-27T03:57:59Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Given the following code: https://godbolt.org/z/6ndY3zx7q\r\n\r\n```rust\r\npub fn next<'buf, 'read, T>(\r\n    r: &'read mut i32,\r\n    f: impl FnOnce(&mut &'read &'buf i32) -> T,\r\n) -> T { todo!() }\r\n\r\npub fn tagged<'buf, 'read, T>(\r\n    r: &'read mut i32,\r\n    f: impl FnOnce(&mut &'read &'buf i32) -> T,\r\n) -> T {\r\n    next(r, move |e| inner(e, f))\r\n}\r\n\r\npub fn inner<'buf, 'read, T>(\r\n    r: &'read mut &&'buf i32,\r\n    f: impl FnOnce(&mut &'read &'buf i32) -> T,\r\n) -> T { todo!() }\r\n```\r\n\r\nThe current output is:\r\n\r\n```rust\r\nerror[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'buf` due to conflicting requirements\r\n  --> <source>:10:22\r\n   |\r\n10 |     next(r, move |e| inner(e, f))\r\n   |                      ^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the lifetime `'buf` as defined on the function body at 6:15...\r\n  --> <source>:6:15\r\n   |\r\n6  | pub fn tagged<'buf, 'read, T>(\r\n   |               ^^^^\r\nnote: ...but the lifetime must also be valid for the lifetime `'read` as defined on the function body at 6:21...\r\n  --> <source>:6:21\r\n   |\r\n6  | pub fn tagged<'buf, 'read, T>(\r\n   |                     ^^^^^\r\nnote: ...so that the types are compatible\r\n  --> <source>:10:22\r\n   |\r\n10 |     next(r, move |e| inner(e, f))\r\n   |                      ^^^^^\r\n   = note: expected `for<'r> FnOnce<(&'r mut &&i32,)>`\r\n              found `for<'r> FnOnce<(&'r mut &'read &'buf i32,)>`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0495`.\r\nCompiler returned: 1\r\n```\r\n\r\nI run into this (the \"bad variance diagonistic\") whenever I'm doing anything particularly difficult with lifetimes. Even though most people would say I'm a very advanced Rust user, this particular class of diagnostics is extremely time-consuming for me to unwind. This error always means one of two things:\r\n- I'm missing an explicit lifetime somewhere. The diagnostic provides no hints as to where it is and I need to hunt through the crate to find it.\r\n- The API I've designed is impossible to implement because it causes the borrow checker to prove a contradiction.\r\n\r\nBoth of these are pretty frustrating, and I have to use my personal heuristics to resolve them. I've honestly just gotten used to the pain and am only filing this because @estebank nudged me. I don't want to imagine how a newbie feels when they see this error.\r\n\r\nI don't have... obvious suggestions for improving the diagnostic, since I don't actually know how the current borrow checker implementation aggregates information. After all, it would be very hard for it to guess which lifetime I missed, since it would need to explore many more paths.\r\n\r\nHowever, there may be hope. The pretty-printed types are really unhelpful, which points to an underlying issue:\r\n```rust\r\n   = note: expected `for<'r> FnOnce<(&'r mut &&i32,)>`  // Lol what's &&i32?\r\n              found `for<'r> FnOnce<(&'r mut &'read &'buf i32,)>`\r\n```\r\nThere's a bunch of different lifetimes with similar names involved. Which `'buf` is it referring to? What are the anonymous lifetimes in `for<'r> FnOnce<(&'r mut &&i32,)>`? The compiler has clearly given these regions anonymous names, so it might be worth highlighting them with something like \"Call this region `'1`\" or similar, so that they can be printed in the error?\r\n\r\nPerhaps it might also be useful to add a note that lists out the incompatible constraints as a where clause, once we've given the lifetime inference variables names. It would be easier to parse at a glance than trying to build it up from prose.\r\n\r\nFinally, I wonder if it's helpful for the compiler to say \"btw, I can't do this reduction I wanted to make because this lifetime isn't covariant\".", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86910/timeline", "performed_via_github_app": null, "state_reason": null}