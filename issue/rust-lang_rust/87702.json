{"url": "https://api.github.com/repos/rust-lang/rust/issues/87702", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87702/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87702/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87702/events", "html_url": "https://github.com/rust-lang/rust/issues/87702", "id": 958270545, "node_id": "MDU6SXNzdWU5NTgyNzA1NDU=", "number": 87702, "title": "Which standard do `f32/f64::min/max` follow?", "user": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2139259423, "node_id": "MDU6TGFiZWwyMTM5MjU5NDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-floating-point", "name": "A-floating-point", "color": "f7e101", "default": false, "description": "Area: Floating point numbers and arithmetic"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-08-02T15:41:09Z", "updated_at": "2021-08-02T17:30:00Z", "closed_at": "2021-08-02T16:58:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been working on adding the new WebAssembly SIMD instructions to the `wide` crate, which is the most widely used crate for portable SIMD on stable Rust. As I finished up the implementation and ran the tests I noticed that various operations behave quite differently on the different architectures. In particular I ran across floating point min and max. Those have quite differing behavior when it comes to NaN handling and -0.0 / +0.0.\r\n\r\nWhen it comes to NaN there's three different strategies I've seen:\r\n - You can define the resulting value to always be NaN if either side is NaN. This is commonly referred to as NaN propagation.\r\n - You can define the resulting value to ignore NaN if it encounters it on either side and always choose the other side as the result. \r\n - You can do a fast implementation (a < b ? b : a) where you don't particularly treat NaN at all and just happen to either prefer the left or right hand side in that case.\r\n \r\n Ignoring all NaNs is defined in IEEE Std 754-2008 as `maxNum`:\r\n > maxNum(x, y) is the canonicalized number  y  if   x<y, x  if   y<x, the canonicalized number if one operand is a number and the other a quiet NaN. Otherwise it is either  x  or   y, canonicalized  (this means results might differ among implementations). When either x or y is a signalingNaN, then theresult is according to 6.2.\r\n \r\n Then there's two different strategies when it comes to handling -0.0 and +0.0:\r\n  - You can treat them as the same value and then either prefer returning the left hand side or the right hand side.\r\n  - You can treat -0.0 as smaller than +0.0\r\n  \r\n The IEEE Std 754-2008 allows the implementation to choose the behavior there. Not so much the IEEE Std 754-2019 which always requires -0.0 to be treated as smaller than +0.0. The 2019 standard defines the following two implementations:\r\n > maximum(x, y) is x if x>y, y if y>x, and a quiet NaN if either operand is a NaN, according to 6.2. For this operation, +0 compares greater than \u22120.  Otherwise (i.e., when  x=y and signs are the same) it is either x or y.\r\n \r\n > maximumNumber(x, y) is x if x>y, y if y>x, and the number if one operand is a number and the other is a NaN.  For this operation, +0 compares greater than \u22120.  If x=y and signs are the same it is either x or y. If both operands are NaNs, a quiet NaN is returned, according to 6.2.  If either operand is a signaling NaN, an invalid operation exception is signaled, but unless both operands are NaNs, the signaling NaN is otherwise ignored and not converted to a quiet NaN as stated in 6.2 for other operations.\r\n \r\nHere's a list I created of various languages and processor instructions and how their max implementations behave: [Survey of Floating Point Implementations for Maximum](https://gist.github.com/CryZe/30cc76f4629cb0846d5a9b8d13144649)\r\n \r\nRust's min and max seem to not follow the latest standard and instead -0.0 and +0.0 are treated as equal. I'd say this behavior is likely incidental as Rust seems to just call into libm. Considering Rust intends to have a specification / standard at some point, we probably would need to cut some ties to libm and specify which IEEE 754 standard Rust intends to use (the reference points to 2008 for now at least). I'm mostly raising this to get some discussion going to see what the plan is moving forward, as it likely makes sense to adopt the new standard at some point.", "closed_by": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87702/timeline", "performed_via_github_app": null, "state_reason": "completed"}