{"url": "https://api.github.com/repos/rust-lang/rust/issues/69069", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69069/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69069/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69069/events", "html_url": "https://github.com/rust-lang/rust/issues/69069", "id": 563397168, "node_id": "MDU6SXNzdWU1NjMzOTcxNjg=", "number": 69069, "title": "arbitrary self types causes unexpected error messages", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1472515079, "node_id": "MDU6TGFiZWwxNDcyNTE1MDc5", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-arbitrary_self_types", "name": "F-arbitrary_self_types", "color": "f9c0cc", "default": false, "description": "`#![feature(arbitrary_self_types)]`"}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-11T18:33:55Z", "updated_at": "2020-02-17T21:50:23Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This example:\r\n\r\n```rust\r\n#![feature(arbitrary_self_types)]\r\ntrait Test<T: core::ops::Deref<Target = Self>> {\r\n    fn is_some(self: T);\r\n}\r\n\r\nfn f() {\r\n    let x = Some(2);\r\n    if x.is_some() {\r\n        println!(\"Some\");\r\n    }\r\n}\r\n```\r\n[Playground link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=83f8fd48766d3bcd61212a70b6db86df)\r\n\r\ngives the error \r\n\r\n```\r\nerror[E0277]: the trait bound `std::option::Option<{integer}>: std::ops::Deref` is not satisfied\r\n --> src/lib.rs:8:10\r\n  |\r\n8 |     if x.is_some() {\r\n  |          ^^^^^^^ the trait `std::ops::Deref` is not implemented for `std::option::Option<{integer}>`\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:8:8\r\n  |\r\n8 |     if x.is_some() {\r\n  |        ^^^^^^^^^^^ expected `bool`, found `()`\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\n```\r\n\r\nrather than an error because the `Test` trait is not implemented.\r\n\r\nThis is presumably just a case where improved diagnostics would be good. The [inherent `is_some` method](https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some) winds up not triggering because it requires auto-ref rather than being passed \"by value\".\r\n\r\n_Originally posted by @tguser402 in https://github.com/rust-lang/rust/issues/66312#issuecomment-568805751_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69069/timeline", "performed_via_github_app": null, "state_reason": null}