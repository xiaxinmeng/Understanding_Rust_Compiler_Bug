{"url": "https://api.github.com/repos/rust-lang/rust/issues/55099", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55099/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55099/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55099/events", "html_url": "https://github.com/rust-lang/rust/issues/55099", "id": 370277082, "node_id": "MDU6SXNzdWUzNzAyNzcwODI=", "number": 55099, "title": "Incorrect inference of lifetime bound for existential type", "user": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 1472502130, "node_id": "MDU6TGFiZWwxNDcyNTAyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-type_alias_impl_trait", "name": "F-type_alias_impl_trait", "color": "f9c0cc", "default": false, "description": "`#[feature(type_alias_impl_trait)]`"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-15T17:59:12Z", "updated_at": "2020-03-20T19:02:30Z", "closed_at": "2020-03-20T19:02:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following code ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=05a628733369900fde16d8a122f5c52d)):\r\n```rust\r\nfn reply<'a, I: 'a>(_: I) -> impl Future<Item = (), Error = ()> + 'static {\r\n    // do something with argument\r\n    // then build future that does not borrow I\r\n    futures::future::ok(())\r\n}\r\n\r\nfn foo(foo: String) -> Box<Future<Item = String, Error = ()>> {\r\n    Box::new(reply(&foo).map(move |_| foo))\r\n}\r\n```\r\n\r\nThis code doesn't compile because `impl Trait` [assumes](https://github.com/rust-lang/rfcs/blob/master/text/1951-expand-impl-trait.md#assumption-2-treating-all-type-variables-as-in-scope-for-impl-trait-suffices-for-the-vast-majority-of-cases) that all type parameters are in scope for the concrete type. This [may](https://github.com/rust-lang/rust/issues/34511#issuecomment-383248062) get fixed eventually, but for the time being, we can work around it using `existential type` (rust-lang/rfcs#2071; [playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=05a628733369900fde16d8a122f5c52d)):\r\n\r\n```rust\r\n#![feature(existential_type)]\r\nexistential type Reply: Future<Item = (), Error = ()>;\r\n\r\nfn reply<'a, I: 'a>(_: I) -> Reply { futures::future::ok(()) }\r\n\r\nfn foo(foo: String) -> Box<Future<Item = String, Error = ()>> {\r\n    Box::new(reply(&foo).map(move |_| foo))\r\n}\r\n```\r\n\r\nHowever, this pattern does not compose. This example fails to compile ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=895b570d6f05bee2562f11fdfe9662bb)):\r\n\r\n```rust\r\n#![feature(existential_type)]\r\n\r\nstruct Foo<'a> {\r\n    x: &'a mut (),\r\n}\r\n\r\nexistential type F1: Future<Item = (), Error = ()>;\r\nexistential type F2: Future<Item = (), Error = ()>;\r\n\r\nimpl<'a> Foo<'a> {\r\n    fn foobar(&mut self) -> F1 {\r\n        futures::future::ok(())\r\n    }\r\n\r\n    fn reply<I>(&mut self, _: I) -> F2 {\r\n        self.foobar().and_then(move |_| futures::future::ok(()))\r\n    }\r\n}\r\n```\r\n\r\nwith the error\r\n\r\n```\r\nerror: non-defining existential type use in defining scope\r\n  --> src/lib.rs:19:40\r\n   |\r\n19 |       fn reply<I>(&mut self, _: I) -> F2 {\r\n   |  ________________________________________^\r\n20 | |         self.foobar().and_then(move |_| futures::future::ok(()))\r\n21 | |     }\r\n   | |_____^ lifetime `'a` is part of concrete type but not used in parameter list of existential type\r\n\r\nerror: type parameter `I` is part of concrete type but not used in parameter list for existential type\r\n  --> src/lib.rs:19:40\r\n   |\r\n19 |       fn reply<I>(&mut self, _: I) -> F2 {\r\n   |  ________________________________________^\r\n20 | |         self.foobar().and_then(move |_| futures::future::ok(()))\r\n21 | |     }\r\n   | |_____^\r\n```\r\n\r\nI'm not entirely sure _why_ this fails, but it seems like the code should be accepted?\r\n\r\n/cc @Nemo157", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55099/timeline", "performed_via_github_app": null, "state_reason": "completed"}