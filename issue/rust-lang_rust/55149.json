{"url": "https://api.github.com/repos/rust-lang/rust/issues/55149", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55149/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55149/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55149/events", "html_url": "https://github.com/rust-lang/rust/issues/55149", "id": 371104179, "node_id": "MDU6SXNzdWUzNzExMDQxNzk=", "number": 55149, "title": "Tracking issue for RFC 2514, \"Union initialization and Drop\"", "user": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89436934, "node_id": "MDU6TGFiZWw4OTQzNjkzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-approved", "name": "B-RFC-approved", "color": "d304cb", "default": false, "description": "Approved by a merged RFC but not yet implemented."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 433146169, "node_id": "MDU6TGFiZWw0MzMxNDYxNjk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-implemented", "name": "B-RFC-implemented", "color": "d304cb", "default": false, "description": "Approved by a merged RFC and implemented."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}, {"id": 943968375, "node_id": "MDU6TGFiZWw5NDM5NjgzNzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-close", "name": "disposition-close", "color": "dd0000", "default": false, "description": "This PR / issue is in PFCP or FCP with a disposition to close it."}, {"id": 1472541569, "node_id": "MDU6TGFiZWwxNDcyNTQxNTY5", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-untagged_unions", "name": "F-untagged_unions", "color": "f9c0cc", "default": false, "description": "`#![feature(untagged_unions)]`"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 34, "created_at": "2018-10-17T14:24:05Z", "updated_at": "2022-09-08T15:33:00Z", "closed_at": "2022-07-14T02:22:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a tracking issue for the RFC \"Union initialization and Drop\" (rust-lang/rfcs#2514).\r\n\r\nSuccessor of https://github.com/rust-lang/rust/issues/32836.\r\n\r\n**Steps:**\r\n\r\n- [x] Implement the RFC (Mentoring instructions: https://github.com/rust-lang/rust/issues/55149#issuecomment-435577496): https://github.com/rust-lang/rust/pull/62330\r\n- [ ] Adjust documentation ([see instructions on forge][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on forge][stabilization-guide])\r\n\r\n[stabilization-guide]: https://forge.rust-lang.org/stabilization-guide.html\r\n[doc-guide]: https://forge.rust-lang.org/stabilization-guide.html#updating-documentation\r\n\r\n**Unresolved questions:**\r\n\r\n - [x] There should be more tests in particular for all move-related behaviors ([1](https://github.com/rust-lang/rust/issues/32836#issuecomment-242511491), [2](https://github.com/rust-lang/rust/issues/32836#issuecomment-242800896), [3](https://github.com/rust-lang/rust/issues/32836#issuecomment-242814894), [4](https://github.com/rust-lang/rust/issues/32836#issuecomment-243841060)). Done in https://github.com/rust-lang/rust/pull/75559.\r\n\r\n- [x] Should we try to avoid the [`DerefMut`-related pitfall](https://github.com/rust-lang/rfcs/blob/master/text/2514-union-initialization-and-drop.md#potential-pitfalls-around-derefmut)?  And if yes, should we maybe try harder, e.g. lint against using `*` below a union type when describing a place?  That would make people write `let v = &mut u.f; *v = Vec::new();`.  It is not clear that this helps in terms of pointing out that an automatic drop may be happening. (Implementation at https://github.com/rust-lang/rust/pull/75584.)\r\n\r\n- [ ] We could allow moving out of a union field even if the union implements `Drop`.  That would have the effect of making the union considered uninitialized, i.e., it would not be dropped implicitly when it goes out of scope.  However, it might be useful to not let people do this accidentally.  The same effect can always be achieved by having a dropless union wrapped in a newtype `struct` with the desired `Drop`.\r\n\r\n- [ ] Should we allow `impl Copy for Union` even when the union has non-`Copy` fields? (Proposed [here](https://github.com/rust-lang/rust/issues/32836#issuecomment-242800896).)\r\n\r\n**Implementation history**\r\n* https://github.com/rust-lang/rust/pull/62330: union fields must be no-drop\r\n* https://github.com/rust-lang/rust/pull/75559: more tests for moving out of non-Copy union fields\r\n* https://github.com/rust-lang/rust/pull/75584: don't implicitly `DerefMut` in unions\r\n* https://github.com/rust-lang/rust/pull/77547: stabilize `ManuallyDrop<_>` union fields", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55149/reactions", "total_count": 6, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 3}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55149/timeline", "performed_via_github_app": null, "state_reason": "completed"}