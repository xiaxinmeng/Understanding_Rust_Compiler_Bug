{"url": "https://api.github.com/repos/rust-lang/rust/issues/98929", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98929/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98929/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98929/events", "html_url": "https://github.com/rust-lang/rust/issues/98929", "id": 1294223141, "node_id": "I_kwDOAAsO6M5NJEcl", "number": 98929, "title": "rustdoc: rich-text and visibility-aware formatting for constant values", "user": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 2406929537, "node_id": "MDU6TGFiZWwyNDA2OTI5NTM3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-rustdoc-ui", "name": "A-rustdoc-ui", "color": "f7e101", "default": false, "description": "Area: rustdoc UI (generated HTML)"}], "state": "open", "locked": false, "assignee": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2022-07-05T12:19:40Z", "updated_at": "2022-07-24T19:20:54Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While _types_ in rustdoc are richly formatted using HTML (most notably for hyperlinks to definitions),\r\n_constant expressions_ and _values_ do not enjoy any such treatment and are printed as plain text (or\r\nsometimes even entirely omitted from the documentation).\r\nWith the continuously growing language support for \u201c`const`\u201d (`const fn`, const generics, `adt_const_params`,\r\n`generic_const_exprs`, `const_trait_impl`) which allows ever-more-complex constant expressions in\r\nmore and more places, it seems very fitting to improve rustdoc's output to help users navigate this complexity.\r\n\r\nI propose the following:\r\n\r\n* We start showing the constant value of free const items no matter their type. At present, only integers, bools and string literals are displayed.\r\n* We try to use constant values as returned by `tcx.const_eval_poly` as much as possible for pretty-printing and only fall back on `hir::Expr` (unevaluated expressions) as a last resort. Currently for free and assoc. consts, rustdoc evaluates arbitrary const expressions of any type (arbitrary ADTs) but **throws away** the result if the type is not an integer (or similar) and instead prints the unevaluated expression.\r\n* We try to evaluate const _arguments_ and pretty-print the const value. Right now, we just print their unevaluated form, a `hir::Expr`.\r\n* Regarding the formatting / pretty-printing of const values ([`ConstValue`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/interpret/enum.ConstValue.html) / `ValTree`s eventually (?)):\r\n  * We print struct and enum literals (as one would expect). Examples: `S { f: 0 }`, `Ok(())`\r\n  * However, we also **hide private and `doc(hidden)`** fields.\r\n    In non-tuple structs, we skip those fields and add the symbol `..` (mirroring the syntax of struct patterns).\r\n    In tuple structs, we replace them with `_` (just how it's already done today in the code blocks at the top of tuple struct pages)\r\n  * We make paths and struct fields **hyperlinks** to their definition.\r\n  * We print a placeholder like `[/* N elements */]` for large arrays to not clutter the documentation\r\n  * We print a placeholder like maybe `/* large string */` for large strings\r\n  * ( Maybe we should also introduce a max-depth parameter similar to the one rustdoc has for types )\r\n\r\nUnfortunately rustdoc's current reliance on `const_eval_poly` means that in a quite a lot of cases \u2013 namely those where the const expr contains type or const parameters (including the implicit type parameter `Self`) \u2013, we aren't gonna get the benefits of this proposed richer pretty-printing since the evaluation will fail on those with the error _\u201ctoo generic\u201c_ and we'll have to fall back on printing the unevaluated `hir::Expr`. This is a known limitation of rustdoc and tracked in #82852.\r\n\r\nParts of this proposal aim to solve #97933 _properly_ whereas #98814 is but a hotfix.\r\nI have already partially implemented this proposal in a local patch that is yet to be published as a PR. You can get a visual taste of it below:\r\n\r\n| Stable Rustdoc Output | Nightly Rustdoc Output (#98814) | WIP Implementation of this Proposal |\r\n|---|---|---|\r\n| ![ppconst_stable](https://user-images.githubusercontent.com/14913065/177327525-0311ba8a-bff4-4063-be83-06cdfe7c3da2.png) | ![ppconst_after_hotfix](https://user-images.githubusercontent.com/14913065/177325706-984c77b8-c6d9-47f1-abd7-78a20bbe634c.png) | ![ppconst_linkified](https://user-images.githubusercontent.com/14913065/177325632-796f9f74-0edc-43ed-89c9-985e0157f712.png)  |\r\n\r\n@rustbot label T-rustdoc A-rustdoc-ui C-enhancement\r\n@rustbot claim\r\n\r\n<!-- TRIAGEBOT_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"fmease\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_END -->\r\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98929/timeline", "performed_via_github_app": null, "state_reason": null}