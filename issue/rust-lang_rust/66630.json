{"url": "https://api.github.com/repos/rust-lang/rust/issues/66630", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66630/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66630/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66630/events", "html_url": "https://github.com/rust-lang/rust/issues/66630", "id": 527153517, "node_id": "MDU6SXNzdWU1MjcxNTM1MTc=", "number": 66630, "title": "Using std::borrow::Borrow has sneaky consequences", "user": {"login": "joIivier", "id": 6048710, "node_id": "MDQ6VXNlcjYwNDg3MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6048710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joIivier", "html_url": "https://github.com/joIivier", "followers_url": "https://api.github.com/users/joIivier/followers", "following_url": "https://api.github.com/users/joIivier/following{/other_user}", "gists_url": "https://api.github.com/users/joIivier/gists{/gist_id}", "starred_url": "https://api.github.com/users/joIivier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joIivier/subscriptions", "organizations_url": "https://api.github.com/users/joIivier/orgs", "repos_url": "https://api.github.com/users/joIivier/repos", "events_url": "https://api.github.com/users/joIivier/events{/privacy}", "received_events_url": "https://api.github.com/users/joIivier/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234876, "node_id": "MDU6TGFiZWwyMzQ4NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-hard", "name": "E-hard", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Hard / a lot"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-22T11:54:13Z", "updated_at": "2019-11-22T12:38:31Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following playground that compiles fine:\r\nhttps://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=d735c0950cb1b25e8ff19e6a5c9d0445\r\n```\r\nuse std::sync::Mutex;\r\nuse std::cell::RefCell;\r\n//use std::borrow::Borrow;\r\n\r\nstruct A {\r\n    child: Mutex<RefCell<i32>>,\r\n}\r\n\r\nimpl A {\r\n    fn is_good(&self) -> bool {\r\n        let cell = self.child.lock().unwrap();\r\n        let opt_target = cell.borrow();\r\n        *opt_target > 1\r\n    }\r\n}\r\n\r\n\r\n\r\n```\r\nUncommenting the `use std::borrow::Borrow;` breaks it quite badly:\r\n```\r\nerror[E0369]: binary operation `>` cannot be applied to type `std::sync::MutexGuard<'_, std::cell::RefCell<i32>>`\r\n  --> src/lib.rs:13:21\r\n   |\r\n13 |         *opt_target > 1\r\n   |         ----------- ^ - {integer}\r\n   |         |\r\n   |         std::sync::MutexGuard<'_, std::cell::RefCell<i32>>\r\n   |\r\n   = note: an implementation of `std::cmp::PartialOrd` might be missing for `std::sync::MutexGuard<'_, std::cell::RefCell<i32>>`\r\n\r\n```\r\nThis problem does not appear when there is no `RefCell` inside the `Mutex`.\r\nThis creates confusion when the same function works in a module and not in another.\r\nEspecially when Borrow is not implemented directly by `Mutex` or `MutexGuard` it is quite hard to understand what happens here, I guess it is due to a blanket implementation since `RefCell<i32>` is `Sized`.\r\n\r\nMy main issue in this situation is that I spent a lot of time facing this compilation issue in a module whereas the same kind of code worked in multiple other modules. I had to comment/remove every other struct/impls/use in the module until I found the culprit. \r\nMaybe the error message could be improved to hint at traits in scope that could alter the expected behavior ?\r\n\r\nThe issue appeared on stable and nightly (rustc 1.41.0-nightly (53712f863 2019-11-21)).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66630/timeline", "performed_via_github_app": null, "state_reason": null}