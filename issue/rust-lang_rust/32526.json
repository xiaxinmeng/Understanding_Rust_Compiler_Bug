{"url": "https://api.github.com/repos/rust-lang/rust/issues/32526", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32526/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32526/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32526/events", "html_url": "https://github.com/rust-lang/rust/issues/32526", "id": 143809154, "node_id": "MDU6SXNzdWUxNDM4MDkxNTQ=", "number": 32526, "title": "Implement `append` for `BinaryHeap`", "user": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 219670472, "node_id": "MDU6TGFiZWwyMTk2NzA0NzI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/final-comment-period", "name": "final-comment-period", "color": "1e76d9", "default": false, "description": "In the final comment period and will be merged soon unless new substantive objections are raised."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-03-27T13:27:34Z", "updated_at": "2016-07-04T01:17:42Z", "closed_at": "2016-07-04T01:17:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This can be done in `O(n + m)` time by appending the underlying vectors and then using the build heap algorithm in the `From<Vec<T>>` impl. Note that in some circumstances this will perform worse than repeatedly `push`ing (as is done in `h1.extend(h2)`), because the time complexity of that approach is `O(m log (m + n))`. In both approaches, `append` should ensure that the larger of the two heaps acts as the \"destination\" of the merge in order to move as few elements as possible.\n\n`append` should use a heuristic to determine which approach to take. This should be based on the sizes of the two heaps, but may also incorporate the vectors' capacities.\n\nPseudo-code:\n\n``` rust\nuse std::mem::swap;\n\nfn shouldMergeWithBuildHeap<T>(v1: &Vec<T>, v2: &Vec<T>) -> bool { ... }\n\nimpl<T: Ord> BinaryHeap<T> {\n    pub fn append(&self, other: &mut Self) {\n        if other.is_empty() {\n            return;\n        }\n\n        if self.is_empty() {\n            swap(self, other);\n            return;\n        }\n\n        if self.len() < other.len() {\n            swap(self, other);\n        }\n\n        if shouldMergeWithBuildHeap(&self.data, &other.data) {\n            self.data.append(&mut other.data.append);\n            self.build_heap();\n        } else {\n            self.extend(other.drain());\n        }\n    }\n\n    fn build_heap(&mut self) {\n        let mut n = self.len() / 2;\n        while n > 0 {\n            n -= 1;\n            self.sift_down(n);\n        }\n    }\n}\n```\n\nFor now, a simple version that just `extend`s the smaller one into the larger one could suffice:\n\n``` rust\nimpl<T: Ord> BinaryHeap<T> {\n    pub fn append(&self, other: &mut Self) {\n        if other.is_empty() {\n            return;\n        }\n\n        if self.is_empty() {\n            swap(self, other);\n            return;\n        }\n\n        if self.len() < other.len() {\n            swap(self, other);\n        }\n\n        self.extend(other.drain());\n    }\n}\n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32526/timeline", "performed_via_github_app": null, "state_reason": "completed"}