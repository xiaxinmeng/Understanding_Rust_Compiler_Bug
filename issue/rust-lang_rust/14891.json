{"url": "https://api.github.com/repos/rust-lang/rust/issues/14891", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/14891/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/14891/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/14891/events", "html_url": "https://github.com/rust-lang/rust/issues/14891", "id": 35725685, "node_id": "MDU6SXNzdWUzNTcyNTY4NQ==", "number": 14891, "title": "json::PrettyEncoder won't encode some values", "user": {"login": "vojtechkral", "id": 424891, "node_id": "MDQ6VXNlcjQyNDg5MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/424891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vojtechkral", "html_url": "https://github.com/vojtechkral", "followers_url": "https://api.github.com/users/vojtechkral/followers", "following_url": "https://api.github.com/users/vojtechkral/following{/other_user}", "gists_url": "https://api.github.com/users/vojtechkral/gists{/gist_id}", "starred_url": "https://api.github.com/users/vojtechkral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vojtechkral/subscriptions", "organizations_url": "https://api.github.com/users/vojtechkral/orgs", "repos_url": "https://api.github.com/users/vojtechkral/repos", "events_url": "https://api.github.com/users/vojtechkral/events{/privacy}", "received_events_url": "https://api.github.com/users/vojtechkral/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-06-14T10:34:51Z", "updated_at": "2015-01-23T22:08:45Z", "closed_at": "2015-01-23T22:08:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\n  I ran into a problem with `json::PrettyEncoder`, it won't encode values with `emit_struct_field()` whereas the regular `json::Encoder` works just fine using exactly the same code.\n\nThis is the code to reproduce:\n\n```\nextern crate serialize;\n\nuse std::io::stdio;\nuse serialize::{json, Decodable, Encodable};\n\nmod Geo {\n    use std::fmt;\n    use serialize::{Decodable, Decoder, Encodable, Encoder};\n\n    pub struct Location {\n        name: String,\n        lat: f32,\n        lon: f32\n    }\n\n    impl Location {\n        pub fn new(name: &String, lat: f32, lon: f32) -> Location {\n            let mut loc = Location { name: name.clone(), lat: 0.0, lon: 0.0 };\n            loc.set_coords(lat, lon);\n            loc\n        }\n\n        pub fn set_coords(&mut self, lat: f32, lon: f32) {\n            self.lat = match lat {\n                -90.0..90.0 => lat, l if l > 90.0 => 90.0, _ => -90.0\n            };\n            self.lon = match lon {\n                -180.0..180.0 => lon, l if l > 180.0 => 180.0, _ => -180.0\n            };\n        }\n    }\n\n    impl fmt::Show for Location {\n        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n            let lat_h = if self.lat >= 0.0 {'N'} else {'S'};\n            let lon_h = if self.lat >= 0.0 {'E'} else {'W'};\n            write!(f, \"{}: {}\u00b0{}, {}\u00b0{}\", self.name,\n                   self.lat, lat_h, self.lon, lon_h)\n        }\n    }\n\n    impl<E, D: Decoder<E>> Decodable<D, E> for Location {\n        fn decode(d: &mut D) -> Result<Location, E> {\n            d.read_struct(\"\", 0, |d| {\n                let name: String = try!(d.read_struct_field(\"name\", 0, |d| Decodable::decode(d)));\n                let lat: f32 = try!(d.read_struct_field(\"lat\", 0, |d| Decodable::decode(d)));\n                let lon: f32 = try!(d.read_struct_field(\"lon\", 0, |d| Decodable::decode(d)));\n                Ok(Location::new(&name, lat, lon))\n            })\n        }\n    }\n\n    impl<E, S: Encoder<E>> Encodable<S, E> for Location {\n        fn encode(&self, s: &mut S) -> Result<(), E> {\n            s.emit_struct(\"a\", 0, |s| {\n                try!(s.emit_struct_field(\"name\", 0, |s| self.name.encode(s)));\n                try!(s.emit_struct_field(\"lat\",  1, |s| self.lat.encode(s)));\n                try!(s.emit_struct_field(\"lon\",  2, |s| self.lon.encode(s)));\n                Ok(())\n            })\n        }\n    }\n}\n\nstatic json: &'static str = \"[\n    {\\\"name\\\": \\\"Prague\\\", \\\"lat\\\": 50.082542, \\\"lon\\\": 14.425992},\n    {\\\"name\\\": \\\"London\\\", \\\"lat\\\": 51.507222, \\\"lon\\\": -0.1275},\n    {\\\"name\\\": \\\"Far far away\\\", \\\"lat\\\": 0.0, \\\"lon\\\": 9001.0}\n]\";\n\n\nfn main() {\n    let json_object = json::from_str(json);\n    let mut decoder = json::Decoder::new(json_object.unwrap());\n    let locations: Vec<Geo::Location> = Decodable::decode(&mut decoder).unwrap();\n\n    println!(\"Decoded locations:\");\n    for location in locations.iter() {\n        println!(\"  {}\", location);\n    }\n\n    let mut stdwriter = stdio::stdout();\n    {\n//         let mut encoder = json::Encoder::new(&mut stdwriter);\n        let mut encoder = json::PrettyEncoder::new(&mut stdwriter);\n        locations.encode(&mut encoder).unwrap();\n    }\n    stdwriter.write_line(\"\").unwrap();\n}\n```\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/14891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/14891/timeline", "performed_via_github_app": null, "state_reason": "completed"}