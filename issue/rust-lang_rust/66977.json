{"url": "https://api.github.com/repos/rust-lang/rust/issues/66977", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66977/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66977/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66977/events", "html_url": "https://github.com/rust-lang/rust/issues/66977", "id": 531628265, "node_id": "MDU6SXNzdWU1MzE2MjgyNjU=", "number": 66977, "title": "HashMap Entry lifetime and lookup issues", "user": {"login": "beefucurry", "id": 51015389, "node_id": "MDQ6VXNlcjUxMDE1Mzg5", "avatar_url": "https://avatars.githubusercontent.com/u/51015389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beefucurry", "html_url": "https://github.com/beefucurry", "followers_url": "https://api.github.com/users/beefucurry/followers", "following_url": "https://api.github.com/users/beefucurry/following{/other_user}", "gists_url": "https://api.github.com/users/beefucurry/gists{/gist_id}", "starred_url": "https://api.github.com/users/beefucurry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beefucurry/subscriptions", "organizations_url": "https://api.github.com/users/beefucurry/orgs", "repos_url": "https://api.github.com/users/beefucurry/repos", "events_url": "https://api.github.com/users/beefucurry/events{/privacy}", "received_events_url": "https://api.github.com/users/beefucurry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-03T00:28:35Z", "updated_at": "2020-10-30T18:02:21Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I think the lifetime on the get() function of std::collections::hash_map::OccupiedEntry isn't right.  It is currently defined as\r\n\r\n    impl<'a, K, V> OccupiedEntry<'a, K, V> {\r\n        pub fn get(&self) -> &V {}\r\n    }\r\n\r\nbut it should be \r\n\r\n     -> &'a V {}\r\n\r\nbecause the returned value is owned by the table, not by the Entry.  It looks like the difficulty for this is deeper in the source code, in https://github.com/rust-lang/hashbrown/blob/master/src/rustc_entry.rs it shows\r\n\r\n    pub struct RustcOccupiedEntry<'a, K, V> {\r\n        key: Option<K>,\r\n        elem: Bucket<(K, V)>,\r\n       table: &'a mut RawTable<(K, V)>,\r\n    }\r\n\r\n    pub fn get(&self) -> &V {\r\n        unsafe { &self.elem.as_ref().1 }\r\n    }\r\n\r\nThis has to be some kind of problem, as it is returning data from 'elem:Bucket', but elem is not requiring a lifetime 'a.  The Bucket datatype is just a wrapper around a const raw pointer with no lifetime annotations.  And then there is this piece of code\r\n\r\n    pub unsafe fn as_mut<'a>(&self) -> &'a mut T {\r\n        &mut *self.as_ptr()\r\n    }\r\n    pub unsafe fn as_ptr(&self) -> *mut T {\r\n        if mem::size_of::<T>() == 0 {\r\n            // Just return an arbitrary ZST pointer which is properly aligned\r\n            mem::align_of::<T>() as *mut T\r\n        } else {\r\n            self.ptr as *mut T\r\n        }\r\n    }\r\nwhich is derereferencing the 'ptr' inside the bucket , then assigning a lifetime of 'a to that pointer somehow (how is this even allowed?)  .  Anyway this issue seems really deep; so, one would almost certainly need a maintainer of that library to look at, casuals like me would certainly break something if I tried.  Maybe I'm misunderstanding OccupiedEntry, I thought it was just supposed to be a pointer into the table where the data goes so you can modify it without rehashing and redoing the lookup.  All this extra stuff seems bizarrely unnecessary.\r\n\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66977/timeline", "performed_via_github_app": null, "state_reason": null}