{"url": "https://api.github.com/repos/rust-lang/rust/issues/50213", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50213/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50213/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50213/events", "html_url": "https://github.com/rust-lang/rust/issues/50213", "id": 317498547, "node_id": "MDU6SXNzdWUzMTc0OTg1NDc=", "number": 50213, "title": "unsizing fails when associated types are involved", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-25T06:50:25Z", "updated_at": "2022-09-16T22:40:14Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am trying to implement something very generic, and in the course of doing so, am using trait associated types. That, in turn, apparently doesn't allow the unsizing rules to kick in.\r\n\r\nThe following compiles fine:\r\n```rust\r\n#![crate_type=\"lib\"]\r\nuse std::cell::UnsafeCell;\r\n\r\nstruct Foo<T: ?Sized>(UnsafeCell<T>);\r\n\r\nimpl<T> Foo<T> {\r\n    fn new(t: T) -> Foo<T> {\r\n        Foo(UnsafeCell::new(t))\r\n    }\r\n}\r\n\r\npub fn foo() {\r\n    let foo: &Foo<[i32]> = &Foo::new([1,2,3]);\r\n}\r\n```\r\n\r\nNow, adding some nesting in the above fails:\r\n```rust\r\n#![crate_type=\"lib\"]\r\nuse std::cell::UnsafeCell;\r\n\r\ntrait Wrapper {\r\n    type Type: ?Sized;\r\n}\r\n\r\nstruct Wrap<T: ?Sized>(T);\r\n\r\nimpl<T: ?Sized> Wrapper for Wrap<T> {\r\n    type Type = T;\r\n}\r\n\r\nstruct Foo<T: Wrapper + ?Sized>(UnsafeCell<T::Type>);\r\n\r\nimpl<T> Foo<Wrap<T>> {\r\n    fn new(t: T) -> Self {\r\n        Foo(UnsafeCell::new(t))\r\n    }\r\n}\r\n\r\npub fn foo() {\r\n    let foo: &Foo<Wrap<[i32]>> = &Foo::new([1,2,3]);\r\n}\r\n```\r\n\r\nThat fails with:\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:23:34\r\n   |\r\n23 |     let foo: &Foo<Wrap<[i32]>> = &Foo::new([1,2,3]);\r\n   |                                  ^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\r\n   |\r\n   = note: expected type `&Foo<Wrap<[i32]>>`\r\n              found type `&Foo<Wrap<[i32; 3]>>`\r\n```\r\n\r\nIn fact, it fails similarly with a simplified version that differs even less with the original:\r\n```rust\r\n#![crate_type=\"lib\"]\r\nuse std::cell::UnsafeCell;\r\n\r\ntrait Wrapper {\r\n    type Type: ?Sized;\r\n}\r\n\r\nimpl<T: ?Sized> Wrapper for T {\r\n    type Type = T;\r\n}\r\n\r\nstruct Foo<T: Wrapper + ?Sized>(UnsafeCell<T::Type>);\r\n\r\nimpl<T> Foo<T> {\r\n    fn new(t: T) -> Self {\r\n        Foo(UnsafeCell::new(t))\r\n    }\r\n}\r\n\r\npub fn foo() {\r\n    let foo: &Foo<[i32]> = &Foo::new([1,2,3]);\r\n}\r\n```\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:21:28\r\n   |\r\n21 |     let foo: &Foo<[i32]> = &Foo::new([1,2,3]);\r\n   |                            ^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\r\n   |\r\n   = note: expected type `&Foo<[i32]>`\r\n              found type `&Foo<[i32; 3]>`\r\n```\r\n\r\n(In fact, the `UnsafeCell` is irrelevant, and can be removed too)\r\n```rust\r\n#![crate_type=\"lib\"]\r\ntrait Wrapper {\r\n    type Type: ?Sized;\r\n}\r\n\r\nimpl<T: ?Sized> Wrapper for T {\r\n    type Type = T;\r\n}\r\n\r\nstruct Foo<T: Wrapper + ?Sized>(T::Type);\r\n\r\nimpl<T> Foo<T> {\r\n    fn new(t: T) -> Self {\r\n        Foo(t)\r\n    }\r\n}\r\n\r\npub fn foo() {\r\n    let foo: &Foo<[i32]> = &Foo::new([1,2,3]);\r\n}\r\n```\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:19:28\r\n   |\r\n19 |     let foo: &Foo<[i32]> = &Foo::new([1,2,3]);\r\n   |                            ^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\r\n   |\r\n   = note: expected type `&Foo<[i32]>`\r\n              found type `&Foo<[i32; 3]>`\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50213/timeline", "performed_via_github_app": null, "state_reason": null}