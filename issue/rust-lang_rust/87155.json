{"url": "https://api.github.com/repos/rust-lang/rust/issues/87155", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87155/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87155/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87155/events", "html_url": "https://github.com/rust-lang/rust/issues/87155", "id": 945271246, "node_id": "MDU6SXNzdWU5NDUyNzEyNDY=", "number": 87155, "title": "Tracking Issue for `Iterator::map_windows` (feature `iter_map_windows`)", "user": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-07-15T11:13:55Z", "updated_at": "2023-02-28T05:28:58Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(iter_map_windows)]`\r\n\r\nThis is a tracking issue for `Iterator::map_windows`:\r\n\r\n> Calls the given function `f` for each contiguous window of size `N` over `self` and returns an iterator over the outputs of `f`.\r\n>\r\n> In the following example, the closure is called three times with the arguments `&['a', 'b']`, `&['b', 'c']` and `&['c', 'd']` respectively.\r\n>\r\n> ```\r\n> #![feature(iter_map_windows)]\r\n>\r\n> let strings = \"abcd\".chars()\r\n>     .map_windows(|[x, y]| format!(\"{}+{}\", x, y))\r\n>     .collect::<Vec<String>>();\r\n>\r\n> assert_eq!(strings, vec![\"a+b\", \"b+c\", \"c+d\"]);\r\n> ```\r\n\r\n### Public API\r\n\r\n```rust\r\nimpl Iterator {\r\n    fn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N>\r\n    where\r\n        Self: Sized,\r\n        F: FnMut(&[Self::Item; N]) -> R;\r\n}\r\n\r\nstruct MapWindows<I: Iterator, F, const N: usize> { ... }\r\n\r\nimpl<I, F, R, const N: usize> Iterator for MapWindows<I, F, N>\r\nwhere\r\n    I: Iterator,\r\n    F: FnMut(&[I::Item; N]) -> R;\r\n\r\nimpl<I: Iterator + fmt::Debug, F, const N: usize> fmt::Debug for MapWindows<I, F, N>;\r\n```\r\n\r\n### Steps / History\r\n\r\n- [ ] ~~Implementation: #82413~~\r\n- [ ] Implementation: #94667\r\n- [x] Optimize with buffer of size `2 * N`\r\n- [ ] Any other iterator-related traits?\r\n    - [ ] `DoubleEndedIterator`\r\n    - [ ] `FusedIterator`\r\n    - [ ] `TrustedLen`\r\n- [ ] Compile fail on N=0, rather than panic\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n- `&[I::Item; N]` vs `ArrayView<'_, I::Item, N>` https://github.com/rust-lang/rust/issues/87155#issuecomment-1447603360", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87155/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87155/timeline", "performed_via_github_app": null, "state_reason": null}