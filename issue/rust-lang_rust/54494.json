{"url": "https://api.github.com/repos/rust-lang/rust/issues/54494", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54494/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54494/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54494/events", "html_url": "https://github.com/rust-lang/rust/issues/54494", "id": 362907031, "node_id": "MDU6SXNzdWUzNjI5MDcwMzE=", "number": 54494, "title": "File instance dropped before leaving scope", "user": {"login": "RandomInsano", "id": 71530, "node_id": "MDQ6VXNlcjcxNTMw", "avatar_url": "https://avatars.githubusercontent.com/u/71530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RandomInsano", "html_url": "https://github.com/RandomInsano", "followers_url": "https://api.github.com/users/RandomInsano/followers", "following_url": "https://api.github.com/users/RandomInsano/following{/other_user}", "gists_url": "https://api.github.com/users/RandomInsano/gists{/gist_id}", "starred_url": "https://api.github.com/users/RandomInsano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RandomInsano/subscriptions", "organizations_url": "https://api.github.com/users/RandomInsano/orgs", "repos_url": "https://api.github.com/users/RandomInsano/repos", "events_url": "https://api.github.com/users/RandomInsano/events{/privacy}", "received_events_url": "https://api.github.com/users/RandomInsano/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-09-23T02:20:30Z", "updated_at": "2018-10-17T04:10:38Z", "closed_at": "2018-10-16T12:34:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is tested on 1.26.0-nightly, but may affect other versions.\r\n\r\nI found that if I don't `let` the File instance returned from OpenOptions::open() the File object is drop()ed and the handle is closed before we go out of scope.\r\n\r\n```rust\r\n#[macro_use]\r\nextern crate nix;\r\nuse std::fs::OpenOptions;\r\nuse std::os::unix::io::AsRawFd;\r\n\r\nconst I2C_SLAVE: u16 = 0x0703;\r\n \r\nioctl_write_int_bad!(set_i2c_slave_address, I2C_SLAVE);\r\n \r\nfn main() {\r\n    println!(\"Let's try some i2c\");\r\n    let file_result = OpenOptions::new()\r\n        .read(true)\r\n        .write(true)\r\n        .open(\"/dev/i2c-0\");\r\n \r\n    assert!(file_result.is_ok());\r\n \r\n    let fd = file_result.unwrap().as_raw_fd();\r\n    println!(\"File descriptor: {}\", fd);\r\n \r\n    unsafe {\r\n        set_i2c_slave_address(fd, 0x34).unwrap();\r\n    }\r\n}\r\n```\r\n\r\nHere's the `strace` for the above:\r\n\r\n```\r\nopen(\"/dev/i2c-0\", O_RDWR|O_LARGEFILE|O_CLOEXEC) = 3\r\nioctl(3, FIOCLEX)                       = 0\r\nclose(3)                                = 0\r\nwrite(1, \"File descriptor: 3\\n\", 19File descriptor: 3\r\n)    = 19\r\nioctl(3, 0x703, 0x34)                   = -1 EBADF (Bad file descriptor)\r\n```\r\n\r\nShould objects be dropped before the scope ends if they aren't used? While it makes a certain amount of sense, this was a hard paper cut for me doing some low-level work.", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54494/timeline", "performed_via_github_app": null, "state_reason": "completed"}