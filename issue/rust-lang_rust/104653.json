{"url": "https://api.github.com/repos/rust-lang/rust/issues/104653", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104653/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104653/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104653/events", "html_url": "https://github.com/rust-lang/rust/issues/104653", "id": 1457059761, "node_id": "I_kwDOAAsO6M5W2Pex", "number": 104653, "title": "rustc non-exhaustive patterns: Misleading error message when `match` arm uses `if` over a general pattern", "user": {"login": "LeoniePhiline", "id": 22329650, "node_id": "MDQ6VXNlcjIyMzI5NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/22329650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoniePhiline", "html_url": "https://github.com/LeoniePhiline", "followers_url": "https://api.github.com/users/LeoniePhiline/followers", "following_url": "https://api.github.com/users/LeoniePhiline/following{/other_user}", "gists_url": "https://api.github.com/users/LeoniePhiline/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoniePhiline/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoniePhiline/subscriptions", "organizations_url": "https://api.github.com/users/LeoniePhiline/orgs", "repos_url": "https://api.github.com/users/LeoniePhiline/repos", "events_url": "https://api.github.com/users/LeoniePhiline/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoniePhiline/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-11-20T21:52:30Z", "updated_at": "2022-11-20T21:54:55Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=f8368327e56743a1f798a6086383804d\r\n\r\n```rust\r\nfn main() {\r\n    let some_condition = true;\r\n    let some_option: Option<u8> = None;\r\n\r\n    let _res = match some_option {\r\n        Some(val) if some_condition => val,\r\n        None => 0,\r\n    };\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0004]](https://doc.rust-lang.org/stable/error-index.html#E0004): non-exhaustive patterns: `Some(_)` not covered\r\n --> src/main.rs:5:22\r\n  |\r\n5 |     let _res = match some_option {\r\n  |                      ^^^^^^^^^^^ pattern `Some(_)` not covered\r\n  |\r\nnote: `Option<u8>` defined here\r\n  = note: the matched value is of type `Option<u8>`\r\nhelp: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\r\n  |\r\n7 ~         None => 0,\r\n8 ~         Some(_) => todo!(),\r\n  |\r\n\r\nFor more information about this error, try `rustc --explain E0004`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nThe output might rather look like something akin to:\r\n\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0004]](https://doc.rust-lang.org/stable/error-index.html#E0004): non-exhaustive patterns: `Some(val) if !some_condition` not covered\r\n --> src/main.rs:5:22\r\n  |\r\n5 |     let _res = match some_option {\r\n  |                      ^^^^^^^^^^^ pattern `Some(val) if !some_condition` not covered\r\n  |\r\nnote: `Option<u8>` defined here\r\n  = note: the matched value is of type `Option<u8>`\r\n  = note: match arms are evaluated from top to bottom. \r\n  = note: instead of negating the condition of the previous match arm, just match without it to cover other cases\r\nhelp: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\r\n  |\r\n7 ~         Some(val) => todo!(),\r\n8 ~         None => 0,\r\n  |\r\n\r\nFor more information about this error, try `rustc --explain E0004`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\nThe main pattern `Some(val)` is general and matches identical to `Some(_)`.\r\nThe compiler should point to the `match` branch's `if` condition and explain how to match cases not covered by the initial pattern due to the `if` additional condition.\r\n\r\nThe compiler is misleading by indicating the `Some(val)` pattern did not match in all cases - although the restraint lies in the added `if` - and suggesting `Some(_)` to match all other patterns. The additional `if` condition is entirely ignored.\r\n\r\nIdeally, the compiler should suggest two variants:\r\n\r\n```rust\r\nfn main() {\r\n    let some_condition = true;\r\n    let some_option: Option<u8> = None;\r\n\r\n    let _res = match some_option {\r\n        Some(val) if some_condition => val,\r\n        Some(val) => todo!(),\r\n        None => 0,\r\n    };\r\n}\r\n```\r\n\r\nAnd:\r\n```rust\r\nfn main() {\r\n    let some_condition = true;\r\n    let some_option: Option<u8> = None;\r\n\r\n    let _res = match some_option {\r\n        Some(val) if some_condition => val,\r\n        _ => 0,\r\n    };\r\n}\r\n```\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n\r\nThe output on Nightly is identical to the output on Stable.\r\n\r\n---\r\n\r\nMay be related: https://github.com/rust-lang/rust/issues/93611", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104653/timeline", "performed_via_github_app": null, "state_reason": null}