{"url": "https://api.github.com/repos/rust-lang/rust/issues/101897", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101897/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101897/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101897/events", "html_url": "https://github.com/rust-lang/rust/issues/101897", "id": 1375892930, "node_id": "I_kwDOAAsO6M5SAnXC", "number": 101897, "title": "TAIT: Compiler struggles to infer the type", "user": {"login": "toiglak", "id": 37531387, "node_id": "MDQ6VXNlcjM3NTMxMzg3", "avatar_url": "https://avatars.githubusercontent.com/u/37531387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toiglak", "html_url": "https://github.com/toiglak", "followers_url": "https://api.github.com/users/toiglak/followers", "following_url": "https://api.github.com/users/toiglak/following{/other_user}", "gists_url": "https://api.github.com/users/toiglak/gists{/gist_id}", "starred_url": "https://api.github.com/users/toiglak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toiglak/subscriptions", "organizations_url": "https://api.github.com/users/toiglak/orgs", "repos_url": "https://api.github.com/users/toiglak/repos", "events_url": "https://api.github.com/users/toiglak/events{/privacy}", "received_events_url": "https://api.github.com/users/toiglak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472502130, "node_id": "MDU6TGFiZWwxNDcyNTAyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-type_alias_impl_trait", "name": "F-type_alias_impl_trait", "color": "f9c0cc", "default": false, "description": "`#[feature(type_alias_impl_trait)]`"}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-09-16T12:39:11Z", "updated_at": "2022-10-30T21:21:12Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#![feature(type_alias_impl_trait)]\r\n\r\ntrait Foo {}\r\n\r\nimpl<T: Foo> Foo for &T {}\r\n\r\ntrait Bar {\r\n    // I need this associated type to be implemented separately.\r\n    // This is why I didn't put it inside `Baz` definition.\r\n    type Bar<'a>: Foo;\r\n}\r\n\r\ntrait Baz: Bar {\r\n    fn baz<'a>(&'a self) -> Self::Bar<'a>;\r\n}\r\n\r\n// Problem:\r\n\r\nstruct Qux<T: Foo> {\r\n    field: T,\r\n}\r\n\r\nimpl<T: Foo> Bar for Qux<T> {\r\n    type Bar<'a> = impl Foo + 'a; // Error: unconstrained opaque type.\r\n                                  // `Bar` must be used in combination with a concrete type within\r\n                                  // the same module.\r\n}\r\n\r\nimpl<T: Foo> Baz for Qux<T> {\r\n    fn baz<'a>(&'a self) -> Self::Bar<'a> {\r\n        &self.field // Error: expected opaque type `<Qux<T> as Bar>::Bar<'a>`.\r\n                    //        found reference `&T`\r\n    }\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nI got the exact errors visible in the comments.\r\nI expected this to compile, but it didn't.\r\n\r\nI found a following workaround:\r\n\r\n```rust\r\ntrait Bar {\r\n    type Bar<'a>: Foo where Self: 'a; // <--\r\n}\r\n\r\n// ...\r\n\r\nstruct Qux<T: Foo> {\r\n    field: T,\r\n}\r\n\r\ntype Temp<'a, T: Foo + 'a> = impl Foo + 'a; // <--\r\n\r\nimpl<T: Foo> Bar for Qux<T> {\r\n    type Bar<'a> = Temp<'a, T> where Self : 'a; // <--\r\n}\r\n\r\nimpl<T: Foo> Baz for Qux<T> {\r\n    fn baz<'a>(&'a self) -> Self::Bar<'a> {\r\n        &self.field\r\n    }\r\n}\r\n```\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.65.0-nightly (cf9ed0dd5 2022-09-15)\r\nbinary: rustc\r\ncommit-hash: cf9ed0dd5836201843d28bbad50abfbe1913af2a\r\ncommit-date: 2022-09-15\r\nhost: aarch64-apple-darwin\r\nrelease: 1.65.0-nightly\r\nLLVM version: 15.0.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101897/timeline", "performed_via_github_app": null, "state_reason": null}