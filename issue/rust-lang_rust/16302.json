{"url": "https://api.github.com/repos/rust-lang/rust/issues/16302", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/16302/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/16302/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/16302/events", "html_url": "https://github.com/rust-lang/rust/issues/16302", "id": 39627653, "node_id": "MDU6SXNzdWUzOTYyNzY1Mw==", "number": 16302, "title": "Playpen breaks on large files", "user": {"login": "kvark", "id": 107301, "node_id": "MDQ6VXNlcjEwNzMwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/107301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvark", "html_url": "https://github.com/kvark", "followers_url": "https://api.github.com/users/kvark/followers", "following_url": "https://api.github.com/users/kvark/following{/other_user}", "gists_url": "https://api.github.com/users/kvark/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvark/subscriptions", "organizations_url": "https://api.github.com/users/kvark/orgs", "repos_url": "https://api.github.com/users/kvark/repos", "events_url": "https://api.github.com/users/kvark/events{/privacy}", "received_events_url": "https://api.github.com/users/kvark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-08-06T14:41:57Z", "updated_at": "2014-08-06T14:43:10Z", "closed_at": "2014-08-06T14:43:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Steps to reproduce.\n1. copy the source into play.rust-lang.org\n2. build - should be ok\n3. remove line 122 (empty line)\n4. build - observe errors\n\n``` rust\n#![feature(macro_rules)]\n\n#[macro_export]\nmacro_rules! derive_system {\n    ($system:ty . $field:ident [ $component:ty ]) => {\n        impl System<$component> for $system {\n            fn add_component(&mut self, c: $component) -> Id<$component> {\n                self.$field.add_component(c)\n            }\n            fn get_component(&self, id: Id<$component>) -> &$component {\n                self.$field.get_component(id)\n            }\n            fn mut_component(&mut self, id: Id<$component>) -> &mut $component {\n                self.$field.mut_component(id)\n            }\n        }\n    }\n}\n\n#[macro_export]\nmacro_rules! world {\n    ($($name:ident : $system:ty [ $component:ty ],)*) => {\n        #[deriving(Clone, PartialEq, Show)]\n        pub struct Id<S>(uint);\n        pub type EntityId = uint;\n\n        pub trait System<T> {\n            fn add_component(&mut self, T) -> Id<T>;\n            fn get_component(&self, Id<T>) -> &T;\n            fn mut_component(&mut self, Id<T>) -> &mut T;\n        }\n\n        impl<T> System<T> for Vec<T> {\n            fn add_component(&mut self, t: T) -> Id<T> {\n                self.push(t);\n                Id(self.len() - 1)\n            }\n            fn get_component(&self, id: Id<T>) -> &T {\n                let Id(h) = id;\n                &self[h]\n            }\n            fn mut_component(&mut self, id: Id<T>) -> &mut T {\n                let Id(h) = id;\n                self.get_mut(h)\n            }\n        }\n\n        /// A collection of pointers to components\n        pub struct Entity<T> {\n            user_data: T,\n            $(\n                pub $name: Option<Id<$component>>,\n            )*\n        }\n        /// A collection of systems\n        pub struct SystemHub {\n            $(\n                pub $name: $system,\n            )*\n        }\n        /// World has all the entities and systems\n        pub struct World<T> {\n            entities: Vec<Entity<T>>,\n            pub systems: SystemHub,\n        }\n        /// Component add() wrapper\n        pub struct Adder<'a, T> {\n            entity: &'a mut Entity<T>,\n            hub: &'a mut SystemHub,\n        }\n        impl<'a, T> Adder<'a, T> {\n            $(\n                pub fn $name(&mut self, value: $component) {\n                    debug_assert!(self.entity.$name.is_none());\n                    let id = self.hub.$name.add_component(value);\n                    self.entity.$name = Some(id);\n                }\n            )*\n        }\n        /// Component get() wrapper\n        pub struct Getter<'a, T> {\n            entity: &'a Entity<T>,\n            hub: &'a SystemHub,\n        }\n        impl<'a, T> Getter<'a, T> {\n            pub fn user_data(&self) -> &T {\n                &self.entity.user_data\n            }\n            $(\n                pub fn $name(&self) -> &$component {\n                    let id = self.entity.$name.unwrap();\n                    self.hub.$name.get_component(id)\n                }\n            )*\n        }\n        /// Component change() wrapper\n        pub struct Changer<'a, T> {\n            entity: &'a mut Entity<T>,\n            hub: &'a mut SystemHub,\n        }\n        impl <'a, T> Changer<'a, T> {\n            pub fn user_data(&mut self) -> &mut T {\n                &mut self.entity.user_data\n            }\n            $(\n                pub fn $name(&mut self) -> &mut $component {\n                    let id = self.entity.$name.unwrap();\n                    self.hub.$name.mut_component(id)\n                }\n            )*\n        }\n        /// World implementation\n        impl<T> World<T> {\n            pub fn new($($name : $system),*) -> World<T> {\n                World {\n                    entities: Vec::new(),\n                    systems: SystemHub {\n                        $($name : $name,)*\n                    }\n                }\n            }\n\n            pub fn add<'a>(&'a mut self, eid: EntityId) -> Adder<'a, T> {\n                Adder {\n                    entity: self.entities.get_mut(eid),\n                    hub: &mut self.systems,\n                }\n            }\n            pub fn get<'a>(&'a self, eid: EntityId) -> Getter<'a, T> {\n                Getter {\n                    entity: &self.entities[eid],\n                    hub: &self.systems,\n                }\n            }\n            pub fn change<'a>(&'a mut self, eid: EntityId) -> Changer<'a, T> {\n                Changer {\n                    entity: self.entities.get_mut(eid),\n                    hub: &mut self.systems,\n                }\n            }\n        }\n    }\n}\n\nfn main(){}\n```\n\nErrors I'm getting:\n\n```\n<anon>:21:20: 21:21 note: Did you mean to close this delimiter?\n<anon>:21 macro_rules! world {\n                             ^\n<anon>:22:58: 22:59 note: Did you mean to close this delimiter?\n<anon>:22     ($($name:ident : $system:ty [ $component:ty ],)*) => {\n                                                                   ^\n<anon>:113:26: 113:27 note: Did you mean to close this delimiter?\n<anon>:113         impl<T> World<T> {\n                                    ^\n<anon>:128:27: 128:28 note: Did you mean to close this delimiter?\n<anon>:128             pub fn get<'a>(&'a self, eid: Entity\n                                     ^\n<anon>:128:49: 128:50 error: this file contains an un-closed delimiter \n<anon>:128             pub fn get<'a>(&'a self, eid: Entity\n                                                           ^\nplaypen: application terminated with error code 101\n```\n", "closed_by": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/16302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/16302/timeline", "performed_via_github_app": null, "state_reason": "completed"}