{"url": "https://api.github.com/repos/rust-lang/rust/issues/71050", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71050/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71050/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71050/events", "html_url": "https://github.com/rust-lang/rust/issues/71050", "id": 598415682, "node_id": "MDU6SXNzdWU1OTg0MTU2ODI=", "number": 71050, "title": "[Nightly] internal compiler error: unexpected panic", "user": {"login": "Skarlett", "id": 3759687, "node_id": "MDQ6VXNlcjM3NTk2ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3759687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Skarlett", "html_url": "https://github.com/Skarlett", "followers_url": "https://api.github.com/users/Skarlett/followers", "following_url": "https://api.github.com/users/Skarlett/following{/other_user}", "gists_url": "https://api.github.com/users/Skarlett/gists{/gist_id}", "starred_url": "https://api.github.com/users/Skarlett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Skarlett/subscriptions", "organizations_url": "https://api.github.com/users/Skarlett/orgs", "repos_url": "https://api.github.com/users/Skarlett/repos", "events_url": "https://api.github.com/users/Skarlett/events{/privacy}", "received_events_url": "https://api.github.com/users/Skarlett/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-12T05:37:12Z", "updated_at": "2020-04-12T20:29:57Z", "closed_at": "2020-04-12T20:28:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Short summary: \r\n\r\nThis code holds a HashMap that contains \"jobs\", pushes them to be executed in `tokio::spawn` and sends the return value into mspc::channel (Tokio), finally it produces more jobs, and returns them from the `JoinHandle` to be appended back into the original HashMap mentioned.\r\n\r\n\r\nI expected rust to let me know if this proceedure is legal (Appears so) by running `cargo check`. It returns a compiler Error\r\n\r\nEDIT: Corrected summary\r\n\r\n \r\n```rust\r\n\r\nuse std::{\r\n    time::{Instant, Duration},\r\n    collections::HashMap,\r\n};\r\n\r\nuse tokio::{\r\n    task::JoinHandle,\r\n    sync::mpsc\r\n};\r\n\r\nuse async_trait::async_trait;\r\n\r\n\r\n// Command run on (CRON)\r\n#[async_trait]\r\npub trait CRON<R>: Sized {\r\n    /// Run function, and then append to parent if more jobs are needed\r\n    async fn exec(self) -> (R, Vec<Self>);\r\n    /// check if command should be ran\r\n    fn check(&self) -> bool;\r\n}\r\n\r\n\r\npub struct Scheduler<T, R>\r\n{\r\n    val_tx: mpsc::Sender<R>,\r\n    commands: HashMap<uuid::Uuid, T>,\r\n    handles: Vec<JoinHandle<Vec<T>>>\r\n}\r\n\r\nimpl<T, R> Scheduler<T, R>\r\nwhere\r\n    R: Sync + Send + Copy + 'static,\r\n    T: CRON<R> + Sync + Send + 'static,\r\n{\r\n    // COMPILER ERROR - Start \r\n    fn run_tasks(&mut self) {\r\n        let commands = self.commands.clone();\r\n\r\n        for (id, command) in commands {\r\n            if command.check() {       \r\n                let mut vtx = self.val_tx.clone();\r\n\r\n                match self.commands.remove(&id) {\r\n                    Some(job) => self.handles.push(\r\n                        tokio::spawn(async move {\r\n                            let (v, jobs) = job.exec().await;\r\n                            vtx.send(v).await;\r\n                            jobs\r\n                    })),\r\n                    \r\n                    None => {} // Add error handle?\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // COMPILER ERROR - End\r\n    fn new() -> (Self, mpsc::Receiver<R>) {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\n\r\nstruct A {}\r\n\r\n#[async_trait]\r\nimpl CRON<()> for A {\r\n    async fn exec(self) -> ((), Vec<Self>) {\r\n        ((), vec![])\r\n    }\r\n\r\n    fn check(&self) -> bool {\r\n        true\r\n    }\r\n}\r\n\r\n```\r\n\r\n```\r\nthread 'rustc' panicked at 'called `Option::unwrap()` on a `None` value', src/librustc_typeck/check/method/suggest.rs:550:46\r\n\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/libunwind.rs:86\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:78\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1053\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1428\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:204\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:224\r\n  10: rustc_driver::report_ice\r\n  11: <alloc::boxed::Box<F> as core::ops::function::Fn<A>>::call\r\n             at /rustc/75cf41afb468152611212271bae026948cd3ba46/src/liballoc/boxed.rs:1031\r\n  12: proc_macro::bridge::client::<impl proc_macro::bridge::Bridge>::enter::{{closure}}::{{closure}}\r\n             at /rustc/75cf41afb468152611212271bae026948cd3ba46/src/libproc_macro/bridge/client.rs:305\r\n  13: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:474\r\n  14: rust_begin_unwind\r\n             at src/libstd/panicking.rs:378\r\n  15: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:85\r\n  16: core::panicking::panic\r\n             at src/libcore/panicking.rs:52\r\n  17: core::ops::function::impls::<impl core::ops::function::FnMut<A> for &mut F>::call_mut\r\n  18: <alloc::vec::Vec<T> as alloc::vec::SpecExtend<T,I>>::from_iter\r\n  19: rustc_typeck::check::method::suggest::<impl rustc_typeck::check::FnCtxt>::report_method_error\r\n  20: rustc_typeck::check::expr::<impl rustc_typeck::check::FnCtxt>::check_expr_kind\r\n  21: rustc_typeck::check::expr::<impl rustc_typeck::check::FnCtxt>::check_expr_with_expectation_and_needs\r\n  22: rustc_typeck::check::expr::<impl rustc_typeck::check::FnCtxt>::check_expr_coercable_to_type\r\n  23: rustc_typeck::check::FnCtxt::check_decl_local\r\n  24: rustc_typeck::check::FnCtxt::check_stmt\r\n  25: rustc_typeck::check::FnCtxt::check_block_with_expected\r\n  26: rustc_typeck::check::expr::<impl rustc_typeck::check::FnCtxt>::check_expr_kind\r\n  27: rustc_typeck::check::expr::<impl rustc_typeck::check::FnCtxt>::check_expr_with_expectation_and_needs\r\n  28: rustc_typeck::check::expr::<impl rustc_typeck::check::FnCtxt>::check_return_expr\r\n  29: rustc_typeck::check::check_fn\r\n  30: rustc::ty::context::GlobalCtxt::enter_local\r\n  31: rustc_typeck::check::typeck_tables_of\r\n  32: rustc::ty::query::__query_compute::typeck_tables_of\r\n  33: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::typeck_tables_of>::compute\r\n  34: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  35: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  36: rustc_typeck::check::typeck_tables_of\r\n  37: rustc::ty::query::__query_compute::typeck_tables_of\r\n  38: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::typeck_tables_of>::compute\r\n  39: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  40: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  41: rustc_typeck::collect::type_of::type_of\r\n  42: rustc::ty::query::__query_compute::type_of\r\n  43: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::type_of>::compute\r\n  44: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  45: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  46: rustc_hir::intravisit::walk_expr\r\n  47: rustc_hir::intravisit::walk_expr\r\n  48: rustc_hir::intravisit::walk_expr\r\n  49: rustc_hir::intravisit::walk_expr\r\n  50: rustc_hir::intravisit::walk_expr\r\n  51: rustc_hir::intravisit::walk_block\r\n  52: rustc_hir::intravisit::walk_expr\r\n  53: <rustc_typeck::collect::CollectItemTypesVisitor as rustc_hir::intravisit::Visitor>::visit_impl_item\r\n  54: rustc::hir::map::Map::visit_item_likes_in_module\r\n  55: rustc_typeck::collect::collect_mod_item_types\r\n  56: rustc::ty::query::__query_compute::collect_mod_item_types\r\n  57: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::collect_mod_item_types>::compute\r\n  58: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  59: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  60: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::ensure_query\r\n  61: rustc_typeck::check_crate\r\n  62: rustc_interface::passes::analysis\r\n  63: rustc::ty::query::__query_compute::analysis\r\n  64: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  65: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  66: rustc::ty::context::tls::enter_global\r\n  67: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  68: rustc_ast::attr::with_globals\r\n```\r\n```\r\nquery stack during panic:\r\n#0 [typeck_tables_of] type-checking `scheduler::manager::Scheduler::<T, R>::run_tasks`\r\n#1 [typeck_item_bodies] type-checking all item bodies\r\n#2 [analysis] running analysis passes on this crate\r\nend of query stack\r\n```\r\n\r\n\r\n# Meta\r\nrustc 1.43.0-nightly (75cf41afb 2020-03-04)\r\nbinary: rustc\r\ncommit-hash: 75cf41afb468152611212271bae026948cd3ba46\r\ncommit-date: 2020-03-04\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.43.0-nightly\r\nLLVM version: 9.0", "closed_by": {"login": "Skarlett", "id": 3759687, "node_id": "MDQ6VXNlcjM3NTk2ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3759687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Skarlett", "html_url": "https://github.com/Skarlett", "followers_url": "https://api.github.com/users/Skarlett/followers", "following_url": "https://api.github.com/users/Skarlett/following{/other_user}", "gists_url": "https://api.github.com/users/Skarlett/gists{/gist_id}", "starred_url": "https://api.github.com/users/Skarlett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Skarlett/subscriptions", "organizations_url": "https://api.github.com/users/Skarlett/orgs", "repos_url": "https://api.github.com/users/Skarlett/repos", "events_url": "https://api.github.com/users/Skarlett/events{/privacy}", "received_events_url": "https://api.github.com/users/Skarlett/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71050/timeline", "performed_via_github_app": null, "state_reason": "completed"}