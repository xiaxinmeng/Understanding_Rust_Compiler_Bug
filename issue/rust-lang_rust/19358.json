{"url": "https://api.github.com/repos/rust-lang/rust/issues/19358", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19358/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19358/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19358/events", "html_url": "https://github.com/rust-lang/rust/issues/19358", "id": 50292921, "node_id": "MDU6SXNzdWU1MDI5MjkyMQ==", "number": 19358, "title": "`#[deriving(..)]` doesn't work on structs that specify their bounds using where clauses", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-11-27T13:46:26Z", "updated_at": "2014-12-17T23:43:22Z", "closed_at": "2014-12-17T23:43:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### STR\n\n``` rust\ntrait Trait {}\n\n// OK\n#[deriving(Show)]\nstruct Foo<T: Trait> {\n    foo: T,\n}\n\n#[deriving(Show)]\n//~^ error: the trait `Trait` is not implemented for the type `T`\nstruct Bar<T> where T: Trait {\n    bar: T,\n}\n\nfn main() {}\n```\n### Output\n\nIf you check the `--pretty=expanded` output,  you'll notice the `T: Trait` bound is missing in the `Bar` case.\n\n``` rust\n// OK\nstruct Foo<T: Trait> {\n    foo: T,\n}\n#[automatically_derived]\nimpl <T: ::std::fmt::Show + Trait> ::std::fmt::Show for Foo<T> {\n    fn fmt(&self, __arg_0: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n        match *self {\n            Foo { foo: ref __self_0_0 } =>\n            match (&(*__self_0_0),) {\n                (__arg0,) => {\n                    #[inline]\n                    #[allow(dead_code)]\n                    static __STATIC_FMTSTR: &'static [&'static str] =\n                        &[\"Foo { foo: \", \" }\"];\n                    let __args_vec =\n                        &[::std::fmt::argument(::std::fmt::Show::fmt,\n                                               __arg0)];\n                    let __args =\n                        unsafe {\n                            ::std::fmt::Arguments::new(__STATIC_FMTSTR,\n                                                       __args_vec)\n                        };\n                    __arg_0.write_fmt(&__args)\n                }\n            },\n        }\n    }\n}\n\n//~^ error: the trait `Trait` is not implemented for the type `T`\nstruct Bar<T> {\n    bar: T,\n}\n#[automatically_derived]\nimpl <T: ::std::fmt::Show> ::std::fmt::Show for Bar<T> {\n    fn fmt(&self, __arg_0: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n        match *self {\n            Bar { bar: ref __self_0_0 } =>\n            match (&(*__self_0_0),) {\n                (__arg0,) => {\n                    #[inline]\n                    #[allow(dead_code)]\n                    static __STATIC_FMTSTR: &'static [&'static str] =\n                        &[\"Bar { bar: \", \" }\"];\n                    let __args_vec =\n                        &[::std::fmt::argument(::std::fmt::Show::fmt,\n                                               __arg0)];\n                    let __args =\n                        unsafe {\n                            ::std::fmt::Arguments::new(__STATIC_FMTSTR,\n                                                       __args_vec)\n                        };\n                    __arg_0.write_fmt(&__args)\n                }\n            },\n        }\n    }\n}\n\nfn main() { }\n```\n### Version\n\n``` rust\nrustc 0.13.0-dev (8fb027e39 2014-11-26 12:02:16 +0000)\n```\n\nThe possible solution would be to make the `deriving` syntax extension also copy the `where` clause bounds into the expanded `impl`, just like  it already does for the \"inline bounds\" `impl<T: Show + Trait> ...`.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19358/timeline", "performed_via_github_app": null, "state_reason": "completed"}