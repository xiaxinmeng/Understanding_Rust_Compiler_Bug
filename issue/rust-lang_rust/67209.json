{"url": "https://api.github.com/repos/rust-lang/rust/issues/67209", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67209/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67209/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67209/events", "html_url": "https://github.com/rust-lang/rust/issues/67209", "id": 536004034, "node_id": "MDU6SXNzdWU1MzYwMDQwMzQ=", "number": 67209, "title": "#[link_section] is only usable from the root crate", "user": {"login": "jfrimmel", "id": 31166235, "node_id": "MDQ6VXNlcjMxMTY2MjM1", "avatar_url": "https://avatars.githubusercontent.com/u/31166235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfrimmel", "html_url": "https://github.com/jfrimmel", "followers_url": "https://api.github.com/users/jfrimmel/followers", "following_url": "https://api.github.com/users/jfrimmel/following{/other_user}", "gists_url": "https://api.github.com/users/jfrimmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfrimmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfrimmel/subscriptions", "organizations_url": "https://api.github.com/users/jfrimmel/orgs", "repos_url": "https://api.github.com/users/jfrimmel/repos", "events_url": "https://api.github.com/users/jfrimmel/events{/privacy}", "received_events_url": "https://api.github.com/users/jfrimmel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 234948, "node_id": "MDU6TGFiZWwyMzQ5NDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-attributes", "name": "A-attributes", "color": "f7e101", "default": false, "description": "Area: #[attributes(..)]"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-10T21:27:34Z", "updated_at": "2022-07-28T11:37:37Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following MNWE (minimal non-working example :smile:):\r\n```bash\r\n~ $ mkdir mwe\r\n~ $ cd mwe\r\n~/mwe $ cargo new a\r\n     Created binary (application) `a` package\r\n~/mwe $ cargo new --lib b\r\n     Created library `b` package\r\n~/mwe $ cat <<EOF > b/src/lib.rs \r\n> #[used]\r\n> #[link_section = \".mysection\"]\r\n> static X: u32 = 0;\r\n> EOF\r\n~/mwe $ echo 'b = { path=\"../b\" }' >> a/Cargo.toml \r\n~/mwe $ cat <<EOF > a/src/main.rs \r\n> extern crate b; // link the crate\r\n> \r\n> fn main() {}\r\n> EOF\r\n~/mwe $ cd a\r\n~/mwe $ cat <<EOF > link.x\r\n> ENTRY(main)\r\n> \r\n> SECTIONS {\r\n>     .mysection : ALIGN(8) {\r\n>         _START_ = .;\r\n>         KEEP(*(.mysection))\r\n>         _END_ = .;\r\n>     }\r\n> }\r\n> \r\n> ASSERT(_END_ != _START_, \"Section empty\");\r\n> EOF\r\n~/mwe $ mkdir .cargo\r\n~/mwe $ cat <<EOF > .cargo/config\r\n> [build]\r\n> rustflags = [\"-C\", \"link-arg=-Tlink.x\"]\r\n> EOF\r\n~/mwe/a $ cargo build\r\n   Compiling a v0.1.0 (/home/jfrimmel/mwe/a)\r\nerror: linking with `cc` failed: exit code: 1\r\n  |\r\n  = note: \"cc\" [long output omitted (libb-<hash>.rlib included)] -T../link.x\"\r\n  = note: /usr/bin/ld: Section empty\r\n```\r\nThe setup contains two crates: the binary `a` and the dependent crate `b`. A custom linker script is used in order to put the contents of `.mysection` in a section with the same name. The assert statement makes the error visible: the static variable `X` should be moved into that section, making the section 4 bytes in size, but the section is empty.\r\n\r\nIf the `static X` is defined in crate `a`, everything works fine:\r\n```bash\r\n~/mwe/a $ cat <<EOF > src/main.rs\r\n#[used]\r\n\r\n#[link_section = \".mysection\"]\r\n\r\nstatic X: u32 = 0;\r\nfn main() {}\r\nEOF\r\n~/mwe/a $ cargo build\r\n   Compiling a v0.1.0 (/home/jfrimmel/mwe/a)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.19s\r\n```\r\nSo the behavior is different when the `#[used] #[link_section] static` is placed in a dependency or in the currently build crate.\r\n\r\nAm I doing something wrong (in which case it should be documented more clearly) or is there really a bug in the linker?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67209/timeline", "performed_via_github_app": null, "state_reason": null}