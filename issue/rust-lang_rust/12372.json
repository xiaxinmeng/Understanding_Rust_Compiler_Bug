{"url": "https://api.github.com/repos/rust-lang/rust/issues/12372", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12372/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12372/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12372/events", "html_url": "https://github.com/rust-lang/rust/issues/12372", "id": 27815943, "node_id": "MDU6SXNzdWUyNzgxNTk0Mw==", "number": 12372, "title": "Pluggable lints (and attributes)", "user": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-02-18T18:27:23Z", "updated_at": "2015-01-23T02:50:32Z", "closed_at": "2015-01-23T02:50:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Just as we now support pluggable macros, I would love to see pluggable lints (with associated pluggable attributes). I'm thinking these lints/attributes could be scoped by the crate name, so something like\n\n``` rust\n#[attribute_registrar]\npub fn attribute_registrar(registrar: |Name, Type|) {\n    // register attribute names with whatever info is used\n    // to determine if and how arguments are specified\n    register(token::intern(\"myattr\"), ...);\n}\n\n#[lint_registrar]\npub fn lint_registrar(register: |Name, LintExtension|) {\n    register(token::intern(\"mylint\"), ...);\n}\n```\n\nwhen loaded as\n\n``` rust\n#[feature(phase)];\n#[phase(syntax)]\nextern mod foo;\n```\n\nwould add the attribute `#[foo::myattr]` and the lint `foo::mylint`.\n\nThe motivating reason here for me is that I believe for my rust-lua project to be safe I need to have a lint to ensure that the functions exposed to Lua do not make any Lua calls when there is a value with a destructor on the stack. To that end I want to annotate my Lua methods with `#[lua::longjmp]` and have a lint that disallows calling any `#[lua::longjmp]` method with destructors on the stack.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12372/timeline", "performed_via_github_app": null, "state_reason": "completed"}