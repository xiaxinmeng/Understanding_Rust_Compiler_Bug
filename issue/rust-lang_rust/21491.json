{"url": "https://api.github.com/repos/rust-lang/rust/issues/21491", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/21491/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/21491/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/21491/events", "html_url": "https://github.com/rust-lang/rust/issues/21491", "id": 55104483, "node_id": "MDU6SXNzdWU1NTEwNDQ4Mw==", "number": 21491, "title": "ptr::read docs are bogus", "user": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-22T01:51:59Z", "updated_at": "2015-02-07T02:04:53Z", "closed_at": "2015-02-07T02:04:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "> Reads the value from `src` without dropping it.\n\nBut in fact this code _does_ run the destructor:\n\n``` rust\nuse std::{ptr, mem};\n\nstruct Foo;\n\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        println!(\"drop day\");\n    }\n} \n\nfn main() {\n    let x = Foo;\n    unsafe {\n        ptr::read(&x as *const Foo);\n        mem::forget(x);\n    }\n} \n```\n\nIt's not clear what \"without dropping it\" means. I _suspect_ the point is that it won't _mark_ the target (hence `*const T`) as destroyed, from an era when this was more of a dynamic notion than today.  But at any rate, the docs should reflect reality.  As far as I know this is _the_ way to explicitly run a destructor in Rust \u2014 a nice duality because `ptr::write` is the \"placement new\" for uninitialized memory.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/21491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/21491/timeline", "performed_via_github_app": null, "state_reason": "completed"}