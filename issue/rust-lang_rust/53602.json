{"url": "https://api.github.com/repos/rust-lang/rust/issues/53602", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53602/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53602/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53602/events", "html_url": "https://github.com/rust-lang/rust/issues/53602", "id": 352940386, "node_id": "MDU6SXNzdWUzNTI5NDAzODY=", "number": 53602, "title": "Mir: unsize trait object -> same trait object", "user": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-22T12:52:02Z", "updated_at": "2018-08-22T18:29:35Z", "closed_at": "2018-08-22T18:29:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Imporant lines:\r\n\r\n```rust\r\n[...]\r\n    let mut _8: &mut dyn fmt::Write;\r\n    let mut _9: &mut dyn fmt::Write;\r\n[...]\r\n        _8 = move _9 as &mut dyn fmt::Write (Unsize);\r\n```\r\n\r\nFull mir:\r\n\r\n```rust\r\n// WARNING: This output format is intended for human consumers only\r\n// and is subject to change without notice. Knock yourself out.\r\nfn fmt::<impl at target/libcore/src/libcore/fmt/mod.rs:1063:1: 1818:2>::wrap_buf(_1: &mut fmt::Formatter, _2: F) -> fmt::Formatter{\r\n    let mut _0: fmt::Formatter;          // return place\r\n    let mut _3: &mut dyn fmt::Write;\r\n    let mut _4: &mut dyn fmt::Write;\r\n    let mut _5: &mut dyn fmt::Write;\r\n    let mut _6: F;\r\n    let mut _7: (&mut dyn fmt::Write,);\r\n    let mut _8: &mut dyn fmt::Write;\r\n    let mut _9: &mut dyn fmt::Write;\r\n    let mut _10: u32;\r\n    let mut _11: char;\r\n    let mut _12: fmt::rt::v1::Alignment;\r\n    let mut _13: option::Option<usize>;\r\n    let mut _14: option::Option<usize>;\r\n    let mut _15: slice::Iter<fmt::ArgumentV1>;\r\n    let mut _16: &slice::Iter<fmt::ArgumentV1>;\r\n    let mut _17: &[fmt::ArgumentV1];\r\n\r\n    bb0: {                              \r\n        StorageLive(_3);                 // bb0[0]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:18: 1069:32\r\n        StorageLive(_4);                 // bb0[1]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:18: 1069:32\r\n        StorageLive(_5);                 // bb0[2]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:18: 1069:32\r\n        StorageLive(_6);                 // bb0[3]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:18: 1069:22\r\n        _6 = move _2;                    // bb0[4]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:18: 1069:22\r\n        StorageLive(_7);                 // bb0[5]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:18: 1069:32\r\n        StorageLive(_8);                 // bb0[6]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:23: 1069:31\r\n        StorageLive(_9);                 // bb0[7]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:23: 1069:31\r\n        _9 = ((*_1).5: &mut dyn fmt::Write); // bb0[8]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:23: 1069:31\r\n        _8 = move _9 as &mut dyn fmt::Write (Unsize); // bb0[9]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:23: 1069:31\r\n        StorageDead(_9);                 // bb0[10]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:30: 1069:31\r\n        (_7.0: &mut dyn fmt::Write) = move _8; // bb0[11]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:18: 1069:32\r\n        _5 = const ops::function::FnOnce::call_once(move _6, move _7) -> bb1; // bb0[12]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:18: 1069:32\r\n                                         // ty::Const\r\n                                         // + ty: extern \"rust-call\" fn(F, (&mut dyn fmt::Write,)) -> <F as ops::function::FnOnce<(&mut dyn fmt::Write,)>>::Output {<F as ops::function::FnOnce<(&mut dyn fmt::Write,)>>::call_once}\r\n                                         // + val: Scalar(Bits { size: 0, bits: 0 })\r\n                                         // mir::Constant\r\n                                         // + span: target/libcore/src/libcore/fmt/mod.rs:1069:18: 1069:32\r\n                                         // + ty: extern \"rust-call\" fn(F, (&mut dyn fmt::Write,)) -> <F as ops::function::FnOnce<(&mut dyn fmt::Write,)>>::Output {<F as ops::function::FnOnce<(&mut dyn fmt::Write,)>>::call_once}\r\n                                         // + literal: Const { ty: extern \"rust-call\" fn(F, (&mut dyn fmt::Write,)) -> <F as ops::function::FnOnce<(&mut dyn fmt::Write,)>>::Output {<F as ops::function::FnOnce<(&mut dyn fmt::Write,)>>::call_once}, val: Scalar(Bits { size: 0, bits: 0 }) }\r\n    }\r\n\r\n    bb1: {                              \r\n        _4 = _5;                         // bb1[0]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:18: 1069:32\r\n        _3 = move _4 as &mut dyn fmt::Write (Unsize); // bb1[1]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:18: 1069:32\r\n        StorageDead(_4);                 // bb1[2]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:31: 1069:32\r\n        StorageDead(_7);                 // bb1[3]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:31: 1069:32\r\n        StorageDead(_8);                 // bb1[4]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:31: 1069:32\r\n        StorageDead(_6);                 // bb1[5]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1069:31: 1069:32\r\n        StorageLive(_10);                // bb1[6]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1072:20: 1072:30\r\n        _10 = ((*_1).0: u32);            // bb1[7]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1072:20: 1072:30\r\n        StorageLive(_11);                // bb1[8]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1073:19: 1073:28\r\n        _11 = ((*_1).1: char);           // bb1[9]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1073:19: 1073:28\r\n        StorageLive(_12);                // bb1[10]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1074:20: 1074:30\r\n        _12 = ((*_1).2: fmt::rt::v1::Alignment); // bb1[11]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1074:20: 1074:30\r\n        StorageLive(_13);                // bb1[12]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1075:20: 1075:30\r\n        _13 = ((*_1).3: option::Option<usize>); // bb1[13]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1075:20: 1075:30\r\n        StorageLive(_14);                // bb1[14]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1076:24: 1076:38\r\n        _14 = ((*_1).4: option::Option<usize>); // bb1[15]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1076:24: 1076:38\r\n        StorageLive(_15);                // bb1[16]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1080:21: 1080:40\r\n        StorageLive(_16);                // bb1[17]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1080:21: 1080:32\r\n        _16 = &((*_1).6: slice::Iter<fmt::ArgumentV1>); // bb1[18]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1080:21: 1080:32\r\n        _15 = const clone::Clone::clone(move _16) -> bb2; // bb1[19]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1080:21: 1080:40\r\n                                         // ty::Const\r\n                                         // + ty: for<'r> fn(&'r slice::Iter<fmt::ArgumentV1>) -> slice::Iter<fmt::ArgumentV1> {<slice::Iter<fmt::ArgumentV1> as clone::Clone>::clone}\r\n                                         // + val: Scalar(Bits { size: 0, bits: 0 })\r\n                                         // mir::Constant\r\n                                         // + span: target/libcore/src/libcore/fmt/mod.rs:1080:21: 1080:40\r\n                                         // + ty: for<'r> fn(&'r slice::Iter<fmt::ArgumentV1>) -> slice::Iter<fmt::ArgumentV1> {<slice::Iter<fmt::ArgumentV1> as clone::Clone>::clone}\r\n                                         // + literal: Const { ty: for<'r> fn(&'r slice::Iter<fmt::ArgumentV1>) -> slice::Iter<fmt::ArgumentV1> {<slice::Iter<fmt::ArgumentV1> as clone::Clone>::clone}, val: Scalar(Bits { size: 0, bits: 0 }) }\r\n    }\r\n\r\n    bb2: {                              \r\n        StorageDead(_16);                // bb2[0]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1080:39: 1080:40\r\n        StorageLive(_17);                // bb2[1]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1081:19: 1081:28\r\n        _17 = ((*_1).7: &[fmt::ArgumentV1]); // bb2[2]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1081:19: 1081:28\r\n        (_0.0: u32) = move _10;          // bb2[3]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1067:9: 1082:10\r\n        (_0.1: char) = move _11;         // bb2[4]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1067:9: 1082:10\r\n        (_0.2: fmt::rt::v1::Alignment) = move _12; // bb2[5]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1067:9: 1082:10\r\n        (_0.3: option::Option<usize>) = move _13; // bb2[6]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1067:9: 1082:10\r\n        (_0.4: option::Option<usize>) = move _14; // bb2[7]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1067:9: 1082:10\r\n        (_0.5: &mut dyn fmt::Write) = move _3; // bb2[8]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1067:9: 1082:10\r\n        (_0.6: slice::Iter<fmt::ArgumentV1>) = move _15; // bb2[9]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1067:9: 1082:10\r\n        (_0.7: &[fmt::ArgumentV1]) = move _17; // bb2[10]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1067:9: 1082:10\r\n        StorageDead(_17);                // bb2[11]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1082:9: 1082:10\r\n        StorageDead(_15);                // bb2[12]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1082:9: 1082:10\r\n        StorageDead(_14);                // bb2[13]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1082:9: 1082:10\r\n        StorageDead(_13);                // bb2[14]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1082:9: 1082:10\r\n        StorageDead(_12);                // bb2[15]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1082:9: 1082:10\r\n        StorageDead(_11);                // bb2[16]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1082:9: 1082:10\r\n        StorageDead(_10);                // bb2[17]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1082:9: 1082:10\r\n        StorageDead(_3);                 // bb2[18]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1082:9: 1082:10\r\n        StorageDead(_5);                 // bb2[19]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1083:5: 1083:6\r\n        return;                          // bb2[20]: scope 0 at target/libcore/src/libcore/fmt/mod.rs:1083:6: 1083:6\r\n    }\r\n}\r\n```", "closed_by": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53602/timeline", "performed_via_github_app": null, "state_reason": "completed"}