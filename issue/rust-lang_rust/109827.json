{"url": "https://api.github.com/repos/rust-lang/rust/issues/109827", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109827/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109827/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109827/events", "html_url": "https://github.com/rust-lang/rust/issues/109827", "id": 1650313923, "node_id": "I_kwDOAAsO6M5iXcrD", "number": 109827, "title": "Complicated type generated by circular trait associated types not shortened in some cases", "user": {"login": "Zannick", "id": 518709, "node_id": "MDQ6VXNlcjUxODcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/518709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zannick", "html_url": "https://github.com/Zannick", "followers_url": "https://api.github.com/users/Zannick/followers", "following_url": "https://api.github.com/users/Zannick/following{/other_user}", "gists_url": "https://api.github.com/users/Zannick/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zannick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zannick/subscriptions", "organizations_url": "https://api.github.com/users/Zannick/orgs", "repos_url": "https://api.github.com/users/Zannick/repos", "events_url": "https://api.github.com/users/Zannick/events{/privacy}", "received_events_url": "https://api.github.com/users/Zannick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-04-01T05:54:03Z", "updated_at": "2023-04-05T17:23:27Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\n#![allow(unused)]\r\n\r\npub mod ext {\r\npub trait EnumArray<T> {\r\n    type Array;\r\n}\r\n}\r\n\r\npub mod world {\r\n\r\nuse crate::context::*;\r\nuse super::ext;\r\nuse std::hash::Hash;\r\nuse std::fmt::{self, format, Debug, Display};\r\n\r\npub trait Accessible: Sync {\r\n    type Context: Ctx;\r\n    fn can_access(&self, ctx: &Self::Context) -> bool;\r\n}\r\n\r\npub trait Id: Copy + Clone + Debug + Eq + Hash + Ord + PartialOrd + PartialEq + Send + Sync {}\r\n\r\npub trait Location: Accessible {\r\n    type LocId: Id;\r\n}\r\n\r\npub trait Exit: Accessible {\r\n    type ExitId: Id;\r\n    type SpotId: Id + Default + ext::EnumArray<Option<ContextWrapper<Self::Context>>>\r\n    where //<Self::Context as Ctx>::World: World<Exit = Self>,\r\n    <Self::SpotId as ext::EnumArray<Option<ContextWrapper<Self::Context>>>>::Array: Sync\r\n    ;\r\n}\r\n\r\npub trait Action: Accessible {\r\n    type ActionId: Id;\r\n}\r\npub trait Warp: Accessible {\r\n    type WarpId: Id;\r\n}\r\n\r\npub trait World: Sync {\r\n    type Location: Location;\r\n    type Exit: Exit<\r\n        Context = <Self::Location as Accessible>::Context,\r\n    >;\r\n    type Action: Action<\r\n        Context = <Self::Location as Accessible>::Context,\r\n    >;\r\n    type Warp: Warp<\r\n        Context = <Self::Location as Accessible>::Context,\r\n    >;\r\n}\r\n}\r\n\r\npub mod context {\r\n\r\nuse crate::world::*;\r\nuse std::hash::Hash;\r\nuse std::fmt::{self, format, Debug, Display};\r\nuse std::marker::PhantomData;\r\n\r\npub trait Ctx: Clone + Eq + Debug + Hash + Send + Sync {\r\ntype World: World;\r\ntype Location: Location;\r\n}\r\n\r\n#[derive(Clone, Debug, Hash, PartialEq, Eq)]\r\npub struct BaseContextWrapper<T, S, L, E, A, Wp> {\r\n    ctx: T,\r\n    // ...\r\n    p: PhantomData<S>,\r\n    s: PhantomData<L>,\r\n    e: PhantomData<E>,\r\n    a: PhantomData<A>,\r\n    wp: PhantomData<Wp>,\r\n}\r\n\r\npub type ContextWrapper<T> = BaseContextWrapper<\r\n    T,\r\n    <<<T as Ctx>::World as World>::Exit as Exit>::SpotId,\r\n    <<<T as Ctx>::World as World>::Location as Location>::LocId,\r\n    <<<T as Ctx>::World as World>::Exit as Exit>::ExitId,\r\n    <<<T as Ctx>::World as World>::Action as Action>::ActionId,\r\n    <<<T as Ctx>::World as World>::Warp as Warp>::WarpId,\r\n    >;\r\n    \r\n}\r\n\r\nuse crate::context::*;\r\nuse crate::world::*;\r\n    \r\npub fn process<T>()\r\nwhere\r\nT: Ctx\r\n{\r\n    let vec: Vec<ContextWrapper<T>> = Vec::new();\r\n    std::cmp::min(vec, 0);\r\n}\r\n```\r\n\r\nI expected to see this happen:\r\nerror message appears with shortened type and a file reference to see the full type, as I've seen in other error messages like:\r\n```\r\n    = note: expected struct `Vec<BaseContextWrapper<T, <<<T as Ctx>::World as World>::Exit as Exit>::SpotId, ..., ..., ..., ...>>`\r\n            the full type name has been written to '/playground/target/debug/deps/playground-10e50725c1766eba.long-type-6458468699417712645.txt'\r\n                 found type `{integer}`\r\n```\r\n\r\nInstead, this happened:\r\nenormous error message with no elision:\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0277]](https://doc.rust-lang.org/nightly/error_codes/E0277.html): `<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Exit as world::Exit>::SpotId as EnumArray<Option<BaseContextWrapper<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Exit as world::Exit>::SpotId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Location as world::Location>::LocId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Exit as world::Exit>::ExitId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Action as world::Action>::ActionId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Warp as world::Warp>::WarpId>>>>::Array` cannot be shared between threads safely\r\n  --> src/lib.rs:31:33\r\n   |\r\n31 |     type SpotId: Id + Default + ext::EnumArray<Option<ContextWrapper<Self::Context>>>\r\n   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Exit as world::Exit>::SpotId as EnumArray<Option<BaseContextWrapper<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Exit as world::Exit>::SpotId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Location as world::Location>::LocId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Exit as world::Exit>::ExitId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Action as world::Action>::ActionId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Warp as world::Warp>::WarpId>>>>::Array` cannot be shared between threads safely\r\n   |\r\n   = help: the trait `Sync` is not implemented for `<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Exit as world::Exit>::SpotId as EnumArray<Option<BaseContextWrapper<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Exit as world::Exit>::SpotId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Location as world::Location>::LocId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Exit as world::Exit>::ExitId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Action as world::Action>::ActionId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Warp as world::Warp>::WarpId>>>>::Array`\r\nnote: required by a bound in `world::Exit::SpotId`\r\n  --> src/lib.rs:33:85\r\n   |\r\n31 |     type SpotId: Id + Default + ext::EnumArray<Option<ContextWrapper<Self::Context>>>\r\n   |          ------ required by a bound in this associated type\r\n32 |     where //<Self::Context as Ctx>::World: World<Exit = Self>,\r\n33 |     <Self::SpotId as ext::EnumArray<Option<ContextWrapper<Self::Context>>>>::Array: Sync\r\n   |                                                                                     ^^^^ required by this bound in `Exit::SpotId`\r\nhelp: consider further restricting the associated type\r\n   |\r\n29 | pub trait Exit: Accessible where <<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Exit as world::Exit>::SpotId as EnumArray<Option<BaseContextWrapper<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Exit as world::Exit>::SpotId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Location as world::Location>::LocId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Exit as world::Exit>::ExitId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Action as world::Action>::ActionId, <<<<<<<Self as Accessible>::Context as context::Ctx>::World as world::World>::Location as Accessible>::Context as context::Ctx>::World as world::World>::Warp as world::Warp>::WarpId>>>>::Array: Sync {\r\n   |r\n```\r\n\r\nNote: this error comes from remarking out the trait bound on line 32 as above. That bound is meant to close the type association loop so that `<SpotId as EnumArray>::Array` is always `Sync`, which works as long as `process()` is not defined. A similarly long error still appears if both are left in. (I added the `process()` function to show an error that does elide part of the type.) \r\n\r\n### Meta\r\n[playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=ca3b40d43c8b2511facf799d6e374fbc)\r\n\r\nMy original error message on stable spelled out both `std::option::Option` and `world::Accessible`, so it was longer as well.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109827/timeline", "performed_via_github_app": null, "state_reason": null}