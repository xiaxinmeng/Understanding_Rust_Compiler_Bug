{"url": "https://api.github.com/repos/rust-lang/rust/issues/85697", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85697/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85697/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85697/events", "html_url": "https://github.com/rust-lang/rust/issues/85697", "id": 901339581, "node_id": "MDU6SXNzdWU5MDEzMzk1ODE=", "number": 85697, "title": "Aliasing: Does Vec own its contents?", "user": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2021-05-25T20:38:01Z", "updated_at": "2021-06-07T10:44:44Z", "closed_at": "2021-06-07T10:44:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "(Opening a new issue to continue the discussion started in #60847.)\r\n\r\nThe core of the question is whether I can assume that `x` and `v` are disjoint (`x` is not pointing into one of the `v`'s elements):\r\n\r\n```rust\r\nfn test(v: &mut Vec<u32>, x: &mut u32) {\r\n    // Can I assume here that x is not pointing to v?\r\n}\r\n```\r\n\r\nI see at least two reasons why `x` should not be allowed to alias an element of `v`:\r\n\r\n1.  It looks very counter-intuitive because it is typically illegal to have active mutable references to a structure and to its part.\r\n2.  Taking into account how pervasive `Vec` is, this would likely kill most of the benefits for static analysis that Rust has against languages like C. The reason for this is that a sound tool (a static analyser or a verifier) would need to track whether any reference could potentially alias some element of a vector, which typically requires quantifiers. Unfortunately, using quantifiers typically leads to reasoning becoming undecidable. Not sure whether it is possible to somehow avoid the undecidability in this particular case, but scalability and performance will certainly be a huge problem.\r\n\r\nAt least one reason why aliasing should be allowed is given in the issue [60847](https://github.com/rust-lang/rust/issues/60847). If I am not mistaken, that issue was motivated by [this code in typed arena](https://github.com/SimonSapin/rust-typed-arena/blob/f1d8db67c57950c6c83ac80cd306397bc3b90eed/src/lib.rs#L196-L200), which uses `Vec` as a memory allocator. A variation of the code in the issue allows creating a reference that aliases the contents of the vector ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=3580b3455b226f00de0289b86b5f2bf0)):\r\n\r\n```rust\r\nfn main() {\r\n    let mut v = vec![1, 2, 3, 4, 5];\r\n    v.pop();\r\n    let ptr = v.as_mut_ptr();\r\n    let ptr = unsafe { &mut *ptr };\r\n    test(&mut v, ptr);\r\n    println!(\"{:?}\", v);    // [8, 2, 3, 4, 7]\r\n}\r\nfn test(v: &mut Vec<u32>, x: &mut u32) {\r\n    assert!(v.len() < v.capacity());\r\n    v.push(7);\r\n    *x = 8;\r\n}\r\n```\r\n\r\nMy personal (highly biased) point of view is that it would be cleaner to separate the two use cases (vector as a collection of things and vector as a memory allocator) because it would allow the majority of `Vec` users to not worry about potentially problematic aliasing. However, this would require having a new data structure that can be used as an allocator; maybe, `RawVec` could be adopted for this?\r\n\r\nIf it is decided that the aliasing should not be allowed, then I have two additional questions:\r\n\r\n+   Does `Box` also give the same guarantee?\r\n+   Is this non-aliasing property a property of `Vec` or a property of the `Unique` pointer that is used inside `Vec`?\r\n\r\ncc @RalfJung @matklad ", "closed_by": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85697/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85697/timeline", "performed_via_github_app": null, "state_reason": "completed"}