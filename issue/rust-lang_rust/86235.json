{"url": "https://api.github.com/repos/rust-lang/rust/issues/86235", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86235/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86235/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86235/events", "html_url": "https://github.com/rust-lang/rust/issues/86235", "id": 919380441, "node_id": "MDU6SXNzdWU5MTkzODA0NDE=", "number": 86235, "title": "ptr-meta: DynMetadata and Pointee::Metadata are not UnwindSafe", "user": {"login": "nwsharp", "id": 39231199, "node_id": "MDQ6VXNlcjM5MjMxMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/39231199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwsharp", "html_url": "https://github.com/nwsharp", "followers_url": "https://api.github.com/users/nwsharp/followers", "following_url": "https://api.github.com/users/nwsharp/following{/other_user}", "gists_url": "https://api.github.com/users/nwsharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwsharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwsharp/subscriptions", "organizations_url": "https://api.github.com/users/nwsharp/orgs", "repos_url": "https://api.github.com/users/nwsharp/repos", "events_url": "https://api.github.com/users/nwsharp/events{/privacy}", "received_events_url": "https://api.github.com/users/nwsharp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 125141240, "node_id": "MDU6TGFiZWwxMjUxNDEyNDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-dst", "name": "A-dst", "color": "f7e101", "default": false, "description": "Area: Dynamically Sized Types"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 1353613039, "node_id": "MDU6TGFiZWwxMzUzNjEzMDM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lang-item", "name": "A-lang-item", "color": "f7e101", "default": false, "description": "Area: lang items"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 2242906716, "node_id": "MDU6TGFiZWwyMjQyOTA2NzE2", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-raw-pointers", "name": "A-raw-pointers", "color": "f7e101", "default": false, "description": "Area: raw pointers, MaybeUninit, NonNull"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-06-12T02:33:32Z", "updated_at": "2021-06-26T21:11:46Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "[`DynMetadata`](https://doc.rust-lang.org/nightly/std/ptr/struct.DynMetadata.html) is only [`UnwindSafe`](https://doc.rust-lang.org/std/panic/trait.UnwindSafe.html) if its `Dyn` type argument is as well. This is a bit strange as `DynMetadata` is, data-wise, just a `&'static` to an immutable virtual table. There's not a way to observe broken invariant involving such a reference unless somehow the shared library containing the vtable is unloaded -- which violates `'static`, would be super-mega-bad, and probably shouldn't be happening during unwind.\r\n\r\nhttps://rust-lang.github.io/rfcs/2580-ptr-meta.html (#81513) states that `Pointee::Metadata` is `Copy + Send + Sync + Ord + Hash + Unpin`. Given these constraints, as well as the current types being `()`, `usize`, and `DynMetadata`, it seems reasonable to me that `Pointee::Metadata` also therefore be `UnwindSafe`.\r\n\r\nI understand that `UnwindSafe` is currently in `std`, but with #84662 it will move into `libcore`. Provided that we indeed want it as a bound of `Pointee::Metadata`, we should definitely land this before exposing the ability for users to create custom metadata types.\r\n\r\nChanging the bounds on `Pointee::Metadata` is explicitly mentioned as a concern in [these meeting minutes](https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2020-11-04-RFC-2580-and-custom-dst.md#assumptions).\r\n\r\n(Also, the shared library unloading thing may indicate that we may want to drop the `&'static` in favor of `*const`.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86235/timeline", "performed_via_github_app": null, "state_reason": null}