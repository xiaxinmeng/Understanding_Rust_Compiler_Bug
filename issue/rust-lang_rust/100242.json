{"url": "https://api.github.com/repos/rust-lang/rust/issues/100242", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100242/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100242/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100242/events", "html_url": "https://github.com/rust-lang/rust/issues/100242", "id": 1331072270, "node_id": "I_kwDOAAsO6M5PVo0O", "number": 100242, "title": "rustdoc `--json` struct and enum impls are blank", "user": {"login": "makspll", "id": 19150176, "node_id": "MDQ6VXNlcjE5MTUwMTc2", "avatar_url": "https://avatars.githubusercontent.com/u/19150176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/makspll", "html_url": "https://github.com/makspll", "followers_url": "https://api.github.com/users/makspll/followers", "following_url": "https://api.github.com/users/makspll/following{/other_user}", "gists_url": "https://api.github.com/users/makspll/gists{/gist_id}", "starred_url": "https://api.github.com/users/makspll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/makspll/subscriptions", "organizations_url": "https://api.github.com/users/makspll/orgs", "repos_url": "https://api.github.com/users/makspll/repos", "events_url": "https://api.github.com/users/makspll/events{/privacy}", "received_events_url": "https://api.github.com/users/makspll/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2682491374, "node_id": "MDU6TGFiZWwyNjgyNDkxMzc0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-rustdoc-json", "name": "A-rustdoc-json", "color": "f7e101", "default": false, "description": "Area: Rustdoc JSON backend"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-08-07T17:17:08Z", "updated_at": "2022-08-15T21:09:57Z", "closed_at": "2022-08-15T21:09:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "running `\trustup run nightly cargo rustdoc -p glam --  -Zunstable-options --output-format json`\r\n\r\nproduces this record for the [glam](https://docs.rs/glam/latest/glam/f32/struct.Mat3.html) type `Mat3`:\r\n```json\r\n         \"0:9614:1735\": {\r\n            \"id\": \"0:9614:1735\",\r\n            \"crate_id\": 0,\r\n            \"name\": \"Mat3\",\r\n            \"span\": {\r\n                \"filename\": \"/home/makspll/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.21.2/src/f32/mat3.rs\",\r\n                \"begin\": [\r\n                    45,\r\n                    0\r\n                ],\r\n                \"end\": [\r\n                    49,\r\n                    1\r\n                ]\r\n            },\r\n            \"visibility\": \"public\",\r\n            \"docs\": \"A 3x3 column major matrix.\\n\\nThis 3x3 matrix type features convenience methods for creating and using linear and\\naffine transformations. If you are primarily dealing with 2D affine transformations the\\n[`Affine2`](crate::Affine2) type is much faster and more space efficient than\\nusing a 3x3 matrix.\\n\\nLinear transformations including 3D rotation and scale can be created using methods\\nsuch as [`Self::from_diagonal()`], [`Self::from_quat()`], [`Self::from_axis_angle()`],\\n[`Self::from_rotation_x()`], [`Self::from_rotation_y()`], or\\n[`Self::from_rotation_z()`].\\n\\nThe resulting matrices can be use to transform 3D vectors using regular vector\\nmultiplication.\\n\\nAffine transformations including 2D translation, rotation and scale can be created\\nusing methods such as [`Self::from_translation()`], [`Self::from_angle()`],\\n[`Self::from_scale()`] and [`Self::from_scale_angle_translation()`].\\n\\nThe [`Self::transform_point2()`] and [`Self::transform_vector2()`] convenience methods\\nare provided for performing affine transforms on 2D vectors and points. These multiply\\n2D inputs as 3D vectors with an implicit `z` value of `1` for points and `0` for\\nvectors respectively. These methods assume that `Self` contains a valid affine\\ntransform.\",\r\n            \"links\": {\r\n                \"crate::Affine2\": \"0:9602:2046\",\r\n                \"`Self::from_diagonal()`\": \"0:9614:1735\",\r\n                \"`Self::from_axis_angle()`\": \"0:9614:1735\",\r\n                \"`Self::from_scale()`\": \"0:9614:1735\",\r\n                \"`Self::from_angle()`\": \"0:9614:1735\",\r\n                \"`Self::from_quat()`\": \"0:9614:1735\",\r\n                \"`Self::from_rotation_z()`\": \"0:9614:1735\",\r\n                \"`Self::transform_vector2()`\": \"0:9614:1735\",\r\n                \"`Self::from_rotation_y()`\": \"0:9614:1735\",\r\n                \"`Self::from_scale_angle_translation()`\": \"0:9614:1735\",\r\n                \"`Self::from_rotation_x()`\": \"0:9614:1735\",\r\n                \"`Self::from_translation()`\": \"0:9614:1735\",\r\n                \"`Self::transform_point2()`\": \"0:9614:1735\"\r\n            },\r\n            \"attrs\": [\r\n                \"#[repr(C)]\"\r\n            ],\r\n            \"deprecation\": null,\r\n            \"kind\": \"struct\",\r\n            \"inner\": {\r\n                \"struct_type\": \"plain\",\r\n                \"generics\": {\r\n                    \"params\": [],\r\n                    \"where_predicates\": []\r\n                },\r\n                \"fields_stripped\": false,\r\n                \"fields\": [\r\n                    \"0:9615:1809\",\r\n                    \"0:9616:1810\",\r\n                    \"0:9617:1812\"\r\n                ],\r\n                \"impls\": []\r\n            }\r\n        }\r\n```\r\n\r\nI would expect \"impls\" to not be blank, since the matrix implements many traits and has a non-trait implementation as well. The paths entry also does not contain `Mat3` as well as many other types exported by the crate, is this expected ? I know that these paths included all exported types before \r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\n$ rustup run nightly rustc --version\r\nrustc 1.65.0-nightly (2befdefdd 2022-08-06)\r\n```\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\n$ rustup run nightly rustc --version\r\nrustc 1.65.0-nightly (2befdefdd 2022-08-06)\r\n```\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100242/timeline", "performed_via_github_app": null, "state_reason": "completed"}