{"url": "https://api.github.com/repos/rust-lang/rust/issues/11541", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/11541/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/11541/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/11541/events", "html_url": "https://github.com/rust-lang/rust/issues/11541", "id": 25590079, "node_id": "MDU6SXNzdWUyNTU5MDA3OQ==", "number": 11541, "title": "RFC: Tuple swizzling", "user": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-01-14T17:25:28Z", "updated_at": "2014-04-17T19:46:48Z", "closed_at": "2014-04-17T19:46:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Basically the idea here is to support shuffling for SIMD types in a way that can be easily lowered to IR (LLVM's `shufflevector` requires the mask be a vector of constants, so an intrinsic function is out of the question), however I image this sugar could extend to tuples with multiple types.\n\nSome examples:\n\n``` rust\nlet vec = (1.0f32, 2.0f32, 3.0f32, 4.0f32);\nlet all_x = vec -> (0, 0, 0, 0);\nassert_eq!(all_x, (1.0f32, 1.0f32, 1.0f32, 1.0f32));\nlet single_x = vec -> (0);\nassert_eq!(single_x, (1.0f32));\n\nlet mut vec = vec;\nvec <- (0) = 5.0f32; // set x only\nvec <- (1, 2) = (6.0f32, 7.0f32) // set y & z\nassert_eq!(vec, (5.0f32, 6.0f32, 7.0f32, 4.0f32));\n\nlet vec = vec;\n// the mask may be arbitrarily long:\nassert_eq!(vec -> (0, 1, 2, 3, 0), (5.0f32, 6.0f32, 7.0f32, 4.0f32, 5.0f32));\n\n// leaves vec unchanged\nlet functional_update = vec -> (0, 1, 3) .. (0.5f32, 1.0f32, 10.0f32);\n// functional_update would take it's type from vec\nassert_eq!(vec, (5.0f32, 6.0f32, 7.0f32, 4.0f32));\nassert_eq!(functional_update, (0.5f32, 1.0f32, 7.0f32, 10.0f32));\n```\n\nA couple of things would need to be disallowed, however:\n\n``` rust\n// continuing from above\nlet mut vec = vec;\n// 1. no duplicate assignments/functional updates:\nvec <- (0, 0) = (..);\nlet _ = vec -> (0, 1, 2, 3, 0) .. (..);\n// 2. no out-of-bounds:\nvec <- (5, 9000) = (..);\nlet _ = vec -> (5, 9001);\nlet _ = vec -> (5, 9002) .. (..);\nlet _ = vec -> (0, 1, 2, 3, 4) .. (..);\n// 3. all mask values must be a const expr:\nlet mut non_const_expr = 15;\nvec <- (non_const_expr) = (..);\nlet _ = vec -> (non_const_expr) .. (..);\nlet _ = vec -> (non_const_expr);\n// 4. mismatched tuple sizes:\nvec <- (0, 1) = (0.0f32, 0.0f32, 0.0f32);\nlet _ = vec -> (0) .. (0.0f32, 0.0f32);\n```\n\nAIUI, the notation would be:\n\n```\ntuple_mask : '(' integer [ ',' integer ] * ')' ;\ntuple_expr : '(' expr [ ',' expr ] * ')' |\n             tuple_expr \"->\" tuple_mask [ \"..\" tuple_expr ] ? ;\n```\n\nI'm willing to write this myself, but I'd like some consensus/feedback regarding ze sugar I've used.\n", "closed_by": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/11541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/11541/timeline", "performed_via_github_app": null, "state_reason": "completed"}