{"url": "https://api.github.com/repos/rust-lang/rust/issues/48200", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48200/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48200/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48200/events", "html_url": "https://github.com/rust-lang/rust/issues/48200", "id": 296997713, "node_id": "MDU6SXNzdWUyOTY5OTc3MTM=", "number": 48200, "title": "Surprising optimization differences between variants of the same code", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-02-14T07:18:19Z", "updated_at": "2018-07-04T11:03:34Z", "closed_at": "2018-07-04T10:29:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was looking at the assembly output of the following code, to see if rust would do a short-circuit or not:\r\n```rust\r\npub fn foo(a: Option<usize>, b: Option<usize>) -> usize {\r\n    if let (Some(a), Some(b)) = (a, b) {\r\n        a + b\r\n    } else {\r\n        0\r\n    }\r\n}\r\n```\r\n\r\nAnd got the following result:\r\n```asm\r\nexample::foo:\r\n  push rbp\r\n  mov rbp, rsp\r\n  cmp qword ptr [rdi], 1\r\n  jne .LBB0_1\r\n  mov rcx, qword ptr [rdi + 8]\r\n  add rcx, qword ptr [rsi + 8]\r\n  xor eax, eax\r\n  cmp qword ptr [rsi], 1\r\n  cmove rax, rcx\r\n  pop rbp\r\n  ret\r\n.LBB0_1:\r\n  xor eax, eax\r\n  pop rbp\r\n  ret\r\n```\r\n(thanks godbolt)\r\n\r\nWhich, come to think of it, might make sense, although I'm not sure reading the data and making the addition before checking the second Option tag is better than avoiding the branch this all allows to avoid. So, let's assume this is actually better than doing two compare/branch at the beginning, at the very least, the compiled code should be the same as for either of the following:\r\n```rust\r\npub fn bar(a: Option<usize>, b: Option<usize>) -> usize {\r\n    if a.is_some() && b.is_some() {\r\n        a.unwrap() + b.unwrap()\r\n    } else {\r\n        0\r\n    }\r\n}\r\n\r\npub fn baz(a: Option<usize>, b: Option<usize>) -> usize {\r\n    if let Some(a) = a {\r\n        if let Some(b) = b {\r\n            return a + b;\r\n        }\r\n    }\r\n    0\r\n}\r\n```\r\n\r\nBoth compile to the code below, which is different than the original one:\r\n```asm\r\n  push rbp\r\n  mov rbp, rsp\r\n  cmp qword ptr [rdi], 1\r\n  jne .LBB1_1\r\n  cmp qword ptr [rsi], 1\r\n  jne .LBB1_3\r\n  mov rax, qword ptr [rsi + 8]\r\n  add rax, qword ptr [rdi + 8]\r\n  pop rbp\r\n  ret\r\n.LBB1_1:\r\n  xor eax, eax\r\n  pop rbp\r\n  ret\r\n.LBB1_3:\r\n  xor eax, eax\r\n  pop rbp\r\n  ret\r\n```\r\n\r\nBTW, note how it generates two branch targets with the same return code instead of reusing the first one for the second branch.", "closed_by": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48200/timeline", "performed_via_github_app": null, "state_reason": "completed"}