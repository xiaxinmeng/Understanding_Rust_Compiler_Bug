{"url": "https://api.github.com/repos/rust-lang/rust/issues/31155", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/31155/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/31155/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/31155/events", "html_url": "https://github.com/rust-lang/rust/issues/31155", "id": 128364436, "node_id": "MDU6SXNzdWUxMjgzNjQ0MzY=", "number": 31155, "title": "StepBy<_, Range<_>> optimises poorly", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2016-01-24T01:01:04Z", "updated_at": "2019-09-22T14:40:59Z", "closed_at": "2019-09-22T14:40:58Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "There's a lot going on inside `StepBy<_, Range<_>>`'s `Iterator` implementation and LLVM does a reasonable job of cutting things down, but doesn't get all the way (definition inlined for context if it changes in future, and to allow easy experimentation):\n\n``` rust\n#![crate_type = \"lib\"]\n\nuse std::mem;\n\nstruct R {\n    start: i32,\n    end: i32,\n    step_by: i32,\n}\n\nimpl Iterator for R\n{\n    type Item = i32;\n\n    fn next(&mut self) -> Option<i32> {\n        let rev = self.step_by < 0;\n        if (rev && self.start > self.end) ||\n           (!rev && self.start < self.end)\n        {\n            match self.start.checked_add(self.step_by) { // inlined & stable version of <i32 as std::iter::Step>::step\n                Some(mut n) => {\n                    mem::swap(&mut self.start, &mut n);\n                    Some(n)\n                },\n                None => {\n                    let mut n = self.end.clone();\n                    mem::swap(&mut self.start, &mut n);\n                    Some(n)\n                }\n            }\n        } else {\n            None\n        }\n    }\n}\n\n\npub fn iterator() -> usize {\n    R { start: 0, end: 100000, step_by: 2 }.count()\n}\n\npub fn while_() -> usize {\n    let mut count = 0;\n    let mut i = 0;\n    while i < 100000 {\n        count += 1;\n        i += 2;\n    }\n    count\n}\n```\n\nOptimised asm (it'd be great for the first to be like the second):\n\n``` asm\n_ZN8iterator20h37c73f52cfd206d4LbaE:\n    .cfi_startproc\n    xorl    %eax, %eax\n    movl    $100000, %ecx\n    xorl    %edx, %edx\n    .align  16, 0x90\n.LBB1_1:\n    addl    $2, %edx\n    cmovol  %ecx, %edx\n    incq    %rax\n    cmpl    $100000, %edx\n    jl  .LBB1_1\n    retq\n```\n\n``` asm\n_ZN6while_20h2b6d290fcc3d36d0UbaE:\n    .cfi_startproc\n    movl    $50000, %eax\n    retq\n```\n\nhttps://play.rust-lang.org/?gist=a926869a4cf59d6683c4\n#24660 previously had a somewhat similar problem, although this one is compounded by using `checked_add` implemented in terms of LLVM's overflow intrinsics, which the [LLVM performance tips](http://llvm.org/docs/Frontend/PerformanceTips.html) explicitly recommend against:\n\n> Avoid using arithmetic intrinsics unless you are required by your source language specification to emit a particular code sequence. The optimizer is quite good at reasoning about general control flow and arithmetic, it is not anywhere near as strong at reasoning about the various intrinsics. If profitable for code generation purposes, the optimizer will likely form the intrinsics itself late in the optimization pipeline. It is very rarely profitable to emit these directly in the language frontend. This item explicitly includes the use of the overflow intrinsics.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/31155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/31155/timeline", "performed_via_github_app": null, "state_reason": "completed"}