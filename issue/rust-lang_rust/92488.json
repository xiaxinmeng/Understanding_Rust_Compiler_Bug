{"url": "https://api.github.com/repos/rust-lang/rust/issues/92488", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92488/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92488/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92488/events", "html_url": "https://github.com/rust-lang/rust/issues/92488", "id": 1091936355, "node_id": "I_kwDOAAsO6M5BFaBj", "number": 92488, "title": "ICE error: internal compiler error: no region-bound-pairs for HirId when compiling benchmark", "user": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-01-02T02:27:30Z", "updated_at": "2022-01-02T02:31:02Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\nI ran into this when trying to run `./x.py bench library/core` while working on iterators in `core`. Thankfully it was straight-forward to extract the code into an external crate.\r\n\r\n### Code\r\n\r\n```Rust\r\n/// lib.rs\r\n#![feature(trusted_random_access)]\r\n#![feature(min_specialization)]\r\n#![feature(test)]\r\n\r\nextern crate test;\r\n\r\nuse std::iter::TrustedRandomAccessNoCoerce;\r\n\r\ntrait IterExtension: Iterator {\r\n    #[inline]\r\n    fn _loop_opt(self) -> ForLoopDesugar<Self>\r\n        where\r\n            Self: Sized,\r\n    {\r\n        ForLoopDesugar::new(self)\r\n    }\r\n}\r\n\r\nimpl<I: Iterator> IterExtension for I {}\r\n\r\n#[derive(Debug)]\r\npub struct ForLoopDesugar<I> {\r\n    iter: I,\r\n    idx: usize\r\n}\r\n\r\nimpl<I: Iterator> ForLoopDesugar<I> {\r\n    #[inline]\r\n    pub fn new<INTO>(into_iter: INTO) -> Self\r\n        where INTO: IntoIterator<Item = I::Item, IntoIter = I>\r\n    {\r\n        ForLoopDesugar { iter: into_iter.into_iter(), idx: 0 }\r\n    }\r\n}\r\n\r\nimpl<I: Iterator> Iterator for ForLoopDesugar<I> {\r\n    type Item = I::Item;\r\n\r\n    #[inline]\r\n    default fn next(&mut self) -> Option<Self::Item> {\r\n        self.iter.next()\r\n    }\r\n}\r\n\r\n\r\nimpl<I: TrustedRandomAccessNoCoerce + Iterator> Iterator for ForLoopDesugar<I> {\r\n\r\n    #[inline]\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        let idx = self.idx;\r\n        if idx < self.iter.size() {\r\n            self.idx = idx + 1;\r\n            //self.idx = unsafe { idx.unchecked_add(1) };\r\n            Some(unsafe { self.iter.__iterator_get_unchecked(idx) })\r\n        } else {\r\n            None\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    println!(\"Hello, world!\");\r\n}\r\n\r\n#[cfg(test)]\r\nmod b {\r\n    use test::{Bencher, black_box};\r\n    use crate::IterExtension;\r\n\r\n    #[bench]\r\n    fn bench_desugar(b: &mut Bencher) {\r\n        let vec1: Vec<_> = (0usize..100000).collect();\r\n        let vec2 = black_box(vec1.clone());\r\n        b.iter(|| {\r\n            let iter = vec1.iter()\r\n                .copied()\r\n                .enumerate()\r\n                .map(|(idx, e)| idx.wrapping_add(e))\r\n                .zip(vec2.iter().copied())\r\n                .map(|(a, b)| a.wrapping_add(b))\r\n                .fuse();\r\n            let mut acc = 0;\r\n            for i in iter._loop_opt() {\r\n                acc += i;\r\n            }\r\n            acc\r\n        })\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.59.0-nightly (c14569225 2022-01-01)\r\nbinary: rustc\r\ncommit-hash: c145692254e86974941f2c92c643a23df0f13e82\r\ncommit-date: 2022-01-01\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.59.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\n$ cargo +nightly bench\r\n   Compiling ice_repro v0.1.0 (/tmp/ice_repro)\r\nerror: internal compiler error: no region-bound-pairs for HirId { owner: DefId(0:0 ~ ice_repro[7cdb]), local_id: 0 }\r\n  |\r\n  = note: delayed at compiler/rustc_infer/src/infer/outlives/obligations.rs:189:31\r\n\r\nthread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', compiler/rustc_errors/src/lib.rs:1188:13\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.59.0-nightly (c14569225 2022-01-01) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C opt-level=3 -C embed-bitcode=no -C target-cpu=native\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nerror: could not compile `ice_repro`\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', compiler/rustc_errors/src/lib.rs:1188:13\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/c145692254e86974941f2c92c643a23df0f13e82/library/std/src/panicking.rs:498:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/c145692254e86974941f2c92c643a23df0f13e82/library/core/src/panicking.rs:107:14\r\n   2: core::panicking::panic_display::<&str>\r\n   3: <rustc_errors::HandlerInner>::flush_delayed\r\n   4: <rustc_errors::HandlerInner as core::ops::drop::Drop>::drop\r\n   5: core::ptr::drop_in_place::<rustc_session::parse::ParseSess>\r\n   6: <alloc::rc::Rc<rustc_session::session::Session> as core::ops::drop::Drop>::drop\r\n   7: core::ptr::drop_in_place::<rustc_interface::interface::Compiler>\r\n   8: rustc_span::with_source_map::<core::result::Result<(), rustc_errors::ErrorReported>, rustc_interface::interface::create_compiler_and_run<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>::{closure#1}>\r\n   9: rustc_interface::interface::create_compiler_and_run::<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92488/timeline", "performed_via_github_app": null, "state_reason": null}