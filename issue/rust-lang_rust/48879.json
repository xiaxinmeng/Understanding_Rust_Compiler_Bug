{"url": "https://api.github.com/repos/rust-lang/rust/issues/48879", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48879/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48879/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48879/events", "html_url": "https://github.com/rust-lang/rust/issues/48879", "id": 303847739, "node_id": "MDU6SXNzdWUzMDM4NDc3Mzk=", "number": 48879, "title": "Add \"modes\" to compiletest, for running all tests with NLL enabled and comparing with master", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 120005, "node_id": "MDU6TGFiZWwxMjAwMDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-testsuite", "name": "A-testsuite", "color": "f7e101", "default": false, "description": "Area: The testsuite used to check the correctness of rustc"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 693557542, "node_id": "MDU6TGFiZWw2OTM1NTc1NDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-traits", "name": "WG-traits", "color": "c2e0c6", "default": false, "description": "Working group: Traits, https://internals.rust-lang.org/t/announcing-traits-working-group/6804"}, {"id": 867465998, "node_id": "MDU6TGFiZWw4Njc0NjU5OTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-diagnostics", "name": "NLL-diagnostics", "color": "f799ea", "default": false, "description": "Working torwads the \"diagnostic parity\" goal"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/46", "html_url": "https://github.com/rust-lang/rust/milestone/46", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/46/labels", "id": 3049042, "node_id": "MDk6TWlsZXN0b25lMzA0OTA0Mg==", "number": 46, "title": "NLL: diagnostic parity", "description": "Error messages when using the new, MIR-based borrow checker should be as good or better than the old ones.", "creator": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "closed", "created_at": "2018-01-19T16:48:35Z", "updated_at": "2018-07-24T14:21:33Z", "due_on": null, "closed_at": "2018-03-14T20:41:12Z"}, "comments": 14, "created_at": "2018-03-09T13:52:31Z", "updated_at": "2018-05-29T13:16:17Z", "closed_at": "2018-05-29T13:12:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The NLL team has been trying to find a good workflow for evaluating the discrepancies between AST borrowck and NLL-based borrowck.\r\n\r\n * Past workflows have developed and used things like `-Z borrowck=compare` and the https://github.com/pnkfelix/nll-probe tool, but here I'm going to try to avoid a deep dive into how those have failed to satisfy our needs.\r\n\r\nOur goal here: We want a way to track the current state of NLL, including the cases where there are known deviations, in a manner that allows immediate analysis of that state to determine things like:\r\n * \"how many test cases does NLL deviate from AST borrowck\",\r\n * \"what do the deviations look like\", or\r\n * \"does this deviation represent a bug that needs to be fix? Or is it an improvement on the AST borrowck?\"\r\n\r\nHere's a new proposal for a (hopefully) relatively small change to `compiletest` that should yield an easier workflow to answer questions like those above, at least for the `ui/` subset of our tests.\r\n\r\n 1. Context: The `ui/` tests are set up so that each test consists of an input `$file.rs`, and a set of expected outputs in `$file.stderr` (compilation error messages) and `$file.stdout` (non erroneous compiler output; rarely used). (For more info, see [this chapter in the rustc-guide](https://rust-lang-nursery.github.io/rustc-guide/tests/adding.html#guide-to-the-ui-tests).)\r\n 1. Add a \"mode\" argument to `compiletest`, encoded either as a command line parameter or as an environment variable, or both. (The first mode we'll support will be \"nll\", which tells `compiletest` to pass `-Z nll` in addition to any other flags when invoking `rustc`, at least for the `ui/` tests).\r\n 2. When running under a particular mode, if there is `$file.$mode.stderr` file, then this file will be used as the source of \"acceptable output\". If there is no such file, then `compiletest` will fallback to the regular filename `$file.stderr`.\r\n 3. One complication: UI tests also include \"inline\" comments of the form `//~ ERROR` that indicate what error is expected on which line (these are mildly redundant with the stderr files above). Because messages may differ in the mode M, but we don't want to edit the sources too much, compiletest should just ignore the `//~ ERROR` annotations when running in a particular mode. We will still see the errors that occur from the stderr output, it's just less convenient.\r\n 4. To ensure that we are tracking discrepancies somewhere, whenever there is a `$file.$mode.stderr`, then some tool (probably `compiletest`, but maybe `tidy`?) will be responsible to checking that `$file.rs` somewhere contains a comment that explains the source of the discrepancy. This could be a specially formatted FIXME, if the new behavior seems worse than before:\r\n```rust\r\n// $mode FIXME(#123) -- summary of discrepancy caused by NLL bug with corresponding issue num\r\n```\r\nor a \"YAYME\" comment for when the new behavior is an improvement:\r\n```rust\r\n// $mode YAYME(#123) -- summary of a beneficial discrepancy\r\n```\r\n(presumably the ticket linked by YAYME would just be the tracking issue for NLL or whatever other mode is being tested).\r\n\r\nBenefits of the proposed system:\r\n\r\n * To find the cases that have discrepancies for nll, one can use `ls *.nll.stderr`\r\n * To find what a given discrepancy looks like, one can use `diff onetest.stderr onetest.nll.stderr`\r\n * To see if a discrepancy is a bug or not, grep for FIXME or YAYME in the .rs files.\r\n   * This workflow is perhaps not ideal; @nikomatsakis has pointed out that it might be nicer if these comments somehow lived in the `*.$mode.stderr` files.\r\n\r\n# Open Questions (to be resolved by implementor)\r\n\r\n * [ ] What should `compiletest` do about occurrences of `//~ ERROR` in the source text? In particular, should it check that the error output still has those cases, even when running under a given mode?\r\n   * The current inclination of @pnkfelix and @nikomatsakis is that it is actually *okay* for `compiletest` to *ignore* the `//~ ERROR` annotations when running under a given mode. The reasoning here is this: the `//~ ERROR` annotations will already get checked by compiletest runs that *don't* have a mode. We probably *don't* want to force an error when there's a discrepancy when running under a given mode; any discrepancies, including any of those errors disappearing, should be accounted for in the linked `// $mode FIXME/YAYME`  issue, and we want to allow them to disappear or differ.\r\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48879/timeline", "performed_via_github_app": null, "state_reason": "completed"}