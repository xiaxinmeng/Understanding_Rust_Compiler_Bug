{"url": "https://api.github.com/repos/rust-lang/rust/issues/93974", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93974/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93974/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93974/events", "html_url": "https://github.com/rust-lang/rust/issues/93974", "id": 1136477471, "node_id": "I_kwDOAAsO6M5DvUUf", "number": 93974, "title": "Wrong optimization strategy used when performing constant comparison against byte array smaller than u128", "user": {"login": "SUPERCILEX", "id": 9490724, "node_id": "MDQ6VXNlcjk0OTA3MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9490724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SUPERCILEX", "html_url": "https://github.com/SUPERCILEX", "followers_url": "https://api.github.com/users/SUPERCILEX/followers", "following_url": "https://api.github.com/users/SUPERCILEX/following{/other_user}", "gists_url": "https://api.github.com/users/SUPERCILEX/gists{/gist_id}", "starred_url": "https://api.github.com/users/SUPERCILEX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SUPERCILEX/subscriptions", "organizations_url": "https://api.github.com/users/SUPERCILEX/orgs", "repos_url": "https://api.github.com/users/SUPERCILEX/repos", "events_url": "https://api.github.com/users/SUPERCILEX/events{/privacy}", "received_events_url": "https://api.github.com/users/SUPERCILEX/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-02-13T21:25:14Z", "updated_at": "2022-02-13T21:29:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\nGodbolt: https://rust.godbolt.org/z/G5GGq4bEK\r\n\r\n```Rust\r\n#![feature(bench_black_box)]\r\n\r\nuse std::hint::black_box;\r\nuse std::convert::TryInto;\r\n\r\npub fn from_seed(seed: [u8; 16]) {\r\n    let mut seed_u32 = [0u32; 4];\r\n    read_u32_into(&seed, &mut seed_u32);\r\n\r\n    if seed_u32 == [0; 4] {\r\n        seed_u32 = [0xBAD_5EED, 0xBAD_5EED, 0xBAD_5EED, 0xBAD_5EED];\r\n    }\r\n\r\n    black_box(seed_u32);\r\n}\r\n\r\npub fn from_seed_slow(seed: [u8; 16]) {\r\n    let mut seed_u32 = [0u32; 4];\r\n    read_u32_into(&seed, &mut seed_u32);\r\n\r\n    if seed_u32.iter().all(|&x| x == 0) {\r\n        seed_u32 = [0xBAD_5EED, 0xBAD_5EED, 0xBAD_5EED, 0xBAD_5EED];\r\n    }\r\n\r\n    black_box(seed_u32);\r\n}\r\n\r\n\r\npub fn from_rng() {\r\n    let mut b = [0u8; 16];\r\n    loop {\r\n        black_box(&mut b[..]);\r\n        if b != [0; 16] {\r\n            break;\r\n        }\r\n    }\r\n\r\n    black_box(b);\r\n}\r\n\r\npub fn from_rng_slow() {\r\n    let mut b = [0u8; 16];\r\n    loop {\r\n        black_box(&mut b[..]);\r\n        if !b.iter().all(|&x| x == 0) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    black_box(b);\r\n}\r\n\r\npub fn read_u32_into(src: &[u8], dst: &mut [u32]) {\r\n    assert!(src.len() >= 4 * dst.len());\r\n    for (out, chunk) in dst.iter_mut().zip(src.chunks_exact(4)) {\r\n        *out = u32::from_le_bytes(chunk.try_into().unwrap());\r\n    }\r\n}\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nFrom godbolt: rustc 1.60.0-nightly (e646f3d2a 2022-02-10)\r\n\r\n### Details\r\n\r\nIt's the difference between `byte_array == [0; N]` and `byte_array.iter().all(|&x| x == 0)`. The former version uses fast and simple `mov`/`or`s whereas the latter ends up doing a bunch of vectorization which is unnecessary when N=16 (since you can just treat it as 2 u64s). The `read_u32_into` thing isn't necessary and can be replaced with a `black_box`, but that makes the assembly uglier. Note that you can also get nasty assembly with something as simple as this:\r\n\r\n```rust\r\npub fn from_seed_simple(mut seed: [u8; 16]) {\r\n    if seed == [0; 16] {\r\n        seed = [42; 16];\r\n    }\r\n\r\n    black_box(seed);\r\n}\r\n\r\npub fn from_seed_simple_slow(mut seed: [u8; 16]) {\r\n    if seed.iter().all(|&x| x == 0) {\r\n        seed = [42; 16];\r\n    }\r\n\r\n    black_box(seed);\r\n}\r\n```\r\n\r\nWhat's interesting there is that replacing `seed = [42; 16];` with `return;` fixes things so that both methods end up optimizing identically.\r\n\r\nMore examples can be found here: https://github.com/rust-random/rngs/pull/36. Hopefully this is enough to go on.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93974/timeline", "performed_via_github_app": null, "state_reason": null}