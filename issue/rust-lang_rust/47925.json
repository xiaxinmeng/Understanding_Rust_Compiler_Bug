{"url": "https://api.github.com/repos/rust-lang/rust/issues/47925", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47925/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47925/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47925/events", "html_url": "https://github.com/rust-lang/rust/issues/47925", "id": 293454715, "node_id": "MDU6SXNzdWUyOTM0NTQ3MTU=", "number": 47925, "title": "Rust allows calling fn xyz(&mut self) from immutable borrow", "user": {"login": "eun-ice", "id": 17766811, "node_id": "MDQ6VXNlcjE3NzY2ODEx", "avatar_url": "https://avatars.githubusercontent.com/u/17766811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eun-ice", "html_url": "https://github.com/eun-ice", "followers_url": "https://api.github.com/users/eun-ice/followers", "following_url": "https://api.github.com/users/eun-ice/following{/other_user}", "gists_url": "https://api.github.com/users/eun-ice/gists{/gist_id}", "starred_url": "https://api.github.com/users/eun-ice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eun-ice/subscriptions", "organizations_url": "https://api.github.com/users/eun-ice/orgs", "repos_url": "https://api.github.com/users/eun-ice/repos", "events_url": "https://api.github.com/users/eun-ice/events{/privacy}", "received_events_url": "https://api.github.com/users/eun-ice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-01T09:14:09Z", "updated_at": "2018-02-01T09:30:36Z", "closed_at": "2018-02-01T09:24:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since TcpStream::flush is defined as fn flush(&mut self), I would expect that this code should not be possible:\r\n\r\n```\r\n        fn flush(&self) {\r\n            let mut mutable_stream = &self.stream;\r\n            mutable_stream.flush().expect(\"this should fail since we are NOT mutable\");\r\n        }\r\n```\r\n\r\nThe same goes for other Read and Write methods on socket, I can call all of them from an immutable borrow, just by making a mutable reference to it like in the example above.\r\n\r\n\r\nFull example code:\r\n\r\n```\r\nextern crate mio;\r\n\r\nuse std::net::{SocketAddr, IpAddr};\r\nuse std::io::Write;\r\nuse std::str::FromStr;\r\n\r\nstruct StreamHolder {\r\n    stream: mio::net::TcpStream\r\n}\r\n\r\nimpl StreamHolder {\r\n    fn flush(&self) {\r\n        let mut mutable_stream = &self.stream;\r\n        mutable_stream.flush().expect(\"this should not work, but it does\");\r\n    }\r\n}\r\n\r\n#[test]\r\nfn test_mutate() {\r\n    let stream_holder = StreamHolder { stream: mio::net::TcpStream::connect(&SocketAddr::new(IpAddr::from_str(\"127.0.0.1\").unwrap(), 80)).unwrap() };\r\n    stream_holder.flush();\r\n}\r\n```\r\n\r\n\r\nFor reference mio implements Write for TcpStream as such:\r\n\r\n```\r\nimpl<'a> Write for &'a TcpStream {\r\n     ...\r\n\r\n    fn flush(&mut self) -> io::Result<()> {\r\n        (&self.sys).flush()\r\n    }\r\n}\r\n```\r\n\r\ntested with rustc 1.25.0-nightly (b5392f545 2018-01-08)\r\n\r\n\r\n", "closed_by": {"login": "eun-ice", "id": 17766811, "node_id": "MDQ6VXNlcjE3NzY2ODEx", "avatar_url": "https://avatars.githubusercontent.com/u/17766811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eun-ice", "html_url": "https://github.com/eun-ice", "followers_url": "https://api.github.com/users/eun-ice/followers", "following_url": "https://api.github.com/users/eun-ice/following{/other_user}", "gists_url": "https://api.github.com/users/eun-ice/gists{/gist_id}", "starred_url": "https://api.github.com/users/eun-ice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eun-ice/subscriptions", "organizations_url": "https://api.github.com/users/eun-ice/orgs", "repos_url": "https://api.github.com/users/eun-ice/repos", "events_url": "https://api.github.com/users/eun-ice/events{/privacy}", "received_events_url": "https://api.github.com/users/eun-ice/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47925/timeline", "performed_via_github_app": null, "state_reason": "completed"}