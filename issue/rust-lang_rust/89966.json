{"url": "https://api.github.com/repos/rust-lang/rust/issues/89966", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89966/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89966/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89966/events", "html_url": "https://github.com/rust-lang/rust/issues/89966", "id": 1028160866, "node_id": "I_kwDOAAsO6M49SH1i", "number": 89966, "title": "Fully-qualifying a `From::from` call adds an implicit reborrow that is not inferred otherwise", "user": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 2352122097, "node_id": "MDU6TGFiZWwyMzUyMTIyMDk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-discussion", "name": "C-discussion", "color": "f5f1fd", "default": false, "description": "Category: Discussion or questions that doesn't represent real issues."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-10-16T22:23:58Z", "updated_at": "2021-10-18T11:23:05Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This code fails with a borrow-check error:\r\n\r\n```rust\r\nstruct Foo;\r\n\r\nimpl<'a> From<&'a mut Foo> for () {\r\n    fn from(_: &'a mut Foo) -> () {}\r\n}\r\n\r\nfn main() {\r\n    let mut foo = Foo;\r\n    let foo_mut = &mut foo;\r\n\r\n    <()>::from(foo_mut);\r\n    <()>::from(foo_mut);\r\n}\r\n```\r\n\r\n```\r\nerror[E0382]: use of moved value: `foo_mut`\r\n  --> src/main.rs:12:16\r\n   |\r\n9  |     let foo_mut = &mut foo;\r\n   |         ------- move occurs because `foo_mut` has type `&mut Foo`, which does not implement the `Copy` trait\r\n10 | \r\n11 |     <()>::from(foo_mut);\r\n   |                ------- value moved here\r\n12 |     <()>::from(foo_mut);\r\n   |                ^^^^^^^ value used here after move\r\n\r\nFor more information about this error, try `rustc --explain E0382`.\r\n```\r\n\r\nHowever, explicitly specifying `<() as From<&mut Foo>>` in the first call causes compilation to succeed:\r\n\r\n```rust\r\nstruct Foo;\r\n\r\nimpl<'a> From<&'a mut Foo> for () {\r\n    fn from(_: &'a mut Foo) -> () {}\r\n}\r\n\r\nfn main() {\r\n    let mut foo = Foo;\r\n    let foo_mut = &mut foo;\r\n\r\n    <() as From<&mut Foo>>::from(foo_mut);\r\n    <()>::from(foo_mut);\r\n}\r\n```\r\n\r\nComparing the MIR output for the two versions, it appears that the fully-qualified version reborrows from `foo_mut`, whereas the unqualified version does not:\r\n\r\n```diff\r\n     bb0: {\r\n-        StorageLive(_1);                 // scope 0 at unqual.rs:10:9: 10:16\r\n-        _1 = Foo;                        // scope 0 at unqual.rs:10:19: 10:22\r\n-        FakeRead(ForLet(None), _1);      // scope 0 at unqual.rs:10:9: 10:16\r\n-        StorageLive(_2);                 // scope 1 at unqual.rs:11:9: 11:16\r\n-        _2 = &mut _1;                    // scope 1 at unqual.rs:11:19: 11:27\r\n-        FakeRead(ForLet(None), _2);      // scope 1 at unqual.rs:11:9: 11:16\r\n-        StorageLive(_3);                 // scope 2 at unqual.rs:13:5: 13:24\r\n-        StorageLive(_4);                 // scope 2 at unqual.rs:13:16: 13:23\r\n-        _4 = move _2;                    // scope 2 at unqual.rs:13:16: 13:23\r\n-        _3 = <() as From<&mut Foo>>::from(move _4) -> [return: bb1, unwind: bb3]; // scope 2 at unqual.rs:13:5: 13:24\r\n+        StorageLive(_1);                 // scope 0 at fqs.rs:10:9: 10:16\r\n+        _1 = Foo;                        // scope 0 at fqs.rs:10:19: 10:22\r\n+        FakeRead(ForLet(None), _1);      // scope 0 at fqs.rs:10:9: 10:16\r\n+        StorageLive(_2);                 // scope 1 at fqs.rs:11:9: 11:16\r\n+        _2 = &mut _1;                    // scope 1 at fqs.rs:11:19: 11:27\r\n+        FakeRead(ForLet(None), _2);      // scope 1 at fqs.rs:11:9: 11:16\r\n+        StorageLive(_3);                 // scope 2 at fqs.rs:13:5: 13:42\r\n+        StorageLive(_4);                 // scope 2 at fqs.rs:13:34: 13:41\r\n+        _4 = &mut (*_2);                 // scope 2 at fqs.rs:13:34: 13:41\r\n+        _3 = <() as From<&mut Foo>>::from(move _4) -> [return: bb1, unwind: bb3]; // scope 2 at fqs.rs:13:5: 13:42\r\n                                          // mir::Constant\r\n-                                         // + span: unqual.rs:13:5: 13:15\r\n+                                         // + span: fqs.rs:13:5: 13:33\r\n                                          // + user_ty: UserType(0)\r\n                                          // + literal: Const { ty: fn(&mut Foo) {<() as std::convert::From<&mut Foo>>::from}, val: Value(Scalar(<ZST>)) }\r\n     }\r\n```\r\n\r\nI'm guessing this reborrow is due to, or at least related to, the following change in \"User Type Annotations\":\r\n\r\n```diff\r\n | User Type Annotations\r\n-| 0: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(2:2912 ~ core[f488]::convert::From::from), UserSubsts { substs: [(), ^0], user_self_ty: None }) } at unqual.rs:13:5: 13:15\r\n-| 1: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(2:2912 ~ core[f488]::convert::From::from), UserSubsts { substs: [(), ^0], user_self_ty: None }) } at unqual.rs:14:5: 14:15\r\n+| 0: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: TypeOf(DefId(2:2912 ~ core[f488]::convert::From::from), UserSubsts { substs: [(), &mut Foo], user_self_ty: None }) } at fqs.rs:13:5: 13:33\r\n+| 1: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(2:2912 ~ core[f488]::convert::From::from), UserSubsts { substs: [(), ^0], user_self_ty: None }) } at fqs.rs:14:5: 14:15\r\n```\r\n\r\nIn the unqualified `<()>::from(...)` version, `From::from`'s type seems to be generic over a type parameter, while in the qualified `<() as From<&mut Foo>>::from(...)` version, `From::from`'s type is generic over a lifetime.\r\n\r\n*See also [this Zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Noob.20question.20about.20moving.20semantics).*", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89966/timeline", "performed_via_github_app": null, "state_reason": null}