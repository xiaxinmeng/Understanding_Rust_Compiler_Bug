{"url": "https://api.github.com/repos/rust-lang/rust/issues/90765", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90765/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90765/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90765/events", "html_url": "https://github.com/rust-lang/rust/issues/90765", "id": 1050058377, "node_id": "I_kwDOAAsO6M4-lp6J", "number": 90765, "title": "Tracking Issue for `proc_macro_expand`", "user": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2079070889, "node_id": "MDU6TGFiZWwyMDc5MDcwODg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-proc-macros", "name": "A-proc-macros", "color": "f7e101", "default": false, "description": "Area: Procedural macros"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-11-10T16:36:52Z", "updated_at": "2022-09-04T18:57:07Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Feature gate: `#![feature(proc_macro_expand)]`\r\n\r\nThis is a tracking issue for the `TokenStream::expand_expr` function for use in proc-macros. This function allows eagerly expanding TokenStreams containing expressions from within a proc-macro, such that they can be modified, giving proc-macros similar functionality to built-in macros like `format_args!`, `concat!` and `include!`.\r\n\r\n### Public API\r\n\r\n```rust\r\nimpl TokenStream {\r\n    pub fn expand_expr(&self) -> Result<TokenStream, ExpandError>;\r\n}\r\n\r\n#[non_exhaustive]\r\npub struct ExpandError;\r\n\r\nimpl Debug for ExpandError { ... }\r\nimpl Display for ExpandError { ... }\r\nimpl Error for ExpandError {}\r\nimpl !Send for ExpandError {}\r\nimpl !Sync for ExpandError {}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation for literal expressions: #87264\r\n- [ ] Generalization for other expression types: TODO\r\n- [ ] (optional) Generalization to other AST types: TODO\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- What types of expressions beyond literals should be supported?\r\n- Should expanding non-expression macros (e.g. types, items, etc.) be supported?\r\n- Should certain macros (e.g. those with `#[allow_internal_unstable]`) be expandable or left unexpanded?\r\n- How can we evolve which macros are expanded or not within the rustc stability model? Can downstream crates opt-in to additional macro expansion on nightly channels? Should an additional argument be provided to customize what should be expanded?\r\n- Should compilation be allowed to proceed after an expand method errors?\r\n- Are there concerns about stabilizing the span information generated by internal macros like `include!`?\r\n- How can we properly preserve span information when expanding expression macros?\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90765/reactions", "total_count": 9, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 8, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90765/timeline", "performed_via_github_app": null, "state_reason": null}