{"url": "https://api.github.com/repos/rust-lang/rust/issues/101206", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101206/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101206/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101206/events", "html_url": "https://github.com/rust-lang/rust/issues/101206", "id": 1355899653, "node_id": "I_kwDOAAsO6M5Q0WMF", "number": 101206, "title": "Thread sanitizer reports data race for trivial scoped thread code.", "user": {"login": "Lee-Janggun", "id": 56512187, "node_id": "MDQ6VXNlcjU2NTEyMTg3", "avatar_url": "https://avatars.githubusercontent.com/u/56512187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lee-Janggun", "html_url": "https://github.com/Lee-Janggun", "followers_url": "https://api.github.com/users/Lee-Janggun/followers", "following_url": "https://api.github.com/users/Lee-Janggun/following{/other_user}", "gists_url": "https://api.github.com/users/Lee-Janggun/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lee-Janggun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lee-Janggun/subscriptions", "organizations_url": "https://api.github.com/users/Lee-Janggun/orgs", "repos_url": "https://api.github.com/users/Lee-Janggun/repos", "events_url": "https://api.github.com/users/Lee-Janggun/events{/privacy}", "received_events_url": "https://api.github.com/users/Lee-Janggun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-08-30T14:55:19Z", "updated_at": "2022-08-30T15:10:19Z", "closed_at": "2022-08-30T15:10:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n\r\n```sh\r\ncargo new foo\r\n```\r\n\r\nedit `main.rs` as follows,\r\n\r\n```rust\r\nuse std::thread::scope;\r\n\r\nfn main() {\r\n    scope(|s| {\r\n        s.spawn(|| {});\r\n    });\r\n}\r\n```\r\nrun the following command\r\n```sh\r\nRUSTFLAGS=\"-Z sanitizer=thread\" cargo +nightly run\r\n```\r\n\r\nI expected to see this happen: run success.\r\n\r\nInstead, this happened: A really long thread sanitizer report, summarized as follows.\r\n\r\n```sh\r\n   Compiling foo v0.1.0 (/kaist-cp-home/janggun.lee/foo)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.69s\r\n     Running `target/debug/foo`\r\n/usr/bin/addr2line: DWARF error: invalid or unhandled FORM value: 0x23\r\n...\r\nSUMMARY: ThreadSanitizer: data race ??:? in __interceptor_free\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.65.0-nightly (bc4b39c27 2022-08-29)\r\nbinary: rustc\r\ncommit-hash: bc4b39c271bbd36736cbf1c0a1ac23d5df38d365\r\ncommit-date: 2022-08-29\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.65.0-nightly\r\nLLVM version: 15.0.0\r\n```\r\n\r\nNote: Even the [example in the docs](https://doc.rust-lang.org/stable/std/thread/fn.scope.html#example) give out a similar data race detection when ran under the sanitizer.\r\n\r\n<details><summary>Full Report</summary>\r\n<p>\r\n\r\n```\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.00s\r\n     Running `target/debug/foo`\r\n/usr/bin/addr2line: DWARF error: invalid or unhandled FORM value: 0x23\r\n==================\r\nWARNING: ThreadSanitizer: data race (pid=3962202)\r\n  Write of size 8 at 0x7b0c00000030 by main thread:\r\n    #0 free ??:? (foo+0x121b4) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #1 <alloc::alloc::Global as core::alloc::Allocator>::deallocate :? (foo+0x92cf0) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #2 <alloc::sync::Weak<T> as core::ops::drop::Drop>::drop 110kdawijufz6q4:? (foo+0x9001d) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #3 core::ptr::drop_in_place<alloc::sync::Weak<std::thread::scoped::ScopeData>> :? (foo+0x8f711) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #4 alloc::sync::Arc<T>::drop_slow :? (foo+0x9701a) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #5 <alloc::sync::Arc<T> as core::ops::drop::Drop>::drop 110kdawijufz6q4:? (foo+0x8fe0e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #6 core::ptr::drop_in_place<alloc::sync::Arc<std::thread::scoped::ScopeData>> 110kdawijufz6q4:? (foo+0x8f651) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #7 core::ptr::drop_in_place<std::thread::scoped::Scope> :? (foo+0x8f011) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #8 std::thread::scoped::scope :? (foo+0x9321c) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #9 foo::main 3fndttuwbglga3yi:? (foo+0x93af6) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #10 core::ops::function::FnOnce::call_once :? (foo+0x8e63e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #11 std::sys_common::backtrace::__rust_begin_short_backtrace :? (foo+0x91ae1) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #12 std::rt::lang_start::{{closure}} :? (foo+0x97b0e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #13 std::rt::lang_start_internal ??:? (foo+0xaa36e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #14 main ??:? (foo+0x93b57) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n\r\n  Previous atomic write of size 8 at 0x7b0c00000030 by thread T1:\r\n    #0 core::sync::atomic::atomic_sub :? (foo+0x90e59) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #1 <alloc::sync::Arc<T> as core::ops::drop::Drop>::drop 110kdawijufz6q4:? (foo+0x8fdd1) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #2 core::ptr::drop_in_place<alloc::sync::Arc<std::thread::scoped::ScopeData>> 110kdawijufz6q4:? (foo+0x8f651) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #3 core::ptr::drop_in_place<core::option::Option<alloc::sync::Arc<std::thread::scoped::ScopeData>>> :? (foo+0x8e8ff) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #4 core::ptr::drop_in_place<std::thread::Packet<()>> :? (foo+0x8f1c9) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #5 alloc::sync::Arc<T>::drop_slow :? (foo+0x9711c) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #6 <alloc::sync::Arc<T> as core::ops::drop::Drop>::drop 110kdawijufz6q4:? (foo+0x8fcae) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #7 core::ptr::drop_in_place<alloc::sync::Arc<std::thread::Packet<()>>> :? (foo+0x8f801) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #8 std::thread::Builder::spawn_unchecked_::{{closure}} :? (foo+0x98dcb) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #9 core::ops::function::FnOnce::call_once{{vtable.shim}} ??:? (foo+0x8e5f1) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #10 std::sys::unix::thread::Thread::new::thread_start std.c52a41fd-cgu.0:? (foo+0xb2a02) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n\r\n  Thread T1 (tid=3962205, running) created by main thread at:\r\n    #0 pthread_create ??:? (foo+0x12fcd) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #1 std::sys::unix::thread::Thread::new ??:? (foo+0xb2870) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #2 std::thread::scoped::<impl std::thread::Builder>::spawn_scoped :? (foo+0x97dec) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #3 std::thread::scoped::Scope::spawn :? (foo+0x92eed) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #4 foo::main::{{closure}} :? (foo+0x92d36) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #5 std::thread::scoped::scope::{{closure}} :? (foo+0x93300) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #6 <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once :? (foo+0x99701) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #7 std::panicking::try::do_call 4dens7a6cxe1twbg:? (foo+0x94a56) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #8 __rust_try 4dens7a6cxe1twbg:? (foo+0x94d78) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #9 std::panicking::try :? (foo+0x94712) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #10 std::panic::catch_unwind :? (foo+0x94011) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #11 std::thread::scoped::scope :? (foo+0x9304a) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #12 foo::main 3fndttuwbglga3yi:? (foo+0x93af6) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #13 core::ops::function::FnOnce::call_once :? (foo+0x8e63e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #14 std::sys_common::backtrace::__rust_begin_short_backtrace :? (foo+0x91ae1) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #15 std::rt::lang_start::{{closure}} :? (foo+0x97b0e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #16 std::rt::lang_start_internal ??:? (foo+0xaa36e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #17 main ??:? (foo+0x93b57) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n\r\nSUMMARY: ThreadSanitizer: data race ??:? in __interceptor_free\r\n==================\r\n==================\r\nWARNING: ThreadSanitizer: data race (pid=3962202)\r\n  Write of size 8 at 0x7b0c00000090 by thread T1:\r\n    #0 free ??:? (foo+0x121b4) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #1 <alloc::alloc::Global as core::alloc::Allocator>::deallocate :? (foo+0x92cf0) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #2 <alloc::sync::Weak<T> as core::ops::drop::Drop>::drop 110kdawijufz6q4:? (foo+0x9018d) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #3 core::ptr::drop_in_place<alloc::sync::Weak<std::thread::Packet<()>>> :? (foo+0x8f8a1) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #4 alloc::sync::Arc<T>::drop_slow :? (foo+0x9715a) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #5 <alloc::sync::Arc<T> as core::ops::drop::Drop>::drop 110kdawijufz6q4:? (foo+0x8fcae) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #6 core::ptr::drop_in_place<alloc::sync::Arc<std::thread::Packet<()>>> :? (foo+0x8f801) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #7 std::thread::Builder::spawn_unchecked_::{{closure}} :? (foo+0x98dcb) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #8 core::ops::function::FnOnce::call_once{{vtable.shim}} ??:? (foo+0x8e5f1) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #9 std::sys::unix::thread::Thread::new::thread_start std.c52a41fd-cgu.0:? (foo+0xb2a02) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n\r\n  Previous atomic write of size 8 at 0x7b0c00000090 by main thread:\r\n    #0 core::sync::atomic::atomic_sub :? (foo+0x90e59) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #1 <alloc::sync::Arc<T> as core::ops::drop::Drop>::drop 110kdawijufz6q4:? (foo+0x8fc71) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #2 core::ptr::drop_in_place<alloc::sync::Arc<std::thread::Packet<()>>> :? (foo+0x8f801) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #3 core::ptr::drop_in_place<std::thread::JoinInner<()>> 110kdawijufz6q4:? (foo+0x8f3ac) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #4 core::ptr::drop_in_place<std::thread::scoped::ScopedJoinHandle<()>> :? (foo+0x8f601) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #5 foo::main::{{closure}} :? (foo+0x92d44) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #6 std::thread::scoped::scope::{{closure}} :? (foo+0x93300) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #7 <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once :? (foo+0x99701) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #8 std::panicking::try::do_call 4dens7a6cxe1twbg:? (foo+0x94a56) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #9 __rust_try 4dens7a6cxe1twbg:? (foo+0x94d78) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #10 std::panicking::try :? (foo+0x94712) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #11 std::panic::catch_unwind :? (foo+0x94011) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #12 std::thread::scoped::scope :? (foo+0x9304a) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #13 foo::main 3fndttuwbglga3yi:? (foo+0x93af6) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #14 core::ops::function::FnOnce::call_once :? (foo+0x8e63e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #15 std::sys_common::backtrace::__rust_begin_short_backtrace :? (foo+0x91ae1) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #16 std::rt::lang_start::{{closure}} :? (foo+0x97b0e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #17 std::rt::lang_start_internal ??:? (foo+0xaa36e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #18 main ??:? (foo+0x93b57) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n\r\n  Thread T1 (tid=3962205, running) created by main thread at:\r\n    #0 pthread_create ??:? (foo+0x12fcd) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #1 std::sys::unix::thread::Thread::new ??:? (foo+0xb2870) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #2 std::thread::scoped::<impl std::thread::Builder>::spawn_scoped :? (foo+0x97dec) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #3 std::thread::scoped::Scope::spawn :? (foo+0x92eed) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #4 foo::main::{{closure}} :? (foo+0x92d36) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #5 std::thread::scoped::scope::{{closure}} :? (foo+0x93300) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #6 <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once :? (foo+0x99701) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #7 std::panicking::try::do_call 4dens7a6cxe1twbg:? (foo+0x94a56) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #8 __rust_try 4dens7a6cxe1twbg:? (foo+0x94d78) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #9 std::panicking::try :? (foo+0x94712) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #10 std::panic::catch_unwind :? (foo+0x94011) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #11 std::thread::scoped::scope :? (foo+0x9304a) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #12 foo::main 3fndttuwbglga3yi:? (foo+0x93af6) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #13 core::ops::function::FnOnce::call_once :? (foo+0x8e63e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #14 std::sys_common::backtrace::__rust_begin_short_backtrace :? (foo+0x91ae1) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #15 std::rt::lang_start::{{closure}} :? (foo+0x97b0e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #16 std::rt::lang_start_internal ??:? (foo+0xaa36e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #17 main ??:? (foo+0x93b57) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n\r\nSUMMARY: ThreadSanitizer: data race ??:? in __interceptor_free\r\n==================\r\n==================\r\nWARNING: ThreadSanitizer: data race (pid=3962202)\r\n  Write of size 8 at 0x7b0c00000060 by thread T1:\r\n    #0 free ??:? (foo+0x121b4) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #1 __GI___call_tls_dtors stdlib/cxa_thread_atexit_impl.c:159 (libc.so.6+0x45d9e) (BuildId: 69389d485a9793dbe873f0ea2c93e02efaa9aa3d)\r\n\r\n  Previous atomic write of size 8 at 0x7b0c00000060 by main thread:\r\n    #0 core::sync::atomic::atomic_sub :? (foo+0x90e59) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #1 <alloc::sync::Arc<T> as core::ops::drop::Drop>::drop 110kdawijufz6q4:? (foo+0x8fbc1) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #2 core::ptr::drop_in_place<alloc::sync::Arc<std::thread::Inner>> 110kdawijufz6q4:? (foo+0x8f421) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #3 core::ptr::drop_in_place<core::pin::Pin<alloc::sync::Arc<std::thread::Inner>>> 110kdawijufz6q4:? (foo+0x8f9b1) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #4 core::ptr::drop_in_place<std::thread::Thread> :? (foo+0x8ed41) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #5 core::ptr::drop_in_place<std::thread::JoinInner<()>> 110kdawijufz6q4:? (foo+0x8f371) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #6 core::ptr::drop_in_place<std::thread::scoped::ScopedJoinHandle<()>> :? (foo+0x8f601) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #7 foo::main::{{closure}} :? (foo+0x92d44) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #8 std::thread::scoped::scope::{{closure}} :? (foo+0x93300) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #9 <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once :? (foo+0x99701) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #10 std::panicking::try::do_call 4dens7a6cxe1twbg:? (foo+0x94a56) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #11 __rust_try 4dens7a6cxe1twbg:? (foo+0x94d78) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #12 std::panicking::try :? (foo+0x94712) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #13 std::panic::catch_unwind :? (foo+0x94011) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #14 std::thread::scoped::scope :? (foo+0x9304a) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #15 foo::main 3fndttuwbglga3yi:? (foo+0x93af6) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #16 core::ops::function::FnOnce::call_once :? (foo+0x8e63e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #17 std::sys_common::backtrace::__rust_begin_short_backtrace :? (foo+0x91ae1) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #18 std::rt::lang_start::{{closure}} :? (foo+0x97b0e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #19 std::rt::lang_start_internal ??:? (foo+0xaa36e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #20 main ??:? (foo+0x93b57) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n\r\n  Thread T1 (tid=3962205, running) created by main thread at:\r\n    #0 pthread_create ??:? (foo+0x12fcd) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #1 std::sys::unix::thread::Thread::new ??:? (foo+0xb2870) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #2 std::thread::scoped::<impl std::thread::Builder>::spawn_scoped :? (foo+0x97dec) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #3 std::thread::scoped::Scope::spawn :? (foo+0x92eed) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #4 foo::main::{{closure}} :? (foo+0x92d36) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #5 std::thread::scoped::scope::{{closure}} :? (foo+0x93300) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #6 <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once :? (foo+0x99701) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #7 std::panicking::try::do_call 4dens7a6cxe1twbg:? (foo+0x94a56) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #8 __rust_try 4dens7a6cxe1twbg:? (foo+0x94d78) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #9 std::panicking::try :? (foo+0x94712) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #10 std::panic::catch_unwind :? (foo+0x94011) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #11 std::thread::scoped::scope :? (foo+0x9304a) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #12 foo::main 3fndttuwbglga3yi:? (foo+0x93af6) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #13 core::ops::function::FnOnce::call_once :? (foo+0x8e63e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #14 std::sys_common::backtrace::__rust_begin_short_backtrace :? (foo+0x91ae1) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #15 std::rt::lang_start::{{closure}} :? (foo+0x97b0e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #16 std::rt::lang_start_internal ??:? (foo+0xaa36e) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n    #17 main ??:? (foo+0x93b57) (BuildId: 77506b419fcaa351272fa3e513eec1eb17e95524)\r\n\r\nSUMMARY: ThreadSanitizer: data race ??:? in __interceptor_free\r\n==================\r\nThreadSanitizer: reported 3 warnings\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "Lee-Janggun", "id": 56512187, "node_id": "MDQ6VXNlcjU2NTEyMTg3", "avatar_url": "https://avatars.githubusercontent.com/u/56512187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lee-Janggun", "html_url": "https://github.com/Lee-Janggun", "followers_url": "https://api.github.com/users/Lee-Janggun/followers", "following_url": "https://api.github.com/users/Lee-Janggun/following{/other_user}", "gists_url": "https://api.github.com/users/Lee-Janggun/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lee-Janggun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lee-Janggun/subscriptions", "organizations_url": "https://api.github.com/users/Lee-Janggun/orgs", "repos_url": "https://api.github.com/users/Lee-Janggun/repos", "events_url": "https://api.github.com/users/Lee-Janggun/events{/privacy}", "received_events_url": "https://api.github.com/users/Lee-Janggun/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101206/timeline", "performed_via_github_app": null, "state_reason": "completed"}