{"url": "https://api.github.com/repos/rust-lang/rust/issues/112568", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112568/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112568/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112568/events", "html_url": "https://github.com/rust-lang/rust/issues/112568", "id": 1753583052, "node_id": "I_kwDOAAsO6M5ohY3M", "number": 112568, "title": "Bounds on return types in supertraits are not implied", "user": {"login": "djkoloski", "id": 7554649, "node_id": "MDQ6VXNlcjc1NTQ2NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/7554649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djkoloski", "html_url": "https://github.com/djkoloski", "followers_url": "https://api.github.com/users/djkoloski/followers", "following_url": "https://api.github.com/users/djkoloski/following{/other_user}", "gists_url": "https://api.github.com/users/djkoloski/gists{/gist_id}", "starred_url": "https://api.github.com/users/djkoloski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djkoloski/subscriptions", "organizations_url": "https://api.github.com/users/djkoloski/orgs", "repos_url": "https://api.github.com/users/djkoloski/repos", "events_url": "https://api.github.com/users/djkoloski/events{/privacy}", "received_events_url": "https://api.github.com/users/djkoloski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 5347681781, "node_id": "LA_kwDOAAsO6M8AAAABPr8l9Q", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-return_type_notation", "name": "F-return_type_notation", "color": "f9c0cc", "default": false, "description": "`#[feature(return_type_notation)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-06-12T21:02:54Z", "updated_at": "2023-06-13T01:07:06Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**This is an issue with the unstable `return_type_notation` feature.**\r\n\r\nI'm trying to write some code that provides `Send`-able versions of traits that may contain async functions:\r\n\r\n```rust\r\n#![feature(\r\n    async_fn_in_trait,\r\n    return_position_impl_trait_in_trait,\r\n    return_type_notation\r\n)]\r\n\r\nuse tokio::task::{JoinHandle, spawn};\r\n\r\ntrait Foo {\r\n    async fn bar(&self) -> i32;\r\n}\r\n\r\ntrait SendFoo: Foo<bar(): Send> + Send {}\r\n\r\nfn foobar(foo: impl SendFoo) -> JoinHandle<i32> {\r\n    spawn(async move {\r\n        let future = foo.bar();\r\n        future.await\r\n    })\r\n}\r\n<code>\r\n```\r\n\r\nGives the error:\r\n\r\n```\r\nerror[E0277]: `impl Future<Output = i32>` cannot be sent between threads safely\r\n  --> src/lib.rs:15:21\r\n   |\r\n15 | fn foobar(foo: impl SendFoo) -> JoinHandle<i32> {\r\n   |                     ^^^^^^^ `impl Future<Output = i32>` cannot be sent between threads safely\r\n   |\r\n   = help: the trait `for<'a> Send` is not implemented for `impl Future<Output = i32>`\r\nnote: required by a bound in `SendFoo`\r\n  --> src/lib.rs:13:27\r\n   |\r\n13 | trait SendFoo: Foo<bar(): Send> + Send {}\r\n   |                           ^^^^ required by this bound in `SendFoo`\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\n```\r\n\r\nI expected the `SendFoo: Foo<bar(): Send>` bound to mean \"anything that implements `SendFoo` also has a `bar()` which implements `Send`\" (I think this is implied bounds?). Instead, it appears to function like a where clause on a trait (non-implied). It's acting like I wrote:\r\n\r\n```rust\r\ntrait SendFoo: Foo + Send\r\nwhere\r\n    <Self as Foo>::bar(): Send,\r\n{}\r\n```\r\n\r\n(note that this syntax is not currently accepted by the compiler, but it gets the point across)\r\n\r\nAre these bounds supposed to not be implied? As an aside, the error message here tripped me up for a while too.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.72.0-nightly (37998ab50 2023-06-11)\r\nbinary: rustc\r\ncommit-hash: 37998ab508d5d9fa0d465d7b535dc673087dda8f\r\ncommit-date: 2023-06-11\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.72.0-nightly\r\nLLVM version: 16.0.5\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112568/timeline", "performed_via_github_app": null, "state_reason": null}