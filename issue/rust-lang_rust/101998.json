{"url": "https://api.github.com/repos/rust-lang/rust/issues/101998", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101998/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101998/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101998/events", "html_url": "https://github.com/rust-lang/rust/issues/101998", "id": 1377179876, "node_id": "I_kwDOAAsO6M5SFhjk", "number": 101998, "title": "[diagnostic] Add better diagnostic for Result types", "user": {"login": "vegerot", "id": 5297725, "node_id": "MDQ6VXNlcjUyOTc3MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5297725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vegerot", "html_url": "https://github.com/vegerot", "followers_url": "https://api.github.com/users/vegerot/followers", "following_url": "https://api.github.com/users/vegerot/following{/other_user}", "gists_url": "https://api.github.com/users/vegerot/gists{/gist_id}", "starred_url": "https://api.github.com/users/vegerot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vegerot/subscriptions", "organizations_url": "https://api.github.com/users/vegerot/orgs", "repos_url": "https://api.github.com/users/vegerot/repos", "events_url": "https://api.github.com/users/vegerot/events{/privacy}", "received_events_url": "https://api.github.com/users/vegerot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-09-18T21:12:22Z", "updated_at": "2022-09-18T21:47:43Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n\r\n```rust\r\nfn parse_num(num: String) -> i32 {\r\n    num.parse()\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> <source>:3:5\r\n  |\r\n2 | fn parse_num(num: String) -> i32 {\r\n  |                              --- expected `i32` because of return type\r\n3 |     num.parse() // \r\n  |     ^^^^^^^^^^^ expected `i32`, found enum `Result`\r\n  |\r\n  = note: expected type `i32`\r\n             found enum `Result<_, _>`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nCompiler returned: 1\r\n```\r\nhttps://godbolt.org/z/4KMY53974\r\n\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like (suggestions appreciated):\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> parseInt.rs:2:5\r\n  |\r\n1 | pub fn parse_num(num: String) -> i32 {\r\n  |                                  --- expected `i32` because of return type\r\n2 |     num.parse()\r\n  |     ^^^^^^^^^^^\r\n  |     |\r\n  |     expected `i32`, found enum `Result`\r\n  |     help: Either change the return type to `Result<i32, std::num::ParseIntError>` or  use `unwrap`: `num.parse().unwrap()`\r\n  |\r\n  = note: expected type `i32`\r\n             found enum `Result<_, _>`\r\nFor more information about this error, try `rustc --explain E0420`.\r\n\r\n```\r\n\r\nRationale: \r\nRust is known for its fantastic error messages.  One things that many Rust newcomers struggle with is `Result` vs. patterns in other languages (like throwing exceptions).  I feel like this specific situation occurs pretty frequently, so a specific diagnostic would be helpful.  \r\nThere's only so much explaining that can be done in a single `help:` line, so I think we should have a specific `rustc --explain` document going in-depth about how `Result` works, and different patterns you can do with it to help resolve common issues programmers have with `Result`.  (such as changing return types and different methods on `Result`)\r\n\r\n### To suggest `unwrap` or not suggest `unwrap`:\r\nI've thought a lot about this.\r\n\r\nI think it's a difference in opinion.  I understand why someone wouldn't want to recommend `.unwrap()`, because if something can error (like  `String.parse()`)  you _should_ handle it.\r\n\r\nAdditionally, most of the people reading this message (who don't already know how to fix it) will be _learning_ how to fix it from here.  Since `unwrap` is the easiest (but non-idiomatic) solution, do we want to be teaching new Rust devs this?\r\n\r\nThat question isn't rhetorical.  I want to help Rust developers be unblocked.  If someone is learning Rust and is frustrated, I can see real value in telling them about `unwrap`.  They'll learn the right way eventually (right?) but for now let's unblock them.\r\n\r\nOn the other hand, suggesting \"either change the return type to `Result` or use `.unwrap`\" seems to _encourage_ this practice, and do we want every Rust dev to see this every time they return a `Result<T` when they wanted a `T`?\r\n\r\nI think writing a blog/doc about _what_ `Result` is, and alllll the different methods on `Result` you can use to fix your problems, would be a good middle ground\r\n\r\n...but it just feels odd that we _know_ something they can do to fix their problem (that's part of the language) but we purposefully **withhold** this information :information_source: \r\n\r\n\r\ntl;dr: I think suggesting `.unwrap()` is a **bad** idea because it's not something a Rust pro would do.\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101998/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101998/timeline", "performed_via_github_app": null, "state_reason": null}