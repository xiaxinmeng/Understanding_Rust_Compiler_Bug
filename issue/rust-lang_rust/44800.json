{"url": "https://api.github.com/repos/rust-lang/rust/issues/44800", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44800/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44800/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44800/events", "html_url": "https://github.com/rust-lang/rust/issues/44800", "id": 260048846, "node_id": "MDU6SXNzdWUyNjAwNDg4NDY=", "number": 44800, "title": "seg fault pushing on either side of a VecDeque", "user": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-24T00:57:53Z", "updated_at": "2018-08-21T21:32:15Z", "closed_at": "2017-09-27T04:57:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been seeing lots of bad behavior trying to use VecDeque. I've boiled it down to a relatively simple example which shows some of the bad behavior I was seeing and additionally seg faults.\r\n\r\nThis was with:\r\nrustc 1.20.0 (f3d6973f4 2017-08-27)\r\nbinary: rustc\r\ncommit-hash: f3d6973f41a7d1fb83029c9c0ceaf0f5d4fd7208\r\ncommit-date: 2017-08-27\r\nhost: x86_64-apple-darwin\r\nrelease: 1.20.0\r\nLLVM version: 4.0\r\nand also rust 1.19\r\n\r\nThe output I expect to see is:\r\n> old packet =  00 88 01 02 03 04 05 06 01 02 03 04 05 06 01 02 03 04 05 06 00 37 03 80 45 14 00 14 00 15 00 17\r\n> pushing D9 58 FB A8 \r\n> new packet =  00 88 01 02 03 04 05 06 01 02 03 04 05 06 01 02 03 04 05 06 00 37 03 80 45 14 00 14 00 15 00 17 D9 58 FB A8\r\n\r\nThe output I get is:\r\n> old packet =  00 88 01 02 03 04 05 06 01 02 03 04 05 06 01 02 03 04 05 06 00 37 03 80 45 14 00 14 00 15 00 17\r\n> pushing D9 58 FB A8 \r\n> new packet =  00 88 01 02 03 04 05 06 01 02 03 04 05 06 01 02 03 04 05 06 00 37 03 80 45 14 00 14 00 15 00 17 00 58 FB A8\r\n> Segmentation fault: 11\r\n\r\nNote that the fourth from the last byte should be D9.\r\n\r\nWork around seems to be to use a large VecDeqeue capacity.\r\n\r\nHere's the code:\r\n\r\n```\r\nuse std::collections::VecDeque;\r\nuse std::fmt;\r\n\r\npub struct Packet\r\n{\r\n\tpub payload: VecDeque<u8>,\r\n}\r\n\r\npub struct Header\r\n{\r\n\tpub data: Vec<u8>,\r\n}\r\n\r\nimpl Packet\r\n{\r\n\tpub fn new() -> Self\r\n\t{\r\n\t\tlet payload = VecDeque::with_capacity(32);\r\n\t\tPacket{payload}\r\n\t}\r\n\r\n\tpub fn len(&self) -> usize\r\n\t{\r\n\t\tself.payload.len()\r\n\t}\r\n\r\n\tpub fn push_header(&mut self, header: &Header)\r\n\t{\r\n\t\tself.payload.reserve(header.data.len());\r\n\t\tfor b in header.data.iter().rev() {\r\n\t\t\tself.payload.push_front(*b);\r\n\t\t}\r\n\t}\r\n\r\n\tpub fn push_back_bytes(&mut self, data: &[u8])\r\n\t{\r\n\t\tself.payload.extend(data.iter());\r\n\t}\r\n}\r\n\r\nimpl fmt::Debug for Packet \r\n{\r\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result\r\n\t{\r\n\t\tlet mut bytes = String::with_capacity(3*self.len());\r\n\t\tfor i in 0..self.payload.len() {\r\n\t\t\tbytes.push_str(&format!(\" {:02X}\", self.payload[i]));\r\n\t\t}\r\n\r\n        write!(f, \"{}\", bytes)\r\n    }\r\n}\r\n\r\nimpl Header\r\n{\r\n\tpub fn new() -> Self\r\n\t{\r\n\t\tlet data = Vec::with_capacity(20);\r\n\t\tHeader{data}\r\n\t}\r\n\r\n\tpub fn with_capacity(capacity: usize) -> Self\r\n\t{\r\n\t\tlet data = Vec::with_capacity(capacity);\r\n\t\tHeader{data}\r\n\t}\r\n\r\n\tpub fn push8(&mut self, data: u8)\r\n\t{\r\n\t\tself.data.push(data);\r\n\t}\r\n\r\n\tpub fn push16(&mut self, data: u16)\r\n\t{\r\n\t\tself.data.push((data >> 8) as u8);\r\n\t\tself.data.push((data & 0xFF) as u8);\r\n\t}\r\n\r\n\tpub fn push32(&mut self, data: u32)\r\n\t{\r\n\t\tself.data.push((data >> 24) as u8);\r\n\t\tself.data.push(((data >> 16) & 0xFF) as u8);\r\n\t\tself.data.push(((data >> 8) & 0xFF) as u8);\r\n\t\tself.data.push((data & 0xFF) as u8);\r\n\t}\r\n\r\n\tpub fn push_bytes(&mut self, data: &[u8])\r\n\t{\r\n\t\tself.data.extend(data);\r\n\t}\r\n}\r\n\r\nfn push_ipv4(packet: &mut Packet)\r\n{\r\n\tlet payload_len = packet.len();\r\n\tlet mut header = Header::with_capacity(20);\r\n\r\n\tlet b = 0x45;\t\t\t\t\t\t// version + IHL (we don't support options so length is fixed)\r\n\theader.push8(b);\r\n\r\n\theader.push8(20);\r\n\r\n\tlet hw = 20 + payload_len;\t\t\t// total length\r\n\theader.push16(hw as u16);\r\n\r\n\theader.push16(21);\t// identification\r\n\theader.push16(23);\r\n\r\n\tpacket.push_header(&header);\r\n}\r\n\r\nfn push_mac(packet: &mut Packet)\r\n{\r\n\tlet mut header = Header::with_capacity(30);\r\n\r\n\tlet hw = 0b1000_10_00;\t\t// frame control, see 9.2.4.1 \r\n\theader.push16(hw);\r\n\r\n\tlet addr = [1, 2, 3, 4, 5, 6];\r\n\tfor &b in addr.iter() {\t// address 1, see 9.3.2.1\r\n\t\theader.push8(b);\r\n\t}\r\n\r\n\tfor &b in addr.iter() {\t// address 2\r\n\t\theader.push8(b);\r\n\t}\r\n\r\n\tfor &b in addr.iter() {// address 3\r\n\t\theader.push8(b);\r\n\t}\r\n\r\n\theader.push16(55);\r\n\r\n\tlet hw = 0b111_0_00_0_000;\t// QoS control, see 9.2.4.5.1\r\n\theader.push16(hw);\r\n\r\n\tpacket.push_header(&header);\r\n\r\n\tlet fcs = [0xD9, 0x58, 0xFB, 0xA8];\r\n\tprintln!(\"old packet = {:?}\", packet);\r\n\tprintln!(\"pushing {:X} {:X} {:X} {:X} \", fcs[0], fcs[1], fcs[2], fcs[3]);\r\n\tpacket.push_back_bytes(&fcs);\r\n\r\n\tprintln!(\"new packet = {:?}\", packet);\r\n}\r\n\r\nfn main()\r\n{\r\n\tlet mut packet = Packet::new();\r\n\tpush_ipv4(&mut packet);\r\n\tpush_mac(&mut packet);\r\n}\r\n```\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44800/reactions", "total_count": 3, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44800/timeline", "performed_via_github_app": null, "state_reason": "completed"}