{"url": "https://api.github.com/repos/rust-lang/rust/issues/80691", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80691/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80691/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80691/events", "html_url": "https://github.com/rust-lang/rust/issues/80691", "id": 778181952, "node_id": "MDU6SXNzdWU3NzgxODE5NTI=", "number": 80691, "title": "Trait predicate evaluation cache incorrectly handles EvaluatedToOk", "user": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-01-04T15:41:33Z", "updated_at": "2021-03-24T23:39:27Z", "closed_at": "2021-03-24T23:39:27Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Split out from the discussion in https://github.com/rust-lang/rust/issues/80336. See https://github.com/rust-lang/rust/issues/80336#issuecomment-750832566 for the original comments.\r\n\r\n------\r\n\r\nThe issue is caused by the way that we handle regions in the evaluation cache. When we insert a result into the evaluation cache (either `infcx.evaluation_cache` or `tcx.evaluation_cache`, we use a 'freshened' version of the original `TraitPredicate` as the key. The 'freshened' `TraitPredicate` has all non-late-bound regions erased.\r\n\r\nUnfortunately, this can lead to issues if we try to evaluate the following two predicates:\r\n\r\n```rust\r\nimpl SomeTrait for SomeType<'static>\r\n\r\nSomeType<'static> as SomeTrait\r\nSomeType<'#_r> as SomeTrait\r\n```\r\n\r\nWhen we evaluate `SomeType<'static> as SomeTrait`, we'll get `EvaluatedToOk`, since the region parameter in our trait ref is known to match the impl. We will then cache the result as `<SomeType<'erased> as SomeTrait> -> EvaluatedToOk`.\r\n\r\nIf we later try to evaluate `SomeType<'#_r> as SomeTrait`, we will end up matching the evaluation cache entry, giving us a result of `EvaluatedToOk`. However, we *should* have gotten a result of `EvaluatedToOkModuloRegions`, since we don't know that `'#_r == 'static` holds.\r\n\r\nThis is really difficult to observe in practice, for a number of reasons:\r\n\r\n* The relevant trait predicates need to get *evaluated*, not just registered in a `FulfillmentContext`.\r\n* Trait evaluation usually goes through the `evaluate_obligation` query, which canonicalizes the regions in the input trait ref. To end up trying to evaluate `SomeType<'static> as SomeTrait`, we need to end up calling `evaluate_predicate_recursively` on it, with a *different* original trait ref used in the original query.\r\n* Using `EvaluatedToOkModuloRegions` instead of `EvaluatedToOk` only seems to cause an error when it results in the incremental hash changing (I don't know if it's possible to weaponize this into extending a lifetime).\r\n\r\nAs a result, I haven't been able to minimize this.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80691/timeline", "performed_via_github_app": null, "state_reason": "completed"}