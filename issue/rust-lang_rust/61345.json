{"url": "https://api.github.com/repos/rust-lang/rust/issues/61345", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61345/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61345/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61345/events", "html_url": "https://github.com/rust-lang/rust/issues/61345", "id": 450212632, "node_id": "MDU6SXNzdWU0NTAyMTI2MzI=", "number": 61345, "title": "Miri engine: avoid having mutliple AllocId for the same static", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 419557634, "node_id": "MDU6TGFiZWw0MTk1NTc2MzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-medium", "name": "E-medium", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Medium / intermediate"}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}, {"id": 1244499056, "node_id": "MDU6TGFiZWwxMjQ0NDk5MDU2", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-miri", "name": "A-miri", "color": "f7e101", "default": false, "description": "Area: The miri tool"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-30T09:24:05Z", "updated_at": "2022-07-20T15:05:55Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "We currently actually assign two `AllocId` to every static/const: one pointing to the `DefId` (a \"lazy\" ID that can be created without evaluating anything), and one pointing to an actual `Allocation` (a \"resolved ID\" available only after it has been evaluated).  Also see the comments added in https://github.com/rust-lang/rust/pull/61278.  The \"resolved ID\" should never be visible to other CTFE or Miri evaluations, because then we'd have two different IDs for the same allocation!\r\n\r\nThe second ID gets assigned when we intern the result of const evaluation. Or rather, it gets assigned and added to the local map of the CTFE engine when we [allocate the return place for const evaluation](https://github.com/rust-lang/rust/blob/c28084ac16af4ab594b6860958df140e7c876a13/src/librustc_mir/const_eval.rs#L147), which is later used as the root for interning at which point it gets moved into the global tcx allocation map.\r\n\r\nFirst of all, are we entirely sure that the stuff we intern will not use the resolved ID anywhere?  Rust provides no \"obvious\" way to take the address of the return place, and I think that would be the only way the \"resolved ID\" could leak into the evaluated program. Still, can we make interning *not* intern the \"root\", just to be really sure that if that ID leaks somehow it will not cause problems?  Or even better, can we not allocate a new ID for the return place and instead use the \"original\" ID?  In the CTFE engine, that ID could map to an `Allocation` in the local memory map, even though it maps to a `Static` in the global tcx memory.  By avoiding even assigning a second ID we'd avoid all problems!\r\n\r\nIf we cannot avoid assigning a second ID, we also have to make sure that other computations, when they request the content of a static, do not use the \"resolved ID\".  Currently, the `const_eval_raw` query will return a `RawConst` pointing exactly to that \"resolved ID\". Maybe we should instead make it return a `&'tcx Allocation`? We don't really need the ID in there because whoever made the `const_eval_raw` query obviously had the `DefId` needed to do that and that's all it takes to lookup the \"lazy\" ID in the tcx!  But we could still include it for convenience.\r\n\r\nCc @oli-obk \t", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61345/timeline", "performed_via_github_app": null, "state_reason": null}