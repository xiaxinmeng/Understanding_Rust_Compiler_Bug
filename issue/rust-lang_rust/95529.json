{"url": "https://api.github.com/repos/rust-lang/rust/issues/95529", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95529/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95529/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95529/events", "html_url": "https://github.com/rust-lang/rust/issues/95529", "id": 1188308122, "node_id": "I_kwDOAAsO6M5G1CSa", "number": 95529, "title": "`Location` is missing the function name", "user": {"login": "schreter", "id": 40718699, "node_id": "MDQ6VXNlcjQwNzE4Njk5", "avatar_url": "https://avatars.githubusercontent.com/u/40718699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schreter", "html_url": "https://github.com/schreter", "followers_url": "https://api.github.com/users/schreter/followers", "following_url": "https://api.github.com/users/schreter/following{/other_user}", "gists_url": "https://api.github.com/users/schreter/gists{/gist_id}", "starred_url": "https://api.github.com/users/schreter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schreter/subscriptions", "organizations_url": "https://api.github.com/users/schreter/orgs", "repos_url": "https://api.github.com/users/schreter/repos", "events_url": "https://api.github.com/users/schreter/events{/privacy}", "received_events_url": "https://api.github.com/users/schreter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1448485701, "node_id": "MDU6TGFiZWwxNDQ4NDg1NzAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-error-handling", "name": "A-error-handling", "color": "f7e101", "default": false, "description": "Area: Error handling"}], "state": "open", "locked": false, "assignee": {"login": "BGR360", "id": 13339928, "node_id": "MDQ6VXNlcjEzMzM5OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/13339928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGR360", "html_url": "https://github.com/BGR360", "followers_url": "https://api.github.com/users/BGR360/followers", "following_url": "https://api.github.com/users/BGR360/following{/other_user}", "gists_url": "https://api.github.com/users/BGR360/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGR360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGR360/subscriptions", "organizations_url": "https://api.github.com/users/BGR360/orgs", "repos_url": "https://api.github.com/users/BGR360/repos", "events_url": "https://api.github.com/users/BGR360/events{/privacy}", "received_events_url": "https://api.github.com/users/BGR360/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "BGR360", "id": 13339928, "node_id": "MDQ6VXNlcjEzMzM5OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/13339928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGR360", "html_url": "https://github.com/BGR360", "followers_url": "https://api.github.com/users/BGR360/followers", "following_url": "https://api.github.com/users/BGR360/following{/other_user}", "gists_url": "https://api.github.com/users/BGR360/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGR360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGR360/subscriptions", "organizations_url": "https://api.github.com/users/BGR360/orgs", "repos_url": "https://api.github.com/users/BGR360/repos", "events_url": "https://api.github.com/users/BGR360/events{/privacy}", "received_events_url": "https://api.github.com/users/BGR360/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2022-03-31T16:00:54Z", "updated_at": "2022-06-27T22:41:01Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "For our project, I implemented a version of `Result` which uses `Try` trait in such a way as to track the error handling locations, so we get a \"call stack\" of the error at the end. This works in conjunction with `#[track_caller]` very well and we see the locations the error handling took.\n\nHowever, there is one major deficiency in `Location` - it only gives us the source name and line. Yes, with that, it's possible to manually look up the function where it happened, but it would be significantly simpler to evaluate bug reports by looking at the call trace with function names (we have practiced this in a large C++ project, where basically the dev support standardized on initially evaluating everything by function names in the call trace, ignoring line numbers). So it would be extremely useful if the `Location` would be extended with another `&str` containing the function name (ideally with generics). It can be also a mangled name, I don't care much, but the function name is important.\n\nBefore you shout \"backtrace!\" - yes, but... We are using heavy asynchronous processing, handling errors across `await`s, where the backtrace has about zero value. Similar for tracing, we can't just keep the trace active permanently due to performance reasons. So the error handling \"call stack\" is a perfect compromise - cheap and sufficiently valuable (except that it's missing the function name).\n\nAccording to my code study of the Rust compiler code, it should basically boil down to getting the function name from the current `Span` and adding it in addition to the file name to the generated const `Location` here:\n\nhttps://github.com/rust-lang/rust/blob/012720ffb075a087b781325d17d1822a340a2f2a/compiler/rustc_codegen_cranelift/src/common.rs#L351\n\nI raised this initially in a comment in https://github.com/rust-lang/rust/issues/47809. Here some observations from the discussion there:\n- It's clear that adding the function name will increase generated string section (by potentially quite a bit), because instead of a single string per file we'll need to store potentially many strings per file.\n- It's also clear that compilation speed might be minimally affected (only where the location is actually used, though), because instead of a single string with the file name another string with the function name must be created.\n\nTo alleviate this, storing function name could be made optional at compilation time, e.g., using a compiler flag.\n\nOf course, one could argue that this could be also done in post-processing of traced errors. Of course, that's a possibility. But that's another step, which makes it quite cumbersome to use and needs a lot of resources and exact source code. The compiler already knows it at compile time and aside from costing more space in the generated executable (string section), there should be no adverse effects of having the function name in the `Location`.\n\nFurther, having the function name in `Location`, it would in general allow building various tools which use the location for debugging purposes, which in turn would help the community in general. So I think it's worth extending it.\n\n@anp, @eddyb & @aturon you seem to have worked on this topic recently, so CC to you.\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"BGR360\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95529/timeline", "performed_via_github_app": null, "state_reason": null}