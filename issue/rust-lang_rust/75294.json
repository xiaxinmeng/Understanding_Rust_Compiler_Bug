{"url": "https://api.github.com/repos/rust-lang/rust/issues/75294", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75294/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75294/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75294/events", "html_url": "https://github.com/rust-lang/rust/issues/75294", "id": 675534289, "node_id": "MDU6SXNzdWU2NzU1MzQyODk=", "number": 75294, "title": "Tracking Issue for {HashMap,BTreeMap}::into_{keys,values}", "user": {"login": "canova", "id": 466239, "node_id": "MDQ6VXNlcjQ2NjIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/466239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canova", "html_url": "https://github.com/canova", "followers_url": "https://api.github.com/users/canova/followers", "following_url": "https://api.github.com/users/canova/following{/other_user}", "gists_url": "https://api.github.com/users/canova/gists{/gist_id}", "starred_url": "https://api.github.com/users/canova/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canova/subscriptions", "organizations_url": "https://api.github.com/users/canova/orgs", "repos_url": "https://api.github.com/users/canova/repos", "events_url": "https://api.github.com/users/canova/events{/privacy}", "received_events_url": "https://api.github.com/users/canova/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-08-08T14:31:50Z", "updated_at": "2021-05-06T17:42:31Z", "closed_at": "2021-05-06T17:42:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(map_into_keys_values)]`\r\n\r\nThis is a tracking issue for `{HashMap,BTreeMap}::into_{keys,values}`.\r\n\r\n<!--\r\nInclude a short description of the feature.\r\n-->\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\n// alloc::collections::btree_map\r\n\r\nimpl<K, V> BTreeMap<K, V> {\r\n    pub fn into_keys(self) -> IntoKeys<K, V>;\r\n    pub fn into_values(self) -> IntoValues<K, V>;\r\n}\r\n\r\npub struct IntoKeys<K, V>;\r\npub struct IntoValues<K, V>;\r\n\r\nimpl<K, V> Iterator for IntoKeys<K, V> { type Item = K; }\r\nimpl<K, V> DoubleEndedIterator for IntoKeys<K, V> {}\r\nimpl<K, V> ExactSizeIterator for IntoKeys<K, V> {}\r\nimpl<K, V> FusedIterator for IntoKeys<K, V> {}\r\nimpl<K: Debug, V> Debug for IntoKeys<K, V> {}\r\n\r\nimpl<K, V> Iterator for IntoValues<K, V> { type Item = V; }\r\nimpl<K, V> DoubleEndedIterator for IntoValues<K, V> {}\r\nimpl<K, V> ExactSizeIterator for IntoValues<K, V> {}\r\nimpl<K, V> FusedIterator for IntoValues<K, V> {}\r\nimpl<K, V: Debug> Debug for IntoValues<K, V> {}\r\n\r\n// alloc::collections::hash_map\r\n\r\nimpl<K: Eq + Hash, V, S: BuildHasher> HashMap<K, V, S> {\r\n    pub fn into_keys(self) -> IntoKeys<K, V>;\r\n    pub fn into_values(self) -> IntoValues<K, V>;\r\n}\r\n\r\npub struct IntoKeys<K, V>;\r\npub struct IntoValues<K, V>;\r\n\r\nimpl<K, V> Iterator for IntoKeys<K, V> { type Item = K; }\r\nimpl<K, V> ExactSizeIterator for IntoKeys<K, V> {}\r\nimpl<K, V> FusedIterator for IntoKeys<K, V> {}\r\nimpl<K: Debug, V> Debug for IntoKeys<K, V> {}\r\n\r\nimpl<K, V> Iterator for IntoValues<K, V> { type Item = V; }\r\nimpl<K, V> ExactSizeIterator for IntoValues<K, V> {}\r\nimpl<K, V> FusedIterator for IntoValues<K, V> {}\r\nimpl<K, V: Debug> Debug for IntoValues<K, V> {}\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- Requested in #55214.\r\n- [x] Implementation: #75163\r\n- [ ] Final commenting period (FCP)\r\n- [ ] Stabilization PR: #84328\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final commenting period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncommenting period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- None yet.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75294/reactions", "total_count": 15, "+1": 15, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75294/timeline", "performed_via_github_app": null, "state_reason": "completed"}