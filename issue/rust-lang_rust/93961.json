{"url": "https://api.github.com/repos/rust-lang/rust/issues/93961", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93961/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93961/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93961/events", "html_url": "https://github.com/rust-lang/rust/issues/93961", "id": 1135687196, "node_id": "I_kwDOAAsO6M5DsTYc", "number": 93961, "title": "clarify the semantics of core::task::Waker::wake()", "user": {"login": "rkuhn", "id": 470469, "node_id": "MDQ6VXNlcjQ3MDQ2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/470469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkuhn", "html_url": "https://github.com/rkuhn", "followers_url": "https://api.github.com/users/rkuhn/followers", "following_url": "https://api.github.com/users/rkuhn/following{/other_user}", "gists_url": "https://api.github.com/users/rkuhn/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkuhn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkuhn/subscriptions", "organizations_url": "https://api.github.com/users/rkuhn/orgs", "repos_url": "https://api.github.com/users/rkuhn/repos", "events_url": "https://api.github.com/users/rkuhn/events{/privacy}", "received_events_url": "https://api.github.com/users/rkuhn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-02-13T11:22:20Z", "updated_at": "2022-05-25T00:52:51Z", "closed_at": "2022-05-25T00:52:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Based on reading e.g. [the Tokio sources](https://github.com/tokio-rs/tokio/blob/master/tokio/src/coop.rs#L156-L182) and knowledge passed down from async monks to novices, I assume that calling `cx.waker().wake_by_ref()` from the task that is currently being polled will ensure that the task is polled again soon, even if no external reason arises. However, this behaviour is not documented, at least not unambiguously\u200a\u2014\u200athe documentation for `core::future::Future` only states that the waker provided by the context can be used to wake up the task, which may technically require the task to be \u201csleeping\u201d for this to have an effect.\r\n\r\nIf there is consensus that `wake_by_ref` will always and unconditionally ensure one further call to `poll`, then we should document this expectation as part of the Future contract. Who agrees? Anyone against? Am I missing something?", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93961/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93961/timeline", "performed_via_github_app": null, "state_reason": "completed"}