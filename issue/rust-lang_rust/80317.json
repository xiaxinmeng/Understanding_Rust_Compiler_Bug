{"url": "https://api.github.com/repos/rust-lang/rust/issues/80317", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80317/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80317/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80317/events", "html_url": "https://github.com/rust-lang/rust/issues/80317", "id": 773346739, "node_id": "MDU6SXNzdWU3NzMzNDY3Mzk=", "number": 80317, "title": "Function pointer does not fulfill the required lifetime", "user": {"login": "ldr709", "id": 8682972, "node_id": "MDQ6VXNlcjg2ODI5NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/8682972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldr709", "html_url": "https://github.com/ldr709", "followers_url": "https://api.github.com/users/ldr709/followers", "following_url": "https://api.github.com/users/ldr709/following{/other_user}", "gists_url": "https://api.github.com/users/ldr709/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldr709/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldr709/subscriptions", "organizations_url": "https://api.github.com/users/ldr709/orgs", "repos_url": "https://api.github.com/users/ldr709/repos", "events_url": "https://api.github.com/users/ldr709/events{/privacy}", "received_events_url": "https://api.github.com/users/ldr709/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-12-23T01:10:13Z", "updated_at": "2022-05-14T17:12:45Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Function pointers have no lifetime of their own, and essentially are `'static` ([Unsafe Code Guidelines Reference](https://rust-lang.github.io/unsafe-code-guidelines/layout/function-pointers.html)), so I would expect `fn(T) -> U: 'a` to hold for any lifetime `'a` and types `T, U`. A function pointer that lived longer than its argument type would be fine, since it won't be possible to make an instance of the argument type after it's expired, and so you cannot call it then. Similarly, there's nothing wrong with a function pointer that lives longer than its return type, as outside the return type's lifetime you either won't be able to call it or it will never return.\r\n\r\nYet the following example fails to compile.\r\n\r\n```rust\r\npub fn foo<'a, T: 'a>() {}\r\n\r\npub fn bar<'a, 'b>() {\r\n    foo::<'a, fn(&'b u32)>(); // Errors\r\n}\r\n```\r\n[Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=853723e8cfef529c965b72c3d91a14f2)\r\n\r\n```\r\nerror[E0477]: the type `fn(&'b u32)` does not fulfill the required lifetime\r\n --> src/lib.rs:5:5\r\n  |\r\n5 |     foo::<'a, fn(&'b u32)>(|_x: &'b u32| {}); // Errors\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\nnote: type must outlive the lifetime `'a` as defined on the function body at 3:12\r\n --> src/lib.rs:3:12\r\n  |\r\n3 | pub fn bar<'a, 'b>() {\r\n  |            ^^\r\n```\r\nThe compiler seems to think that a function pointer is only valid for as long as the types it uses are, rather than for the duration of the program.\r\n\r\nI have also run into a similar issue when using `Box<dyn Fn(&'b u32)>` (and also `Box<dyn Fn(&'b u32) + 'a>`) instead of `fn(&'b u32)`, but I thought that the function pointer case would be the clearest.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80317/timeline", "performed_via_github_app": null, "state_reason": null}