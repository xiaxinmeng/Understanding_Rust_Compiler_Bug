{"url": "https://api.github.com/repos/rust-lang/rust/issues/76873", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76873/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76873/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76873/events", "html_url": "https://github.com/rust-lang/rust/issues/76873", "id": 704339926, "node_id": "MDU6SXNzdWU3MDQzMzk5MjY=", "number": 76873, "title": "Bulk-initialization of contiguous enums with memset", "user": {"login": "bprosnitz", "id": 3269959, "node_id": "MDQ6VXNlcjMyNjk5NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3269959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bprosnitz", "html_url": "https://github.com/bprosnitz", "followers_url": "https://api.github.com/users/bprosnitz/followers", "following_url": "https://api.github.com/users/bprosnitz/following{/other_user}", "gists_url": "https://api.github.com/users/bprosnitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bprosnitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bprosnitz/subscriptions", "organizations_url": "https://api.github.com/users/bprosnitz/orgs", "repos_url": "https://api.github.com/users/bprosnitz/repos", "events_url": "https://api.github.com/users/bprosnitz/events{/privacy}", "received_events_url": "https://api.github.com/users/bprosnitz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-09-18T12:28:13Z", "updated_at": "2020-09-19T02:28:15Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "In the Fuchsia project, we have some structs that have large numbers of contiguous `Option` fields:\r\n```\r\n#[derive(Debug, PartialEq)]\r\npub struct Example {\r\n    pub a: Option<i8>,\r\n    pub b: Option<i8>,\r\n    pub c: Option<i32>,\r\n    ...\r\n}\r\n```\r\n\r\nThis struct is initialised with each field set to `None`.\r\n```\r\nimpl Example {\r\n  pub fn empty() -> Self {\r\n     Self {\r\n       a: None,\r\n       b: None,\r\n       c: None,\r\n       ...\r\n     }\r\n  }\r\n}\r\n```\r\n\r\nThe instructions that are generated set the \"variant\" portion of the Option's data to 0, but don't set the rest of the Option's data.\r\n```\r\nmov %rdi, %rax\r\nxor %ecx, %ecx. \r\nmovb  %cl, (%rdi)        // Set a's enum variant to 0\r\nmovb  %cl, 0x2(%rdi).    // Set b's enum variant to 0\r\n...\r\n```\r\n\r\nIt seems that if the entire enum data is allowed to be zero-initialized, rather than just the variant portion then this could be replaced with a single `memset()`.\r\n\r\nFor large-enough structs, the cost of individually setting these bytes to zero can be costly.\r\n\r\n/cc @tmandry ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76873/timeline", "performed_via_github_app": null, "state_reason": null}