{"url": "https://api.github.com/repos/rust-lang/rust/issues/43592", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43592/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43592/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43592/events", "html_url": "https://github.com/rust-lang/rust/issues/43592", "id": 247138001, "node_id": "MDU6SXNzdWUyNDcxMzgwMDE=", "number": 43592, "title": "calling libc::res_init from multiple threads is unsafe on at least OSX", "user": {"login": "oconnor663", "id": 860932, "node_id": "MDQ6VXNlcjg2MDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/860932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oconnor663", "html_url": "https://github.com/oconnor663", "followers_url": "https://api.github.com/users/oconnor663/followers", "following_url": "https://api.github.com/users/oconnor663/following{/other_user}", "gists_url": "https://api.github.com/users/oconnor663/gists{/gist_id}", "starred_url": "https://api.github.com/users/oconnor663/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oconnor663/subscriptions", "organizations_url": "https://api.github.com/users/oconnor663/orgs", "repos_url": "https://api.github.com/users/oconnor663/repos", "events_url": "https://api.github.com/users/oconnor663/events{/privacy}", "received_events_url": "https://api.github.com/users/oconnor663/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-08-01T17:07:20Z", "updated_at": "2017-11-09T15:42:27Z", "closed_at": "2017-11-09T15:42:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We recently started calling `res_init` on DNS failure to fix a glibc bug, and there was [some worry](https://github.com/rust-lang/rust/pull/41582#issuecomment-315398074) that we might be calling a function that isn't threadsafe. It looked like we might not have any thread safety issues with glibc specifically, but now I'm convinced that we do have them in libc on OSX. I haven't repro'd the issue in Rust yet, but I'm able to produce very scary crashes with the following Go program if I run it on OSX (but not on Linux):\r\n\r\n```go\r\npackage main\r\n\r\n// #cgo LDFLAGS: -lresolv\r\n// #include<sys/types.h>\r\n// #include<netinet/in.h>\r\n// #include<arpa/nameser.h>\r\n// #include<resolv.h>\r\nimport \"C\"\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n\t// Loop on res_init() in a background goroutine...\r\n\tgo func() {\r\n\t\tfor {\r\n\t\t\tfmt.Println(\"background res_init\")\r\n\t\t\tC.res_init()\r\n\t\t}\r\n\t}()\r\n\t// ...and also loop on it in the main thread.\r\n\tfor {\r\n\t\tfmt.Println(\"foreground res_init\")\r\n\t\tC.res_init()\r\n\t}\r\n}\r\n```\r\n\r\nThe result is inconsistent, but here are a couple examples:\r\n\r\n```\r\nfatal error: unexpected signal during runtime execution\r\nforeground res_init\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x18 pc=0x7fffddf6705d]\r\n```\r\n\r\n```\r\ntest(30623,0x70000b910000) malloc: *** error for object 0x4601510: pointer being freed was not allocated\r\n*** set a breakpoint in malloc_error_break to debug\r\nforeground res_init\r\nforeground res_init\r\nSIGABRT: abort\r\nPC=0x7fffde988d42 m=3 sigcode=0\r\nsignal arrived during cgo execution\r\n```\r\n\r\nIt might be that the best workaround is to limit our calls to `res_init` to when we know we're linking against glibc? That way we could still fix the original bug (stale `/etc/resolv.conf` data in glibc specifically), take advantage of the thread safety that glibc seems to have here (we might want to audit it more carefully than I'm able to), and not worry about breaking any other platforms.", "closed_by": {"login": "oconnor663", "id": 860932, "node_id": "MDQ6VXNlcjg2MDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/860932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oconnor663", "html_url": "https://github.com/oconnor663", "followers_url": "https://api.github.com/users/oconnor663/followers", "following_url": "https://api.github.com/users/oconnor663/following{/other_user}", "gists_url": "https://api.github.com/users/oconnor663/gists{/gist_id}", "starred_url": "https://api.github.com/users/oconnor663/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oconnor663/subscriptions", "organizations_url": "https://api.github.com/users/oconnor663/orgs", "repos_url": "https://api.github.com/users/oconnor663/repos", "events_url": "https://api.github.com/users/oconnor663/events{/privacy}", "received_events_url": "https://api.github.com/users/oconnor663/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43592/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43592/timeline", "performed_via_github_app": null, "state_reason": "completed"}