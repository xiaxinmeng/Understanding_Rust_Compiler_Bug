{"url": "https://api.github.com/repos/rust-lang/rust/issues/67361", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67361/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67361/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67361/events", "html_url": "https://github.com/rust-lang/rust/issues/67361", "id": 538673280, "node_id": "MDU6SXNzdWU1Mzg2NzMyODA=", "number": 67361, "title": "Misleading message for [E0392] with associated types of trait bound", "user": {"login": "sharnoff", "id": 29154784, "node_id": "MDQ6VXNlcjI5MTU0Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/29154784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sharnoff", "html_url": "https://github.com/sharnoff", "followers_url": "https://api.github.com/users/sharnoff/followers", "following_url": "https://api.github.com/users/sharnoff/following{/other_user}", "gists_url": "https://api.github.com/users/sharnoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/sharnoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sharnoff/subscriptions", "organizations_url": "https://api.github.com/users/sharnoff/orgs", "repos_url": "https://api.github.com/users/sharnoff/repos", "events_url": "https://api.github.com/users/sharnoff/events{/privacy}", "received_events_url": "https://api.github.com/users/sharnoff/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-16T21:32:18Z", "updated_at": "2019-12-16T21:51:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "E0392 notifies the user that a type parameter is not being used, but it sometimes falsely identifies parameters as being unused **only when there is already another that is _actually_ unused.** I don't entirely understand expected behavior here, see the bottom for clarification.\r\n\r\nFor example, the [following code](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0eef8d9cbffb058857a4a17141e5dc60) (on 1.39.0 stable, 1.40.0-beta6, and 1.41.0-nightly) correctly fails to compile\r\n```rust\r\ntrait MyTrait<A> {\r\n    type Foo;\r\n}\r\n\r\nstruct MyStructFails<A, B, M>\r\nwhere\r\n    M: MyTrait<A, Foo = B>,\r\n{\r\n    my_trait: M,\r\n}\r\n```\r\nbut it has the following error message\r\n```\r\nerror[E0392]: parameter `A` is never used\r\n --> src/lib.rs:7:22\r\n  |\r\n7 | struct MyStructFails<A, B, M>\r\n  |                      ^ unused parameter\r\n  |\r\n  = help: consider removing `A` or using a marker such as `std::marker::PhantomData`\r\n\r\nerror[E0392]: parameter `B` is never used\r\n --> src/lib.rs:7:25\r\n  |\r\n7 | struct MyStructFails<A, B, M>\r\n  |                         ^ unused parameter\r\n  |\r\n  = help: consider removing `B` or using a marker such as `std::marker::PhantomData`\r\n```\r\nwhich notably includes `B` as an unused parameter. Clearly this isn't the case, because changing `MyStruct` to **only** add `PhantomData<A>` allows it to compile:\r\n```rust\r\nstruct MyStructWorks<A, B, M>\r\nwhere\r\n    M: MyTrait<A, Foo = B>,\r\n{\r\n    my_trait: M,\r\n    _marker: std::marker::PhantomData<A>,\r\n}\r\n```\r\nand only adding `PhantomData<B>` does not get rid of the error. Tuple structs produce the same error.\r\n\r\nAlso notable is that this false identification only occurs for the associated type of the trait bound that `A` is being used in; this example produces the correct error:\r\n\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=3ce493c9de74a12337dc59d227106db5)\r\n```rust\r\ntrait Bar {\r\n    type Foo;\r\n}\r\n\r\ntrait MyTrait<T> {}\r\n\r\nstruct MyStruct<F, B, T, M>\r\nwhere\r\n    B: Bar<Foo = F>,\r\n    M: MyTrait<T>,\r\n{\r\n    bar: B,\r\n    my_trait: M,\r\n}\r\n```\r\n\r\n---\r\n\r\n#### Clarification\r\n\r\nI'm not very familiar with what the expected behavior should be. If the [following code](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=c0e52a80d118cc5b0d4da31f88f56fb5) should indeed give an error, it's just a diagnostics bug.\r\n```rust\r\ntrait MyTrait<T> {}\r\n\r\nstruct MyStructFails<T, M: MyTrait<T>> {\r\n    inner: M,\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67361/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67361/timeline", "performed_via_github_app": null, "state_reason": null}