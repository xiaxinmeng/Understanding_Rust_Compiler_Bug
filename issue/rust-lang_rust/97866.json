{"url": "https://api.github.com/repos/rust-lang/rust/issues/97866", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97866/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97866/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97866/events", "html_url": "https://github.com/rust-lang/rust/issues/97866", "id": 1264435578, "node_id": "I_kwDOAAsO6M5LXcF6", "number": 97866, "title": "TryFrom / TryInto API Docs and Infallible", "user": {"login": "amunra", "id": 1499096, "node_id": "MDQ6VXNlcjE0OTkwOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1499096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amunra", "html_url": "https://github.com/amunra", "followers_url": "https://api.github.com/users/amunra/followers", "following_url": "https://api.github.com/users/amunra/following{/other_user}", "gists_url": "https://api.github.com/users/amunra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amunra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amunra/subscriptions", "organizations_url": "https://api.github.com/users/amunra/orgs", "repos_url": "https://api.github.com/users/amunra/repos", "events_url": "https://api.github.com/users/amunra/events{/privacy}", "received_events_url": "https://api.github.com/users/amunra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-06-08T09:10:00Z", "updated_at": "2023-04-15T11:17:23Z", "closed_at": "2023-04-15T11:17:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had a hard time figuring out how design a function signature to pass an object to a method that can take either a `Thing` or a `TryInto<Thing, Error=MyError>`.\r\n\r\nI think there should be an example on how to do this somewhere in the API docs, probably under `TryInto`.\r\n\r\nHere's what it took me to get this working:\r\n\r\n```\r\nuse std::convert::{TryFrom, TryInto, Infallible};\r\n\r\n#[derive(Debug)]\r\npub struct ModError(String);\r\n\r\npub struct Name<'a> {string: &'a str}\r\n\r\nimpl <'a> Name<'a> {\r\n    pub fn new(string: &'a str) -> Result<Self, ModError> {\r\n        match string.starts_with('A') {\r\n            true => Ok(Self{string: string}),\r\n            false => Err(ModError(format!(\"Bad name {:?}\", string)))\r\n        }\r\n    }\r\n    \r\n    pub fn string(&self) -> &str { self.string }\r\n}\r\n\r\nimpl <'a> TryFrom<&'a str> for Name<'a> {\r\n    type Error = ModError;\r\n\r\n    fn try_from(name: &'a str) -> Result<Self, ModError> {\r\n        Name::new(name)\r\n    }\r\n}\r\n\r\nimpl From<Infallible> for ModError {\r\n    fn from(_: Infallible) -> Self {\r\n        unreachable!()\r\n    }\r\n}\r\n\r\npub fn greet<'a, N, E>(name: N) -> Result<(), ModError>\r\n    where\r\n        N: TryInto<Name<'a>, Error=E>,\r\n        ModError: From<E>\r\n{\r\n    let name: Name<'a> = name.try_into()?;\r\n    println!(\"Hello, {}!\", name.string());\r\n    Ok(())\r\n}\r\n\r\nfn main() {\r\n    let alfred = \"Alfred\";\r\n    let name = Name::new(alfred).unwrap();\r\n    greet(name).unwrap();\r\n}\r\n```", "closed_by": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97866/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}