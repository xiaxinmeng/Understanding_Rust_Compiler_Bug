{"url": "https://api.github.com/repos/rust-lang/rust/issues/47927", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47927/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47927/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47927/events", "html_url": "https://github.com/rust-lang/rust/issues/47927", "id": 293459753, "node_id": "MDU6SXNzdWUyOTM0NTk3NTM=", "number": 47927, "title": "Unergonomic structured suggestions in rustc", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-01T09:31:10Z", "updated_at": "2018-02-01T10:52:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While checking `span_help`s that could be `span_suggestion` I noticed that rustc contains lots of code similar to\r\n\r\n```rust\r\n                    match fcx.tcx.sess.codemap().span_to_snippet(self.cast_span) {\r\n                        Ok(s) => {\r\n                            err.span_suggestion(self.cast_span,\r\n                                                \"try casting to a reference instead\",\r\n                                                format!(\"&{}{}\", mtstr, s));\r\n                        }\r\n                        Err(_) => {\r\n                            span_help!(err, self.cast_span, \"did you mean `&{}{}`?\", mtstr, tstr)\r\n                        }\r\n                    }\r\n```\r\n\r\nwhere we try to get a snippet and if that fails, since we can't produce a nice suggestion, we produce a `help` message that contains a message.\r\n\r\nWe should probably provide a helper for that. First I thought that we could add a helper that does essentially the above without all the duplication, but with the new approximate suggestions (#47540) we can always produce the suggestion, but mark it as approximate if we need to use the fallback value.\r\n\r\nI'd assume the above example would look something like this:\r\n\r\n```rust\r\nerr.span_possibly_approximate_suggestion(\r\n    self.cast_span, // span to replace\r\n    \"try casting to a reference instead\", // message\r\n    fcx.tcx.sess.codemap().span_to_snippet(self.cast_span).ok(), // optional snippet\r\n    tstr, // default if snippet is none\r\n    |snip| format!(\"&{}{}\", mtstr, snip), // closure taking snippet and producing the replacement code\r\n);\r\n```\r\n\r\ncc @Manishearth @nrc", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47927/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47927/timeline", "performed_via_github_app": null, "state_reason": null}