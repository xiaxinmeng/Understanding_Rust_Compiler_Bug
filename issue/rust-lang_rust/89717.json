{"url": "https://api.github.com/repos/rust-lang/rust/issues/89717", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89717/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89717/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89717/events", "html_url": "https://github.com/rust-lang/rust/issues/89717", "id": 1021825507, "node_id": "I_kwDOAAsO6M4859Hj", "number": 89717, "title": "False-positive `dead_code` warning for code only used in compile-time assertions", "user": {"login": "pr2502", "id": 36980911, "node_id": "MDQ6VXNlcjM2OTgwOTEx", "avatar_url": "https://avatars.githubusercontent.com/u/36980911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pr2502", "html_url": "https://github.com/pr2502", "followers_url": "https://api.github.com/users/pr2502/followers", "following_url": "https://api.github.com/users/pr2502/following{/other_user}", "gists_url": "https://api.github.com/users/pr2502/gists{/gist_id}", "starred_url": "https://api.github.com/users/pr2502/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pr2502/subscriptions", "organizations_url": "https://api.github.com/users/pr2502/orgs", "repos_url": "https://api.github.com/users/pr2502/repos", "events_url": "https://api.github.com/users/pr2502/events{/privacy}", "received_events_url": "https://api.github.com/users/pr2502/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-10-09T22:46:05Z", "updated_at": "2021-10-12T10:48:49Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sometimes when I want to assert some safety invariant I'll write a constant that asserts it at compile time instead of a test to ensure my code won't compile if it's violating that invariant.\r\n\r\nGiven the following code: <https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=5c02e5e11f9bd262648dd7fb92dd9b81>\r\n\r\n```rust\r\nconst fn one() -> usize {\r\n    1\r\n}\r\n\r\nconst _CT_ASSERT: () = {\r\n    assert!(one() == 2);\r\n};\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nwarning: function is never used: `one`\r\n --> src/lib.rs:1:10\r\n  |\r\n1 | const fn one() -> usize {\r\n  |          ^^^\r\n  |\r\n  = note: `#[warn(dead_code)]` on by default\r\n\r\nerror[E0080]: evaluation of constant value failed\r\n --> src/lib.rs:6:5\r\n  |\r\n6 |     assert!(one() == 2);\r\n  |     ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: one() == 2', src/lib.rs:6:5\r\n  |\r\n  = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nFor more information about this error, try `rustc --explain E0080`.\r\n```\r\n\r\nI'd expect rustc to not emit the `dead_code` warning because the function is clearly being used at compile time, the assert even fails in this case.\r\n\r\nIt is possible that I'm misusing const eval here and that the code in the constant initializer is not guaranteed to run at compile time if the constant itself is not used and therefore all code used in its initializer is not considered used either. (The warning does disappear when i use the constant itself, which would be consistent with this.) In which case I'd want to turn this into a question, is there any other way to write compile-time assertions like this one?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89717/timeline", "performed_via_github_app": null, "state_reason": null}