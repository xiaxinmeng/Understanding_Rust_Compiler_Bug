{"url": "https://api.github.com/repos/rust-lang/rust/issues/70432", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70432/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70432/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70432/events", "html_url": "https://github.com/rust-lang/rust/issues/70432", "id": 588453197, "node_id": "MDU6SXNzdWU1ODg0NTMxOTc=", "number": 70432, "title": "Macro Invocations Behave Questionable Regarding Semicolons", "user": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36956, "node_id": "MDU6TGFiZWwzNjk1Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-frontend", "name": "A-frontend", "color": "f7e101", "default": false, "description": "Area: frontend (errors, parsing and HIR)"}, {"id": 27424086, "node_id": "MDU6TGFiZWwyNzQyNDA4Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-parser", "name": "A-parser", "color": "f7e101", "default": false, "description": "Area: The parsing of Rust source code to an AST."}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-26T14:14:07Z", "updated_at": "2020-03-27T11:28:36Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "### Calling Statement Macros with \u201creturn values\u201d?\r\nMacros can be used both for expressions and for sequences of statements. The latter being useful to create new definitions (e.g. one or even multiple `let` clause(s)).\r\n\r\nI\u2019m observing that the general rule that _expressions ending in a \u201cBlock\u201d of type `()` don\u2019t need a semicolon when used as a statement_ translates in a weird way to even macros with multiple statements. For example\r\n```rust\r\nmacro_rules! s {\r\n    ($x:ident) => {\r\n        let $x = 1;\r\n        \"hello world\"\r\n    }\r\n}\r\n```\r\ncan\u2019t be used as `s!{x}`. However `s!{x};` does work (as does `s!(x);`). I\u2019m questioning how sensible it is to support these kind of macros since they have some kind of \u201creturn value\u201d, whose type even is relevant for if they need a trailing `;`, while the \u201creturn value\u201d cannot actually in any way (that I can think of) be retrieved.\r\n\r\nA way nicer approach at resolving the non-working `s!{x}` is of course to change the macro:\r\n```rust\r\nmacro_rules! s {\r\n    ($x:ident) => {\r\n        let $x = 1;\r\n        \"hello world\"; // \u27f5 added semicolon\r\n    }\r\n}\r\n```\r\n\r\n### Ignored Semicolon\r\nOne (or at least I) would expect the macro `m1` below to produce just a statement (judging from the semicolon), i.e. be illegal in expression context. However it somehow _does_ pass as an expression, totally ignoring the semicolon. In the return position of a function it does produce `()` though [when called like `m1!{}` \u2013 on the other hand `m1!()` would still produce the integer].\r\n```rust\r\nmacro_rules! m1 {\r\n    () => {\r\n        1;\r\n    }\r\n}\r\nmacro_rules! m2 {\r\n    () => {\r\n        1\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let x1 = m1!{};\r\n    println!(\"{}\", x1);\r\n    let x2 = m1!{};\r\n    println!(\"{}\", x2);\r\n\r\n    m1!();\r\n    m1!{}\r\n    \r\n    m2!();\r\n//  m2!{}     // illegal\r\n    m2!{};\r\n    \r\n    m1!{}     // apparently even returns ()\r\n}\r\n\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=a36e69afb99a3d85eb5614baf5e850ae))\r\n\r\nOutput:\r\n\r\n```\r\n1\r\n1\r\n\r\n```\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.40s\r\n     Running `target/debug/playground`\r\n\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70432/timeline", "performed_via_github_app": null, "state_reason": null}