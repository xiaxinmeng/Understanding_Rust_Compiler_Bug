{"url": "https://api.github.com/repos/rust-lang/rust/issues/105092", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105092/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105092/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105092/events", "html_url": "https://github.com/rust-lang/rust/issues/105092", "id": 1470002872, "node_id": "I_kwDOAAsO6M5Xnna4", "number": 105092, "title": "The PartialEq implementation for tuples isn't general enough", "user": {"login": "Michael-F-Bryan", "id": 17380079, "node_id": "MDQ6VXNlcjE3MzgwMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/17380079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Michael-F-Bryan", "html_url": "https://github.com/Michael-F-Bryan", "followers_url": "https://api.github.com/users/Michael-F-Bryan/followers", "following_url": "https://api.github.com/users/Michael-F-Bryan/following{/other_user}", "gists_url": "https://api.github.com/users/Michael-F-Bryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Michael-F-Bryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Michael-F-Bryan/subscriptions", "organizations_url": "https://api.github.com/users/Michael-F-Bryan/orgs", "repos_url": "https://api.github.com/users/Michael-F-Bryan/repos", "events_url": "https://api.github.com/users/Michael-F-Bryan/events{/privacy}", "received_events_url": "https://api.github.com/users/Michael-F-Bryan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-11-30T17:40:39Z", "updated_at": "2022-11-30T17:40:39Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "A coworker recently ran into a situation where tuples aren't comparable even when their individual elements are. I was able to boil it down to the following code snippet:\r\n\r\n```rust\r\nfn main() {\r\n    assert_partial_eq::<A, B>();\r\n    assert_partial_eq::<C, D>();\r\n    assert_partial_eq::<(A, C), (B, D)>();\r\n}\r\n\r\nfn assert_partial_eq<A, B>() where A: PartialEq<B> {}\r\n\r\n#[derive(Debug, PartialEq)] struct A;\r\n#[derive(Debug, PartialEq)] struct B;\r\n#[derive(Debug, PartialEq)] struct C;\r\n#[derive(Debug, PartialEq)] struct D;\r\n\r\nimpl PartialEq<A> for B { fn eq(&self, other: &A) -> bool { true } }\r\nimpl PartialEq<B> for A { fn eq(&self, other: &B) -> bool { true } }\r\n\r\nimpl PartialEq<C> for D { fn eq(&self, other: &C) -> bool { true } }\r\nimpl PartialEq<D> for C { fn eq(&self, other: &D) -> bool { true } }\r\n\r\n```\r\n\r\n[(playground)](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=611fb57671c62a1114880a2a0b2f5073)\r\n\r\nI expected the above snippet to compile and run successfully, but the code fails to compile.\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0277]](https://doc.rust-lang.org/stable/error-index.html#E0277): can't compare `(A, C)` with `(B, D)`\r\n  --> src/main.rs:19:25\r\n   |\r\n19 |     assert_partial_eq::<(A, C), (B, D)>();\r\n   |                         ^^^^^^ no implementation for `(A, C) == (B, D)`\r\n   |\r\n   = help: the trait `PartialEq<(B, D)>` is not implemented for `(A, C)`\r\n   = help: the following other types implement trait `PartialEq<Rhs>`:\r\n             ()\r\n             (A, Z, Y, X, W, V, U, T)\r\n             (B, A, Z, Y, X, W, V, U, T)\r\n             (C, B, A, Z, Y, X, W, V, U, T)\r\n             (D, C, B, A, Z, Y, X, W, V, U, T)\r\n             (E, D, C, B, A, Z, Y, X, W, V, U, T)\r\n             (T,)\r\n             (U, T)\r\n           and 5 others\r\nnote: required by a bound in `assert_partial_eq`\r\n  --> src/main.rs:22:39\r\n   |\r\n22 | fn assert_partial_eq<A, B>() where A: PartialEq<B> {}\r\n   |                                       ^^^^^^^^^^^^ required by this bound in `assert_partial_eq`\r\n```\r\n\r\nI always thought the standard library would have something like this:\r\n\r\n```rust\r\nimpl<LHS1, LHS2, RHS1, RHS2> PartialEq<(RHS1, RHS2)> for (LHS1, LHS2)\r\nwhere \r\n  LHS1: PartialEq<RHS1>,\r\n  LHS2: PartialEq<RHS2>,\r\n{\r\n  ...\r\n}\r\n```\r\n\r\nBut it seems like it only implements `PartialEq` when the left-hand side tuple and right-hand side tuple have the exact same type.\r\n\r\n### Meta\r\n\r\nThis is reproducible on the Rust playground using stable (1.65.0).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105092/timeline", "performed_via_github_app": null, "state_reason": null}