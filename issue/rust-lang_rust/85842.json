{"url": "https://api.github.com/repos/rust-lang/rust/issues/85842", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85842/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85842/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85842/events", "html_url": "https://github.com/rust-lang/rust/issues/85842", "id": 906976553, "node_id": "MDU6SXNzdWU5MDY5NzY1NTM=", "number": 85842, "title": "Provide structured suggestion on E0282", "user": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-05-31T02:19:24Z", "updated_at": "2022-12-29T05:02:47Z", "closed_at": "2022-12-29T05:02:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[Given the following code](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=60402668e1f04eb58fd4f7e43ba92ce4):\r\n\r\n```rust\r\ntrait MyTrait {}\r\n\r\nstruct A;\r\nstruct B;\r\nimpl MyTrait for A {}\r\nimpl MyTrait for B {}\r\n\r\n// This returns type A for now, but the type is intentionally obscured.\r\n// For example, changes to this API may return B or something else.\r\nfn get_trait() -> impl MyTrait {\r\n    A\r\n}\r\n\r\n// Notice that this method includes a second generic type parameter, R.\r\n// It doesn't matter what this function does,\r\n// just that the type parameter R cannot be inferred since no argument is of type R.\r\nfn use_trait<T: MyTrait, R>(t: T) {\r\n    unimplemented!()\r\n}\r\n\r\nfn main() {\r\n    let x = get_trait();\r\n    use_trait(x); // 'cannot infer type for type parameter `R`' <- Notice that it CAN infer T though.\r\n    // use_trait::<impl MyTrait, u32>(x); // Doesn't work because impl Trait not allowed in this context.\r\n    // use_trait::<A, u32>(x); // expected struct `A` found opaque type `impl MyTrait`.\r\n    // use_trait::<R=u32>(x); // Doesn't work. You have to specify all type parameters.\r\n    // use_trait::<typeof(x), u32>(x); // This would be nice.\r\n    use_trait::<_, u32>(x); // It should suggest this\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0282]: type annotations needed\r\n  --> src/main.rs:23:5\r\n   |\r\n23 |     use_trait(x); // 'cannot infer type for type parameter `R`' <- Notice that it CAN infer T though.\r\n   |     ^^^^^^^^^ cannot infer type for type parameter `R` declared on the function `use_trait`\r\n```\r\n\r\nand some [na\u00efve attempts at fixing this don't give good diagnostics](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=3a681495f3159a2c792205ae280845ed):\r\n\r\n```\r\nerror[E0562]: `impl Trait` not allowed outside of function and inherent method return types\r\n  --> src/main.rs:24:17\r\n   |\r\n24 |     use_trait::<impl MyTrait, u32>(x); // Doesn't work because impl Trait not allowed in this context.\r\n   |                 ^^^^^^^^^^^^\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:25:25\r\n   |\r\n10 | fn get_trait() -> impl MyTrait {\r\n   |                   ------------ the found opaque type\r\n...\r\n25 |     use_trait::<A, u32>(x); // expected struct `A` found opaque type `impl MyTrait`.\r\n   |                         ^ expected struct `A`, found opaque type\r\n   |\r\n   = note:   expected struct `A`\r\n           found opaque type `impl MyTrait`\r\n\r\nerror[E0229]: associated type bindings are not allowed here\r\n  --> src/main.rs:26:17\r\n   |\r\n26 |     use_trait::<R=u32>(x); // Doesn't work. You have to specify all type parameters.\r\n   |                 ^^^^^ associated type not allowed here\r\n```\r\n\r\nIdeally the output should look like:\r\n\r\n```\r\nerror[E0282]: type annotations needed\r\n  --> src/main.rs:23:5\r\n   |\r\n23 |     use_trait(x);\r\n   |     ^^^^^^^^^ cannot infer type for type parameter `R` declared on the function `use_trait`\r\nhelp: specify the type parameters, with `R` replaced with the desired type\r\n   |\r\n23 |     use_trait::<_, R>(x);\r\n   |              ^^^^^^^^\r\n```\r\n\r\nIf possible, we should also provide that suggestion in the other cases people might try first.\r\n\r\n_Taken from https://www.reddit.com/r/rust/comments/non4wm/an_issue_with_opaque_types_impl_trait_and_type/_", "closed_by": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85842/timeline", "performed_via_github_app": null, "state_reason": "completed"}