{"url": "https://api.github.com/repos/rust-lang/rust/issues/110174", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110174/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110174/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110174/events", "html_url": "https://github.com/rust-lang/rust/issues/110174", "id": 1661755401, "node_id": "I_kwDOAAsO6M5jDGAJ", "number": 110174, "title": "Floating point comparisons are miscompiled for signalling NaN inputs on AArch64", "user": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2139259423, "node_id": "MDU6TGFiZWwyMTM5MjU5NDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-floating-point", "name": "A-floating-point", "color": "f7e101", "default": false, "description": "Area: Floating point numbers and arithmetic"}, {"id": 3940166907, "node_id": "LA_kwDOAAsO6M7q2iz7", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-AArch64", "name": "O-AArch64", "color": "6e6ec0", "default": false, "description": "Armv8-A or later processors in AArch64 mode"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2023-04-11T04:36:28Z", "updated_at": "2023-05-06T05:34:25Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "When optimizations are enabled, we miscompile this function on aarch64 (definitely `aarch64-apple-darwin`, but linux seems impacted too):\r\n\r\n```rust\r\n// https://rust.godbolt.org/z/YMbEWMvao\r\npub fn clamp0(f: f32) -> f32 {\r\n    // Carefully written check that maps `NaN` to `0.0`\r\n    if !(f > 0.0) { 0.0 } else { f }\r\n}\r\n```\r\n\r\nThis function is carefully written so that `NaN` inputs are mapped to zero[^3]. Sadly, the way we compile it, this check only works for quiet NaN -- signalling NaN are returned verbatim. For example, `clamp0(black_box(f32::from_bits(0x7f800001)))` incorrectly returns its input, a `NaN`. (The `black_box` is only needed because we get it right if it's evaluated via const-propagatation).\r\n\r\n[^3]: Recall that all comparisons with `NaN` return false, so if `f` is NaN then `f > 0.0` will be false.\r\n\r\nThe generated code seems to use the `fmaxnm` instruction, which is based on IEEE-754 2008's maxNum function. This function is wrong here for signaling NaN, since it returns NaN for signalling NaN arguments.\r\n\r\nWhile experimenting, I noticed that when `f > 0.0` is changed to `f >= 0.0` the miscompilation no longer happens. That said, the semantics change too[^1].\r\n\r\n[^1]: With `if !(f  > 0.0) { 0.0 } else { f }`, `clamp0(-0.0)` will become a positive zero, which is not the case for `if !(f  >= 0.0) { 0.0 } else { f }`.\r\n\r\nI think this is an LLVM issue, but it's also possible that we're telling LLVM something that is incorrect for signalling NaN. I don't know which is the case.\r\n\r\n---\r\n\r\nThis could cause real problems in the wild. I've written code before which passes the result of similarly \"clever\" clamp implementations to `to_int_unchecked` (UB, but likely harmless[^harmless] and only because of our miscompilation) before using them as an unchecked array index... which now turns that \"harmless\" UB into an out of bounds access[^2] (not really harmless). So I think this is a potentially serious issue.\r\n\r\n[^harmless]: We lived with the UB being possible in all `f as int` casts for a very long time.\r\n\r\n[^2]: Such code is spooky, but it is often easy to verify it behaves properly for every possible f32 input.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.70.0-nightly (cf7ada217 2023-04-03)\r\nbinary: rustc\r\ncommit-hash: cf7ada217c8ac63367b184afd9fffaff30f6ed44\r\ncommit-date: 2023-04-03\r\nhost: aarch64-apple-darwin\r\nrelease: 1.70.0-nightly\r\nLLVM version: 16.0.0\r\n```\r\n\r\nThis has happened at least back to `1.55.0-aarch64-apple-darwin`, so I think we've always been broken here. The fact that it only happens for sNaN (rare) and doesn't happen if a `>=` condition is used probably explains why nobody noticed it -- I only noticed when doing exhaustive testing of some larger function (`clamp0` is minimized) for all `f32`s.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110174/timeline", "performed_via_github_app": null, "state_reason": null}