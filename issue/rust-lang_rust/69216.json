{"url": "https://api.github.com/repos/rust-lang/rust/issues/69216", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69216/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69216/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69216/events", "html_url": "https://github.com/rust-lang/rust/issues/69216", "id": 565964924, "node_id": "MDU6SXNzdWU1NjU5NjQ5MjQ=", "number": 69216, "title": "Overflow evaluating requirements when referencing associated type without a type parameter", "user": {"login": "jturner314", "id": 1836850, "node_id": "MDQ6VXNlcjE4MzY4NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1836850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jturner314", "html_url": "https://github.com/jturner314", "followers_url": "https://api.github.com/users/jturner314/followers", "following_url": "https://api.github.com/users/jturner314/following{/other_user}", "gists_url": "https://api.github.com/users/jturner314/gists{/gist_id}", "starred_url": "https://api.github.com/users/jturner314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jturner314/subscriptions", "organizations_url": "https://api.github.com/users/jturner314/orgs", "repos_url": "https://api.github.com/users/jturner314/repos", "events_url": "https://api.github.com/users/jturner314/events{/privacy}", "received_events_url": "https://api.github.com/users/jturner314/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-16T20:32:18Z", "updated_at": "2020-02-16T20:35:57Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This code fails to compile on stable (1.41.0), beta (1.42.0-beta.3), and nightly:\r\n\r\n```rust\r\nuse std::ops::Add;\r\n\r\nstruct Container<S: Data>(S);\r\n\r\ntrait Data {\r\n    type Elem;\r\n}\r\n\r\nimpl<A> Data for Vec<A> {\r\n    type Elem = A;\r\n}\r\n\r\nimpl<A, S> Add<Container<S>> for f32\r\nwhere\r\n    f32: Add<A, Output=A>,\r\n    S: Data<Elem=A>,\r\n{\r\n    type Output = Container<S>;\r\n    fn add(self, _rhs: Container<S>) -> Container<S> {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nimpl<'a, A, S> Add<&'a Container<S>> for f32\r\nwhere\r\n      f32: Add<A>,\r\n      S: Data<Elem=A>,\r\n{\r\n    type Output = Container<Vec<<f32 as Add<A>>::Output>>;\r\n    fn add(self, _rhs: &Container<S>) -> Self::Output {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\n([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0b20b5a0031756e51ca72df4489526d1))\r\n\r\nwith the following error messages:\r\n\r\n```\r\nerror[E0275]: overflow evaluating the requirement `f32: std::ops::Add<Container<_>>`\r\n  --> src/main.rs:24:16\r\n   |\r\n24 | impl<'a, A, S> Add<&'a Container<S>> for f32\r\n   |                ^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\r\n   = note: required because of the requirements on the impl of `std::ops::Add<Container<_>>` for `f32`\r\n   = note: required because of the requirements on the impl of `std::ops::Add<Container<_>>` for `f32`\r\n   = note: required because of the requirements on the impl of `std::ops::Add<Container<_>>` for `f32`\r\n   [...]\r\n   = note: required because of the requirements on the impl of `std::ops::Add<Container<_>>` for `f32`\r\n   = note: required because of the requirements on the impl of `std::ops::Add<Container<_>>` for `f32`\r\n\r\nerror[E0275]: overflow evaluating the requirement `f32: std::ops::Add<Container<_>>`\r\n  --> src/main.rs:30:5\r\n   |\r\n30 | /     fn add(self, _rhs: &Container<S>) -> Self::Output {\r\n31 | |         unimplemented!()\r\n32 | |     }\r\n   | |_____^\r\n   |\r\n   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\r\n   = note: required because of the requirements on the impl of `std::ops::Add<Container<_>>` for `f32`\r\n   = note: required because of the requirements on the impl of `std::ops::Add<Container<_>>` for `f32`\r\n   = note: required because of the requirements on the impl of `std::ops::Add<Container<_>>` for `f32`\r\n   [...]\r\n   = note: required because of the requirements on the impl of `std::ops::Add<Container<_>>` for `f32`\r\n   = note: required because of the requirements on the impl of `std::ops::Add<Container<_>>` for `f32`\r\n```\r\n\r\nI expected it to compile without errors. Adding a type parameter for the type `<f32 as Add<A>>::Output` fixes the issue. In other words, this equivalent code compiles without errors:\r\n\r\n```rust\r\nuse std::ops::Add;\r\n\r\nstruct Container<S: Data>(S);\r\n\r\ntrait Data {\r\n    type Elem;\r\n}\r\n\r\nimpl<A> Data for Vec<A> {\r\n    type Elem = A;\r\n}\r\n\r\nimpl<A, S> Add<Container<S>> for f32\r\nwhere\r\n    f32: Add<A, Output=A>,\r\n    S: Data<Elem=A>,\r\n{\r\n    type Output = Container<S>;\r\n    fn add(self, _rhs: Container<S>) -> Container<S> {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\n// See the type `B` here.\r\nimpl<'a, A, S, B> Add<&'a Container<S>> for f32\r\nwhere\r\n      f32: Add<A, Output = B>,\r\n      S: Data<Elem=A>,\r\n{\r\n    type Output = Container<Vec<B>>;\r\n    fn add(self, _rhs: &Container<S>) -> Self::Output {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\n([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d0815f4f20342c69ff611054c0236eaa))\r\n\r\nMaybe the compiler is over-eager in evaluating the `<f32 as Add<A>>::Output` type expression, but using a type parameter instead set equal to that type prevents the compiler from going too far?\r\n\r\n### Meta\r\n\r\nTested using the Rust playground.\r\n\r\n* stable: 1.41.0\r\n* beta: 1.42.0-beta.3 (2020-02-07 86f329b419dbac59da59)\r\n* nightly: 1.43.0-nightly (2020-02-15 61d9231ff2604a046798)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69216/timeline", "performed_via_github_app": null, "state_reason": null}