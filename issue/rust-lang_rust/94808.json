{"url": "https://api.github.com/repos/rust-lang/rust/issues/94808", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94808/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94808/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94808/events", "html_url": "https://github.com/rust-lang/rust/issues/94808", "id": 1165353752, "node_id": "I_kwDOAAsO6M5FdeMY", "number": 94808, "title": "erroneous constant used panics the compiler", "user": {"login": "FlawlessDeveloper", "id": 37778817, "node_id": "MDQ6VXNlcjM3Nzc4ODE3", "avatar_url": "https://avatars.githubusercontent.com/u/37778817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FlawlessDeveloper", "html_url": "https://github.com/FlawlessDeveloper", "followers_url": "https://api.github.com/users/FlawlessDeveloper/followers", "following_url": "https://api.github.com/users/FlawlessDeveloper/following{/other_user}", "gists_url": "https://api.github.com/users/FlawlessDeveloper/gists{/gist_id}", "starred_url": "https://api.github.com/users/FlawlessDeveloper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FlawlessDeveloper/subscriptions", "organizations_url": "https://api.github.com/users/FlawlessDeveloper/orgs", "repos_url": "https://api.github.com/users/FlawlessDeveloper/repos", "events_url": "https://api.github.com/users/FlawlessDeveloper/events{/privacy}", "received_events_url": "https://api.github.com/users/FlawlessDeveloper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-03-10T15:13:03Z", "updated_at": "2022-04-04T15:59:07Z", "closed_at": "2022-04-04T15:59:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\nhttps://github.com/FlawlessDeveloper/Stackyy\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.61.0-nightly (68369a041 2022-02-22)\r\nbinary: rustc\r\ncommit-hash: 68369a041cea809a87e5bd80701da90e0e0a4799\r\ncommit-date: 2022-02-22\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.61.0-nightly\r\nLLVM version: 14.0.0\r\n\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: erroneous constant used\r\n  --> src/vm.rs:88:35\r\n   |\r\n88 | ...   runtime_error(format!(\"Typecheck desync happened. Responsible operation: {:#?}\", self.last_op.clone().unwrap()), position.clone());\r\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\r\n   |\r\n   = note: `#[deny(const_err)]` on by default\r\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n  --> src/vm.rs:88:27\r\n   |\r\n88 | ...or(format!(\"Typecheck desync happened. Responsible operation: {:#?}\", self.last_op.clone().unwrap()), position.clone());\r\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\r\n   |\r\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n   = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror: erroneous constant used\r\n  --> src/vm.rs:91:82\r\n   |\r\n91 |         if operation.type_check(&self.ops, &mut self.type_stack, false).error == ErrorTypes::None {\r\n   |                                                                                  ^^^^^^^^^^^^^^^^ referenced constant has errors\r\n   |\r\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:480:45\r\n    |\r\n480 |                     runtime_warning(format!(\"Operation: {:?} not implemented yet\", operation), position.clone())\r\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:126:48\r\n    |\r\n126 | ...                   print!(\"{}\", int);\r\n    |                              ^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:129:48\r\n    |\r\n129 | ...                   print!(\"*{:#x}\", pointer);\r\n    |                              ^^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:129:41\r\n    |\r\n129 | ...                   print!(\"*{:#x}\", pointer);\r\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n    = note: this error originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:132:48\r\n    |\r\n132 | ...                   print!(\"{}\", str)\r\n    |                              ^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:135:48\r\n    |\r\n135 | ...                   print!(\"{}\", bool)\r\n    |                              ^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:138:48\r\n    |\r\n138 | ...                   print!(\"*{}()\", name)\r\n    |                              ^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:145:43\r\n    |\r\n145 | ...                   if int == Internal::PrintLn {\r\n    |                                 ^^^^^^^^^^^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:146:37\r\n    |\r\n146 | ...                   println!();\r\n    |                       ^^^^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n    = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:146:37\r\n    |\r\n146 | ...                   println!();\r\n    |                       ^^^^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n    = note: this error originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:177:42\r\n    |\r\n177 | ...                   println!(\"{:#?}\", self.stack);\r\n    |                                ^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:177:33\r\n    |\r\n177 | ...                   println!(\"{:#?}\", self.stack);\r\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:256:81\r\n    |\r\n256 | ...                   self.stack.push(RegisterType::Int(if int == Internal::Cubed {\r\n    |                                                                   ^^^^^^^^^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:375:43\r\n    |\r\n375 | ...                   if int != Internal::ReflectionRemoveStrDrop {\r\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:445:31\r\n    |\r\n445 |                     if top != CallEnum::None {\r\n    |                               ^^^^^^^^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:458:51\r\n    |\r\n458 | ...                   runtime_error(format!(\"Function: {} does not exist\", fnc), position.clone());\r\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: erroneous constant used\r\n   --> src/vm.rs:484:35\r\n    |\r\n484 |             runtime_error(format!(\"Function {} failed type check \", fn_name), position);\r\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\r\n    |\r\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: internal compiler error: /rustc/68369a041cea809a87e5bd80701da90e0e0a4799/compiler/rustc_codegen_ssa/src/mir/constant.rs:42:20: encountered bad ConstKind after monomorphizing: Error(DelaySpanBugEmitted(()))\r\n  --> src/vm.rs:88:35\r\n   |\r\n88 | ...   runtime_error(format!(\"Typecheck desync happened. Responsible operation: {:#?}\", self.last_op.clone().unwrap()), position.clone());\r\n\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'Box<dyn Any>', /rustc/68369a041cea809a87e5bd80701da90e0e0a4799/compiler/rustc_errors/src/lib.rs:1106:9\r\nstack backtrace:\r\n   0: std::panicking::begin_panic::<rustc_errors::ExplicitBug>\r\n   1: std::panic::panic_any::<rustc_errors::ExplicitBug>\r\n   2: <rustc_errors::HandlerInner>::span_bug::<rustc_span::span_encoding::Span>\r\n   3: <rustc_errors::Handler>::span_bug::<rustc_span::span_encoding::Span>\r\n   4: rustc_middle::ty::context::tls::with_opt::<rustc_middle::util::bug::opt_span_bug_fmt<rustc_span::span_encoding::Span>::{closure#0}, ()>\r\n   5: rustc_middle::util::bug::opt_span_bug_fmt::<rustc_span::span_encoding::Span>\r\n   6: rustc_middle::util::bug::span_bug_fmt::<rustc_span::span_encoding::Span>\r\n   7: <rustc_codegen_ssa::mir::FunctionCx<rustc_codegen_llvm::builder::Builder>>::codegen_rvalue_operand\r\n   8: rustc_codegen_ssa::mir::codegen_mir::<rustc_codegen_llvm::builder::Builder>\r\n   9: rustc_codegen_llvm::base::compile_codegen_unit::module_codegen\r\n  10: rustc_codegen_llvm::base::compile_codegen_unit\r\n  11: rustc_codegen_ssa::base::codegen_crate::<rustc_codegen_llvm::LlvmCodegenBackend>\r\n  12: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate\r\n  13: <rustc_session::session::Session>::time::<alloc::boxed::Box<dyn core::any::Any>, rustc_interface::passes::start_codegen::{closure#0}>\r\n  14: <rustc_interface::passes::QueryContext>::enter::<<rustc_interface::queries::Queries>::ongoing_codegen::{closure#0}::{closure#0}, core::result::Result<alloc::boxed::Box<dyn core::any::Any>, rustc_errors::ErrorReported>>\r\n  15: <rustc_interface::queries::Queries>::ongoing_codegen\r\n  16: <rustc_interface::interface::Compiler>::enter::<rustc_driver::run_compiler::{closure#1}::{closure#2}, core::result::Result<core::option::Option<rustc_interface::queries::Linker>, rustc_errors::ErrorReported>>\r\n  17: rustc_span::with_source_map::<core::result::Result<(), rustc_errors::ErrorReported>, rustc_interface::interface::create_compiler_and_run<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>::{closure#1}>\r\n  18: rustc_interface::interface::create_compiler_and_run::<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>\r\n  19: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorReported>>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94808/timeline", "performed_via_github_app": null, "state_reason": "completed"}