{"url": "https://api.github.com/repos/rust-lang/rust/issues/110017", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110017/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110017/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110017/events", "html_url": "https://github.com/rust-lang/rust/issues/110017", "id": 1657888291, "node_id": "I_kwDOAAsO6M5i0V4j", "number": 110017, "title": "format! .into() suggestion deletes the format macro", "user": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2023-04-06T18:45:33Z", "updated_at": "2023-04-07T06:51:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Code\r\n\r\n```Rust\r\npub fn foo(x: &str) -> Result<(), Box<dyn std::error::Error>> {\r\n    Err(format!(\"error: {x}\"))\r\n}\r\n```\r\n\r\n\r\n### Current output\r\n\r\n```Shell\r\nChecking foo v0.1.0 (/Users/eric/Temp/foo)\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:2:9\r\n  |\r\n2 |     Err(format!(\"error: {x}\"))\r\n  |         ^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Error>`, found `String`\r\n  |\r\n  = note: expected struct `Box<dyn std::error::Error>`\r\n             found struct `String`\r\n  = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\r\nhelp: call `Into::into` on this expression to convert `String` into `Box<dyn std::error::Error>`\r\n --> /Users/eric/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/macros.rs:121:12\r\n  |\r\n12|         res.into()\r\n  |            +++++++\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `foo` (lib) due to previous error\r\n```\r\n\r\n\r\n### Desired output\r\n\r\n```Shell\r\nChecking foo v0.1.0 (/Users/eric/Temp/foo)\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:2:9\r\n  |\r\n2 |     Err(format!(\"error: {x}\"))\r\n  |         ^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Error>`, found `String`\r\n  |\r\n  = note: expected struct `Box<dyn std::error::Error>`\r\n             found struct `String`\r\n  = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\r\nhelp: call `Into::into` on this expression to convert `String` into `Box<dyn std::error::Error>`\r\n --> /Users/eric/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/macros.rs:121:12\r\n  |\r\n12|          Err(format!(\"error: {x}\").into())\r\n  |                                   +++++++\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `foo` (lib) due to previous error\r\n```\r\n\r\n\r\n### Rationale and extra context\r\n\r\nThe suggestion converts the code to:\r\n\r\n```\r\nErr(.into())\r\n```\r\n\r\nwhich is invalid.\r\n\r\nIt should suggest:\r\n\r\n```\r\nErr(format!(\"error: {x}\").into())\r\n```\r\n\r\nThe suggestion works correctly for non-macro string values. \r\n\r\nThis suggestion was introduced in #102496.\r\n\r\n### Other cases\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n```\r\nrustc 1.70.0-nightly (cf7ada217 2023-04-03)\r\nbinary: rustc\r\ncommit-hash: cf7ada217c8ac63367b184afd9fffaff30f6ed44\r\ncommit-date: 2023-04-03\r\nhost: aarch64-apple-darwin\r\nrelease: 1.70.0-nightly\r\nLLVM version: 16.0.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110017/timeline", "performed_via_github_app": null, "state_reason": null}