{"url": "https://api.github.com/repos/rust-lang/rust/issues/25115", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/25115/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/25115/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/25115/events", "html_url": "https://github.com/rust-lang/rust/issues/25115", "id": 73315557, "node_id": "MDU6SXNzdWU3MzMxNTU1Nw==", "number": 25115, "title": "Improve shared ownership guide", "user": {"login": "cburgdorf", "id": 521109, "node_id": "MDQ6VXNlcjUyMTEwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cburgdorf", "html_url": "https://github.com/cburgdorf", "followers_url": "https://api.github.com/users/cburgdorf/followers", "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}", "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}", "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions", "organizations_url": "https://api.github.com/users/cburgdorf/orgs", "repos_url": "https://api.github.com/users/cburgdorf/repos", "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}", "received_events_url": "https://api.github.com/users/cburgdorf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-05-05T13:29:56Z", "updated_at": "2015-07-06T16:17:08Z", "closed_at": "2015-07-06T16:17:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was looking through the shared ownership guide and stumbled over something that wasn't quite obvious to me at first sight.\n\nSo there is this code:\n\n``` rust\nuse std::rc::Rc;\n\nstruct Car {\n    name: String,\n}\n\nstruct Wheel {\n    size: i32,\n    owner: Rc<Car>,\n}\n\nfn main() {\n    let car = Car { name: \"DeLorean\".to_string() };\n\n    let car_owner = Rc::new(car);\n\n    for _ in 0..4 {\n        Wheel { size: 360, owner: car_owner.clone() };\n    }\n}\n```\n\nIt then states:\n\n> We wrap our Car in an Rc<T>, getting an Rc<Car>, and then use the clone() method to make new references. We've also changed our Wheel to have an Rc<Car> rather than just a Car.\n\nSo I wanted to see if changing the `car` has any effect on the car that's shared among the wheels.\n\n``` rust\nuse std::rc::Rc;\n\n#[derive(Debug)]\nstruct Car {\n    name: String,\n}\n\n#[derive(Debug)]\nstruct Wheel {\n    size: i32,\n    owner: Rc<Car>,\n}\n\nfn main() {\n    let mut car = Car { name: \"DeLorean\".to_string() };\n\n    //this copies car into the Rc which means \n    //the car that is wrapped in the RC is not the same as our car variable\n    let car_owner = Rc::new(car);\n\n    let mut wheels = vec!();\n\n    for _ in 0..4 {\n        wheels.push(Wheel { size: 360, owner: car_owner.clone() });\n    }\n\n    // I wanted to see if I can change the name of the car here\n    car.name = \"foo\".to_string();\n\n    //...and if it then causes to print \"foo\" for the car names here \n    println!(\"{:?}\", wheels);\n}\n```\n\nBut this doesn't work. At first I thought `Rc::new(car)` will return a ref counted pointer to `car`. But that's not the case. Instead it actually makes a copy of `car` before it creates the ref counted pointer.\n\nWe can make this even more obvious when we use `RefCell`.\n\n``` rust\nuse std::rc::Rc;\nuse std::cell::RefCell;\n\n#[derive(Debug)]\nstruct Car {\n    name: String,\n}\n\n#[derive(Debug)]\nstruct Wheel {\n    size: i32,\n    owner: Rc<RefCell<Car>>,\n}\n\nfn main() {\n    let mut car = Car { name: \"DeLorean\".to_string() };\n\n    let car_owner = Rc::new(RefCell::new(car));\n\n    let mut wheels = vec!();\n\n    for _ in 0..4 {\n        wheels.push(Wheel { size: 360, owner: car_owner.clone() });\n    }\n\n    //doesn't have any effect on car_owner\n    //car.name = \"Porsche\".to_string();\n\n    //manipulation needs to be made on car_owner\n    car_owner.borrow_mut().name = \"Porsche\".to_string();\n\n    println!(\"{:?}\", wheels);\n}\n```\n\nSo my point is that there is no connection to `car` anymore. `car` becomes pretty much useless in the scenario as it's implicitly copied with the `Rc::new(car)` call and from then on only `car_owner` holds the relevant car.\n\nAs I said, it's probably obvious to the experienced Rust user but may not for the beginner.\n\nI would suggest to either point it out in the text more explicitly or change the example to inline the creation of the car to not keep it in a local `car` variable.\n\n``` rust\n    let car_owner = Rc::new(Car { name: \"DeLorean\".to_string() });\n```\n\n//cc @steveklabnik \n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/25115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/25115/timeline", "performed_via_github_app": null, "state_reason": "completed"}