{"url": "https://api.github.com/repos/rust-lang/rust/issues/105191", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105191/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105191/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105191/events", "html_url": "https://github.com/rust-lang/rust/issues/105191", "id": 1473560811, "node_id": "I_kwDOAAsO6M5X1MDr", "number": 105191, "title": "GAT: spurious \"first borrow might be used here, when `...` is dropped and runs the destructor for type `...`\"", "user": {"login": "lyphyser", "id": 98273206, "node_id": "U_kgDOBduHtg", "avatar_url": "https://avatars.githubusercontent.com/u/98273206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lyphyser", "html_url": "https://github.com/lyphyser", "followers_url": "https://api.github.com/users/lyphyser/followers", "following_url": "https://api.github.com/users/lyphyser/following{/other_user}", "gists_url": "https://api.github.com/users/lyphyser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lyphyser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lyphyser/subscriptions", "organizations_url": "https://api.github.com/users/lyphyser/orgs", "repos_url": "https://api.github.com/users/lyphyser/repos", "events_url": "https://api.github.com/users/lyphyser/events{/privacy}", "received_events_url": "https://api.github.com/users/lyphyser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-12-02T23:08:08Z", "updated_at": "2022-12-03T01:02:14Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This code doesn't compile (borrowck error on `main.mutate()`), but I think it should, since the borrow on `main` should end after `sub.consume()` with NLL (and the destructor for Option can't possibly run, since the contents have been moved out):\r\n```rust\r\npub trait Sub\r\n{\r\n    fn consume(self);\r\n}\r\n\r\npub trait Main\r\n{\r\n    type Sub<'a>: Sub where Self: 'a;\r\n\r\n    fn mutate(&mut self);\r\n    fn sub<'a>(&'a mut self) -> Option<Self::Sub<'a>>;\r\n}\r\n\r\npub fn test(main: &mut impl Main)\r\n{\r\n    match main.sub() {\r\n        Some(sub) => {\r\n                sub.consume();\r\n                main.mutate();\r\n        }\r\n        None => {\r\n                return;\r\n        }\r\n    };\r\n}\r\n```\r\n\r\nUsing a concrete type instead of a generic implementing the trait makes it compile.\r\n\r\n\r\nThis is the error the compiler gives:\r\n```\r\nerror[E0499]: cannot borrow `*main` as mutable more than once at a time\r\n  --> test.rs:19:3\r\n   |\r\n16 |     match main.sub() {\r\n   |           ----------\r\n   |           |\r\n   |           first mutable borrow occurs here\r\n   |           a temporary with access to the first borrow is created here ...\r\n...\r\n19 |         main.mutate();\r\n   |         ^^^^^^^^^^^^^ second mutable borrow occurs here\r\n...\r\n24 |     };\r\n   |      - ... and the first borrow might be used here, when that temporary is dropped and runs the destructor for type `Option<<impl Main as Main>::Sub<'_>>`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0499`.\r\n```\r\n\r\nOn the other hand, this compiles:\r\n```\r\npub trait Sub\r\n{\r\n    fn consume(self);\r\n}\r\n\r\npub trait Main\r\n{\r\n    type Sub<'a>: Sub where Self: 'a;\r\n\r\n    fn mutate(&mut self);\r\n    fn sub<'a>(&'a mut self) -> Option<Self::Sub<'a>>;\r\n}\r\n\r\npub fn test(main: &mut impl Main)\r\n{\r\n    let sub = match main.sub() {\r\n        Some(sub) => sub,\r\n        None => {\r\n                return;\r\n        }\r\n    };\r\n\r\n    sub.consume();\r\n    main.mutate();\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105191/timeline", "performed_via_github_app": null, "state_reason": null}