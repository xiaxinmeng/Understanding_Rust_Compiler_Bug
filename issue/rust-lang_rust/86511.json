{"url": "https://api.github.com/repos/rust-lang/rust/issues/86511", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86511/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86511/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86511/events", "html_url": "https://github.com/rust-lang/rust/issues/86511", "id": 926074469, "node_id": "MDU6SXNzdWU5MjYwNzQ0Njk=", "number": 86511, "title": "`match` an `std::cmp::Ordering` generates less optimized code in nightly", "user": {"login": "yume-chan", "id": 1330321, "node_id": "MDQ6VXNlcjEzMzAzMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1330321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yume-chan", "html_url": "https://github.com/yume-chan", "followers_url": "https://api.github.com/users/yume-chan/followers", "following_url": "https://api.github.com/users/yume-chan/following{/other_user}", "gists_url": "https://api.github.com/users/yume-chan/gists{/gist_id}", "starred_url": "https://api.github.com/users/yume-chan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yume-chan/subscriptions", "organizations_url": "https://api.github.com/users/yume-chan/orgs", "repos_url": "https://api.github.com/users/yume-chan/repos", "events_url": "https://api.github.com/users/yume-chan/events{/privacy}", "received_events_url": "https://api.github.com/users/yume-chan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/82", "html_url": "https://github.com/rust-lang/rust/milestone/82", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/82/labels", "id": 6717076, "node_id": "MDk6TWlsZXN0b25lNjcxNzA3Ng==", "number": 82, "title": "1.54.0", "description": null, "creator": {"login": "rustbot", "id": 47979223, "node_id": "MDQ6VXNlcjQ3OTc5MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47979223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustbot", "html_url": "https://github.com/rustbot", "followers_url": "https://api.github.com/users/rustbot/followers", "following_url": "https://api.github.com/users/rustbot/following{/other_user}", "gists_url": "https://api.github.com/users/rustbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustbot/subscriptions", "organizations_url": "https://api.github.com/users/rustbot/orgs", "repos_url": "https://api.github.com/users/rustbot/repos", "events_url": "https://api.github.com/users/rustbot/events{/privacy}", "received_events_url": "https://api.github.com/users/rustbot/received_events", "type": "User", "site_admin": false}, "open_issues": 2, "closed_issues": 652, "state": "closed", "created_at": "2021-05-01T02:53:57Z", "updated_at": "2022-02-03T12:07:26Z", "due_on": null, "closed_at": "2021-08-17T19:06:49Z"}, "comments": 21, "created_at": "2021-06-21T10:32:17Z", "updated_at": "2022-11-18T15:35:59Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a regression report! \ud83d\udc1b A regression is something that changed between versions of Rust but was not supposed to.\r\n\r\nPlease provide a short summary of the regression, along with any information you feel is relevant to replicate it.\r\n-->\r\n\r\nI'm interested in this comment:\r\n\r\nhttps://github.com/rust-lang/rust/blob/3824017f8e57ce9dac6d69a1ce07f41c7034f82d/library/core/src/slice/mod.rs#L2204-L2217\r\n\r\nSo I did some testing:\r\n\r\n---\r\n\r\nThe following code snippet is the \"bad\" one (`match` an `std::cmp::Ordering`) in above comment, but with `f` manually inlined.\r\n\r\n```rust\r\nuse std::cmp::Ordering;\r\nuse std::cmp::Ordering::*;\r\n\r\npub fn custom_binary_search_1<'a>(slice: &'a [u8], x: &u8) -> Result<usize, usize> {\r\n    let s = slice;\r\n    let mut left = 0;\r\n    let mut right = s.len();\r\n    while left < right {\r\n        // never overflow because `slice::len()` max is `isize::MAX`.\r\n        let mid = (left + right) / 2;\r\n        // SAFETY: the call is made safe by the following invariants:\r\n        // - `mid >= 0`\r\n        // - `mid < size`: `mid` is limited by `[left; right)` bound.\r\n        let cmp = unsafe{ s.get_unchecked(mid).cmp(x) };\r\n        match cmp {\r\n            Less => left = mid + 1,\r\n            Greater => right = mid,\r\n            Equal => return Ok(mid),\r\n        }\r\n    }\r\n    Err(left)\r\n}\r\n```\r\n\r\n---\r\n\r\nIn version 1.53.0-beta.12 (2021-06-12 e7a67cc91667fd2a6679), release mode, it generates the following x86 assembly (related parts only):\r\n\r\n```asm\r\n        jmp\t.LBB0_3\r\n.LBB0_7:\r\n\tadd\trdx, 1                     # mid += 1\r\n\tmov\trcx, rdx                   # left = mid\r\n\tcmp\trcx, rsi                   # while left < right\r\n\tjae\t.LBB0_9                    # (end loop)\r\n.LBB0_3:\r\n\tlea\trdx, [rcx + rsi]           # mid = left + right\r\n\tshr\trdx                        # mid /= 2\r\n\tcmp\tbyte ptr [rdi + rdx], r8b  # match s[mid].cmp(x)\r\n\tjb\t.LBB0_7                    # Less => ...\r\n\tje\t.LBB0_6                    # Equal => ...\r\n\tmov\trsi, rdx                   # Greater => right = mid\r\n\tcmp\trcx, rsi                   # while left < right\r\n\tjb\t.LBB0_3                    # (continue loop)\r\n.LBB0_6:\r\n\txor\teax, eax                   # return (0, mid)\r\n\tret\r\n```\r\n\r\n(Which is identical to manually expanding to `if..else if..else`, however it's not the point of this issue)\r\n\r\n---\r\n\r\nIn version 1.55.0-nightly (2021-06-20 e82b65026dcadf0998e3), release mode, the generated assembly code is:\r\n\r\n```asm\r\n\tmov\tr9, -1                       # constant of std::cmp::Ordering::Less\r\n\tjmp\t.LBB0_3\r\n\r\n.LBB0_5:                                #   in Loop: Header=BB0_3 Depth=1\r\n\tmov\trcx, rdx                     # left = mid         \r\n\tadd\trcx, 1                       # left += 1\r\n\tmov\trdx, rsi                     # temp = right\r\n\r\n.LBB0_6:                                #   in Loop: Header=BB0_3 Depth=1\r\n\tmov\trsi, rdx                     # right = mid\r\n\tcmp\trcx, rdx                     # while left < right\r\n\tjae\t.LBB0_7                      # (end loop)\r\n\r\n.LBB0_3:                                # =>This Inner Loop Header: Depth=1\r\n\tlea\trdx, [rcx + rsi]             # mid = left + right\r\n\tshr\trdx                          # mid /= 2\r\n\txor\teax, eax                     # cmp = 0\r\n\tcmp\tbyte ptr [rdi + rdx], r8b\r\n\tsetne\tal                           # cmp = s[mid] == x ? 0 : 1\r\n\tcmovb\trax, r9                      # cmp = s[mid] < x ? -1 : temp\r\n\tcmp\trax, -1                      # if cmp == Less\r\n\tje\t.LBB0_5                      # Less => ...\r\n# %bb.4:                                #   in Loop: Header=BB0_3 Depth=1\r\n\tcmp\trax, 1                       # if cmp == Greater\r\n\tje\t.LBB0_6                      # Greater => ...\r\n# %bb.9:\r\n\tret\r\n```\r\n\r\nIt's same as the \"bad\" result in original comment, and obviously much unoptimized.\r\n\r\nI think `match` an `Ordering` should be a quite common use case, so shouldn't be deoptimized.\r\n\r\n---\r\n\r\n### Version it worked on\r\n\r\nRust Playground: 1.53.0\r\n\r\nRust Playground: 1.53.0-beta.12 (2021-06-12 e7a67cc91667fd2a6679)\r\n\r\n### Version with regression\r\n\r\na55748ffe94e71f841c7b1d752779b0db138b342  ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86511/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86511/timeline", "performed_via_github_app": null, "state_reason": null}