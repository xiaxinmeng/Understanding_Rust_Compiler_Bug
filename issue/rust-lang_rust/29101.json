{"url": "https://api.github.com/repos/rust-lang/rust/issues/29101", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29101/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29101/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29101/events", "html_url": "https://github.com/rust-lang/rust/issues/29101", "id": 111824801, "node_id": "MDU6SXNzdWUxMTE4MjQ4MDE=", "number": 29101, "title": "impl default type param fallback not firing without explicitly typed expression context", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-10-16T12:48:01Z", "updated_at": "2015-10-16T13:43:05Z", "closed_at": "2015-10-16T13:43:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "One of the big motivations for default type parameter fallback ([RFC #213](https://github.com/rust-lang/rfcs/blob/master/text/0213-defaulted-type-params.md)) was for future-proofing our API's: We wanted to be able to stabilize an api like `Vec<T>`, with the expectation that future versions of `Vec` might want additional type parameters, like `Vec<T, A> where A:Allocator`, and that we would accomplish this by specifying a default type parameter `Vec<T, A=DefaultAlloc>`, and then old code written against `Vec<T>` would just fill in `A=DefaultAlloc` for the missing parameter.\n\nHowever, it seems like the current implementation is missing something, since my attempt to prototype `Vec<T, A:Allocator=DefaultAlloc>` is hitting problems with type inference on code that should not need modification.\n\nHere is a concrete example of the problem I am facing. Start with this code (all of the concatenated snippets can be found [here](https://gist.github.com/pnkfelix/d330129c808d1c7f5671)): \n\n``` rust\n#[cfg(version1)]\n#[derive(Debug)] struct Mec { x: i32 }\n\n#[cfg(version1)]\nimpl Mec {\n    pub fn new(x: i32) -> Self { Mec { x: x } }\n}\n\nfn main() {\n    let m1: Mec = Mec::new(1);\n    println!(\"Hi {:?}\", m1);\n\n    let m2 = Mec::new(2);\n    println!(\"Hi {:?}\", m2);\n}\n```\n\nYou can compile and run it (it works as is) like so:\n\n```\n% rustc --cfg version1 default-fallback2.rs && ./default-fallback2\nHi Mec { x: 1 }\nHi Mec { x: 2 }\n```\n\nNow lets add a defaulted type parameter to `Mec`:\n\n``` rust\n#[derive(Debug, Default)] struct Dflt;\n#[derive(Debug, Default)] struct Alt;\n\n#[cfg(any(version2, version3))]\n#[derive(Debug)] struct Mec<A=Dflt> { x: i32, a: A }\n\n#[cfg(version2)]\nimpl Mec<Dflt> {\n    pub fn new(x: i32) -> Self { Mec { x: x, a: Default::default() } }\n}\n```\n\nWe can keep compiling and running with `version2` here, there's no problem yet:\n\n``` rust\n% rustc --cfg version2 default-fallback2.rs && ./default-fallback2\nHi Mec { x: 1, a: Dflt }\nHi Mec { x: 2, a: Dflt }\n```\n\nThe problem comes when we try to further generalize: What if we wanted to allow `Mec::new()` to work for any `A` that implements `Default` (like `struct Alt` above)?  That's our third version, and that's where things go wrong:\n\n``` rust\n#[cfg(version3)]\nimpl<A:Default=Dflt> Mec<A> {\n    pub fn new(x: i32) -> Self { Mec { x: x, a: Default::default() } }\n}\n```\n\nNow we get a type inference error:\n\n```\n% rustc --cfg version3 default-fallback2.rs && ./default-fallback2\ndefault-fallback2.rs:13:14: 13:22 error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]\ndefault-fallback2.rs:13     let m2 = Mec::new(2);\n                                     ^~~~~~~~\ndefault-fallback2.rs:13:14: 13:22 help: run `rustc --explain E0282` to see a detailed explanation\nerror: aborting due to previous error\n```\n\n(Note that the `let m1: Mec = Mec::new(1);` invocation works; its only when we leave out the type annotation on the `let m2 = ...` binding that inference fails to fall back to `A=Dflt`.)\n", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29101/timeline", "performed_via_github_app": null, "state_reason": "completed"}