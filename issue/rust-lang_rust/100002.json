{"url": "https://api.github.com/repos/rust-lang/rust/issues/100002", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100002/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100002/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100002/events", "html_url": "https://github.com/rust-lang/rust/issues/100002", "id": 1323592353, "node_id": "I_kwDOAAsO6M5O5Gqh", "number": 100002, "title": "type annotation of closure args breaks borrow checking", "user": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-07-31T22:22:20Z", "updated_at": "2022-08-04T07:34:36Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This example compiles as expected:\r\n```rust\r\nfn main() {\r\n    let mut list = vec![];\r\n    let mut add_to_list = |name: _| {\r\n        list.push(name);\r\n    };\r\n    \r\n    let name = String::from(\"name1\");\r\n    add_to_list(&name);\r\n}\r\n```\r\nbut when a type annotation is added to the closure argument, it fails:\r\n```diff\r\n-    let mut add_to_list = |name: _| {\r\n+    let mut add_to_list = |name: &str| {\r\n```\r\n\r\n## Workaround\r\nSometimes type annotation is necessary when type inference fails. :\r\n```rust\r\nfn main() {\r\n    let mut list = vec![];\r\n    let mut add_to_list = |name: _| { //ERROR type annotations needed\r\n        if !name.is_empty() {\r\n            list.push(name);\r\n        }\r\n    };\r\n    \r\n    let name = String::from(\"name1\");\r\n    add_to_list(&name);\r\n}\r\n```\r\nIn this case you can use this ugly hack to annotate the type in the closure body:\r\n```diff\r\n     let mut add_to_list = |name: _| {\r\n+        let name: &str = name; // hack: annotate the type here to avoid rustc bug #xxx\r\n         if !name.is_empty() {\r\n```\r\n\r\n## But why?\r\nWhen rustc encounters such closure, It has to pick up one of these two types for the closure:\r\n```rust\r\n/// A closure that expects an argument of SOME specific lifetime, `'a`.\r\ntype FnSig1<'a> = dyn         FnMut(&'a str);\r\n\r\n/// A closure that expects an argument of ANY lifetime.\r\n/// Aka higher-ranked lifetime.\r\ntype FnSig2     = dyn for<'a> FnMut(&'a str);\r\n```\r\nWe want the first one here but the compiler is not smart enough to infer this. Instead it follows a set of dumb rules[^1] that leads it to the second type, and then it fails when borrow-checking the closure for the same reason the following fails:\r\n```rust\r\nfn test<'a, 'b>(mut list: Vec<&'a str>, name: &'b str) {\r\n    list.push(name);\r\n}\r\n```\r\n\r\nThere is a [promising work on a-mir-fomality](https://github.com/rust-lang/rfcs/pull/3216#issuecomment-1116369997) to make this inference smarter.\r\n\r\n[^1]: simply if the lifetime appears in type annotation, it's inferred to be higher-ranked", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100002/timeline", "performed_via_github_app": null, "state_reason": null}