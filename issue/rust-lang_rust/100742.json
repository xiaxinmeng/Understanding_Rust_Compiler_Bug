{"url": "https://api.github.com/repos/rust-lang/rust/issues/100742", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100742/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100742/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100742/events", "html_url": "https://github.com/rust-lang/rust/issues/100742", "id": 1344092662, "node_id": "I_kwDOAAsO6M5QHTn2", "number": 100742, "title": "Redundant error for \"implementation ... not general enough\" in \"NLL\" mode / since 1.63 (when it was made permanent).", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1659943986, "node_id": "MDU6TGFiZWwxNjU5OTQzOTg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-verbose", "name": "D-verbose", "color": "c9f7a3", "default": false, "description": "Too much output caused by a single piece of incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-08-19T08:02:44Z", "updated_at": "2022-08-19T09:46:05Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This is a classic demonstration of the limitations of (\"early-bound\") generics wrt HRTB:\r\n```rust\r\nfn type_generic<T>(_: T) {}\r\n\r\nstruct LtGen<'a>(&'a ());\r\nfn takes_ltgen_forall_lifetimes(_: impl for<'x> FnOnce(LtGen<'x>)) {}\r\n\r\nfn main() {\r\n    takes_ltgen_forall_lifetimes(type_generic);\r\n}\r\n```\r\n<sup>(I don't know what issue we have open about it - #30904 is too specific, there must be one about generic functions - and also if we ever fix this it will likely require `for<'x> typeof(type_generic::<LtGen<'x>>)` function types, which I've brought up to @nikomatsakis before but I haven't seen any other discussion of)</sup>\r\n\r\nEither way, *for now*, the above *should* error (if you're curious, the simplest fix is to use a closure, that itself can be `for<'x>`, and which calls the function, like `|x| type_generic(x)`).\r\n\r\nAnd for a long time (since MIR borrowck?) we've had this error:\r\n```\r\nerror: implementation of `FnOnce` is not general enough\r\n --> <source>:7:5\r\n  |\r\n7 |     takes_ltgen_forall_lifetimes(type_generic);\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\r\n  |\r\n  = note: `fn(LtGen<'2>) {type_generic::<LtGen<'2>>}` must implement `FnOnce<(LtGen<'1>,)>`, for any lifetime `'1`...\r\n  = note: ...but it actually implements `FnOnce<(LtGen<'2>,)>`, for some specific lifetime `'2`\r\n```\r\nIt's not *perfect*, but it shows the difference between some inferred lifetime (`'2`) and the HRTB (`'1`).\r\n\r\n<hr/>\r\n\r\n*However*, since 1.63.0 (see comparison on godbolt: https://godbolt.org/z/EzjPzE7xs), we *also* get:\r\n```\r\nerror[E0308]: mismatched types\r\n --> <source>:7:5\r\n  |\r\n7 |     takes_ltgen_forall_lifetimes(type_generic);\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\r\n  |\r\n  = note: expected trait `for<'x> FnOnce<(LtGen<'x>,)>`\r\n             found trait `FnOnce<(LtGen<'_>,)>`\r\nnote: the lifetime requirement is introduced here\r\n --> <source>:4:41\r\n  |\r\n4 | fn takes_ltgen_forall_lifetimes(_: impl for<'x> FnOnce(LtGen<'x>)) {}\r\n  |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nThis is a weirder error, that I naively assumed would be the old regionck (but that got removed, right? so it can't be that), though I suppose it could be some generic obligation solving from inside MIR borrowck.\r\n\r\n* it's presented as a type mismatch when it's an unsatisfied bound specifically because of HRTB\r\n* `'_` is used for lifetime inference variables\r\n* can use the ugly `for<'r>` auto-naming in the printout (not here because I wrote `for<'x>`)\r\n* it's not necessary because the better error *is still* being emitted\r\n  * (though I would still make this one `delay_span_bug` if they're not emitted from exactly the same place)\r\n\r\n<hr/>\r\n\r\n**EDIT**: more information found since opening the issue (in https://github.com/rust-lang/rust/issues/100742#issuecomment-1220394302):\r\n* bisected to #95565\r\n* what I'm calling the \"good\" error [replaced the \"bad\" one back in 1.52.0](https://godbolt.org/z/z5qeecKb1)\r\n\r\n**EDIT2**: better timeline in https://github.com/rust-lang/rust/issues/100742#issuecomment-1220467532 - the error was improved back in #81972 but the \"bonus error\" comes from \"NLL mode\" - e.g. https://github.com/rust-lang/rust/issues/57374#issuecomment-1085201944.\r\n\r\n<hr/>\r\n\r\ncc @estebank @rust-lang/wg-nll @lcnr (this may be subtle in nature, hopefully someone knows what happened)\r\n\r\ncc @Manishearth (who has a similar error though unlikely related to this 1.62.0->1.63.0 change, since [it's on 1.61.0 instead](https://github.com/Manishearth/icu4x/blob/tmp-error-share/rust-toolchain), and does not even have the good error showing up at all - that one still needs to be reduced)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100742/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100742/timeline", "performed_via_github_app": null, "state_reason": null}