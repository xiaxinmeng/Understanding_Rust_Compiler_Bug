{"url": "https://api.github.com/repos/rust-lang/rust/issues/61849", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61849/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61849/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61849/events", "html_url": "https://github.com/rust-lang/rust/issues/61849", "id": 456394000, "node_id": "MDU6SXNzdWU0NTYzOTQwMDA=", "number": 61849, "title": "Recycle storage after move", "user": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2019-06-14T19:09:13Z", "updated_at": "2021-07-03T09:28:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We should experiment with \"re-allocating\" storage for a local after it's moved from if it gets re-initialized. This would enable more optimizations, but could have some potential fallout.\r\n\r\nEDIT: See [this comment](https://github.com/rust-lang/rust/issues/61849#issuecomment-507897665) for further explanation of what kinds of optimizations this would enable.\r\n\r\nQuoth @RalfJung, from https://github.com/rust-lang/rust/issues/59123#issuecomment-501990026:\r\n\r\n> Currently, the following (entirely safe) code will definitely return `true`:\r\n> \r\n> ```rust\r\n> let mut x = String::new();\r\n> let addr_x = &x as *const _ as usize;\r\n> drop(x);\r\n> // later\r\n> x = String::new();\r\n> let addr_x2 = &x as *const _ as usize;\r\n> return addr_x == addr_x2;\r\n> ```\r\n> \r\n> If we want to do optimizations like yours here (and I am totally sympathetic to that), we have to explain in the \"Rust Abstract Machine\" (and in Miri) why this program might return `false`. And the answer cannot be \"there is UB\", because this is safe code.\r\n> \r\n> This is a topic that @nikomatsakis, @eddyb and me have touched on several times already, without ever hashing out a full plan. But in the current state of affairs, the only mechanism we have to \"defeat\" pointer equality tests like the above is to make sure that this is not the same allocation any more.\r\n> \r\n> So, one thing we might do is to do `StorageDead(x); StorageLive(x);` immediately after every move. This \"re-allocates\" `x` and thus definitely kills any existing pointers and also \"defeats\" pointer comparisons. The immediate `StorageLive` is to keep the liveness state in sync in both branches of a conditional (which might or might not be relevant -- unfortunately LLVM's semantics for these intrinsics is less than clear). I guess the `StorageLive` could be moved down in cases where there is no merging control flow, which should give you your optimization in many cases.\r\n\r\nIt is possible to do a subset of the optimization discussed in #59123 without this, but this would help cover more cases, in this optimization and others.\r\n\r\ncc @cramertj @eddyb @nikomatsakis @RalfJung ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61849/reactions", "total_count": 6, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 3, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61849/timeline", "performed_via_github_app": null, "state_reason": null}