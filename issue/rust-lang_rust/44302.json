{"url": "https://api.github.com/repos/rust-lang/rust/issues/44302", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44302/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44302/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44302/events", "html_url": "https://github.com/rust-lang/rust/issues/44302", "id": 254904477, "node_id": "MDU6SXNzdWUyNTQ5MDQ0Nzc=", "number": 44302, "title": "Alloc: Add owns method", "user": {"login": "joshlf", "id": 1046063, "node_id": "MDQ6VXNlcjEwNDYwNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1046063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshlf", "html_url": "https://github.com/joshlf", "followers_url": "https://api.github.com/users/joshlf/followers", "following_url": "https://api.github.com/users/joshlf/following{/other_user}", "gists_url": "https://api.github.com/users/joshlf/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshlf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshlf/subscriptions", "organizations_url": "https://api.github.com/users/joshlf/orgs", "repos_url": "https://api.github.com/users/joshlf/repos", "events_url": "https://api.github.com/users/joshlf/events{/privacy}", "received_events_url": "https://api.github.com/users/joshlf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-09-03T22:18:27Z", "updated_at": "2019-03-25T14:14:54Z", "closed_at": "2019-03-25T14:14:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As Andrei Alexandrescu discusses in [this great talk](https://www.youtube.com/watch?v=LIb3L4vKZ7U&feature=youtu.be&t=23m25s), in order to make it possible to construct new allocators by composing existing ones, each allocator must support an ownership check.\r\n\r\nConsider, for example, a \"fallback allocator\" - an allocator which operates by wrapping two other allocators, serving allocation requests by trying to allocate from the first allocator and falling back to the second one if the first request fails. In Rust:\r\n\r\n```rust\r\nfn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\r\n    if let Ok(ptr) = self.first.alloc(layout.clone()) {\r\n        Ok(ptr)\r\n    } else {\r\n        self.second.alloc(layout)\r\n    }\r\n}\r\n```\r\n\r\nIn order to service deallocation requests to this allocator, however, you need to be able to detect which allocator a given pointer came from. If we assume an `owns` method, this looks like:\r\n\r\n```rust\r\nfn dealloc(&mut self, ptr: *mut u8, layout: Layout) {\r\n    if self.first.owns(ptr, layout.clone()) {\r\n        self.first.dealloc(ptr, layout);\r\n    } else {\r\n        self.second.dealloc(ptr, layout);\r\n    }\r\n}\r\n```\r\n\r\nAs Andrei discusses in that talk, modern allocators are nothing _but_ composition - size classes, different allocation strategies, falling back to `mmap` for certain allocations, etc. Thus, I think that it's important that we take composability seriously, and ensure that our `Alloc` trait is composable. This requires adding an `owns` method. Concretely, I'm suggesting the following signature be added to the `Alloc` trait:\r\n\r\n```rust\r\nfn owns(&self, ptr: *mut u8, layout: Layout) -> bool;\r\n```\r\n\r\ncc @Ericson2314 @pnkfelix @alexcrichton ", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44302/timeline", "performed_via_github_app": null, "state_reason": "completed"}