{"url": "https://api.github.com/repos/rust-lang/rust/issues/44886", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44886/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44886/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44886/events", "html_url": "https://github.com/rust-lang/rust/issues/44886", "id": 260998229, "node_id": "MDU6SXNzdWUyNjA5OTgyMjk=", "number": 44886, "title": "`catch` lacking both type annotation and trailing expr yields confusing diagnostic", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 632578752, "node_id": "MDU6TGFiZWw2MzI1Nzg3NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-catch", "name": "A-catch", "color": "f7e101", "default": false, "description": "Area: `do catch { .. }` expressions"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-27T14:34:54Z", "updated_at": "2023-05-11T18:09:20Z", "closed_at": "2023-05-11T18:09:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "If you:\r\n 1. make a `catch` block, and\r\n 2. do not realize that essentially all `catch` blocks *have* to end in some sort of trailing expression of type `Result<.., ..>`, and\r\n 3. you also leave out the type annotation *stating* that the return type should indeed by `Result<.., ..>`,\r\n\r\nthen you are likely to end up getting an error diagnostic from the compiler that is pretty confusing.\r\n\r\nConsider the following example:\r\n\r\n```rust\r\n#![feature(catch_expr)]\r\n\r\npub fn f() -> Result<i32, i32> {\r\n    let collapse = do catch {\r\n        g()?;\r\n        h()?;\r\n        // Ok(()) // (error message becomes usable if you uncomment this.)\r\n    };\r\n    Ok(3)\r\n}\r\n\r\nfn g() -> Result<(), i32> { Err(0) }\r\n\r\nfn h() -> Result<(), i32> { Err(1) }\r\n\r\nfn main() { f().unwrap(); }\r\n```\r\n\r\nFrom today's nightly, this produces the following diagnostic output ([playground](https://play.rust-lang.org/?gist=b2e93924898b6c4091607c02df40696d&version=nightly)):\r\n\r\n```\r\n   Compiling playground v0.0.1 (file:///playground)\r\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\r\n --> src/main.rs:6:9\r\n  |\r\n6 |         h()?;\r\n  |         ----\r\n  |         |\r\n  |         cannot use the `?` operator in a function that returns `()`\r\n  |         in this macro invocation\r\n  |\r\n  = help: the trait `std::ops::Try` is not implemented for `()`\r\n  = note: required by `std::ops::Try::from_error`\r\n\r\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\r\n --> src/main.rs:5:9\r\n  |\r\n5 |         g()?;\r\n  |         ----\r\n  |         |\r\n  |         cannot use the `?` operator in a function that returns `()`\r\n  |         in this macro invocation\r\n  |\r\n  = help: the trait `std::ops::Try` is not implemented for `()`\r\n  = note: required by `std::ops::Try::from_error`\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nerror: Could not compile `playground`.\r\n```\r\n\r\nReading that is pretty frustrating: it talks about `?` only being usable in a *function* that returns `Result`, but this function *does* return `Result`.\r\n\r\n(The error message is much improved if one actually provides a trailing expression of `Result` type in the `catch`-block; the worst-case scenario then is it just tells you to provide an explicit type annotation for the `catch`-block itself.)\r\n\r\n----\r\n\r\nI assume this issue is arising because the type inference system is first using the lack of a trailing expression to infer that the type of the block's contet is `()`. Then, since we do not auto-wrap `catch`-blocks with `Ok` (see #41414), it concludes that the type of the `catch` expression must be `()` (even though that is a nonsensical type for a `catch` expression...). And then it uses that expected type (`()`) as the basis for its complaints about the uses of the `?`-operator.\r\n\r\n----\r\n\r\nSo, an idea:\r\n\r\nAssuming we are planning to *neither* (1.) implement `std::ops::Try` for `()` nor (2.) `Ok`-wrap the trailing expression of `catch`-blocks, then I would suggest that we force `catch`-blocks to *always* have some trailing expression. That wouldn't fix every instance of this problem, but its a pretty simple change and I cannot imagine any downside (since, the way things stand, all `catch`-blocks that *can reach* their end always need an explicit trailing expression to compile)\r\n\r\n(To handle the more general case, we may want to consider changing how type inference is handled for `catch`-blocks. But to be honest, given how general-purpose `catch`/`?` are since they are overloaded via the `Try` trait, I am not sure whether there is a good strategy for handling the general case here.)", "closed_by": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44886/timeline", "performed_via_github_app": null, "state_reason": "completed"}