{"url": "https://api.github.com/repos/rust-lang/rust/issues/86575", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86575/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86575/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86575/events", "html_url": "https://github.com/rust-lang/rust/issues/86575", "id": 928449249, "node_id": "MDU6SXNzdWU5Mjg0NDkyNDk=", "number": 86575, "title": "Proposal: PTHREAD_MUTEX_ERRORCHECK instead of PTHREAD_MUTEX_NORMAL", "user": {"login": "smklein", "id": 3258857, "node_id": "MDQ6VXNlcjMyNTg4NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/3258857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smklein", "html_url": "https://github.com/smklein", "followers_url": "https://api.github.com/users/smklein/followers", "following_url": "https://api.github.com/users/smklein/following{/other_user}", "gists_url": "https://api.github.com/users/smklein/gists{/gist_id}", "starred_url": "https://api.github.com/users/smklein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smklein/subscriptions", "organizations_url": "https://api.github.com/users/smklein/orgs", "repos_url": "https://api.github.com/users/smklein/repos", "events_url": "https://api.github.com/users/smklein/events{/privacy}", "received_events_url": "https://api.github.com/users/smklein/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-06-23T16:39:38Z", "updated_at": "2022-01-26T19:49:28Z", "closed_at": "2022-01-26T19:49:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**TL;DR: Currently, double-locking a Mutex from Unix systems causes a deadlock. It doesn't have to! It totally could result in a (presumably easier-to-debug) panic with a fairly minor change.**\r\n\r\nOn Unix systems, the pthread mutex type has been chosen as \"PTHREAD_MUTEX_NORMAL\" within the implementation of Rust's [Mutex](https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/mutex.rs#L57) type:\r\n\r\n```rust\r\n        let mut attr = MaybeUninit::<libc::pthread_mutexattr_t>::uninit();\r\n        cvt_nz(libc::pthread_mutexattr_init(attr.as_mut_ptr())).unwrap();\r\n        let attr = PthreadMutexAttr(&mut attr);\r\n        cvt_nz(libc::pthread_mutexattr_settype(attr.0.as_mut_ptr(), libc::PTHREAD_MUTEX_NORMAL))\r\n            .unwrap();\r\n        cvt_nz(libc::pthread_mutex_init(self.inner.get(), attr.0.as_ptr())).unwrap();\r\n``` \r\n\r\nAccording to [Posix.1-2008's pthread_mutex_lock documentation](https://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_mutex_lock.html#), this has the behavior that:\r\n\r\n> \"Attempting to relock the mutex causes deadlock. If a thread attempts to unlock a mutex that it has not locked or a mutex which is unlocked, undefined behaviour results.\"\r\n\r\nIn contrast, if we opted for a different Mutex type - namely, ERRORCHECK:\r\n\r\n```rust\r\n        cvt_nz(libc::pthread_mutexattr_settype(attr.0.as_mut_ptr(), libc::PTHREAD_MUTEX_ERRORCHECK))\r\n            .unwrap();\r\n``` \r\n\r\n... This would result in the [behavior that](https://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_mutex_lock.html):\r\n\r\n> \"If a thread attempts to relock a mutex that it has already locked, an error will be returned. If a thread attempts to unlock a mutex that it has not locked or a mutex which is unlocked, an error will be returned.\"\r\n\r\nWithin the context of the stdlib, the \"returned error\" actually means that we could fire an assertion when this behavior occurs, which IMO seems preferable to (on double locking) deadlocking or (on double unlock - an admittedly less plausible case) UB.\r\n\r\nThe [Mutex::lock documentation](https://doc.rust-lang.org/std/sync/struct.Mutex.html#panics) states:\r\n\r\n> This function might panic when called if the lock is already held by the current thread.\r\n\r\nAlthough I'm aware that \"might\" is load-bearing, making the change to `PTHREAD_MUTEX_ERRORCHECK` seems like it would be more-inline with the spirit of this documentation.\r\n\r\nSome considerations:\r\n- Is anyone actually dependent on the current deadlock behavior?\r\n- Performance implications? Is there a benchmark suite used by Rust's stdlib we could use to gather some data here? ", "closed_by": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86575/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86575/timeline", "performed_via_github_app": null, "state_reason": "completed"}