{"url": "https://api.github.com/repos/rust-lang/rust/issues/46711", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46711/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46711/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46711/events", "html_url": "https://github.com/rust-lang/rust/issues/46711", "id": 281791774, "node_id": "MDU6SXNzdWUyODE3OTE3NzQ=", "number": 46711, "title": "Unsatisfied trait bound for inner type in result leads to imprecise error message", "user": {"login": "mqudsi", "id": 606923, "node_id": "MDQ6VXNlcjYwNjkyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/606923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mqudsi", "html_url": "https://github.com/mqudsi", "followers_url": "https://api.github.com/users/mqudsi/followers", "following_url": "https://api.github.com/users/mqudsi/following{/other_user}", "gists_url": "https://api.github.com/users/mqudsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mqudsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mqudsi/subscriptions", "organizations_url": "https://api.github.com/users/mqudsi/orgs", "repos_url": "https://api.github.com/users/mqudsi/repos", "events_url": "https://api.github.com/users/mqudsi/events{/privacy}", "received_events_url": "https://api.github.com/users/mqudsi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-13T15:34:31Z", "updated_at": "2020-11-28T05:18:17Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given a function that returns an instance of a generic expecting an inner type to implement a trait but that bound is not satisfied, the compiler unhelpfully points to the entire function and does not specify which inner type is the root of the problem.\r\n\r\nSample code ([full error case on git](https://git.neosmart.net/mqudsi/futuretest/src/branch/rust-46711)):\r\n\r\n```rust\r\nfn test() -> MapErr<(), ()> {\r\n    future::ok(())\r\n        .map_err(|String| ())\r\n}\r\n```\r\n\r\n`MapErr` is a type that expects its first type parameter to implement the `Future` trait, `()` does not do so. \r\n\r\nThe compiler generates the following:\r\n\r\n```rust\r\n   Compiling futuretest v0.1.0 (file:///mnt/c/Users/Mahmoud/git/futuretest)\r\nerror[E0277]: the trait bound `(): futures::Future` is not satisfied\r\n  --> src/main.rs:17:1\r\n   |\r\n17 | / fn test() -> MapErr<(), ()> {\r\n18 | |     future::ok(())\r\n19 | |         .map_err(|String| ())\r\n20 | | }\r\n   | |_^ the trait `futures::Future` is not implemented for `()`\r\n   |\r\n   = note: required by `futures::MapErr`\r\n\r\nerror: aborting due to previous error\r\n\r\nerror: Could not compile `futuretest`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\nIt is extremely unclear from the resulting error message what the problem is. The text specifies that `MapErr` requires `()` to implement `futures::Future`, but highlights the entire function instead of (ideally) just the first type parameter in the function return type.\r\n\r\nIn this specifically chosen case, the error complains about `()` and `MapErr` - but trickily, `()` is just fine for the second type parameter to `MapErr<(), ()>`, it's the first `()` that needs to implement `futures::Future`.\r\n\r\nSo to recap:\r\n\r\n* Error should point to the return type declaration instead of the entire function\r\n* Error needs to clarify which inner type must satisfy the trait in question", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46711/timeline", "performed_via_github_app": null, "state_reason": null}