{"url": "https://api.github.com/repos/rust-lang/rust/issues/14422", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/14422/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/14422/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/14422/events", "html_url": "https://github.com/rust-lang/rust/issues/14422", "id": 34268208, "node_id": "MDU6SXNzdWUzNDI2ODIwOA==", "number": 14422, "title": "method on non-generic priv struct callable via re-exported type alias leads to link failure", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-05-25T16:51:03Z", "updated_at": "2014-05-27T19:56:42Z", "closed_at": "2014-05-27T19:56:42Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "While narrowing down to a small test case for #14421 , I encountered the following issue:\n\nA library might want to have a single private struct that is only exposed via a named type for that struct (*).\n\nBut it seems like this causes a link failure for clients of that library.  (Probably because some dead-code elimination pass is relying on accurate results from the reachability analysis, which is breaking in this scenario as described in #14421.)\n\n(I keep wondering if I'm missing some obvious explanation for this in my code, but I have reviewed the test a couple times and cannot find a reason to explain this except a hypothetical rustc bug.)\n\nbug_lib.rs\n\n``` rust\n#![crate_type=\"lib\"]\n\npub use src::aliases::B;\npub use src::hidden_core::make;\n\nmod src {\n    pub mod aliases {\n        use super::hidden_core::A;\n        pub type B = A;\n    }\n\n    pub mod hidden_core {\n        use super::aliases::B;\n\n        pub struct A;\n\n        pub fn make() -> B { A }\n\n        impl A {\n            pub fn foo(&mut self) { println!(\"called foo\"); }\n        }\n    }\n}\n```\n\nbug_client.rs\n\n``` rust\nextern crate bug_lib;\n\nuse bug_lib::B;\nuse bug_lib::make;\n\nfn main() {\n    let mut an_A : B  = make();\n    an_A.foo();\n}\n```\n\ntranscript\n\n```\n% ./x86_64-apple-darwin/stage2/bin/rustc --version\nrustc 0.11.0-pre (e402e75 2014-05-22 13:31:24 -0700)\nhost: x86_64-apple-darwin\n% ./x86_64-apple-darwin/stage2/bin/rustc --out-dir /tmp /tmp/bug_lib.rs\n/tmp/bug_lib.rs:20:13: 20:62 warning: code is never used: `foo`, #[warn(dead_code)] on by default\n/tmp/bug_lib.rs:20             pub fn foo(&mut self) { println!(\"called foo\"); }\n                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n%  ./x86_64-apple-darwin/stage2/bin/rustc -L /tmp/ /tmp/bug_client.rs\nerror: linking with `cc` failed: exit code: 1\nnote: cc '-m64' '-L' '/Users/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib' '-o' 'bug_client' 'bug_client.o' '-lmorestack' '-nodefaultlibs' '-Wl,-dead_strip' '/Users/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libnative-1fb5e2c0-0.11.0-pre.rlib' '/private/tmp/libbug_lib-ef5c9cd9-0.0.rlib' '/Users/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libstd-59beb4f7-0.11.0-pre.rlib' '/Users/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/liballoc-1085c790-0.11.0-pre.rlib' '/Users/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libcore-c5ed6fb4-0.11.0-pre.rlib' '/Users/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/liblibc-4f9a876d-0.11.0-pre.rlib' '-L' '/tmp' '-L' '/Users/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt/.rust' '-L' '/Users/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt' '-lSystem' '-lpthread' '-lc' '-lm' '-Wl,-rpath,@loader_path/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib' '-Wl,-rpath,/Users/pnkfelix/opt/rust-dbg/lib/rustlib/x86_64-apple-darwin/lib' '-lcompiler-rt'\nnote: ld: warning: directory not found for option '-L/Users/pnkfelix/Dev/Mozilla/rust.git/objdir-dbgopt/.rust'\nUndefined symbols for architecture x86_64:\n  \"src::hidden_core::A::foo::h874f4919cda4bfc2Aaa::v0.0\", referenced from:\n      main::hea3b2ec4fbc3f438haa::v0.0 in bug_client.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\nerror: aborting due to previous error\n% \n```\n\n(*) Who knows why, perhaps the library designer doesn't like the names chosen by a fellow developer, but does not want to go through the effort of alpha-renaming.  In any case, if #14421 works then this case seems like it should work as well.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/14422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/14422/timeline", "performed_via_github_app": null, "state_reason": "completed"}