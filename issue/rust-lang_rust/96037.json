{"url": "https://api.github.com/repos/rust-lang/rust/issues/96037", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96037/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96037/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96037/events", "html_url": "https://github.com/rust-lang/rust/issues/96037", "id": 1204144168, "node_id": "I_kwDOAAsO6M5Hxcgo", "number": 96037, "title": "How to generate one instruction only when asm! is used in naked functions?", "user": {"login": "luojia65", "id": 40385009, "node_id": "MDQ6VXNlcjQwMzg1MDA5", "avatar_url": "https://avatars.githubusercontent.com/u/40385009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luojia65", "html_url": "https://github.com/luojia65", "followers_url": "https://api.github.com/users/luojia65/followers", "following_url": "https://api.github.com/users/luojia65/following{/other_user}", "gists_url": "https://api.github.com/users/luojia65/gists{/gist_id}", "starred_url": "https://api.github.com/users/luojia65/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luojia65/subscriptions", "organizations_url": "https://api.github.com/users/luojia65/orgs", "repos_url": "https://api.github.com/users/luojia65/repos", "events_url": "https://api.github.com/users/luojia65/events{/privacy}", "received_events_url": "https://api.github.com/users/luojia65/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}, {"id": 1210355734, "node_id": "MDU6TGFiZWwxMjEwMzU1NzM0", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-riscv", "name": "O-riscv", "color": "6e6ec0", "default": false, "description": "Target: RISC-V architecture"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-04-14T07:30:20Z", "updated_at": "2023-04-26T03:52:15Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There's a usage sceneario in Rust for embedded rom bootloader. Some chips use eGON.BT0 format on boot, it has one jump instruction on head and the following should be boot tables.\r\n\r\n| Bit index | Content |\r\n|:--|:--|\r\n| 0..4 | an instruction `j main` |\r\n| 5..12 | bootloader magic |\r\n| 12.. | _following boot configurations_ |\r\n\r\nIt's ideal to write this instruction `j main` using Rust naked function as follows, in this way we do not require further tools to help with filling this instruction.\r\n\r\n```rust\r\n#[naked]\r\n#[link_section = \".head.text\"]\r\n#[export_name = \"head_jump\"]\r\npub unsafe extern \"C\" fn head_jump() {\r\n    asm!(\"j {}\", sym main, options(noreturn))\r\n}\r\n```\r\n\r\nThe `options(noreturn)` is required in current naked function or it won't compile. I expect this function to generate one instruction `j main` only, however it generates an `unimp` which is unexpected:\r\n\r\n```assembly\r\nDisassembly of section .head.text:\r\n\r\n0000000000000000 <head_jump>:\r\n       0: 6f 00 60 02   j       0x26 <_ZN18test_d1_flash_bare4main17h5fd8eeda800e7085E>\r\n       4: 00 00         unimp\r\n\r\nDisassembly of section .text:\r\n\r\n...\r\n```\r\n\r\nI didn't expect this `unimp` instruction, for it will overlap bootloader magic, making this Rust image not bootable. What should I do?\r\n\r\nI looked into [RFC 2972](https://github.com/rust-lang/rfcs/blob/master/text/2972-constrained-naked.md#naked-function-definition), in section Naked Function Definition it shows: \r\n\r\n> 5. emit no additional instructions to the function body before the asm!() statement.\r\n\r\nShould we expect that there would be additional instructions after what we have in `asm!` macro?\r\n\r\nNote: I try to remove the `option(noreturn)`, it shows following compile error:\r\n\r\n```\r\n   Compiling test-d1-flash-bare v0.1.0 (D:\\RustSBI\\test-d1-flash-bare)\r\nerror[E0787]: asm in naked functions must use `noreturn` option\r\n  --> src\\main.rs:17:5\r\n   |\r\n17 |     asm!(\"j {}\", sym start)\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\nhelp: consider specifying that the asm block is responsible for returning from the function\r\n   |\r\n17 |     asm!(\"j {}\", sym start, options(noreturn))\r\n   |                           +++++++++++++++++++\r\n\r\nFor more information about this error, try `rustc --explain E0787`.\r\nerror: could not compile `test-d1-flash-bare` due to previous error\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96037/timeline", "performed_via_github_app": null, "state_reason": null}