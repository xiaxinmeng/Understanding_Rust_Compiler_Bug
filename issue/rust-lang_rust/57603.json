{"url": "https://api.github.com/repos/rust-lang/rust/issues/57603", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57603/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57603/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57603/events", "html_url": "https://github.com/rust-lang/rust/issues/57603", "id": 398996952, "node_id": "MDU6SXNzdWUzOTg5OTY5NTI=", "number": 57603, "title": "Consider whether repeated macro matchers need separator disambiguation for futureproofing", "user": {"login": "alercah", "id": 20842325, "node_id": "MDQ6VXNlcjIwODQyMzI1", "avatar_url": "https://avatars.githubusercontent.com/u/20842325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alercah", "html_url": "https://github.com/alercah", "followers_url": "https://api.github.com/users/alercah/followers", "following_url": "https://api.github.com/users/alercah/following{/other_user}", "gists_url": "https://api.github.com/users/alercah/gists{/gist_id}", "starred_url": "https://api.github.com/users/alercah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alercah/subscriptions", "organizations_url": "https://api.github.com/users/alercah/orgs", "repos_url": "https://api.github.com/users/alercah/repos", "events_url": "https://api.github.com/users/alercah/events{/privacy}", "received_events_url": "https://api.github.com/users/alercah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-14T17:34:45Z", "updated_at": "2019-01-16T08:35:54Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following macro is valid, and can be used:\r\n\r\n```rust\r\nmacro_rules! ex {\r\n    ($($i:expr),* , $($j:ty),*) => { };\r\n}\r\n\r\nfn main() {\r\n    ex!(a, dyn Copy);\r\n}\r\n```\r\n\r\nHowever, if it's invoked in an ambiguous way, such as with `ex!(a, b)`, then it gives an error (no lookahead is performed to `)` to determine an unambiguous parse; examples can be constructed that avoid this unambiguity anyway).\r\n\r\nThus, while the original example compiles now, were `dyn Copy` to become a legal expression at some point in the future, it would become ambiguous. The issue here is that the separator `,` is re-used. In line with other futureproofing efforts like rust-lang/rfcs#550 and #56575, this should possibly be forbidden. The follow-set rule is insufficient to detect these cases as it only exists to allow us to promise in advance where a match is guaranteed to end; it's not sufficient to disambiguate between two potential parses starting from the same point.\r\n\r\nMy first attempt at rules to forbid this are for the situation where we have `... $(tt ...) SEP? OP uu ...`, with `uu ...` possibly empty. In these, `FIRST*` is a variant on `FIRST` from RFC 550: it represents all terminal tokens that could appear in a valid match. Thus, `FIRST*($t:ty)` would be any `can_begin_type` token, plus any token we worry might be legally allowed to begin a type someday, and so on.\r\n\r\n1. If `SEP` is present, we must have we must have `SEP \\not\\in FIRST*(uu ...)`, insisting that the seperator token in repetition will never be ambiguous.\r\n2. When `OP` is not `+`, we must have`FIRST*(tt ...)` and `FIRST*(uu ...)` be disjoint, insisting that the question of whether we're repeating at all will not be ambiguous.\r\n\r\nFor unseparated Kleene repeats, the second rule above, combined with the follow-set rule, are sufficient to disambiguate.\r\n\r\nI have no idea how frequently these potential ambiguities arise in practice. It might be a lot, it might be a little. I expect that the first rule, for separators, might be safe to add because most macros that would risk running into them cannot be invoked except with an empty repetition due to existing ambiguity (the first macro can be invoked as `ex!(,a)`, for instance, with an empty repetition for `$i` eliminating the ambiguity) and therefore could likely mostly be removed. The second rule, however, might be more commonly violated.\r\n\r\ncc @estebank @alexreg ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57603/timeline", "performed_via_github_app": null, "state_reason": null}