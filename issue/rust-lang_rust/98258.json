{"url": "https://api.github.com/repos/rust-lang/rust/issues/98258", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98258/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98258/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98258/events", "html_url": "https://github.com/rust-lang/rust/issues/98258", "id": 1276134993, "node_id": "I_kwDOAAsO6M5MEEZR", "number": 98258, "title": "Improve bounds check for function that always return in-bounds index", "user": {"login": "Pzixel", "id": 11201122, "node_id": "MDQ6VXNlcjExMjAxMTIy", "avatar_url": "https://avatars.githubusercontent.com/u/11201122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pzixel", "html_url": "https://github.com/Pzixel", "followers_url": "https://api.github.com/users/Pzixel/followers", "following_url": "https://api.github.com/users/Pzixel/following{/other_user}", "gists_url": "https://api.github.com/users/Pzixel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pzixel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pzixel/subscriptions", "organizations_url": "https://api.github.com/users/Pzixel/orgs", "repos_url": "https://api.github.com/users/Pzixel/repos", "events_url": "https://api.github.com/users/Pzixel/events{/privacy}", "received_events_url": "https://api.github.com/users/Pzixel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2022-06-19T18:27:08Z", "updated_at": "2023-04-05T17:33:51Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Consider following function:\r\n\r\n```rust\r\npub fn foo(mut a: Vec<u64>) -> Vec<u64> {\r\n    let val = 15;\r\n    if let Err(idx) = a.binary_search(&val) {\r\n        a.insert(idx, val);\r\n    }\r\n    a\r\n}\r\n```\r\nOn current rust 1.61.0 you can expect following output:\r\n\r\n```\r\n...\r\n.LBB3_12:\r\n        mov     rdi, rbx\r\n        mov     rsi, r12\r\n        call    qword ptr [rip + alloc::vec::Vec<T,A>::insert::assert_failed@GOTPCREL]\r\n        ud2\r\n...\r\n```\r\n\r\nIt would be nice to have some attribute or other way of saying that binary search is always returning a valid insert index and bounds check should be eliminated. You can get an expected output in current rustc versions via:\r\n\r\n```rust\r\npub fn foo(mut a: Vec<u64>) -> Vec<u64> {\r\n    let val = 15;\r\n    if let Err(idx) = a.binary_search(&val) {\r\n        if idx > a.len() {\r\n            unsafe { std::hint::unreachable_unchecked() };\r\n        }\r\n        a.insert(idx, val);\r\n    }\r\n    a\r\n}\r\n```\r\n\r\nSince performing a search and then inserting [is one of main `binary_search` use cases](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.binary_search) it might be worthwhile to implement such an optimization.\r\n[See godbolt link](https://rust.godbolt.org/z/zMK4q8qrd) for a whole example\r\n", "closed_by": {"login": "Pzixel", "id": 11201122, "node_id": "MDQ6VXNlcjExMjAxMTIy", "avatar_url": "https://avatars.githubusercontent.com/u/11201122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pzixel", "html_url": "https://github.com/Pzixel", "followers_url": "https://api.github.com/users/Pzixel/followers", "following_url": "https://api.github.com/users/Pzixel/following{/other_user}", "gists_url": "https://api.github.com/users/Pzixel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pzixel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pzixel/subscriptions", "organizations_url": "https://api.github.com/users/Pzixel/orgs", "repos_url": "https://api.github.com/users/Pzixel/repos", "events_url": "https://api.github.com/users/Pzixel/events{/privacy}", "received_events_url": "https://api.github.com/users/Pzixel/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98258/timeline", "performed_via_github_app": null, "state_reason": "reopened"}