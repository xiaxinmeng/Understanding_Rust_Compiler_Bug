{"url": "https://api.github.com/repos/rust-lang/rust/issues/76410", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76410/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76410/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76410/events", "html_url": "https://github.com/rust-lang/rust/issues/76410", "id": 694393241, "node_id": "MDU6SXNzdWU2OTQzOTMyNDE=", "number": 76410, "title": "Nested impl Trait for higher-order functions", "user": {"login": "nwtgck", "id": 10933561, "node_id": "MDQ6VXNlcjEwOTMzNTYx", "avatar_url": "https://avatars.githubusercontent.com/u/10933561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwtgck", "html_url": "https://github.com/nwtgck", "followers_url": "https://api.github.com/users/nwtgck/followers", "following_url": "https://api.github.com/users/nwtgck/following{/other_user}", "gists_url": "https://api.github.com/users/nwtgck/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwtgck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwtgck/subscriptions", "organizations_url": "https://api.github.com/users/nwtgck/orgs", "repos_url": "https://api.github.com/users/nwtgck/repos", "events_url": "https://api.github.com/users/nwtgck/events{/privacy}", "received_events_url": "https://api.github.com/users/nwtgck/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-09-06T14:04:34Z", "updated_at": "2020-09-06T22:55:59Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nIt will be nice to use impl Trait with higher-order functions like the following. But it occurs a compile error at `impl Iterator<Item=u32>`.\r\n\r\n```rust\r\nfn f1<F: FnMut(u32) -> u32>(a: u32) -> impl FnOnce(F) -> impl Iterator<Item=u32> /* <- compile error! */ {\r\n    move |f: F| {\r\n        (0..a).map(f)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let iter = f1(10)(|b| b * 2);\r\n    for x in iter {\r\n        println!(\"{:}\", x);\r\n    }\r\n}\r\n```\r\n\r\nNested impl Trait: <https://doc.rust-lang.org/error-index.html#E0666>\r\n\r\n\r\n## expected behavior/work around\r\n\r\nHere is an expected behavior and a work around. We need to write the type explicitly like `std::iter::Map<std::ops::Range<u32>, F>` instead of `impl Iterator<Item=u32>`.\r\n\r\n```rust\r\nfn f1_with_explicit_type<F: FnMut(u32) -> u32>(a: u32) -> impl FnOnce(F) -> std::iter::Map<std::ops::Range<u32>, F> {\r\n    move |f: F| {\r\n        (0..a).map(f)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let iter = f1_with_explicit_type(10)(|b| b * 2);\r\n    for x in iter {\r\n        println!(\"{:}\", x);\r\n    }\r\n}\r\n```\r\n\r\n[Rust Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20f1_with_explicit_type%3CF%3A%20FnMut(u32)%20-%3E%20u32%3E(a%3A%20u32)%20-%3E%20impl%20FnOnce(F)%20-%3E%20std%3A%3Aiter%3A%3AMap%3Cstd%3A%3Aops%3A%3ARange%3Cu32%3E%2C%20F%3E%20%7B%0A%20%20%20%20move%20%7Cf%3A%20F%7C%20%7B%0A%20%20%20%20%20%20%20%20(0..a).map(f)%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20iter%20%3D%20f1_with_explicit_type(10)(%7Cb%7C%20b%20*%202)%3B%0A%20%20%20%20for%20x%20in%20iter%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%3A%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%7D%0A)\r\n\r\nThe output should be the following.\r\n\r\n```\r\n0\r\n2\r\n4\r\n6\r\n8\r\n10\r\n12\r\n14\r\n16\r\n18\r\n```\r\n\r\nIt will be harder to write and read the return type when we append other methods after the `.map(f)`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76410/timeline", "performed_via_github_app": null, "state_reason": null}