{"url": "https://api.github.com/repos/rust-lang/rust/issues/74640", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74640/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74640/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74640/events", "html_url": "https://github.com/rust-lang/rust/issues/74640", "id": 663872850, "node_id": "MDU6SXNzdWU2NjM4NzI4NTA=", "number": 74640, "title": "macOS x86_64 requires frame pointers to unwind functions with huge stack frames", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 123111, "node_id": "MDU6TGFiZWwxMjMxMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-macos", "name": "O-macos", "color": "6e6ec0", "default": false, "description": "Operating system: macOS"}, {"id": 55302148, "node_id": "MDU6TGFiZWw1NTMwMjE0OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86_64", "name": "O-x86_64", "color": "6e6ec0", "default": false, "description": "Target: x64 processors"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-22T15:58:47Z", "updated_at": "2023-04-05T17:36:11Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "[Upstream LLVM bug](https://bugs.llvm.org/show_bug.cgi?id=46813)\r\n\r\nCurrently macOS x86_64 forcibly has frame pointers enabled, but this is an unfortunate performance loss relative to other platforms. There's no fundamental need to use frame pointers on macOS and it'd be a nice perf boost if we could stop requiring them. https://github.com/rust-lang/rust/pull/74575 was a recent attempt to disable frame pointers on macOS but it ran into a lot of segfaults in the compiler. Some debugging showed that this program will also segfault:\r\n\r\n```rust\r\nfn main() {\r\n    let _huge_stack = [0u64; 1024];\r\n    panic!(\"x\");\r\n}\r\n```\r\n\r\nrun with:\r\n\r\n```sh\r\n$ rustc main.rs -C force-frame-pointers=no\r\n$ ./main\r\nthread 'main' panicked at 'x', main.rs:3:5\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\nzsh: segmentation fault  ./main\r\n```\r\n\r\nThe issue appears to be with how the unwind information for the `main` function is encoded. macOS uses \"compact unwind information\" which basically means \"not dwarf\". I believe that this is an LLVM bug where the compact unwind information for `main` is incorrect when stack probes are also used. The `main` function requires a stack probe, and its unwind information is encoded in the `UNWIND_X86_64_MODE_STACK_IND` mode which is [documented as](https://gist.github.com/alexcrichton/42a2d7bc175d408a2a9682629425f7ef):\r\n\r\n```\r\n// UNWIND_X86_64_MODE_STACK_IND:\r\n//    A \"frameless\" (RBP not used as frame pointer) function large constant \r\n//    stack size.  This case is like the previous, except the stack size is too\r\n//    large to encode in the compact unwind encoding.  Instead it requires that \r\n//    the function contains \"subq $nnnnnnnn,RSP\" in its prolog.  The compact \r\n//    encoding contains the offset to the nnnnnnnn value in the function in\r\n//    UNWIND_X86_64_FRAMELESS_STACK_SIZE.  \r\n```\r\n\r\nThat all matches the description of `main` (doesn't use RBP, big stack that it probably can't fit in an otherwise compact encoding), but the `main` function doesn't have a subtraction to set the stack pointer. Instead the main function calls `__rust_probestack` and then executes `subq $rax, $rsp` where `$rax` has the stack size.\r\n\r\nBasically I think this boils down to the unwind information generated by LLVM being incorrect for functions which trigger usage of `__rust_probestack` (stack probe guards). I don't think there's much we can do to fix this in rust-lang/rust but I wanted to file an issue to track this.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74640/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 3, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74640/timeline", "performed_via_github_app": null, "state_reason": null}