{"url": "https://api.github.com/repos/rust-lang/rust/issues/51509", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51509/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51509/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51509/events", "html_url": "https://github.com/rust-lang/rust/issues/51509", "id": 331335454, "node_id": "MDU6SXNzdWUzMzEzMzU0NTQ=", "number": 51509, "title": "Implementing `Alloc` for mutable references to `Alloc`", "user": {"login": "negamartin", "id": 7827085, "node_id": "MDQ6VXNlcjc4MjcwODU=", "avatar_url": "https://avatars.githubusercontent.com/u/7827085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/negamartin", "html_url": "https://github.com/negamartin", "followers_url": "https://api.github.com/users/negamartin/followers", "following_url": "https://api.github.com/users/negamartin/following{/other_user}", "gists_url": "https://api.github.com/users/negamartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/negamartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/negamartin/subscriptions", "organizations_url": "https://api.github.com/users/negamartin/orgs", "repos_url": "https://api.github.com/users/negamartin/repos", "events_url": "https://api.github.com/users/negamartin/events{/privacy}", "received_events_url": "https://api.github.com/users/negamartin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-11T20:21:02Z", "updated_at": "2019-01-11T00:50:53Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I don't see why this shouldn't be implemented. It certainly proves useful when working with generic allocators, without requiring a `Copy` bound on them. For example:\r\n\r\n    struct AllocWithInternalMutability {\r\n      ...\r\n    }\r\n    \r\n    impl<'a> Alloc for &'a AllocWithInternalMutability { ... }\r\n    \r\n    impl AllocWithInternalMutability {\r\n      fn use_self(&self) {\r\n        //Ugly code\r\n        let mut ref_to_self=self;\r\n        use_alloc(&mut ref_to_self);\r\n      }\r\n    }\r\n    \r\n    fn use_alloc<A: Alloc>(a: &mut A) {\r\n      //Multiple usages of `A` in here\r\n      a.alloc(...);\r\n      a.dealloc(...);\r\n    }\r\n\r\nWhile having an `impl<A: Alloc> Alloc for &mut A` generic implementation would allow for this instead:\r\n\r\n    impl AllocWithInternalMutability {\r\n      fn use_self(&self) {\r\n        //Much cleaner\r\n        use_alloc(self);\r\n      }\r\n    }\r\n    \r\n    fn use_alloc<A: Alloc>(mut a: A) {\r\n      //Multiple usages of `A` in here, thanks to `&mut A` also implementing `Alloc`\r\n      a.alloc(...);\r\n      a.dealloc(...);\r\n    }\r\n\r\nThe other current option is to require `Copy` on `A`, allowing for multiple uses of `A` without losing ownership.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51509/timeline", "performed_via_github_app": null, "state_reason": null}