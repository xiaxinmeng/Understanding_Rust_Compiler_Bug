{"url": "https://api.github.com/repos/rust-lang/rust/issues/69930", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69930/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69930/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69930/events", "html_url": "https://github.com/rust-lang/rust/issues/69930", "id": 579441950, "node_id": "MDU6SXNzdWU1Nzk0NDE5NTA=", "number": 69930, "title": "Force ADT to be matched exhaustively (opposite of `#[non_exhaustive]`)", "user": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 1976249438, "node_id": "MDU6TGFiZWwxOTc2MjQ5NDM4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-exhaustiveness-checking", "name": "A-exhaustiveness-checking", "color": "f7e101", "default": false, "description": "Relating to exhaustiveness / usefulness checking of patterns"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-11T17:50:20Z", "updated_at": "2020-05-22T23:02:11Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The `#[non_exhaustive]` attribute prevents exhaustively matching an enum outside of the defining crate. However, it's sometimes useful to have the opposite of this behavior - that is, prevent *non*-exhaustively matching an enum *within* the defining crate.\r\n\r\nFor example, non-exhaustively matching on `DefPathData` or `TyKind` is often the wrong choice. By writing an exhaustive match (explicitly mentioning all variants), any additions/removals from the enum will require explicit acknowledgment at the match site, helping to prevent bugs.\r\n\r\nExamples from `rustc`:\r\n\r\nhttps://github.com/rust-lang/rust/blob/c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be/src/librustc_mir/dataflow/impls/storage_liveness.rs#L133-L140\r\n\r\nhttps://github.com/rust-lang/rust/blob/c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be/src/librustc_hir/intravisit.rs#L939-L940\r\n\r\nhttps://github.com/rust-lang/rust/blob/c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be/src/librustc_hir/intravisit.rs#L948-L958\r\n\r\nIt would be useful to have a compiler lint to enforce this programmatically.\r\n\r\nAs an initial implementation, we could add an unstable attribute `#[rustc_exhaustive]` and an internal lint `EXHAUSTIVE_MATCH`. This lint fires on any non-exhaustive `match` or destructuring `let` expression (not `if let`/`while let` for single enum variants) that match on an ADT annotated with `#[rustc_exhaustive]`. Since this would be a lint, it could be allowed on a case-by-case basis (e.g. performing an early exit on `TyKind::Error` or `TyKind::Infer`).\r\n\r\nIf this proves useful, it could be made available to all Rust programs after an RFC.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69930/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69930/timeline", "performed_via_github_app": null, "state_reason": null}