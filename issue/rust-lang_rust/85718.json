{"url": "https://api.github.com/repos/rust-lang/rust/issues/85718", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85718/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85718/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85718/events", "html_url": "https://github.com/rust-lang/rust/issues/85718", "id": 902167815, "node_id": "MDU6SXNzdWU5MDIxNjc4MTU=", "number": 85718, "title": "Inconsistent coverage reports with files with 0% coverage", "user": {"login": "Adam-Gleave", "id": 22496597, "node_id": "MDQ6VXNlcjIyNDk2NTk3", "avatar_url": "https://avatars.githubusercontent.com/u/22496597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Adam-Gleave", "html_url": "https://github.com/Adam-Gleave", "followers_url": "https://api.github.com/users/Adam-Gleave/followers", "following_url": "https://api.github.com/users/Adam-Gleave/following{/other_user}", "gists_url": "https://api.github.com/users/Adam-Gleave/gists{/gist_id}", "starred_url": "https://api.github.com/users/Adam-Gleave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Adam-Gleave/subscriptions", "organizations_url": "https://api.github.com/users/Adam-Gleave/orgs", "repos_url": "https://api.github.com/users/Adam-Gleave/repos", "events_url": "https://api.github.com/users/Adam-Gleave/events{/privacy}", "received_events_url": "https://api.github.com/users/Adam-Gleave/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2483744621, "node_id": "MDU6TGFiZWwyNDgzNzQ0NjIx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-code-coverage", "name": "A-code-coverage", "color": "f7e101", "default": false, "description": "Area: Source-based code coverage (-Cinstrument-coverage)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-05-26T10:28:53Z", "updated_at": "2022-01-14T06:29:21Z", "closed_at": "2022-01-14T06:29:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nWhen generating test coverage for a module that is placed behind a feature gate, the source file is omitted from the coverage report unless at least one function has been used in a test. This seems strange, since files that are not behind features are included with 0% test coverage.\r\n\r\nCoverage is generated using the steps in the [source-based coverage guide](https://rustc-dev-guide.rust-lang.org/llvm-coverage-instrumentation.html), including passing `--all-features` to `cargo test` and `cargo cov` (although I'm unsure if the latter is necessary).\r\n\r\nFor example, we have an `io` feature in our codebase. This feature enables the use of the `io` module:\r\n```rust\r\n#[cfg(feature = \"io\")]\r\nmod io;\r\n```\r\n\r\nIf we try and generate a coverage report without making use of anything in this module, but with `--all-features` enabled, the source file is not included:\r\n\r\n```console\r\ngenhtml coverage/coverage.info --legend --title=\"Coverage\" --output-directory=coverage\r\nProcessing file src/lib.rs\r\nProcessing file ...\r\n\r\n# `io.rs` is not processed\r\n```\r\n\r\nWhen we add a test function that uses some element of the `io` module, it gets included:\r\n```console\r\ngenhtml coverage/coverage.info --legend --title=\"Coverage\" --output-directory=coverage\r\nProcessing file src/lib.rs\r\nProcessing file ...\r\nProcessing file src/io.rs\r\n```\r\n\r\nBut this is now counted as 100% coverage, although only a couple of lines of code are utilised in the test.\r\n\r\nThis seems very strange, since we have another file (`error.rs`) that is not behind any features, and always shows up in coverage results, even though coverage of this file is 0%.\r\n\r\nAlso, if the `#[cfg(feature = \"io\")]` directive before the module include is removed, the problem still persists. It seems very inconsistent, and I'm not quite sure why this is all happening!\r\n\r\nUsing `rustc` v1.52.1, on the nightly channel.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85718/timeline", "performed_via_github_app": null, "state_reason": "completed"}