{"url": "https://api.github.com/repos/rust-lang/rust/issues/73218", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73218/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73218/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73218/events", "html_url": "https://github.com/rust-lang/rust/issues/73218", "id": 636404577, "node_id": "MDU6SXNzdWU2MzY0MDQ1Nzc=", "number": 73218, "title": "Sibling call optimisation guarantee?", "user": {"login": "dancojocaru2000", "id": 9626761, "node_id": "MDQ6VXNlcjk2MjY3NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/9626761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dancojocaru2000", "html_url": "https://github.com/dancojocaru2000", "followers_url": "https://api.github.com/users/dancojocaru2000/followers", "following_url": "https://api.github.com/users/dancojocaru2000/following{/other_user}", "gists_url": "https://api.github.com/users/dancojocaru2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/dancojocaru2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dancojocaru2000/subscriptions", "organizations_url": "https://api.github.com/users/dancojocaru2000/orgs", "repos_url": "https://api.github.com/users/dancojocaru2000/repos", "events_url": "https://api.github.com/users/dancojocaru2000/events{/privacy}", "received_events_url": "https://api.github.com/users/dancojocaru2000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-10T16:54:50Z", "updated_at": "2020-06-10T16:59:48Z", "closed_at": "2020-06-10T16:59:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I looked around a bit but I didn't find any documentation about Rust's optimisation of sibling calls.\r\n\r\nIs it guaranteed? If yes, when?\r\n\r\nI think I've heard somewhere that sibling call optimisation is guarantee when there are no destructors to be called.\r\n\r\nIf that's the case, I would like to propose an exception (assuming it's not already implemented).\r\n\r\nWhen calling by value (moving), we can have a guarantee that the variables not part of the call will not be used, so we can destruct them early.\r\n\r\n```rust\r\nfn is_even(x: i32) -> bool {\r\n    let y = StructWithDestructorThatWeAssumeIsUsed;\r\n    return if x == 0 {\r\n        true\r\n    }\r\n    else {\r\n        is_odd(x - 1)\r\n    }\r\n}\r\n\r\n\r\nfn is_odd(x: i32) -> bool {\r\n    return if x == 0 {\r\n        false\r\n    }\r\n    else {\r\n        is_even(x - 1)\r\n    }\r\n}\r\n```\r\n\r\nFor example, for the code above, even if we use `y` in `is_even`, since we don't pass it to `is_odd`, we can safely destroy it before `is_odd` is called. Therefore, it could act as if we write the `is_even` function like so:\r\n\r\n```rust\r\nfn is_even(x: i32) -> bool {\r\n    let y = StructWithDestructorThatWeAssumeIsUsed;\r\n    return if x == 0 {\r\n        y.drop();\r\n        true\r\n    }\r\n    else {\r\n        y.drop();\r\n        is_odd(x - 1)\r\n    }\r\n}\r\n```\r\n\r\nThat way, on sibling calls where no references from inside the function itself are passed as argument to recursive calls, optimisation can be guaranteed.", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73218/timeline", "performed_via_github_app": null, "state_reason": "completed"}