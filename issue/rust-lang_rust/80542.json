{"url": "https://api.github.com/repos/rust-lang/rust/issues/80542", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80542/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80542/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80542/events", "html_url": "https://github.com/rust-lang/rust/issues/80542", "id": 776702692, "node_id": "MDU6SXNzdWU3NzY3MDI2OTI=", "number": 80542, "title": "Operator impl causes compilation error for an expression involving the operator with a different pair of types", "user": {"login": "jturner314", "id": 1836850, "node_id": "MDQ6VXNlcjE4MzY4NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1836850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jturner314", "html_url": "https://github.com/jturner314", "followers_url": "https://api.github.com/users/jturner314/followers", "following_url": "https://api.github.com/users/jturner314/following{/other_user}", "gists_url": "https://api.github.com/users/jturner314/gists{/gist_id}", "starred_url": "https://api.github.com/users/jturner314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jturner314/subscriptions", "organizations_url": "https://api.github.com/users/jturner314/orgs", "repos_url": "https://api.github.com/users/jturner314/repos", "events_url": "https://api.github.com/users/jturner314/events{/privacy}", "received_events_url": "https://api.github.com/users/jturner314/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-12-31T01:14:48Z", "updated_at": "2020-12-31T03:52:59Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The existence of an implementation for `Add<Container<A>> for X where X: Add<A>` causes a compiler error under certain circumstances for expressions of the form `X + X`. Here's an example:\r\n\r\n```rust\r\nuse std::ops::Add;\r\n\r\npub struct Container<T>(Vec<T>);\r\n\r\nimpl<A, B> Add<Container<A>> for f32\r\nwhere\r\n    f32: Add<A, Output = B>,\r\n{\r\n    type Output = B;\r\n    fn add(self, _rhs: Container<A>) -> B {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nfn doesnt_compile<'a, V>(a: V) -> f32\r\nwhere\r\n    V: Into<Container<&'a f32>>,\r\n{\r\n    let a: Container<&'a f32> = a.into();\r\n    0f32 + 1f32\r\n}\r\n```\r\n\r\n([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=29c9a7a05f3becc08931d5761a4a4fb5))\r\n\r\nI expected this to compile without errors. Instead, I receive the following error message (abbreviated below):\r\n\r\n```\r\nerror[E0275]: overflow evaluating the requirement `f32: Add<Container<_>>`\r\n  --> src/main.rs:20:10\r\n   |\r\n20 |     0f32 + 1f32\r\n   |          ^\r\n   |\r\n   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`playground`)\r\n   = note: required because of the requirements on the impl of `Add<Container<Container<_>>>` for `f32`\r\n   = note: required because of the requirements on the impl of `Add<Container<Container<Container<_>>>>` for `f32`\r\n   = note: required because of the requirements on the impl of `Add<Container<Container<Container<Container<_>>>>>` for `f32`\r\n   = note: required because of the requirements on the impl of `Add<Container<Container<Container<Container<Container<_>>>>>>` for `f32`\r\n   = note: required because of the requirements on the impl of `Add<Container<Container<Container<Container<Container<Container<_>>>>>>>` for `f32`\r\n...\r\n```\r\n\r\nObserve that even though the addition is between two `f32` literals, the error message indicates that the compiler is trying to apply the impl involving `Container`.\r\n\r\nNote that it still fails to compile if I replace `f32` with a custom struct.\r\n\r\nTo help diagnose the issue, it's helpful to note that replacing the `doesnt_compile` function with any of the following similar functions causes the example to compile without errors:\r\n\r\n```rust\r\nfn compiles1<'a, V>(a: V) -> f32\r\nwhere\r\n    V: Into<Container<&'a f32>>,\r\n{\r\n    let a: Container<&'a f32> = a.into();\r\n    1f32\r\n}\r\n\r\nfn compiles2<'a>(a: Container<&'a f32>) -> f32 {\r\n    0f32 + 1f32\r\n}\r\n\r\nfn compiles3<V>(a: V) -> f32\r\nwhere\r\n    V: Into<Container<f32>>,\r\n{\r\n    let a: Container<f32> = a.into();\r\n    0f32 + 1f32\r\n}\r\n```\r\n\r\nWe first observed the issue in a more complicated case in the `ndarray` crate. ([See the discussion here.](https://github.com/rust-ndarray/ndarray/pull/782#pullrequestreview-559666435)) This bug report is a simplified example. Edit: Interestingly, in the more complicated case, we observed differing error messages between different platforms.\r\n\r\n### Meta\r\n\r\nStable (1.48.0), Beta (1.50.0-beta.1, 2020-12-29), and Nightly (1.51.0-nightly, 2020-12-29) all produce a compilation error (tested with the Rust Playground).\r\n\r\nOn my machine, `rustc --version --verbose`:\r\n```\r\nrustc 1.48.0 (7eac88abb 2020-11-16)\r\nbinary: rustc\r\ncommit-hash: 7eac88abb2e57e752f3302f02be5f3ce3d7adfb4\r\ncommit-date: 2020-11-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.48.0\r\nLLVM version: 11.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80542/timeline", "performed_via_github_app": null, "state_reason": null}