{"url": "https://api.github.com/repos/rust-lang/rust/issues/75755", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75755/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75755/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75755/events", "html_url": "https://github.com/rust-lang/rust/issues/75755", "id": 683155778, "node_id": "MDU6SXNzdWU2ODMxNTU3Nzg=", "number": 75755, "title": "Option::Some becomes Option::None + Illegal instruction error in some cases.", "user": {"login": "akanawati", "id": 1786297, "node_id": "MDQ6VXNlcjE3ODYyOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1786297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akanawati", "html_url": "https://github.com/akanawati", "followers_url": "https://api.github.com/users/akanawati/followers", "following_url": "https://api.github.com/users/akanawati/following{/other_user}", "gists_url": "https://api.github.com/users/akanawati/gists{/gist_id}", "starred_url": "https://api.github.com/users/akanawati/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akanawati/subscriptions", "organizations_url": "https://api.github.com/users/akanawati/orgs", "repos_url": "https://api.github.com/users/akanawati/repos", "events_url": "https://api.github.com/users/akanawati/events{/privacy}", "received_events_url": "https://api.github.com/users/akanawati/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-20T23:30:58Z", "updated_at": "2020-08-24T16:20:40Z", "closed_at": "2020-08-21T06:18:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "What was I doing?\r\n- I have an implementation of an aligned buffer as a `Vec<Aligned>`, where `Aligned` wraps an array of `u8`.  We use `std::slice::from_raw_parts` and the address of the first character inside the first `Aligned` instance to build a `&[u8]` or `&mut [u8]`.\r\n- For the zero-capacity case, we use the null pointer and 0 with `from_raw_parts`\r\n- The behavior is the same with stable and nightly.\r\n\r\nUnusual behavior:\r\n- In a case where I was expecting `Some((u64, &[u8]))`, I found `None`, when the slice (empty) was null-pointer based.\r\n- The value of the number did not matter, zero or non-zero.\r\n- Using `&str` instead of `u64` produced the expected values.\r\n- Simplified repro crashes in `release` mode. \r\n\r\nConfig, MacOs Mojave (repro); original situation is Ubuntu 20.04\r\n```\r\n$ cargo +nightly --version; cargo --version\r\ncargo 1.47.0-nightly (ab32ee88d 2020-08-10)\r\ncargo 1.45.1 (f242df6ed 2020-07-22)\r\n```\r\n\r\n```rust\r\nuse std::collections::HashMap;\r\n\r\n#[repr(C, align(16))]\r\n#[derive(Clone)]\r\npub struct BufPart {\r\n    inner: [u8; 16]\r\n}\r\n#[derive(Clone)]\r\npub struct FunnyBuf {\r\n    buf: Vec<BufPart>,\r\n}\r\n\r\nimpl FunnyBuf {\r\n    pub fn with_capacity(bytes: usize) -> Self {\r\n        let parts = (bytes + 15) / 16;\r\n        let mut rv = Self {\r\n            buf: Vec::with_capacity(parts),\r\n        };\r\n\r\n        unsafe { rv.buf.set_len(rv.buf.capacity()) };\r\n        rv\r\n    }\r\n\r\n    pub fn capacity(&self) -> usize {\r\n        self.buf.capacity() * 16\r\n    }\r\n\r\n    fn get_num_slice(&self) -> Option<(u32, &[u8])> {\r\n        let s = self.as_ref();\r\n        Some((1, &s[0..0]))\r\n    }\r\n\r\n    fn get_str_slice(&self) -> Option<(&'static str, &[u8])> {\r\n        let s = self.as_ref();\r\n        Some((\"--\", &s[0..0]))\r\n    }\r\n}\r\n\r\nimpl std::convert::AsRef<[u8]> for FunnyBuf {\r\n    fn as_ref(&self) -> &[u8] {\r\n        unsafe {\r\n            if self.buf.is_empty() {\r\n                std::slice::from_raw_parts(std::ptr::null(), 0)\r\n            } else {\r\n                std::slice::from_raw_parts(&self.buf[0].inner[0] as *const u8,\r\n                self.capacity() * 16)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut h = HashMap::new();\r\n    h.insert(0, (2, FunnyBuf::with_capacity(0)));\r\n    h.insert(1, (2, FunnyBuf::with_capacity(1)));\r\n\r\n    // access the slice\r\n    println!(\"hashmap.get().map(...); Expecting Some((777, []))\");\r\n    for i in 0..2 {\r\n        let r = h.get(&i)\r\n            .map(|(_j, b)| (777, &b.as_ref()[0..0]));\r\n        println!(\"    i={}, r={:?}\", i, r);\r\n    }\r\n\r\n    println!(\"hashmap.get().map(...); Expecting Some((\\\"--\\\", []))\");\r\n    for i in 0..2 {\r\n        let r = h.get(&i)\r\n            .map(|(_j, b)| (\"--\", &b.as_ref()[0..0]));\r\n        println!(\"    i={}, r={:?}\", i, r);\r\n    }\r\n\r\n    let v = FunnyBuf::with_capacity(0);\r\n    let w = FunnyBuf::with_capacity(1);\r\n\r\n    eprintln!(\"Some((str, slice)): Expecting Some((\\\"--\\\", []))\");\r\n    let ws = w.get_str_slice();\r\n    eprintln!(\"    {:?}\", ws);\r\n    let vs = v.get_str_slice();\r\n    eprintln!(\"    {:?}\", vs);\r\n\r\n\r\n    eprintln!(\"Some((num, slice)): Expecting Some((1, []))\");\r\n    let ws = w.get_num_slice();\r\n    eprintln!(\"    {:?}\", ws);\r\n    let vs = v.get_num_slice();\r\n    eprintln!(\"    {:?}\", vs);\r\n}\r\n```\r\n\r\nI expected to see this happen:  I expected to see `Some(...)` for every result.\r\n\r\nInstead, this happened: `None` appeared instead of `Some(..)`.  The `release` run gets an illegal instruction.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\n$ rustc --version --verbose\r\nrustc 1.45.2 (d3fb005a3 2020-07-31)\r\nbinary: rustc\r\ncommit-hash: d3fb005a39e62501b8b0b356166e515ae24e2e54\r\ncommit-date: 2020-07-31\r\nhost: x86_64-apple-darwin\r\nrelease: 1.45.2\r\nLLVM version: 10.0\r\n```\r\n\r\n\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\nNo backtrace for the illegal instruction.\r\n\r\n```\r\n$ cat Cargo.toml \r\n[package]\r\nname = \"option_behavior\"\r\nversion = \"0.1.0\"\r\nauthors = [\"000\"]\r\nedition = \"2018\"\r\n\r\n[dependencies]\r\n\r\n[profile.release]\r\ndebug = true\r\n\r\n$ RUST_BACKTRACE=1 cargo run --release\r\n   Compiling option_behavior v0.1.0 (/Users/akanawati/workspace/option_behavior)\r\n    Finished release [optimized + debuginfo] target(s) in 0.59s\r\n     Running `target/release/option_behavior`\r\nhashmap.get().map(...); Expecting Some((777, []))\r\n    i=0, r=None\r\n    i=1, r=Some((777, []))\r\nhashmap.get().map(...); Expecting Some((\"--\", []))\r\n    i=0, r=Some((\"--\", []))\r\n    i=1, r=Some((\"--\", []))\r\nSome((str, slice)): Expecting Some((\"--\", []))\r\n    Some((\"--\", []))\r\nIllegal instruction: 4\r\n\r\n$ RUST_BACKTRACE=1 cargo run \r\n   Compiling option_behavior v0.1.0 (/Users/akanawati/workspace/option_behavior)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.65s\r\n     Running `target/debug/option_behavior`\r\nhashmap.get().map(...); Expecting Some((777, []))\r\n    i=0, r=None\r\n    i=1, r=Some((777, []))\r\nhashmap.get().map(...); Expecting Some((\"--\", []))\r\n    i=0, r=Some((\"--\", []))\r\n    i=1, r=Some((\"--\", []))\r\nSome((str, slice)): Expecting Some((\"--\", []))\r\n    Some((\"--\", []))\r\n    Some((\"--\", []))\r\nSome((num, slice)): Expecting Some((1, []))\r\n    Some((1, []))\r\n    None\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75755/timeline", "performed_via_github_app": null, "state_reason": "completed"}