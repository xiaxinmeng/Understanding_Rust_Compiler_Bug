{"url": "https://api.github.com/repos/rust-lang/rust/issues/14758", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/14758/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/14758/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/14758/events", "html_url": "https://github.com/rust-lang/rust/issues/14758", "id": 35249363, "node_id": "MDU6SXNzdWUzNTI0OTM2Mw==", "number": 14758, "title": "Specify that int and uint are at least 32 bits on every CPU architecture", "user": {"login": "1fish2", "id": 1043120, "node_id": "MDQ6VXNlcjEwNDMxMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/1043120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1fish2", "html_url": "https://github.com/1fish2", "followers_url": "https://api.github.com/users/1fish2/followers", "following_url": "https://api.github.com/users/1fish2/following{/other_user}", "gists_url": "https://api.github.com/users/1fish2/gists{/gist_id}", "starred_url": "https://api.github.com/users/1fish2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1fish2/subscriptions", "organizations_url": "https://api.github.com/users/1fish2/orgs", "repos_url": "https://api.github.com/users/1fish2/repos", "events_url": "https://api.github.com/users/1fish2/events{/privacy}", "received_events_url": "https://api.github.com/users/1fish2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2014-06-08T22:35:15Z", "updated_at": "2014-09-19T04:09:00Z", "closed_at": "2014-09-19T04:08:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Guaranteeing that `int` and `uint` are always at least 32 bits fixes the class of bugs and security holes that worries me most in #9940\n\nScenario:\n- Programmers use `int` and `uint` in library code and sample code explicitly, or by thinking of them as the \"default integer types,\" or via integer type inference. See #6023\n- When reusing that code on a 16-bit embedded processor (e.g. in robotics and IoT devices -- Rust would be very compelling for such applications), it has bugs when `int` and `uint` overflow in 16 bits, which is not difficult.\n\nI encountered this problem when programming in C++ on Palm OS. (It's a 16-bit OS even on devices that used a 32-bit ARM to emulate the 68000.)\n\nOf course there are alternate solutions.\n", "closed_by": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/14758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/14758/timeline", "performed_via_github_app": null, "state_reason": "completed"}