{"url": "https://api.github.com/repos/rust-lang/rust/issues/94163", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94163/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94163/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94163/events", "html_url": "https://github.com/rust-lang/rust/issues/94163", "id": 1144798055, "node_id": "I_kwDOAAsO6M5EPDtn", "number": 94163, "title": "thread 'rustc' panicked at 'called `Option::unwrap()` on a `None` value', /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/compiler/rustc_hir/src/definitions.rs:452:14", "user": {"login": "John-Nagle", "id": 942608, "node_id": "MDQ6VXNlcjk0MjYwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/942608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/John-Nagle", "html_url": "https://github.com/John-Nagle", "followers_url": "https://api.github.com/users/John-Nagle/followers", "following_url": "https://api.github.com/users/John-Nagle/following{/other_user}", "gists_url": "https://api.github.com/users/John-Nagle/gists{/gist_id}", "starred_url": "https://api.github.com/users/John-Nagle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/John-Nagle/subscriptions", "organizations_url": "https://api.github.com/users/John-Nagle/orgs", "repos_url": "https://api.github.com/users/John-Nagle/repos", "events_url": "https://api.github.com/users/John-Nagle/events{/privacy}", "received_events_url": "https://api.github.com/users/John-Nagle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-02-19T17:19:47Z", "updated_at": "2023-02-26T11:02:43Z", "closed_at": "2023-02-26T11:02:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\n\r\nNo minimized error yet. This error occurred when making a small change to a large program. Here are the diffs from a working version:\r\n\r\ndiff --git a/slcommon/src/common/commontypes.rs b/slcommon/src/common/commontypes.rs\r\nindex d19daa8..3f38137 100644\r\n--- a/slcommon/src/common/commontypes.rs\r\n+++ b/slcommon/src/common/commontypes.rs\r\n@@ -1223,8 +1223,12 @@ fn basictypetests() {\r\n //\r\n //  Miscellaneous types\r\n //\r\n+/// Object ID from server.\r\n pub type LocalID = u32; // region-local ID\r\n \r\n+/// Volume LOD. Value 0..3, with 3 the most detailed.\r\n+pub type VolumeLod = u8;\r\n+\r\n #[test]\r\n //  Tests for basic arithmetic.\r\n fn arithmetictests() {\r\ndiff --git a/slcommon/src/volume/decodemeshasset.rs b/slcommon/src/volume/decodemeshasset.rs\r\nindex 2269e56..6a0d0e7 100644\r\n--- a/slcommon/src/volume/decodemeshasset.rs\r\n+++ b/slcommon/src/volume/decodemeshasset.rs\r\n@@ -39,7 +39,7 @@ impl MeshDecoded {\r\n     }\r\n     \r\n     /// Return requested LOD. Includes all meshes.\r\n-    pub fn get_lod(&self, detail: u32) -> Result<MeshLOD, Error> {\r\n+    pub fn get_lod(&self, detail: VolumeLod) -> Result<MeshLOD, Error> {\r\n         //  Names of levels of detail in the mesh LLSD.\r\n         const LODNAMES: [&str; 4] = [\"lowest_lod\", \"low_lod\", \"medium_lod\", \"high_lod\"];\r\n         assert!((detail as usize) < LODNAMES.len());            // bad LOD parameter\r\n@@ -106,7 +106,7 @@ pub struct MeshLOD {\r\n impl MeshLOD {\r\n     /// Get requested level of detail from asset.\r\n     //  Old interface; decodes the entire asset each time.\r\n-    pub fn get_lod(b: &[u8], detail: u32) -> Result<MeshLOD, Error> {\r\n+    pub fn get_lod(b: &[u8], detail: VolumeLod) -> Result<MeshLOD, Error> {\r\n         let mesh_decoded = MeshDecoded::new(b)?;\r\n         mesh_decoded.get_lod(detail)\r\n     }\r\n@@ -543,7 +543,8 @@ fn decodemeshcube1() {\r\n     }\r\n     \r\n     //  Now exercise the real code.\r\n-    let lod3 = MeshLOD::get_lod(&meshbytes, 3).unwrap(); // get an LOD from it\r\n+    let volume_lod: VolumeLod = 3;\r\n+    let lod3 = MeshLOD::get_lod(&meshbytes, volume_lod).unwrap(); // get an LOD from it\r\n     println!(\"LOD 3: {:?}\", lod3); //\r\n }\r\n \r\ndiff --git a/slcommon/src/volume/mod.rs b/slcommon/src/volume/mod.rs\r\nindex 850eefe..58878a1 100644\r\n--- a/slcommon/src/volume/mod.rs\r\n+++ b/slcommon/src/volume/mod.rs\r\n@@ -1,7 +1,7 @@\r\n //\r\n //  SL test viewer\r\n //\r\n-//  viewer/mod.rs\r\n+//  common/volume/mod.rs\r\n //\r\n //  Animats\r\n //  January, 2021\r\n(END)\r\n\r\n\r\n\r\n\r\n<code>\r\n\r\n\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc --version --verbose\r\nrustc 1.57.0 (f1edd0429 2021-11-29)\r\nbinary: rustc\r\ncommit-hash: f1edd0429582dd29cccacaf50fd134b05593bd9c\r\ncommit-date: 2021-11-29\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.57.0\r\nLLVM version: 13.0.0\r\n\r\n```\r\n\r\n### Error output\r\n```\r\n\r\n\r\ncargo build\r\n   Compiling slcommon v0.1.0 (/home/john/projects/sl/SL-test-viewer/slcommon)\r\nthread 'rustc' panicked at 'called `Option::unwrap()` on a `None` value', /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/compiler/rustc_hir/src/definitions.rs:452:14\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/std/src/panicking.rs:517:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/panicking.rs:100:14\r\n   2: core::panicking::panic\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/panicking.rs:50:5\r\n   3: <rustc_query_impl::on_disk_cache::OnDiskCache as rustc_middle::ty::context::OnDiskCache>::def_path_hash_to_def_id\r\n   4: rustc_middle::dep_graph::dep_node::<impl rustc_query_system::dep_graph::dep_node::DepNodeParams<rustc_middle::ty::context::TyCtxt> for rustc_span::def_id::LocalDefId>::recover\r\n   5: rustc_query_impl::query_callbacks::hir_owner::force_from_dep_node\r\n   6: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n   7: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n   8: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n   9: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n  10: rustc_query_system::query::plumbing::ensure_must_run\r\n  11: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::coherent_trait\r\n  12: rustc_session::session::Session::track_errors\r\n  13: rustc_typeck::check_crate\r\n  14: rustc_interface::passes::analysis\r\n  15: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  16: rustc_data_structures::stack::ensure_sufficient_stack\r\n  17: rustc_query_system::query::plumbing::try_execute_query\r\n  18: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\r\n  19: rustc_interface::passes::QueryContext::enter\r\n  20: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  21: rustc_span::with_source_map\r\n  22: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.57.0 (f1edd0429 2021-11-29) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror: could not compile `slcommon`\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/std/src/panicking.rs:517:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/panicking.rs:100:14\r\n   2: core::panicking::panic\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/panicking.rs:50:5\r\n   3: <rustc_query_impl::on_disk_cache::OnDiskCache as rustc_middle::ty::context::OnDiskCache>::def_path_hash_to_def_id\r\n   4: rustc_middle::dep_graph::dep_node::<impl rustc_query_system::dep_graph::dep_node::DepNodeParams<rustc_middle::ty::context::TyCtxt> for rustc_span::def_id::LocalDefId>::recover\r\n   5: rustc_query_impl::query_callbacks::hir_owner::force_from_dep_node\r\n   6: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n   7: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n   8: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n   9: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n  10: rustc_query_system::query::plumbing::ensure_must_run\r\n  11: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::coherent_trait\r\n  12: rustc_session::session::Session::track_errors\r\n  13: rustc_typeck::check_crate\r\n  14: rustc_interface::passes::analysis\r\n  15: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  16: rustc_data_structures::stack::ensure_sufficient_stack\r\n  17: rustc_query_system::query::plumbing::try_execute_query\r\n  18: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\r\n  19: rustc_interface::passes::QueryContext::enter\r\n  20: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  21: rustc_span::with_source_map\r\n  22: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94163/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94163/timeline", "performed_via_github_app": null, "state_reason": "completed"}