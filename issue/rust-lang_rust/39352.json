{"url": "https://api.github.com/repos/rust-lang/rust/issues/39352", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/39352/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/39352/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/39352/events", "html_url": "https://github.com/rust-lang/rust/issues/39352", "id": 203757268, "node_id": "MDU6SXNzdWUyMDM3NTcyNjg=", "number": 39352, "title": "Extremely slow optimizer performance when including large array of strings", "user": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-01-27T22:33:49Z", "updated_at": "2020-05-30T09:59:11Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Consider the following test program:\r\n\r\n```rust\r\nfn main() {\r\n    let words = include!(\"num_array.rs\");\r\n    let mut l = 0;\r\n    for word in words.into_iter() {\r\n        l += word.len();\r\n    }\r\n    println!(\"{}\", l);\r\n}\r\n```\r\n\r\n`num_array.rs` contains an array of 250k strings:\r\n\r\n```\r\n$ (echo '['; seq 1 250000 | sed 's/.*/\"&\",/' ; echo ']') > num_array.rs\r\n$ head -n 5 num_array.rs \r\n[\r\n\"1\",\r\n\"2\",\r\n\"3\",\r\n\"4\",\r\n$ tail -n 5 num_array.rs \r\n\"249997\",\r\n\"249998\",\r\n\"249999\",\r\n\"250000\",\r\n]\r\n```\r\n\r\nCompiling this in debug mode took about 45 seconds; long, and potentially a good test case for compiler profiling, but not completely ridiculous.\r\n\r\nCompiling this in release mode showed no signs of finishing after 45 minutes.  stracing rustc showed two threads, one blocked in a futex and the other repeatedly allocating and freeing a memory buffer:\r\n\r\n```\r\nmmap(0x7fb665a00000, 2097152, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb637400000\r\nmunmap(0x7fb637400000, 2097152)         = 0\r\nmmap(0x7fb665a00000, 2097152, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb637400000\r\nmunmap(0x7fb637400000, 2097152)         = 0\r\nmadvise(0x7fb66531a000, 659456, MADV_DONTNEED) = 0\r\nmadvise(0x7fb6653da000, 139264, MADV_DONTNEED) = 0\r\nmadvise(0x7fb66540c000, 1576960, MADV_DONTNEED) = 0\r\nmadvise(0x7fb665a0c000, 2043904, MADV_DONTNEED) = 0\r\nmadvise(0x7fb665600000, 4194304, MADV_DONTNEED) = 0\r\nmadvise(0x7fb63e600000, 12582912, MADV_DONTNEED) = 0\r\nmadvise(0x7fb661000000, 25165824, MADV_DONTNEED) = 0\r\nmadvise(0x7fb66531a000, 659456, MADV_DONTNEED) = 0\r\nmadvise(0x7fb6653da000, 139264, MADV_DONTNEED) = 0\r\nmadvise(0x7fb66540c000, 1576960, MADV_DONTNEED) = 0\r\nmadvise(0x7fb665a0c000, 2043904, MADV_DONTNEED) = 0\r\nmadvise(0x7fb667a00000, 10485760, MADV_DONTNEED) = 0\r\nmadvise(0x7fb646000000, 100663296, MADV_DONTNEED) = 0\r\nmmap(0x7fb665a00000, 2097152, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb637400000\r\nmunmap(0x7fb637400000, 2097152)         = 0\r\nmmap(0x7fb665a00000, 2097152, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb637400000\r\nmunmap(0x7fb637400000, 2097152)         = 0\r\nmadvise(0x7fb66531a000, 659456, MADV_DONTNEED) = 0\r\nmadvise(0x7fb6653da000, 139264, MADV_DONTNEED) = 0\r\nmadvise(0x7fb66540c000, 1576960, MADV_DONTNEED) = 0\r\nmadvise(0x7fb665a0c000, 2043904, MADV_DONTNEED) = 0\r\nmadvise(0x7fb665600000, 4194304, MADV_DONTNEED) = 0\r\nmadvise(0x7fb63e600000, 12582912, MADV_DONTNEED) = 0\r\nmadvise(0x7fb661000000, 25165824, MADV_DONTNEED) = 0\r\nmadvise(0x7fb66531a000, 659456, MADV_DONTNEED) = 0\r\nmadvise(0x7fb6653da000, 139264, MADV_DONTNEED) = 0\r\nmadvise(0x7fb66540c000, 1576960, MADV_DONTNEED) = 0\r\nmadvise(0x7fb665a0c000, 2043904, MADV_DONTNEED) = 0\r\nmadvise(0x7fb667a00000, 10485760, MADV_DONTNEED) = 0\r\nmadvise(0x7fb646000000, 100663296, MADV_DONTNEED) = 0\r\n```\r\n\r\nBy way of comparison, an analogous C program compiled with GCC takes 4.6s to compile without optimization, or 5.6s with optimization.  Python parses and runs an analogous program in 1.2s.  So, 45s seems excessive for an unoptimized compile, and 45m+ seems wildly excessive for an optimized compile.\r\n\r\nComplete test case (ready to `cargo run` or `cargo run --release`): [testcase.tar.gz](https://github.com/rust-lang/rust/files/736409/testcase.tar.gz)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/39352/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/39352/timeline", "performed_via_github_app": null, "state_reason": null}