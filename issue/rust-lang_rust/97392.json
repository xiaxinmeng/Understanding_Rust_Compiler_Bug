{"url": "https://api.github.com/repos/rust-lang/rust/issues/97392", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97392/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97392/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97392/events", "html_url": "https://github.com/rust-lang/rust/issues/97392", "id": 1247961859, "node_id": "I_kwDOAAsO6M5KYmMD", "number": 97392, "title": "Surprising diagnostics for E0623 lifetime mismatch", "user": {"login": "djc", "id": 158471, "node_id": "MDQ6VXNlcjE1ODQ3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/158471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djc", "html_url": "https://github.com/djc", "followers_url": "https://api.github.com/users/djc/followers", "following_url": "https://api.github.com/users/djc/following{/other_user}", "gists_url": "https://api.github.com/users/djc/gists{/gist_id}", "starred_url": "https://api.github.com/users/djc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djc/subscriptions", "organizations_url": "https://api.github.com/users/djc/orgs", "repos_url": "https://api.github.com/users/djc/repos", "events_url": "https://api.github.com/users/djc/events{/privacy}", "received_events_url": "https://api.github.com/users/djc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-05-25T11:33:26Z", "updated_at": "2022-07-07T22:24:01Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n\r\n```rust\r\nuse std::collections::HashMap;\r\nuse std::marker::PhantomData;\r\n\r\nfn diff(\r\n    keys: &[Option<&str>],\r\n    maps: &(\r\n        HashMap<Option<&str>, Vec<&mut Record>>,\r\n        HashMap<Option<&str>, Vec<&mut Record>>,\r\n    ),\r\n) {\r\n    for key in keys {\r\n        let info = (maps.0.get(key), maps.1.get(key));\r\n        if info.0 == info.1 {\r\n            continue;\r\n        }\r\n    }\r\n}\r\n\r\n#[derive(Debug, PartialEq)]\r\nstruct Record<'a>(PhantomData<&'a ()>);\r\n\r\n#[derive(Copy, Clone, Eq, PartialEq, Hash)]\r\nenum Enum {\r\n    Foo,\r\n    Bar,\r\n}\r\n```\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=f47c0f93783ccca97fa1a040ce78f668\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[[E0623]](https://doc.rust-lang.org/stable/error-index.html#E0623): lifetime mismatch\r\n  --> src/lib.rs:13:22\r\n   |\r\n7  |         HashMap<Option<&str>, Vec<&mut Record>>,\r\n   |                                        ------\r\n8  |         HashMap<Option<&str>, Vec<&mut Record>>,\r\n   |                                        ------ these two types are declared with different lifetimes...\r\n...\r\n13 |         if info.0 == info.1 {\r\n   |                      ^^^^^^ ...but data from `maps` flows into `maps` here\r\n\r\nerror[[E0623]](https://doc.rust-lang.org/stable/error-index.html#E0623): lifetime mismatch\r\n  --> src/lib.rs:13:22\r\n   |\r\n7  |         HashMap<Option<&str>, Vec<&mut Record>>,\r\n   |                                        ------ these two types are declared with different lifetimes...\r\n8  |         HashMap<Option<&str>, Vec<&mut Record>>,\r\n   |                                        ------\r\n...\r\n13 |         if info.0 == info.1 {\r\n   |                      ^^^^^^ ...but data from `maps` flows into `maps` here\r\n\r\nFor more information about this error, try `rustc --explain E0623`.\r\n```\r\n\r\nI'm not sure what the ideal output for this, but here are some improvement points:\r\n\r\n* Showing what appears to be the same error twice\r\n* The explanation of \"data [..] flows into [..]\" seems really weird considering this is just a comparison\r\n* Why does the borrow checker care about the exact lifetimes for a comparison anyway?\r\n* Maybe this should mention something about the inner `Record` lifetime\r\n* Why is the error pointing at the `info.1` value, which is derived from a `maps` value, but also at the keys of `maps`?\r\n\r\nAnother case where I got quite confused:\r\n\r\n```rust\r\nuse anyhow::Error;\r\n\r\n#[tokio::main]\r\nasync fn main() {\r\n    let store = Store { p1: Pool1 };\r\n    let t = Pool2.begin();\r\n    let mut store_mut = store.get_mut(&mut t);\r\n    store_mut.bar().await.unwrap();\r\n    ()\r\n}\r\n\r\nstruct Store {\r\n    p1: Pool1,\r\n}\r\n\r\nimpl Store {\r\n    fn get_mut<'t, 's: 't>(&'s self, t: &'t mut T<'t>) -> StoreMut<'s> {\r\n        StoreMut {\r\n            p1: &self.p1,\r\n            t,\r\n        }\r\n    }\r\n}\r\n\r\nstruct StoreMut<'a> {\r\n    p1: &'a Pool1,\r\n    t: &'a mut T<'a>,\r\n}\r\n\r\nimpl<'a> StoreMut<'a> {\r\n    async fn bar(&mut self) -> Result<(), Error> {\r\n        Ok(())\r\n    }\r\n}\r\n\r\nstruct Pool1;\r\n\r\nstruct Pool2;\r\n\r\nimpl Pool2 {\r\n    fn begin(&self) -> T<'static> {\r\n        T { s: \"foo\" }\r\n    }\r\n}\r\n\r\nstruct T<'a> {\r\n    s: &'a str,\r\n}\r\n\r\nimpl<'a> T<'a> {\r\n    fn finalize(self) {\r\n        \r\n    }\r\n}\r\n```\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=f50a36b183385f8247f688ca7dd5cb41\r\n\r\nWhich gave me the error:\r\n\r\n```rust\r\nerror[[E0623]](https://doc.rust-lang.org/stable/error-index.html#E0623): lifetime mismatch\r\n  --> src/main.rs:18:9\r\n   |\r\n17 |       fn get_mut<'t, 's: 't>(&'s self, t: &'t mut T<'t>) -> StoreMut<'s> {\r\n   |                              --------     ------------- these two types are declared with different lifetimes...\r\n18 | /         StoreMut {\r\n19 | |             p1: &self.p1,\r\n20 | |             t,\r\n21 | |         }\r\n   | |_________^ ...but data from `t` flows into `self` here\r\n```\r\n\r\nSeems really weird to say that data from `t` is flowing into `self` in this case.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97392/timeline", "performed_via_github_app": null, "state_reason": null}