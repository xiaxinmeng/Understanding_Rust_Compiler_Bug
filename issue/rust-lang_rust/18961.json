{"url": "https://api.github.com/repos/rust-lang/rust/issues/18961", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/18961/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/18961/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/18961/events", "html_url": "https://github.com/rust-lang/rust/issues/18961", "id": 48841798, "node_id": "MDU6SXNzdWU0ODg0MTc5OA==", "number": 18961, "title": "Different borrow checker behavior with externally similar code", "user": {"login": "netvl", "id": 280456, "node_id": "MDQ6VXNlcjI4MDQ1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/280456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netvl", "html_url": "https://github.com/netvl", "followers_url": "https://api.github.com/users/netvl/followers", "following_url": "https://api.github.com/users/netvl/following{/other_user}", "gists_url": "https://api.github.com/users/netvl/gists{/gist_id}", "starred_url": "https://api.github.com/users/netvl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netvl/subscriptions", "organizations_url": "https://api.github.com/users/netvl/orgs", "repos_url": "https://api.github.com/users/netvl/repos", "events_url": "https://api.github.com/users/netvl/events{/privacy}", "received_events_url": "https://api.github.com/users/netvl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-11-14T21:28:38Z", "updated_at": "2017-04-29T16:45:33Z", "closed_at": "2017-04-29T16:45:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider this piece of code:\n\n``` rust\nstruct S1<T> { s: Option<T> }\n//struct S1<T> { s: *mut T }\n\nstruct Foo<'a> {\n    bar: S1<&'a str>\n}\n\nimpl<'a> Foo<'a> {\n    pub fn new() -> Foo<'a> {  // '\n        Foo { bar: S1 { s: None } }\n        //Foo { bar: S1 { s: std::ptr::null_mut() } }\n    }\n\n    pub fn baz(&'a self) -> Option<int> {\n        None\n    }\n\n    pub fn qux(&'a mut self, retry: bool) {\n        let opt = self.baz();\n        if retry { self.qux(false); }\n    }\n}\n\npub fn main() {\n   let mut foo = Foo::new();\n   foo.qux(true);\n}\n```\n\nIt compiles. However, if you change `S1` definition to the commented one:\n\n``` rust\n//struct S1<T> { s: Option<T> }\nstruct S1<T> { s: *mut T }\n\nstruct Foo<'a> {\n    bar: S1<&'a str>\n}\n\nimpl<'a> Foo<'a> {\n    pub fn new() -> Foo<'a> {  // '\n        //Foo { bar: S1 { s: None } }\n        Foo { bar: S1 { s: std::ptr::null_mut() } }\n    }\n\n    pub fn baz(&'a self) -> Option<int> {\n        None\n    }\n\n    pub fn qux(&'a mut self, retry: bool) {\n        let opt = self.baz();\n        if retry { self.qux(false); }\n    }\n}\n\npub fn main() {\n   let mut foo = Foo::new();\n   foo.qux(true);\n}\n```\n\nit stops compiling with borrow checking error (and very weird one):\n\n```\n<anon>:20:20: 20:24 error: cannot borrow `*self` as mutable because it is also borrowed as immutable\n<anon>:20         if retry { self.qux(false); }\n                             ^~~~\n<anon>:19:19: 19:23 note: previous borrow of `*self` occurs here; the immutable borrow prevents subsequent moves or mutable borrows of `*self` until the borrow ends\n<anon>:19         let opt = self.baz();\n                            ^~~~\n<anon>:21:6: 21:6 note: previous borrow ends here\n<anon>:18     pub fn qux(&'a mut self, retry: bool) {\n<anon>:19         let opt = self.baz();\n<anon>:20         if retry { self.qux(false); }\n<anon>:21     }\n              ^\nerror: aborting due to previous error\n```\n\nOriginally discovered in [this](http://stackoverflow.com/questions/26938162/cannot-borrow-self-as-mutable-because-it-is-also-borrowed-as-immutable) Stackoverflow question. It is much more confusing there because `Vec` and `HashMap` instead of custom structure are used.\n\ncc @nikomatsakis (right?)\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/18961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/18961/timeline", "performed_via_github_app": null, "state_reason": "completed"}