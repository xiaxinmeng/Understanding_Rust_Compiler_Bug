{"url": "https://api.github.com/repos/rust-lang/rust/issues/81604", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81604/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81604/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81604/events", "html_url": "https://github.com/rust-lang/rust/issues/81604", "id": 797779472, "node_id": "MDU6SXNzdWU3OTc3Nzk0NzI=", "number": 81604, "title": "Confusing and big error when misusing function instead of function call in iterator chain", "user": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-01-31T18:36:13Z", "updated_at": "2023-04-05T17:30:27Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I've accidentally used a function (`String::from`) instead of a function call (`String::from(\"...\")`) and the error was hard to read. Maybe it can be improved. ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=a10d7c3db979164ae8323aea36721754))\r\n\r\n<details><summary>Code</summary>\r\n<p>\r\n\r\n```rust\r\nfn test(media: &str) {\r\n    std::iter::once((\r\n        String::from, // <-- I've meant `String::from(\"...\")`\r\n        serde_json::Value::String(String::from(\"document\")),\r\n    ))\r\n    .chain(\r\n        std::iter::once((\r\n            String::from(\"media\"),\r\n            serde_json::Value::String(media.to_owned()),\r\n        ))\r\n        .chain(\r\n            Some(\"caption\")\r\n                .iter()\r\n                .map(serde_json::to_value)\r\n                .map(Result::unwrap)\r\n                .map(|v| (String::from(\"caption\"), v))\r\n                .chain(\r\n                    Some(\"parse_mode\")\r\n                        .iter()\r\n                        .map(serde_json::to_value)\r\n                        .map(Result::unwrap)\r\n                        .map(|v| (String::from(\"parse_mode\"), v)),\r\n                ),\r\n        ),\r\n    )\r\n    .collect::<Vec<_>>();\r\n}\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n<details><summary>Error</summary>\r\n<p>\r\n\r\n(this error is from `1.51.0-nightly (2021-01-30 04caa632dd10c2bf64b6)`, previous compiler versions produce similar errors)\r\n\r\n```\r\nerror[E0271]: type mismatch resolving `<std::iter::Chain<std::iter::Once<(std::string::String, Value)>, std::iter::Chain<std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:18:26: 18:58]>, std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:24:34: 24:69]>>> as IntoIterator>::Item == (fn(_) -> std::string::String {<std::string::String as From<_>>::from}, Value)`\r\n --> src/lib.rs:8:10\r\n  |\r\n8 |         .chain(\r\n  |          ^^^^^ expected struct `std::string::String`, found fn item\r\n  |\r\n  = note: expected type `(std::string::String, Value)`\r\n            found tuple `(fn(_) -> std::string::String {<std::string::String as From<_>>::from}, Value)`\r\n\r\nerror[E0599]: the method `collect` exists for struct `std::iter::Chain<std::iter::Once<(fn(_) -> std::string::String {<std::string::String as From<_>>::from}, Value)>, std::iter::Chain<std::iter::Once<(std::string::String, Value)>, std::iter::Chain<std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:18:26: 18:58]>, std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:24:34: 24:69]>>>>`, but its trait bounds were not satisfied\r\n  --> src/lib.rs:28:10\r\n   |\r\n28 |           .collect(),\r\n   |            ^^^^^^^ method cannot be called on `std::iter::Chain<std::iter::Once<(fn(_) -> std::string::String {<std::string::String as From<_>>::from}, Value)>, std::iter::Chain<std::iter::Once<(std::string::String, Value)>, std::iter::Chain<std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:18:26: 18:58]>, std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:24:34: 24:69]>>>>` due to unsatisfied trait bounds\r\n   |\r\n   = note: the following trait bounds were not satisfied:\r\n           `<std::iter::Chain<std::iter::Once<(std::string::String, Value)>, std::iter::Chain<std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:18:26: 18:58]>, std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:24:34: 24:69]>>> as Iterator>::Item = (fn(_) -> std::string::String {<std::string::String as From<_>>::from}, Value)`\r\n           which is required by `std::iter::Chain<std::iter::Once<(fn(_) -> std::string::String {<std::string::String as From<_>>::from}, Value)>, std::iter::Chain<std::iter::Once<(std::string::String, Value)>, std::iter::Chain<std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:18:26: 18:58]>, std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:24:34: 24:69]>>>>: Iterator`\r\n           `std::iter::Chain<std::iter::Once<(fn(_) -> std::string::String {<std::string::String as From<_>>::from}, Value)>, std::iter::Chain<std::iter::Once<(std::string::String, Value)>, std::iter::Chain<std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:18:26: 18:58]>, std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:24:34: 24:69]>>>>: Iterator`\r\n           which is required by `&mut std::iter::Chain<std::iter::Once<(fn(_) -> std::string::String {<std::string::String as From<_>>::from}, Value)>, std::iter::Chain<std::iter::Once<(std::string::String, Value)>, std::iter::Chain<std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:18:26: 18:58]>, std::iter::Map<std::iter::Map<std::iter::Map<std::option::Iter<'_, &str>, fn(&&str) -> std::result::Result<Value, serde_json::Error> {to_value::<&&str>}>, fn(std::result::Result<Value, serde_json::Error>) -> Value {std::result::Result::<Value, serde_json::Error>::unwrap}>, [closure@src/lib.rs:24:34: 24:69]>>>>: Iterator`\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81604/timeline", "performed_via_github_app": null, "state_reason": null}