{"url": "https://api.github.com/repos/rust-lang/rust/issues/24950", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/24950/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/24950/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/24950/events", "html_url": "https://github.com/rust-lang/rust/issues/24950", "id": 71923067, "node_id": "MDU6SXNzdWU3MTkyMzA2Nw==", "number": 24950, "title": "method call fails to upcast trait objects, resulting in overlong borrows", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-04-29T16:31:01Z", "updated_at": "2022-03-22T08:06:57Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@SimonSapin encountered an error in servo that I reduced to the following test case http://is.gd/w7HPbJ:\n\n``` rust\npub trait Flow {\n    fn foo(&self);\n}\n\npub trait LayoutDamageComputation {\n    fn compute_layout_damage(self);\n}\n\nimpl<'a> LayoutDamageComputation for &'a mut (Flow + 'a) {\n    fn compute_layout_damage(self) {\n        self.compute_layout_damage();\n        self.compute_layout_damage();\n    }\n}\n\nfn main() { }\n```\n\nThe errors you get are:\n\n```\n\n\n<anon>:12:9: 12:13 error: cannot borrow `*self` as mutable more than once at a time\n<anon>:12         self.compute_layout_damage();\n                  ^~~~\n<anon>:11:9: 11:13 note: previous borrow of `*self` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `*self` until the borrow ends\n<anon>:11         self.compute_layout_damage();\n                  ^~~~\n<anon>:13:6: 13:6 note: previous borrow ends here\n<anon>:10     fn compute_layout_damage(self) {\n<anon>:11         self.compute_layout_damage();\n<anon>:12         self.compute_layout_damage();\n<anon>:13     }\n              ^\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\nProgram ended.\n```\n\nThere are various possible workarounds:\n1. http://is.gd/frmXsT\n2. http://is.gd/FgrEfZ\n\nbut the gist (no pun intended, I kill me) is to ensure a coercion from `self` to `&mut Flow`, which allows us to upcast the lifetime in the trait object. The easiest way to do that is to convert the recursive call `self.compute_layout_damage()` to UFCS form `<&mut Flow as ComputeLayoutDamage>::compute_layout_damage(self)`. Method dispatch ought to automatically performing this upcast, I think, must as we auto-reborrow here and there.\n\ncc @pnkfelix who experimented on this with me\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/24950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/24950/timeline", "performed_via_github_app": null, "state_reason": null}