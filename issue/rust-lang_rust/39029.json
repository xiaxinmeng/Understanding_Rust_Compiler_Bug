{"url": "https://api.github.com/repos/rust-lang/rust/issues/39029", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/39029/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/39029/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/39029/events", "html_url": "https://github.com/rust-lang/rust/issues/39029", "id": 200546110, "node_id": "MDU6SXNzdWUyMDA1NDYxMTA=", "number": 39029, "title": "Suggest dereference operations when a deref coercion won't work", "user": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-01-13T04:36:30Z", "updated_at": "2020-06-21T02:20:03Z", "closed_at": "2020-06-21T02:20:03Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Deref coercions are tricky. `&x` will coerce to `&***x` if used in a place that expects a value of the type of `&***x`, however, this does not work for trait-bound generics.\r\n\r\nThe example that came up recently was:\r\n\r\n```rust\r\nuse std::net::TcpListener;\r\nlet owned = \"foobar\".to_string(); // owned string came from somewhere\r\nlet works = TcpListener::bind(\"some string\");\r\nlet doesn't = TcpListener::bind(&owned);\r\n```\r\n\r\nThis errors with\r\n\r\n```text\r\nerror[E0277]: the trait bound `std::string::String: std::net::ToSocketAddrs` is not satisfied\r\n --> <anon>:5:18\r\n  |\r\n5 |     let listen = TcpListener::bind(&owned);\r\n  |                  ^^^^^^^^^^^^^^^^^ the trait `std::net::ToSocketAddrs` is not implemented for `std::string::String`\r\n  |\r\n  = note: required because of the requirements on the impl of `std::net::ToSocketAddrs` for `&std::string::String`\r\n  = note: required by `std::net::TcpListener::bind`\r\n```\r\n\r\nbecause while `&owned` would usually coerce to an `&str`, in this case it doesn't because even though `TcpListener::bind` would accept a `&str`, it doesn't accept _only_ that type and the deref coercion won't work.\r\n\r\nProgrammers should not have to know these details to get their code to work. It would be nice if deref coercions worked in places where a generic bound type is expected, but there are other issues there (what happens if the trait gets implemented on `String`?) so it's not a clear win and would need an rfc anyway.\r\n\r\nAt the very least, we should suggest the usage of a dereference operator here.\r\n\r\nThe heuristics are:\r\n \r\n - you have a trait bound error\r\n - The error is on a reference expression `&x`\r\n - The expression is used in one of the allowed places for deref coercions (may not be necessary, really)\r\n - The trait isn't implemented by `&x`\r\n - The trait _is_ implemented by `&***x` for some amount of `*` operations\r\n\r\nthen, suggest the correct thing with the dereference operators.\r\n\r\ncc @jonathandturner @GuillaumeGomez ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/39029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/39029/timeline", "performed_via_github_app": null, "state_reason": "completed"}