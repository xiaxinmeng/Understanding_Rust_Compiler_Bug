{"url": "https://api.github.com/repos/rust-lang/rust/issues/107031", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107031/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107031/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107031/events", "html_url": "https://github.com/rust-lang/rust/issues/107031", "id": 1538004531, "node_id": "I_kwDOAAsO6M5brBYz", "number": 107031, "title": "Diagnostics around implementing mutable iterators should be improved", "user": {"login": "mejrs", "id": 59372212, "node_id": "MDQ6VXNlcjU5MzcyMjEy", "avatar_url": "https://avatars.githubusercontent.com/u/59372212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mejrs", "html_url": "https://github.com/mejrs", "followers_url": "https://api.github.com/users/mejrs/followers", "following_url": "https://api.github.com/users/mejrs/following{/other_user}", "gists_url": "https://api.github.com/users/mejrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/mejrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mejrs/subscriptions", "organizations_url": "https://api.github.com/users/mejrs/orgs", "repos_url": "https://api.github.com/users/mejrs/repos", "events_url": "https://api.github.com/users/mejrs/events{/privacy}", "received_events_url": "https://api.github.com/users/mejrs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-01-18T13:27:22Z", "updated_at": "2023-01-18T20:00:55Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Recently I have seen a lot of (new) users struggle with code like this:\r\n\r\n```rust\r\npub struct IterMut<'a, T> {\r\n    inner: &'a mut Vec<T>,\r\n    index: usize,\r\n}\r\n\r\nimpl<'a, T> Iterator for IterMut<'a, T> {\r\n    type Item = &'a mut T;\r\n\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        let item = self.inner.get_mut(self.index);\r\n        self.index += 1;\r\n        item\r\n    }\r\n}\r\n```\r\n\r\nThis doesn't compile, of course:\r\n\r\n```rust\r\nerror: lifetime may not live long enough\r\n  --> src/lib.rs:12:9\r\n   |\r\n6  | impl<'a, T> Iterator for IterMut<'a, T> {\r\n   |      -- lifetime `'a` defined here\r\n...\r\n9  |     fn next(&mut self) -> Option<Self::Item> {\r\n   |             - let's call the lifetime of this reference `'1`\r\n...\r\n12 |         item\r\n   |         ^^^^ associated function was supposed to return data with lifetime `'a` \r\nbut it is returning data with lifetime `'1`\r\n```\r\n\r\nThis is often seen as a shortcoming of the language, as a pattern that is correct but the compiler doesn't understand - which in this case, is not untrue. But in many impls do involve overlapping mutable references, which would be unsound. \r\n\r\nAs for improvements, I have some ideas:\r\n- Reassure the user that they really do need that lifetime, and that they didn't put a wrong lifetime somewhere. Say something like  \"The contract of `Iterator::next` demands an item with at least the lifetime 'a\"\r\n- Explain [splitting borrows](https://doc.rust-lang.org/nomicon/borrow-splitting.html#splitting-borrows). In my experience this clicks well, and users are often surprised they don't need to reach for unsafe code. We should explain this in-line or link to the nomicon.\r\n- Explain why the iterator trait has the lifetime requirements that it has ,e.g. \"`the_iter.collect();` is a thing\"", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107031/timeline", "performed_via_github_app": null, "state_reason": null}