{"url": "https://api.github.com/repos/rust-lang/rust/issues/107741", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107741/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107741/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107741/events", "html_url": "https://github.com/rust-lang/rust/issues/107741", "id": 1573365995, "node_id": "I_kwDOAAsO6M5dx6jr", "number": 107741, "title": "Unactionable error on type alias impl trait in trait with type parameters", "user": {"login": "yshui", "id": 366851, "node_id": "MDQ6VXNlcjM2Njg1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/366851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yshui", "html_url": "https://github.com/yshui", "followers_url": "https://api.github.com/users/yshui/followers", "following_url": "https://api.github.com/users/yshui/following{/other_user}", "gists_url": "https://api.github.com/users/yshui/gists{/gist_id}", "starred_url": "https://api.github.com/users/yshui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yshui/subscriptions", "organizations_url": "https://api.github.com/users/yshui/orgs", "repos_url": "https://api.github.com/users/yshui/repos", "events_url": "https://api.github.com/users/yshui/events{/privacy}", "received_events_url": "https://api.github.com/users/yshui/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1472502130, "node_id": "MDU6TGFiZWwxNDcyNTAyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-type_alias_impl_trait", "name": "F-type_alias_impl_trait", "color": "f9c0cc", "default": false, "description": "`#[feature(type_alias_impl_trait)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-02-06T22:07:28Z", "updated_at": "2023-02-07T18:49:05Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Code\r\n\r\n```Rust\r\n#![feature(type_alias_impl_trait)]\r\ntrait T1<O> {\r\n    type Fut<'a, I>: std::future::Future<Output = ()> + 'a\r\n    where \r\n        Self: 'a, \r\n        I: 'a; // should have `+ Into<O>` here\r\n\r\n    fn fun<'a, I: Into<O> + 'a>(&'a mut self, input: I) -> Self::Fut<'a, I>;\r\n}\r\n\r\nstruct Impl<O>(O);\r\nimpl<O> T1<O> for Impl<O> {\r\n    type Fut<'a, I> = impl std::future::Future<Output = ()> + 'a\r\n    where\r\n        Self: 'a,\r\n        I: 'a;\r\n    fn fun<'a, I: Into<O> + 'a>(&'a mut self, input: I) -> Self::Fut<'a, I> {\r\n        let o = input.into();\r\n        async move{\r\n            self.0 = o;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Current output\r\n\r\n```Shell\r\nerror[E0277]: the trait bound `O: From<I>` is not satisfied\r\n  --> src/lib.rs:19:9\r\n   |\r\n19 | /         async move{\r\n20 | |             self.0 = o;\r\n21 | |         }\r\n   | |_________^ the trait `From<I>` is not implemented for `O`\r\n   |\r\n   = note: required for `I` to implement `Into<O>`\r\nnote: required by a bound in `<Impl<O> as T1<O>>::fun`\r\n  --> src/lib.rs:17:19\r\n   |\r\n17 |     fn fun<'a, I: Into<O> + 'a>(&'a mut self, input: I) -> Self::Fut<'a, I> {\r\n   |                   ^^^^^^^ required by this bound in `<Impl<O> as T1<O>>::fun`\r\nhelp: consider restricting type parameter `O`\r\n   |\r\n12 | impl<O: std::convert::From<I>> T1<O> for Impl<O> {\r\n   |       +++++++++++++++++++++++\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n\r\n### Desired output\r\n\r\nShould guide user to add `+ Into<O>` on the type alias definition in the trait.\r\n\r\n### Rationale and extra context\r\n\r\nThe complaint about `O` not being `From<I>` is unclear and seemingly nonsensical, because the function signature requires `I: Into<O>`. And the suggested fix is wrong as well.\r\n\r\n### Other cases\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n_No response_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107741/timeline", "performed_via_github_app": null, "state_reason": null}