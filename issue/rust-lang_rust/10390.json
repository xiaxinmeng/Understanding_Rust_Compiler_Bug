{"url": "https://api.github.com/repos/rust-lang/rust/issues/10390", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/10390/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/10390/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/10390/events", "html_url": "https://github.com/rust-lang/rust/issues/10390", "id": 22395263, "node_id": "MDU6SXNzdWUyMjM5NTI2Mw==", "number": 10390, "title": "mut borrow checker seems to be too conservative in matches", "user": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-11-09T22:38:01Z", "updated_at": "2015-02-02T11:12:49Z", "closed_at": "2015-02-02T11:12:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been working on a new version of the serialization framework, and I've run into an edge case with the borrow checker that is a little painful. Here's my reduced code:\n\n```\npub enum Value<'self> {\n    A(&'self str),\n    B,\n    C,\n}\n\npub trait Decoder<'self> {\n    fn read<'a>(&'a mut self) -> Value<'a>;\n}\n\npub trait Decodable<'self, D: Decoder<'self>> {\n    fn decode(d: &mut D) -> Self;\n}\n\nimpl<'self, D: Decoder<'self>> Decodable<'self, D> for () {\n    fn decode(d: &mut D) -> () {\n        match d.read() {\n            A(x) => { let _ = x; () }\n            B => Decodable::decode(d),\n            C => Decodable::decode(d),\n        }\n    }\n}\n```\n\nThis errors with:\n\n```\nfoo.rs:19:35: 19:36 error: cannot borrow `*d` as mutable more than once at a time\nfoo.rs:19             B => Decodable::decode(d),\n                                             ^\nfoo.rs:17:14: 17:15 note: second borrow of `*d` as mutable occurs here\nfoo.rs:17         match d.read() {\n                        ^\nfoo.rs:20:35: 20:36 error: cannot borrow `*d` as mutable more than once at a time\nfoo.rs:20             C => Decodable::decode(d),\n                                             ^\nfoo.rs:17:14: 17:15 note: second borrow of `*d` as mutable occurs here\nfoo.rs:17         match d.read() {\n                        ^\nerror: aborting due to 2 previous errors\n```\n\nI'm not sure if this should be an error because the error is being caused by the `A` variant capturing the value, not the `B` and `C` variant. This is clear with this impl, which compiles fine:\n\n```\nimpl<'self, D: Decoder<'self>> Decodable<'self, D> for () {\n    fn decode(d: &mut D) -> () {\n        match d.read() {\n            A(*) => (),\n            B => Decodable::decode(d),\n            C => Decodable::decode(d),\n        }\n    }\n}\n```\n\nThe only way currently that I can get this to work is if I use a mini-state machine, as in:\n\n```\nimpl<'self, D: Decoder<'self>> Decodable<'self, D> for () {\n    fn decode(d: &mut D) -> () {\n        enum State {\n            BState,\n            CState,\n        }\n\n        let state = match d.read() {\n            A(x) => { let _ = x; return (); }\n            B => BState,\n            C => CState,\n        };\n\n        match state {\n            BState => Decodable::decode(d),\n            CState => Decodable::decode(d),\n        }\n    }\n}\n```\n\nWhich is a bit obnoxious to write when we have a large amount of value variants. \n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/10390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/10390/timeline", "performed_via_github_app": null, "state_reason": "completed"}