{"url": "https://api.github.com/repos/rust-lang/rust/issues/112194", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112194/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112194/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112194/events", "html_url": "https://github.com/rust-lang/rust/issues/112194", "id": 1737329353, "node_id": "I_kwDOAAsO6M5njYrJ", "number": 112194, "title": "RPITIT is allowed to name any in-scope lifetime parameter, unlike inherent RPIT methods", "user": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 3471276000, "node_id": "LA_kwDOAAsO6M7O53fg", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-lang-nominated", "name": "I-lang-nominated", "color": "e10c02", "default": false, "description": "Indicates that an issue has been nominated for discussion during a lang team meeting."}, {"id": 4515945540, "node_id": "LA_kwDOAAsO6M8AAAABDSvcRA", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-return_position_impl_trait_in_trait", "name": "F-return_position_impl_trait_in_trait", "color": "f9c0cc", "default": false, "description": "`#![feature(return_position_impl_trait_in_trait)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-06-02T01:42:22Z", "updated_at": "2023-06-15T20:54:40Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I noticed (while responding to [this comment](https://github.com/rust-lang/rfcs/pull/3425#pullrequestreview-1443027655) by @aliemjay) that there's an inconsistency in how we handle returning `Self` if it captures lifetimes. For both inherent methods and RPITIT, if you write `-> impl Trait` and then return `self` on an impl for a type that containing a lifetime, we give you an error:\r\n\r\n```rust\r\nstruct Foo<'a>(&'a str);\r\n\r\n// ERROR: hidden type for `impl Sized` captures lifetime that does not appear in bounds\r\nimpl<'a> Foo<'a> {\r\n    fn foo(self) -> impl Sized { self }\r\n}\r\n\r\ntrait Trait<'a> {\r\n    fn bar(self) -> impl Sized;\r\n}\r\n\r\n// ERROR: hidden type for `impl Sized` captures lifetime that does not appear in bounds\r\nimpl<'a> Trait<'a> for &'a i32 {\r\n    fn bar(self) -> impl Sized { self }\r\n}\r\n```\r\n\r\nHowever, if you write `-> Self` on an implementation of a trait method that's written with `-> impl Trait`, there is no error (though this would require `#[refine]` with RFC 3245):\r\n\r\n```rust\r\n// OK?\r\nimpl<'a> Trait<'a> for &'a u32 {\r\n    fn bar(self) -> Self { self }\r\n}\r\n```\r\n\r\n[playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=6a522a1ab93edceff5ce7ed84b0a47a0)\r\n\r\nFirst, this inconsistency is weird from a user perspective because it seems like the capture rules say what lifetimes your hidden type is allowed to _reference_, and such a property can only be strengthened by an implementation (by referencing fewer, or longer-lived, lifetimes than the trait allows), never weakened. But here, the implementation specifies it a concrete type which allows it to name _additional_ lifetimes.\r\n\r\nIf we could I we would say we should probably accept all of these examples and consider `Self` to be a type parameter in how we interpret [RFC 1951](https://rust-lang.github.io/rfcs/1951-expand-impl-trait.html#scoping-for-type-and-lifetime-parameters). That said, I don't think it's possible to change today given that [you can depend on the return type not referencing the lifetime](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=d4aff22d7a47baa11c521518c3b05372).\r\n\r\nGiven that, we should probably apply the same restriction to RPITIT for the sake of consistency and _not_ allow it to name any lifetime parameters as we [assume it can today](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=d7696e18bb9a6aa75674ad6fbadc3487) (including through `Self`). Though this might create other issues I'm not thinking of.\r\n\r\ncc @compiler-errors ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112194/timeline", "performed_via_github_app": null, "state_reason": null}