{"url": "https://api.github.com/repos/rust-lang/rust/issues/64351", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/64351/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/64351/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/64351/events", "html_url": "https://github.com/rust-lang/rust/issues/64351", "id": 491682224, "node_id": "MDU6SXNzdWU0OTE2ODIyMjQ=", "number": 64351, "title": "ManuallyDrop should be an object-safe receiver type", "user": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 1472515079, "node_id": "MDU6TGFiZWwxNDcyNTE1MDc5", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-arbitrary_self_types", "name": "F-arbitrary_self_types", "color": "f9c0cc", "default": false, "description": "`#![feature(arbitrary_self_types)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2019-09-10T13:44:39Z", "updated_at": "2019-09-18T23:13:52Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We should extend the set of library-defined self types on stable to include types involving `ManuallyDrop`. `ManuallyDrop` is a transparent wrapper around another type which is completely unconstrained; there should be no technical limitations on making it an object-safe receiver type.\r\n\r\nTo be explicit, I am proposing to make the following types valid self types on stable, and all but the first would be object safe:\r\n\r\n* `ManuallyDrop<Self>`\r\n* `&ManuallyDrop<Self>`\r\n* `&mut ManuallyDrop<Self>`\r\n* `Box<ManuallyDrop<Self>>`\r\n* `Rc<ManuallyDrop<Self>>`\r\n* `Arc<ManuallyDrop<Self>>`\r\n* `Pin<&ManuallyDrop<Self>>`\r\n* `Pin<&mut ManuallyDrop<Self>>`\r\n* `Pin<Box<ManuallyDrop<Self>>>`\r\n* `Pin<Rc<ManuallyDrop<Self>>>`\r\n* `Pin<Arc<ManuallyDrop<Self>>>`\r\n\r\nThis is similar to but distinct from #56193, which is about making coercions valid involving a manually drop wrapped around a pointer type.\r\n\r\nIn particular, I am personally interested in having `Pin<&mut ManuallyDrop<Self>>` as an object-safe receiver type for an unsafe trait method in my code, as it assists users in understanding the guarantees the caller is giving them - that it will never access or move this value again, even to drop it, do with that what you will.\r\n\r\ncc @mikeyhew @rust-lang/lang @rust-lang/wg-unsafe-code-guidelines ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/64351/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/64351/timeline", "performed_via_github_app": null, "state_reason": null}