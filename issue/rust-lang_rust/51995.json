{"url": "https://api.github.com/repos/rust-lang/rust/issues/51995", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51995/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51995/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51995/events", "html_url": "https://github.com/rust-lang/rust/issues/51995", "id": 337604788, "node_id": "MDU6SXNzdWUzMzc2MDQ3ODg=", "number": 51995, "title": "ICE in generator MIR generated by async/await", "user": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679846574, "node_id": "MDU6TGFiZWw2Nzk4NDY1NzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-generators", "name": "A-generators", "color": "f7e101", "default": false, "description": "Area: Generators"}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-02T17:36:33Z", "updated_at": "2019-02-22T16:52:40Z", "closed_at": "2019-02-22T16:52:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Attempting to get a minimal repro-- I'll update the issue when I've gotten one.\r\n\r\n```\r\nerror: internal compiler error: librustc_mir/transform/generator.rs:495: Broken MIR: generator contains type std::result::Result<(), futures::channel::mpsc::SendError> in MIR, but typeck only knows about for<'r, 's, 't0, 't1, 't2, 't3, 't4> {fn(std::iter::Rev<std::ops::RangeInclusive<u32>>) -> <std::iter::Rev<std::ops::RangeInclusive<u32>> as std::iter::IntoIterator>::IntoIter {<std::iter::Rev<std::ops::RangeInclusive<u32>> as std::iter::IntoIterator>::into_iter}, fn(u32, u32) -> std::ops::RangeInclusive<u32> {<std::ops::RangeInclusive<Idx>><u32>::new}, u32, std::ops::RangeInclusive<u32>, std::iter::Rev<std::ops::RangeInclusive<u32>>, futures::sink::Send<'r, futures::channel::mpsc::Sender<u32>>, std::mem::PinMut<'s, futures::sink::Send<'t0, futures::channel::mpsc::Sender<u32>>>, for<'t5, 't6> fn(&'t5 mut std::mem::PinMut<'t6, futures::sink::Send<'t1, futures::channel::mpsc::Sender<u32>>>) -> futures::Poll<<futures::sink::Send<'t1, futures::channel::mpsc::Sender<u32>> as futures::Future>::Output> {std::future::poll_in_task_cx::<futures::sink::Send<'t1, futures::channel::mpsc::Sender<u32>>>}, &'t2 mut std::mem::PinMut<'t3, futures::sink::Send<'t4, futures::channel::mpsc::Sender<u32>>>, futures::Poll<std::result::Result<(), futures::channel::mpsc::SendError>>, ()}\r\n   --> futures-channel/tests/mpsc.rs:410:78\r\n    |\r\n410 |   async fn stress_poll_ready_sender(mut sender: mpsc::Sender<u32>, count: u32) {\r\n    |  ______________________________________________________________________________^\r\n411 | |     for i in (1..=count).rev() {\r\n412 | |         assert!(await!(sender.send(i)).is_ok());\r\n413 | |     }\r\n414 | | }\r\n    | |_^\r\n\r\nthread 'main' panicked at 'Box<Any>', librustc_errors/lib.rs:499:9\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::print\r\n             at libstd/sys_common/backtrace.rs:71\r\n             at libstd/sys_common/backtrace.rs:59\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at libstd/panicking.rs:211\r\n   3: std::panicking::default_hook\r\n             at libstd/panicking.rs:227\r\n   4: rustc::util::common::panic_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n             at libstd/panicking.rs:515\r\n   6: std::panicking::begin_panic\r\n   7: rustc_errors::Handler::span_bug\r\n   8: rustc::session::opt_span_bug_fmt::{{closure}}\r\n   9: rustc::ty::context::tls::with_opt::{{closure}}\r\n  10: rustc::ty::context::tls::with_context_opt\r\n  11: rustc::ty::context::tls::with_opt\r\n  12: rustc::session::opt_span_bug_fmt\r\n  13: rustc::session::span_bug_fmt\r\n  14: <rustc_mir::transform::generator::StateTransform as rustc_mir::transform::MirPass>::run_pass\r\n  15: rustc_mir::transform::optimized_mir::{{closure}}\r\n  16: rustc_mir::transform::optimized_mir\r\n  17: rustc::ty::query::__query_compute::optimized_mir\r\n  18: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::optimized_mir<'tcx>>::compute\r\n  19: rustc::ty::context::tls::with_context\r\n  20: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  21: rustc::ty::context::tls::with_related_context\r\n  22: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  23: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_get_query\r\n  24: rustc::ty::query::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::optimized_mir\r\n  25: rustc_mir::shim::make_shim\r\n  26: rustc::ty::query::__query_compute::mir_shims\r\n  27: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::mir_shims<'tcx>>::compute\r\n  28: rustc::ty::context::tls::with_context\r\n  29: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  30: rustc::ty::context::tls::with_related_context\r\n  31: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  32: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query\r\n  33: rustc::ty::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::instance_mir\r\n  34: rustc_mir::monomorphize::collector::collect_items_rec\r\n  35: rustc_mir::monomorphize::collector::collect_items_rec\r\n  36: rustc_mir::monomorphize::collector::collect_items_rec\r\n  37: rustc_mir::monomorphize::collector::collect_items_rec\r\n  38: rustc_mir::monomorphize::collector::collect_items_rec\r\n  39: rustc_mir::monomorphize::collector::collect_items_rec\r\n  40: rustc_mir::monomorphize::collector::collect_items_rec\r\n  41: rustc_mir::monomorphize::collector::collect_items_rec\r\n  42: rustc_mir::monomorphize::collector::collect_items_rec\r\n  43: rustc_mir::monomorphize::collector::collect_items_rec\r\n  44: rustc_mir::monomorphize::collector::collect_items_rec\r\n  45: rustc_mir::monomorphize::collector::collect_items_rec\r\n  46: rustc_mir::monomorphize::collector::collect_items_rec\r\n  47: rustc_mir::monomorphize::collector::collect_items_rec\r\n  48: rustc_mir::monomorphize::collector::collect_items_rec\r\n  49: rustc_mir::monomorphize::collector::collect_items_rec\r\n  50: rustc_mir::monomorphize::collector::collect_items_rec\r\n  51: rustc_mir::monomorphize::collector::collect_items_rec\r\n  52: rustc_mir::monomorphize::collector::collect_items_rec\r\n  53: rustc_mir::monomorphize::collector::collect_crate_mono_items::{{closure}}\r\n  54: rustc_mir::monomorphize::collector::collect_crate_mono_items\r\n  55: rustc::util::common::time\r\n  56: rustc_codegen_llvm::base::collect_and_partition_mono_items\r\n  57: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::collect_and_partition_mono_items<'tcx>>::compute\r\n  58: rustc::ty::context::tls::with_context\r\n  59: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  60: rustc::ty::context::tls::with_related_context\r\n  61: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  62: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query\r\n  63: rustc_codegen_llvm::base::codegen_crate\r\n  64: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_utils::codegen_backend::CodegenBackend>::codegen_crate\r\n  65: rustc::util::common::time\r\n  66: rustc_driver::driver::phase_4_codegen\r\n  67: rustc_driver::driver::compile_input::{{closure}}\r\n  68: rustc::ty::context::tls::enter_context\r\n  69: <std::thread::local::LocalKey<T>>::with\r\n  70: rustc::ty::context::TyCtxt::create_and_enter\r\n  71: rustc_driver::driver::compile_input\r\n  72: rustc_driver::run_compiler_with_pool\r\n  73: <scoped_tls::ScopedKey<T>>::set\r\n  74: syntax::with_globals\r\n  75: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  76: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:105\r\n  77: rustc_driver::run\r\n  78: rustc_driver::main\r\n  79: std::rt::lang_start::{{closure}}\r\n  80: std::panicking::try::do_call\r\n             at libstd/rt.rs:59\r\n             at libstd/panicking.rs:310\r\n  81: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:105\r\n  82: std::rt::lang_start_internal\r\n             at libstd/panicking.rs:289\r\n             at libstd/panic.rs:392\r\n             at libstd/rt.rs:58\r\n  83: main\r\n  84: __libc_start_main\r\n  85: <unknown>\r\nquery stack during panic:\r\n#0 [optimized_mir] processing `stress_poll_ready_sender::{{closure}}`\r\n#1 [mir_shims] generating MIR shim for `std::intrinsics::drop_in_place`\r\n#2 [collect_and_partition_mono_items] collect_and_partition_mono_items\r\nend of query stack\r\nerror: aborting due to previous error\r\n\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.28.0-nightly (84804c387 2018-06-26) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C debuginfo=2 -C incremental\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nerror: Could not compile `futures-channel`.\r\n\r\n```\r\n\r\nPrettier:\r\n```\r\nBroken MIR: generator contains type\r\nstd::result::Result<(), futures::channel::mpsc::SendError> in MIR, but typeck only knows about\r\nfor<'r, 's, 't0, 't1, 't2, 't3, 't4> {\r\n    fn(std::iter::Rev<std::ops::RangeInclusive<u32>>) -> <std::iter::Rev<std::ops::RangeInclusive<u32>> \r\n        as std::iter::IntoIterator>::IntoIter {\r\n            <std::iter::Rev<std::ops::RangeInclusive<u32>> as std::iter::IntoIterator>::into_iter\r\n        },\r\n    fn(u32, u32) -> std::ops::RangeInclusive<u32> {\r\n        <std::ops::RangeInclusive<Idx>><u32>::new\r\n    },\r\n    u32,\r\n    std::ops::RangeInclusive<u32>,\r\n    std::iter::Rev<std::ops::RangeInclusive<u32>>,\r\n    futures::sink::Send<'r, futures::channel::mpsc::Sender<u32>>,\r\n    std::mem::PinMut<'s, futures::sink::Send<'t0, futures::channel::mpsc::Sender<u32>>>,\r\n    for<'t5, 't6> fn(\r\n        &'t5 mut std::mem::PinMut<'t6, futures::sink::Send<'t1, futures::channel::mpsc::Sender<u32>>>) -> \r\n            futures::Poll<<futures::sink::Send<'t1, futures::channel::mpsc::Sender<u32>> as futures::Future>::Output> {\r\n                std::future::poll_in_task_cx::<futures::sink::Send<'t1, futures::channel::mpsc::Sender<u32>>>\r\n            }, &'t2 mut std::mem::PinMut<'t3, futures::sink::Send<'t4, futures::channel::mpsc::Sender<u32>>>,\r\n            futures::Poll<std::result::Result<(), futures::channel::mpsc::SendError>>, ()\r\n}\r\n```\r\n\r\ncc @Zoxc ", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51995/timeline", "performed_via_github_app": null, "state_reason": "completed"}