{"url": "https://api.github.com/repos/rust-lang/rust/issues/80304", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80304/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80304/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80304/events", "html_url": "https://github.com/rust-lang/rust/issues/80304", "id": 773185751, "node_id": "MDU6SXNzdWU3NzMxODU3NTE=", "number": 80304, "title": "VecDeque hashes differently with ahash depending on how it's sliced", "user": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-12-22T19:19:02Z", "updated_at": "2020-12-22T19:21:05Z", "closed_at": "2020-12-22T19:20:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "(via https://github.com/rust-lang/hashbrown/issues/218#issuecomment-749707574)\r\nIt seems ahash gets different values for a rotated (non-contiguous) `VecDeque`:\r\n\r\n```rust\r\nuse ahash::AHasher;\r\nuse std::collections::VecDeque;\r\nuse std::hash::{Hash, Hasher};\r\n\r\nfn hash(x: &impl Hash) -> u64 {\r\n    let mut hasher = AHasher::default();\r\n    Hash::hash(x, &mut hasher);\r\n    hasher.finish()\r\n}\r\n\r\nfn main() {\r\n    let deque: VecDeque<i32> = (0..10).collect();\r\n    \r\n    let mut deque2 = deque.clone();\r\n    deque2.rotate_left(5);\r\n    deque2.rotate_left(5);\r\n    \r\n    assert_eq!(deque, deque2);\r\n    assert_eq!(hash(&deque), hash(&deque2)); // fails!\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=9726490b6330e3dfc8d9066db1eb0ffd))\r\n\r\n`Hash for VecDeque` hashes the length and then each part into `Hash::hash_slice`:\r\nhttps://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/library/alloc/src/collections/vec_deque/mod.rs#L2650-L2657\r\n\r\n`Hash::hash_slice` for integers casts to `&[u8]` and calls `Hasher::write`:\r\nhttps://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/library/core/src/hash/mod.rs#L555-L563\r\n\r\nAnd finally, `AHasher::write` feeds the length of that slice in first, so it is sensitive to how the deque is split up!\r\nhttps://github.com/tkaitchuck/aHash/blob/b175b79659da44a85a01d27cb1f9e697bcaff89a/src/fallback_hash.rs#L159-L163\r\nhttps://github.com/tkaitchuck/aHash/blob/b175b79659da44a85a01d27cb1f9e697bcaff89a/src/aes_hash.rs#L147-L150\r\n\r\nI think the `Hash` and `Hasher` behavior is underspecified here. I would assume that `Hash::hash_slice` is supposed to have the same effect as just hashing each item in the slice separately, without the length, as the default implementation does. But what about `Hasher::write` -- is `write(&[1, 2, 3, 4])` supposed to match `write(&[1, 2]); write(&[3, 4]);`?\r\n\r\n- If both `Hash::hash_slice` and `Hasher::write` may consider length, then `Hash for VecDeque` is incorrect.\r\n- If `Hash::hash_slice` should hash without length, but `Hasher::write` is allowed to use length, then the integer optimization is incorrect.\r\n- If both `Hash::hash_slice` and `Hasher::write` are supposed to be independent of length, hashing identically whether it's one big slice or any partitioned slices of the same data, then `AHasher::write` is incorrect.", "closed_by": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80304/timeline", "performed_via_github_app": null, "state_reason": "completed"}