{"url": "https://api.github.com/repos/rust-lang/rust/issues/110715", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110715/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110715/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110715/events", "html_url": "https://github.com/rust-lang/rust/issues/110715", "id": 1679975121, "node_id": "I_kwDOAAsO6M5kImLR", "number": 110715, "title": "Moving #[rustc_box] to move_val_init intrinsic", "user": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 28, "created_at": "2023-04-23T10:47:24Z", "updated_at": "2023-05-29T13:45:58Z", "closed_at": "2023-05-20T06:26:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have opened this issue for discussing how to move `#[rustc_box]` (introduced by #97293) to something more simpler. My original proposal (reproduced below) was to use `builtin #` syntax for it, but through the discussion, it was brought up that there used to be a `move_val_init` intrinsic which would have been a good fit. Initial tests, [both with a `builtin # ptr_write`](https://github.com/rust-lang/rust/issues/110715#issuecomment-1520371986) and [`move_val_init` directly](https://github.com/rust-lang/rust/issues/110715#issuecomment-1520944870) showed promising results: it can deliver the same codegen as `#[rustc_box]` can, which means that one could switch the `vec![]` macro from using `#[rustc_box]` towards `Box::new_uninit_slice`, then writing into the pointer with `move_val_init`, then calling `asusme_init` on it.\r\n\r\nRight now, `#[rustc_box]` desugars to THIR `ExprKind::Box`, which desugars to code calling `exchange_malloc`, followed by `ShallowInitBox`, a construct specifically added to support `box` syntax, and then followed by something equivalent to `move_val_init`: a write into the pointer without putting the value into a local first.\r\n\r\nA move to using `move_val_init` directly would simplify the code that desugars `#[rustc_box]` at the cost of the code in the `vec![]` macro. To me that seems like a win because it would make the code around creating boxes less *special*.\r\n\r\n-----------------\r\nOriginal proposal:\r\n\r\n<details>\r\n\r\nI have opened this issue for discussing how to move `#[rustc_box]` (introduced by #97293) to `builtin#` syntax (#110680).\r\n\r\nMy original proposal was [here](https://github.com/rust-lang/rust/pull/108516#issuecomment-1451188868), to introduce `builtin#ptr_write`, but I made that proposal while being unaware of [`ShallowInitBox`](https://github.com/rust-lang/rust/pull/108516#issuecomment-1451188868). So maybe we'd need both `builtin#ptr_write` and `builtin#shallow_init_box`.\r\n\r\nThe options I see:\r\n\r\n* Add `builtin#box` instead of `#[rustc_box]`, replacing it 1:1.\r\n* Add `builtin#ptr_write` and `builtin#shallow_init_box`, first doing latter and then writing into it doing former. But what would the latter return on a type level? A `Box<T>`?\r\n* Add `builtin#ptr_write` to then do in the Vec macro: first `Box::new_uninit_slice`, then `builtin#ptr_write`, then call `assume_init` on it. This [mirrors the proposal by oli-obk](https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TerminatorKind.3A.3ABox.60.20to.20MIR.20compiler-team.23460/near/252060168) but the issue seems to be very poor codegen ([new](https://godbolt.org/z/6eej3qx5P) godbolt example based on the one linked in the ShallowInitBox MCP). The issue might just be due to the `.write` call though.\r\n* Only add `builtin#shallow_init_box`. I'm not sure this will work though as the magic seems to hide in the pointer writing.\r\n\r\nMaybe one could first add `builtin#ptr_write` without touching `#[rustc_box]` and then check if the godbolt example still has that behaviour?\r\n\r\n</details>\r\n\r\ncc @nbdd0121 @DrMeepster @clubby789 @oli-obk \r\n\r\nEarlier discussion: https://github.com/rust-lang/rust/pull/110694#issuecomment-1518773333 \r\n", "closed_by": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110715/timeline", "performed_via_github_app": null, "state_reason": "completed"}