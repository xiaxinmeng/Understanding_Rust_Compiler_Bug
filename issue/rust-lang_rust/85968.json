{"url": "https://api.github.com/repos/rust-lang/rust/issues/85968", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85968/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85968/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85968/events", "html_url": "https://github.com/rust-lang/rust/issues/85968", "id": 910681985, "node_id": "MDU6SXNzdWU5MTA2ODE5ODU=", "number": 85968, "title": "Pointer equality across allocations hits poorly specified parts of LLVM", "user": {"login": "mcy", "id": 2711945, "node_id": "MDQ6VXNlcjI3MTE5NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2711945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcy", "html_url": "https://github.com/mcy", "followers_url": "https://api.github.com/users/mcy/followers", "following_url": "https://api.github.com/users/mcy/following{/other_user}", "gists_url": "https://api.github.com/users/mcy/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcy/subscriptions", "organizations_url": "https://api.github.com/users/mcy/orgs", "repos_url": "https://api.github.com/users/mcy/repos", "events_url": "https://api.github.com/users/mcy/events{/privacy}", "received_events_url": "https://api.github.com/users/mcy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2021-06-03T16:51:07Z", "updated_at": "2021-06-27T15:44:11Z", "closed_at": "2021-06-26T10:37:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "While Rust defines raw pointer equality as a safe operation, it appears that this is not so in practice. Consider the\r\nfollowing reduced example:\r\n\r\n```rust\r\n#[inline]\r\npub fn eq_inline<T>(a: *const T, b: *const T) -> bool {\r\n    a == b\r\n}\r\n\r\n#[inline(never)]\r\npub fn eq_outline<T>(a: *const T, b: *const T) -> bool {\r\n    a == b\r\n}\r\n\r\n#[inline(never)]\r\npub fn always_false() -> bool {\r\n    let (a, b) = (0, 0);\r\n    eq_inline((&a as *const i32).wrapping_add(1), &b)\r\n}\r\n\r\n#[inline(never)]\r\npub fn always_true() -> bool {\r\n    let (a, b) = (0, 0);\r\n    eq_outline((&a as *const i32).wrapping_add(1), &b)\r\n}\r\n\r\npub fn main() {\r\n    println!(\"{}, {}\", always_false(), always_true())\r\n}\r\n```\r\n[(Godbolt)](https://godbolt.org/z/xc44Pn9zx)\r\n\r\nOn Rust 1.52.0 with `rustc -O`, this prints `false, true`; this is entirely dependent on the inlining attrs on the\r\ntwo `eq` functions. `always_false` is optimized to a constant return, while `always_true` passes identical\r\npointers (`rsp + 4`, in this case) into `eq_outline`, which does a blind comparison.\r\n\r\nThe LLVM LangRef is unfortunately silent on this, but it appears that the root of the problem is that Rust emits the following code for pointer equality:\r\n```llvm\r\ndefine ptr_eq(i32* readnone %a, i32* readnone %b) i1 {\r\n  %eq = icmp eq i32 %a, %b\r\n  ret i1 %eq\r\n}\r\n```\r\n\r\nWhile this *looks* fine, Clang emits the *exact same IR* for comparisons of `int*`, and Clang is entitled to (and, in fact, makes) this optimization, because poitner comparisons across provenance domains is UB in C/C++. This makes me believe this is true UB, and not implementation-defined behavior.\r\n\r\nIn short, it is incorrect to lower pointer comparison, with Rust semantics, to `icmp eq T*`. I don't know of a workaround, since LLVM explicitly transmits provenance through `bitcast` and `ptrtoint`; in fact, `icmp` of pointers is defined as `icmp` of the pointers passed through `ptrtoint`. The solution may simply be to add some kind of optimization barrier to LLVM; who knows?\r\n\r\nhttps://github.com/rust-lang/rust/issues/54685 is a related but distinct issue, since it's about comparison of function pointers, which are inherently global variables; the fix in LLVM is only relevant to globals, AFAICT.", "closed_by": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85968/timeline", "performed_via_github_app": null, "state_reason": "completed"}