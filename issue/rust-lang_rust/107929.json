{"url": "https://api.github.com/repos/rust-lang/rust/issues/107929", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107929/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107929/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107929/events", "html_url": "https://github.com/rust-lang/rust/issues/107929", "id": 1580922041, "node_id": "I_kwDOAAsO6M5eOvS5", "number": 107929, "title": "Crash, invalid free in monterey", "user": {"login": "kali", "id": 53657, "node_id": "MDQ6VXNlcjUzNjU3", "avatar_url": "https://avatars.githubusercontent.com/u/53657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kali", "html_url": "https://github.com/kali", "followers_url": "https://api.github.com/users/kali/followers", "following_url": "https://api.github.com/users/kali/following{/other_user}", "gists_url": "https://api.github.com/users/kali/gists{/gist_id}", "starred_url": "https://api.github.com/users/kali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kali/subscriptions", "organizations_url": "https://api.github.com/users/kali/orgs", "repos_url": "https://api.github.com/users/kali/repos", "events_url": "https://api.github.com/users/kali/events{/privacy}", "received_events_url": "https://api.github.com/users/kali/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 123111, "node_id": "MDU6TGFiZWwxMjMxMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-macos", "name": "O-macos", "color": "6e6ec0", "default": false, "description": "Operating system: macOS"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2023-02-11T16:48:04Z", "updated_at": "2023-04-22T13:58:26Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following code, compiled optimized on MacOS Monterey, x64, will crash with an invalid free message.\r\n\r\nCopy as a `monterey-crasher.rs` file.\r\n\r\n```rust\r\n#![allow(dead_code)]\r\n#[derive(Copy, Clone)]\r\nenum BinOp {\r\n    Min,\r\n}\r\n#[derive(Clone, Copy)]\r\nenum OutputStoreSpec {\r\n    View(usize),\r\n    Strides([isize; 5])\r\n}\r\n#[derive(Clone)]\r\nenum AttrOrInput {\r\n    Attr(Box<()>),\r\n    Input(usize),\r\n}\r\n#[derive(Clone)]\r\nenum ProtoFusedSpec {\r\n    BinScalar(AttrOrInput, BinOp),\r\n    BinPerRow(AttrOrInput, BinOp),\r\n    BinPerCol(AttrOrInput, BinOp),\r\n    AddRowColProducts(AttrOrInput, AttrOrInput),\r\n    AddUnicast(OutputStoreSpec, AttrOrInput),\r\n    Store,\r\n}\r\nfn main() {\r\n    let mut stuff = vec!(vec!(1));\r\n    for i in 0..50000 {\r\n        let len = (stuff[i].len() * 134775813) % 4096;\r\n        stuff.push((1234123414u32..).take(len).collect());\r\n    }\r\n    std::mem::drop(stuff);\r\n    let _ = vec!((Box::new(()), vec![ProtoFusedSpec::Store])).as_slice().to_owned();\r\n}\r\n```\r\n\r\nThis shell script will loop 100 times over the generated executable, and will likely crash in the first couple of runs.\r\n\r\n```bash\r\n#!/bin/sh\r\n\r\nset -e\r\n\r\nrustc -C opt-level=3 monterey-crasher.rs -o monterey-crasher\r\nfor i in `seq 1 100`\r\ndo\r\n    echo $i\r\n    ./monterey-crasher\r\ndone\r\n```\r\n\r\n### Meta\r\n\r\nReproducible with *any stable version since 1.65*. As far as we can tell it is a regression that appeared first with https://github.com/rust-lang/rust/commit/512bd84f51ba6963c84506f408840e5341abe499\r\n\r\nOutput \r\n\r\n```\r\n[...]\r\n1\r\nmonterey-crasher(80086,0x113e0d600) malloc: *** error for object 0x600001850d80: pointer being freed was not allocated\r\nmonterey-crasher(80086,0x113e0d600) malloc: *** set a breakpoint in malloc_error_break to debug\r\n```\r\n\r\nCrash stack trace In LLDB:\r\n\r\n```\r\n* thread #1, name = 'main', queue = 'com.apple.main-thread', stop reason = signal SIGABRT\r\n  * frame #0: 0x00007ff80c60f00e libsystem_kernel.dylib`__pthread_kill + 10\r\n    frame #1: 0x00007ff80c6451ff libsystem_pthread.dylib`pthread_kill + 263\r\n    frame #2: 0x00007ff80c590d24 libsystem_c.dylib`abort + 123\r\n    frame #3: 0x00007ff80c46e357 libsystem_malloc.dylib`malloc_vreport + 551\r\n    frame #4: 0x00007ff80c47152b libsystem_malloc.dylib`malloc_report + 151\r\n    frame #5: 0x00000001000024c6 monterey-crasher`monterey_crasher::main::h6d331bef051cd6b6 + 742\r\n    frame #6: 0x0000000100002046 monterey-crasher`std::sys_common::backtrace::__rust_begin_short_backtrace::h1f33f2adc2752b09 + 6\r\n    frame #7: 0x000000010000201c monterey-crasher`std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h05acf7e35f5cbc7f + 12\r\n    frame #8: 0x000000010001c2a4 monterey-crasher`std::rt::lang_start_internal::hd56d2fa7efb2dd60 [inlined] core::ops::function::impls::_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$F$GT$::call_once::h2302f1d25ef2ca9b at function.rs:606:13 [opt]\r\n    frame #9: 0x000000010001c2a1 monterey-crasher`std::rt::lang_start_internal::hd56d2fa7efb2dd60 [inlined] std::panicking::try::do_call::h6695e32a593de2cc at panicking.rs:483:40 [opt]\r\n    frame #10: 0x000000010001c2a1 monterey-crasher`std::rt::lang_start_internal::hd56d2fa7efb2dd60 [inlined] std::panicking::try::hd4a93095627721a9 at panicking.rs:447:19 [opt]\r\n    frame #11: 0x000000010001c2a1 monterey-crasher`std::rt::lang_start_internal::hd56d2fa7efb2dd60 [inlined] std::panic::catch_unwind::he41b3dba63feca94 at panic.rs:137:14 [opt]\r\n    frame #12: 0x000000010001c2a1 monterey-crasher`std::rt::lang_start_internal::hd56d2fa7efb2dd60 [inlined] std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::hbf45583011495a61 at rt.rs:148:48 [opt]\r\n    frame #13: 0x000000010001c2a1 monterey-crasher`std::rt::lang_start_internal::hd56d2fa7efb2dd60 [inlined] std::panicking::try::do_call::ha3e6b3edab7da449 at panicking.rs:483:40 [opt]\r\n    frame #14: 0x000000010001c2a1 monterey-crasher`std::rt::lang_start_internal::hd56d2fa7efb2dd60 [inlined] std::panicking::try::hd4e0f354bf7022b9 at panicking.rs:447:19 [opt]\r\n    frame #15: 0x000000010001c2a1 monterey-crasher`std::rt::lang_start_internal::hd56d2fa7efb2dd60 [inlined] std::panic::catch_unwind::h1035b163871a4269 at panic.rs:137:14 [opt]\r\n    frame #16: 0x000000010001c2a1 monterey-crasher`std::rt::lang_start_internal::hd56d2fa7efb2dd60 at rt.rs:148:20 [opt]\r\n    frame #17: 0x000000010000260c monterey-crasher`main + 44\r\n    frame #18: 0x000000010007952e dyld`start + 462\r\n\r\n```\r\n\r\n### Notes\r\n\r\n* Bug was discovered in tract, in conjuction with a big pile of code from ndarray. It took a huge amount of effort reducing, some manual, some semi-automatic to obtain a small test case without unsafe code (which was innocent). tract contribution to the test-case is the ProtoFusedSpec enumeration. ndarray main contribution to the issue is the `.as_slice().to_owned()` bit. One of the breakthrough was realizing that most of the remaining code was actually just putting non-zero bits in memory. At that point we could remove most of the remaining stuff and replace it by the pseudo-random allocation at the beginning of the main.\r\n*  ~~We don't know if it reproduces on arm64 monterey (not tried, could not find a machine).~~ We could only reproduce on x86-64 Monterey, not arm64 Monterey, not Ventura.\r\n* rustc commit (https://github.com/rust-lang/rust/commit/512bd84f51ba6963c84506f408840e5341abe499) obtained by bisecting points to something related to enumeration and niche discriminant optimisation. We checked the layout, dumped the ProtoFusedSpec structure without finding anything suspect. @lqd also dumped the rustc internal structure for the enumeration representation https://gist.github.com/lqd/bb93888ee24540072141afd6b93df6f3 . The gist comes with the test-case variant at the time of dumping, we were able to reduce it more since (including alteration to the actual problematic enumeration).\r\n* Various sanitizing tools have failed us. Varnish and address sanitizer, as well as XCode MallocGard were unable to come with anything more interesting than the LLDB stack trace.\r\n* We also tried instrumenting rustc global allocator to try to figure out if the address was actually invalid. But the bug is very elusive. We could not reproduce it with the instrumentation.\r\n* What's specific with Monterey ? Apparently, MacOS Monterey has two variants of the system allocator. The MallocNanoZone environment variable seems to control which variant is used. Many applications have run into problems with the default choice and set `MallocNanoZone=0` in the environment as a workaround. VScode actually does it: the bug does not appear in its terminal (unless running with `env -i` to discard the switch).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107929/timeline", "performed_via_github_app": null, "state_reason": null}