{"url": "https://api.github.com/repos/rust-lang/rust/issues/46298", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46298/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46298/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46298/events", "html_url": "https://github.com/rust-lang/rust/issues/46298", "id": 276944317, "node_id": "MDU6SXNzdWUyNzY5NDQzMTc=", "number": 46298, "title": "Wasm traps on saturating float casts", "user": {"login": "hanna-kruppe", "id": 2311707, "node_id": "MDQ6VXNlcjIzMTE3MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2311707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hanna-kruppe", "html_url": "https://github.com/hanna-kruppe", "followers_url": "https://api.github.com/users/hanna-kruppe/followers", "following_url": "https://api.github.com/users/hanna-kruppe/following{/other_user}", "gists_url": "https://api.github.com/users/hanna-kruppe/gists{/gist_id}", "starred_url": "https://api.github.com/users/hanna-kruppe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hanna-kruppe/subscriptions", "organizations_url": "https://api.github.com/users/hanna-kruppe/orgs", "repos_url": "https://api.github.com/users/hanna-kruppe/repos", "events_url": "https://api.github.com/users/hanna-kruppe/events{/privacy}", "received_events_url": "https://api.github.com/users/hanna-kruppe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-11-27T09:04:43Z", "updated_at": "2018-07-13T17:51:59Z", "closed_at": "2017-12-02T00:15:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In https://internals.rust-lang.org/t/help-us-benchmark-saturating-float-casts/6231/19 @alexcrichton reported that wasm traps on out-of-range floats being cast to integers. This is a problem for the current implementation of saturating float casts, which executes the cast unconditionally and then only uses it if the input was in range. [LLVM says](http://llvm.org/docs/LangRef.html#fptosi-to-instruction) that the *result* is undefined (i.e., `undef`) rather than the *behavior* being undefined. On all other targets I'm aware of, the operation just gets lowered to an instruction that returns *some* integer result for those cases.\r\n\r\nI've checked the wasm spec, [which says](https://webassembly.github.io/spec/exec/numerics.html#op-trunc-u):\r\n\r\n> [truncating a float to an integer] is not defined for NaNs, infinities, or values for which the result is out of range.\r\n\r\nAs wasm doesn't want everything-goes UB as in C or LLVM or Rust, \"undefined\" operations are specified to trap. So this is intentional in wasm, which makes sense to me. They'd rather trap than return a questionable result, and they certainly can't tolerate hardware-dependent behavior.\r\n\r\nSo how do we work around this? We could emit branches instead of unconditionally executing the cast, at the cost of a more complicated implementation (need to juggle multiple basic blocks) and other downsides (branch predictor pressure, input-data-dependent performance). It might also be an argument in favor of making the saturation explicit in MIR rather than doing it during LLVM IR codegen:\r\n- Would avoid introducing multiple basic blocks for one cast rvalue in MIR (could be simpler)\r\n- Would avoid duplicating work if e.g. Cranelift copies the wasm behavior and we eventually get a Cranelift backend.\r\n\r\ncc @sunfishcode @eddyb", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46298/timeline", "performed_via_github_app": null, "state_reason": "completed"}