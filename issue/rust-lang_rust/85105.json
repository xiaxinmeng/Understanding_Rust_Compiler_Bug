{"url": "https://api.github.com/repos/rust-lang/rust/issues/85105", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85105/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85105/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85105/events", "html_url": "https://github.com/rust-lang/rust/issues/85105", "id": 882017242, "node_id": "MDU6SXNzdWU4ODIwMTcyNDI=", "number": 85105, "title": "Index argument for simd_insert no longer a const", "user": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1904923801, "node_id": "MDU6TGFiZWwxOTA0OTIzODAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-cranelift", "name": "A-cranelift", "color": "f7e101", "default": false, "description": "Things relevant to the [future] cranelift backend"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2021-05-09T08:45:18Z", "updated_at": "2022-11-21T17:55:24Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nlet a = _mm_setr_epi16(0, 1, 2, 3, 4, 5, 6, 7);                                                 \r\nlet r = _mm_insert_epi16(a, 9, 0);                                                              \r\nlet e = _mm_setr_epi16(9, 1, 2, 3, 4, 5, 6, 7);                                                 \r\nassert_eq_m128i(r, e);\r\n```\r\n\r\nI expected to see this happen: The index argument 9 is given as direct constant to the `simd_insert` intrinsic.\r\n\r\nInstead, this happened: The cast of the index argument to u32 is stored in a local and then this local is passed to `simd_insert`. This causes cg_clif to error out as it requires a constant.\r\n\r\n```rust\r\n#[rustc_legacy_const_generics(2)]\r\npub unsafe fn _mm_insert_epi16<const IMM8: i32>(a: __m128i, i: i32) -> __m128i {                    \r\n    static_assert_imm3!(IMM8);                                                                      \r\n    transmute(simd_insert(a.as_i16x8(), IMM8 as u32, i as i16))                                     \r\n}\r\n```\r\n\r\n```rust\r\n[src/constant.rs:450] fx.mir = Body {\r\n    basic_blocks: [\r\n        BasicBlockData {\r\n            statements: [\r\n                StorageLive(_3),\r\n                StorageLive(_4),\r\n                StorageLive(_5),\r\n                _5 = _1,\r\n                StorageLive(_9),\r\n                StorageLive(_10),\r\n                _10 = move _5,\r\n                _9 = _10,\r\n                StorageDead(_10),\r\n            ],\r\n            terminator: Some(\r\n                Terminator {\r\n                    source_info: // ...\r\n                    kind: _4 = std::intrinsics::transmute::<std::arch::x86_64::__m128i, core::core_arch::simd::i16x8>(move _9) -> bb3,\r\n                },\r\n            ),\r\n            is_cleanup: false,\r\n        },\r\n        BasicBlockData {\r\n            statements: [\r\n                StorageDead(_7),\r\n                StorageDead(_6),\r\n                StorageDead(_4),\r\n            ],\r\n            terminator: Some(\r\n                Terminator {\r\n                    source_info: // ...\r\n                    kind: _0 = std::intrinsics::transmute::<core::core_arch::simd::i16x8, std::arch::x86_64::__m128i>(move _3) -> bb2,\r\n                },\r\n            ),\r\n            is_cleanup: false,\r\n        },\r\n        BasicBlockData {\r\n            statements: [\r\n                StorageDead(_3),\r\n            ],\r\n            terminator: Some(\r\n                Terminator {\r\n                    source_info: // ...\r\n                    kind: return,\r\n                },\r\n            ),\r\n            is_cleanup: false,\r\n        },\r\n        BasicBlockData {\r\n            statements: [\r\n                StorageDead(_9),\r\n                StorageDead(_5),\r\n                StorageLive(_6),\r\n                _6 = const IMM8 as u32 (Misc),\r\n                StorageLive(_7),\r\n                StorageLive(_8),\r\n                _8 = _2,\r\n                _7 = move _8 as i16 (Misc),\r\n                StorageDead(_8),\r\n            ],\r\n            terminator: Some(\r\n                Terminator {\r\n                    source_info: // ...\r\n                    kind: _3 = core::core_arch::simd_llvm::simd_insert::<core::core_arch::simd::i16x8, i16>(move _4, move _6, move _7) -> bb1,\r\n                },\r\n            ),\r\n            is_cleanup: false,\r\n        },\r\n    ],\r\n    phase: Optimization,\r\n    source: MirSource {\r\n        instance: Item(\r\n            WithOptConstParam {\r\n                did: DefId(2:13246 ~ core[8231]::core_arch::x86::sse2::_mm_insert_epi16),\r\n                const_param_did: None,\r\n            },\r\n        ),\r\n        promoted: None,\r\n    },\r\n    local_decls: [\r\n        LocalDecl {\r\n            ty: std::arch::x86_64::__m128i,\r\n            // ...\r\n        },\r\n        LocalDecl {\r\n            ty: std::arch::x86_64::__m128i,\r\n            // ...\r\n        },\r\n        LocalDecl {\r\n            ty: i32,\r\n            // ...\r\n        },\r\n        LocalDecl {\r\n            ty: core::core_arch::simd::i16x8,\r\n            // ...\r\n        },\r\n        LocalDecl {\r\n            ty: core::core_arch::simd::i16x8,\r\n            // ...\r\n        },\r\n        LocalDecl {\r\n            ty: std::arch::x86_64::__m128i,\r\n            // ...\r\n        },\r\n        LocalDecl {\r\n            ty: u32,\r\n            // ...\r\n        },\r\n        LocalDecl {\r\n            ty: i16,\r\n            // ...\r\n        },\r\n        LocalDecl {\r\n            ty: i32,\r\n            // ...\r\n        },\r\n        LocalDecl {\r\n            ty: std::arch::x86_64::__m128i,\r\n            // ...\r\n        },\r\n        LocalDecl {\r\n            ty: std::arch::x86_64::__m128i,\r\n            // ...\r\n        },\r\n    ],\r\n    var_debug_info: [\r\n        VarDebugInfo {\r\n            name: \"a\",\r\n            source_info: // ...\r\n            value: _1,\r\n        },\r\n        VarDebugInfo {\r\n            name: \"i\",\r\n            source_info: // ...\r\n            value: _2,\r\n        },\r\n        VarDebugInfo {\r\n            name: \"self\",\r\n            source_info: // ...\r\n            value: _5,\r\n        },\r\n        VarDebugInfo {\r\n            name: \"self\",\r\n            source_info: // ...\r\n            value: _10,\r\n        },\r\n    ],\r\n    required_consts: [\r\n        const core::core_arch::macros::ValidateConstImm::<IMM8, 0_i32, 7_i32>::VALID,\r\n    ],\r\n    // ...\r\n}\r\n[src/constant.rs:451] operand = move _6\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.54.0-nightly (881c1ac40 2021-05-08)\r\nbinary: rustc\r\ncommit-hash: 881c1ac408d93bb7adaa3a51dabab9266e82eee8\r\ncommit-date: 2021-05-08\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.54.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85105/timeline", "performed_via_github_app": null, "state_reason": null}