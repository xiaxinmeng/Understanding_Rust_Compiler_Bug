{"url": "https://api.github.com/repos/rust-lang/rust/issues/19350", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19350/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19350/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19350/events", "html_url": "https://github.com/rust-lang/rust/issues/19350", "id": 50240453, "node_id": "MDU6SXNzdWU1MDI0MDQ1Mw==", "number": 19350, "title": "std::ascii reform", "user": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-11-27T00:05:47Z", "updated_at": "2014-11-27T13:21:03Z", "closed_at": "2014-11-27T13:21:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Following up on #19194 and discussion with @aturon, I took a look at how things in the `std::ascii` module are used in the Rust repository and in Servo.\n\nThe `std::ascii::Ascii` type is a newtype of `u8` that enforces (unless `unsafe` code is used) that the value is in the ASCII range, similar to `char` with `u32` and the range of Unicode scalar values. `[Ascii]` is naturally a string of bytes entirely in the ASCII range.\n\nUsing the type system like this  to enforce data invariants is interesting, but in practice `[Ascii]` is not that useful. Data (such as from the network) is rarely guaranteed to be ASCII only nor is it desirable to remove or replace non-ASCII bytes, even if ASCII-range-only operations are used. (E.g. \u201cASCII case-insensitivity\u201d is common in HTML and CSS.)\n\nEvery single use of the `Ascii` type that I\u2019ve found was only to use the `to_lowercase` or `to_uppercase` method, then immediately convert back to `u8` or `char`.\n\nTherefore, I suggest:\n- Moving the `Ascii` type as well as the `AsciiCast`, `OwnedAsciiCast`, `AsciiStr`, and `IntoBytes` traits into a new `ascii` Cargo package on crates.io\n- Marking them as deprecated in `std::ascii`, and removing them at some point before 1.0\n- Reworking the rest of the module to provide the functionality on `u8`, `char`, `[u8]` and `str`. Specifically:\n  - Keep the `AsciiExt` and `OwnedAsciiExt` traits. (Maybe rename them?)\n  - Implement `AsciiExt` on `char` and `u8` (in addition to the existing impls for `str` and `[u8]`)\n  - Add `is_ascii() -> bool`. Maybe on `AsciiExt`? It\u2019s mostly used on `u8` and `char`, but it also makes sense on `str` and `[u8]`.\n  - _Maybe_ `is_ascii_lowercase`, `is_ascii_uppercase`, `is_ascii_alphabetic`, or `is_ascii_alphanumeric` could be useful, but I\u2019d be fine with dropping them and reconsider if someone asks for them. The same result can be achieved with `.is_ascii() &&` and the corresponding `UnicodeChar` method, which in most cases has an ASCII fast path.\n  - I don\u2019t think the remaining `Ascii` methods are valuable.\n    - `is_digit` and `is_hex` are identical to `Char::is_digit(10)` and `Char::is_digit(16)`.\n    - `is_blank`, `is_control`, `is_graph`, `is_print`, and `is_punctuation` are never used.\n\nHow does this sound? I can help with the implementation work. Should this go through the RFC process?\n", "closed_by": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19350/timeline", "performed_via_github_app": null, "state_reason": "completed"}