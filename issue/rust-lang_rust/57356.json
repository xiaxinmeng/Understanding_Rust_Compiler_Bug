{"url": "https://api.github.com/repos/rust-lang/rust/issues/57356", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57356/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57356/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57356/events", "html_url": "https://github.com/rust-lang/rust/issues/57356", "id": 396184027, "node_id": "MDU6SXNzdWUzOTYxODQwMjc=", "number": 57356, "title": "MergeFunctions LLVM pass can generate invalid function calls under calling convention", "user": {"login": "peterhj", "id": 303726, "node_id": "MDQ6VXNlcjMwMzcyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/303726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterhj", "html_url": "https://github.com/peterhj", "followers_url": "https://api.github.com/users/peterhj/followers", "following_url": "https://api.github.com/users/peterhj/following{/other_user}", "gists_url": "https://api.github.com/users/peterhj/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterhj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterhj/subscriptions", "organizations_url": "https://api.github.com/users/peterhj/orgs", "repos_url": "https://api.github.com/users/peterhj/repos", "events_url": "https://api.github.com/users/peterhj/events{/privacy}", "received_events_url": "https://api.github.com/users/peterhj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-01-05T17:30:22Z", "updated_at": "2019-03-22T18:30:14Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Basically, the MergeFunctions LLVM pass can rewrite functions to generate calls that are not valid under the calling convention of the target, e.g. `extern \"ptx-kernel\"` functions should not call other `extern \"ptx-kernel\"` functions in NVPTX.\r\n\r\nThis is an LLVM bug, described here (thanks @nikic): https://bugs.llvm.org/show_bug.cgi?id=40232. A PR also adds a target option and a -Z flag to control MergeFunctions: https://github.com/rust-lang/rust/pull/57268.\r\n\r\nExample: in the following Rust source, the functions `foo` and `bar` get merged by MergeFunctions:\r\n\r\n```rust\r\n#![crate_type = \"lib\"]\r\n\r\n#![feature(abi_ptx)]\r\n#![feature(lang_items)]\r\n#![feature(link_llvm_intrinsics)]\r\n#![feature(naked_functions)]\r\n#![feature(no_core)]\r\n\r\n#![no_core]\r\n\r\n#[lang = \"sized\"]\r\ntrait Sized {}\r\n\r\n#[lang = \"copy\"]\r\ntrait Copy {}\r\n\r\n#[allow(improper_ctypes)]\r\nextern \"C\" {\r\n  #[link_name = \"llvm.nvvm.barrier0\"]\r\n  fn syncthreads() -> ();\r\n}\r\n\r\n#[inline]\r\npub unsafe fn _syncthreads() -> () {\r\n  syncthreads()\r\n}\r\n\r\n#[no_mangle]\r\npub unsafe extern \"ptx-kernel\" fn foo() {\r\n  _syncthreads();\r\n  _syncthreads();\r\n}\r\n\r\n#[no_mangle]\r\npub unsafe extern \"ptx-kernel\" fn bar() {\r\n  _syncthreads();\r\n  _syncthreads();\r\n}\r\n```\r\n\r\nto yield the incorrect PTX assembly, as the `call.uni bar` instruction is not valid since a kernel is calling another kernel (note this requires `rustc -Z merge-functions=trampolines` from the above PR):\r\n\r\n```\r\n//\r\n// Generated by LLVM NVPTX Back-End\r\n//\r\n\r\n.version 3.2\r\n.target sm_35\r\n.address_size 64\r\n\r\n\t// .globl\tbar             // -- Begin function bar\r\n                                        // @bar\r\n.visible .entry bar()\r\n{\r\n\r\n\r\n// %bb.0:                               // %start\r\n\tbar.sync \t0;\r\n\tbar.sync \t0;\r\n\tret;\r\n                                        // -- End function\r\n}\r\n\t// .globl\tfoo             // -- Begin function foo\r\n.visible .entry foo()                   // @foo\r\n{\r\n\r\n\r\n// %bb.0:\r\n\t{ // callseq 0, 0\r\n\t.reg .b32 temp_param_reg;\r\n\t// XXX: `call.uni bar` is not a valid call!\r\n\tcall.uni \r\n\tbar, \r\n\t(\r\n\t);\r\n\t} // callseq 0\r\n\tret;\r\n                                        // -- End function\r\n}\r\n```\r\n\r\nDisabling MergeFunctions (e.g. using `rustc -Z merge-functions=disabled`) yields correct PTX assembly:\r\n\r\n```\r\n//\r\n// Generated by LLVM NVPTX Back-End\r\n//\r\n\r\n.version 3.2\r\n.target sm_35\r\n.address_size 64\r\n\r\n\t// .globl\tfoo             // -- Begin function foo\r\n                                        // @foo\r\n.visible .entry foo()\r\n{\r\n\r\n\r\n// %bb.0:                               // %start\r\n\tbar.sync \t0;\r\n\tbar.sync \t0;\r\n\tret;\r\n                                        // -- End function\r\n}\r\n\t// .globl\tbar             // -- Begin function bar\r\n.visible .entry bar()                   // @bar\r\n{\r\n\r\n\r\n// %bb.0:                               // %start\r\n\tbar.sync \t0;\r\n\tbar.sync \t0;\r\n\tret;\r\n                                        // -- End function\r\n}\r\n```\r\n\r\nP.S. Currently the default operation of MergeFunctions is to emit function aliases which are not supported by NVPTX, so controlling MergeFunctions via the `merge-functions` flag is necessary to generate any of the PTX assembly above.\r\n\r\n## Meta\r\n\r\nI'm on a patched rustc so this may not be so helpful, but here it is anyway:\r\n\r\n`rustc --version --verbose`:\r\n\r\n    rustc 1.33.0-nightly (fb86d604b 2018-12-27)\r\n    binary: rustc\r\n    commit-hash: fb86d604bf65c3becd16180b56267a329cf268d5\r\n    commit-date: 2018-12-27\r\n    host: x86_64-unknown-linux-gnu\r\n    release: 1.33.0-nightly\r\n    LLVM version: 8.0", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57356/timeline", "performed_via_github_app": null, "state_reason": null}