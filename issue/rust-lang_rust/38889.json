{"url": "https://api.github.com/repos/rust-lang/rust/issues/38889", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38889/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38889/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38889/events", "html_url": "https://github.com/rust-lang/rust/issues/38889", "id": 199281525, "node_id": "MDU6SXNzdWUxOTkyODE1MjU=", "number": 38889, "title": "Subtle breaking change with match patterns on uninhabited types", "user": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 147085028, "node_id": "MDU6TGFiZWwxNDcwODUwMjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-nightly", "name": "regression-from-stable-to-nightly", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to nightly."}, {"id": 178802147, "node_id": "MDU6TGFiZWwxNzg4MDIxNDc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-needs-decision", "name": "I-needs-decision", "color": "e11d21", "default": false, "description": "Issues in need of decision."}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-01-06T20:31:22Z", "updated_at": "2017-01-25T20:42:04Z", "closed_at": "2017-01-25T20:42:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If an enum contained an uninhabited type, it is now valid to ignore matching that variant (and in fact encouraged, since include that pattern or `_` now receives a warning). \r\n\r\nI'll take a reduced example from hyper: `hyper::Error`\r\n\r\nCurrently, `hyper::Error` includes a `__DontMatchMe` variant as part of its way of saying that the `Error` enum could grow more variants. People should instead use a `_` pattern. This is the best one can do to imitate `std::io::ErrorKind`, but without the additional `#[unstable]` attribute protecting it.\r\n\r\nSince the `__DontMatchMe` variant should **never** actually be created, I filled it with an uninhabited type, so allow the optimizer to remove arms using it in `std::error::Error` and other such impls.\r\n\r\nWith rustc 1.14, this is correct:\r\n```rust\r\nenum Void {}\r\nenum Error {\r\n    Io,\r\n    Utf8,\r\n    Parse,\r\n    __DontMatchMe(Void),\r\n}\r\n\r\nfn foo(x: Error) {\r\n    match x {\r\n        Error::Io => (),\r\n        Error::Utf8 => (),\r\n        Error::Parse => (),\r\n        _ => (),\r\n    }\r\n}\r\n```\r\n\r\nWith nightly after https://github.com/rust-lang/rust/pull/38069 was landed, the above will warn that the user should remove the `_` pattern. If they do so, then the contract that `__DontMatchMe` was supposed to provide is broken. With the `_` removed, it looks like every variant is handled, and so any upgrade in hyper that adds a new variant will break this code. And that code will look innocent, where as before at least someone you need to explitictly do a `match e { Error::__DontMatchMe => () }` and know that it could break.\r\n\r\nI can remove the uninhabited type in hyper, but this behavior change does feel like one of the subtlely breaking kind.", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38889/timeline", "performed_via_github_app": null, "state_reason": "completed"}