{"url": "https://api.github.com/repos/rust-lang/rust/issues/61017", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61017/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61017/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61017/events", "html_url": "https://github.com/rust-lang/rust/issues/61017", "id": 446807160, "node_id": "MDU6SXNzdWU0NDY4MDcxNjA=", "number": 61017, "title": "Handle fully enclosed multiline spans gracefully in emitter", "user": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-21T20:21:19Z", "updated_at": "2022-12-15T20:00:02Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently the solution to overlapping multiline spans is _correct_, but doesn't handle spans that are completely enclosed by others in any way, simply using span ordering and growing towards the left as needed. The following is a representative example of the problem:\r\n\r\n```\r\nerror[E0308]: if and else have incompatible types\r\n    --> src/libsyntax/parse/parser.rs:2640:33\r\n     |\r\n2636 |                                 let (span, msg) = if self.token == token::Token::Eof && self.is_subparser {\r\n     |    _______________________________________________-\r\n2637 |   |                                 (self.sess.source_map().next_point(self.span),\r\n     |  _|_________________________________-\r\n2638 | | |                                  \"expected expression, found end of macro arguments\")\r\n     | |_|_____________________________________________________________________________________- expected because of this\r\n2639 |   |                             } else {\r\n2640 | / |                                 (self.span, format!(\r\n2641 | | |                                     \"expected expression, found {}\",\r\n2642 | | |                                     self.this_token_descr(),\r\n2643 | | |                                 ))\r\n     | |_|__________________________________^ expected &str, found struct `std::string::String`\r\n2644 |   |                             };\r\n     |   |_____________________________- if and else have incompatible types\r\n     |\r\n     = note: expected type `(syntax_pos::span_encoding::Span, &str)`\r\n                found type `(syntax_pos::span_encoding::Span, std::string::String)`\r\n```\r\n\r\nIdeally, the emitter should handle this case by identifying that there are overlapping spans that are fully enclosed and special case the output to make it easier to read:\r\n\r\n```\r\nerror[E0308]: if and else have incompatible types\r\n    --> src/libsyntax/parse/parser.rs:2640:33\r\n     |\r\n2636 |                                let (span, msg) = if self.token == token::Token::Eof && self.is_subparser {\r\n     |  ________________________________________________-\r\n2637 | | /                                (self.sess.source_map().next_point(self.span),\r\n2638 | | |                                 \"expected expression, found end of macro arguments\")\r\n     | | |____________________________________________________________________________________- expected because of this\r\n2639 | |                              } else {\r\n2640 | | /                                (self.span, format!(\r\n2641 | | |                                    \"expected expression, found {}\",\r\n2642 | | |                                    self.this_token_descr(),\r\n2643 | | |                                ))\r\n     | | |_________________________________^ expected &str, found struct `std::string::String`\r\n2644 | |                              };\r\n     | |______________________________- if and else have incompatible types\r\n     |\r\n     = note: expected type `(syntax_pos::span_encoding::Span, &str)`\r\n                found type `(syntax_pos::span_encoding::Span, std::string::String)`\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61017/timeline", "performed_via_github_app": null, "state_reason": null}