{"url": "https://api.github.com/repos/rust-lang/rust/issues/88537", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88537/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88537/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88537/events", "html_url": "https://github.com/rust-lang/rust/issues/88537", "id": 984057664, "node_id": "MDU6SXNzdWU5ODQwNTc2NjQ=", "number": 88537, "title": "NLL non lexical lifetime not handling a (seemingly) simple case", "user": {"login": "rib", "id": 235361, "node_id": "MDQ6VXNlcjIzNTM2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/235361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rib", "html_url": "https://github.com/rib", "followers_url": "https://api.github.com/users/rib/followers", "following_url": "https://api.github.com/users/rib/following{/other_user}", "gists_url": "https://api.github.com/users/rib/gists{/gist_id}", "starred_url": "https://api.github.com/users/rib/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rib/subscriptions", "organizations_url": "https://api.github.com/users/rib/orgs", "repos_url": "https://api.github.com/users/rib/repos", "events_url": "https://api.github.com/users/rib/events{/privacy}", "received_events_url": "https://api.github.com/users/rib/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-08-31T16:30:59Z", "updated_at": "2021-09-01T16:26:00Z", "closed_at": "2021-09-01T05:05:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n    async fn connect_peripheral(&self, peripheral_handle: PlatformPeripheralHandle) -> Result<()> {\r\n        let winrt_peripheral = match self.inner.peripherals_by_handle.get(&peripheral_handle) {\r\n            Some(p) => p,\r\n            None => {\r\n                log::error!(\"Spurious connection request with unknown peripheral handle {:?}\", peripheral_handle);\r\n                return Err(Error::Other(anyhow!(\"Unknown peripheral\")));\r\n            }\r\n        };\r\n\r\n        let device = BluetoothLEDevice::FromBluetoothAddressAsync(winrt_peripheral.address)\r\n            .map_err(|_| Error::PeripheralUnreachable)?\r\n            .await\r\n            .map_err(|_| Error::PeripheralUnreachable)?;\r\n\r\n        // XXX: be careful not to introduce a ref cycle here...\r\n        // (notably we don't pass a winrt session reference to the status handler)\r\n        let platform_bus = self.inner.platform_bus.clone();\r\n        let peripheral_address = winrt_peripheral.address;\r\n\r\n        // XXX: I thought non-lexical lifetimes were suppose to fix this kind of issue... :/\r\n        //\r\n        // This scope has been added because otherwise the compiler complains that\r\n        // the connection_status_handler (which is not Send safe) might be used after the\r\n        // final await... the await that is at the end of the function where it should\r\n        // surely be possible for the compiler to recognise that this doesn't need to live\r\n        // that long?\r\n        //\r\n        // Also the handler is moved into device.ConnectionStatusChanged() so I also don't\r\n        // understand why the lifetime isn't seen as ending there?\r\n       // UNCOMMENT brace to fix...\r\n       // {\r\n            // Scope introduced to keep the borrow checker happy\r\n            let connection_status_handler =\r\n                TypedEventHandler::new(move |sender: &Option<BluetoothLEDevice>, _| {\r\n                    if let Some(sender) = sender {\r\n                        match sender.ConnectionStatus() {\r\n                            Ok(BluetoothConnectionStatus::Connected) => {\r\n                                trace!(\"Peripheral connected: handle={:?}/{}\", peripheral_handle, MAC(peripheral_address).to_string());\r\n                                let _ = platform_bus.send(PlatformEvent::PeripheralConnected { peripheral_handle } );\r\n                            },\r\n                            Ok(BluetoothConnectionStatus::Disconnected) => {\r\n                                trace!(\"Peripheral connected: handle={:?}/{}\", peripheral_handle, MAC(peripheral_address).to_string());\r\n                                let _ = platform_bus.send(PlatformEvent::PeripheralDisconnected { peripheral_handle } );\r\n                            },\r\n                            Ok(status) => {\r\n                                log::error!(\"Spurious bluetooth connection status: {:?}: handle={:?}/{}\", status, peripheral_handle, MAC(peripheral_address).to_string());\r\n                            }\r\n                            Err(err) => {\r\n                                log::error!(\"Failure while querying bluetooth connection status: {:?}: handle={:?}/{}\",\r\n                                            err, peripheral_handle, MAC(peripheral_address).to_string())\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Ok(())\r\n                });\r\n        { // COMMENT out this brace to expand scope around connection_status_handler \r\n            let mut winrt_peripheral_guard = winrt_peripheral.inner.write().unwrap();\r\n            winrt_peripheral_guard.connection_status_handler = Some(device.ConnectionStatusChanged(connection_status_handler)\r\n                .map_err(|_| Error::Other(anyhow!(\"Could not add connection status handler\")))?);\r\n        }\r\n\r\n        self.get_gatt_services(&device).await\r\n    }\r\n```\r\n\r\nI expected this to compile but it only compiles if I expand the scope that covers the locked write near the end so it encompasses `connection_status_handler` because otherwise the compiler will complain that `connection_status_handler` is not `Send` safe and might be used after the final `await`.\r\n\r\nConsidering that the await is at the end of the function (so there's no code that could possibly require `connection_status_handler` to live that long, and also as `connection_status_handler` is moved into `device.ConnectionStatusChanged(connection_status_handler)` I don't really understand why the borrow checker isn't recognising that `connection_status_handler` doesn't need to live beyond the `await` here?\r\n\r\nI tried adding an explicit `drop(connection_status_handler);` just before the last line and even then the compiler still says it's not dropped until the end of the function scope and gives the same error.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.56.0-nightly (5d6804469 2021-08-30)\r\nbinary: rustc\r\ncommit-hash: 5d6804469d80aaf26f98090ae016af45e267f58f\r\ncommit-date: 2021-08-30\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.56.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n<details><summary>Compiler Error</summary>\r\n<p>\r\n\r\n```\r\nerror: future cannot be sent between threads safely\r\n   --> src\\winrt\\session.rs:358:99\r\n    |\r\n358 |       async fn connect_peripheral(&self, peripheral_handle: PlatformPeripheralHandle) -> Result<()> {\r\n    |  ___________________________________________________________________________________________________^\r\n359 | |         let winrt_peripheral = match self.inner.peripherals_by_handle.get(&peripheral_handle) {\r\n360 | |             Some(p) => p,\r\n361 | |             None => {\r\n...   |\r\n409 | |         self.get_gatt_services(&device).await\r\n410 | |     }\r\n    | |_____^ future created by async block is not `Send`\r\n    |\r\n    = help: within `impl futures::Future`, the trait `std::marker::Send` is not implemented for `NonNull<c_void>`\r\nnote: future is not `Send` as this value is used across an await\r\n   --> src\\winrt\\session.rs:409:9\r\n    |\r\n378 |         let connection_status_handler =\r\n    |             ------------------------- has type `TypedEventHandler<BluetoothLEDevice, IInspectable>` which is not `Send`\r\n...\r\n409 |         self.get_gatt_services(&device).await\r\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ await occurs here, with `connection_status_handler` maybe used later\r\n410 |     }\r\n    |     - `connection_status_handler` is later dropped here\r\n    = note: required for the cast to the object type `dyn futures::Future<Output = std::result::Result<(), Error>> + std::marker::Send`\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n\r\nFor reference this is the some of windows-rs generated code for the TypedEventHandler struct:\r\n\r\n<details><summary>Generated code</summary>\r\n<p>\r\n\r\n```rust\r\n        #[repr(transparent)]\r\n        #[derive(\r\n            :: std :: cmp :: PartialEq,\r\n            :: std :: cmp :: Eq,\r\n            :: std :: clone :: Clone,\r\n            :: std :: fmt :: Debug,\r\n        )]\r\n        pub struct TypedEventHandler<TSender, TResult>(\r\n            ::windows::IUnknown,\r\n            ::std::marker::PhantomData<TSender>,\r\n            ::std::marker::PhantomData<TResult>,\r\n        )\r\n        where\r\n            TSender: ::windows::RuntimeType + 'static,\r\n            TResult: ::windows::RuntimeType + 'static;\r\n        impl<\r\n                TSender: ::windows::RuntimeType + 'static,\r\n                TResult: ::windows::RuntimeType + 'static,\r\n            > TypedEventHandler<TSender, TResult>\r\n        {\r\n            pub fn new<\r\n                F: FnMut(\r\n                        &<TSender as ::windows::Abi>::DefaultType,\r\n                        &<TResult as ::windows::Abi>::DefaultType,\r\n                    ) -> ::windows::Result<()>\r\n                    + 'static,\r\n            >(\r\n                invoke: F,\r\n            ) -> Self {\r\n                let com = TypedEventHandler_box::<TSender, TResult, F> {\r\n                    vtable: &TypedEventHandler_box::<TSender, TResult, F>::VTABLE,\r\n                    count: ::windows::RefCount::new(1),\r\n                    invoke,\r\n                };\r\n                unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }\r\n            }\r\n            pub fn Invoke<'a>(\r\n                &self,\r\n                sender: impl ::windows::IntoParam<'a, TSender>,\r\n                args: impl ::windows::IntoParam<'a, TResult>,\r\n            ) -> ::windows::Result<()> {\r\n                let this = self;\r\n                unsafe {\r\n                    (::windows::Interface::vtable(this).3)(\r\n                        ::windows::Abi::abi(this),\r\n                        sender.into_param().abi(),\r\n                        args.into_param().abi(),\r\n                    )\r\n                    .ok()\r\n                }\r\n            }\r\n        }\r\n```\r\n</p>\r\n</details>", "closed_by": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88537/timeline", "performed_via_github_app": null, "state_reason": "completed"}