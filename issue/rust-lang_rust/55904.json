{"url": "https://api.github.com/repos/rust-lang/rust/issues/55904", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55904/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55904/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55904/events", "html_url": "https://github.com/rust-lang/rust/issues/55904", "id": 379976992, "node_id": "MDU6SXNzdWUzNzk5NzY5OTI=", "number": 55904, "title": "proc_macro support for reading files/strings to spanned TokenStream", "user": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 2079070889, "node_id": "MDU6TGFiZWwyMDc5MDcwODg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-proc-macros", "name": "A-proc-macros", "color": "f7e101", "default": false, "description": "Area: Procedural macros"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-11-12T22:25:53Z", "updated_at": "2023-06-15T18:01:42Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, as far as I am aware, there is no way to get spans for tokens parsed from a source other than the macro's callsite, and no good way to tell rustc & cargo a procedural macro depends on another file. It would be nice for macros which want to load other files to enable this.\r\n\r\nIt'd be nice to support some mechanism for loading a file as a `TokenStream`. Ideally this would take the form of a method in the crate directly parsing a file / string to a `TokenStream`. For example:\r\n\r\n1. A function to load a file as a `TokenStream` with accurate span info etc, e.g.\r\n   ```rust\r\n   fn lex_file(path: &Path) -> io::Result<TokenStream>;\r\n   ```\r\n\r\n2. A function to parse a string with a given filename. This might need an additional mechanism to register the source file as a dependency, e.g.\r\n   ```rust\r\n   fn lex_str(src: &str, filename: &Path) -> Result<TokenStream, LexErr>;\r\n   fn add_path_dependency(path: &Path) -> ...;\r\n   ```\r\n\r\nTo make it generally useful & able to implement something like `include!()` we'd probably also want/need something like #54725 to get the file to load relative to.\r\n\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":null}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55904/reactions", "total_count": 13, "+1": 12, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55904/timeline", "performed_via_github_app": null, "state_reason": null}