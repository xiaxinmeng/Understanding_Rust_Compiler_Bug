{"url": "https://api.github.com/repos/rust-lang/rust/issues/46552", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46552/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46552/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46552/events", "html_url": "https://github.com/rust-lang/rust/issues/46552", "id": 280017822, "node_id": "MDU6SXNzdWUyODAwMTc4MjI=", "number": 46552, "title": "non well-formed symbol mangling and bad symbol tracking issue", "user": {"login": "m4b", "id": 1920204, "node_id": "MDQ6VXNlcjE5MjAyMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1920204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m4b", "html_url": "https://github.com/m4b", "followers_url": "https://api.github.com/users/m4b/followers", "following_url": "https://api.github.com/users/m4b/following{/other_user}", "gists_url": "https://api.github.com/users/m4b/gists{/gist_id}", "starred_url": "https://api.github.com/users/m4b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m4b/subscriptions", "organizations_url": "https://api.github.com/users/m4b/orgs", "repos_url": "https://api.github.com/users/m4b/repos", "events_url": "https://api.github.com/users/m4b/events{/privacy}", "received_events_url": "https://api.github.com/users/m4b/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-07T06:34:14Z", "updated_at": "2022-05-16T11:38:35Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "So, here's my ultimate desire for this eventually so that stuff like this doesn't happen again:\r\n\r\n1. There is a single, canonical name mangler in rust. Anything that ever emits a binary symbol uses this mangler, without exception, and can't modify the bytes; it and it alone are responsible for the ABI facing names.\r\n2. Even better, this is enforced in the types, and only at the last minute is the raw str pointer or bytes passed to the backend to emit ABI names\r\n3. The rust testing suite verifies that every symbol in a generated binary are validly mangled.\r\n\r\nYou might be surprised to learn that 1 is not true in practice.  So I've opened this issue for tracking various cases I've found, and what follows are the specimens:\r\n\r\n# Examples\r\n\r\nAs of rustc 1.22, on the following program compiled via `rustc hello.rs`:\r\n\r\n```rust\r\nfn main() {\r\n    println!(\"hello\");\r\n}\r\n```\r\n\r\nI am seeing the following issues:\r\n\r\n## Spurious thread locals\r\n\r\nsymbol: `.tdata._ZN3std10sys_common11thread_info11THREAD_INFO7__getit5__KEY17hc69464ef038d7e85E`\r\n\r\n```\r\n40    LOCAL      TLS         .tdata._ZN3std10sys_common11thread_info11THREAD_INFO7__getit5__KEY17hc69464ef038d7e85E  0x0       .tdata(20)              0x0\r\n```\r\n\r\nExample source location: https://github.com//m4b/rust/blob/383e313d181eceb3155eb1089d448144f830ee23/src/libstd/sys_common/thread_info.rs#L21\r\n\r\n#### Why incorrect\r\n\r\n1. does not start with _ZN.\r\n\r\n2. This looks like its meant to be the section name. The exact same TLS variable _does_ occur later on, with the same address:\r\n\r\n```\r\n40    LOCAL      TLS         std::sys_common::thread_info::THREAD_INFO::__getit::__KEY::hc69464ef038d7e85                            0x30      .tdata(20)              0x0\r\n```\r\n\r\nbut correctly mangled.\r\n\r\nThis could be an llvm bug; I have verified this only seems to occur to variables generated via the `thread_local!` macro, and furthermore, is inside of the crate `.rlib` static archive. (you can output this by something like:\r\n\r\n```\r\nar p libstd-fe0b1b991511fcaa.rlib std-fe0b1b991511fcaa.std0.rust-cgu.o > libstd.o\r\n```\r\n\r\n(your `libstd-<hash>` will vary of course tho)\r\n\r\nE.g. here is every symbol with either `.tdata` in its name or referencing that section in rust 1.22 libstd object file (inside `.rlib`):\r\n\r\n```\r\nsections:\r\n  3473   .tdata._ZN3std11collections4hash3map11RandomState3new4KEYS7__getit5__KEY17h98644cd8ad1049dbE                                                                                                                                                                                                                                             SHT_PROGBITS   WRITE ALLOC TLS        0x42030     0x0    0x20                       0x0       0x8    \r\n  3543   .tdata._ZN3std2io5stdio12LOCAL_STDOUT7__getit5__KEY17h53b08df14c3cb33dE                                                                                                                                                                                                                                                                  SHT_PROGBITS   WRITE ALLOC TLS        0x42440     0x0    0x28                       0x0       0x20   \r\n  3627   .tdata._ZN3std10sys_common11thread_info11THREAD_INFO7__getit5__KEY17hc69464ef038d7e85E                                                                                                                                                                                                                                                   SHT_PROGBITS   WRITE ALLOC TLS        0x42840     0x0    0x30                       0x0       0x20   \r\n  3647   .tdata._ZN3std9panicking12LOCAL_STDERR7__getit5__KEY17h715a8958c4cd11efE                                                                                                                                                                                                                                                                 SHT_PROGBITS   WRITE ALLOC TLS        0x42980     0x0    0x28                       0x0       0x20   \r\n  3659   .tdata._ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit5__KEY17h01a9f669bb84595fE                                                                                                                                                                                                                                              SHT_PROGBITS   WRITE ALLOC TLS        0x42a18     0x0    0x18                       0x0       0x8    \r\n  3665   .tdata._ZN3std4rand10thread_rng14THREAD_RNG_KEY7__getit5__KEY17h8ec4cb227256fe90E                                                                                                                                                                                                                                                        SHT_PROGBITS   WRITE ALLOC TLS        0x42a80     0x0    0x10                       0x0       0x8    \r\n  symbols:\r\n                 0    LOCAL      TLS         .tdata._ZN3std10sys_common11thre\u2026   0x0       .tdata._ZN3std10sys_common11thread_info11THREAD_INFO7__getit5__KEY17hc69464ef038d7e85E(3627)                                                                                                                                                                                                                                                  0x0    \r\n                 0    LOCAL      TLS         .tdata._ZN3std11collections4hash\u2026   0x0       .tdata._ZN3std11collections4hash3map11RandomState3new4KEYS7__getit5__KEY17h98644cd8ad1049dbE(3473)                                                                                                                                                                                                                                            0x0    \r\n                 0    LOCAL      TLS         .tdata._ZN3std2io5stdio12LOCAL_S\u2026   0x0       .tdata._ZN3std2io5stdio12LOCAL_STDOUT7__getit5__KEY17h53b08df14c3cb33dE(3543)                                                                                                                                                                                                                                                                 0x0    \r\n                 0    LOCAL      TLS         .tdata._ZN3std4rand10thread_rng1\u2026   0x0       .tdata._ZN3std4rand10thread_rng14THREAD_RNG_KEY7__getit5__KEY17h8ec4cb227256fe90E(3665)                                                                                                                                                                                                                                                       0x0    \r\n                 0    LOCAL      TLS         .tdata._ZN3std9panicking12LOCAL_\u2026   0x0       .tdata._ZN3std9panicking12LOCAL_STDERR7__getit5__KEY17h715a8958c4cd11efE(3647)                                                                                                                                                                                                                                                                0x0    \r\n                 0    LOCAL      TLS         .tdata._ZN3std9panicking18update\u2026   0x0       .tdata._ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit5__KEY17h01a9f669bb84595fE(3659)                                                                                                                                                                                                                                             0x0    \r\n                 0    LOCAL      TLS         _ZN3std10sys_common11thread_info\u2026   0x30      .tdata._ZN3std10sys_common11thread_info11THREAD_INFO7__getit5__KEY17hc69464ef038d7e85E(3627)                                                                                                                                                                                                                                                  0x0    \r\n                 0    LOCAL      TLS         _ZN3std11collections4hash3map11R\u2026   0x20      .tdata._ZN3std11collections4hash3map11RandomState3new4KEYS7__getit5__KEY17h98644cd8ad1049dbE(3473)                                                                                                                                                                                                                                            0x0    \r\n                 0    LOCAL      TLS         _ZN3std2io5stdio12LOCAL_STDOUT7_\u2026   0x28      .tdata._ZN3std2io5stdio12LOCAL_STDOUT7__getit5__KEY17h53b08df14c3cb33dE(3543)                                                                                                                                                                                                                                                                 0x0    \r\n                 0    LOCAL      TLS         _ZN3std4rand10thread_rng14THREAD\u2026   0x10      .tdata._ZN3std4rand10thread_rng14THREAD_RNG_KEY7__getit5__KEY17h8ec4cb227256fe90E(3665)                                                                                                                                                                                                                                                       0x0    \r\n                 0    LOCAL      TLS         _ZN3std9panicking12LOCAL_STDERR7\u2026   0x28      .tdata._ZN3std9panicking12LOCAL_STDERR7__getit5__KEY17h715a8958c4cd11efE(3647)                                                                                                                                                                                                                                                                0x0    \r\n                 0    LOCAL      TLS         _ZN3std9panicking18update_panic_\u2026   0x18      .tdata._ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit5__KEY17h01a9f669bb84595fE(3659)                                                     \r\n```\r\n\r\nThe spurious symbols will never be gc'd by the linker, and they will never get referenced; so they're just taking up space (albeit not much).\r\n\r\n## backtrace.rs nested static\r\n\r\nsymbol: `_ZN3std10sys_common9backtrace11log_enabled7ENABLED17hc187c5b3618ccb2eE.0.0`\r\n\r\nExample source location: https://github.com//m4b/rust/blob/383e313d181eceb3155eb1089d448144f830ee23/src/libstd/sys_common/backtrace.rs#L148\r\n\r\n### Why Incorrect\r\n\r\nNo mangled symbol is allowed to have characters after the final `E`, but this has `.0.0`\r\n\r\n```\r\n2622e8    LOCAL      OBJECT      _ZN3std10sys_common9backtrace11log_enabled7ENABLED17hc187c5b3618ccb2eE.0.0 0x8       .bss(27)                0x0 \r\n```\r\n\r\nI have definitely seen other examples of this, and with different numbers at the end; I think it has to do with nested statics somehow.\r\n\r\n# Nightly\r\n\r\nOn nightly it looks like there has been a pretty substantial regression w.r.t. valid symbol names being output:\r\n\r\n```\r\nbingrep -D  -t 65 hello-nightly  | grep -e \"E...[[:digit:]] \"\r\n26ce98    GLOBAL     OBJECT      ref.7.llvm.D64EB761                                                  0x18      .data.rel.ro(23)        0x2\r\n26e160    GLOBAL     OBJECT      _ZN3std3sys4unix2os8ENV_LOCK17hbf5ac5d1fa9db31cE.llvm.D64EB761       0x28      .data(26)               0x2    \r\n 5bf60    GLOBAL     OBJECT      str.4.llvm.6C0E7CF1                                                  0x1a      .rodata(16)             0x2    \r\n 5bf7a    GLOBAL     OBJECT      str.5.llvm.6C0E7CF1                                                  0x0       .rodata(16)             0x2    \r\n 548f0    GLOBAL     FUNC        _ZN4core3ptr13drop_in_place17hd0b6a86080ab42c4E.llvm.F74E5798        0x6       .text(14)               0x2    \r\n 5bf80    GLOBAL     OBJECT      ref.7.llvm.6C0E7CF1                                                  0x40      .rodata(16)             0x2    \r\n 5d1d0    GLOBAL     OBJECT      str.a.llvm.F74E5798                                                  0x1f      .rodata(16)             0x2    \r\n26d920    GLOBAL     OBJECT      panic_bounds_check_loc.e.llvm.F74E5798                               0x18      .data.rel.ro(23)        0x2  \r\n```\r\n\r\nThis runs the whole gamut of functions, global memory, read only strings, all apparently (_sometimes_) having extra characters appended.\r\n\r\n# Special Mentions\r\n\r\n`{{closure}}` in symbols are useless, and very hard to print in debuggers.\r\n\r\nE.g.:\r\n\r\n```\r\n47d80    LOCAL      FUNC        core::fmt::Formatter::pad_integral::{{closure}}::h6acabc645f5ef2ad 0x10f     .text(14)               0x0\r\n```\r\n\r\nwhich is from the use of this closure:\r\n\r\nhttps://github.com//m4b/rust/blob/383e313d181eceb3155eb1089d448144f830ee23/src/libcore/fmt/mod.rs#L1108\r\n\r\nThe compiler knows the line number (it will even omit this sometimes like `@[closure; mod.rs:1108]` or whatever); why not just output that instead of `{{closure}}`?\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46552/timeline", "performed_via_github_app": null, "state_reason": null}