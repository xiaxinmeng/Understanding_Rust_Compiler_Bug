{"url": "https://api.github.com/repos/rust-lang/rust/issues/89948", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89948/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89948/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89948/events", "html_url": "https://github.com/rust-lang/rust/issues/89948", "id": 1028027263, "node_id": "I_kwDOAAsO6M49RnN_", "number": 89948, "title": "`SpecExtend` for `TrustedLen` is unsound", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2021-10-16T11:36:52Z", "updated_at": "2022-10-01T17:00:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\n#![feature(trusted_len)]\r\nuse std::iter::TrustedLen;\r\nuse std::marker::PhantomData;\r\n\r\npub struct MaybeTrusted<'a, I>(I, PhantomData<fn(&'a ()) -> &'a ()>);\r\n\r\nimpl<'a, I: Iterator> Iterator for MaybeTrusted<'a, I> {\r\n    type Item = I::Item;\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        self.0.next()\r\n    }\r\n\r\n    fn size_hint(&self) -> (usize, Option<usize>) {\r\n        self.0.size_hint()\r\n    }\r\n}\r\n\r\n/// This is safe, as a `'static` version of this struct can only be created\r\n/// using a trusted iterator.\r\nunsafe impl<I: Iterator> TrustedLen for MaybeTrusted<'static, I> {}\r\nimpl<I: TrustedLen> MaybeTrusted<'static, I> {\r\n    pub fn new(value: I) -> Self {\r\n        MaybeTrusted(value, PhantomData)\r\n    }\r\n}\r\n\r\n/// `I` might not implement `TrustedLen`, but that's ok,\r\n/// because you can't get a `MaybeTrusted<'static, I>` from this.\r\npub fn not_trusted<I: Iterator, T>(i: I, f: impl for<'a> FnOnce(MaybeTrusted<'a, I>) -> T) -> T {\r\n    f(MaybeTrusted(i, PhantomData))\r\n}\r\n\r\n// In a separate crate:\r\n\r\nstruct Liar(usize);\r\nimpl Iterator for Liar {\r\n    type Item = usize;\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        if self.0 < 10000 {\r\n            self.0 += 1;\r\n            Some(self.0)\r\n        } else {\r\n            None\r\n        }\r\n    }\r\n\r\n    fn size_hint(&self) -> (usize, Option<usize>) {\r\n        // happy little accident, but ok, doesn't implemented `TrustedLen`.\r\n        let len = self.0.saturating_sub(10000);\r\n        (len, Some(len))\r\n    }\r\n}\r\n\r\nfn main() {\r\n    not_trusted(Liar(0), |iter| iter.collect::<Vec<_>>());\r\n}\r\n```\r\nresults in:\r\n```\r\nSegmentation fault (core dumped)\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89948/timeline", "performed_via_github_app": null, "state_reason": null}