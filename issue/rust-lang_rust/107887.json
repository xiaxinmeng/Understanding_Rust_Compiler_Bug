{"url": "https://api.github.com/repos/rust-lang/rust/issues/107887", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107887/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107887/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107887/events", "html_url": "https://github.com/rust-lang/rust/issues/107887", "id": 1579674118, "node_id": "I_kwDOAAsO6M5eJ-oG", "number": 107887, "title": "`project` for trait object bound candidates is incomplete", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}, {"id": 4806740265, "node_id": "LA_kwDOAAsO6M8AAAABHoEJKQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-trait-system-refactor", "name": "WG-trait-system-refactor", "color": "c2e0c6", "default": false, "description": "The Rustc Trait System Refactor Initiative"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-02-10T13:19:36Z", "updated_at": "2023-04-05T17:39:54Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler/rustc_trait_selection/src/traits/project.rs#L1255-L1262\r\n\r\nThis ignores impl candidates even if the builtin object candidate guides inference, which is incomplete. Incompleteness during coherence is unsound, outside of coherence it can merely result in bad and confusing errors.\r\n\r\n```rust\r\ntrait Trait<T> {\r\n    type Assoc: ?Sized;\r\n}\r\n\r\nimpl Trait<u32> for u32 {\r\n    type Assoc = u32;\r\n}\r\n\r\n// This would trigger the check for overlap between automatic and custom impl.\r\n// They actually don't overlap so an impl like this should remain possible\r\n// forever.\r\n//\r\n// impl Trait<u64> for dyn Trait<u32, Assoc = u32> {\r\n//     type Assoc =  dyn Trait<u32, Assoc = u32>;\r\n// }\r\ntrait Indirect<T: ?Sized> {}\r\nimpl Indirect<dyn Trait<u32, Assoc = u32>> for () {}\r\nimpl<T: ?Sized> Trait<u64> for T\r\nwhere\r\n    (): Indirect<T>,\r\n{\r\n    type Assoc = u32;\r\n}\r\n\r\ntrait Overlap<U> {}\r\n\r\nimpl<U> Overlap<U> for <dyn Trait<u32, Assoc = u32> as Trait<U>>::Assoc where\r\n    dyn Trait<u32, Assoc = u32>: Trait<U>\r\n{\r\n}\r\n\r\nimpl Overlap<u64> for u32 {}\r\n\r\nfn main() {}\r\n```\r\ncurrently results in \r\n```rust\r\nerror[E0277]: the trait bound `<(dyn Trait<u32, Assoc = u32> + 'static) as Trait<U>>::Assoc: Overlap<U>` is not satisfied\r\n  --> src/main.rs:26:24\r\n   |\r\n26 | impl<U> Overlap<U> for <dyn Trait<u32, Assoc = u32> as Trait<U>>::Assoc\r\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Overlap<U>` is not implemented for `<(dyn Trait<u32, Assoc = u32> + 'static) as Trait<U>>::Assoc`\r\n   |\r\nhelp: consider further restricting the associated type\r\n   |\r\n28 | dyn Trait<u32, Assoc = u32>: Trait<U>, <(dyn Trait<u32, Assoc = u32> + 'static) as Trait<U>>::Assoc: Overlap<U>\r\n   |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n```\r\nwhich is also buggy :grin: adding that bound to the impl makes it compile but now they actually don't overlap because using the first impl would result in an inductive cycle. In the future all traits will be coinductive at which point this would be unsound. But as that will only happen in the new solver, we're safe.\r\n\r\nIt does however guide inference in incorrect ways, causing an additional - hopefully merely theoretical - breaking change with the new solver:\r\n```rust\r\ntrait Trait<T> {\r\n    type Assoc: ?Sized;\r\n}\r\n\r\nimpl Trait<u32> for u32 {\r\n    type Assoc = u16;\r\n}\r\n\r\n// This would trigger the check for overlap between automatic and custom impl\r\n// They actually don't overlap so an impl like this should remain possible\r\n// forever.\r\n//\r\n// impl Trait<u64> for dyn Trait<u32, Assoc = u32> {\r\n//     type Assoc =  dyn Trait<u32, Assoc = u32>;\r\n// }\r\ntrait Indirect<T: ?Sized> {}\r\nimpl Indirect<dyn Trait<u32, Assoc = u32>> for () {}\r\nimpl<T: ?Sized> Trait<u64> for T\r\nwhere\r\n    (): Indirect<T>,\r\n{\r\n    type Assoc = dyn Trait<u32, Assoc = u32>;\r\n}\r\n\r\nfn yay<T: Trait<U> + ?Sized, U>(x: &'static T) -> &'static <T as Trait<U>>::Assoc {\r\n    todo!();\r\n}\r\n\r\nfn unconstrained<T>() -> T {\r\n    todo!()\r\n}\r\n\r\nfn should_be_ambig() {\r\n    let y: &'static dyn Trait<u32, Assoc = u32> = unconstrained();\r\n    let _ = yay::<dyn Trait<u32, Assoc = u32>, _>(y);\r\n    // The current solver incorrectly constrains `_` to `u32` here.\r\n}\r\n\r\nfn main() {\r\n    let y: &'static dyn Trait<u32, Assoc = u32> = unconstrained();\r\n    // let mut x = yay::<_, u64>(y); // compiles\r\n    let mut x = yay::<_, _>(y); // errors\r\n    x = y;\r\n}\r\n```\r\nincorrect inference results in the following error in `main`:\r\n```rust\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:43:9\r\n   |\r\n42 |     let mut x = yay::<_, _>(y); // errors\r\n   |                 -------------- expected due to this value\r\n43 |     x = y;\r\n   |         ^ expected `&u32`, found `&dyn Trait<u32, Assoc = u32>`\r\n   |\r\n   = note: expected reference `&u32`\r\n              found reference `&'static (dyn Trait<u32, Assoc = u32> + 'static)`\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107887/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107887/timeline", "performed_via_github_app": null, "state_reason": null}