{"url": "https://api.github.com/repos/rust-lang/rust/issues/58816", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58816/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58816/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58816/events", "html_url": "https://github.com/rust-lang/rust/issues/58816", "id": 415778117, "node_id": "MDU6SXNzdWU0MTU3NzgxMTc=", "number": 58816, "title": "It'd be useful to delay E0412 after type checking to improve suggestions", "user": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-28T19:08:24Z", "updated_at": "2020-08-30T22:54:25Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With the following code:\r\n\r\n```\r\nasync fn foo(i: usize, uri: Uri) -> Result<Duration, Error> {\r\n    let client = Client::new();\r\n    let now = Instant::now();\r\n    match await!(client.get(uri).timeout(Duration::from_secs(20))) {\r\n        Ok(_) => {\r\n            Ok(Instant::now() - now)\r\n        }\r\n        Err(err) => Err(err),\r\n    }\r\n}\r\n```\r\n\r\nthe diagnostic rightly complains about not knowing what `Error` is\r\n\r\n```\r\nerror[E0412]: cannot find type `Error` in this scope\r\n  --> src/main.rs:11:54\r\n   |\r\n11 | async fn foo(i: usize, uri: Uri) -> Result<Duration, Error> {\r\n   |                                                      ^^^^^ not found in this scope\r\nhelp: possible candidates are found in other modules, you can import them into scope\r\n   |\r\n5  | use core::fmt::Error;\r\n   |\r\n5  | use futures::core_reexport::fmt::Error;\r\n   |\r\n5  | use futures::io::Error;\r\n   |\r\n5  | use futures::rand_reexport::Error;\r\n   |\r\nand 10 other candidates\r\n```\r\n\r\nbut it could use the information gathered later to limit the suggestions. If we change `Error` in the return type to `()`, the output is\r\n\r\n```\r\nerror[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == std::result::Result<std::time::Duration, ()>`\r\n  --> src/main.rs:11:37\r\n   |\r\n11 | async fn foo(i: usize, uri: Uri) -> Result<Duration, ()> {\r\n   |                                     ^^^^^^^^^^^^^^^^^^^^ expected struct `tokio_timer::timeout::Error`, found ()\r\n   |\r\n   = note: expected type `std::result::Result<_, tokio_timer::timeout::Error<hyper::error::Error>>`\r\n              found type `std::result::Result<_, ()>`\r\n   = note: the return type of a function must have a statically known size\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58816/timeline", "performed_via_github_app": null, "state_reason": null}