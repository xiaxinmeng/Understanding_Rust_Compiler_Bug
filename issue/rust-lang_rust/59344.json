{"url": "https://api.github.com/repos/rust-lang/rust/issues/59344", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59344/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59344/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59344/events", "html_url": "https://github.com/rust-lang/rust/issues/59344", "id": 423829299, "node_id": "MDU6SXNzdWU0MjM4MjkyOTk=", "number": 59344, "title": "ICE on Hyper/Juniper Example", "user": {"login": "andreytkachenko", "id": 1773973, "node_id": "MDQ6VXNlcjE3NzM5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1773973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreytkachenko", "html_url": "https://github.com/andreytkachenko", "followers_url": "https://api.github.com/users/andreytkachenko/followers", "following_url": "https://api.github.com/users/andreytkachenko/following{/other_user}", "gists_url": "https://api.github.com/users/andreytkachenko/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreytkachenko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreytkachenko/subscriptions", "organizations_url": "https://api.github.com/users/andreytkachenko/orgs", "repos_url": "https://api.github.com/users/andreytkachenko/repos", "events_url": "https://api.github.com/users/andreytkachenko/events{/privacy}", "received_events_url": "https://api.github.com/users/andreytkachenko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-21T16:38:32Z", "updated_at": "2019-05-15T09:24:53Z", "closed_at": "2019-05-15T09:24:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to compile hyper/juniper example:\r\n```rust\r\n#[macro_use]\r\nextern crate juniper;\r\nextern crate futures;\r\n\r\nuse futures::future;\r\nuse std::sync::Arc;\r\nuse hyper::rt::{self, Future};\r\nuse hyper::service::service_fn;\r\nuse hyper::Method;\r\nuse hyper::{Body, Response, Server, StatusCode};\r\nuse juniper::{FieldResult, RootNode};\r\n\r\nstruct Context;\r\nimpl juniper::Context for Context {}\r\n\r\n#[derive(GraphQLObject)]\r\nstruct Human {\r\n    id: String,\r\n    home_planet: String,\r\n}\r\n\r\n#[derive(GraphQLInputObject)]\r\n#[graphql(description = \"A humanoid creature in the Star Wars universe\")]\r\nstruct NewHuman {\r\n    home_planet: String,\r\n}\r\n\r\npub struct QueryRoot;\r\n\r\ngraphql_object!(QueryRoot: Context |&self| {\r\n    field human(&executor, id: String) -> FieldResult<Human> {\r\n        Ok(Human{\r\n            id: \"1234\".to_owned(),\r\n            home_planet: \"Mars\".to_owned(),\r\n        })\r\n    }\r\n});\r\n\r\npub struct MutationRoot;\r\n\r\ngraphql_object!(MutationRoot: Context |&self| {\r\n    field createHuman(&executor, new_human: NewHuman) -> FieldResult<Human> {\r\n        Ok(Human {\r\n            id: \"1234\".to_owned(),\r\n            home_planet: new_human.home_planet,\r\n        })\r\n    }\r\n});\r\n\r\npub type Schema = RootNode<'static, QueryRoot, MutationRoot>;\r\n\r\nfn main() {\r\n    let addr = ([127, 0, 0, 1], 3000).into();\r\n    let ctx = Arc::new(Context);\r\n    let root_node = Arc::new(Schema::new(QueryRoot {}, MutationRoot {}));\r\n\r\n    let new_service = move || {\r\n        let root_node = root_node.clone();\r\n        let ctx = ctx.clone();\r\n\r\n        service_fn(move |req| -> Box<dyn Future<Item = _, Error = _> + Send> {\r\n            let root_node = root_node.clone();\r\n            let ctx = ctx.clone();\r\n\r\n            match (req.method(), req.uri().path()) {\r\n                (&Method::GET, \"/\") => Box::new(juniper_hyper::graphiql(\"/graphql\")),\r\n                (&Method::GET, \"/graphql\") => Box::new(juniper_hyper::graphql(root_node, ctx, req)),\r\n                (&Method::POST, \"/graphql\") => Box::new(juniper_hyper::graphql(root_node, ctx, req)),\r\n                _ => {\r\n                    let mut response = Response::new(Body::empty());\r\n                    *response.status_mut() = StatusCode::NOT_FOUND;\r\n\r\n                    Box::new(future::ok(response))\r\n                }\r\n            }\r\n        })\r\n    };\r\n    let server = Server::bind(&addr)\r\n        .serve(new_service)\r\n        .map_err(|e| eprintln!(\"server error: {}\", e));\r\n\r\n    rt::run(server);\r\n}\r\n```\r\n\r\nand got next ICE:\r\n```\r\nerror: internal compiler error: src/librustc_mir/borrow_check/nll/universal_regions.rs:745: cannot convert `ReScope(Node(238))` to a region vid\r\n\r\nthread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:634:9\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39\r\n   1: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:71\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n             at src/libstd/panicking.rs:197\r\n   3: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:211\r\n   4: rustc::util::common::panic_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:478\r\n   6: std::panicking::begin_panic\r\n   7: rustc_errors::Handler::bug\r\n   8: rustc::util::bug::opt_span_bug_fmt::{{closure}}\r\n   9: rustc::ty::context::tls::with_opt::{{closure}}\r\n  10: rustc::ty::context::tls::with_context_opt\r\n  11: rustc::ty::context::tls::with_opt\r\n  12: rustc::util::bug::opt_span_bug_fmt\r\n  13: rustc::util::bug::bug_fmt\r\n  14: rustc_mir::borrow_check::nll::universal_regions::UniversalRegionIndices::to_region_vid::{{closure}}\r\n  15: rustc_mir::borrow_check::nll::universal_regions::UniversalRegionIndices::to_region_vid\r\n  16: rustc_mir::borrow_check::nll::type_check::constraint_conversion::ConstraintConversion::convert_all\r\n  17: rustc_mir::borrow_check::nll::type_check::TypeChecker::prove_predicate\r\n  18: rustc_mir::borrow_check::nll::type_check::TypeChecker::check_rvalue\r\n  19: rustc_mir::borrow_check::nll::type_check::TypeChecker::typeck_mir\r\n  20: rustc_mir::borrow_check::nll::type_check::type_check\r\n  21: rustc_mir::borrow_check::nll::compute_regions\r\n  22: rustc_mir::borrow_check::do_mir_borrowck\r\n  23: rustc::ty::context::GlobalCtxt::enter_local\r\n  24: rustc_mir::borrow_check::mir_borrowck\r\n  25: rustc::ty::query::__query_compute::mir_borrowck\r\n  26: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::mir_borrowck>::compute\r\n  27: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  28: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  29: rustc_mir::borrow_check::nll::type_check::TypeChecker::check_rvalue\r\n  30: rustc_mir::borrow_check::nll::type_check::TypeChecker::typeck_mir\r\n  31: rustc_mir::borrow_check::nll::type_check::type_check\r\n  32: rustc_mir::borrow_check::nll::compute_regions\r\n  33: rustc_mir::borrow_check::do_mir_borrowck\r\n  34: rustc::ty::context::GlobalCtxt::enter_local\r\n  35: rustc_mir::borrow_check::mir_borrowck\r\n  36: rustc::ty::query::__query_compute::mir_borrowck\r\n  37: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::mir_borrowck>::compute\r\n  38: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  39: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  40: rustc_mir::borrow_check::nll::type_check::TypeChecker::check_rvalue\r\n  41: rustc_mir::borrow_check::nll::type_check::TypeChecker::typeck_mir\r\n  42: rustc_mir::borrow_check::nll::type_check::type_check\r\n  43: rustc_mir::borrow_check::nll::compute_regions\r\n  44: rustc_mir::borrow_check::do_mir_borrowck\r\n  45: rustc::ty::context::GlobalCtxt::enter_local\r\n  46: rustc_mir::borrow_check::mir_borrowck\r\n  47: rustc::ty::query::__query_compute::mir_borrowck\r\n  48: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::mir_borrowck>::compute\r\n  49: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  50: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  51: rustc::ty::<impl rustc::ty::context::TyCtxt>::par_body_owners\r\n  52: rustc::util::common::time\r\n  53: rustc_interface::passes::analysis\r\n  54: rustc::ty::query::__query_compute::analysis\r\n  55: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::analysis>::compute\r\n  56: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  57: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  58: rustc::ty::context::tls::enter_global\r\n  59: rustc_interface::passes::BoxedGlobalCtxt::access::{{closure}}\r\n  60: rustc_interface::passes::create_global_ctxt::{{closure}}\r\n  61: rustc_interface::passes::BoxedGlobalCtxt::enter\r\n  62: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  63: std::thread::local::LocalKey<T>::with\r\n  64: scoped_tls::ScopedKey<T>::set\r\n  65: syntax::with_globals\r\nquery stack during panic:\r\n#0 [mir_borrowck] processing `main::{{closure}}#0::{{closure}}#0`\r\n#1 [mir_borrowck] processing `main::{{closure}}#0`\r\n#2 [mir_borrowck] processing `main`\r\n#3 [analysis] running analysis passes on this crate\r\nend of query stack\r\n```\r\nCargo.toml\r\n```toml\r\n# ...\r\n[dependencies]\r\nfutures = \"0.1\"\r\nhyper = \"0.12\"\r\njuniper = \"0.11.1\"\r\njuniper_hyper = \"0.2.0\"\r\n```", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59344/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59344/timeline", "performed_via_github_app": null, "state_reason": "completed"}