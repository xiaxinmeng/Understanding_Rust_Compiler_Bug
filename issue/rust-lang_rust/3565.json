{"url": "https://api.github.com/repos/rust-lang/rust/issues/3565", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3565/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3565/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3565/events", "html_url": "https://github.com/rust-lang/rust/issues/3565", "id": 7075390, "node_id": "MDU6SXNzdWU3MDc1Mzkw", "number": 3565, "title": "Micro-optimize the __morestack fast path", "user": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2012-09-23T22:08:48Z", "updated_at": "2013-10-29T18:40:33Z", "closed_at": "2013-10-29T18:40:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is very performance critical code used for growing the stack, and it currently wastes a lot of instructions on the non-allocating fast path. There are a number of distinct optimizations we can identify.\n\nHere's what happens after calling into `__morestack`, on the fast path\n- Set up the frame pointer\n- Push all possible argument registers of the calling function in case the call to `upcall_new_stack` clobbers them\n- Shuffle the argument registers from the `__morestack` custom calling convention registers to the C calling convention registers used by `upcall_new_stack`\n- Call `upcall_new_stack`, through the indirection of the dynamic linker\n- Call `get_sp_limit`, an entire assembly function consisting of `movq %fs:112, %rax`\n- Compare the `sp_limit` to 0 and don't branch to the `rust_get_current_task` slow path. This branch always makes the same decision during a `__morestack` call.\n- Do some math to find the `task` pointer from the stack limit\n- Check the stack canary to make sure we haven't run off the end of the stack\n- Assert that the task pointer is not null\n- Get the minimum stack size\n- Do some simple math and pointer indirections to determine if `task->stk->next` is a big enough stack segment to use\n- Assert some invariants\n- memcpy the arguments from the old stack to the new stack\n- Align the new stack frame\n- Call `reuse_valgrind_stack` to give valgrind hints\n- Call `record_stack_limit` to execute another single instruction\n- Return the stack pointer to `__morestack`\n- Pop all the saved argument registers\n- Finally, call the original function\n\nAnd returning from the segment:\n- Call `upcall_del_stack` through the dynamic linker\n- Call `get_sp_limit`, an entire function consisting of `movq %fs:112, %rax`\n- Compare the `sp_limit` to 0, etc.\n- Check the stack canary to make sure we haven't run off the end of the stack\n- Assert that the task pointer is not null\n- Update the current stack pointer in the task\n- Call `record_stack_limit`\n\nPotential optimizations:\n- Don't save the frame pointer - This could be tricky to make work with dwarf unwinding, due to the odd frame shapes around __morestack. Will be easier after rolling our own unwinder #3551.\n- Inline `get_sp_limit`, `record_stack_limit` (#2521)\n- Statically link `upcall_new_stack` and `upcall_del_stack`, hitting new dynamically linked upcalls for the slow path\n- Create a new version of `rust_get_current_task` that doesn't have a fallback path for the case when the task pointer can't be retrieved from the stack segment. Use it from upcall_new_stack/del_stack.\n- Consider saving the task pointer between upcall_new_stack/del_stack to avoid calculating it again\n- Do fewer pointer indirections and calculations to verify the suitability of the stack segment, possibly storing more information directly in the stack segment header, never accessing the task pointer directly. (See also #3566).\n- Put all asserts under the compile-time debug flag, including the canary check\n- Put the valgrind hinting under a debug flag too. I believe it does have a runtime penalty.\n- Ensure that `upcall_new_stack` doesn't use xmm registers and remove the xmm saves and restores in `__morestack` #2043 \n- Inline `upcall_del_stack` into `__morestack`\n- Write the entire fast path in assembly\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3565/timeline", "performed_via_github_app": null, "state_reason": "completed"}