{"url": "https://api.github.com/repos/rust-lang/rust/issues/87678", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87678/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87678/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87678/events", "html_url": "https://github.com/rust-lang/rust/issues/87678", "id": 957433607, "node_id": "MDU6SXNzdWU5NTc0MzM2MDc=", "number": 87678, "title": "Tracking issue for `UNSUPPORTED_CALLING_CONVENTIONS` future compatibility lint", "user": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630636017, "node_id": "MDU6TGFiZWw2MzA2MzYwMTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-future-compatibility", "name": "C-future-compatibility", "color": "f5f1fd", "default": false, "description": "Category: future compatibility lints"}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-08-01T08:48:35Z", "updated_at": "2022-08-01T23:38:50Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This is the **summary issue** for the `unsupported_calling_conventions` future-compatibility warning and other related errors. The goal of this page is describe why this change was made and how you can fix code that is affected by it. It also provides a place to ask questions or register a complaint if you feel the change should not be made. For more information on the policy around future-compatibility warnings, see our [breaking change policy guidelines][guidelines].\r\n\r\n[guidelines]: https://rustc-dev-guide.rust-lang.org/bug-fix-procedure.html#tracking-issue-template\r\n\r\n#### What is the warning for?\r\n\r\nThe `unsupported_calling_conventions` lint is output whenever there is an use of the `stdcall`, `fastcall`, `thiscall`, `vectorcall` calling conventions (or their unwind variants) on targets that cannot meaningfully be supported for the requested target.\r\n\r\nFor example `stdcall` does not make much sense for a x86_64 or, more apparently, powerpc code, because this calling convention was never specified for those targets.\r\n\r\nHistorically MSVC toolchains have fallen back to the regular C calling convention for targets other than x86, but Rust doesn't really see a similar need to introduce a similar hack across many more targets.\r\n\r\n### Example\r\n\r\n```rust,ignore (needs specific targets)\r\nextern \"stdcall\" fn stdcall() {}\r\n```\r\n\r\nThis will produce:\r\n\r\n```text\r\nwarning: use of calling convention not supported on this target\r\n  --> $DIR/unsupported.rs:39:1\r\n   |\r\nLL | extern \"stdcall\" fn stdcall() {}\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: `#[warn(unsupported_calling_conventions)]` on by default\r\n   = warning: this was previously accepted by the compiler but is being phased out;\r\n              it will become a hard error in a future release!\r\n   = note: for more information, see issue ...\r\n```\r\n\r\nOn most of the targets the behaviour of `stdcall` and similar calling conventions is not defined at all, but was previously accepted due to a bug in the implementation of the compiler.\r\n\r\n#### Recommendations\r\n\r\nUse `#[cfg(\u2026)]` annotations to ensure that the ABI identifiers are only used in combination with targets for which the requested ABI is well specified.\r\n\r\n#### When will this warning become a hard error?\r\n\r\nAt the beginning of each 6-week release cycle, the Rust compiler team will review the set of outstanding future compatibility warnings and nominate some of them for **Final Comment Period**. Toward the end of the cycle, we will review any comments and make a final determination whether to convert the warning into a hard error or remove it entirely.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87678/reactions", "total_count": 4, "+1": 3, "-1": 1, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87678/timeline", "performed_via_github_app": null, "state_reason": null}