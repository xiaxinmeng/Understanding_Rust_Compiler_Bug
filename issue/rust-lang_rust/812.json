{"url": "https://api.github.com/repos/rust-lang/rust/issues/812", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/812/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/812/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/812/events", "html_url": "https://github.com/rust-lang/rust/issues/812", "id": 1382328, "node_id": "MDU6SXNzdWUxMzgyMzI4", "number": 812, "title": "Anonymous objects from nothing", "user": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2011-08-10T19:51:31Z", "updated_at": "2014-06-16T21:56:38Z", "closed_at": "2011-08-15T23:17:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there a reason why we'd want to be able to create an anonymous object from nothing, rather than extending an existing one?\n\nFor example, should we support being able to do this:\n\n```\nfn main() {\n\n    // Anonymous object that doesn't extend an existing one.\n    let my_obj = obj () {\n        fn foo() -> int { ret 2; }\n        fn bar() -> int { ret self.foo(); }\n    };\n\n    assert (my_obj.foo() == 2);\n    assert (my_obj.bar() == 2);\n\n}\n```\n\nIf the answer is yes, then we need to finish implementing support for it.  Right now, the parser and translator don't require an anon obj to have a \"with\" clause, and if there isn't one, translating an anon obj proceeds much like translating a regular obj would, with no forwarding/backwarding vtable slots created.  But the above program fails in typechecking because the typechecker doesn't know what \"self\" is.\n\nIf the answer is no, we don't care about having this feature, we should get rid of what support does exist.  Doing so would streamline the implementation of the object system a little.\n", "closed_by": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/812/timeline", "performed_via_github_app": null, "state_reason": "completed"}