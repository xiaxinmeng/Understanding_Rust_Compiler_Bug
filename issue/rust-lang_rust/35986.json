{"url": "https://api.github.com/repos/rust-lang/rust/issues/35986", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/35986/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/35986/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/35986/events", "html_url": "https://github.com/rust-lang/rust/issues/35986", "id": 173199301, "node_id": "MDU6SXNzdWUxNzMxOTkzMDE=", "number": 35986, "title": "associated_type_defaults not working correctly", "user": {"login": "mtanski", "id": 41035, "node_id": "MDQ6VXNlcjQxMDM1", "avatar_url": "https://avatars.githubusercontent.com/u/41035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mtanski", "html_url": "https://github.com/mtanski", "followers_url": "https://api.github.com/users/mtanski/followers", "following_url": "https://api.github.com/users/mtanski/following{/other_user}", "gists_url": "https://api.github.com/users/mtanski/gists{/gist_id}", "starred_url": "https://api.github.com/users/mtanski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mtanski/subscriptions", "organizations_url": "https://api.github.com/users/mtanski/orgs", "repos_url": "https://api.github.com/users/mtanski/repos", "events_url": "https://api.github.com/users/mtanski/events{/privacy}", "received_events_url": "https://api.github.com/users/mtanski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-08-25T13:12:31Z", "updated_at": "2019-02-25T13:20:51Z", "closed_at": "2019-02-25T13:20:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seams like associated_type_defaults are not working. I have an example below from a query processing engine where I'm trying to use traits and associated types to express the application level Types of the (sql like) schema.\n\n``` rust\n#![feature(associated_consts)]\n#![feature(associated_type_defaults)]\n\nuse std::mem;\nuse std::convert::Into;\n\n// types.rs file\n\n// Represents Type stored on disk\npub enum Type {\n    UINT32,\n    // ... Lots of types\n}\n\npub trait TypeInfo {\n    // type DiskType;\n    type DiskType = u8;\n\n    const ID: Type;\n    const SIZE_OF: usize;\n    // ... Lots of additional consts\n}\n\npub struct UInt32;\n\nimpl TypeInfo for UInt32 {\n    type DiskType = u32;\n    const ID: Type = Type::UINT32;\n    // Also broken, std::mem::size_of cannot be used in const expr\n    const SIZE_OF: usize =  std::mem::size_of::<UInt32::DiskType>();\n}\n\n// ... Lots of types\n\nstatic uint32: UInt32 = UInt32 {};\n\nimpl Into<&'static TypeInfo> for Type {\n    fn into(self) -> &'static TypeInfo {\n        match self {\n            UINT32 => &uint32,\n        }\n    }\n}\n\n// consuming file\n\nfn main() {\n    let attr = Type::UINT32;\n    let info = attr.info();\n}\n```\n\nplaypen link: https://play.rust-lang.org/?gist=2d2295013a3b9bb859b3e04bc1b9dc18&version=nightly&backtrace=0\n\nleads to the result of:\n\n```\nerror[E0191]: the value of the associated type `DiskType` (from the trait `TypeInfo`) must be specified\n  --> <anon>:34:20\n   |\n34 | impl Into<&'static TypeInfo> for Type {\n   |                    ^^^^^^^^ missing associated type `DiskType` value\n\nerror[E0191]: the value of the associated type `DiskType` (from the trait `TypeInfo`) must be specified\n  --> <anon>:35:31\n   |\n35 |     fn into(self) -> &'static TypeInfo {\n   |                               ^^^^^^^^ missing associated type `DiskType` value\n\nerror: aborting due to 2 previous errors\n```\n\nWhich is the same error you get when there is no DiskType default. I would like that case to work too, but it's somewhat out of scope of what I'm asking for here.\n", "closed_by": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/35986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/35986/timeline", "performed_via_github_app": null, "state_reason": "completed"}