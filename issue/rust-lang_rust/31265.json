{"url": "https://api.github.com/repos/rust-lang/rust/issues/31265", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/31265/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/31265/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/31265/events", "html_url": "https://github.com/rust-lang/rust/issues/31265", "id": 129547957, "node_id": "MDU6SXNzdWUxMjk1NDc5NTc=", "number": 31265, "title": "Create a benchmark suite for uncovering runtime regressions", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 28, "created_at": "2016-01-28T19:10:09Z", "updated_at": "2022-03-04T16:16:43Z", "closed_at": "2022-03-04T15:44:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We need a benchmark suite targeting the runtime of generated code. I've started gathering together code samples into a repository. Here is a list of the projects I plan to extract:\n- [x] WAD processing from the [rust-doom library](https://github.com/cristicbz/rust-doom/tree/rustc-benchmark) -- thanks @cristicbz!\n- [ ] Something from cargo (@alexcrichton is working on it)\n- [ ] LALRPOP LR(1) item generation for some simple grammar (hmm)\n- [ ] Something from regex (see [this comment](https://github.com/rust-lang/rust/issues/31265#issuecomment-187840730))\n- [ ] Some HashMap benchmark?\n  - [ ] we'd want to freeze a particular impl of `HashMap`, not just take from the libs\n- [ ] @eddyb's implementation of inflate applied to some input\n- [ ] https://github.com/jorendorff/rust-raytrace or https://github.com/gyng/rust-raytracer\n\nIn addition to curating the benchmarks themselves, we need a good way to run them. There are some tasks associated with that:\n- [ ] Put the projects in a repo with cargo setup such that `cargo bench` will run the relevant tests (this part I expect to get started on --nmatsakis)\n- [ ] Write a script that will execute `cargo bench` and extract the results into one data set\n- [ ] Provide some way to save that data set to disk and to compare against other data sets (e.g., runs of the `master` branch)\n\nEventually, I would want to integrate this into our regular benchmarking computer so that it can be put up on a website, but for now it'd be nice if you could at least run locally.\n", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/31265/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/31265/timeline", "performed_via_github_app": null, "state_reason": "completed"}