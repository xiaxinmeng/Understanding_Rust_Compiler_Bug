{"url": "https://api.github.com/repos/rust-lang/rust/issues/50519", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50519/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50519/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50519/events", "html_url": "https://github.com/rust-lang/rust/issues/50519", "id": 320943155, "node_id": "MDU6SXNzdWUzMjA5NDMxNTU=", "number": 50519, "title": "println!() prevents optimization by capturing pointers", "user": {"login": "df5602", "id": 22869241, "node_id": "MDQ6VXNlcjIyODY5MjQx", "avatar_url": "https://avatars.githubusercontent.com/u/22869241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/df5602", "html_url": "https://github.com/df5602", "followers_url": "https://api.github.com/users/df5602/followers", "following_url": "https://api.github.com/users/df5602/following{/other_user}", "gists_url": "https://api.github.com/users/df5602/gists{/gist_id}", "starred_url": "https://api.github.com/users/df5602/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/df5602/subscriptions", "organizations_url": "https://api.github.com/users/df5602/orgs", "repos_url": "https://api.github.com/users/df5602/repos", "events_url": "https://api.github.com/users/df5602/events{/privacy}", "received_events_url": "https://api.github.com/users/df5602/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-05-07T20:22:09Z", "updated_at": "2021-04-19T20:14:57Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This weekend I ran some benchmarks on some of my code. After making a seemingly insignificant code change I noticed a small, but measurable performance regression. After investigating the generated assembly, I stumbled upon a case, where the compiler emits code that is not optimal.\r\n\r\nThis minimal example shows the same behaviour ([Playground link](https://play.rust-lang.org/?gist=0fd24dc477cc80a396c4db78ba605fe6&version=stable&mode=release)):\r\n```\r\nextern crate rand;\r\n\r\nuse std::f32;\r\nuse rand::Rng;\r\n\r\nfn main() {\r\n    let mut list = [0.0; 16];\r\n    let mut rg = rand::thread_rng();\r\n\r\n    // Random initialization to prevent the compiler from optimizing the whole example away\r\n    for i in 0..list.len() {\r\n        list[i] = rg.gen_range(0.0, 0.1);\r\n    }\r\n\r\n    let mut lowest = f32::INFINITY;\r\n\r\n    for i in 0..list.len() {\r\n        lowest = if list[i] < lowest {    // <<<<<<<<<<<<<<<\r\n            list[i]\r\n        } else {\r\n            lowest\r\n        };\r\n    }\r\n\r\n    println!(\"{}\", lowest);\r\n}\r\n```\r\n\r\nWhen compiling with the `--release` flag, the compiler generates the following instructions for the marked block:\r\n```\r\n...\r\nminss\t%xmm0, %xmm1\r\nmovss\t88(%rsp), %xmm0\r\nminss\t%xmm1, %xmm0\r\nmovss\t92(%rsp), %xmm1\r\n...\r\n```\r\n\r\nHowever, if I replace those lines with the following:\r\n```\r\nif list[i] < lowest {\r\n    lowest = list[i];\r\n}\r\n```\r\nthe compiler emits a strange series of float compare and jump instructions:\r\n```\r\n.LBB5_38:\r\n\tmovss\t92(%rsp), %xmm1\r\n\tucomiss\t%xmm1, %xmm0\r\n\tja\t.LBB5_39\r\n...\r\n.LBB5_42:\r\n\tmovss\t100(%rsp), %xmm1\r\n\tucomiss\t%xmm1, %xmm0\r\n\tja\t.LBB5_43\r\n...\r\n.LBB5_39:\r\n\tmovss\t%xmm1, 12(%rsp)\r\n\tmovaps\t%xmm1, %xmm0\r\n\tmovss\t96(%rsp), %xmm1\r\n\tucomiss\t%xmm1, %xmm0\r\n\tjbe\t.LBB5_42\r\n```\r\n\r\nAs a comparison, both gcc and clang can optimize a similar C++ example:\r\n```\r\n#include <stdlib.h>\r\n#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    float list[16];\r\n    for(size_t i = 0; i < 16; ++i) {\r\n        list[i] = rand();\r\n    }\r\n\r\n    float lowest = 1000.0f;\r\n\r\n    for (size_t i = 0; i < 16; ++i) {\r\n        \r\n        /* Variant A: */\r\n        //lowest = list[i] < lowest ? list[i] : lowest;\r\n\r\n        /* Variant B: */\r\n        if (list[i] < lowest) {\r\n            lowest = list[i];\r\n        }\r\n    }\r\n\r\n    cout << lowest;\r\n}\r\n```\r\nBoth compilers generate `minss` instructions for both variants.\r\n([Godbolt](https://godbolt.org/g/gJPXgU))\r\n\r\nI wasn't sure whether rustc or LLVM were responsible for this behaviour, however after a quick glance at the generated LLVM IR, I'm tending towards rustc, since in the first case it emits `fcmp` and `select` instructions, while in the latter it generates `fcmp` and `br`.\r\n\r\nWhat do you think?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50519/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50519/timeline", "performed_via_github_app": null, "state_reason": null}