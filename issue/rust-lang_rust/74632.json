{"url": "https://api.github.com/repos/rust-lang/rust/issues/74632", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74632/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74632/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74632/events", "html_url": "https://github.com/rust-lang/rust/issues/74632", "id": 663786995, "node_id": "MDU6SXNzdWU2NjM3ODY5OTU=", "number": 74632, "title": "Ballooning compile time with LVI mitigations", "user": {"login": "jberci", "id": 6883025, "node_id": "MDQ6VXNlcjY4ODMwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6883025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jberci", "html_url": "https://github.com/jberci", "followers_url": "https://api.github.com/users/jberci/followers", "following_url": "https://api.github.com/users/jberci/following{/other_user}", "gists_url": "https://api.github.com/users/jberci/gists{/gist_id}", "starred_url": "https://api.github.com/users/jberci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jberci/subscriptions", "organizations_url": "https://api.github.com/users/jberci/orgs", "repos_url": "https://api.github.com/users/jberci/repos", "events_url": "https://api.github.com/users/jberci/events{/privacy}", "received_events_url": "https://api.github.com/users/jberci/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2020-07-22T14:02:08Z", "updated_at": "2022-02-04T19:31:39Z", "closed_at": "2022-02-04T19:31:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "There seems to be a significant compile time regression when using the LVI mitigation passes on some crates. The smallest case I could come up with is:\r\n\r\n```rust\r\n#[macro_use] extern crate crunchy;\r\n#[macro_use] extern crate uint;\r\n//construct_uint!(UINT, 1);\r\n//construct_uint!(UINT, 2);\r\n//construct_uint!(UINT, 4);\r\n//construct_uint!(UINT, 8);\r\nconstruct_uint!(UINT, 16);\r\nfn main() {\r\n\tlet a = UINT::from_dec_str(\"10\").unwrap();\r\n\tlet b = UINT::from_dec_str(\"20\").unwrap();\r\n\tprintln!(\"a * b = {}\", ((a * b - b ) / a).as_u32());\r\n}\r\n```\r\nTOML:\r\n```toml\r\n[package]\r\nname = \"lvitest\"\r\nversion = \"0.1.0\"\r\nedition = \"2018\"\r\n[dependencies]\r\ncrunchy = { version = \"0.1\" }\r\nuint = { version = \"0.2.1\" }\r\n```\r\n\r\nThis happens with the `x86_64-fortanix-unknown-sgx` target, but also without it with the following codegen options (`.cargo/config.toml`):\r\n```toml\r\n[build]\r\nrustflags = [\"-C\", \"link-dead-code\", \"-C\", \"llvm-args=--x86-experimental-lvi-inline-asm-hardening\", \"-C\", \"target-feature=+lvi-cfi,+lvi-load-hardening\"]\r\n```\r\n\r\n*Expected:*\r\nWithout the `config.toml` on a vanilla rustup-installed nightly, a `cargo clean && cargo build` takes a second or two.\r\n\r\n*Instead:*\r\nWith LVI mitigations enabled, compile time explodes to about 35 minutes on my machine.\r\n\r\nIf I disable linking dead code, it drops to 2 minutes, although that's mostly because the sample above is simple. Using shorter uints (e.g. the ones commented out above) makes it drop further still, but compile time still noticeably depends on the uint length.\r\n\r\nUsing a newer version of the `uint` crate (e.g. 0.4.1) also seems to solve the issue. The main difference that I could find is that the older version uses inline assembly. Not sure if that's a red herring or not.\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.47.0-nightly (8ad7bc3f4 2020-07-21)\r\nbinary: rustc\r\ncommit-hash: 8ad7bc3f428300aee6764f6e23527e19eb235e81\r\ncommit-date: 2020-07-21\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.47.0-nightly\r\nLLVM version: 10.0\r\n```", "closed_by": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74632/timeline", "performed_via_github_app": null, "state_reason": "completed"}