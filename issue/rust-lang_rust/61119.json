{"url": "https://api.github.com/repos/rust-lang/rust/issues/61119", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61119/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61119/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61119/events", "html_url": "https://github.com/rust-lang/rust/issues/61119", "id": 448175689, "node_id": "MDU6SXNzdWU0NDgxNzU2ODk=", "number": 61119, "title": "Stabilize `std::arch::wasm32::unreachable`", "user": {"login": "pepyakin", "id": 2205845, "node_id": "MDQ6VXNlcjIyMDU4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2205845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pepyakin", "html_url": "https://github.com/pepyakin", "followers_url": "https://api.github.com/users/pepyakin/followers", "following_url": "https://api.github.com/users/pepyakin/following{/other_user}", "gists_url": "https://api.github.com/users/pepyakin/gists{/gist_id}", "starred_url": "https://api.github.com/users/pepyakin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pepyakin/subscriptions", "organizations_url": "https://api.github.com/users/pepyakin/orgs", "repos_url": "https://api.github.com/users/pepyakin/repos", "events_url": "https://api.github.com/users/pepyakin/events{/privacy}", "received_events_url": "https://api.github.com/users/pepyakin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-05-24T13:37:00Z", "updated_at": "2019-08-05T15:09:12Z", "closed_at": "2019-08-05T15:09:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a tracking issue to stabilize [`std::arch::wasm32::unreachable`]\r\nThe tentative signature is:\r\n\r\n```rust\r\nfn unreachable() -> !;\r\n```\r\n\r\n# Semantics\r\n\r\nThis intrinsic represents instruction that is present in the MVP of WebAssembly: [`unreachable`](https://webassembly.github.io/spec/core/exec/instructions.html#exec-unreachable). \r\n\r\nFrom the surface it is a simple instruction: it doesn't take any arguments nor return anything. Upon the execution it generates a trap, which terminates the execution of wasm immediately returning control to the embedder with an error. There are no way to catch a trap at the moment.\r\n\r\nNote that technically a WebAssembly instance can be used after a trap. However, Rust doesn't guarantee that such a module is usable after a trap. For example, there is no guarantee that the stack will be reset to initial values or that any destructors be executed.\r\n\r\n# Stabilization in Rust\r\n\r\nIn a way, this intrinsic is similar to the currently stabilized [`std::process::abort`] function. In fact, [`std::process::abort`] is lowered to the `unreachable` instruction for wasm32-unknown-unknown - this is totally makes sense since wasm32-unknown-unknown doesn't make any assumptions of the host environment. However, there is a problem with [`std::process::abort`], it is only available in std. Consider how you would implement a panic handler in WebAssembly for `no_std` mode when a trap is required:\r\n\r\n```rust\r\n#[panic_handler]\r\nfn panic_handler(_: &PanicInfo) -> ! {\r\n    unsafe {\r\n        intrinsics::abort();\r\n    }\r\n}\r\n```\r\n\r\nThis works, however, it requires `#![feature(core_intrinsics)]`. Here are other ways and why they are not appropriate:\r\n\r\n1. e.g. safe division by zero - requires panic, thus recursive. Unsafe division might work, but then it would require `loop { }` which might be [a problem](https://github.com/rust-lang/rust/issues/28728).\r\n2. e.g. make an access to the address 0xFFFFFFFF assuming that it is not accessible. Doesn't work if the module genuinely allocates 4GiBs. I guess that optimizer also might be able to figure out that it is being tricked with respective consequences.\r\n3. e.g. `call_indirect` suffer from the similar issues.\r\n4. If the host is known (which is likely), it might be possible to introduce a special host function sole function of which is just trap. But that feels hacky and clumsy as well.\r\n\r\nStabilization of [`unreachable`][`std::arch::wasm32::unreachable`] will allow implementing the panic handler in `no_std` environments on stable.\r\n\r\ncc @alexcrichton @sunfishcode \r\n\r\n[`std::process::abort`]: https://doc.rust-lang.org/nightly/std/process/fn.abort.html\r\n[`std::arch::wasm32::unreachable`]: https://doc.rust-lang.org/nightly/core/arch/wasm32/fn.unreachable.html", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61119/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61119/timeline", "performed_via_github_app": null, "state_reason": "completed"}