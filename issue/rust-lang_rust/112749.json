{"url": "https://api.github.com/repos/rust-lang/rust/issues/112749", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112749/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112749/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112749/events", "html_url": "https://github.com/rust-lang/rust/issues/112749", "id": 1762030130, "node_id": "I_kwDOAAsO6M5pBnIy", "number": 112749, "title": "WASI libraries keep leaking memory", "user": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 5632958587, "node_id": "LA_kwDOAAsO6M8AAAABT8Agew", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-memleak", "name": "I-memleak", "color": "e10c02", "default": false, "description": "Issue: Runtime memory leak without `mem::forget`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-06-17T23:24:28Z", "updated_at": "2023-06-18T14:50:07Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#[no_mangle]\r\npub extern \"C\" fn update() {\r\n    static FOO: std::sync::Once = std::sync::Once::new();\r\n    FOO.call_once(|| {\r\n        let _ = std::fs::metadata(\"/mnt/c/foo.txt\");\r\n    });\r\n}\r\n```\r\n\r\nI expected to see this happen:\r\n\r\nIf you compile this to a WASI library and call the update function from a WASM runtime, then it will query the metadata of the file only during the first call to update. Every other invocation the update function should do nothing.\r\n\r\nInstead, this happened:\r\n\r\nThe update function seems to refresh the list of preopened directories on every call... and it leaks them. The WASM memory keeps growing, looking like this:\r\n\r\n![image](https://github.com/rust-lang/rust/assets/1451630/6d3009a8-2787-41be-b57e-05a2d611c633)\r\n\r\nThis likely is because of the way Rust lazily initializes the list of preopened directories through wasi-libc. It probably does it unconditionally, which wasi-libc probably can't handle, so it never frees any memory.\r\n\r\nThe problem also occurs if you have any file system code at all, and it never even gets called:\r\n\r\n```rust\r\n#[no_mangle]\r\npub extern \"C\" fn other() {\r\n    let _ = std::fs::metadata(\"/mnt/c/foo.txt\");\r\n}\r\n\r\n#[no_mangle]\r\npub extern \"C\" fn update() { }\r\n```\r\n\r\nIf you compile this code, but never call `other` and instead only `update`, it also keeps leaking the list of preopened directories.\r\n\r\nThe WASM seems to come down to this:\r\n\r\n```wat\r\n (export \"update\" (func $update.command_export))\r\n ...\r\n (func $update.command_export\r\n  (call $__wasm_call_ctors)\r\n  (call $update)\r\n  (call $__wasm_call_dtors)\r\n )\r\n```\r\n\r\nwith\r\n\r\n```wat\r\n (func $__wasm_call_ctors\r\n  (call $__wasilibc_populate_preopens)\r\n )\r\n (func $__wasm_call_dtors\r\n  (call $dummy)\r\n  (call $dummy)\r\n )\r\n```\r\n\r\n`__wasilibc_populate_preopens` looks too complex. The original C code probably needs to be checked.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.70.0 (90c541806 2023-05-31)\r\nbinary: rustc\r\ncommit-hash: 90c541806f23a127002de5b4038be731ba1458ca\r\ncommit-date: 2023-05-31\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.70.0\r\nLLVM version: 16.0.2\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112749/timeline", "performed_via_github_app": null, "state_reason": null}