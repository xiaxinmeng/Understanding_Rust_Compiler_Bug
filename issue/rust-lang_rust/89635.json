{"url": "https://api.github.com/repos/rust-lang/rust/issues/89635", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89635/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89635/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89635/events", "html_url": "https://github.com/rust-lang/rust/issues/89635", "id": 1020287291, "node_id": "I_kwDOAAsO6M480Fk7", "number": 89635, "title": "Weird error messages using GATs: cannot satisfy `<Self as Trait<'b>>::Assoc<'a> == '_`?", "user": {"login": "timothee-haudebourg", "id": 14182174, "node_id": "MDQ6VXNlcjE0MTgyMTc0", "avatar_url": "https://avatars.githubusercontent.com/u/14182174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timothee-haudebourg", "html_url": "https://github.com/timothee-haudebourg", "followers_url": "https://api.github.com/users/timothee-haudebourg/followers", "following_url": "https://api.github.com/users/timothee-haudebourg/following{/other_user}", "gists_url": "https://api.github.com/users/timothee-haudebourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/timothee-haudebourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timothee-haudebourg/subscriptions", "organizations_url": "https://api.github.com/users/timothee-haudebourg/orgs", "repos_url": "https://api.github.com/users/timothee-haudebourg/repos", "events_url": "https://api.github.com/users/timothee-haudebourg/events{/privacy}", "received_events_url": "https://api.github.com/users/timothee-haudebourg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-10-07T17:26:43Z", "updated_at": "2023-04-05T17:29:47Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Sorry for the title, I don't really know how to describe this issue otherwise. I've been playing with GATs and trying to define a trait that would allow me to encode covariance. I came up with the following erroneous code. I know why it cannot work, but I am surprised by the error messages I got:\r\n\r\n```rust\r\n/// Type that is covariant over `'a`.\r\npub trait Covariant<'a>: 'a {\r\n\ttype Target<'b> where Self: 'b;\r\n\r\n\tfn shorter<'b>(self) -> Self::Target<'b> where 'a: 'b;\r\n\r\n\tfn unwrap<'c>(target: <Self as Covariant<'c>>::Target<'a>) -> Self where Self: Covariant<'c>;\r\n}\r\n\r\nimpl<'a, T> Covariant<'a> for &'a T {\r\n\ttype Target<'b> where Self: 'b = &'b T;\r\n\r\n\tfn shorter<'b>(self) -> &'b T where 'a: 'b {\r\n\t\tself\r\n\t}\r\n\r\n\tfn unwrap<'c>(target: &'a T) -> Self where Self: Covariant<'c> {\r\n\t\ttarget\r\n\t}\r\n}\r\n```\r\n\r\nEverything works well without the `unwrap` function. But with it, I get some weird error messages:\r\n\r\n```\r\nerror[E0284]: type annotations needed: cannot satisfy `<Self as Covariant<'c>>::Target<'a> == _`\r\n --> src/lib.rs:8:5\r\n  |\r\n8 |     fn unwrap<'c>(target: <Self as Covariant<'c>>::Target<'a>) -> Self where Self: Covariant<'c>;\r\n  |        ^^^^^^ cannot satisfy `<Self as Covariant<'c>>::Target<'a> == _`\r\n```\r\n\r\nThe compiler is unable to prove the equality of `<Self as Covariant<'c>>::Target<'a>` with... `'_`? How is that possible? What does it mean? Fine. Then I tried to help it a little by replacing this complicated type with a type parameter, who knows:\r\n\r\n```rust\r\nfn unwrap<'c, T>(target: T) -> Self where Self: Covariant<'c, Target<'a>=T>;\r\n```\r\n\r\nI get something even weirder in return:\r\n\r\n```\r\nerror[E0283]: type annotations needed\r\n --> src/lib.rs:3:1\r\n  |\r\n3 | pub trait Covariant<'a>: 'a {\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\r\n  |\r\n  = note: cannot satisfy `Self: Covariant<'a>`\r\nnote: required by a bound in `Covariant`\r\n --> src/lib.rs:3:1\r\n  |\r\n3 | pub trait Covariant<'a>: 'a {\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Covariant`\r\nhelp: consider specifying the type arguments in the function call\r\n  |\r\n3 | pub trait Covariant<'a>: 'a::<Self, 'a> {\r\n  |                            ++++++++++++\r\n```\r\n\r\nHow can `Self` be a type parameter? What does ` 'a::<Self, 'a>` even mean?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89635/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89635/timeline", "performed_via_github_app": null, "state_reason": null}