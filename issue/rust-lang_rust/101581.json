{"url": "https://api.github.com/repos/rust-lang/rust/issues/101581", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101581/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101581/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101581/events", "html_url": "https://github.com/rust-lang/rust/issues/101581", "id": 1366645613, "node_id": "I_kwDOAAsO6M5RdVtt", "number": 101581, "title": "error: internal compiler error: no errors encountered even though `delay_span_bug` issued broken MIR in DropGlue(DefId(2:2767 ~ core[178b]::ptr::drop_in_place)", "user": {"login": "andres-hurtado-lopez", "id": 11572402, "node_id": "MDQ6VXNlcjExNTcyNDAy", "avatar_url": "https://avatars.githubusercontent.com/u/11572402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andres-hurtado-lopez", "html_url": "https://github.com/andres-hurtado-lopez", "followers_url": "https://api.github.com/users/andres-hurtado-lopez/followers", "following_url": "https://api.github.com/users/andres-hurtado-lopez/following{/other_user}", "gists_url": "https://api.github.com/users/andres-hurtado-lopez/gists{/gist_id}", "starred_url": "https://api.github.com/users/andres-hurtado-lopez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andres-hurtado-lopez/subscriptions", "organizations_url": "https://api.github.com/users/andres-hurtado-lopez/orgs", "repos_url": "https://api.github.com/users/andres-hurtado-lopez/repos", "events_url": "https://api.github.com/users/andres-hurtado-lopez/events{/privacy}", "received_events_url": "https://api.github.com/users/andres-hurtado-lopez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-09-08T16:26:40Z", "updated_at": "2022-09-08T22:28:54Z", "closed_at": "2022-09-08T22:28:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\n```\r\n\r\n[code.zip](https://github.com/rust-lang/rust/files/9528613/code.zip)\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.65.0-nightly (c2804e6ec 2022-09-07)\r\nbinary: rustc\r\ncommit-hash: c2804e6ec2c29a5c7368600ea173b890e2655c3d\r\ncommit-date: 2022-09-07\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.65.0-nightly\r\nLLVM version: 15.0.0\r\n\r\n```\r\n\r\n### Error output\r\n\r\n258 |     std::fs::write( \"email_carmelita.html\", cuerpo );\r\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    |\r\n    = note: this `Result` may be an `Err` variant, which should be handled\r\n\r\nwarning: structure field `API_KEY` should have a snake case name\r\n   --> src/utils/mod.rs:429:9\r\n    |\r\n429 |         API_KEY:String,\r\n    |         ^^^^^^^ help: convert the identifier to snake case: `api_key`\r\n\r\nerror: internal compiler error: no errors encountered even though `delay_span_bug` issued\r\n\r\nerror: internal compiler error: broken MIR in DropGlue(DefId(2:2767 ~ core[178b]::ptr::drop_in_place), Some(warp::hyper::server::conn::spawn_all::State<warp::tls::TlsStream, futures_util::future::Ready<std::result::Result<warp::hyper::service::util::ServiceFn<[closure@warp::TlsServer<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, std::convert::Infallible>>, warp::hyper::service::util::ServiceFn<[closure@warp::TlsServer<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, warp::hyper::common::exec::Exec, warp::hyper::server::conn::spawn_all::NoopWatcher>)) (after pass PhaseChange-Runtime(Optimized)) at bb3[0]:\r\n                                Field projection `((*_1) as Connected).field[0]` specified type `warp::hyper::server::conn::upgrades::UpgradeableConnection<warp::tls::TlsStream, warp::hyper::service::util::ServiceFn<[closure@warp::TlsServer<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, warp::hyper::common::exec::Exec>`, but actual type is <warp::hyper::server::conn::spawn_all::NoopWatcher as warp::hyper::server::conn::spawn_all::Watcher<warp::tls::TlsStream, warp::hyper::service::util::ServiceFn<[closure@warp::TlsServer<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, warp::hyper::common::exec::Exec>>::Future\r\n  |\r\n  = note: delayed at compiler/rustc_const_eval/src/transform/validate.rs:128:36\r\n\r\nerror: internal compiler error: broken MIR in DropGlue(DefId(2:2767 ~ core[178b]::ptr::drop_in_place), Some(tokio::runtime::task::core::Stage<warp::hyper::server::conn::spawn_all::NewSvcTask<warp::tls::TlsStream, futures_util::future::Ready<std::result::Result<warp::hyper::service::util::ServiceFn<[closure@warp::TlsServer<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, std::convert::Infallible>>, warp::hyper::service::util::ServiceFn<[closure@warp::TlsServer<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, warp::hyper::common::exec::Exec, warp::hyper::server::conn::spawn_all::NoopWatcher>>)) (after pass PhaseChange-Runtime(Optimized)) at bb3[0]:\r\n                                Field projection `((*_1) as Finished).field[0]` specified type `std::result::Result<(), tokio::task::JoinError>`, but actual type is std::result::Result<<warp::hyper::server::conn::spawn_all::NewSvcTask<warp::tls::TlsStream, futures_util::future::Ready<std::result::Result<warp::hyper::service::util::ServiceFn<[closure@warp::TlsServer<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, std::convert::Infallible>>, warp::hyper::service::util::ServiceFn<[closure@warp::TlsServer<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, warp::hyper::common::exec::Exec, warp::hyper::server::conn::spawn_all::NoopWatcher> as warp::Future>::Output, tokio::task::JoinError>\r\n  |\r\n  = note: delayed at compiler/rustc_const_eval/src/transform/validate.rs:128:36\r\n\r\nerror: internal compiler error: broken MIR in DropGlue(DefId(2:2767 ~ core[178b]::ptr::drop_in_place), Some(warp::hyper::server::conn::spawn_all::State<warp::hyper::server::conn::AddrStream, futures_util::future::Ready<std::result::Result<warp::hyper::service::util::ServiceFn<[closure@warp::Server<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, std::convert::Infallible>>, warp::hyper::service::util::ServiceFn<[closure@warp::Server<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, warp::hyper::common::exec::Exec, warp::hyper::server::conn::spawn_all::NoopWatcher>)) (after pass PhaseChange-Runtime(Optimized)) at bb3[0]:\r\n                                Field projection `((*_1) as Connected).field[0]` specified type `warp::hyper::server::conn::upgrades::UpgradeableConnection<warp::hyper::server::conn::AddrStream, warp::hyper::service::util::ServiceFn<[closure@warp::Server<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, warp::hyper::common::exec::Exec>`, but actual type is <warp::hyper::server::conn::spawn_all::NoopWatcher as warp::hyper::server::conn::spawn_all::Watcher<warp::hyper::server::conn::AddrStream, warp::hyper::service::util::ServiceFn<[closure@warp::Server<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, warp::hyper::common::exec::Exec>>::Future\r\n  |\r\n  = note: delayed at compiler/rustc_const_eval/src/transform/validate.rs:128:36\r\n\r\nerror: internal compiler error: broken MIR in DropGlue(DefId(2:2767 ~ core[178b]::ptr::drop_in_place), Some(tokio::runtime::task::core::Stage<warp::hyper::server::conn::spawn_all::NewSvcTask<warp::hyper::server::conn::AddrStream, futures_util::future::Ready<std::result::Result<warp::hyper::service::util::ServiceFn<[closure@warp::Server<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, std::convert::Infallible>>, warp::hyper::service::util::ServiceFn<[closure@warp::Server<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, warp::hyper::common::exec::Exec, warp::hyper::server::conn::spawn_all::NoopWatcher>>)) (after pass PhaseChange-Runtime(Optimized)) at bb3[0]:\r\n                                Field projection `((*_1) as Finished).field[0]` specified type `std::result::Result<(), tokio::task::JoinError>`, but actual type is std::result::Result<<warp::hyper::server::conn::spawn_all::NewSvcTask<warp::hyper::server::conn::AddrStream, futures_util::future::Ready<std::result::Result<warp::hyper::service::util::ServiceFn<[closure@warp::Server<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, std::convert::Infallible>>, warp::hyper::service::util::ServiceFn<[closure@warp::Server<warp::filter::recover::Recover<warp::log::internal::WithLog<[closure@warp::log::{closure#0}], warp::filters::BoxedFilter<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::generic::Either<(warp::fs::File,), (warp::fs::File,)>,), (warp::reply::WithHeader<reqwest::StatusCode>,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::reply::sealed::Reply_,)>,), (warp::fs::File,)>,), (warp::fs::File,)>,), (&str,)>,), (std::string::String,)>,), (std::string::String,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::reply::Json,)>,), (warp::fs::File,)>,), (warp::reply::sealed::Reply_,)>,)>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, std::convert::Infallible>> {routes::handle_rejection}>>::bind_ephemeral<([u8; 4], u16)>::{closure#1}::{closure#0}::{closure#0}], warp::hyper::Body>, warp::hyper::common::exec::Exec, warp::hyper::server::conn::spawn_all::NoopWatcher> as warp::Future>::Output, tokio::task::JoinError>\r\n  |\r\n  = note: delayed at compiler/rustc_const_eval/src/transform/validate.rs:128:36\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', compiler/rustc_errors/src/lib.rs:1494:13\r\nstack backtrace:\r\n   0:     0x7f4e2c56e210 - std::backtrace_rs::backtrace::libunwind::trace::hddd5e6b1b5e0cf84\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\r\n   1:     0x7f4e2c56e210 - std::backtrace_rs::backtrace::trace_unsynchronized::h1e30619f2b1dfc7e\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\r\n   2:     0x7f4e2c56e210 - std::sys_common::backtrace::_print_fmt::h1c57dbed6b9e39aa\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/std/src/sys_common/backtrace.rs:66:5\r\n   3:     0x7f4e2c56e210 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h81e97128ef1d32f9\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/std/src/sys_common/backtrace.rs:45:22\r\n   4:     0x7f4e2c5c902e - core::fmt::write::h05bb200d128bd301\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/core/src/fmt/mod.rs:1202:17\r\n   5:     0x7f4e2c55ecd5 - std::io::Write::write_fmt::hc8d8769ac02ad98c\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/std/src/io/mod.rs:1679:15\r\n   6:     0x7f4e2c570e63 - std::sys_common::backtrace::_print::h7f10095fdc95f046\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/std/src/sys_common/backtrace.rs:48:5\r\n   7:     0x7f4e2c570e63 - std::sys_common::backtrace::print::hff7966088cd7ef66\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/std/src/sys_common/backtrace.rs:35:9\r\n   8:     0x7f4e2c570e63 - std::panicking::default_hook::{{closure}}::h5cfa206e6d48c088\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/std/src/panicking.rs:295:22\r\n   9:     0x7f4e2c570b4f - std::panicking::default_hook::h75a6d8252dff2ced\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/std/src/panicking.rs:314:9\r\n  10:     0x7f4e2edec9d1 - rustc_driver[4dbe72ff95e91a37]::DEFAULT_HOOK::{closure#0}::{closure#0}\r\n  11:     0x7f4e2c57169d - std::panicking::rust_panic_with_hook::h119231c709fbe31a\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/std/src/panicking.rs:702:17\r\n  12:     0x7f4e2ff33221 - std[229541c32b9def22]::panicking::begin_panic::<rustc_errors[5d6420c66e5c3514]::ExplicitBug>::{closure#0}\r\n  13:     0x7f4e2ff32d76 - std[229541c32b9def22]::sys_common::backtrace::__rust_end_short_backtrace::<std[229541c32b9def22]::panicking::begin_panic<rustc_errors[5d6420c66e5c3514]::ExplicitBug>::{closure#0}, !>\r\n  14:     0x7f4e2ff32d36 - std[229541c32b9def22]::panicking::begin_panic::<rustc_errors[5d6420c66e5c3514]::ExplicitBug>\r\n  15:     0x7f4e2ff358d6 - std[229541c32b9def22]::panic::panic_any::<rustc_errors[5d6420c66e5c3514]::ExplicitBug>\r\n  16:     0x7f4e2e945f68 - <rustc_errors[5d6420c66e5c3514]::HandlerInner as core[178bf54443111ecd]::ops::drop::Drop>::drop\r\n  17:     0x7f4e2dbf4bd8 - core[178bf54443111ecd]::ptr::drop_in_place::<rustc_session[54b7ccc2eea64ffd]::parse::ParseSess>\r\n  18:     0x7f4e2dbb2f58 - <alloc[aa703239628d5152]::rc::Rc<rustc_session[54b7ccc2eea64ffd]::session::Session> as core[178bf54443111ecd]::ops::drop::Drop>::drop\r\n  19:     0x7f4e2dbaff0d - core[178bf54443111ecd]::ptr::drop_in_place::<rustc_interface[14c34b33c6f785f8]::interface::Compiler>\r\n  20:     0x7f4e2dbad73f - rustc_interface[14c34b33c6f785f8]::interface::create_compiler_and_run::<core[178bf54443111ecd]::result::Result<(), rustc_errors[5d6420c66e5c3514]::ErrorGuaranteed>, rustc_driver[4dbe72ff95e91a37]::run_compiler::{closure#1}>\r\n  21:     0x7f4e2dbabc51 - <scoped_tls[c74ddbab68ad7cb1]::ScopedKey<rustc_span[ddb8e6977b977c82]::SessionGlobals>>::set::<rustc_interface[14c34b33c6f785f8]::interface::run_compiler<core[178bf54443111ecd]::result::Result<(), rustc_errors[5d6420c66e5c3514]::ErrorGuaranteed>, rustc_driver[4dbe72ff95e91a37]::run_compiler::{closure#1}>::{closure#0}, core[178bf54443111ecd]::result::Result<(), rustc_errors[5d6420c66e5c3514]::ErrorGuaranteed>>\r\n  22:     0x7f4e2dbab93f - std[229541c32b9def22]::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface[14c34b33c6f785f8]::util::run_in_thread_pool_with_globals<rustc_interface[14c34b33c6f785f8]::interface::run_compiler<core[178bf54443111ecd]::result::Result<(), rustc_errors[5d6420c66e5c3514]::ErrorGuaranteed>, rustc_driver[4dbe72ff95e91a37]::run_compiler::{closure#1}>::{closure#0}, core[178bf54443111ecd]::result::Result<(), rustc_errors[5d6420c66e5c3514]::ErrorGuaranteed>>::{closure#0}, core[178bf54443111ecd]::result::Result<(), rustc_errors[5d6420c66e5c3514]::ErrorGuaranteed>>\r\n  23:     0x7f4e2ec613b9 - <<std[229541c32b9def22]::thread::Builder>::spawn_unchecked_<rustc_interface[14c34b33c6f785f8]::util::run_in_thread_pool_with_globals<rustc_interface[14c34b33c6f785f8]::interface::run_compiler<core[178bf54443111ecd]::result::Result<(), rustc_errors[5d6420c66e5c3514]::ErrorGuaranteed>, rustc_driver[4dbe72ff95e91a37]::run_compiler::{closure#1}>::{closure#0}, core[178bf54443111ecd]::result::Result<(), rustc_errors[5d6420c66e5c3514]::ErrorGuaranteed>>::{closure#0}, core[178bf54443111ecd]::result::Result<(), rustc_errors[5d6420c66e5c3514]::ErrorGuaranteed>>::{closure#1} as core[178bf54443111ecd]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\r\n  24:     0x7f4e2c57b4f3 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h36c6bf5e47e96783\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/alloc/src/boxed.rs:1940:9\r\n  25:     0x7f4e2c57b4f3 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h145bc1ef077d35d5\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/alloc/src/boxed.rs:1940:9\r\n  26:     0x7f4e2c57b4f3 - std::sys::unix::thread::Thread::new::thread_start::h9922d7fa7807ef1d\r\n                               at /rustc/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library/std/src/sys/unix/thread.rs:108:17\r\n  27:     0x7f4e2c287b27 - <unknown>\r\n  28:     0x7f4e2c30a78c - <unknown>\r\n  29:                0x0 - <unknown>\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.65.0-nightly (c2804e6ec 2022-09-07) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: --crate-type bin -C opt-level=3 -C embed-bitcode=no\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nwarning: `portal_proveedores_cana_carmelita` (bin \"portal_proveedores_cana_carmelita\") generated 400 warnings\r\nerror: could not compile `portal_proveedores_cana_carmelita`; 400 warnings emitted\r\n\r\n\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>tcher> as warp::Future>::Output, tokio::task::JoinError>\r\n  |\r\n  = note: delayed at compiler/rustc_const_eval/src/transform/validate.rs:128:36\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', compiler/rustc_errors/src/lib.rs:1494:13\r\nstack backtrace:\r\n   0: std::panicking::begin_panic::<rustc_errors::ExplicitBug>\r\n   1: std::panic::panic_any::<rustc_errors::ExplicitBug>\r\n   2: <rustc_errors::HandlerInner as core::ops::drop::Drop>::drop\r\n   3: core::ptr::drop_in_place::<rustc_session::parse::ParseSess>\r\n   4: <alloc::rc::Rc<rustc_session::session::Session> as core::ops::drop::Drop>::drop\r\n   5: core::ptr::drop_in_place::<rustc_interface::interface::Compiler>\r\n   6: rustc_interface::interface::create_compiler_and_run::<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>\r\n   7: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.65.0-nightly (c2804e6ec 2022-09-07) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: --crate-type bin -C opt-level=3 -C embed-bitcode=no\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nwarning: `portal_proveedores_cana_carmelita` (bin \"portal_proveedores_cana_carmelita\") generated 400 warnings\r\nerror: could not compile `portal_proveedores_cana_carmelita`; 400 warnings emitted\r\nThe authenticity of host 'prov_carmelita (144.202.38.244)' can't be established.\r\n</strong></summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "andres-hurtado-lopez", "id": 11572402, "node_id": "MDQ6VXNlcjExNTcyNDAy", "avatar_url": "https://avatars.githubusercontent.com/u/11572402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andres-hurtado-lopez", "html_url": "https://github.com/andres-hurtado-lopez", "followers_url": "https://api.github.com/users/andres-hurtado-lopez/followers", "following_url": "https://api.github.com/users/andres-hurtado-lopez/following{/other_user}", "gists_url": "https://api.github.com/users/andres-hurtado-lopez/gists{/gist_id}", "starred_url": "https://api.github.com/users/andres-hurtado-lopez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andres-hurtado-lopez/subscriptions", "organizations_url": "https://api.github.com/users/andres-hurtado-lopez/orgs", "repos_url": "https://api.github.com/users/andres-hurtado-lopez/repos", "events_url": "https://api.github.com/users/andres-hurtado-lopez/events{/privacy}", "received_events_url": "https://api.github.com/users/andres-hurtado-lopez/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101581/timeline", "performed_via_github_app": null, "state_reason": "completed"}