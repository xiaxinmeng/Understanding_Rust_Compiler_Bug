{"url": "https://api.github.com/repos/rust-lang/rust/issues/73015", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73015/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73015/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73015/events", "html_url": "https://github.com/rust-lang/rust/issues/73015", "id": 631343514, "node_id": "MDU6SXNzdWU2MzEzNDM1MTQ=", "number": 73015, "title": "Use `fclass.{s|d|q}` instruction for float point classification in RISC-V targets", "user": {"login": "luojia65", "id": 40385009, "node_id": "MDQ6VXNlcjQwMzg1MDA5", "avatar_url": "https://avatars.githubusercontent.com/u/40385009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luojia65", "html_url": "https://github.com/luojia65", "followers_url": "https://api.github.com/users/luojia65/followers", "following_url": "https://api.github.com/users/luojia65/following{/other_user}", "gists_url": "https://api.github.com/users/luojia65/gists{/gist_id}", "starred_url": "https://api.github.com/users/luojia65/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luojia65/subscriptions", "organizations_url": "https://api.github.com/users/luojia65/orgs", "repos_url": "https://api.github.com/users/luojia65/repos", "events_url": "https://api.github.com/users/luojia65/events{/privacy}", "received_events_url": "https://api.github.com/users/luojia65/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 1210355734, "node_id": "MDU6TGFiZWwxMjEwMzU1NzM0", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-riscv", "name": "O-riscv", "color": "6e6ec0", "default": false, "description": "Target: RISC-V architecture"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 2139259423, "node_id": "MDU6TGFiZWwyMTM5MjU5NDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-floating-point", "name": "A-floating-point", "color": "f7e101", "default": false, "description": "Area: Floating point numbers and arithmetic"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-05T06:22:10Z", "updated_at": "2023-01-27T08:03:47Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Recently I came up with floating point variable classification. I found the function [`f32::classify`](https://doc.rust-lang.org/std/primitive.f32.html#method.classify) useful. Regardless of instruction set architecture, this function is implemented currently like this in standard library:\r\n\r\n```rust\r\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\r\npub fn classify(self) -> FpCategory {\r\n    const EXP_MASK: u32 = 0x7f800000;\r\n    const MAN_MASK: u32 = 0x007fffff;\r\n    \r\n    let bits = self.to_bits();\r\n    match (bits & MAN_MASK, bits & EXP_MASK) {\r\n        (0, 0) => FpCategory::Zero,\r\n        (_, 0) => FpCategory::Subnormal,\r\n        (0, EXP_MASK) => FpCategory::Infinite,\r\n        (_, EXP_MASK) => FpCategory::Nan,\r\n        _ => FpCategory::Normal,\r\n    }\r\n}\r\n```\r\n\r\nHowever, this standard library's function compiles to very long bunches of instructions. On RISC-V RV64GC, it compiles into:\r\n\r\n<details>\r\n<summary>very long assembly code</summary>\r\n\r\n```asm\r\nexample::classify_std:\r\n  fmv.w.x ft0, a0\r\n  fsw ft0, -20(s0)\r\n  lwu a0, -20(s0)\r\n  sd a0, -48(s0)\r\n  j .LBB0_1\r\n.LBB0_1:\r\n  lui a0, 2048\r\n  addiw a0, a0, -1\r\n  ld a1, -48(s0)\r\n  and a0, a0, a1\r\n  lui a2, 522240\r\n  and a2, a2, a1\r\n  sw a0, -32(s0)\r\n  sw a2, -28(s0)\r\n  mv a2, zero\r\n  bne a0, a2, .LBB0_3\r\n  j .LBB0_2\r\n.LBB0_2:\r\n  lw a0, -28(s0)\r\n  mv a1, zero\r\n  beq a0, a1, .LBB0_7\r\n  j .LBB0_3\r\n.LBB0_3:\r\n  lwu a0, -28(s0)\r\n  mv a1, zero\r\n  sd a0, -56(s0)\r\n  beq a0, a1, .LBB0_8\r\n  j .LBB0_4\r\n.LBB0_4:\r\n  lui a0, 522240\r\n  ld a1, -56(s0)\r\n  bne a1, a0, .LBB0_6\r\n  j .LBB0_5\r\n.LBB0_5:\r\n  lw a0, -32(s0)\r\n  mv a1, zero\r\n  beq a0, a1, .LBB0_9\r\n  j .LBB0_10\r\n.LBB0_6:\r\n  addi a0, zero, 4\r\n  sb a0, -33(s0)\r\n  j .LBB0_11\r\n.LBB0_7:\r\n  addi a0, zero, 2\r\n  sb a0, -33(s0)\r\n  j .LBB0_11\r\n.LBB0_8:\r\n  addi a0, zero, 3\r\n  sb a0, -33(s0)\r\n  j .LBB0_11\r\n.LBB0_9:\r\n  addi a0, zero, 1\r\n  sb a0, -33(s0)\r\n  j .LBB0_11\r\n.LBB0_10:\r\n  mv a0, zero\r\n  sb a0, -33(s0)\r\n  j .LBB0_11\r\n.LBB0_11:\r\n  lb a0, -33(s0)\r\n  ret\r\n```\r\n\r\n</details>\r\n\r\nTo solve this problem, RISC-V provided with `fclass.{s|d|q}` instructions. According to RISC-V's spec Section 11.9, instruction `fclass.s rd, rs1` examines `rs1` as 32-bit floating point number, and store its type into `rd`. By this way we use register `rd` and to judge which enum value of Rust standard library we should return. \r\n\r\nI'd like to explain this procedure in Rust code. The new way looks like this:\r\n\r\n```rust\r\npub fn classify_riscv_rvf(input: f32) -> FpCategory {\r\n    let ans: usize;\r\n    // step 1: map this f32 value into RISC-V defined integer type number\r\n    // this procedure could be built in into compiler\r\n    unsafe { llvm_asm!(\r\n        \"fclass.s a0, fa0\"\r\n        :\"={a0}\"(ans)  \r\n        :\"{fa0}\"(input)\r\n        :\r\n        :\"intel\"\r\n    ) };\r\n    // step 2: convert from return flags to FpCategory enum value\r\n    if ans & 0b10000001 != 0 {\r\n        return FpCategory::Infinite;\r\n    }\r\n    if ans & 0b01000010 != 0 {\r\n        return FpCategory::Normal;\r\n    }\r\n    if ans & 0b00100100 != 0 {\r\n        return FpCategory::Subnormal;\r\n    }\r\n    if ans & 0b00011000 != 0 {\r\n        return FpCategory::Zero;\r\n    }\r\n    FpCategory::Nan\r\n}\r\n```\r\n\r\nIt compiles into the following assembly code which is shorter and could be executed faster:\r\n\r\n```asm\r\nexample::classify_riscv_rvf:\r\n        fclass.s a0, fa0\r\n        andi    a2, a0, 129\r\n        addi    a1, zero, 1\r\n        beqz    a2, .LBB0_2\r\n.LBB0_1:\r\n        add     a0, zero, a1\r\n        ret\r\n.LBB0_2:\r\n        andi    a2, a0, 66\r\n        addi    a1, zero, 4\r\n        bnez    a2, .LBB0_1\r\n        andi    a2, a0, 36\r\n        addi    a1, zero, 3\r\n        bnez    a2, .LBB0_1\r\n        andi    a0, a0, 24\r\n        snez    a0, a0\r\n        slli    a1, a0, 1\r\n        add     a0, zero, a1\r\n        ret\r\n```\r\n\r\nFor `f64` types, we could use `fclass.d` instruction other than `fclass.s` for `f32`s. If in the future we had a chance to introduce `f128` primitive type, there's also `fclass.q` instruction. After using these instructions, it improves speed on this function in RISC-V platforms. This enhancement is especially significant for embedded devices. I suggest to change the implementation of this function in the standard library. We may implement it by any of following ways:\r\n\r\n1. Implement `fclassf32` and `fclassf64` intrinsics function into `core::instrinsics`, and call them in `f32::classify` or `f64::classify`. These functions can be implemented with special instruction or fallback in other platforms;\r\n2. Use inline assembly directly in standard library and add a `#[cfg(..)]` to compile it only in RISC-V targets with floating extension `F` or `D` respectively, or fallback in other platforms.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73015/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73015/timeline", "performed_via_github_app": null, "state_reason": null}