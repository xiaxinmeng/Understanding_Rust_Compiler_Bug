{"url": "https://api.github.com/repos/rust-lang/rust/issues/103582", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103582/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103582/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103582/events", "html_url": "https://github.com/rust-lang/rust/issues/103582", "id": 1424268989, "node_id": "I_kwDOAAsO6M5U5J69", "number": 103582, "title": "Hint for missing lifetime bound on trait object is missing if type alias is used", "user": {"login": "leo60228", "id": 8355305, "node_id": "MDQ6VXNlcjgzNTUzMDU=", "avatar_url": "https://avatars.githubusercontent.com/u/8355305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leo60228", "html_url": "https://github.com/leo60228", "followers_url": "https://api.github.com/users/leo60228/followers", "following_url": "https://api.github.com/users/leo60228/following{/other_user}", "gists_url": "https://api.github.com/users/leo60228/gists{/gist_id}", "starred_url": "https://api.github.com/users/leo60228/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leo60228/subscriptions", "organizations_url": "https://api.github.com/users/leo60228/orgs", "repos_url": "https://api.github.com/users/leo60228/repos", "events_url": "https://api.github.com/users/leo60228/events{/privacy}", "received_events_url": "https://api.github.com/users/leo60228/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": {"login": "yanchen4791", "id": 91304157, "node_id": "MDQ6VXNlcjkxMzA0MTU3", "avatar_url": "https://avatars.githubusercontent.com/u/91304157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchen4791", "html_url": "https://github.com/yanchen4791", "followers_url": "https://api.github.com/users/yanchen4791/followers", "following_url": "https://api.github.com/users/yanchen4791/following{/other_user}", "gists_url": "https://api.github.com/users/yanchen4791/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchen4791/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchen4791/subscriptions", "organizations_url": "https://api.github.com/users/yanchen4791/orgs", "repos_url": "https://api.github.com/users/yanchen4791/repos", "events_url": "https://api.github.com/users/yanchen4791/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchen4791/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "yanchen4791", "id": 91304157, "node_id": "MDQ6VXNlcjkxMzA0MTU3", "avatar_url": "https://avatars.githubusercontent.com/u/91304157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchen4791", "html_url": "https://github.com/yanchen4791", "followers_url": "https://api.github.com/users/yanchen4791/followers", "following_url": "https://api.github.com/users/yanchen4791/following{/other_user}", "gists_url": "https://api.github.com/users/yanchen4791/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchen4791/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchen4791/subscriptions", "organizations_url": "https://api.github.com/users/yanchen4791/orgs", "repos_url": "https://api.github.com/users/yanchen4791/repos", "events_url": "https://api.github.com/users/yanchen4791/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchen4791/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2022-10-26T15:36:32Z", "updated_at": "2022-12-01T17:06:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=a0979812dc1acbc732481dd2d3185637\r\n\r\n```rust\r\ntrait Greeter {\r\n    fn greet(&self);\r\n}\r\n\r\ntype BoxedGreeter = Box<dyn Greeter>;\r\n\r\nstruct FixedGreeter<'a>(pub &'a str);\r\n\r\nimpl Greeter for FixedGreeter<'_> {\r\n    fn greet(&self) {\r\n        println!(\"{}\", self.0)\r\n    }\r\n}\r\n\r\nstruct Greetings(pub Vec<String>);\r\n\r\nimpl Greetings {\r\n    pub fn get(&self, i: usize) -> BoxedGreeter {\r\n        Box::new(FixedGreeter(&self.0[i]))\r\n    }\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror: lifetime may not live long enough\r\n  --> src/lib.rs:19:9\r\n   |\r\n18 |     pub fn get(&self, i: usize) -> BoxedGreeter {\r\n   |                - let's call the lifetime of this reference `'1`\r\n19 |         Box::new(FixedGreeter(&self.0[i]))\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\r\n```\r\n\r\nHowever, by removing the type alias: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=bfde1cf5c8a72349b117aa21bbd61c3d\r\n\r\n```rust\r\ntrait Greeter {\r\n    fn greet(&self);\r\n}\r\n\r\nstruct FixedGreeter<'a>(pub &'a str);\r\n\r\nimpl Greeter for FixedGreeter<'_> {\r\n    fn greet(&self) {\r\n        println!(\"{}\", self.0)\r\n    }\r\n}\r\n\r\nstruct Greetings(pub Vec<String>);\r\n\r\nimpl Greetings {\r\n    pub fn get(&self, i: usize) -> Box<dyn Greeter> {\r\n        Box::new(FixedGreeter(&self.0[i]))\r\n    }\r\n}\r\n```\r\n\r\nThe output looks like this, which is much more helpful:\r\n\r\n```\r\nerror: lifetime may not live long enough\r\n  --> src/lib.rs:17:9\r\n   |\r\n16 |     pub fn get(&self, i: usize) -> Box<dyn Greeter> {\r\n   |                - let's call the lifetime of this reference `'1`\r\n17 |         Box::new(FixedGreeter(&self.0[i]))\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\r\n   |\r\nhelp: to declare that the trait object captures data from argument `self`, you can add an explicit `'_` lifetime bound\r\n   |\r\n16 |     pub fn get(&self, i: usize) -> Box<dyn Greeter + '_> {\r\n   |                                                    ++++\r\n```\r\n\r\nWithout the hint, this error isn't very helpful for beginners, as it doesn't do anything to explain *why* `'1` must outlive `'static`. It would be helpful if a similar hint could be provided when a type alias is used.\r\n\r\n<!-- TRIAGEBOT_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"yanchen4791\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_END -->\r\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103582/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103582/timeline", "performed_via_github_app": null, "state_reason": null}