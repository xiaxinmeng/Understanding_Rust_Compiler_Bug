{"url": "https://api.github.com/repos/rust-lang/rust/issues/110971", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110971/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110971/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110971/events", "html_url": "https://github.com/rust-lang/rust/issues/110971", "id": 1689286218, "node_id": "I_kwDOAAsO6M5ksHZK", "number": 110971, "title": "Compiler do not remove slice bounds checks if index is guaranteed to be less than part of the length", "user": {"login": "AngelicosPhosphoros", "id": 13154246, "node_id": "MDQ6VXNlcjEzMTU0MjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/13154246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AngelicosPhosphoros", "html_url": "https://github.com/AngelicosPhosphoros", "followers_url": "https://api.github.com/users/AngelicosPhosphoros/followers", "following_url": "https://api.github.com/users/AngelicosPhosphoros/following{/other_user}", "gists_url": "https://api.github.com/users/AngelicosPhosphoros/gists{/gist_id}", "starred_url": "https://api.github.com/users/AngelicosPhosphoros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AngelicosPhosphoros/subscriptions", "organizations_url": "https://api.github.com/users/AngelicosPhosphoros/orgs", "repos_url": "https://api.github.com/users/AngelicosPhosphoros/repos", "events_url": "https://api.github.com/users/AngelicosPhosphoros/events{/privacy}", "received_events_url": "https://api.github.com/users/AngelicosPhosphoros/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-04-29T00:46:19Z", "updated_at": "2023-05-26T23:42:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\npub fn test_assert(arr: &[u32], j: usize)->u32{\r\n    assert!(j < arr.len() / 2);\r\n    arr[j]\r\n}\r\n```\r\n\r\nI expected to see this happen: Since for any nonnegative integer `i / 2 < i`,   `j < i / 2` implies that `j < i` so we should not have bounds check here at indexing.\r\n\r\nInstead, this happened: Function checks j twice: first for `len / 2` then for `len`, and generates all code for panics.\r\n```asm\r\nexample::test_assert:\r\n        push    rax\r\n        mov     rax, rsi\r\n        shr     rax\r\n        cmp     rax, rdx\r\n        jbe     .LBB0_3\r\n        cmp     rdx, rsi\r\n        jae     .LBB0_2\r\n        mov     eax, dword ptr [rdi + 4*rdx]\r\n        pop     rcx\r\n        ret\r\n.LBB0_2:\r\n        lea     rax, [rip + .L__unnamed_1]\r\n        mov     rdi, rdx\r\n        mov     rdx, rax\r\n        call    qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\r\n        ud2\r\n.LBB0_3:\r\n        lea     rdi, [rip + .L__unnamed_2]\r\n        lea     rdx, [rip + .L__unnamed_3]\r\n        mov     esi, 35\r\n        call    qword ptr [rip + core::panicking::panic@GOTPCREL]\r\n        ud2\r\n```\r\n\r\nI noticed, that if we shorten slice first, it can remove bounds checks. E.g. this code doesn't generate any bounds checks:\r\n```rust\r\npub fn test_unreachable2(arr: &[u32], j: usize)->u32{\r\n    let arr = &arr[..arr.len() / 2];\r\n    if j >= arr.len() {\r\n        unsafe {\r\n            unreachable_unchecked();\r\n        }\r\n    }\r\n    arr[j]\r\n}\r\n```\r\n\r\n```asm\r\nexample::test_unreachable2:\r\n        mov     eax, dword ptr [rdi + 4*rdx]\r\n        ret\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.69.0 (84c898d65 2023-04-16)\r\nbinary: rustc\r\ncommit-hash: 84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc\r\ncommit-date: 2023-04-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.69.0\r\nLLVM version: 15.0.7\r\n```\r\n[Godbolt link.](https://godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:rust,selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:'pub+fn+test_assert(arr:+%26%5Bu32%5D,+j:+usize)-%3Eu32%7B%0A++++assert!!(j+%3C+arr.len()+/+2)%3B%0A++++arr%5Bj%5D%0A%7D%0A%0Ause+std::hint::unreachable_unchecked%3B%0Apub+fn+test_unreachable(arr:+%26%5Bu32%5D,+j:+usize)-%3Eu32%7B%0A++++if+j+%3E%3D+arr.len()+/+2+%7B%0A++++++++unsafe+%7B%0A++++++++++++unreachable_unchecked()%3B%0A++++++++%7D%0A++++%7D%0A++++arr%5Bj%5D%0A%7D%0A%0Apub+fn+test_unreachable2(arr:+%26%5Bu32%5D,+j:+usize)-%3Eu32%7B%0A++++let+arr+%3D+%26arr%5B..arr.len()+/+2%5D%3B%0A++++if+j+%3E%3D+arr.len()+%7B%0A++++++++unsafe+%7B%0A++++++++++++unreachable_unchecked()%3B%0A++++++++%7D%0A++++%7D%0A++++arr%5Bj%5D%0A%7D'),l:'5',n:'0',o:'Rust+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:r1690,deviceViewOpen:'1',filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:rust,libs:!(),options:'-Copt-level%3D3',selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+rustc+1.69.0+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4)\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110971/timeline", "performed_via_github_app": null, "state_reason": null}