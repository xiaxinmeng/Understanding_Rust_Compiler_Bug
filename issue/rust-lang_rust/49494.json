{"url": "https://api.github.com/repos/rust-lang/rust/issues/49494", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49494/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49494/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49494/events", "html_url": "https://github.com/rust-lang/rust/issues/49494", "id": 310005035, "node_id": "MDU6SXNzdWUzMTAwMDUwMzU=", "number": 49494, "title": "Cannot move out of borrowed content does not show exact problem?", "user": {"login": "spease", "id": 2825204, "node_id": "MDQ6VXNlcjI4MjUyMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2825204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spease", "html_url": "https://github.com/spease", "followers_url": "https://api.github.com/users/spease/followers", "following_url": "https://api.github.com/users/spease/following{/other_user}", "gists_url": "https://api.github.com/users/spease/gists{/gist_id}", "starred_url": "https://api.github.com/users/spease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spease/subscriptions", "organizations_url": "https://api.github.com/users/spease/orgs", "repos_url": "https://api.github.com/users/spease/repos", "events_url": "https://api.github.com/users/spease/events{/privacy}", "received_events_url": "https://api.github.com/users/spease/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-30T08:10:35Z", "updated_at": "2020-04-13T06:50:18Z", "closed_at": "2020-03-15T17:02:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nerror[E0507]: cannot move out of borrowed content\r\n  --> src/main.rs:41:9\r\n   |\r\n41 | /         streams.entry(symbol_bytes).or_insert_with(||OpenOptions::new()\r\n42 | |                 .write(true)\r\n43 | |                 .append(true)\r\n44 | |                 .create(true)\r\n45 | |                 .open(&output_path).map(BufWriter::new))\r\n   | |________________________________________________________^ cannot move out of borrowed content\r\n```\r\n\r\nCode:\r\n```\r\nextern crate itertools;\r\n#[macro_use]\r\nextern crate quicli;\r\n\r\nuse itertools::Itertools;\r\nuse std::collections::HashMap;\r\nuse std::ffi::OsString;\r\nuse std::fs::{File, OpenOptions};\r\nuse std::io::{BufRead, BufReader, BufWriter, Write};\r\nuse std::path::{Path, PathBuf};\r\nuse quicli::prelude::*;\r\n\r\n// Add cool slogan for your app here, e.g.:\r\n/// Get first n lines of a file\r\n#[derive(Debug, StructOpt)]\r\nstruct Cli {\r\n    #[structopt(parse(from_os_str))]\r\n    filepath: PathBuf,\r\n\r\n    #[structopt(long = \"verbose\", short = \"v\", parse(from_occurrences))]\r\n    verbosity: u8,\r\n}\r\n\r\n\r\nmain!(|args: Cli, log_level: verbosity| {\r\n    let mut output_path = r#\"C:\\outRust\\xxxx.txt\"#.to_string();\r\n    let lines = BufReader::new(File::open(args.filepath)?)\r\n        .lines()\r\n        .skip(1);\r\n\r\n    let mut streams = HashMap::new();\r\n\r\n    for line in lines {\r\n        let l = line?;\r\n        if l.is_empty() || l.chars().tuple_windows().any(|(a,b)| a == 'R' && (b == 'H' || b == 'T')) {\r\n            continue;\r\n        }\r\n        let symbol = &l[11..15];\r\n        let symbol_bytes = unsafe { *std::mem::transmute::<*const u8, *const [u8; 4]>(l.as_bytes().as_ptr())};\r\n        unsafe { (&mut output_path)[11..15].as_bytes_mut() } .copy_from_slice(symbol.as_bytes());\r\n        streams.entry(symbol_bytes).or_insert_with(||OpenOptions::new()\r\n                .write(true)\r\n                .append(true)\r\n                .create(true)\r\n                .open(&output_path).map(BufWriter::new))\r\n            .and_then(|mut f|writeln!(&mut f, \"{}\", &l))?;\r\n    }\r\n});\r\n\r\n```", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49494/timeline", "performed_via_github_app": null, "state_reason": "completed"}