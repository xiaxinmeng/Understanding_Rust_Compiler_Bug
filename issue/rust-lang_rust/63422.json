{"url": "https://api.github.com/repos/rust-lang/rust/issues/63422", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63422/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63422/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63422/events", "html_url": "https://github.com/rust-lang/rust/issues/63422", "id": 479140902, "node_id": "MDU6SXNzdWU0NzkxNDA5MDI=", "number": 63422, "title": "Unexpected error in for loop: use of possibly uninitialized", "user": {"login": "crusty-dave", "id": 41089818, "node_id": "MDQ6VXNlcjQxMDg5ODE4", "avatar_url": "https://avatars.githubusercontent.com/u/41089818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusty-dave", "html_url": "https://github.com/crusty-dave", "followers_url": "https://api.github.com/users/crusty-dave/followers", "following_url": "https://api.github.com/users/crusty-dave/following{/other_user}", "gists_url": "https://api.github.com/users/crusty-dave/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusty-dave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusty-dave/subscriptions", "organizations_url": "https://api.github.com/users/crusty-dave/orgs", "repos_url": "https://api.github.com/users/crusty-dave/repos", "events_url": "https://api.github.com/users/crusty-dave/events{/privacy}", "received_events_url": "https://api.github.com/users/crusty-dave/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-09T19:48:18Z", "updated_at": "2019-08-09T22:06:37Z", "closed_at": "2019-08-09T22:00:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code:\r\n\r\n```\r\nfn main() {\r\n\r\n    let foo = 10;\r\n    \r\n    let result;\r\n    for _i in 1..=1 {        if foo == 10 {\r\n            result = true;\r\n            break;\r\n        }\r\n        \r\n        match foo {\r\n            7 => {\r\n                result = true;\r\n            }\r\n            _ => {\r\n                result = false;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        break;\r\n    }\r\n    \r\n    println!(\"{}\", result)\r\n}\r\n```\r\n\r\nyields the following error:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0381]: borrow of possibly uninitialized variable: `result`\r\n  --> src/main.rs:25:20\r\n   |\r\n25 |     println!(\"{}\", result)\r\n   |                    ^^^^^^ use of possibly uninitialized `result`\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nRemove the break at the end of the for loop and one gets the following:\r\n\r\n```\r\nfn main() {\r\n\r\n    let foo = 10;\r\n    \r\n    let result;\r\n    for _i in 1..=1 {        if foo == 10 {\r\n            result = true;\r\n            break;\r\n        }\r\n        \r\n        match foo {\r\n            7 => {\r\n                result = true;\r\n            }\r\n            _ => {\r\n                result = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    println!(\"{}\", result)\r\n}\r\n\r\n```\r\n\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0384]: cannot assign twice to immutable variable `result`\r\n  --> src/main.rs:8:13\r\n   |\r\n5  |     let result;\r\n   |         ------ help: make this binding mutable: `mut result`\r\n...\r\n8  |             result = true;\r\n   |             ^^^^^^^^^^^^^ cannot assign twice to immutable variable\r\n...\r\n14 |                 result = true;\r\n   |                 ------------- first assignment to `result`\r\n\r\nerror[E0384]: cannot assign twice to immutable variable `result`\r\n  --> src/main.rs:14:17\r\n   |\r\n5  |     let result;\r\n   |         ------ help: make this binding mutable: `mut result`\r\n...\r\n14 |                 result = true;\r\n   |                 ^^^^^^^^^^^^^ cannot assign twice to immutable variable\r\n\r\nerror[E0384]: cannot assign twice to immutable variable `result`\r\n  --> src/main.rs:17:17\r\n   |\r\n5  |     let result;\r\n   |         ------ help: make this binding mutable: `mut result`\r\n...\r\n14 |                 result = true;\r\n   |                 ------------- first assignment to `result`\r\n...\r\n17 |                 result = false;\r\n   |                 ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\r\n\r\nerror[E0381]: borrow of possibly uninitialized variable: `result`\r\n  --> src/main.rs:24:20\r\n   |\r\n24 |     println!(\"{}\", &result)\r\n   |                    ^^^^^^^ use of possibly uninitialized `result`\r\n\r\nerror: aborting due to 4 previous errors\r\n```\r\n\r\nReplace the for loop with loop {break;}:\r\n\r\n```\r\nfn main() {\r\n\r\n    let foo = 10;\r\n    \r\n    let result;\r\n    loop {\r\n        if foo == 10 {\r\n            result = true;\r\n            break;\r\n        }\r\n        \r\n        match foo {\r\n            7 => {\r\n                result = true;\r\n            }\r\n            _ => {\r\n                result = false;\r\n                break;\r\n            }\r\n        }        \r\n        break;\r\n    }\r\n    \r\n    println!(\"{}\", result)\r\n}\r\n```\r\n\r\nThen it works as expected:\r\n\r\n```\r\nStandard Error\r\n   Compiling playground v0.0.1 (/playground)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.81s\r\n     Running `target/debug/playground`\r\n\r\nStandard Output\r\nfalse\r\n```\r\n\r\nThe problem with the last syntax is that it would be easy to forget the break at the end.\r\n\r\nThe point behind using this syntax in the first place is to avoid deep nesting for error handling.\r\n\r\nWhy are the errors present (and so different)?\r\n\r\nIf the compiler is able to determine that loop {break;} will execute only once, surely it can also detect that for _i in 1..=1 will also execute only once?\r\n\r\nFYI: in the code where I found this issue, my result is an http response, so I don't want to make result mutable and initialize it with a response that will just get thrown away.\r\n\r\n", "closed_by": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63422/timeline", "performed_via_github_app": null, "state_reason": "completed"}