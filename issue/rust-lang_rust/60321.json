{"url": "https://api.github.com/repos/rust-lang/rust/issues/60321", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60321/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60321/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60321/events", "html_url": "https://github.com/rust-lang/rust/issues/60321", "id": 437882183, "node_id": "MDU6SXNzdWU0Mzc4ODIxODM=", "number": 60321, "title": "llvm lint: Unusual: \"Load from function body\" on unsafe code", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-26T23:55:33Z", "updated_at": "2019-09-18T00:36:26Z", "closed_at": "2019-09-18T00:36:26Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "````\r\nrustc 1.36.0-nightly (3991285f5 2019-04-25)\r\nbinary: rustc\r\ncommit-hash: 3991285f55a4b7cd92b7ffcdc396a3023076f5cb\r\ncommit-date: 2019-04-25\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.36.0-nightly\r\nLLVM version: 8.0\r\n````\r\n\r\n````\r\nrustc src/test/run-pass/thinlto/thin-lto-inlines.rs -C passes=lint -C opt-level=3 \r\nUnusual: Load from function body\r\n  %28 = load i8, i8* bitcast (i32 ()* @_ZN16thin_lto_inlines3foo17h0a63dafc3d3ea645E to i8*), align 1\r\nUnusual: Load from function body\r\n  %29 = load i8, i8* bitcast (i32 ()* @_ZN16thin_lto_inlines3bar3bar17hb953f1ee32a332f0E to i8*), align 1\r\n````\r\n\r\nthe code contains unsafe code though:\r\n````rust\r\n// run-pass\r\n\r\n// compile-flags: -Z thinlto -C codegen-units=8 -O\r\n// ignore-emscripten can't inspect instructions on emscripten\r\n\r\n// We want to assert here that ThinLTO will inline across codegen units. There's\r\n// not really a great way to do that in general so we sort of hack around it by\r\n// praying two functions go into separate codegen units and then assuming that\r\n// if inlining *doesn't* happen the first byte of the functions will differ.\r\n\r\npub fn foo() -> u32 {\r\n    bar::bar()\r\n}\r\n\r\nmod bar {\r\n    pub fn bar() -> u32 {\r\n        3\r\n    }\r\n}\r\n\r\nfn main() {\r\n    println!(\"{} {}\", foo(), bar::bar());\r\n\r\n    unsafe {\r\n        let foo = foo as usize as *const u8;\r\n        let bar = bar::bar as usize as *const u8;\r\n\r\n        assert_eq!(*foo, *bar);\r\n    }\r\n}\r\n````\r\ncc #7463", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60321/timeline", "performed_via_github_app": null, "state_reason": "completed"}