{"url": "https://api.github.com/repos/rust-lang/rust/issues/75001", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75001/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75001/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75001/events", "html_url": "https://github.com/rust-lang/rust/issues/75001", "id": 670532483, "node_id": "MDU6SXNzdWU2NzA1MzI0ODM=", "number": 75001, "title": "Error messages confusing trying to return errors across threads", "user": {"login": "jgarvin", "id": 102322, "node_id": "MDQ6VXNlcjEwMjMyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/102322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgarvin", "html_url": "https://github.com/jgarvin", "followers_url": "https://api.github.com/users/jgarvin/followers", "following_url": "https://api.github.com/users/jgarvin/following{/other_user}", "gists_url": "https://api.github.com/users/jgarvin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgarvin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgarvin/subscriptions", "organizations_url": "https://api.github.com/users/jgarvin/orgs", "repos_url": "https://api.github.com/users/jgarvin/repos", "events_url": "https://api.github.com/users/jgarvin/events{/privacy}", "received_events_url": "https://api.github.com/users/jgarvin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-01T05:09:30Z", "updated_at": "2020-08-06T21:26:56Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Compiling:\r\n\r\n```rust\r\nfn main() -> Result<(), Box<dyn std::error::Error>> \r\n{\r\n    std::thread::spawn(|| -> Result<(), Box<dyn std::error::Error>> {\r\n        Ok(()) \r\n    });\r\n    Ok(())\r\n}\r\n```\r\n\r\nGives:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0277]: `dyn std::error::Error` cannot be sent between threads safely\r\n   --> src/main.rs:5:5\r\n    |\r\n5   |     std::thread::spawn(|| -> Result<(), Box<dyn std::error::Error>> {\r\n    |     ^^^^^^^^^^^^^^^^^^ `dyn std::error::Error` cannot be sent between threads safely\r\n    |\r\n    = help: the trait `std::marker::Send` is not implemented for `dyn std::error::Error`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<dyn std::error::Error>`\r\n    = note: required because it appears within the type `std::boxed::Box<dyn std::error::Error>`\r\n    = note: required because it appears within the type `std::result::Result<(), std::boxed::Box<dyn std::error::Error>>`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\nSince this is the frequently suggested idiom for being able to return any kind of error, it can be surprising to users that it doesn't seem to work for threads other than the main thread. It could suggest adding Send, and then users can quickly run into another problem:\r\n\r\n```rust\r\nfn fallible() -> Result<(), std::io::Error> \r\n{\r\n    Ok(())\r\n}\r\n\r\nfn main() -> Result<(), Box<dyn std::error::Error>> \r\n{\r\n    std::thread::spawn(|| -> Result<(), Box<dyn std::error::Error + Send>> {\r\n        fallible()?;\r\n        Ok(())\r\n    });\r\n    Ok(())\r\n}\r\n```\r\n\r\nWhere they will get the error:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0277]: `?` couldn't convert the error to `std::boxed::Box<dyn std::error::Error + std::marker::Send>`\r\n --> src/main.rs:9:19\r\n  |\r\n9 |         fallible()?;\r\n  |                   ^ the trait `std::convert::From<std::io::Error>` is not implemented for `std::boxed::Box<dyn std::error::Error + std::marker::Send>`\r\n  |\r\n  = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\r\n  = help: the following implementations were found:\r\n            <std::boxed::Box<(dyn std::error::Error + 'a)> as std::convert::From<E>>\r\n            <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<&str>>\r\n            <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<std::borrow::Cow<'a, str>>>\r\n            <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<std::string::String>>\r\n          and 22 others\r\n  = note: required by `std::convert::From::from`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\nWhich is confusing even for people who know about Send, because intuitively we should be able to convert from something with more requirements to something with less requirements.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75001/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75001/timeline", "performed_via_github_app": null, "state_reason": null}