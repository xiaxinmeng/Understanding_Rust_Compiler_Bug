{"url": "https://api.github.com/repos/rust-lang/rust/issues/91942", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91942/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91942/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91942/events", "html_url": "https://github.com/rust-lang/rust/issues/91942", "id": 1080403145, "node_id": "I_kwDOAAsO6M5AZaTJ", "number": 91942, "title": "Inferred struct lifetime bounds result in rejection of valid lifetimes", "user": {"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3675472455, "node_id": "LA_kwDOAAsO6M7bE0JH", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-variance", "name": "A-variance", "color": "f7e101", "default": false, "description": "Area: Variance (https://doc.rust-lang.org/nomicon/subtyping.html)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2021-12-14T23:44:22Z", "updated_at": "2022-01-03T16:48:55Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I have skimmed about 100+ \"similar\" issues here and could find one that matches this issue, so apologies if this was already reported. The issue that seems most similar is this one: https://github.com/rust-lang/rust/issues/87241.\r\n\r\nI have tried to reduce this lifetime issue as much as possible to the essentials, but it's unfortunately still a bit of code:\r\n\r\n```rust\r\nfn main() {\r\n}\r\n\r\nstruct Impl<'db> {\r\n    some_trait: &'db dyn Trait<'db>,\r\n}\r\n\r\nimpl<'db> Trait<'db> for Impl<'db> {\r\n    fn foo(&self, s: &mut State<'db, '_>) {\r\n        Car::new(s).debug(s, &mut |s| {\r\n            self.some_trait.foo(s);\r\n        });\r\n    }\r\n}\r\n\r\ntrait Trait<'db> {\r\n    fn foo(&self, s: &mut State<'db, '_>);\r\n}\r\n\r\nstruct State<'db, 'a> {\r\n    car: &'a Car<'db>,\r\n}\r\n\r\nstruct Car<'db> {\r\n    foo: &'db u128,\r\n}\r\n\r\nimpl<'db> Car<'db> {\r\n    fn new(s: &mut State<'db, '_>) -> Self {\r\n        todo!()\r\n    }\r\n\r\n    fn debug(\r\n        &self,\r\n        s: &mut State<'db, '_>,\r\n        callable: &mut impl Fn(&mut State<'db, '_>),\r\n    ) {\r\n        todo!()\r\n    }\r\n}\r\n```\r\n\r\nI expected this to pass the borrow checker (`cannot infer an appropriate lifetime...`; see below). The problem could be that `'db: 'a` is inferred for `struct State`, because if you rewrite that struct into this piece of code:\r\n\r\n```\r\nstruct State<'db, 'a> {\r\n    car: &'db Car<'db>,\r\n    bar: &'a Car<'a>,\r\n}\r\n```\r\n\r\nthe borrow checker is happy. However the borrow checker is also happy if I'm using `some_trait: &'db Impl<'db>`, so it feels like this is really an issue and not me misunderstanding lifetimes. I have tried various approaches like using HRTBs and a lot of complicated `where:` with explicit lifetimes, but nothing helped.\r\n\r\nI run a lot of similar code that passes, but this one doesn't, because the closure is using `self.some_trait` and not something given by the closure (in which case everything would work great!).\r\n\r\nSo again, sorry for the \"long\" code piece, but I have tried to reduce it for hours and couldn't really get further. I hope I do not waste your time with this.\r\n\r\n------------------------\r\n\r\nThe actual long-form error: \r\n\r\n```\r\n$ RUST_BACKTRACE=1 ca\r\nrgo build\r\n   Compiling zuban_python v0.1.0 (/home/dave/source/rust/issues/lifetimev4/zuban_python)\r\nerror[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements\r\n  --> zuban_python/src/lib.rs:11:29\r\n   |\r\n11 |             self.some_trait.foo(s);\r\n   |                             ^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the lifetime `'db` as defined on the impl at 8:6...\r\n  --> zuban_python/src/lib.rs:8:6\r\n   |\r\n8  | impl<'db> Trait<'db> for Impl<'db> {\r\n   |      ^^^\r\nnote: ...so that the declared lifetime parameter bounds are satisfied\r\n  --> zuban_python/src/lib.rs:11:29\r\n   |\r\n11 |             self.some_trait.foo(s);\r\n   |                             ^^^\r\nnote: but, the lifetime must be valid for the anonymous lifetime #2 defined on the body at 10:35...\r\n  --> zuban_python/src/lib.rs:10:35\r\n   |\r\n10 |           Car::new(s).debug(s, &mut |s| {\r\n   |  ___________________________________^\r\n11 | |             self.some_trait.foo(s);\r\n12 | |         });\r\n   | |_________^\r\nnote: ...so that the expression is assignable\r\n  --> zuban_python/src/lib.rs:11:33\r\n   |\r\n11 |             self.some_trait.foo(s);\r\n   |                                 ^\r\n   = note: expected `&mut State<'db, '_>`\r\n              found `&mut State<'_, '_>`\r\n\r\nFor more information about this error, try `rustc --explain E0495`.\r\nerror: could not compile `zuban_python` due to previous error\r\n```\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.56.0 (09c42c458 2021-10-18)\r\nbinary: rustc\r\ncommit-hash: 09c42c45858d5f3aedfa670698275303a3d19afa\r\ncommit-date: 2021-10-18\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.56.0\r\nLLVM version: 13.0.0\r\n\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91942/timeline", "performed_via_github_app": null, "state_reason": null}