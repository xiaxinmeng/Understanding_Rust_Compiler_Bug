{"url": "https://api.github.com/repos/rust-lang/rust/issues/3863", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3863/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3863/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3863/events", "html_url": "https://github.com/rust-lang/rust/issues/3863", "id": 7879577, "node_id": "MDU6SXNzdWU3ODc5NTc3", "number": 3863, "title": "Containers - meta-issue to talk about quality of containers, what should be replaced, etc", "user": {"login": "dbp", "id": 569509, "node_id": "MDQ6VXNlcjU2OTUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/569509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbp", "html_url": "https://github.com/dbp", "followers_url": "https://api.github.com/users/dbp/followers", "following_url": "https://api.github.com/users/dbp/following{/other_user}", "gists_url": "https://api.github.com/users/dbp/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbp/subscriptions", "organizations_url": "https://api.github.com/users/dbp/orgs", "repos_url": "https://api.github.com/users/dbp/repos", "events_url": "https://api.github.com/users/dbp/events{/privacy}", "received_events_url": "https://api.github.com/users/dbp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2012-10-26T00:43:18Z", "updated_at": "2013-02-17T01:39:55Z", "closed_at": "2013-02-17T01:39:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "One of the main things people often look at standard libraries for are good containers. \n\nRight now, as far as I can tell, there are the following containers:\n\nHashMap - in std/map.rs - a chained hash-table, with the usual performance characteristics (expected constant time access, insert, removal, no order, no comparing)\n\nLinearMap - in core/send_map.rs - open addressing hash table, sendable (same general behavior as above, but sendable)\n\nTreeMap - in std/treemap.rs - unbalanced binary search tree, very bad pathological inputs, is ordered, can be compared\n\nFunTreeMap - in std/fun_treemap.rs - looks to be the same as above, but without mutation.\n\nSmallIntMap - in std/smallintmap.rs - wee! constant time everything, ordered, comparable! oh yeah, space order the maximum key :)\n\nSo here are some questions I have:\n1. There are tradeoffs between chained hashing and open addressing - are the implementation differences relevant for sendability? If not, could they both be sendable? It seems that in general having two different hash tables to have different performance characteristics makes sense, as long as it is clear and documented, but having them differ in sendability seems like a separate issue (but I may just not understand what's going on). Also, is LinearMap in core because it is used internally for rustc? Otherwise, seems a bit odd (as even the Map trait is in std).\n2. The TreeMaps should be replaced with self-balancing trees, as the comments in the file suggest (Red-black seems like the choice), but I'm wondering if the distinction between TreeMap and FunTreeMap makes sense. Is there a way that this could be pushed into the interface? I'm not sure if this is possible, but if it is, it definitely seems desirable (as having two basically parallel implementations is not good).\n3. Right now there is a Map trait (in std/map.rs) - How about also having an OrderedMap interface? Is there a way to tie mutability into the interfaces, and is that desired?\n4. There is a type alias in TreeMap that defines a Set as a TreeMap to unit values. It would be good to have an actual Set type (though it could internally be the the same).\n\nAny thoughts people have about containers? Time permitting, I might work on a red-black tree implementation to replace the TreeMap.\n\nRelated issues (that I found): #3385, #2009\n", "closed_by": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3863/timeline", "performed_via_github_app": null, "state_reason": "completed"}