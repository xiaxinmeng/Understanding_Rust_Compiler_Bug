{"url": "https://api.github.com/repos/rust-lang/rust/issues/105060", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105060/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105060/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105060/events", "html_url": "https://github.com/rust-lang/rust/issues/105060", "id": 1468433248, "node_id": "I_kwDOAAsO6M5XhoNg", "number": 105060, "title": "Track perf regression \"Branch Clause from Predicate #104846\"", "user": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 419557634, "node_id": "MDU6TGFiZWw0MTk1NTc2MzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-medium", "name": "E-medium", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Medium / intermediate"}], "state": "open", "locked": false, "assignee": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2022-11-29T17:18:18Z", "updated_at": "2023-04-13T13:20:21Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "A perf regression was introduced by #104846, https://github.com/rust-lang/rust/pull/104846#issuecomment-1327887603\r\n\r\nRight now we are moving (moderately large) `Clause`s around. What we often do in the compiler is to wrap such types in a newtype and an `Interned` (see `ty::Ty`, `ty::Predicate` and `ty::Const`) for examples. So what we could do is do the same thing with `Clause`. It does mean every time we match on it we need to add and call something like the `kind` method on `Ty` and `Predicate` to get at the inner `Clause`. There's also some naming issues, as you can't have both the interned type and the inner type be called `ty::Clause`. One solution could be to publicly reexport all `Clause` variants from the `clause` module, so we can write `clause::Trait` instead of `Clause::Trait`, and then rename the current `Clause` enum to `ClauseKind`. After that the `Clause` name is free again for use by the wrapper type.\r\n\r\neach of these steps could be a separate PR, but should at least be a separate commit for easy review and rebases.\r\n\r\nThe plan again in a more structured manner (where each step is a commit):\r\n\r\n* [ ] (`E-easy`) reexport `Clause`'s variants from the `clause` module and change all uses of `Clause::Foo` to `clause::Foo` and import the `clause` module where necessary.\r\n* [ ] (`E-medium`) rename `Clause` to `ClauseKind` and add the wrapper type called `Clause`, add `Clause` to  the `direct_interners!` macro invocation, use `mk_clause` at all sites that create `Clause`s, add a `kind` method to the new `Clause` type, call `kind` at each site that matches on `ClauseKind` variants.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105060/timeline", "performed_via_github_app": null, "state_reason": null}