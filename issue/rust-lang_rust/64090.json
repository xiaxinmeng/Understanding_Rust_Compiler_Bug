{"url": "https://api.github.com/repos/rust-lang/rust/issues/64090", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/64090/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/64090/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/64090/events", "html_url": "https://github.com/rust-lang/rust/issues/64090", "id": 488140857, "node_id": "MDU6SXNzdWU0ODgxNDA4NTc=", "number": 64090, "title": "Missed-optimization: extern \"C\" fn type calls are not nounwind", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-09-02T11:24:38Z", "updated_at": "2019-09-13T16:19:23Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See https://rust.godbolt.org/z/9UvEyu\r\n\r\n```rust\r\n#![feature(unwind_attributes)]\r\n\r\nextern \"C\" { \r\n    #[unwind(allow)] fn foo(); \r\n    // fn bar();\r\n    static bar: extern \"C\" fn(); \r\n    static mut BAR: i32;\r\n}\r\n\r\nstruct Foo;\r\nimpl Drop for Foo {\r\n    fn drop(&mut self) {\r\n        unsafe { BAR = 42; }\r\n    }\r\n}\r\n\r\npub unsafe fn unwind() { \r\n    let x = Foo;\r\n    foo(); \r\n    std::mem::forget(x);\r\n}\r\npub unsafe fn nounwind() { \r\n    let x = Foo;\r\n    bar(); \r\n    std::mem::forget(x);\r\n}\r\n```\r\n\r\nWhen the function `extern \"C\" { fn bar(); }` is called, the `nounwind` function is compiled to:\r\n\r\n```asm\r\nexample::nounwind:\r\n        jmpq    *bar@GOTPCREL(%rip)\r\n```\r\n\r\nHowever, when the function type `static bar: extern \"C\" fn();` is called, this sub-optimal machine code is emitted:\r\n\r\n```asm\r\nexample::nounwind:\r\n        pushq   %rbx\r\n        movq    bar@GOTPCREL(%rip), %rax\r\n        callq   *(%rax)\r\n        popq    %rbx\r\n        retq\r\n        movq    %rax, %rbx\r\n        callq   core::ptr::real_drop_in_place\r\n        movq    %rbx, %rdi\r\n        callq   _Unwind_Resume@PLT\r\n        ud2\r\n```\r\n\r\nThis means that we can't call the large majority of C FFI functions, which cannot unwind, and all of the C++ `noexcept` functions, which cannot unwind either, from Rust function pointers efficiently.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/64090/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 2, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/64090/timeline", "performed_via_github_app": null, "state_reason": null}