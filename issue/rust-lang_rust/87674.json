{"url": "https://api.github.com/repos/rust-lang/rust/issues/87674", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87674/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87674/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87674/events", "html_url": "https://github.com/rust-lang/rust/issues/87674", "id": 957312179, "node_id": "MDU6SXNzdWU5NTczMTIxNzk=", "number": 87674, "title": "Computing and checking generics of type which uses const generics", "user": {"login": "ViliamVadocz", "id": 26529068, "node_id": "MDQ6VXNlcjI2NTI5MDY4", "avatar_url": "https://avatars.githubusercontent.com/u/26529068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ViliamVadocz", "html_url": "https://github.com/ViliamVadocz", "followers_url": "https://api.github.com/users/ViliamVadocz/followers", "following_url": "https://api.github.com/users/ViliamVadocz/following{/other_user}", "gists_url": "https://api.github.com/users/ViliamVadocz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ViliamVadocz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ViliamVadocz/subscriptions", "organizations_url": "https://api.github.com/users/ViliamVadocz/orgs", "repos_url": "https://api.github.com/users/ViliamVadocz/repos", "events_url": "https://api.github.com/users/ViliamVadocz/events{/privacy}", "received_events_url": "https://api.github.com/users/ViliamVadocz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 1486687397, "node_id": "MDU6TGFiZWwxNDg2Njg3Mzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_generics", "name": "F-const_generics", "color": "f9c0cc", "default": false, "description": "`#![feature(const_generics)]`"}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-07-31T20:02:29Z", "updated_at": "2021-08-08T09:59:54Z", "closed_at": "2021-08-08T09:59:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\nI tried simplifying my code, but the code is quite complex and I wasn't able to recreate the ICE. Here is the repo which you can try building to see it for yourself: https://github.com/ViliamVadocz/Onitama-Alpha-Zero\r\n\r\nThe main source of the issue is my Tensor structs which look similar to the below code. I have had issues with this [in the past](https://github.com/rust-lang/rust/issues/84408). The ICE started happening after I added convolution with fft. I [use a `const fn`](https://github.com/ViliamVadocz/Onitama-Alpha-Zero/blob/master/tensor/src/convolution_fft.rs#L23) to simplify writing the types. Maybe it's related? Sorry for the code mess; I didn't plan to show this code to other people.\r\n\r\n```Rust\r\n#![feature(const_generics, const_evaluatable_checked)]\r\n#![allow(incomplete_features)]\r\n\r\ntrait Tensor<T, const X: usize>: Sized {\r\n    fn new(data: [T; X]) -> Self;\r\n    fn get_data(self) -> [T; X];\r\n    fn reshape<G: Tensor<T, X>>(self) -> G {\r\n        G::new(self.get_data())\r\n    }\r\n}\r\n\r\nstruct Tensor1<T, const L: usize>([T; L]);\r\nimpl<T, const L: usize> Tensor<T, L> for Tensor1<T, L> {\r\n    fn new(data: [T; L]) -> Self {\r\n        Tensor1(data)\r\n    }\r\n    fn get_data(self) -> [T; L] {\r\n        self.0\r\n    }\r\n}\r\n\r\nstruct Tensor2<T, const R: usize, const C: usize>([T; R * C])\r\nwhere\r\n    [(); R * C]: ;\r\nimpl<T, const R: usize, const C: usize> Tensor<T, { R * C }> for Tensor2<T, R, C>\r\nwhere\r\n    [(); R * C]: ,\r\n{\r\n    fn new(data: [T; R * C]) -> Self {\r\n        Tensor2(data)\r\n    }\r\n    fn get_data(self) -> [T; R * C] {\r\n        self.0\r\n    }\r\n}\r\n\r\nstruct Tensor3<T, const R: usize, const C: usize, const D: usize>([T; R * C * D])\r\nwhere\r\n    [(); R * C * D]: ;\r\nimpl<T, const R: usize, const C: usize, const D: usize> Tensor<T, { R * C * D }> for Tensor3<T, R, C, D>\r\nwhere\r\n    [(); R * C * D]: ,\r\n{\r\n    fn new(data: [T; R * C * D]) -> Self {\r\n        Tensor3(data)\r\n    }\r\n    fn get_data(self) -> [T; R * C * D] {\r\n        self.0\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.56.0-nightly (1f0a591b3 2021-07-30)\r\nbinary: rustc\r\ncommit-hash: 1f0a591b3a5963a0ab11a35dc525ad9d46f612e4\r\ncommit-date: 2021-07-30\r\nhost: x86_64-pc-windows-gnu\r\nrelease: 1.56.0-nightly\r\nLLVM version: 12.0.1\r\n```\r\n\r\n### Error output\r\n\r\n```\r\n> cargo build\r\n   Compiling tensor v0.1.0 (D:\\Code\\Onitama-Alpha-Zero\\tensor)\r\n   Compiling onitama-alpha-zero v0.1.0 (D:\\Code\\Onitama-Alpha-Zero)\r\nthread 'rustc' panicked at 'called `Option::unwrap()` on a `None` value', compiler\\rustc_metadata\\src\\rmeta\\decoder.rs:914:54\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4\\/library\\std\\src/panicking.rs:516:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4\\/library\\core\\src/panicking.rs:93:14\r\n   2: core::panicking::panic\r\n             at /rustc/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4\\/library\\core\\src/panicking.rs:50:5\r\n   3: rustc_metadata::rmeta::decoder::<impl rustc_metadata::creader::CrateMetadataRef>::get_generics\r\n   4: rustc_metadata::rmeta::decoder::cstore_impl::provide_extern::generics_of\r\n   5: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n   6: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n   7: rustc_data_structures::stack::ensure_sufficient_stack\r\n   8: rustc_query_system::query::plumbing::force_query_with_job\r\n   9: rustc_query_system::query::plumbing::get_query_impl\r\n  10: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::generics_of\r\n  11: <rustc_middle::ty::print::pretty::FmtPrinter<F> as rustc_middle::ty::print::Printer>::print_def_path\r\n  12: <rustc_middle::ty::print::pretty::FmtPrinter<F> as rustc_middle::ty::print::Printer>::print_def_path\r\n  13: <rustc_middle::ty::instance::Instance as core::fmt::Display>::fmt\r\n  14: std::thread::local::LocalKey<T>::with\r\n  15: rustc_mir::const_eval::eval_queries::eval_to_allocation_raw_provider\r\n  16: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  17: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  18: rustc_data_structures::stack::ensure_sufficient_stack\r\n  19: rustc_query_system::query::plumbing::get_query_impl\r\n  20: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::eval_to_allocation_raw\r\n  21: rustc_mir::const_eval::eval_queries::eval_to_const_value_raw_provider\r\n  22: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  23: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  24: rustc_data_structures::stack::ensure_sufficient_stack\r\n  25: rustc_query_system::query::plumbing::get_query_impl\r\n  26: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::eval_to_const_value_raw\r\n  27: rustc_mir::const_eval::eval_queries::eval_to_const_value_raw_provider\r\n  28: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  29: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  30: rustc_data_structures::stack::ensure_sufficient_stack\r\n  31: rustc_query_system::query::plumbing::get_query_impl\r\n  32: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::eval_to_const_value_raw\r\n  33: rustc_middle::mir::interpret::queries::<impl rustc_middle::ty::context::TyCtxt>::const_eval_global_id\r\n  34: rustc_middle::mir::interpret::queries::<impl rustc_middle::ty::context::TyCtxt>::const_eval_resolve\r\n  35: rustc_middle::ty::consts::kind::ConstKind::try_eval\r\n  36: rustc_middle::ty::inhabitedness::type_uninhabited_from\r\n  37: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  38: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  39: rustc_data_structures::stack::ensure_sufficient_stack\r\n  40: rustc_query_system::query::plumbing::get_query_impl\r\n  41: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::type_uninhabited_from\r\n  42: rustc_middle::ty::inhabitedness::<impl rustc_middle::ty::TyS>::uninhabited_from\r\n  43: rustc_middle::ty::inhabitedness::<impl rustc_middle::ty::FieldDef>::uninhabited_from\r\n  44: rustc_middle::ty::inhabitedness::def_id_forest::DefIdForest::union\r\n  45: rustc_middle::ty::inhabitedness::def_id_forest::DefIdForest::intersection\r\n  46: rustc_middle::ty::inhabitedness::type_uninhabited_from\r\n  47: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  48: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  49: rustc_data_structures::stack::ensure_sufficient_stack\r\n  50: rustc_query_system::query::plumbing::get_query_impl\r\n  51: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::type_uninhabited_from\r\n  52: rustc_middle::ty::inhabitedness::<impl rustc_middle::ty::TyS>::uninhabited_from\r\n  53: rustc_middle::ty::inhabitedness::<impl rustc_middle::ty::context::TyCtxt>::is_ty_uninhabited_from\r\n  54: rustc_passes::liveness::Liveness::propagate_through_expr\r\n  55: rustc_passes::liveness::Liveness::propagate_through_expr\r\n  56: <rustc_passes::liveness::IrMaps as rustc_hir::intravisit::Visitor>::visit_body\r\n  57: rustc_hir::intravisit::walk_fn\r\n  58: rustc_hir::intravisit::Visitor::visit_fn\r\n  59: rustc_hir::intravisit::walk_expr\r\n  60: <rustc_passes::liveness::IrMaps as rustc_hir::intravisit::Visitor>::visit_expr\r\n  61: rustc_hir::intravisit::walk_expr\r\n  62: rustc_hir::intravisit::walk_block\r\n  63: <rustc_passes::liveness::IrMaps as rustc_hir::intravisit::Visitor>::visit_body\r\n  64: rustc_hir::intravisit::walk_item\r\n  65: rustc_middle::hir::map::Map::visit_item_likes_in_module\r\n  66: rustc_passes::liveness::check_mod_liveness\r\n  67: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  68: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  69: rustc_data_structures::stack::ensure_sufficient_stack\r\n  70: rustc_query_system::query::plumbing::force_query_with_job\r\n  71: rustc_query_system::query::plumbing::get_query_impl\r\n  72: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::check_mod_liveness\r\n  73: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  74: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  75: rustc_interface::passes::analysis\r\n  76: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  77: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  78: rustc_data_structures::stack::ensure_sufficient_stack\r\n  79: rustc_query_system::query::plumbing::force_query_with_job\r\n  80: rustc_query_system::query::plumbing::get_query_impl\r\n  81: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\r\n  82: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  83: rustc_span::with_source_map\r\n  84: rustc_interface::interface::create_compiler_and_run\r\n  85: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.56.0-nightly (1f0a591b3 2021-07-30) running on x86_64-pc-windows-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [generics_of] computing generics of `tensor::Tensor3::0`\r\n#1 [eval_to_allocation_raw] const-evaluating + checking `tensor::Tensor3::0::{constant#0}`\r\n#2 [eval_to_const_value_raw] simplifying constant for the type system `tensor::Tensor3::0::{constant#0}`\r\n#3 [eval_to_const_value_raw] simplifying constant for the type system `tensor::Tensor3::0::{constant#0}`\r\n#4 [type_uninhabited_from] computing the inhabitedness of `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(ConstEvaluatable(WithOptConstParam { \r\ndid: DefId(0:170 ~ onitama_alpha_zero[d450]::network::bp_convolution::{constant#2}), const_param_did: None }, [Const { ty: usize, val: Param(A/#0) }, Const { ty: usize, val: Param(B/#1) }]), []), Binder(ConstEvaluatable(WithOptConstParam { did: DefId(0:169 ~ onitama_alpha_zero[d450]::network::bp_convolution::{constant#1}), const_param_did: None }, [Const { ty: usize, val: Param(A/#0) }, Const { ty: usize, val: Param(B/#1) }]), []), Binder(ConstEvaluatable(WithOptConstParam { did: DefId(0:168 ~ onitama_alpha_zero[d450]::network::bp_convolution::{constant#0}), const_param_did: None }, [Const { ty: usize, val: Param(A/#0) }, Const { ty: usize, val: Param(B/#1) }]), []), Binder(OutlivesPredicate([(); _], ReEmpty(U0)), []), Binder(OutlivesPredicate([(); _], ReEmpty(U0)), []), Binder(OutlivesPredicate([(); _], ReEmpty(U0)), [])], reveal: UserFacing }, value: [f64; _] }`\r\n#5 [type_uninhabited_from] computing the inhabitedness of `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(ConstEvaluatable(WithOptConstParam { \r\ndid: DefId(0:170 ~ onitama_alpha_zero[d450]::network::bp_convolution::{constant#2}), const_param_did: None }, [Const { ty: usize, val: Param(A/#0) }, Const { ty: usize, val: Param(B/#1) }]), []), Binder(ConstEvaluatable(WithOptConstParam { did: DefId(0:169 ~ onitama_alpha_zero[d450]::network::bp_convolution::{constant#1}), const_param_did: None }, [Const { ty: usize, val: Param(A/#0) }, Const { ty: usize, val: Param(B/#1) }]), []), Binder(ConstEvaluatable(WithOptConstParam { did: DefId(0:168 ~ onitama_alpha_zero[d450]::network::bp_convolution::{constant#0}), const_param_did: None }, [Const { ty: usize, val: Param(A/#0) }, Const { ty: usize, val: Param(B/#1) }]), []), Binder(OutlivesPredicate([(); _], ReEmpty(U0)), []), Binder(OutlivesPredicate([(); _], ReEmpty(U0)), []), Binder(OutlivesPredicate([(); _], ReEmpty(U0)), [])], reveal: UserFacing }, value: tensor::Tensor3<f64, 3_usize, 3_usize, A> }`\r\n#6 [check_mod_liveness] checking liveness of variables in module `network`\r\n#7 [analysis] running analysis passes on this crate\r\nend of query stack\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87674/timeline", "performed_via_github_app": null, "state_reason": "completed"}