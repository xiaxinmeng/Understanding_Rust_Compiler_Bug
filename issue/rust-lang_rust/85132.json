{"url": "https://api.github.com/repos/rust-lang/rust/issues/85132", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85132/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85132/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85132/events", "html_url": "https://github.com/rust-lang/rust/issues/85132", "id": 883154941, "node_id": "MDU6SXNzdWU4ODMxNTQ5NDE=", "number": 85132, "title": "Wrongly typing a collect with async streams causes confusing error messages alongside a cascade of unhelpful error messages", "user": {"login": "Frederik-Baetens", "id": 18269095, "node_id": "MDQ6VXNlcjE4MjY5MDk1", "avatar_url": "https://avatars.githubusercontent.com/u/18269095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Frederik-Baetens", "html_url": "https://github.com/Frederik-Baetens", "followers_url": "https://api.github.com/users/Frederik-Baetens/followers", "following_url": "https://api.github.com/users/Frederik-Baetens/following{/other_user}", "gists_url": "https://api.github.com/users/Frederik-Baetens/gists{/gist_id}", "starred_url": "https://api.github.com/users/Frederik-Baetens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Frederik-Baetens/subscriptions", "organizations_url": "https://api.github.com/users/Frederik-Baetens/orgs", "repos_url": "https://api.github.com/users/Frederik-Baetens/repos", "events_url": "https://api.github.com/users/Frederik-Baetens/events{/privacy}", "received_events_url": "https://api.github.com/users/Frederik-Baetens/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-05-10T01:50:40Z", "updated_at": "2022-02-15T20:12:17Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Given the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=05ab45beb0f9d4f2f7cdd9fc89f17a03\r\n\r\n```rust\r\nuse futures::stream::{self, StreamExt};\r\n\r\n#[tokio::main]\r\nasync fn main() {\r\n    let key1: String = \"/helloa\".to_string();\r\n\r\n    dbg!(&key1);\r\n\r\n    let futlist = stream::iter(0..10);\r\n    let _stringvec: Vec<String> = futlist.map(move |_| {\r\n        async {\r\n            key1.clone();\r\n        }\r\n    }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0277]: the trait bound `Vec<String>: Extend<()>` is not satisfied\r\n  --> src/main.rs:14:29\r\n   |\r\n14 |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   |                             ^^^^^^^ the trait `Extend<()>` is not implemented for `Vec<String>`\r\n   |\r\n   = help: the following implementations were found:\r\n             <Vec<T, A> as Extend<&'a T>>\r\n             <Vec<T, A> as Extend<T>>\r\n\r\nerror[E0277]: the trait bound `Vec<String>: Extend<()>` is not satisfied\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone();\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^ the trait `Extend<()>` is not implemented for `Vec<String>`\r\n   |\r\n   = help: the following implementations were found:\r\n             <Vec<T, A> as Extend<&'a T>>\r\n             <Vec<T, A> as Extend<T>>\r\n   = note: required because of the requirements on the impl of `futures::Future` for `Collect<BufferUnordered<futures::stream::Map<futures::stream::Iter<std::ops::Range<{integer}>>, [closure@src/main.rs:10:47: 14:6]>>, Vec<String>>`\r\n   = note: required by `futures::Future::poll`\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:9:9\r\n   |\r\n9  |     let futlist = stream::iter(0..10);\r\n   |         ^^^^^^^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone();\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |     let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |                                   ^^^^^^^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone();\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:10:47\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |  _______________________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone();\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |_____^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone();\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone();\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |______^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone();\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone();\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |___________________________^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone();\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone();\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |____________________________________________________^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone();\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone();\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(move |_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone();\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror: aborting due to 9 previous errors\r\n\r\nSome errors have detailed explanations: E0277, E0698.\r\nFor more information about an error, try `rustc --explain E0277`.\r\nerror: could not compile `playground`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\nIdeally the output should look like:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0277]: the trait bound `Vec<String>: Extend<()>` is not satisfied\r\n  --> src/main.rs:14:29\r\n   |\r\n14 |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   |                             ^^^^^^^ the trait `Extend<()>` is not implemented for `Vec<String>`\r\n   |\r\n   = help: the following implementations were found:\r\n             <Vec<T, A> as Extend<&'a T>>\r\n             <Vec<T, A> as Extend<T>>\r\n```\r\n\r\nI guess just the first error shows what the problem is, but it's still a bit scary for a newcomer. Perhaps a nice sentence like \"Collect expected a stream of strings, but got a stream of unity types ()\"\r\n\r\nEven better would be a suggestion to remove the semicolon so that strings are returned, but I can understand that that analysis may be very complex, and it may be hard to avoid making suggestions that are not what the user intended.\r\n\r\nThe cascade is somewhat similar to #85131 but unlike with #85131, where the main error message is already decent, I think the main error could also be made a bit better here.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85132/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85132/timeline", "performed_via_github_app": null, "state_reason": null}