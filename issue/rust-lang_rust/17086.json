{"url": "https://api.github.com/repos/rust-lang/rust/issues/17086", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/17086/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/17086/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/17086/events", "html_url": "https://github.com/rust-lang/rust/issues/17086", "id": 42151342, "node_id": "MDU6SXNzdWU0MjE1MTM0Mg==", "number": 17086, "title": "where clause seems ignored when attached to narrower scope than binding point", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-09-07T20:27:36Z", "updated_at": "2014-12-23T19:25:37Z", "closed_at": "2014-12-23T19:25:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Consider the following code (example 1):\n\n``` rust\ntrait Foo { fn foo(&self) -> int; }\nstruct B<X>;\nimpl<X> B<X> {\n    fn bar(&self, _x: X) -> int where X : Foo {\n        // _x.foo()\n        16\n    }\n    fn baz(&self) -> int {\n        17\n    }\n}\n\n// impl Foo for int { fn foo(&self) -> int { *self } }\n\nfn main() {\n    let b = B::<int>;\n    let i = b.bar(3i);\n    let j = b.baz();\n    println!(\"Hello, world! {:d} {:d}\", i, j)\n}\n```\n\nNote that the `impl` of `Foo` for `int` is commented out.  The where clause is meant to bound `X` for the method `bar`; we are not achieving that goal.  I believe this is a bug, and a backwards-compatibility hazard for us to take note of (see further explanation below).\n\n---\n\nIf I move the `where`-clause up so that its attached to the whole `impl` block, then we see the code get rejected, as expected.  Illustrated here (example 2):\n\n``` rust\ntrait Foo { fn foo(&self) -> int; }\nstruct B<X>;\nimpl<X> B<X> where X : Foo {\n    fn bar(&self, _x: X) -> int {\n        // _x.foo()\n        16\n    }\n    fn baz(&self) -> int {\n        17\n    }\n}\n\n// impl Foo for int { fn foo(&self) -> int { *self } }\n\nfn main() {\n    let b = B::<int>;\n    let i = b.bar(3i);\n    let j = b.baz();\n    println!(\"Hello, world! {:d} {:d}\", i, j)\n}\n```\n\n(This is not an illustration of a bug.  I just wanted to show that the code overall should indeed be rejected if the where clause is not ignored.)\n\n---\n\nFinally, we also need to make sure that we _use_ the information from the `where` clause when checking the bodies of methods to which the where-clause is attached.  This is also failing for us, causing a compile-failure that should be succeeding, as shown below (example 3):\n\n``` rust\ntrait Foo { fn foo(&self) -> int; }\nstruct B<X>;\nimpl<X> B<X> {\n    fn bar(&self, _x: X) -> int where X : Foo {\n        _x.foo()\n    }\n    fn baz(&self) -> int {\n        17\n    }\n}\n\nimpl Foo for int { fn foo(&self) -> int { *self } }\n\nfn main() {\n    let b = B::<int>;\n    let i = b.bar(3i);\n    let j = b.baz();\n    println!(\"Hello, world! {:d} {:d}\", i, j)\n}\n```\n\nNote that I have made several modifications in this example; mostly importantly, I have uncommented the impl of `Foo for int` and then used `foo` within the method `bar`.  This currently causes the following compiler error:\n\n```\n<anon>:5:12: 5:17 error: type `X` does not implement any method in scope named `foo`\n<anon>:5         _x.foo()\n                    ^~~~~\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\nProgram ended.\n```\n\n---\n\nAs noted in example 1, the ignoring of where clauses is a backwards compatibility hazard.  While one might expect code that is using where clauses would also have code that is using methods of those triats (as in example 3), and thus would hit compilation failures before code could come to rely on the where clauses being ignored, example 1 is meant to concretely illustrate code that is building now but absolutely should be rejected.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/17086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/17086/timeline", "performed_via_github_app": null, "state_reason": "completed"}