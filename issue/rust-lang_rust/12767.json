{"url": "https://api.github.com/repos/rust-lang/rust/issues/12767", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12767/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12767/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12767/events", "html_url": "https://github.com/rust-lang/rust/issues/12767", "id": 29027662, "node_id": "MDU6SXNzdWUyOTAyNzY2Mg==", "number": 12767, "title": "Bounded nonallocating task communication is needed.", "user": {"login": "mstewartgallus", "id": 4070335, "node_id": "MDQ6VXNlcjQwNzAzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4070335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstewartgallus", "html_url": "https://github.com/mstewartgallus", "followers_url": "https://api.github.com/users/mstewartgallus/followers", "following_url": "https://api.github.com/users/mstewartgallus/following{/other_user}", "gists_url": "https://api.github.com/users/mstewartgallus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstewartgallus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstewartgallus/subscriptions", "organizations_url": "https://api.github.com/users/mstewartgallus/orgs", "repos_url": "https://api.github.com/users/mstewartgallus/repos", "events_url": "https://api.github.com/users/mstewartgallus/events{/privacy}", "received_events_url": "https://api.github.com/users/mstewartgallus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2014-03-08T19:02:06Z", "updated_at": "2015-01-23T03:23:10Z", "closed_at": "2015-01-23T03:23:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For certain safety critical or memory constrained situations something\nmuch like POSIX message queues is needed (an actual binding to them\nmight be needed if we move forward on work for full operating system\nprocess isolation).\n\nRequirements:\n- No memory allocations (memory allocations can fail) in the normal\n  use.\n- Safety, in the event of a misbehaving or buggy task.\n- Determinism for easy testability.\n\nPossible solutions:\n- A synchronous, bounded, one message at a time queue (this seems to\n  be the traditional solution for embedded developers).\n  - Because the queue is bounded all memory can be allocated ahead of\n    time.\n  - Because the queue is bounded a misbehaving or buggy task cannot\n    flood the queue with messages and interfere with other\n    tasks. However, a reader task can stop removing messages from the\n    queue and so halt writer tasks. As well, one writer task can halt\n    other writer tasks by flooding the queue with messages (but only\n    if the queue is not fair). Also, a writer task can refuse to write\n    messages and halt readers that wait on it. Note that to some\n    degree hang check timers as heavily used in embedded development\n    can help solve this problem.\n  - Because the queue is one message at a time task behaviour is much\n    more deterministic.\n- A nonblocking, one message at a time queue\n  - Like the previous queue type all memory can be allocated ahead of\n    time.\n  - Like the previous queue type a misbehaving or buggy task cannot\n    interfere with other tasks. In addition, because the queue is\n    nonblocking there are not the problems with buggy tasks stopping\n    other tasks.\n  - Because the queue is not synchronous there are determinism\n    problems.\n\nTwo examples of C code that use this kind of feature (I can't use Rust\nexamples because the facility hasn't been written yet!):\n- [A game simulator loop](https://gitorious.org/linted/linted/source/9de3bf6d1c240b40241608414805a7c1e7974ead:src/bin/simulator.c):\n  The simulator loop needs to wait for several different events such\n  as timer ticks, shutdown events, controller events and gui\n  availability for updating events so the ability to select among them\n  is critical (an earlier version of the simulator that used a spawn a\n  new thread update notification method was buggy and ugly). The\n  simulator works best with a nonblocking, one element gui update\n  queue because the gui updates overwrite the previous updates.\n- [A game gui loop](https://gitorious.org/linted/linted/source/9de3bf6d1c240b40241608414805a7c1e7974ead:src/bin/gui.c):\n  The gui loop needs to wait for several different events such as\n  window events, update events and controllable writeable events. The\n  gui does not block when the simulator lags.\n\nBecause the gui update queue is nonblocking a buggy gui can't cause\nthe simulator to halt. As well, the simulator can't cause the gui to\nhalt.\n\nI'd appreciate better examples of code that needs this feature. These\nsamples are just part of my own personal project and not real world,\nworking examples by experienced professionals.\n\nAdditionally, we might wish to expose a priority feature like POSIX\nmessage queues do. Personally, I feel this use case is best dealt with\nby simply having multiple message queues but someone else might think\ndifferently.\n\nPrior work:\n- [Ada Rendezvous](https://en.wikibooks.org/wiki/Ada_Programming/Tasking#Rendezvous) (note that the [Ravenscar profile](https://en.wikipedia.org/wiki/Ravenscar_profile) gives the\n  feature significant and important limitations which we should consider using).\n- POSIX style message queues (see [The Open Group](https://www2.opengroup.org/ogsys/catalog/c138))\n- SysV style message queues (see [The Open Group](https://www2.opengroup.org/ogsys/catalog/c138))\n\nA few people who might be interested in this issue: @alexcrichton  @pcwalton\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12767/timeline", "performed_via_github_app": null, "state_reason": "completed"}