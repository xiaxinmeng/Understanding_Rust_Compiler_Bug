{"url": "https://api.github.com/repos/rust-lang/rust/issues/92643", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92643/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92643/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92643/events", "html_url": "https://github.com/rust-lang/rust/issues/92643", "id": 1096164829, "node_id": "I_kwDOAAsO6M5BViXd", "number": 92643, "title": "Missed optimization opportunity during stack pinning", "user": {"login": "Patryk27", "id": 3395477, "node_id": "MDQ6VXNlcjMzOTU0Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/3395477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Patryk27", "html_url": "https://github.com/Patryk27", "followers_url": "https://api.github.com/users/Patryk27/followers", "following_url": "https://api.github.com/users/Patryk27/following{/other_user}", "gists_url": "https://api.github.com/users/Patryk27/gists{/gist_id}", "starred_url": "https://api.github.com/users/Patryk27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Patryk27/subscriptions", "organizations_url": "https://api.github.com/users/Patryk27/orgs", "repos_url": "https://api.github.com/users/Patryk27/repos", "events_url": "https://api.github.com/users/Patryk27/events{/privacy}", "received_events_url": "https://api.github.com/users/Patryk27/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-01-07T10:00:51Z", "updated_at": "2023-04-05T17:34:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nThis code:\r\n\r\n```rust\r\n#![feature(bench_black_box)]\r\n\r\nuse core::hint::black_box;\r\n\r\n#[inline(never)]\r\npub fn foo<T>(mut val: T) {\r\n    loop {\r\n        black_box(&mut val);\r\n    }\r\n}\r\n\r\npub fn bar() {\r\n    foo([0u8; 1024]);\r\n}\r\n```\r\n\r\n... compiles to:\r\n\r\n```\r\ndefine ... {\r\nstart:\r\n  %0 = alloca [1024 x i8]*, align 8\r\n  %1 = bitcast [1024 x i8]** %0 to i8*\r\n  \r\n  /* ... */\r\n}\r\n```\r\n\r\n... but \"pinning\" `val` to the stack:\r\n\r\n```rust\r\n#[inline(never)]\r\npub fn foo<T>(val: T) {\r\n    let mut val = val;\r\n\r\n    loop {\r\n        black_box(&mut val);\r\n    }\r\n}\r\n```\r\n\r\n... causes rustc to emit a seemingly spurious `alloca` + `memcpy`:\r\n\r\n```\r\ndefine ... {\r\nstart:\r\n  %0 = alloca [1024 x i8]*, align 8\r\n  %val1 = alloca [1024 x i8], align 1\r\n  %1 = getelementptr inbounds [1024 x i8], [1024 x i8]* %val1, i64 0, i64 0\r\n  %2 = getelementptr inbounds [1024 x i8], [1024 x i8]* %val, i64 0, i64 0\r\n  call void @llvm.memcpy.p0i8.p0i8.i64(...)\r\n  %3 = bitcast [1024 x i8]** %0 to i8*\r\n  /* ... */\r\n}\r\n```\r\n\r\n(checked on current nightly & `--release`.)\r\n\r\nEmitting that `alloca` + `mempy` (or LLVM not eliding them, for what it's worth) makes the function require _twice_ the amount of stack size it would need otherwise, considering the fact that the parameter already lives on the stack and doesn't escape it.\r\n\r\nI think this accounts for a missed optimization opportunity either in rustc (as in `this shouldn't have been emitted`) or LLVM (as in `this should've been elided via MemCpyOptimizer`) \ud83d\ude42 \r\n\r\nIn the wild, I've found this issue when writing an async executor for AVR - using [`futures::pin_mut!()`](https://docs.rs/futures/latest/futures/macro.pin_mut.html) made my executor require twice the amount of stack size, triggering stack overflow for seemingly innocuous, small futures. But that's just for context - I think this potentially missed optimization is not related to AVR, since it's present inside the LLVM IR itself.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92643/reactions", "total_count": 5, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 5}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92643/timeline", "performed_via_github_app": null, "state_reason": null}