{"url": "https://api.github.com/repos/rust-lang/rust/issues/103318", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103318/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103318/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103318/events", "html_url": "https://github.com/rust-lang/rust/issues/103318", "id": 1417134591, "node_id": "I_kwDOAAsO6M5Ud8H_", "number": 103318, "title": "non-Drop types with drop glue leak may_dangle implementation details on stable", "user": {"login": "SoniEx2", "id": 1779619, "node_id": "MDQ6VXNlcjE3Nzk2MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1779619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SoniEx2", "html_url": "https://github.com/SoniEx2", "followers_url": "https://api.github.com/users/SoniEx2/followers", "following_url": "https://api.github.com/users/SoniEx2/following{/other_user}", "gists_url": "https://api.github.com/users/SoniEx2/gists{/gist_id}", "starred_url": "https://api.github.com/users/SoniEx2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SoniEx2/subscriptions", "organizations_url": "https://api.github.com/users/SoniEx2/orgs", "repos_url": "https://api.github.com/users/SoniEx2/repos", "events_url": "https://api.github.com/users/SoniEx2/events{/privacy}", "received_events_url": "https://api.github.com/users/SoniEx2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-10-20T19:21:47Z", "updated_at": "2022-10-23T21:52:33Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse core::cell::Cell;\r\n// use core::marker::PhantomData as PDOrBox;\r\nstruct PDOrBox<T> {\r\n    n: String,\r\n    m: core::mem::ManuallyDrop<T>\r\n}\r\n//use std::boxed::Box as PDOrBox;\r\nstruct Foo<'a> {\r\n  selfref: Cell<Option<&'a Foo<'a>>>,\r\n}\r\nimpl<'a> Drop for Foo<'a> {\r\n  fn drop(&mut self) {\r\n  }\r\n}\r\nfn make_selfref<'a>(x: &'a PDOrBox<Foo<'a>>) {}\r\nfn make_pdorbox<'a>() -> PDOrBox<Foo<'a>> {\r\n    unimplemented!()\r\n}\r\nfn main() {\r\n  let x = make_pdorbox();\r\n  make_selfref(&x);\r\n}\r\n```\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=ef62faa188b41fd69f1561da05605db6\r\n\r\n```rust\r\nuse core::cell::Cell;\r\n// use core::marker::PhantomData as PDOrBox;\r\nstruct PDOrBox<T> {\r\n    n: String,\r\n    m: core::marker::PhantomData<T>\r\n}\r\n//use std::boxed::Box as PDOrBox;\r\nstruct Foo<'a> {\r\n  selfref: Cell<Option<&'a Foo<'a>>>,\r\n}\r\nimpl<'a> Drop for Foo<'a> {\r\n  fn drop(&mut self) {\r\n  }\r\n}\r\nfn make_selfref<'a>(x: &'a PDOrBox<Foo<'a>>) {}\r\nfn make_pdorbox<'a>() -> PDOrBox<Foo<'a>> {\r\n    unimplemented!()\r\n}\r\nfn main() {\r\n  let x = make_pdorbox();\r\n  make_selfref(&x);\r\n}\r\n```\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=2c6e1a61081f093bab2b882e9ea676ae\r\n\r\nI expected to see this happen: These should behave identically.\r\n\r\nInstead, this happened: Implementation details of parametric dropck, also known as may_dangle, which is an internal unstable feature, leak to stable, so one of these complies while the other doesn't.\r\n\r\nWe honestly, after a lot of discussion and reading a lot of RFCs related to dropck, think both of these should compile. A quick fix would be to treat PhantomData like ManuallyDrop when outside an explicitly Drop type, and fall back to the existing behaviour for may_dangle. A proper fix would be to change may_dangle to be non-parametric, but that's gonna require an (e)RFC :). (N.B.: ManuallyDrop is unsound with may_dangle, but that's already acknowledged by may_dangle being unsafe.)\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nplayground, N/A\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nN/A\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103318/timeline", "performed_via_github_app": null, "state_reason": null}