{"url": "https://api.github.com/repos/rust-lang/rust/issues/75112", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75112/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75112/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75112/events", "html_url": "https://github.com/rust-lang/rust/issues/75112", "id": 672156244, "node_id": "MDU6SXNzdWU2NzIxNTYyNDQ=", "number": 75112, "title": "multiple mutable borrow error with get_mut", "user": {"login": "95th", "id": 22871609, "node_id": "MDQ6VXNlcjIyODcxNjA5", "avatar_url": "https://avatars.githubusercontent.com/u/22871609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/95th", "html_url": "https://github.com/95th", "followers_url": "https://api.github.com/users/95th/followers", "following_url": "https://api.github.com/users/95th/following{/other_user}", "gists_url": "https://api.github.com/users/95th/gists{/gist_id}", "starred_url": "https://api.github.com/users/95th/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/95th/subscriptions", "organizations_url": "https://api.github.com/users/95th/orgs", "repos_url": "https://api.github.com/users/95th/repos", "events_url": "https://api.github.com/users/95th/events{/privacy}", "received_events_url": "https://api.github.com/users/95th/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-03T15:25:39Z", "updated_at": "2020-08-03T22:51:38Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nuse std::collections::HashMap;\r\n\r\npub fn find<'a>(lookup: &HashMap<u32, usize>, items: &'a mut Vec<u32>, id: u32) -> Option<&'a mut u32> {\r\n    if let Some(token) = lookup.get(&id) {\r\n        return items.get_mut(*token);\r\n    }\r\n\r\n    if let Some(token) = lookup.get(&id.wrapping_add(1)) {\r\n        let item = items.get_mut(*token)?;\r\n        if *item == id {\r\n            return Some(item);\r\n        }\r\n    }\r\n\r\n    if let Some(token) = lookup.get(&(id.wrapping_sub(1))) {\r\n        let item = items.get_mut(*token)?;\r\n        if *item == id {\r\n            return Some(item);\r\n        }\r\n    }\r\n\r\n    None\r\n}\r\n```\r\n\r\nI expected to see this happen: Code should compile because the latter `get_mut` calls don't overlap with preceding ones.\r\n\r\nInstead, this happened: Got following error\r\n```\r\nerror[E0499]: cannot borrow `*items` as mutable more than once at a time\r\n  --> src/lib.rs:16:20\r\n   |\r\n3  | pub fn find<'a>(lookup: &HashMap<u32, usize>, items: &'a mut Vec<u32>, id: u32) -> Option<&'a mut u32> {\r\n   |             -- lifetime `'a` defined here\r\n...\r\n9  |         let item = items.get_mut(*token)?;\r\n   |                    ----- first mutable borrow occurs here\r\n10 |         if *item == id {\r\n11 |             return Some(item);\r\n   |                    ---------- returning this value requires that `*items` is borrowed for `'a`\r\n...\r\n16 |         let item = items.get_mut(*token)?;\r\n   |                    ^^^^^ second mutable borrow occurs here\r\n```\r\n\r\nIt works if I comment the if condition inside the second `if let`:\r\n\r\n```rust\r\nuse std::collections::HashMap;\r\n\r\npub fn find<'a>(lookup: &HashMap<u32, usize>, items: &'a mut Vec<u32>, id: u32) -> Option<&'a mut u32> {\r\n    if let Some(token) = lookup.get(&id) {\r\n        return items.get_mut(*token);\r\n    }\r\n\r\n    if let Some(token) = lookup.get(&id.wrapping_add(1)) {\r\n        let item = items.get_mut(*token)?;\r\n        // if *item == id {\r\n            return Some(item);\r\n        // }\r\n    }\r\n\r\n    if let Some(token) = lookup.get(&(id.wrapping_sub(1))) {\r\n        let item = items.get_mut(*token)?;\r\n        if *item == id {\r\n            return Some(item);\r\n        }\r\n    }\r\n\r\n    None\r\n}\r\n```\r\n\r\nif I comment the last `if let`, then also it works:\r\n```rust\r\nuse std::collections::HashMap;\r\n\r\npub fn find<'a>(lookup: &HashMap<u32, usize>, items: &'a mut Vec<u32>, id: u32) -> Option<&'a mut u32> {\r\n    if let Some(token) = lookup.get(&id) {\r\n        return items.get_mut(*token);\r\n    }\r\n\r\n    if let Some(token) = lookup.get(&id.wrapping_add(1)) {\r\n        let item = items.get_mut(*token)?;\r\n        if *item == id {\r\n            return Some(item);\r\n        }\r\n    }\r\n\r\n    // if let Some(token) = lookup.get(&(id.wrapping_sub(1))) {\r\n    //     let item = items.get_mut(*token)?;\r\n    //     if *item == id {\r\n    //         return Some(item);\r\n    //     }\r\n    // }\r\n\r\n    None\r\n}\r\n```\r\n\r\nSo there are still multiple mutable borrows but it works for those cases. But why not in the first case? Is it incorrect borrowing pattern somehow that I am not seeing?\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.46.0-nightly (346aec9b0 2020-07-11)\r\nbinary: rustc\r\ncommit-hash: 346aec9b02f3c74f3fce97fd6bda24709d220e49\r\ncommit-date: 2020-07-11\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.46.0-nightly\r\nLLVM version: 10.0\r\n```\r\n\r\nThanks", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75112/timeline", "performed_via_github_app": null, "state_reason": null}