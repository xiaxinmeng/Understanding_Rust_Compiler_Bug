{"url": "https://api.github.com/repos/rust-lang/rust/issues/92796", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92796/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92796/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92796/events", "html_url": "https://github.com/rust-lang/rust/issues/92796", "id": 1099700924, "node_id": "I_kwDOAAsO6M5BjBq8", "number": 92796, "title": "Unconditional recursion in a `const fn` produces a massive diagnostic", "user": {"login": "PatchMixolydic", "id": 8634700, "node_id": "MDQ6VXNlcjg2MzQ3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8634700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PatchMixolydic", "html_url": "https://github.com/PatchMixolydic", "followers_url": "https://api.github.com/users/PatchMixolydic/followers", "following_url": "https://api.github.com/users/PatchMixolydic/following{/other_user}", "gists_url": "https://api.github.com/users/PatchMixolydic/gists{/gist_id}", "starred_url": "https://api.github.com/users/PatchMixolydic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PatchMixolydic/subscriptions", "organizations_url": "https://api.github.com/users/PatchMixolydic/orgs", "repos_url": "https://api.github.com/users/PatchMixolydic/repos", "events_url": "https://api.github.com/users/PatchMixolydic/events{/privacy}", "received_events_url": "https://api.github.com/users/PatchMixolydic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 268744493, "node_id": "MDU6TGFiZWwyNjg3NDQ0OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-fn", "name": "A-const-fn", "color": "f7e101", "default": false, "description": "Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."}, {"id": 1659943986, "node_id": "MDU6TGFiZWwxNjU5OTQzOTg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-verbose", "name": "D-verbose", "color": "c9f7a3", "default": false, "description": "Too much output caused by a single piece of incorrect code"}], "state": "closed", "locked": false, "assignee": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2022-01-11T23:08:23Z", "updated_at": "2022-02-03T18:38:21Z", "closed_at": "2022-02-03T18:38:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=254423b9c4227b5abdbd52f39176a2b4)):\r\n\r\n```rust\r\n#![allow(unused)]\r\n\r\nconst fn f<T>(x: T) {\r\n    f(x);\r\n}\r\n\r\nconst X: () = f(1);\r\n```\r\n\r\nThe current output is:\r\n<details>\r\n<summary>Massive diagnostic</summary>\r\n\r\n```\r\nwarning: function cannot return without recursing\r\n --> src/lib.rs:3:1\r\n  |\r\n3 | const fn f<T>(x: T) {\r\n  | ^^^^^^^^^^^^^^^^^^^ cannot return without recursing\r\n4 |     f(x);\r\n  |     ---- recursive call site\r\n  |\r\n  = note: `#[warn(unconditional_recursion)]` on by default\r\n  = help: a `loop` may express intention better if this is on purpose\r\n\r\nerror: any use of this value will cause an error\r\n --> src/lib.rs:4:5\r\n  |\r\n4 |     f(x);\r\n  |     ^^^^\r\n  |     |\r\n  |     reached the configured maximum number of stack frames\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     inside `X` at src/lib.rs:7:15\r\n...\r\n7 | const X: () = f(1);\r\n  | -------------------\r\n  |\r\n  = note: `#[deny(const_err)]` on by default\r\n  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n  = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n```\r\n</details>\r\n\r\nIdeally, the duplicate lines should be hidden:\r\n\r\n```\r\nwarning: function cannot return without recursing\r\n --> src/lib.rs:3:1\r\n  |\r\n3 | const fn f<T>(x: T) {\r\n  | ^^^^^^^^^^^^^^^^^^^ cannot return without recursing\r\n4 |     f(x);\r\n  |     ---- recursive call site\r\n  |\r\n  = note: `#[warn(unconditional_recursion)]` on by default\r\n  = help: a `loop` may express intention better if this is on purpose\r\n\r\nerror: any use of this value will cause an error\r\n --> src/lib.rs:4:5\r\n  |\r\n4 |     f(x);\r\n  |     ^^^^\r\n  |     |\r\n  |     reached the configured maximum number of stack frames\r\n  |     inside `f::<i32>` at src/lib.rs:4:5\r\n  |     [... inside N additional calls to `f::<i32>` ...]\r\n  |     inside `X` at src/lib.rs:7:15\r\n...\r\n7 | const X: () = f(1);\r\n  | -------------------\r\n  |\r\n  = note: `#[deny(const_err)]` on by default\r\n  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n  = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n```\r\n\r\n@rustbot modify labels: +A-const-fn +D-verbose\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"compiler-errors\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92796/timeline", "performed_via_github_app": null, "state_reason": "completed"}