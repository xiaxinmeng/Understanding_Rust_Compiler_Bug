{"url": "https://api.github.com/repos/rust-lang/rust/issues/88091", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88091/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88091/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88091/events", "html_url": "https://github.com/rust-lang/rust/issues/88091", "id": 972076597, "node_id": "MDU6SXNzdWU5NzIwNzY1OTc=", "number": 88091, "title": "ICEs caused by new `fcntl` call in jobserver dependency on Linux", "user": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-08-16T20:27:38Z", "updated_at": "2021-08-17T15:23:28Z", "closed_at": "2021-08-17T14:35:20Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We're [currently unable](https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=82662) to update Fuchsia's toolchain to the latest nightly with builds failing due to this ICE:\r\n\r\n<details>\r\n\r\n```\r\nRUST_BACKTRACE=1 ../../prebuilt/third_party/rust/linux-x64/bin/rustc --color=always --crate-name predicates ../../third_party/rust_crates/vendor/predicates/src/lib.rs --crate-type rlib --emit=dep-info=host_arm64-coverage-rust/obj/third_party/rust_crates/libpredicates-18699c217c61a73d.rlib.d,link -Zdep-info-omit-d-target --cap-lints=allow --edition=2018 -Cmetadata=18699c217c61a73d -Cextra-filename=-18699c217c61a73d --cfg=feature=\\\"default\\\" --cfg=feature=\\\"difference\\\" --cfg=feature=\\\"float-cmp\\\" --cfg=feature=\\\"normalize-line-endings\\\" --cfg=feature=\\\"regex\\\" -Zmutable-noalias=off --cfg=rust_panic=\\\"unwind\\\" --cfg=__rust_toolchain=\\\"HoZdYmTRbpKgjJUDnZHD-heytrg9UsK59r0cE5bC9Q4C\\\" -Clinker=../../prebuilt/third_party/clang/linux-x64/bin/clang++ -Cdefault-linker-libraries -Clink-arg=-static-libstdc++ -Clink-arg=-Wl,-rpath=\\$ORIGIN/ -Clink-arg=--sysroot=../../prebuilt/third_party/sysroot/linux -Clink-arg=--target=aarch64-unknown-linux-gnu -Clink-arg=-stdlib=libc++ -Clink-arg=-unwindlib= -Clink-arg=-rtlib=compiler-rt -Clink-arg=-fuse-ld=lld -Clink-arg=-Wl,--build-id -Copt-level=1 -Cdebuginfo=2 -Zallow-features= --target aarch64-unknown-linux-gnu --cap-lints=deny -Dwarnings -Cdebug-assertions=yes -Clinker=../../prebuilt/third_party/clang/linux-x64/bin/clang++ -Cdefault-linker-libraries -Clink-arg=-static-libstdc++ -Clink-arg=-Wl,-rpath=\\$ORIGIN/ -Clink-arg=--sysroot=../../prebuilt/third_party/sysroot/linux -Clink-arg=--target=aarch64-unknown-linux-gnu -Clink-arg=-stdlib=libc++ -Clink-arg=-unwindlib= -Clink-arg=-rtlib=compiler-rt -Clink-arg=-fuse-ld=lld -Clink-arg=-Wl,--build-id -Zinstrument-coverage -Clink-arg=-Wl,-z,nostart-stop-gc -o host_arm64-coverage-rust/obj/third_party/rust_crates/libpredicates-18699c217c61a73d.rlib -Ldependency=host_arm64-coverage-rust/obj/third_party/rust_crates -ldl -lpthread --extern difference=host_arm64-coverage-rust/obj/third_party/rust_crates/libdifference-729c4c18786eef68.rlib --extern float_cmp=host_arm64-coverage-rust/obj/third_party/rust_crates/libfloat_cmp-25495b83f43346cf.rlib --extern normalize_line_endings=host_arm64-coverage-rust/obj/third_party/rust_crates/libnormalize_line_endings-4054253ee9a0f431.rlib --extern predicates_core=host_arm64-coverage-rust/obj/third_party/rust_crates/libpredicates_core-9278ecd8b23c9da2.rlib --extern regex=host_arm64-coverage-rust/obj/third_party/rust_crates/libregex-be3eec66bf66867d.rlib && ../../prebuilt/third_party/python3/linux-x64/bin/python3.8 -S ../../build/gn/verify_depfile.py -t \"//third_party/rust_crates:predicates-v1_0_7(//build/toolchain:host_arm64-coverage-rust)\" -d host_arm64-coverage-rust/obj/third_party/rust_crates/libpredicates-18699c217c61a73d.rlib.d \r\nthread 'rustc' panicked at 'failed to create jobserver: Custom { kind: PermissionDenied, error: \"failed to increase jobserver pipe capacity from 4096 to 8192; jobserver otherwise might deadlock\" }', compiler/rustc_data_structures/src/jobserver.rs:23:38\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /b/s/w/ir/x/w/rust/library/std/src/panicking.rs:517:5\r\n   1: core::panicking::panic_fmt\r\n             at /b/s/w/ir/x/w/rust/library/core/src/panicking.rs:93:14\r\n   2: core::result::unwrap_failed\r\n             at /b/s/w/ir/x/w/rust/library/core/src/result.rs:1617:5\r\n   3: core::ops::function::FnOnce::call_once\r\n   4: std::sync::once::Once::call_once_force::{{closure}}\r\n   5: std::sync::once::Once::call_inner\r\n             at /b/s/w/ir/x/w/rust/library/std/src/sync/once.rs:418:21\r\n   6: rustc_data_structures::jobserver::client\r\n   7: rustc_session::session::build_session\r\n   8: rustc_interface::util::create_session\r\n   9: rustc_interface::interface::create_compiler_and_run\r\n  10: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nerror: internal compiler error: unexpected panic\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\nnote: rustc 1.56.0-nightly (4e900176b 2021-08-12) running on x86_64-unknown-linux-gnu\r\nnote: compiler flags: -Z dep-info-omit-d-target -Z mutable-noalias=off -Z allow-features= -Z instrument-coverage -C linker=../../prebuilt/third_party/clang/linux-x64/bin/clang++ -C default-linker-libraries -C link-arg=-static-libstdc++ -C link-arg=-Wl,-rpath=$ORIGIN/ -C link-arg=--sysroot=../../prebuilt/third_party/sysroot/linux -C link-arg=--target=aarch64-unknown-linux-gnu -C link-arg=-stdlib=libc++ -C link-arg=-unwindlib= -C link-arg=-rtlib=compiler-rt -C link-arg=-fuse-ld=lld -C link-arg=-Wl,--build-id -C opt-level=1 -C debuginfo=2 -C debug-assertions=yes -C linker=../../prebuilt/third_party/clang/linux-x64/bin/clang++ -C default-linker-libraries -C link-arg=-static-libstdc++ -C link-arg=-Wl,-rpath=$ORIGIN/ -C link-arg=--sysroot=../../prebuilt/third_party/sysroot/linux -C link-arg=--target=aarch64-unknown-linux-gnu -C link-arg=-stdlib=libc++ -C link-arg=-unwindlib= -C link-arg=-rtlib=compiler-rt -C link-arg=-fuse-ld=lld -C link-arg=-Wl,--build-id -C link-arg=-Wl,-z,nostart-stop-gc --crate-type rlib\r\nnote: some of the compiler flags provided by cargo are hidden\r\nquery stack during panic:\r\nend of query stack\r\n```\r\n\r\n</details>\r\n\r\nWe think that this error is occurring on our builders due to many concurrent instances of `rustc` exhausting `/proc/sys/fs/pipe-user-pages-soft` which limits the number of pipe pages a user is allowed to have:\r\n\r\n```\r\nThe default value for this file is 16384, which permits creating up to 1024 pipes with the default capacity.\r\n```\r\n\r\nIt seems that the failure started with https://github.com/rust-lang/rust/commit/e62cd4040eb97f7fa9b3b094a82ce0e18f41832a which updated the cargo subtree, causing the jobserver dependency for rustc to update to `0.1.23`. That release contains https://github.com/alexcrichton/jobserver-rs/pull/34 by @alexcrichton which on Linux attempts to reserve necessary space in the pipe for `Client::new`, returning an `io::Error` for client creation if that reservation fails.\r\n\r\nWhen accessing the jobserver for internal concurrency control, by default `rustc` attempts to read the path to a pipe [from an environment variable](https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/compiler/rustc_data_structures/src/jobserver.rs#L22). If no jobserver has been configured, it [creates its own pipe](https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/compiler/rustc_data_structures/src/jobserver.rs#L23) via [the jobserver crate](https://github.com/alexcrichton/jobserver-rs/blob/8199fd1bbf5feca61fe7679f753c6c4625e3ef6d/src/unix.rs#L24) where the new `fcntl` call was added.\r\n\r\nThis fallback is likely never exercised in builds driven by `cargo` or `make` because they both provide a jobserver to their subprocesses. On Fuchsia, we invoke `rustc` using `ninja`, which [does not support the jobserver protocol](https://github.com/ninja-build/ninja/issues/1139), so every instance of `rustc` ends up creating its own pipe. I think based on reading the code that each \"fallback pipe\" needs the default 2 pages, so we'd be able to run 512 `rustc`s if no other processes for the user were creating pipes. In practice our build machines are quite large and they also run some other processes which create pipes, so we seem to be able to hit this limit pretty often.\r\n\r\nWe're considering workarounds including a static limit on concurrent `rustc` invocations in our build or implementing the jobserver protocol ourselves somehow, but it does seem like it should be possible to invoke `rustc` concurrently many times without make's protocol. Both of these solutions would come with significant downsides, though.\r\n\r\nIs it possible for `rustc` to work without access to a jobserver client? Could the fallback case be made to use an in-process stub instead of creating an actual jobserver client?\r\n\r\nAlternatively, it seems that even though the pipe resizing is failing that the pipe creation itself has not been previously failing in our build. Perhaps we could find a way for `rustc` to ignore the error from the resizing since it only ever asks for space to schedule `32` tasks in the fallback configuration?\r\n\r\nThese are the options that came up in a brief internal discussion but other ideas would be welcome!\r\n\r\ncc @tmandry @jamuraa", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88091/timeline", "performed_via_github_app": null, "state_reason": "completed"}