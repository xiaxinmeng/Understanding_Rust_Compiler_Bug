{"url": "https://api.github.com/repos/rust-lang/rust/issues/34896", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/34896/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/34896/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/34896/events", "html_url": "https://github.com/rust-lang/rust/issues/34896", "id": 166066721, "node_id": "MDU6SXNzdWUxNjYwNjY3MjE=", "number": 34896, "title": "Diagnostics for cloning references are terrible", "user": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-07-18T10:47:48Z", "updated_at": "2022-12-16T01:46:28Z", "closed_at": "2022-12-16T01:46:28Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "``` rust\nstruct Foo;\nfn main() {\n    let x = Some(Foo);\n    if let Some(ref y) = x {\n        foo(y.clone());\n    }\n}\n\nfn foo(x: Foo) {}\n```\n\nhttps://is.gd/f2AX0B\n\nThis gives the very unintuitive error:\n\n```\nerror: mismatched types [--explain E0308]\n --> <anon>:5:13\n5 |>         foo(y.clone());\n  |>             ^^^^^^^^^ expected struct `Foo`, found &-ptr\nnote: expected type `Foo`\nnote:    found type `&Foo`\n```\n\nYou expect `y.clone()` to return `(*y).clone()`, i.e. a `Foo`. It mysteriously returns an `&Foo` instead.\n\nBecause `&T` has a clone impl, it too, can be cloned (really, copied), returning a reference of the same lifetime. This is an operation you rarely want to do explicitly, except when dealing with generics.\n\nThis error can crop up when you've forgotten to implement `Clone` on `Foo`, and have a reference (which could have been silently inserted using `ref`, as in the code above). However, it's not very obvious what's happening here. It can also crop up [if you forget a `T: Clone` bound](https://is.gd/ryhcxX)\n\nWe should hint that `Foo` itself isn't cloneable and thus we fell back to cloning `&Foo` here.\n\nThis could be a lint on hitting the clone impl for references, but lints run too late.\n\nI'm not sure how this can be implemented, since we need to see the source of a value and that's a bit tricky. \n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/34896/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/34896/timeline", "performed_via_github_app": null, "state_reason": "completed"}