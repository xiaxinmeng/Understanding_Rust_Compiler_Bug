{"url": "https://api.github.com/repos/rust-lang/rust/issues/97646", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97646/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97646/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97646/events", "html_url": "https://github.com/rust-lang/rust/issues/97646", "id": 1257970580, "node_id": "I_kwDOAAsO6M5K-xuU", "number": 97646, "title": "The asm! macro incorrectly zeroes high byte register if both high and low byte registers are used for input, and the low byte input value is zero.", "user": {"login": "A1-Triard", "id": 8782185, "node_id": "MDQ6VXNlcjg3ODIxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/8782185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/A1-Triard", "html_url": "https://github.com/A1-Triard", "followers_url": "https://api.github.com/users/A1-Triard/followers", "following_url": "https://api.github.com/users/A1-Triard/following{/other_user}", "gists_url": "https://api.github.com/users/A1-Triard/gists{/gist_id}", "starred_url": "https://api.github.com/users/A1-Triard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/A1-Triard/subscriptions", "organizations_url": "https://api.github.com/users/A1-Triard/orgs", "repos_url": "https://api.github.com/users/A1-Triard/repos", "events_url": "https://api.github.com/users/A1-Triard/events{/privacy}", "received_events_url": "https://api.github.com/users/A1-Triard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 55301991, "node_id": "MDU6TGFiZWw1NTMwMTk5MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86", "name": "O-x86", "color": "6e6ec0", "default": false, "description": "Target: x86 processors"}, {"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-06-02T10:04:50Z", "updated_at": "2022-06-06T20:58:47Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "STR:\r\n\r\nCompile the following code for 32-bit target (e.g. `i686-unknown-linux-gnu` or `i686-pc-windows-msvc`) in release mode:\r\n\r\n```rust\r\nuse std::arch::asm;\r\n\r\nunsafe fn int_21h(al_mode: u8) -> Result<u16, u16> {\r\n    let mut ax: u16;\r\n    let mut flags: u8;\r\n    asm!(\r\n        \"int 0x21\",\r\n        \"mov {ax:x}, ax\",\r\n        \"lahf\",\r\n        ax = out(reg) ax,\r\n        in(\"ah\") 0x3du8,\r\n        in(\"al\") al_mode,\r\n        in(\"edx\") 0u32,\r\n        lateout(\"ah\") flags,\r\n        lateout(\"al\") _,\r\n    );\r\n    if flags & 0x01 == 0 {\r\n        Ok(ax)\r\n    } else {\r\n        Err(ax)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let x = unsafe { int_21h(0) }.unwrap();\r\n    println!(\"{}\", x);\r\n}\r\n```\r\n\r\n```sh\r\n$ cargo build --target i686-unknown-linux-gnu --release\r\n```\r\n\r\nLook at the final machine code:\r\n\r\n```sh\r\n$ objdump -d target/i686-unknown-linux-gnu/release/test_reg_bytes | grep -B 5 \"int \"\r\n\r\n    514a:\t5b                     \tpop    %ebx\r\n    514b:\tb4 3d                \tmov    $0x3d,%ah\r\n    514d:\t31 d2                \txor    %edx,%edx\r\n    514f:\t31 c0                \txor    %eax,%eax\r\n    5151:\t81 c3 62 fd 04 00   \tadd    $0x4fd62,%ebx\r\n    5157:\tcd 21                \tint    $0x21\r\n```\r\n\r\nAR: As you can see, `eax` is xored after `ah` was set to input `0x3d` value. \r\n\r\nER: Either the compiler should prevent such high and low byte register usage and refuse to compile such code, either it should not clear `ah` when it is trying to clear `al`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97646/timeline", "performed_via_github_app": null, "state_reason": null}