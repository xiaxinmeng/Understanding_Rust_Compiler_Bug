{"url": "https://api.github.com/repos/rust-lang/rust/issues/87014", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87014/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87014/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87014/events", "html_url": "https://github.com/rust-lang/rust/issues/87014", "id": 941052332, "node_id": "MDU6SXNzdWU5NDEwNTIzMzI=", "number": 87014, "title": "Undetailed diagnostics for object safety of supertraits defined in dependencies", "user": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1839565265, "node_id": "MDU6TGFiZWwxODM5NTY1MjY1", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-terse", "name": "D-terse", "color": "c9f7a3", "default": false, "description": "A diagnostic that doesn't give enough information about the problem at hand"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-07-09T20:40:07Z", "updated_at": "2021-07-10T02:14:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nCurrently, the diagnostics for object safety are not very good if the object safety issue is caused by a trait defined outside the current crate, as it just points that some supertrait is not object safe and doesn't explain why from there. It's possible to argue that the current way this works is correct and that exposing implementation details of your libraries is a bad idea, but it's not necessarily good for teaching the user that object safety is not some magic.\r\n\r\nGiven the following code: also at https://github.com/lf-/object-safety-issue\r\n\r\n`cargo new --lib v`\r\n`v/src/lib.rs`:\r\n```rust\r\npub trait T0: Clone {}\r\npub trait T1: T0 {}\r\n```\r\n\r\n`Cargo.toml`:\r\n```toml\r\n[package]\r\nname = \"play-si1zd_4v\"\r\nversion = \"0.1.0\"\r\nedition = \"2018\"\r\n\r\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\r\n\r\n[dependencies]\r\nv = {path = \"./v\"}\r\n```\r\n\r\n`src/main.rs`:\r\n```rust\r\ntrait T2: v::T1 {\r\n    fn a(self) -> u32;\r\n}\r\n\r\n#[derive(Clone)]\r\nstruct S;\r\n\r\nimpl v::T0 for S {}\r\nimpl v::T1 for S {}\r\nimpl T2 for S {\r\n    fn a(self) -> u32 {\r\n        4\r\n    }\r\n}\r\n\r\nfn f(a: Box<dyn T2>) {}\r\nfn main() {}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0038]: the trait `T2` cannot be made into an object\r\n  --> src/main.rs:16:9\r\n   |\r\n16 | fn f(a: Box<dyn T2>) {}\r\n   |         ^^^^^^^^^^^ `T2` cannot be made into an object\r\n   |\r\nnote: for a trait to be \"object safe\" it needs to allow building a vtable to allow the c\r\nall to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/\r\nreference/items/traits.html#object-safety>\r\n  --> src/main.rs:1:11\r\n   |\r\n1  | trait T2: v::T1 {\r\n   |       --  ^^^^^ ...because it requires `Self: Sized`\r\n   |       |\r\n   |       this trait cannot be made into an object...\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0038`.\r\nerror: could not compile `play-si1zd_4v`\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\nerror[E0038]: the trait `T2` cannot be made into an object\r\n  --> src/main.rs:16:9\r\n   |\r\n16 | fn f(a: Box<dyn T2>) {}\r\n   |         ^^^^^^^^^^^ `T2` cannot be made into an object\r\n   |\r\nnote: for a trait to be \"object safe\" it needs to allow building a vtable to allow the c\r\nall to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/\r\nreference/items/traits.html#object-safety>\r\nnote: because of requirement `T2: T1`\r\nnote: because of requirement `T1: T0`\r\nnote: because of requirement `T0: Clone`\r\nnote: because of requirement `Clone: Sized`\r\n  --> src/main.rs:1:11\r\n   |\r\n1  | trait T2: v::T1 {\r\n   |       --  ^^^^^ ...because it requires `Self: Sized`\r\n   |       |\r\n   |       this trait cannot be made into an object...\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0038`.\r\nerror: could not compile `play-si1zd_4v`\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n\r\nFiled based on nightly 2021-07-08.\r\n\r\nIf the traits are all declared in the same crate, the error is *much* better and points further along to the cause, although it *still* does not say that `Clone: Sized`, so you'd have to read the rustdocs or source to figure that out.\r\n\r\n`src/main.rs`\r\n```rust\r\nmod v {\r\n    pub trait T0: Clone {}\r\n    pub trait T1: T0 {}\r\n}\r\n\r\ntrait T2: v::T1 {\r\n    fn a(self) -> u32;\r\n}\r\n\r\n#[derive(Clone)]\r\nstruct S;\r\n\r\nimpl v::T0 for S {}\r\nimpl v::T1 for S {}\r\nimpl T2 for S {\r\n    fn a(self) -> u32 {\r\n        4\r\n    }\r\n}\r\n\r\nfn f(a: Box<dyn T2>) {}\r\n```\r\n\r\n\r\n```\r\nerror[E0038]: the trait `T2` cannot be made into an object\r\n  --> src/main.rs:21:9\r\n   |\r\n21 | fn f(a: Box<dyn T2>) {}\r\n   |         ^^^^^^^^^^^ `T2` cannot be made into an object\r\n   |\r\nnote: for a trait to be \"object safe\" it needs to allow building a vtable to allow the c\r\nall to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/\r\nreference/items/traits.html#object-safety>\r\n  --> src/main.rs:2:19\r\n   |\r\n2  |     pub trait T0: Clone {}\r\n   |                   ^^^^^ ...because it requires `Self: Sized`\r\n3  |     pub trait T1: T0 {}\r\n   |                   ^^ ...because it requires `Self: Sized`\r\n...\r\n6  | trait T2: v::T1 {\r\n   |       --  ^^^^^ ...because it requires `Self: Sized`\r\n   |       |\r\n   |       this trait cannot be made into an object...\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0038`.\r\nerror: could not compile `play-si1zd_4v`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87014/timeline", "performed_via_github_app": null, "state_reason": null}