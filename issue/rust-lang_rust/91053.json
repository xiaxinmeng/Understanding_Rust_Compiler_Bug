{"url": "https://api.github.com/repos/rust-lang/rust/issues/91053", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91053/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91053/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91053/events", "html_url": "https://github.com/rust-lang/rust/issues/91053", "id": 1058899345, "node_id": "I_kwDOAAsO6M4_HYWR", "number": 91053, "title": "MaybeUninit::fill_slice", "user": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 2238194189, "node_id": "MDU6TGFiZWwyMjM4MTk0MTg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-slice", "name": "A-slice", "color": "f7e101", "default": false, "description": "Area: [T]"}, {"id": 2242906716, "node_id": "MDU6TGFiZWwyMjQyOTA2NzE2", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-raw-pointers", "name": "A-raw-pointers", "color": "f7e101", "default": false, "description": "Area: raw pointers, MaybeUninit, NonNull"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-11-19T20:37:52Z", "updated_at": "2021-11-20T02:32:00Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Add a function:\r\n\r\n```\r\nimpl<T> MaybeUninit<T> {\r\n    pub fn fill_slice<'a>(this: &'a mut [MaybeUninit<T>], src: T) -> &'a mut [T]\r\n        where T: Clone,\r\n    { ... }\r\n}\r\n```\r\n\r\nSimilarly to `slice::fill`, it allows fast write of the same element to the slice.\r\n\r\nSimilarly to `MaybeUninit::write_slice_cloned`, it returns initialized slice without unsafe code.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91053/timeline", "performed_via_github_app": null, "state_reason": null}