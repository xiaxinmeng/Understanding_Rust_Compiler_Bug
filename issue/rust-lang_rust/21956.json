{"url": "https://api.github.com/repos/rust-lang/rust/issues/21956", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/21956/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/21956/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/21956/events", "html_url": "https://github.com/rust-lang/rust/issues/21956", "id": 56627737, "node_id": "MDU6SXNzdWU1NjYyNzczNw==", "number": 21956, "title": "`&mut` field of a consumed Struct remains borrowed", "user": {"login": "zslayton", "id": 611616, "node_id": "MDQ6VXNlcjYxMTYxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/611616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zslayton", "html_url": "https://github.com/zslayton", "followers_url": "https://api.github.com/users/zslayton/followers", "following_url": "https://api.github.com/users/zslayton/following{/other_user}", "gists_url": "https://api.github.com/users/zslayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/zslayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zslayton/subscriptions", "organizations_url": "https://api.github.com/users/zslayton/orgs", "repos_url": "https://api.github.com/users/zslayton/repos", "events_url": "https://api.github.com/users/zslayton/events{/privacy}", "received_events_url": "https://api.github.com/users/zslayton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-02-05T04:59:32Z", "updated_at": "2018-09-24T18:05:01Z", "closed_at": "2018-09-24T18:05:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all,\n\nIn implementing a builder for a struct I created, I encountered some very restrictive behavior in the borrow checker. It seems that if a struct holding a borrowed mutable reference is consumed, that borrow remains in effect for the duration of the program. For example:\n\n``` rust\nuse std::collections::hash_map::HashMap;\n\npub struct Frame;\n\npub struct Subscription<'a>{\n  subscription_name: &'a str\n}\n\npub struct Session <'a> {\n  subscriptions: HashMap<String, Subscription <'a>>\n}\n\npub struct SubscriptionBuilder <'a> {\n  pub session: &'a mut Session<'a>,\n  pub frame: Frame,\n  pub subscription: Subscription<'a>\n}\n\nimpl <'a> Session <'a> {\n  fn subscription(&'a mut self) -> SubscriptionBuilder <'a> {\n    SubscriptionBuilder{\n      session: self,\n      frame: Frame,\n      subscription: Subscription{subscription_name : \"test\"}\n    }\n  }\n\n  fn do_nothing(&'a self){\n    // Do nothing.\n  }\n}\n\nimpl <'a> SubscriptionBuilder <'a> {\n  pub fn create(self) -> String {\n    \"subscription_id\".to_string()\n  }\n}\n\nfn main() {\n    let mut session = Session{subscriptions : HashMap::new()};\n    let sub_id = session.subscription().create();\n    session.do_nothing();\n}\n```\n\nThis produces the error:\n\n```\n<anon>:42:5: 42:12 error: cannot borrow `session` as immutable because it is also borrowed as mutable\n<anon>:42     session.do_nothing();\n              ^~~~~~~\n<anon>:41:18: 41:25 note: previous borrow of `session` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `session` until the borrow ends\n<anon>:41     let sub_id = session.subscription().create();\n                           ^~~~~~~\n<anon>:43:2: 43:2 note: previous borrow ends here\n<anon>:39 fn main() {\n<anon>:40     let mut session = Session{subscriptions : HashMap::new()};\n<anon>:41     let sub_id = session.subscription().create();\n<anon>:42     session.do_nothing();\n<anon>:43 }\n          ^\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n```\n\nYou can toy with this example [in the playpen](http://is.gd/odatZ0).\n\nI would have expected the `session` variable to be available to borrow again after the `SubscriptionBuilder` created by `session.subscription()` was consumed in `create()`. Adding an extra scope around the first two lines in main doesn't appear to help. I apologize if this is the intended behavior; I asked around on IRC and others seemed equally surprised.\n\nThanks!\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/21956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/21956/timeline", "performed_via_github_app": null, "state_reason": "completed"}