{"url": "https://api.github.com/repos/rust-lang/rust/issues/99280", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99280/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99280/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99280/events", "html_url": "https://github.com/rust-lang/rust/issues/99280", "id": 1305966200, "node_id": "I_kwDOAAsO6M5N13Z4", "number": 99280, "title": "std::fs::create_dir_all can spuriously fail on OpenBSD", "user": {"login": "ltratt", "id": 20318, "node_id": "MDQ6VXNlcjIwMzE4", "avatar_url": "https://avatars.githubusercontent.com/u/20318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltratt", "html_url": "https://github.com/ltratt", "followers_url": "https://api.github.com/users/ltratt/followers", "following_url": "https://api.github.com/users/ltratt/following{/other_user}", "gists_url": "https://api.github.com/users/ltratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltratt/subscriptions", "organizations_url": "https://api.github.com/users/ltratt/orgs", "repos_url": "https://api.github.com/users/ltratt/repos", "events_url": "https://api.github.com/users/ltratt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltratt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 311417367, "node_id": "MDU6TGFiZWwzMTE0MTczNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-openbsd", "name": "O-openbsd", "color": "6e6ec0", "default": false, "description": "Operating system: OpenBSD"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-07-15T12:15:40Z", "updated_at": "2022-07-26T08:50:02Z", "closed_at": "2022-07-26T08:50:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a process which repeatedly calls `create_dir_all` in a thread on OpenBSD and, for a directory that already exists, perhaps once in perhaps 5 calls it returns `Is a directory (os error 21)` (which is true -- it is a directory!). Unfortunately I have not managed to replicate this in a small test program, so presumably there is a race condition going on.\r\n\r\nWhat I have noticed is that `create_dir_all` works subtly different than `mkdir(1)`. Here's `create_dir_all`:\r\n\r\n```rust\r\n    fn create_dir_all(&self, path: &Path) -> io::Result<()> {\r\n        if path == Path::new(\"\") {\r\n            return Ok(());\r\n        }\r\n\r\n        match self.inner.mkdir(path) {\r\n            Ok(()) => return Ok(()),\r\n            Err(ref e) if e.kind() == io::ErrorKind::NotFound => {}\r\n            Err(_) if path.is_dir() => return Ok(()),\r\n            Err(e) => return Err(e),\r\n        }\r\n        match path.parent() {\r\n            Some(p) => self.create_dir_all(p)?,\r\n            None => {\r\n                return Err(io::const_io_error!(\r\n                    io::ErrorKind::Uncategorized,\r\n                    \"failed to create whole tree\",\r\n                ));\r\n            }\r\n        }\r\n        match self.inner.mkdir(path) {\r\n            Ok(()) => Ok(()),\r\n            Err(_) if path.is_dir() => Ok(()),\r\n            Err(e) => Err(e),\r\n        }\r\n    }\r\n```\r\n\r\nHere's OpenBSD's equivalent (from [mkdir.c](https://github.com/openbsd/src/blob/master/bin/mkdir/mkdir.c)):\r\n\r\n```c\r\nmkpath(char *path, mode_t mode, mode_t dir_mode)\r\n{\r\n\tstruct stat sb;\r\n\tchar *slash;\r\n\tint done;\r\n\r\n\tslash = path;\r\n\r\n\tfor (;;) {\r\n\t\tslash += strspn(slash, \"/\");\r\n\t\tslash += strcspn(slash, \"/\");\r\n\r\n\t\tdone = (*slash == '\\0');\r\n\t\t*slash = '\\0';\r\n\r\n\t\tif (mkdir(path, done ? mode : dir_mode) == 0) {\r\n\t\t\tif (mode > 0777 && chmod(path, mode) == -1)\r\n\t\t\t\treturn (-1);\r\n\t\t} else {\r\n\t\t\tint mkdir_errno = errno;\r\n\r\n\t\t\tif (stat(path, &sb) == -1) {\r\n\t\t\t\t/* Not there; use mkdir()s errno */\r\n\t\t\t\terrno = mkdir_errno;\r\n\t\t\t\treturn (-1);\r\n\t\t\t}\r\n\t\t\tif (!S_ISDIR(sb.st_mode)) {\r\n\t\t\t\t/* Is there, but isn't a directory */\r\n\t\t\t\terrno = ENOTDIR;\r\n\t\t\t\treturn (-1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (done)\r\n\t\t\tbreak;\r\n\r\n\t\t*slash = '/';\r\n\t}\r\n\r\n\treturn (0);\r\n}\r\n```\r\n\r\nAs I read things, for a path `/a/b/c` Rust's `create_dir_all` first tries to see if `/a/b/c` exists and, if it doesn't, tries `/a/b/` and then `/a/`. As soon as it finds a directory which does exist, it then works its way back up the recursive stack, creating the rest.\r\n\r\nIn contrast, OpenBSD's `mkdir` starts at `/a`; if it doesn't exist it creates it; either way it then moves to `/a/b/` and so on until it's checked that every directory along the way exists.\r\n\r\nRust's `create_dir_all` is, on the face of things, more efficient if `/a/b/c` already exists, but probably less efficient if it doesn't exist, and also has a sort-of race condition where it might check for `/a/b/`'s existence, find it doesn't exist, try creating it, only to find someone else has created it or altered it in the interim and then... presumably, boom? I'm also not clear how stale the information about `path` it has might be, which might also be a source of a race condition.\r\n\r\n(CC @semarie who's much more expert on OpenBSD and Rust than I am)", "closed_by": {"login": "ltratt", "id": 20318, "node_id": "MDQ6VXNlcjIwMzE4", "avatar_url": "https://avatars.githubusercontent.com/u/20318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltratt", "html_url": "https://github.com/ltratt", "followers_url": "https://api.github.com/users/ltratt/followers", "following_url": "https://api.github.com/users/ltratt/following{/other_user}", "gists_url": "https://api.github.com/users/ltratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltratt/subscriptions", "organizations_url": "https://api.github.com/users/ltratt/orgs", "repos_url": "https://api.github.com/users/ltratt/repos", "events_url": "https://api.github.com/users/ltratt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltratt/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99280/timeline", "performed_via_github_app": null, "state_reason": "completed"}