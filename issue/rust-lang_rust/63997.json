{"url": "https://api.github.com/repos/rust-lang/rust/issues/63997", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63997/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63997/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63997/events", "html_url": "https://github.com/rust-lang/rust/issues/63997", "id": 486862701, "node_id": "MDU6SXNzdWU0ODY4NjI3MDE=", "number": 63997, "title": "Tracking issue for const fn pointers", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 268744493, "node_id": "MDU6TGFiZWwyNjg3NDQ0OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-fn", "name": "A-const-fn", "color": "f7e101", "default": false, "description": "Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 3537250192, "node_id": "LA_kwDOAAsO6M7S1ieQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-needs-summary", "name": "S-tracking-needs-summary", "color": "4682b4", "default": false, "description": "It's hard to tell what's been done and what hasn't! Someone should do some investigation."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2019-08-29T10:04:12Z", "updated_at": "2023-03-16T13:17:39Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sub-tracking issue for https://github.com/rust-lang/rust/issues/57563.\r\n\r\nThis tracks `const fn` types and calling `fn` types in `const fn`. \r\n\r\n---\r\n\r\nFrom the RFC (https://github.com/oli-obk/rfcs/blob/const_generic_const_fn_bounds/text/0000-const-generic-const-fn-bounds.md#const-function-pointers):\r\n\r\n## `const` function pointers\r\n\r\n```rust\r\nconst fn foo(f: fn() -> i32) -> i32 {\r\n    f()\r\n}\r\n```\r\n\r\nis illegal before and with this RFC. While we can change the language to allow this feature, two\r\nquestions make themselves known:\r\n\r\n1. fn pointers in constants\r\n\r\n    ```rust\r\n    const F: fn() -> i32 = ...;\r\n    ```\r\n\r\n    is already legal in Rust today, even though the `F` doesn't need to be a `const` function.\r\n\r\n2. Opt out bounds might seem unintuitive?\r\n\r\n    ```rust\r\n    const fn foo(f: ?const fn() -> i32) -> i32 {\r\n        // not allowed to call `f` here, because we can't guarantee that it points to a `const fn`\r\n    }\r\n    const fn foo(f: fn() -> i32) -> i32 {\r\n        f()\r\n    }\r\n    ```\r\n\r\nAlternatively one can prefix function pointers to `const` functions with `const`:\r\n\r\n```rust\r\nconst fn foo(f: const fn() -> i32) -> i32 {\r\n    f()\r\n}\r\nconst fn bar(f: fn() -> i32) -> i32 {\r\n    f() // ERROR\r\n}\r\n```\r\n\r\nThis opens up the curious situation of `const` function pointers in non-const functions:\r\n\r\n```rust\r\nfn foo(f: const fn() -> i32) -> i32 {\r\n    f()\r\n}\r\n```\r\n\r\nWhich is useless except for ensuring some sense of \"purity\" of the function pointer ensuring that\r\nsubsequent calls will only modify global state if passed in via arguments.\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63997/reactions", "total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63997/timeline", "performed_via_github_app": null, "state_reason": null}