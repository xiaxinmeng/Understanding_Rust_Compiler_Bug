{"url": "https://api.github.com/repos/rust-lang/rust/issues/111821", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111821/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111821/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111821/events", "html_url": "https://github.com/rust-lang/rust/issues/111821", "id": 1718534545, "node_id": "I_kwDOAAsO6M5mbsGR", "number": 111821, "title": "Type inference/resolution error in the presence of Pointee::Metadata in recursive data-structure", "user": {"login": "matthieu-m", "id": 2420441, "node_id": "MDQ6VXNlcjI0MjA0NDE=", "avatar_url": "https://avatars.githubusercontent.com/u/2420441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthieu-m", "html_url": "https://github.com/matthieu-m", "followers_url": "https://api.github.com/users/matthieu-m/followers", "following_url": "https://api.github.com/users/matthieu-m/following{/other_user}", "gists_url": "https://api.github.com/users/matthieu-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthieu-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthieu-m/subscriptions", "organizations_url": "https://api.github.com/users/matthieu-m/orgs", "repos_url": "https://api.github.com/users/matthieu-m/repos", "events_url": "https://api.github.com/users/matthieu-m/events{/privacy}", "received_events_url": "https://api.github.com/users/matthieu-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 5260993605, "node_id": "LA_kwDOAAsO6M8AAAABOZRkRQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/fixed-by-next-solver", "name": "fixed-by-next-solver", "color": "93CE7D", "default": false, "description": "Fixed by the next-generation trait solver, `-Ztrait-solver=next`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2023-05-21T15:00:48Z", "updated_at": "2023-05-31T12:41:01Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The following code causes the latest nightly (2023-05-16) to choke, it can also be seen on [the playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=dfd459dacc72328179e8bce4ec6e9919).\r\n\r\n```rust\r\n#![feature(ptr_metadata)]\r\n\r\nuse core::ptr::Pointee;\r\n\r\nstruct TypedHandle<E: ?Sized> {\r\n    metadata: <E as Pointee>::Metadata,\r\n}\r\n\r\ntype NodeHandle<T> = TypedHandle<Node<T>>;\r\n\r\nstruct Node<T> {\r\n    element: T,\r\n    next: NodeHandle<T>,\r\n    prev: NodeHandle<T>,\r\n}\r\n```\r\n\r\n_Credits to [Chayim Friedman](https://stackoverflow.com/users/7884305/chayim-friedman) for this reduced example._\r\n\r\nAnd the compiler, much confused it appears, spits out the following error:\r\n\r\n```rust\r\nerror[[E0284]](https://doc.rust-lang.org/nightly/error_codes/E0284.html): type annotations needed\r\n  --> src/lib.rs:13:11\r\n   |\r\n13 |     next: NodeHandle<T>,\r\n   |           ^^^^^^^^^^^^^ cannot infer type\r\n   |\r\n   = note: cannot satisfy `<Node<T> as Pointee>::Metadata == _`\r\nnote: required because it appears within the type `TypedHandle<Node<T>>`\r\n  --> src/lib.rs:5:8\r\n   |\r\n5  | struct TypedHandle<E: ?Sized> {\r\n   |        ^^^^^^^^^^^\r\n   = note: only the last field of a struct may have a dynamically sized type\r\n   = help: change the field's type to have a statically known size\r\nhelp: borrowed types always have a statically known size\r\n   |\r\n13 |     next: &NodeHandle<T>,\r\n   |           +\r\nhelp: the `Box` type always has a statically known size and allocates its contents in the heap\r\n   |\r\n13 |     next: Box<NodeHandle<T>>,\r\n   |           ++++             +\r\n```\r\n\r\nThe compiler accepts the code:\r\n\r\n - If the metadata is stored in a `NonNull<E>` in `TypedHandle`.\r\n - If the `?Sized` bound is removed from `E` in `TypedHandle`.\r\n - If the `where NodeHandle<T>: Sized` bound is added on `Node`.\r\n\r\nGiven the messages, and the fixes, it appears that the compiler fails to realize that `<E as Pointee>::Metadata` is always `Sized`, regardless of whether `E` is `Sized` or not, even though `Metadata` is necessarily `Sized` since its bounds do not specify `?Sized`. This in turn would lead the compiler to expect that `TypedHandle` may be unsized, and thus reject any code where it is not the last field of a struct.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111821/timeline", "performed_via_github_app": null, "state_reason": null}