{"url": "https://api.github.com/repos/rust-lang/rust/issues/31508", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/31508/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/31508/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/31508/events", "html_url": "https://github.com/rust-lang/rust/issues/31508", "id": 132338105, "node_id": "MDU6SXNzdWUxMzIzMzgxMDU=", "number": 31508, "title": "Specifying linkage on externs silently removes indirection", "user": {"login": "jethrogb", "id": 1132307, "node_id": "MDQ6VXNlcjExMzIzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1132307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jethrogb", "html_url": "https://github.com/jethrogb", "followers_url": "https://api.github.com/users/jethrogb/followers", "following_url": "https://api.github.com/users/jethrogb/following{/other_user}", "gists_url": "https://api.github.com/users/jethrogb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jethrogb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jethrogb/subscriptions", "organizations_url": "https://api.github.com/users/jethrogb/orgs", "repos_url": "https://api.github.com/users/jethrogb/repos", "events_url": "https://api.github.com/users/jethrogb/events{/privacy}", "received_events_url": "https://api.github.com/users/jethrogb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-02-09T05:57:04Z", "updated_at": "2018-09-20T11:14:34Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When compiling the following code:\n\n``` c\n// externs-c.c\nunsigned char myarr[10]={1,2,3,4,5,6,7,8,9,10};\nunsigned char (*implicitvar)[10]=&myarr;\nunsigned char (*explicitvar)[10]=&myarr;\n```\n\n``` rust\n// externs-rust.rs\n#![feature(linkage)]\n\nextern {\n    static implicitvar: *const [u8;10];\n    // Should have no effect, external linkage is the default in an extern block\n    #[linkage=\"external\"]\n    static explicitvar: *const [u8;10];\n}\n\nfn as_option(p: *const [u8;10]) -> Option<&'static [u8;10]> {\n    unsafe{std::mem::transmute(p)}\n}\n\nfn main() {\n    println!(\"implicitvar = {:?}\",as_option(implicitvar));\n    println!(\"explicitvar = {:?}\",as_option(explicitvar));\n}\n```\n\nusing\n\n```\nclang -c externs-c.c && rustc externs-rust.rs -C link-args=./externs.o\n```\n\nrunning `./externs` will output something like the following:\n\n```\nimplicitvar = Some([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nexplicitvar = Some([168, 4, 122, 85, 85, 85, 0, 0, 0, 0])\n```\n\nWat.\n\nTaking a look at the IR:\n\n``` llvm\n; externs-c.ll\n@myarr = global [10 x i8] c\"\\01\\02\\03\\04\\05\\06\\07\\08\\09\\0A\", align 1\n@implicitvar = global [10 x i8]* @myarr, align 8\n@explicitvar = global [10 x i8]* @myarr, align 8\n```\n\n``` llvm\n; externs-rust.ll\n@implicitvar = external global [10 x i8]*\n@explicitvar = external global [10 x i8]\n@_rust_extern_with_linkage_explicitvar = internal global [10 x i8]* @explicitvar\n```\n\nSo, Rust removes a layer of indirection defining `static explicitvar: [u8;10]` and adding a new variable `static _rust_extern_with_linkage_explicitvar: *const [u8;10]=&explicitvar`. All mentions of `explicitvar` in Rust source code get replaced with `_rust_extern_with_linkage_explicitvar`. This results in the C version and this new Rust version **not having the same type**! To get \u201ccorrect\u201d behavior in the example above, you would need to define `static explicitvar: *const *const [u8;10]` instead.\n\nThis weird assymmetry between the types associated with symbols in Rust and in C is a source of great confusion and can easily lead to bugs. In the example above, we just read 2 bytes past some pointer by interpreting it as a 10-byte array.\n\nThis weird behavior was introduced in #12556 (see also #11978), the rationale being weak linkage and the fact that some pointers can't be null in the Rust typesystem. While true, I don't think that's sufficient rationale to add this layer of indirection. I think the layer of indirection should be removed completely. For weak linkage, a restriction can be added to allow only zeroable types.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/31508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/31508/timeline", "performed_via_github_app": null, "state_reason": null}