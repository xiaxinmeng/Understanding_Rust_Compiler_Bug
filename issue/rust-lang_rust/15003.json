{"url": "https://api.github.com/repos/rust-lang/rust/issues/15003", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/15003/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/15003/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/15003/events", "html_url": "https://github.com/rust-lang/rust/issues/15003", "id": 35979223, "node_id": "MDU6SXNzdWUzNTk3OTIyMw==", "number": 15003, "title": "compiling with debug info causing internal compiler error ", "user": {"login": "DarthShoge", "id": 6913239, "node_id": "MDQ6VXNlcjY5MTMyMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/6913239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DarthShoge", "html_url": "https://github.com/DarthShoge", "followers_url": "https://api.github.com/users/DarthShoge/followers", "following_url": "https://api.github.com/users/DarthShoge/following{/other_user}", "gists_url": "https://api.github.com/users/DarthShoge/gists{/gist_id}", "starred_url": "https://api.github.com/users/DarthShoge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DarthShoge/subscriptions", "organizations_url": "https://api.github.com/users/DarthShoge/orgs", "repos_url": "https://api.github.com/users/DarthShoge/repos", "events_url": "https://api.github.com/users/DarthShoge/events{/privacy}", "received_events_url": "https://api.github.com/users/DarthShoge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-06-18T12:24:21Z", "updated_at": "2014-06-18T12:31:08Z", "closed_at": "2014-06-18T12:29:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi \nI am currently writing a pretty simple implementation of a binary tree and appear to have stumbled upon an internal compiler error that only occurs when compiling with the debugInfo (-g) flag  the compiler insisted i report it. :)\np.s. I am running under windows 7 on a 32 bit machine \n\nheres the compiler output \n\n```\ntask 'rustc' failed at 'Box<Any>', C:\\bot\\slave\\nightly-win\\build\\src\\libsyntax\\diagnostic.rs:162\n\n\n2.rs:19     let tree = Branch(20,box Branch(5,box Leaf(2),box Leaf(9)),box Branch(40, box Leaf(35),box Null));\n                    ^~~~\nhello2.rs:46:1: 53:2 warning: code is never used: `areListsEqual`, #[warn(dead_code)] on by default\nhello2.rs:46 fn areListsEqual<T: PartialEq>(xs: &List<T>, ys: &List<T>) -> bool{\nhello2.rs:47    match (xs,ys) {\nhello2.rs:48        (&Nil,&Nil) => true,\nhello2.rs:49        (&Cons(ref x,box ref nextXs),&Cons(ref y,box ref nextYs)) if x == y => \nhello2.rs:50            areListsEqual(nextXs,nextYs),\nhello2.rs:51        _ => false\n             ...\nhello2.rs:46:1: 53:2 warning: function `areListsEqual` should have a snake case name such as `are_lists_equal`, #[warn(non_snake_case_functions)] on by default\nhello2.rs:46 fn areListsEqual<T: PartialEq>(xs: &List<T>, ys: &List<T>) -> bool{\nhello2.rs:47    match (xs,ys) {\nhello2.rs:48        (&Nil,&Nil) => true,\nhello2.rs:49        (&Cons(ref x,box ref nextXs),&Cons(ref y,box ref nextYs)) if x == y => \nhello2.rs:50            areListsEqual(nextXs,nextYs),\nhello2.rs:51        _ => false\n             ...\nhello2.rs:55:1: 57:2 warning: code is never used: `prependList`, #[warn(dead_code)] on by default\nhello2.rs:55 fn prependList<T> (xs: List<T>, v: T) -> List<T>{\nhello2.rs:56    Cons(v, box xs)\nhello2.rs:57 }\nhello2.rs:55:1: 57:2 warning: function `prependList` should have a snake case name such as `prepend_list`, #[warn(non_snake_case_functions)] on by default\nhello2.rs:55 fn prependList<T> (xs: List<T>, v: T) -> List<T>{\nhello2.rs:56    Cons(v, box xs)\nhello2.rs:57 }\nhello2.rs:59:1: 61:2 warning: code is never used: `scaleVector`, #[warn(dead_code)] on by default\nhello2.rs:59 fn scaleVector(scale: int,xs: Vec<int>) -> Vec<int> {\nhello2.rs:60    xs.move_iter().map(|i| i + scale).collect()\nhello2.rs:61 }\nhello2.rs:59:1: 61:2 warning: function `scaleVector` should have a snake case name such as `scale_vector`, #[warn(non_snake_case_functions)] on by default\nhello2.rs:59 fn scaleVector(scale: int,xs: Vec<int>) -> Vec<int> {\nhello2.rs:60    xs.move_iter().map(|i| i + scale).collect()\nhello2.rs:61 }\nhello2.rs:63:1: 85:2 warning: function `createBinarySearchTree` should have a snake case name such as `create_binary_search_tree`, #[warn(non_snake_case_functions)] on by default\nhello2.rs:63 fn createBinarySearchTree(vector : Vec<int>) -> BinaryTree<int>{\nhello2.rs:64    \nhello2.rs:65    fn placeNode(val: int, btree: &mut BinaryTree<int>) -> BinaryTree<int> {\nhello2.rs:66        match btree {\nhello2.rs:67            &Leaf(tval) if val > tval => Branch(tval,box Null,box Leaf(val)),   \nhello2.rs:68            &Leaf(tval) if val < tval => Branch(tval,box Leaf(val),box Null),\n             ...\nhello2.rs:69:21: 69:29 warning: unused variable: `left`, #[warn(unused_variable)] on by default\nhello2.rs:69            &Branch(tval,box ref left,box ref mut right) if val > tval => placeNode(val,right)  ,\n                                         ^~~~~~~~\nhello2.rs:70:38: 70:47 warning: unused variable: `right`, #[warn(unused_variable)] on by default\nhello2.rs:70            &Branch(tval,box ref mut left,box ref right) if val < tval => placeNode(val,left),\n                                                          ^~~~~~~~~\nhello2.rs:73:21: 73:29 warning: unused variable: `left`, #[warn(unused_variable)] on by default\nhello2.rs:73            &Branch(lval,box ref left,box ref right) if val == lval => fail!(\"already has a node with {}\",lval),\n                                         ^~~~~~~~\nhello2.rs:73:34: 73:43 warning: unused variable: `right`, #[warn(unused_variable)] on by default\nhello2.rs:73            &Branch(lval,box ref left,box ref right) if val == lval => fail!(\"already has a node with {}\",lval),\n                                                      ^~~~~~~~~\nhello2.rs:65:2: 76:3 warning: function `placeNode` should have a snake case name such as `place_node`, #[warn(non_snake_case_functions)] on by default\nhello2.rs:65    fn placeNode(val: int, btree: &mut BinaryTree<int>) -> BinaryTree<int> {\nhello2.rs:66        match btree {\nhello2.rs:67            &Leaf(tval) if val > tval => Branch(tval,box Null,box Leaf(val)),   \nhello2.rs:68            &Leaf(tval) if val < tval => Branch(tval,box Leaf(val),box Null),\nhello2.rs:69            &Branch(tval,box ref left,box ref mut right) if val > tval => placeNode(val,right)  ,\nhello2.rs:70            &Branch(tval,box ref mut left,box ref right) if val < tval => placeNode(val,left),\n             ...\nhello2.rs:87:1: 101:2 warning: function `printTree` should have a snake case name such as `print_tree`, #[warn(non_snake_case_functions)] on by default\nhello2.rs:87 fn printTree(tree : &BinaryTree<int>){\nhello2.rs:88    fn innerPrint(foreword : &str,tree : &BinaryTree<int>, level : int) {\nhello2.rs:89        let lvDesc = format!(\"lv {}\",level);\nhello2.rs:90        match tree{\nhello2.rs:91            &Leaf(val) => println!(\"{}-{} leaf: {}\",lvDesc,foreword,val),\nhello2.rs:92            &Branch(val,box ref left, box ref right) => {\n             ...\nhello2.rs:88:2: 99:3 warning: function `innerPrint` should have a snake case name such as `inner_print`, #[warn(non_snake_case_functions)] on by default\nhello2.rs:88    fn innerPrint(foreword : &str,tree : &BinaryTree<int>, level : int) {\nhello2.rs:89        let lvDesc = format!(\"lv {}\",level);\nhello2.rs:90        match tree{\nhello2.rs:91            &Leaf(val) => println!(\"{}-{} leaf: {}\",lvDesc,foreword,val),\nhello2.rs:92            &Branch(val,box ref left, box ref right) => {\nhello2.rs:93                println!(\"{}-{} node: {}\",lvDesc,foreword,val);\n             ...\nhello2.rs:103:1: 107:2 warning: code is never used: `displayVector`, #[warn(dead_code)] on by default\nhello2.rs:103 fn displayVector(vector: Vec<int>){\nhello2.rs:104   for v in vector.iter() {\nhello2.rs:105       println!(\"{}\",v)\nhello2.rs:106   }\nhello2.rs:107 }\nhello2.rs:103:1: 107:2 warning: function `displayVector` should have a snake case name such as `display_vector`, #[warn(non_snake_case_functions)] on by default\nhello2.rs:103 fn displayVector(vector: Vec<int>){\nhello2.rs:104   for v in vector.iter() {\nhello2.rs:105       println!(\"{}\",v)\nhello2.rs:106   }\nhello2.rs:107 }\nhello2.rs:109:1: 117:2 warning: code is never used: `displayList`, #[warn(dead_code)] on by default\nhello2.rs:109 fn displayList<int> (xs: &List<int>){\nhello2.rs:110   match xs{\nhello2.rs:111       &Cons(v,box ref rest) => {\nhello2.rs:112           println!(\"{}\",v);\nhello2.rs:113           displayList::<int>(rest)\nhello2.rs:114       },\n              ...\nhello2.rs:109:1: 117:2 warning: function `displayList` should have a snake case name such as `display_list`, #[warn(non_snake_case_functions)] on by default\nhello2.rs:109 fn displayList<int> (xs: &List<int>){\nhello2.rs:110   match xs{\nhello2.rs:111       &Cons(v,box ref rest) => {\nhello2.rs:112           println!(\"{}\",v);\nhello2.rs:113           displayList::<int>(rest)\nhello2.rs:114       },\n              ...\nerror: internal compiler error: Type metadata for unique id '{&{&[]{struct d517309cb671f9ac/2157e}}}' is already in the TypeMap!\nnote: the compiler hit an unexpected failure path. this is a bug.\nnote: we would appreciate a bug report: http://doc.rust-lang.org/complement-bugreport.html\nnote: run with `RUST_BACKTRACE=1` for a backtrace\n```\n", "closed_by": {"login": "DarthShoge", "id": 6913239, "node_id": "MDQ6VXNlcjY5MTMyMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/6913239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DarthShoge", "html_url": "https://github.com/DarthShoge", "followers_url": "https://api.github.com/users/DarthShoge/followers", "following_url": "https://api.github.com/users/DarthShoge/following{/other_user}", "gists_url": "https://api.github.com/users/DarthShoge/gists{/gist_id}", "starred_url": "https://api.github.com/users/DarthShoge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DarthShoge/subscriptions", "organizations_url": "https://api.github.com/users/DarthShoge/orgs", "repos_url": "https://api.github.com/users/DarthShoge/repos", "events_url": "https://api.github.com/users/DarthShoge/events{/privacy}", "received_events_url": "https://api.github.com/users/DarthShoge/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/15003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/15003/timeline", "performed_via_github_app": null, "state_reason": "completed"}