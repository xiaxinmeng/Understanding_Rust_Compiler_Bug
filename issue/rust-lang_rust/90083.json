{"url": "https://api.github.com/repos/rust-lang/rust/issues/90083", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90083/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90083/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90083/events", "html_url": "https://github.com/rust-lang/rust/issues/90083", "id": 1030937605, "node_id": "I_kwDOAAsO6M49ctwF", "number": 90083, "title": "`asm!` can't let you use `lateout(\"rbx\")` (LLVM needs it)", "user": {"login": "noncombatant", "id": 372693, "node_id": "MDQ6VXNlcjM3MjY5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/372693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noncombatant", "html_url": "https://github.com/noncombatant", "followers_url": "https://api.github.com/users/noncombatant/followers", "following_url": "https://api.github.com/users/noncombatant/following{/other_user}", "gists_url": "https://api.github.com/users/noncombatant/gists{/gist_id}", "starred_url": "https://api.github.com/users/noncombatant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noncombatant/subscriptions", "organizations_url": "https://api.github.com/users/noncombatant/orgs", "repos_url": "https://api.github.com/users/noncombatant/repos", "events_url": "https://api.github.com/users/noncombatant/events{/privacy}", "received_events_url": "https://api.github.com/users/noncombatant/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2046313052, "node_id": "MDU6TGFiZWwyMDQ2MzEzMDUy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-asm", "name": "F-asm", "color": "f9c0cc", "default": false, "description": "`#![feature(asm)]` (not `llvm_asm`)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-10-20T03:32:23Z", "updated_at": "2021-10-22T23:29:57Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is about an unstable feature, so maybe you don't consider that a regression, exactly. This seemed like the best bug template to me; I hope it's OK.\r\n\r\nI'm reading the `asm!` document at https://doc.rust-lang.org/beta/unstable-book/library-features/asm.html. The `cpuid` example has this code:\r\n\r\n```rust\r\n#![allow(unused)]\r\n#![feature(asm)]\r\nfn main() {\r\nlet ebx: u32;\r\nlet ecx: u32;\r\n\r\nunsafe {\r\n    asm!(\r\n        \"cpuid\",\r\n        // EAX 4 selects the \"Deterministic Cache Parameters\" CPUID leaf\r\n        inout(\"eax\") 4 => _,\r\n        // ECX 0 selects the L0 cache information.\r\n        inout(\"ecx\") 0 => ecx,\r\n        lateout(\"ebx\") ebx,\r\n        lateout(\"edx\") _,\r\n    );\r\n}\r\n\r\nprintln!(\r\n    \"L1 Cache: {}\",\r\n    ((ebx >> 22) + 1) * (((ebx >> 12) & 0x3ff) + 1) * ((ebx & 0xfff) + 1) * (ecx + 1)\r\n);\r\n}\r\n```\r\n\r\nBut when you press the Play button to try it out, you get:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror: invalid register `ebx`: rbx is used internally by LLVM and cannot be used as an operand for inline asm\r\n  --> src/main.rs:15:9\r\n   |\r\n15 |         lateout(\"ebx\") ebx,\r\n   |         ^^^^^^^^^^^^^^^^^^\r\n\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nI hacked it up locally (building with Rust Nightly), and this seems to work:\r\n\r\n```rust\r\n    unsafe {\r\n        asm!(\r\n            \"cpuid\",\r\n            // EAX 4 selects the \"Deterministic Cache Parameters\" CPUID leaf\r\n            inout(\"eax\") 4 => _,\r\n            // ECX 0 selects the L0 cache information.\r\n            inout(\"ecx\") 0 => ecx,\r\n            //lateout(\"ebx\") ebx,\r\n            lateout(\"edx\") _,\r\n        );\r\n        asm!(\r\n                \"mov {:e}, ebx\", out(reg) ebx\r\n        );\r\n    }\r\n```\r\n\r\nI.e. I comment out the `lateout(\"ebx\")` line, and add a second macro invocation to get the value of ebx.\r\n\r\nBut I assume there is a better way. :) The docs should be updated to show the better way. Thanks!", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90083/timeline", "performed_via_github_app": null, "state_reason": null}