{"url": "https://api.github.com/repos/rust-lang/rust/issues/67427", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67427/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67427/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67427/events", "html_url": "https://github.com/rust-lang/rust/issues/67427", "id": 540375100, "node_id": "MDU6SXNzdWU1NDAzNzUxMDA=", "number": 67427, "title": "Irrelevant error caused by illegal blanket impl", "user": {"login": "Ploppz", "id": 4773287, "node_id": "MDQ6VXNlcjQ3NzMyODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4773287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ploppz", "html_url": "https://github.com/Ploppz", "followers_url": "https://api.github.com/users/Ploppz/followers", "following_url": "https://api.github.com/users/Ploppz/following{/other_user}", "gists_url": "https://api.github.com/users/Ploppz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ploppz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ploppz/subscriptions", "organizations_url": "https://api.github.com/users/Ploppz/orgs", "repos_url": "https://api.github.com/users/Ploppz/repos", "events_url": "https://api.github.com/users/Ploppz/events{/privacy}", "received_events_url": "https://api.github.com/users/Ploppz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-19T15:14:41Z", "updated_at": "2019-12-19T15:33:47Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I have a minimal example, using stable rustc 1.39.0:\r\n\r\n`Cargo.toml`:\r\n```\r\n[package]\r\nname = \"minimal\"\r\nversion = \"0.1.0\"\r\nauthors = [\"Erlend Langseth <3rlend@gmail.com>\"]\r\nedition = \"2018\"\r\n\r\n\r\n[dependencies]\r\n# Actix\r\nactix = \"0.9.0-alpha.2\"\r\nactix-web = \"2.0.0-alpha.6\"\r\nactix-rt = \"1.0.0\"\r\nactix-http = \"1.0.0\"\r\n\r\n\r\n# Redis\r\nredis-async = \"0.6.1\"\r\nactix-redis = \"0.8.0-alpha.1\"\r\n\r\n# Serde\r\nserde = { version = \"1.0\", features = [\"derive\"] }\r\nserde_json = \"1.0\"\r\n```\r\n\r\n`main.rs`:\r\n```\r\nuse actix::prelude::*;\r\nuse actix_web::{\r\n    get,\r\n    web::{Json, Data},\r\n    App, HttpServer,\r\n};\r\nuse serde::{Deserialize};\r\n\r\nuse redis_async::{\r\n    resp_array,\r\n    resp::{RespValue, FromResp},\r\n    client::paired::PairedConnection as RedisConn\r\n};\r\nuse std::str::FromStr;\r\nuse std::net::SocketAddr;\r\n\r\n#[actix_rt::main]\r\nasync fn main() -> std::io::Result<()> {\r\n    let redis = redis_async::client::paired::paired_connect(&SocketAddr::from_str(\"127.0.0.1:6379\").unwrap()).await.unwrap();\r\n\r\n    HttpServer::new(move || {\r\n        App::new()\r\n            .wrap(actix_web::middleware::Logger::new(\r\n                \"%a \\\"%r\\\" Response: %s %b\",\r\n            ))\r\n            .data(redis.clone())\r\n            .service(get_health)\r\n    })\r\n    .bind(\"127.0.0.1:8088\")?\r\n    .start()\r\n    .await\r\n}\r\n\r\n\r\nimpl<'a, T: Deserialize<'a>> FromResp for T {\r\n    fn from_resp_int(resp: RespValue) -> Result<T, redis_async::error::Error> {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\n#[get(\"/admin/v1/health\")]\r\nasync fn get_health(redis: Data<RedisConn>) -> Json<usize> {\r\n    let res = redis.send::<String>(resp_array![\"PING\"]).await;\r\n    Json(0)\r\n}\r\n```\r\n\r\nIt yields this weird error:\r\n```\r\nerror[E0283]: type annotations required: cannot resolve `std::string::String: redis_async::resp::FromResp`\r\n  --> src/main.rs:43:21\r\n   |\r\n43 |     let res = redis.send::<String>(resp_array![\"PING\"]).await;\r\n   |                     ^^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nWhereas the real error is `impl<'a, T: Deserialize<'a>> FromResp for T`. If I remove that impl block, it's all fine.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67427/timeline", "performed_via_github_app": null, "state_reason": null}