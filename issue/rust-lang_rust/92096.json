{"url": "https://api.github.com/repos/rust-lang/rust/issues/92096", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92096/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92096/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92096/events", "html_url": "https://github.com/rust-lang/rust/issues/92096", "id": 1084014265, "node_id": "I_kwDOAAsO6M5AnL65", "number": 92096, "title": "GAT `Self: 'a` bounds break some `async` blocks with `impl Trait`", "user": {"login": "cairijun", "id": 1297550, "node_id": "MDQ6VXNlcjEyOTc1NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1297550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cairijun", "html_url": "https://github.com/cairijun", "followers_url": "https://api.github.com/users/cairijun/followers", "following_url": "https://api.github.com/users/cairijun/following{/other_user}", "gists_url": "https://api.github.com/users/cairijun/gists{/gist_id}", "starred_url": "https://api.github.com/users/cairijun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cairijun/subscriptions", "organizations_url": "https://api.github.com/users/cairijun/orgs", "repos_url": "https://api.github.com/users/cairijun/repos", "events_url": "https://api.github.com/users/cairijun/events{/privacy}", "received_events_url": "https://api.github.com/users/cairijun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 3307663436, "node_id": "MDU6TGFiZWwzMzA3NjYzNDM2", "url": "https://api.github.com/repos/rust-lang/rust/labels/GATs-triaged", "name": "GATs-triaged", "color": "e88000", "default": false, "description": "Issues using the `generic_associated_types` feature that have been triaged"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-12-19T05:01:48Z", "updated_at": "2022-04-13T22:47:53Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\nAs required by #87479, `Self: 'a` must be explicitly added for GATs with `self` lifetimes. But it seems such a bound breaks `async` blocks with `impl Trait` sometimes.\r\n\r\nGiven a trait with a GAT:\r\n```rust\r\ntrait Client {\r\n    type Connecting<'a>: Future + Send\r\n    where\r\n        Self: 'a;\r\n\r\n    fn connect(&'_ self) -> Self::Connecting<'_>;\r\n}\r\n```\r\n\r\nAwaiting on `Client::connect()` in an `async` block results in a confusing lifeime error on `impl ...`:\r\n\r\n```rust\r\nfn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send  // removing +Send will compile\r\nwhere\r\n    C: Client + Send + Sync,\r\n{\r\n    // c.connect().inspect(|_| println!(\"this compiles\"))\r\n    async move {\r\n        println!(\"this does not compile\");\r\n        c.connect().await\r\n    }\r\n}\r\n```\r\n```\r\nerror[E0311]: the parameter type `C` may not live long enough\r\n  --> src/lib.rs:19:33\r\n   |\r\n19 | fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send  // removing +Send will compile\r\n   |                 -               ^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\r\n   |                 |\r\n   |                 help: consider adding an explicit lifetime bound...: `C: 'a`\r\n```\r\n\r\nIt also breaks a generic `impl` on the trait with `type_alias_impl_trait`:\r\n\r\n```rust\r\nstruct ClientWrapper<T>(T);\r\n\r\nimpl<T> Client for ClientWrapper<T>\r\nwhere\r\n    T: Client + Send + Sync,\r\n{\r\n    type Connecting<'a>\r\n    where\r\n        T: 'a,\r\n    = impl Future + Send; // removing +Send here & in the trait will compile\r\n\r\n    fn connect(&'_ self) -> Self::Connecting<'_> {\r\n        // self.0.connect()  // <- this compiles\r\n        // self.0.connect().inspect(|_| println!(\"this compiles\"))\r\n        async move {\r\n            println!(\"this does not compile\");\r\n            self.0.connect().await\r\n        }\r\n    }\r\n}\r\n```\r\n```\r\nerror[E0311]: the parameter type `T` may not live long enough\r\n  --> src/lib.rs:42:29\r\n   |\r\n33 | impl<T> Client for ClientWrapper<T>\r\n   |      - help: consider adding an explicit lifetime bound...: `T: 'a`\r\n...\r\n42 |     fn connect(&'_ self) -> Self::Connecting<'_> {\r\n   |                             ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\r\n```\r\n\r\nFull code on the playground: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=15714304b9b5efab401efad8c2e84887\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.59.0-nightly (7abab1efb 2021-12-17)\r\nbinary: rustc\r\ncommit-hash: 7abab1efb21617ba6845fa86328dffa16cfcf1dc\r\ncommit-date: 2021-12-17\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.59.0-nightly\r\nLLVM version: 13.0.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92096/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92096/timeline", "performed_via_github_app": null, "state_reason": null}