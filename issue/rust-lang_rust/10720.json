{"url": "https://api.github.com/repos/rust-lang/rust/issues/10720", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/10720/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/10720/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/10720/events", "html_url": "https://github.com/rust-lang/rust/issues/10720", "id": 23489798, "node_id": "MDU6SXNzdWUyMzQ4OTc5OA==", "number": 10720, "title": "RFC: should closure type expr (|A| -> B) support an optional & sigil?", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-11-29T12:28:00Z", "updated_at": "2013-12-02T14:41:25Z", "closed_at": "2013-12-02T14:41:25Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "With new style closure type syntax (`|A| -> B`, or more generally `<'lt>|A|:K -> B`), one no longer includes a sigil.  I believe the motivation for this was that the type `|A| -> B` can only be used with borrowed-pointers, and thus one can unambiguously remove the sigil.\n\nThe problem, which did not occur to me until last night (see concrete example below [1]), is that the sigiled borrowed pointer syntax `&T` is more generally `&'lt T`.\n\nFrom what I can tell from looking at the parser code and from my own experiments, pcwalton's commit f27272d6 that added support for new-style closure types made sure that one can still express explicit lifetimes on new-style closure types, even without the sigil.\n\nWith commit f27272d6, one writes the type like this: `'lt |A| -> B`.\n- (Or more generally, `'lt1 <'lt2>|A|:K -> B`)\n\nHowever, I find it disconcerting to see that `'lt` floating out there like that.  Maybe I just need time to adjust, but I would prefer to keep the `&` for the cases when one needs to express the lifetime for the reference.\n\n---\n\nA coherent and non-ugly way to achieve the above goal, IMO, would be to adopt the following syntax:\n- `|A| -> B` is sugar for `&|A| -> B`.  (This obviously is not a recursive desugaring.)\n- `'lt |A| -> B` becomes illegal\n- If you need a lifetime, you have to write it out like so: `&'lt |A| -> B`\n\nI see the above sugar as having precedent in C function pointers, where\n\n```\nint doub(int x) { return x + x; }\nstruct Dotwice {\n    int (*f)(int);\n    ...\n};\nint main() {\n    Dotwice quad;\n    quad.f = &doub;\n    // is same as quad.f = doub;\n    // but not same as quad.f = &&doub;\n}\n```\n\n---\n\nI have not thought through whether an analogous sugaring should be applied to Rust's lambda expression syntax, or even could be.  The only case where it would arise would be when you would need to feed in an explicit lifetime for the reference you create when you construct a closure, i.e.:\n\n``` rust\n    let dotwice : <'a>|f:&'a |int| -> int| -> (&'a |int| -> int)\n        = |f| { &'a |x| f(f(x)) };\n```\n\nwhich cannot currently be expressed at all AFAICT.  (I think it _can_ make sense in Rust's memory model, though I might not have all the necessary bounds encoded above.)\n\n---\n\n(I might also have missed some of the relevant conversation here.  I.e. perhaps there is some future goal to extend the kind-bounds `K` on the closure type to allow one to put the lifetime constraint for the reference there; right now the only lifetime allowed there is `'static`.)\n\n---\n\n[1] Concrete example of where the above need to write `'lt |A| -> B` arises:\n\n``` rust\nfn main() {\n    let double = |x:int| { x + x };\n    trait Xform<T> { fn x(&self, T) -> T; }\n    struct Dotwice<'a, T> { f: 'a|T| -> T }\n    impl<'a, T> Xform<T> for Dotwice<'a, T> {\n        fn x(&self, t:T) -> T { (self.f)((self.f)(t)) }\n    }\n\n    let quadrupler = Dotwice{ f: double };\n    let eight = quadrupler.x(2);\n\n    println!(\"eight: {}\", eight);\n}\n```\n\ncc @pcwalton @nikomatsakis \n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/10720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/10720/timeline", "performed_via_github_app": null, "state_reason": "completed"}