{"url": "https://api.github.com/repos/rust-lang/rust/issues/101992", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101992/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101992/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101992/events", "html_url": "https://github.com/rust-lang/rust/issues/101992", "id": 1377143892, "node_id": "I_kwDOAAsO6M5SFYxU", "number": 101992, "title": "Apparent duplicated diagnostic note for type mismatch involving type with defaulted type parameter.", "user": {"login": "zachs18", "id": 8355914, "node_id": "MDQ6VXNlcjgzNTU5MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8355914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zachs18", "html_url": "https://github.com/zachs18", "followers_url": "https://api.github.com/users/zachs18/followers", "following_url": "https://api.github.com/users/zachs18/following{/other_user}", "gists_url": "https://api.github.com/users/zachs18/gists{/gist_id}", "starred_url": "https://api.github.com/users/zachs18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zachs18/subscriptions", "organizations_url": "https://api.github.com/users/zachs18/orgs", "repos_url": "https://api.github.com/users/zachs18/repos", "events_url": "https://api.github.com/users/zachs18/events{/privacy}", "received_events_url": "https://api.github.com/users/zachs18/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-09-18T18:44:27Z", "updated_at": "2022-09-18T18:44:27Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=15e3017cac972e1fdb1c0614e56b56a1))\r\n\r\n```rust\r\npub struct DefaultedParam<A = ()>(A);\r\n\r\nfn takes_default_param(_: DefaultedParam) {}\r\nfn calls_default_param_with_ref(x: &DefaultedParam) {\r\n    takes_default_param(x); // (apparent) diagnostic duplication\r\n}\r\nfn returns_default_param(x: DefaultedParam) -> DefaultedParam {\r\n    x; // (apparent) diagnostic duplication\r\n}\r\n\r\npub struct WithParam<A>(A);\r\n\r\nfn takes_with_param(_: WithParam<()>) {}\r\nfn calls_with_param_with_ref(x: &WithParam<()>) {\r\n    takes_with_param(x); // somewhat diagnostic duplication\r\n}\r\nfn returns_with_param(x: WithParam<()>) -> WithParam<()> {\r\n    x; // somewhat diagnostic duplication\r\n}\r\n\r\npub struct NoParam;\r\n\r\nfn takes_no_param(_: NoParam) {}\r\nfn calls_no_param_with_ref(x: &NoParam) {\r\n    takes_no_param(x); // no diagnostic duplication\r\n}\r\nfn returns_no_param(x: NoParam) -> NoParam {\r\n    x; // no diagnostic duplication\r\n}\r\n\r\n```\r\n\r\nThe current output is:\r\n\r\n<details><summary>Current output</summary>\r\n\r\n(`*_no_param` show the ideal diagnostics, `*_default_param` show cases where the diagnostic appears to the user to be completely duplicated, `*_with_param` show cases where the diagnostic appears to the user to be somewhat duplicated)\r\n\r\n```\r\n   Compiling rust-default-type-param-changes-diagnostics v0.1.0 (/home/zachary/Programming/mwe/rust-default-type-param-changes-diagnostics)\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:5:25\r\n  |\r\n5 |     takes_default_param(x); // (apparent) diagnostic duplication\r\n  |     ------------------- ^ expected struct `DefaultedParam`, found `&DefaultedParam`\r\n  |     |\r\n  |     arguments to this function are incorrect\r\n  |\r\n  = note: expected struct `DefaultedParam`\r\n          found reference `&DefaultedParam`\r\nnote: function defined here\r\n --> src/lib.rs:3:4\r\n  |\r\n3 | fn takes_default_param(_: DefaultedParam) {}\r\n  |    ^^^^^^^^^^^^^^^^^^^ -----------------\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:7:48\r\n  |\r\n7 | fn returns_default_param(x: DefaultedParam) -> DefaultedParam {\r\n  |    ---------------------                       ^^^^^^^^^^^^^^ expected struct `DefaultedParam`, found `()`\r\n  |    |\r\n  |    implicitly returns `()` as its body has no tail or `return` expression\r\n8 |     x; // (apparent) diagnostic duplication\r\n  |      - help: remove this semicolon\r\n  |\r\n  = note: expected struct `DefaultedParam`\r\n          found unit type `()`\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:15:22\r\n   |\r\n15 |     takes_with_param(x); // somewhat diagnostic duplication\r\n   |     ---------------- ^ expected struct `WithParam`, found `&WithParam<()>`\r\n   |     |\r\n   |     arguments to this function are incorrect\r\n   |\r\n   = note: expected struct `WithParam<()>`\r\n           found reference `&WithParam<()>`\r\nnote: function defined here\r\n  --> src/lib.rs:13:4\r\n   |\r\n13 | fn takes_with_param(_: WithParam<()>) {}\r\n   |    ^^^^^^^^^^^^^^^^ ----------------\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:17:44\r\n   |\r\n17 | fn returns_with_param(x: WithParam<()>) -> WithParam<()> {\r\n   |    ------------------                      ^^^^^^^^^^^^^ expected struct `WithParam`, found `()`\r\n   |    |\r\n   |    implicitly returns `()` as its body has no tail or `return` expression\r\n18 |     x; // somewhat diagnostic duplication\r\n   |      - help: remove this semicolon\r\n   |\r\n   = note: expected struct `WithParam<()>`\r\n           found unit type `()`\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:25:20\r\n   |\r\n25 |     takes_no_param(x); // no diagnostic duplication\r\n   |     -------------- ^ expected struct `NoParam`, found `&NoParam`\r\n   |     |\r\n   |     arguments to this function are incorrect\r\n   |\r\nnote: function defined here\r\n  --> src/lib.rs:23:4\r\n   |\r\n23 | fn takes_no_param(_: NoParam) {}\r\n   |    ^^^^^^^^^^^^^^ ----------\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:27:36\r\n   |\r\n27 | fn returns_no_param(x: NoParam) -> NoParam {\r\n   |    ----------------                ^^^^^^^ expected struct `NoParam`, found `()`\r\n   |    |\r\n   |    implicitly returns `()` as its body has no tail or `return` expression\r\n28 |     x; // no diagnostic duplication\r\n   |      - help: remove this semicolon\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `rust-default-type-param-changes-diagnostics` due to 6 previous errors\r\n\r\n```\r\n\r\n</details>\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n<details><summary>Ideal output (diff)</summary>\r\n\r\nEssentailly, have the diagnostics for `calls_default_param_with_ref` and `calls_with_param_with_ref` be the same as `calls_no_param_with_ref`, and the diagnostics for `returns_default_param` and `returns_with_param` be the same as `returns_no_param` (with the corresponding types).\r\n\r\n(The diagnostics for `*_with_param` are technically not duplicated, since the note does give more information (the type parameter) that is not given by the error message. I have included them here since they are still *mostly* duplicated when all types involved are known, but it's debatable.)\r\n\r\n```diff\r\n--- err.out\t2022-09-18 13:17:40.476817923 -0500\r\n+++ better_err.out\t2022-09-17 17:49:25.510427120 -0500\r\n@@ -1,85 +1,75 @@\r\n    Compiling rust-default-type-param-changes-diagnostics v0.1.0 (/home/zachary/Programming/mwe/rust-default-type-param-changes-diagnostics)\r\n error[E0308]: mismatched types\r\n  --> src/lib.rs:5:25\r\n   |\r\n 5 |     takes_default_param(x); // (apparent) diagnostic duplication\r\n   |     ------------------- ^ expected struct `DefaultedParam`, found `&DefaultedParam`\r\n   |     |\r\n   |     arguments to this function are incorrect\r\n   |\r\n-  = note: expected struct `DefaultedParam`\r\n-          found reference `&DefaultedParam`\r\n note: function defined here\r\n  --> src/lib.rs:3:4\r\n   |\r\n 3 | fn takes_default_param(_: DefaultedParam) {}\r\n   |    ^^^^^^^^^^^^^^^^^^^ -----------------\r\n \r\n error[E0308]: mismatched types\r\n  --> src/lib.rs:7:48\r\n   |\r\n 7 | fn returns_default_param(x: DefaultedParam) -> DefaultedParam {\r\n   |    ---------------------                       ^^^^^^^^^^^^^^ expected struct `DefaultedParam`, found `()`\r\n   |    |\r\n   |    implicitly returns `()` as its body has no tail or `return` expression\r\n 8 |     x; // (apparent) diagnostic duplication\r\n   |      - help: remove this semicolon\r\n-  |\r\n-  = note: expected struct `DefaultedParam`\r\n-          found unit type `()`\r\n \r\n error[E0308]: mismatched types\r\n   --> src/lib.rs:15:22\r\n    |\r\n 15 |     takes_with_param(x); // somewhat diagnostic duplication\r\n-   |     ---------------- ^ expected struct `WithParam`, found `&WithParam<()>`\r\n+   |     ---------------- ^ expected struct `WithParam<()>`, found `&WithParam<()>`\r\n    |     |\r\n    |     arguments to this function are incorrect\r\n    |\r\n-   = note: expected struct `WithParam<()>`\r\n-           found reference `&WithParam<()>`\r\n note: function defined here\r\n   --> src/lib.rs:13:4\r\n    |\r\n 13 | fn takes_with_param(_: WithParam<()>) {}\r\n    |    ^^^^^^^^^^^^^^^^ ----------------\r\n \r\n error[E0308]: mismatched types\r\n   --> src/lib.rs:17:44\r\n    |\r\n 17 | fn returns_with_param(x: WithParam<()>) -> WithParam<()> {\r\n-   |    ------------------                      ^^^^^^^^^^^^^ expected struct `WithParam`, found `()`\r\n+   |    ------------------                      ^^^^^^^^^^^^^ expected struct `WithParam<()>`, found `()`\r\n    |    |\r\n    |    implicitly returns `()` as its body has no tail or `return` expression\r\n 18 |     x; // somewhat diagnostic duplication\r\n    |      - help: remove this semicolon\r\n-   |\r\n-   = note: expected struct `WithParam<()>`\r\n-           found unit type `()`\r\n \r\n error[E0308]: mismatched types\r\n   --> src/lib.rs:25:20\r\n    |\r\n 25 |     takes_no_param(x); // no diagnostic duplication\r\n    |     -------------- ^ expected struct `NoParam`, found `&NoParam`\r\n    |     |\r\n    |     arguments to this function are incorrect\r\n    |\r\n note: function defined here\r\n   --> src/lib.rs:23:4\r\n    |\r\n 23 | fn takes_no_param(_: NoParam) {}\r\n    |    ^^^^^^^^^^^^^^ ----------\r\n \r\n error[E0308]: mismatched types\r\n   --> src/lib.rs:27:36\r\n    |\r\n 27 | fn returns_no_param(x: NoParam) -> NoParam {\r\n    |    ----------------                ^^^^^^^ expected struct `NoParam`, found `()`\r\n    |    |\r\n    |    implicitly returns `()` as its body has no tail or `return` expression\r\n 28 |     x; // no diagnostic duplication\r\n    |      - help: remove this semicolon\r\n \r\n For more information about this error, try `rustc --explain E0308`.\r\n error: could not compile `rust-default-type-param-changes-diagnostics` due to 6 previous errors\r\n\r\n```\r\n\r\n</details>\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\nExplanation: When there is a type mismatch where the error message already completely describes the two types, no note is printed (see the `NoParam` functions above)[^1]. When a type mismatch occurs where the error message does *not* already completely describe the two types, a note is printed with the two complete types (see the `WithParam` functions above).\r\n\r\nIn the case where the only type parameter of a type has a default, and that default is used, this causes the note that is printed to contain the \"same\" types as the error message[^2].\r\n\r\n(The diagnostics for `*_with_param` are technically not duplicated, since the note does give more information (the type parameter) that is not given by the error message. I have included them here since they are still *mostly* duplicated when all types involved are known, but it's debatable.)\r\n\r\n----\r\n\r\nI found this difference when adding a defaulted allocator type parameter to `String` in #101551, which added these notes to the outputs of a lot of UI tests.\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n\r\nThe results are the same in all editions, and on stable and nightly (and 1.41.0, but *not* 1.40.0, which prints the duplicate note even for `NoParam` [^1]).\r\n\r\n<details><summary>Rust version</summary>\r\n\r\nStable:\r\n```\r\nrustc 1.63.0 (4b91a6ea7 2022-08-08)\r\nbinary: rustc\r\ncommit-hash: 4b91a6ea7258a947e59c6522cd5898e7c0a6a88f\r\ncommit-date: 2022-08-08\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.63.0\r\nLLVM version: 14.0.5\r\n```\r\nNightly:\r\n```\r\nrustc 1.65.0-nightly (750bd1a7f 2022-09-14)\r\nbinary: rustc\r\ncommit-hash: 750bd1a7ff3e010611b97ee75d30b7cbf5f3a03c\r\ncommit-date: 2022-09-14\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.65.0-nightly\r\nLLVM version: 15.0.0\r\n```\r\n</details>\r\n\r\n[^1]: Note that this was introduced 1.41.0: ([godbolt.org link](https://rust.godbolt.org/z/voKhs56Gj)). Previously, the note with duplicate information appears to have always been printed.\r\n[^2]: I say \"same\" because what is printed is the same, but I think the error messages for `*_default_param` are really saying `expected DefaultParam<_>, found ...`, and the notes are saying `expected DefaultParam<()>, found ...`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101992/timeline", "performed_via_github_app": null, "state_reason": null}