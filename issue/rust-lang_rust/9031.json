{"url": "https://api.github.com/repos/rust-lang/rust/issues/9031", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/9031/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/9031/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/9031/events", "html_url": "https://github.com/rust-lang/rust/issues/9031", "id": 19138213, "node_id": "MDU6SXNzdWUxOTEzODIxMw==", "number": 9031, "title": "Syntax extension to generate unique identifiers", "user": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-09-07T04:47:23Z", "updated_at": "2013-09-07T06:10:41Z", "closed_at": "2013-09-07T06:10:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "When writing a macro, it's common to use a couple of temporary variables, for example `m` in https://gist.github.com/luqmana/6219956. However, if you do something like\n\n``` rust\nlet m = 10;\nlet h = hashmap! {\n    \"foo\" => m\n};\n```\n\nThe macro's internal `m` ends up being inserted, creating a type of infinite size. You can try to get around this issue by changing `m` to something like `__hashmap_temp_var_`, but you can still run into issues if, for example, you have nested invocations of a macro or if someone decides to be a jerk and define a variable called `__hashmap_temp_var_`.\n\nIt'd be nice to have a syntax extension that will generate identifiers that are guaranteed to be unique. I'd imagine it'd be used something like\n\n``` rust\nmacro_rules! my_macro (\n    ($a:expr) => (\n        {\n            let unique_ident!(m) = HashMap::new();\n            let unique_ident!(v) = ~[];\n            unique_ident!(v).push($a);\n            unique_ident!(m).insert(\"foo\", $a);\n            (unique_ident!(v), unique_ident!(m))\n        }\n    )\n)\n```\n\nThe implementation would be interesting, since you'd have to make sure that `unique_ident!(m)` expands to the same thing within a given macro expansion, but to a different thing within any nested expansions. You'd also want to make sure it doesn't shadow any other variables in scope, maybe by using a name that would be illegal to manually define.\n", "closed_by": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/9031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/9031/timeline", "performed_via_github_app": null, "state_reason": "completed"}