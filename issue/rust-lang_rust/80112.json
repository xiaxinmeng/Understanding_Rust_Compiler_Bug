{"url": "https://api.github.com/repos/rust-lang/rust/issues/80112", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80112/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80112/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80112/events", "html_url": "https://github.com/rust-lang/rust/issues/80112", "id": 769789813, "node_id": "MDU6SXNzdWU3Njk3ODk4MTM=", "number": 80112, "title": "Suggest adding a comma when match arm expression is followed by a pattern", "user": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-12-17T09:52:30Z", "updated_at": "2022-06-08T10:24:13Z", "closed_at": "2022-06-08T10:24:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\nenum Side { Left, Right }\r\n\r\nfn match_side(s: Side) {\r\n    match s {\r\n        Side::Left => ()\r\n        Side::Right => ()\r\n    }\r\n}\r\n```\r\n\r\nCurrently shows:\r\n\r\n```\r\nerror: expected one of `,`, `.`, `?`, `}`, or an operator, found `Side`\r\n --> src/lib.rs:6:9\r\n  |\r\n5 |         Side::Left => ()\r\n  |                    --   - expected one of `,`, `.`, `?`, `}`, or an operator\r\n  |                    |\r\n  |                    while parsing the `match` arm starting here\r\n6 |         Side::Right => ()\r\n  |         ^^^^ unexpected token\r\n```\r\n\r\nIt should be expanded with a help message to:\r\n\r\n```\r\n5 |          Side::Left => ()\r\n |                           ^ help: add , here\r\n```\r\n\r\nIt should probably only emit this diagnostic if, by rechecking the match with the `,` there, it can find a pattern followed by `=>`.\r\n\r\n---\r\n\r\nFor a more advanced case, consider this more convoluted example:\r\n\r\n```rust\r\nenum Side { Left(()), Right(()) }\r\n\r\nfn match_side(s: Side) {\r\n    match (s,) {\r\n        (Side::Left(_),) => ()\r\n        (Side::Right(_),) => ()\r\n    }\r\n}\r\n```\r\n\r\nIt currently emits:\r\n\r\n```\r\nerror: expected expression, found reserved identifier `_`\r\n --> src/lib.rs:6:22\r\n  |\r\n6 |         (Side::Right(_),) => ()\r\n  |                      ^ expected expression\r\n\r\nerror: expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\r\n --> src/lib.rs:6:27\r\n  |\r\n5 |         (Side::Left(_),) => ()\r\n  |                          -- while parsing the `match` arm starting here\r\n6 |         (Side::Right(_),) => ()\r\n  |                           ^^ expected one of `,`, `.`, `?`, `}`, or an operator\r\n```\r\n\r\nIn this case, the pattern sort of looks like a function call and not an immediate incorrect token for an expression. The vast majority of cases can probably be caught by checking at the newline if what's after is a pattern. But there might also be a simple solution based on the pattern and expression grammars. Of course, it almost always triggers the `found =>`, so that could be used as a starting point.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80112/timeline", "performed_via_github_app": null, "state_reason": "completed"}