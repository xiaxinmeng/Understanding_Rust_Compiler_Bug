{"url": "https://api.github.com/repos/rust-lang/rust/issues/9678", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/9678/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/9678/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/9678/events", "html_url": "https://github.com/rust-lang/rust/issues/9678", "id": 20389906, "node_id": "MDU6SXNzdWUyMDM4OTkwNg==", "number": 9678, "title": "Can `pub use` \"reexport\" priv items from the current module?", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-10-02T12:07:17Z", "updated_at": "2014-04-15T20:45:44Z", "closed_at": "2014-04-15T20:45:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "So, out of personal curiosity, I tried to recreate the effect of the old export lists via `pub use`, since the Rust manual claims that `pub use` serves to re-export a name.  (And the manual says that it can redirect \"even a definition with a private canonical path\")\n\nBut apparently one cannot use `pub use` in this manner.\n\nIs that intentional?  If so, I think the manual's language on this point could be improved.\n\n(Also, when one attempts this in the outermost scope of the source file, the error message uses `???` for the module name.)\n\nSample source code:\n\n``` rust\n#[cfg(outer_version1)]\npub use sum = self::sigma;\n\npub use t = m::n::t;\n\nfn sigma(x:int, y:int) -> int { x + y }\n\nmod m {\n    pub use self::n::t;\n    mod n {\n        pub type t = int;\n    }\n\n    pub fn f(x: n::t) -> n::t { x + 1 }\n}\n\nmod o {\n    #[cfg(not(o_workaround))]\n    pub use s = self::tau;\n    #[cfg(not(o_workaround))]\n    pub use f = self::g;\n\n    #[cfg(o_workaround)]\n    pub type s = tau;\n\n    #[cfg(o_workaround)]\n    pub fn f(x: tau) -> tau { g(x) }\n\n    type tau = int;\n    fn g(x: tau) -> tau { x + 1 }\n}\n\nfn main() {\n    let a : m::t = 4;\n    let _y = m::f(a);\n\n    let b : o::s = 5;\n    let _z = o::f(b);\n}\n```\n\nOut of the box run (illustrates reasonable error messages from `o`):\n\n```\n% rustc /tmp/pu.rs\n/tmp/pu.rs:19:12: 19:26 error: unresolved import: found `tau` in `o` but it is private\n/tmp/pu.rs:19     pub use s = self::tau;\n                          ^~~~~~~~~~~~~~\n/tmp/pu.rs:19:12: 19:26 error: failed to resolve import `self::tau`\n/tmp/pu.rs:19     pub use s = self::tau;\n                          ^~~~~~~~~~~~~~\n/tmp/pu.rs:21:12: 21:24 error: unresolved import: found `g` in `o` but it is private\n/tmp/pu.rs:21     pub use f = self::g;\n                          ^~~~~~~~~~~~\n/tmp/pu.rs:21:12: 21:24 error: failed to resolve import `self::g`\n/tmp/pu.rs:21     pub use f = self::g;\n                          ^~~~~~~~~~~~\nerror: aborting due to 4 previous errors\n```\n\nRun focusing on the outermost error (illustrating poor error message):\n\n```\n% rustc --cfg outer_version1 --cfg o_workaround /tmp/pu.rs\n/tmp/pu.rs:2:8: 2:26 error: unresolved import: found `sigma` in `???` but it is private\n/tmp/pu.rs:2 pub use sum = self::sigma;\n                     ^~~~~~~~~~~~~~~~~~\n/tmp/pu.rs:2:8: 2:26 error: failed to resolve import `self::sigma`\n/tmp/pu.rs:2 pub use sum = self::sigma;\n                     ^~~~~~~~~~~~~~~~~~\nerror: aborting due to 2 previous errors\n```\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/9678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/9678/timeline", "performed_via_github_app": null, "state_reason": "completed"}