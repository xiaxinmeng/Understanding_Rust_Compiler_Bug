{"url": "https://api.github.com/repos/rust-lang/rust/issues/86989", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86989/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86989/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86989/events", "html_url": "https://github.com/rust-lang/rust/issues/86989", "id": 940300078, "node_id": "MDU6SXNzdWU5NDAzMDAwNzg=", "number": 86989, "title": "Inconsistent lifetime rules with parameter patterns", "user": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1976249039, "node_id": "MDU6TGFiZWwxOTc2MjQ5MDM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-patterns", "name": "A-patterns", "color": "f7e101", "default": false, "description": "Relating to patterns and pattern matching"}, {"id": 2352122097, "node_id": "MDU6TGFiZWwyMzUyMTIyMDk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-discussion", "name": "C-discussion", "color": "f5f1fd", "default": false, "description": "Category: Discussion or questions that doesn't represent real issues."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-07-08T23:52:08Z", "updated_at": "2021-07-19T19:03:18Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Here's an example derived from https://github.com/rayon-rs/rayon/issues/866:\r\n[playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=6bdb2536f5a94b3c8afd89d75a597b7e)\r\n\r\n```rust\r\nfn main() {\r\n    let mut v = vec![vec![1, 2, 3], vec![4, 5, 6]];\r\n\r\n    v.iter_mut().for_each(|mut x| {\r\n        let mut c = x.clone();\r\n        x = &mut c; // borrowed value does not live long enough\r\n        x[0] = 0;\r\n    });\r\n\r\n    v.iter_mut().enumerate().for_each(|mut x| {\r\n        let mut c = x.1.clone();\r\n        x.1 = &mut c; // borrowed value does not live long enough\r\n        x.1[0] = 0;\r\n    });\r\n\r\n    v.iter_mut().enumerate().for_each(|(_i, mut x)| {\r\n        let mut c = x.clone();\r\n        x = &mut c; // this works!\r\n        x[0] = 0;\r\n    });\r\n}\r\n```\r\n\r\nThe first two loops fail, because `x` has an \"external\" lifetime that `c` can't possibly satisfy. However, with the third pattern, `x` gets a local lifetime which _can_ be assigned from `c`. @nikomatsakis explained it this way:\r\n\r\n> I think this has to do with the details of how the MIR desugaring works. I'm not sure it's _intentional_, but it's interesting... when you have `(u, mut x)` as the parameter pattern, the closure is effectively converted into this:\r\n> \r\n> ```rust\r\n> |tmp| {\r\n>      let (u, mut x) = tmp;\r\n> }\r\n> ```\r\n> \r\n> and so `x` is a local variable inside the closure. Therefore, it's lifetime is independent from `tmp` and it can be given a lifetime that includes the lifetime of `c`. The _actual argument_ (`tmp`) has to have a lifetime that is \"external\" from the closure body (something the caller could reference).\r\n> \r\n> If you don't have a pattern (or, rather, you have a trivial pattern like `x`) you get a hard error either way.\r\n\r\n> This feels unfortunate, but I'm trying to decide what fix I would want to apply. :)\r\n\r\nIn the original issue, @evergreen-trading-systems was surprised not to get an error in the destructured case, but I don't think that's something we could (or should) go back on now. It would be more interesting if even the trivial pattern could be made to work with a reduced lifetime.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86989/timeline", "performed_via_github_app": null, "state_reason": null}