{"url": "https://api.github.com/repos/rust-lang/rust/issues/37902", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37902/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37902/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37902/events", "html_url": "https://github.com/rust-lang/rust/issues/37902", "id": 190582014, "node_id": "MDU6SXNzdWUxOTA1ODIwMTQ=", "number": 37902, "title": "time.rs should consider using CLOCK_MONOTONIC_RAW instead of CLOCK_MONOTONIC on Linux", "user": {"login": "marcust", "id": 95655, "node_id": "MDQ6VXNlcjk1NjU1", "avatar_url": "https://avatars.githubusercontent.com/u/95655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcust", "html_url": "https://github.com/marcust", "followers_url": "https://api.github.com/users/marcust/followers", "following_url": "https://api.github.com/users/marcust/following{/other_user}", "gists_url": "https://api.github.com/users/marcust/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcust/subscriptions", "organizations_url": "https://api.github.com/users/marcust/orgs", "repos_url": "https://api.github.com/users/marcust/repos", "events_url": "https://api.github.com/users/marcust/events{/privacy}", "received_events_url": "https://api.github.com/users/marcust/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-20T20:39:54Z", "updated_at": "2019-08-05T09:00:56Z", "closed_at": "2017-05-16T12:55:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have reproducible compiler crashes on arm64:\r\n```\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nthread 'rustc' panicked at 'other was less than the current instant', /buildslave/rust-buildbot/slave/beta-dist-rustc-cross-host-linux/build/src/libstd/sys/unix/time.rs:276\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\n```\r\n\r\nI'm not really sure where that behavior originates but I suspect the rather old Kernel in combination with the (obscure) hardware I'm running. https://github.com/longsleep/linux-pine64/issues/44 has some more details, basically I see CLOCK_MONOTONIC jumping backwards from time to time. Looking somehow further I see other people used to have the same issue (http://stackoverflow.com/questions/3657289/linux-clock-gettimeclock-monotonic-strange-non-monotonic-behavior) \r\n\r\nMy Linux Kernel docs say:\r\n```\r\n       CLOCK_MONOTONIC\r\n              Clock that cannot be set and represents monotonic time since some unspecified starting point.  This clock is not affected by\r\n              discontinuous jumps in the system time (e.g., if the system administrator manually changes the clock), but  is  affected  by\r\n              the incremental adjustments performed by adjtime(3) and NTP.\r\n\r\n       CLOCK_MONOTONIC_RAW (since Linux 2.6.28; Linux-specific)\r\n              Similar  to  CLOCK_MONOTONIC, but provides access to a raw hardware-based time that is not subject to NTP adjustments or the\r\n              incremental adjustments performed by adjtime(3).\r\n``` \r\n\r\nI see this behavior even without OpenNTPd running (so I still suspect that there is a Kernel/HW-Issue), but it might be better to use the Linux specific RAW version of the monotonic clock in order to get strict monotonic increasing values. \r\n\r\nI just saw #37137 but as this is on real hardware that might be more relevant. Even when I'm not running anything that obviously does clock adjustments I see this behavior, RAW seems to be very consistently monotonically increasing. As rust is the only thing that I saw complaining so far you maybe want to consider changing this call. \r\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37902/timeline", "performed_via_github_app": null, "state_reason": "completed"}