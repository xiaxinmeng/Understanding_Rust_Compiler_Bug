{"url": "https://api.github.com/repos/rust-lang/rust/issues/53087", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53087/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53087/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53087/events", "html_url": "https://github.com/rust-lang/rust/issues/53087", "id": 347688954, "node_id": "MDU6SXNzdWUzNDc2ODg5NTQ=", "number": 53087, "title": "ICE with const transmute and existential type", "user": {"login": "DutchGhost", "id": 25501014, "node_id": "MDQ6VXNlcjI1NTAxMDE0", "avatar_url": "https://avatars.githubusercontent.com/u/25501014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DutchGhost", "html_url": "https://github.com/DutchGhost", "followers_url": "https://api.github.com/users/DutchGhost/followers", "following_url": "https://api.github.com/users/DutchGhost/following{/other_user}", "gists_url": "https://api.github.com/users/DutchGhost/gists{/gist_id}", "starred_url": "https://api.github.com/users/DutchGhost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DutchGhost/subscriptions", "organizations_url": "https://api.github.com/users/DutchGhost/orgs", "repos_url": "https://api.github.com/users/DutchGhost/repos", "events_url": "https://api.github.com/users/DutchGhost/events{/privacy}", "received_events_url": "https://api.github.com/users/DutchGhost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-05T11:05:38Z", "updated_at": "2018-08-08T22:21:58Z", "closed_at": "2018-08-08T22:21:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Not sure if it's really something that is ever gonna happen in real code, but the following ICE's:\r\n\r\n```Rust\r\n#![feature(existential_type)]\r\n#![feature(const_fn)]\r\n#![feature(untagged_unions)]\r\n\r\nconst fn transmute<T, U>(t: T) -> U {\r\n    union Transform<TT, UU> {\r\n        t: TT,\r\n        u: UU,\r\n    }\r\n    \r\n    unsafe { Transform { t }.u }\r\n}\r\n\r\n\r\nexistential type Foo: Fn();\r\nconst foo: Foo = transmute(|| {});\r\n\r\nfn bar() -> Foo { || {} }\r\n\r\nfn main() {\r\n    foo();\r\n}\r\n```\r\n\r\n<details>\r\n<summary>Backtrace:</summary>\r\n\r\n```\r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `Foo`,\r\n right: `[closure@src/main.rs:18:19: 18:24]`', librustc_mir/transform/const_prop.rs:338:17\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::print\r\n             at libstd/sys_common/backtrace.rs:71\r\n             at libstd/sys_common/backtrace.rs:59\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at libstd/panicking.rs:211\r\n   3: std::panicking::default_hook\r\n             at libstd/panicking.rs:227\r\n   4: rustc::util::common::panic_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n             at libstd/panicking.rs:479\r\n   6: std::panicking::continue_panic_fmt\r\n             at libstd/panicking.rs:390\r\n   7: std::panicking::begin_panic_fmt\r\n             at libstd/panicking.rs:345\r\n   8: <rustc_mir::transform::const_prop::ConstPropagator<'b, 'a, 'tcx> as rustc::mir::visit::Visitor<'tcx>>::visit_statement\r\n   9: <rustc_mir::transform::const_prop::ConstProp as rustc_mir::transform::MirPass>::run_pass\r\n  10: rustc_mir::transform::optimized_mir::{{closure}}\r\n  11: rustc_mir::transform::optimized_mir\r\n  12: rustc::ty::query::__query_compute::optimized_mir\r\n  13: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::optimized_mir<'tcx>>::compute\r\n  14: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  15: rustc::ty::context::tls::with_related_context\r\n  16: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  17: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_get_query\r\n  18: rustc::ty::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::instance_mir\r\n  19: rustc_mir::monomorphize::collector::collect_items_rec\r\n  20: rustc_mir::monomorphize::collector::collect_crate_mono_items::{{closure}}\r\n  21: rustc::util::common::time\r\n  22: rustc_mir::monomorphize::collector::collect_crate_mono_items\r\n  23: rustc::util::common::time\r\n  24: rustc_codegen_llvm::base::collect_and_partition_mono_items\r\n  25: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::collect_and_partition_mono_items<'tcx>>::compute\r\n  26: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  27: rustc::ty::context::tls::with_related_context\r\n  28: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  29: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query\r\n  30: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_utils::codegen_backend::CodegenBackend>::codegen_crate\r\n  31: rustc::util::common::time\r\n  32: rustc_driver::driver::phase_4_codegen\r\n  33: rustc_driver::driver::compile_input::{{closure}}\r\n  34: rustc::ty::context::tls::enter_context\r\n  35: <std::thread::local::LocalKey<T>>::with\r\n  36: rustc::ty::context::TyCtxt::create_and_enter\r\n  37: rustc_driver::driver::compile_input\r\n  38: rustc_driver::run_compiler_with_pool\r\n  39: <scoped_tls::ScopedKey<T>>::set\r\n  40: syntax::with_globals\r\n  41: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  42: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:105\r\n  43: rustc_driver::run\r\n  44: rustc_driver::main\r\n  45: std::rt::lang_start::{{closure}}\r\n  46: std::panicking::try::do_call\r\n             at libstd/rt.rs:59\r\n             at libstd/panicking.rs:310\r\n  47: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:105\r\n  48: std::rt::lang_start_internal\r\n             at libstd/panicking.rs:289\r\n             at libstd/panic.rs:392\r\n             at libstd/rt.rs:58\r\n  49: main\r\n  50: __libc_start_main\r\n  51: <unknown>\r\nquery stack during panic:\r\n#0 [optimized_mir] processing `main`\r\n#1 [collect_and_partition_mono_items] collect_and_partition_mono_items\r\nend of query stack\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.30.0-nightly (3edb355b7 2018-08-03) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C codegen-units=1 -C debuginfo=2 --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nerror: Could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n</details>", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53087/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53087/timeline", "performed_via_github_app": null, "state_reason": "completed"}