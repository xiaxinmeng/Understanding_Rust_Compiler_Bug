{"url": "https://api.github.com/repos/rust-lang/rust/issues/40036", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/40036/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/40036/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/40036/events", "html_url": "https://github.com/rust-lang/rust/issues/40036", "id": 209478054, "node_id": "MDU6SXNzdWUyMDk0NzgwNTQ=", "number": 40036, "title": "Track the \"static\"-ness of slots in MIR and detect drops in constant initializers.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 43009118, "node_id": "MDU6TGFiZWw0MzAwOTExOA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-destructors", "name": "A-destructors", "color": "f7e101", "default": false, "description": "Area: destructors (Drop, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-02-22T14:57:04Z", "updated_at": "2019-12-03T17:27:55Z", "closed_at": "2019-12-03T17:27:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now we distinguish between \"constant initializer\" (`static`, `const`, promoted fragments) and \"runtime\" MIR, in that all locals in the former are `'static` and drops on them are ignored.\r\nWhile this seems to work fine for the moment, it can't model, e.g. (mutable) local variables in \"constant initializers\" and may not be backwards-compatible with a model that can, if we stabilize any extensions.\r\n\r\n### Problematic example\r\nIf we accept rust-lang/rfcs#1817, the current implementation would allow both of these:\r\n```rust\r\nconst FOO: i32 = (HasDrop {...}, 0).1;\r\nconst BAR: &'static i32 = &(HasDrop {...}, 0).1;\r\n```\r\nIf we go by the rest of the language, `FOO` should drop the tuple after copying out its second field, whereas `BAR` should borrow the tuple forever, and happen to be pointing at the second tuple (resulting in no drop).\r\nThis is important even if we can't run destructors at compile-time, in order to error for `FOO` but not `BAR`.\r\n\r\nSo with the rules inferred above, we could desugar the two constants as follows:\r\n```rust\r\nconst FOO: i32 = { let tmp = (HasDrop {...}, 0); tmp.1 /* drop(tmp) */ };\r\nstatic TMP: (HasDrop, i32) = (HasDrop {...}, 0);\r\nconst BAR: &'static i32 = &TMP.1;\r\n```\r\n\r\nThe distinction between the `tmp` local slot and the `TMP` static slot, and the lack of a drop for the latter, is what MIR is missing currently.\r\n\r\n### Proposed solution\r\n@nikomatsakis and I have mulled this over, and the resulting plan is roughly as follows:\r\n* use the existing rvalue scope rules that give the two borrowed temporaries in `&f(&g())` different scopes (with the inner one living only for the duration of the outer call), with the outermost scope of a constant initializer being special: no destructors run, and its lifetime is `'static`\r\n  * this breaks some (unstable) `const fn` uses, e.g. `id(&0)` (recovered through rvalue promotion)\r\n* for `'static` scopes, MIR building would use a different kind of \"slot\" and not emit a drop\r\n  * we might want to repurpose&rename `Local` to `Slot`\r\n* MIR rvalue promotion would create such `'static` \"slots\" for all borrows, e.g.:\r\n```rust\r\n// promoted MIR fragment for `&[&42]`\r\nstatic0 = 42;\r\ntmp0 = &static0;\r\nstatic1 = [tmp0];\r\nreturn = &static1;\r\n```\r\n* MIR borrowck doesn't require any special treatment, and it should be able to detect malformed MIR\r\n  * e.g. a drop of a `'static` slot that was borrowed would overlap with the `'static` borrow\r\n* in miri, only allow pointers into `'static` slots to \"escape\" the constant initializer evaluation\r\n  * eventually we could also allow pointers into allocations that were \"leaked\", e.g. because their owner was placed in a `'static` slot: `const S: &'static str = &X.to_string();`", "closed_by": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/40036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/40036/timeline", "performed_via_github_app": null, "state_reason": "completed"}