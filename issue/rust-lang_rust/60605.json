{"url": "https://api.github.com/repos/rust-lang/rust/issues/60605", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60605/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60605/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60605/events", "html_url": "https://github.com/rust-lang/rust/issues/60605", "id": 441238331, "node_id": "MDU6SXNzdWU0NDEyMzgzMzE=", "number": 60605, "title": "CP15 barrier instructions should be emitted before the exclusives loops (arm)", "user": {"login": "zrzka", "id": 1084172, "node_id": "MDQ6VXNlcjEwODQxNzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1084172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zrzka", "html_url": "https://github.com/zrzka", "followers_url": "https://api.github.com/users/zrzka/followers", "following_url": "https://api.github.com/users/zrzka/following{/other_user}", "gists_url": "https://api.github.com/users/zrzka/gists{/gist_id}", "starred_url": "https://api.github.com/users/zrzka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zrzka/subscriptions", "organizations_url": "https://api.github.com/users/zrzka/orgs", "repos_url": "https://api.github.com/users/zrzka/repos", "events_url": "https://api.github.com/users/zrzka/events{/privacy}", "received_events_url": "https://api.github.com/users/zrzka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 55301954, "node_id": "MDU6TGFiZWw1NTMwMTk1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-Arm", "name": "O-Arm", "color": "6e6ec0", "default": false, "description": "Target: 32-bit Arm processors (armv6, armv7, thumb...), including 64-bit Arm in AArch32 state"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4434017660, "node_id": "LA_kwDOAAsO6M8AAAABCEm9fA", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-atomic", "name": "A-atomic", "color": "f7e101", "default": false, "description": "Area: atomics, barriers, and sync primitives"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-05-07T13:39:01Z", "updated_at": "2023-04-19T20:28:15Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "## Symptoms\r\n\r\n* Rustup hangs (unable to install Rust)\r\n  * Tracked down to [parking_lot](https://github.com/Amanieu/parking_lot/issues/130) issue\r\n* Not just Rust related, [Swift has this problem as well](https://forums.balena.io/t/cloud-build-fails-but-local-device-build-works-on-raspberry-pi-zero/4994)\r\n  * -> LLVM issue\r\n\r\n## Environment\r\n\r\n* Linux kernel with`CP15_BARRIER_EMULATION=y`\r\n* `abi.cp15_barrier` set to `1` (emulate)\r\n* `arm-unknown-linux-gnueabihf` toolchain\r\n\r\n## CP15 barrier instructions\r\n\r\n* They're deprecated since `armv7`\r\n* Linux kernel can [emulate or HW exec them](https://www.kernel.org/doc/Documentation/arm64/legacy_instructions.txt)\r\n  * `abi.cp15_barrier` is set to `2` (HW exec) -> there's no issue\r\n    * The CPU must support them\r\n    * ARMv8 in our case, which still supports them\r\n  * `abi.cp15_barrier` is set to `1` (emulate) -> there's this issue\r\n\r\n## Issue description\r\n\r\n`parking_lot` author:\r\n\r\n> This seems to be closer to an LLVM bug than a parking_lot bug. The source of the problem is the CP15 emulation in the kernel. Essentially the `mcr p15, #0x0, r12, c7, c10, #0x5` is trapping to the kernel every time, which invalidates the exclusive monitor between the `ldrex` and `strex` instructions. This results in the `strex` never succeeding and looping indefinitely.\r\n\r\n<img width=\"1184\" alt=\"instructions-loop\" src=\"https://user-images.githubusercontent.com/1084172/57302722-1e997400-70dc-11e9-968c-7f1e8dc0595b.png\">\r\n\r\nARM engineer (Will Deacon) response on this:\r\n\r\n> Hi again, Robert,\r\n> \r\n> Just a quick update on this:\r\n>\r\n>  1. CP15 barriers remain deprecated in the Armv8 architecture, and so\r\n>    may be removed entirely from future CPUs.\r\n>\r\n> 2. Because of (1), the kernel defaults to trap+emulate, so that it can\r\n>    warn about the use of these instructions. I think this is the right\r\n>    thing to do because, once the instructions have been removed, we\r\n>    will have no choice but to trap+emulate (this happened for the SWP\r\n>    instruction already). This trapping will prevent your exclusives loop\r\n>    from ever succeeding.\r\n>\r\n> 3. The right place to address this issue is in LLVM, where atomic\r\n>    read-modify-write operations with conditional release semantics (i.e.\r\n>    release on success) should actually emit the CP15 barrier before the\r\n>    exclusives loop. Assuming that contention is rare (which it kind of\r\n>    needs to be for performant compare-and-swap anyway), I don't see this\r\n>    having a meaningful impact on performance.\r\n>\r\n> I've reached out to one of our upstream LLVM developers, and I'll be talking\r\n> with him face-to-face next week about getting this fixed.\r\n>\r\n> Will\r\n\r\n## Solution\r\n\r\nWill's third point:\r\n\r\n> Atomic read-modify-write operations with conditional release semantics (i.e.\r\n> release on success) should actually emit the CP15 barrier before the\r\n> exclusives loop. Assuming that contention is rare (which it kind of\r\n> needs to be for performant compare-and-swap anyway), I don't see this\r\n> having a meaningful impact on performance.\r\n\r\nAnd:\r\n\r\n> I've reached out to one of our upstream LLVM developers, and I'll be talking\r\n> with him face-to-face next week about getting this fixed.\r\n\r\nI asked for the LLVM bug # to track it, but still no response.\r\n\r\n## Way forward\r\n\r\n* Fix it on the Rust LLVM fork\r\n* Wait for the LLVM to have this fixed and wait till Rust's fork synces\r\n\r\nSecond way can prolong fix by weeks, months, ...? Not sure how fast is the LLVM itself developed & how fast is the Rust's fork syncing. This is the main reason I did report it here as well.\r\n\r\n## No fix\r\n\r\nPeople aren't / won't be able to use Rust on Linux with `CP15_BARRIER_EMULATION=y` & `abi.cp15_barrier=1` (emulation, default value) & `arm-unknown-linux-gnueabihf` toolchain.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60605/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60605/timeline", "performed_via_github_app": null, "state_reason": null}