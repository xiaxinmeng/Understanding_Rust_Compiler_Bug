{"url": "https://api.github.com/repos/rust-lang/rust/issues/49584", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49584/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49584/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49584/events", "html_url": "https://github.com/rust-lang/rust/issues/49584", "id": 310454239, "node_id": "MDU6SXNzdWUzMTA0NTQyMzk=", "number": 49584, "title": "Ship more LLVM tools with the Rust toolchain", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 880020421, "node_id": "MDU6TGFiZWw4ODAwMjA0MjE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-embedded", "name": "WG-embedded", "color": "c2e0c6", "default": false, "description": "Of interest to the embedded Working Group"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2018-04-02T10:44:00Z", "updated_at": "2018-06-29T21:21:01Z", "closed_at": "2018-06-29T21:21:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### Summary\r\n\r\nShip llvm tools like `llvm-nm` and `llvm-size` with the Rust toolchain.\r\n\r\n### Rationale\r\n\r\nBinary size and performance are critical to embedded development due to the resource constrained\r\nnature of the systems embedded applications run in. Thus it's very important to have tools to\r\ninspect the binaries produced by the compiler.\r\n\r\nOne could use GNU binutils for this task but that requires installing one set of tools per target\r\narchitecture (`arm-none-eabi-*` for ARM Cortex-M, `avr-*` for AVR, etc.); and on some platforms\r\n(e.g. Windows) it can be hard to find a set of pre-compiled tools, specially for not yet widespread\r\narchitectures (e.g. RISCV).\r\n\r\nThe alternative to GNU binutils are LLVM tools. Thanks to LLVM being multi-architecture a single\r\nset of LLVM binutils supports several architectures (ARM Cortex-M, AVR, MSP430, RISCV, etc); in\r\nfact, LLVM tools support *all* the architectures that `rustc` supports.\r\n\r\nBy having LLVM tools installed with the Rust toolchain we save users one, possibly difficult,\r\ninstallation step while also providing them a single set of tools they can use for both native and\r\nembedded development.\r\n\r\nAlso, we are already shipping LLD with the Rust toolchain to ease WASM development.\r\n\r\n### Detailed proposal\r\n\r\nThe following tools will be built and shipped with the Rust toolchain:\r\n\r\n- Binary inspection tools\r\n  - `llvm-nm`\r\n  - `llvm-objdump`\r\n  - `llvm-size`\r\n\r\n- Binary manipulation tools\r\n  - `llvm-objcopy`, used to transform ELF files into binary files, which are the type of files some\r\n    flashing tools use\r\n\r\nApart from these tools useful for embedded development other tools are being requested by the\r\ngeneral Rust community for profiling:\r\n\r\n- `llvm-cov` (cc @whitequark)\r\n- `llvm-profdata` (cc @sfackler)\r\n\r\n@japaric (embedded WG) discussed this proposal with @alexcrichton (team-core, team-infra) and we tentatively agreed on the following points:\r\n\r\n- These tools will unconditionally be shipped with the Rust toolchain. That means there won't be a\r\n  `llvm-binutils` rustup component for them. This is also the case for `lld`.\r\n\r\n- These tools will only be available on *some* platforms. Where \"some\" are mainly tier 1 platforms\r\n  (x86_64 Windows / Linux / macOS). This is also the case for `lld`.\r\n\r\n- These tools will be installed somewhere in the sysroot but won't be added to the user's `$PATH`.\r\n  This is also the case for `lld`.\r\n\r\n- We make no guarantees whatsoever about the stability or availability of these tools. If a LLVM\r\n  upgrade changes the CLI or output format of one of these tools it's up to the end user to adjust\r\n  their invocations accordingly. Similarly, if LLVM drops support for any of these tools then that\r\n  tool will stop being available in the sysroot.\r\n\r\n- The embedded WG will create and maintain at set of Cargo subcommands (e.g. `cargo size`) that make `llvm-{nm,objcopy,objdump,size}` available to the end user.\r\n\r\n- We should check how adding these tools affects the binary size of the Rust toolchain installed by\r\n  rustup. These tools are statically linked to LLVM by default, which means they'll be relatively\r\n  large. We can explore dynamically linking them to LLVM in the future.\r\n\r\ncc @rust-lang/dev-tools ", "closed_by": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49584/reactions", "total_count": 14, "+1": 14, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49584/timeline", "performed_via_github_app": null, "state_reason": "completed"}