{"url": "https://api.github.com/repos/rust-lang/rust/issues/24949", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/24949/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/24949/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/24949/events", "html_url": "https://github.com/rust-lang/rust/issues/24949", "id": 71914929, "node_id": "MDU6SXNzdWU3MTkxNDkyOQ==", "number": 24949, "title": "Associated const references using UFCS can bypass `check_static_recursion`", "user": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-04-29T15:56:24Z", "updated_at": "2023-04-05T17:36:42Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, `check_static_recursion` is run after `resolve`, but before `typeck`. This made sense before, because after `resolve` it was possible to determine which constants referenced one another, and running before `typeck` ensured that we don't fall into an infinite loop during type checking. However, when referencing an associated constant with some UFCS forms, we can't resolve the constant until `typeck`, meaning that `check_static_recursion` can't always tell when a recursive definition is present. On top of that, this check is not currently working right even for inherent impls, where it should be possible to discover a problem ahead of `typeck` running.\r\n\r\nA set of test cases:\r\n\r\n``` rust\r\n// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\r\n// file at the top-level directory of this distribution and at\r\n// http://rust-lang.org/COPYRIGHT.\r\n//\r\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\r\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\r\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\r\n// option. This file may not be copied, modified, or distributed\r\n// except according to those terms.\r\n\r\n#![feature(associated_consts)]\r\n\r\ntrait Foo {\r\n    const BAR: u32;\r\n}\r\n\r\n// Check for recursion involving references to trait-associated const.\r\n\r\nconst TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR; //~ ERROR E0265\r\n\r\nstruct GlobalTraitRef;\r\n\r\nimpl Foo for GlobalTraitRef {\r\n    const BAR: u32 = TRAIT_REF_BAR; //~ ERROR E0265\r\n}\r\n\r\n// Check for recursion involving references to impl-associated const.\r\n\r\nconst IMPL_REF_BAR: u32 = GlobalImplRef::BAR; //~ ERROR E0265\r\n\r\nstruct GlobalImplRef;\r\n\r\nimpl GlobalImplRef {\r\n    const BAR: u32 = IMPL_REF_BAR; //~ ERROR E0265\r\n}\r\n\r\n// Check for recursion involving references to trait-associated const default.\r\n\r\ntrait FooDefault {\r\n    const BAR: u32 = DEFAULT_REF_BAR; //~ ERROR E0265\r\n}\r\n\r\nconst DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR; //~ ERROR E0265\r\n\r\nstruct GlobalDefaultRef;\r\n\r\nimpl FooDefault for GlobalDefaultRef {}\r\n\r\nfn main() {}\r\n```\r\n\r\nThe above cases should all fail in the recursion check, but they all compile successfully! If any of the constants are actually used in a context that requires the compiler to evaluate them, there will be an ICE (specifically, the compiler enters an infinite loop that ends up blowing the stack).\r\n\r\nUpdate\r\nplayground link: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=76e9edaf2827806e18a557f37bc930ea\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\nThis issue has been assigned to @Daniel-Worrall via [this comment](https://github.com/rust-lang/rust/issues/24949#issuecomment-620255368).\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"Daniel-Worrall\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/24949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/24949/timeline", "performed_via_github_app": null, "state_reason": null}