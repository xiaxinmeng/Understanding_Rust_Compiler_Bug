{"url": "https://api.github.com/repos/rust-lang/rust/issues/44506", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44506/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44506/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44506/events", "html_url": "https://github.com/rust-lang/rust/issues/44506", "id": 256863246, "node_id": "MDU6SXNzdWUyNTY4NjMyNDY=", "number": 44506, "title": "region errors: suggest new signature", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-11T22:39:32Z", "updated_at": "2020-04-10T00:26:45Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In some cases, we can suggest a new signature where the user introduces a new named lifetime. This is a bit tricky to figure out how to format the suggestion. It would get mildly easier with https://github.com/rust-lang/rfcs/pull/2115. \r\n\r\n```\r\nstruct Ref<'a> { x: &'a u32 }\r\n\r\nfn foo<T>(mut x: Vec<Ref<T>>, data: u32, y: Ref<T>)  {\r\n    x.push(y);\r\n}\r\n```\r\n\r\nThe old code used to produce a modified form of the HIR to format the suggestion. I'd prefer not to do that. I was thinking we could probably do something simpler where we just emit the \"new parts\" of the signature, maybe like this?\r\n\r\n```\r\nhint: consider changing the signature as shown:\r\n  | fn foo<'a, ...>(mut x: Vec<Ref<'a, T>>, ..., y: Ref<'a, T>)\r\n```\r\n\r\nIdea would be to do something like this:\r\n\r\n- Find name for a fresh lifetime that is not in scope (e.g., `'``a`)\r\n- Emit `fn`\r\n- Emit name of function (`foo`)\r\n- If the function has generic parameters already:\r\n  - Emit  `<`, fresh lifetime, `\u2026`, `>`\r\n- Else:\r\n  - Emit `<`, fresh lifetime, `>`\r\n- Emit `(`\r\n- Emit `\u2026` if needed\r\n- Emit parameter name 1 and type (with fresh lifetime substituted)\r\n- Emit `\u2026` if needed\r\n- Emit parameter name 2 and type (with fresh lifetime substituted)\r\n- Emit `\u2026` if needed\r\n- Emit `)`\r\n\r\nNot sure if this is a good plan. Might be best to wait until the https://github.com/rust-lang/rfcs/pull/2115 is settled, since that would permit us to make a suggestion where we just add a fresh named lifetime, and we don't have to add `<'a>` or anything.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44506/timeline", "performed_via_github_app": null, "state_reason": null}