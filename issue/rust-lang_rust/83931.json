{"url": "https://api.github.com/repos/rust-lang/rust/issues/83931", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83931/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83931/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83931/events", "html_url": "https://github.com/rust-lang/rust/issues/83931", "id": 851493104, "node_id": "MDU6SXNzdWU4NTE0OTMxMDQ=", "number": 83931, "title": "Misleading compiler errors from match expressions inside loops with branches of infallible", "user": {"login": "simvux", "id": 29797280, "node_id": "MDQ6VXNlcjI5Nzk3Mjgw", "avatar_url": "https://avatars.githubusercontent.com/u/29797280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simvux", "html_url": "https://github.com/simvux", "followers_url": "https://api.github.com/users/simvux/followers", "following_url": "https://api.github.com/users/simvux/following{/other_user}", "gists_url": "https://api.github.com/users/simvux/gists{/gist_id}", "starred_url": "https://api.github.com/users/simvux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simvux/subscriptions", "organizations_url": "https://api.github.com/users/simvux/orgs", "repos_url": "https://api.github.com/users/simvux/repos", "events_url": "https://api.github.com/users/simvux/events{/privacy}", "received_events_url": "https://api.github.com/users/simvux/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-04-06T14:36:14Z", "updated_at": "2022-07-16T20:58:55Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur. \r\n-->\r\n\r\nGiven the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=83112e42531e00a584b38696d5997e54\r\n\r\n```rust\r\nenum MyEnum {\r\n    First,\r\n    Second,\r\n    Third,\r\n    Fourth,\r\n}\r\n\r\nfn main() {\r\n    let a = MyEnum::First;\r\n\r\n    for _ in 0..1 {\r\n        match a {\r\n            First => Err(()),\r\n            Second => Ok(()),\r\n            Third => {\r\n                todo!()\r\n            }\r\n            _ => Ok(()),\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0308]: `match` arms have incompatible types\r\n  --> src/main.rs:16:17\r\n   |\r\n12 | /         match a {\r\n13 | |             First => Err(()),\r\n   | |                      ------- this is found to be of type `std::result::Result<(), ()>`\r\n14 | |             Second => Ok(()),\r\n   | |                       ------ this is found to be of type `std::result::Result<(), ()>`\r\n15 | |             Third => {\r\n16 | |                 todo!()\r\n   | |                 ^^^^^^^ expected enum `std::result::Result`, found `()`\r\n17 | |             }\r\n18 | |             _ => Ok(()),\r\n19 | |         }\r\n   | |_________- `match` arms have incompatible types\r\n   |\r\n   = note:   expected enum `std::result::Result<(), ()>`\r\n           found unit type `()`\r\n   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\r\nhelp: try using a variant of the expected enum\r\n   |\r\n15 |             Third => Ok({\r\n16 |                 todo!()\r\n17 |             })\r\n   |\r\n15 |             Third => Err({\r\n16 |                 todo!()\r\n17 |             })\r\n   |\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\nI suspect the infallible branch is instead assigned the type `()` due to the expected type from the for loop. Causing the misleading help and arrows. \r\n\r\nChanging `todo!()` into `Ok(())` produces the expected error output of:\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:12:9\r\n   |\r\n12 | /         match a {\r\n13 | |             First => Err(()),\r\n14 | |             Second => Ok(()),\r\n15 | |             Third => Ok(()),\r\n16 | |             _ => Ok(()),\r\n17 | |         }\r\n   | |         ^- help: try adding a semicolon: `;`\r\n   | |_________|\r\n   |           expected `()`, found enum `std::result::Result`\r\n   |\r\n   = note: expected unit type `()`\r\n                   found enum `std::result::Result<(), ()>`\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83931/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83931/timeline", "performed_via_github_app": null, "state_reason": null}