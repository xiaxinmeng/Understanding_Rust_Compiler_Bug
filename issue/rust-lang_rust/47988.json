{"url": "https://api.github.com/repos/rust-lang/rust/issues/47988", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47988/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47988/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47988/events", "html_url": "https://github.com/rust-lang/rust/issues/47988", "id": 294144745, "node_id": "MDU6SXNzdWUyOTQxNDQ3NDU=", "number": 47988, "title": "Extremely weird hygiene behavior when invoking a macro from the calling crate in a Derive", "user": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 632573348, "node_id": "MDU6TGFiZWw2MzI1NzMzNDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros-2.0", "name": "A-macros-2.0", "color": "f7e101", "default": false, "description": "Area: declarative macros 2.0, https://github.com/rust-lang/rust/issues/39412"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-02-03T21:01:18Z", "updated_at": "2018-02-13T07:41:25Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm not entirely sure whether this is a bug or not, but the current behavior seems super finicky and unintuitive at worst, and I think it's likely a bug. I think this warrants some context on the use case, so I'd like to preface with that. There's a repro script at the bottom if you don't care about the context.\r\n\r\nCustom derives have to work around the fact that they don't have access to `$crate` for the crate they're associated with. Typically the way this is worked around is by doing `const UNIQUE_NAME: () \r\n= { extern crate your_crate; /*code*/ };`. Diesel provides several derives which we want to allow third party crates to use, but *also* use them within Diesel itself. This means that the `extern crate` workaround won't work for us. Instead we have this macro in Diesel:\r\n\r\n```rust\r\nmacro_rules! __diesel_use_everything {\r\n  () => { pub use $crate::*; }\r\n}\r\n```\r\n\r\nand then the generated code looks like this:\r\n\r\n```\r\nmod unique_name {\r\n    mod diesel {\r\n        __diesel_use_everything!();\r\n    }\r\n    /*code*/\r\n}\r\n```\r\n\r\nHowever, this gets super finicky with hygiene. If we try to do that with nightly, using the derives within Diesel itself will complain that `__diesel_use_everything!` can't be found. The fix for this is to give `__diesel_use_everything!()` a `call_site` span. Interestingly, the semicolon after it *must* have a `def_site` span, or nothing it imported will be visible. The semicolon being significant is particularly weird to me, because it's basically enforcing that `()` or `[]` be used as the delimiters. If I wanted to invoke the macro with `{}`, ~it would be impossible for me to make it work~ I have to ensure the braces have a `def_site` span.\r\n\r\nAnyway it's possible to work around this in the most basic cases by giving `__diesel_use_everything!()` a `call_site` span. However, we run into additional trouble when the use of the `derive` originates inside a macro from Diesel (the actual macro is [`sql_function!`](http://docs.diesel.rs/diesel/macro.sql_function.html) if you want a real use case). It'll still find `__diesel_use_everything!()` but we get the same problem that we had if the `;` has a `call_site` span. Nothing in this `diesel` module is visible. `use self::diesel::anything` will fail.\r\n\r\nWith all that said, here's a minimum repro script:\r\n\r\n### foo/lib.rs\r\n\r\n```\r\n#[macro_use]\r\nextern crate bar;\r\n\r\nmacro_rules! __foo_use_everything {\r\n    () => {\r\n        pub use $crate::*;\r\n    };\r\n}\r\n\r\npub struct Foo;\r\n\r\nmacro_rules! make_a_struct {\r\n    () => {\r\n        #[derive(Thingy)]\r\n        pub struct Bar;\r\n    };\r\n}\r\n\r\nmake_a_struct!();\r\n```\r\n\r\n### bar/lib.rs\r\n\r\n```\r\n#![feature(proc_macro)]\r\n\r\n#[macro_use]\r\nextern crate quote;\r\nextern crate proc_macro2;\r\nextern crate proc_macro;\r\n\r\nuse proc_macro::TokenStream;\r\nuse proc_macro2::Span;\r\n\r\n#[proc_macro_derive(Thingy)]\r\npub fn derive(_: TokenStream) -> TokenStream {\r\n    let call_site = Span::call_site();\r\n    let use_everything = quote_spanned!(call_site=> __foo_use_everything!());\r\n    quote!(\r\n        mod a_unique_name {\r\n            mod foo {\r\n                #use_everything;\r\n            }\r\n            use self::foo::Foo;\r\n        }\r\n    ).into()\r\n}\r\n```\r\n\r\nThe workaround here is to call `source` on the `call_site` span (in `proc_macro2` that looks like `Span::call_site().unstable().source().into()`), but this requirement seems really weird to me. For that matter, the need to give the macro invocation any particular span at all is really surprising to me. This is a `macro_rules!` macro, which by its very nature is non-hygienic and global. I think this invocation should work regardless of the span the macro name has. Even putting that aside though, it seems to me that a derive used inside a `macro_rules!` macro should behave basically the same as one without (e.g. `__diesel_use_everything!` should certainly resolve with `call_site` regardless of where it's used)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47988/timeline", "performed_via_github_app": null, "state_reason": null}