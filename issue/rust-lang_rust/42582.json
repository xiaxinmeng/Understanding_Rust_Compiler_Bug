{"url": "https://api.github.com/repos/rust-lang/rust/issues/42582", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42582/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42582/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42582/events", "html_url": "https://github.com/rust-lang/rust/issues/42582", "id": 235002956, "node_id": "MDU6SXNzdWUyMzUwMDI5NTY=", "number": 42582, "title": "Not efficient multiple filters", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-10T13:29:54Z", "updated_at": "2018-08-01T11:01:34Z", "closed_at": "2018-08-01T11:01:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a little test of chained multiple maps/filters:\r\n\r\n```\r\n#[inline(never)]\r\nfn first_foo(a: &[u32]) -> u32 {\r\n    a.iter()\r\n    .map(|x| x * 1)\r\n    .map(|x| x * 2)\r\n    .map(|x| x * 3)\r\n    .map(|x| x * 4)\r\n    .map(|x| x * 5)\r\n    .map(|x| x * 6)\r\n    .map(|x| x * 7)\r\n    .sum()\r\n}\r\n\r\n#[inline(never)]\r\nfn second_foo(a: &[u32]) -> u32 {\r\n    a.iter()\r\n    .filter(|&&x| x > 1)\r\n    .filter(|&&x| x > 2)\r\n    .filter(|&&x| x > 3)\r\n    .filter(|&&x| x > 4)\r\n    .filter(|&&x| x > 5)\r\n    .filter(|&&x| x > 6)\r\n    .filter(|&&x| x > 7)\r\n    .sum()\r\n}\r\n\r\n#[inline(never)]\r\nfn third_foo(a: &[u32]) -> u32 {\r\n    let mut tot = 0;\r\n\r\n    for &x in a {\r\n        if x > 1 {\r\n            if x > 2 {\r\n                if x > 3 {\r\n                    if x > 4 {\r\n                        if x > 5 {\r\n                            if x > 6 {\r\n                                if x > 7 {\r\n                                    tot += x;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    tot\r\n}\r\n\r\nfn main() {\r\n    println!(\"{}\", first_foo(&[1, 2, 3, 4, 5]));\r\n    println!(\"{}\", first_foo(&[10, 20]));\r\n    println!(\"{}\", second_foo(&[1, 2, 3, 4, 5]));\r\n    println!(\"{}\", second_foo(&[10, 20]));\r\n    println!(\"{}\", third_foo(&[1, 2, 3, 4, 5]));\r\n    println!(\"{}\", third_foo(&[10, 20]));\r\n}\r\n```\r\n\r\nWhile the chained maps of first_foo() get compiled well, it seems the chained filters of second_foo() are not well compiled (as third_foo()):\r\n\r\n```\r\nCompiled with:\r\nrustc -C opt-level=3 -C target-cpu=native --emit asm test.rs\r\n\r\n_ZN4test9first_foo17ha643abd730ca2b26E:\r\n    subq    $88, %rsp\r\n    vmovdqa %xmm10, 64(%rsp)\r\n    vmovdqa %xmm9, 48(%rsp)\r\n    vmovdqa %xmm8, 32(%rsp)\r\n    vmovdqa %xmm7, 16(%rsp)\r\n    vmovdqa %xmm6, (%rsp)\r\n    testq   %rdx, %rdx\r\n    je  .LBB0_1\r\n    leaq    -4(,%rdx,4), %r8\r\n    shrq    $2, %r8\r\n    addq    $1, %r8\r\n    xorl    %eax, %eax\r\n    cmpq    $32, %r8\r\n    jae .LBB0_4\r\n    movq    %rcx, %r10\r\n    jmp .LBB0_13\r\n.LBB0_1:\r\n    xorl    %eax, %eax\r\n    jmp .LBB0_15\r\n.LBB0_4:\r\n    movabsq $9223372036854775776, %r9\r\n    movq    %rcx, %r10\r\n    andq    %r8, %r9\r\n    je  .LBB0_13\r\n    leaq    -32(%r9), %rax\r\n    movq    %rax, %r10\r\n    shrq    $5, %r10\r\n    btl $5, %eax\r\n    jb  .LBB0_6\r\n    vpbroadcastd    .LCPI0_0(%rip), %ymm3\r\n    vpmulld (%rcx), %ymm3, %ymm0\r\n    vpmulld 32(%rcx), %ymm3, %ymm1\r\n    vpmulld 64(%rcx), %ymm3, %ymm2\r\n    vpmulld 96(%rcx), %ymm3, %ymm3\r\n    movl    $32, %r11d\r\n    testq   %r10, %r10\r\n    jne .LBB0_9\r\n    jmp .LBB0_11\r\n.LBB0_6:\r\n    vpxor   %ymm0, %ymm0, %ymm0\r\n    xorl    %r11d, %r11d\r\n    vpxor   %ymm1, %ymm1, %ymm1\r\n    vpxor   %ymm2, %ymm2, %ymm2\r\n    vpxor   %ymm3, %ymm3, %ymm3\r\n    testq   %r10, %r10\r\n    je  .LBB0_11\r\n.LBB0_9:\r\n    movq    %r9, %r10\r\n    subq    %r11, %r10\r\n    leaq    224(%rcx,%r11,4), %rax\r\n    vpbroadcastd    .LCPI0_0(%rip), %ymm4\r\n    .p2align    4, 0x90\r\n.LBB0_10:\r\n    vpmulld -224(%rax), %ymm4, %ymm5\r\n    vpmulld -192(%rax), %ymm4, %ymm6\r\n    vpmulld -160(%rax), %ymm4, %ymm7\r\n    vpmulld -128(%rax), %ymm4, %ymm8\r\n    vpmulld -96(%rax), %ymm4, %ymm9\r\n    vpmulld -64(%rax), %ymm4, %ymm10\r\n    vpaddd  %ymm0, %ymm5, %ymm0\r\n    vpmulld -32(%rax), %ymm4, %ymm5\r\n    vpaddd  %ymm1, %ymm6, %ymm1\r\n    vpmulld (%rax), %ymm4, %ymm6\r\n    vpaddd  %ymm2, %ymm7, %ymm2\r\n    vpaddd  %ymm3, %ymm8, %ymm3\r\n    vpaddd  %ymm0, %ymm9, %ymm0\r\n    vpaddd  %ymm1, %ymm10, %ymm1\r\n    vpaddd  %ymm2, %ymm5, %ymm2\r\n    vpaddd  %ymm3, %ymm6, %ymm3\r\n    addq    $256, %rax\r\n    addq    $-64, %r10\r\n    jne .LBB0_10\r\n.LBB0_11:\r\n    vpaddd  %ymm2, %ymm0, %ymm0\r\n    vpaddd  %ymm3, %ymm1, %ymm1\r\n    vpaddd  %ymm1, %ymm0, %ymm0\r\n    vextracti128    $1, %ymm0, %xmm1\r\n    vpaddd  %ymm1, %ymm0, %ymm0\r\n    vpshufd $78, %xmm0, %xmm1\r\n    vpaddd  %ymm1, %ymm0, %ymm0\r\n    vphaddd %ymm0, %ymm0, %ymm0\r\n    vmovd   %xmm0, %eax\r\n    cmpq    %r9, %r8\r\n    je  .LBB0_15\r\n    leaq    (%rcx,%r9,4), %r10\r\n.LBB0_13:\r\n    leaq    (%rcx,%rdx,4), %rcx\r\n    .p2align    4, 0x90\r\n.LBB0_14:\r\n    imull   $5040, (%r10), %edx\r\n    addq    $4, %r10\r\n    addl    %edx, %eax\r\n    cmpq    %r10, %rcx\r\n    jne .LBB0_14\r\n.LBB0_15:\r\n    vmovaps (%rsp), %xmm6\r\n    vmovaps 16(%rsp), %xmm7\r\n    vmovaps 32(%rsp), %xmm8\r\n    vmovaps 48(%rsp), %xmm9\r\n    vmovaps 64(%rsp), %xmm10\r\n    addq    $88, %rsp\r\n    vzeroupper\r\n    retq\r\n\r\n\r\n_ZN4test10second_foo17h1211b743faafed07E:\r\n    leaq    (%rcx,%rdx,4), %r8\r\n    xorl    %eax, %eax\r\n    cmpq    %rcx, %r8\r\n    jne .LBB1_2\r\n    jmp .LBB1_10\r\n.LBB1_9:\r\n    addl    %edx, %eax\r\n    .p2align    4, 0x90\r\n.LBB1_1:\r\n    cmpq    %rcx, %r8\r\n    je  .LBB1_10\r\n.LBB1_2:\r\n    movl    (%rcx), %edx\r\n    addq    $4, %rcx\r\n    cmpl    $2, %edx\r\n    jb  .LBB1_1\r\n    je  .LBB1_1\r\n    cmpl    $4, %edx\r\n    jb  .LBB1_1\r\n    je  .LBB1_1\r\n    cmpl    $6, %edx\r\n    jb  .LBB1_1\r\n    je  .LBB1_1\r\n    cmpl    $8, %edx\r\n    jb  .LBB1_1\r\n    jmp .LBB1_9\r\n.LBB1_10:\r\n    retq\r\n\r\n\r\n_ZN4test9third_foo17h8bdba97f87ddcc23E:\r\n    pushq   %rsi\r\n    subq    $64, %rsp\r\n    vmovdqa %xmm9, 48(%rsp)\r\n    vmovdqa %xmm8, 32(%rsp)\r\n    vmovdqa %xmm7, 16(%rsp)\r\n    vmovdqa %xmm6, (%rsp)\r\n    testq   %rdx, %rdx\r\n    je  .LBB2_1\r\n    leaq    -4(,%rdx,4), %r9\r\n    shrq    $2, %r9\r\n    addq    $1, %r9\r\n    xorl    %r8d, %r8d\r\n    movl    $0, %eax\r\n    movq    %rcx, %rsi\r\n    cmpq    $31, %r9\r\n    jbe .LBB2_3\r\n    movabsq $9223372036854775776, %r10\r\n    movl    $0, %eax\r\n    movq    %rcx, %rsi\r\n    andq    %r9, %r10\r\n    je  .LBB2_3\r\n    leaq    -32(%r10), %rax\r\n    movq    %rax, %rsi\r\n    shrq    $5, %rsi\r\n    btl $5, %eax\r\n    jb  .LBB2_8\r\n    vmovdqu (%rcx), %ymm0\r\n    vmovdqu 32(%rcx), %ymm1\r\n    vmovdqu 64(%rcx), %ymm2\r\n    vmovdqu 96(%rcx), %ymm3\r\n    vpbroadcastd    .LCPI2_0(%rip), %ymm4\r\n    vpmaxud %ymm4, %ymm0, %ymm5\r\n    vpcmpeqd    %ymm5, %ymm0, %ymm5\r\n    vpand   %ymm0, %ymm5, %ymm0\r\n    vpmaxud %ymm4, %ymm1, %ymm5\r\n    vpcmpeqd    %ymm5, %ymm1, %ymm5\r\n    vpand   %ymm1, %ymm5, %ymm1\r\n    vpmaxud %ymm4, %ymm2, %ymm5\r\n    vpcmpeqd    %ymm5, %ymm2, %ymm5\r\n    vpand   %ymm2, %ymm5, %ymm2\r\n    vpmaxud %ymm4, %ymm3, %ymm4\r\n    vpcmpeqd    %ymm4, %ymm3, %ymm4\r\n    vpand   %ymm3, %ymm4, %ymm3\r\n    movl    $32, %eax\r\n    testq   %rsi, %rsi\r\n    jne .LBB2_11\r\n    jmp .LBB2_13\r\n.LBB2_1:\r\n    xorl    %eax, %eax\r\n    jmp .LBB2_5\r\n.LBB2_8:\r\n    vpxor   %ymm0, %ymm0, %ymm0\r\n    xorl    %eax, %eax\r\n    vpxor   %ymm1, %ymm1, %ymm1\r\n    vpxor   %ymm2, %ymm2, %ymm2\r\n    vpxor   %ymm3, %ymm3, %ymm3\r\n    testq   %rsi, %rsi\r\n    je  .LBB2_13\r\n.LBB2_11:\r\n    movq    %r10, %r11\r\n    subq    %rax, %r11\r\n    leaq    224(%rcx,%rax,4), %rax\r\n    vpbroadcastd    .LCPI2_0(%rip), %ymm4\r\n    .p2align    4, 0x90\r\n.LBB2_12:\r\n    vmovdqu -224(%rax), %ymm5\r\n    vmovdqu -192(%rax), %ymm6\r\n    vmovdqu -160(%rax), %ymm7\r\n    vmovdqu -128(%rax), %ymm8\r\n    vpmaxud %ymm4, %ymm5, %ymm9\r\n    vpcmpeqd    %ymm9, %ymm5, %ymm9\r\n    vpand   %ymm5, %ymm9, %ymm5\r\n    vpmaxud %ymm4, %ymm6, %ymm9\r\n    vpcmpeqd    %ymm9, %ymm6, %ymm9\r\n    vpand   %ymm6, %ymm9, %ymm6\r\n    vpmaxud %ymm4, %ymm7, %ymm9\r\n    vpcmpeqd    %ymm9, %ymm7, %ymm9\r\n    vpand   %ymm7, %ymm9, %ymm7\r\n    vpmaxud %ymm4, %ymm8, %ymm9\r\n    vpcmpeqd    %ymm9, %ymm8, %ymm9\r\n    vpand   %ymm8, %ymm9, %ymm8\r\n    vpaddd  %ymm0, %ymm5, %ymm0\r\n    vpaddd  %ymm1, %ymm6, %ymm1\r\n    vpaddd  %ymm2, %ymm7, %ymm2\r\n    vpaddd  %ymm3, %ymm8, %ymm3\r\n    vmovdqu -96(%rax), %ymm5\r\n    vmovdqu -64(%rax), %ymm6\r\n    vmovdqu -32(%rax), %ymm7\r\n    vmovdqu (%rax), %ymm8\r\n    vpmaxud %ymm4, %ymm5, %ymm9\r\n    vpcmpeqd    %ymm9, %ymm5, %ymm9\r\n    vpand   %ymm5, %ymm9, %ymm5\r\n    vpmaxud %ymm4, %ymm6, %ymm9\r\n    vpcmpeqd    %ymm9, %ymm6, %ymm9\r\n    vpand   %ymm6, %ymm9, %ymm6\r\n    vpmaxud %ymm4, %ymm7, %ymm9\r\n    vpcmpeqd    %ymm9, %ymm7, %ymm9\r\n    vpand   %ymm7, %ymm9, %ymm7\r\n    vpmaxud %ymm4, %ymm8, %ymm9\r\n    vpcmpeqd    %ymm9, %ymm8, %ymm9\r\n    vpand   %ymm8, %ymm9, %ymm8\r\n    vpaddd  %ymm0, %ymm5, %ymm0\r\n    vpaddd  %ymm1, %ymm6, %ymm1\r\n    vpaddd  %ymm2, %ymm7, %ymm2\r\n    vpaddd  %ymm3, %ymm8, %ymm3\r\n    addq    $256, %rax\r\n    addq    $-64, %r11\r\n    jne .LBB2_12\r\n.LBB2_13:\r\n    vpaddd  %ymm2, %ymm0, %ymm0\r\n    vpaddd  %ymm3, %ymm1, %ymm1\r\n    vpaddd  %ymm1, %ymm0, %ymm0\r\n    vextracti128    $1, %ymm0, %xmm1\r\n    vpaddd  %ymm1, %ymm0, %ymm0\r\n    vpshufd $78, %xmm0, %xmm1\r\n    vpaddd  %ymm1, %ymm0, %ymm0\r\n    vphaddd %ymm0, %ymm0, %ymm0\r\n    vmovd   %xmm0, %eax\r\n    cmpq    %r10, %r9\r\n    je  .LBB2_5\r\n    leaq    (%rcx,%r10,4), %rsi\r\n.LBB2_3:\r\n    leaq    (%rcx,%rdx,4), %rcx\r\n    .p2align    4, 0x90\r\n.LBB2_4:\r\n    movl    (%rsi), %edx\r\n    addq    $4, %rsi\r\n    cmpl    $8, %edx\r\n    cmovbl  %r8d, %edx\r\n    addl    %edx, %eax\r\n    cmpq    %rsi, %rcx\r\n    jne .LBB2_4\r\n.LBB2_5:\r\n    vmovaps (%rsp), %xmm6\r\n    vmovaps 16(%rsp), %xmm7\r\n    vmovaps 32(%rsp), %xmm8\r\n    vmovaps 48(%rsp), %xmm9\r\n    addq    $64, %rsp\r\n    popq    %rsi\r\n    vzeroupper\r\n    retq\r\n\r\n```", "closed_by": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42582/timeline", "performed_via_github_app": null, "state_reason": "completed"}