{"url": "https://api.github.com/repos/rust-lang/rust/issues/73203", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73203/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73203/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73203/events", "html_url": "https://github.com/rust-lang/rust/issues/73203", "id": 636016430, "node_id": "MDU6SXNzdWU2MzYwMTY0MzA=", "number": 73203, "title": "Const prop creates assignments from large constants", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-10T07:48:43Z", "updated_at": "2020-06-10T09:22:48Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Background discussion: https://github.com/rust-lang/rust/pull/71911#discussion_r436273388\r\n\r\nIf we have an assignment of `Rvalue::Aggregate` in const-prop, and we can figure out that all fields are `Operand::Const`, we end up replacing the `Rvalue::Aggregate` with an `Rvalue::Use` of a constant that contains the entire aggregate. This may end up creating large assignments that copy from constant memory to the stack at runtime. It may sometimes be cheaper to just build the constant at runtime. This is very true if the constant is actually a `None` where the `Some` part is a huge value. We'd have a very big constant with most bits undefined that we copy over, even if the runtime operation would just be \"set the discriminant bits\".\r\n\r\ncc @rust-lang/wg-mir-opt \r\n\r\nShould we have some heuristic here? Should we only do this optimization for `Scalar`s and `ScalarPair`s? Other opinions?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73203/timeline", "performed_via_github_app": null, "state_reason": null}