{"url": "https://api.github.com/repos/rust-lang/rust/issues/21231", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/21231/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/21231/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/21231/events", "html_url": "https://github.com/rust-lang/rust/issues/21231", "id": 54565821, "node_id": "MDU6SXNzdWU1NDU2NTgyMQ==", "number": 21231, "title": "Typechecking does not scale well for deeply nested types", "user": {"login": "Marwes", "id": 957312, "node_id": "MDQ6VXNlcjk1NzMxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/957312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marwes", "html_url": "https://github.com/Marwes", "followers_url": "https://api.github.com/users/Marwes/followers", "following_url": "https://api.github.com/users/Marwes/following{/other_user}", "gists_url": "https://api.github.com/users/Marwes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marwes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marwes/subscriptions", "organizations_url": "https://api.github.com/users/Marwes/orgs", "repos_url": "https://api.github.com/users/Marwes/repos", "events_url": "https://api.github.com/users/Marwes/events{/privacy}", "received_events_url": "https://api.github.com/users/Marwes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-01-16T11:30:25Z", "updated_at": "2016-05-12T18:29:31Z", "closed_at": "2016-05-12T18:29:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently trying to write a parser combinator library and ideally I would like to have everything statically dispatched which means that the types created can become very deeply nested. There are ways around this of course but I would still not expect the compiler to hang for so long. Sadly I can't come up with a nice small example since simply creating a generic struct (struct A<X, Y>(X, Y);) and nesting it deeply does not seem to be affected.\n\n56s 1138 characters long type\n\n```\nparser-combinators::parser::Map<parser-combinators::parser::Skip<parser-combinators::parser::With<parser-combinators::parser::StringP<'_, _>, parser-combinators::parser::Map<parser-combinators::parser::SepBy<parser-combinators::parser::And<parser-combinators::parser::Skip<parser-combinators::parser::Map<parser-combinators::parser::Skip<parser-combinators::parser::With<parser-combinators::parser::StringP<'_, _>, parser-combinators::parser::Chars<parser-combinators::parser::Satisfy<_, closure[main.rs:16:24: 16:70]>>>, parser-combinators::parser::StringP<'_, _>>, closure[main.rs:18:14: 18:31], collections::string::String>, parser-combinators::parser::StringP<'_, _>>, fn(parser-combinators::primitives::State<_>) -> core::result::Result<(Value, parser-combinators::primitives::State<_>), parser-combinators::primitives::ParseError>>, parser-combinators::parser::StringP<'_, _>>, closure[main.rs:23:14: 23:45], std::collections::hash::map::HashMap<collections::string::String, Value>>>, parser-combinators::parser::StringP<'_, _>>, fn(std::collections::hash::map::HashMap<collections::string::String, Value>) -> Value {Object}, Value>\n```\n\n200s 1264 characters long type (should just be one more type nested)\n\n```\nparser-combinators::parser::Map<parser-combinators::parser::Skip<parser-combinators::parser::With<parser-combinators::parser::StringP<'_, _>, parser-combinators::parser::Map<parser-combinators::parser::SepBy<parser-combinators::parser::And<parser-combinators::parser::Skip<parser-combinators::parser::Map<parser-combinators::parser::With<parser-combinators::parser::Many<parser-combinators::parser::Satisfy<_, fn(char) -> bool>>, parser-combinators::parser::Skip<parser-combinators::parser::With<parser-combinators::parser::StringP<'_, _>, parser-combinators::parser::Chars<parser-combinators::parser::Satisfy<_, closure[main.rs:17:24: 17:70]>>>, parser-combinators::parser::StringP<'_, _>>>, closure[main.rs:19:14: 19:31], collections::string::String>, parser-combinators::parser::StringP<'_, _>>, fn(parser-combinators::primitives::State<_>) -> core::result::Result<(Value, parser-combinators::primitives::State<_>), parser-combinators::primitives::ParseError>>, parser-combinators::parser::StringP<'_, _>>, closure[main.rs:24:14: 24:45], std::collections::hash::map::HashMap<collections::string::String, Value>>>, parser-combinators::parser::StringP<'_, _>>, fn(std::collections::hash::map::HashMap<collections::string::String, Value>) -> Value {Object}, Value>\n```\n\nCode compiled using https://github.com/Marwes/parser-combinators\n\n```\nextern crate \"parser-combinators\" as parser_combinators;\nuse parser_combinators::*;\nuse parser_combinators::primitives::{State, Stream};\nuse std::collections::HashMap;\n\nenum Value {\n    Number(f64),\n    String(String),\n    Bool(bool),\n    Null,\n    Object(HashMap<String, Value>),\n    Array(Vec<Value>)\n}\nfn value<I: Stream<Item=char>>(input: State<I>) -> ParseResult<Value, I> {\n    let char = satisfy(|c| \"\\\"\\\\\".chars().find(|x| *x == c).is_none());\n    let json_string = between(string(\"\\\"\"), string(\"\\\"\"), chars(char))\n        .map(|s| s.to_string());\n    let field = json_string\n        .skip(string(\":\"))\n        .and(value as fn (_) -> _);\n    let fields = sep_by(field, string(\",\"))\n        .map(|vec| vec.into_iter().collect());\n    let mut object: () = between(string(\"{\"), string(\"}\"), fields)\n        .map(Value::Object);\n    object\n        .parse_state(input)\n}\n\n\nfn main() {\n}\n```\n", "closed_by": {"login": "Marwes", "id": 957312, "node_id": "MDQ6VXNlcjk1NzMxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/957312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marwes", "html_url": "https://github.com/Marwes", "followers_url": "https://api.github.com/users/Marwes/followers", "following_url": "https://api.github.com/users/Marwes/following{/other_user}", "gists_url": "https://api.github.com/users/Marwes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marwes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marwes/subscriptions", "organizations_url": "https://api.github.com/users/Marwes/orgs", "repos_url": "https://api.github.com/users/Marwes/repos", "events_url": "https://api.github.com/users/Marwes/events{/privacy}", "received_events_url": "https://api.github.com/users/Marwes/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/21231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/21231/timeline", "performed_via_github_app": null, "state_reason": "completed"}