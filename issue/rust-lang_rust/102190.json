{"url": "https://api.github.com/repos/rust-lang/rust/issues/102190", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102190/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102190/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102190/events", "html_url": "https://github.com/rust-lang/rust/issues/102190", "id": 1383789652, "node_id": "I_kwDOAAsO6M5SevRU", "number": 102190, "title": "False positive dead code warning", "user": {"login": "alexkazik", "id": 612453, "node_id": "MDQ6VXNlcjYxMjQ1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/612453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexkazik", "html_url": "https://github.com/alexkazik", "followers_url": "https://api.github.com/users/alexkazik/followers", "following_url": "https://api.github.com/users/alexkazik/following{/other_user}", "gists_url": "https://api.github.com/users/alexkazik/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexkazik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexkazik/subscriptions", "organizations_url": "https://api.github.com/users/alexkazik/orgs", "repos_url": "https://api.github.com/users/alexkazik/repos", "events_url": "https://api.github.com/users/alexkazik/events{/privacy}", "received_events_url": "https://api.github.com/users/alexkazik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-09-23T13:12:43Z", "updated_at": "2022-09-23T13:12:43Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "When code is generated via a proc macro there is a case which creates a false positive for the dead code warning.\r\n\r\nProc macro (src/lib.rs):\r\n```rust\r\nuse proc_macro2::Span;\r\nuse quote::quote;\r\nuse syn::spanned::Spanned;\r\nuse syn::{parse_macro_input, DeriveInput, Ident};\r\n\r\n#[proc_macro_derive(Test)]\r\npub fn proc_dead_code_test(tokens: proc_macro::TokenStream) -> proc_macro::TokenStream {\r\n    let input = parse_macro_input!(tokens as DeriveInput);\r\n    let repr = Ident::new(\"i8\", input.span());\r\n    let repr_call_size = Ident::new(\"i8\", Span::call_site());\r\n    let vis = input.vis;\r\n    quote! {\r\n        impl MyEnum {\r\n            #vis fn false_positive(self) -> #repr {\r\n                self as i8\r\n            }\r\n            pub(crate) fn ok_1(self) -> #repr {\r\n                self as i8\r\n            }\r\n            #vis fn ok_2(self) -> i8 {\r\n                self as i8\r\n            }\r\n            #vis fn ok_3(self) -> #repr_call_size {\r\n                self as i8\r\n            }\r\n        }\r\n    }\r\n    .into()\r\n}\r\n```\r\n\r\nTest (tests/all.rs):\r\n```rust\r\nuse proc_dead_code_test::Test;\r\n\r\n#[allow(dead_code)]\r\n#[derive(Test)]\r\n#[repr(i8)]\r\npub(crate) enum MyEnum {\r\n    MyValue,\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nwarning: associated function `false_positive` is never used\r\n --> tests/all.rs:4:10\r\n  |\r\n4 | #[derive(Test)]\r\n  |          ^^^^\r\n  |\r\n  = note: `#[warn(dead_code)]` on by default\r\n\r\nwarning: `proc_dead_code_test` (test \"all\") generated 1 warning\r\n```\r\n\r\nThe generated code for all four functions are identical (except the name, obviusly), tested with `cargo expand`. \r\n\r\nOne is reported as dead code, though no report should be given since `#[allow(dead_code)]` is used.\r\n\r\nOn 1.63.0 this is not a warning, but with 1.65.0-beta.1 it is.\r\n\r\nI'm aware that this is a very special case and I don't mind if it doesn't get fixed but I thought I'll report it anyway.\r\n\r\nFor a quick copy-and-paste run here the Cargo.toml:\r\n```toml\r\n[package]\r\nname = \"proc_dead_code_test\"\r\nversion = \"0.1.0\"\r\nedition = \"2021\"\r\n\r\n[lib]\r\nproc-macro = true\r\n\r\n[dependencies]\r\nsyn = { version = \"1.0.99\", features = [\"derive\", \"parsing\", \"extra-traits\"] }\r\nquote = \"1.0.21\"\r\nproc-macro2 = \"1.0.43\"\r\n```\r\n\r\n(I don't know how to setup play.rust-lang.org to create a proc-macro and a real test, thats why it's missing.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102190/timeline", "performed_via_github_app": null, "state_reason": null}