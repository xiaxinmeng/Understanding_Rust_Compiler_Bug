{"url": "https://api.github.com/repos/rust-lang/rust/issues/83642", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83642/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83642/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83642/events", "html_url": "https://github.com/rust-lang/rust/issues/83642", "id": 843311222, "node_id": "MDU6SXNzdWU4NDMzMTEyMjI=", "number": 83642, "title": "`hash_map::OccupiedEntry` should provide original key back.", "user": {"login": "kevincox", "id": 494012, "node_id": "MDQ6VXNlcjQ5NDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/494012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevincox", "html_url": "https://github.com/kevincox", "followers_url": "https://api.github.com/users/kevincox/followers", "following_url": "https://api.github.com/users/kevincox/following{/other_user}", "gists_url": "https://api.github.com/users/kevincox/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevincox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevincox/subscriptions", "organizations_url": "https://api.github.com/users/kevincox/orgs", "repos_url": "https://api.github.com/users/kevincox/repos", "events_url": "https://api.github.com/users/kevincox/events{/privacy}", "received_events_url": "https://api.github.com/users/kevincox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-03-29T12:15:36Z", "updated_at": "2023-03-30T20:17:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "My understanding is that when `.entry()` returns `Occupied` the key provided is not used as the key was already in the map. There should then be a way to get the original key back. The current workaround is `.key().clone()` if they key type is clonable.\r\n\r\nThe following APIs could have an alternate version that provided the original key:\r\n\r\n* [std::collections::hash_map::Entry::and_modify](https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.and_modify)\r\n* [std::collections::hash_map::OccupiedEntry::insert](https://doc.rust-lang.org/std/collections/hash_map/struct.OccupiedEntry.html#method.insert)\r\n* [std::collections::hash_map::OccupiedEntry::into_mut](https://doc.rust-lang.org/std/collections/hash_map/struct.OccupiedEntry.html#method.into_mut)\r\n* [std::collections::hash_map::OccupiedEntry::remove](https://doc.rust-lang.org/std/collections/hash_map/struct.OccupiedEntry.html#method.remove)\r\n* [std::collections::hash_map::OccupiedEntry::remove_entry](https://doc.rust-lang.org/std/collections/hash_map/struct.OccupiedEntry.html#method.remove_entry)\r\n\r\nNow it may not make sense to add alternatives to all of these but it should be considered. Alternatives would be infeasible such as adding a key member to `OccupiedEntry` or making `Entry::Occupied(OccupiedEntry, K)`.\r\n\r\nThe best way to do this isn't clear, but it would be nice to be able to work with non-clonable types and avoid unnecessary clones.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83642/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83642/timeline", "performed_via_github_app": null, "state_reason": null}