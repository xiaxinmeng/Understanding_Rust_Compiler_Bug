{"url": "https://api.github.com/repos/rust-lang/rust/issues/15904", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/15904/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/15904/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/15904/events", "html_url": "https://github.com/rust-lang/rust/issues/15904", "id": 38452832, "node_id": "MDU6SXNzdWUzODQ1MjgzMg==", "number": 15904, "title": "Provide region checker hooks for more efficient generic code", "user": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234876, "node_id": "MDU6TGFiZWwyMzQ4NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-hard", "name": "E-hard", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Hard / a lot"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-07-22T21:53:26Z", "updated_at": "2015-01-21T19:22:27Z", "closed_at": "2015-01-21T19:22:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As an example, consider `Clone` for `Rc<T>`.  We can elide the refcount bump if the region checker can prove that the new `Rc<T>` won't outlive the old one.  This is somewhat like passing `&Rc<T>` instead of `Rc<T>`.\n\nLLVM can probably catch some of these, but we can surely do more if `Rc<T>` opts in to different semantics.  I can imagine writing code like\n\n``` rust\nimpl<T> Clone for Rc<T> {\n    #[inline]\n    fn clone<'a>(&'a self) -> Rc<T> {\n        let new = Rc { _ptr: self._ptr, ... }\n        if can_outlive!(new, 'a) {\n            self.inc_strong();\n        }\n        new\n    }\n}\n```\n\nHere `can_outlive!()` is a deeply magical builtin, on the order of GCC's `__builtin_types_compatible_p` or `__builtin_constant_p`.  Then suppose I do something like\n\n``` rust\nfn f(x: Rc<uint>) { ... }\n\nfn g() {\n    let x = Rc::new(0u);\n    f(x.clone());\n}\n```\n\nand the `clone` call gets inlined.  The region checker will notice that the argument to `f` can't outlive `x`, and will arrange for that `can_outlive!(new, 'a)` to act like a constant `false`.  (When it can't prove this it becomes `true`, naturally.)\n\nWe'd also need to change `Drop` for `Rc<T>`, of course.  You can't always statically pair up the `clone` and `drop` calls, so I imagine stealing a pointer tag bit to indicate to `drop` whether it needs to `dec_strong`.  This makes it a dubious win for `Rc<T>`, but it could help a lot with `Arc<T>` where you're avoiding atomic memory operations.\n\nI expect this to be particularly useful in generic code.  For example the [html5ever](https://github.com/kmcallister/html5ever) tree builder has a type parameter for \"handle to node\", and clones these handles all over the place.  When instantiating the tree builder for a refcounted DOM, many of those clones could be elided.\n\ncc @nikomatsakis\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/15904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/15904/timeline", "performed_via_github_app": null, "state_reason": "completed"}