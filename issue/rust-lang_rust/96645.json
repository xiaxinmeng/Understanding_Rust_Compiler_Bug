{"url": "https://api.github.com/repos/rust-lang/rust/issues/96645", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96645/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96645/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96645/events", "html_url": "https://github.com/rust-lang/rust/issues/96645", "id": 1223189531, "node_id": "I_kwDOAAsO6M5I6GQb", "number": 96645, "title": "Random `lifetime may not live long enough` from other part of the code", "user": {"login": "DzenanJupic", "id": 56133904, "node_id": "MDQ6VXNlcjU2MTMzOTA0", "avatar_url": "https://avatars.githubusercontent.com/u/56133904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DzenanJupic", "html_url": "https://github.com/DzenanJupic", "followers_url": "https://api.github.com/users/DzenanJupic/followers", "following_url": "https://api.github.com/users/DzenanJupic/following{/other_user}", "gists_url": "https://api.github.com/users/DzenanJupic/gists{/gist_id}", "starred_url": "https://api.github.com/users/DzenanJupic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DzenanJupic/subscriptions", "organizations_url": "https://api.github.com/users/DzenanJupic/orgs", "repos_url": "https://api.github.com/users/DzenanJupic/repos", "events_url": "https://api.github.com/users/DzenanJupic/events{/privacy}", "received_events_url": "https://api.github.com/users/DzenanJupic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}, {"id": 867465703, "node_id": "MDU6TGFiZWw4Njc0NjU3MDM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-complete", "name": "NLL-complete", "color": "f799ea", "default": false, "description": "Working towards the \"valid code works\" goal"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2022-05-02T18:15:00Z", "updated_at": "2023-01-25T15:36:16Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I just stumbled across a weird and inconsistent behaviour, that seems unreasonable to me.\r\n\r\nThe project I'm working on is a big company project (closed source) with quite some files. While fixing a bug and editing one line in one module (`src/dispatcher/compiler/module_range.rs`) the compiler suddenly decided to reject the code of a function from a completely different module (`src/services/module_state_service.rs`) that has absolutely nothing to do with the module I'm working on.\r\n\r\nThe change that I made:\r\n```rust\r\nfn get_next_module_start(&self, module: &FunctionalModule<'a>, starter: &'a Fmid) -> Result<usize> {\r\n        // -- snip --\r\n        WorkflowIterator::exe_path_iter(\r\n            self.modules,\r\n            starter,\r\n            |m| m.fmd.next_module.as_ref().into_option(),\r\n-           |m| super::sort_exe_paths(&m.fmd.exe_paths),\r\n+           |m| (m != module).then(|| super::sort_exe_paths(&m.fmd.exe_paths)).into_iter().flatten(),\r\n            |m| m.md.kind,\r\n        )\r\n        // -- snip --\r\n}\r\n```\r\n\r\nThe compiler error:\r\n```\r\nerror: lifetime may not live long enough\r\n  --> src/services/module_state_service.rs:35:44\r\n   |\r\n32 |           &'_ self,\r\n   |            -- let's call the lifetime of this reference `'1`\r\n33 |           workflow_id: &WorkflowGroupId,\r\n34 |           fmid: &Fmid,\r\n   |                 - let's call the lifetime of this reference `'2`\r\n35 |       ) -> Option<RwLockReadGuard<'_, [u8]>> {\r\n   |  ____________________________________________^\r\n36 | |         let map_guard = self.module_state.read().await;\r\n37 | |\r\n38 | |         let contains_state = map_guard\r\n...  |\r\n49 | |         }))\r\n50 | |     }\r\n   | |_____^ associated function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\r\n\r\nerror: lifetime may not live long enough\r\n  --> src/services/module_state_service.rs:47:9\r\n   |\r\n32 |           &'_ self,\r\n   |            -- let's call the lifetime of this reference `'1`\r\n33 |           workflow_id: &WorkflowGroupId,\r\n34 |           fmid: &Fmid,\r\n   |                 - let's call the lifetime of this reference `'2`\r\n...\r\n47 | /         Some(RwLockReadGuard::map(map_guard, |map| {\r\n48 | |             &**map.get(workflow_id).unwrap().get(fmid).unwrap()\r\n49 | |         }))\r\n   | |___________^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\r\n```\r\n\r\nThe function the compiler complains about:\r\n\r\n```rust\r\npub async fn get_module_state(\r\n    &'_ self,\r\n    workflow_id: &WorkflowGroupId,\r\n    fmid: &Fmid,\r\n) -> Option<RwLockReadGuard<'_, [u8]>> {\r\n    let map_guard = self.module_state.read().await;\r\n\r\n    let contains_state = map_guard\r\n        .get(workflow_id)\r\n        .map(|map| map.contains_key(fmid))\r\n        .unwrap_or_default();\r\n\r\n    if !contains_state {\r\n        return None;\r\n    }\r\n\r\n    Some(RwLockReadGuard::map(map_guard, |map| {\r\n        &**map.get(workflow_id).unwrap().get(fmid).unwrap()\r\n    }))\r\n}\r\n```\r\n\r\nWhen undoing the one-line change, the code compiled fine again, and after redoing it, it failed to compile again.\r\nNow, after indenting a few pieces of code, to make pasting them into GitHub easier, the compiler again accepts the code.\r\nI'm also no longer able to recreate the error.\r\n\r\nI know, that's essentially nothing to work with, and I'm not even able to recreate the issue myself anymore, but it seems worth reporting to me.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96645/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96645/timeline", "performed_via_github_app": null, "state_reason": null}