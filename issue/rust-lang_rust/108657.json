{"url": "https://api.github.com/repos/rust-lang/rust/issues/108657", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108657/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108657/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108657/events", "html_url": "https://github.com/rust-lang/rust/issues/108657", "id": 1606832588, "node_id": "I_kwDOAAsO6M5fxlHM", "number": 108657, "title": "rustc panicked while introducing a base trait", "user": {"login": "jmmv", "id": 879272, "node_id": "MDQ6VXNlcjg3OTI3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/879272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmmv", "html_url": "https://github.com/jmmv", "followers_url": "https://api.github.com/users/jmmv/followers", "following_url": "https://api.github.com/users/jmmv/following{/other_user}", "gists_url": "https://api.github.com/users/jmmv/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmmv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmmv/subscriptions", "organizations_url": "https://api.github.com/users/jmmv/orgs", "repos_url": "https://api.github.com/users/jmmv/repos", "events_url": "https://api.github.com/users/jmmv/events{/privacy}", "received_events_url": "https://api.github.com/users/jmmv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-03-02T13:43:10Z", "updated_at": "2023-03-02T14:10:37Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n-->\r\n\r\n### Code\r\n\r\nI don't have a minimal repro, but I do have a relatively small diff of the change that triggered the problem. I am hiding it behind a \"Details\" section, like the backtrace, to keep the overview of the bug report short.\r\n\r\nWhat I am doing, essentially, is adding a new trait to act as the supertrait of other two traits, and moving one common function to it.\r\n\r\n<details><summary><strong>Code diff</strong></summary>\r\n<p>\r\n\r\n```patch\r\ndiff --git a/data/src/db/mod.rs b/data/src/db/mod.rs\r\nindex 9d67e43..fab55b8 100644\r\n--- a/data/src/db/mod.rs\r\n+++ b/data/src/db/mod.rs\r\n@@ -5,7 +5,7 @@\r\n \r\n use crate::geo::CountryIsoCode;\r\n use crate::model::*;\r\n-use rest_utils::db::{DbError, DbResult};\r\n+use rest_utils::db::{BareTx, DbError, DbResult};\r\n use std::collections::BTreeMap;\r\n use uuid::Uuid;\r\n #[cfg(test)]\r\n@@ -25,10 +25,7 @@ impl From<ModelError> for DbError {\r\n \r\n /// A transaction with high-level operations that deal with our types.\r\n #[async_trait::async_trait]\r\n-pub(crate) trait DataTx {\r\n-    /// Commits the transaction.  The transaction is rolled back on drop unless this is called.\r\n-    async fn commit(self) -> DbResult<()>;\r\n-\r\n+pub(crate) trait DataTx: BareTx {\r\n     /// Gets a `Site` based on its `site_id`.\r\n     async fn get_site(&mut self, site_id: Uuid) -> DbResult<Site>;\r\n \r\ndiff --git a/data/src/db/pgsql.rs b/data/src/db/pgsql.rs\r\nindex 0e24aff..1f9566b 100644\r\n--- a/data/src/db/pgsql.rs\r\n+++ b/data/src/db/pgsql.rs\r\n@@ -7,6 +7,7 @@ use crate::db::{count_as_usize, parse_country_iso_code, parse_url, DataTx, DbErr\r\n use crate::geo::CountryIsoCode;\r\n use crate::model::*;\r\n use futures::TryStreamExt;\r\n+use rest_utils::db::BareTx;\r\n use sqlx::postgres::PgDatabaseError;\r\n use sqlx::{Postgres, Row, Transaction};\r\n use std::collections::BTreeMap;\r\n@@ -56,11 +57,14 @@ impl From<Transaction<'static, Postgres>> for PostgresDataTx {\r\n }\r\n \r\n #[async_trait::async_trait]\r\n-impl DataTx for PostgresDataTx {\r\n+impl BareTx for PostgresDataTx {\r\n     async fn commit(mut self) -> DbResult<()> {\r\n         self.tx.commit().await.map_err(map_sqlx_error)\r\n     }\r\n+}\r\n \r\n+#[async_trait::async_trait]\r\n+impl DataTx for PostgresDataTx {\r\n     async fn get_site(&mut self, site_id: Uuid) -> DbResult<Site> {\r\n         let query_str = \"SELECT title, email FROM sites WHERE site_id = $1\";\r\n         let row = sqlx::query(query_str)\r\ndiff --git a/data/src/db/sqlite.rs b/data/src/db/sqlite.rs\r\nindex 7edc250..f571266 100644\r\n--- a/data/src/db/sqlite.rs\r\n+++ b/data/src/db/sqlite.rs\r\n@@ -9,6 +9,7 @@ use crate::model::*;\r\n use futures::lock::Mutex;\r\n use futures::TryStreamExt;\r\n use rest_utils::db::sqlite::map_sqlx_error;\r\n+use rest_utils::db::BareTx;\r\n use sqlx::{Row, Sqlite, Transaction};\r\n use std::collections::BTreeMap;\r\n use std::convert::{TryFrom, TryInto};\r\n@@ -95,12 +96,15 @@ impl From<Mutex<Transaction<'static, Sqlite>>> for SqliteDataTx {\r\n }\r\n \r\n #[async_trait::async_trait]\r\n-impl DataTx for SqliteDataTx {\r\n-    async fn commit(self) -> DbResult<()> {\r\n+impl BareTx for SqliteDataTx {\r\n+    async fn commit(mut self) -> DbResult<()> {\r\n         let tx = self.tx.into_inner();\r\n         tx.commit().await.map_err(map_sqlx_error)\r\n     }\r\n+}\r\n \r\n+#[async_trait::async_trait]\r\n+impl DataTx for SqliteDataTx {\r\n     async fn get_site(&mut self, site_id: Uuid) -> DbResult<Site> {\r\n         let mut tx = self.tx.lock().await;\r\n \r\ndiff --git a/data/src/driver/batch.rs b/data/src/driver/batch.rs\r\nindex f8c5d8a..df618b1 100644\r\n--- a/data/src/driver/batch.rs\r\n+++ b/data/src/driver/batch.rs\r\n@@ -8,7 +8,7 @@ use crate::abuse::AbusePolicy;\r\n use crate::db::DataTx;\r\n use crate::model::{Comment, HttpMethod, Request, VoteCounts, VoteId, VoteReaction};\r\n use log::warn;\r\n-use rest_utils::db::{Db, DbError};\r\n+use rest_utils::db::{BareTx, Db, DbError};\r\n use uuid::Uuid;\r\n \r\n /// Operations requested in batch for the page.\r\ndiff --git a/data/src/driver/count_votes.rs b/data/src/driver/count_votes.rs\r\nindex d061f06..dbc9922 100644\r\n--- a/data/src/driver/count_votes.rs\r\n+++ b/data/src/driver/count_votes.rs\r\n@@ -9,7 +9,7 @@ use crate::{\r\n     db::DataTx,\r\n     model::{VoteCounts, VoteId, VoteReaction},\r\n };\r\n-use rest_utils::db::{Db, DbError};\r\n+use rest_utils::db::{BareTx, Db, DbError};\r\n use url::Url;\r\n use uuid::Uuid;\r\n \r\ndiff --git a/data/src/driver/delete_vote.rs b/data/src/driver/delete_vote.rs\r\nindex 992ea16..2bf3089 100644\r\n--- a/data/src/driver/delete_vote.rs\r\n+++ b/data/src/driver/delete_vote.rs\r\n@@ -5,7 +5,7 @@\r\n \r\n use super::{ensure_path_in_site, Driver, DriverResult};\r\n use crate::{abuse::AbusePolicy, db::DataTx, model::VoteId};\r\n-use rest_utils::db::Db;\r\n+use rest_utils::db::{BareTx, Db};\r\n \r\n impl<A, D> Driver<A, D>\r\n where\r\ndiff --git a/data/src/driver/get_comments.rs b/data/src/driver/get_comments.rs\r\nindex a56982b..6f96803 100644\r\n--- a/data/src/driver/get_comments.rs\r\n+++ b/data/src/driver/get_comments.rs\r\n@@ -5,7 +5,7 @@\r\n \r\n use super::{ensure_path_in_site, Driver, DriverResult};\r\n use crate::{abuse::AbusePolicy, db::DataTx, model::Comment};\r\n-use rest_utils::db::Db;\r\n+use rest_utils::db::{BareTx, Db};\r\n use url::Url;\r\n use uuid::Uuid;\r\n \r\ndiff --git a/data/src/driver/put_comment.rs b/data/src/driver/put_comment.rs\r\nindex a7ebb77..2824344 100644\r\n--- a/data/src/driver/put_comment.rs\r\n+++ b/data/src/driver/put_comment.rs\r\n@@ -5,7 +5,7 @@\r\n \r\n use super::{ensure_path_in_site, Driver, DriverResult};\r\n use crate::{abuse::AbusePolicy, db::DataTx, model::Comment};\r\n-use rest_utils::db::Db;\r\n+use rest_utils::db::{BareTx, Db};\r\n use uuid::Uuid;\r\n \r\n impl<A, D> Driver<A, D>\r\ndiff --git a/data/src/driver/put_request.rs b/data/src/driver/put_request.rs\r\nindex ff497d9..fddbb3f 100644\r\n--- a/data/src/driver/put_request.rs\r\n+++ b/data/src/driver/put_request.rs\r\n@@ -6,7 +6,7 @@\r\n use super::{ensure_path_in_site, Driver, DriverResult};\r\n use crate::{abuse::AbusePolicy, db::DataTx, model::Request};\r\n use log::warn;\r\n-use rest_utils::db::Db;\r\n+use rest_utils::db::{BareTx, Db};\r\n use uuid::Uuid;\r\n \r\n /// Information computed when storing a request that may be useful to the client.\r\ndiff --git a/data/src/driver/put_vote.rs b/data/src/driver/put_vote.rs\r\nindex 1acbfc8..a816561 100644\r\n--- a/data/src/driver/put_vote.rs\r\n+++ b/data/src/driver/put_vote.rs\r\n@@ -7,7 +7,7 @@ use super::{ensure_path_in_site, Driver, DriverResult};\r\n use crate::abuse::AbusePolicy;\r\n use crate::db::DataTx;\r\n use crate::model::{Vote, VoteId};\r\n-use rest_utils::db::Db;\r\n+use rest_utils::db::{BareTx, Db};\r\n \r\n impl<A, D> Driver<A, D>\r\n where\r\ndiff --git a/rest-utils/src/db/mod.rs b/rest-utils/src/db/mod.rs\r\nindex 420331a..61b0713 100644\r\n--- a/rest-utils/src/db/mod.rs\r\n+++ b/rest-utils/src/db/mod.rs\r\n@@ -3,6 +3,8 @@\r\n \r\n //! Generic features and types to access a database.\r\n \r\n+use async_trait::async_trait;\r\n+\r\n #[cfg(feature = \"postgres\")]\r\n pub mod postgres;\r\n #[cfg(feature = \"sqlite\")]\r\n@@ -38,15 +40,21 @@ pub enum DbError {\r\n pub type DbResult<T> = Result<T, DbError>;\r\n \r\n /// Abstraction over the database connection.\r\n-#[async_trait::async_trait]\r\n+#[async_trait]\r\n pub trait Db {\r\n     /// Type of the wrapped sqlx transaction.\r\n     type SqlxTx;\r\n \r\n     /// Type of the transaction wrapper type to generate.\r\n-    // DO NOT SUBMIT: Add BareTx.\r\n-    type Tx: From<Self::SqlxTx> + Send + Sync + 'static;\r\n+    type Tx: BareTx + From<Self::SqlxTx> + Send + Sync + 'static;\r\n \r\n     /// Begins a transaction.\r\n     async fn begin(&self) -> DbResult<Self::Tx>;\r\n }\r\n+\r\n+/// Common operations for all transactions.\r\n+#[async_trait]\r\n+pub trait BareTx {\r\n+    /// Commits the transaction.\r\n+    async fn commit(mut self) -> DbResult<()>;\r\n+}\r\ndiff --git a/rest-utils/src/db/postgres.rs b/rest-utils/src/db/postgres.rs\r\nindex a887d1f..e2398f3 100644\r\n--- a/rest-utils/src/db/postgres.rs\r\n+++ b/rest-utils/src/db/postgres.rs\r\n@@ -3,7 +3,7 @@\r\n \r\n //! Common utilities to interact with a PostgreSQL database.\r\n \r\n-use crate::db::{Db, DbError, DbResult};\r\n+use crate::db::{BareTx, Db, DbError, DbResult};\r\n use derivative::Derivative;\r\n use sqlx::postgres::{PgConnectOptions, PgDatabaseError, PgPool, PgPoolOptions, Postgres};\r\n use sqlx::Transaction;\r\n@@ -96,7 +96,7 @@ impl PostgresOptions {\r\n #[derivative(Clone(bound = \"\"))]\r\n pub struct PostgresDb<T>\r\n where\r\n-    T: From<Transaction<'static, Postgres>> + Send + Sync + 'static,\r\n+    T: BareTx + From<Transaction<'static, Postgres>> + Send + Sync + 'static,\r\n {\r\n     /// Shared PostgreSQL connection pool.  This is a cloneable type that all concurrent\r\n     /// transactions can use it concurrently.\r\n@@ -108,7 +108,7 @@ where\r\n \r\n impl<T> PostgresDb<T>\r\n where\r\n-    T: From<Transaction<'static, Postgres>> + Send + Sync + 'static,\r\n+    T: BareTx + From<Transaction<'static, Postgres>> + Send + Sync + 'static,\r\n {\r\n     /// Creates a new connection with a set of pool options.\r\n     fn connect_lazy_with_pool_options(opts: PostgresOptions, pool_options: PgPoolOptions) -> Self {\r\n@@ -173,7 +173,7 @@ where\r\n \r\n impl<T> Drop for PostgresDb<T>\r\n where\r\n-    T: From<Transaction<'static, Postgres>> + Send + Sync + 'static,\r\n+    T: BareTx + From<Transaction<'static, Postgres>> + Send + Sync + 'static,\r\n {\r\n     #[allow(unused_must_use)]\r\n     fn drop(&mut self) {\r\n@@ -190,7 +190,7 @@ where\r\n #[async_trait::async_trait]\r\n impl<T> Db for PostgresDb<T>\r\n where\r\n-    T: From<Transaction<'static, Postgres>> + Send + Sync + 'static,\r\n+    T: BareTx + From<Transaction<'static, Postgres>> + Send + Sync + 'static,\r\n {\r\n     type SqlxTx = Transaction<'static, Postgres>;\r\n     type Tx = T;\r\n@@ -209,7 +209,7 @@ pub mod testutils {\r\n     /// Creates a new connection to the test database and initializes it.\r\n     pub async fn setup<T>(schema: &str) -> PostgresDb<T>\r\n     where\r\n-        T: From<Transaction<'static, Postgres>> + Send + Sync + 'static,\r\n+        T: BareTx + From<Transaction<'static, Postgres>> + Send + Sync + 'static,\r\n     {\r\n         let _can_fail = env_logger::builder().is_test(true).try_init();\r\n \r\ndiff --git a/rest-utils/src/db/sqlite.rs b/rest-utils/src/db/sqlite.rs\r\nindex 5e29399..afd5435 100644\r\n--- a/rest-utils/src/db/sqlite.rs\r\n+++ b/rest-utils/src/db/sqlite.rs\r\n@@ -3,14 +3,13 @@\r\n \r\n //! Common utilities to interact with an SQLite database.\r\n \r\n-use std::marker::PhantomData;\r\n-\r\n-use crate::db::{Db, DbError, DbResult};\r\n+use crate::db::{BareTx, Db, DbError, DbResult};\r\n use derivative::Derivative;\r\n use futures::lock::Mutex;\r\n use futures::TryStreamExt;\r\n use sqlx::sqlite::{Sqlite, SqlitePool};\r\n use sqlx::Transaction;\r\n+use std::marker::PhantomData;\r\n \r\n /// Takes a raw SQLx error `e` and converts it to our generic error type.\r\n pub fn map_sqlx_error(e: sqlx::Error) -> DbError {\r\n@@ -28,7 +27,7 @@ pub fn map_sqlx_error(e: sqlx::Error) -> DbError {\r\n #[derivative(Clone(bound = \"\"))]\r\n pub struct SqliteDb<T>\r\n where\r\n-    T: From<Mutex<Transaction<'static, Sqlite>>> + Send + Sync + 'static,\r\n+    T: BareTx + From<Mutex<Transaction<'static, Sqlite>>> + Send + Sync + 'static,\r\n {\r\n     /// Shared SQLite connection pool.  This is a cloneable type that all concurrent\r\n     /// transactions can use it concurrently.\r\n@@ -40,7 +39,7 @@ where\r\n \r\n impl<T> SqliteDb<T>\r\n where\r\n-    T: From<Mutex<Transaction<'static, Sqlite>>> + Send + Sync + 'static,\r\n+    T: BareTx + From<Mutex<Transaction<'static, Sqlite>>> + Send + Sync + 'static,\r\n {\r\n     /// Creates a new connection and sets the database schema.\r\n     pub async fn connect(schema: &str) -> DbResult<Self> {\r\n@@ -62,7 +61,7 @@ where\r\n #[async_trait::async_trait]\r\n impl<T> Db for SqliteDb<T>\r\n where\r\n-    T: From<Mutex<Transaction<'static, Sqlite>>> + Send + Sync + 'static,\r\n+    T: BareTx + From<Mutex<Transaction<'static, Sqlite>>> + Send + Sync + 'static,\r\n {\r\n     type SqlxTx = Mutex<Transaction<'static, Sqlite>>;\r\n     type Tx = T;\r\n@@ -81,7 +80,7 @@ pub mod testutils {\r\n     /// Initializes the test database with a schema.\r\n     pub async fn setup<T>(schema: &str) -> SqliteDb<T>\r\n     where\r\n-        T: From<Mutex<Transaction<'static, Sqlite>>> + Send + Sync + 'static,\r\n+        T: BareTx + From<Mutex<Transaction<'static, Sqlite>>> + Send + Sync + 'static,\r\n     {\r\n         let _can_fail = env_logger::builder().is_test(true).try_init();\r\n ```\r\n\r\n</p>\r\n</details>\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nnote: rustc 1.67.1 (d5a82bbd2 2023-02-07) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C linker=clang -C incremental=[REDACTED] -C link-arg=-fuse-ld=/usr/bin/mold\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'forcing query with already existing `DepNode`\r\n- query-key: Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<<D as rest_utils::db::Db>::Tx as std::convert::From<<D as rest_utils::db::Db>::SqlxTx>>, polarity:Positive), []), Binder(TraitPredicate(<<D as rest_utils::db::Db>::Tx as std::marker::Sized>, polarity:Positive), []), Binder(TraitPredicate(<<D as rest_utils::db::Db>::Tx as db::DataTx>, polarity:Positive), []), Binder(TraitPredicate(<<D as rest_utils::db::Db>::Tx as rest_utils::db::BareTx>, polarity:Positive), []), Binder(TraitPredicate(<D as rest_utils::db::Db>, polarity:Positive), []), Binder(TraitPredicate(<D as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst }, value: Normalize { value: [async fn body@data/src/db/testutils.rs:214:1: 283:2] } } }\r\n- dep-node: type_op_normalize_ty(85797b8fca3b0266-a115299a28e80846)', /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/compiler/rustc_query_system/src/dep_graph/graph.rs:316:9\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\n   Compiling service-data v0.0.0 (/home/jmmv/os/service/data)\r\nthread 'rustc' panicked at 'forcing query with already existing `DepNode`\r\n- query-key: Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<<D as rest_utils::db::Db>::Tx as std::convert::From<<D as rest_utils::db::Db>::SqlxTx>>, polarity:Positive), []), Binder(TraitPredicate(<<D as rest_utils::db::Db>::Tx as std::marker::Sized>, polarity:Positive), []), Binder(TraitPredicate(<<D as rest_utils::db::Db>::Tx as db::DataTx>, polarity:Positive), []), Binder(TraitPredicate(<<D as rest_utils::db::Db>::Tx as rest_utils::db::BareTx>, polarity:Positive), []), Binder(TraitPredicate(<D as rest_utils::db::Db>, polarity:Positive), []), Binder(TraitPredicate(<D as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst }, value: Normalize { value: [async fn body@data/src/db/testutils.rs:214:1: 283:2] } } }\r\n- dep-node: type_op_normalize_ty(85797b8fca3b0266-a115299a28e80846)', /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/compiler/rustc_query_system/src/dep_graph/graph.rs:316:9\r\nstack backtrace:\r\n   0:     0x7f27979656fa - std::backtrace_rs::backtrace::libunwind::trace::h79937bc171ada62c\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\r\n   1:     0x7f27979656fa - std::backtrace_rs::backtrace::trace_unsynchronized::h2292bca8571cb919\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\r\n   2:     0x7f27979656fa - std::sys_common::backtrace::_print_fmt::h9c461f248e4ae90d\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/sys_common/backtrace.rs:65:5\r\n   3:     0x7f27979656fa - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::he9fe6bf1a39182e1\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/sys_common/backtrace.rs:44:22\r\n   4:     0x7f27979c825e - core::fmt::write::h032658c119c720d7\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/core/src/fmt/mod.rs:1208:17\r\n   5:     0x7f2797955a85 - std::io::Write::write_fmt::h299fc90dfae41c0d\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/io/mod.rs:1682:15\r\n   6:     0x7f27979654c5 - std::sys_common::backtrace::_print::heb70d25df9937e3f\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/sys_common/backtrace.rs:47:5\r\n   7:     0x7f27979654c5 - std::sys_common::backtrace::print::had745c0a76b8b521\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/sys_common/backtrace.rs:34:9\r\n   8:     0x7f279796820f - std::panicking::default_hook::{{closure}}::h1ea782cdfa2fd097\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/panicking.rs:267:22\r\n   9:     0x7f2797967f4b - std::panicking::default_hook::h1cc3af63455a163c\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/panicking.rs:286:9\r\n  10:     0x7f279ac60ab1 - <rustc_driver[5c3b90d1fb3964ba]::DEFAULT_HOOK::{closure#0}::{closure#0} as core[e6a29f2585b3d454]::ops::function::FnOnce<(&core[e6a29f2585b3d454]::panic::panic_info::PanicInfo,)>>::call_once::{shim:vtable#0}\r\n  11:     0x7f2797968a4d - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::h6e4950ba7c0fd82a\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/alloc/src/boxed.rs:2032:9\r\n  12:     0x7f2797968a4d - std::panicking::rust_panic_with_hook::h5cafdc4b3bfd5528\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/panicking.rs:692:13\r\n  13:     0x7f27979687c9 - std::panicking::begin_panic_handler::{{closure}}::hf31c60f40775892c\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/panicking.rs:579:13\r\n  14:     0x7f2797965bac - std::sys_common::backtrace::__rust_end_short_backtrace::h28a5c7be595826cd\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/sys_common/backtrace.rs:137:18\r\n  15:     0x7f27979684d2 - rust_begin_unwind\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/panicking.rs:575:5\r\n  16:     0x7f27979c4c43 - core::panicking::panic_fmt::h8fa27a0b37dd98b7\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/core/src/panicking.rs:64:14\r\n  17:     0x7f2799f7f2e0 - <rustc_query_system[7dbbccfee5a2d054]::dep_graph::graph::DepGraph<rustc_middle[83f907612b22699d]::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle[83f907612b22699d]::ty::context::TyCtxt, rustc_middle[83f907612b22699d]::infer::canonical::Canonical<rustc_middle[83f907612b22699d]::ty::ParamEnvAnd<rustc_middle[83f907612b22699d]::traits::query::type_op::Normalize<rustc_middle[83f907612b22699d]::ty::Ty>>>, core[e6a29f2585b3d454]::result::Result<&rustc_middle[83f907612b22699d]::infer::canonical::Canonical<rustc_middle[83f907612b22699d]::infer::canonical::QueryResponse<rustc_middle[83f907612b22699d]::ty::Ty>>, rustc_middle[83f907612b22699d]::traits::query::NoSolution>>\r\n  18:     0x7f2799f7d7e9 - rustc_query_system[7dbbccfee5a2d054]::query::plumbing::try_execute_query::<rustc_query_impl[e214cefb6de2a99d]::plumbing::QueryCtxt, rustc_query_system[7dbbccfee5a2d054]::query::caches::DefaultCache<rustc_middle[83f907612b22699d]::infer::canonical::Canonical<rustc_middle[83f907612b22699d]::ty::ParamEnvAnd<rustc_middle[83f907612b22699d]::traits::query::type_op::Normalize<rustc_middle[83f907612b22699d]::ty::Ty>>>, core[e6a29f2585b3d454]::result::Result<&rustc_middle[83f907612b22699d]::infer::canonical::Canonical<rustc_middle[83f907612b22699d]::infer::canonical::QueryResponse<rustc_middle[83f907612b22699d]::ty::Ty>>, rustc_middle[83f907612b22699d]::traits::query::NoSolution>>>\r\n  19:     0x7f2799f7cf5d - rustc_query_system[7dbbccfee5a2d054]::query::plumbing::get_query::<rustc_query_impl[e214cefb6de2a99d]::queries::type_op_normalize_ty, rustc_query_impl[e214cefb6de2a99d]::plumbing::QueryCtxt>\r\n  20:     0x7f2799f7cea3 - <rustc_query_impl[e214cefb6de2a99d]::Queries as rustc_middle[83f907612b22699d]::ty::query::QueryEngine>::type_op_normalize_ty\r\n  21:     0x7f2799ac6dce - <rustc_middle[83f907612b22699d]::ty::ParamEnvAnd<rustc_middle[83f907612b22699d]::traits::query::type_op::Normalize<rustc_middle[83f907612b22699d]::ty::Ty>> as rustc_trait_selection[945b70100f8dd3ec]::traits::query::type_op::TypeOp>::fully_perform\r\n  22:     0x7f2799a8c1a6 - <&mut <rustc_borrowck[323b14a08f10fded]::type_check::free_region_relations::UniversalRegionRelationsBuilder>::create::{closure#0} as core[e6a29f2585b3d454]::ops::function::FnOnce<(rustc_middle[83f907612b22699d]::ty::Ty,)>>::call_once\r\n  23:     0x7f2799a8ba92 - <alloc[89959c1738bdde42]::vec::Vec<&rustc_middle[83f907612b22699d]::infer::canonical::QueryRegionConstraints> as alloc[89959c1738bdde42]::vec::spec_from_iter::SpecFromIter<&rustc_middle[83f907612b22699d]::infer::canonical::QueryRegionConstraints, core[e6a29f2585b3d454]::iter::adapters::flatten::FlatMap<core[e6a29f2585b3d454]::iter::adapters::chain::Chain<core[e6a29f2585b3d454]::iter::adapters::cloned::Cloned<core[e6a29f2585b3d454]::slice::iter::Iter<rustc_middle[83f907612b22699d]::ty::Ty>>, core[e6a29f2585b3d454]::option::IntoIter<rustc_middle[83f907612b22699d]::ty::Ty>>, core[e6a29f2585b3d454]::iter::adapters::chain::Chain<core[e6a29f2585b3d454]::iter::adapters::chain::Chain<core[e6a29f2585b3d454]::option::IntoIter<&rustc_middle[83f907612b22699d]::infer::canonical::QueryRegionConstraints>, core[e6a29f2585b3d454]::option::IntoIter<&rustc_middle[83f907612b22699d]::infer::canonical::QueryRegionConstraints>>, core[e6a29f2585b3d454]::option::IntoIter<&rustc_middle[83f907612b22699d]::infer::canonical::QueryRegionConstraints>>, <rustc_borrowck[323b14a08f10fded]::type_check::free_region_relations::UniversalRegionRelationsBuilder>::create::{closure#0}>>>::from_iter\r\n  24:     0x7f2799a86b29 - rustc_borrowck[323b14a08f10fded]::type_check::free_region_relations::create\r\n  25:     0x7f2799a7b248 - rustc_borrowck[323b14a08f10fded]::type_check::type_check\r\n  26:     0x7f2799a52165 - rustc_borrowck[323b14a08f10fded]::nll::compute_regions\r\n  27:     0x7f2799a2fdcb - rustc_borrowck[323b14a08f10fded]::do_mir_borrowck\r\n  28:     0x7f2799a2bbf9 - rustc_borrowck[323b14a08f10fded]::mir_borrowck\r\n  29:     0x7f2799a2b0d5 - <rustc_borrowck[323b14a08f10fded]::provide::{closure#0} as core[e6a29f2585b3d454]::ops::function::FnOnce<(rustc_middle[83f907612b22699d]::ty::context::TyCtxt, rustc_span[41a321a6411ba4fa]::def_id::LocalDefId)>>::call_once\r\n  30:     0x7f2799d222ac - <rustc_query_system[7dbbccfee5a2d054]::dep_graph::graph::DepGraph<rustc_middle[83f907612b22699d]::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle[83f907612b22699d]::ty::context::TyCtxt, rustc_span[41a321a6411ba4fa]::def_id::LocalDefId, &rustc_middle[83f907612b22699d]::mir::query::BorrowCheckResult>\r\n  31:     0x7f2799d20fbc - rustc_query_system[7dbbccfee5a2d054]::query::plumbing::try_execute_query::<rustc_query_impl[e214cefb6de2a99d]::plumbing::QueryCtxt, rustc_query_system[7dbbccfee5a2d054]::query::caches::VecCache<rustc_span[41a321a6411ba4fa]::def_id::LocalDefId, &rustc_middle[83f907612b22699d]::mir::query::BorrowCheckResult>>\r\n  32:     0x7f279a60640a - <rustc_query_impl[e214cefb6de2a99d]::Queries as rustc_middle[83f907612b22699d]::ty::query::QueryEngine>::mir_borrowck\r\n  33:     0x7f2799b1b811 - <rustc_borrowck[323b14a08f10fded]::type_check::TypeChecker>::prove_closure_bounds\r\n  34:     0x7f2799af6a26 - <rustc_borrowck[323b14a08f10fded]::type_check::TypeChecker>::typeck_mir\r\n  35:     0x7f2799a7b5c3 - rustc_borrowck[323b14a08f10fded]::type_check::type_check\r\n  36:     0x7f2799a52165 - rustc_borrowck[323b14a08f10fded]::nll::compute_regions\r\n  37:     0x7f2799a2fdcb - rustc_borrowck[323b14a08f10fded]::do_mir_borrowck\r\n  38:     0x7f2799a2bbf9 - rustc_borrowck[323b14a08f10fded]::mir_borrowck\r\n  39:     0x7f2799a2b0d5 - <rustc_borrowck[323b14a08f10fded]::provide::{closure#0} as core[e6a29f2585b3d454]::ops::function::FnOnce<(rustc_middle[83f907612b22699d]::ty::context::TyCtxt, rustc_span[41a321a6411ba4fa]::def_id::LocalDefId)>>::call_once\r\n  40:     0x7f2799d222ac - <rustc_query_system[7dbbccfee5a2d054]::dep_graph::graph::DepGraph<rustc_middle[83f907612b22699d]::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle[83f907612b22699d]::ty::context::TyCtxt, rustc_span[41a321a6411ba4fa]::def_id::LocalDefId, &rustc_middle[83f907612b22699d]::mir::query::BorrowCheckResult>\r\n  41:     0x7f2799d20fbc - rustc_query_system[7dbbccfee5a2d054]::query::plumbing::try_execute_query::<rustc_query_impl[e214cefb6de2a99d]::plumbing::QueryCtxt, rustc_query_system[7dbbccfee5a2d054]::query::caches::VecCache<rustc_span[41a321a6411ba4fa]::def_id::LocalDefId, &rustc_middle[83f907612b22699d]::mir::query::BorrowCheckResult>>\r\n  42:     0x7f279b41bab6 - rustc_query_system[7dbbccfee5a2d054]::query::plumbing::force_query::<rustc_query_impl[e214cefb6de2a99d]::queries::mir_borrowck, rustc_query_impl[e214cefb6de2a99d]::plumbing::QueryCtxt>\r\n  43:     0x7f279b5901d1 - rustc_query_impl[e214cefb6de2a99d]::plumbing::force_from_dep_node::<rustc_query_impl[e214cefb6de2a99d]::queries::mir_borrowck>\r\n  44:     0x7f2798cbb039 - <rustc_query_system[7dbbccfee5a2d054]::dep_graph::graph::DepGraph<rustc_middle[83f907612b22699d]::dep_graph::dep_node::DepKind>>::try_mark_previous_green::<rustc_query_impl[e214cefb6de2a99d]::plumbing::QueryCtxt>\r\n  45:     0x7f2799587bf9 - rustc_query_system[7dbbccfee5a2d054]::query::plumbing::get_query::<rustc_query_impl[e214cefb6de2a99d]::queries::type_of, rustc_query_impl[e214cefb6de2a99d]::plumbing::QueryCtxt>\r\n  46:     0x7f27996484bc - rustc_hir_analysis[44326659f1d3f01d]::check::check::check_mod_item_types\r\n  47:     0x7f279980877c - <rustc_query_system[7dbbccfee5a2d054]::dep_graph::graph::DepGraph<rustc_middle[83f907612b22699d]::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle[83f907612b22699d]::ty::context::TyCtxt, rustc_span[41a321a6411ba4fa]::def_id::LocalDefId, ()>\r\n  48:     0x7f279980668e - rustc_query_system[7dbbccfee5a2d054]::query::plumbing::try_execute_query::<rustc_query_impl[e214cefb6de2a99d]::plumbing::QueryCtxt, rustc_query_system[7dbbccfee5a2d054]::query::caches::VecCache<rustc_span[41a321a6411ba4fa]::def_id::LocalDefId, ()>>\r\n  49:     0x7f279a002a83 - rustc_query_system[7dbbccfee5a2d054]::query::plumbing::get_query::<rustc_query_impl[e214cefb6de2a99d]::queries::check_mod_item_types, rustc_query_impl[e214cefb6de2a99d]::plumbing::QueryCtxt>\r\n  50:     0x7f279a2db4c5 - <rustc_middle[83f907612b22699d]::hir::map::Map>::for_each_module::<rustc_hir_analysis[44326659f1d3f01d]::check_crate::{closure#6}::{closure#0}>\r\n  51:     0x7f279915ad42 - rustc_hir_analysis[44326659f1d3f01d]::check_crate\r\n  52:     0x7f279915a98b - rustc_interface[65dcc5dffb099e04]::passes::analysis\r\n  53:     0x7f279a41291f - <rustc_query_system[7dbbccfee5a2d054]::dep_graph::graph::DepGraph<rustc_middle[83f907612b22699d]::dep_graph::dep_node::DepKind>>::with_task::<rustc_middle[83f907612b22699d]::ty::context::TyCtxt, (), core[e6a29f2585b3d454]::result::Result<(), rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>>\r\n  54:     0x7f279a411a17 - rustc_query_system[7dbbccfee5a2d054]::query::plumbing::try_execute_query::<rustc_query_impl[e214cefb6de2a99d]::plumbing::QueryCtxt, rustc_query_system[7dbbccfee5a2d054]::query::caches::DefaultCache<(), core[e6a29f2585b3d454]::result::Result<(), rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>>>\r\n  55:     0x7f279a411470 - rustc_query_system[7dbbccfee5a2d054]::query::plumbing::get_query::<rustc_query_impl[e214cefb6de2a99d]::queries::analysis, rustc_query_impl[e214cefb6de2a99d]::plumbing::QueryCtxt>\r\n  56:     0x7f2799e241b3 - <rustc_interface[65dcc5dffb099e04]::passes::QueryContext>::enter::<rustc_driver[5c3b90d1fb3964ba]::run_compiler::{closure#1}::{closure#2}::{closure#2}, core[e6a29f2585b3d454]::result::Result<(), rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>>\r\n  57:     0x7f2799e20733 - <rustc_interface[65dcc5dffb099e04]::interface::Compiler>::enter::<rustc_driver[5c3b90d1fb3964ba]::run_compiler::{closure#1}::{closure#2}, core[e6a29f2585b3d454]::result::Result<core[e6a29f2585b3d454]::option::Option<rustc_interface[65dcc5dffb099e04]::queries::Linker>, rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>>\r\n  58:     0x7f2799e1b788 - rustc_span[41a321a6411ba4fa]::with_source_map::<core[e6a29f2585b3d454]::result::Result<(), rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>, rustc_interface[65dcc5dffb099e04]::interface::run_compiler<core[e6a29f2585b3d454]::result::Result<(), rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>, rustc_driver[5c3b90d1fb3964ba]::run_compiler::{closure#1}>::{closure#0}::{closure#0}>\r\n  59:     0x7f2799e1b275 - <scoped_tls[393dd8f8fd825c8d]::ScopedKey<rustc_span[41a321a6411ba4fa]::SessionGlobals>>::set::<rustc_interface[65dcc5dffb099e04]::interface::run_compiler<core[e6a29f2585b3d454]::result::Result<(), rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>, rustc_driver[5c3b90d1fb3964ba]::run_compiler::{closure#1}>::{closure#0}, core[e6a29f2585b3d454]::result::Result<(), rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>>\r\n  60:     0x7f2799e1a862 - std[359ab902947f5f0b]::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface[65dcc5dffb099e04]::util::run_in_thread_pool_with_globals<rustc_interface[65dcc5dffb099e04]::interface::run_compiler<core[e6a29f2585b3d454]::result::Result<(), rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>, rustc_driver[5c3b90d1fb3964ba]::run_compiler::{closure#1}>::{closure#0}, core[e6a29f2585b3d454]::result::Result<(), rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[e6a29f2585b3d454]::result::Result<(), rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>>\r\n  61:     0x7f279a513b7a - <<std[359ab902947f5f0b]::thread::Builder>::spawn_unchecked_<rustc_interface[65dcc5dffb099e04]::util::run_in_thread_pool_with_globals<rustc_interface[65dcc5dffb099e04]::interface::run_compiler<core[e6a29f2585b3d454]::result::Result<(), rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>, rustc_driver[5c3b90d1fb3964ba]::run_compiler::{closure#1}>::{closure#0}, core[e6a29f2585b3d454]::result::Result<(), rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[e6a29f2585b3d454]::result::Result<(), rustc_errors[d24ea2395205e4f0]::ErrorGuaranteed>>::{closure#1} as core[e6a29f2585b3d454]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\r\n  62:     0x7f2797972803 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::hb77d8d72ebcf79c4\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/alloc/src/boxed.rs:2000:9\r\n  63:     0x7f2797972803 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::hc08c3353e1568487\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/alloc/src/boxed.rs:2000:9\r\n  64:     0x7f2797972803 - std::sys::unix::thread::Thread::new::thread_start::h7168e596cd5e5ce6\r\n                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/sys/unix/thread.rs:108:17\r\n  65:     0x7f2797706fd4 - <unknown>\r\n  66:     0x7f279778766c - <unknown>\r\n  67:                0x0 - <unknown>\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.67.1 (d5a82bbd2 2023-02-07) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C linker=clang -C incremental=[REDACTED] -C link-arg=-fuse-ld=/usr/bin/mold\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [type_op_normalize_ty] normalizing `[async fn body@data/src/db/testutils.rs:214:1: 283:2]`\r\n#1 [mir_borrowck] borrow-checking `db::testutils::test_count_requests_for_page::{closure#0}`\r\n#2 [mir_borrowck] borrow-checking `db::testutils::test_count_requests_for_page`\r\n#3 [type_of] computing type of `db::testutils::test_count_requests_for_page::{opaque#0}`\r\n#4 [check_mod_item_types] checking item types in module `db::testutils`\r\n#5 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror: could not compile `service-data`\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108657/timeline", "performed_via_github_app": null, "state_reason": null}