{"url": "https://api.github.com/repos/rust-lang/rust/issues/84314", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84314/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84314/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84314/events", "html_url": "https://github.com/rust-lang/rust/issues/84314", "id": 860731266, "node_id": "MDU6SXNzdWU4NjA3MzEyNjY=", "number": 84314, "title": "[ER] Array bound tests in a simple enough case", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-04-18T18:28:47Z", "updated_at": "2023-04-05T17:35:26Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This comes from reduction of code that implements a binary heap (sift up) on an array:\r\n\r\n```rust\r\npub fn foo(data: &[u32]) -> u32 {\r\n    let i = data.len();\r\n    if i / 2 == 0 {\r\n        return 0;\r\n    }\r\n    data[i - 1] + data[i / 2 - 1]\r\n}\r\n```\r\n\r\nrustc (1.53.0-nightly 392ba2ba1 2021-04-17) seems unable to remove the array bound tests, despite I think the code should be panic-less:\r\n\r\n```asm\r\nfoo:\r\n        sub     rsp, 8\r\n        mov     rdx, rsi\r\n        shr     rdx\r\n        je      .LBB0_6\r\n        mov     rcx, rsi\r\n        sub     rcx, 1\r\n        jb      .LBB0_4\r\n        lea     rax, [rdx - 1]\r\n        cmp     rax, rsi\r\n        jae     .LBB0_5\r\n        mov     eax, dword ptr [rdi + 4*rdx - 4]\r\n        add     eax, dword ptr [rdi + 4*rcx]\r\n        pop     rcx\r\n        ret\r\n.LBB0_6:\r\n        xor     eax, eax\r\n        pop     rcx\r\n        ret\r\n.LBB0_4:\r\n        lea     rdx, [rip + .L__unnamed_1]\r\n        mov     rdi, rcx\r\n        xor     esi, esi\r\n        call    qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\r\n        ud2\r\n.LBB0_5:\r\n        lea     rdx, [rip + .L__unnamed_2]\r\n        mov     rdi, rax\r\n        call    qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\r\n        ud2\r\n```\r\n\r\nI expected it to compile to something closer to:\r\n\r\n```asm\r\nfoo:\r\n        mov     rax, rsi\r\n        shr     rax\r\n        je      .LBB0_1\r\n        mov     eax, dword ptr [rdi + 4*rax - 4]\r\n        add     eax, dword ptr [rdi + 4*rsi - 4]\r\n        ret\r\n.LBB0_1:\r\n        xor     eax, eax\r\n        ret\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84314/timeline", "performed_via_github_app": null, "state_reason": null}