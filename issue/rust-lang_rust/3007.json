{"url": "https://api.github.com/repos/rust-lang/rust/issues/3007", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3007/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3007/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3007/events", "html_url": "https://github.com/rust-lang/rust/issues/3007", "id": 5819214, "node_id": "MDU6SXNzdWU1ODE5MjE0", "number": 3007, "title": "Unresolved name next in macro expansion", "user": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235146, "node_id": "MDU6TGFiZWwyMzUxNDY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-syntaxext", "name": "A-syntaxext", "color": "f7e101", "default": false, "description": "Area: Syntax extensions"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/8", "html_url": "https://github.com/rust-lang/rust/milestone/8", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/8/labels", "id": 144598, "node_id": "MDk6TWlsZXN0b25lMTQ0NTk4", "number": 8, "title": "0.5", "description": "", "creator": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 206, "state": "closed", "created_at": "2012-07-12T19:45:03Z", "updated_at": "2013-06-13T02:57:55Z", "due_on": "2012-12-22T08:00:00Z", "closed_at": "2013-06-13T02:57:55Z"}, "comments": 2, "created_at": "2012-07-24T22:55:03Z", "updated_at": "2014-06-16T21:56:25Z", "closed_at": "2012-08-06T20:50:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\n// Compare bounded and unbounded protocol performance.\n\n// xfail-pretty\n\nuse std;\n\nimport pipes::{spawn_service, recv};\nimport std::time::precise_time_s;\n\nproto! pingpong {\n    ping: send {\n        ping -> pong\n    }\n\n    pong: recv {\n        pong -> ping\n    }\n}\n\nproto! pingpong_unbounded {\n    ping: send {\n        ping -> pong\n    }\n\n    pong: recv {\n        pong -> ping\n    }\n\n    you_will_never_catch_me: send {\n        never_ever_ever -> you_will_never_catch_me\n    }\n}\n\n// This stuff should go in libcore::pipes\nmacro_rules! move {\n    { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n}\n\nmacro_rules! follow {\n    { \n        $($message:path($($x: ident),+) -> $next:ident $e:expr)+\n    } => (\n        |m| alt move(m) {\n          $(some($message($($x,)* next)) {\n            let $next = move!{next};\n            $e })+\n          _ { fail }\n        }\n    );\n\n    { \n        $($message:path -> $next:ident $e:expr)+\n    } => (\n        |m| alt move(m) {\n            $(some($message(next)) {\n                let $next = move!{next};\n                $e })+\n                _ { fail }\n        } \n    )\n}\n\nfn switch<T: send, Tb: send, U>(+endp: pipes::recv_packet_buffered<T, Tb>,\n                      f: fn(+option<T>) -> U) -> U {\n    f(pipes::try_recv(endp))\n}\n\nfn move<T>(-x: T) -> T { x }\n\n// Here's the benchmark\n\nfn bounded(count: uint) {\n    import pingpong::*;\n\n    let mut ch = do spawn_service(init) |ch| {\n        let mut count = count;\n        let mut ch = ch;\n        while count > 0 {\n            ch = switch(ch, follow! {\n                ping -> next { server::pong(next) }\n            });\n\n            count -= 1;\n        }\n    };\n\n    let mut count = count;\n    while count > 0 {\n        let ch_ = client::ping(ch);\n\n        ch = switch(ch_, follow! {\n            pong -> next { next }\n        });\n\n        count -= 1;\n    }\n}\n\nfn unbounded(count: uint) {\n    import pingpong_unbounded::*;\n\n    let mut ch = do spawn_service(init) |ch| {\n        let mut count = count;\n        let mut ch = ch;\n        while count > 0 {\n            ch = switch(ch, follow! {\n                ping -> next { server::pong(next) }\n            });\n\n            count -= 1;\n        }\n    };\n\n    let mut count = count;\n    while count > 0 {\n        let ch_ = client::ping(ch);\n\n        ch = switch(ch_, follow! {\n            pong -> next { next }\n        });\n\n        count -= 1;\n    }\n}\n\nfn timeit(f: fn()) -> float {\n    let start = precise_time_s();\n    f();\n    let stop = precise_time_s();\n    stop - start\n}\n\nfn main() {\n    let count = 1000000;\n    let bounded = do timeit { bounded(count) };\n    let unbounded = do timeit { unbounded(count) };\n\n    io::println(#fmt(\"count: %?\\n\", count));\n    io::println(#fmt(\"bounded:   %? s\\t(%? \u03bcs/message)\",\n                     bounded, bounded * 1000000. / (count as float)));\n    io::println(#fmt(\"unbounded: %? s\\t(%? \u03bcs/message)\",\n                     unbounded, unbounded * 1000000. / (count as float)));\n\n    io::println(#fmt(\"\\n\\\n                      bounded is %?%% faster\",\n                     (unbounded - bounded) / bounded * 100.));\n}\n```\n\nPretty printing and recompiling fixes the problem.\n", "closed_by": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3007/timeline", "performed_via_github_app": null, "state_reason": "completed"}