{"url": "https://api.github.com/repos/rust-lang/rust/issues/70439", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70439/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70439/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70439/events", "html_url": "https://github.com/rust-lang/rust/issues/70439", "id": 588636258, "node_id": "MDU6SXNzdWU1ODg2MzYyNTg=", "number": 70439, "title": "Missed optimization: concatenating fixed-size arrays", "user": {"login": "moxian", "id": 7831163, "node_id": "MDQ6VXNlcjc4MzExNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7831163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moxian", "html_url": "https://github.com/moxian", "followers_url": "https://api.github.com/users/moxian/followers", "following_url": "https://api.github.com/users/moxian/following{/other_user}", "gists_url": "https://api.github.com/users/moxian/gists{/gist_id}", "starred_url": "https://api.github.com/users/moxian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moxian/subscriptions", "organizations_url": "https://api.github.com/users/moxian/orgs", "repos_url": "https://api.github.com/users/moxian/repos", "events_url": "https://api.github.com/users/moxian/events{/privacy}", "received_events_url": "https://api.github.com/users/moxian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-26T18:30:51Z", "updated_at": "2021-02-09T22:55:48Z", "closed_at": "2021-02-09T22:55:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following three functions are the same semantically - they pack two `u64`s into 16 bytes in big-endian order, but produce different assembly:\r\n\r\n```rust\r\n// Naive, and, I assume, idiomatic implementation. Bad assembly with several needless moves.\r\npub fn test(tup: (u64, u64)) -> [u8; 16] {\r\n    let first = (tup.0).to_be_bytes();\r\n    let second = (tup.1).to_be_bytes();\r\n    let mut key = [0u8; 16];\r\n    key[..8].copy_from_slice(&first[..]);\r\n    key[8..].copy_from_slice(&second[..]);\r\n    key\r\n}\r\n\r\n// Unsafe implementation. Good assembly .\r\npub fn test2(tup: (u64, u64)) -> [u8; 16] {\r\n    let first: [u8; 8] = (tup.0).to_be_bytes();\r\n    let second: [u8; 8] = (tup.1).to_be_bytes();\r\n    let packed: [[u8;8]; 2] = [first, second];\r\n    let key = unsafe { std::mem::transmute(packed) } ;\r\n    key\r\n}\r\n\r\n// No unsafe, good assembly .\r\npub fn test3(tup: (u64, u64)) -> [u8; 16] {\r\n    let first = (tup.0).to_be_bytes();\r\n    let second = (tup.1).to_be_bytes();\r\n    let mut key = [0u8; 16];\r\n    let (f, s) = key.split_at_mut(8);\r\n    f.copy_from_slice(&first[..]);\r\n    s.copy_from_slice(&second[..]);\r\n    key\r\n}\r\n```\r\n\r\nCredits to @memoryruins for coming up with `test3`.\r\n\r\nGodbolt link: https://godbolt.org/z/4QaBp4\r\n\r\nIt is surprising that naive implementation (`test1`) produces worse assembly than the other two. I was told I should report this here as a bug.\r\n\r\n### Meta\r\nrustc 1.42.0 (as reported by godbolt)", "closed_by": {"login": "moxian", "id": 7831163, "node_id": "MDQ6VXNlcjc4MzExNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7831163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moxian", "html_url": "https://github.com/moxian", "followers_url": "https://api.github.com/users/moxian/followers", "following_url": "https://api.github.com/users/moxian/following{/other_user}", "gists_url": "https://api.github.com/users/moxian/gists{/gist_id}", "starred_url": "https://api.github.com/users/moxian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moxian/subscriptions", "organizations_url": "https://api.github.com/users/moxian/orgs", "repos_url": "https://api.github.com/users/moxian/repos", "events_url": "https://api.github.com/users/moxian/events{/privacy}", "received_events_url": "https://api.github.com/users/moxian/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70439/timeline", "performed_via_github_app": null, "state_reason": "completed"}