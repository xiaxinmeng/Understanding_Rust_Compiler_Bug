{"url": "https://api.github.com/repos/rust-lang/rust/issues/39882", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/39882/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/39882/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/39882/events", "html_url": "https://github.com/rust-lang/rust/issues/39882", "id": 208090954, "node_id": "MDU6SXNzdWUyMDgwOTA5NTQ=", "number": 39882, "title": "AddressSanitizer: false positives with structs/tuples that end with Zero Sized Types", "user": {"login": "dimbleby", "id": 875184, "node_id": "MDQ6VXNlcjg3NTE4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/875184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimbleby", "html_url": "https://github.com/dimbleby", "followers_url": "https://api.github.com/users/dimbleby/followers", "following_url": "https://api.github.com/users/dimbleby/following{/other_user}", "gists_url": "https://api.github.com/users/dimbleby/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimbleby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimbleby/subscriptions", "organizations_url": "https://api.github.com/users/dimbleby/orgs", "repos_url": "https://api.github.com/users/dimbleby/repos", "events_url": "https://api.github.com/users/dimbleby/events{/privacy}", "received_events_url": "https://api.github.com/users/dimbleby/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630870359, "node_id": "MDU6TGFiZWw2MzA4NzAzNTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-sanitizers", "name": "A-sanitizers", "color": "f7e101", "default": false, "description": "Area: Sanitizers for correctness and code quality."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 27, "created_at": "2017-02-16T11:10:47Z", "updated_at": "2017-11-01T15:42:48Z", "closed_at": "2017-11-01T15:42:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Update\r\n\r\n### STR\r\n\r\n``` rust\r\nfn main () {\r\n    let mut x = (4, ());\r\n    unsafe {\r\n        std::ptr::write(&mut x, (3, ()));\r\n    }\r\n}\r\n```\r\n\r\n```\r\n$ RUSTFLAGS=\"-Z sanitizer=address\" cargo run --target x86_64-unknown-linux-gnu\r\n    Running `target/x86_64-unknown-linux-gnu/debug/gh39882`\r\n=================================================================\r\n==25622==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffcdeb06284 at pc 0x55e19fbf269b bp 0x7ffcdeb06250 sp 0x7ffcdeb06248\r\nACCESS of size 0 at 0x7ffcdeb06284 thread T0\r\n(..)\r\n  This frame has 3 object(s):\r\n    [32, 36) 'arg' <== Memory access at offset 36 is inside this variable\r\n    [48, 52) '_7'\r\n    [64, 68) 'x'\r\n(..)\r\n```\r\n\r\n### Meta\r\n\r\n```\r\n$ rustc -V\r\nrustc 1.17.0-nightly (60a0edc6c 2017-02-26)\r\n```\r\n\r\n### Cause\r\n\r\nWe produce loads of the zero sized types in LLVM-IR.\r\n\r\n```\r\n$ cargo rustc -- --emit=llvm-ir\r\n\r\n$ cat $(find -name '*.ll')\r\ndefine internal void @_ZN7gh398824main17hc6881d8c6f884174E() unnamed_addr #1 !dbg !34 {\r\nentry-block:\r\n(..)\r\nstart:\r\n(..)\r\n  %6 = getelementptr inbounds { i32, {} }, { i32, {} }* %arg, i32 0, i32 1, !dbg !42\r\n  store {} undef, {}* %6, !dbg !42\r\n(..)\r\n```\r\n\r\n### Workaround\r\n\r\nAppend a non zero sized type to your struct so the ZST is not the last field of the struct. You could do this only if a feature is enabled to avoid changing the API of your crate.\r\n\r\n``` rust\r\npub struct Offender {\r\n    payload: u32,\r\n    zero_sized_type: (),  // or PhantomData\r\n    #[cfg(feature = \"asan\")]\r\n    workaround: u8,\r\n}\r\n```\r\n\r\nThen test with:\r\n\r\n```\r\n$ RUSTFLAGS=\"-Z sanitizer=address\" cargo run --target x86_64-unknown-linux-gnu --feature asan\r\n```\r\n\r\n### Fix\r\n\r\nRemove those loads by specializing the treatment of zero sized types in trans. As per @eddyb [comment](https://github.com/rust-lang/rust/issues/39882#issuecomment-280867941).\r\n\r\n---\r\n\r\n# Original report\r\n\r\nprogram:\r\n\r\n```rust\r\nuse std::collections::HashSet;\r\n\r\npub fn main() {\r\n    let mut hash_set = HashSet::<i32>::new();\r\n    hash_set.insert(42);\r\n}\r\n```\r\n\r\nrustc version: 1.17.0-nightly (62eb6056d 2017-02-15)\r\n\r\nbuild:\r\n\r\n```\r\n[asan]$ RUSTFLAGS=\"-Z sanitizer=address\" cargo +nightly build --target x86_64-unknown-linux-gnu\r\n   Compiling asan v0.1.0 (file:///data/dch/asan)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 1.8 secs\r\n```\r\n\r\nresult:\r\n\r\n```\r\n[asan]$ ./target/x86_64-unknown-linux-gnu/debug/asan\r\n=================================================================\r\n==3100==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffd196acb24 at pc 0x7f4a672abbd6 bp 0x7ffd196acaf0 sp 0x7ffd196acae8\r\nACCESS of size 0 at 0x7ffd196acb24 thread T0\r\n    #0 0x7f4a672abbd5 in _$LT$std..collections..hash..table..EmptyBucket$LT$K$C$$u20$V$C$$u20$M$GT$$GT$::put::h4dcbd19464a4eb32 /checkout/src/libstd/collections\r\n/hash/table.rs:450\r\n    #1 0x7f4a672ac7e7 in _$LT$std..collections..hash..map..VacantEntry$LT$$u27$a$C$$u20$K$C$$u20$V$GT$$GT$::insert::h1f23562a9244108b /checkout/src/libstd/colle\r\nctions/hash/map.rs:2070\r\n    #2 0x7f4a672a3d34 in _$LT$std..collections..hash..map..HashMap$LT$K$C$$u20$V$C$$u20$S$GT$$GT$::insert_hashed_nocheck::hc786fd8d25a77f8d /checkout/src/libstd\r\n/collections/hash/map.rs:805\r\n    #3 0x7f4a672a4c28 in _$LT$std..collections..hash..map..HashMap$LT$K$C$$u20$V$C$$u20$S$GT$$GT$::insert::h807e2aa556ba41aa /checkout/src/libstd/collections/ha\r\nsh/map.rs:1150\r\n    #4 0x7f4a6729e793 in _$LT$std..collections..hash..set..HashSet$LT$T$C$$u20$S$GT$$GT$::insert::h4a1f9ecc174ad965 /checkout/src/libstd/collections/hash/set.rs\r\n:585\r\n    #5 0x7f4a672ad401 in asan::main::h9b63a9a755bc73af /data/dch/asan/src/main.rs:5\r\n    #6 0x7f4a673a787a in __rust_maybe_catch_panic /checkout/src/libpanic_unwind/lib.rs:98\r\n    #7 0x7f4a673a00b6 in std::panicking::try<(),fn()> /checkout/src/libstd/panicking.rs:429\r\n    #8 0x7f4a673a00b6 in std::panic::catch_unwind<fn(),()> /checkout/src/libstd/panic.rs:361\r\n    #9 0x7f4a673a00b6 in std::rt::lang_start::hb7fc7ec87b663023 /checkout/src/libstd/rt.rs:57\r\n    #10 0x7f4a672ad4d2 in main (/data/dch/asan/target/x86_64-unknown-linux-gnu/debug/asan+0x284d2)\r\n    #11 0x7f4a66485b34 in __libc_start_main (/lib64/libc.so.6+0x21b34)\r\n    #12 0x7f4a6728e6a5 in _start (/data/dch/asan/target/x86_64-unknown-linux-gnu/debug/asan+0x96a5)\r\n\r\nAddress 0x7ffd196acb24 is located in stack of thread T0 at offset 36 in frame\r\n    #0 0x7f4a672ab68f in _$LT$std..collections..hash..table..EmptyBucket$LT$K$C$$u20$V$C$$u20$M$GT$$GT$::put::h4dcbd19464a4eb32 /checkout/src/libstd/collections\r\n/hash/table.rs:447\r\n\r\n  This frame has 8 object(s):\r\n    [32, 36) 'arg' <== Memory access at offset 36 is inside this variable\r\n    [48, 64) '_20'\r\n    [80, 84) '_15'\r\n    [96, 104) 'hash'\r\n    [128, 160) 'self'\r\n    [192, 200) 'abi_cast'\r\n    [224, 232) 'arg1'\r\n    [256, 288) 'arg0'\r\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext\r\n      (longjmp and C++ exceptions *are* supported)\r\nSUMMARY: AddressSanitizer: stack-buffer-overflow /checkout/src/libstd/collections/hash/table.rs:450 in _$LT$std..collections..hash..table..EmptyBucket$LT$K$C$$u\r\n20$V$C$$u20$M$GT$$GT$::put::h4dcbd19464a4eb32\r\nShadow bytes around the buggy address:\r\n  0x1000232cd910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1000232cd920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1000232cd930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1000232cd940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1000232cd950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n=>0x1000232cd960: f1 f1 f1 f1[04]f2 00 00 f2 f2 04 f2 00 f2 f2 f2\r\n  0x1000232cd970: 00 00 00 00 f2 f2 f2 f2 00 f2 f2 f2 00 f2 f2 f2\r\n  0x1000232cd980: 00 00 00 00 f3 f3 f3 f3 00 00 00 00 00 00 00 00\r\n  0x1000232cd990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1000232cd9a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1000232cd9b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07\r\n  Heap left redzone:       fa\r\n  Heap right redzone:      fb\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack partial redzone:   f4\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n==3100==ABORTING\r\n```\r\n\r\nOf course it's possible that this is a false positive, though my experience in C and C++ has been that it's very rare indeed for the address sanitiser to produce such.", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/39882/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/39882/timeline", "performed_via_github_app": null, "state_reason": "completed"}