{"url": "https://api.github.com/repos/rust-lang/rust/issues/70436", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70436/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70436/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70436/events", "html_url": "https://github.com/rust-lang/rust/issues/70436", "id": 588570991, "node_id": "MDU6SXNzdWU1ODg1NzA5OTE=", "number": 70436, "title": "Tracking issue for `Write::write_all_vectored`", "user": {"login": "Thomasdezeeuw", "id": 3159064, "node_id": "MDQ6VXNlcjMxNTkwNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3159064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thomasdezeeuw", "html_url": "https://github.com/Thomasdezeeuw", "followers_url": "https://api.github.com/users/Thomasdezeeuw/followers", "following_url": "https://api.github.com/users/Thomasdezeeuw/following{/other_user}", "gists_url": "https://api.github.com/users/Thomasdezeeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thomasdezeeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thomasdezeeuw/subscriptions", "organizations_url": "https://api.github.com/users/Thomasdezeeuw/orgs", "repos_url": "https://api.github.com/users/Thomasdezeeuw/repos", "events_url": "https://api.github.com/users/Thomasdezeeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/Thomasdezeeuw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 36, "created_at": "2020-03-26T16:52:56Z", "updated_at": "2022-12-19T10:51:23Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a tracking issue for `io::Write::write_all_vectored`.\r\n\r\nFeature gate: `#![feature(write_all_vectored)]`.\r\n\r\n**Steps**:\r\n- [x] Implement the RFC (#70612).\r\n- [ ] Stabilization PR.\r\n\r\n**Unresolved questions**:\r\n- [ ] Can we improve the API? Currently the method takes the `IoSlice`s as mutable slice and modifies them. This is a pretty unusual and potentially error-prone API. We could either find a way to not mutate the argument or to enforce (via the type system) the argument can't be used by the user afterwards. Or we can decide that such an unusual API is fine for this rather low level method.\r\n\r\n---\r\n\r\nOriginal issue:\r\n\r\n<details>\r\n\r\nIn the `io::Write` trait we've got the helpful `write_all` method, which calls `write` in a loop to write all bytes. However there is no such function for `write_vectored`. I would suggest adding a function called `write_all_vectored` to performance such a task.\r\n\r\nA possible implementation. Note that `bufs` is a mutable slice, also see the discussion in https://github.com/rust-lang/futures-rs/pull/1741/files. On the playground: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=872e9d973bd8101e7724292f87a82869.\r\n\r\n```rust\r\npub trait Write {\r\n    // ...\r\n\r\n    fn write_all_vectored(&mut self, mut bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\r\n        while !bufs.is_empty() {\r\n            match self.write_vectored(bufs) {\r\n                Ok(0) => {\r\n                    return Err(Error::new(\r\n                        ErrorKind::WriteZero,\r\n                        \"failed to write whole buffer\",\r\n                    ));\r\n                }\r\n                Ok(n) => bufs = IoSlice::advance(mem::replace(&mut bufs, &mut []), n),\r\n                Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\r\n                Err(e) => return Err(e),\r\n            }\r\n        }\r\n        Ok(())\r\n    }\r\n}\r\n```\r\n\r\nRelated: https://github.com/rust-lang/futures-rs/pull/1741\r\n/cc @cramertj\r\n\r\n</details>", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70436/reactions", "total_count": 7, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70436/timeline", "performed_via_github_app": null, "state_reason": null}