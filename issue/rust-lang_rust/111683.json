{"url": "https://api.github.com/repos/rust-lang/rust/issues/111683", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111683/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111683/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111683/events", "html_url": "https://github.com/rust-lang/rust/issues/111683", "id": 1714036891, "node_id": "I_kwDOAAsO6M5mKiCb", "number": 111683, "title": "Confusing error message when forgetting semicolon after spawning a scoped thread", "user": {"login": "GrigorenkoPV", "id": 82285787, "node_id": "MDQ6VXNlcjgyMjg1Nzg3", "avatar_url": "https://avatars.githubusercontent.com/u/82285787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrigorenkoPV", "html_url": "https://github.com/GrigorenkoPV", "followers_url": "https://api.github.com/users/GrigorenkoPV/followers", "following_url": "https://api.github.com/users/GrigorenkoPV/following{/other_user}", "gists_url": "https://api.github.com/users/GrigorenkoPV/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrigorenkoPV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrigorenkoPV/subscriptions", "organizations_url": "https://api.github.com/users/GrigorenkoPV/orgs", "repos_url": "https://api.github.com/users/GrigorenkoPV/repos", "events_url": "https://api.github.com/users/GrigorenkoPV/events{/privacy}", "received_events_url": "https://api.github.com/users/GrigorenkoPV/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-05-17T14:26:18Z", "updated_at": "2023-05-17T14:28:07Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Code\r\n\r\n```Rust\r\nuse std::thread;\r\n\r\nfn do_something(_data: &[u8]) {}\r\n\r\nfn do_something_else(_data: &[u8]) {}\r\n\r\nfn main() {\r\n    let data: Vec<u8> = vec![];\r\n    thread::scope(|scope| {\r\n        scope.spawn(|| do_something(&data));\r\n        scope.spawn(|| do_something_else(&data))\r\n    });\r\n    dbg!(data);\r\n}\r\n```\r\n\r\n\r\n### Current output\r\n\r\n```\r\nerror: lifetime may not live long enough\r\n  --> src/main.rs:11:9\r\n   |\r\n9  |     thread::scope(|scope| {\r\n   |                    ------ return type of closure is ScopedJoinHandle<'2, ()>\r\n   |                    |\r\n   |                    has type `&'1 Scope<'1, '_>`\r\n10 |         scope.spawn(|| do_something(&data));\r\n11 |         scope.spawn(|| do_something_else(&data))\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\r\n   |\r\nhelp: consider adding 'move' keyword before the nested closure\r\n   |\r\n11 |         scope.spawn(move || do_something_else(&data))\r\n   |                     ++++\r\n```\r\n\r\n\r\n### Desired output\r\n\r\nIdeally, a hint that it does not make sense to return `ScopedJoinHandle` from the argument of the `thread::scope` call (and maybe even a suggestion to add the missing semicolon). \r\n\r\nAt the very least, the same output as now, but without the misleading \"consider adding 'move' keyword before the nested closure\", because it does not help and in fact makes the error even more confusing (see below)\r\n\r\n\r\n### Rationale and extra context\r\n\r\n_No response_\r\n\r\n### Other cases\r\n\r\nAdding a `move`, as suggested by the compiler output:\r\n\r\n\r\n```Rust\r\nuse std::thread;\r\n\r\nfn do_something(_data: &[u8]) {}\r\n\r\nfn do_something_else(_data: &[u8]) {}\r\n\r\nfn main() {\r\n    let data: Vec<u8> = vec![];\r\n    thread::scope(|scope| {\r\n        scope.spawn(|| do_something(&data));\r\n        scope.spawn(move || do_something_else(&data))\r\n    });\r\n    dbg!(data);\r\n}\r\n```\r\ngives\r\n```\r\nerror[E0373]: closure may outlive the current function, but it borrows `data`, which is owned by the current function\r\n  --> src/main.rs:10:21\r\n   |\r\n9  |     thread::scope(|scope| {\r\n   |                    ----- has type `&'1 Scope<'1, '_>`\r\n10 |         scope.spawn(|| do_something(&data));\r\n   |                     ^^               ---- `data` is borrowed here\r\n   |                     |\r\n   |                     may outlive borrowed value `data`\r\n   |\r\nnote: function requires argument type to outlive `'1`\r\n  --> src/main.rs:10:9\r\n   |\r\n10 |         scope.spawn(|| do_something(&data));\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nhelp: to force the closure to take ownership of `data` (and any other referenced variables), use the `move` keyword\r\n   |\r\n10 |         scope.spawn(move || do_something(&data));\r\n   |                     ++++\r\n\r\nerror: lifetime may not live long enough\r\n  --> src/main.rs:11:9\r\n   |\r\n9  |     thread::scope(|scope| {\r\n   |                    ------ return type of closure is ScopedJoinHandle<'2, ()>\r\n   |                    |\r\n   |                    has type `&'1 Scope<'1, '_>`\r\n10 |         scope.spawn(|| do_something(&data));\r\n11 |         scope.spawn(move || do_something_else(&data))\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\r\n\r\nerror[E0505]: cannot move out of `data` because it is borrowed\r\n  --> src/main.rs:11:21\r\n   |\r\n9  |     thread::scope(|scope| {\r\n   |                    ----- has type `&'1 Scope<'1, '_>`\r\n10 |         scope.spawn(|| do_something(&data));\r\n   |         -----------------------------------\r\n   |         |           |                |\r\n   |         |           |                borrow occurs due to use in closure\r\n   |         |           borrow of `data` occurs here\r\n   |         argument requires that `data` is borrowed for `'1`\r\n11 |         scope.spawn(move || do_something_else(&data))\r\n   |                     ^^^^^^^                    ---- move occurs due to use in closure\r\n   |                     |\r\n   |                     move out of `data` occurs here\r\n\r\nerror[E0382]: use of moved value: `data`\r\n  --> src/main.rs:13:10\r\n   |\r\n8  |     let data: Vec<u8> = vec![];\r\n   |         ---- move occurs because `data` has type `Vec<u8>`, which does not implement the `Copy` trait\r\n9  |     thread::scope(|scope| {\r\n   |                   ------- value moved into closure here\r\n10 |         scope.spawn(|| do_something(&data));\r\n11 |         scope.spawn(move || do_something_else(&data))\r\n   |                                                ---- variable moved due to use in closure\r\n12 |     });\r\n13 |     dbg!(data);\r\n   |          ^^^^ value used here after move\r\n\r\nSome errors have detailed explanations: E0373, E0382, E0505.\r\nFor more information about an error, try `rustc --explain E0373`.\r\n```\r\n\r\n### Anything else?\r\n\r\n_No response_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111683/timeline", "performed_via_github_app": null, "state_reason": null}