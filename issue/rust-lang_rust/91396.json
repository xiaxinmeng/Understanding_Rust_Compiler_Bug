{"url": "https://api.github.com/repos/rust-lang/rust/issues/91396", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91396/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91396/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91396/events", "html_url": "https://github.com/rust-lang/rust/issues/91396", "id": 1067554899, "node_id": "I_kwDOAAsO6M4_oZhT", "number": 91396, "title": "Provide pointer to escaped reference", "user": {"login": "gmacon", "id": 238853, "node_id": "MDQ6VXNlcjIzODg1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/238853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmacon", "html_url": "https://github.com/gmacon", "followers_url": "https://api.github.com/users/gmacon/followers", "following_url": "https://api.github.com/users/gmacon/following{/other_user}", "gists_url": "https://api.github.com/users/gmacon/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmacon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmacon/subscriptions", "organizations_url": "https://api.github.com/users/gmacon/orgs", "repos_url": "https://api.github.com/users/gmacon/repos", "events_url": "https://api.github.com/users/gmacon/events{/privacy}", "received_events_url": "https://api.github.com/users/gmacon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-11-30T18:37:17Z", "updated_at": "2021-12-04T22:07:43Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nThis is a simplified version of the question reported at ebfull/pcap#193. The compiler error message didn't point the reporter to the bug in their code. `pcap`'s API make the problem worse because `Capture::next` doesn't directly return a reference, it returns a struct containing a reference, so it's not obvious from the function signature (`fn next(&mut self) -> Result<Packet>`) that a borrow is happening. I think it might be helpful in this case where the borrow occurred in the previous iteration of the loop to point to the place where the reference escaped the loop body (`packets.push(packet)`, in this case), though I'm not sure how hard that would be. \r\n\r\nGiven the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n\r\n[Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=a5e2c03c23a2e690db9f99aa2fc092cd)\r\n\r\n```rust\r\nuse std::error::Error;\r\n\r\nstruct Packet<'a> {\r\n    // some other fields...\r\n    data: &'a [u8],\r\n}\r\n\r\nstruct Capture {\r\n    // In reality, there's an opaque handle to a libpcap capture object,\r\n    // and libpcap's C code manages a buffer that's used to hold packet data.\r\n    buf: Vec<u8>,\r\n}\r\n\r\nimpl Capture {\r\n    fn next(&mut self) -> Result<Packet, Box<dyn Error>> {\r\n        // stuff happens to fill the buffer\r\n        Ok(Packet { data: &self.buf })\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut cap = Capture { buf: Vec::new() };\r\n    let mut packets = Vec::new();\r\n    while let Ok(packet) = cap.next() {\r\n        packets.push(packet);\r\n    }\r\n    // do something with packets\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0499]: cannot borrow `cap` as mutable more than once at a time\r\n  --> src/lib.rs:24:28\r\n   |\r\n24 |     while let Ok(packet) = cap.next() {\r\n   |                            ^^^ `cap` was mutably borrowed here in the previous iteration of the loop\r\n\r\nFor more information about this error, try `rustc --explain E0499`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0499]: cannot borrow `cap` as mutable more than once at a time\r\n  --> src/lib.rs:24:28\r\n   |\r\n24 |     while let Ok(packet) = cap.next() {\r\n   |                            ^^^ `cap` was mutably borrowed here in the previous iteration of the loop\r\n25 |        packets.push(packet);\r\n   |                     ^^^^^^ borrow escapes here\r\n\r\nFor more information about this error, try `rustc --explain E0499`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nI haven't put very much effort into the wording here, so feel free to have it say something completely different. The ultimate goal is to somehow point to the `packets` variable as being the reason the reference escapes the loop.\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91396/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91396/timeline", "performed_via_github_app": null, "state_reason": null}