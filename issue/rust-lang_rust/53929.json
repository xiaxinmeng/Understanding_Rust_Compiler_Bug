{"url": "https://api.github.com/repos/rust-lang/rust/issues/53929", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53929/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53929/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53929/events", "html_url": "https://github.com/rust-lang/rust/issues/53929", "id": 356568507, "node_id": "MDU6SXNzdWUzNTY1Njg1MDc=", "number": 53929, "title": "Incremental compilation fails when a generic function uses a private symbol", "user": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 693665681, "node_id": "MDU6TGFiZWw2OTM2NjU2ODE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-incr-comp", "name": "WG-incr-comp", "color": "c2e0c6", "default": false, "description": "Working group: incremental compilation"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-09-03T17:17:48Z", "updated_at": "2022-06-22T01:36:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The way that incremental compilation works breaks code that uses private symbols. For example, the following code will fail to compile when using incremental compilation (e.g. the default `cargo build`), but will build successfully when incremental compilation is disabled (e.g. the default `cargo build --release`):\r\n\r\n```rust\r\n// I have reproduced this issue for the following targets:\r\n// mips-unknown-linux-gnu\r\n// x86_64-unknown-linux-gnu\r\n// x86_64-apple-darwin\r\n// aarch64-apple-ios\r\nfn foo<T>() {\r\n    // See m:<mangling> at https://llvm.org/docs/LangRef.html#data-layout\r\n    // This is only reproducible when using ELF, Mips, or Mach-O mangling.\r\n    #[cfg_attr(all(target_os = \"linux\", not(target_arch = \"mips\")),\r\n               export_name = \"\\x01.L_this_is_a_private_symbol\")]\r\n    #[cfg_attr(any(target_os = \"macos\", target_os = \"ios\"),\r\n               export_name = \"\\x01L_this_is_a_private_symbol\")]\r\n    #[cfg_attr(target_arch = \"mips\", export_name = \"\\x01$_this_is_a_private_symbol\")]\r\n    static X: usize = 0;\r\n\r\n    // Use the static symbol in a way that prevents the optimizer from\r\n    // optimizing it away.\r\n    unsafe { std::ptr::read_volatile(&X as *const _); }\r\n}\r\n\r\nfn main() {\r\n    foo::<usize>();\r\n}\r\n```\r\n\r\nOutput (for both `cargo build` and `cargo build --release`):\r\n```\r\n$ cargo build\r\n   Compiling zzz v0.1.0 (file:///private/tmp/zzz)\r\nLLVM ERROR: unsupported relocation of undefined symbol 'L_this_is_a_private_symbol'\r\nerror: Could not compile `zzz`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n$ cargo build --release\r\n   Compiling zzz v0.1.0 (file:///private/tmp/zzz)\r\n    Finished release [optimized] target(s) in 0.26s\r\n```\r\n\r\nI have reproduced this issue for the following targets:\r\n- `mips-unknown-linux-gnu`\r\n- `x86_64-unknown-linux-gnu`\r\n- `x86_64-apple-darwin`\r\n- `aarch64-apple-ios`\r\n\r\nI'm interested in fixing this issue, and have been trying to better understand [`librustc_mir/monomorphize/partitioning.rs`](https://github.com/rust-lang/rust/blob/master/src/librustc_mir/monomorphize/partitioning.rs) (which I assume is where the problem is). I'll update this issue if I've made any progress, but I would appreciate any guidance anyone might be able to offer.\r\n\r\nThese private symbols are useful for low-level FFI work (e.g. the linker on macOS/iOS will deduplicate selector names only if they have a private symbol name).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53929/timeline", "performed_via_github_app": null, "state_reason": null}