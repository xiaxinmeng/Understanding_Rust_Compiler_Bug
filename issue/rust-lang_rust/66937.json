{"url": "https://api.github.com/repos/rust-lang/rust/issues/66937", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66937/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66937/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66937/events", "html_url": "https://github.com/rust-lang/rust/issues/66937", "id": 530767610, "node_id": "MDU6SXNzdWU1MzA3Njc2MTA=", "number": 66937, "title": "Cannot generically target write/writeln macros", "user": {"login": "LunarLambda", "id": 38919842, "node_id": "MDQ6VXNlcjM4OTE5ODQy", "avatar_url": "https://avatars.githubusercontent.com/u/38919842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LunarLambda", "html_url": "https://github.com/LunarLambda", "followers_url": "https://api.github.com/users/LunarLambda/followers", "following_url": "https://api.github.com/users/LunarLambda/following{/other_user}", "gists_url": "https://api.github.com/users/LunarLambda/gists{/gist_id}", "starred_url": "https://api.github.com/users/LunarLambda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LunarLambda/subscriptions", "organizations_url": "https://api.github.com/users/LunarLambda/orgs", "repos_url": "https://api.github.com/users/LunarLambda/repos", "events_url": "https://api.github.com/users/LunarLambda/events{/privacy}", "received_events_url": "https://api.github.com/users/LunarLambda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-01T17:47:29Z", "updated_at": "2019-12-01T17:51:51Z", "closed_at": "2019-12-01T17:51:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm making a generic wrapper around a writer, akin to `std::io::BufWriter`\r\n\r\nSo I start with a struct like this:\r\n\r\n```rust\r\npub struct MyWriter<W> {\r\n    inner: W\r\n}\r\n```\r\n\r\nAnd I add an implementation for `std::io::Write` types:\r\n\r\n```rust\r\nuse std::io::{Write, Result};\r\n\r\nimpl<W: Write> Write for MyWriter<W> {\r\n    fn write(&mut self, buf: &[u8]) -> Result<usize> {\r\n        for x in buf {\r\n             writeln!(self.inner, \"Byte: {}\", byte)?;\r\n        }        \r\n\r\n        Ok(buf.len())\r\n    }\r\n\r\n    fn flush(&mut self) -> Result<()> {\r\n        self.inner.flush()\r\n    }\r\n}\r\n```\r\n\r\nNotice how my writer will always produce UTF-8 text because it only uses the `write!` / `writeln!` macros.\r\n\r\nThat means I can support `String`s, right?\r\n\r\nWell...\r\n\r\nBoth `impl Write for MyWriter<String>` and `impl<W: std::fmt::Write> Write for MyWriter<W>` give me `confliction implementation` errors, once because \"std might implement `io::Write` for `String`\" (unlikely, but okay...) and once because `W` might implement BOTH `io::Write` AND `fmt::Write`...\r\n\r\nI could instead do `impl<W: fmt::Write> fmt::Write for MyWriter<W>`, but this means `MyWriter<String>` would only work with `str`s, even though any data would be valid.\r\n\r\nIt would make things like this not possible:\r\n\r\n```rust\r\n// get some data\r\nlet data = std::fs::read(\"some_file\")?;\r\n\r\nlet mut writer = MyWriter::<String>::new();\r\n\r\n// process and write it into a string\r\nwriter.write(&data)?;\r\n\r\n// get the inner string and print it (AsRef<W> implementation ommitted for brevity)\r\nprintln!(\"{}\", writer.as_ref());\r\n```\r\n\r\nWhat can I do? How can I support `String`, or any other type using `fmt::Write`?", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66937/timeline", "performed_via_github_app": null, "state_reason": "completed"}