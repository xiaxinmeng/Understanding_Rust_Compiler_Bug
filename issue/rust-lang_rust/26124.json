{"url": "https://api.github.com/repos/rust-lang/rust/issues/26124", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/26124/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/26124/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/26124/events", "html_url": "https://github.com/rust-lang/rust/issues/26124", "id": 86651336, "node_id": "MDU6SXNzdWU4NjY1MTMzNg==", "number": 26124, "title": "String::push reallocates too aggressively in corner cases", "user": {"login": "pmarcelll", "id": 1909968, "node_id": "MDQ6VXNlcjE5MDk5Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/1909968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmarcelll", "html_url": "https://github.com/pmarcelll", "followers_url": "https://api.github.com/users/pmarcelll/followers", "following_url": "https://api.github.com/users/pmarcelll/following{/other_user}", "gists_url": "https://api.github.com/users/pmarcelll/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmarcelll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmarcelll/subscriptions", "organizations_url": "https://api.github.com/users/pmarcelll/orgs", "repos_url": "https://api.github.com/users/pmarcelll/repos", "events_url": "https://api.github.com/users/pmarcelll/events{/privacy}", "received_events_url": "https://api.github.com/users/pmarcelll/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-06-09T16:09:41Z", "updated_at": "2015-06-11T06:41:26Z", "closed_at": "2015-06-11T06:41:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There was a post recently on /r/rust about microbenchmarks in different programming languages (https://github.com/kostya/benchmarks), and I was trying to understand how the Rust implementation works.\nI noticed that in the Base64 benchmark the author used this code to construct a srting with `str_size` copies of a character:\n\n``` rust\nlet str_size = 10000000;\nlet mut str: String = \"\".to_string();\nfor _ in 0..str_size { str.push_str(\"a\"); }\n```\n\nI thought that push_str is a bit inefficient for a single character, so I looked at the source code. I started playing with String::push and found a trick in the [implemetation](https://github.com/rust-lang/rust/blob/master/src/libcollections/string.rs#L470) for ASCII characters (relevant PR: #20079).\n\nThe actual problem:\nIf the character is 1 byte long in UTF-8, it is treated as an ASCII character (as in C), but if it's bigger than 1 byte, the algorythm always reserves 4 bytes in the vector even if the pushed character's length is only 2 or 3 bytes. So even if the vector has _just_ enough space for one of these smaller characters, the vector reallocates its storage (and doubles the size of the buffer). As a result, the string now has an unnecessarily doubled capacity.\nI know it doesn't seem like a big problem, but if someone uses push somehow  with non-English text, it might become a significant memory overhead. The issue happens if the length of the string becomes a power of 2, so strings with smaller length are more affected.\n\nA possible solution:\n\n``` rust\n// This is a modified version of the original\npub fn push(&mut self, ch: char) {\n    match ch.len_utf8() {\n        1 => self.vec.push(ch as u8),\n        ch_len => {\n            let cur_len = self.len();\n\n            self.vec.reserve(ch_len);\n\n            unsafe {\n                // Attempt to not use an intermediate buffer by just pushing bytes\n                // directly onto this string.\n                let slice = slice::from_raw_parts_mut (\n                    self.vec.as_mut_ptr().offset(cur_len as isize),\n                    ch_len\n                );\n                let used = ch.encode_utf8(slice).unwrap_or(0);\n                self.vec.set_len(cur_len + used);\n            }\n        }\n    }\n}\n```\n\nI benchmarked this version, therer was no measurable difference.\nThere's one problem though: char::len_utf8 is not marked with #[inline], so without LTO, it's currently slower.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/26124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/26124/timeline", "performed_via_github_app": null, "state_reason": "completed"}