{"url": "https://api.github.com/repos/rust-lang/rust/issues/69455", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69455/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69455/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69455/events", "html_url": "https://github.com/rust-lang/rust/issues/69455", "id": 570417572, "node_id": "MDU6SXNzdWU1NzA0MTc1NzI=", "number": 69455, "title": " Type inference reports misleading diagonstics ", "user": {"login": "contrun", "id": 32609395, "node_id": "MDQ6VXNlcjMyNjA5Mzk1", "avatar_url": "https://avatars.githubusercontent.com/u/32609395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/contrun", "html_url": "https://github.com/contrun", "followers_url": "https://api.github.com/users/contrun/followers", "following_url": "https://api.github.com/users/contrun/following{/other_user}", "gists_url": "https://api.github.com/users/contrun/gists{/gist_id}", "starred_url": "https://api.github.com/users/contrun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/contrun/subscriptions", "organizations_url": "https://api.github.com/users/contrun/orgs", "repos_url": "https://api.github.com/users/contrun/repos", "events_url": "https://api.github.com/users/contrun/events{/privacy}", "received_events_url": "https://api.github.com/users/contrun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1624891239, "node_id": "MDU6TGFiZWwxNjI0ODkxMjM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-incorrect", "name": "D-incorrect", "color": "c9f7a3", "default": false, "description": "A diagnostic that is giving misleading or incorrect information"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-02-25T09:11:01Z", "updated_at": "2023-01-13T17:51:37Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nfn main() {\r\n    let xs: Vec<u64> = vec![1, 2, 3];\r\n    println!(\"{}\", 23u64 + xs.iter().sum());\r\n}\r\n```\r\n\r\nI expected to see this happen: *I expect rust to tell me I should be more precise about `23u64 + xs.iter().sum()`*.\r\n\r\n\r\n```\r\nfn main() {\r\n    let xs: Vec<u64> = vec![1, 2, 3];\r\n    \r\n    // This works\r\n    let temp: u64 = xs.iter().sum();\r\n    println!(\"{}\", 23u64 + temp);\r\n    \r\n    // This reports error correctly.\r\n    let test = 23u64 + xs.iter().sum();\r\n    println!(\"{}\", test)\r\n}\r\n```\r\n\r\nInstead, this happened:\r\n```\r\nerror[E0284]: type annotations needed for `std::vec::Vec<u64>`\r\n --> src/main.rs:3:26\r\n  |\r\n2 |     let xs: Vec<u64> = vec![1, 2, 3];\r\n  |         -- consider giving `xs` the explicit type `std::vec::Vec<u64>`, where the type parameter `u64` is specified\r\n3 |     println!(\"{}\", 23u64 + xs.iter().sum());\r\n  |                          ^ cannot infer type for type `u64`\r\n  |\r\n  = note: cannot resolve `<u64 as std::ops::Add<_>>::Output == _`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0284`.\r\nerror: could not compile `playground`.\r\n```\r\n\r\nA method call variant of this problem is\r\n```\r\npub trait Test<Rhs = Self> {\r\n    type Output;\r\n\r\n    fn test(self, rhs: Rhs) -> Self::Output;\r\n}\r\n\r\nimpl Test<u32> for u64 {\r\n    type Output = u64;\r\n\r\n    fn test(self, other: u32) -> u64 { self + (other as u64) }\r\n}\r\n\r\nimpl Test<u64> for u64 {\r\n    type Output = u64;\r\n\r\n    fn test(self, other: u64) -> u64 {\r\n        (self + other) as u64\r\n    }\r\n}\r\n\r\n\r\nfn main() {\r\n    let xs: Vec<u64> = vec![1, 2, 3];\r\n    println!(\"{}\", 23u64.test(xs.iter().sum()));\r\n}\r\n```\r\nThe only difference is that `self.test` is a method call, while `+` is a binary operator. \r\n\r\nrustc --version --verbose\r\n```\r\nrustc 1.43.0-nightly (158127853 2020-03-10)\r\nbinary: rustc\r\ncommit-hash: 15812785344d913d779d9738fe3cca8de56f71d5\r\ncommit-date: 2020-03-10\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.43.0-nightly\r\nLLVM version: 9.0\r\n```\r\n\r\nRelated issue: https://github.com/rust-lang/rust/issues/69214", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69455/timeline", "performed_via_github_app": null, "state_reason": null}