{"url": "https://api.github.com/repos/rust-lang/rust/issues/66287", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66287/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66287/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66287/events", "html_url": "https://github.com/rust-lang/rust/issues/66287", "id": 520880283, "node_id": "MDU6SXNzdWU1MjA4ODAyODM=", "number": 66287, "title": "Stabilize `#[bench]` and `Bencher`?", "user": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 630810559, "node_id": "MDU6TGFiZWw2MzA4MTA1NTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-libtest", "name": "A-libtest", "color": "f7e101", "default": false, "description": "Area: #[test] related"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-11-11T10:48:47Z", "updated_at": "2021-05-26T07:08:40Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I\u2019ll take the liberty of copying a section of @hsivonen\u2019s [Rust 2020 blog post](https://hsivonen.fi/rust2020/):\r\n\r\n> ## Non-Nightly Benchmarking\r\n>\r\n> The library support for the `cargo bench` feature has been in the state \u201c[basically, the design is problematic, but we haven\u2019t had anyone work through those issues yet](https://users.rust-lang.org/t/timeline-for-libtest-stability/3123/3)\u201d since 2015. It\u2019s a useful feature nonetheless. Like I said a year ago and the year before, it\u2019s time to let go of the possibility of tweaking it for elegance and just let users use it on non-nighly Rust. \r\n\r\nIndeed the existing benchmarking support has basically not changed in years, and I\u2019m not aware of anyone planning to work on it. To keep reserving the right to make breaking changes is not useful at this point. [Custom test frameworks](https://github.com/rust-lang/rust/issues/50297) offer another way forward for when someone does want to work on better benchmarking.\r\n\r\nSo I\u2019d like to propose a plan:\r\n\r\n* Move `test::Bencher` to `std::bench::Bencher`. <del>I have a PR coming soon that</del> <ins>https://github.com/rust-lang/rust/pull/66290</ins> demonstrates that this is possible. This move avoids the need to stabilize the `test` crate.\r\n* Optionally, make some surface-only API tweaks to `Bencher`. For example, the public `bytes` field could become a parameter to some method.\r\n  * Although not strictly necessary for changes to an unstable type, we can keep the existing `bytes` field and `iter` method unchanged as unstable + deprecated for a while.\r\n* **Stabilize** the `#[bench]` attribute and just enough of `Bencher` to make it usable with `#[bench]`. (For example, no stable constructor.)\r\n\r\n@rust-lang/libs, @rust-lang/lang, do you feel this needs an RFC?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66287/reactions", "total_count": 19, "+1": 8, "-1": 0, "laugh": 0, "hooray": 9, "confused": 0, "heart": 0, "rocket": 0, "eyes": 2}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66287/timeline", "performed_via_github_app": null, "state_reason": null}