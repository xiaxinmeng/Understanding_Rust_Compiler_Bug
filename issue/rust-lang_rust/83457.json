{"url": "https://api.github.com/repos/rust-lang/rust/issues/83457", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83457/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83457/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83457/events", "html_url": "https://github.com/rust-lang/rust/issues/83457", "id": 840486369, "node_id": "MDU6SXNzdWU4NDA0ODYzNjk=", "number": 83457, "title": "Hint to suggest annotating type to assist unsized coercion", "user": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-03-25T01:59:35Z", "updated_at": "2021-04-01T21:07:06Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "It would be useful if we could suggest for users to add type annotations to assist in places where the compiler is unable to automagically infer an unsized coersion, e.g. when declaration is separated from usage by a `let` statement like [this code (playground link)](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=ef17fcd9ce4fe4c3e6fa735fed6e8ad2):\r\n\r\n```rust\r\nstruct Wrapper<T>(T);\r\n\r\nfn takes_any(x: Wrapper<Box<dyn std::any::Any>>) {}\r\n\r\nfn test() {\r\n    let x = Wrapper(Box::new(1i32));\r\n    takes_any(x);\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:9:15\r\n  |\r\n9 |     takes_any(x);\r\n  |               ^ expected trait object `dyn Any`, found `i32`\r\n  |\r\n  = note: expected struct `Wrapper<Box<(dyn Any + 'static)>>`\r\n             found struct `Wrapper<Box<i32>>`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\nIdeally the output should also suggest adding an explicit type annotation to assist in unsizing, like:\r\n\r\n```\r\n --> src/lib.rs:8:11\r\n  |\r\n8 |    let x: Wrapper<Box<dyn Any>> = Wrapper(Box::new(1i32));\r\n  |           ^^^^^^^^^^^^^^^^^^^^^\r\nhelp: Annotate the type when the value is created\r\n```\r\n\r\nThis error can show up when users are refactoring their code to make lines shorter or more readable, and they might otherwise be confused why an innocuous change can lead to a pretty esoteric compiler error that doesn't suggest a clear fix. Unsure what the best \"help\" message should be, though!\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83457/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83457/timeline", "performed_via_github_app": null, "state_reason": null}