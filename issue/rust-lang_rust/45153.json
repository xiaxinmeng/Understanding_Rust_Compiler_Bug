{"url": "https://api.github.com/repos/rust-lang/rust/issues/45153", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45153/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45153/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45153/events", "html_url": "https://github.com/rust-lang/rust/issues/45153", "id": 264001500, "node_id": "MDU6SXNzdWUyNjQwMDE1MDA=", "number": 45153, "title": "modify mir-opt testing infrastructure to require that lines appear continuously", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-09T19:27:54Z", "updated_at": "2017-10-16T10:58:40Z", "closed_at": "2017-10-16T10:58:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The mir-opt testing infrastructure ([described here](https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src/test/mir-opt/README.md)) allows us to write tests that do various \"string matches\" against the MIR output. The idea is that you can add comments at the end of [a test file like this one](https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src/test/mir-opt/basic_assignment.rs) that will specify output that must appear in the \"dump-mir\" output. [This is an example of such a comment](https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src/test/mir-opt/basic_assignment.rs#L38-L85). \r\n\r\nThe basic structure is like this:\r\n\r\n```\r\n// END RUST SOURCE\r\n// START rustc.node4.SimplifyCfg-initial.after.mir\r\n//     line0\r\n//     line1\r\n// END rustc.node4.SimplifyCfg-initial.after.mir\r\n```\r\n\r\nThe test infrastructure will then check that (a) `line0` appears in the given mir file and (b) `line1` appears sometime thereafter. **However,** it **also** allows for random stuff to appear in the middle. This is intended to make the test robust, but it also makes things quite surprising -- if you look at the tests, you'll see we mostly don't really want that most of the time.\r\n\r\nWhat I think we should do is modify it so that `line0` and `line1` must appear **consecutively**. For bonus points, we could allow a special comment like `// ...` to be included that would indicate that zero or more lines may be skipped in between.\r\n\r\nThe code that implements this check can be found in in [`runtest.rs`](https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src/tools/compiletest/src/runtest.rs). It begins [here, with this loop that walks over the `.rs` test file, extracting the expected lines](https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src/tools/compiletest/src/runtest.rs#L2241-L2259). The expected lines are accumulated into a vector. Whenever [we reach a `// END` comment](https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src/tools/compiletest/src/runtest.rs#L2246), we [then invoke `compare_mir_test_output()`](https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src/tools/compiletest/src/runtest.rs#L2251), which will [open the relevant file](https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src/tools/compiletest/src/runtest.rs#L2284-L2288) and [search for the expected lines](https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src/tools/compiletest/src/runtest.rs#L2292).\r\n\r\nSo the idea would be to detect `// ...` and record that in the vector (e.g., we might store a `Vec<ExpectedLine>`, where `enum ExpectedLine { Ellipsis, Some(String) }`). In `compare_mir_test_output()`, we would then skip lines only when an `Ellipsis` is found.\r\n\r\nWe will possibly have to adjust some of the existing tests, I'm not sure, but we should be able to do so readily enough.\r\n", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45153/timeline", "performed_via_github_app": null, "state_reason": "completed"}