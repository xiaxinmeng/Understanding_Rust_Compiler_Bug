{"url": "https://api.github.com/repos/rust-lang/rust/issues/101983", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101983/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101983/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101983/events", "html_url": "https://github.com/rust-lang/rust/issues/101983", "id": 1377108328, "node_id": "I_kwDOAAsO6M5SFQFo", "number": 101983, "title": "Scoped threads violate 'dereferenceable for function call' requirement of references", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-09-18T16:18:25Z", "updated_at": "2022-10-11T14:05:23Z", "closed_at": "2022-10-11T14:05:23Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Scopes threads as currently implemented are potentially unsound due to passing a reference to a function where the memory the reference points to is potentially deallocated while the function still runs.\r\n\r\nSpecifically, [this main function here](https://github.com/rust-lang/rust/blob/d13699d0be14c47e57d1c8961d7e7348d93017fc/library/std/src/thread/mod.rs#L502) takes as implicit argument its closure environment, which contains `f`. That environment might just be a reference to some memory that is allocated in the caller stack frame. However the `main` function can keep running after `their_packet` got dropped (implicitly at the end of `main`). Then the scope might end and the memory might be deallocated all while `main` is still running. If the environment is just a reference, it ends up being a newtype and we will (AFAIK) add the `dereferenceable` attribute, meaning deallocation while the function runs is actually LLVM UB.\r\n\r\nMiri found the error in [this doc test](https://doc.rust-lang.org/nightly/std/thread/fn.scope.html), where the `a.push(4)` invalidates the `&a` reference that was passed to the forked-off threads. (`a` doesn't actually get deallocated, it just has a unique reference created to it, but deallocation is also a possibility).\r\n\r\nTo fix this properly, I think we need a language extension: we want a way to store references in a type *without* having alias guarantees for that reference. In terms of Stacked Borrows this means Stacked Borrows will stop recursing at that type during retags. In terms of the LLVM IR we generate it means we must not add `noalias` or `dereferenceable` attributes for references inside that type. We don't have such a type currently but I think it makes sense to make `ManuallyDrop` that type (or even if we add a new type for this, `ManuallyDrop` should use it). Also see [this Zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Generalizing.20MaybeUninit.2FManuallyDrop).", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101983/timeline", "performed_via_github_app": null, "state_reason": "completed"}