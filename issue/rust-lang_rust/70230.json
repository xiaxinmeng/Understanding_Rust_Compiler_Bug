{"url": "https://api.github.com/repos/rust-lang/rust/issues/70230", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70230/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70230/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70230/events", "html_url": "https://github.com/rust-lang/rust/issues/70230", "id": 585521892, "node_id": "MDU6SXNzdWU1ODU1MjE4OTI=", "number": 70230, "title": "Idea: guaranteed-zero padding for niches", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1944310735, "node_id": "MDU6TGFiZWwxOTQ0MzEwNzM1", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-layout", "name": "A-layout", "color": "f7e101", "default": false, "description": "Area: Memory layout of types"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 32, "created_at": "2020-03-21T15:33:53Z", "updated_at": "2021-09-30T18:47:19Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "As suggested [here](https://github.com/rust-lang/unsafe-code-guidelines/issues/174#issuecomment-599160855), one option to gain more layout optimizations would be (either for all `repr(Rust)` types or with per-type opt-in) to use a different kind of padding.\r\n\r\nRight now, padding bytes may contain arbitrary data, and can be omitted when copying as they are \"unstable\" in a typed copy. Instead, we could also imagine a kind of padding (\"zero-padding\") that is *guaranteed to be zero*. This has the disadvantage that padding bytes need to be initialized on struct creation and copied when the struct is copied, but it has the advantage that padding bytes can become \"niches\" for layout optimizations.\r\n\r\nLLVM's padding is of the \"unstable\" kind, but we could just add explicit fields ourselves (fields that are guaranteed to be zero) when translating zero-padded types to LLVM.\r\n\r\nCc @eddyb ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70230/reactions", "total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70230/timeline", "performed_via_github_app": null, "state_reason": null}