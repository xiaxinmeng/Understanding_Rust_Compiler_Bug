{"url": "https://api.github.com/repos/rust-lang/rust/issues/88630", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88630/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88630/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88630/events", "html_url": "https://github.com/rust-lang/rust/issues/88630", "id": 988144927, "node_id": "MDU6SXNzdWU5ODgxNDQ5Mjc=", "number": 88630, "title": "Spurious E0282 'type annotations needed' when other compile errors exist", "user": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-09-03T23:04:08Z", "updated_at": "2023-05-11T17:27:11Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given [the following code](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=82d48342a112b2808e5acf17961e995f):\r\n\r\n```rust\r\nfn troublesome() {\r\n    does_not_exist();\r\n}\r\n\r\nfn innocent_bystander() {\r\n    // Approximately what assert_eq! does, inlined for the sake of simplicity\r\n    if \"x\".as_bytes() != &[] {\r\n        panic!();\r\n    }\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0425]: cannot find function `does_not_exist` in this scope\r\n --> src/lib.rs:2:5\r\n  |\r\n2 |     does_not_exist();\r\n  |     ^^^^^^^^^^^^^^ not found in this scope\r\n\r\nerror[E0282]: type annotations needed\r\n --> src/lib.rs:7:23\r\n  |\r\n7 |     if \"x\".as_bytes() != &[] {\r\n  |                       ^^ cannot infer type\r\n```\r\n\r\nHowever, if `does_not_exist();` is commented out, not only does its error E0425 disappear, the type inference error E0282 also does. This results in a frustrating situation where, whenever you have an error of the first sort, any `==`s or `assert_eq!()`s elsewhere in your crate that are fragile in this way also flood the error output. This makes it unnecessarily difficult to practice the workflow of \u201cchange something in a breaking way, then fix all the now-erroneous call sites\u201d. It could also mislead beginners because the compiler is confidently stating a falsehood.\r\n\r\nIdeally, these \u201ctype annotations needed\u201d errors would not appear unless the annotations were _actually needed._ An approximation of this would be to not show them when any other errors appear. An even better approximation, I speculate in ignorance of the compiler internals, would be to not show them if whatever inference pass would have resolved the concrete type is known to have been skipped due to previous errors.\r\n\r\nOr, perhaps this code is inherently fraught, and it would be wise for the programmer to actually provide a type annotation. In that case, it would be nice if there was a warning about that when the code compiles successfully.\r\n\r\n---\r\n\r\nTested on rustc 1.54.0 stable, also current nightly.\r\n\r\nI previously mentioned this problem [in #44345](https://github.com/rust-lang/rust/issues/44345#issuecomment-853517371), but got no response there, and I also now think that this situation is significantly different. In particular, **no trait implementations are being added**, and the error is entirely spurious rather than being a newly-ambiguous trait implementation selection.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88630/reactions", "total_count": 3, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88630/timeline", "performed_via_github_app": null, "state_reason": null}