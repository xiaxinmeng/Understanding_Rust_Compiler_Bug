{"url": "https://api.github.com/repos/rust-lang/rust/issues/7332", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/7332/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/7332/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/7332/events", "html_url": "https://github.com/rust-lang/rust/issues/7332", "id": 15902897, "node_id": "MDU6SXNzdWUxNTkwMjg5Nw==", "number": 7332, "title": "ICE in subst", "user": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-06-23T21:43:18Z", "updated_at": "2013-07-14T06:02:11Z", "closed_at": "2013-07-14T06:02:11Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Yet another one I couldn't reduce, this one started happening after I added the `prefill<U>` method.\n\nMight be something with default methods? (@sully?)\n\n``` rust\n// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// http://rust-lang.org/COPYRIGHT.\n// // Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\nuse std::hashmap::HashMap;\n\n#[allow(default_methods)]\n\n/**\n * An \"interner\" is a data structure that associates values with uint tags, allowing bidirectional\n * lookup (ie, given a value, get the tag, or given a tag, get the value). This allows for efficient\n * storage and comparison of large values that would be expensive to copy around or compare\n */\n// FIXME #7312: inherit `Default` when it exists\n// FIXME #6997: just use Iterator, not IteratorUtil\npub trait Interner<T> {\n    pub fn new() -> Self;\n    /// Create a new interner and intern all the values in `init`\n    pub fn prefill<U: IteratorUtil<T>>(init: U) -> Self {\n        let in: Self = Interner::new();\n        for init.advance |v| {\n            in.intern(v);\n        }\n        in\n    }\n    /// Intern a value, returning the tag used to refer to it\n    pub fn intern(&self, val: T) -> uint;\n    /// Get the value corresponding to a tag\n    pub fn get<'a>(&'a self, tag: uint) -> Option<&'a T>;\n    /// Get the tag corresponding to a value equivalent to `Q`\n    pub fn find_equiv<Q: Hash + IterBytes + Equiv<T>>(&self, val: &Q) -> Option<uint>;\n}\n\n/**\n * A simple implementation of an interner, using a std::hashmap::HashMap for associating a value to a\n * tag and storing values in a vector.\n */\npub struct SimpleInterner<T> {\n    priv map: HashMap<T, uint>,\n    priv vect: ~[T]\n}\n\nimpl<T: Hash + IterBytes + Eq> Interner<T> for SimpleInterner<T> {\n    pub fn new() -> SimpleInterner<T> {\n        SimpleInterner {\n            map: HashMap::new(),\n            vect: ~[]\n        }\n    }\n    pub fn prefill<U: IteratorUtil<T>>(init: U) -> SimpleInterner<T> {\n        let hm = HashMap::new();\n        let (lower, _) = init.size_hint();\n        hm.reserve_at_least(lower.get_or_zero());\n        let mut vect = std::vec::with_capacity(init.len());\n        let mut i = 0;\n        for init.advance |&v| {\n            if hm.find_or_insert(v, i) == i {\n                unsafe {\n                    std::vec::raw::init_elem(vect, i, v);\n                }\n                i += 1;\n            }\n        }\n        SimpleInterner {map: hm, vect: vect}\n    }\n    pub fn intern(&self, val: T) -> uint {\n        let i = self.vect.len();\n        let x = self.map.find_or_insert(val, i);\n        if x == i {\n            self.vec.push(val);\n        }\n        x\n    }\n    pub fn get<'a>(&'a self, tag: uint) -> Option<&'a T> {\n        if tag > self.vect.len() {\n            None\n        } else {\n            Some(&self.vect[tag])\n        }\n    }\n    pub fn find_equiv<Q: Hash + IterBytes + Equiv<T>>(&self, val: &Q) -> Option<uint> {\n        self.map.find_equiv(val)\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    #[should_fail]\n    fn i1 () {\n        let i: SimpleInterner<~str> = Interner::new();\n        i.get(13);\n    }\n}\n```\n", "closed_by": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/7332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/7332/timeline", "performed_via_github_app": null, "state_reason": "completed"}