{"url": "https://api.github.com/repos/rust-lang/rust/issues/73701", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73701/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73701/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73701/events", "html_url": "https://github.com/rust-lang/rust/issues/73701", "id": 644779309, "node_id": "MDU6SXNzdWU2NDQ3NzkzMDk=", "number": 73701, "title": "Suboptimal codegen: Unnecessary stack save of non-callee-preserved register", "user": {"login": "bdonlan", "id": 9473, "node_id": "MDQ6VXNlcjk0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/9473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdonlan", "html_url": "https://github.com/bdonlan", "followers_url": "https://api.github.com/users/bdonlan/followers", "following_url": "https://api.github.com/users/bdonlan/following{/other_user}", "gists_url": "https://api.github.com/users/bdonlan/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdonlan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdonlan/subscriptions", "organizations_url": "https://api.github.com/users/bdonlan/orgs", "repos_url": "https://api.github.com/users/bdonlan/repos", "events_url": "https://api.github.com/users/bdonlan/events{/privacy}", "received_events_url": "https://api.github.com/users/bdonlan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-24T17:19:20Z", "updated_at": "2023-02-16T10:51:20Z", "closed_at": "2023-02-16T10:51:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nWhen looking at the generated assembly of the following code (in a release build), I noticed some suboptimal code generation.\r\n\r\n```rust\r\npub fn g(n: Option<u64>) -> u64 {\r\n    n.unwrap()\r\n}\r\n```\r\n\r\nThis produces the following code (on nightly):\r\n\r\n```asm\r\nplayground::g:  # @playground::g\r\n# %bb.0:\r\n\tpushq\t%rax\r\n\ttestq\t%rdi, %rdi\r\n\tje\t.LBB1_1\r\n# %bb.2:\r\n\tmovq\t%rsi, %rax\r\n\tpopq\t%rcx\r\n\tretq\r\n\r\n.LBB1_1:\r\n\tleaq\t.L__unnamed_1(%rip), %rdi\r\n\tleaq\t.L__unnamed_3(%rip), %rdx\r\n\tmovl\t$43, %esi\r\n\tcallq\t*core::panicking::panic@GOTPCREL(%rip)\r\n\tud2\r\n                                        # -- End function\r\n```\r\n\r\nAs you can see, the %rax register is saved in the function preamble, then restored to the rcx register. Both rax and rcx registers can be safely clobbered by callees in the SystemV x86_64 calling convention - and in particular, the rax register holds the return value, so it shouldn't have anything interesting for the unwrap panic handler - so it seems strange that these push/pops would be emitted in the first place.\r\n\r\nNote that this is not emitted with `unwrap_or`:\r\n\r\n```rust\r\npub fn l(n: Option<u64>) -> u64 {\r\n    n.unwrap_or(42)\r\n}\r\n```\r\n\r\n```asm\r\nplayground::l:  # @playground::l\r\n# %bb.0:\r\n\ttestq\t%rdi, %rdi\r\n\tmovl\t$42, %eax\r\n\tcmovneq\t%rsi, %rax\r\n\tretq\r\n                                        # -- End function\r\n```\r\n\r\n### Meta\r\n\r\nI tested this on the rust playground using both stable and nightly in release mode: https://play.rust-lang.org/?version=nightly&mode=release&edition=2018&gist=138efc3ed37cca50141741c3e746e332", "closed_by": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73701/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73701/timeline", "performed_via_github_app": null, "state_reason": "completed"}