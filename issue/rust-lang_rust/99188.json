{"url": "https://api.github.com/repos/rust-lang/rust/issues/99188", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99188/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99188/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99188/events", "html_url": "https://github.com/rust-lang/rust/issues/99188", "id": 1302445774, "node_id": "I_kwDOAAsO6M5Nob7O", "number": 99188, "title": "Missing caching for HRTB projection equality bounds (`for<'x> T: Trait<'x, Assoc = ...>`).", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2022-07-12T18:05:15Z", "updated_at": "2023-04-05T17:39:52Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "*Originally reduced from a production application using the `tower` crate - see @fasterthanlime's [reduced repro repo](https://github.com/fasterthanlime/rustc-superlinear-sadness) for more background (though note that it exhibits several other failure modes as well)*\r\n```rust\r\ntrait Trait<'a> {\r\n    type A;\r\n    type B;\r\n    type C;\r\n    type D;\r\n\r\n    fn method() {}\r\n}\r\n\r\nimpl<T> Trait<'_> for &'_ T\r\nwhere\r\n    for<'x> T: Trait<'x, A = (), B = (), C = (), D = ()>,\r\n{\r\n    type A = ();\r\n    type B = ();\r\n    type C = ();\r\n    type D = ();\r\n}\r\n\r\nimpl Trait<'_> for () {\r\n    type A = ();\r\n    type B = ();\r\n    type C = ();\r\n    type D = ();\r\n}\r\n\r\npub fn main() {\r\n    #[cfg(depth = \"7\")]\r\n    <&&&&&&&() as Trait>::method();\r\n    #[cfg(depth = \"8\")]\r\n    <&&&&&&&&() as Trait>::method();\r\n    #[cfg(depth = \"9\")]\r\n    <&&&&&&&&&() as Trait>::method();\r\n    #[cfg(depth = \"10\")]\r\n    <&&&&&&&&&&() as Trait>::method();\r\n}\r\n```\r\n\r\nThe above example currently takes an exponential amount of time to compile, based on the type depth:\r\n```console\r\n$ curl -O https://gist.githubusercontent.com/eddyb/cd4221f14fff265280d135ddce5c9712/raw/a17cbf00af1894756d2b1bdd2e838cdd4db2bbe2/proj-exp.rs\r\n$ command time -f 'took %Us' rustc proj-exp.rs --emit=metadata --cfg 'depth = \"7\"'\r\ntook 0.74s\r\n$ command time -f 'took %Us' rustc proj-exp.rs --emit=metadata --cfg 'depth = \"8\"'\r\ntook 2.98s\r\n$ command time -f 'took %Us' rustc proj-exp.rs --emit=metadata --cfg 'depth = \"9\"'\r\ntook 11.92s\r\n$ command time -f 'took %Us' rustc proj-exp.rs --emit=metadata --cfg 'depth = \"10\"'\r\ntook 51.10s\r\n```\r\n\r\nWith every extra type layer, the time increases by ~4x, and that aligns well with there being 4 associated types.\r\n\r\nWhile this example is a bit silly, it doesn't take more than two associated types (both constrained at once) to cause the issue (although at higher depth or with a larger constant factor from having additional bounds).\r\n\r\nAnd I'm guessing it might be one of the main causes for applications built with the `tower` crate to experience long compile times (its main trait, `Service`, has `Response` and `Error` as two associated types), in large part because that's the kind of codebase this was originally reduced from (as per the note at the top of this issue).\r\n\r\n<hr/>\r\n\r\nThe reason I suspect caching is a combination of factors:\r\n* instrumenting `evaluate_predicate_recursively` found an exponential ramp in terms of duplicates (i.e. the number of times each unique obligation shows up), and many of them were `ProjectionPredicate`s\r\n  * this was done via `-Z self-profile`, though `RUSTC_LOG` might also work (and not require compiler changes)\r\n* many of those `ProjectionPredicate`s' had a bound lifetime listed in their `Binder`\r\n* [attempting to create a `ProjectionCacheKey`](https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler/rustc_trait_selection/src/traits/project.rs#L2124-L2126) returns `None` iff there are bound variables\r\n  * the comment is a bit worrying, given that it e.g. talks about \"escaping regions\" but checks for bounds ones\r\n  * (as an aside, `ProjectionCacheKey` not holding a `ParamEnv` is probably risky long-term)\r\n  * I've talked to @nikomatsakis and we're unsure if this is a historical artifact - my best guess is that it might have something to do with the fact that normalizing under binders didn't use to work (maybe a micro-opt to not even bother trying to cache those cases? were they that common?)\r\n* replacing the `for<'x> T: Trait<'x, ...` with `T: Trait<'static, ...` removes the exponential slowdown\r\n\r\n<hr/>\r\n\r\nSo the next step was to to try always caching (_**warning**: this is actually an unsound quick hack, `ProjectionCacheKey` should be modified to carry a `Binder<ProjectionTy>` instead of a `ProjectionTy`_):\r\n```patch\r\ndiff --git a/compiler/rustc_trait_selection/src/traits/project.rs b/compiler/rustc_trait_selection/src/traits/project.rs\r\nindex b3e7fbb3578..5d5f2f67842 100644\r\n--- a/compiler/rustc_trait_selection/src/traits/project.rs\r\n+++ b/compiler/rustc_trait_selection/src/traits/project.rs\r\n@@ -2123,7 +2123,7 @@ fn from_poly_projection_predicate(\r\n         let infcx = selcx.infcx();\r\n         // We don't do cross-snapshot caching of obligations with escaping regions,\r\n         // so there's no cache key to use\r\n-        predicate.no_bound_vars().map(|predicate| {\r\n+        Some(predicate.skip_binder()).map(|predicate| {\r\n             ProjectionCacheKey::new(\r\n                 // We don't attempt to match up with a specific type-variable state\r\n                 // from a specific call to `opt_normalize_projection_type` - if\r\n```\r\n\r\n*However*, the above hack does not appear to help and we're unsure why - the main other kind of `Predicate` that `evaluate_predicate_recursively` appears to process is `TraitPredicate`, which IIUC is almost always locally cached?\r\n\r\n(**EDIT**: turns out that the caching is more complex than initially assumed and requires further changes - see https://github.com/rust-lang/rust/issues/99188#issuecomment-1186611047 for a success)\r\n\r\nThen again, [there are other reductions](https://github.com/fasterthanlime/rustc-superlinear-sadness) that *don't* involve `ProjectionPredicate` and *still* cause their own exponential curves, so there might be several different caching issues.\r\n\r\n<hr/>\r\n\r\nI primarily wanted to open this issue on its own because there's definitely something weird with `ProjectionCacheKey` (even if a proper fix might be way more involved than just it), and there's a clear correlation between the number of associated types (being constrained) and the exponential curve.\r\n\r\ncc @rust-lang/types", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99188/reactions", "total_count": 41, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 17, "rocket": 0, "eyes": 22}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99188/timeline", "performed_via_github_app": null, "state_reason": null}