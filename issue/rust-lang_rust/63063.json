{"url": "https://api.github.com/repos/rust-lang/rust/issues/63063", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63063/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63063/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63063/events", "html_url": "https://github.com/rust-lang/rust/issues/63063", "id": 473710023, "node_id": "MDU6SXNzdWU0NzM3MTAwMjM=", "number": 63063, "title": "Tracking issue for RFC 2515, \"Permit impl Trait in type aliases\"", "user": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89436934, "node_id": "MDU6TGFiZWw4OTQzNjkzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-approved", "name": "B-RFC-approved", "color": "d304cb", "default": false, "description": "Approved by a merged RFC but not yet implemented."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 223796632, "node_id": "MDU6TGFiZWwyMjM3OTY2MzI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/relnotes", "name": "relnotes", "color": "fad8c7", "default": false, "description": "Marks issues that should be documented in the release notes of the next release."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 1206122880, "node_id": "MDU6TGFiZWwxMjA2MTIyODgw", "url": "https://api.github.com/repos/rust-lang/rust/labels/needs-fcp", "name": "needs-fcp", "color": "fceb9f", "default": false, "description": "This change is insta-stable, so needs a completed FCP to proceed."}, {"id": 1472502130, "node_id": "MDU6TGFiZWwxNDcyNTAyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-type_alias_impl_trait", "name": "F-type_alias_impl_trait", "color": "f9c0cc", "default": false, "description": "`#[feature(type_alias_impl_trait)]`"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 153, "created_at": "2019-07-28T06:12:00Z", "updated_at": "2023-06-13T10:38:38Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a tracking issue for the RFC \"Permit impl Trait in type aliases\" (rust-lang/rfcs#2515) under the feature gate `#![feature(type_alias_impl_trait)]`.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also uses as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n\r\n- [x] Implement the RFC\r\n- [ ] Adjust documentation ([see instructions on rustc-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rust-lang.github.io/rustc-guide/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rust-lang.github.io/rustc-guide/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved questions\r\n\r\n- [x] Exactly what should count as \"defining uses\" for opaque types?\r\n    - [x] Should the set of \"defining uses\" for an opaque type in an impl be just items of the impl, or include nested items within the impl functions etc? ([see here for example](https://github.com/rust-lang/rust/pull/52650#discussion_r204893239))\r\n    - [ ] should return-position-impl-trait also start allowing nested functions and closures to affect the hidden type? -- independent question to be answered separately by the lang team. Would simplify compiler.\r\n- [x] can we come up with consistent rules when cross-usage type inference can happen?\r\n    - ```rust\r\n      fn foo(x: bool) -> impl Debug {\r\n          if x { return vec![\"hi\"] }\r\n          Default::default()\r\n      }\r\n      ```\r\n      compiles on stable, even though there is no obvious type for `Default::default()` to produce a value of. We combine all return sites though and compute a shared type across them, so we'll figure out a `Vec<&'static str>`\r\n    - `impl Foo` can be used for associated types that expect a type that implements `Bar`, even if `Foo` and `Bar` are entirely unrelated. The hidden type must satisfy both. See https://github.com/rust-lang/rust/pull/99860/files for examples.\r\n\r\n- [x] impl traits in consts through const fns are allowed but shouldn't be: https://github.com/rust-lang/rust/issues/87277", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63063/reactions", "total_count": 374, "+1": 207, "-1": 0, "laugh": 0, "hooray": 84, "confused": 0, "heart": 51, "rocket": 32, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63063/timeline", "performed_via_github_app": null, "state_reason": null}