{"url": "https://api.github.com/repos/rust-lang/rust/issues/40200", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/40200/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/40200/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/40200/events", "html_url": "https://github.com/rust-lang/rust/issues/40200", "id": 211277095, "node_id": "MDU6SXNzdWUyMTEyNzcwOTU=", "number": 40200, "title": "Strange error with if-else branch and macro", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-02T03:14:43Z", "updated_at": "2017-03-02T03:35:43Z", "closed_at": "2017-03-02T03:35:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I ran into a very strange compile-time error with an implementation using a macro.\r\n\r\nHere's a static implementation that compiles:\r\n\r\n```rust\r\n/// Implementation of division as repeated subtraction.\r\nimpl Div<b2> for b2 {\r\n  type Output = Result<b2, DivisionError>;\r\n  \r\n  fn div(self, other: b2) -> Result<b2, DivisionError> {\r\n    let one = b2([ZERO, ONE]);\r\n    let zero = b2([ZERO; 2]);\r\n\r\n    if other == zero {\r\n      return Err(DivisionError::DivideByZeroError { arg1: self.to_string() });\r\n    } else if self < other {\r\n      // division is guaranteed to overflow in this case\r\n      return Err(DivisionError::OverflowError { arg1: self.to_string(),\r\n                                                arg2: other.to_string() })\r\n    }\r\n    \r\n    let mut div_lhs = other.clone();\r\n    let mut sub_count = zero;\r\n    \r\n    while div_lhs > other {\r\n      if let Ok(difference) = div_lhs - other {\r\n        div_lhs = difference;\r\n        if let Ok(sum) = sub_count + one {\r\n          sub_count = sum;\r\n        } else {\r\n          return Err(DivisionError::OverflowError { arg1: self.to_string(),\r\n                                                    arg2: other.to_string() })\r\n        }\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    Ok(sub_count)\r\n  }\r\n}\r\n```\r\n\r\nNow, here's a nearly identical macro that doesn't compile:\r\n\r\n```rust\r\n/// Implementation of division as repeated subtraction.\r\n    impl Div for $tyname {\r\n      type Output = Result<$tyname, DivisionError>;\r\n      fn div(self, other: $tyname) -> Result<$tyname, DivisionError> {\r\n        if other == ZERO {\r\n          Err(DivisionError::DivideByZeroError {\r\n            arg1: self.to_string()\r\n          })\r\n        } else if self < other {\r\n          // division is guaranteed to overflow in this case\r\n          return Err(DivisionError::OverflowError { arg1: self.to_string(),\r\n                                                    arg2: other.to_string() })\r\n        }\r\n        // TODO make these static\r\n        let mut one: $tyname = ONE;\r\n        let mut sub_count: $tyname = ZERO;\r\n    \r\n        let mut div_lhs = other.clone();\r\n        \r\n        while div_lhs > other {\r\n          if let Ok(difference) = div_lhs - other {\r\n            div_lhs = difference;\r\n            if let Ok(sum) = sub_count + one {\r\n              sub_count = sum;\r\n            } else {\r\n              return Err(DivisionError::OverflowError { arg1: self.to_string(),\r\n                                                        arg2: other.to_string() })\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n    \r\n        Ok(sub_count)\r\n      }\r\n    }\r\n```\r\n\r\nThe error is:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> examples/unit_ternary.rs:5:1\r\n  |\r\n5 | unit_nary! { t1, 3, u8 }\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `std::result::Result`\r\n  |\r\n  = note: expected type `()`\r\n             found type `std::result::Result<_, finite_fields::error::DivisionError>`\r\n  = help: here are some functions which might fulfill your needs:\r\n          - .unwrap()\r\n          - .unwrap_err()\r\n          - .unwrap_or_default()\r\n  = note: this error originates in a macro outside of the current crate\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nThe answer turned out to be wrapping the last part of the macro `impl` in an `else` block, but it was interesting that that was required when similar code was part of a macro and not explicitly defined.\r\n\r\nIf anyone is interested in reproducing this, I will have the code up in a day or so.\r\n\r\n```\r\nrustc 1.17.0-nightly (0e7727795 2017-02-19)\r\nbinary: rustc\r\ncommit-hash: 0e77277950aafd38ce3e52b7b1cd9bcc6664de3c\r\ncommit-date: 2017-02-19\r\nhost: x86_64-apple-darwin\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/40200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/40200/timeline", "performed_via_github_app": null, "state_reason": "completed"}