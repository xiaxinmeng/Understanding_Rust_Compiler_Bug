{"url": "https://api.github.com/repos/rust-lang/rust/issues/68817", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68817/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68817/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68817/events", "html_url": "https://github.com/rust-lang/rust/issues/68817", "id": 559428473, "node_id": "MDU6SXNzdWU1NTk0Mjg0NzM=", "number": 68817, "title": "llvm.dbg.value should be used instead of llvm.dbg.declare wherever possible.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-04T01:14:35Z", "updated_at": "2023-04-17T14:59:55Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "*(I'm opening this issue because I can't find a pre-existing one)*\r\n\r\n`llvm.dbg.declare` describes the location in memory of a debuginfo variable, whereas `llvm.dbg.value` describes the value itself directly. Today we only use the former, which means that in debug mode, all named variables are placed on the stack, even if they're simple scalars (e.g. integers).\r\n\r\nIdeally, we'd use `llvm.dbg.value` in the same situations where we skip creating a stack slot (e.g. LLVM `alloca`), i.e. for scalars, vectors and pairs of scalars.\r\n\r\n<hr/>\r\n\r\nHowever, this is much harder than I expected, mostly due to LLVM being too eager to throw away `llvm.dbg.value` if computing the value can be avoided (i.e. it's not used by anything else).\r\n\r\nI think `llvm.dbg.declare` *only* fares better because at `opt-level=0`, the lack of SROA means `alloca`s are kept around pretty much completely intact.\r\n\r\n`FastISel` (used at `opt-level=0`) [throws away any non-trivial `llvm.dbg.value`](https://github.com/llvm/llvm-project/blob/30a8865142abe309bb9aceede2708c171a2904ea/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp#L1445-L1446), but disabling it with `-C llvm-args=-fast-isel=0` only helps some simple cases (such as a reference to another stack variable - IMO `FastISel` should be improved to handle those, I don't see why it couldn't).\r\n\r\nIn general, it looks like Instruction Selection (\"`ISel`\") in LLVM ignores `llvm.dbg.value`s while building all of the machine instructions for a BB, and only *afterwards* does it come back to the `llvm.dbg.value`s and lower them to `DBG_VALUE`, using the value *only* if it already exists (i.e. something else needs that same value, at runtime), and otherwise it leads to `<optimized out>` vars.\r\n\r\nMaybe the upcoming `GlobalISel` approach handles `llvm.dbg.value` better, but I would need to target `AArch64` to even try it out, from what I hear (I might still do it out of curiosity).\r\n\r\n<hr/>\r\n\r\nWhile investigating this I also came across https://github.com/rust-lang/rust/pull/8855#discussion_r374392128 - but setting `AlwaysPreserve` to `true` only keeps the debuginfo variable around, it doesn't help at all with keeping any value alive (so you end up with `<optimized out>` in the debugger, instead of the variable missing).\r\n\r\nI haven't seen anything that would make `llvm.dbg.value` keep the value alive so it's guaranteed to be available to the debugger, but if there is such a thing, it's probably the way to go, if we want to avoid relying on the stack so much.\r\n\r\ncc @nikomatsakis @michaelwoerister @hanna-kruppe ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68817/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68817/timeline", "performed_via_github_app": null, "state_reason": null}