{"url": "https://api.github.com/repos/rust-lang/rust/issues/69299", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69299/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69299/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69299/events", "html_url": "https://github.com/rust-lang/rust/issues/69299", "id": 567837744, "node_id": "MDU6SXNzdWU1Njc4Mzc3NDQ=", "number": 69299, "title": "Compiler crashes after changing Deleting a Trait implemented and referenced by a struct", "user": {"login": "Koettlitz", "id": 24204559, "node_id": "MDQ6VXNlcjI0MjA0NTU5", "avatar_url": "https://avatars.githubusercontent.com/u/24204559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Koettlitz", "html_url": "https://github.com/Koettlitz", "followers_url": "https://api.github.com/users/Koettlitz/followers", "following_url": "https://api.github.com/users/Koettlitz/following{/other_user}", "gists_url": "https://api.github.com/users/Koettlitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Koettlitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Koettlitz/subscriptions", "organizations_url": "https://api.github.com/users/Koettlitz/orgs", "repos_url": "https://api.github.com/users/Koettlitz/repos", "events_url": "https://api.github.com/users/Koettlitz/events{/privacy}", "received_events_url": "https://api.github.com/users/Koettlitz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-19T20:49:39Z", "updated_at": "2020-02-19T21:45:23Z", "closed_at": "2020-02-19T21:44:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "[neurons.rs.txt](https://github.com/rust-lang/rust/files/4227383/neurons.rs.txt)\r\nThe attached file is the only file of the project that really contains source code, except the lib.rs.\r\nMy code included a Trait `Neuron`, that was implemented for Struct `FurtherNeuron`. `FurtherNeuron` had a field of type `Option<Vec<Rc<RefCell<&dyn Neuron>>>>` and some methods dealing with that field. I compiled it only with `cargo build` and everything was fine.\r\nI then restructured my code as follows:\r\n**I removed Trait `Neuron`, renamed the struct `FurtherNeuron` to \"Neuron\"** and changed the mentioned field to type `Option<Vec<Rc<RefCell<Neuron>>>>`. Calling `cargo build` again with `RUST_BACKTRACE=1` set printed the following output:\r\n\r\n\r\n>    Compiling neurons v0.1.0 (/home/david/rust/workspace/neurons)\r\n> error: internal compiler error: src/librustc/dep_graph/graph.rs:680: DepNode Hir(neurons[f81f]::neurons[0]::Neuron[0]::id[0]) should have been pre-allocated but wasn't.\r\n> \r\n> thread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:905:9\r\n> stack backtrace:\r\n>    0: backtrace::backtrace::libunwind::trace\r\n>              at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88\r\n>    1: backtrace::backtrace::trace_unsynchronized\r\n>              at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66\r\n>    2: std::sys_common::backtrace::_print_fmt\r\n>              at src/libstd/sys_common/backtrace.rs:84\r\n>    3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n>              at src/libstd/sys_common/backtrace.rs:61\r\n>    4: core::fmt::write\r\n>              at src/libcore/fmt/mod.rs:1025\r\n>    5: std::io::Write::write_fmt\r\n>              at src/libstd/io/mod.rs:1426\r\n>    6: std::sys_common::backtrace::_print\r\n>              at src/libstd/sys_common/backtrace.rs:65\r\n>    7: std::sys_common::backtrace::print\r\n>              at src/libstd/sys_common/backtrace.rs:50\r\n>    8: std::panicking::default_hook::{{closure}}\r\n>              at src/libstd/panicking.rs:193\r\n>    9: std::panicking::default_hook\r\n>              at src/libstd/panicking.rs:210\r\n>   10: rustc_driver::report_ice\r\n>   11: std::panicking::rust_panic_with_hook\r\n>              at src/libstd/panicking.rs:475\r\n>   12: std::panicking::begin_panic\r\n>   13: rustc_errors::HandlerInner::bug\r\n>   14: rustc_errors::Handler::bug\r\n>   15: rustc::util::bug::opt_span_bug_fmt::{{closure}}\r\n>   16: rustc::ty::context::tls::with_opt::{{closure}}\r\n>   17: rustc::ty::context::tls::with_opt\r\n>   18: rustc::util::bug::opt_span_bug_fmt\r\n>   19: rustc::util::bug::bug_fmt\r\n>   20: rustc::dep_graph::graph::DepGraph::try_mark_previous_green\r\n>   21: rustc::dep_graph::graph::DepGraph::try_mark_green\r\n>   22: rustc::dep_graph::graph::DepGraph::try_mark_green_and_read\r\n>   23: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n>   24: <rustc_typeck::outlives::implicit_infer::InferVisitor as rustc::hir::itemlikevisit::ItemLikeVisitor>::visit_item\r\n>   25: rustc::hir::Crate::visit_all_item_likes\r\n>   26: rustc_typeck::outlives::inferred_outlives_crate\r\n>   27: rustc::ty::query::__query_compute::inferred_outlives_crate\r\n>   28: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n>   29: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n>   30: rustc_typeck::outlives::inferred_outlives_of\r\n>   31: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::inferred_outlives_of>::compute\r\n>   32: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n>   33: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::force_query\r\n>   34: rustc::ty::query::plumbing::force_from_dep_node\r\n>   35: rustc::dep_graph::graph::DepGraph::try_mark_previous_green\r\n>   36: rustc::dep_graph::graph::DepGraph::try_mark_previous_green\r\n>   37: rustc::dep_graph::graph::DepGraph::try_mark_green\r\n>   38: rustc::dep_graph::graph::DepGraph::try_mark_green_and_read\r\n>   39: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n>   40: <rustc_typeck::collect::CollectItemTypesVisitor as rustc::hir::intravisit::Visitor>::visit_item\r\n>   41: rustc::hir::map::Map::visit_item_likes_in_module\r\n>   42: rustc_typeck::collect::collect_mod_item_types\r\n>   43: rustc::ty::query::__query_compute::collect_mod_item_types\r\n>   44: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::collect_mod_item_types>::compute\r\n>   45: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n>   46: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n>   47: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::ensure_query\r\n>   48: rustc_typeck::check_crate::{{closure}}::{{closure}}\r\n>   49: rustc::util::common::time\r\n>   50: rustc_typeck::check_crate\r\n>   51: rustc_interface::passes::analysis\r\n>   52: rustc::ty::query::__query_compute::analysis\r\n>   53: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n>   54: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n>   55: rustc::ty::context::tls::enter_global\r\n>   56: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n>   57: std::thread::local::LocalKey<T>::with\r\n>   58: scoped_tls::ScopedKey<T>::set\r\n>   59: syntax::with_globals\r\n> note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n> \r\n> note: the compiler unexpectedly panicked. this is a bug.\r\n> \r\n> note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n> \r\n> note: rustc 1.41.0 (5e1a79984 2020-01-27) running on x86_64-unknown-linux-gnu\r\n> \r\n> note: compiler flags: -C debuginfo=2 -C incremental --crate-type lib\r\n> \r\n> note: some of the compiler flags provided by cargo are hidden\r\n> \r\n> query stack during panic:\r\n> #0 [type_of] processing `neurons::Neuron::id`\r\n> #1 [inferred_outlives_crate] computing the inferred outlives predicates for items in this crate\r\n> #2 [inferred_outlives_of] processing `neurons::NeuronCore`\r\n> #3 [predicates_of] processing `neurons::NeuronCore`\r\n> #4 [collect_mod_item_types] collecting item types in module `neurons`\r\n> #5 [analysis] running analysis passes on this crate\r\n> end of query stack\r\n> error: aborting due to previous error\r\n> \r\n> error: could not compile `neurons`.\r\n\r\nI don't know why the socks appear in the compiler message line 15, 18 and 19. Can't see or mark them in the source of this text. Hope this helps you find/fix the bug :)", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69299/timeline", "performed_via_github_app": null, "state_reason": "completed"}