{"url": "https://api.github.com/repos/rust-lang/rust/issues/109268", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109268/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109268/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109268/events", "html_url": "https://github.com/rust-lang/rust/issues/109268", "id": 1629571124, "node_id": "I_kwDOAAsO6M5hIUg0", "number": 109268, "title": "infinite recursion with TAIT and `replace_opaque_types_with_inference_vars` in project", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472502130, "node_id": "MDU6TGFiZWwxNDcyNTAyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-type_alias_impl_trait", "name": "F-type_alias_impl_trait", "color": "f9c0cc", "default": false, "description": "`#[feature(type_alias_impl_trait)]`"}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-03-17T16:07:56Z", "updated_at": "2023-03-17T16:40:08Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\n#![feature(type_alias_impl_trait)]\r\n\r\ntype Foo<'a> = impl Fn() -> Foo<'a>;\r\n\r\nfn crash<'a>(_: &'a (), x: Foo<'a>) -> Foo<'a> {\r\n    x\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nthis causes rustc to freeze. This is similar to https://github.com/rust-lang/rust/blob/c50c62d225e004f5b488006d3d205a34363a128c/tests/ui/type-alias-impl-trait/issue-53398-cyclic-types.rs#L1-L10\r\n\r\nThe only reason that this test does not hang is the following hack in fulfillment https://github.com/rust-lang/rust/blob/c50c62d225e004f5b488006d3d205a34363a128c/compiler/rustc_trait_selection/src/traits/fulfill.rs#L711-L733\r\n\r\nbecause of this hack we only try to prove `<Foo as FnOnce<()>>::Output == Foo` using `evaluate_obligation` which uses `DefiningAnchor::Bubble` instead of the `DefiningAnchor::Bind` used by typeck and fulfill directly.\r\n\r\nThe reason this breaks when using `DefiningAnchor::Bind` is the following:\r\n\r\nwe call `project_and_unify_type` for `<Foo as FnOnce<()>>::Output == Foo` which normalizes `<Foo as FnOnce<()>>::Output` to `Foo`.\r\n\r\nThe issue is that we then replace `Foo` with a new inference variable (if we use `DefiningAnchor::Bind`) `?n` and add the item bounds of `Foo` as obligations on that new inference variable: https://github.com/rust-lang/rust/blob/c50c62d225e004f5b488006d3d205a34363a128c/compiler/rustc_trait_selection/src/traits/project.rs#L280-L286\r\n\r\nThis adds a new obligation `<?n as FnOnce<()>>::Output == Foo` to the fulfillment context, even though `?n` was already constrained to `Foo` again. The easiest fix is to resolve inference variables in obligations before adding them to the fulfillment context.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109268/timeline", "performed_via_github_app": null, "state_reason": null}