{"url": "https://api.github.com/repos/rust-lang/rust/issues/53555", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53555/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53555/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53555/events", "html_url": "https://github.com/rust-lang/rust/issues/53555", "id": 352451849, "node_id": "MDU6SXNzdWUzNTI0NTE4NDk=", "number": 53555, "title": "Tracking issue for a minimal subset of RFC 911, const fn", "user": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89436934, "node_id": "MDU6TGFiZWw4OTQzNjkzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-approved", "name": "B-RFC-approved", "color": "d304cb", "default": false, "description": "Approved by a merged RFC but not yet implemented."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 433146169, "node_id": "MDU6TGFiZWw0MzMxNDYxNjk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-implemented", "name": "B-RFC-implemented", "color": "d304cb", "default": false, "description": "Approved by a merged RFC and implemented."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 78, "created_at": "2018-08-21T09:13:00Z", "updated_at": "2018-10-13T10:54:05Z", "closed_at": "2018-10-13T00:52:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a tracking issue for the RFC \"Const functions and inherent methods\" (rust-lang/rfcs#911).\r\n\r\nThis issue only tracks a minimal subset of the proposal in 911 that we are (hopefully) comfortable with stabilizing. To opt into the minimal subset, use `#![feature(min_const_fn)]`. To use the more expansive feature set, you can continue using `#![feature(const_fn)]` and other associated feature gates.\r\n\r\nThe minimal set will **_not_** include items from the following (incomplete) list:\r\n\r\n1. `const fn`s with *type* parameters with bounds (including `where` clauses) in scope (including from the parent e.g. `impl`) other than: lifetimes, `Sized`, or (the \"un\"-bound) `?Sized`\r\n\r\n    This restriction exists because we are not sure about our story around what bounds mean in a `const fn` context. See https://github.com/rust-lang/rfcs/pull/2237, https://github.com/rust-rfcs/const-eval/issues/1, and https://github.com/Centril/rfc-effects/ for a discussion on this.\r\n\r\n2. `const fn`s with argument types or return types that contain `fn` pointers, `dyn Trait`, or `impl Trait`.\r\n\r\n    This is checked recursively.\r\n    The restriction ensures that you may not reach a value of these types by any means.\r\n\r\n    This restriction exists for the same reasons as in 1.\r\n\r\n3. `const fn`s with any operations on floating-point numbers. This is achieved by making any floating-point operation not be `const` inside `const fn`.\r\n\r\n    This restriction exists because we are not sure about the story wrt. determinism, achieving the same results on compile-time / run-time (including other machines) and floating points.\r\n\r\n4. using a `const fn` call in a pattern, e.g.;\r\n\r\n    ```rust\r\n    const fn twice<T: Copy>(x: T) -> (T, T) { (x, x) }\r\n    match x {\r\n        twice(21) => { ... }\r\n        _ => { ... }\r\n    }\r\n    ```\r\n\r\n5. anything else that is not currently in `const_fn` or constants\r\n    * raw ptr to `usize` cast  (e.g. `*const/mut T -> usize`).\r\n    * raw ptr deref.\r\n    * `if` / `if let` / `match`.\r\n    * `loop` / `while`.\r\n    * `let` and destructuring.\r\n\r\n6. union field access.\r\n\r\n7. code requiring `unsafe` blocks.\r\n\r\n**Exhaustive list of features supported in `const fn` with `#![feature(min_const_fn)]`:**\r\n\r\n1. type parameters where the parameters have any of the following as part of their bounds (either on `where` or directly on the parameters):\r\n    1. lifetimes\r\n    2. `Sized`\r\n\r\n    This means that `<T: 'a + ?Sized>` and `<T: 'b + Sized>` + `<T>` are all permitted.\r\n    Note that `?Sized` is the absence of a constraint when bounds have been fully elaborated\r\n    which includes adding implicit `Sized` bounds.\r\n    This entails that permitting `Sized` + lifetimes allows the above examples.\r\n\r\n    This rule also applies to type parameters of items that contain `const fn`s.\r\n\r\n2. arithmetic operators on integers\r\n3. boolean operators (except for `&&` and `||` which are banned since they are short-circuiting).\r\n4. any kind of aggregate constructor (array, `struct`, `enum`, tuple, ...)\r\n5. calls to other `const fn`s (methods and functions)\r\n6. index operations on arrays and slices\r\n7. field accesses on structs and tuples\r\n8. reading from constants (but not statics, not even taking a reference to a static)\r\n9. `&` and `*` (only dereferencing of references, not raw pointers)\r\n10. casts except for raw pointer to `usize` casts\r\n11. `const unsafe fn` is allowed, but the body must consist of safe operations only\r\n\r\nThe bar for stabilizing `const fn`s in libcore/liballoc/libstd will be that they are writable in stable user code (unless they are wrappers for intrinsics, i.e. `size_of` and `align_of`). This means that they must work with `min_const_fn`.\r\n\r\n**Things to be done before stabilizing:**\r\n\r\n- [x] Implement the `min_const_fn` feature gate. (https://github.com/rust-lang/rust/pull/53604)\r\n- [x] Ensure that the above restrictions apply.\r\n- [x] Adjust documentation ([see instructions on forge][doc-guide])\r\n- [x] Stabilization PR ([see instructions on forge][stabilization-guide])\r\n\r\n[stabilization-guide]: https://forge.rust-lang.org/stabilization-guide.html\r\n[doc-guide]: https://forge.rust-lang.org/stabilization-guide.html#updating-documentation\r\n\r\n**Unresolved questions:**\r\n\r\nNone.\r\n\r\n**Vocabulary:**\r\n\r\n[CTFE]: https://en.wikipedia.org/wiki/Compile_time_function_execution\r\n[promoted]: https://github.com/rust-lang/rfcs/blob/master/text/1414-rvalue_static_promotion.md\r\n\r\n+ [CTFE]\r\n+ [promoted]\r\n+ [rvalue promotion][promoted]", "closed_by": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53555/reactions", "total_count": 14, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 13, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53555/timeline", "performed_via_github_app": null, "state_reason": "completed"}