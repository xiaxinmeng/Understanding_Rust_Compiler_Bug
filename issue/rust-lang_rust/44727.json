{"url": "https://api.github.com/repos/rust-lang/rust/issues/44727", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44727/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44727/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44727/events", "html_url": "https://github.com/rust-lang/rust/issues/44727", "id": 259299080, "node_id": "MDU6SXNzdWUyNTkyOTkwODA=", "number": 44727, "title": "refactor `impl trait` to model `abstract type` a bit better", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 693557542, "node_id": "MDU6TGFiZWw2OTM1NTc1NDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-traits", "name": "WG-traits", "color": "c2e0c6", "default": false, "description": "Working group: Traits, https://internals.rust-lang.org/t/announcing-traits-working-group/6804"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-09-20T20:55:29Z", "updated_at": "2017-11-21T12:33:04Z", "closed_at": "2017-11-21T12:33:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After some discussion with @cramertj, I wanted to write up a rough idea for how to represent `impl Trait` in the HIR etc. The key idea is to move towards a place where we represent the `abstract type` that an `impl Trait` conceptually desugars to as a distinct \"item\" in the HIR.\r\n\r\nToday, for each usage of `impl Trait`, we create a def-id, which basically represents the `abstract type` behind the `impl Trait`. However, in the HIR itself, we continue to mirror the syntax, so for example [the variant for `ImplTrait` includes the bounds listed inline](https://github.com/rust-lang/rust/blob/f60bc3ac0c20f7b3ab85df1e5e2e3217a7a95630/src/librustc/hir/mod.rs#L1386-L1388). This is not I think what we really want.\r\n\r\nThe refactoring then is to do the following:\r\n\r\n- Add to the `hir::Crate` a \"abstract type\" vector sort of like [the list of bodies](https://github.com/rust-lang/rust/blob/f60bc3ac0c20f7b3ab85df1e5e2e3217a7a95630/src/librustc/hir/mod.rs#L437).\r\n- Add a `hir::AbstractType` struct that contains the following:\r\n    - A scope (which is the def-id of some item)\r\n    - A list of generics (types, lifetimes)\r\n    - A list of bounds\r\n- Modify the `ImplTrait` variant of `hir::Ty` with to include a \"list of substs\" in some form (and not have bounds)\r\n- During HIR lowering:\r\n    - track the generics that are in scope at any given item\r\n    - when we encounter an `impl trait`, we create and push a `hir::AbstractType`:\r\n        - scope is the enclosing item\r\n        - clone the generics that are in scope to serve as the list of generics\r\n        - move the list of bounds from the `ast::Ty` into the `hir::AbstractType`\r\n    - generate the `hir::ImplTrait(DefId, [T, 'a])` where the \"substs\" are references to all the lifetimse/types in scope (I'm not entirely sure how best to represent and synthesize those?)\r\n- If we do this right:\r\n    - Region name resolution will basically *just work*, and in particular there is no need to worry about early- vs late-bound resolution.\r\n    - When we add first class abstract types, they can build on this same data structure\r\n        - we'll have to solve the unification problems of course =)", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44727/timeline", "performed_via_github_app": null, "state_reason": "completed"}