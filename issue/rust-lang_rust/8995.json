{"url": "https://api.github.com/repos/rust-lang/rust/issues/8995", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/8995/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/8995/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/8995/events", "html_url": "https://github.com/rust-lang/rust/issues/8995", "id": 19036506, "node_id": "MDU6SXNzdWUxOTAzNjUwNg==", "number": 8995, "title": "Tracking issue for inherent associated type.", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89436934, "node_id": "MDU6TGFiZWw4OTQzNjkzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-approved", "name": "B-RFC-approved", "color": "d304cb", "default": false, "description": "Approved by a merged RFC but not yet implemented."}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2773757079, "node_id": "MDU6TGFiZWwyNzczNzU3MDc5", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-inherent_associated_types", "name": "F-inherent_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(inherent_associated_types)]`"}, {"id": 3537215072, "node_id": "LA_kwDOAAsO6M7S1Z5g", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-unimplemented", "name": "S-tracking-unimplemented", "color": "4682b4", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 32, "created_at": "2013-09-05T10:41:35Z", "updated_at": "2023-05-30T22:33:33Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This is a tracking issue for the [\"inherent associate type\" part of \"inherent associated items\" part of the RFC 195 \"associated items\"](https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md#inherent-associated-items)\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however not meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Original description\r\n\r\n(This code is written in ancient version of Rust, and is not meant to be used directly.)\r\n\r\nWhen developing a type-parametric impl, I found myself writing code somewhat like this:\r\n\r\n``` rust\r\n    struct Grammar<T, NT> { ... }\r\n\r\n    impl<T:Clone,NT:Eq+Hash+Clone+Primable> Grammar<T,NT> {\r\n        fn to_nt_map(&self) -> HashMap<NT, ~[Prod<T,NT>]>\r\n        {\r\n            type Rules = ~[Prod<T,NT>];\r\n            type NTMap = HashMap<NT, Rules>;        \r\n          ...\r\n        }\r\n\r\n        fn from_nt_map(start: &NT, rules: &HashMap<NT, ~[Prod<T,NT>]>)\r\n            -> Grammar<T,NT>\r\n        {\r\n            type Rules = ~[Prod<T,NT>];\r\n            type NTMap = HashMap<NT, Rules>;\r\n          ...\r\n        }\r\n\r\n        pub fn eliminate_left_recursion(&self) -> Grammar<T,NT>\r\n        {\r\n          ...\r\n        }\r\n\r\n        ...\r\n\r\n    }\r\n```\r\n\r\nI cannot make a `type` definition for `HashMap<NT, ~[Prod<T,NT>]>` outside of the `impl` because it then those free references to `NT` and `T` would be unbound.\r\n\r\nAnd I cannot put a `type` definition within the impl, even an impl for a struct such as this (it simply does not parse with the current grammar).\r\n\r\n(Being able to put type definitions within impls will probably arise naturally from #5033, when we get around to that.  But that is nonetheless a separate issue from this: Associated Types (and Associated Items) are about enabling certain patterns for the _user_ of a trait, while this ticket describes a convenience for the _implementor_ of a struct.)\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [ ] Implement the RFC\r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\n### Implementation history\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n* Add a feature gate so they can be declared (but not used): #82516\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/8995/reactions", "total_count": 61, "+1": 56, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0, "rocket": 0, "eyes": 3}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/8995/timeline", "performed_via_github_app": null, "state_reason": null}