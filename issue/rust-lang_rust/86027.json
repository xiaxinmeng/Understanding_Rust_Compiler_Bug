{"url": "https://api.github.com/repos/rust-lang/rust/issues/86027", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86027/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86027/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86027/events", "html_url": "https://github.com/rust-lang/rust/issues/86027", "id": 912326742, "node_id": "MDU6SXNzdWU5MTIzMjY3NDI=", "number": 86027, "title": "Footgun with `catch_unwind` when catching panic-on-drop types", "user": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2021-06-05T16:05:34Z", "updated_at": "2022-12-06T11:39:57Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Originally reported by @SabrinaJewson in https://github.com/rust-lang/rust/pull/85927\r\n\r\n---\r\n\r\n`catch_unwind(code)` is often used to make sure no panics from `code` can cause further unwinding/panics. However, when catching a panic with a payload that panics on Drop, most usages of `catch_unwind(code)` will still result in further unwinding and often unsoundness.\r\n\r\n```rust\r\nstruct Bomb;\r\n\r\nimpl Drop for Bomb {\r\n    fn drop(&mut self) {\r\n        panic!();\r\n    }\r\n}\r\n\r\nstd::panic::panic_any(Bomb);\r\n```\r\n\r\nExample in rustc (found by @mystor):\r\nhttps://github.com/rust-lang/rust/blob/5ea19239d9d6f49fdd76513a36386d7e83708e3f/compiler/rustc_ast/src/mut_visit.rs#L299-L300\r\n\r\nHere, the `Result` containing the panic payload is dropped before `abort()` is called, which might cause a panic.\r\n\r\n**Edit**: Looks like the `_` doesn't cause an immediate drop as a parameter, so this case works fine, possibly by accident.\r\n\r\nAnother example in the standard library:\r\nhttps://github.com/rust-lang/rust/blob/5ea19239d9d6f49fdd76513a36386d7e83708e3f/library/std/src/rt.rs#L34-L39\r\n\r\n```rust\r\nfn main() {\r\n    std::panic::panic_any(Bomb);\r\n}\r\n```\r\n```\r\nthread 'main' panicked at 'Box<Any>', src/main.rs:12:5\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\nthread 'main' panicked at 'explicit panic', src/main.rs:7:9\r\nfatal runtime error: failed to initiate panic, error 5\r\nabort (core dumped)\r\n```\r\n\r\nAnd another case in the `proc_macro` bridge:\r\nhttps://github.com/rust-lang/rust/blob/5ea19239d9d6f49fdd76513a36386d7e83708e3f/library/proc_macro/src/bridge/server.rs#L115-L116\r\n\r\n```rust\r\n#[proc_macro]\r\npub fn hey(_: proc_macro::TokenStream) -> proc_macro::TokenStream {\r\n    std::panic::panic_any(Bomb);\r\n}\r\n```\r\n\r\n```\r\nthread 'rustc' panicked at 'explicit panic', src/lib.rs:5:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86027/reactions", "total_count": 5, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 5}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86027/timeline", "performed_via_github_app": null, "state_reason": null}