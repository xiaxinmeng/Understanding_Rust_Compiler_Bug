{"url": "https://api.github.com/repos/rust-lang/rust/issues/49431", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49431/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49431/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49431/events", "html_url": "https://github.com/rust-lang/rust/issues/49431", "id": 309135932, "node_id": "MDU6SXNzdWUzMDkxMzU5MzI=", "number": 49431, "title": "Confusing error message when returning impl Trait with multiple lifetimes", "user": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-03-27T21:12:52Z", "updated_at": "2022-12-16T00:56:45Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Given\r\n\r\n```rust\r\nuse std::fmt::Debug;\r\n\r\nfn foobar<'a, 'b>(foo: &'a str, bar: &'b str) -> impl Debug + 'a + 'b {\r\n    (foo, bar)\r\n}\r\n\r\nfn main() {\r\n    let foo = \"hello\".to_owned();\r\n    let bar = \"world\".to_owned();\r\n    println!(\"{:?}\", foobar(&foo, &bar));\r\n}\r\n```\r\n\r\nyou currently (`rustc 1.26.0-nightly (188e693b3 2018-03-26)`) get the errors\r\n\r\n```\r\nerror[E0623]: lifetime mismatch\r\n --> foo.rs:3:50\r\n  |\r\n3 | fn foobar<'a, 'b>(foo: &'a str, bar: &'b str) -> impl Debug + 'a + 'b {\r\n  |                                      -------     ^^^^^^^^^^^^^^^^^^^^\r\n  |                                      |           |\r\n  |                                      |           ...but data from `foo` is returned here\r\n  |                                      this parameter and the return type are declared with different lifetimes...\r\n\r\nerror[E0623]: lifetime mismatch\r\n --> foo.rs:3:50\r\n  |\r\n3 | fn foobar<'a, 'b>(foo: &'a str, bar: &'b str) -> impl Debug + 'a + 'b {\r\n  |                        -------                   ^^^^^^^^^^^^^^^^^^^^\r\n  |                        |                         |\r\n  |                        |                         ...but data from `bar` is returned here\r\n  |                        this parameter and the return type are declared with different lifetimes...\r\n```\r\n\r\nThis not being an allowed syntax was briefly [mentioned by @nikomatsakis](https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999) in #34511, quoting the relevant part of the comment: \r\n\r\n> This is kind of annoying to do; we can't use `'cx + 'gcx`. We can I suppose make a dummy trait:\r\n> \r\n> ```rust\r\n> trait Captures<'a> { }\r\n> impl<T: ?Sized> Captures<'a> for T { }\r\n> ```\r\n>\r\n> and then return something like this `impl Iterator<Item = &'tcx Foo> + Captures<'gcx> + Captures<'cx>`.\r\n\r\nAs far as I recall/can discover this limitation was never followed up on in that thread.\r\n\r\n---\r\n\r\nAfter some RFC spelunking I cannot find anything restricting a type bound to having at most a single lifetime bound, [RFC 192 Appendix B](https://github.com/rust-lang/rfcs/blob/90a6f4e6901277e90f333e8228bef68a0db2e492/text/0192-bounds-on-object-and-generic-types.md#appendix-b-why-object-types-must-have-exactly-one-bound) may be relevant, but I don't believe that the `Trait` part of `impl Trait` is an \"object type\", it seems to me to be a \"type parameter bound\". Re-reading the `impl Trait` RFC series doesn't appear to clear this up, exactly what sort of syntax `Trait` is is never explicitly named, the [original RFC](https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md#syntax) simply says\r\n\r\n> The proposed syntax is `impl Trait` in return type position, composing like trait objects to forms like `impl Foo+Send+'a`.\r\n\r\nIt seems to me that supporting multiple lifetime bounds on `impl Trait` should be fine, conceptually it seems to be the equivalent of:\r\n\r\n```rust\r\nuse std::fmt::Debug;\r\n\r\nfn foobar<'a, 'b, T: Debug + 'a + 'b>(foo: &'a &'b T) {\r\n    println!(\"{:?}\", foo);\r\n}\r\n\r\nfn main() {\r\n    let foo = \"hello world\";\r\n    {\r\n        let bar = &foo;\r\n        {\r\n            let baz = &bar;\r\n            foobar(baz);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\nWhether or not `impl Trait` can be extended to support multiple lifetimes, it seems like there should be an error message that the form `impl Foo + 'a + 'b` is not valid currently, rather than some weird lifetime mismatch errors.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49431/reactions", "total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49431/timeline", "performed_via_github_app": null, "state_reason": null}