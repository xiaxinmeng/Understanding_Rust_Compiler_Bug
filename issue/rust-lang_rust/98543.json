{"url": "https://api.github.com/repos/rust-lang/rust/issues/98543", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98543/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98543/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98543/events", "html_url": "https://github.com/rust-lang/rust/issues/98543", "id": 1284955092, "node_id": "I_kwDOAAsO6M5MltvU", "number": 98543, "title": "implied bounds from associated types may not actually get implied pt 2.", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}, {"id": 4219948899, "node_id": "LA_kwDOAAsO6M77h09j", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-implied-bounds", "name": "A-implied-bounds", "color": "f7e101", "default": false, "description": "Area: Related to implied bounds (e.g., if you have `T: Foo`, what else do you know?)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-06-26T15:29:15Z", "updated_at": "2022-08-19T10:03:14Z", "closed_at": "2022-08-19T10:03:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "revives #91068 which has been fixed by only considering implied bounds from projections if they don't normalize **while typechecking the function itself**\r\n\r\n\r\nhttps://github.com/rust-lang/rust/blob/7125846d17a549866aa1ed0ea28778537378fca8/compiler/rustc_borrowck/src/type_check/free_region_relations.rs#L256-L289\r\n\r\nThis does **not** mean that the projection won't normalize when getting called:\r\n```rust\r\ntrait Trait {\r\n    type Type;\r\n}\r\n\r\nimpl<T> Trait for T {\r\n    type Type = ();\r\n}\r\n\r\nfn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str\r\nwhere\r\n    &'a &'b (): Trait, // <- adding this bound is the change from #91068 \r\n{\r\n    s\r\n}\r\n\r\nfn main() {\r\n    let x = String::from(\"Hello World!\");\r\n    let y = f(&x, ());\r\n    drop(x);\r\n    println!(\"{}\", y);\r\n}\r\n```\r\nThe added bound prevents `<&'a &'b () as Trait>::Type` from getting normalized while borrowchecking `f`, as we prefer param candidates over impl candidates. When calling `f`, we don't have the `&'a &'b (): Trait` in our `param_env`, so we can now freely use the impl candidate to normalize the projection. The caller therefore doesn't have to prove that  `&'a &'b ()` is well formed, causing unsoundness.\r\n\r\nI am a bit surprised that the caller doesn't have to prove that the `&'a &'b (): Trait` obligation is well formed, which would cause this example to not be unsound. It doesn't remove the general unsoundness here though. Here's an alternative test where that isn't enough:\r\n```rust\r\ntrait Trait {\r\n    type Type;\r\n}\r\n\r\nimpl<T> Trait for T {\r\n    type Type = ();\r\n}\r\n\r\nfn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str\r\nwhere\r\n    for<'what, 'ever> &'what &'ever (): Trait,\r\n{\r\n    s\r\n}\r\n\r\nfn main() {\r\n    let x = String::from(\"Hello World!\");\r\n    let y = f(&x, ());\r\n    drop(x);\r\n    println!(\"{}\", y);\r\n}\r\n```", "closed_by": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98543/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98543/timeline", "performed_via_github_app": null, "state_reason": "completed"}