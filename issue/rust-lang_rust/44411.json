{"url": "https://api.github.com/repos/rust-lang/rust/issues/44411", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44411/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44411/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44411/events", "html_url": "https://github.com/rust-lang/rust/issues/44411", "id": 256136972, "node_id": "MDU6SXNzdWUyNTYxMzY5NzI=", "number": 44411, "title": "s390x needs minimum alignment for global variables", "user": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-08T04:20:44Z", "updated_at": "2017-09-11T15:35:51Z", "closed_at": "2017-09-11T15:35:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Clang has `TargetInfo::MinGlobalAlign` which sets a minimum alignment for global variables (unless explicitly aligned less).  This is needed for s390x to have 2-byte alignment even for 1-byte-aligned types, as explained in [clang r181210](https://github.com/llvm-mirror/clang/commit/6b20351a1d6178addfaa86716aaba36f2e9ea188):\r\n\r\n    This patch adds a new common code feature that allows platform code to\r\n    request minimum alignment of global symbols.  The background for this is\r\n    that on SystemZ, the most efficient way to load addresses of global symbol\r\n    is the LOAD ADDRESS RELATIVE LONG (LARL) instruction.  This instruction\r\n    provides PC-relative addressing, but only to *even* addresses.  For this\r\n    reason, existing compilers will guarantee that global symbols are always\r\n    aligned to at least 2.  [ Since symbols would otherwise already use a\r\n    default alignment based on their type, this will usually only affect global\r\n    objects of character type or character arrays. ]  GCC also allows creating\r\n    symbols without that extra alignment by using explicit \"aligned\" attributes\r\n    (which then need to be used on both definition and each use of the symbol).\r\n\r\nFor Rust, I ran into trouble here when running `bootstrap` from 1.21-beta.  It now uses `serde_json`, and the static `serde_json::read::ESCAPE: [bool; 256]` was misaligned.  In the binary and in memory it was at an odd address, but the generated code/relocation tried to read it from an even address, so it was off by one.  This led to `serde_json` throwing an `InvalidUnicodeCodePoint` error on a space (0x20), because it was effectively indexing the entry for 0x1F (which needs to be escaped in JSON).", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44411/timeline", "performed_via_github_app": null, "state_reason": "completed"}