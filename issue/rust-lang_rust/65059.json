{"url": "https://api.github.com/repos/rust-lang/rust/issues/65059", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65059/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65059/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65059/events", "html_url": "https://github.com/rust-lang/rust/issues/65059", "id": 502113773, "node_id": "MDU6SXNzdWU1MDIxMTM3NzM=", "number": 65059, "title": "line num capped to 2 digits in errors", "user": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36956, "node_id": "MDU6TGFiZWwzNjk1Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-frontend", "name": "A-frontend", "color": "f7e101", "default": false, "description": "Area: frontend (errors, parsing and HIR)"}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-03T14:48:28Z", "updated_at": "2019-10-03T22:30:04Z", "closed_at": "2019-10-03T14:59:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nerror[E0282]: type annotations needed for `std::result::Result<(), E>`\r\n --> sysroot_src/src/libtest/lib.rs:1627:42\r\n  |\r\n16|     let result = Ok(testfn());\r\n  |         ------ consider giving `result` the explicit type `std::result::Result<(), E>`, with the type parameters specified\r\n...\r\n16|         Err(e) => calc_result(&desc, Err(e.as_ref())),\r\n  |                                          ^ cannot infer type\r\n  |\r\n  = note: type must be known at this point\r\n```\r\n\r\nCompare `sysroot_src/src/libtest/lib.rs:1627:42` with `16|     let result = Ok(testfn());`.\r\n\r\n```bash\r\n$ rustc -V\r\nrustc 1.40.0-nightly (2daa404e9 2019-10-02)\r\n$ git diff\r\ndiff --git a/src/libtest/lib.rs b/src/libtest/lib.rs\r\nindex 8b76080..7d57460 100644\r\n--- a/src/libtest/lib.rs\r\n+++ b/src/libtest/lib.rs\r\n@@ -1493,7 +1493,7 @@ pub fn run_test(\r\n         report_time: bool,\r\n         strategy: RunStrategy,\r\n         monitor_ch: Sender<MonitorMsg>,\r\n-        testfn: Box<dyn FnOnce() + Send>,\r\n+        testfn: Box<impl FnOnce() + Send + 'static>,\r\n         concurrency: Concurrent,\r\n     ) {\r\n         let name = desc.name.clone();\r\n@@ -1509,7 +1509,7 @@ pub fn run_test(\r\n         // If the platform is single-threaded we're just going to run\r\n         // the test synchronously, regardless of the concurrency\r\n         // level.\r\n-        let supports_threads = !cfg!(target_os = \"emscripten\") && !cfg!(target_arch = \"wasm32\");\r\n+        let supports_threads = false;\r\n         if concurrency == Concurrent::Yes && supports_threads {\r\n             let cfg = thread::Builder::new().name(name.as_slice().to_owned());\r\n             cfg.spawn(runtest).unwrap();\r\n@@ -1531,20 +1531,8 @@ pub fn run_test(\r\n                 (benchfn.clone())(harness)\r\n             });\r\n         }\r\n-        DynTestFn(f) => {\r\n-            match strategy {\r\n-                RunStrategy::InProcess => (),\r\n-                _ => panic!(\"Cannot run dynamic test fn out-of-process\"),\r\n-            };\r\n-            run_test_inner(\r\n-                desc,\r\n-                opts.nocapture,\r\n-                opts.report_time,\r\n-                strategy,\r\n-                monitor_ch,\r\n-                Box::new(move || __rust_begin_short_backtrace(f)),\r\n-                concurrency\r\n-            );\r\n+        DynTestFn(_f) => {\r\n+            unimplemented!();\r\n         }\r\n         StaticTestFn(f) => run_test_inner(\r\n             desc,\r\n@@ -1623,7 +1611,7 @@ fn run_test_in_process(desc: TestDesc,\r\n     } else {\r\n         None\r\n     };\r\n-    let result = catch_unwind(AssertUnwindSafe(testfn));\r\n+    let result = Ok(testfn());\r\n     let exec_time = start.map(|start| {\r\n         let duration = start.elapsed();\r\n         TestExecTime(duration)\r\n```", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65059/timeline", "performed_via_github_app": null, "state_reason": "completed"}