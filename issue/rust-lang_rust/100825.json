{"url": "https://api.github.com/repos/rust-lang/rust/issues/100825", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100825/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100825/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100825/events", "html_url": "https://github.com/rust-lang/rust/issues/100825", "id": 1345332714, "node_id": "I_kwDOAAsO6M5QMCXq", "number": 100825, "title": "Parenthesized match guards should have a specific parser error (and suggestion)", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 27424086, "node_id": "MDU6TGFiZWwyNzQyNDA4Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-parser", "name": "A-parser", "color": "f7e101", "default": false, "description": "Area: The parsing of Rust source code to an AST."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}, {"id": 1659943986, "node_id": "MDU6TGFiZWwxNjU5OTQzOTg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-verbose", "name": "D-verbose", "color": "c9f7a3", "default": false, "description": "Too much output caused by a single piece of incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-08-20T23:47:08Z", "updated_at": "2022-08-22T11:17:16Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: [[playground]](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=50cbb8aafd2bd1cb1bb6f749ee2f1a34)\r\n\r\n```rust\r\npub fn test(val: i32) {\r\n    match val {\r\n        (0 if true) => {}\r\n        _ => {}\r\n    }\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror: expected identifier, found keyword `if`\r\n --> src/lib.rs:3:12\r\n  |\r\n3 |         (0 if true) => {}\r\n  |            ^^ expected identifier, found keyword\r\n\r\nerror: expected one of `)`, `,`, `...`, `..=`, `..`, or `|`, found keyword `if`\r\n --> src/lib.rs:3:12\r\n  |\r\n3 |         (0 if true) => {}\r\n  |           -^^ expected one of `)`, `,`, `...`, `..=`, `..`, or `|`\r\n  |           |\r\n  |           help: missing `,`\r\n\r\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `true`\r\n --> src/lib.rs:3:15\r\n  |\r\n3 |         (0 if true) => {}\r\n  |              -^^^^ expected one of `)`, `,`, `@`, or `|`\r\n  |              |\r\n  |              help: missing `,`\r\n\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:3:9\r\n  |\r\n2 |     match val {\r\n  |           --- this expression has type `i32`\r\n3 |         (0 if true) => {}\r\n  |         ^^^^^^^^^^^ expected `i32`, found tuple\r\n  |\r\n  = note: expected type `i32`\r\n            found tuple `(_, _, _)`\r\n```\r\n\r\nIdeally the output should look like:\r\n\r\n```\r\nerror: match pattern guard not allowed here\r\n --> src/lib.rs:3:9\r\n  |\r\n3 |         (0 if true) => {}\r\n  |            ^^^^^^^ not supported\r\n  |\r\n  = note: match pattern guards must appear at the top level\r\nhelp: move the guard to the top level\r\n  |\r\n3 -         (_ if true) => {}\r\n3 +         (_) if true => {}\r\n  |\r\n```\r\n\r\nAs-is, results in `unused_parens` warning. Alternative help that doesn't:\r\n\r\n```\r\nhelp: remove these parentheses\r\n  |\r\n3 -         (0 if true) => {}\r\n3 +         0 if true => {}\r\n  |\r\n```\r\n\r\nBonus points:\r\n\r\n- Stash this error while parsing and tweak it later when types are available; e.g. if the scrutinee actually is `(_, _, _)`, perhaps `(_, r#if, true)` (what this currently seemingly error-recovers as) actually *was* meant. With a non-tuple scrutinee, though, clearly the parenthesization was meant.\r\n- Support parsing parenthesized guards in nested patterns and give the nice parser error there. Note that for the guard lifting to be semantics preserving, it must not exit any alt (`|`) pattern combinations.\r\n    <details><summary>examples</summary>\r\n\r\n    ```rust\r\n    Some(0 if true) => Some(_) if true;\r\n    (0, 0 if true) => (0, 0) if true;\r\n    (_ if true) | 0 => {} // cannot be written as a single pattern\r\n    0 | _ if true => 0 | _ if true; // is a valid pattern: (0 | _) if true\r\n    Struct { field: 0 if true } => Struct { field: 0 } if true;\r\n    ```\r\n    -----\r\n    </details>\r\n\r\n@rustbot label +D-confusing +D-verbose\r\n\r\n(Is this https://github.com/rust-lang/rust/labels/D-invalid-suggestion? The `help` is not moving towards correct code.)\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100825/timeline", "performed_via_github_app": null, "state_reason": null}