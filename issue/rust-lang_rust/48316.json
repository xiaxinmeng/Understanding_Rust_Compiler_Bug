{"url": "https://api.github.com/repos/rust-lang/rust/issues/48316", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48316/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48316/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48316/events", "html_url": "https://github.com/rust-lang/rust/issues/48316", "id": 298059372, "node_id": "MDU6SXNzdWUyOTgwNTkzNzI=", "number": 48316, "title": "`resume_unwind` can indefinitely increase the panic count", "user": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-18T05:02:16Z", "updated_at": "2020-04-20T22:00:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A corner-case use of `resume_unwind` can lead to a large panic count. This complicates the flowchart of panic handling. I think `resume_unwind` should abort when `panic_count >= 1` to keep the invariant `panic_count <= 2` (and `panic_count <= 1` when unwinding).\r\n\r\n[Playground](https://play.rust-lang.org/?gist=b72fbc07b8bdc9997bd79b04198bbacb&version=nightly)\r\n\r\n```rust\r\n#![feature(update_panic_count)]\r\n\r\nuse std::ops::Drop;\r\nuse std::panic::resume_unwind;\r\nuse std::rt::update_panic_count; // to show panic count\r\n\r\nstruct A;\r\nimpl Drop for A {\r\n    fn drop(&mut self) {\r\n        let panic_count = update_panic_count(0);\r\n        println!(\"panic_count = {}\", panic_count);\r\n        if panic_count >= 100 {\r\n            return;\r\n        }\r\n\r\n        let _x = A;\r\n        resume_unwind(Box::new(()));\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let _x = A;\r\n}\r\n```\r\n\r\nIt prints\r\n\r\n```\r\npanic_count = 0\r\npanic_count = 1\r\npanic_count = 2\r\n...\r\npanic_count = 100\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48316/timeline", "performed_via_github_app": null, "state_reason": null}