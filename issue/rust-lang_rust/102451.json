{"url": "https://api.github.com/repos/rust-lang/rust/issues/102451", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102451/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102451/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102451/events", "html_url": "https://github.com/rust-lang/rust/issues/102451", "id": 1390189262, "node_id": "I_kwDOAAsO6M5S3JrO", "number": 102451, "title": "select_nth_unstable has quadratic worst-case time complexity; docs claim it should be linear", "user": {"login": "qtow", "id": 82917268, "node_id": "MDQ6VXNlcjgyOTE3MjY4", "avatar_url": "https://avatars.githubusercontent.com/u/82917268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qtow", "html_url": "https://github.com/qtow", "followers_url": "https://api.github.com/users/qtow/followers", "following_url": "https://api.github.com/users/qtow/following{/other_user}", "gists_url": "https://api.github.com/users/qtow/gists{/gist_id}", "starred_url": "https://api.github.com/users/qtow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qtow/subscriptions", "organizations_url": "https://api.github.com/users/qtow/orgs", "repos_url": "https://api.github.com/users/qtow/repos", "events_url": "https://api.github.com/users/qtow/events{/privacy}", "received_events_url": "https://api.github.com/users/qtow/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-09-29T03:14:44Z", "updated_at": "2023-05-26T00:49:39Z", "closed_at": "2023-05-26T00:49:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "[The docs](https://doc.rust-lang.org/beta/std/primitive.slice.html#method.select_nth_unstable) claim that select_nth_unstable is \"O(n) worst-case\", but the implementation exhibits O(n<sup>2</sup>) time complexity for some inputs. I'm not sure if this is a documentation error or an implementation error, but it's definitely one or the other.\r\n\r\nThe current implementation is a fairly normal [Quickselect](https://en.wikipedia.org/wiki/Quickselect). Notably it only looks at a constant number of elements to determine a pivot, which _cannot_ guarantee linear time complexity for quickselect. [Median of medians](https://en.wikipedia.org/wiki/Median_of_medians) must be used instead, which is different from the \"median of medians\" referenced in the code.\r\n\r\nFor actual proof that pathological cases exist, here's a [playground link](https://play.rust-lang.org/?version=nightly&mode=release&edition=2021&gist=93aab67512b1eb4295cb2f886541424a). It generates close to the worst possible input for a fixed length, and compares the time for that against the time for a random input. For a length of ~128k (the highest I can get the playground to go before it times out), the pathological input is around 1000 times slower than the random input.\r\n\r\n<details>\r\n<summary>\r\nHere's some graphs of runtime vs input length:\r\n</summary>\r\n\r\n![time vs input length](https://user-images.githubusercontent.com/82917268/192922420-53344b08-9f02-439a-950b-0d5997559412.png)\r\n\r\n![time vs input length, log-log](https://user-images.githubusercontent.com/82917268/192922454-ebed8f14-9169-445f-8a0a-a27d519165e5.png)\r\n\r\nBoth show runtime in seconds vs slice length, with blue being random inputs and red being pathological inputs. The second is a log-log graph with some lines fit to the data. The slopes on the log-log graph are roughly 1.3 and 2.3 for the blue and red lines respectively.\r\n</details>\r\n\r\nTo uphold the linear worst-case guarantee, select_nth_unstable would need to use [Median of medians](https://en.wikipedia.org/wiki/Median_of_medians). [Introselect](https://en.wikipedia.org/wiki/Introselect) is the hybrid version, and [Fast Deterministic Selection](https://arxiv.org/abs/1606.00484) is the most recent work I'm aware of that looks at optimizing median of medians.\r\n\r\nIf the worst-case guarantee is relaxed to an average-case guarantee (that's all that C++ gives for [nth_element](https://en.cppreference.com/w/cpp/algorithm/nth_element)), I think the docs should make it clear that the worst case is quadratic.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102451/timeline", "performed_via_github_app": null, "state_reason": "completed"}