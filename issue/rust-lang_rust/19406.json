{"url": "https://api.github.com/repos/rust-lang/rust/issues/19406", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19406/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19406/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19406/events", "html_url": "https://github.com/rust-lang/rust/issues/19406", "id": 50438399, "node_id": "MDU6SXNzdWU1MDQzODM5OQ==", "number": 19406, "title": "Surpress, mark, or order superflous trait resolution type errors correctly", "user": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2014-11-29T21:47:22Z", "updated_at": "2022-06-08T21:31:50Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "During a `rusti` session on IRC, a confusing class of type errors has been discovered. This piece of code:\n\n```\nfn main() {\n    \"1 2 3\".split(\" \").collect::<Vec<_>>()\n}\n```\n\nCurrently emits these two error messages:\n\n```\nfigment_sketch.rs:2:13: 2:23 error: the trait `core::str::CharEq` is not implemented for the type `&str`\nfigment_sketch.rs:2     \"1 2 3\".split(\" \").collect::<Vec<_>>()\n                                ^~~~~~~~~~\nfigment_sketch.rs:2:24: 2:43 error: type `core::str::CharSplits<'_, &str>` does not implement any method in scope named `collect`\nfigment_sketch.rs:2     \"1 2 3\".split(\" \").collect::<Vec<_>>()\n                                           ^~~~~~~~~~~~~~~~~~~\n```\n\nWhere `&str` does not implement `CharEq` and `split()` is defined as `fn split<Sep: CharEq>(&self, s: Sep) -> CharSplit<, Sep>`\n\nBoth are correct type errors, however the second error is confusing because its not he actual cause, AND it depends on the other type error existing, which IS the actual cause.\nFurthermore, sometimes those two errors are emitted in a different order, making it even more confusing to understand.\n\nThe basic reasoning here is \"&str does not implement CharEq\" and \"CharSplits<'_, &str> does not Implement something that provides collect() because the only candidate, Iterator, is only implemented if &str implements CharEq\". However, the `split` invocation only typechecks if `&str` implements `CharEq`, and hence any type error on the return type becomes irrelevant, as the type would not be valid to begin with.\n\nIf possible, typecheck should construct a dependency graph between the type errors it encounters, so that for every pair of type errors `a, b` it is known if `b` depends on `a`. \n\nUsing this information, the error messages could be improved in a few ways:\n1. Only emit all type errors that are not depended on other type errors (suppressing the superfluous errors)\n2. Emit all errors, but in the order of their dependencies so that the actual relevant errors are always the first ones.\n3. Emit all errors, but mark all that have any dependencies with a note like \"This might be a spurious error\"\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19406/timeline", "performed_via_github_app": null, "state_reason": null}