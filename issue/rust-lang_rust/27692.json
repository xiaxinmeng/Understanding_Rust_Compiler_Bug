{"url": "https://api.github.com/repos/rust-lang/rust/issues/27692", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/27692/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/27692/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/27692/events", "html_url": "https://github.com/rust-lang/rust/issues/27692", "id": 100503164, "node_id": "MDU6SXNzdWUxMDA1MDMxNjQ=", "number": 27692, "title": "need more coercions for composed iterator types that have Fns", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-08-12T09:26:27Z", "updated_at": "2019-12-25T16:03:56Z", "closed_at": "2019-12-25T16:03:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Rust's problems with returning the complicated types that result from iterator composition are well-known.\n- See e.g. https://github.com/rust-lang/rfcs/pull/105 \n- (with possible follow-on tracking at https://github.com/rust-lang/rfcs/issues/518 , though most of the conversation seems to be continuing on at https://github.com/rust-lang/rfcs/pull/105 )\n\nThe usual response is that for the short-term one can often work-around the issues with iterator composition via newtypes or type aliases.\n\nHowever, while this appears to work for simple examples, it seems like it breaks when nesting an iterator that has a `Fn` type parameter more than one level deep. (This may be related to the introduction of unique types for each function item, I am not sure.)\n\nExample ([playpen link](http://is.gd/99GLaq)):\n\n``` rust\n// Example inspired from comment here:\n// https://github.com/rust-lang/rfcs/pull/105#issuecomment-67441120\n\nuse std::iter::{Filter, Map};\nuse std::slice::Iter;\ntype even_fn = fn(&&i32) -> bool;\ntype add1_fn = fn(&i32) -> i32;\ntype F<'a> = Filter<Iter<'a, i32>, even_fn>;\ntype M<'a> = Map<Iter<'a, i32>, add1_fn>;\ntype MF<'a> = Map<Filter<Iter<'a, i32>, even_fn>, add1_fn>;\n\nfn even(&&i: &&i32) -> bool { i % 2 == 0 }\nfn add1(&i: &i32) -> i32 { i + 1 }\n\n// these work\nfn evens<'a>(ns: &'a [i32]) -> F<'a> { ns.iter().filter(even) }\nfn incrs<'a>(ns: &'a [i32]) -> M<'a> { ns.iter().map(add1) }\n\n// this does not\n#[cfg(not(iter_composition))]\nfn composed<'a>(ns: &'a [i32]) -> MF<'a> { ns.iter().filter(even).map(add1) }\n\nfn main() {}\n```\n\nyields compiler error:\n\n```\n<anon>:21:44: 21:76 error: mismatched types:\n expected `core::iter::Map<core::iter::Filter<core::slice::Iter<'a, i32>, fn(&&i32) -> bool>, fn(&i32) -> i32>`,\n    found `core::iter::Map<core::iter::Filter<core::slice::Iter<'_, i32>, fn(&&i32) -> bool {even}>, fn(&i32) -> i32 {add1}>`\n(expected fn pointer,\n    found fn item) [E0308]\n<anon>:21 fn composed<'a>(ns: &'a [i32]) -> MF<'a> { ns.iter().filter(even).map(add1) }\n                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n<anon>:21:44: 21:76 help: see the detailed explanation for E0308\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n```\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/27692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/27692/timeline", "performed_via_github_app": null, "state_reason": "completed"}