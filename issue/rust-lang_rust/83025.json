{"url": "https://api.github.com/repos/rust-lang/rust/issues/83025", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83025/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83025/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83025/events", "html_url": "https://github.com/rust-lang/rust/issues/83025", "id": 829426660, "node_id": "MDU6SXNzdWU4Mjk0MjY2NjA=", "number": 83025, "title": "Segfault with -Zprofile test", "user": {"login": "io12", "id": 7348004, "node_id": "MDQ6VXNlcjczNDgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7348004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/io12", "html_url": "https://github.com/io12", "followers_url": "https://api.github.com/users/io12/followers", "following_url": "https://api.github.com/users/io12/following{/other_user}", "gists_url": "https://api.github.com/users/io12/gists{/gist_id}", "starred_url": "https://api.github.com/users/io12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/io12/subscriptions", "organizations_url": "https://api.github.com/users/io12/orgs", "repos_url": "https://api.github.com/users/io12/repos", "events_url": "https://api.github.com/users/io12/events{/privacy}", "received_events_url": "https://api.github.com/users/io12/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-03-11T18:44:56Z", "updated_at": "2021-03-13T19:52:27Z", "closed_at": "2021-03-13T19:52:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nSource: https://github.com/kornelski/deunicode/issues/5#issuecomment-794638244\r\n\r\nI tried this code:\r\n\r\n`crashy/lib.rs`\r\n\r\n```rust\r\nuse std::str::Chars;\r\n\r\npub struct ThisIsNotEvenUsed<'a> {\r\n    never_used: Chars<'a>,\r\n}\r\n\r\nimpl<'a> Iterator for ThisIsNotEvenUsed<'a> {\r\n    type Item = ();\r\n\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        todo!()\r\n    }\r\n\r\n    fn count(self) -> usize {\r\n        // mere existence of this line causes crash!\r\n        self.never_used.count()\r\n    }\r\n}\r\n```\r\n\r\n`crashy/tests/crash.rs`\r\n\r\n```rust\r\nuse crashy; // unused, but important\r\n\r\n#[test]\r\nfn crash() {\r\n    // doesn't crash if the char is ASCII\r\n    let _s = ['\\u{80}'].iter().collect::<String>();\r\n}\r\n```\r\n\r\nCompile with:\r\n\r\n```rust\r\nCARGO_INCREMENTAL=0 RUSTFLAGS='-Zprofile -Cinline-threshold=0 -Clink-dead-code'  cargo test\r\n```\r\n\r\nI expected to see this happen: The test passes.\r\n\r\nInstead, this happened: The test SIGSEGVs.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.52.0-nightly (f98721f88 2021-03-10)\r\nbinary: rustc\r\ncommit-hash: f98721f886ab52d32d622ad0a46216ad03f3e525\r\ncommit-date: 2021-03-10\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.52.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n#0  __memmove_avx_unaligned_erms ()\r\n    at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:287\r\n#1  0x000055555557853e in alloc::vec::Vec<T,A>::append_elements (\r\n    self=0x7ffff7c19660, other=...)\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/alloc/src/vec/mod.rs:1607\r\n#2  <alloc::vec::Vec<T,A> as alloc::vec::spec_extend::SpecExtend<&T,core::slice::iter::Iter<T>>>::spec_extend (self=0x7ffff7c19660, iterator=...)\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/alloc/src/vec/spec_extend.rs:80\r\n#3  0x000055555557d29c in alloc::vec::Vec<T,A>::extend_from_slice (\r\n    self=0x7ffff7c19660, other=...)\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/alloc/src/vec/mod.rs:2016\r\n#4  0x000055555557e663 in alloc::string::String::push (self=0x7ffff7c19660, \r\n    ch=128 '\\200')\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/alloc/src/string.rs:1082\r\n#5  0x000055555557ac06 in <alloc::string::String as core::iter::traits::collect::Extend<char>>::extend::{{closure}} (c=128 '\\200')\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/alloc/src/string.rs:1778\r\n#6  core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (\r\n    item=128 '\\200')\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/core/src/iter/traits/iterator.rs:772\r\n#7  core::iter::adapters::map::map_fold::{{closure}} (\r\n    elt=0x555555692120 \"\\200the test returned a termination value with a non-zero status code () which indicates a failure/rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/test/src/lib.rs\\000\\000\\000\", acc=<optimized out>)\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/core/src/iter/adapters/map.rs:81\r\n#8  core::iter::traits::iterator::Iterator::fold (self=..., init=(), f=...)\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/core/src/iter/traits/iterator.rs:2123\r\n#9  0x0000555555577e75 in <core::iter::adapters::map::Map<I,F> as core::iter::traits::iterator::Iterator>::fold (self=..., init=(), g=...)\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/core/src/iter/ad--Type <RET> for more, q to quit, c to continue without paging--\r\napters/map.rs:121\r\n#10 0x0000555555577f7f in <core::iter::adapters::cloned::Cloned<I> as core::iter::traits::iterator::Iterator>::fold (self=..., init=(), f=...)\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/core/src/iter/adapters/cloned.rs:58\r\n#11 0x0000555555580566 in core::iter::traits::iterator::Iterator::for_each (\r\n    self=..., f=...)\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/core/src/iter/traits/iterator.rs:775\r\n#12 <alloc::string::String as core::iter::traits::collect::Extend<char>>::extend (self=0x7ffff7c19660, iter=...)\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/alloc/src/string.rs:1778\r\n#13 0x000055555558097b in <alloc::string::String as core::iter::traits::collect::Extend<&char>>::extend (self=0x7ffff7c19660, iter=...)\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/alloc/src/string.rs:1795\r\n#14 0x0000555555580a42 in <alloc::string::String as core::iter::traits::collect::FromIterator<&char>>::from_iter (iter=...)\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/alloc/src/string.rs:1712\r\n#15 0x0000555555580c19 in core::iter::traits::iterator::Iterator::collect (\r\n    self=...)\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/core/src/iter/traits/iterator.rs:1764\r\n#16 crash::crash () at tests/crash.rs:6\r\n#17 0x00005555555794d1 in crash::crash::{{closure}} () at tests/crash.rs:4\r\n#18 core::ops::function::FnOnce::call_once ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/core/src/ops/function.rs:227\r\n#19 0x00005555555ae096 in core::ops::function::FnOnce::call_once ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/core/src/ops/function.rs:227\r\n#20 test::__rust_begin_short_backtrace () at library/test/src/lib.rs:567\r\n#21 0x00005555555ac78e in <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/alloc/src/boxed.rs:1546\r\n--Type <RET> for more, q to quit, c to continue without paging--\r\n#22 <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/std/src/panic.rs:344\r\n#23 std::panicking::try::do_call ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/std/src/panicking.rs:379\r\n#24 std::panicking::try ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/std/src/panicking.rs:343\r\n#25 std::panic::catch_unwind ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/std/src/panic.rs:431\r\n#26 test::run_test_in_process () at library/test/src/lib.rs:589\r\n#27 test::run_test::run_test_inner::{{closure}} ()\r\n    at library/test/src/lib.rs:486\r\n#28 0x000055555558212a in test::run_test::run_test_inner::{{closure}} ()\r\n    at library/test/src/lib.rs:511\r\n#29 std::sys_common::backtrace::__rust_begin_short_backtrace ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/std/src/sys_common/backtrace.rs:125\r\n#30 0x000055555558748f in std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/std/src/thread/mod.rs:474\r\n#31 <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/std/src/panic.rs:344\r\n#32 std::panicking::try::do_call ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/std/src/panicking.rs:379\r\n#33 std::panicking::try ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/std/src/panicking.rs:343\r\n#34 std::panic::catch_unwind ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/std/src/panic.rs:431\r\n--Type <RET> for more, q to quit, c to continue without paging--\r\n#35 std::thread::Builder::spawn_unchecked::{{closure}} ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/std/src/thread/mod.rs:473\r\n#36 core::ops::function::FnOnce::call_once{{vtable-shim}} ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/core/src/ops/function.rs:227\r\n#37 0x0000555555619f88 in <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/alloc/src/boxed.rs:1546\r\n#38 <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\n    ()\r\n    at /rustc/f98721f886ab52d32d622ad0a46216ad03f3e525/library/alloc/src/boxed.rs:1546\r\n#39 std::sys::unix::thread::Thread::new::thread_start ()\r\n    at library/std/src/sys/unix/thread.rs:71\r\n#40 0x00007ffff7f70fa3 in start_thread (arg=<optimized out>)\r\n    at pthread_create.c:486\r\n#41 0x00007ffff7d194cf in clone ()\r\n    at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "io12", "id": 7348004, "node_id": "MDQ6VXNlcjczNDgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7348004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/io12", "html_url": "https://github.com/io12", "followers_url": "https://api.github.com/users/io12/followers", "following_url": "https://api.github.com/users/io12/following{/other_user}", "gists_url": "https://api.github.com/users/io12/gists{/gist_id}", "starred_url": "https://api.github.com/users/io12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/io12/subscriptions", "organizations_url": "https://api.github.com/users/io12/orgs", "repos_url": "https://api.github.com/users/io12/repos", "events_url": "https://api.github.com/users/io12/events{/privacy}", "received_events_url": "https://api.github.com/users/io12/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83025/timeline", "performed_via_github_app": null, "state_reason": "completed"}