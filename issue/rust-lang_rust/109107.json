{"url": "https://api.github.com/repos/rust-lang/rust/issues/109107", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109107/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109107/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109107/events", "html_url": "https://github.com/rust-lang/rust/issues/109107", "id": 1622408340, "node_id": "I_kwDOAAsO6M5gs_yU", "number": 109107, "title": "Warning init error on array const generic", "user": {"login": "BiagioFesta", "id": 15035284, "node_id": "MDQ6VXNlcjE1MDM1Mjg0", "avatar_url": "https://avatars.githubusercontent.com/u/15035284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BiagioFesta", "html_url": "https://github.com/BiagioFesta", "followers_url": "https://api.github.com/users/BiagioFesta/followers", "following_url": "https://api.github.com/users/BiagioFesta/following{/other_user}", "gists_url": "https://api.github.com/users/BiagioFesta/gists{/gist_id}", "starred_url": "https://api.github.com/users/BiagioFesta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BiagioFesta/subscriptions", "organizations_url": "https://api.github.com/users/BiagioFesta/orgs", "repos_url": "https://api.github.com/users/BiagioFesta/repos", "events_url": "https://api.github.com/users/BiagioFesta/events{/privacy}", "received_events_url": "https://api.github.com/users/BiagioFesta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-13T22:56:45Z", "updated_at": "2023-03-14T11:33:08Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Code\n\n```Rust\nfn main() {\r\n    // This produces a warn about undefined behavior (bad init). OK!\r\n    let _: [Vec<i32>; 42] = unsafe { std::mem::zeroed() };\r\n\r\n    foo::<42>();\r\n}\r\n\r\nfn foo<const N: usize> () {\r\n    // This does *not* produce a warn about undefined behavior. Nice to have!\r\n    let _: [Vec<i32>; N] = unsafe { std::mem::zeroed() };\r\n}\n```\n\n\n### Current output\n\n```Shell\nwarning: the type `[Vec<i32>; 42]` does not permit zero-initialization\r\n --> test.rs:3:38\r\n  |\r\n3 |     let _: [Vec<i32>; 42] = unsafe { std::mem::zeroed() };\r\n  |                                      ^^^^^^^^^^^^^^^^^^\r\n  |                                      |\r\n  |                                      this code causes undefined behavior when executed\r\n  |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\r\n  |\r\n  = note: `std::ptr::Unique<i32>` must be non-null\r\n  = note: because `std::ptr::NonNull<i32>` must be non-null\r\n  = note: `#[warn(invalid_value)]` on by default\n```\n\n\n### Desired output\n\n```Shell\nwarning: the type `[Vec<i32>; 42]` does not permit zero-initialization\r\n --> src/main.rs:3:38\r\n  |\r\n3 |     let _: [Vec<i32>; 42] = unsafe { std::mem::zeroed() };\r\n  |                                      ^^^^^^^^^^^^^^^^^^\r\n  |                                      |\r\n  |                                      this code causes undefined behavior when executed\r\n  |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\r\n  |\r\n  = note: `std::ptr::Unique<i32>` must be non-null\r\n  = note: because `std::ptr::NonNull<i32>` must be non-null\r\n  = note: `#[warn(invalid_value)]` on by default\r\n\r\nwarning: the type `[Vec<i32>; N = 42]` does not permit zero-initialization\r\n  --> src/main.rs:10:38\r\n   |\r\n10 |     let _: [Vec<i32>; N] = unsafe { std::mem::zeroed() };\r\n   |                                     ^^^^^^^^^^^^^^^^^^\r\n   |                                     |\r\n   |                                     this code causes undefined behavior when executed\r\n   |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\r\n   |\r\n   = note: `std::ptr::Unique<i32>` must be non-null\r\n   = note: because `std::ptr::NonNull<i32>` must be non-null\n```\n\n\n### Rationale and extra context\n\nRustc lint module conservatly checks for undefined behavior initialization.\r\n\r\nIt correctly prints a warning when one tries to initialize a zeroed array of `Vec` (because `Vec` contains `NonNull`).\r\n\r\nHowever, when using const-generic to declare the array the warning is not produced (with the current nightly 1.70; see code example).\r\n\r\nBy quickly inspecting the compiler code, it seems the lint cannot evaluate the length of the array ([code here from current main](https://github.com/rust-lang/rust/blob/dd7df04e168324fc002ab4985b6c7513f08ccf49/compiler/rustc_lint/src/builtin.rs#L2611-L2618)).\r\n\r\nI am not sure if generic evaluation can happen before lint checks and resolve the array length (and, thus, printing the same error when `N > 0`). However, in theory, the array length is known at compile time and, if possible, it would be nice to have the lint when const-generic array.\n\n### Other cases\n\n_No response_\n\n### Anything else?\n\n_No response_", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109107/timeline", "performed_via_github_app": null, "state_reason": null}