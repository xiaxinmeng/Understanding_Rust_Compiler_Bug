{"url": "https://api.github.com/repos/rust-lang/rust/issues/111102", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111102/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111102/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111102/events", "html_url": "https://github.com/rust-lang/rust/issues/111102", "id": 1692824619, "node_id": "I_kwDOAAsO6M5k5nQr", "number": 111102, "title": "rustdoc: synthetic impls are faulty in the presence of assoc const equality constraints ", "user": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1118598314, "node_id": "MDU6TGFiZWwxMTE4NTk4MzE0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-synthetic-impls", "name": "A-synthetic-impls", "color": "f7e101", "default": false, "description": "Area: Synthetic impls, used by rustdoc to document auto traits and traits with blanket impls"}, {"id": 3771326768, "node_id": "LA_kwDOAAsO6M7gyeEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-auto-traits", "name": "A-auto-traits", "color": "f7e101", "default": false, "description": "Area: auto traits (`auto trait Send`)"}, {"id": 4580535990, "node_id": "LA_kwDOAAsO6M8AAAABEQVutg", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-associated_const_equality", "name": "F-associated_const_equality", "color": "f9c0cc", "default": false, "description": "`#![feature(associated_const_equality)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-05-02T17:38:19Z", "updated_at": "2023-05-02T18:23:52Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given\r\n\r\n```rs\r\n#![feature(associated_const_equality)]\r\n\r\nuse std::marker::Unpin; // or any other auto trait\r\n\r\npub struct Outer<T>(Inner<T>);\r\npub struct Inner<T>(T);\r\n\r\n// (A)\r\nimpl<const F: bool, T: Trait<FLAG = {F}>> Unpin for Inner<T> {}\r\n\r\n// (B)\r\n//impl<T: Trait<FLAG = true>> Unpin for Inner<T> {}\r\n\r\npub trait Trait {\r\n    const FLAG: bool;\r\n}\r\n```\r\n\r\nthe impl of `Unpin` (or any other auto trait chosen) synthesized for the generic type `Outer` looks like\r\n\r\n```rs\r\nimpl<T> !Unpin for Outer<T> // for either case, (A) or (B)\r\n//      ^ note the `!`\r\n```\r\n\r\nwhile I expected the impls to be\r\n\r\n```rs\r\n// for case (A):\r\nimpl<T> Unpin for Outer<T> where T: Trait \r\n// for case (B):\r\nimpl<T> Unpin for Outer<T> where T: Trait<FLAG = true>\r\n```\r\n\r\n<details>\r\n<summary>For comparison, the analog involving <b>type</b> equality constraints</summary>\r\n\r\n```rs\r\nuse std::marker::Unpin; // or any other auto trait\r\n\r\npub struct Outer<T>(Inner<T>);\r\npub struct Inner<T>(T);\r\n\r\n// (A)\r\nimpl<F: Bool, T: Trait<Flag = F>> Unpin for Inner<T> {}\r\n\r\n//   ---> synthetic impl:\r\n//   impl<T> Unpin for Outer<T> where T: Trait\r\n\r\n// (B)\r\n// impl<T: Trait<Flag = True>> Unpin for Inner<T> {}\r\n\r\n//   ---> synthetic impl:\r\n//   impl<T> Unpin for Outer<T> where T: Trait<Flag = True>\r\n\r\npub trait Trait {\r\n    type Flag: Bool;\r\n}\r\n\r\npub trait Bool {}\r\nimpl Bool for True {}\r\npub enum True {}\r\n\r\n```\r\n\r\n</details>\r\n\r\n(adding <kbd>T-compiler</kbd> next to <kbd>T-rustdoc</kbd> since `AutoTraitFinder` lives in `rustc`)\r\n\r\n@rustbot label C-bug T-rustdoc T-compiler A-auto-traits A-synthetic-impls F-associated_const_equality", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111102/timeline", "performed_via_github_app": null, "state_reason": null}