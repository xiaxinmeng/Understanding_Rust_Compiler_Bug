{"url": "https://api.github.com/repos/rust-lang/rust/issues/12676", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12676/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12676/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12676/events", "html_url": "https://github.com/rust-lang/rust/issues/12676", "id": 28678820, "node_id": "MDU6SXNzdWUyODY3ODgyMA==", "number": 12676, "title": "The try! macro doesn't live up to its prominent position", "user": {"login": "jfager", "id": 23755, "node_id": "MDQ6VXNlcjIzNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/23755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfager", "html_url": "https://github.com/jfager", "followers_url": "https://api.github.com/users/jfager/followers", "following_url": "https://api.github.com/users/jfager/following{/other_user}", "gists_url": "https://api.github.com/users/jfager/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfager/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfager/subscriptions", "organizations_url": "https://api.github.com/users/jfager/orgs", "repos_url": "https://api.github.com/users/jfager/repos", "events_url": "https://api.github.com/users/jfager/events{/privacy}", "received_events_url": "https://api.github.com/users/jfager/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-03-04T04:05:17Z", "updated_at": "2015-01-16T20:52:59Z", "closed_at": "2015-01-16T20:52:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been asked to make my general concerns about `try!` more clear than what #12130 specifically focused on, so I'm going to close that issue and try to do a better job here.\n\n'try' is a short, familiar, and suggestive name.  Such names are relatively rare and valuable, and would ideally be reserved for features that reach a high bar of utility and ergonomics.  But the `try!` macro is, by design, a limited solution to the problem it's put up against, and its limitations are really easy to hit:\n- You can't use `try!` from  `main` or the proc arg to `spawn`, even though you might reasonably expect that 'passing an error up the stack' when there is no 'up the stack' would just fail. \n- You can't use `try!` for 2 different Result error types in the same fn; you have to switch to another strategy for one or split them out into separate fns.  \n- `try!` for multiple calls is still [verbose and repetitive](https://bitbucket.org/olivier_renaud/rust-id3v1/wiki/io_error_impressions).\n\nThese limitations of course result from its simple implementation using `return` from a macro, and when they are brought up, solutions are easy - use `unwrap`, write your own macro, just drop the result, fall back to a match expression - and the point is made that `try!` was never intended to be a general solution.  \n\nBut `try!` has a big footprint in the ecosystem right now.  It has that valuable name.  It (as `if_ok!`) was the only error-handling technique directly illustrated in the [\"Handling I/O errors\"](https://mail.mozilla.org/pipermail/rust-dev/2014-February/008505.html) announcement of IoResult and the removal of conditions.  It's the only IO error handling macro that ships in std.  It shows up frequently in example code.  Regardless of the original intent, it's what people reach for first when trying to figure out how to do IO.\n\nThe thing that people reach for first shouldn't have trivial headaches associated with it. The thing that shows up frequently in examples shouldn't instantly blow up when transplanted into users' first programs. Something that ships with std shouldn't require people to throw together a bunch of one-off minor variations of it in their own projects.\n\nOr, conversely, something that has these limitations shouldn't be so visible in the ecosystem. \n\nI don't know what the right alternative is, though I think/hope the general shape of something better would be:\n- Wraps a whole block rather just than a statement, to reduce the repetitive verbosity.\n- Is an expression, so that it can be moved around/copied from examples/used in more contexts without blowing up.\n- Keeps a short, suggestive name.\n- Keeps the must-handle warning or a moral equivalent.\n\nI don't think wanting this basic shape amounts to wanting a silver bullet, or to trying to sweep anything under the rug, but if it's just not possible or otherwise not a good idea, I'd be interested to hear why.\n\nThe first alternative that pops to mind is a variation of Haskell's `do` notation, which other people have discussed elsewhere in more/better detail than I could.  There's also the [`match!` proposal](http://www.reddit.com/r/rust/comments/1z8p11/an_idea_for_a_syntax_extension_to_make_match/) on Reddit right now that may be a candidate.  I'm less interested in the exact solution than in convincing the community it's a problem that should be addressed, b/c I'm sure someone else can come up with a better answer than I could.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12676/timeline", "performed_via_github_app": null, "state_reason": "completed"}