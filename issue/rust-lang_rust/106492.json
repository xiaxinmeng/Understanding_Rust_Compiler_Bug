{"url": "https://api.github.com/repos/rust-lang/rust/issues/106492", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106492/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106492/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106492/events", "html_url": "https://github.com/rust-lang/rust/issues/106492", "id": 1520876299, "node_id": "I_kwDOAAsO6M5aprsL", "number": 106492, "title": "Opaque type stopped working between Rust 1.61 and 1.64", "user": {"login": "Ericson2314", "id": 1055245, "node_id": "MDQ6VXNlcjEwNTUyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1055245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ericson2314", "html_url": "https://github.com/Ericson2314", "followers_url": "https://api.github.com/users/Ericson2314/followers", "following_url": "https://api.github.com/users/Ericson2314/following{/other_user}", "gists_url": "https://api.github.com/users/Ericson2314/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ericson2314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ericson2314/subscriptions", "organizations_url": "https://api.github.com/users/Ericson2314/orgs", "repos_url": "https://api.github.com/users/Ericson2314/repos", "events_url": "https://api.github.com/users/Ericson2314/events{/privacy}", "received_events_url": "https://api.github.com/users/Ericson2314/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}, {"id": 1472502130, "node_id": "MDU6TGFiZWwxNDcyNTAyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-type_alias_impl_trait", "name": "F-type_alias_impl_trait", "color": "f9c0cc", "default": false, "description": "`#[feature(type_alias_impl_trait)]`"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-01-05T14:52:59Z", "updated_at": "2023-02-24T22:08:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/obsidiansystems/ledger-app-pocket/commit/4aaf645d6a6b5602236fb44784d05cd68979a476 builds with Rust 1.61, but fails to build with newer Rust.\r\n\r\n```\r\nerror[E0391]: cycle detected when computing type of `implementation::GetAddressImplT::{opaque#0}`\r\n   --> src/implementation.rs:71:28\r\n    |\r\n71  | pub type GetAddressImplT = impl InterpParser<Bip32Key, Returning = ArrayVec<u8, 128>>;\r\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    |\r\nnote: ...which requires type-checking `implementation::get_sign_state`...\r\n   --> src/implementation.rs:793:1\r\n    |\r\n793 | / pub fn get_sign_state(\r\n794 | |     s: &mut ParsersState,\r\n795 | | ) -> &mut <SignImplT as ParserCommon<DoubledSignParameters>>::State {\r\n    | |___________________________________________________________________^\r\n    = note: ...which requires computing layout of `*mut implementation::ParsersStateInner<<implementation::GetAddressImplT as ledger_parser_combinators::interp_parser::ParserCommon<ledger_parser_combinators::core_parsers::DArray<ledger_parser_combinators::core_parsers::Byte, ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, 10>>>::State, <implementation::SignImplT as ledger_parser_combinators::interp_parser::ParserCommon<(ledger_parser_combinators::core_parsers::DArray<ledger_parser_combinators::core_parsers::Byte, ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, 10>, (ledger_parser_combinators::core_parsers::LengthFallback<ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, ledger_parser_combinators::json::Json<interface::PoktCmdSchema>>, ledger_parser_combinators::core_parsers::LengthFallback<ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, ledger_parser_combinators::json::Json<interface::PoktCmdSchema>>))>>::State>`...\r\n    = note: ...which requires normalizing `*mut implementation::ParsersStateInner<<implementation::GetAddressImplT as ledger_parser_combinators::interp_parser::ParserCommon<ledger_parser_combinators::core_parsers::DArray<ledger_parser_combinators::core_parsers::Byte, ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, 10>>>::State, <implementation::SignImplT as ledger_parser_combinators::interp_parser::ParserCommon<(ledger_parser_combinators::core_parsers::DArray<ledger_parser_combinators::core_parsers::Byte, ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, 10>, (ledger_parser_combinators::core_parsers::LengthFallback<ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, ledger_parser_combinators::json::Json<interface::PoktCmdSchema>>, ledger_parser_combinators::core_parsers::LengthFallback<ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, ledger_parser_combinators::json::Json<interface::PoktCmdSchema>>))>>::State>`...\r\n    = note: ...which again requires computing type of `implementation::GetAddressImplT::{opaque#0}`, completing the cycle\r\nnote: cycle used when checking item types in module `implementation`\r\n   --> src/lib.rs:28:1\r\n    |\r\n28  | pub mod implementation;\r\n    | ^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror[E0391]: cycle detected when type-checking `implementation::get_sign_state`\r\n   --> src/implementation.rs:793:1\r\n    |\r\n793 | / pub fn get_sign_state(\r\n794 | |     s: &mut ParsersState,\r\n795 | | ) -> &mut <SignImplT as ParserCommon<DoubledSignParameters>>::State {\r\n    | |___________________________________________________________________^\r\n    |\r\n    = note: ...which requires computing layout of `*mut implementation::ParsersStateInner<<implementation::GetAddressImplT as ledger_parser_combinators::interp_parser::ParserCommon<ledger_parser_combinators::core_parsers::DArray<ledger_parser_combinators::core_parsers::Byte, ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, 10>>>::State, <implementation::SignImplT as ledger_parser_combinators::interp_parser::ParserCommon<(ledger_parser_combinators::core_parsers::DArray<ledger_parser_combinators::core_parsers::Byte, ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, 10>, (ledger_parser_combinators::core_parsers::LengthFallback<ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, ledger_parser_combinators::json::Json<interface::PoktCmdSchema>>, ledger_parser_combinators::core_parsers::LengthFallback<ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, ledger_parser_combinators::json::Json<interface::PoktCmdSchema>>))>>::State>`...\r\n    = note: ...which requires normalizing `*mut implementation::ParsersStateInner<<implementation::GetAddressImplT as ledger_parser_combinators::interp_parser::ParserCommon<ledger_parser_combinators::core_parsers::DArray<ledger_parser_combinators::core_parsers::Byte, ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, 10>>>::State, <implementation::SignImplT as ledger_parser_combinators::interp_parser::ParserCommon<(ledger_parser_combinators::core_parsers::DArray<ledger_parser_combinators::core_parsers::Byte, ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, 10>, (ledger_parser_combinators::core_parsers::LengthFallback<ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, ledger_parser_combinators::json::Json<interface::PoktCmdSchema>>, ledger_parser_combinators::core_parsers::LengthFallback<ledger_parser_combinators::core_parsers::U32<ledger_parser_combinators::endianness::Endianness::Little>, ledger_parser_combinators::json::Json<interface::PoktCmdSchema>>))>>::State>`...\r\nnote: ...which requires computing type of `implementation::SignImplT::{opaque#0}`...\r\n   --> src/implementation.rs:348:22\r\n    |\r\n348 | pub type SignImplT = impl InterpParser<DoubledSignParameters, Returning = ArrayVec<u8, 128>>;\r\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    = note: ...which again requires type-checking `implementation::get_sign_state`, completing the cycle\r\nnote: cycle used when computing type of `implementation::GetAddressImplT::{opaque#0}`\r\n   --> src/implementation.rs:71:28\r\n    |\r\n71  | pub type GetAddressImplT = impl InterpParser<Bip32Key, Returning = ArrayVec<u8, 128>>;\r\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nFor more information about this error, try `rustc --explain E0391`.\r\n```\r\n\r\nhttps://github.com/obsidiansystems/ledger-app-pocket/commit/afb914a96b4aef24cd6bfecd4fe47fdb2b76a946 very slight fix back to the old higher level way of setting the enum (which didn't optimize well at least at one point) however fixes the error and gets the code to build again. This is quite odd!\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\n<version>\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106492/timeline", "performed_via_github_app": null, "state_reason": null}