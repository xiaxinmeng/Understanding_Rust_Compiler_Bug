{"url": "https://api.github.com/repos/rust-lang/rust/issues/46897", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46897/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46897/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46897/events", "html_url": "https://github.com/rust-lang/rust/issues/46897", "id": 283722038, "node_id": "MDU6SXNzdWUyODM3MjIwMzg=", "number": 46897, "title": "Slower binary, slower compiler, bigger binary since some days", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 147085028, "node_id": "MDU6TGFiZWwxNDcwODUwMjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-nightly", "name": "regression-from-stable-to-nightly", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to nightly."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252628, "node_id": "MDU6TGFiZWwyNjIyNTI2Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta", "name": "regression-from-stable-to-beta", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to beta."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 27, "created_at": "2017-12-20T23:02:04Z", "updated_at": "2018-01-08T10:47:13Z", "closed_at": "2017-12-27T12:54:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the 2017-12-14 Nightly I've seen a significant (almost 20%) compilation-time increase when I use `--emit=metadata` on my code. And the successive day (2017-12-15) the compilation got a bit slower still and the run-time of the binary also got about 8% slower. The successive days the situation kept going slightly worse. Extracting parts of my code to show compiler/code performance is not easy, so I've composed this benchmark function (that solves an Euler problem. If this code isn't enough I will write other similar benchmarks):\r\n\r\n<details><summary>Source code</summary>\r\n\r\n```rust\r\nuse std::mem::size_of;\r\n\r\nmacro_rules! isqrt { ($e:expr, $t:ident) => ((($e) as f64).sqrt() as $t)  }\r\n\r\nstruct SieveBits { bits: Vec<usize> }\r\n\r\nimpl SieveBits {\r\n    const BPC: usize = size_of::<usize>() * 8;\r\n\r\n    fn is_bit_set(bits: &[usize], i: usize) -> bool {\r\n        debug_assert!(i < bits.len() * Self::BPC);\r\n        let offset = i / Self::BPC;\r\n        let mask = 1 << (i % Self::BPC);\r\n        unsafe { (*bits.get_unchecked(offset) & mask) != 0 }\r\n    }\r\n\r\n    fn reset_bit(bits: &mut [usize], i: usize) {\r\n        debug_assert!(i < bits.len() * Self::BPC);\r\n        let offset = i / Self::BPC;\r\n        let mask = 1 << (i % Self::BPC);\r\n        unsafe { *bits.get_unchecked_mut(offset) &= !mask; }\r\n    }\r\n\r\n    fn new(m: usize) -> Self {\r\n        if m < 2 {\r\n            return Self { bits: vec![] };\r\n        }\r\n        let mut primes = vec![std::usize::MAX; (m / 3) / Self::BPC + 1];\r\n        Self::reset_bit(&mut primes, 0);\r\n\r\n        let lim = isqrt!(m, usize) + 1;\r\n        let mut i = 5;\r\n        let mut step = 2;\r\n        while i < lim {\r\n            if Self::is_bit_set(&primes, i / 3) {\r\n                let mut j = i * i;\r\n                let mut step2 = step;\r\n                while j < m {\r\n                    Self::reset_bit(&mut primes, j / 3);\r\n                    j += step2 * i;\r\n                    step2 = 6 - step2;\r\n                }\r\n            }\r\n            i += step;\r\n            step = 6 - step;\r\n        }\r\n\r\n        Self { bits: primes }\r\n    }\r\n\r\n    fn is_prime(&self, i: usize) -> bool {\r\n        if i == 2 || i == 3 { true }\r\n        else if i % 2 == 0 || i % 3 == 0 { false }\r\n        else { Self::is_bit_set(&self.bits, i / 3) }\r\n    }\r\n}\r\n\r\n\r\nfn eratosthenes_sieve_u32(limit: usize) -> Vec<u32> {\r\n    assert!(limit <= std::u32::MAX as usize);\r\n\r\n    #[inline(always)]\r\n    fn fill_u8(data: &mut [u8], value: u8) {\r\n        unsafe {\r\n            std::ptr::write_bytes(data.as_mut_ptr(), value, data.len());\r\n        }\r\n    }\r\n\r\n    const L1D_CACHE_SIZE:u32 = 32_768;\r\n\r\n    let mut result = vec![];\r\n    if limit < 2 {\r\n        return result;\r\n    } else {\r\n        result.push(2);\r\n    }\r\n\r\n    let lsqrt = isqrt!(limit, u32);\r\n\r\n    let mut is_prime = vec![1u8; lsqrt as usize + 1];\r\n    let mut i = 2;\r\n    while i * i <= lsqrt {\r\n        unsafe {\r\n            if *is_prime.get_unchecked(i as usize) != 0 {\r\n                let mut j = i * i;\r\n                while j <= lsqrt {\r\n                    *is_prime.get_unchecked_mut(j as usize) = 0;\r\n                    j += i;\r\n                }\r\n            }\r\n        }\r\n        i += 1;\r\n    }\r\n\r\n    let segment_size = lsqrt.max(L1D_CACHE_SIZE);\r\n    let mut s: usize = 3;\r\n    let mut n: usize = 3;\r\n\r\n    let mut sieve = vec![1u8; segment_size as usize]; // Vector used for sieving.\r\n    let mut primes: Vec<u32> = vec![];\r\n    let mut next: Vec<u32> = vec![];\r\n    let mut low: usize = 0;\r\n\r\n    while low <= limit {\r\n        fill_u8(&mut sieve, 1);\r\n\r\n        let high = (low + segment_size as usize - 1).min(limit);\r\n\r\n        unsafe {\r\n            while s * s <= high {\r\n                if *is_prime.get_unchecked(s) != 0 {\r\n                    primes.push(s as u32);\r\n                    next.push((s * s - low) as u32);\r\n                }\r\n                s += 2;\r\n            }\r\n\r\n            for (i, &p) in primes.iter().enumerate() {\r\n                let k = p * 2;\r\n                let mut j = *next.get_unchecked(i);\r\n                while j < segment_size {\r\n                    *sieve.get_unchecked_mut(j as usize) = 0;\r\n                    j += k;\r\n                }\r\n                *next.get_unchecked_mut(i) = j - segment_size;\r\n            }\r\n\r\n            while n <= high {\r\n                if *sieve.get_unchecked(n - low) != 0 { // n is a prime.\r\n                    result.push(n as u32);\r\n                }\r\n                n += 2;\r\n            }\r\n        }\r\n\r\n        low += segment_size as usize;\r\n    }\r\n\r\n    result\r\n}\r\n\r\n\r\nfn main() {\r\n    fn e249() -> u64 {\r\n        const N: usize = 5_000;\r\n        const M: u64 = 10_000_000_000_000_000_u64;\r\n\r\n        let check_every = (((1u64 << 63) / M) as f64).log2().ceil() as usize;\r\n\r\n        let primes = eratosthenes_sieve_u32(N);\r\n        let mut ways = vec![0u64; primes.iter().sum::<u32>() as usize + 1];\r\n        ways[0] = 1;\r\n        let mut max: usize = 0;\r\n\r\n        for (i, &p) in primes.iter().enumerate() {\r\n            for j in (0 .. max + 1).rev() {\r\n                unsafe {\r\n                    *ways.get_unchecked_mut(j + p as usize) =\r\n                        *ways.get_unchecked(j + p as usize) +\r\n                        *ways.get_unchecked(j);\r\n                }\r\n            }\r\n\r\n            if (i + 1) % check_every == 0 {\r\n                for w in ways[.. max + 1].iter_mut() {\r\n                    *w = *w % M;\r\n                }\r\n            }\r\n            max += p as usize;\r\n        }\r\n\r\n        let sieve = SieveBits::new(max);\r\n        let mut count = ways[2];\r\n        let mut i = 3;\r\n        while i <= max {\r\n            if sieve.is_prime(i) {\r\n                count = (count + ways[i]) % M;\r\n            }\r\n            i += 2;\r\n        }\r\n        count\r\n    }\r\n    assert_eq!(e249(), 9_275_262_564_250_418);\r\n}\r\n\r\n```\r\n\r\n</details>\r\n\r\nCompiled with:\r\n`rustc -C opt-level=3 -C target-cpu=native -C panic=abort test.rs`\r\n\r\nhost: x86_64-pc-windows-gnu\r\n\r\nRuntime:\r\nf8af59d95 2017-12-13: 0.30 seconds\r\nedbd7d232 2017-12-20: 0.53 seconds\r\n\r\nAsm from the the 2017-12-13 compiler:\r\nhttps://gist.github.com/anonymous/5c475819a2b7d0e01c036582c76cbd19\r\n\r\nAsm from the the 2017-12-20 compiler:\r\nhttps://gist.github.com/anonymous/bb984787c802da22b76c182d0f260872", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46897/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46897/timeline", "performed_via_github_app": null, "state_reason": "completed"}