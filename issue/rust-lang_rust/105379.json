{"url": "https://api.github.com/repos/rust-lang/rust/issues/105379", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105379/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105379/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105379/events", "html_url": "https://github.com/rust-lang/rust/issues/105379", "id": 1479530431, "node_id": "I_kwDOAAsO6M5YL9e_", "number": 105379, "title": "Lint suggestions depend on host endianness", "user": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-12-06T16:22:54Z", "updated_at": "2022-12-22T05:29:57Z", "closed_at": "2022-12-22T05:29:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When running `./x.py test` on the big-endian `s390x` platform, I see the following error:\r\n```\r\n---- [ui] src/test/rustdoc-ui/unknown-renamed-lints.rs stdout ----\r\ndiff of stderr:\r\n\r\n14        --> $DIR/unknown-renamed-lints.rs:7:9\r\n15         |\r\n16      LL | #![deny(rustdoc::x)]\r\n-          |         ^^^^^^^^^^ help: did you mean: `rustdoc::all`\r\n+          |         ^^^^^^^^^^ help: did you mean: `rustdoc`\r\n18\r\n```\r\n\r\nInvestigating this in more detail shows that this happens due to a combination of several factors:\r\n\r\n- The suggestion is generated by the `no_lint_suggestion` routine in `compiler/rustc_lint/src/context.rs`, which does\r\n\r\n```\r\n        let groups = self.lint_groups.keys().copied().map(Symbol::intern);\r\n        let lints = self.lints.iter().map(|l| Symbol::intern(&l.name_lower()));\r\n        let names: Vec<Symbol> = groups.chain(lints).collect();\r\n        let suggestion = find_best_match_for_name(&names, Symbol::intern(&name_lower), None);\r\n```\r\n\r\n- The `find_best_match_for_name` routine returns (in this case) the name out of `names` that has the lowest Levenshtein distance from the target name.\r\n- However, both `rustdoc` and `rustdoc::all` are at the same distance from `rustdoc::x`.  In this case, the name that occurs earlier in the `names` list is returned - so the order of that vector matters.\r\n- `self.lint_groups.keys()` returns the elements of `lint_groups` in the order of the hash values of the `FxHashMap`.  However, the associated `Hasher` in the `rustc_hash` crate does not guarantee stable values across different architecture; in particular, the same string will hash to different values on a big-endian platform vs. a little-endian platform.\r\n- As a result, for this particular test case, the order of `rustdoc` and `rustdoc::all` in `names` is different based on host endianness, and therefore the diagnostic emitted depends on host endianness as well.\r\n\r\nIt seems to me this is not ideal.   So I'm wondering:\r\n- Should the members of `names` be sorted according to some criteria to ensure deterministic diagnostics across platforms?\r\n- As an aside: `rustdoc` is considered \"deprecated\" while `rustdoc::all` is not - should this routine ever suggest a deprecated name in the first place?\r\n\r\nI've implemented a fix that simply ignores deprecated members of `lint_groups`, which fixes the test case for me.  Not sure if this is really the correct solution - I'd be happy to help implement and test other approaches as well.\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105379/timeline", "performed_via_github_app": null, "state_reason": "completed"}