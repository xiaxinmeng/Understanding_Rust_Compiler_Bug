{"url": "https://api.github.com/repos/rust-lang/rust/issues/63340", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63340/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63340/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63340/events", "html_url": "https://github.com/rust-lang/rust/issues/63340", "id": 477639054, "node_id": "MDU6SXNzdWU0Nzc2MzkwNTQ=", "number": 63340, "title": "chain() make collect very slow", "user": {"login": "Stargateur", "id": 7503742, "node_id": "MDQ6VXNlcjc1MDM3NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7503742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stargateur", "html_url": "https://github.com/Stargateur", "followers_url": "https://api.github.com/users/Stargateur/followers", "following_url": "https://api.github.com/users/Stargateur/following{/other_user}", "gists_url": "https://api.github.com/users/Stargateur/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stargateur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stargateur/subscriptions", "organizations_url": "https://api.github.com/users/Stargateur/orgs", "repos_url": "https://api.github.com/users/Stargateur/repos", "events_url": "https://api.github.com/users/Stargateur/events{/privacy}", "received_events_url": "https://api.github.com/users/Stargateur/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2019-08-06T23:37:15Z", "updated_at": "2020-07-24T11:44:07Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While working on a [SO](https://stackoverflow.com/questions/57378606/how-can-i-ensure-that-a-rust-vector-only-contains-alternating-types/57378944#57378944) question.\r\n\r\nWe was wondering if `chain()` would produce an acceptable speed, after some digging and benchmark, we come to the conclusion that `collect()` is slow because it use [`while let`](https://doc.rust-lang.org/src/alloc/vec.rs.html#1939). Unfortunately, this make collect very slow, I don't really understand why but that a fact.\r\n\r\nBut we saw that `for_each()` (probably thank to [`fold()`](https://doc.rust-lang.org/src/core/iter/adapters/chain.rs.html#101)) implementation of `chain()` don't have this problem and produce something a lot faster.\r\n\r\n```rust\r\n#![feature(test)]\r\nextern crate test;\r\n\r\nuse either::Either; // 1.5.2\r\nuse std::iter;\r\n\r\n#[derive(Debug, Default)]\r\npub struct Data<X, Y> {\r\n    head: Option<Y>,\r\n    pairs: Vec<(X, Y)>,\r\n    tail: Option<X>,\r\n}\r\n\r\nimpl<X, Y> Data<X, Y> {\r\n    pub fn iter(&self) -> impl Iterator<Item = Either<&X, &Y>> {\r\n        let head = self.head.iter().map(Either::Right);\r\n\r\n        let pairs = self.pairs.iter().flat_map(|(a, b)| {\r\n            let a = iter::once(Either::Left(a));\r\n            let b = iter::once(Either::Right(b));\r\n            a.chain(b)\r\n        });\r\n\r\n        let tail = self.tail.iter().map(Either::Left);\r\n\r\n        head.chain(pairs).chain(tail)\r\n    }\r\n}\r\n\r\n#[derive(Debug)]\r\nstruct AData(usize);\r\n#[derive(Debug)]\r\nstruct BData(usize);\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use crate::{AData, BData, Data};\r\n    use test::Bencher; // 1.5.2\r\n\r\n    #[bench]\r\n    fn test_for_each(b: &mut Bencher) {\r\n        b.iter(|| {\r\n            let data = Data {\r\n                head: Some(BData(84)),\r\n                pairs: std::iter::repeat_with(|| (AData(42), BData(84)))\r\n                    .take(20998)\r\n                    .collect(),\r\n                tail: Some(AData(42)),\r\n            };\r\n\r\n            let mut data_bis = Vec::with_capacity(21000);\r\n            data.iter().for_each(|x| data_bis.push(x));\r\n        });\r\n    }\r\n\r\n    #[bench]\r\n    fn test_collect(b: &mut Bencher) {\r\n        b.iter(|| {\r\n            let data = Data {\r\n                head: Some(BData(84)),\r\n                pairs: std::iter::repeat_with(|| (AData(42), BData(84)))\r\n                    .take(20998)\r\n                    .collect(),\r\n                tail: Some(AData(42)),\r\n            };\r\n\r\n            let _: Vec<_> = data.iter().collect();\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n```none\r\ntest tests::test_collect  ... bench:   1,682,529 ns/iter (+/- 2,157,023)\r\ntest tests::test_for_each ... bench:     609,031 ns/iter (+/- 750,944)\r\n```\r\n\r\nSo, should we change implementation of collect to use `for_each()` ? Note that a for loop doesn't solve the problem. For this to be optimized we need to use `for_each()`.\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":null}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63340/timeline", "performed_via_github_app": null, "state_reason": null}