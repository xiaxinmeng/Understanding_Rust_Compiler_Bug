{"url": "https://api.github.com/repos/rust-lang/rust/issues/37884", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37884/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37884/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37884/events", "html_url": "https://github.com/rust-lang/rust/issues/37884", "id": 190517161, "node_id": "MDU6SXNzdWUxOTA1MTcxNjE=", "number": 37884, "title": "Received \"note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on unknown free region bounded by scope CodeExtent(9898/CallSiteScope { fn_id: NodeId(4519), body_id: NodeId(18425) })...\"", "user": {"login": "k4rtik", "id": 374340, "node_id": "MDQ6VXNlcjM3NDM0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/374340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k4rtik", "html_url": "https://github.com/k4rtik", "followers_url": "https://api.github.com/users/k4rtik/followers", "following_url": "https://api.github.com/users/k4rtik/following{/other_user}", "gists_url": "https://api.github.com/users/k4rtik/gists{/gist_id}", "starred_url": "https://api.github.com/users/k4rtik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k4rtik/subscriptions", "organizations_url": "https://api.github.com/users/k4rtik/orgs", "repos_url": "https://api.github.com/users/k4rtik/repos", "events_url": "https://api.github.com/users/k4rtik/events{/privacy}", "received_events_url": "https://api.github.com/users/k4rtik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}], "state": "closed", "locked": false, "assignee": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 13, "created_at": "2016-11-19T20:05:55Z", "updated_at": "2017-01-04T08:22:29Z", "closed_at": "2017-01-04T08:22:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Receiving info about MIR or some other intermediate form in a user error report.\r\n\r\nI tried this code which most likely has some lifetime issue that I am yet to resolve:\r\n```rust\r\npub fn accept_cmd(tcp_ctx: &Arc<RwLock<TCP>>, dl_ctx: &Arc<RwLock<DataLink>>, port: u16) {\r\n    let s = (*tcp_ctx.write().unwrap()).v_socket();                                       \r\n    {                                                                                     \r\n        let tcp = &mut (*tcp_ctx.write().unwrap());                                       \r\n        match s {                                                                         \r\n            Ok(ref sock) => {                                                             \r\n                match tcp.v_bind(dl_ctx, *sock, None, port) {                             \r\n                    Ok(_) => {                                                            \r\n                        match tcp.v_listen(dl_ctx, *sock) {                               \r\n                            Ok(_) => trace!(\"v_listen() succeeded\"),                      \r\n                            Err(e) => error!(\"v_listen: {}\", e),                          \r\n                        }                                                                 \r\n                    }                                                                     \r\n                                                                                          \r\n                    Err(e) => error!(\"v_bind: {}\", e),                                    \r\n                }                                                                         \r\n            }                                                                             \r\n            Err(ref e) => error!(\"v_socket: {}\", e),                                      \r\n        }                                                                                 \r\n    }                                                                                     \r\n    let sock = s.unwrap();                                                                \r\n    let tcp_ctx_clone = tcp_ctx.clone(); // <------------- Error here\r\n    thread::spawn(move || {                                                               \r\n        loop {                                                                            \r\n            match tcp::v_accept(&tcp_ctx_clone, sock, None) {                             \r\n                Ok(socket) => trace!(\"v_accept returned {}\", socket),                     \r\n                Err(e) => error!(\"v_accept: {}\", e),                                      \r\n            }                                                                             \r\n        }                                                                                 \r\n    });                                                                                   \r\n}                                                                                         \r\n```\r\n\r\nI should have received information about the scope defined by some part of my code or if the issue is with auto-generated code then possibly no information about an internal scope.\r\n\r\nInstead, this happened:\r\n\r\n```rust\r\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\r\n   --> src/main.rs:128:33\r\n    |\r\n128 |     let tcp_ctx_clone = tcp_ctx.clone();\r\n    |                                 ^^^^^\r\n    |\r\n    = note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on unknown free region bounded by scope CodeExtent(9898/CallSiteScope { fn_id: NodeId(4519), body_id: NodeId(18425) })...\r\nnote: ...so that types are compatible (expected &std::sync::Arc<std::sync::RwLock<tcp::TCP<'_>>>, found &std::sync::Arc<std::sync::RwLock<tcp::TCP<'_>>>)\r\n   --> src/main.rs:128:33\r\n    |\r\n128 |     let tcp_ctx_clone = tcp_ctx.clone();\r\n    |                                 ^^^^^\r\n    = note: but, the lifetime must be valid for the static lifetime...\r\nnote: ...so that the type `[closure@src/main.rs:129:19: 136:6 tcp_ctx_clone:std::sync::Arc<std::sync::RwLock<tcp::TCP<'_>>>, sock:usize]` will meet its required lifetime bounds\r\n   --> src/main.rs:129:5\r\n    |\r\n129 |     thread::spawn(move || {\r\n    |     ^^^^^^^^^^^^^\r\n\r\n```\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.15.0-nightly (ba872f270 2016-11-17)\r\nbinary: rustc\r\ncommit-hash: ba872f270781ada15426cfac7db20b30b81777dc\r\ncommit-date: 2016-11-17\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.15.0-nightly\r\nLLVM version: 3.9\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37884/timeline", "performed_via_github_app": null, "state_reason": "completed"}