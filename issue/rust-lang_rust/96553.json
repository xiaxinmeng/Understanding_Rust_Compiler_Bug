{"url": "https://api.github.com/repos/rust-lang/rust/issues/96553", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96553/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96553/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96553/events", "html_url": "https://github.com/rust-lang/rust/issues/96553", "id": 1220916093, "node_id": "I_kwDOAAsO6M5IxbN9", "number": 96553, "title": "clippy generated broken code in a particular case where .to_owned().to_string() is used on the same variable within a block.", "user": {"login": "dertin", "id": 1295883, "node_id": "MDQ6VXNlcjEyOTU4ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1295883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dertin", "html_url": "https://github.com/dertin", "followers_url": "https://api.github.com/users/dertin/followers", "following_url": "https://api.github.com/users/dertin/following{/other_user}", "gists_url": "https://api.github.com/users/dertin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dertin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dertin/subscriptions", "organizations_url": "https://api.github.com/users/dertin/orgs", "repos_url": "https://api.github.com/users/dertin/repos", "events_url": "https://api.github.com/users/dertin/events{/privacy}", "received_events_url": "https://api.github.com/users/dertin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-04-29T14:08:56Z", "updated_at": "2022-09-22T10:54:28Z", "closed_at": "2022-09-22T10:54:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nfn main() {\r\n    let bar = \"Test\".to_string();\r\n\r\n    let result: String = {\r\n        let foo_1 = bar.to_owned().to_string();\r\n        let foo_2 = bar.to_owned().to_string();\r\n\r\n        foo_2\r\n    };\r\n\r\n    print!(\"{}\", result);\r\n}\r\n```\r\ncommand used\r\n```\r\n$ cargo +nightly clippy --fix -Z unstable-options --allow-dirty --broken-code\r\n```\r\n\r\nI expected to see this happen: \r\n```\r\n$ cargo +nightly clippy --fix -Z unstable-options --allow-dirty --broken-code\r\n    Checking test-clippy v0.1.0 (/home/dertin/test-clippy)\r\n       Fixed src/main.rs (3 fixes)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.37s\r\n```\r\n```rust\r\nfn main() {\r\n    let bar = \"Test\".to_string();\r\n\r\n    let result: String = {\r\n        let _foo_1 = bar.to_string(); // or bar.to_owned();\r\n        \r\n\r\n        bar\r\n    };\r\n\r\n    print!(\"{}\", result);\r\n}\r\n```\r\n\r\nInstead, this happened: \r\n\r\n```\r\n$ cargo +nightly clippy --fix -Z unstable-options --allow-dirty --broken-code\r\n    Checking test-clippy v0.1.0 (/home/dertin/test-clippy)\r\nwarning: failed to automatically apply fixes suggested by rustc to crate `test_clippy`\r\n\r\nafter fixes were automatically applied the compiler reported errors within these files:\r\n\r\n  * src/main.rs\r\n\r\nThis likely indicates a bug in either rustc or cargo itself,\r\nand we would appreciate a bug report! You're likely to see \r\na number of compiler warnings after this message which cargo\r\nattempted to fix but failed. If you could open an issue at\r\nhttps://github.com/rust-lang/rust/issues\r\nquoting the full output of this command we'd be very appreciative!\r\nNote that you may be able to make some more progress in the near-term\r\nfixing code with the `--broken-code` flag\r\n\r\nThe following errors were reported:\r\nerror[E0382]: borrow of moved value: `bar`\r\n --> src/main.rs:8:9\r\n  |\r\n2 |     let bar = \"Test\".to_string();\r\n  |         --- move occurs because `bar` has type `std::string::String`, which does not implement the `Copy` trait\r\n...\r\n5 |         let _foo_1 = bar;\r\n  |                      --- value moved here\r\n...\r\n8 |         bar.to_owned().to_string()\r\n  |         ^^^^^^^^^^^^^^ value borrowed here after move\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0382`.\r\nOriginal diagnostics will follow.\r\n\r\nwarning: unused variable: `foo_1`\r\n --> src/main.rs:5:13\r\n  |\r\n5 |         let foo_1 = bar.to_owned().to_string();\r\n  |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_foo_1`\r\n  |\r\n  = note: `#[warn(unused_variables)]` on by default\r\n\r\nwarning: redundant clone\r\n --> src/main.rs:5:24\r\n  |\r\n5 |         let foo_1 = bar.to_owned().to_string();\r\n  |                        ^^^^^^^^^^^ help: remove this\r\n  |\r\n  = note: `#[warn(clippy::redundant_clone)]` on by default\r\nnote: cloned value is neither consumed nor mutated\r\n --> src/main.rs:5:21\r\n  |\r\n5 |         let foo_1 = bar.to_owned().to_string();\r\n  |                     ^^^^^^^^^^^^^^\r\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\r\n\r\nwarning: redundant clone\r\n --> src/main.rs:5:35\r\n  |\r\n5 |         let foo_1 = bar.to_owned().to_string();\r\n  |                                   ^^^^^^^^^^^^ help: remove this\r\n  |\r\nnote: this value is dropped without further use\r\n --> src/main.rs:5:21\r\n  |\r\n5 |         let foo_1 = bar.to_owned().to_string();\r\n  |                     ^^^^^^^^^^^^^^\r\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\r\n\r\nwarning: redundant clone\r\n --> src/main.rs:6:24\r\n  |\r\n6 |         let foo_2 = bar.to_owned().to_string();\r\n  |                        ^^^^^^^^^^^ help: remove this\r\n  |\r\nnote: this value is dropped without further use\r\n --> src/main.rs:6:21\r\n  |\r\n6 |         let foo_2 = bar.to_owned().to_string();\r\n  |                     ^^^\r\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\r\n\r\nwarning: redundant clone\r\n --> src/main.rs:6:35\r\n  |\r\n6 |         let foo_2 = bar.to_owned().to_string();\r\n  |                                   ^^^^^^^^^^^^ help: remove this\r\n  |\r\nnote: this value is dropped without further use\r\n --> src/main.rs:6:21\r\n  |\r\n6 |         let foo_2 = bar.to_owned().to_string();\r\n  |                     ^^^^^^^^^^^^^^\r\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\r\n\r\nwarning: returning the result of a `let` binding from a block\r\n --> src/main.rs:8:9\r\n  |\r\n6 |         let foo_2 = bar.to_owned().to_string();\r\n  |         --------------------------------------- unnecessary `let` binding\r\n7 | \r\n8 |         foo_2\r\n  |         ^^^^^\r\n  |\r\n  = note: `#[warn(clippy::let_and_return)]` on by default\r\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\r\nhelp: return the expression directly\r\n  |\r\n6 ~         \r\n7 | \r\n8 ~         bar.to_owned().to_string()\r\n  |\r\n\r\nwarning: `test-clippy` (bin \"test-clippy\") generated 6 warnings\r\nwarning: `test-clippy` (bin \"test-clippy\" test) generated 6 warnings (6 duplicates)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.40s\r\n```\r\n\r\n```rust\r\nfn main() {\r\n    let bar = \"Test\".to_string();\r\n    // --- move occurs because `bar` has type `std::string::String`, which does not implement the `Copy` trait\r\n    let result: String = {\r\n        let _foo_1 = bar; // --- value moved here\r\n\r\n        bar.to_owned().to_string()\r\n        // value borrowed here after move\r\n    };\r\n\r\n    print!(\"{}\", result);\r\n}\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.62.0-nightly (e85edd9a8 2022-04-28)\r\nbinary: rustc\r\ncommit-hash: e85edd9a844b523a02dbd89f3c02cd13e4c9fe46\r\ncommit-date: 2022-04-28\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.62.0-nightly\r\nLLVM version: 14.0.1\r\n```\r\n\r\n`cargo +nightly clippy --version`:\r\n```\r\nclippy 0.1.62 (e85edd9 2022-04-28)\r\n```", "closed_by": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96553/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}