{"url": "https://api.github.com/repos/rust-lang/rust/issues/60825", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60825/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60825/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60825/events", "html_url": "https://github.com/rust-lang/rust/issues/60825", "id": 443914431, "node_id": "MDU6SXNzdWU0NDM5MTQ0MzE=", "number": 60825, "title": "Accessing foreign global variables under wasm32-unknown-unknown target", "user": {"login": "mpapierski", "id": 327556, "node_id": "MDQ6VXNlcjMyNzU1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/327556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpapierski", "html_url": "https://github.com/mpapierski", "followers_url": "https://api.github.com/users/mpapierski/followers", "following_url": "https://api.github.com/users/mpapierski/following{/other_user}", "gists_url": "https://api.github.com/users/mpapierski/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpapierski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpapierski/subscriptions", "organizations_url": "https://api.github.com/users/mpapierski/orgs", "repos_url": "https://api.github.com/users/mpapierski/repos", "events_url": "https://api.github.com/users/mpapierski/events{/privacy}", "received_events_url": "https://api.github.com/users/mpapierski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-05-14T13:25:52Z", "updated_at": "2019-12-16T22:24:31Z", "closed_at": "2019-12-16T22:24:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to compile a code that uses foreign global variables under `wasm32-unknown-unknown` it appears that wrong code is generated. My use case is that I want to export a variable `foo` from the host, so Rust program compiled into wasm can use value of this variable.\r\n\r\nI tried this code:\r\n\r\n```rust\r\nextern \"C\" {\r\n  #[no_mangle]\r\n  static foo: i32;\r\n}\r\n  \r\n\r\n#[no_mangle]\r\npub extern \"C\" fn bar() -> i32 {\r\n  unsafe { foo }\r\n}\r\n```\r\n\r\nCompiled with:\r\n\r\n```sh\r\nrustc --target wasm32-unknown-unknown -O --crate-type=cdylib src/main.rs -o wasm_test.wasm\r\n```\r\n\r\nProduces following WASM code:\r\n\r\n```wat\r\n(module\r\n  (type (;0;) (func))\r\n  (type (;1;) (func (result i32)))\r\n  (func $__wasm_call_ctors (type 0))\r\n  (func $bar (type 1) (result i32)\r\n    i32.const 0\r\n    i32.load)\r\n  (table (;0;) 1 1 anyfunc)\r\n  (memory (;0;) 16)\r\n  (global (;0;) (mut i32) (i32.const 1048576))\r\n  (global (;1;) i32 (i32.const 1048576))\r\n  (global (;2;) i32 (i32.const 1048576))\r\n  (export \"memory\" (memory 0))\r\n  (export \"__heap_base\" (global 1))\r\n  (export \"__data_end\" (global 2))\r\n  (export \"bar\" (func $bar)))\r\n```\r\n\r\nRust appears to treat variable `extern \"C\" static foo: i32;` as variable with local linkage without emitting \"import global\" opcodes.\r\n\r\nThis should be the direct translation into C++ code. This also declares a variable with external linkage:\r\n\r\n```c++\r\nextern int foo;\r\n\r\nint bar() { return foo; }\r\n```\r\n\r\nCompiled into WASM:\r\n\r\n```wat\r\n(module\r\n (import \"env\" \"foo\" (global $foo i32))\r\n (table 0 anyfunc)\r\n (memory $0 1)\r\n (export \"memory\" (memory $0))\r\n (export \"_Z3barv\" (func $_Z3barv))\r\n (func $_Z3barv (; 0 ;) (result i32)\r\n  (i32.load\r\n   (get_global $foo)\r\n  )\r\n )\r\n)\r\n```\r\n\r\nNote the `(import \"env\" \"foo\" (global $foo i32))`: This is what C++ compiler emits when it encounters a variable declared with an external linkage. [Source](https://mbebenita.github.io/WasmExplorer/?state=%7B%22options%22%3A%7B%22showGutter%22%3Atrue%2C%22showConsole%22%3Atrue%2C%22showOptions%22%3Atrue%2C%22autoCompile%22%3Atrue%2C%22showLLVM%22%3Afalse%2C%22darkMode%22%3Atrue%2C%22fastMath%22%3Afalse%2C%22noInline%22%3Afalse%2C%22noRTTI%22%3Afalse%2C%22noExceptions%22%3Afalse%2C%22cleanWast%22%3Afalse%2C%22wasmBaseline%22%3Afalse%2C%22dialect%22%3A%22C%2B%2B11%22%2C%22optimizationLevel%22%3A%22s%22%7D%2C%22source%22%3A%22extern%20const%20int%20foo%3B%5Cn%5Cnint%20bar()%20%7B%20return%20foo%3B%20%7D%22%7D)\r\n\r\nI believe current behaviour of Rust compiler is incorrect and wrong WASM code is generated for variables with external C linkage. Perhaps there is a special syntax for emitting `(import \"env\" \"foo\" (global $foo i32))`? Right now the only workaround seems to be using functions instead of variables to communicate between host and the wasm program which works perfectly fine. Please let me know if I missed something and there is an easy way to achieve this.\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\n\r\n> rustc 1.36.0-nightly (a9ec99f42 2019-05-13)\r\n\r\nI've also tried on stable, and other versions of rust nightly.\r\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60825/timeline", "performed_via_github_app": null, "state_reason": "completed"}