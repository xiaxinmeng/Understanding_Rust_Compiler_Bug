{"url": "https://api.github.com/repos/rust-lang/rust/issues/112509", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112509/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112509/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112509/events", "html_url": "https://github.com/rust-lang/rust/issues/112509", "id": 1751149714, "node_id": "I_kwDOAAsO6M5oYGyS", "number": 112509, "title": "Worse codegen for a get(a..a+N) slice range check on beta", "user": {"login": "adrian17", "id": 4729533, "node_id": "MDQ6VXNlcjQ3Mjk1MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4729533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrian17", "html_url": "https://github.com/adrian17", "followers_url": "https://api.github.com/users/adrian17/followers", "following_url": "https://api.github.com/users/adrian17/following{/other_user}", "gists_url": "https://api.github.com/users/adrian17/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrian17/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrian17/subscriptions", "organizations_url": "https://api.github.com/users/adrian17/orgs", "repos_url": "https://api.github.com/users/adrian17/repos", "events_url": "https://api.github.com/users/adrian17/events{/privacy}", "received_events_url": "https://api.github.com/users/adrian17/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 262252628, "node_id": "MDU6TGFiZWwyNjIyNTI2Mjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta", "name": "regression-from-stable-to-beta", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to beta."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1966910227, "node_id": "MDU6TGFiZWwxOTY2OTEwMjI3", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-prioritize", "name": "I-prioritize", "color": "e10c02", "default": false, "description": "Indicates that prioritization has been requested for this issue"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-06-10T23:06:27Z", "updated_at": "2023-06-15T19:14:36Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Code\r\n\r\nGodbolt repro: https://godbolt.org/z/Yv3qYqq4W\r\n\r\nVariant A: check `a..`, then check `..a+N`.\r\n\r\n```rust\r\npub fn write_u8(\r\n    bytes: &mut [u8],\r\n    buf: u8,\r\n    offset: usize,\r\n) -> Result<(), Box<dyn std::error::Error>> {\r\n    let buf = buf.to_le_bytes();\r\n    bytes\r\n        .get_mut(offset..).and_then(|bytes| bytes.get_mut(..buf.len()))\r\n        .ok_or_else(|| \"RangeError: The specified range is invalid\")?\r\n        .copy_from_slice(&buf);\r\n    Ok(())\r\n}\r\n```\r\n\r\nVariant B: check `a..a+N` in one call.\r\n\r\n```rust\r\npub fn write_u8(\r\n    bytes: &mut [u8],\r\n    buf: u8,\r\n    offset: usize,\r\n) -> Result<(), Box<dyn std::error::Error>> {\r\n    let buf = buf.to_le_bytes();\r\n    bytes\r\n        .get_mut(offset..offset+buf.len())         // <- changed line\r\n        .ok_or_else(|| \"RangeError: The specified range is invalid\")?\r\n        .copy_from_slice(&buf);\r\n    Ok(())\r\n}\r\n```\r\n\r\nNote that N is a constant (1), as it's a size of an `u8`. Also note that that this example can be extended to other types of `buf`: `u16`, `u32`, `[u8; 17]` etc.\r\n\r\n### Results\r\n\r\n- Variant A on stable 1.70: generates a single `bytes.len() <= offset` check, then sets the byte and returns `Ok` - perfect. (I wish the push/pop were only on the error path, but that's off topic).\r\n- Variant B on stable 1.70: generates two branches. (I wish it was the same as A, but I guess there could be some overflow related differences.)\r\n- Variant A on beta 1.71: same as on stable.\r\n- Variant B on beta 1.71: seemingly, nonsense? The \"happy path\" is much longer and contains several conditional moves; also, the `lea     rdi, [rip + .L__unnamed_1]` looks like it moved address calculation of the error string to the happy path.\r\n\r\nThis issue concerns the last one.\r\n\r\nI did an ad-hoc microbenchmark that shows Variant B on Beta (and nightly) to become 2-3x slower, but I'm not sure if that benchmark needs attaching - to me it's clear from the disassembly that the happy path codegen is now worse.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112509/timeline", "performed_via_github_app": null, "state_reason": null}