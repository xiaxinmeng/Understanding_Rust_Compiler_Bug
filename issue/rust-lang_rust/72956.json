{"url": "https://api.github.com/repos/rust-lang/rust/issues/72956", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72956/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72956/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72956/events", "html_url": "https://github.com/rust-lang/rust/issues/72956", "id": 630254000, "node_id": "MDU6SXNzdWU2MzAyNTQwMDA=", "number": 72956, "title": "Indexing via `index` method and `[idx]` sugar works differently in `async` blocks/functions ", "user": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 419557634, "node_id": "MDU6TGFiZWw0MTk1NTc2MzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-medium", "name": "E-medium", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Medium / intermediate"}, {"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 18, "created_at": "2020-06-03T19:12:42Z", "updated_at": "2021-10-21T22:09:29Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "My co-worker stumbled upon this curious case where failing typecheck can be made to succeed only by making \"equivalent\" lowerings to code. In particular the following snippet fails to compile because there's a `!Send` type being retained across the yield point:\r\n\r\n<details>\r\n<summary>Failing code example</summary>\r\n\r\n```rust\r\nuse std::ops::Index;\r\n\r\n/// A `Send + !Sync` for demonstration purposes.\r\nstruct Banana(*mut ());\r\nunsafe impl Send for Banana {}\r\n\r\nimpl Banana {\r\n    /// Make a static mutable reference to Banana for convenience purposes.\r\n    ///\r\n    /// Any potential unsoundness here is not super relevant to the issue at hand.\r\n    fn new() -> &'static mut Banana {\r\n        static mut BANANA: Banana = Banana(std::ptr::null_mut());\r\n        unsafe {\r\n            &mut BANANA\r\n        }\r\n    }\r\n}\r\n\r\n// Peach is still Send (because `impl Send for &mut T where T: Send`)\r\nstruct Peach<'a>(&'a mut Banana);\r\n\r\nimpl<'a> std::ops::Index<usize> for Peach<'a> {\r\n    type Output = ();\r\n    fn index(&self, idx: usize) -> &() {\r\n        &()\r\n    }\r\n}\r\n\r\nasync fn baz(v: &()) {}\r\n\r\nasync fn bar() -> () {\r\n    let peach = Peach(Banana::new());\r\n    let r = &peach[0];\r\n    baz(r).await;\r\n    peach.index(0); // make sure peach is retained across yield point\r\n}\r\n\r\nfn assert_send<T: Send>(_: T) {}\r\n\r\npub fn main() {\r\n    assert_send(bar())\r\n}\r\n```\r\n\r\n</details>\r\n\r\nThis snippet will fail with the following error ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7acc400b086472632c1b7489c6bc9e87)):\r\n\r\n```\r\nerror: future cannot be sent between threads safely\r\n  --> src/main.rs:41:5\r\n```\r\n\r\nsuggesting that a `&peach` is being retained across the yield point `baz(r).await`. What is curious, however, that lowering the indexing operation to a method call on `Index` will make code build ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=da4a60f1144aa24873f36d97a9de7ebf)):\r\n\r\n<details>\r\n<summary>Succeeding code example</summary>\r\n\r\n```rust\r\nuse std::ops::Index;\r\n\r\n/// A `Send + !Sync` for demonstration purposes.\r\nstruct Banana(*mut ());\r\nunsafe impl Send for Banana {}\r\n\r\nimpl Banana {\r\n    /// Make a static mutable reference to Banana for convenience purposes.\r\n    ///\r\n    /// Any potential unsoundness here is not super relevant to the issue at hand.\r\n    fn new() -> &'static mut Banana {\r\n        static mut BANANA: Banana = Banana(std::ptr::null_mut());\r\n        unsafe {\r\n            &mut BANANA\r\n        }\r\n    }\r\n}\r\n\r\n// Peach is still Send (because `impl Send for &mut T where T: Send`)\r\nstruct Peach<'a>(&'a mut Banana);\r\n\r\nimpl<'a> std::ops::Index<usize> for Peach<'a> {\r\n    type Output = ();\r\n    fn index(&self, idx: usize) -> &() {\r\n        &()\r\n    }\r\n}\r\n\r\nasync fn baz(v: &()) {}\r\n\r\nasync fn bar() -> () {\r\n    let peach = Peach(Banana::new());\r\n    let r = &*peach.index(0);\r\n    baz(r).await;\r\n    peach.index(0); // make sure peach is retained across yield point\r\n}\r\n\r\nfn assert_send<T: Send>(_: T) {}\r\n\r\npub fn main() {\r\n    assert_send(bar())\r\n}\r\n```\r\n\r\n</details>\r\n\r\nI\u2019m not sure quite yet whether its incorrect that we successfully build the latter example or incorrect in that we retain an immutable reference in the former example.\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"pnkfelix\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72956/timeline", "performed_via_github_app": null, "state_reason": null}