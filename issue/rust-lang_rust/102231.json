{"url": "https://api.github.com/repos/rust-lang/rust/issues/102231", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102231/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102231/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102231/events", "html_url": "https://github.com/rust-lang/rust/issues/102231", "id": 1384625674, "node_id": "I_kwDOAAsO6M5Sh7YK", "number": 102231, "title": "diagnostics for lifetime issues sometimes point to code unrelated to the issue", "user": {"login": "lovasoa", "id": 552629, "node_id": "MDQ6VXNlcjU1MjYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/552629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovasoa", "html_url": "https://github.com/lovasoa", "followers_url": "https://api.github.com/users/lovasoa/followers", "following_url": "https://api.github.com/users/lovasoa/following{/other_user}", "gists_url": "https://api.github.com/users/lovasoa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovasoa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovasoa/subscriptions", "organizations_url": "https://api.github.com/users/lovasoa/orgs", "repos_url": "https://api.github.com/users/lovasoa/repos", "events_url": "https://api.github.com/users/lovasoa/events{/privacy}", "received_events_url": "https://api.github.com/users/lovasoa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-09-24T10:37:40Z", "updated_at": "2022-09-24T18:15:32Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n\r\n```rust\r\nstruct X<'a>(&'a ());\r\n\r\nimpl<'a> X<'a> {\r\n     fn get_self(&mut self) -> &mut X<'a> {\r\n        self\r\n    }   \r\n}\r\n\r\nfn f<'a>(_y1: &'a mut X<'a>, _y2: &'a mut X<'a>) {}\r\n\r\nfn g<'a, 'b>(x1: &mut X<'a>, x2: &mut X<'b>) {\r\n    let y1 = x1.get_self();\r\n    let y2 = x2.get_self();\r\n    // ... Potentially hundreds of lines of code here...\r\n    f(y1, y2);\r\n    // ... Potentially hundreds of lines of code here...\r\n}\r\n```\r\n\r\n([Playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=f3d51947e5a1ceadf25149391883056a))\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[[E0621]](https://doc.rust-lang.org/stable/error-index.html#E0621): explicit lifetime required in the type of `x1`\r\n  --> src/lib.rs:12:14\r\n   |\r\n11 | fn g<'a, 'b>(x1: &mut X<'a>, x2: &mut X<'b>) {\r\n   |                  ---------- help: add explicit lifetime `'a` to the type of `x1`: `&'a mut X<'a>`\r\n12 |     let y1 = x1.get_self();\r\n   |              ^^^^^^^^^^^^^ lifetime `'a` required\r\n\r\nerror: lifetime may not live long enough\r\n  --> src/lib.rs:12:14\r\n   |\r\n11 | fn g<'a, 'b>(x1: &mut X<'a>, x2: &mut X<'b>) {\r\n   |      --  -- lifetime `'b` defined here\r\n   |      |\r\n   |      lifetime `'a` defined here\r\n12 |     let y1 = x1.get_self();\r\n   |              ^^^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\r\n   |\r\n   = help: consider adding the following bound: `'a: 'b`\r\n   = note: requirement occurs because of a mutable reference to `X<'_>`\r\n   = note: mutable references are invariant over their type parameter\r\n   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\r\n\r\nerror: lifetime may not live long enough\r\n  --> src/lib.rs:12:14\r\n   |\r\n11 | fn g<'a, 'b>(x1: &mut X<'a>, x2: &mut X<'b>) {\r\n   |      --  -- lifetime `'b` defined here\r\n   |      |\r\n   |      lifetime `'a` defined here\r\n12 |     let y1 = x1.get_self();\r\n   |              ^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\r\n   |\r\n   = help: consider adding the following bound: `'b: 'a`\r\n   = note: requirement occurs because of a mutable reference to `X<'_>`\r\n   = note: mutable references are invariant over their type parameter\r\n   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\r\n\r\nerror[[E0621]](https://doc.rust-lang.org/stable/error-index.html#E0621): explicit lifetime required in the type of `x2`\r\n  --> src/lib.rs:13:14\r\n   |\r\n11 | fn g<'a, 'b>(x1: &mut X<'a>, x2: &mut X<'b>) {\r\n   |                                  ---------- help: add explicit lifetime `'a` to the type of `x2`: `&'a mut X<'b>`\r\n12 |     let y1 = x1.get_self();\r\n13 |     let y2 = x2.get_self();\r\n   |              ^^^^^^^^^^^^^ lifetime `'a` required\r\n\r\nhelp: `'a` and `'b` must be the same: replace one with the other\r\n\r\nFor more information about this error, try `rustc --explain E0621`.\r\nerror: could not compile `playground` due to 4 previous errors\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\nerror: lifetime may not live long enough\r\n  --> src/lib.rs:15:4\r\n15 |     f(y1, y2);\r\n   |           ^^ argument requires that `'b` must outlive `'a`\r\n   |\r\n   = help: consider adding the following bound: `'b: 'a`\r\n   = help: y2 has type &mut X<'b> but function `f` expected &mut X<'a>\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\n### Context\r\n\r\nI was working on a code refactoring involving many lifetime annotations (https://github.com/sunng87/handlebars-rust/pull/532) for my work on an efficient template cache in [SQLPage](https://github.com/lovasoa/SQLpage), and this issue blocked me for way too long before I realized the compiler was pointing me in the wrong direction. \r\n\r\nIn the code snippet above, the first two lines in `g` are no-ops. The real issue is trying to call the function `f` with arguments that don't match its lifetime requirements.\r\n\r\nBut the compiler says something that made it very hard for me to figure out where the problem was : \r\n\r\n```\r\nx1.get_self();\r\n^^^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\r\n```\r\n\r\nThis sentence just seems wrong. \r\n\r\n - First there doesn't seem to be any \"argument\" in the highlighted code.  It looks like the compiler is referring to `x1`, as an \"argument\" to `get_self`, but it's not obvious.\r\n - Second, get_self doesn't require that `'a` must outlive `'b`. `get_self` doesn't even see more than one lifetime. The requirement happens later, when `f` is called, but the compiler does not point to it, and the programmer has to find it himself, buried in potentially hundreds of lines of unrelated code.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102231/timeline", "performed_via_github_app": null, "state_reason": null}