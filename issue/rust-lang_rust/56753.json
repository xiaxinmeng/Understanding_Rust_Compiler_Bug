{"url": "https://api.github.com/repos/rust-lang/rust/issues/56753", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56753/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56753/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56753/events", "html_url": "https://github.com/rust-lang/rust/issues/56753", "id": 390384534, "node_id": "MDU6SXNzdWUzOTAzODQ1MzQ=", "number": 56753, "title": "Stabilize the `integer_atomics` feature: Atomic{I,U}{8,16,32,64}", "user": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2018-12-12T19:55:48Z", "updated_at": "2019-04-03T05:27:39Z", "closed_at": "2019-01-26T12:21:28Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "RFC: https://github.com/rust-lang/rfcs/pull/1543\r\nTracking issue: https://github.com/rust-lang/rust/issues/32976\r\nDocumentation: https://doc.rust-lang.org/nightly/std/sync/atomic/\r\n\r\nThis issue is a proposal to stabilize the `integer_atomics` feature as-is on nightly, modulo some documentation updates. Specifically, for each atomic type, this is proposed:\r\n\r\n```rust\r\nimpl AtomicU8 {\r\n    pub const fn new(x: u8) -> AtomicU8;\r\n    pub fn get_mut(&mut self) -> &mut u8;\r\n    pub fn into_inner(self) -> u8;\r\n    pub fn load(&self, Ordering) -> u8;\r\n    pub fn store(&self, Ordering) -> u8;\r\n    pub fn swap(&self, val: u8, Ordering) -> u8;\r\n    pub fn compare_and_swap(&self, u8, u8, Ordering) -> u8;\r\n    pub fn compare_exchange(&self, u8, u8, Ordering, Ordering) -> Result<u8, u8>;\r\n    pub fn compare_exchange_weak(&self, u8, u8, Ordering, Ordering) -> Result<u8, u8>;\r\n    pub fn fetch_add(&self, u8, Ordering) -> u8;\r\n    pub fn fetch_sub(&self, u8, Ordering) -> u8;\r\n    pub fn fetch_and(&self, u8, Ordering) -> u8;\r\n    pub fn fetch_nand(&self, u8, Ordering) -> u8;\r\n    pub fn fetch_or(&self, u8, Ordering) -> u8;\r\n    pub fn fetch_xor(&self, u8, Ordering) -> u8;\r\n}\r\n```\r\n\r\n## Portability\r\n\r\nOne of the main points on the [RFC](https://github.com/rust-lang/rfcs/pull/1543) and [tracking issue](https://github.com/rust-lang/rust/issues/32976) is the portability of these types. @alexcrichton has compiled [this table](https://gist.github.com/alexcrichton/516f26c8ce8d832630afdbf22ecda75f) of known platform support, and the conclusions we've drawn with the libs team are:\r\n\r\n* The `AtomicUsize` type is already \"sketchily\" supported. It's not present on armv5te (non-linux) and has a stripped down API on thumv6m\r\n* LLVM emulates small-size atomics with larger atomics (aka 1 byte atomics with 4 byte atomics) on platforms like MIPS. We're unclear on whether it's even possible to safely define these same operations on crates.io, as LLVM might deduce it's undefined behavior. It's sound, however, for LLVM's codegen backend to implement atomics like this.\r\n* AtomicU32 and below are basically universally supported across all platforms that have any atomics at all.\r\n* AtomicU64 actually has a good showing for support as well, except on mips/powerpc platforms.\r\n\r\nIt's proposed in this stabilization that we stabilize all APIs as-is, knowing that these apis are in a \"portable location\" yet are not as maximally portable as, say, `Add for u8`. It's intended that platforms which don't support these types simply won't provide the types, as they do today. For example armv5te will continue to have none of these types. (for those following these issues, **it's not proposed that `target_has_atomic` is stabilized as part of this proposal).\r\n\r\nWhile this is a departure from the norms of the rest of the standard library, it's hopefully the most pragmatic decision here.\r\n\r\n## What about u128?\r\n\r\nSome very recent (aka 20 minutes before this issue was opened) shows that `AtomicU128` can be supported on x86_64 with the LLVM `cx16` feature activated and aarch64 platforms. All other platforms look to require intrinsics one way or another. This proposal doesn't propose stabilizing these just yet, but the thinking is that a stable/safe `std::arch::aarch64::AtomicU128` could be provided while a stable/unsafe `std::arch::x86_64::AtomicU128` could be provided documenting the requirement of the target feature (exact name of the target feature TBD)\r\n\r\n## TODO checklist before stabilization:\r\n\r\n* [ ] FCP\r\n* [ ] Update documentation to reflect that AtomicU8/16/etc may be implemented in terms of 4-byte atomics\r\n* [ ] Update documentation to reflect that these types are not maximally portable. Architectures that want to be supported should be tested. MIPS and PowerPC do not support AtomicU64, and \"more esoteric\" platforms like armv5te, thumv6m, etc, have little-to-no support.\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56753/reactions", "total_count": 9, "+1": 5, "-1": 0, "laugh": 0, "hooray": 4, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56753/timeline", "performed_via_github_app": null, "state_reason": "completed"}