{"url": "https://api.github.com/repos/rust-lang/rust/issues/17817", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/17817/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/17817/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/17817/events", "html_url": "https://github.com/rust-lang/rust/issues/17817", "id": 44979405, "node_id": "MDU6SXNzdWU0NDk3OTQwNQ==", "number": 17817, "title": "doc: `binary_search` does not say what order it uses when feeding inputs to callback", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-10-06T12:50:36Z", "updated_at": "2014-10-06T23:22:13Z", "closed_at": "2014-10-06T23:22:13Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I was quite flummoxed last week because I was getting inconsistent answers out of my calls to `binary_search` in some code.\n\nI eventually realized that my problem was that I was inverting the order of the inputs when generating the output `Ordering` in the `binary_search` callback.\n\nBut the really frustrating thing was that the current doc for `binary_search` does not give you the information you need to actually write the callback properly.  It seems one's only options are to experimentally determine the input order, or read the source.\n\nSo, let's fix the docs here.\n\n---\n\nHere is some sample code illustrating what I mean in this issue:\n\n``` rust\n#![feature(macro_rules)]\n\nmacro_rules! print_it {\n    ($e:expr) => {\n        { println!(\"{:s}: {}\", stringify!($e), $e); }\n    }\n}\n\nfn main() {\n    // use std::slice::BinarySearchResult;\n\n    let s = [1i, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n    let s = s.as_slice();\n    print_it!(s);\n    print_it!(s.contains(&3));\n    print_it!(s.contains(&1));\n    print_it!(s.contains(&4));\n    print_it!(s.contains(&55));\n\n    fn search_probe_1<T:Ord>(seek_elem: &T, s: &[T]) -> Option<uint> {\n        s.binary_search(|candidate| seek_elem.cmp(candidate)).found()\n    }\n    fn search_probe_2<T:Ord>(seek_elem: &T, s: &[T]) -> Option<uint> {\n        s.binary_search(|candidate| candidate.cmp(seek_elem)).found()\n    }\n\n    println!(\"== seek_elem.cmp(candidate) ==\");\n    print_it!(search_probe_1(&3, s));\n    print_it!(search_probe_1(&1, s));\n    print_it!(search_probe_1(&4, s));\n    print_it!(search_probe_1(&55, s));\n\n    println!(\"== candidate.cmp(seek_elem) ==\");\n    print_it!(search_probe_2(&3, s));\n    print_it!(search_probe_2(&1, s));\n    print_it!(search_probe_2(&4, s));\n    print_it!(search_probe_2(&55, s));\n}\n```\n\nwhich prints:\n\n```\ns: [1, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\ns.contains(&3): true\ns.contains(&1): true\ns.contains(&4): false\ns.contains(&55): true\n== seek_elem.cmp(candidate) ==\nsearch_probe_1(&3, s): Some(6)\nsearch_probe_1(&1, s): None\nsearch_probe_1(&4, s): None\nsearch_probe_1(&55, s): None\n== candidate.cmp(seek_elem) ==\nsearch_probe_2(&3, s): Some(6)\nsearch_probe_2(&1, s): Some(3)\nsearch_probe_2(&4, s): None\nsearch_probe_2(&55, s): Some(12)\n```\n\nThis illustrates that \"just try it and see\" is _not_ actually a good strategy for resolving this ambiguity, because feeding the wrong order can give the right answer, i.e. if you happen to pick the middle element for the first lookup.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/17817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/17817/timeline", "performed_via_github_app": null, "state_reason": "completed"}