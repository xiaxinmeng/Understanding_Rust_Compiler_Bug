{"url": "https://api.github.com/repos/rust-lang/rust/issues/1738", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/1738/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/1738/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/1738/events", "html_url": "https://github.com/rust-lang/rust/issues/1738", "id": 3069583, "node_id": "MDU6SXNzdWUzMDY5NTgz", "number": 1738, "title": "RFC: Allow a module to export other items with same name", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2012-02-02T15:47:33Z", "updated_at": "2012-02-10T15:20:59Z", "closed_at": "2012-02-10T15:20:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now, there is no convenient way to define a module like `option`, that both defines a type and several accessors.  You end up defining a type `t` and then writing `option::t`, which is unfortunate.  So unfortunate, it seems, that we hacked around this particular case in the core library.  \n\nPerhaps we could allow a special form of export that lets a module define the other namespaces associated with its name.  So, for example, option could be defined as:\n\n```\nexport t as mod;\nenum t<A> { some(A), none }\nfn foo() { ... }\n```\n\nNow if I do `import option`, the name `option` refers to the module option but also to the type `option::t`.  You would be permitted one \"as mod\" export for each namespace other than module (values, types, impls?).\n\n@pcwalton preferred `as self` as the syntax, but I don't think `self` is currently a keyword, so I substituted `mod`.  \n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/1738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/1738/timeline", "performed_via_github_app": null, "state_reason": "completed"}