{"url": "https://api.github.com/repos/rust-lang/rust/issues/71354", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71354/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71354/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71354/events", "html_url": "https://github.com/rust-lang/rust/issues/71354", "id": 603236908, "node_id": "MDU6SXNzdWU2MDMyMzY5MDg=", "number": 71354, "title": "Fields should not alias Vec content.", "user": {"login": "nbp", "id": 1179566, "node_id": "MDQ6VXNlcjExNzk1NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1179566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbp", "html_url": "https://github.com/nbp", "followers_url": "https://api.github.com/users/nbp/followers", "following_url": "https://api.github.com/users/nbp/following{/other_user}", "gists_url": "https://api.github.com/users/nbp/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbp/subscriptions", "organizations_url": "https://api.github.com/users/nbp/orgs", "repos_url": "https://api.github.com/users/nbp/repos", "events_url": "https://api.github.com/users/nbp/events{/privacy}", "received_events_url": "https://api.github.com/users/nbp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-20T13:25:56Z", "updated_at": "2021-06-15T17:19:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code ( https://rust.godbolt.org/z/GuvQi9 ), which mutates a field while reading the content of a buffer.\r\n\r\n```rust\r\nuse std::vec::Vec;\r\n\r\npub fn foo(v: &mut Vec<usize>) -> usize {\r\n    assert!(v.len() > 2);\r\n    let s1 = v.pop().unwrap();\r\n    let s2 = v.pop().unwrap();\r\n    s1 + s2\r\n}\r\n```\r\n\r\nHere the assertion is capable of removing the branches which are within the `pop` function, to make a branch-less function apart from the assertion code:\r\n\r\n```\r\n        [\u2026]\r\n        mov     rcx, qword ptr [rdi + 16]\r\n        [\u2026]\r\n        lea     rax, [rcx - 1]\r\n        mov     qword ptr [rdi + 16], rax\r\n        [\u2026]\r\n        lea     rsi, [rcx - 2]\r\n        mov     qword ptr [rdi + 16], rsi\r\n        [\u2026]\r\n```\r\n\r\nHowever, the generated code still contains a spill of the `len` field of the vector for each pop-ed value which is used. The reason is that LLVM does not know whether the read type can alias or not the field which is being written to. This aliasing reason is inconsistent with the fact that the `len` field from which the value which is written back to memory is aliased in the `rcx` register.\r\n\r\nI would have expected the generated code to contain a single update of the `len` field, instead of 2.\r\n\r\nTesting with `-C opt-level=3` does not change the result.\r\n\r\n### Meta\r\nTested with both `rustc --version --verbose`:\r\n```\r\nrustc 1.42.0 (b8cedc004 2020-03-09)\r\nbinary: rustc\r\ncommit-hash: b8cedc00407a4c56a3bda1ed605c6fc166655447\r\ncommit-date: 2020-03-09\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.42.0\r\nLLVM version: 9.0\r\n```\r\n\r\nand\r\n\r\n```\r\nrustc 1.44.0-nightly (7f3df5772 2020-04-16)\r\nbinary: rustc\r\ncommit-hash: 7f3df5772439eee1c512ed2eb540beef1124d236\r\ncommit-date: 2020-04-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.44.0-nightly\r\nLLVM version: 9.0\r\n```\r\n\r\nedit: remove the `-Zmutable_noalias` as this seems to optimize this minimized test case. https://github.com/rust-lang/rust/issues/71354#issuecomment-617105118", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71354/timeline", "performed_via_github_app": null, "state_reason": null}