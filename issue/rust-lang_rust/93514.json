{"url": "https://api.github.com/repos/rust-lang/rust/issues/93514", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93514/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93514/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93514/events", "html_url": "https://github.com/rust-lang/rust/issues/93514", "id": 1119848797, "node_id": "I_kwDOAAsO6M5Cv4ld", "number": 93514, "title": "Adding an unreachable branch helps optimize the code when matching on `x % N`", "user": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-01-31T19:31:33Z", "updated_at": "2022-02-02T08:16:36Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Consider this example:\r\n```rust\r\npub fn parse(x: usize) -> usize {\r\n    match x % 5 {\r\n        0 => f1(x),\r\n        1 => f2(x),\r\n        2 => f3(x),\r\n        3 => f4(x),\r\n        4 => f5(x),\r\n        // 5 | 6 | 7 => loop{},\r\n        _ => loop{},\r\n    }\r\n}\r\n```\r\nIt currently generates similar LLVM-IR:\r\n```llvm\r\nstart:\r\n  %_2 = urem i64 %x, 5, !dbg !10\r\n  switch i64 %_2, label %bb12 [\r\n    i64 0, label %bb2\r\n    i64 1, label %bb4\r\n    i64 2, label %bb6\r\n    i64 3, label %bb8\r\n    i64 4, label %bb10\r\n  ], !dbg !11\r\n; ...\r\nbb12:\r\n  br label %bb12, !dbg !32\r\n```\r\nEven though the default branch is unreachable (`x % 5` can't be greater than 4) it is still generated.\r\n\r\nBut, when un-commenting `5 | 6 | 7 => loop{}` line (still unreachable branch, that does the same as default) the default branch becomes `unreachable`:\r\n```llvm\r\nstart:\r\n  %_2 = urem i64 %x, 5, !dbg !10\r\n  switch i64 %_2, label %bb14 [\r\n    i64 0, label %bb2\r\n    i64 1, label %bb4\r\n    i64 2, label %bb6\r\n    i64 3, label %bb8\r\n    i64 4, label %bb10\r\n  ], !dbg !11\r\n; ...\r\nbb14:\r\n  unreachable\r\n```\r\n\r\nSo, adding an **unreachable** branch that does **the same as the default** helps optimize the code.\r\n\r\nSome notes:\r\n- These differences then propagate to assembler, i.e. it also has an unreachable branch when `5 | 6 | 7` is commented-out\r\n- [godbolt link](https://godbolt.org/z/o6hPW16MW)\r\n- Range patterns (like `5..=7`) do **not** help\r\n- Making the default branch `5 | 6 | 7 | _` doesn't help either\r\n- Similar things happen for any `N` in `x % N` that is not a power of two -- adding unreachable branches until the last branch has a power-of-two-minus-one-value helps optimizing the code\r\n  - [`N = 3`](https://godbolt.org/z/5ezr3PP51) (`3 =>`)\r\n  - [`N = 9`](https://godbolt.org/z/o8rdcaK95) (`9 | 10 | 11 | 12 | 13 | 14 | 15 =>`)\r\n  - [`N = 14`](https://godbolt.org/z/76xexbr4M) (`14 | 15 =>`)\r\n- `loop{}`s can be replaced with anything else, for example `unreachable!()` or `panic!()`, effect is still the same\r\n  - in case of panic-like things not removing the panicking branch seems like a big deal\r\n  - I've used `loop{}`s to make diffs less noisy\r\n- `if-else-if` chains are identical to `match` here\r\n- clang seems to handle this situation just fine in any case: [godbolt link](https://godbolt.org/z/xf47WYE8q)\r\n  - it also makes the last reachable branch default in `llvm-ir`, instead of generating an `unreachable` one", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93514/reactions", "total_count": 20, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 18, "eyes": 2}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93514/timeline", "performed_via_github_app": null, "state_reason": null}