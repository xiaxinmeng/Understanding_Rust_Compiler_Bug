{"url": "https://api.github.com/repos/rust-lang/rust/issues/106781", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106781/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106781/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106781/events", "html_url": "https://github.com/rust-lang/rust/issues/106781", "id": 1531220630, "node_id": "I_kwDOAAsO6M5bRJKW", "number": 106781, "title": "Inline assembly fails to compile after allowing inlining on the enclosing function for i686-pc-windows-msvc", "user": {"login": "johnmave126", "id": 1661662, "node_id": "MDQ6VXNlcjE2NjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1661662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnmave126", "html_url": "https://github.com/johnmave126", "followers_url": "https://api.github.com/users/johnmave126/followers", "following_url": "https://api.github.com/users/johnmave126/following{/other_user}", "gists_url": "https://api.github.com/users/johnmave126/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnmave126/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnmave126/subscriptions", "organizations_url": "https://api.github.com/users/johnmave126/orgs", "repos_url": "https://api.github.com/users/johnmave126/repos", "events_url": "https://api.github.com/users/johnmave126/events{/privacy}", "received_events_url": "https://api.github.com/users/johnmave126/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2023-01-12T19:08:41Z", "updated_at": "2023-01-17T06:10:28Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\nConsider the following code:\r\n\r\n```rust\r\nuse std::arch::asm;\r\n\r\n#[inline(never)]\r\npub fn my_test(a: u32, b: u32, c: u32, d: u32) -> u32 {\r\n    let mut g = 3;\r\n    unsafe {\r\n        asm!(\r\n            \"mov {a}, {b}\",\r\n            \"xor {a}, {c}\",\r\n            \"and {a}, {d}\",\r\n            \"or {a}, {e}\",\r\n            \"not {f}\",\r\n            \"add {a}, {f}\",\r\n            \"sub {a}, {g}\",\r\n            \"mov {g}, {a}\",\r\n\r\n            a = in(reg) a,\r\n            b = in(reg) b,\r\n            c = in(reg) c,\r\n            d = in(reg) d,\r\n            e = out(reg) _,\r\n            f = out(reg) _,\r\n            g = inout(reg) g\r\n        )\r\n    }\r\n    g\r\n}\r\n```\r\nwhich uses 7 registers. If we try to compile this on `i686-pc-windows-msvc`, in principle there are 7 general registers, but [Rust Reference](https://doc.rust-lang.org/reference/inline-assembly.html#register-names) mentions that `ebp` and `esi` would be reserved, so I expect a compilation error.\r\n\r\nWe can put this in a `lib.rs`, and in `main.rs` we put:\r\n```rust\r\nuse asm_test::my_test;\r\n\r\nfn main() {\r\n    println!(\"{}\", my_test(1, 2, 3, 4));\r\n}\r\n\r\n```\r\n\r\nInstead, when compiling in release mode using `cargo build --release --target i686-pc-windows-msvc`, it compiles. `cargo asm --lib --target i686-pc-windows-msvc` reveals that the compiler does allocate `esi` and `ebp`.\r\n\r\n<details>\r\n<summary>cargo asm output</summary>\r\n\r\n```asm\r\n.section .text,\"xr\",one_only,asm_test::my_test\r\n        .globl  asm_test::my_test\r\n        .p2align        4, 0x90\r\nasm_test::my_test:\r\nLfunc_begin0:\r\n        .cv_func_id 0\r\n        .cv_file        1 \"R:\\\\asm-test\\\\src\\\\lib.rs\" \"D7E84472A8BA4CD0C091D8930D59F9C5C684E1A6\" 2\r\n        .cv_loc 0 1 3 0\r\n        .cv_fpo_proc    asm_test::my_test 16\r\n        push ebp\r\n        .cv_fpo_pushreg ebp\r\n        push ebx\r\n        .cv_fpo_pushreg ebx\r\n        push edi\r\n        .cv_fpo_pushreg edi\r\n        push esi\r\n        .cv_fpo_pushreg esi\r\n        .cv_fpo_endprologue\r\n        mov ecx, dword ptr [esp + 20]\r\n        mov edx, dword ptr [esp + 24]\r\n        mov esi, dword ptr [esp + 28]\r\n        mov edi, dword ptr [esp + 32]\r\n        mov eax, 3\r\n        .cv_loc 0 1 6 0\r\n        #APP\r\n\r\n        mov ecx, edx\r\n        xor ecx, esi\r\n        and ecx, edi\r\n        or ecx, ebx\r\n        not ebp\r\n        add ecx, ebp\r\n        sub ecx, eax\r\n        mov eax, ecx\r\n\r\n        #NO_APP\r\n        .cv_loc 0 1 26 0\r\n        pop esi\r\n        pop edi\r\n        pop ebx\r\n        pop ebp\r\n        ret\r\n        .cv_fpo_endproc\r\n```\r\n</details>\r\n\r\nHowever, if we change `#[inline(never)]` to `#[inline]`, the compiler correctly displays:\r\n```\r\nerror: inline assembly requires more registers than available\r\n```\r\n\r\nI would expect a compilation error in both cases, and a guarantee that neither `esi` nor `ebp` gets allocated.\r\n\r\nI haven't tried on `x86_64` target yet simply because the number of general registers is a lot. I could try it later today.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\nTried on both stable and nightly\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.66.1 (90743e729 2023-01-10)\r\nbinary: rustc\r\ncommit-hash: 90743e7298aca107ddaa0c202a4d3604e29bfeb6\r\ncommit-date: 2023-01-10\r\nhost: i686-pc-windows-msvc\r\nrelease: 1.66.1\r\nLLVM version: 15.0.2\r\n```\r\n```\r\nrustc 1.68.0-nightly (1e4f90061 2023-01-11)\r\nbinary: rustc\r\ncommit-hash: 1e4f90061cc4bc566f99ab21b1f101182b10cf0c\r\ncommit-date: 2023-01-11\r\nhost: i686-pc-windows-msvc\r\nrelease: 1.68.0-nightly\r\nLLVM version: 15.0.6\r\n```\r\n\r\nNo backtrace available.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106781/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106781/timeline", "performed_via_github_app": null, "state_reason": null}