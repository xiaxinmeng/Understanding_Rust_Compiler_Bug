{"url": "https://api.github.com/repos/rust-lang/rust/issues/75401", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75401/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75401/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75401/events", "html_url": "https://github.com/rust-lang/rust/issues/75401", "id": 676835052, "node_id": "MDU6SXNzdWU2NzY4MzUwNTI=", "number": 75401, "title": "Suggestion: CStr literals", "user": {"login": "LunarLambda", "id": 38919842, "node_id": "MDQ6VXNlcjM4OTE5ODQy", "avatar_url": "https://avatars.githubusercontent.com/u/38919842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LunarLambda", "html_url": "https://github.com/LunarLambda", "followers_url": "https://api.github.com/users/LunarLambda/followers", "following_url": "https://api.github.com/users/LunarLambda/following{/other_user}", "gists_url": "https://api.github.com/users/LunarLambda/gists{/gist_id}", "starred_url": "https://api.github.com/users/LunarLambda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LunarLambda/subscriptions", "organizations_url": "https://api.github.com/users/LunarLambda/orgs", "repos_url": "https://api.github.com/users/LunarLambda/repos", "events_url": "https://api.github.com/users/LunarLambda/events{/privacy}", "received_events_url": "https://api.github.com/users/LunarLambda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2020-08-11T12:25:43Z", "updated_at": "2023-04-29T12:19:56Z", "closed_at": "2023-04-29T12:19:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Why?\r\n\r\nCurrently, creating a `CStr`, even from a bytestring literal, is quite noisy.\r\n\r\n```rust\r\n// NOTE: Don't forget to add \\0 at the end or this is unsound!\r\nlet cstr = unsafe { CStr::from_bytes_with_nul_unchecked(b\"Hello, World\\0\") };\r\n```\r\n\r\nFurthermore, there's no way to ensure the well formed-ness of that literal at compile time\u00b9, despite hardcoded C-strings being fairly common when creating bindings for C libraries.\r\n\r\n## How?\r\n\r\nTo address this, I would like to propose a new string literal type:\r\n\r\n```rust\r\nlet cstr = c\"Hello, World!\";\r\n```\r\n\r\nIt would function nearly identical to byte-string literals, with the following key differences:\r\n\r\n1) Its type is `&CStr`, not `&[u8]`\r\n2) It may not contain any nul bytes (`\\0`, `\\x00` as well as a 'physical' nul byte are forbidden)\r\n3) The compiler automatically adds a nul byte at the end of the string.\r\n\r\nSee also \"Alternatives?\" below.\r\n\r\n## Pros?\r\n\r\n* Fills a niche in the language people are forced to build around\u00b2\r\n* Allows creation of `const` `CStr` items (currently not possible on stable)\r\n\r\n## Cons?\r\n\r\n* Have to commit to adding a new literal (sub)type to the language, which may require small tweaks to the parser\r\n\r\n## Alternatives?\r\n\r\n1) Make associated functions on `CStr` const. This would still leave the burden of checking on the user.\r\n2) Add a `cstr!` macro taking a byte-string literal and applying the needed checks and transformations.\r\n\r\n\u00b9 It is possible using proc-macros, though this poses different issues regarding ergonomics and stability.\r\n\u00b2 [GitHub code search for `CStr::from_bytes_with_nul_unchecked`](https://github.com/search?q=CStr%3A%3Afrom_bytes_with_nul_unchecked&type=Code)", "closed_by": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75401/reactions", "total_count": 24, "+1": 18, "-1": 1, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 2, "eyes": 3}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75401/timeline", "performed_via_github_app": null, "state_reason": "completed"}