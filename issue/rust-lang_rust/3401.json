{"url": "https://api.github.com/repos/rust-lang/rust/issues/3401", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/3401/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/3401/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/3401/events", "html_url": "https://github.com/rust-lang/rust/issues/3401", "id": 6691283, "node_id": "MDU6SXNzdWU2NjkxMjgz", "number": 3401, "title": "reflection on strings", "user": {"login": "Vincent-Belliard", "id": 2185554, "node_id": "MDQ6VXNlcjIxODU1NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2185554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vincent-Belliard", "html_url": "https://github.com/Vincent-Belliard", "followers_url": "https://api.github.com/users/Vincent-Belliard/followers", "following_url": "https://api.github.com/users/Vincent-Belliard/following{/other_user}", "gists_url": "https://api.github.com/users/Vincent-Belliard/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vincent-Belliard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vincent-Belliard/subscriptions", "organizations_url": "https://api.github.com/users/Vincent-Belliard/orgs", "repos_url": "https://api.github.com/users/Vincent-Belliard/repos", "events_url": "https://api.github.com/users/Vincent-Belliard/events{/privacy}", "received_events_url": "https://api.github.com/users/Vincent-Belliard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2012-09-06T15:37:09Z", "updated_at": "2012-09-07T16:12:26Z", "closed_at": "2012-09-06T18:29:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I think there are some problems with strings in Rust. The first problem is that Rust strings seems to evolve quickly but the documentation is not up to date and the Rustc code doesn't use new strings capabilities. I made some remarks last weeks and each time pcwalton said that something exists which could resolve my problem.\n\nI understood that you have this kind of strings:\n~str: a string not shared which can be transferred to another thread,\n@str: a string shared within a thread (with references count),\n&str: a reference on a string which existence is controlled by the caller,\n&static/str: a static constant string.\n\nEven if I think that managing four kinds of strings could be difficult for a basic developer, I have now nearly all I need to work efficiently with strings. However I still have a problem with strings. I would like to do operations on different kinds of strings (as we deal with content, it's absolutely possible). For example, I would like to do:\n\n<pre><code>\nstruct My_str {\n    let a: ~str;\n    new(new_a: ~str) {\n        self.a = copy new_a;\n    }\n    fn is_equal(ref_a: &str) -> bool {\n        self.a == ref_a // error: mismatched types: expected `~str` but found `&/str` (str storage differs: expected ~ but found &)\n    }\n    fn set(new_a: &str) {\n        self.a = copy new_a; // error: mismatched types: expected `~str` but found `&/str` (str storage differs: expected ~ but found &)\n    }\n}\n</code></pre>\n\nThis string model is very interesting for a computer languages researcher, but I don't think it's so easy to use and I don't think that the generated code is efficient enough. To design a good string model, we must define first the needs. I think that it could be:\n- be able to initialize a string with a string constant,\n- be able to copy strings without copying strings content,\n- be able to make basic operations on strings (concatenation, comparison, slices, researches, split, regexp, \u2026)\n- and be able to send a string from one task to another (directly or inside an object).\n\nIn one word, using strings should be as easy as using integers.\n\nThere is no need for modifying a string. So I think the strings should be constant (like in Java) and to construct dynamically a string (which is quite rare) we could define an other class (like StringBuffer).\n\nI think that it should be the responsibility of the compiler to manage the string storage so I wish Rust could have only one string type (for example str) which could replace all the other strings (~str, @str, &str and &static/str). Within a thread, it's really easy to have reference counted strings. To send a string between two threads, we could use the move operator which could give the string owning to the new thread (for strings with one link) or copy the string (for strings with several links). It's also possible to use the LLVM cmpxchg instruction to access to the reference count to share strings between threads.\n\nI know that the 0.4 version is due in one week and that it's may be not the good time to talk about strings but I think that Rust should do something with strings to become an easy to use language.\n\nIf you think that strings are well designed in Rust, just close this issue and I won't borrow you anymore with that.\n", "closed_by": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/3401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/3401/timeline", "performed_via_github_app": null, "state_reason": "completed"}