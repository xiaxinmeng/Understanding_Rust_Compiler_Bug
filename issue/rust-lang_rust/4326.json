{"url": "https://api.github.com/repos/rust-lang/rust/issues/4326", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/4326/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/4326/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/4326/events", "html_url": "https://github.com/rust-lang/rust/issues/4326", "id": 9609138, "node_id": "MDU6SXNzdWU5NjA5MTM4", "number": 4326, "title": "Unable to implement a trait in terms of more than one other trait", "user": {"login": "pkgw", "id": 59598, "node_id": "MDQ6VXNlcjU5NTk4", "avatar_url": "https://avatars.githubusercontent.com/u/59598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pkgw", "html_url": "https://github.com/pkgw", "followers_url": "https://api.github.com/users/pkgw/followers", "following_url": "https://api.github.com/users/pkgw/following{/other_user}", "gists_url": "https://api.github.com/users/pkgw/gists{/gist_id}", "starred_url": "https://api.github.com/users/pkgw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pkgw/subscriptions", "organizations_url": "https://api.github.com/users/pkgw/orgs", "repos_url": "https://api.github.com/users/pkgw/repos", "events_url": "https://api.github.com/users/pkgw/events{/privacy}", "received_events_url": "https://api.github.com/users/pkgw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-01-02T03:46:34Z", "updated_at": "2013-01-02T04:01:31Z", "closed_at": "2013-01-02T04:00:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd like to implement a trait in terms of a few other ones, but the compiler tells me that I have conflicting trait implementations. The most succinct example is\n\n```\ntrait Generic { }\ntrait SpecificOne { }\ntrait SpecificTwo { }\nimpl<T: SpecificOne> T: Generic { }\nimpl<T: SpecificTwo> T: Generic { }\n```\n\nNow, if there existed a type implementing both SpecificOne and SpecificTwo, that would be a problem, but there isn't.\n\nI'm pretty sure the compiler should be able to determine whether the implementation is legal or not. (It's not clear to me whether you have to worry about something introducing ambiguities by linking to your crate later.) And unless I'm overlooking something (not to imply that this is unlikely), it seems to me that this is an important thing to be able to do.\n\nMy specific use case is for SHA1 hashing of things. I want to do something along the lines of:\n\n```\ntrait Hashable { fn hash (&self, Sha1 sha); }\n\nimpl<T: to_bytes::IterBytes> T: Hashable { /* send the bytes to the sha1 */ }\n\nimpl<T: io::Reader> T: Hashable { /* send the stream to the sha1 */ }\n```\n\nReaders can't be IterBytes because the bytes iterator function is defined as being pure.\n", "closed_by": {"login": "pkgw", "id": 59598, "node_id": "MDQ6VXNlcjU5NTk4", "avatar_url": "https://avatars.githubusercontent.com/u/59598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pkgw", "html_url": "https://github.com/pkgw", "followers_url": "https://api.github.com/users/pkgw/followers", "following_url": "https://api.github.com/users/pkgw/following{/other_user}", "gists_url": "https://api.github.com/users/pkgw/gists{/gist_id}", "starred_url": "https://api.github.com/users/pkgw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pkgw/subscriptions", "organizations_url": "https://api.github.com/users/pkgw/orgs", "repos_url": "https://api.github.com/users/pkgw/repos", "events_url": "https://api.github.com/users/pkgw/events{/privacy}", "received_events_url": "https://api.github.com/users/pkgw/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/4326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/4326/timeline", "performed_via_github_app": null, "state_reason": "completed"}