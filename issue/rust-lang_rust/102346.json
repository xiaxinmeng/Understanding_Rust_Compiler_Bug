{"url": "https://api.github.com/repos/rust-lang/rust/issues/102346", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102346/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102346/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102346/events", "html_url": "https://github.com/rust-lang/rust/issues/102346", "id": 1387204329, "node_id": "I_kwDOAAsO6M5Srw7p", "number": 102346, "title": "Printing of types expands type aliases, but does not avoid naming collisions of lifetimes that can thus occur in HRTs", "user": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2022-09-27T06:43:51Z", "updated_at": "2022-09-27T18:16:40Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Follow-up to #101280, which has been fixed in #101996, but that issue only explicitly addressed the case when the name was *chosen by the compiler*.\n\nWe can also get cases where all names are user-provided. E.g.\n```rs\nuse std::cell::Cell;\ntype Ty1 = for<'r> fn(Cell<(&'r i32, &'r i32)>);\ntype Ty2<'a> = for<'r> fn(Cell<(&'a i32, &'r i32)>);\nfn f<'r>(f: Ty1) -> Ty2<'r> {\n    f\n}\n```\n```\nerror[E0308]: mismatched types\n --> src/main.rs:9:5\n  |\n8 | fn f<'r>(f: Ty1) -> Ty2<'r> {\n  |                     ------- expected `for<'r> fn(Cell<(&'r i32, &'r i32)>)` because of return type\n9 |     f\n  |     ^ one type is more general than the other\n  |\n  = note: expected fn pointer `for<'r> fn(Cell<(&'r i32, &'r i32)>)`\n             found fn pointer `for<'r> fn(Cell<(&'r i32, &'r i32)>)`\n```\n\n---\n\nI would expect the compiler to rename the bound variable in this case, e.g.\n```\n8 | fn f<'r>(f: Ty1) -> Ty2<'r> {\n  |                     ------- expected `for<'r1> fn(Cell<(&'r i32, &'r1 i32)>)` because of return type\n```\n```\n  = note: expected fn pointer `for<'r1> fn(Cell<(&'r i32, &'r1 i32)>)`\n             found fn pointer `for<'r1> fn(Cell<(&'r1 i32, &'r1 i32)>)`\n```\n\nIt might make sense to conservatively do such renaming in *all cases* where a lifetime of the same name is in scope, in the spirit of why [using such a HRT *directly*](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=9efa149642abb5b988a83e7c9facdc0e) (without type alias) is [a compilation error](https://doc.rust-lang.org/nightly/error_codes/E0496.html). This is why in the suggested fix for the concrete error message above, the type `for<'r1> fn(Cell<(&'r1 i32, &'r1 i32)>)` has had its bound lifetime renamed, too.\n\nIt also seems reasonable to base the new name on the old one in some manner, as user-chosen names can be conveying useful information. Adding trailing numbers seems reasonable, but other approaches might be good, too. Of course, the idea when adding a number is that if a name `'r1` was already in scope, too, then `'r2` or `'r3`, etc\u2026 would be chosen. I\u2019m not sure if there\u2019s precedent of choosing new names based on existing ones in the compiler. If the approach of adding a trailing number is chosen, then there\u2019s the case to consider where the name already has a trailing number, in which case, either an *additional* number could be added, perhaps with underscore separation, or the existing number could be incremented. E.g. if the user named the lifetime `'r42`, a new name could be `'r42_1` or `'r_43` or `'r1` (provided it\u2019s still available).\n\n---\n\ncc @b-naber\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"b-naber\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102346/timeline", "performed_via_github_app": null, "state_reason": null}