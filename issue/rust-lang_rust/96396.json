{"url": "https://api.github.com/repos/rust-lang/rust/issues/96396", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96396/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96396/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96396/events", "html_url": "https://github.com/rust-lang/rust/issues/96396", "id": 1214768177, "node_id": "I_kwDOAAsO6M5IZ-Qx", "number": 96396, "title": "[rustdoc] query symbol docs on the CLI", "user": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-04-25T16:36:47Z", "updated_at": "2022-04-28T12:58:17Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all\r\n\r\nI saw this feature in this [haredoc announcement](https://harelang.org/blog/2022-04-25-announcing-hare/#haredoc) so I propose a similar function for rustdoc (or a cargo plugin).\r\n\r\nLooking forward for your ideas :)\r\n\r\n## Query\r\n\r\nFor the current project one could query like this, maybe the `crate::` should be prefixed always.\r\n\r\n```bash\r\ncargo doc --query crate::some_function\r\ncargo doc --query ::some_function\r\n```\r\n\r\nFor deps one would issue commands like this:\r\n\r\n```bash\r\ncargo doc --query std::collections::HashMap\r\n```\r\n\r\n## Results\r\n\r\nSome docs are very long, so chopping after the second sentence feels like an okay first heuristic. \r\n\r\n```\r\npub struct std::collections::HashMap<K, V, S = RandomState> { /* private fields */ }\r\n        A hash map implemented with quadratic probing and SIMD lookup.\r\n\r\n        By default, HashMap uses a hashing algorithm selected to provide\r\n        resistance against HashDoS attacks.\r\n```\r\n\r\nOne option is to not display the full path of the symbol in the response to destill the response.\r\n\r\nThe output should be indented according to the current terminal width of the user.\r\n\r\n## Nice features\r\n\r\nIf the user queries for a struct or trait we could display constructor or common functions like `new`.\r\n\r\n```\r\npub struct std::collections::HashMap<K, V, S = RandomState> { /* private fields */ }\r\n        A hash map implemented with quadratic probing and SIMD lookup.\r\n\r\n        By default, HashMap uses a hashing algorithm selected to provide\r\n        resistance against HashDoS attacks.\r\n\r\nConstructors functions:\r\n        pub fn new() -> HashMap<K, V, RandomState>\r\n        pub fn with_capacity(capacity: usize) -> HashMap<K, V, RandomState>\r\n        ... (two more)\r\n```\r\n\r\nAdding a section showing the traits would be another idea:\r\n```\r\nTraits:\r\n       Debug, Display, PartialEq, Eq\r\n```\r\n\r\n## Extra features\r\n\r\nOne idea would be to catch typos in the queries if nothing is found.\r\nEg. `std::collection` would then find the plural `std::collections`\r\n\r\nAnother would be to integrate it with `cargo check` which could output the doc if there is only one error in one build.\r\n\r\n## Similar technology\r\n\r\nhttps://github.com/rust-lang/rls has a `full_docs` feature that allows a client to query for the docs.\r\nOther IDEs have other means to query for docs.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96396/timeline", "performed_via_github_app": null, "state_reason": null}