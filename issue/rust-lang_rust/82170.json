{"url": "https://api.github.com/repos/rust-lang/rust/issues/82170", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82170/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82170/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82170/events", "html_url": "https://github.com/rust-lang/rust/issues/82170", "id": 808939243, "node_id": "MDU6SXNzdWU4MDg5MzkyNDM=", "number": 82170, "title": "Generic bounds are used overzealously", "user": {"login": "RustyYato", "id": 16103364, "node_id": "MDQ6VXNlcjE2MTAzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/16103364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RustyYato", "html_url": "https://github.com/RustyYato", "followers_url": "https://api.github.com/users/RustyYato/followers", "following_url": "https://api.github.com/users/RustyYato/following{/other_user}", "gists_url": "https://api.github.com/users/RustyYato/gists{/gist_id}", "starred_url": "https://api.github.com/users/RustyYato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RustyYato/subscriptions", "organizations_url": "https://api.github.com/users/RustyYato/orgs", "repos_url": "https://api.github.com/users/RustyYato/repos", "events_url": "https://api.github.com/users/RustyYato/events{/privacy}", "received_events_url": "https://api.github.com/users/RustyYato/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-02-16T02:43:12Z", "updated_at": "2021-02-16T02:54:14Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d10a2b403aee136b0426cc7f602d51ef\r\n```rust\r\npub trait Callable<A> {\r\n    type Output;\r\n}\r\n\r\npub struct Call<A>(A);\r\n\r\nimpl<F: FnOnce(A) -> B, A, B> Callable<F> for Call<A> {\r\n    type Output = B;\r\n}\r\n\r\nimpl<A> Call<A> {\r\n    fn build<F>(f: F) -> impl FnOnce(A) -> <Self as Callable<F>>::Output\r\n    where\r\n        Self: Callable<F>\r\n    {\r\n        move |a| todo!()\r\n    }\r\n}\r\n\r\nfn foo<F>(f: F)\r\nwhere\r\n    Call<()>: Callable<F>\r\n{\r\n    Call::build(Call::build(f));\r\n}\r\n\r\nfn bar() {\r\n    Call::build(Call::build(|()| 0));\r\n}\r\n```\r\n\r\nI expected it to compile, but it doesn't. Instead, I get the following compile error:\r\n\r\n```rust\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:25:17\r\n   |\r\n13 |     fn build<F>(f: F) -> impl FnOnce(A) -> <Self as Callable<F>>::Output\r\n   |                          ----------------------------------------------- the found opaque type\r\n...\r\n21 | fn foo<F>(f: F)\r\n   |        - this type parameter\r\n...\r\n25 |     Call::build(Call::build(f));\r\n   |                 ^^^^^^^^^^^^^^ expected type parameter `F`, found opaque type\r\n   |\r\n   = note: expected type parameter `F`\r\n                 found opaque type `impl FnOnce<((),)>`\r\n   = help: type parameters must be constrained to match other types\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\r\n```\r\n\r\nThis is unusual because `Call::build` is implemented for all types `F: FnOnce(A) -> _` (through the `Callable` trait), and since `Call::build` returns a type that implements `FnOnce(A) -> _`, it should be possible to recursively call `Call::bulid` if the first one succeeds. However, Rust overzelously assumes that `Call::build` can only be called with `F` (the concrete type parameter) instead  of any type that implements `FnOnce(A) -> _`. (I'm trying to abstract over `Fn*` traits for a single argument, so this is road bump is annoying to work around, it requires duplicating all applicable functions).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82170/timeline", "performed_via_github_app": null, "state_reason": null}