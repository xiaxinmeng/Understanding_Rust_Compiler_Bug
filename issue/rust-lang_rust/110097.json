{"url": "https://api.github.com/repos/rust-lang/rust/issues/110097", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110097/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110097/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110097/events", "html_url": "https://github.com/rust-lang/rust/issues/110097", "id": 1659672498, "node_id": "I_kwDOAAsO6M5i7Jey", "number": 110097, "title": "missed optimization for `if let`, even though equivalent match is optimized", "user": {"login": "davemilter", "id": 26097083, "node_id": "MDQ6VXNlcjI2MDk3MDgz", "avatar_url": "https://avatars.githubusercontent.com/u/26097083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davemilter", "html_url": "https://github.com/davemilter", "followers_url": "https://api.github.com/users/davemilter/followers", "following_url": "https://api.github.com/users/davemilter/following{/other_user}", "gists_url": "https://api.github.com/users/davemilter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davemilter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davemilter/subscriptions", "organizations_url": "https://api.github.com/users/davemilter/orgs", "repos_url": "https://api.github.com/users/davemilter/repos", "events_url": "https://api.github.com/users/davemilter/events{/privacy}", "received_events_url": "https://api.github.com/users/davemilter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-04-08T23:11:51Z", "updated_at": "2023-04-09T02:02:34Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\npub fn change_value(val: Result<i32, ()>) -> Result<i32, ()> {\r\n    if let Ok(x) = val {\r\n        Ok(x * 2)\r\n    } else {\r\n        Err(())\r\n    }\r\n}\r\n\r\npub fn change_value2(val: Result<i32, ()>) -> Result<i32, ()> {\r\n    match val {\r\n        Ok(x) => Ok(x * 2),\r\n        Err(()) => Err(())\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: \r\nin release build this code would translated into exact the same assembly/llvm-ir\r\n\r\nInstead, this happened: \r\n\r\n```\r\nchange_value:\r\n\txorl\t%eax, %eax\r\n\ttestl\t%edi, %edi\r\n\tsetne\t%al\r\n\tleal\t(%rsi,%rsi), %edx\r\n\tretq\r\nchange_value2:\r\n\tmovl\t%edi, %eax\r\n\tleal\t(%rsi,%rsi), %edx\r\n\tretq\r\n```\r\n\r\nand the llvm-ir is different:\r\n\r\n```\r\ndefine { i32, i32 } @_ZN10playground12change_value17h0230bd4091fd6529E(i32 noundef %0, i32 %1) unnamed_addr #0 {\r\nstart:\r\n  %2 = icmp eq i32 %0, 0\r\n  %_4 = shl i32 %1, 1\r\n  %not. = xor i1 %2, true\r\n  %.sroa.0.0 = zext i1 %not. to i32\r\n  %.sroa.3.0 = select i1 %2, i32 %_4, i32 undef\r\n  %3 = insertvalue { i32, i32 } undef, i32 %.sroa.0.0, 0\r\n  %4 = insertvalue { i32, i32 } %3, i32 %.sroa.3.0, 1\r\n  ret { i32, i32 } %4\r\n}\r\n```\r\n\r\n```\r\ndefine { i32, i32 } @_ZN10playground13change_value217h3302fbc2853d0a41E(i32 noundef %0, i32 %1) unnamed_addr #0 {\r\nstart:\r\n  %switch = icmp eq i32 %0, 0\r\n  %_4 = shl i32 %1, 1\r\n  %.sroa.3.0 = select i1 %switch, i32 %_4, i32 undef\r\n  %2 = insertvalue { i32, i32 } undef, i32 %0, 0\r\n  %3 = insertvalue { i32, i32 } %2, i32 %.sroa.3.0, 1\r\n  ret { i32, i32 } %3\r\n}\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nI tried thin in rust-playground for 1.68.2, beta and nightly.\r\n\r\nSee also https://internals.rust-lang.org/t/why-match-is-better-then-if/18636", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110097/timeline", "performed_via_github_app": null, "state_reason": null}