{"url": "https://api.github.com/repos/rust-lang/rust/issues/44371", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44371/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44371/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44371/events", "html_url": "https://github.com/rust-lang/rust/issues/44371", "id": 255678963, "node_id": "MDU6SXNzdWUyNTU2Nzg5NjM=", "number": 44371, "title": "allow standard library functions to check expensive pre-/postconditions", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-06T17:13:49Z", "updated_at": "2017-09-06T18:22:36Z", "closed_at": "2017-09-06T18:09:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See also: https://github.com/rust-lang/rust/issues/44370\r\n\r\nThere should be a way for standard library functions to check expensive pre-/postconditions, by which I mean preconditions that change the complexity of the standard algorithms (e.g. by making a `O(1)` algorithm `O(log N)`). \r\n\r\nExample: `binary_search` requires the input slice to be sorted, otherwise the result is unspecified. Checking if the input slice is sorted makes `binary_search` `O(N)` instead of `O(log N)` (*) defeating the purpose of binary search. Still, such a check is useful to detect logic errors in user programs: it is a violated precondition after all.\r\n\r\nSo we are at an impasse. What could we do?\r\n\r\nWe could:\r\n- [ ] add a `expensive_assert!` macro to `std`\r\n- [ ] allow users to configure `std` with different features (and make this easy to use via cargo)\r\n- [ ] add `expensive_assert!(input_slice.is_sorted())` to `binary_search` \r\n\r\nAn alternative would be to perform this test using `debug_assert!`. However, making all debug builds exponentially slower is unacceptable.\r\n\r\n(*) Since the standard library does not guarantee the complexity of anything, we can actually make `binary_search` O(N) in debug builds and that would be a backwards compatible change... ", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44371/timeline", "performed_via_github_app": null, "state_reason": "completed"}