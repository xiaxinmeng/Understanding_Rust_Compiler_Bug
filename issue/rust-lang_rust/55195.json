{"url": "https://api.github.com/repos/rust-lang/rust/issues/55195", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55195/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55195/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55195/events", "html_url": "https://github.com/rust-lang/rust/issues/55195", "id": 371834963, "node_id": "MDU6SXNzdWUzNzE4MzQ5NjM=", "number": 55195, "title": "Adding a syntax for explicit lifetime block", "user": {"login": "ccutch", "id": 4782109, "node_id": "MDQ6VXNlcjQ3ODIxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/4782109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ccutch", "html_url": "https://github.com/ccutch", "followers_url": "https://api.github.com/users/ccutch/followers", "following_url": "https://api.github.com/users/ccutch/following{/other_user}", "gists_url": "https://api.github.com/users/ccutch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ccutch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ccutch/subscriptions", "organizations_url": "https://api.github.com/users/ccutch/orgs", "repos_url": "https://api.github.com/users/ccutch/repos", "events_url": "https://api.github.com/users/ccutch/events{/privacy}", "received_events_url": "https://api.github.com/users/ccutch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-19T07:18:39Z", "updated_at": "2018-10-19T15:23:55Z", "closed_at": "2018-10-19T15:22:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey I have come into the problem a few times now where i want to make a mutable borrow to a variable and soon after want to get that variables value. In a very simple example from rusts documentation\r\n```\r\nlet mut x = 5;\r\n{\r\n    let y = &mut x;\r\n    *y += 1;\r\n}\r\nprintln!(\"{}\", x);\r\n```\r\nWhen I am later looking over my code I sometimes get thrown off by the syntax as it reminds me of c/c++ function syntax. I was just wondering if there has been any talk about making an explicit statement in rust for these life cycles such as `lifetime` like below.\r\n```\r\nlet mut x = 5;\r\nlifetime {\r\n    let y = &mut x;\r\n    *y += 1;\r\n}\r\nprintln!(\"{}\", x);\r\n```\r\n\r\nI know that the answer is probably just to make a function that takes a mutable borrow.\r\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55195/timeline", "performed_via_github_app": null, "state_reason": "completed"}