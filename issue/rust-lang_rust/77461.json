{"url": "https://api.github.com/repos/rust-lang/rust/issues/77461", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77461/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77461/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77461/events", "html_url": "https://github.com/rust-lang/rust/issues/77461", "id": 713813523, "node_id": "MDU6SXNzdWU3MTM4MTM1MjM=", "number": 77461, "title": "Macro expansion + E0308 'mismatched types' makes it hard to find what the types were", "user": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1659943986, "node_id": "MDU6TGFiZWwxNjU5OTQzOTg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-verbose", "name": "D-verbose", "color": "c9f7a3", "default": false, "description": "Too much output caused by a single piece of incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-10-02T18:15:34Z", "updated_at": "2020-10-03T23:08:06Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```diff\r\ndiff --git a/compiler/rustc_middle/src/ty/query/plumbing.rs b/compiler/rustc_middle/src/ty/query/plumbing.rs\r\nindex f3fa3634026..ec990b414a0 100644\r\n--- a/compiler/rustc_middle/src/ty/query/plumbing.rs\r\n+++ b/compiler/rustc_middle/src/ty/query/plumbing.rs\r\n@@ -486,7 +486,8 @@ macro_rules! define_queries_inner {\r\n             $($(#[$attr])*\r\n             #[inline(always)]\r\n             pub fn $name(self, key: query_helper_param_ty!($($K)*))\r\n-                -> <queries::$name<$tcx> as QueryConfig<TyCtxt<$tcx>>>::Stored\r\n+                -> /*&'tcx*/ $V\r\n+                //<queries::$name<$tcx> as QueryConfig<TyCtxt<$tcx>>>::Stored\r\n             {\r\n                 get_query::<queries::$name<'_>, _>(self.tcx, self.span, key.into_query_param())\r\n             })*\r\n```\r\napplied to https://github.com/rust-lang/rust/commit/782013564efc06ef02614ba35a4e67dee4fcb8e7\r\n\r\nThe error message was (many hundreds of times, but that's not the compiler's fault):\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n    --> compiler/rustc_middle/src/ty/query/plumbing.rs:452:17\r\n     |\r\n237  |  /   macro_rules! define_queries {\r\n238  |  |       (<$tcx:tt> $($category:tt {\r\n239  |  |           $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident: $node:ident($($K:tt)*) -> $V:ty,)*\r\n240  |  |       },)*) => {\r\n241  | /|           define_queries_inner! { <$tcx>\r\n242  | ||               $($( $(#[$attr])* category<$category> [$($modifiers)*] fn $name: $node($($K)*) -> $V,)*)*\r\n243  | ||           }\r\n     | ||___________- in this macro invocation (#3)\r\n244  |  |       }\r\n245  |  |   }\r\n     |  |___- in this expansion of `define_queries!` (#2)\r\n...\r\n252  | /    macro_rules! define_queries_inner {\r\n253  | |        (<$tcx:tt>\r\n254  | |         $($(#[$attr:meta])* category<$category:tt>\r\n255  | |            [$($modifiers:tt)*] fn $name:ident: $node:ident($($K:tt)*) -> $V:ty,)*) => {\r\n...    |\r\n452  | |                    self.at(DUMMY_SP).$name(key.into_query_param())\r\n     | |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n     | |                    |\r\n     | |                    expected `&ty::Generics`, found struct `ty::Generics`\r\n     | |                    help: consider borrowing here: `&self.at(DUMMY_SP).$name(key.into_query_param())`\r\n...    |\r\n505  | |        }\r\n506  | |    }\r\n     | |____- in this expansion of `define_queries_inner!` (#3)\r\n     | \r\n    ::: compiler/rustc_middle/src/ty/query/mod.rs:105:1\r\n     |\r\n105  |      rustc_query_append! { [define_queries!][<'tcx>] }\r\n     |      ------------------------------------------------- in this macro invocation (#1)\r\n     | \r\n    ::: compiler/rustc_middle/src/query/mod.rs:37:1\r\n     |\r\n37   |    / rustc_queries! {\r\n38   |    |     Other {\r\n39   |    |         query trigger_delay_span_bug(key: DefId) -> () {\r\n40   |    |             desc { \"trigger a delay span bug\" }\r\n...       |\r\n1581 |    |     }\r\n1582 |    | }\r\n     |    | -\r\n     |    | |\r\n     |    |_in this expansion of `rustc_query_append!` (#1)\r\n     |      in this macro invocation (#2)\r\n```\r\n\r\nNotice how\r\n```\r\n     | |                    expected `&ty::Generics`, found struct `ty::Generics`\r\n     | |                    help: consider borrowing here: `&self.at(DUMMY_SP).$name(key.into_query_param())`\r\n```\r\nis buried deep inside the expanded macros. The compiler should print it at the beginning or end of the error so it's easier to find without hunting through 80 lines of errors.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version`:\r\n```\r\nrustc 1.47.0-beta.1 (0f91f5c28 2020-08-25)\r\n```\r\n\r\ncc @estebank ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77461/timeline", "performed_via_github_app": null, "state_reason": null}