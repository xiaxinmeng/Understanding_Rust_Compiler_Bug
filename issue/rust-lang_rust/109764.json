{"url": "https://api.github.com/repos/rust-lang/rust/issues/109764", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109764/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109764/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109764/events", "html_url": "https://github.com/rust-lang/rust/issues/109764", "id": 1647243610, "node_id": "I_kwDOAAsO6M5iLvFa", "number": 109764, "title": "`-Ztrait-solver=next`: deduplicate region constraints in query responses", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 4806740265, "node_id": "LA_kwDOAAsO6M8AAAABHoEJKQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-trait-system-refactor", "name": "WG-trait-system-refactor", "color": "c2e0c6", "default": false, "description": "The Rustc Trait System Refactor Initiative"}, {"id": 5329411030, "node_id": "LA_kwDOAAsO6M8AAAABPahb1g", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-coinduction", "name": "A-coinduction", "color": "f7e101", "default": false, "description": "Area: Concerning coinduction, most often for auto traits"}], "state": "open", "locked": false, "assignee": {"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2023-03-30T09:25:52Z", "updated_at": "2023-05-29T18:12:17Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\npub struct Bar\nwhere\n    for<'a> &'a mut Self:;\n\nfn main() {}\n```\nresults in overflow in the new solver when checking `WF(Bar)` or `for<'a> WF(&'a mut Bar). The issue is as follows:\n\n```rust\npub struct Bar\nwhere\n    for<'a> &'a mut Bar:;\n```\n- `for<'a> WF(&'a mut Bar)` (attempt 0)\n\t- `WF(&'a.1 mut Bar)`\n\t\t- `outlives(Bar, 'a.1)` OK `[Bar: 'a.1]`\n\t\t- `WF(Bar)`\n\t\t\t- `for<'a> WF(&'a mut Bar)` cycle OK `[]`\n\t- RESULT:  OK `[Bar: 'a.1]`\n- `for<'a> WF(&'a mut Bar)` (attempt 1)\n\t- `WF(&'a.1 mut Bar)`\n\t\t- `outlives(Bar, 'a.1)` OK `[Bar: 'a.1]`\n\t\t- `WF(Bar)`\n\t\t\t- `for<'a> WF(&'a mut Bar)` cycle OK `[Bar: 'a.2]` (create new universe)\n\t- RESULT:  OK `[Bar: 'a.1, Bar: 'a.2]`\n- `for<'a> WF(&'a mut Bar)` (attempt 2)\n\t- `WF(&'a.1 mut Bar)`\n\t\t- `outlives(Bar, 'a.1)` OK `[Bar: 'a.1]`\n\t\t- `WF(Bar)`\n\t\t\t- `for<'a> WF(&'a mut Bar)` cycle OK `[Bar: 'a.2, Bar: 'a.3]` (create new universe)\n\t- RESULT:  OK `[Bar: 'a.1, Bar: 'a.2, Bar: 'a.3]`\n\nstarting with `WF(BAR)`\n- `WF(Bar)` iteration 0\n\t- `for<'a> WF(&'a mut Bar)`\n\t\t- `WF(&'a.1 mut Bar)`\n\t\t\t- `outlives(Bar, 'a.1)` OK `[Bar: 'a.1]`\n\t\t\t- `WF(Bar)` cycle OK `[]`\n- `WF(Bar)` iteration 1\n\t- `for<'a> WF(&'a mut Bar)`\n\t\t- `WF(&'a.1 mut Bar)`\n\t\t\t- `outlives(Bar, 'a.1)` OK `[Bar: 'a.1]`\n\t\t\t- `WF(Bar)` cycle OK `[Bar: 'a.?]`\n\na similar issue is:\n```rust\nstruct Foo\nwhere\n    Foo:,\n    for<'a> &'a ():;\n```\n- `WF(Foo)` iteration 0\n\t- `WF(Foo)` cycle OK `[]`\n\t- `for<'a> WF(&'a ())` OK `[(): 'a.1]`  (new universe for unnameable placeholder)\n\t- result OK `[(): 'a.1]`\n- `WF(Foo)` iteration 1 (in new infcx)\n\t- `WF(Foo)` cycle OK `[(): 'a.1]` (new universe for unnameable placeholder)\n\t- `for<'a> WF(&'a ())` OK `[(): 'a.2]`  (new universe for unnameable placeholder)\n\t- result OK `[(): 'a.1, (): 'a.2]` yikes (have to rerun again)\n\nThe long term plan to solve this is to eagerly deal with new placeholders in the solver, short term we probably want to somehow deduplicate new placeholder constraints when creating the query response\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"ndrewxie\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109764/timeline", "performed_via_github_app": null, "state_reason": null}