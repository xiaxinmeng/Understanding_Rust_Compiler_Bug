{"url": "https://api.github.com/repos/rust-lang/rust/issues/15962", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/15962/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/15962/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/15962/events", "html_url": "https://github.com/rust-lang/rust/issues/15962", "id": 38682589, "node_id": "MDU6SXNzdWUzODY4MjU4OQ==", "number": 15962, "title": "quote_* macros lose hygiene, gensym and span information", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235146, "node_id": "MDU6TGFiZWwyMzUxNDY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-syntaxext", "name": "A-syntaxext", "color": "f7e101", "default": false, "description": "Area: Syntax extensions"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2014-07-24T22:51:17Z", "updated_at": "2015-04-26T12:43:51Z", "closed_at": "2015-04-26T12:43:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The `quote_*` macros stringify everything, which loses vital information.\n\n``` rust\n// gensym.rs\n#![feature(plugin_registrar, managed_boxes, quote)]\n#![crate_type = \"dylib\"]\n\nextern crate syntax;\nextern crate rustc;\n\nuse syntax::ast;\nuse syntax::codemap::{Span};\nuse syntax::ext::base;\nuse syntax::ext::base::{ExtCtxt, MacExpr};\nuse syntax::ext::build::AstBuilder;\nuse syntax::parse::token;\nuse rustc::plugin::Registry;\n\n#[plugin_registrar]\npub fn plugin_registrar(reg: &mut Registry) {\n    reg.register_macro(\"test_quote\", expand_syntax_ext);\n}\n\npub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, _: &[ast::TokenTree]) -> Box<base::MacResult> {\n    // expand to `{ let foo = true; foo }`, with a gensym'd foo.\n    let ident = token::gensym_ident(\"foo\");\n    let decl = quote_stmt!(&mut *cx, let $ident = true;);\n    let result = cx.expr_block(cx.block(sp, vec![decl], Some(cx.expr_ident(sp, ident))));\n\n    println!(\"{}\", result);\n\n    MacExpr::new(result)\n}\n```\n\n``` rust\n// test_gensym.rs\n#![feature(phase)]\n\n#[phase(plugin)] extern crate gensym;\n\nfn main() {\n    let a = test_quote!();\n}\n```\n\n```\n[...]\ntest_gensym.rs:6:13: 6:27 error: unresolved name `foo`.\ntest_gensym.rs:6     let a = test_quote!();\n                             ^~~~~~~~~~~~~~\ntest_gensym.rs:1:1: 7:1 note: in expansion of test_quote!\ntest_gensym.rs:6:13: 6:27 note: expansion site\nerror: aborting due to previous error\n```\n\nBeautified/trimmed version of the output of the `println!`\n\n```\nExpr {\n    node: ExprBlock(Block {\n        view_items: [],\n        stmts: [Spanned {\n            node: StmtDecl(Spanned {\n                node: DeclLocal(Local {\n                    ty: Ty {\n                        node: TyInfer,\n                        span: Span {\n                            lo: BytePos(7677),\n                            hi: BytePos(7677),\n                            expn_info: None\n                        }\n                    },\n                    pat: Pat {\n                        node: PatIdent(BindByValue(MutImmutable), Spanned {\n                            node: \"foo\" (269),\n                            span: Span {\n                                lo: BytePos(7677),\n                                hi: BytePos(7680),\n                                expn_info: None\n                            }\n                        }, None),\n                        span: Span {\n                            lo: BytePos(7677),\n                            hi: BytePos(7680),\n                            expn_info: None\n                        }\n                    },\n                    init: Some(Expr {\n                        node: ExprLit(Spanned {\n                            node: LitBool(true),\n                            span: Span {\n                                lo: BytePos(83),\n                                hi: BytePos(97),\n                                expn_info: None\n                            }\n                        }),\n                        span: Span {\n                            lo: BytePos(83),\n                            hi: BytePos(97),\n                            expn_info: None\n                        }\n                    }),\n                    span: Span {\n                        lo: BytePos(7677),\n                        hi: BytePos(97),\n                        expn_info: None\n                    },\n                    source: LocalLet\n                }),\n            }, 4294967295),\n        }],\n        expr: Some(Expr {\n            node: ExprPath(Path {\n                global: false,\n                segments: [PathSegment {\n                    identifier: \"foo\" (268)# 0,\n                    lifetimes: [],\n                    types: OwnedSlice {\n                        {}\n                    }\n                }]\n            }),\n        }),\n        rules: DefaultBlock,\n    }),\n}\n```\n\nOf particular attention is the difference in `Name` between `node: \"foo\" (269)`\n `identifier: \"foo\" (268)# 0,`, and also the `7677` etc. numbers in the spans inside the`DeclLocal`.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/15962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/15962/timeline", "performed_via_github_app": null, "state_reason": "completed"}