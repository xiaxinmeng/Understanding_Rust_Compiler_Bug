{"url": "https://api.github.com/repos/rust-lang/rust/issues/82921", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82921/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82921/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82921/events", "html_url": "https://github.com/rust-lang/rust/issues/82921", "id": 825114180, "node_id": "MDU6SXNzdWU4MjUxMTQxODA=", "number": 82921, "title": "Async fn disagrees on its own return type (\"one of the expected opaque types\" vs \"one of the found opaque types\")", "user": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-03-09T00:51:20Z", "updated_at": "2022-09-21T18:52:02Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The following is a minimal repro.\r\n\r\n```rust\r\nuse core::future::Future;\r\nuse core::marker::PhantomData;\r\nuse core::pin::Pin;\r\nuse core::task::{Context, Poll};\r\n\r\nasync fn f() {}\r\n\r\npub fn fail<'a>() -> Box<dyn Future<Output = ()> + Send + 'a> {\r\n    Box::new(async { new(|| async { f().await }).await })\r\n}\r\n\r\nfn new<A, B>(_a: A) -> F<A, B>\r\nwhere\r\n    A: Fn() -> B,\r\n{\r\n    F { _i: PhantomData }\r\n}\r\n\r\ntrait Stream {\r\n    type Item;\r\n}\r\n\r\nstruct T<A, B> {\r\n    _a: PhantomData<A>,\r\n    _b: PhantomData<B>,\r\n}\r\n\r\nimpl<A, B> Stream for T<A, B>\r\nwhere\r\n    A: Fn() -> B,\r\n{\r\n    type Item = B;\r\n}\r\n\r\nstruct F<A, B>\r\nwhere\r\n    A: Fn() -> B,\r\n{\r\n    _i: PhantomData<<T<A, B> as Stream>::Item>,\r\n}\r\n\r\nimpl<A, B> Future for F<A, B>\r\nwhere\r\n    A: Fn() -> B,\r\n{\r\n    type Output = ();\r\n    fn poll(self: Pin<&mut Self>, _cx: &mut Context) -> Poll<Self::Output> {\r\n        unimplemented!()\r\n    }\r\n}\r\n```\r\n\r\n```console\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:9:5\r\n   |\r\n6  | async fn f() {}\r\n   |              -\r\n   |              |\r\n   |              checked the `Output` of this `async fn`, one of the expected opaque types\r\n   |              checked the `Output` of this `async fn`, one of the found opaque types\r\n...\r\n9  |     Box::new(async { new(|| async { f().await }).await })\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\r\n   | \r\n  ::: .rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:61:43\r\n   |\r\n61 | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\r\n   |                                           -------------------------------\r\n   |                                           |\r\n   |                                           one of the expected opaque types\r\n   |                                           one of the found opaque types\r\n   |\r\n   = note: while checking the return type of the `async fn`\r\n   = note: while checking the return type of the `async fn`\r\n   = note: expected opaque type `impl Future`\r\n              found opaque type `impl Future`\r\n```\r\n\r\nNote that rearranging `fn fail` to the following hides the issue and compiles. But my expectation would be that this does the exact same thing either way, with or without hiding the async block behind a named function.\r\n\r\n```diff\r\n-     Box::new(async { new(|| async { f().await }).await })\r\n+     async fn wrap() { new(|| async { f().await }).await }\r\n+     Box::new(wrap())\r\n```\r\n\r\nVarious other very surprising transformations also hide the issue. For example:\r\n\r\n```diff\r\n  impl<A, B> Stream for T<A, B>\r\n- where\r\n-     A: Fn() -> B,\r\n  {\r\n      type Item = B;\r\n  }\r\n```\r\n\r\nor:\r\n\r\n```diff\r\n-     Box::new(async { new(|| async { f().await }).await })\r\n+     Box::new(async { new(|| f()).await })\r\n```\r\n\r\nor:\r\n\r\n```diff\r\n- pub fn fail<'a>() -> Box<dyn Future<Output = ()> + Send + 'a> {\r\n+ pub fn fail() -> Box<dyn Future<Output = ()> + Send + 'static> {\r\n```\r\n\r\nI believe this is a compiler bug because none of the above transformations should have effect on whether this code compiles.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82921/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82921/timeline", "performed_via_github_app": null, "state_reason": null}