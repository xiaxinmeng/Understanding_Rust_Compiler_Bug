{"url": "https://api.github.com/repos/rust-lang/rust/issues/104290", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104290/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104290/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104290/events", "html_url": "https://github.com/rust-lang/rust/issues/104290", "id": 1445636454, "node_id": "I_kwDOAAsO6M5WKqlm", "number": 104290, "title": "Initializing structs with Option fields set to `None` produces non-optimal assembly", "user": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-11-11T15:29:45Z", "updated_at": "2022-12-29T16:54:56Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given a struct `S` like this:\r\n\r\n```rust\r\npub struct S {\r\n    pub f1: Option<u8>,\r\n    pub f2: Option<u8>,\r\n    pub f3: Option<u8>,\r\n    pub f4: Option<u8>,\r\n    pub f5: Option<u8>,\r\n    pub f6: Option<u8>,\r\n    pub f7: Option<u8>,\r\n    pub f8: Option<u8>,\r\n}\r\n```\r\n\r\nInitializing this struct with all fields set to `None`, gives non-optimal assembly code, as LLVM doesn't combine the stores into a memset, because the `u8` fields within the `Option` fields are not set. Initializing all fields to `Some(0)` and then overwriting them with `None` gives optimal results.\r\n\r\n```rust\r\npub struct S {\r\n    pub f1: Option<u8>,\r\n    pub f2: Option<u8>,\r\n    pub f3: Option<u8>,\r\n    pub f4: Option<u8>,\r\n    pub f5: Option<u8>,\r\n    pub f6: Option<u8>,\r\n    pub f7: Option<u8>,\r\n    pub f8: Option<u8>,\r\n}\r\n\r\npub fn bad() -> S {\r\n    S {\r\n        f1: None,\r\n        f2: None,\r\n        f3: None,\r\n        f4: None,\r\n        f5: None,\r\n        f6: None,\r\n        f7: None,\r\n        f8: None,\r\n    }\r\n}\r\n\r\npub fn good() -> S {\r\n    let mut s = S {\r\n        f1: Some(0),\r\n        f2: Some(0),\r\n        f3: Some(0),\r\n        f4: Some(0),\r\n        f5: Some(0),\r\n        f6: Some(0),\r\n        f7: Some(0),\r\n        f8: Some(0),\r\n    };\r\n\r\n    s.f1 = None;\r\n    s.f2 = None;\r\n    s.f3 = None;\r\n    s.f4 = None;\r\n    s.f5 = None;\r\n    s.f6 = None;\r\n    s.f7 = None;\r\n    s.f8 = None;\r\n\r\n    s\r\n}\r\n```\r\n\r\nGives\r\n\r\n```asm\r\n\t.text\r\n\t.file\t\"undefmemset.9474daa7-cgu.0\"\r\n\t.section\t.text._ZN11undefmemset3bad17h0bf7686eb09f8ffcE,\"ax\",@progbits\r\n\t.globl\t_ZN11undefmemset3bad17h0bf7686eb09f8ffcE\r\n\t.p2align\t4, 0x90\r\n\t.type\t_ZN11undefmemset3bad17h0bf7686eb09f8ffcE,@function\r\n_ZN11undefmemset3bad17h0bf7686eb09f8ffcE:\r\n\t.cfi_startproc\r\n\tmovq\t%rdi, %rax\r\n\tmovb\t$0, (%rdi)\r\n\tmovb\t$0, 2(%rdi)\r\n\tmovb\t$0, 4(%rdi)\r\n\tmovb\t$0, 6(%rdi)\r\n\tmovb\t$0, 8(%rdi)\r\n\tmovb\t$0, 10(%rdi)\r\n\tmovb\t$0, 12(%rdi)\r\n\tmovb\t$0, 14(%rdi)\r\n\tretq\r\n.Lfunc_end0:\r\n\t.size\t_ZN11undefmemset3bad17h0bf7686eb09f8ffcE, .Lfunc_end0-_ZN11undefmemset3bad17h0bf7686eb09f8ffcE\r\n\t.cfi_endproc\r\n\r\n\t.section\t.text._ZN11undefmemset4good17hc418ddbabe9f4c4aE,\"ax\",@progbits\r\n\t.globl\t_ZN11undefmemset4good17hc418ddbabe9f4c4aE\r\n\t.p2align\t4, 0x90\r\n\t.type\t_ZN11undefmemset4good17hc418ddbabe9f4c4aE,@function\r\n_ZN11undefmemset4good17hc418ddbabe9f4c4aE:\r\n\t.cfi_startproc\r\n\tmovq\t%rdi, %rax\r\n\txorps\t%xmm0, %xmm0\r\n\tmovups\t%xmm0, (%rdi)\r\n\tretq\r\n.Lfunc_end1:\r\n\t.size\t_ZN11undefmemset4good17hc418ddbabe9f4c4aE, .Lfunc_end1-_ZN11undefmemset4good17hc418ddbabe9f4c4aE\r\n\t.cfi_endproc\r\n\r\n\t.section\t\".note.GNU-stack\",\"\",@progbits\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104290/timeline", "performed_via_github_app": null, "state_reason": null}