{"url": "https://api.github.com/repos/rust-lang/rust/issues/50266", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50266/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50266/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50266/events", "html_url": "https://github.com/rust-lang/rust/issues/50266", "id": 318247234, "node_id": "MDU6SXNzdWUzMTgyNDcyMzQ=", "number": 50266, "title": "Make BTreeMap::new() not allocate", "user": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-04-27T01:21:11Z", "updated_at": "2018-05-12T12:03:38Z", "closed_at": "2018-05-12T12:03:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, `BTreeMap::new()` allocates an empty root node. This is in spite of all of our other collections managing to avoid this. In #50240 it was demonstrated that there's massive wins to be had by avoiding allocating here. In the past we avoided implementing this because it simplified the code of BTreeMap a lot (which is already pretty gnarly code).\r\n\r\nI see two ways to do this\r\n\r\n* Wrap everything in Options, adding extra branches on accesses to iterators and the map itself.\r\n* Do lots of clever shit, introducing minimal branches on access.\r\n\r\nSome examples of clever shit:\r\n\r\n* The core Range iterator primitive can always always be initialized with two `NonZero::dangling()` pointers and `len = 0`. The existing branches will then do the correct thing. (this is how empty slices generally work)\r\n\r\n* By changing the layout of LeafNode to have the metadata *first*, we can statically allocate a `LeafNode<u64, u64>` (say) for all empty instances of BTreeMap to share. get/remove queries will then naturally work correctly without extra branches. See [thin-vec](https://github.com/Gankro/thin-vec/blob/master/src/lib.rs#L251-L261) for an example of doing this. An extra branch will probably need to be added to `insert` to check if we're pointing at the static singleton; not a big deal.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50266/timeline", "performed_via_github_app": null, "state_reason": "completed"}