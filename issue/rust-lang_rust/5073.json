{"url": "https://api.github.com/repos/rust-lang/rust/issues/5073", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/5073/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/5073/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/5073/events", "html_url": "https://github.com/rust-lang/rust/issues/5073", "id": 11242825, "node_id": "MDU6SXNzdWUxMTI0MjgyNQ==", "number": 5073, "title": "Begin testing emitted LLVM IR", "user": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 120005, "node_id": "MDU6TGFiZWwxMjAwMDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-testsuite", "name": "A-testsuite", "color": "f7e101", "default": false, "description": "Area: The testsuite used to check the correctness of rustc"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-02-21T14:40:13Z", "updated_at": "2015-10-05T11:00:10Z", "closed_at": "2015-10-05T11:00:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\n<@pcwalton> strcat: it would be nice to have if foo == true just compile\n            into mov eax,foo; test eax,eax; jne ... instead of mov\n            eax,whatever; cmp eax,1; jne ...\n<@pcwalton> err\n<@pcwalton> mov eax,whatever; cmp al,1; jne ...\n< strcat> yeah\n< strcat> pcwalton: once the range asserts are there, LLVM will compile\n          trunc to i1 and then a br to that\n< strcat> that's what clang does\n< strcat> if you don't put range asserts, it uses an AND for the trunc\n<@pcwalton> eww\n<@pcwalton> and al,feh I guess?\n<@pcwalton> err\n<@pcwalton> what am I on\n<@pcwalton> and al,1\n< strcat> pcwalton: yeah\n< strcat> that's one of the things the range asserts will be good for\n<@pcwalton> does and set the condition codes?\n< strcat> pcwalton: not sure\n< strcat> pcwalton: I'm just trying to copy clang as closely as possible\n          and not worry about the details :P\n< strcat> pcwalton: the LLVM optimizations seem to be very specialized\n          for what clang outputs\n<@pcwalton> not surprising\n< strcat> pcwalton: because even with the range assert, I don't think it\n          will avoid the cmp unless you do the trunc and br yourself\n< strcat> they do a specific optimization for trunc when ranges are known\n          (for clang)\n```\n\nIt would be nice to begin testing the emitted LLVM IR to ensure that an expected optimization isn't suddenly deactivated under our noses, especially if LLVM bases its optimizations off of Clang-specific patterns.\n", "closed_by": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/5073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/5073/timeline", "performed_via_github_app": null, "state_reason": "completed"}