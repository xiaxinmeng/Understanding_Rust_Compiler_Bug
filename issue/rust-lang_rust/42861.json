{"url": "https://api.github.com/repos/rust-lang/rust/issues/42861", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42861/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42861/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42861/events", "html_url": "https://github.com/rust-lang/rust/issues/42861", "id": 238171219, "node_id": "MDU6SXNzdWUyMzgxNzEyMTk=", "number": 42861, "title": "ability to opt out of auto-rolling of reflexive From", "user": {"login": "dobkeratops", "id": 1120754, "node_id": "MDQ6VXNlcjExMjA3NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1120754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dobkeratops", "html_url": "https://github.com/dobkeratops", "followers_url": "https://api.github.com/users/dobkeratops/followers", "following_url": "https://api.github.com/users/dobkeratops/following{/other_user}", "gists_url": "https://api.github.com/users/dobkeratops/gists{/gist_id}", "starred_url": "https://api.github.com/users/dobkeratops/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dobkeratops/subscriptions", "organizations_url": "https://api.github.com/users/dobkeratops/orgs", "repos_url": "https://api.github.com/users/dobkeratops/repos", "events_url": "https://api.github.com/users/dobkeratops/events{/privacy}", "received_events_url": "https://api.github.com/users/dobkeratops/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-06-23T15:10:17Z", "updated_at": "2017-06-29T03:54:39Z", "closed_at": "2017-06-23T15:32:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "In order to facilitate impl'ing  ```From``` for collections/wrapped types, would it be possible to amend the library (within the existing language features) to allow the user to *opt out* of 'core's' generation of reflexive ```T:From<T>```\r\nthis was my scenario,\r\nhttps://www.reddit.com/r/rust/comments/6ieagx/from_generic_impl_conflict_vector_maths/\r\n\r\nTo summarise ```impl From<Vec3<B>> for Vec3<A> where A:From<B>``` seemed to clash with core's reflexive impl of 'From' (i.e. From<Vec3<A>> for Vec2<A>\r\n\r\nmy workaround was to manually impl for specific types but this is messy,\r\n\r\nDo the \"negative trait bounds\" offer a solution? - e.g. could there be a ```NotReflexiveFrom``` helper-trait which when ```impl```d for a type (in my case, ```Vec3<T>```) would suppress the library reflexive-from.\r\n\r\nThe reverse - an *opt-in* sounds easier r.e. the existing language features, but that would be a breaking library change, right?\r\n\r\nI think the clearest solution to my situation would be a *not equal* type-bound e.g. ```where A!=B``` ? \r\n```impl From<Vec3<B>> for Vec3<A> where A:From<B>, A!=B ```\r\nI tried to hack a manual ```A:IsNot<B>``` but once again I seemed to need to roll this for specific types so I was back to square one.\r\n\r\nhttps://users.rust-lang.org/t/not-equal-type-bound-e-g-where-t-y/11442\r\n\r\nCould an automatic ```A:IsNot<B>``` be done through a \"procedural macro\" ?\r\n\r\nFor reference, equivalent C++ situation - the behaviour I'm trying to get close to in Rust\r\nHere is is possible using 'conversion operators' or constructors, because a type can respond to casting to itself automatically already, and you can go ahead and write a templated conversion.\r\n\r\n    template<typename T>\r\n    struct Vec3 {\r\n    \tT x; T y; T z;\r\n    \tVec3(){}\r\n        // component wise conversion between vectors of different types\r\n    \ttemplate<typename B>\r\n    \texplicit Vec3(const Vec3<B>& src) :x(src.x),y(src.y),z(src.z){} \r\n    };\r\n\r\n    int main(int argc, const char** argv){\r\n       // try instantiating a vector, assignment, casting\r\n    \tVec3<int> v0; Vec3<short> v1; auto v2 = (Vec3<short>) v1;  auto v3= (Vec3<int>) v1;\r\n\r\nI am ok with the fact rust conversions are 'explicit' by default ('write .into()' giving a clear point where conversions occur), but I still want to be able to *request* conversions between anything that makes sense (in this example, many possible formats of vector data)", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42861/timeline", "performed_via_github_app": null, "state_reason": "completed"}