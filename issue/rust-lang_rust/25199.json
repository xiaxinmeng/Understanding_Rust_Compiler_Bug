{"url": "https://api.github.com/repos/rust-lang/rust/issues/25199", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/25199/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/25199/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/25199/events", "html_url": "https://github.com/rust-lang/rust/issues/25199", "id": 74170753, "node_id": "MDU6SXNzdWU3NDE3MDc1Mw==", "number": 25199, "title": "dropck combined with type erasure allows use after free ", "user": {"login": "rkjnsn", "id": 7364197, "node_id": "MDQ6VXNlcjczNjQxOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7364197?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkjnsn", "html_url": "https://github.com/rkjnsn", "followers_url": "https://api.github.com/users/rkjnsn/followers", "following_url": "https://api.github.com/users/rkjnsn/following{/other_user}", "gists_url": "https://api.github.com/users/rkjnsn/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkjnsn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkjnsn/subscriptions", "organizations_url": "https://api.github.com/users/rkjnsn/orgs", "repos_url": "https://api.github.com/users/rkjnsn/repos", "events_url": "https://api.github.com/users/rkjnsn/events{/privacy}", "received_events_url": "https://api.github.com/users/rkjnsn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-05-08T00:09:15Z", "updated_at": "2015-05-09T11:10:42Z", "closed_at": "2015-05-09T11:10:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While I was trying attempting (and failing) to implement pythonesque's suggestion of using dropck to ensure that cycles were not visible from the destructors of any of the contained objects (thus allowing cycles and a cycle collector without the possibility of deref ever failing), I came across a situation (explicitly including a type-erased box in the structure) that seemed like it really _should_ cause the compiler to enforce what I wanted it to, and that it was being overly permissive.\n\nI have now created a test case that shows that this can, indeed, be used to obtain incorrect behavior. Specifically, this code...\n\n``` rust\nuse std::cell::RefCell;\n\nstruct VecHolder {\n    v: Vec<u32>,\n}\n\nimpl Drop for VecHolder {\n    fn drop(&mut self) {\n        println!(\"Dropping Vec\");\n    }\n}\n\nstruct Container<'a> {\n    v: VecHolder,\n    d: RefCell<Vec<Box<Drop+'a>>>,\n}\n\nimpl<'a> Container<'a> {\n    fn new() -> Container<'a> {\n        Container{d: RefCell::new(Vec::new()), v: VecHolder{v: vec![42; 100]}}\n    }\n\n    fn store<T: 'a+Drop>(&'a self, val: T) {\n        self.d.borrow_mut().push(Box::new(val));\n    }\n}\n\nstruct Test<'a> {\n    test: &'a Container<'a>,\n}\n\nimpl<'a> Drop for Test<'a> {\n    fn drop(&mut self) {\n        println!(\"Val from Vec: {}\", self.test.v.v[30]);\n    }\n}\n\nfn main() {\n    let container = Container::new();\n    let test = Test{test: &container};\n    container.store(test);\n}\n```\n\nwill reliably output the following:\n\n```\nDropping Vec\nVal from Vec: 42\n```\n\nYou can see it in action [on the playpen](https://play.rust-lang.org/?code=use%20std%3A%3Acell%3A%3ARefCell%3B%0A%0Astruct%20VecHolder%20%7B%0A%09v%3A%20Vec%3Cu32%3E%2C%0A%7D%0A%0Aimpl%20Drop%20for%20VecHolder%20%7B%0A%09fn%20drop%28%26mut%20self%29%20%7B%0A%09%09println!%28%22Dropping%20Vec%22%29%3B%0A%09%7D%0A%7D%0A%0Astruct%20Container%3C'a%3E%20%7B%0A%09v%3A%20VecHolder%2C%0A%09d%3A%20RefCell%3CVec%3CBox%3CDrop%2B'a%3E%3E%3E%2C%0A%7D%0A%0Aimpl%3C'a%3E%20Container%3C'a%3E%20%7B%0A%09fn%20new%28%29%20-%3E%20Container%3C'a%3E%20%7B%0A%09%09Container%7Bd%3A%20RefCell%3A%3Anew%28Vec%3A%3Anew%28%29%29%2C%20v%3A%20VecHolder%7Bv%3A%20vec!%5B42%3B%20100%5D%7D%7D%0A%09%7D%0A%0A%09fn%20store%3CT%3A%20'a%2BDrop%3E%28%26'a%20self%2C%20val%3A%20T%29%20%7B%0A%09%09self.d.borrow_mut%28%29.push%28Box%3A%3Anew%28val%29%29%3B%0A%09%7D%0A%7D%0A%0Astruct%20Test%3C'a%3E%20%7B%0A%09test%3A%20%26'a%20Container%3C'a%3E%2C%0A%7D%0A%0Aimpl%3C'a%3E%20Drop%20for%20Test%3C'a%3E%20%7B%0A%09fn%20drop%28%26mut%20self%29%20%7B%0A%09%09println!%28%22Val%20from%20Vec%3A%20%7B%7D%22%2C%20self.test.v.v%5B30%5D%29%3B%0A%09%7D%0A%7D%0A%0Afn%20main%28%29%20%7B%0A%09let%20container%20%3D%20Container%3A%3Anew%28%29%3B%0A%09let%20test%20%3D%20Test%7Btest%3A%20%26container%7D%3B%0A%09container.store%28test%29%3B%0A%7D&version=beta).\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/25199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/25199/timeline", "performed_via_github_app": null, "state_reason": "completed"}