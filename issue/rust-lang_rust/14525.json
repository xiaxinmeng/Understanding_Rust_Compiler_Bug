{"url": "https://api.github.com/repos/rust-lang/rust/issues/14525", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/14525/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/14525/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/14525/events", "html_url": "https://github.com/rust-lang/rust/issues/14525", "id": 34590436, "node_id": "MDU6SXNzdWUzNDU5MDQzNg==", "number": 14525, "title": "Using Unsafe for type-based internal mutability is unsound", "user": {"login": "zwarich", "id": 440875, "node_id": "MDQ6VXNlcjQ0MDg3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/440875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zwarich", "html_url": "https://github.com/zwarich", "followers_url": "https://api.github.com/users/zwarich/followers", "following_url": "https://api.github.com/users/zwarich/following{/other_user}", "gists_url": "https://api.github.com/users/zwarich/gists{/gist_id}", "starred_url": "https://api.github.com/users/zwarich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zwarich/subscriptions", "organizations_url": "https://api.github.com/users/zwarich/orgs", "repos_url": "https://api.github.com/users/zwarich/repos", "events_url": "https://api.github.com/users/zwarich/events{/privacy}", "received_events_url": "https://api.github.com/users/zwarich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-05-29T20:35:22Z", "updated_at": "2014-06-03T18:29:31Z", "closed_at": "2014-06-03T18:29:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "The forcing of `Unsafe` has just hit Servo, and I've been wondering about the ultimate point of it all. Some people suggested that it was for memory dependence information on fields of a `&T`, so that if you pass a `&T` to a function then you know that the function doesn't modify the parameter. However, this is easily circumvented with casts, while still using `Unsafe`:\n\n``` rust\nuse std::mem::transmute;\nuse std::ty::Unsafe;\n\nstruct A { a: int }\nstruct B { a: Unsafe<int> }\n\nfn modify(x: &A) {\n    let y: &B = unsafe { transmute(x) };\n    unsafe {\n        *y.a.get() = 2;\n    }\n}\n\nfn main() {\n    let x = A { a: 1 };\n    let p = &x;\n    modify(p);\n}\n```\n\nI don't think it's possible to taint types with internal mutability unless you also prohibit transitively immutable types from being cast to non-transitively immutable types.\n", "closed_by": {"login": "zwarich", "id": 440875, "node_id": "MDQ6VXNlcjQ0MDg3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/440875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zwarich", "html_url": "https://github.com/zwarich", "followers_url": "https://api.github.com/users/zwarich/followers", "following_url": "https://api.github.com/users/zwarich/following{/other_user}", "gists_url": "https://api.github.com/users/zwarich/gists{/gist_id}", "starred_url": "https://api.github.com/users/zwarich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zwarich/subscriptions", "organizations_url": "https://api.github.com/users/zwarich/orgs", "repos_url": "https://api.github.com/users/zwarich/repos", "events_url": "https://api.github.com/users/zwarich/events{/privacy}", "received_events_url": "https://api.github.com/users/zwarich/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/14525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/14525/timeline", "performed_via_github_app": null, "state_reason": "completed"}