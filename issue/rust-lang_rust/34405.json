{"url": "https://api.github.com/repos/rust-lang/rust/issues/34405", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/34405/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/34405/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/34405/events", "html_url": "https://github.com/rust-lang/rust/issues/34405", "id": 161569007, "node_id": "MDU6SXNzdWUxNjE1NjkwMDc=", "number": 34405, "title": "Automatic dereferencing doesn't occur on std::ops::* traits", "user": {"login": "Kingsquee", "id": 2876834, "node_id": "MDQ6VXNlcjI4NzY4MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2876834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kingsquee", "html_url": "https://github.com/Kingsquee", "followers_url": "https://api.github.com/users/Kingsquee/followers", "following_url": "https://api.github.com/users/Kingsquee/following{/other_user}", "gists_url": "https://api.github.com/users/Kingsquee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kingsquee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kingsquee/subscriptions", "organizations_url": "https://api.github.com/users/Kingsquee/orgs", "repos_url": "https://api.github.com/users/Kingsquee/repos", "events_url": "https://api.github.com/users/Kingsquee/events{/privacy}", "received_events_url": "https://api.github.com/users/Kingsquee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-06-22T00:21:54Z", "updated_at": "2020-09-15T18:17:48Z", "closed_at": "2020-09-15T18:17:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` rust\nuse std::ops::Add;\n\n#[derive(Copy, Clone)]\nstruct Wrapper(i8);\n\n// Only defining one implementation of Add for Wrapper,\n// with the assumption that automatic dereferencing will handle\n// (&a, b), (a, &b), and (&a, &b)\nimpl Add for Wrapper {\n    type Output = Self;\n    fn add(self, other: Self) -> Self::Output {\n        Wrapper(self.0 + other.0)\n    }\n}\n\n// This will fail, however.\n// <anon>:29:31: 29:35 error: binary operation `+` cannot be applied to type `&Wrapper` [E0369]\n// <anon>:29     println!(\"&a + b: {}\\n\", (refa + b).0);\n/*\nfn std_add_wrappers() {\n    println!(\"Wrapper's std::ops::add\");\n    let a: Wrapper = Wrapper(1);\n    let b: Wrapper = Wrapper(2);\n\n    println!(\"a + b: {}\", (a + b).0);\n\n    let refa = &a;\n\n    println!(\"&a + b: {}\\n\", (refa + b).0);\n}\n*/\n\n// This succeeds, since std::ops::Add's parameters for i8 are explicitly \n// implemented for (a, b), (&a, b), (a, &b), and (&a, &b), \n// according to stdlib docs\n// https://doc.rust-lang.org/core/ops/trait.Add.html\nfn std_add_integers() {\n    println!(\"i8's std::ops::add\");\n    let a: i8 = 1;\n    let b: i8 = 2;\n\n    println!(\"a + b: {}\", a + b);\n\n    let refa = &a;\n\n    println!(\"&a + b: {}\\n\", refa + b);\n}\n\n\n// So lets define our own add functionality, \n// as the good lord who created asm intended\ntrait DIYAdd<RHS=Self> {\n    type Output;\n    fn diy_add(self, other: RHS) -> Self::Output;\n}\n\n// Only one definition is required, and automatic\n// dereferencing handles the rest\nimpl DIYAdd for Wrapper {\n    type Output = Self;\n\n    fn diy_add(self, other: Self) -> Self::Output {\n        Wrapper(self.0 + other.0)\n    }\n}\n\nfn diy_add_wrappers() {\n    println!(\"Wrapper's diy_add\");\n    let a: Wrapper = Wrapper(1);\n    let b: Wrapper = Wrapper(2);\n\n    println!(\"a.diy_add(b): {}\", (a.diy_add(b)).0);\n\n    let refa = &a;\n\n    println!(\"&a.diy_add(b): {}\\n\", (refa.diy_add(b)).0);\n}\n\nfn main() {\n    std_add_integers();\n    //std_add_wrappers();\n    diy_add_wrappers()\n}\n```\n\n[Playground Link](https://is.gd/2l1R2q)\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/34405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/34405/timeline", "performed_via_github_app": null, "state_reason": "completed"}