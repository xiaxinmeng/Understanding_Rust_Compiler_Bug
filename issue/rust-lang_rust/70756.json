{"url": "https://api.github.com/repos/rust-lang/rust/issues/70756", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70756/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70756/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70756/events", "html_url": "https://github.com/rust-lang/rust/issues/70756", "id": 593737212, "node_id": "MDU6SXNzdWU1OTM3MzcyMTI=", "number": 70756, "title": "Multiple associated type-parametrized bounds fail to resolve", "user": {"login": "syntacticsugarglider", "id": 25019299, "node_id": "MDQ6VXNlcjI1MDE5Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/25019299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syntacticsugarglider", "html_url": "https://github.com/syntacticsugarglider", "followers_url": "https://api.github.com/users/syntacticsugarglider/followers", "following_url": "https://api.github.com/users/syntacticsugarglider/following{/other_user}", "gists_url": "https://api.github.com/users/syntacticsugarglider/gists{/gist_id}", "starred_url": "https://api.github.com/users/syntacticsugarglider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syntacticsugarglider/subscriptions", "organizations_url": "https://api.github.com/users/syntacticsugarglider/orgs", "repos_url": "https://api.github.com/users/syntacticsugarglider/repos", "events_url": "https://api.github.com/users/syntacticsugarglider/events{/privacy}", "received_events_url": "https://api.github.com/users/syntacticsugarglider/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1405345617, "node_id": "MDU6TGFiZWwxNDA1MzQ1NjE3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lazy-normalization", "name": "A-lazy-normalization", "color": "f7e101", "default": false, "description": "Area: lazy normalization (tracking issue: #60471)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-04T03:48:16Z", "updated_at": "2020-10-16T14:02:16Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With this source\r\n\r\n```rust\r\nuse core::marker::PhantomData;\r\n\r\npub trait Wrap<T> {\r\n    type Wrapper;\r\n}\r\n\r\nfn fail<\r\n    T,\r\n    C: Trait<<WrapMarker as Wrap<T>>::Wrapper>\r\n        + Wrap<<C as Trait<<WrapMarker as Wrap<T>>::Wrapper>>::Assoc>,\r\n>() {\r\n}\r\n\r\nfn succeed<\r\n    T,\r\n    C: Trait<PhantomData<T>> + Wrap<<C as Trait<<WrapMarker as Wrap<T>>::Wrapper>>::Assoc>,\r\n>() {\r\n}\r\n\r\npub trait Trait<P> {\r\n    type Assoc;\r\n}\r\n\r\npub struct WrapMarker;\r\n\r\nimpl<T> Wrap<T> for WrapMarker {\r\n    type Wrapper = PhantomData<T>;\r\n}\r\n```\r\n\r\nI expect both `fail` and `succeed` to compile. Instead, `fail` fails to compile with \"E0277: the trait bound `C: Trait<std::marker::PhantomData<T>>` is not satisfied\". `rustc` is clearly able to unambiguously resolve the type here, not only just in theory as associated types are singly defined for a given parametrization, but in practice as it is able to clearly specify the constraint to be added, indicating that `<C as Trait<<WrapMarker as Wrap<T>>::Wrapper` is already uniquely resolved. \r\n\r\n[playground reproduction](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=fe6ad4e097de20ae2887ee6caa4ca795)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70756/timeline", "performed_via_github_app": null, "state_reason": null}