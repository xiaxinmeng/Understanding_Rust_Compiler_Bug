{"url": "https://api.github.com/repos/rust-lang/rust/issues/65407", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65407/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65407/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65407/events", "html_url": "https://github.com/rust-lang/rust/issues/65407", "id": 506681050, "node_id": "MDU6SXNzdWU1MDY2ODEwNTA=", "number": 65407, "title": "Replace most of rustc_metadata::schema with something based on queries.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 13242248, "node_id": "MDU6TGFiZWwxMzI0MjI0OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-metadata", "name": "A-metadata", "color": "f7e101", "default": false, "description": "Area: crate metadata"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-14T14:14:15Z", "updated_at": "2019-10-14T14:22:28Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now (cross-crate) \"metadata\" is encoded as an ad-hoc heterogeneous tree, described in [`rustc_metadata::schema`](https://github.com/rust-lang/rust/blob/d28a9c38fe14396e86ae274c7847e20ee0f78ca9/src/librustc_metadata/schema.rs), with `Lazy<T>` acting as indirection (as in \"pointer to `T`\", inside the \"metadata\" blob) and letting the user choose whether to decode of the `T` value.\r\n\r\nThere is also a random-access array (called \"table\" in #59953), which is currently only used for `Entry`.\r\n\r\nThis cross-crate system predates the on-demand/incremental query system, and we have accumulated a lot of data in the `schema` which is similar (but not always identical) to certain queries, and additional code to present that information through queries.\r\n\r\nThe disadvantages I see with the current approach are:\r\n* a lot of `schema`/`encoder`/`decoder` boilerplate for everything\r\n  * most of which isn't documented well, perpetuating the ad-hoc-ness\r\n* somewhat inconsistent organization\r\n  * e.g. `predicates` in `Entry` vs `super_predicates` in `TraitData`\r\n* decoding more than is needed, even if mostly `Lazy` pointers \r\n  * `Entry`'s 15 fields are all decoded to read only 1, most of the time\r\n  * arguably a significant performance issue (although we save some space)\r\n  * #59953 is my attempt at solving this particular aspect\r\n\r\n<hr/>\r\n\r\nIn #59953, the table of `Entry`s is replaced by a table for everything that used to be in an `Entry` field.\r\nFor example, the `predicates_of` query would then perform `predicates[i].decode()` instead of `entries[i].decode().predicates.decode()` (*irrelevant details elided*).\r\n\r\nThis is effectively a trade-off:\r\n* using more space because most of those tables aren't 100% filled\r\n  * @michaelwoerister has some ideas about that in https://github.com/rust-lang/rust/pull/59953#discussion_r331979338\r\n* taking less time because there are less unused details being decoded\r\n  * the query system dictates the granularity here, so matching it helps\r\n  * losing (some) cache locality might limit this win\r\n\r\nHowever, we can go further - #59953 doesn't touch `EntryKind`, which is still a sprawling `enum` with even two levels of `Lazy` indirection in places.\r\n\r\n<hr/>\r\n\r\nUltimately, we could have \"cross-crate metadata\" be one table per query in most cases. This would accentuate the trade-off from #59953 further, but it would also allow simplifying `rustc_metadata` and unifying it further with incremental save&restore.\r\n\r\nOne of the queries that would benefit most from this is `def_kind`, which could be stored as a fully-populated table of bytes, much more compact and cheaper to decode than `EntryKind` today.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65407/timeline", "performed_via_github_app": null, "state_reason": null}