{"url": "https://api.github.com/repos/rust-lang/rust/issues/86800", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86800/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86800/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86800/events", "html_url": "https://github.com/rust-lang/rust/issues/86800", "id": 935563000, "node_id": "MDU6SXNzdWU5MzU1NjMwMDA=", "number": 86800, "title": "thread 'rustc' panicked at 'assertion failed: !erased_self_ty.has_escaping_bound_vars()'", "user": {"login": "fourbytes", "id": 4339597, "node_id": "MDQ6VXNlcjQzMzk1OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4339597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fourbytes", "html_url": "https://github.com/fourbytes", "followers_url": "https://api.github.com/users/fourbytes/followers", "following_url": "https://api.github.com/users/fourbytes/following{/other_user}", "gists_url": "https://api.github.com/users/fourbytes/gists{/gist_id}", "starred_url": "https://api.github.com/users/fourbytes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fourbytes/subscriptions", "organizations_url": "https://api.github.com/users/fourbytes/orgs", "repos_url": "https://api.github.com/users/fourbytes/repos", "events_url": "https://api.github.com/users/fourbytes/events{/privacy}", "received_events_url": "https://api.github.com/users/fourbytes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-07-02T08:54:35Z", "updated_at": "2023-03-13T01:33:06Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\n#![feature(min_type_alias_impl_trait)]\r\nuse std::future::Future;\r\n\r\nstruct Connection {\r\n}\r\n\r\ntrait Transaction {\r\n}\r\n\r\nstruct TestTransaction<'conn> {\r\n    conn: &'conn Connection\r\n}\r\n\r\nimpl<'conn> Transaction for TestTransaction<'conn> {\r\n}\r\n\r\nstruct Context {\r\n}\r\n\r\ntype TransactionResult<O> = Result<O, ()>;\r\n\r\ntype TransactionFuture<'__, O> = impl '__ + Future<Output = TransactionResult<O>>;\r\n\r\nfn execute_transaction_fut<'f, F, O>(f: F) -> impl FnOnce(&mut dyn Transaction) -> TransactionFuture<O>\r\nwhere\r\n    F: FnOnce(&mut dyn Transaction) -> TransactionFuture<O> + 'f\r\n{\r\n    f\r\n}\r\n\r\nimpl Context {\r\n    async fn do_transaction<O>(\r\n        &self, f: impl FnOnce(&mut dyn Transaction) -> TransactionFuture<O>\r\n    ) -> TransactionResult<O>\r\n    {\r\n        let mut conn = Connection {};\r\n        let mut transaction = TestTransaction { conn: &mut conn };\r\n        f(&mut transaction).await\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.55.0-nightly (a435b49e8 2021-06-28)\r\nbinary: rustc\r\ncommit-hash: a435b49e86d16e98dcc6595dd471f95e823f41aa\r\ncommit-date: 2021-06-28\r\nhost: x86_64-apple-darwin\r\nrelease: 1.55.0-nightly\r\nLLVM version: 12.0.1\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'assertion failed: !erased_self_ty.has_escaping_bound_vars()', compiler/rustc_trait_selection/src/opaque_types.rs:1182:5\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.55.0-nightly (a435b49e8 2021-06-28) running on x86_64-apple-darwin\r\n\r\nnote: compiler flags: -C opt-level=3 -C embed-bitcode=no --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [typeck] type-checking `ice1::execute_transaction_fut`\r\n#1 [type_of] computing type of `ice1::TransactionFuture::{opaque#0}`\r\nend of query stack\r\nerror: could not compile `rust-playground`\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\n   Compiling rust-playground v0.1.0 (/Users/fourbytes/Projects/rust-playground)\r\nthread 'rustc' panicked at 'assertion failed: !erased_self_ty.has_escaping_bound_vars()', compiler/rustc_trait_selection/src/opaque_types.rs:1182:5\r\nstack backtrace:\r\n   0: _rust_begin_unwind\r\n   1: core::panicking::panic_fmt\r\n   2: core::panicking::panic\r\n   3: rustc_trait_selection::opaque_types::Instantiator::fold_opaque_ty\r\n   4: <rustc_middle::ty::fold::BottomUpFolder<F,G,H> as rustc_middle::ty::fold::TypeFolder>::fold_ty\r\n   5: rustc_middle::ty::fold::TypeFoldable::fold_with\r\n   6: rustc_trait_selection::opaque_types::Instantiator::fold_opaque_ty\r\n   7: <rustc_middle::ty::fold::BottomUpFolder<F,G,H> as rustc_middle::ty::fold::TypeFolder>::fold_ty\r\n   8: rustc_typeck::check::fn_ctxt::_impl::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::instantiate_opaque_types_from_value\r\n   9: rustc_typeck::check::check::check_fn\r\n  10: rustc_infer::infer::InferCtxtBuilder::enter\r\n  11: rustc_typeck::check::typeck\r\n  12: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  13: rustc_data_structures::stack::ensure_sufficient_stack\r\n  14: rustc_query_system::query::plumbing::force_query_with_job\r\n  15: rustc_query_system::query::plumbing::get_query_impl\r\n  16: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::typeck\r\n  17: rustc_typeck::collect::type_of::find_opaque_ty_constraints::ConstraintLocator::check\r\n  18: rustc_hir::intravisit::walk_item\r\n  19: rustc_typeck::collect::type_of::type_of\r\n  20: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  21: rustc_data_structures::stack::ensure_sufficient_stack\r\n  22: rustc_query_system::query::plumbing::force_query_with_job\r\n  23: rustc_query_system::query::plumbing::get_query_impl\r\n  24: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::type_of\r\n  25: rustc_typeck::check::check::check_item_type\r\n  26: rustc_middle::hir::map::Map::visit_item_likes_in_module\r\n  27: rustc_typeck::check::check::check_mod_item_types\r\n  28: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  29: rustc_data_structures::stack::ensure_sufficient_stack\r\n  30: rustc_query_system::query::plumbing::force_query_with_job\r\n  31: rustc_query_system::query::plumbing::get_query_impl\r\n  32: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::check_mod_item_types\r\n  33: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  34: rustc_typeck::check_crate\r\n  35: rustc_interface::passes::analysis\r\n  36: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  37: rustc_data_structures::stack::ensure_sufficient_stack\r\n  38: rustc_query_system::query::plumbing::force_query_with_job\r\n  39: rustc_query_system::query::plumbing::get_query_impl\r\n  40: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\r\n  41: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  42: rustc_span::with_source_map\r\n  43: rustc_interface::interface::create_compiler_and_run\r\n  44: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.55.0-nightly (a435b49e8 2021-06-28) running on x86_64-apple-darwin\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C split-debuginfo=unpacked -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [typeck] type-checking `ice1::execute_transaction_fut`\r\n#1 [type_of] computing type of `ice1::TransactionFuture::{opaque#0}`\r\n#2 [check_mod_item_types] checking item types in module `ice1`\r\n#3 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror: could not compile `rust-playground`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86800/timeline", "performed_via_github_app": null, "state_reason": "reopened"}