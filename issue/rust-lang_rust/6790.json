{"url": "https://api.github.com/repos/rust-lang/rust/issues/6790", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/6790/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/6790/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/6790/events", "html_url": "https://github.com/rust-lang/rust/issues/6790", "id": 14862713, "node_id": "MDU6SXNzdWUxNDg2MjcxMw==", "number": 6790, "title": "Containing transmutes on slices and other representations.", "user": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-05-28T21:33:53Z", "updated_at": "2014-06-05T17:37:52Z", "closed_at": "2014-06-05T17:37:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now a few places in the code base make assumptions about the internal representations of things like `&[T]` or other types that stand for internal representation details, mostly to implement low-level operations in unsafe blocks. For example you could see code like this:\n\n```\npub fn my_slice<'r,T>(v: &'r [T], start: uint, end: uint) -> &'r [T] {\n    assert!(start <= end);\n    assert!(end <= v.len());\n    unsafe {\n        let mut (buf, len): (*T, uint) = transmute(v);\n        buf += start;\n        len = end - start;\n        transmute(buf, len)\n    }\n}\n```\n\nThis is fine as long as the internal representation of those things doesn't change, but will wreak random havoc if something changes (for example as result of the implementation of the Dynamic types proposal, or a change to the way `&str` handles its hidden trailing byte)\n\nTo improve on this situation, I think the following needs to be done for all build-in 'special' types like `&[T]`, `&str`, `char` etc:\n- Have a central place in `std::unstable` for the underlying representation. It would contain things like `struct SliceRep<T> { buf: *T, len:uint }` or `struct CharRep { v: uint }`. \n- Have functions to safely cast a type to its repr, to unsafely cast a repr to its type, and if possible functions to safely cast a repr to it's type provided all necessary invariants are unviolated.\n- Implement a lint warning for calls of `transmute`-like functions from/to those types. All low level work and casts to representations would then have to happen through the functions in the corresponding modules, where the warnings get explicitly disabled with an attribute.\n\nThe canonical warn-free way to write `my_slice` would then become something like this:\n\n```\npub fn my_slice<'r,T>(v: &'r [T], start: uint, end: uint) -> &'r [T] {\n    assert!(start <= end);\n    assert!(end <= v.len());\n    let mut repr = v.to_internal_repr();\n    unsafe {\n        repr.buf += start;\n        repr.len = end - start;\n        repr.to_type()\n    }\n}\n```\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/6790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/6790/timeline", "performed_via_github_app": null, "state_reason": "completed"}