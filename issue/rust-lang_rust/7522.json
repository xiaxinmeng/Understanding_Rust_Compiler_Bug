{"url": "https://api.github.com/repos/rust-lang/rust/issues/7522", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/7522/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/7522/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/7522/events", "html_url": "https://github.com/rust-lang/rust/issues/7522", "id": 16199624, "node_id": "MDU6SXNzdWUxNjE5OTYyNA==", "number": 7522, "title": "extra::sync has racy functions", "user": {"login": "mstewartgallus", "id": 4070335, "node_id": "MDQ6VXNlcjQwNzAzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4070335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstewartgallus", "html_url": "https://github.com/mstewartgallus", "followers_url": "https://api.github.com/users/mstewartgallus/followers", "following_url": "https://api.github.com/users/mstewartgallus/following{/other_user}", "gists_url": "https://api.github.com/users/mstewartgallus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstewartgallus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstewartgallus/subscriptions", "organizations_url": "https://api.github.com/users/mstewartgallus/orgs", "repos_url": "https://api.github.com/users/mstewartgallus/repos", "events_url": "https://api.github.com/users/mstewartgallus/events{/privacy}", "received_events_url": "https://api.github.com/users/mstewartgallus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-07-01T05:09:24Z", "updated_at": "2013-07-01T21:22:13Z", "closed_at": "2013-07-01T21:21:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following function in extra::sync. There is a race condition where after the peek another thread can `recv` from the `head` port. This race condition looks like it would cause an accident an extremely small number of times because the `peek`, and the `recv` are so close together but when the action does occur it will cause the really bad, and unexpected (to the user of `Waitqueue`) effect of the `signal` method to block on `head`!\n\n```\nfn signal_waitqueue(q: &Waitqueue) -> bool {\n    // The peek is mandatory to make sure recv doesn't block.\n    if q.head.peek() {\n        // Pop and send a wakeup signal. If the waiter was killed, its port\n        // will have closed. Keep trying until we get a live task.\n        if comm::try_send_one(q.head.recv(), ()) {\n            true\n        } else {\n            signal_waitqueue(q)\n        }\n    } else {\n        false\n    }\n}\n```\n", "closed_by": {"login": "mstewartgallus", "id": 4070335, "node_id": "MDQ6VXNlcjQwNzAzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4070335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstewartgallus", "html_url": "https://github.com/mstewartgallus", "followers_url": "https://api.github.com/users/mstewartgallus/followers", "following_url": "https://api.github.com/users/mstewartgallus/following{/other_user}", "gists_url": "https://api.github.com/users/mstewartgallus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstewartgallus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstewartgallus/subscriptions", "organizations_url": "https://api.github.com/users/mstewartgallus/orgs", "repos_url": "https://api.github.com/users/mstewartgallus/repos", "events_url": "https://api.github.com/users/mstewartgallus/events{/privacy}", "received_events_url": "https://api.github.com/users/mstewartgallus/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/7522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/7522/timeline", "performed_via_github_app": null, "state_reason": "completed"}