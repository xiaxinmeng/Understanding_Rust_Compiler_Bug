{"url": "https://api.github.com/repos/rust-lang/rust/issues/91029", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91029/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91029/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91029/events", "html_url": "https://github.com/rust-lang/rust/issues/91029", "id": 1057996961, "node_id": "I_kwDOAAsO6M4_D8Ch", "number": 91029, "title": "Safe function MIR reads discriminant of moved-out local", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2021-11-19T00:23:51Z", "updated_at": "2023-01-31T16:07:45Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "https://github.com/rust-lang/rust/pull/90895 caused the Miri test suite to fail, and further investigation showed that this is due to strange MIR being generated for `Option::map`: when I dump the MIR for [this code](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=59e6616cbc91233838a0b3b644ec953b) and look at the pre-const-prop code, it looks like:\r\n```\r\nfn <impl at map.rs:11:1: 18:2>::map(_1: Option<T>, _2: F) -> Option<U> {\r\n    debug self => _1;                    // in scope 0 at map.rs:12:38: 12:42\r\n    debug f => _2;                       // in scope 0 at map.rs:12:44: 12:45\r\n    let mut _0: Option<U>;               // return place in scope 0 at map.rs:12:53: 12:62\r\n    let mut _3: isize;                   // in scope 0 at map.rs:14:13: 14:21\r\n    let _4: T;                           // in scope 0 at map.rs:14:19: 14:20\r\n    let mut _5: U;                       // in scope 0 at map.rs:14:31: 14:35\r\n    let mut _6: F;                       // in scope 0 at map.rs:14:31: 14:32\r\n    let mut _7: (T,);                    // in scope 0 at map.rs:14:31: 14:35\r\n    let mut _8: T;                       // in scope 0 at map.rs:14:33: 14:34\r\n    let mut _9: bool;                    // in scope 0 at map.rs:17:5: 17:6\r\n    let mut _10: bool;                   // in scope 0 at map.rs:17:5: 17:6\r\n    let mut _11: isize;                  // in scope 0 at map.rs:17:5: 17:6\r\n    let mut _12: isize;                  // in scope 0 at map.rs:17:5: 17:6\r\n    let mut _13: isize;                  // in scope 0 at map.rs:17:5: 17:6\r\n    scope 1 {\r\n        debug x => _4;                   // in scope 1 at map.rs:14:19: 14:20\r\n    }\r\n\r\n    bb0: {\r\n        _10 = const false;               // scope 0 at map.rs:13:15: 13:19\r\n        _9 = const false;                // scope 0 at map.rs:13:15: 13:19\r\n        _10 = const true;                // scope 0 at map.rs:13:15: 13:19\r\n        _9 = const true;                 // scope 0 at map.rs:13:15: 13:19\r\n        _3 = discriminant(_1);           // scope 0 at map.rs:13:15: 13:19\r\n        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at map.rs:13:9: 13:19\r\n    }\r\n\r\n    bb1: {\r\n        discriminant(_0) = 0;            // scope 0 at map.rs:15:22: 15:27\r\n        goto -> bb7;                     // scope 0 at map.rs:15:22: 15:27\r\n    }\r\n\r\n    bb2: {\r\n        unreachable;                     // scope 0 at map.rs:13:15: 13:19\r\n    }\r\n\r\n    bb3: {\r\n        _4 = move ((_1 as Somex).0: T);  // scope 0 at map.rs:14:19: 14:20\r\n        _9 = const false;                // scope 1 at map.rs:14:31: 14:32\r\n        _6 = move _2;                    // scope 1 at map.rs:14:31: 14:32\r\n        _8 = move _4;                    // scope 1 at map.rs:14:33: 14:34\r\n        (_7.0: T) = move _8;             // scope 1 at map.rs:14:31: 14:35\r\n        _5 = <F as FnOnce<(T,)>>::call_once(move _6, move _7) -> [return: bb4, unwind: bb8]; // scope 1 at map.rs:14:31: 14:35\r\n                                         // mir::Constant\r\n                                         // + span: map.rs:14:31: 14:32\r\n                                         // + literal: Const { ty: extern \"rust-call\" fn(F, (T,)) -> <F as std::ops::FnOnce<(T,)>>::Output {<F as std::ops::FnOnce<(T,)>>::call_once}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb4: {\r\n        ((_0 as Somex).0: U) = move _5;  // scope 1 at map.rs:14:25: 14:36\r\n        discriminant(_0) = 1;            // scope 1 at map.rs:14:25: 14:36\r\n        goto -> bb7;                     // scope 0 at map.rs:17:5: 17:6\r\n    }\r\n\r\n    bb5: {\r\n        _11 = discriminant(_1);          // scope 0 at map.rs:17:5: 17:6\r\n        return;                          // scope 0 at map.rs:17:6: 17:6\r\n    }\r\n\r\n    bb6: {\r\n        drop(_2) -> [return: bb5, unwind: bb8]; // scope 0 at map.rs:17:5: 17:6\r\n    }\r\n\r\n    bb7: {\r\n        switchInt(_9) -> [false: bb5, otherwise: bb6]; // scope 0 at map.rs:17:5: 17:6\r\n    }\r\n\r\n    bb8 (cleanup): {\r\n        _13 = discriminant(_1);          // scope 0 at map.rs:17:5: 17:6\r\n        resume;                          // scope 0 at map.rs:12:5: 17:6\r\n    }\r\n}\r\n```\r\nThe strangeness is in bb5: this is where we end up *after* the closure returns, but it reads the discriminant of `_1` which we have already moved out of at this point! With Miri now checking validity when the discriminant is read, it complains (in the linked-list testcase) that there is a dangling `Box` here (I guess the closure deallocated that `Box`). There are also proposals that would make a move de-initialize the memory it is moving from, which would certainly make looking at its discriminant again UB.\r\n\r\nI am not quite sure where this comes from, but it does seem in conflict with the idea that only valid values can have their discriminant read. Cc https://github.com/rust-lang/rust/pull/89764 @wesleywiser ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91029/timeline", "performed_via_github_app": null, "state_reason": null}