{"url": "https://api.github.com/repos/rust-lang/rust/issues/85131", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85131/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85131/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85131/events", "html_url": "https://github.com/rust-lang/rust/issues/85131", "id": 883146967, "node_id": "MDU6SXNzdWU4ODMxNDY5Njc=", "number": 85131, "title": "Misspelling a macro/function name causes a cascade of unrelated errors", "user": {"login": "Frederik-Baetens", "id": 18269095, "node_id": "MDQ6VXNlcjE4MjY5MDk1", "avatar_url": "https://avatars.githubusercontent.com/u/18269095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Frederik-Baetens", "html_url": "https://github.com/Frederik-Baetens", "followers_url": "https://api.github.com/users/Frederik-Baetens/followers", "following_url": "https://api.github.com/users/Frederik-Baetens/following{/other_user}", "gists_url": "https://api.github.com/users/Frederik-Baetens/gists{/gist_id}", "starred_url": "https://api.github.com/users/Frederik-Baetens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Frederik-Baetens/subscriptions", "organizations_url": "https://api.github.com/users/Frederik-Baetens/orgs", "repos_url": "https://api.github.com/users/Frederik-Baetens/repos", "events_url": "https://api.github.com/users/Frederik-Baetens/events{/privacy}", "received_events_url": "https://api.github.com/users/Frederik-Baetens/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-05-10T01:43:48Z", "updated_at": "2022-02-15T20:17:42Z", "closed_at": "2022-02-15T20:14:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the following code:\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0299184600f08daea9aa44c52348717f\r\n\r\n```rust\r\nuse futures::stream::{self, StreamExt};\r\n\r\n#[tokio::main]\r\nasync fn main() {\r\n    let key1: String = \"/helloa\".to_string();\r\n\r\n    dbg!(&key1);\r\n\r\n    let futlist = stream::iter(0..10);\r\n    let _stringvec: Vec<String> = futlist.map(|_| {\r\n        async {\r\n            key1.clone()\r\n        }\r\n    }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n    printn!(\"hi\");\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror: cannot find macro `printn` in this scope\r\n  --> src/main.rs:15:5\r\n   |\r\n15 |       printn!(\"hi\");\r\n   |       ^^^^^^ help: a macro with a similar name exists: `print`\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:9:9\r\n   |\r\n9  |     let futlist = stream::iter(0..10);\r\n   |         ^^^^^^^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(|_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone()\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |     let _stringvec: Vec<String> = futlist.map(|_| {\r\n   |                                   ^^^^^^^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(|_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone()\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:10:47\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(|_| {\r\n   |  _______________________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone()\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |_____^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(|_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone()\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(|_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone()\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |______^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(|_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone()\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(|_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone()\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |___________________________^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(|_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone()\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(|_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone()\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |____________________________________________________^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(|_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone()\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror[E0698]: type inside `async` block must be known in this context\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(|_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone()\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^ cannot infer type for type `{integer}`\r\n   |\r\nnote: the type is part of the `async` block because of this `await`\r\n  --> src/main.rs:10:35\r\n   |\r\n10 |       let _stringvec: Vec<String> = futlist.map(|_| {\r\n   |  ___________________________________^\r\n11 | |         async {\r\n12 | |             key1.clone()\r\n13 | |         }\r\n14 | |     }).buffer_unordered(10).collect::<Vec<String>>().await;\r\n   | |__________________________________________________________^\r\n\r\nerror: aborting due to 8 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0698`.\r\nerror: could not compile `playground`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\nOnly the first error should be shown\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror: cannot find macro `printn` in this scope\r\n  --> src/main.rs:15:5\r\n   |\r\n15 |       printn!(\"hi\");\r\n   |       ^^^^^^ help: a macro with a similar name exists: `print`\r\n```", "closed_by": {"login": "Frederik-Baetens", "id": 18269095, "node_id": "MDQ6VXNlcjE4MjY5MDk1", "avatar_url": "https://avatars.githubusercontent.com/u/18269095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Frederik-Baetens", "html_url": "https://github.com/Frederik-Baetens", "followers_url": "https://api.github.com/users/Frederik-Baetens/followers", "following_url": "https://api.github.com/users/Frederik-Baetens/following{/other_user}", "gists_url": "https://api.github.com/users/Frederik-Baetens/gists{/gist_id}", "starred_url": "https://api.github.com/users/Frederik-Baetens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Frederik-Baetens/subscriptions", "organizations_url": "https://api.github.com/users/Frederik-Baetens/orgs", "repos_url": "https://api.github.com/users/Frederik-Baetens/repos", "events_url": "https://api.github.com/users/Frederik-Baetens/events{/privacy}", "received_events_url": "https://api.github.com/users/Frederik-Baetens/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85131/timeline", "performed_via_github_app": null, "state_reason": "completed"}