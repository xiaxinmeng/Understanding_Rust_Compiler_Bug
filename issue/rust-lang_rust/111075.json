{"url": "https://api.github.com/repos/rust-lang/rust/issues/111075", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111075/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111075/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111075/events", "html_url": "https://github.com/rust-lang/rust/issues/111075", "id": 1691221843, "node_id": "I_kwDOAAsO6M5kzf9T", "number": 111075, "title": "30% performance hit due to changing of the code in the non evaluating match arm ", "user": {"login": "alexshagiev", "id": 24636886, "node_id": "MDQ6VXNlcjI0NjM2ODg2", "avatar_url": "https://avatars.githubusercontent.com/u/24636886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexshagiev", "html_url": "https://github.com/alexshagiev", "followers_url": "https://api.github.com/users/alexshagiev/followers", "following_url": "https://api.github.com/users/alexshagiev/following{/other_user}", "gists_url": "https://api.github.com/users/alexshagiev/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexshagiev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexshagiev/subscriptions", "organizations_url": "https://api.github.com/users/alexshagiev/orgs", "repos_url": "https://api.github.com/users/alexshagiev/repos", "events_url": "https://api.github.com/users/alexshagiev/events{/privacy}", "received_events_url": "https://api.github.com/users/alexshagiev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2352122097, "node_id": "MDU6TGFiZWwyMzUyMTIyMDk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-discussion", "name": "C-discussion", "color": "f5f1fd", "default": false, "description": "Category: Discussion or questions that doesn't represent real issues."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-05-01T19:11:15Z", "updated_at": "2023-05-02T02:27:35Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code: related to #110764 \r\n\r\n```rust\r\n#![feature(test)]\r\nextern crate test;\r\nuse test::Bencher;\r\n\r\nuse std::{self, hint::black_box};\r\n#[derive(Debug)]\r\nstruct Error {\r\n    message: String,\r\n}\r\ntype Result<T> = std::result::Result<T, Error>;\r\n\r\nstruct Deserializer<'a> {\r\n    bytes: &'a [u8],\r\n    idx: usize,\r\n}\r\n\r\nimpl<'a> Deserializer<'a> {\r\n    pub fn deserialize_bytes<const N: usize>(&mut self) -> Result<[u8; N]> {\r\n        match self.bytes.get(self.idx..self.idx + N) {\r\n            Some(v) => {\r\n                self.idx += N;\r\n                Ok(v.try_into().unwrap()) // this shall not panic since slice method succeeded\r\n            }\r\n            None => {\r\n                // ****** WE KNOW THIS ARM IS NEVER MATCHED BUT CHANGING IRRELEVANT HERE AFFECTS BENCHMARKS ******\r\n                let e = Error {\r\n                    message: \"\".to_string(),                            // (A)    test test_playground ... bench:         702 ns/iter (+/- 76)\r\n                    // message: format!(\"{}\", \"a\".repeat(usize::MAX)),  // (B)    test test_playground ... bench:         977 ns/iter (+/- 112)\r\n                };\r\n\r\n                // uncommenting print                                   // (A=on) test test_playground ... bench:       1,347 ns/iter (+/- 58)\r\n                // uncommenting print                                   // (B=on) test test_playground ... bench:         972 ns/iter (+/- 104)\r\n                // println!(\"Does not appear in terminal\");                  \r\n                Err(e)\r\n            }\r\n        }\r\n    }\r\n    pub fn new(bytes: &'a [u8]) -> Self {\r\n        Self { bytes, idx: 0 }\r\n    }\r\n}\r\n\r\nfn workload(buf: &[u8]) -> Result<()> {\r\n    let mut des = black_box(Deserializer::new(buf));\r\n    for _ in 0..400 {\r\n        let r = black_box(des.deserialize_bytes::<2>());\r\n        match r {\r\n            Err(e) => {\r\n                panic!(\"failed {}\", e.message);\r\n            }\r\n            _ => {}\r\n        }\r\n    }\r\n    Ok(())\r\n}\r\n#[bench]\r\nfn test_playground(b: &mut Bencher) {\r\n    let buf: [u8; 1024] = [0; 1024];\r\n    b.iter(|| workload(&buf));\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen:\r\n\r\nI expected to not see performance degradation of the function by making changes to the match arm which is never evaluated.\r\n\r\nInstead, this happened: \r\n\r\nChanging the string of the error message of adding println! command in the march arm that will never be evaluated significantly affects performance of the function, I have achieved identical results on stable version of rust and using criterion instead of std bench, but included result here from the nightly so that it is easy to replicate for someone else.\r\n\r\nI am certain that match arm is not evaluated because  the workload is set to panic but it succeeds nevertheless. \r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.71.0-nightly (8bdcc62cb 2023-04-20)\r\nbinary: rustc\r\ncommit-hash: 8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc\r\ncommit-date: 2023-04-20\r\nhost: x86_64-apple-darwin\r\nrelease: 1.71.0-nightly\r\nLLVM version: 16.0.2\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111075/timeline", "performed_via_github_app": null, "state_reason": null}