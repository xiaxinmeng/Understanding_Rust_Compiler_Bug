{"url": "https://api.github.com/repos/rust-lang/rust/issues/50054", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50054/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50054/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50054/events", "html_url": "https://github.com/rust-lang/rust/issues/50054", "id": 315519264, "node_id": "MDU6SXNzdWUzMTU1MTkyNjQ=", "number": 50054, "title": "Tracking issue for error messages from proc-macro implementations", "user": {"login": "federicomenaquintero", "id": 7617, "node_id": "MDQ6VXNlcjc2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federicomenaquintero", "html_url": "https://github.com/federicomenaquintero", "followers_url": "https://api.github.com/users/federicomenaquintero/followers", "following_url": "https://api.github.com/users/federicomenaquintero/following{/other_user}", "gists_url": "https://api.github.com/users/federicomenaquintero/gists{/gist_id}", "starred_url": "https://api.github.com/users/federicomenaquintero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federicomenaquintero/subscriptions", "organizations_url": "https://api.github.com/users/federicomenaquintero/orgs", "repos_url": "https://api.github.com/users/federicomenaquintero/repos", "events_url": "https://api.github.com/users/federicomenaquintero/events{/privacy}", "received_events_url": "https://api.github.com/users/federicomenaquintero/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 632573348, "node_id": "MDU6TGFiZWw2MzI1NzMzNDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros-2.0", "name": "A-macros-2.0", "color": "f7e101", "default": false, "description": "Area: declarative macros 2.0, https://github.com/rust-lang/rust/issues/39412"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-18T15:01:31Z", "updated_at": "2018-09-12T17:44:58Z", "closed_at": "2018-09-12T17:44:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, presenting good error messages from a proc-macro implementation \u2014 the user calls the macro and has a syntax or semantic error in the contents of the macro invocation \u2014 is very tricky.  I.e.\r\n\r\n```\r\nsome_proc_macro_with_its_own_syntax! {\r\n    ... user's code here with invalid syntax/semantics ...\r\n}\r\n```\r\n\r\nThere are some things that make it hard to present good error messages.  Assuming that one uses `syn` for the parsing stage:\r\n\r\n* The `syn` code flow bubbles `PResult` upstream, but syn's `parse_error()` does not include an error message nor a span - it's just an empty struct.\r\n* To actually present a nice error message, one cannot bubble up a Result to rustc; one must use something like `proc_macro::Diagnostic`:\r\n\r\n```\r\nDiagnostic::spanned(\r\n    problematic_span_here,\r\n    Level::Error,\r\n    \"your code has an error blah blah\"\r\n).emit();\r\n```\r\n\r\n* Also, one must emit *something* in the resulting TokenStream; maybe `(quote! {()}).to_tokens(tokens);`, or the compiler will think that the proc-macro emitted nothing.\r\n* Documentation-wise, it would be nice to say how to use `Diagnostic` to emulate the various suggestions and annotations that rustc presesnts with its normal messages.\r\n* (And how to use the compiletest_rs crate or whatever to *test* those messages...)\r\n* Upon encountering a parse error at the toplevel, Relm consumes all the remaining tokens in the TokenStream so that rustc won't present the user with an extra, meaningless error after the first one.  We should either document that trick, or provide a helper to do it, or some other way of avoiding errors past the first \"real\" one.\r\n\r\nAfter the parsing stage, the proc-macro may encounter semantic errors.  In that case, the implementation needs to return a TokenStream with spans with errors.  Again, the disparity in carrying errors as a Result, versus emitting spans with errors, makes this tricky.  It's also not clear whether it's up to the implementor to aggregate errors in a Vec or something, and then later emit a bunch of error spans for them somehow (instead of just stopping after the first one, for example).\r\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50054/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50054/timeline", "performed_via_github_app": null, "state_reason": "completed"}