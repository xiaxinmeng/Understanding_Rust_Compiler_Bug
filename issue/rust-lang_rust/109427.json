{"url": "https://api.github.com/repos/rust-lang/rust/issues/109427", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109427/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109427/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109427/events", "html_url": "https://github.com/rust-lang/rust/issues/109427", "id": 1633260591, "node_id": "I_kwDOAAsO6M5hWZQv", "number": 109427, "title": "const destructor error when using `while let Some` with generic type", "user": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}, {"id": 1690231436, "node_id": "MDU6TGFiZWwxNjkwMjMxNDM2", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_mut_refs", "name": "F-const_mut_refs", "color": "f9c0cc", "default": false, "description": "`#![feature(const_mut_refs)]`"}, {"id": 1769279746, "node_id": "MDU6TGFiZWwxNzY5Mjc5NzQ2", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_trait_impl", "name": "F-const_trait_impl", "color": "f9c0cc", "default": false, "description": "`#![feature(const_trait_impl)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-03-21T05:32:10Z", "updated_at": "2023-04-05T17:41:39Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code: [play](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=ee1e8544eb63b71fa579fde05a00e925)\r\n\r\n```rust\r\n#![feature(const_mut_refs)]\r\nstruct MyIterator<T>(std::marker::PhantomData<T>);\r\n\r\nimpl<T> MyIterator<T> {\r\n    const fn next(&mut self) -> Option<T> {\r\n        None\r\n    }\r\n}\r\n\r\nconst fn consume<T>(mut x: MyIterator<T>) {\r\n    while let Some(it) = x.next() {\r\n        std::mem::forget(it);\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen: compiles\r\n\r\nInstead, this happened:\r\n\r\n```\r\nerror[E0493]: destructor of `Option<T>` cannot be evaluated at compile-time\r\n  --> src/lib.rs:12:26\r\n   |\r\n12 |     while let Some(it) = x.next() {\r\n   |                          ^^^^^^^^ the destructor for this type cannot be evaluated in constant functions\r\n13 |         std::mem::forget(it);\r\n14 |     }\r\n   |     - value is dropped here\r\n```\r\n\r\n\r\nThis is a limitation in running checks on the MIR for dropping generic types. If we assert that `T: ~const Destruct`, we can get the MIR:\r\n\r\n```rust\r\n// MIR FOR CTFE\r\nfn consume(_1: MyIterator<T>) -> () {\r\n    debug x => _1;                       // in scope 0 at src/lib.rs:11:51: 11:56\r\n    let mut _0: ();                      // return place in scope 0 at src/lib.rs:11:73: 11:73\r\n    let mut _2: ();                      // in scope 0 at src/lib.rs:11:1: 15:2\r\n    let mut _3: std::option::Option<T>;  // in scope 0 at src/lib.rs:12:26: 12:34\r\n    let mut _4: &mut MyIterator<T>;      // in scope 0 at src/lib.rs:12:26: 12:34\r\n    let mut _5: isize;                   // in scope 0 at src/lib.rs:12:15: 12:23\r\n    let _7: ();                          // in scope 0 at src/lib.rs:13:9: 13:29\r\n    let mut _8: T;                       // in scope 0 at src/lib.rs:13:26: 13:28\r\n    let mut _9: !;                       // in scope 0 at src/lib.rs:12:5: 14:6\r\n    let _10: ();                         // in scope 0 at src/lib.rs:12:5: 14:6\r\n    let mut _11: !;                      // in scope 0 at src/lib.rs:12:5: 14:6\r\n    let mut _12: isize;                  // in scope 0 at src/lib.rs:14:5: 14:6\r\n    let mut _13: isize;                  // in scope 0 at src/lib.rs:14:5: 14:6\r\n    let mut _14: isize;                  // in scope 0 at src/lib.rs:14:5: 14:6\r\n    scope 1 {\r\n        debug it => _6;                  // in scope 1 at src/lib.rs:12:20: 12:22\r\n        let _6: T;                       // in scope 1 at src/lib.rs:12:20: 12:22\r\n    }\r\n\r\n    bb0: {\r\n        goto -> bb1;                     // scope 0 at src/lib.rs:12:5: 14:6\r\n    }\r\n\r\n    bb1: {\r\n        StorageLive(_3);                 // scope 1 at src/lib.rs:12:26: 12:34\r\n        StorageLive(_4);                 // scope 1 at src/lib.rs:12:26: 12:34\r\n        _4 = &mut _1;                    // scope 1 at src/lib.rs:12:26: 12:34\r\n        ConstEvalCounter;                // scope 1 at src/lib.rs:12:26: 12:34\r\n        _3 = MyIterator::<T>::next(move _4) -> bb2; // scope 1 at src/lib.rs:12:26: 12:34\r\n                                         // mir::Constant\r\n                                         // + span: src/lib.rs:12:28: 12:32\r\n                                         // + literal: Const { ty: for<'a> fn(&'a mut MyIterator<T>) -> Option<T> {MyIterator::<T>::next}, val: Value(<ZST>) }\r\n    }\r\n\r\n    bb2: {\r\n        StorageDead(_4);                 // scope 1 at src/lib.rs:12:33: 12:34\r\n        _5 = discriminant(_3);           // scope 1 at src/lib.rs:12:15: 12:23\r\n        switchInt(move _5) -> [1: bb3, otherwise: bb5]; // scope 1 at src/lib.rs:12:15: 12:23\r\n    }\r\n\r\n    bb3: {\r\n        StorageLive(_6);                 // scope 1 at src/lib.rs:12:20: 12:22\r\n        _6 = move ((_3 as Some).0: T);   // scope 1 at src/lib.rs:12:20: 12:22\r\n        StorageLive(_7);                 // scope 1 at src/lib.rs:13:9: 13:29\r\n        StorageLive(_8);                 // scope 1 at src/lib.rs:13:26: 13:28\r\n        _8 = move _6;                    // scope 1 at src/lib.rs:13:26: 13:28\r\n        ConstEvalCounter;                // scope 1 at src/lib.rs:13:9: 13:29\r\n        _7 = std::mem::forget::<T>(move _8) -> [return: bb4, unwind: bb8]; // scope 1 at src/lib.rs:13:9: 13:29\r\n                                         // mir::Constant\r\n                                         // + span: src/lib.rs:13:9: 13:25\r\n                                         // + literal: Const { ty: fn(T) {std::mem::forget::<T>}, val: Value(<ZST>) }\r\n    }\r\n\r\n    bb4: {\r\n        StorageDead(_8);                 // scope 1 at src/lib.rs:13:28: 13:29\r\n        StorageDead(_7);                 // scope 1 at src/lib.rs:13:29: 13:30\r\n        _2 = const ();                   // scope 1 at src/lib.rs:12:35: 14:6\r\n        StorageDead(_6);                 // scope 0 at src/lib.rs:14:5: 14:6\r\n        _12 = discriminant(_3);          // scope 0 at src/lib.rs:14:5: 14:6\r\n        StorageDead(_3);                 // scope 0 at src/lib.rs:14:5: 14:6\r\n        ConstEvalCounter;                // scope 0 at src/lib.rs:12:5: 14:6\r\n        goto -> bb1;                     // scope 0 at src/lib.rs:12:5: 14:6\r\n    }\r\n\r\n    bb5: {\r\n        StorageLive(_10);                // scope 0 at src/lib.rs:12:5: 14:6\r\n        _0 = const ();                   // scope 0 at src/lib.rs:12:5: 14:6\r\n        StorageDead(_10);                // scope 0 at src/lib.rs:14:5: 14:6\r\n        drop(_3) -> [return: bb6, unwind: bb7]; // scope 0 at src/lib.rs:14:5: 14:6\r\n    }\r\n\r\n    bb6: {\r\n        StorageDead(_3);                 // scope 0 at src/lib.rs:14:5: 14:6\r\n        return;                          // scope 0 at src/lib.rs:15:2: 15:2\r\n    }\r\n\r\n    bb7 (cleanup): {\r\n        resume;                          // scope 0 at src/lib.rs:11:1: 15:2\r\n    }\r\n\r\n    bb8 (cleanup): {\r\n        _14 = discriminant(_3);          // scope 0 at src/lib.rs:14:5: 14:6\r\n        goto -> bb7;                     // scope 0 at src/lib.rs:14:5: 14:6\r\n    }\r\n}\r\n```\r\n\r\nNotice `drop(_3)` drops the `Option` even though we know it is `None` at that point.\r\n\r\nRelated: #92766\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109427/timeline", "performed_via_github_app": null, "state_reason": null}