{"url": "https://api.github.com/repos/rust-lang/rust/issues/88345", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88345/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88345/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88345/events", "html_url": "https://github.com/rust-lang/rust/issues/88345", "id": 979650718, "node_id": "MDU6SXNzdWU5Nzk2NTA3MTg=", "number": 88345, "title": "Tracking Issue for `#![feature(c_size_t)]` (`std::os::raw::c_size_t`/`std::os::raw::c_ssize_t`)", "user": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2021-08-25T21:57:15Z", "updated_at": "2022-07-17T15:55:01Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(c_size_t)]`.\r\n\r\nThis is a tracking issue for `std::os::raw::{c_size_t, c_ssize_t}`, which are guaranteed to be the same size as the underlying C `size_t` and `ssize_t` types from `stddef.h`.\r\n\r\nCurrently, on all targets, this is equivalent to `usize` and `isize`, however Rust has historically gone somewhat out of its way to avoid promising this. There are some targets with vaguely-planned support where this is not true ([W65](https://en.wikipedia.org/wiki/WDC_65C816), used for SNES homebrew, for example)\r\n\r\nFurther reading here is available:\r\n- https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/.60usize.60.20vs.20.60size_t.60\r\n- https://internals.rust-lang.org/t/abi-discussion-for-w65/15092\r\n- https://github.com/rust-lang/rust-bindgen/issues/1671\r\n\r\nAnd probably more.\r\n\r\n### Public API\r\n\r\n```rust\r\n// std::os::raw\r\n\r\npub type c_size_t = usize;\r\npub type c_ssize_t = isize;\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: #88340\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- Do we want to instead guarantee `usize` and `size_t` are the same? See https://internals.rust-lang.org/t/pre-rfc-usize-is-not-size-t/15369\r\n- Should this instead live in `libcore` somehow, given that probably `libstd` may never support platforms where this is not true. (This may not be true, since I imagine CHERI will support libstd)\r\n- Do we need both the signed and unsigned version, given that `size_t` is more common in function signatures.\r\n- ...\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88345/reactions", "total_count": 2, "+1": 1, "-1": 1, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88345/timeline", "performed_via_github_app": null, "state_reason": null}