{"url": "https://api.github.com/repos/rust-lang/rust/issues/77477", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77477/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77477/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77477/events", "html_url": "https://github.com/rust-lang/rust/issues/77477", "id": 714003952, "node_id": "MDU6SXNzdWU3MTQwMDM5NTI=", "number": 77477, "title": "simd_insert and simd_extract allow garbage data", "user": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 35, "created_at": "2020-10-03T04:46:55Z", "updated_at": "2021-05-15T14:38:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It appears that with simd_insert and simd_extract that I can produce garbage data in a way that is probably due to unsound OOB memory access. These are unsafe functions but the related simd_shuffle functions fail to monomorphize. Miri provokes an ICE. I thiiiink simd_extract and simd_insert might not require const arguments on purpose, but I believe something may need to be patched re: Miri. cc @RalfJung\r\n\r\nI was in the middle of constructing tests for rustc's simd intrinsics. I tried this code: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=dfc24d97ffa77e6fbd4a65c16b713cf9\r\n\r\n```rust\r\n#![allow(non_camel_case_types)]\r\n#![feature(repr_simd, platform_intrinsics)]\r\n\r\n#[repr(simd)]\r\n#[derive(Copy, Clone, Debug)]\r\nstruct f32x4(f32, f32, f32, f32);\r\n\r\nextern \"platform-intrinsic\" {\r\n    pub fn simd_insert<T, E>(x: T, idx: u32, y: E) -> T;\r\n    pub fn simd_extract<T, E>(x: T, idx: u32) -> E;\r\n}\r\n\r\nfn main() {\r\n    let x = f32x4(-1.0, 0.0, f32::INFINITY, f32::NAN);\r\n    unsafe {\r\n    \tlet ins: f32x4 = simd_insert(x, 5, f32::NEG_INFINITY);\r\n    \tlet ext: f32 = simd_extract(x, 9);\r\n        println!(\"{:?}\", x);   // f32x4(-1.0, 0.0, inf, NaN)\r\n        println!(\"{:?}\", ins); // f32x4(0.000000000000000000000000000000000000000000001, 0.0,\r\n                               // 12499248000000000.0, 0.000000000000000000000000000000000000000045915)\r\n        println!(\"{}\", ext);   // 0.000000000000000000000000000000000000000030658\r\n    }\r\n}\r\n```\r\n\r\nI (perhaps overly naively) expected to see this happen: \"failure to monomorphize because blah blah blah\"\r\nInstead, this happened: I got some totally wild garbage data!\r\n\r\n`rustc --version`:\r\n```\r\nrustc 1.48.0-nightly (ef663a8a4 2020-09-30) running on x86_64-unknown-linux-gnu\r\n```\r\n\r\nThe Miri ICE:\r\n```\r\nthread 'rustc' panicked at 'Index `5` must be in bounds of vector type `f32`: `[0, 4)`', /rustc/ef663a8a48ea6b98b43cbfaefd99316b36b16825/compiler/rustc_mir/src/interpret/intrinsics.rs:393:17\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77477/timeline", "performed_via_github_app": null, "state_reason": null}