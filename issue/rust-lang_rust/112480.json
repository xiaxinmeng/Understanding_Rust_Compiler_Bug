{"url": "https://api.github.com/repos/rust-lang/rust/issues/112480", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112480/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112480/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112480/events", "html_url": "https://github.com/rust-lang/rust/issues/112480", "id": 1750655974, "node_id": "I_kwDOAAsO6M5oWOPm", "number": 112480, "title": "MSVC and rustc disagree on minimum stack alignment on x86 Windows", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 266005765, "node_id": "MDU6TGFiZWwyNjYwMDU3NjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows-msvc", "name": "O-windows-msvc", "color": "6e6ec0", "default": false, "description": "Toolchain: MSVC, Operating system: Windows"}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1275174955, "node_id": "MDU6TGFiZWwxMjc1MTc0OTU1", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x32", "name": "O-x32", "color": "6e6ec0", "default": false, "description": "x32 ABI"}, {"id": 1966910227, "node_id": "MDU6TGFiZWwxOTY2OTEwMjI3", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-prioritize", "name": "I-prioritize", "color": "e10c02", "default": false, "description": "Indicates that prioritization has been requested for this issue"}, {"id": 2413861294, "node_id": "MDU6TGFiZWwyNDEzODYxMjk0", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-untriaged", "name": "regression-untriaged", "color": "e4008a", "default": false, "description": "Untriaged performance or correctness regression."}, {"id": 4288196623, "node_id": "LA_kwDOAAsO6M7_mLAP", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-abi", "name": "A-abi", "color": "f7e101", "default": false, "description": "Area: Concerning the \"application binary interface\" between functions."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 27, "created_at": "2023-06-10T00:09:33Z", "updated_at": "2023-06-20T20:03:58Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a regression from #98112. I suppose it's not possible to disable this specific check only while preserving debug assertions...\r\n\r\nThe core problem is that the x86 ABI on Windows doesn't guarantee the stack alignment above 4. See for example https://developercommunity.visualstudio.com/t/vs2017-64-bit-int-alignment-problem/294259\r\n\r\nAnd while some types have an alignment reported of 8 (e.g. UINT64), in practice, the C compiler will happily not align them on the stack.\r\n\r\nSo for example, this C code, compiled by MSVC for 32-bits:\r\n```\r\n#include <cinttypes>\r\nextern void hoge(uint64_t*);\r\nvoid foo() {\r\n    uint64_t a;\r\n    hoge(&a);\r\n}\r\n```\r\nwill produce this assembly:\r\n```\r\n_a$ = -8                                                ; size = 8\r\nvoid foo(void) PROC                                        ; foo\r\n        push    ebp\r\n        mov     ebp, esp\r\n        sub     esp, 8\r\n        lea     eax, DWORD PTR _a$[ebp]\r\n        push    eax\r\n        call    void hoge(unsigned __int64 *)                        ; hoge\r\n        add     esp, 4\r\n        mov     esp, ebp\r\n        pop     ebp\r\n        ret     0\r\nvoid foo(void) ENDP\r\n```\r\n([on godbolt](https://godbolt.org/z/5eqKrn11j))\r\n\r\nIf the stack pointer is not 8-bytes aligned when entering the function, the pointer passed to `hoge` is not going to be 8-bytes aligned.\r\n\r\nAs mentioned in the linked community post above, adding `alignas(8)` to the type definition makes the compiler align the stack:\r\n```\r\n#include <cinttypes>\r\nextern void hoge(uint64_t*);\r\nvoid foo() {\r\n    alignas(8) uint64_t a;\r\n    hoge(&a);\r\n}\r\n```\r\nbecomes\r\n```\r\n_a$ = -8                                                ; size = 8\r\nvoid foo(void) PROC                                        ; foo\r\n        push    ebx\r\n        mov     ebx, esp\r\n        sub     esp, 8\r\n        and     esp, -8                             ; fffffff8H\r\n        add     esp, 4\r\n        push    ebp\r\n        mov     ebp, DWORD PTR [ebx+4]\r\n        mov     DWORD PTR [esp+4], ebp\r\n        mov     ebp, esp\r\n        sub     esp, 8\r\n        lea     eax, DWORD PTR _a$[ebp]\r\n        push    eax\r\n        call    void hoge(unsigned __int64 *)                        ; hoge\r\n        add     esp, 4\r\n        mov     esp, ebp\r\n        pop     ebp\r\n        mov     esp, ebx\r\n        pop     ebx\r\n        ret     0\r\nvoid foo(void) ENDP\r\n```\r\n([on godbolt](https://godbolt.org/z/8zP7Pezen))\r\n\r\nNow, what this means is that if that `hoge` function is a rust FFI function, and it uses that pointer, the \"misaligned pointer dereference\" check is hit and panic ensues.\r\n\r\nReal life case, for the curious:\r\nhttps://github.com/servo/dwrote-rs/blob/master/src/font_file_loader_impl.rs#L116-L123\r\n\r\nThat function is called from dwrite.dll (which comes with Windows).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112480/timeline", "performed_via_github_app": null, "state_reason": null}