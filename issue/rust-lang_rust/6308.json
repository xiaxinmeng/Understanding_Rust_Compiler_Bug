{"url": "https://api.github.com/repos/rust-lang/rust/issues/6308", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/6308/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/6308/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/6308/events", "html_url": "https://github.com/rust-lang/rust/issues/6308", "id": 14066389, "node_id": "MDU6SXNzdWUxNDA2NjM4OQ==", "number": 6308, "title": "Dynamically sized types", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/20", "html_url": "https://github.com/rust-lang/rust/milestone/20", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/20/labels", "id": 452034, "node_id": "MDk6TWlsZXN0b25lNDUyMDM0", "number": 20, "title": "1.0", "description": "This will be the first major release of Rust, where we offer some guaranteed level of support and backwards compatibility.\r\n\r\nThe significant criteria for this release are:\r\n\r\n* Language backwards compatibility - All major features are in, and in their final form. Generally, the only new language features added after this milestone must be backwards compatible, or to fix soundness holes, though we do expect to have some leeway to make small incompatible fixes that have low impact on existing code bases.\r\n\r\n* Library stability - We have a system of measuring and ensuring the stability of API's, and a significant portion of the standard library is declared stable. Stable API's will not change. Large portions of the standard library need to be stable for 1.0, including primitive types, vectors, strings, option, numerics, collections, some I/O and concurrency.\r\n\r\n* User experience - The system is polished and the presentation is complete and professional. New users have a clear path to using and learning the system. This encompasses the web site, documentation, installation, and tooling.\r\n", "creator": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 376, "state": "closed", "created_at": "2013-10-10T18:48:33Z", "updated_at": "2016-08-28T23:13:24Z", "due_on": "2015-05-15T07:00:00Z", "closed_at": "2015-05-21T20:59:13Z"}, "comments": 16, "created_at": "2013-05-07T19:21:43Z", "updated_at": "2014-04-17T21:13:18Z", "closed_at": "2014-04-17T21:13:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As described here:\n\nhttp://smallcultfollowing.com/babysteps/blog/2013/04/30/dynamically-sized-types/\n\nRough notes on the plan:\n- Thinking about dynamically sized types. What needs to change:\n  - trans code:\n    - need to ensure that all dynamically sized types have a consistent\n      layout (e.g., (ptr, meta))\n      - change repr of `~[T]`, `~str`, `~Trait', etc\n      - change repr of ~Trait to be a pair, moving type descriptor into vtable\n      - change repr of @fn, ~fn, &fn to skip header for &fn pointer\n    - make the various Datum routines for deref'ing and so forth do\n      the right thing based on the `ty::t`\n      - not sure what other places in the code think they know about\n        the structure of a pointer, probably a few\n      - we could keep the types as they are now and get this part right,\n        by essentially translating in trans from something like\n        `AutoBorrowVec` into the combination of `datum.deref()` and then\n        `datum.take_ref()`\n    - at type system level, 9then, we'll want to:\n      - implement kind bounds on fns (I can do that relatively easily)\n      - any other changes that would stand in the way of types being\n        separated from `&` etc\n      - do the change\n- Semantic questions:\n  - [a, b, c] has type [T, ..3]\n  - ~[a, b, c] has type ~[T]\n  - [a, b, c] --> [T]\n  - Relevant to custom smart pointer types:\n  - If we for a DWIM solution:\n    - ~([a, b, c]) <-- what should this do?\n    - basically we'll propagate information from ~ operator, @ operator, etc \n- Modify kindck (probably?) to enforce Sized requirement\n  - good idea to do this early, gives us an idea of the burden aspect\n  - maybe move existing code to kindck as a first step?\n- We may want to allow kind bounds of type definitions:\n  \n  struct Foo<T> {\n     vec: ~[T] <--- we would want to know here that T:Sized\n  }\n  \n  or maybe just enforce this bound at use points instead\n\nTo be implemented by @pcwalton and @nikomatsakis.\n", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/6308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/6308/timeline", "performed_via_github_app": null, "state_reason": "completed"}