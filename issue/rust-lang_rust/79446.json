{"url": "https://api.github.com/repos/rust-lang/rust/issues/79446", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/79446/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79446/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/79446/events", "html_url": "https://github.com/rust-lang/rust/issues/79446", "id": 751697545, "node_id": "MDU6SXNzdWU3NTE2OTc1NDU=", "number": 79446, "title": "Cannot link against libraries in binary mode", "user": {"login": "qiujiangkun", "id": 33482468, "node_id": "MDQ6VXNlcjMzNDgyNDY4", "avatar_url": "https://avatars.githubusercontent.com/u/33482468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qiujiangkun", "html_url": "https://github.com/qiujiangkun", "followers_url": "https://api.github.com/users/qiujiangkun/followers", "following_url": "https://api.github.com/users/qiujiangkun/following{/other_user}", "gists_url": "https://api.github.com/users/qiujiangkun/gists{/gist_id}", "starred_url": "https://api.github.com/users/qiujiangkun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qiujiangkun/subscriptions", "organizations_url": "https://api.github.com/users/qiujiangkun/orgs", "repos_url": "https://api.github.com/users/qiujiangkun/repos", "events_url": "https://api.github.com/users/qiujiangkun/events{/privacy}", "received_events_url": "https://api.github.com/users/qiujiangkun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-11-26T16:00:26Z", "updated_at": "2020-11-27T17:00:40Z", "closed_at": "2020-11-27T17:00:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a C library to link against. I can link against in test mode, library mode but not in binary mode.\r\nThe compile error is like this. I cannot find any libraries that I passed in `build.rs`. I have no issue with library mode.\r\nI have my whole virtual machine, in case we can't figure out here.\r\n```log\r\nerror: linking with `cc` failed: exit code: 1\r\n  |\r\n  = note: \"cc\" \"-Wl,--as-needed\" \"-Wl,-z,noexecstack\" \"-m64\" \"-Wl,--eh-frame-hdr\" \"-L\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"/home/jack/f-stack/rust/target/debug/deps/f_stack-d246202f17c8f62b.343mjjk79l7403ec.rcgu.o\" \"/home/jack/f-stack/rust/target/debug/deps/f_stack-d246202f17c8f62b.3pf1frbec68p063i.rcgu.o\" \"/home/jack/f-stack/rust/target/debug/deps/f_stack-d246202f17c8f62b.4f26jivrfy93xec.rcgu.o\" \"/home/jack/f-stack/rust/target/debug/deps/f_stack-d246202f17c8f62b.4ifxdhvef9ve4v50.rcgu.o\" \"/home/jack/f-stack/rust/target/debug/deps/f_stack-d246202f17c8f62b.5eawso0t9udt3bhv.rcgu.o\" \"/home/jack/f-stack/rust/target/debug/deps/f_stack-d246202f17c8f62b.ewm8n2goxfo5ib0.rcgu.o\" \"/home/jack/f-stack/rust/target/debug/deps/f_stack-d246202f17c8f62b.lsixbhjbij54j72.rcgu.o\" \"-o\" \"/home/jack/f-stack/rust/target/debug/deps/f_stack-d246202f17c8f62b\" \"/home/jack/f-stack/rust/target/debug/deps/f_stack-d246202f17c8f62b.2xpsge081d58crt0.rcgu.o\" \"-Wl,--gc-sections\" \"-pie\" \"-Wl,-zrelro\" \"-Wl,-znow\" \"-nodefaultlibs\" \"-L\" \"/home/jack/f-stack/rust/target/debug/deps\" \"-L\" \"../example\" \"-L\" \"/home/jack/f-stack/rust/target/debug/build/ring-ec5302ca4b4b5e46/out\" \"-L\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-Wl,--start-group\" \"-Wl,-Bstatic\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-93cbfed54dd1bac8.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libpanic_unwind-db33fe383d9e671a.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libminiz_oxide-4afe0e223ea50f9d.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libadler-76d88ad8c833f039.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libobject-762cea37cccf8abe.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libaddr2line-8de1e75656157df8.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libgimli-76f54e5a49eca8e8.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc_demangle-d7aed80bcad8813a.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libhashbrown-a3916e8afa60a160.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc_std_workspace_alloc-eaacce9b176ef080.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libunwind-81e497cd060f0dda.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcfg_if-949464f6d582f46f.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/liblibc-1ffc094785c92121.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/liballoc-f19c324859e53f08.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc_std_workspace_core-0b82195f1020bf42.rlib\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcore-4f2339b0071e1016.rlib\" \"-Wl,--end-group\" \"/home/jack/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcompiler_builtins-774a5f30b27a1f9c.rlib\" \"-Wl,-Bdynamic\" \"-lgcc_s\" \"-lc\" \"-lm\" \"-lrt\" \"-lpthread\" \"-lutil\" \"-ldl\" \"-lutil\"\r\n  = note: /home/jack/f-stack/rust/target/debug/deps/f_stack-d246202f17c8f62b.3pf1frbec68p063i.rcgu.o: In function `f_stack::main::ha04c0d8dec7cfb36':\r\n          /home/jack/f-stack/rust/src/main.rs:5: undefined reference to `fstack_run'\r\n          collect2: error: ld returned 1 exit status\r\n          \r\n\r\n```\r\n\r\nlib.rs\r\n```rust\r\nuse crate::bindings::fstack_run;\r\n\r\nmod bindings;\r\nfn test_fstack() {\r\n    unsafe {\r\n        fstack_run(None);\r\n    }\r\n}\r\n```\r\nmain.rs\r\n```\r\nmod bindings;\r\n\r\nfn main() {\r\n    unsafe {\r\n        bindings::fstack_run(None);\r\n    }\r\n}\r\n```\r\nbuild.rs\r\n```rust\r\nextern crate bindgen;\r\n\r\nuse std::env;\r\nuse std::path::PathBuf;\r\n\r\nfn main() {\r\n    println!(\"cargo:rustc-link-search=../example\");\r\n    let dep = vec![\"fstack_daemon\", \"fstack\", \"dpdk\", \"rt\", \"dl\", \"crypto\", \"numa\"];\r\n    for d in dep {\r\n        println!(\"cargo:rustc-link-lib={}\", d);\r\n    }\r\n\r\n\r\n    // Tell cargo to invalidate the built crate whenever the wrapper changes\r\n    println!(\"cargo:rerun-if-changed=wrapper.h\");\r\n\r\n    // The bindgen::Builder is the main entry point\r\n    // to bindgen, and lets you build up options for\r\n    // the resulting bindings.\r\n    let bindings = bindgen::Builder::default()\r\n        // The input header we would like to generate\r\n        // bindings for.\r\n        .header(\"wrapper.h\")\r\n        .whitelist_function(\"get_address\")\r\n        .whitelist_function(\"fstack_init\")\r\n        .whitelist_function(\"fstack_run\")\r\n        .whitelist_type(\"dispatch_t\")\r\n        .whitelist_type(\"control_t\")\r\n        .whitelist_type(\"sockaddr_in\")\r\n        .whitelist_type(\"commands\")\r\n        .whitelist_type(\"mutex_stack_t\")\r\n        .whitelist_function(\"mutex_stack_init\")\r\n        .whitelist_function(\"mutex_stack_push\")\r\n        .whitelist_function(\"mutex_stack_pop\")\r\n        .whitelist_function(\"mutex_stack_size\")\r\n\r\n        // Tell cargo to invalidate the built crate whenever any of the\r\n        // included header files changed.\r\n        .parse_callbacks(Box::new(bindgen::CargoCallbacks))\r\n        // Finish the builder and generate the bindings.\r\n        .generate()\r\n        // Unwrap the Result and panic on failure.\r\n        .expect(\"Unable to generate bindings\");\r\n\r\n    // Write the bindings to the $OUT_DIR/bindings.rs file.\r\n    let out_path = PathBuf::from(\"src\");\r\n    bindings\r\n        .write_to_file(out_path.join(\"bindings.rs\"))\r\n        .expect(\"Couldn't write bindings!\");\r\n}\r\n```\r\nbindings.rs\r\n```rust\r\n/* automatically generated by rust-bindgen */\r\n\r\npub type sa_family_t = ::std::os::raw::c_ushort;\r\npub type in_addr_t = u32;\r\n\r\n#[repr(C)]\r\n#[derive(Debug, Copy, Clone)]\r\npub struct in_addr { pub s_addr: in_addr_t }\r\n\r\n#[test]\r\nfn bindgen_test_layout_in_addr() {\r\n    assert_eq!(::std::mem::size_of::<in_addr>(), 4usize, concat!(\"Size of: \", stringify!(in_addr)));\r\n    assert_eq!(::std::mem::align_of::<in_addr>(), 4usize, concat!(\"Alignment of \", stringify!(in_addr)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize }, 0usize, concat!(\"Offset of field: \", stringify!(in_addr), \"::\", stringify!(s_addr)));\r\n}\r\n\r\npub type in_port_t = u16;\r\n\r\n#[repr(C)]\r\n#[derive(Debug, Copy, Clone)]\r\npub struct sockaddr_in { pub sin_family: sa_family_t, pub sin_port: in_port_t, pub sin_addr: in_addr, pub sin_zero: [::std::os::raw::c_uchar; 8usize] }\r\n\r\n#[test]\r\nfn bindgen_test_layout_sockaddr_in() {\r\n    assert_eq!(::std::mem::size_of::<sockaddr_in>(), 16usize, concat!(\"Size of: \", stringify!(sockaddr_in)));\r\n    assert_eq!(::std::mem::align_of::<sockaddr_in>(), 4usize, concat!(\"Alignment of \", stringify!(sockaddr_in)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize }, 0usize, concat!(\"Offset of field: \", stringify!(sockaddr_in), \"::\", stringify!(sin_family)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize }, 2usize, concat!(\"Offset of field: \", stringify!(sockaddr_in), \"::\", stringify!(sin_port)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize }, 4usize, concat!(\"Offset of field: \", stringify!(sockaddr_in), \"::\", stringify!(sin_addr)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize }, 8usize, concat!(\"Offset of field: \", stringify!(sockaddr_in), \"::\", stringify!(sin_zero)));\r\n}\r\n\r\n#[repr(C)]\r\n#[derive(Debug, Copy, Clone)]\r\npub struct buffer_t { pub size: ::std::os::raw::c_int, pub read: ::std::os::raw::c_int, pub write: ::std::os::raw::c_int, pub mask: ::std::os::raw::c_int, pub buf: *mut ::std::os::raw::c_char }\r\n\r\n#[test]\r\nfn bindgen_test_layout_buffer_t() {\r\n    assert_eq!(::std::mem::size_of::<buffer_t>(), 24usize, concat!(\"Size of: \", stringify!(buffer_t)));\r\n    assert_eq!(::std::mem::align_of::<buffer_t>(), 8usize, concat!(\"Alignment of \", stringify!(buffer_t)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<buffer_t>())).size as *const _ as usize }, 0usize, concat!(\"Offset of field: \", stringify!(buffer_t), \"::\", stringify!(size)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<buffer_t>())).read as *const _ as usize }, 4usize, concat!(\"Offset of field: \", stringify!(buffer_t), \"::\", stringify!(read)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<buffer_t>())).write as *const _ as usize }, 8usize, concat!(\"Offset of field: \", stringify!(buffer_t), \"::\", stringify!(write)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<buffer_t>())).mask as *const _ as usize }, 12usize, concat!(\"Offset of field: \", stringify!(buffer_t), \"::\", stringify!(mask)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<buffer_t>())).buf as *const _ as usize }, 16usize, concat!(\"Offset of field: \", stringify!(buffer_t), \"::\", stringify!(buf)));\r\n}\r\n\r\n#[repr(C)]\r\n#[derive(Debug, Copy, Clone)]\r\npub struct dispatch_t { pub sockfd: ::std::os::raw::c_int, pub error_code: ::std::os::raw::c_int, pub read_buf: buffer_t, pub write_buf: buffer_t }\r\n\r\n#[test]\r\nfn bindgen_test_layout_dispatch_t() {\r\n    assert_eq!(::std::mem::size_of::<dispatch_t>(), 56usize, concat!(\"Size of: \", stringify!(dispatch_t)));\r\n    assert_eq!(::std::mem::align_of::<dispatch_t>(), 8usize, concat!(\"Alignment of \", stringify!(dispatch_t)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<dispatch_t>())).sockfd as *const _ as usize }, 0usize, concat!(\"Offset of field: \", stringify!(dispatch_t), \"::\", stringify!(sockfd)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<dispatch_t>())).error_code as *const _ as usize }, 4usize, concat!(\"Offset of field: \", stringify!(dispatch_t), \"::\", stringify!(error_code)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<dispatch_t>())).read_buf as *const _ as usize }, 8usize, concat!(\"Offset of field: \", stringify!(dispatch_t), \"::\", stringify!(read_buf)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<dispatch_t>())).write_buf as *const _ as usize }, 32usize, concat!(\"Offset of field: \", stringify!(dispatch_t), \"::\", stringify!(write_buf)));\r\n}\r\n\r\npub const commands_CONNECT: commands = 0;\r\npub const commands_CLOSE: commands = 1;\r\npub const commands_RECONNECT: commands = 2;\r\n\r\npub type commands = u32;\r\n\r\n#[repr(C)]\r\n#[derive(Debug, Copy, Clone)]\r\npub struct control_t { pub addr: sockaddr_in, pub fd: ::std::os::raw::c_int, pub command: commands, pub errno_number: ::std::os::raw::c_int, pub done: ::std::os::raw::c_int, pub dispatch: *mut dispatch_t }\r\n\r\n#[test]\r\nfn bindgen_test_layout_control_t() {\r\n    assert_eq!(::std::mem::size_of::<control_t>(), 40usize, concat!(\"Size of: \", stringify!(control_t)));\r\n    assert_eq!(::std::mem::align_of::<control_t>(), 8usize, concat!(\"Alignment of \", stringify!(control_t)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<control_t>())).addr as *const _ as usize }, 0usize, concat!(\"Offset of field: \", stringify!(control_t), \"::\", stringify!(addr)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<control_t>())).fd as *const _ as usize }, 16usize, concat!(\"Offset of field: \", stringify!(control_t), \"::\", stringify!(fd)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<control_t>())).command as *const _ as usize }, 20usize, concat!(\"Offset of field: \", stringify!(control_t), \"::\", stringify!(command)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<control_t>())).errno_number as *const _ as usize }, 24usize, concat!(\"Offset of field: \", stringify!(control_t), \"::\", stringify!(errno_number)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<control_t>())).done as *const _ as usize }, 28usize, concat!(\"Offset of field: \", stringify!(control_t), \"::\", stringify!(done)));\r\n    assert_eq!(unsafe { &(*(::std::ptr::null::<control_t>())).dispatch as *const _ as usize }, 32usize, concat!(\"Offset of field: \", stringify!(control_t), \"::\", stringify!(dispatch)));\r\n}\r\n\r\nextern \"C\" { pub fn get_address(addr: *mut ::std::os::raw::c_char, port: ::std::os::raw::c_int) -> sockaddr_in; }\r\n\r\nextern \"C\" { pub fn fstack_init(argc: ::std::os::raw::c_int, argv: *mut *mut ::std::os::raw::c_char); }\r\n\r\nextern \"C\" { pub fn fstack_run(user_poll: ::std::option::Option<unsafe extern \"C\" fn()>); }\r\n```\r\n```log\r\ncargo --version\r\ncargo 1.48.0 (65cbdd2dc 2020-10-14)\r\n\r\nrustc --version\r\nrustc 1.48.0 (7eac88abb 2020-11-16)\r\n\r\n```", "closed_by": {"login": "qiujiangkun", "id": 33482468, "node_id": "MDQ6VXNlcjMzNDgyNDY4", "avatar_url": "https://avatars.githubusercontent.com/u/33482468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qiujiangkun", "html_url": "https://github.com/qiujiangkun", "followers_url": "https://api.github.com/users/qiujiangkun/followers", "following_url": "https://api.github.com/users/qiujiangkun/following{/other_user}", "gists_url": "https://api.github.com/users/qiujiangkun/gists{/gist_id}", "starred_url": "https://api.github.com/users/qiujiangkun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qiujiangkun/subscriptions", "organizations_url": "https://api.github.com/users/qiujiangkun/orgs", "repos_url": "https://api.github.com/users/qiujiangkun/repos", "events_url": "https://api.github.com/users/qiujiangkun/events{/privacy}", "received_events_url": "https://api.github.com/users/qiujiangkun/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/79446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/79446/timeline", "performed_via_github_app": null, "state_reason": "completed"}