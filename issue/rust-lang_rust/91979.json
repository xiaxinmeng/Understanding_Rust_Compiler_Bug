{"url": "https://api.github.com/repos/rust-lang/rust/issues/91979", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91979/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91979/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91979/events", "html_url": "https://github.com/rust-lang/rust/issues/91979", "id": 1081546502, "node_id": "I_kwDOAAsO6M5AdxcG", "number": 91979, "title": "Segmentation fault when thread using dynamically loaded Rust library exits", "user": {"login": "devongovett", "id": 19409, "node_id": "MDQ6VXNlcjE5NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/19409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devongovett", "html_url": "https://github.com/devongovett", "followers_url": "https://api.github.com/users/devongovett/followers", "following_url": "https://api.github.com/users/devongovett/following{/other_user}", "gists_url": "https://api.github.com/users/devongovett/gists{/gist_id}", "starred_url": "https://api.github.com/users/devongovett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devongovett/subscriptions", "organizations_url": "https://api.github.com/users/devongovett/orgs", "repos_url": "https://api.github.com/users/devongovett/repos", "events_url": "https://api.github.com/users/devongovett/events{/privacy}", "received_events_url": "https://api.github.com/users/devongovett/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 632886930, "node_id": "MDU6TGFiZWw2MzI4ODY5MzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-thread-locals", "name": "A-thread-locals", "color": "f7e101", "default": false, "description": "Area: Thread local storage (TLS)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2021-12-15T21:51:30Z", "updated_at": "2022-07-08T04:30:32Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Scenario: I have a Rust cdylib, which is loaded by a C program via `dlopen`. The C program creates a thread, and loads the Rust module inside it. It proceeds to call one of the Rust functions, and closes the library via `dlclose`. Then the thread exits. The Rust program has a thread local variable with a struct that implements `Drop`, which it modifies in the function called from C.\r\n\r\nFull reproduction here: https://github.com/devongovett/rust-threadlocal-bug\r\n\r\nOn CentOS 7, which uses glibc 2.17, it segfaults at `__nptl_deallocate_tsd()` inside pthread_create.c. With later versions of glibc, there is no crash. I believe the crash occurs because Rust creates a thread local key with `pthread_key_create` but never calls `pthread_key_delete` (the call in the destructor is commented out): https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sys_common/thread_local_key.rs#L231-L237\r\n\r\nWhen the thread exits, glibc tries to call the destructor for the key, but because the dynamic library has already been unloaded via `dlclose` at this point, the function no longer exists and we get a crash.\r\n\r\nMy theory is that this only occurs with glibc 2.17 and not later versions is due to `__cxa_thread_atexit_impl` not existing in these older versions. This function is used when available to register destructors, otherwise a fallback implementation is used: https://github.com/rust-lang/rust/blob/71965ab4d05b023cd29c914ef1262a72cac02e01/library/std/src/sys/unix/thread_local_dtor.rs#L30-L42 However, I'm not sure about that. It could be some other change in glibc.\r\n\r\nI have not tested, but I think the bug could potentially be fixed if the commented out destructor linked above were actually called. The comment indicates something about windows not supporting this, so maybe it could be called conditionally?\r\n\r\nglibc 2.17 is indeed pretty old, however, it is the version used by the current CentOS 7 version which is not EOL until 2024, so I do think this bug should be fixed.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.57.0 (f1edd0429 2021-11-29)\r\nbinary: rustc\r\ncommit-hash: f1edd0429582dd29cccacaf50fd134b05593bd9c\r\ncommit-date: 2021-11-29\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.57.0\r\nLLVM version: 13.0.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91979/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91979/timeline", "performed_via_github_app": null, "state_reason": null}