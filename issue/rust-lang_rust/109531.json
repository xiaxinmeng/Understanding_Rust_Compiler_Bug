{"url": "https://api.github.com/repos/rust-lang/rust/issues/109531", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109531/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109531/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109531/events", "html_url": "https://github.com/rust-lang/rust/issues/109531", "id": 1637619470, "node_id": "I_kwDOAAsO6M5hnBcO", "number": 109531, "title": "diagnostics improvements for invalid target_feature error", "user": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 5223550385, "node_id": "LA_kwDOAAsO6M8AAAABN1kNsQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-target-feature", "name": "A-target-feature", "color": "f7e101", "default": false, "description": "Area: Enabling/disabling target features like AVX, Neon, etc."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-23T14:07:56Z", "updated_at": "2023-04-05T17:23:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When a target feature is found that doesn't exist on the current target but does exist on another target, it should be explicitly pointed out in the error message. Copying the example from [this comment](https://github.com/rust-lang/rust/issues/108680#issuecomment-1479473303):\r\n\r\n```Rust\r\n#[target_feature(enable = \"sse2\", enable = \"avx\", enable = \"sse\")]\r\npub unsafe fn foo() {}\r\n```\r\n\r\nWhen you compile it on M1/M2 you get:\r\n\r\n```\r\nerror: the feature named `sse2` is not valid for this target\r\n  --> $DIR/issue-108680.rs:3:18\r\n   |\r\nLL | #[target_feature(enable = \"sse2\", enable = \"avx\", enable = \"sse\")]\r\n   |                  ^^^^^^^^^^^^^^^ `sse2` is not valid for this target\r\n\r\nerror: the feature named `avx` is not valid for this target\r\n  --> $DIR/issue-108680.rs:3:35\r\n   |\r\nLL | #[target_feature(enable = \"sse2\", enable = \"avx\", enable = \"sse\")]\r\n   |                                   ^^^^^^^^^^^^^^ `avx` is not valid for this target\r\n\r\nerror: the feature named `sse` is not valid for this target\r\n  --> $DIR/issue-108680.rs:3:51\r\n   |\r\nLL | #[target_feature(enable = \"sse2\", enable = \"avx\", enable = \"sse\")]\r\n   |                                                   ^^^^^^^^^^^^^^ `sse` is not valid for this target\r\n\r\n```\r\n\r\nIdeally this would mention that these target features are valid for the `arm64` target architecture/family:\r\n\r\n```\r\nerror: the feature named `sse2` is not valid for this target\r\n  --> $DIR/issue-108680.rs:3:18\r\n   |\r\nLL | #[target_feature(enable = \"sse2\", enable = \"avx\", enable = \"sse\")]\r\n   |                  ^^^^^^^^^^^^^^^ `sse2` is not valid for this target\r\n   = note: `sse2` is present on the `x86_64` target architecture. Did you mean to compile for that target, or use conditional compilation?\r\n```\r\n\r\nThe printing also ideally would support features present on multiple target architectures, for example the `aes` feature is present on both arm and x86: \r\n\r\n```Rust\r\n// only-wasm32\r\n#[target_feature(enable = \"aes\")]\r\npub unsafe fn foo() {}\r\n```\r\n\r\nFor `aarch64` vs `arm` it might make sense to always mention them both if the feature is present on both, as the two languages are way different from each other (while x86 is very backwards compatible).\r\n\r\nAs a second thing, it would be nice if it could provide typo suggestions:\r\n\r\n```Rust\r\n#[target_feature(enable = \"avc\")]\r\npub unsafe fn foo() {}\r\n```\r\n\r\n```\r\nerror: the feature named `avc` is not valid for this target\r\n --> src/main.rs:1:18\r\n  |\r\n1 | #[target_feature(enable = \"avc\")]\r\n  |                  ^^^^^^^^^^^^^^ `avc` is not valid for this target\r\n  = help: a similar feature `avx` exists for this target\r\n```\r\n\r\nBut I'm less sure if this is a good idea as target features are often very short and similar to each other. Suggesting the wrong target feature might not be detected as easily.\r\n\r\n@rustbot label A-diagnostics A-target-feature ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109531/timeline", "performed_via_github_app": null, "state_reason": null}