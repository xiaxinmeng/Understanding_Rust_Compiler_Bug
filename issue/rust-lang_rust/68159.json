{"url": "https://api.github.com/repos/rust-lang/rust/issues/68159", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68159/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68159/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68159/events", "html_url": "https://github.com/rust-lang/rust/issues/68159", "id": 548601836, "node_id": "MDU6SXNzdWU1NDg2MDE4MzY=", "number": 68159, "title": "Wrong specialised implementation chosen on `T` or `U` where `T: U`", "user": {"login": "CJKay", "id": 1470499, "node_id": "MDQ6VXNlcjE0NzA0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1470499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CJKay", "html_url": "https://github.com/CJKay", "followers_url": "https://api.github.com/users/CJKay/followers", "following_url": "https://api.github.com/users/CJKay/following{/other_user}", "gists_url": "https://api.github.com/users/CJKay/gists{/gist_id}", "starred_url": "https://api.github.com/users/CJKay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CJKay/subscriptions", "organizations_url": "https://api.github.com/users/CJKay/orgs", "repos_url": "https://api.github.com/users/CJKay/repos", "events_url": "https://api.github.com/users/CJKay/events{/privacy}", "received_events_url": "https://api.github.com/users/CJKay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1472579062, "node_id": "MDU6TGFiZWwxNDcyNTc5MDYy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-specialization", "name": "F-specialization", "color": "f9c0cc", "default": false, "description": "`#![feature(specialization)]`"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-12T17:35:25Z", "updated_at": "2023-03-26T18:57:49Z", "closed_at": "2023-03-26T18:57:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "If a default function taking a generic type `T` is specialised by a concrete type `U` which fulfills the constraints on `T`, calls to the function will never choose the default implementation even if it is the only valid choice.\r\n\r\nhttps://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=a6b6b6f5a051db104630ec706708da08\r\n\r\n```rust\r\n#![feature(specialization)]\r\n\r\nuse core::{cmp::{Eq, PartialEq}, convert::From};\r\n\r\n#[derive(Eq)]\r\npub struct Bit(bool);\r\n\r\nimpl From<bool> for Bit {\r\n    fn from (from: bool) -> Bit {\r\n        Bit(from)\r\n    }\r\n}\r\n\r\nimpl<T: Eq + From<bool>> PartialEq<T> for Bit {\r\n    default fn eq(&self, other: &T) -> bool {\r\n        other.eq(&self.0.into())\r\n    }\r\n}\r\n\r\nimpl PartialEq<Bit> for Bit {\r\n    fn eq(&self, other: &Bit) -> bool {\r\n        other.0.eq(&self.0)\r\n    }\r\n}\r\n\r\nfn mismatched_types<T: Eq + From<bool>>(left: Bit, right: T) -> bool {\r\n    left.eq(&right)\r\n}\r\n```\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:27:13\r\n   |\r\n26 | fn mismatched_types<T: Eq + From<bool>>(left: Bit, right: T) -> bool {\r\n   |                     - this type parameter\r\n27 |     left.eq(&right)\r\n   |             ^^^^^^ expected struct `Bit`, found type parameter `T`\r\n   |\r\n   = note: expected reference `&Bit`\r\n              found reference `&T`\r\n   = help: type parameters must be constrained to match other types\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nThe proper implementation is, however, correctly resolved using universal calling syntax:\r\n\r\n```rust\r\nfn mismatched_types<T: Eq + From<bool>>(left: Bit, right: T) -> bool {\r\n    <Bit as PartialEq<T>>::eq(&left, &right) /* No error */\r\n}\r\n```\r\n\r\nIt also seems to resolve correctly when a second specialised implementation with another concrete type that also meets the constraints on the default implementation:\r\n\r\nhttps://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=2687e226c51933ce99ed514c840bd317", "closed_by": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68159/timeline", "performed_via_github_app": null, "state_reason": "completed"}