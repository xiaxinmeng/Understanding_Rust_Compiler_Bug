{"url": "https://api.github.com/repos/rust-lang/rust/issues/12261", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12261/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12261/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12261/events", "html_url": "https://github.com/rust-lang/rust/issues/12261", "id": 27590884, "node_id": "MDU6SXNzdWUyNzU5MDg4NA==", "number": 12261, "title": "Allow unsafe statements", "user": {"login": "lexs", "id": 191973, "node_id": "MDQ6VXNlcjE5MTk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/191973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lexs", "html_url": "https://github.com/lexs", "followers_url": "https://api.github.com/users/lexs/followers", "following_url": "https://api.github.com/users/lexs/following{/other_user}", "gists_url": "https://api.github.com/users/lexs/gists{/gist_id}", "starred_url": "https://api.github.com/users/lexs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lexs/subscriptions", "organizations_url": "https://api.github.com/users/lexs/orgs", "repos_url": "https://api.github.com/users/lexs/repos", "events_url": "https://api.github.com/users/lexs/events{/privacy}", "received_events_url": "https://api.github.com/users/lexs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-02-14T12:03:08Z", "updated_at": "2014-09-16T03:56:02Z", "closed_at": "2014-09-16T03:55:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "When writing a lot of unsafe code you often find yourself having to make just some parts of your functions unsafe, however the requirement to use unsafe blocks often makes it nicer to just wrap the function body in `unsafe {}`.\n\nI want to propose allowing bracketless `unsafe` for making a single expression unsafe, for example retrieving a global variable require code like this:\n\n``` rust\nlet a = unsafe { global.get() };\n```\n\nThis could be rewritten to:\n\n``` rust\nlet a = unsafe global.get();\n```\n\nIt also becomes usefule when matching on globals:\n\n``` rust\nmatch unsafe { global } {\n    ...\n}\n// vs\nmatch unsafe global {\n    ...\n}\n```\n", "closed_by": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12261/timeline", "performed_via_github_app": null, "state_reason": "completed"}