{"url": "https://api.github.com/repos/rust-lang/rust/issues/108338", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108338/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108338/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108338/events", "html_url": "https://github.com/rust-lang/rust/issues/108338", "id": 1594704289, "node_id": "I_kwDOAAsO6M5fDUGh", "number": 108338, "title": "closure doesn't seem to inherit the target attributes for codegen purposes", "user": {"login": "sarah-ek", "id": 40109184, "node_id": "MDQ6VXNlcjQwMTA5MTg0", "avatar_url": "https://avatars.githubusercontent.com/u/40109184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarah-ek", "html_url": "https://github.com/sarah-ek", "followers_url": "https://api.github.com/users/sarah-ek/followers", "following_url": "https://api.github.com/users/sarah-ek/following{/other_user}", "gists_url": "https://api.github.com/users/sarah-ek/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarah-ek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarah-ek/subscriptions", "organizations_url": "https://api.github.com/users/sarah-ek/orgs", "repos_url": "https://api.github.com/users/sarah-ek/repos", "events_url": "https://api.github.com/users/sarah-ek/events{/privacy}", "received_events_url": "https://api.github.com/users/sarah-ek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2046153791, "node_id": "MDU6TGFiZWwyMDQ2MTUzNzkx", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-target_feature_11", "name": "F-target_feature_11", "color": "f9c0cc", "default": false, "description": "target feature 1.1 RFC"}, {"id": 5223550385, "node_id": "LA_kwDOAAsO6M8AAAABN1kNsQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-target-feature", "name": "A-target-feature", "color": "f7e101", "default": false, "description": "Area: Enabling/disabling target features like AVX, Neon, etc."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-02-22T08:53:06Z", "updated_at": "2023-03-03T22:15:28Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#![feature(avx512_target_feature)]\r\n#![feature(stdsimd)]\r\n\r\n#[target_feature(enable = \"lzcnt,avx512f\")]\r\npub unsafe fn test(a: &mut [u64]) {\r\n    let mut f = move || {\r\n        std::arch::x86_64::_mm512_mask_loadu_epi64(\r\n            std::arch::x86_64::_mm512_setzero_si512(),\r\n            0,\r\n            a.as_mut_ptr() as *mut i64,\r\n        );\r\n    };\r\n    f()\r\n}\r\n```\r\n\r\nI expected to see this happen: all the avx512f functions get inlined into `test`\r\n\r\nInstead, this happened: `_mm512_mask_loadu_epi64` did not get inlined into `test`\r\n\r\ncodegen: https://godbolt.org/z/PbvexEWd8\r\n\r\nhere's a repro that mostly doesn't depend on std\r\n\r\n```rust\r\n#![feature(avx512_target_feature)]\r\n#![feature(stdsimd)]\r\n#![feature(repr_simd)]\r\n\r\n#[repr(simd)]\r\n#[allow(non_camel_case_types)]\r\n#[derive(Copy, Clone)]\r\npub struct __m512i(i64, i64, i64, i64, i64, i64, i64, i64);\r\n\r\n#[inline]\r\n#[target_feature(enable = \"avx512f\")]\r\npub unsafe fn asm_fn(_: __m512i) -> __m512i {\r\n    let mut dst = __m512i(0, 0, 0, 0, 0, 0, 0, 0);\r\n    core::arch::asm!(\r\n        \"/* {dst} */\",\r\n        dst = inout(zmm_reg) dst,\r\n    );\r\n    dst\r\n}\r\n\r\n#[inline]\r\n#[target_feature(enable = \"avx512f\")]\r\nunsafe fn do_nothing() {}\r\n\r\n#[target_feature(enable = \"lzcnt,avx512f\")]\r\npub unsafe fn test() {\r\n    ({\r\n        #[inline(always)]\r\n        move || {\r\n            do_nothing();\r\n            asm_fn(__m512i(0, 0, 0, 0, 0, 0, 0, 0));\r\n        }\r\n    })();\r\n}\r\n```\r\ncodegen: https://godbolt.org/z/joG9xxq4c\r\n\r\nthere seem to be quite a few moving parts here.\r\n\r\n - if i remove the `lzcnt` feature (or replace it with a feature that is implied by avx512f),\r\n - or if i remove the inout parameter in the asm in `asm_fn`,\r\n - or if i remove the call to `do_nothing`,\r\n - or if i take the code outside the closure,\r\n\r\nthe function gets inlined as expected, so i'm not sure which is the culprit here\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.69.0-nightly (5243ea5c2 2023-02-20)\r\nbinary: rustc\r\ncommit-hash: 5243ea5c29b136137c36bd773e5baa663790e097\r\ncommit-date: 2023-02-20\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.69.0-nightly\r\nLLVM version: 15.0.7\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108338/timeline", "performed_via_github_app": null, "state_reason": null}