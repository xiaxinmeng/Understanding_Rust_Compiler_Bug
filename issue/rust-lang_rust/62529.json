{"url": "https://api.github.com/repos/rust-lang/rust/issues/62529", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62529/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62529/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62529/events", "html_url": "https://github.com/rust-lang/rust/issues/62529", "id": 465769973, "node_id": "MDU6SXNzdWU0NjU3Njk5NzM=", "number": 62529, "title": "ICE rink: higher-rank trait bound (HRTB) `for<'a> ...` hits OutputTypeParameterMismatch in librustc/traits/codegen", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 693557542, "node_id": "MDU6TGFiZWw2OTM1NTc1NDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-traits", "name": "WG-traits", "color": "c2e0c6", "default": false, "description": "Working group: Traits, https://internals.rust-lang.org/t/announcing-traits-working-group/6804"}, {"id": 1405345617, "node_id": "MDU6TGFiZWwxNDA1MzQ1NjE3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lazy-normalization", "name": "A-lazy-normalization", "color": "f7e101", "default": false, "description": "Area: lazy normalization (tracking issue: #60471)"}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2019-07-09T13:06:17Z", "updated_at": "2021-08-25T22:48:51Z", "closed_at": "2021-08-25T22:48:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I have seen many `OutputTypeParameterMismatch` ICEs  filed, so I decided to try to make a single representative issue for all of them.\r\n * Its possible that not all of these share the same root cause. But until I see a more fine grain way to categorize them, I'm going to at least try to track them in a single place.\r\n\r\nBelow are transcribed minimized versions of each of the original issues, labelled accordingly, so that we remember to double check each of their behavior before closing this issue as fixed in the future.\r\n\r\n#60070 ([play](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=335318c74f48b36a8fe89be0d008b31c)):\r\n\r\n<details>\r\n<summary>Click to expand the code for minimized example</summary>\r\n\r\n```rust\r\n// FamilyType (GAT workaround)\r\npub trait FamilyLt<'a> {\r\n    type Out;\r\n}\r\n\r\nstruct RefMutFamily<T>(std::marker::PhantomData<T>, ());\r\nimpl<'a, T: 'a> FamilyLt<'a> for RefMutFamily<T> {\r\n    type Out = &'a mut T;\r\n}\r\n\r\npub trait Execute {\r\n    type E: Inject;\r\n    fn execute(self, value: <<Self::E as Inject>::I as FamilyLt>::Out);\r\n}\r\n\r\npub trait Inject\r\nwhere\r\n    Self: Sized,\r\n{\r\n    type I: for<'a> FamilyLt<'a>;\r\n    fn inject(_: &()) -> <Self::I as FamilyLt>::Out;\r\n}\r\n\r\nimpl<T: 'static> Inject for RefMutFamily<T> {\r\n    type I = Self;\r\n    fn inject(_: &()) -> <Self::I as FamilyLt>::Out {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\n// This struct is only used to give a hint to the compiler about the type `Q`\r\nstruct Annotate<Q>(std::marker::PhantomData<Q>);\r\nimpl<Q> Annotate<Q> {\r\n    fn new() -> Self {\r\n        Self(std::marker::PhantomData)\r\n    }\r\n}\r\n\r\n// This function annotate a closure so it can have Higher-Rank Lifetime Bounds\r\n//\r\n// See 'annotate' workaround: https://github.com/rust-lang/rust/issues/58052\r\nfn annotate<F, Q>(_q: Annotate<Q>, func: F) -> impl Execute + 'static\r\nwhere\r\n    F: for<'r> FnOnce(<<Q as Inject>::I as FamilyLt<'r>>::Out) + 'static,\r\n    Q: Inject + 'static,\r\n{\r\n    let wrapper: Wrapper<Q, F> = Wrapper(std::marker::PhantomData, func);\r\n    wrapper\r\n}\r\n\r\nstruct Wrapper<Q, F>(std::marker::PhantomData<Q>, F);\r\nimpl<Q, F> Execute for Wrapper<Q, F>\r\n    where\r\n        Q: Inject,\r\n        F: for<'r> FnOnce(<<Q as Inject>::I as FamilyLt<'r>>::Out),\r\n{\r\n    type E = Q;\r\n\r\n    fn execute(self, value: <<Self::E as Inject>::I as FamilyLt>::Out) {\r\n        (self.1)(value)\r\n    }\r\n}\r\n\r\nstruct Task {\r\n    _processor: Box<dyn FnOnce()>,\r\n}\r\n\r\n// This function consume the closure\r\nfn task<P>(processor: P) -> Task\r\nwhere P: Execute + 'static {\r\n    Task {\r\n        _processor: Box::new(move || {\r\n            let q = P::E::inject(&());\r\n            processor.execute(q);\r\n        })\r\n    }\r\n}\r\n\r\nfn main() {\r\n    task(annotate(\r\n        Annotate::<RefMutFamily<usize>>::new(),\r\n        |value: &mut usize| {\r\n            *value = 2;\r\n        }\r\n    ));\r\n}\r\n```\r\n\r\n</details>\r\n\r\n#57485 ([play](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=738291809d16dd578c2b27ae724a6fc3)):\r\n\r\n<details>\r\n<summary>Click to expand the code for minimized example </summary>\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\nuse std::mem;\r\n\r\ntrait Container<'a> {\r\n    type Root: 'a;\r\n}\r\n\r\ntype RootOf<'a, T> = <T as Container<'a>>::Root;\r\n\r\nstruct Test<'a, T> where T: Container<'a> {\r\n    pub root: T::Root,\r\n    marker: PhantomData<&'a mut &'a mut ()>,\r\n}\r\n\r\nimpl<'a, 'b> Container<'b> for &'a str {\r\n    type Root = &'b str;\r\n}\r\n\r\nimpl<'a, T> Test<'a, T> where T: for<'b> Container<'b> {\r\n    fn new(root: RootOf<'a, T>) -> Test<'a, T> {\r\n        Test {\r\n            root: root,\r\n            marker: PhantomData\r\n        }\r\n    }\r\n\r\n    fn with_mut<F, R>(&mut self, f: F) -> R where\r\n            F: for<'b> FnOnce(&'b mut RootOf<'b, T>) -> R {\r\n        f(unsafe { mem::transmute(&mut self.root) })\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let val = \"root\";\r\n    let mut test: Test<&str> = Test::new(val);\r\n    test.with_mut(|_| { });\r\n}\r\n```\r\n\r\n</details>\r\n\r\n#53420  ([play](https://play.rust-lang.org/?version=stable&mode=debug&edition=2015&gist=22299e701c9bdb472a5fc8fe303b7fa1)):\r\n\r\n<details>\r\n<summary>Click to expand the code for minimized example </summary>\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\n\r\ntrait Lt<'a> {\r\n    type T;\r\n}\r\nstruct Id<T>(PhantomData<T>);\r\nimpl<'a,T> Lt<'a> for Id<T> {\r\n    type T = T;\r\n}\r\n\r\nstruct Ref<T>(PhantomData<T>) where T: ?Sized;\r\nimpl<'a,T> Lt<'a> for Ref<T>\r\nwhere T: 'a + Lt<'a> + ?Sized\r\n{\r\n    type T = &'a T;\r\n}\r\nstruct Mut<T>(PhantomData<T>) where T: ?Sized;\r\nimpl<'a,T> Lt<'a> for Mut<T>\r\nwhere T: 'a + Lt<'a> + ?Sized\r\n{\r\n    type T = &'a mut T;\r\n}\r\n\r\nstruct C<I,O>(for<'a> fn(<I as Lt<'a>>::T) -> O) where I: for<'a> Lt<'a>;\r\n\r\n\r\nfn main() {\r\n    let c = C::<Id<_>,_>(|()| 3);\r\n    c.0(());\r\n\r\n}\r\n```\r\n\r\n</details>\r\n\r\n#52812  ([play](https://play.rust-lang.org/?version=stable&mode=debug&edition=2015&gist=8cf0d4f4d50c19994eb05ce610d65262)):\r\n\r\n<details>\r\n<summary>Click to expand the code for minimized example </summary>\r\n\r\n```rust\r\ntrait ATC<'a> {\r\n    type Type: Sized;\r\n}\r\n\r\ntrait WithDefault: for<'a> ATC<'a> {\r\n    fn with_default<F: for<'a> Fn(<Self as ATC<'a>>::Type)>(f: F);\r\n}\r\n\r\nfn call<'b, T: for<'a> ATC<'a>, F: for<'a> Fn(<T as ATC<'a>>::Type)>(\r\n    f: F,\r\n    x: <T as ATC<'b>>::Type,\r\n) {\r\n    f(x);\r\n}\r\n\r\nimpl<'a> ATC<'a> for () {\r\n    type Type = Self;\r\n}\r\n\r\nimpl WithDefault for () {\r\n    fn with_default<F: for<'a> Fn(<Self as ATC<'a>>::Type)>(f: F) {\r\n        // Errors with a bogus type mismatch.\r\n        //f(());\r\n        // Going through another generic function works fine.\r\n        call(f, ());\r\n    }\r\n}\r\n\r\nfn main() {\r\n    // <()>::with_default(|_| {});\r\n}\r\n```\r\n\r\n</details>\r\n\r\n#50886  ([play](https://play.rust-lang.org/?version=stable&mode=debug&edition=2015&gist=b12b47ac5c8c0dc6b367f981869183ed)):\r\n\r\n<details>\r\n<summary>Click to expand the code for minimized example </summary>\r\n\r\n```rust\r\npub struct Struct {}\r\n\r\npub trait Trait<'a> {\r\n    type Assoc;\r\n\r\n    fn method() -> Self::Assoc;\r\n}\r\n\r\nimpl<'a> Trait<'a> for Struct {\r\n    type Assoc = ();\r\n\r\n    fn method() -> Self::Assoc {}\r\n}\r\n\r\npub fn function<F, T>(f: F)\r\nwhere\r\n    F: for<'a> FnOnce(<T as Trait<'a>>::Assoc),\r\n    T: for<'b> Trait<'b>,\r\n{\r\n    f(T::method());\r\n}\r\n\r\nfn main() {\r\n    function::<_, Struct>(|_| {});\r\n}\r\n```\r\n\r\n</details>\r\n \r\n#48112  ([play](https://play.rust-lang.org/?version=stable&mode=debug&edition=2015&gist=be760e06934ed364df66d45aec8e67b2)):\r\n\r\n<details>\r\n<summary>Click to expand the code for minimized example </summary>\r\n\r\n```rust\r\nuse std::cell::RefMut;\r\n\r\nfn main() {\r\n    StateMachine2::Init.resume();\r\n}\r\n\r\nenum StateMachine2<'a> {\r\n    Init,\r\n    #[allow(dead_code)] // match required for ICE\r\n    AfterTwoYields {\r\n        p: Backed<'a, *mut String>,\r\n    },\r\n}\r\n\r\nimpl<'a> StateMachine2<'a> {\r\n    fn take(&self) -> Self {\r\n        StateMachine2::Init\r\n    }\r\n}\r\n\r\nimpl<'a> StateMachine2<'a> {\r\n    fn resume(&mut self) -> () {\r\n        use StateMachine2::*;\r\n        match self.take() {\r\n            AfterTwoYields { p } => {\r\n                p.with(|_| {});\r\n            }\r\n            _ => panic!(\"Resume after completed.\"),\r\n        }\r\n    }\r\n}\r\n\r\nunsafe trait Unpack<'a> {\r\n    type Unpacked: 'a;\r\n\r\n    fn unpack(&self) -> Self::Unpacked {\r\n        unsafe { std::mem::transmute_copy(&self) }\r\n    }\r\n}\r\n\r\nunsafe trait Pack {\r\n    type Packed;\r\n\r\n    fn pack(&self) -> Self::Packed {\r\n        unsafe { std::mem::transmute_copy(&self) }\r\n    }\r\n}\r\n\r\nunsafe impl<'a> Unpack<'a> for String {\r\n    type Unpacked = String;\r\n}\r\n\r\nunsafe impl Pack for String {\r\n    type Packed = String;\r\n}\r\n\r\nunsafe impl<'a> Unpack<'a> for *mut String {\r\n    type Unpacked = &'a mut String;\r\n}\r\n\r\nunsafe impl<'a> Pack for &'a mut String {\r\n    type Packed = *mut String;\r\n}\r\n\r\nstruct Backed<'a, U>(RefMut<'a, Option<String>>, U);\r\n\r\nimpl<'a, 'b, U: Unpack<'b>> Backed<'a, U> {\r\n    fn with<F>(self, f: F) -> Backed<'a, ()>\r\n    where\r\n        F: for<'f> FnOnce(<U as Unpack<'f>>::Unpacked) -> (),\r\n    {\r\n        let result = f(self.1.unpack());\r\n        Backed(self.0, result)\r\n    }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n#42950 ([play](https://play.rust-lang.org/?version=stable&mode=debug&edition=2015&gist=50cfbd5b6460f6bdd66545913bef70bf)):\r\n\r\n<details>\r\n<summary>Click to expand the code for minimized example </summary>\r\n\r\n```rust\r\nstruct D;\r\n\r\ntrait Tr {\r\n    type It;\r\n    fn foo(self) -> Option<Self::It>;\r\n}\r\n\r\nimpl<'a> Tr for &'a D {\r\n    type It = ();\r\n    fn foo(self) -> Option<()> { None }\r\n}\r\n\r\nfn run<F>(f: F)\r\n    where for<'a> &'a D: Tr,\r\n          F: Fn(<&D as Tr>::It),\r\n{\r\n    let d = &D;\r\n    while let Some(i) = d.foo() {\r\n        f(i);\r\n    }\r\n}\r\n\r\nfn main() {\r\n    run(|_| {});\r\n}\r\n```\r\n\r\n * This one (and #29997) are potentially different/interesting because it has the for<'a> ... on the left-hand side of a constraint, where for<'a> &'a D: Tr; most of the other examples have it on the right-hand side\r\n\r\n</details>\r\n\r\n#33364 ([play](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=c37d8a27f2b3655d93c5fc9aae8dc1d8)):\r\n\r\n<details>\r\n<summary>Click to expand the code for minimized example </summary>\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\n\r\ntrait Foo<'a> {\r\n    type Item;\r\n    fn consume<F>(self, f: F) where F: Fn(Self::Item);\r\n}\r\nstruct Consume<A>(PhantomData<A>);\r\n\r\nimpl<'a, A:'a> Foo<'a> for Consume<A> {\r\n    type Item = &'a A;\r\n\r\n    fn consume<F>(self, _f: F) where F: Fn(Self::Item) {\r\n        if blackbox() {\r\n            _f(any()); // Gotta keep this (1.)\r\n        }\r\n    }\r\n}\r\n\r\n#[derive(Clone)]\r\nstruct Wrap<T> { foo: T }\r\n\r\nimpl<T: for <'a> Foo<'a>> Wrap<T> {\r\n    fn consume<F>(self, f: F) where F: for <'b> Fn(<T as Foo<'b>>::Item) {\r\n        self.foo.consume(f);\r\n    }\r\n}\r\n\r\nfn main() {\r\n    // This works\r\n    Consume(PhantomData::<u32>).consume(|item| { let _a = item; });\r\n\r\n    // This does not (but is only noticed if you call the closure).\r\n    let _wrap = Wrap { foo: Consume(PhantomData::<u32>,) };\r\n    _wrap.consume(|item| { let _a = item; }); // Gotta keep this (2.)\r\n}\r\n\r\npub static mut FLAG: bool = false;\r\nfn blackbox() -> bool { unsafe { FLAG } }\r\nfn any<T>() -> T { loop { } }\r\n```\r\n\r\n</details>\r\n\r\nhttps://github.com/rust-lang/rust/issues/30860#issuecomment-171075273 ([play](https://play.rust-lang.org/?version=stable&mode=debug&edition=2015&gist=1412674b2faf0aae78748cec7100c121)):\r\n\r\n<details>\r\n<summary>Click to expand the code for minimized example </summary>\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\n\r\n// Borrowing encoding of paramaterized types from\r\n// https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md#encoding-higher-kinded-types\r\n\r\ntrait TypeWithLifetime<'a> {\r\n    type Type: Copy;\r\n}\r\n\r\n// type At<'a,T> where T: TypeWithLifetime<'a> = T::Type;\r\n\r\nstruct Str;\r\n\r\nimpl<'a> TypeWithLifetime<'a> for Str {\r\n    type Type = &'a str;\r\n}\r\n    \r\ntrait Consumer<T> where T: for<'a> TypeWithLifetime<'a> {\r\n    fn accept(&mut self, arg: <T as TypeWithLifetime>::Type);\r\n}\r\n\r\nimpl Consumer<Str> for String {\r\n    fn accept(&mut self, arg: &str) { self.push_str(arg) }\r\n}\r\n\r\nstruct FilterConsumer<F,T,C> {\r\n    function: F,\r\n    consumer: C,\r\n    phantom: PhantomData<T>,\r\n}\r\n\r\nimpl<F,T,C> Consumer<T> for FilterConsumer<F,T,C> where F: Fn(<T as TypeWithLifetime>::Type) -> bool, T: for<'a> TypeWithLifetime<'a>, C: Consumer<T> {\r\n    fn accept(&mut self, arg: <T as TypeWithLifetime>::Type) {\r\n        if (self.function)(arg) { self.consumer.accept(arg) }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut consumer = FilterConsumer{\r\n        function: |x:<Str as TypeWithLifetime>::Type| x.chars().all(char::is_alphabetic),\r\n        consumer: String::new(),\r\n        phantom: PhantomData,\r\n    };\r\n    consumer.accept(\"hi\");\r\n}\r\n```\r\n\r\n</details>\r\n\r\n#29997 ([play](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=3e402f588a5ea5e0b086a6f68ea39741)):\r\n\r\n<details>\r\n<summary>Click to expand the code for minimized #29997 </summary>\r\n\r\n```rust\r\ntrait Mirror { type Image; }\r\nimpl<T> Mirror for T { type Image = T; }\r\n\r\nfn test<L,T>(l: L) where L: FnOnce(Option<<&T as Mirror>::Image>),\r\n                         for<'a> &'a T: Mirror\r\n{ l(None); }\r\nfn main() {\r\n    test::<_,u8>(|_| {});\r\n}\r\n```\r\n\r\n * This one (and #42950) are potentially different/interesting because it has the for<'a> ... on the left-hand side of a constraint, where for<'a> &'a D: Tr; most of the other examples have it on the right-hand side\r\n\r\n\r\n</details>\r\n\r\n#68578 ([play](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=69b21f8d609b6c3a57b939e241e289dd)):\r\n\r\n<details>\r\n<summary>Click to expand the code for minimized example </summary>\r\n\r\n```rust\r\ntrait Trait { type Resources: Resources; }\r\nimpl Trait for () {\r\n    type Resources = usize;\r\n}\r\n\r\n\r\ntrait ResourceFamily<'a> { type Output; }\r\n\r\nstruct UsizeResourceFamily;\r\nimpl<'a> ResourceFamily<'a> for UsizeResourceFamily {\r\n    type Output = &'a usize;\r\n}\r\n\r\ntrait Resources { type Family: for<'a> ResourceFamily<'a>; }\r\nimpl Resources for usize {\r\n    type Family = UsizeResourceFamily;\r\n}\r\n\r\nfn test<T: Trait>() {\r\n    let _: Box<dyn Fn(&mut <<<T as Trait>::Resources as Resources>::Family as ResourceFamily>::Output)> = Box::new(|_| {});\r\n}\r\n\r\nfn main() {\r\n    test::<()>();\r\n}\r\n```\r\n\r\n</details>\r\n\r\n#70120\r\n\r\n(needs its minimized example to be transcribed...)\r\n\r\n#70243", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62529/timeline", "performed_via_github_app": null, "state_reason": "completed"}