{"url": "https://api.github.com/repos/rust-lang/rust/issues/53590", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53590/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53590/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53590/events", "html_url": "https://github.com/rust-lang/rust/issues/53590", "id": 352814625, "node_id": "MDU6SXNzdWUzNTI4MTQ2MjU=", "number": 53590, "title": "incremental: hash items' source tokens to generate DefId's.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-08-22T06:05:45Z", "updated_at": "2023-04-05T17:42:28Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "We should strive to handle the \"only touched one item\" case *very well*, which means *either* knowing the exact modified range, *or inferring it* through a series of heuristics.\r\n\r\nThe current `DefPath` machinery doesn't know how to properly understand things like e.g. `impl`s haven't changed, and would assume that adding an impl invalidates later ones in the same module.\r\n\r\nIf we *only* apply the existing machinery between the \"leftover\" old and new items that didn't have a match in their \"source tokens hash\", we should be able to get overall more consistent `DefId` matches, even in trickier situations where, for example, the whole file was moved around.\r\n\r\nOriginal source could also be used, but ignoring whitespace & comments seems useful.\r\n\r\n<hr/>\r\n\r\nOne way I can see us proceeding is by gathering some statistics of the hit/miss rate of this scheme for typical editing scenarios, and the cost of actually doing the hashing.\r\n\r\nWe can probably compute the hash for each `Item` after finishing parsing it, from its `tokens` field (which is there for proc macros, but it should be fine to reuse for our purposes).\r\n\r\ncc @nikomatsakis @michaelwoerister \n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":null}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53590/timeline", "performed_via_github_app": null, "state_reason": null}