{"url": "https://api.github.com/repos/rust-lang/rust/issues/108932", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108932/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108932/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108932/events", "html_url": "https://github.com/rust-lang/rust/issues/108932", "id": 1616775727, "node_id": "I_kwDOAAsO6M5gXgov", "number": 108932, "title": "Rust match bound non-exhaustive patterns when all possible patterns for `char` are handled", "user": {"login": "Arthurdw", "id": 38541241, "node_id": "MDQ6VXNlcjM4NTQxMjQx", "avatar_url": "https://avatars.githubusercontent.com/u/38541241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arthurdw", "html_url": "https://github.com/Arthurdw", "followers_url": "https://api.github.com/users/Arthurdw/followers", "following_url": "https://api.github.com/users/Arthurdw/following{/other_user}", "gists_url": "https://api.github.com/users/Arthurdw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arthurdw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arthurdw/subscriptions", "organizations_url": "https://api.github.com/users/Arthurdw/orgs", "repos_url": "https://api.github.com/users/Arthurdw/repos", "events_url": "https://api.github.com/users/Arthurdw/events{/privacy}", "received_events_url": "https://api.github.com/users/Arthurdw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1976249039, "node_id": "MDU6TGFiZWwxOTc2MjQ5MDM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-patterns", "name": "A-patterns", "color": "f7e101", "default": false, "description": "Relating to patterns and pattern matching"}, {"id": 1976249438, "node_id": "MDU6TGFiZWwxOTc2MjQ5NDM4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-exhaustiveness-checking", "name": "A-exhaustiveness-checking", "color": "f7e101", "default": false, "description": "Relating to exhaustiveness / usefulness checking of patterns"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-09T09:21:36Z", "updated_at": "2023-04-05T17:25:33Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nfn main() {\r\n    let val = \"(hello({()}))\";\r\n    let mut destruct = Vec::new();\r\n\r\n    for c in val.chars() {\r\n        match c {\r\n            sel @ ('(' | '{' | '[') => destruct.push(match sel {\r\n                // If I'm correct, the only possible value `sel` can have here should be any of these 3\r\n                // Yet rust wants me to add a catch-all arm\r\n                '(' => ')',\r\n                '{' => '}',\r\n                '[' => ']'\r\n            }),\r\n            sel @ (')' | '}' | ']') => if destruct.len() > 0 && *destruct.last().unwrap() == sel { destruct.pop().unwrap(); },\r\n            _ => ()\r\n        }\r\n    }\r\n\r\n    println!(\"{}\", destruct.len() == 0);\r\n}\r\n```\r\n\r\nI expected to see this happen: \r\nNo error to occur and that it compiles peacefully\r\n\r\nInstead, this happened:\r\n\r\n```\r\nerror[E0004]: non-exhaustive patterns: `'\\0'..='\\''`, `')'..='Z'`, `'\\\\'..='z'` and 2 more not covered\r\n --> src\\main.rs:7:60\r\n  |\r\n7 |             sel @ ('(' | '{' | '[') => destruct.push(match sel {\r\n  |                                                            ^^^ patterns `'\\0'..='\\''`, `')'..='Z'`, `'\\\\'..='z'` and 2 more not covered\r\n  |\r\n  = note: the matched value is of type `char`\r\nhelp: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\r\n  |\r\n12~                 '[' => ']',\r\n13+                 _ => todo!()\r\n  |\r\n\r\nFor more information about this error, try `rustc --explain E0004`.\r\nerror: could not compile `bug-match` due to previous error\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.67.1 (d5a82bbd2 2023-02-07)\r\nbinary: rustc\r\ncommit-hash: d5a82bbd26e1ad8b7401f6a718a9c57c96905483\r\ncommit-date: 2023-02-07\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.67.1\r\nLLVM version: 15.0.6\r\n```\r\n\r\nAlso happens on:\r\n```\r\nrustc 1.70.0-nightly (900c35403 2023-03-08)\r\nbinary: rustc\r\ncommit-hash: 900c3540378c8422b8087ffa3db60fa6c8abfcad\r\ncommit-date: 2023-03-08\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.70.0-nightly\r\nLLVM version: 15.0.7\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108932/timeline", "performed_via_github_app": null, "state_reason": null}