{"url": "https://api.github.com/repos/rust-lang/rust/issues/67229", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67229/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67229/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67229/events", "html_url": "https://github.com/rust-lang/rust/issues/67229", "id": 536463442, "node_id": "MDU6SXNzdWU1MzY0NjM0NDI=", "number": 67229, "title": "Shared borrow of the data inside a mutex", "user": {"login": "Luro02", "id": 24826124, "node_id": "MDQ6VXNlcjI0ODI2MTI0", "avatar_url": "https://avatars.githubusercontent.com/u/24826124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Luro02", "html_url": "https://github.com/Luro02", "followers_url": "https://api.github.com/users/Luro02/followers", "following_url": "https://api.github.com/users/Luro02/following{/other_user}", "gists_url": "https://api.github.com/users/Luro02/gists{/gist_id}", "starred_url": "https://api.github.com/users/Luro02/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Luro02/subscriptions", "organizations_url": "https://api.github.com/users/Luro02/orgs", "repos_url": "https://api.github.com/users/Luro02/repos", "events_url": "https://api.github.com/users/Luro02/events{/privacy}", "received_events_url": "https://api.github.com/users/Luro02/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-11T15:58:53Z", "updated_at": "2019-12-11T17:18:59Z", "closed_at": "2019-12-11T17:18:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I would like to borrow the internal data of the mutex (immutable), therefore it would be nice to have such a function:\r\n\r\n```rust\r\nimpl<T> Mutex<T> {\r\n    fn get_ref(&self) -> LockResult<&T> {\r\n        // The data is borrowed immutably, so\r\n        // there's no need to lock the inner mutex.\r\n        let data = unsafe { &*self.data.get() };\r\n        poison::map_result(self.poison.borrow(), |_| data)\r\n    }\r\n}\r\n```\r\n\r\n# Concerns\r\nDoes this cause any problems with multiple threads accessing the data?\r\nI think this can only cause problems, if there is already an exclusive borrow in use.\r\n\r\n# Benefits\r\nHaving this function could allow implementing PartialEq (and other traits) on types, that use a Mutex\r\n\r\n```rust\r\nstruct UsesMutex {\r\n   data: Mutex<usize>\r\n}\r\n\r\nimpl PartialEq for UsesMutex {\r\n    fn eq(&self, other: &Self) -> bool {\r\n         self.data.get_ref() == other.get_ref()\r\n    }\r\n}\r\n```", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67229/timeline", "performed_via_github_app": null, "state_reason": "completed"}