{"url": "https://api.github.com/repos/rust-lang/rust/issues/59229", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59229/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59229/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59229/events", "html_url": "https://github.com/rust-lang/rust/issues/59229", "id": 421793387, "node_id": "MDU6SXNzdWU0MjE3OTMzODc=", "number": 59229, "title": "Reading a CString safely without overhead from Read", "user": {"login": "DevQps", "id": 46896178, "node_id": "MDQ6VXNlcjQ2ODk2MTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46896178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevQps", "html_url": "https://github.com/DevQps", "followers_url": "https://api.github.com/users/DevQps/followers", "following_url": "https://api.github.com/users/DevQps/following{/other_user}", "gists_url": "https://api.github.com/users/DevQps/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevQps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevQps/subscriptions", "organizations_url": "https://api.github.com/users/DevQps/orgs", "repos_url": "https://api.github.com/users/DevQps/repos", "events_url": "https://api.github.com/users/DevQps/events{/privacy}", "received_events_url": "https://api.github.com/users/DevQps/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-03-16T10:34:16Z", "updated_at": "2020-06-05T05:28:03Z", "closed_at": "2020-06-05T05:28:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello everyone,\r\n\r\nWhen I was inspecting libflate for unsafe code I found [this piece of code](https://github.com/sile/libflate/blob/a7cd7995458ace28ed388ba0d1374bfdc4b495e5/src/gzip.rs):\r\n\r\n```\r\nfn read_cstring<R>(mut reader: R) -> io::Result<CString>\r\nwhere\r\n    R: io::Read,\r\n{\r\n    let mut buf = Vec::new();\r\n    loop {\r\n        let b = reader.read_u8()?;\r\n        if b == 0 {\r\n            return Ok(unsafe { CString::from_vec_unchecked(buf) });\r\n        }\r\n        buf.push(b);\r\n    }\r\n}\r\n```\r\n\r\n## The Problem\r\nIf I am correct and didn't miss anything **this function is completely safe**. However because there is (for as far as I know) no functionality that can safely read a ```CString``` without performance overhead, the author probably felt forced to implement it himself.\r\n\r\nI think reading ```CStrings``` from an object that implements ```Read``` is a pretty common operation when handling binary files, so it might be good to provide functionality in the standard library for doing so without sacrificing performance.\r\n\r\nCurrently two solutions have been presented.\r\n\r\n## Solution 1: Add a ```CString::from_reader``` method\r\n\r\nOne solution would be to add a ```CString::from_reader``` method as follows:\r\n\r\n```\r\nfn CString::from_reader(mut reader: impl Read) -> Result<CString, std::io::Error>\r\n{\r\n    let mut buffer = Vec::new();\r\n    let mut character: u8 = 0;\r\n    \r\n    loop {\r\n        let slice = std::slice::from_mut(&mut character);\r\n        reader.read_exact(slice)?;\r\n    \r\n        // Check if a null character has been found, if so return the Vec as CString.\r\n        if character == 0 {\r\n            return Ok(unsafe { CString::from_vec_unchecked(buffer) });\r\n        }\r\n            \r\n        // Push a new non-null character.\r\n        buffer.push(character);\r\n    }\r\n}\r\n```\r\n\r\nPro's and Con's: \r\n+ Pro: ```CStrings``` can be read using a simple one liner if the source being read implements ```Read```. &[u8] also implements ```Read``` so I think this is already quite flexible.\r\n- Con: It only works when reading from objects that impl ```Read```. I am not sure if there are any scenario's on which this would not be sufficient?\r\n\r\n[-> Playground example](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=4e37f5420459298df8ab7c89f1697c83)\r\n\r\n## Solution 2: Add way to convert from ```Vec<NonZeroU8>``` to ```CString```\r\nCredits to @alex\r\n\r\nAnother solution would be to add a conversion method (by for example using the ```From``` trait) for ```Vec<NonZeroU8>``` to ```CString```. Since we can be sure that no zero characters are included in the Vector we could perform a cheap conversion. I took an attempt to implementing ```From``` for ```CString``` but it might be improved.\r\n\r\n```\r\nimpl From<Vec<NonZeroU8>> for CString\r\n{\r\n    fn from(vector: Vec<NonZeroU8>) -> Self\r\n    {\r\n        unsafe {\r\n            let vector = std::mem::transmute::<Vec<NonZeroU8>, Vec<u8>>(vector);\r\n            CString::from_vec_unchecked(vector)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nPro's and Con's:\r\n+ Pro: Everything that can be converted to a ```Vec<NonZeroU8>``` can be safely converted into a ```CString```.\r\n- Con: People would still have to read bytes from a ```Read````-able object manually and converting them into a ```Vec<NonZeroU8>``` in order for this to work.\r\n\r\n[-> Playground example](https://play.rust-lang.org/?version=stable&mode=release&edition=2018&gist=3a4a90b19e7e7d3fdd80f9f1f48edeb9)\r\n\r\n\r\nI wonder what you all think of this proposal and whether or not it could be improved.", "closed_by": {"login": "DevQps", "id": 46896178, "node_id": "MDQ6VXNlcjQ2ODk2MTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46896178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevQps", "html_url": "https://github.com/DevQps", "followers_url": "https://api.github.com/users/DevQps/followers", "following_url": "https://api.github.com/users/DevQps/following{/other_user}", "gists_url": "https://api.github.com/users/DevQps/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevQps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevQps/subscriptions", "organizations_url": "https://api.github.com/users/DevQps/orgs", "repos_url": "https://api.github.com/users/DevQps/repos", "events_url": "https://api.github.com/users/DevQps/events{/privacy}", "received_events_url": "https://api.github.com/users/DevQps/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59229/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59229/timeline", "performed_via_github_app": null, "state_reason": "completed"}