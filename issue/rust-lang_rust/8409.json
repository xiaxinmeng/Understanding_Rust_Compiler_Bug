{"url": "https://api.github.com/repos/rust-lang/rust/issues/8409", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/8409/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/8409/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/8409/events", "html_url": "https://github.com/rust-lang/rust/issues/8409", "id": 17843397, "node_id": "MDU6SXNzdWUxNzg0MzM5Nw==", "number": 8409, "title": "Request for feature: unsafe as a qualifier for structure fields", "user": {"login": "mstewartgallus", "id": 4070335, "node_id": "MDQ6VXNlcjQwNzAzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4070335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstewartgallus", "html_url": "https://github.com/mstewartgallus", "followers_url": "https://api.github.com/users/mstewartgallus/followers", "following_url": "https://api.github.com/users/mstewartgallus/following{/other_user}", "gists_url": "https://api.github.com/users/mstewartgallus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstewartgallus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstewartgallus/subscriptions", "organizations_url": "https://api.github.com/users/mstewartgallus/orgs", "repos_url": "https://api.github.com/users/mstewartgallus/repos", "events_url": "https://api.github.com/users/mstewartgallus/events{/privacy}", "received_events_url": "https://api.github.com/users/mstewartgallus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-08-09T01:49:25Z", "updated_at": "2014-05-06T04:56:46Z", "closed_at": "2014-05-06T04:56:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When wrapping low-level, and unsafe APIs like OpenGL ES there is often a need to provide fallbacks to unsafety. Currently, one has to create private fields, and a large amount of ugly conversion functions in the style of `unsafe fn raw_handle(&self)->gl::GLuint`, and `unsafe fn from_raw_handle(gl::GLuint)->Attribute<State, T>`. I would prefer not to.\n\nThe best existing workaround would probable be to generate these conversion functions using a macro that would be used like `unsafe_field!(raw_handle, Attribute<State, T>)`. I am not sure how best to create such a macro though.\n\nI feel a nice solution to this problem would be the ability to tag structure fields with the unsafe keyword so that they could only be accessed within an unsafe block.\n\nThe syntax `pub struct Attribute<'self, S, T> { unsafe context: &'self Context, unsafe contents: gl::GLuint }` seems intuitive to me but does not generalize nicely to enumerations, or tuple structs.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/8409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/8409/timeline", "performed_via_github_app": null, "state_reason": "completed"}