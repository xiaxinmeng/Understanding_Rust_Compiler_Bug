{"url": "https://api.github.com/repos/rust-lang/rust/issues/71387", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71387/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71387/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71387/events", "html_url": "https://github.com/rust-lang/rust/issues/71387", "id": 604069399, "node_id": "MDU6SXNzdWU2MDQwNjkzOTk=", "number": 71387, "title": "Collect to slice", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166999014, "node_id": "MDU6TGFiZWwxNjY5OTkwMTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-collections", "name": "A-collections", "color": "f7e101", "default": false, "description": "Area: std::collections."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-21T15:02:22Z", "updated_at": "2020-04-21T18:13:26Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This is an enhancement suggestion. Beside the current collect() to collection like Vec, Hash, etc, and the future collect to array:\r\n\r\nhttps://github.com/rust-lang/rust/pull/69985\r\n\r\nI find it useful to also collect to a slice when I don't know at compile-time the exact length of the resulting array, but I know an upper bound of its length.\r\n\r\nI have adapted the following code from this crate:\r\nhttps://github.com/kchmck/collect_slice\r\nhttps://crates.io/crates/collect_slice\r\n\r\n```\r\ntrait CollectSlice<'a>: Iterator {\r\n    fn inner(&mut self, slice: &'a mut [Self::Item]) -> &'a [Self::Item];\r\n    fn inner_mut(&mut self, slice: &'a mut [Self::Item]) -> &'a mut [Self::Item];\r\n\r\n    fn collect_slice(&mut self, slice: &'a mut [Self::Item]) -> &'a [Self::Item] {\r\n        let result = self.inner(slice);\r\n        assert!(self.next().is_none());\r\n        result\r\n    }\r\n\r\n    fn collect_slice_mut(&mut self, slice: &'a mut [Self::Item]) -> &'a mut [Self::Item] {\r\n        let result = self.inner_mut(slice);\r\n        assert!(self.next().is_none());\r\n        result\r\n    }\r\n}\r\n\r\nimpl<I: ?Sized> CollectSlice<'a> for I where I: Iterator {\r\n    fn inner(&mut self, slice: &'a mut [Self::Item]) -> &'a [Self::Item] {\r\n        let count = slice.iter_mut().zip(self).fold(0, |count, (dest, item)| {\r\n            *dest = item;\r\n            count + 1\r\n        });\r\n        &slice[.. count]\r\n    }\r\n\r\n    fn inner_mut(&mut self, slice: &'a mut [Self::Item]) -> &'a mut [Self::Item] {\r\n        let count = slice.iter_mut().zip(self).fold(0, |count, (dest, item)| {\r\n            *dest = item;\r\n            count + 1\r\n        });\r\n        &mut slice[.. count]\r\n    }\r\n}\r\n```\r\n\r\nThis code should be improved and simplified. And as in Issue #69985 we could return a Result<> instead, and remove the asserts.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71387/timeline", "performed_via_github_app": null, "state_reason": null}