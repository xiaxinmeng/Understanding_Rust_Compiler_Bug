{"url": "https://api.github.com/repos/rust-lang/rust/issues/30963", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/30963/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/30963/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/30963/events", "html_url": "https://github.com/rust-lang/rust/issues/30963", "id": 127051071, "node_id": "MDU6SXNzdWUxMjcwNTEwNzE=", "number": 30963, "title": "Better way of discussing memory safety than \"segfaults\"", "user": {"login": "lambda", "id": 37398, "node_id": "MDQ6VXNlcjM3Mzk4", "avatar_url": "https://avatars.githubusercontent.com/u/37398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda", "html_url": "https://github.com/lambda", "followers_url": "https://api.github.com/users/lambda/followers", "following_url": "https://api.github.com/users/lambda/following{/other_user}", "gists_url": "https://api.github.com/users/lambda/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda/subscriptions", "organizations_url": "https://api.github.com/users/lambda/orgs", "repos_url": "https://api.github.com/users/lambda/repos", "events_url": "https://api.github.com/users/lambda/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-01-16T20:25:54Z", "updated_at": "2016-02-06T23:07:31Z", "closed_at": "2016-02-06T23:07:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As pointed out in [a thread on users.rlo](https://users.rust-lang.org/t/rust-guarantees-no-segfaults-with-only-safe-code-but-it-segfaults-stack-overflow/4305), language in the documentation and website about preventing segfaults or preventing segfaults outside of unsafe code can be misleading. The Rust compiler uses guard pages to protect against stack overflow, and will hopefully eventually use stack probes to make this sound (#16012). However, this means that it's possible to get a stack overflow using 100% safe code:\n\n```\nfn main() {\n    let a = [0; 999999999];\n}\n```\n\nThis is not a theoretical concern; it has happened in practice using the musl target which has a small stack size, while using [`std::io::copy` which copies a file using a 64k stack allocated buffer](https://github.com/rust-lang/rust/blob/05aeeb314d0559c2711168cee7655f38ed18511c/src/libstd/io/util.rs#L46), in tailhook/vagga#116.\n\nIt seems that in a lot of discussion of Rust, \"no segfaults\" is used as a proxy for memory safety. However, it's not a very good proxy; there is both the possibility for segfaults without memory safety, like a stack overflow, and the bigger danger of memory unsafety is generally silent corruption of memory, not segfaults; segfaults are just an implementation specific and visible symptom of memory unsafety.\n\nThe book says that if you see a segfault \"you can be sure the cause is related to something marked `unsafe`\" (recently changed in #30819, but still not accurate, as demonstrated by the above code that segfaults without `unsafe`). The front page of the website says \"prevents segfaults,\" which while that can be true as it doesn't say it prevents all segfaults, could mislead someone into thinking that it does.\n\nI don't necessarily have a better phrasing for either the book or the website; explaining what is and is not considered memory safe is somewhat nuanced, and hard to do in a single sentence. But I think that whatever the phrasing is, \"segfault\" should probably not be used as it is misleading.\n", "closed_by": {"login": "lambda", "id": 37398, "node_id": "MDQ6VXNlcjM3Mzk4", "avatar_url": "https://avatars.githubusercontent.com/u/37398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda", "html_url": "https://github.com/lambda", "followers_url": "https://api.github.com/users/lambda/followers", "following_url": "https://api.github.com/users/lambda/following{/other_user}", "gists_url": "https://api.github.com/users/lambda/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda/subscriptions", "organizations_url": "https://api.github.com/users/lambda/orgs", "repos_url": "https://api.github.com/users/lambda/repos", "events_url": "https://api.github.com/users/lambda/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/30963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/30963/timeline", "performed_via_github_app": null, "state_reason": "completed"}