{"url": "https://api.github.com/repos/rust-lang/rust/issues/91698", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91698/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91698/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91698/events", "html_url": "https://github.com/rust-lang/rust/issues/91698", "id": 1075237588, "node_id": "I_kwDOAAsO6M5AFtLU", "number": 91698, "title": "Confusing `is required to live as long as 'static` compiler error message involving trait return", "user": {"login": "indygreg", "id": 342993, "node_id": "MDQ6VXNlcjM0Mjk5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/342993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/indygreg", "html_url": "https://github.com/indygreg", "followers_url": "https://api.github.com/users/indygreg/followers", "following_url": "https://api.github.com/users/indygreg/following{/other_user}", "gists_url": "https://api.github.com/users/indygreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/indygreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/indygreg/subscriptions", "organizations_url": "https://api.github.com/users/indygreg/orgs", "repos_url": "https://api.github.com/users/indygreg/repos", "events_url": "https://api.github.com/users/indygreg/events{/privacy}", "received_events_url": "https://api.github.com/users/indygreg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-12-09T07:22:25Z", "updated_at": "2021-12-21T22:11:06Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following reproduce case (which could almost certainly be reduced further) demonstrates what I think is a confusing, not-very-actionable error message which fails to live up to Rust's typically high bar for error message quality.\r\n\r\nFirst, the error message:\r\n\r\n```\r\nerror[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\r\n  --> src/lib.rs:55:35\r\n   |\r\n55 |     pub async fn async_entrypoint(&self, writer: &Writer, threads: usize) -> Result<(), String> {\r\n   |                                   ^^^^^\r\n   |                                   |\r\n   |                                   this data with an anonymous lifetime `'_`...\r\n   |                                   ...is captured here...\r\n...\r\n58 |                 .map(|reader| writer.write_path(reader.reader)),\r\n   |                                                 ------------- ...and is required to live as long as `'static` here\r\n\r\nFor more information about this error, try `rustc --explain E0759`.\r\nerror: could not compile `static-bad-error` due to previous error\r\n```\r\n\r\nThe reason I find this error confusing is:\r\n\r\na) `'static` appears nowhere in this code.\r\nb) It doesn't tell me where that `'static` lifetime requirement is coming from.\r\n\r\nIn other error messages related to lifetimes, the compiler prints out additional context to tell me where lifetime constraints are coming from. Here, we get nothing and I'm left scratching my head.\r\n\r\nThat is, unless I run `rustc --explain E0759`, which tells me this has something to do with return types involving a trait and `'static` lifetimes. So that actually leads me somewhere useful.\r\n\r\nHowever, the rub is that Rust's default compiler error messages are usually so good that I've been conditioned to ignore those `rustc --explain` suggestions because the error message itself usually surfaces sufficient context. I (embarrassingly) probably wasted >1 hour trying code variations to make this error go away before running `rustc --explain E0759`!\r\n\r\nPotentially adding to the confusion was the error was introduced when I added `async fn async_entrypoint()`. So I thought the error must have something to do with `async` or that specific function. The code compiled fine before I added this function, so I thought all lifetime annotations and such on the functions it depends on were fine. However, something about `async` or this function appears to have tickled this E0759 issue. I'm honestly still unsure what.\r\n\r\nPotential solutions that would make this error message better:\r\n\r\na) Tell me where the implicit `'static` requirement is coming from. In this case, I have multiple functions in the call chain that could be the source of the error. Which one is the problem?\r\nb) Potentially suggest a workaround to avoid `'static` requirements. Should I wrap in `Box<T>`? Should I add a `+ '_` or `+ 'a` bound?\r\n\r\n```rust\r\n// Requires 'futures = \"0.3\"' in Cargo.toml.\r\nuse {\r\n    futures::{AsyncRead, StreamExt, TryStreamExt},\r\n    std::pin::Pin,\r\n};\r\n\r\npub struct Writer {}\r\n\r\nimpl Writer {\r\n    async fn write_path(\r\n        &self,\r\n        reader: Pin<Box<dyn AsyncRead + Send>>,\r\n    ) -> Result<u64, &'static str> {\r\n        todo!()\r\n    }\r\n}\r\n\r\npub struct Reader<'a> {\r\n    pub reader: Pin<Box<dyn AsyncRead + Send + 'a>>,\r\n}\r\n\r\n#[derive(Debug, Default)]\r\npub struct MyStruct {\r\n    els: Vec<String>,\r\n}\r\n\r\nimpl MyStruct {\r\n    pub fn box_iter(&self) -> Box<dyn Iterator<Item = &'_ str> + Send + '_> {\r\n        Box::new(self.els.iter().map(|x| x.as_str()))\r\n    }\r\n\r\n    pub fn reader_from_els_iter(&self) -> impl AsyncRead + '_ {\r\n        futures::stream::iter(self.box_iter().map(|p| Ok(p.to_string()))).into_async_read()\r\n    }\r\n\r\n    pub fn iter_of_readers(&self) -> impl Iterator<Item = Reader<'_>> + '_ {\r\n        std::iter::once(Reader {\r\n            reader: Box::pin(self.reader_from_els_iter()),\r\n        })\r\n    }\r\n\r\n    pub async fn async_entrypoint(&self, writer: &Writer, threads: usize) -> Result<(), String> {\r\n        let mut fs = futures::stream::iter(\r\n            self.iter_of_readers()\r\n                .map(|reader| writer.write_path(reader.reader)),\r\n        )\r\n        .buffer_unordered(threads);\r\n\r\n        while let Some(res) = fs.next().await {\r\n            res?;\r\n        }\r\n\r\n        Ok(())\r\n    }\r\n}\r\n```\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":null}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91698/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91698/timeline", "performed_via_github_app": null, "state_reason": null}