{"url": "https://api.github.com/repos/rust-lang/rust/issues/80955", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80955/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80955/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80955/events", "html_url": "https://github.com/rust-lang/rust/issues/80955", "id": 784543995, "node_id": "MDU6SXNzdWU3ODQ1NDM5OTU=", "number": 80955, "title": "diagnostics could be improved when creating references inside structs conditionally ", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-01-12T19:49:50Z", "updated_at": "2023-04-05T17:30:24Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "````rust\r\npub struct S {\r\n    left: String,\r\n    right: String,\r\n}\r\n\r\nimpl S {\r\n    pub fn new<LC: ToString, RC: ToString>(left: &LC, right: &RC) -> Self {\r\n        Self {\r\n            left: left.to_string(),\r\n            right: right.to_string(),\r\n        }\r\n    }\r\n}\r\n\r\npub fn main() {\r\n    let x = 1;\r\n    let _ = &S::new(\r\n        &\"\",\r\n        if x == 1 {\r\n            &format!(\"{}\", x)\r\n        } else {\r\n            &format!(\"{} {}\", x, x)\r\n        },\r\n    );\r\n}\r\n````\r\nThis produces one error for each of the `&format!()`s \r\n\r\n````\r\n Compiling playground v0.0.1 (/playground)\r\nerror[E0716]: temporary value dropped while borrowed\r\n  --> src/main.rs:20:14\r\n   |\r\n17 |     let _ = &S::new(\r\n   |              ------ borrow later used by call\r\n...\r\n20 |             &format!(\"{}\", x)\r\n   |              ^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\r\n21 |         } else {\r\n   |         - temporary value is freed at the end of this statement\r\n   |\r\n   = note: consider using a `let` binding to create a longer lived value\r\n   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror[E0716]: temporary value dropped while borrowed\r\n  --> src/main.rs:22:14\r\n   |\r\n17 |     let _ = &S::new(\r\n   |              ------ borrow later used by call\r\n...\r\n22 |             &format!(\"{} {}\", x, x)\r\n   |              ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\r\n23 |         },\r\n   |         - temporary value is freed at the end of this statement\r\n   |\r\n   = note: consider using a `let` binding to create a longer lived value\r\n   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror: aborting due to 2 previous errors\r\n````\r\n\r\nThe suggested solution seems kinda overkill when we could simply move the `&`  from in front of the `format()` in front of the `if`\r\nThis looks very strange but I think it might be the most straightforward solution:\r\n\r\n````rust\r\npub fn main() {\r\n    let x = 1;\r\n    let _ = &S::new(\r\n        &\"\",\r\n        &if x == 1 { // moved here\r\n            format!(\"{}\", x) // from here \r\n        } else {\r\n            format!(\"{} {}\", x, x) // and here\r\n        },\r\n    );\r\n}\r\n````", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80955/timeline", "performed_via_github_app": null, "state_reason": null}