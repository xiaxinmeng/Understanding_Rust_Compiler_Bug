{"url": "https://api.github.com/repos/rust-lang/rust/issues/62408", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62408/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62408/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62408/events", "html_url": "https://github.com/rust-lang/rust/issues/62408", "id": 464620102, "node_id": "MDU6SXNzdWU0NjQ2MjAxMDI=", "number": 62408, "title": "O(1) time {Vec,VecDeque}::truncate for trivial drop types and VecDeque::truncate_front", "user": {"login": "orlp", "id": 202547, "node_id": "MDQ6VXNlcjIwMjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/202547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orlp", "html_url": "https://github.com/orlp", "followers_url": "https://api.github.com/users/orlp/followers", "following_url": "https://api.github.com/users/orlp/following{/other_user}", "gists_url": "https://api.github.com/users/orlp/gists{/gist_id}", "starred_url": "https://api.github.com/users/orlp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orlp/subscriptions", "organizations_url": "https://api.github.com/users/orlp/orgs", "repos_url": "https://api.github.com/users/orlp/repos", "events_url": "https://api.github.com/users/orlp/events{/privacy}", "received_events_url": "https://api.github.com/users/orlp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-05T12:33:05Z", "updated_at": "2020-06-06T04:58:04Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently both `Vec`s and `VecDeque`s `truncate` implementations just call `pop_back()` in a loop. When `std::mem::needs_drop::<T>()` is `false` this is pretty inefficient.\r\n\r\nNow LLVM *does* [optimize away the loop on `-O3` for `Vec::truncate`](https://rust.godbolt.org/z/WBV3MA), however [this does not happen for `VecDeque::truncate`](https://rust.godbolt.org/z/80GGwx).\r\n\r\nDespite [previous complaints](https://github.com/rust-lang/rust/issues/17633#issuecomment-451707138), this exact issue has been [wont-fix](https://github.com/rust-lang/rust/pull/57949#issuecomment-458286725)'d under the unofficial policy that we do not include -O0 exclusive optimizations in rust.\r\n\r\nI would like to re-open the discussion with the following observations, in the hope that @alexcrichton might change his mind:\r\n\r\n1. No matter the optimization level, the optimization *never* happens for `VecDeque::truncate`.\r\n\r\n2. The optimization is not just a constant factor speedup, it's an asymptotic speedup changing an O(n) time operation into O(1) where O(1) could easily be guaranteed. The difference in speed could literally be several orders of magnitude.\r\n\r\n3. The optimizer is always fickle and ever-changing. Someone designing an algorithm using default Rust building blocks needs to rely on at least asymptotic complexities not suddenly regressing due to the optimizer not catching some pattern. Updating your Rust compiler should never have a chance to turn an O(n) algorithm into an O(n^2) one.\r\n\r\n4. It pushes people towards unsafe code. In the linked complaint above the user ended up using the unsafe `set_len` when the safe `truncate` could've exactly done the job.\r\n\r\nIn addition to the above, `VecDeque` has `truncate`, but is missing `truncate_front`. If we make these truncate operations O(1) time it should also get a `truncate_front` operation.\r\n\r\nWithout these changes it is impossible to implement certain algorithms using the default Rust collections for no particular good reason. For example, if I have a `v: VecDeque<f64>` that keeps its elements sorted, it is currently impossible to write a O(log n) time routine that removes all elements less than `x` in `v`. We can find how many elements we need to remove from the front in O(log n) time, but removing them needlessly take O(n) time.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62408/reactions", "total_count": 15, "+1": 10, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 5, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62408/timeline", "performed_via_github_app": null, "state_reason": null}