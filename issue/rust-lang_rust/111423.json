{"url": "https://api.github.com/repos/rust-lang/rust/issues/111423", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111423/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111423/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111423/events", "html_url": "https://github.com/rust-lang/rust/issues/111423", "id": 1703555914, "node_id": "I_kwDOAAsO6M5lijNK", "number": 111423, "title": "Tracking Issue for the experimental `crabi` ABI", "user": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 4288196623, "node_id": "LA_kwDOAAsO6M7_mLAP", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-abi", "name": "A-abi", "color": "f7e101", "default": false, "description": "Area: Concerning the \"application binary interface\" between functions."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-05-10T10:01:33Z", "updated_at": "2023-05-15T11:10:54Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This is a tracking issue for the experimental `crabi` ABI; see https://github.com/rust-lang/rust/pull/105586 and https://github.com/rust-lang/compiler-team/issues/631.\r\nThe feature gate for the issue is `#![feature(crabi)]`.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [ ] Implement the experimental feature\r\n- [ ] Write an RFC precisely specifying the ABI\r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n\r\n- Niches: should we support cases like `Option<bool>` without a separate\r\n  discriminant, or should we (for simplicity) always pass a separate\r\n  discriminant? Likely the latter. However, what about things like `Option<&T>`\r\n  and `Option<NonZeroU32>`, for which Rust guarantees the representation of\r\n  `None`? Those work with the C ABI, and they have to work with crABI, but can\r\n  we make them work with crABI *using the same encoding of `None`*?\r\n- What subset of lifetimes can, and should, we support? We can't enforce them\r\n  cross-language, but they may be useful as an advisory/documentation\r\n  mechanism. Or we could leave them out entirely.\r\n- To what extent should crABI make *any* attempt to specify things that can't\r\n  be enforced, rather than ignoring semantics entirely and *only* specifying\r\n  how types get passed?\r\n- How can we make it easy to support data structures without having to do\r\n  translation from `repr(Rust)` to `repr(crabi)` and have parallel structures?\r\n  Can we make that less painful to express, and ideally mostly free at runtime?\r\n  - Related: how can we handle tuples? Do we need a way to express\r\n    `repr(crabi)` tuples? How can we do that conveniently?\r\n- Should we provide support for extensible enums, such that we don't assume the\r\n  discriminant matches one of the known variants? Would doing so make using\r\n  enums less ergonomic? Could we address that with language changes?\r\n- For handling objects, could we avoid having to pass in-memory function\r\n  pointers via a vtable, and instead reference specific symbols? This wouldn't\r\n  work for generics, though. Can we do any better than a vtable?\r\n- For ranges, should we provide a concrete range type or types, or should we\r\n  defer that and handle ranges as opaque objects or traits?\r\n- Do we get any value out of supporting `()`, other than completeness? Passing\r\n  `()` by value should just be ignored as if it weren't specified. Do we want\r\n  people using pointers to `()`, and do those have any advantage over pointers\r\n  to void?\r\n- Should we do anything special about `i128` and `u128`, or should we just push\r\n  for getting those supported correctly in `extern \"C\"`?\r\n- For generics, such as `Option<u64>` or `Result<u32, ConcreteError>` or\r\n  `[u8; 16]`, does the rule \"all generic parameters must be bound to concrete\r\n  types in the function signature\" suffice, or do we need a more complex rule\r\n  than that?\r\n- Unwinding: The default `extern \"crabi\"` should not support unwind, and most\r\n  languages don't tend to have support for unwinding through C-ABI functions,\r\n  but should we have a `crabi-unwind` variant? Would doing so provide value?\r\n\r\n### Implementation history\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n\r\n- Feature gate: https://github.com/rust-lang/rust/pull/105586", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111423/timeline", "performed_via_github_app": null, "state_reason": null}