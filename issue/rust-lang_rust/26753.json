{"url": "https://api.github.com/repos/rust-lang/rust/issues/26753", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/26753/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/26753/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/26753/events", "html_url": "https://github.com/rust-lang/rust/issues/26753", "id": 92818667, "node_id": "MDU6SXNzdWU5MjgxODY2Nw==", "number": 26753, "title": "#[no_mangle] is silently ignored on generic functions", "user": {"login": "jashank", "id": 422947, "node_id": "MDQ6VXNlcjQyMjk0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/422947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jashank", "html_url": "https://github.com/jashank", "followers_url": "https://api.github.com/users/jashank/followers", "following_url": "https://api.github.com/users/jashank/following{/other_user}", "gists_url": "https://api.github.com/users/jashank/gists{/gist_id}", "starred_url": "https://api.github.com/users/jashank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jashank/subscriptions", "organizations_url": "https://api.github.com/users/jashank/orgs", "repos_url": "https://api.github.com/users/jashank/repos", "events_url": "https://api.github.com/users/jashank/events{/privacy}", "received_events_url": "https://api.github.com/users/jashank/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-07-03T08:09:11Z", "updated_at": "2015-07-04T19:00:46Z", "closed_at": "2015-07-04T19:00:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A grossly simplified illustrative example.\n\nAssume we're in a library crate (I want to get a shared object out of this so I'm using `--crate-type dylib` but this appears to be a problem for the general case), and we have the following items defined.\n\n``` rust\npub enum Action {\n    Thing,\n    OtherThing,\n}\n\npub trait Game {\n    fn legal_action_p(&self, a: &Action) -> bool;\n}\n```\n\nIf we now wish to expose a function that uses a `Game` implementor across the library boundary (if, for example, you wish to `dlopen(3)` then `dlsym(3)` it), one might expect that they could define a trait bound:\n\n``` rust\n#[no_mangle]\npub extern fn decide_action<T: Game>(g: &T) -> () {\n    println!(\"deciding action!\");\n    let a = Action::Thing;\n    g.legal_action_p(&a);\n}\n```\n\n(There's a reason I stuffed a `println!` in there.)\n\nCompile: `rustc testlib.rs --crate-type dylib -g --out-dir target/debug`, then:\n\n```\n$ nm target/debug/libtestlib.so | grep -i decide_action\n00000000003c5110 D _ZN13decide_action15__STATIC_FMTSTR20h722c5e523a62788eMaaE\n```\n\nWhich is, of course, the `println!` format string.  Note a lack of any symbol matching the exact name `decide_action`.\n\nOK, but if we put the `Game` impl in a `Box`:\n\n``` rust\n#[no_mangle]\npub extern fn decide_action(g: &Box<Game>) -> () {\n    println!(\"deciding action!\");\n    let a = Action::Thing;\n    (*g).legal_action_p(&a);\n}\n```\n\nSuddenly, it comes back!\n\n```\n$ nm target/debug/libtestlib.so | grep -i decide_action\n00000000000ad4b0 T decide_action\n00000000000ad4f0 t _ZN13decide_action10__rust_abiE\n00000000003c5120 d _ZN13decide_action15__STATIC_FMTSTR20hbe3d66b5baeedebcsbaE\n```\n\ngah!\n\nThis presents on stable, beta, and nightly.\n\nThis strikes me as a bug, although I'm not sure what in.  I suppose you cannot _really_ enforce traits across the `extern` boundary (although that would be Nice To Have if there's Rust on the other side).  On the other hand, how does a box of trait somehow manage to subvert this?  I supose this is a compiler error, but I'm a bit fuzzy about what the error is (I _guess_ that if `extern fn`, then if trait bound, then fail, else do the `extern fn`).\n\n(As a general note, \"FFI\" from Rust to Rust, where you explicitly want to plug dylibs, is substantially more uncomfortable than expected.)\n", "closed_by": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/26753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/26753/timeline", "performed_via_github_app": null, "state_reason": "completed"}