{"url": "https://api.github.com/repos/rust-lang/rust/issues/48910", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48910/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48910/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48910/events", "html_url": "https://github.com/rust-lang/rust/issues/48910", "id": 304069854, "node_id": "MDU6SXNzdWUzMDQwNjk4NTQ=", "number": 48910, "title": "LLVM ERROR: Broken module found, compilation aborted! (fragment covers entire variable)", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-03-10T13:14:52Z", "updated_at": "2019-01-16T14:06:50Z", "closed_at": "2019-01-16T14:06:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to compile Rust myself, got an error at stage2 (I think)\r\n\r\nSearch yielded similar issues(though none had \"fragment covers entire variable\") which led me to believe this might be an actual issue rather than a side effect of my (potentially poorly)overclocking of the CPU.\r\n\r\nHere's the gist of what I tried and the error it gave:\r\n\r\n```rust\r\n$ ./go\r\n~/build/2nonpkgs/rust.stuff/rust/rust ~/build/2nonpkgs/rust.stuff/rust\r\n./go:47+ ./x.py build -j 5\r\n...\r\n...\r\n   Compiling rustc_borrowck v0.0.0 (file:///home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/src/librustc_borrowck)\r\n   Compiling rustc_lint v0.0.0 (file:///home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/src/librustc_lint)\r\nfragment covers entire variable\r\n!23740 = !DIGlobalVariableExpression(var: !23741, expr: !DIExpression(DW_OP_LLVM_fragment, 0, 64))\r\n!23741 = distinct !DIGlobalVariable(name: \"LOAD\", linkageName: \"_ZN12rustc_driver9get_trans4LOAD17h8dc5df5db2bb1a6fE\", scope: !23592, file: !23593, line: 231, type: !23742, isLocal: true, isDefinition: true, align: 8)\r\nLLVM ERROR: Broken module found, compilation aborted!\r\nerror: Could not compile `rustc_driver`.\r\n\r\nCaused by:\r\n  process didn't exit successfully: `/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/bootstrap/debug/rustc --crate-name rustc_driver librustc_driver/lib.rs --error-format json --crate-type dylib --emit=dep-info,link -C prefer-dynamic -C opt-level=2 -C metadata=ba5e06d30aeaef61 -C extra-filename=-ba5e06d30aeaef61 --out-dir /home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps --target x86_64-unknown-linux-gnu -L dependency=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps -L dependency=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/release/deps --extern rustc_save_analysis=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_save_analysis-ee5cc41ef09e6ca9.so --extern rustc_allocator=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_allocator-6a3a53daf543dc86.so --extern rustc_passes=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_passes-32046e7444dc6fac.so --extern env_logger=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libenv_logger-29ff24175ab0c6ba.rlib --extern rustc_privacy=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_privacy-eb4889114e053ca7.so --extern syntax_pos=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libsyntax_pos-6fcb8cd384d94634.so --extern rustc=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc-32b8cee31f0277e6.so --extern syntax=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libsyntax-8bbebfad9d71e41e.so --extern rustc_trans_utils=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_trans_utils-ab5f0ef7e0f536b9.so --extern rustc_mir=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_mir-cb9fccdc67ba7f50.so --extern rustc_incremental=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_incremental-0b87f9d6db1f3577.so --extern rustc_borrowck=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_borrowck-d95d3f15d7a641ee.so --extern rustc_back=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_back-dcb454ac9bdff42b.so --extern rustc_lint=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_lint-bcc2494c9ac6ced3.so --extern syntax_ext=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libsyntax_ext-6be63d3cc96e72c6.so --extern rustc_plugin=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_plugin-b4c8c21f2933b20a.so --extern serialize=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libserialize-2088bb8d0f6cf881.so --extern serialize=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libserialize-2088bb8d0f6cf881.rlib --extern rustc_typeck=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_typeck-fba28049a6bc6b13.so --extern rustc_errors=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_errors-307dcb08edb0ddd7.so --extern arena=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libarena-c1d2f744a52cb320.so --extern ar=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libar-2f3fbd344a0f85e3.rlib --extern rustc_resolve=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_resolve-c459fc2b6be69a48.so --extern graphviz=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libgraphviz-a4b3e86dc16f8f61.so --extern rustc_data_structures=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_data_structures-058d422a245267f2.so --extern rustc_metadata=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_metadata-3ac6226cd424bf6a.so --extern log=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/liblog-fdb5f9db9cfe06cf.rlib -L native=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/build/backtrace-sys-71e8b7da0c44cfd2/out/.libs -L native=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/build/miniz-sys-6a47b7e00246ad4d/out` (exit code: 1)\r\nthread 'main' panicked at 'command did not execute successfully: \"/home/xftroxgpx/.cargo/bin/cargo\" \"build\" \"--target\" \"x86_64-unknown-linux-gnu\" \"--release\" \"--features\" \" jemalloc\" \"--manifest-path\" \"/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/src/rustc/Cargo.toml\" \"--message-format\" \"json\"\r\nexpected success, got: exit code: 101', bootstrap/compile.rs:1096:9\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\nfailed to run: /home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/bootstrap/debug/bootstrap build -j 5\r\nBuild completed unsuccessfully in 1:38:45\r\n\r\n$ ./go\r\n~/build/2nonpkgs/rust.stuff/rust/rust ~/build/2nonpkgs/rust.stuff/rust\r\n./go:47+ ./x.py build -j 5\r\nUpdating submodules\r\n    Finished dev [unoptimized] target(s) in 0.0 secs\r\nBuilding stage0 std artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.0 secs\r\nCopying stage0 std from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage0 test artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.0 secs\r\nCopying stage0 test from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage0 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.0 secs\r\nCopying stage0 rustc from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage0 codegen artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu, llvm)\r\n    Finished release [optimized] target(s) in 0.0 secs\r\nAssembling stage1 compiler (x86_64-unknown-linux-gnu)\r\nBuilding stage1 std artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.0 secs\r\nCopying stage1 std from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage1 test artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.0 secs\r\nCopying stage1 test from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage1 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\n   Compiling rustc_driver v0.0.0 (file:///home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/src/librustc_driver)\r\nfragment covers entire variable\r\n!23740 = !DIGlobalVariableExpression(var: !23741, expr: !DIExpression(DW_OP_LLVM_fragment, 0, 64))\r\n!23741 = distinct !DIGlobalVariable(name: \"LOAD\", linkageName: \"_ZN12rustc_driver9get_trans4LOAD17h8dc5df5db2bb1a6fE\", scope: !23592, file: !23593, line: 231, type: !23742, isLocal: true, isDefinition: true, align: 8)\r\nLLVM ERROR: Broken module found, compilation aborted!\r\nerror: Could not compile `rustc_driver`.\r\n\r\nCaused by:\r\n  process didn't exit successfully: `/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/bootstrap/debug/rustc --crate-name rustc_driver librustc_driver/lib.rs --error-format json --crate-type dylib --emit=dep-info,link -C prefer-dynamic -C opt-level=2 -C metadata=ba5e06d30aeaef61 -C extra-filename=-ba5e06d30aeaef61 --out-dir /home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps --target x86_64-unknown-linux-gnu -L dependency=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps -L dependency=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/release/deps --extern rustc_lint=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_lint-bcc2494c9ac6ced3.so --extern graphviz=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libgraphviz-a4b3e86dc16f8f61.so --extern ar=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libar-2f3fbd344a0f85e3.rlib --extern arena=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libarena-c1d2f744a52cb320.so --extern rustc_save_analysis=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_save_analysis-ee5cc41ef09e6ca9.so --extern serialize=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libserialize-2088bb8d0f6cf881.so --extern serialize=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libserialize-2088bb8d0f6cf881.rlib --extern rustc_resolve=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_resolve-c459fc2b6be69a48.so --extern rustc_borrowck=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_borrowck-d95d3f15d7a641ee.so --extern rustc_passes=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_passes-32046e7444dc6fac.so --extern env_logger=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libenv_logger-29ff24175ab0c6ba.rlib --extern rustc_trans_utils=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_trans_utils-ab5f0ef7e0f536b9.so --extern rustc_data_structures=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_data_structures-058d422a245267f2.so --extern syntax_pos=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libsyntax_pos-6fcb8cd384d94634.so --extern rustc_incremental=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_incremental-0b87f9d6db1f3577.so --extern rustc_back=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_back-dcb454ac9bdff42b.so --extern log=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/liblog-fdb5f9db9cfe06cf.rlib --extern syntax=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libsyntax-8bbebfad9d71e41e.so --extern rustc_metadata=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_metadata-3ac6226cd424bf6a.so --extern rustc_allocator=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_allocator-6a3a53daf543dc86.so --extern rustc_mir=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_mir-cb9fccdc67ba7f50.so --extern syntax_ext=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libsyntax_ext-6be63d3cc96e72c6.so --extern rustc_privacy=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_privacy-eb4889114e053ca7.so --extern rustc_errors=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_errors-307dcb08edb0ddd7.so --extern rustc_typeck=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_typeck-fba28049a6bc6b13.so --extern rustc=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc-32b8cee31f0277e6.so --extern rustc_plugin=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_plugin-b4c8c21f2933b20a.so -L native=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/build/backtrace-sys-71e8b7da0c44cfd2/out/.libs -L native=/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/build/miniz-sys-6a47b7e00246ad4d/out` (exit code: 1)\r\nthread 'main' panicked at 'command did not execute successfully: \"/home/xftroxgpx/.cargo/bin/cargo\" \"build\" \"--target\" \"x86_64-unknown-linux-gnu\" \"--release\" \"--features\" \" jemalloc\" \"--manifest-path\" \"/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/src/rustc/Cargo.toml\" \"--message-format\" \"json\"\r\nexpected success, got: exit code: 101', bootstrap/compile.rs:1096:9\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\nfailed to run: /home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/rust/build/bootstrap/debug/bootstrap build -j 5\r\nBuild completed unsuccessfully in 0:02:25\r\n\r\n```\r\n\r\nRustc source was at this HEAD:\r\ncommit 3edb3cc26c4030e62f26fd5f0d9d53fb7b78d618 (HEAD -> master, origin/master, origin/HEAD)\r\nDate:   Sat Mar 10 03:38:19 2018 +0000\r\n**EDIT:** forgot to mention cargo version:\r\n```\r\n$ /home/xftroxgpx/.cargo/bin/cargo -vV\r\ncargo 0.26.0-nightly (1d6dfea44 2018-01-26)\r\nrelease: 0.26.0\r\ncommit-hash: 1d6dfea44f97199d5d5c177c7dadcde393eaff9a\r\ncommit-date: 2018-01-26\r\n```\r\n\r\n<details><summary>Config.toml</summary>\r\n\r\n```toml\r\n# Sample TOML configuration file for building Rust.\r\n#\r\n# To configure rustbuild, copy this file to the directory from which you will be\r\n# running the build, and name it config.toml.\r\n#\r\n# All options are commented out by default in this file, and they're commented\r\n# out with their default values. The build system by default looks for\r\n# `config.toml` in the current directory of a build for build configuration, but\r\n# a custom configuration file can also be specified with `--config` to the build\r\n# system.\r\n\r\n# =============================================================================\r\n# Tweaking how LLVM is compiled\r\n# =============================================================================\r\n[llvm]\r\n\r\n# Indicates whether rustc will support compilation with LLVM\r\n# note: rustc does not compile without LLVM at the moment\r\n#enabled = true\r\n\r\n# Indicates whether the LLVM build is a Release or Debug build\r\n#optimize = true\r\noptimize = true\r\n\r\n# Indicates whether an LLVM Release build should include debug info\r\n#release-debuginfo = false\r\nrelease-debuginfo = false\r\n\r\n# Indicates whether the LLVM assertions are enabled or not\r\n#assertions = false\r\nassertions = false\r\n\r\n# Indicates whether ccache is used when building LLVM\r\n#ccache = false\r\n# or alternatively ...\r\n#ccache = \"/path/to/ccache\"\r\nccache = \"/usr/bin/ccache\"\r\n\r\n# If an external LLVM root is specified, we automatically check the version by\r\n# default to make sure it's within the range that we're expecting, but setting\r\n# this flag will indicate that this version check should not be done.\r\n#version-check = true\r\n\r\n# Link libstdc++ statically into the librustc_llvm instead of relying on a\r\n# dynamic version to be available.\r\n#static-libstdcpp = false\r\nstatic-libstdcpp = false\r\n\r\n# Tell the LLVM build system to use Ninja instead of the platform default for\r\n# the generated build system. This can sometimes be faster than make, for\r\n# example.\r\n#ninja = false\r\nninja = true\r\n\r\n# LLVM targets to build support for.\r\n# Note: this is NOT related to Rust compilation targets. However, as Rust is\r\n# dependent on LLVM for code generation, turning targets off here WILL lead to\r\n# the resulting rustc being unable to compile for the disabled architectures.\r\n# Also worth pointing out is that, in case support for new targets are added to\r\n# LLVM, enabling them here doesn't mean Rust is automatically gaining said\r\n# support. You'll need to write a target specification at least, and most\r\n# likely, teach rustc about the C ABI of the target. Get in touch with the\r\n# Rust team and file an issue if you need assistance in porting!\r\n#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\"\r\ntargets = \"X86\"\r\n#;ARM;Mips\"\r\n\r\n# LLVM experimental targets to build support for. These targets are specified in\r\n# the same format as above, but since these targets are experimental, they are\r\n# not built by default and the experimental Rust compilation targets that depend\r\n# on them will not work unless the user opts in to building them. By default the\r\n# `WebAssembly` target is enabled when compiling LLVM from scratch.\r\n#experimental-targets = \"WebAssembly\"\r\n\r\n# Cap the number of parallel linker invocations when compiling LLVM.\r\n# This can be useful when building LLVM with debug info, which significantly\r\n# increases the size of binaries and consequently the memory required by\r\n# each linker process.\r\n# If absent or 0, linker invocations are treated like any other job and\r\n# controlled by rustbuild's -j parameter.\r\n#link-jobs = 0\r\nlink-jobs = 4\r\n\r\n# When invoking `llvm-config` this configures whether the `--shared` argument is\r\n# passed to prefer linking to shared libraries.\r\n#link-shared = false\r\n\r\n# =============================================================================\r\n# General build configuration options\r\n# =============================================================================\r\n[build]\r\n\r\n# Build triple for the original snapshot compiler. This must be a compiler that\r\n# nightlies are already produced for. The current platform must be able to run\r\n# binaries of this build triple and the nightly will be used to bootstrap the\r\n# first compiler.\r\n#build = \"x86_64-unknown-linux-gnu\"    # defaults to your host platform\r\nbuild = \"x86_64-unknown-linux-gnu\"\r\n\r\n# In addition to the build triple, other triples to produce full compiler\r\n# toolchains for. Each of these triples will be bootstrapped from the build\r\n# triple and then will continue to bootstrap themselves. This platform must\r\n# currently be able to run all of the triples provided here.\r\n#host = [\"x86_64-unknown-linux-gnu\"]   # defaults to just the build triple\r\nhost = [\"x86_64-unknown-linux-gnu\"]\r\n\r\n# In addition to all host triples, other triples to produce the standard library\r\n# for. Each host triple will be used to produce a copy of the standard library\r\n# for each target triple.\r\n#target = [\"x86_64-unknown-linux-gnu\"] # defaults to just the build triple\r\ntarget = [\"x86_64-unknown-linux-gnu\", \"i686-unknown-linux-gnu\" ]\r\n#note: added i686-unknown-linux-gnu to be able to compile /home/xftroxgpx/build/2nonpkgs/rust.stuff/rustlearnage/usize/go_32bit\r\n\r\n# Instead of downloading the src/stage0.txt version of Cargo specified, use\r\n# this Cargo binary instead to build all Rust code\r\n#cargo = \"/path/to/bin/cargo\"\r\ncargo = \"/home/xftroxgpx/.cargo/bin/cargo\"\r\n#^ brought by rustup !\r\n\r\n# Instead of downloading the src/stage0.txt version of the compiler\r\n# specified, use this rustc binary instead as the stage0 snapshot compiler.\r\n#rustc = \"/path/to/bin/rustc\"\r\n#rustc = \"/home/xftroxgpx/.cargo/bin/rustc\" #this fails as follows:\r\n#^ brought by rustup !\r\n#rustc = \"/home/xftroxgpx/bin/rustc\"\r\n#^ will use the rustup version unless we already have a stage2,1 or 0 rustc; this fails as follows:\r\n#XXX: don't set rustc here, or you'll hit this https://github.com/rust-lang/rust/pull/47006#issuecomment-360561167 (see comment above that)  and local-rebuild must not be true also!\r\n\r\n\r\n# Flag to specify whether any documentation is built. If false, rustdoc and\r\n# friends will still be compiled but they will not be used to generate any\r\n# documentation.\r\n#docs = true\r\ndocs = true\r\n\r\n# Indicate whether the compiler should be documented in addition to the standard\r\n# library and facade crates.\r\n#compiler-docs = false\r\ncompiler-docs = true\r\n\r\n# Indicate whether submodules are managed and updated automatically.\r\n#submodules = true\r\nsubmodules = true\r\n\r\n# The path to (or name of) the GDB executable to use. This is only used for\r\n# executing the debuginfo test suite.\r\n#gdb = \"gdb\"\r\n\r\n# The node.js executable to use. Note that this is only used for the emscripten\r\n# target when running tests, otherwise this can be omitted.\r\n#nodejs = \"node\"\r\n\r\n# Python interpreter to use for various tasks throughout the build, notably\r\n# rustdoc tests, the lldb python interpreter, and some dist bits and pieces.\r\n# Note that Python 2 is currently required.\r\n#python = \"python2.7\"\r\n\r\n# Force Cargo to check that Cargo.lock describes the precise dependency\r\n# set that all the Cargo.toml files create, instead of updating it.\r\n#locked-deps = false\r\nlocked-deps = false\r\n\r\n# Indicate whether the vendored sources are used for Rust dependencies or not\r\n#vendor = false\r\n\r\n# Typically the build system will build the rust compiler twice. The second\r\n# compiler, however, will simply use its own libraries to link against. If you\r\n# would rather to perform a full bootstrap, compiling the compiler three times,\r\n# then you can set this option to true. You shouldn't ever need to set this\r\n# option to true.\r\n#full-bootstrap = false\r\nfull-bootstrap = false\r\n\r\n# Enable a build of the extended rust tool set which is not only the compiler\r\n# but also tools such as Cargo. This will also produce \"combined installers\"\r\n# which are used to install Rust and Cargo together. This is disabled by\r\n# default.\r\n#extended = false\r\nextended = false\r\n\r\n# Installs chosen set of extended tools if enables. By default builds all.\r\n# If chosen tool failed to build the installation fails.\r\n#tools = [\"cargo\", \"rls\", \"rustfmt\", \"analysis\", \"src\"]\r\n\r\n# Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\r\n#verbose = 0\r\nverbose = 0\r\n\r\n# Build the sanitizer runtimes\r\n#sanitizers = false\r\nsanitizers = false\r\n\r\n# Build the profiler runtime\r\n#profiler = false\r\nprofiler = false\r\n\r\n# Indicates whether the OpenSSL linked into Cargo will be statically linked or\r\n# not. If static linkage is specified then the build system will download a\r\n# known-good version of OpenSSL, compile it, and link it to Cargo.\r\n#openssl-static = false\r\nopenssl-static = false\r\n\r\n# Run the build with low priority, by setting the process group's \"nice\" value\r\n# to +10 on Unix platforms, and by using a \"low priority\" job object on Windows.\r\n#low-priority = false\r\nlow-priority = true\r\n\r\n# Arguments passed to the `./configure` script, used during distcheck. You\r\n# probably won't fill this in but rather it's filled in by the `./configure`\r\n# script.\r\n#configure-args = []\r\n\r\n# Indicates that a local rebuild is occurring instead of a full bootstrap,\r\n# essentially skipping stage0 as the local compiler is recompiling itself again.\r\n#local-rebuild = false\r\n#local-rebuild = true #don't to true here or you'll hit this https://github.com/rust-lang/rust/pull/47006#issuecomment-360561167 (see comment above that) and [build] rustc must not be set also!\r\n\r\n# =============================================================================\r\n# General install configuration options\r\n# =============================================================================\r\n[install]\r\n\r\n# Instead of installing to /usr/local, install to this path instead.\r\n#prefix = \"/usr/local\"\r\n\r\n# Where to install system configuration files\r\n# If this is a relative path, it will get installed in `prefix` above\r\n#sysconfdir = \"/etc\"\r\n\r\n# Where to install documentation in `prefix` above\r\n#docdir = \"share/doc/rust\"\r\n\r\n# Where to install binaries in `prefix` above\r\n#bindir = \"bin\"\r\n\r\n# Where to install libraries in `prefix` above\r\n#libdir = \"lib\"\r\n\r\n# Where to install man pages in `prefix` above\r\n#mandir = \"share/man\"\r\n\r\n# Where to install data in `prefix` above (currently unused)\r\n#datadir = \"share\"\r\n\r\n# Where to install additional info in `prefix` above (currently unused)\r\n#infodir = \"share/info\"\r\n\r\n# Where to install local state (currently unused)\r\n# If this is a relative path, it will get installed in `prefix` above\r\n#localstatedir = \"/var/lib\"\r\n\r\n# =============================================================================\r\n# Options for compiling Rust code itself\r\n# =============================================================================\r\n[rust]\r\n\r\n# Indicates that the build should be optimized for debugging Rust. Note that\r\n# this is typically not what you want as it takes an incredibly large amount of\r\n# time to have a debug-mode rustc compile any code (notably libstd). If this\r\n# value is set to `true` it will affect a number of configuration options below\r\n# as well, if unconfigured.\r\n#debug = false\r\n\r\n# Whether or not to optimize the compiler and standard library\r\n# Note: the slowness of the non optimized compiler compiling itself usually\r\n#       outweighs the time gains in not doing optimizations, therefore a\r\n#       full bootstrap takes much more time with optimize set to false.\r\n#optimize = true\r\noptimize = true\r\n\r\n# Number of codegen units to use for each compiler invocation. A value of 0\r\n# means \"the number of cores on this machine\", and 1+ is passed through to the\r\n# compiler.\r\n#codegen-units = 1\r\ncodegen-units = 1 #We currently have the capability to do multiple codegen units in parallel. Unfortunately, one drawback of using this functionality is that using multiple codegen units loses optimization opportunities, like inlining, between the units. src: https://internals.rust-lang.org/t/towards-a-second-edition-of-the-compiler/5582\r\n\r\n# Whether to enable ThinLTO (and increase the codegen units to either a default\r\n# or the configured value). On by default. If we want the fastest possible\r\n# compiler, we should disable this.\r\n#thinlto = true\r\nthinlto = false\r\n\r\n# Whether or not debug assertions are enabled for the compiler and standard\r\n# library. Also enables compilation of debug! and trace! logging macros.\r\n#debug-assertions = false\r\ndebug-assertions = true  #that delay issue isn't fixed yet (rustc -vV with RUST_BACKTRACE=1) well, let's see now: https://github.com/ianlancetaylor/libbacktrace/commit/b0d690331db157f53ac4a8bd9d4bb7513a561d90.patch\r\n#debug-assertions = false\r\n\r\n# Whether or not debuginfo is emitted\r\n#debuginfo = false\r\ndebuginfo = true\r\n\r\n# Whether or not line number debug information is emitted\r\n#debuginfo-lines = false\r\ndebuginfo-lines = true\r\n\r\n# Whether or not to only build debuginfo for the standard library if enabled.\r\n# If enabled, this will not compile the compiler with debuginfo, just the\r\n# standard library.\r\ndebuginfo-only-std = false\r\n#debuginfo-only-std = true\r\n\r\n# Whether or not jemalloc is built and enabled\r\n#use-jemalloc = true\r\n\r\n# Whether or not jemalloc is built with its debug option set\r\n#debug-jemalloc = false\r\ndebug-jemalloc = false\r\n\r\n# Whether or not `panic!`s generate backtraces (RUST_BACKTRACE)\r\n#backtrace = true\r\nbacktrace = true\r\n\r\n# The default linker that will be hard-coded into the generated compiler for\r\n# targets that don't specify linker explicitly in their target specifications.\r\n# Note that this is not the linker used to link said compiler.\r\n#default-linker = \"cc\"\r\n\r\n# The default ar utility that will be used by the generated compiler if LLVM\r\n# cannot be used. Note that this is not used to assemble said compiler.\r\n#default-ar = \"ar\"\r\n\r\n# The \"channel\" for the Rust build to produce. The stable/beta channels only\r\n# allow using stable features, whereas the nightly and dev channels allow using\r\n# nightly features\r\n#channel = \"dev\"\r\nchannel = \"dev\"\r\n\r\n# By default the `rustc` executable is built with `-Wl,-rpath` flags on Unix\r\n# platforms to ensure that the compiler is usable by default from the build\r\n# directory (as it links to a number of dynamic libraries). This may not be\r\n# desired in distributions, for example.\r\n#rpath = true\r\nrpath = true\r\n\r\n# Suppresses extraneous output from tests to ensure the output of the test\r\n# harness is relatively clean.\r\n#quiet-tests = false\r\nquiet-tests = true\r\n\r\n# Flag indicating whether tests are compiled with optimizations (the -O flag) or\r\n# with debuginfo (the -g flag)\r\n#optimize-tests = true\r\n#debuginfo-tests = true\r\noptimize-tests = false\r\ndebuginfo-tests = false\r\n\r\n# Flag indicating whether codegen tests will be run or not. If you get an error\r\n# saying that the FileCheck executable is missing, you may want to disable this.\r\n#codegen-tests = true\r\ncodegen-tests = false #for no good reason; just to be sure\r\n\r\n# Flag indicating whether git info will be retrieved from .git automatically.\r\n# Having the git information can cause a lot of rebuilds during development.\r\n# Note: If this attribute is not explicitly set (e.g. if left commented out) it\r\n# will default to true if channel = \"dev\", but will default to false otherwise.\r\n#ignore-git = true\r\nignore-git = false #i don't get it! what git information and why will it cause rebuilds?\r\n\r\n# When creating source tarballs whether or not to create a source tarball.\r\n#dist-src = false\r\n\r\n# Whether to also run the Miri tests suite when running tests.\r\n# As a side-effect also generates MIR for all libraries.\r\n#test-miri = false\r\n\r\n# After building or testing extended tools (e.g. clippy and rustfmt), append the\r\n# result (broken, compiling, testing) into this JSON file.\r\n#save-toolstates = \"/path/to/toolstates.json\"\r\n\r\n# This is an array of the codegen backends that will be compiled for the rustc\r\n# that's being compiled. The default is to only build the LLVM codegen backend,\r\n# but you can also optionally enable the \"emscripten\" backend for asm.js or\r\n# make this an empty array (but that probably won't get too far in the\r\n# bootstrap)\r\n#codegen-backends = [\"llvm\"]\r\n\r\n# This is the name of the directory in which codegen backends will get installed\r\n#codegen-backends-dir = \"codegen-backends\"\r\n\r\n# Flag indicating whether `libstd` calls an imported function to handle basic IO\r\n# when targeting WebAssembly. Enable this to debug tests for the `wasm32-unknown-unknown`\r\n# target, as without this option the test output will not be captured.\r\n#wasm-syscall = false\r\n\r\n# Indicates whether LLD will be compiled and made available in the sysroot for\r\n# rustc to execute.\r\nlld = false\r\n\r\n\r\n# =============================================================================\r\n# Options for specific targets\r\n#\r\n# Each of the following options is scoped to the specific target triple in\r\n# question and is used for determining how to compile each target.\r\n# =============================================================================\r\n[target.x86_64-unknown-linux-gnu]\r\n\r\n# C compiler to be used to compiler C code. Note that the\r\n# default value is platform specific, and if not specified it may also depend on\r\n# what platform is crossing to what platform.\r\n#cc = \"cc\"\r\n\r\n# C++ compiler to be used to compiler C++ code (e.g. LLVM and our LLVM shims).\r\n# This is only used for host targets.\r\n#cxx = \"c++\"\r\n\r\n# Archiver to be used to assemble static libraries compiled from C/C++ code.\r\n# Note: an absolute path should be used, otherwise LLVM build will break.\r\n#ar = \"ar\"\r\n\r\n# Linker to be used to link Rust code. Note that the\r\n# default value is platform specific, and if not specified it may also depend on\r\n# what platform is crossing to what platform.\r\n#linker = \"cc\"\r\n\r\n# Path to the `llvm-config` binary of the installation of a custom LLVM to link\r\n# against. Note that if this is specified we don't compile LLVM at all for this\r\n# target.\r\n#llvm-config = \"../path/to/llvm/root/bin/llvm-config\"\r\n\r\n# Path to the custom jemalloc static library to link into the standard library\r\n# by default. This is only used if jemalloc is still enabled above\r\n#jemalloc = \"/path/to/jemalloc/libjemalloc_pic.a\"\r\n\r\n# If this target is for Android, this option will be required to specify where\r\n# the NDK for the target lives. This is used to find the C compiler to link and\r\n# build native code.\r\n#android-ndk = \"/path/to/ndk\"\r\n\r\n# Force static or dynamic linkage of the standard library for this target. If\r\n# this target is a host for rustc, this will also affect the linkage of the\r\n# compiler itself. This is useful for building rustc on targets that normally\r\n# only use static libraries. If unset, the target's default linkage is used.\r\n#crt-static = false\r\n\r\n# The root location of the MUSL installation directory. The library directory\r\n# will also need to contain libunwind.a for an unwinding implementation. Note\r\n# that this option only makes sense for MUSL targets that produce statically\r\n# linked binaries\r\n#musl-root = \"...\"\r\n\r\n# Used in testing for configuring where the QEMU images are located, you\r\n# probably don't want to use this.\r\n#qemu-rootfs = \"...\"\r\n\r\n# =============================================================================\r\n# Distribution options\r\n#\r\n# These options are related to distribution, mostly for the Rust project itself.\r\n# You probably won't need to concern yourself with any of these options\r\n# =============================================================================\r\n[dist]\r\n\r\n# This is the folder of artifacts that the build system will sign. All files in\r\n# this directory will be signed with the default gpg key using the system `gpg`\r\n# binary. The `asc` and `sha256` files will all be output into the standard dist\r\n# output folder (currently `build/dist`)\r\n#\r\n# This folder should be populated ahead of time before the build system is\r\n# invoked.\r\n#sign-folder = \"path/to/folder/to/sign\"\r\n\r\n# This is a file which contains the password of the default gpg key. This will\r\n# be passed to `gpg` down the road when signing all files in `sign-folder`\r\n# above. This should be stored in plaintext.\r\n#gpg-password-file = \"path/to/gpg/password\"\r\n\r\n# The remote address that all artifacts will eventually be uploaded to. The\r\n# build system generates manifests which will point to these urls, and for the\r\n# manifests to be correct they'll have to have the right URLs encoded.\r\n#\r\n# Note that this address should not contain a trailing slash as file names will\r\n# be appended to it.\r\n#upload-addr = \"https://example.com/folder\"\r\n\r\n# Whether to build a plain source tarball to upload\r\n# We disable that on Windows not to override the one already uploaded on S3\r\n# as the one built on Windows will contain backslashes in paths causing problems\r\n# on linux\r\n#src-tarball = true\r\nsrc-tarball = false\r\n```\r\n\r\n</details>\r\n\r\n<details><summary>full compilation output</summary>\r\n\r\ngithub said: There was an error creating your Issue: body is too long (maximum is 65536 characters).\r\n\r\nErgo, here's a link to it instead: https://gist.github.com/xftroxgpx/5eef3141eab2e4ccdfe0fa3255ff921d\r\n\r\nThe `./go` script is this: https://github.com/xftroxgpx/a3/blob/3a55477fcc718cf39d33fc6844c83f566091657d/system/Z575/OSes/3archlinux/on_baremetal/filesystem_now/archlinux/home/xftroxgpx/build/2nonpkgs/rust.stuff/rust/go#L47\r\n\r\n</details>", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48910/timeline", "performed_via_github_app": null, "state_reason": "completed"}