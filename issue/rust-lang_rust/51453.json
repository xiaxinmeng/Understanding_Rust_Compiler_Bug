{"url": "https://api.github.com/repos/rust-lang/rust/issues/51453", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51453/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51453/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51453/events", "html_url": "https://github.com/rust-lang/rust/issues/51453", "id": 330886653, "node_id": "MDU6SXNzdWUzMzA4ODY2NTM=", "number": 51453, "title": "std::process:Command blocks with child.wait() and stdout \"piped\"", "user": {"login": "harcobbit-zz", "id": 14170299, "node_id": "MDQ6VXNlcjE0MTcwMjk5", "avatar_url": "https://avatars.githubusercontent.com/u/14170299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harcobbit-zz", "html_url": "https://github.com/harcobbit-zz", "followers_url": "https://api.github.com/users/harcobbit-zz/followers", "following_url": "https://api.github.com/users/harcobbit-zz/following{/other_user}", "gists_url": "https://api.github.com/users/harcobbit-zz/gists{/gist_id}", "starred_url": "https://api.github.com/users/harcobbit-zz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harcobbit-zz/subscriptions", "organizations_url": "https://api.github.com/users/harcobbit-zz/orgs", "repos_url": "https://api.github.com/users/harcobbit-zz/repos", "events_url": "https://api.github.com/users/harcobbit-zz/events{/privacy}", "received_events_url": "https://api.github.com/users/harcobbit-zz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-09T13:22:04Z", "updated_at": "2023-01-26T20:57:52Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have 2 applications that spawn a new process with stdout redirected to `Stdio::piped()`. The command is executed through `spawn()` call.\r\n\r\nI'm waiting until process will finish through `child.wait()` interface. If the output of the command is large(several thousands lines) then the process is blocked. If I read the output of the child with some buffer then it works fine and the process doesn't block.\r\n\r\nIf the output of the command is small then the process doesn't block, I don't have to read the output through a buffer or something similar.\r\n\r\n```rust\r\nuse std::io::Read;\r\nuse std::process::{Command, Stdio};\r\nfn main() {\r\n    let mut child = Command::new(\"ls\")\r\n        .args(&[\"-R\", \"/home/carlos/rust\"]) // output of this command is several thousands lines\r\n        //.args(&[\"/home/carlos/rust\"])  // output of this command is only few lines\r\n        .stdout(Stdio::piped())\r\n        .spawn()\r\n        .expect(\"Cannot be executed\");\r\n\r\n\r\n    // If I read the output of the child, then it works fine, it doesn't matter if the output is\r\n    // big or not.\r\n\r\n    //{\r\n    //let mut buffer: String = String::new();\r\n    //child.stdout.as_mut().unwrap().read_to_string(&mut buffer);\r\n    //println!(\r\n    //\"the output is {:?}\",\r\n    //buffer\r\n    //);\r\n    //}\r\n\r\n    child.wait();\r\n    println!(\"Finish\");\r\n}\r\n```\r\nThese are the number of lines and the execution time of the output command from terminal:\r\n```\r\n\u21d2  time ls -R /home/carlos/rust | wc -l\r\n   15532\r\nls -G -R /home/carlos/rust  0,04s user 0,03s system 99% cpu 0,074 total\r\nwc -l  0,00s user 0,00s system 3% cpu 0,074 total\r\n\r\n\u21d2  time ls /home/carlos/rust | wc -l\r\n      16\r\nls -G /home/carlos/rust  0,00s user 0,00s system 81% cpu 0,003 total\r\nwc -l  0,00s user 0,00s system 53% cpu 0,003 total\r\n```\r\nI don't know which one should be the right behavior but I guess that it should be the same in both cases, the size of the output shouldn't impact on it.\r\n\r\nIn my opinion, if the output of the command is stored on the field `stdout` of the variable `child`, then the command should finish and if you want to read the output you can read it through `child.stdout`.\r\n\r\nI guess there is a limit on the buffer size of the `child.stdout` so if the output is bigger than its default size then the application blocks until \"someone\" reads this buffer before fill it again. In this case you avoid to store a lot of information in memory but I don't see any reference to that in the documentation.\r\n```\r\n\u21d2  rustc --version --verbose\r\nrustc 1.26.0\r\nbinary: rustc\r\ncommit-hash: unknown\r\ncommit-date: unknown\r\nhost: x86_64-unknown-freebsd\r\nrelease: 1.26.0\r\nLLVM version: 6.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51453/timeline", "performed_via_github_app": null, "state_reason": null}