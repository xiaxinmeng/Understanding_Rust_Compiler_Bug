{"url": "https://api.github.com/repos/rust-lang/rust/issues/72926", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72926/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72926/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72926/events", "html_url": "https://github.com/rust-lang/rust/issues/72926", "id": 629494349, "node_id": "MDU6SXNzdWU2Mjk0OTQzNDk=", "number": 72926, "title": "Add an attribute for asserting variance of generic parameters", "user": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-02T20:32:00Z", "updated_at": "2020-06-03T18:21:04Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, we don't have any kind of programmatic way of ensuring that we don't accidentally change the variances of any `libcore`/`libstd` types. While some types do have explicit tests for variance (e.g. [here](https://github.com/rust-lang/rust/commit/bf592cefde313aed68bccc91c053f5912350249b#diff-f9e71018920a56a1532da2e8fb8d02cdR1005-R1007) and in PR https://github.com/rust-lang/rust/pull/72902), this is not done in any kind of systematic way.\r\n\r\nI think it would be useful to have an internal `#[variance(Co/Contra/In)]` (names bikesheddable) which causes an error if the actual and expected variances do not match.\r\n\r\nWe could require that every generic parameter on every public type have a `#[variance]` attribute, similar to how we require `#[stable]`/`#[unstable]`. However, this could end up being unnecessarily verbose, especially if most types are covariant. Instead, we might want to treat the absence of a `#[variance]` annotation as an implicit `#[variance(Covariant)]` (or `#[variance(Invariant)]` for const generics). If covariance is normally what we want, then this would only require us to annotate cases where something 'unusual' is happening. Of course, we would run the risk of cases like https://github.com/rust-lang/rust/pull/71814 'slipping under the radar', where the generic parameter really should have been invariant to begin with.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72926/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72926/timeline", "performed_via_github_app": null, "state_reason": null}