{"url": "https://api.github.com/repos/rust-lang/rust/issues/43653", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43653/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43653/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43653/events", "html_url": "https://github.com/rust-lang/rust/issues/43653", "id": 248166907, "node_id": "MDU6SXNzdWUyNDgxNjY5MDc=", "number": 43653, "title": "Performance: fails to inline struct field access and keep it in the register.", "user": {"login": "dpc", "id": 9209, "node_id": "MDQ6VXNlcjkyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/9209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpc", "html_url": "https://github.com/dpc", "followers_url": "https://api.github.com/users/dpc/followers", "following_url": "https://api.github.com/users/dpc/following{/other_user}", "gists_url": "https://api.github.com/users/dpc/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpc/subscriptions", "organizations_url": "https://api.github.com/users/dpc/orgs", "repos_url": "https://api.github.com/users/dpc/repos", "events_url": "https://api.github.com/users/dpc/events{/privacy}", "received_events_url": "https://api.github.com/users/dpc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-08-05T06:54:12Z", "updated_at": "2017-08-10T14:12:02Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm working on optimizing rolling checksum and CDC algorithms in `rsroll` package.\r\n\r\nThe Gear algorithm which is AFAIK the fastest rolling checksum  for CDCs known, with very tight and simple loop, basically rolls over each byte [like that](https://github.com/dpc/rsroll/blob/cd2592845dfe8a687a3e1d1f1ec9186ecda9e08e/src/gear.rs#L32):\r\n\r\n```\r\n    fn roll_byte(&mut self, b: u8) {\r\n        self.digest = (self.digest << 1).wrapping_add(unsafe { *G.get_unchecked(b as usize) });\r\n    }\r\n```\r\n\r\nwhere `G : [u64; 256]` with random numbers that keep being used to update `digest`, that is checked afterwards for some condition with a binary mask.\r\n\r\nSince this loop is so tight it is basically memory access bound. Unfortunately, the generated code keeps reading and storing `self.digest` through a `r12` pointer:\r\n\r\n```\r\n   107a5:       49 8b 14 24             mov    (%r12),%rdx   /// read self.digest\r\n   107a9:       48 01 d2                add    %rdx,%rdx\r\n   107ac:       0f b6 30                movzbl (%rax),%esi\r\n   107af:       48 ff c0                inc    %rax\r\n   107b2:       48 03 14 f7             add    (%rdi,%rsi,8),%rdx\r\n   107b6:       49 89 14 24             mov    %rdx,(%r12)  // store self.digest\r\n   107ba:       48 ff c3                inc    %rbx\r\n   107bd:       49 85 d6                test   %rdx,%r14\r\n   107c0:       75 de                   jne    107a0 \r\n```\r\n\r\nWe do have an alternative implementation, where this loop is very similar but there are no abstractions, and `digest` is a local variable in a function implementing everything and not a field on `struct Gear` that implements `trait RollingHash` like here. No amount of `#[inline]` or `#[inline(always)]` is able to convince the compiler to change its mind.\r\n\r\nI am wondering if there is any workaround or fundamental reason this code (https://github.com/dpc/rsroll/blob/cd2592845dfe8a687a3e1d1f1ec9186ecda9e08e/src/gear.rs) fails to optimized better. The actual benchmark used is: https://github.com/dpc/rsroll/blob/cd2592845dfe8a687a3e1d1f1ec9186ecda9e08e/src/gear.rs#L129 and `objdump` is used to annalyze the resulting binary.", "closed_by": {"login": "dpc", "id": 9209, "node_id": "MDQ6VXNlcjkyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/9209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpc", "html_url": "https://github.com/dpc", "followers_url": "https://api.github.com/users/dpc/followers", "following_url": "https://api.github.com/users/dpc/following{/other_user}", "gists_url": "https://api.github.com/users/dpc/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpc/subscriptions", "organizations_url": "https://api.github.com/users/dpc/orgs", "repos_url": "https://api.github.com/users/dpc/repos", "events_url": "https://api.github.com/users/dpc/events{/privacy}", "received_events_url": "https://api.github.com/users/dpc/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43653/timeline", "performed_via_github_app": null, "state_reason": null}